/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={257:(t,e,n)=>{"use strict";n.d(e,{Z:()=>l});var i=n(537),o=n.n(i),r=n(645),a=n.n(r)()(o());a.push([t.id,'.tabulator {\n  position: relative;\n  border: 1px solid #999;\n  background-color: #888;\n  font-size: 14px;\n  text-align: left;\n  overflow: hidden;\n  -webkit-transform: translateZ(0);\n  -moz-transform: translateZ(0);\n  -ms-transform: translateZ(0);\n  -o-transform: translateZ(0);\n  transform: translateZ(0);\n}\n\n.tabulator[tabulator-layout="fitDataFill"] .tabulator-tableholder .tabulator-table {\n  min-width: 100%;\n}\n\n.tabulator[tabulator-layout="fitDataTable"] {\n  display: inline-block;\n}\n\n.tabulator.tabulator-block-select {\n  user-select: none;\n}\n\n.tabulator .tabulator-header {\n  position: relative;\n  box-sizing: border-box;\n  width: 100%;\n  border-bottom: 1px solid #999;\n  background-color: #e6e6e6;\n  color: #555;\n  font-weight: bold;\n  white-space: nowrap;\n  overflow: hidden;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n}\n\n.tabulator .tabulator-header.tabulator-header-hidden {\n  display: none;\n}\n\n.tabulator .tabulator-header .tabulator-header-contents {\n  position: relative;\n  overflow: hidden;\n}\n\n.tabulator .tabulator-header .tabulator-header-contents .tabulator-headers {\n  display: inline-block;\n}\n\n.tabulator .tabulator-header .tabulator-col {\n  display: inline-flex;\n  position: relative;\n  box-sizing: border-box;\n  flex-direction: column;\n  justify-content: flex-start;\n  border-right: 1px solid #aaa;\n  background: #e6e6e6;\n  text-align: left;\n  vertical-align: bottom;\n  overflow: hidden;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-moving {\n  position: absolute;\n  border: 1px solid #999;\n  background: #cdcdcd;\n  pointer-events: none;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content {\n  box-sizing: border-box;\n  position: relative;\n  padding: 4px;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-header-popup-button {\n  padding: 0 8px;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-header-popup-button:hover {\n  cursor: pointer;\n  opacity: .6;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title-holder {\n  position: relative;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title {\n  box-sizing: border-box;\n  width: 100%;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  vertical-align: bottom;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title.tabulator-col-title-wrap {\n  white-space: normal;\n  text-overflow: initial;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title .tabulator-title-editor {\n  box-sizing: border-box;\n  width: 100%;\n  border: 1px solid #999;\n  padding: 1px;\n  background: #fff;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title .tabulator-header-popup-button + .tabulator-title-editor {\n  width: calc(100% - 22px);\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter {\n  display: flex;\n  align-items: center;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  right: 4px;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n  width: 0;\n  height: 0;\n  border-left: 6px solid transparent;\n  border-right: 6px solid transparent;\n  border-bottom: 6px solid #bbb;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-group .tabulator-col-group-cols {\n  position: relative;\n  display: flex;\n  border-top: 1px solid #aaa;\n  overflow: hidden;\n  margin-right: -1px;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter {\n  position: relative;\n  box-sizing: border-box;\n  margin-top: 2px;\n  width: 100%;\n  text-align: center;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter textarea {\n  height: auto !important;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter svg {\n  margin-top: 3px;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter input::-ms-clear {\n  width: 0;\n  height: 0;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable .tabulator-col-title {\n  padding-right: 25px;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-header .tabulator-col.tabulator-sortable.tabulator-col-sorter-element:hover {\n    cursor: pointer;\n    background-color: #cdcdcd;\n  }\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="none"] .tabulator-col-content .tabulator-col-sorter {\n  color: #bbb;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="none"] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover {\n    cursor: pointer;\n    border-bottom: 6px solid #555;\n  }\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="none"] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n  border-top: none;\n  border-bottom: 6px solid #bbb;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="ascending"] .tabulator-col-content .tabulator-col-sorter {\n  color: #666;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="ascending"] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover {\n    cursor: pointer;\n    border-bottom: 6px solid #555;\n  }\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="ascending"] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n  border-top: none;\n  border-bottom: 6px solid #666;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="descending"] .tabulator-col-content .tabulator-col-sorter {\n  color: #666;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="descending"] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover {\n    cursor: pointer;\n    border-top: 6px solid #555;\n  }\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="descending"] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n  border-bottom: none;\n  border-top: 6px solid #666;\n  color: #666;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical .tabulator-col-content .tabulator-col-title {\n  writing-mode: vertical-rl;\n  text-orientation: mixed;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-col-vertical-flip .tabulator-col-title {\n  transform: rotate(180deg);\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable .tabulator-col-title {\n  padding-right: 0;\n  padding-top: 20px;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable.tabulator-col-vertical-flip .tabulator-col-title {\n  padding-right: 0;\n  padding-bottom: 20px;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable .tabulator-col-sorter {\n  justify-content: center;\n  left: 0;\n  right: 0;\n  top: 4px;\n  bottom: auto;\n}\n\n.tabulator .tabulator-header .tabulator-frozen {\n  position: sticky;\n  left: 0;\n  z-index: 11;\n}\n\n.tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-left {\n  border-right: 2px solid #aaa;\n}\n\n.tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-right {\n  border-left: 2px solid #aaa;\n}\n\n.tabulator .tabulator-header .tabulator-calcs-holder {\n  box-sizing: border-box;\n  background: #f3f3f3 !important;\n  border-top: 1px solid #aaa;\n  border-bottom: 1px solid #aaa;\n}\n\n.tabulator .tabulator-header .tabulator-calcs-holder .tabulator-row {\n  background: #f3f3f3 !important;\n}\n\n.tabulator .tabulator-header .tabulator-calcs-holder .tabulator-row .tabulator-col-resize-handle {\n  display: none;\n}\n\n.tabulator .tabulator-header .tabulator-frozen-rows-holder:empty {\n  display: none;\n}\n\n.tabulator .tabulator-tableholder {\n  position: relative;\n  width: 100%;\n  white-space: nowrap;\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n}\n\n.tabulator .tabulator-tableholder:focus {\n  outline: none;\n}\n\n.tabulator .tabulator-tableholder .tabulator-placeholder {\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n}\n\n.tabulator .tabulator-tableholder .tabulator-placeholder[tabulator-render-mode="virtual"] {\n  min-height: 100%;\n  min-width: 100%;\n}\n\n.tabulator .tabulator-tableholder .tabulator-placeholder .tabulator-placeholder-contents {\n  display: inline-block;\n  text-align: center;\n  padding: 10px;\n  color: #ccc;\n  font-weight: bold;\n  font-size: 20px;\n  white-space: normal;\n}\n\n.tabulator .tabulator-tableholder .tabulator-table {\n  position: relative;\n  display: inline-block;\n  background-color: #fff;\n  white-space: nowrap;\n  overflow: visible;\n  color: #333;\n}\n\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs {\n  font-weight: bold;\n  background: #e2e2e2 !important;\n}\n\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs.tabulator-calcs-top {\n  border-bottom: 2px solid #aaa;\n}\n\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs.tabulator-calcs-bottom {\n  border-top: 2px solid #aaa;\n}\n\n.tabulator .tabulator-footer {\n  border-top: 1px solid #999;\n  background-color: #e6e6e6;\n  color: #555;\n  font-weight: bold;\n  white-space: nowrap;\n  user-select: none;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n}\n\n.tabulator .tabulator-footer .tabulator-footer-contents {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  padding: 5px 10px;\n}\n\n.tabulator .tabulator-footer .tabulator-footer-contents:empty {\n  display: none;\n}\n\n.tabulator .tabulator-footer .tabulator-calcs-holder {\n  box-sizing: border-box;\n  width: 100%;\n  text-align: left;\n  background: #f3f3f3 !important;\n  border-bottom: 1px solid #aaa;\n  border-top: 1px solid #aaa;\n  overflow: hidden;\n}\n\n.tabulator .tabulator-footer .tabulator-calcs-holder .tabulator-row {\n  display: inline-block;\n  background: #f3f3f3 !important;\n}\n\n.tabulator .tabulator-footer .tabulator-calcs-holder .tabulator-row .tabulator-col-resize-handle {\n  display: none;\n}\n\n.tabulator .tabulator-footer .tabulator-calcs-holder:only-child {\n  margin-bottom: -5px;\n  border-bottom: none;\n}\n\n.tabulator .tabulator-footer > * + .tabulator-page-counter {\n  margin-left: 10px;\n}\n\n.tabulator .tabulator-footer .tabulator-page-counter {\n  font-weight: normal;\n}\n\n.tabulator .tabulator-footer .tabulator-paginator {\n  flex: 1;\n  text-align: right;\n  color: #555;\n  font-family: inherit;\n  font-weight: inherit;\n  font-size: inherit;\n}\n\n.tabulator .tabulator-footer .tabulator-page-size {\n  display: inline-block;\n  margin: 0 5px;\n  padding: 2px 5px;\n  border: 1px solid #aaa;\n  border-radius: 3px;\n}\n\n.tabulator .tabulator-footer .tabulator-pages {\n  margin: 0 7px;\n}\n\n.tabulator .tabulator-footer .tabulator-page {\n  display: inline-block;\n  margin: 0 2px;\n  padding: 2px 5px;\n  border: 1px solid #aaa;\n  border-radius: 3px;\n  background: rgba(255, 255, 255, 0.2);\n}\n\n.tabulator .tabulator-footer .tabulator-page.active {\n  color: #d00;\n}\n\n.tabulator .tabulator-footer .tabulator-page:disabled {\n  opacity: .5;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-footer .tabulator-page:not(.disabled):hover {\n    cursor: pointer;\n    background: rgba(0, 0, 0, 0.2);\n    color: #fff;\n  }\n}\n\n.tabulator .tabulator-col-resize-handle {\n  position: relative;\n  display: inline-block;\n  width: 6px;\n  margin-left: -3px;\n  margin-right: -3px;\n  z-index: 10;\n  vertical-align: middle;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-col-resize-handle:hover {\n    cursor: ew-resize;\n  }\n}\n\n.tabulator .tabulator-col-resize-handle:last-of-type {\n  width: 3px;\n  margin-right: 0;\n}\n\n.tabulator .tabulator-alert {\n  position: absolute;\n  display: flex;\n  align-items: center;\n  top: 0;\n  left: 0;\n  z-index: 100;\n  height: 100%;\n  width: 100%;\n  background: rgba(0, 0, 0, 0.4);\n  text-align: center;\n}\n\n.tabulator .tabulator-alert .tabulator-alert-msg {\n  display: inline-block;\n  margin: 0 auto;\n  padding: 10px 20px;\n  border-radius: 10px;\n  background: #fff;\n  font-weight: bold;\n  font-size: 16px;\n}\n\n.tabulator .tabulator-alert .tabulator-alert-msg.tabulator-alert-state-msg {\n  border: 4px solid #333;\n  color: #000;\n}\n\n.tabulator .tabulator-alert .tabulator-alert-msg.tabulator-alert-state-error {\n  border: 4px solid #D00;\n  color: #590000;\n}\n\n.tabulator-row {\n  position: relative;\n  box-sizing: border-box;\n  min-height: 22px;\n  background-color: #fff;\n}\n\n.tabulator-row.tabulator-row-even {\n  background-color: #EFEFEF;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row.tabulator-selectable:hover {\n    background-color: #bbb;\n    cursor: pointer;\n  }\n}\n\n.tabulator-row.tabulator-selected {\n  background-color: #9ABCEA;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row.tabulator-selected:hover {\n    background-color: #769BCC;\n    cursor: pointer;\n  }\n}\n\n.tabulator-row.tabulator-row-moving {\n  border: 1px solid #000;\n  background: #fff;\n}\n\n.tabulator-row.tabulator-moving {\n  position: absolute;\n  border-top: 1px solid #aaa;\n  border-bottom: 1px solid #aaa;\n  pointer-events: none;\n  z-index: 15;\n}\n\n.tabulator-row .tabulator-row-resize-handle {\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  height: 5px;\n}\n\n.tabulator-row .tabulator-row-resize-handle.prev {\n  top: 0;\n  bottom: auto;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row .tabulator-row-resize-handle:hover {\n    cursor: ns-resize;\n  }\n}\n\n.tabulator-row .tabulator-responsive-collapse {\n  box-sizing: border-box;\n  padding: 5px;\n  border-top: 1px solid #aaa;\n  border-bottom: 1px solid #aaa;\n}\n\n.tabulator-row .tabulator-responsive-collapse:empty {\n  display: none;\n}\n\n.tabulator-row .tabulator-responsive-collapse table {\n  font-size: 14px;\n}\n\n.tabulator-row .tabulator-responsive-collapse table tr td {\n  position: relative;\n}\n\n.tabulator-row .tabulator-responsive-collapse table tr td:first-of-type {\n  padding-right: 10px;\n}\n\n.tabulator-row .tabulator-cell {\n  display: inline-block;\n  position: relative;\n  box-sizing: border-box;\n  padding: 4px;\n  border-right: 1px solid #aaa;\n  vertical-align: middle;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.tabulator-row .tabulator-cell.tabulator-frozen {\n  display: inline-block;\n  position: sticky;\n  left: 0;\n  background-color: inherit;\n  z-index: 11;\n}\n\n.tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-left {\n  border-right: 2px solid #aaa;\n}\n\n.tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-right {\n  border-left: 2px solid #aaa;\n}\n\n.tabulator-row .tabulator-cell.tabulator-editing {\n  border: 1px solid #1D68CD;\n  outline: none;\n  padding: 0;\n}\n\n.tabulator-row .tabulator-cell.tabulator-editing input,\n.tabulator-row .tabulator-cell.tabulator-editing select {\n  border: 1px;\n  background: transparent;\n  outline: none;\n}\n\n.tabulator-row .tabulator-cell.tabulator-validation-fail {\n  border: 1px solid #dd0000;\n}\n\n.tabulator-row .tabulator-cell.tabulator-validation-fail input,\n.tabulator-row .tabulator-cell.tabulator-validation-fail select {\n  border: 1px;\n  background: transparent;\n  color: #dd0000;\n}\n\n.tabulator-row .tabulator-cell.tabulator-row-handle {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n}\n\n.tabulator-row .tabulator-cell.tabulator-row-handle .tabulator-row-handle-box {\n  width: 80%;\n}\n\n.tabulator-row .tabulator-cell.tabulator-row-handle .tabulator-row-handle-box .tabulator-row-handle-bar {\n  width: 100%;\n  height: 3px;\n  margin-top: 2px;\n  background: #666;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-branch-empty {\n  display: inline-block;\n  width: 7px;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-branch {\n  display: inline-block;\n  vertical-align: middle;\n  height: 9px;\n  width: 7px;\n  margin-top: -9px;\n  margin-right: 5px;\n  border-bottom-left-radius: 1px;\n  border-left: 2px solid #aaa;\n  border-bottom: 2px solid #aaa;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-control {\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  vertical-align: middle;\n  height: 11px;\n  width: 11px;\n  margin-right: 5px;\n  border: 1px solid #333;\n  border-radius: 2px;\n  background: rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row .tabulator-cell .tabulator-data-tree-control:hover {\n    cursor: pointer;\n    background: rgba(0, 0, 0, 0.2);\n  }\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-collapse {\n  display: inline-block;\n  position: relative;\n  height: 7px;\n  width: 1px;\n  background: transparent;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-collapse:after {\n  position: absolute;\n  content: "";\n  left: -3px;\n  top: 3px;\n  height: 1px;\n  width: 7px;\n  background: #333;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-expand {\n  display: inline-block;\n  position: relative;\n  height: 7px;\n  width: 1px;\n  background: #333;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-expand:after {\n  position: absolute;\n  content: "";\n  left: -3px;\n  top: 3px;\n  height: 1px;\n  width: 7px;\n  background: #333;\n}\n\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n  height: 15px;\n  width: 15px;\n  border-radius: 20px;\n  background: #666;\n  color: #fff;\n  font-weight: bold;\n  font-size: 1.1em;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle:hover {\n    opacity: .7;\n    cursor: pointer;\n  }\n}\n\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle.open .tabulator-responsive-collapse-toggle-close {\n  display: initial;\n}\n\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle.open .tabulator-responsive-collapse-toggle-open {\n  display: none;\n}\n\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle svg {\n  stroke: #fff;\n}\n\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle .tabulator-responsive-collapse-toggle-close {\n  display: none;\n}\n\n.tabulator-row .tabulator-cell .tabulator-traffic-light {\n  display: inline-block;\n  height: 14px;\n  width: 14px;\n  border-radius: 14px;\n}\n\n.tabulator-row.tabulator-group {\n  box-sizing: border-box;\n  border-bottom: 1px solid #999;\n  border-right: 1px solid #aaa;\n  border-top: 1px solid #999;\n  padding: 5px;\n  padding-left: 10px;\n  background: #ccc;\n  font-weight: bold;\n  min-width: 100%;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row.tabulator-group:hover {\n    cursor: pointer;\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n}\n\n.tabulator-row.tabulator-group.tabulator-group-visible .tabulator-arrow {\n  margin-right: 10px;\n  border-left: 6px solid transparent;\n  border-right: 6px solid transparent;\n  border-top: 6px solid #666;\n  border-bottom: 0;\n}\n\n.tabulator-row.tabulator-group.tabulator-group-level-1 {\n  padding-left: 30px;\n}\n\n.tabulator-row.tabulator-group.tabulator-group-level-2 {\n  padding-left: 50px;\n}\n\n.tabulator-row.tabulator-group.tabulator-group-level-3 {\n  padding-left: 70px;\n}\n\n.tabulator-row.tabulator-group.tabulator-group-level-4 {\n  padding-left: 90px;\n}\n\n.tabulator-row.tabulator-group.tabulator-group-level-5 {\n  padding-left: 110px;\n}\n\n.tabulator-row.tabulator-group .tabulator-group-toggle {\n  display: inline-block;\n}\n\n.tabulator-row.tabulator-group .tabulator-arrow {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-right: 16px;\n  border-top: 6px solid transparent;\n  border-bottom: 6px solid transparent;\n  border-right: 0;\n  border-left: 6px solid #666;\n  vertical-align: middle;\n}\n\n.tabulator-row.tabulator-group span {\n  margin-left: 10px;\n  color: #d00;\n}\n\n.tabulator-popup-container {\n  position: absolute;\n  display: inline-block;\n  box-sizing: border-box;\n  background: #fff;\n  border: 1px solid #aaa;\n  box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.2);\n  font-size: 14px;\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n  z-index: 10000;\n}\n\n.tabulator-popup {\n  padding: 5px;\n  border-radius: 3px;\n}\n\n.tabulator-tooltip {\n  max-width: Min(500px, 100%);\n  padding: 3px 5px;\n  border-radius: 2px;\n  box-shadow: none;\n  font-size: 12px;\n  pointer-events: none;\n}\n\n.tabulator-menu .tabulator-menu-item {\n  position: relative;\n  box-sizing: border-box;\n  padding: 5px 10px;\n  user-select: none;\n}\n\n.tabulator-menu .tabulator-menu-item.tabulator-menu-item-disabled {\n  opacity: .5;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-menu .tabulator-menu-item:not(.tabulator-menu-item-disabled):hover {\n    cursor: pointer;\n    background: #EFEFEF;\n  }\n}\n\n.tabulator-menu .tabulator-menu-item.tabulator-menu-item-submenu {\n  padding-right: 25px;\n}\n\n.tabulator-menu .tabulator-menu-item.tabulator-menu-item-submenu::after {\n  display: inline-block;\n  position: absolute;\n  top: calc(5px + .4em);\n  right: 10px;\n  height: 7px;\n  width: 7px;\n  content: \'\';\n  border-width: 1px 1px 0 0;\n  border-style: solid;\n  border-color: #aaa;\n  vertical-align: top;\n  transform: rotate(45deg);\n}\n\n.tabulator-menu .tabulator-menu-separator {\n  border-top: 1px solid #aaa;\n}\n\n.tabulator-edit-list {\n  max-height: 200px;\n  font-size: 14px;\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item {\n  padding: 4px;\n  color: #333;\n  outline: none;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.active {\n  color: #fff;\n  background: #1D68CD;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.active.focused {\n  outline: 1px solid rgba(255, 255, 255, 0.5);\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.focused {\n  outline: 1px solid #1D68CD;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-edit-list .tabulator-edit-list-item:hover {\n    cursor: pointer;\n    color: #fff;\n    background: #1D68CD;\n  }\n}\n\n.tabulator-edit-list .tabulator-edit-list-placeholder {\n  padding: 4px;\n  color: #333;\n  text-align: center;\n}\n\n.tabulator-edit-list .tabulator-edit-list-group {\n  border-bottom: 1px solid #aaa;\n  padding: 4px;\n  padding-top: 6px;\n  color: #333;\n  font-weight: bold;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-2,\n.tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-2 {\n  padding-left: 12px;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-3,\n.tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-3 {\n  padding-left: 20px;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-4,\n.tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-4 {\n  padding-left: 28px;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-5,\n.tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-5 {\n  padding-left: 36px;\n}\n\n.tabulator.tabulator-ltr {\n  direction: ltr;\n}\n\n.tabulator.tabulator-rtl {\n  text-align: initial;\n  direction: rtl;\n}\n\n.tabulator.tabulator-rtl .tabulator-header .tabulator-col {\n  text-align: initial;\n  border-left: 1px solid #aaa;\n  border-right: initial;\n}\n\n.tabulator.tabulator-rtl .tabulator-header .tabulator-col.tabulator-col-group .tabulator-col-group-cols {\n  margin-right: initial;\n  margin-left: -1px;\n}\n\n.tabulator.tabulator-rtl .tabulator-header .tabulator-col.tabulator-sortable .tabulator-col-title {\n  padding-right: 0;\n  padding-left: 25px;\n}\n\n.tabulator.tabulator-rtl .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter {\n  left: 8px;\n  right: initial;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell {\n  border-right: initial;\n  border-left: 1px solid #aaa;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell .tabulator-data-tree-branch {\n  margin-right: initial;\n  margin-left: 5px;\n  border-bottom-left-radius: initial;\n  border-bottom-right-radius: 1px;\n  border-left: initial;\n  border-right: 2px solid #aaa;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell .tabulator-data-tree-control {\n  margin-right: initial;\n  margin-left: 5px;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-left {\n  border-left: 2px solid #aaa;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-right {\n  border-right: 2px solid #aaa;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-col-resize-handle:last-of-type {\n  width: 3px;\n  margin-left: 0;\n  margin-right: -3px;\n}\n\n.tabulator.tabulator-rtl .tabulator-footer .tabulator-calcs-holder {\n  text-align: initial;\n}\n\n.tabulator-print-fullscreen {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 10000;\n}\n\nbody.tabulator-print-fullscreen-hide > *:not(.tabulator-print-fullscreen) {\n  display: none !important;\n}\n\n.tabulator-print-table {\n  border-collapse: collapse;\n}\n\n.tabulator-print-table .tabulator-data-tree-branch {\n  display: inline-block;\n  vertical-align: middle;\n  height: 9px;\n  width: 7px;\n  margin-top: -9px;\n  margin-right: 5px;\n  border-bottom-left-radius: 1px;\n  border-left: 2px solid #aaa;\n  border-bottom: 2px solid #aaa;\n}\n\n.tabulator-print-table .tabulator-print-table-group {\n  box-sizing: border-box;\n  border-bottom: 1px solid #999;\n  border-right: 1px solid #aaa;\n  border-top: 1px solid #999;\n  padding: 5px;\n  padding-left: 10px;\n  background: #ccc;\n  font-weight: bold;\n  min-width: 100%;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-print-table .tabulator-print-table-group:hover {\n    cursor: pointer;\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-visible .tabulator-arrow {\n  margin-right: 10px;\n  border-left: 6px solid transparent;\n  border-right: 6px solid transparent;\n  border-top: 6px solid #666;\n  border-bottom: 0;\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-1 td {\n  padding-left: 30px !important;\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-2 td {\n  padding-left: 50px !important;\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-3 td {\n  padding-left: 70px !important;\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-4 td {\n  padding-left: 90px !important;\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-5 td {\n  padding-left: 110px !important;\n}\n\n.tabulator-print-table .tabulator-print-table-group .tabulator-group-toggle {\n  display: inline-block;\n}\n\n.tabulator-print-table .tabulator-print-table-group .tabulator-arrow {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-right: 16px;\n  border-top: 6px solid transparent;\n  border-bottom: 6px solid transparent;\n  border-right: 0;\n  border-left: 6px solid #666;\n  vertical-align: middle;\n}\n\n.tabulator-print-table .tabulator-print-table-group span {\n  margin-left: 10px;\n  color: #d00;\n}\n\n.tabulator-print-table .tabulator-data-tree-control {\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  vertical-align: middle;\n  height: 11px;\n  width: 11px;\n  margin-right: 5px;\n  border: 1px solid #333;\n  border-radius: 2px;\n  background: rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-print-table .tabulator-data-tree-control:hover {\n    cursor: pointer;\n    background: rgba(0, 0, 0, 0.2);\n  }\n}\n\n.tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-collapse {\n  display: inline-block;\n  position: relative;\n  height: 7px;\n  width: 1px;\n  background: transparent;\n}\n\n.tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-collapse:after {\n  position: absolute;\n  content: "";\n  left: -3px;\n  top: 3px;\n  height: 1px;\n  width: 7px;\n  background: #333;\n}\n\n.tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-expand {\n  display: inline-block;\n  position: relative;\n  height: 7px;\n  width: 1px;\n  background: #333;\n}\n\n.tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-expand:after {\n  position: absolute;\n  content: "";\n  left: -3px;\n  top: 3px;\n  height: 1px;\n  width: 7px;\n  background: #333;\n}\n\n/*# sourceMappingURL=tabulator.css.map */',"",{version:3,sources:["webpack://./node_modules/tabulator-tables/dist/css/tabulator.scss","webpack://./node_modules/tabulator-tables/dist/css/tabulator.css"],names:[],mappings:"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",sourcesContent:['.tabulator {\n  position: relative;\n  border: 1px solid #999;\n  background-color: #888;\n  font-size: 14px;\n  text-align: left;\n  overflow: hidden;\n  -webkit-transform: translateZ(0);\n  -moz-transform: translateZ(0);\n  -ms-transform: translateZ(0);\n  -o-transform: translateZ(0);\n  transform: translateZ(0); }\n  .tabulator[tabulator-layout="fitDataFill"] .tabulator-tableholder .tabulator-table {\n    min-width: 100%; }\n  .tabulator[tabulator-layout="fitDataTable"] {\n    display: inline-block; }\n  .tabulator.tabulator-block-select {\n    user-select: none; }\n  .tabulator .tabulator-header {\n    position: relative;\n    box-sizing: border-box;\n    width: 100%;\n    border-bottom: 1px solid #999;\n    background-color: #e6e6e6;\n    color: #555;\n    font-weight: bold;\n    white-space: nowrap;\n    overflow: hidden;\n    -moz-user-select: none;\n    -khtml-user-select: none;\n    -webkit-user-select: none;\n    -o-user-select: none; }\n    .tabulator .tabulator-header.tabulator-header-hidden {\n      display: none; }\n    .tabulator .tabulator-header .tabulator-header-contents {\n      position: relative;\n      overflow: hidden; }\n      .tabulator .tabulator-header .tabulator-header-contents .tabulator-headers {\n        display: inline-block; }\n    .tabulator .tabulator-header .tabulator-col {\n      display: inline-flex;\n      position: relative;\n      box-sizing: border-box;\n      flex-direction: column;\n      justify-content: flex-start;\n      border-right: 1px solid #aaa;\n      background: #e6e6e6;\n      text-align: left;\n      vertical-align: bottom;\n      overflow: hidden; }\n      .tabulator .tabulator-header .tabulator-col.tabulator-moving {\n        position: absolute;\n        border: 1px solid #999;\n        background: #cdcdcd;\n        pointer-events: none; }\n      .tabulator .tabulator-header .tabulator-col .tabulator-col-content {\n        box-sizing: border-box;\n        position: relative;\n        padding: 4px; }\n        .tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-header-popup-button {\n          padding: 0 8px; }\n          .tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-header-popup-button:hover {\n            cursor: pointer;\n            opacity: .6; }\n        .tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title-holder {\n          position: relative; }\n        .tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title {\n          box-sizing: border-box;\n          width: 100%;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          vertical-align: bottom; }\n          .tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title.tabulator-col-title-wrap {\n            white-space: normal;\n            text-overflow: initial; }\n          .tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title .tabulator-title-editor {\n            box-sizing: border-box;\n            width: 100%;\n            border: 1px solid #999;\n            padding: 1px;\n            background: #fff; }\n          .tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title .tabulator-header-popup-button + .tabulator-title-editor {\n            width: calc(100% - 22px); }\n        .tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter {\n          display: flex;\n          align-items: center;\n          position: absolute;\n          top: 0;\n          bottom: 0;\n          right: 4px; }\n          .tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n            width: 0;\n            height: 0;\n            border-left: 6px solid transparent;\n            border-right: 6px solid transparent;\n            border-bottom: 6px solid #bbb; }\n      .tabulator .tabulator-header .tabulator-col.tabulator-col-group .tabulator-col-group-cols {\n        position: relative;\n        display: flex;\n        border-top: 1px solid #aaa;\n        overflow: hidden;\n        margin-right: -1px; }\n      .tabulator .tabulator-header .tabulator-col .tabulator-header-filter {\n        position: relative;\n        box-sizing: border-box;\n        margin-top: 2px;\n        width: 100%;\n        text-align: center; }\n        .tabulator .tabulator-header .tabulator-col .tabulator-header-filter textarea {\n          height: auto !important; }\n        .tabulator .tabulator-header .tabulator-col .tabulator-header-filter svg {\n          margin-top: 3px; }\n        .tabulator .tabulator-header .tabulator-col .tabulator-header-filter input::-ms-clear {\n          width: 0;\n          height: 0; }\n      .tabulator .tabulator-header .tabulator-col.tabulator-sortable .tabulator-col-title {\n        padding-right: 25px; }\n      @media (hover: hover) and (pointer: fine) {\n        .tabulator .tabulator-header .tabulator-col.tabulator-sortable.tabulator-col-sorter-element:hover {\n          cursor: pointer;\n          background-color: #cdcdcd; } }\n      .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="none"] .tabulator-col-content .tabulator-col-sorter {\n        color: #bbb; }\n        @media (hover: hover) and (pointer: fine) {\n          .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="none"] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover {\n            cursor: pointer;\n            border-bottom: 6px solid #555; } }\n        .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="none"] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n          border-top: none;\n          border-bottom: 6px solid #bbb; }\n      .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="ascending"] .tabulator-col-content .tabulator-col-sorter {\n        color: #666; }\n        @media (hover: hover) and (pointer: fine) {\n          .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="ascending"] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover {\n            cursor: pointer;\n            border-bottom: 6px solid #555; } }\n        .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="ascending"] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n          border-top: none;\n          border-bottom: 6px solid #666; }\n      .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="descending"] .tabulator-col-content .tabulator-col-sorter {\n        color: #666; }\n        @media (hover: hover) and (pointer: fine) {\n          .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="descending"] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover {\n            cursor: pointer;\n            border-top: 6px solid #555; } }\n        .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="descending"] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n          border-bottom: none;\n          border-top: 6px solid #666;\n          color: #666; }\n      .tabulator .tabulator-header .tabulator-col.tabulator-col-vertical .tabulator-col-content .tabulator-col-title {\n        writing-mode: vertical-rl;\n        text-orientation: mixed;\n        display: flex;\n        align-items: center;\n        justify-content: center; }\n      .tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-col-vertical-flip .tabulator-col-title {\n        transform: rotate(180deg); }\n      .tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable .tabulator-col-title {\n        padding-right: 0;\n        padding-top: 20px; }\n      .tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable.tabulator-col-vertical-flip .tabulator-col-title {\n        padding-right: 0;\n        padding-bottom: 20px; }\n      .tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable .tabulator-col-sorter {\n        justify-content: center;\n        left: 0;\n        right: 0;\n        top: 4px;\n        bottom: auto; }\n    .tabulator .tabulator-header .tabulator-frozen {\n      position: sticky;\n      left: 0;\n      z-index: 11; }\n      .tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-left {\n        border-right: 2px solid #aaa; }\n      .tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-right {\n        border-left: 2px solid #aaa; }\n    .tabulator .tabulator-header .tabulator-calcs-holder {\n      box-sizing: border-box;\n      background: #f3f3f3 !important;\n      border-top: 1px solid #aaa;\n      border-bottom: 1px solid #aaa; }\n      .tabulator .tabulator-header .tabulator-calcs-holder .tabulator-row {\n        background: #f3f3f3 !important; }\n        .tabulator .tabulator-header .tabulator-calcs-holder .tabulator-row .tabulator-col-resize-handle {\n          display: none; }\n    .tabulator .tabulator-header .tabulator-frozen-rows-holder:empty {\n      display: none; }\n  .tabulator .tabulator-tableholder {\n    position: relative;\n    width: 100%;\n    white-space: nowrap;\n    overflow: auto;\n    -webkit-overflow-scrolling: touch; }\n    .tabulator .tabulator-tableholder:focus {\n      outline: none; }\n    .tabulator .tabulator-tableholder .tabulator-placeholder {\n      box-sizing: border-box;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      width: 100%; }\n      .tabulator .tabulator-tableholder .tabulator-placeholder[tabulator-render-mode="virtual"] {\n        min-height: 100%;\n        min-width: 100%; }\n      .tabulator .tabulator-tableholder .tabulator-placeholder .tabulator-placeholder-contents {\n        display: inline-block;\n        text-align: center;\n        padding: 10px;\n        color: #ccc;\n        font-weight: bold;\n        font-size: 20px;\n        white-space: normal; }\n    .tabulator .tabulator-tableholder .tabulator-table {\n      position: relative;\n      display: inline-block;\n      background-color: #fff;\n      white-space: nowrap;\n      overflow: visible;\n      color: #333; }\n      .tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs {\n        font-weight: bold;\n        background: #e2e2e2 !important; }\n        .tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs.tabulator-calcs-top {\n          border-bottom: 2px solid #aaa; }\n        .tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs.tabulator-calcs-bottom {\n          border-top: 2px solid #aaa; }\n  .tabulator .tabulator-footer {\n    border-top: 1px solid #999;\n    background-color: #e6e6e6;\n    color: #555;\n    font-weight: bold;\n    white-space: nowrap;\n    user-select: none;\n    -moz-user-select: none;\n    -khtml-user-select: none;\n    -webkit-user-select: none;\n    -o-user-select: none; }\n    .tabulator .tabulator-footer .tabulator-footer-contents {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n      justify-content: space-between;\n      padding: 5px 10px; }\n      .tabulator .tabulator-footer .tabulator-footer-contents:empty {\n        display: none; }\n    .tabulator .tabulator-footer .tabulator-calcs-holder {\n      box-sizing: border-box;\n      width: 100%;\n      text-align: left;\n      background: #f3f3f3 !important;\n      border-bottom: 1px solid #aaa;\n      border-top: 1px solid #aaa;\n      overflow: hidden; }\n      .tabulator .tabulator-footer .tabulator-calcs-holder .tabulator-row {\n        display: inline-block;\n        background: #f3f3f3 !important; }\n        .tabulator .tabulator-footer .tabulator-calcs-holder .tabulator-row .tabulator-col-resize-handle {\n          display: none; }\n      .tabulator .tabulator-footer .tabulator-calcs-holder:only-child {\n        margin-bottom: -5px;\n        border-bottom: none; }\n    .tabulator .tabulator-footer > * + .tabulator-page-counter {\n      margin-left: 10px; }\n    .tabulator .tabulator-footer .tabulator-page-counter {\n      font-weight: normal; }\n    .tabulator .tabulator-footer .tabulator-paginator {\n      flex: 1;\n      text-align: right;\n      color: #555;\n      font-family: inherit;\n      font-weight: inherit;\n      font-size: inherit; }\n    .tabulator .tabulator-footer .tabulator-page-size {\n      display: inline-block;\n      margin: 0 5px;\n      padding: 2px 5px;\n      border: 1px solid #aaa;\n      border-radius: 3px; }\n    .tabulator .tabulator-footer .tabulator-pages {\n      margin: 0 7px; }\n    .tabulator .tabulator-footer .tabulator-page {\n      display: inline-block;\n      margin: 0 2px;\n      padding: 2px 5px;\n      border: 1px solid #aaa;\n      border-radius: 3px;\n      background: rgba(255, 255, 255, 0.2); }\n      .tabulator .tabulator-footer .tabulator-page.active {\n        color: #d00; }\n      .tabulator .tabulator-footer .tabulator-page:disabled {\n        opacity: .5; }\n      @media (hover: hover) and (pointer: fine) {\n        .tabulator .tabulator-footer .tabulator-page:not(.disabled):hover {\n          cursor: pointer;\n          background: rgba(0, 0, 0, 0.2);\n          color: #fff; } }\n  .tabulator .tabulator-col-resize-handle {\n    position: relative;\n    display: inline-block;\n    width: 6px;\n    margin-left: -3px;\n    margin-right: -3px;\n    z-index: 10;\n    vertical-align: middle; }\n    @media (hover: hover) and (pointer: fine) {\n      .tabulator .tabulator-col-resize-handle:hover {\n        cursor: ew-resize; } }\n    .tabulator .tabulator-col-resize-handle:last-of-type {\n      width: 3px;\n      margin-right: 0; }\n  .tabulator .tabulator-alert {\n    position: absolute;\n    display: flex;\n    align-items: center;\n    top: 0;\n    left: 0;\n    z-index: 100;\n    height: 100%;\n    width: 100%;\n    background: rgba(0, 0, 0, 0.4);\n    text-align: center; }\n    .tabulator .tabulator-alert .tabulator-alert-msg {\n      display: inline-block;\n      margin: 0 auto;\n      padding: 10px 20px;\n      border-radius: 10px;\n      background: #fff;\n      font-weight: bold;\n      font-size: 16px; }\n      .tabulator .tabulator-alert .tabulator-alert-msg.tabulator-alert-state-msg {\n        border: 4px solid #333;\n        color: #000; }\n      .tabulator .tabulator-alert .tabulator-alert-msg.tabulator-alert-state-error {\n        border: 4px solid #D00;\n        color: #590000; }\n\n.tabulator-row {\n  position: relative;\n  box-sizing: border-box;\n  min-height: 22px;\n  background-color: #fff; }\n  .tabulator-row.tabulator-row-even {\n    background-color: #EFEFEF; }\n  @media (hover: hover) and (pointer: fine) {\n    .tabulator-row.tabulator-selectable:hover {\n      background-color: #bbb;\n      cursor: pointer; } }\n  .tabulator-row.tabulator-selected {\n    background-color: #9ABCEA; }\n  @media (hover: hover) and (pointer: fine) {\n    .tabulator-row.tabulator-selected:hover {\n      background-color: #769BCC;\n      cursor: pointer; } }\n  .tabulator-row.tabulator-row-moving {\n    border: 1px solid #000;\n    background: #fff; }\n  .tabulator-row.tabulator-moving {\n    position: absolute;\n    border-top: 1px solid #aaa;\n    border-bottom: 1px solid #aaa;\n    pointer-events: none;\n    z-index: 15; }\n  .tabulator-row .tabulator-row-resize-handle {\n    position: absolute;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    height: 5px; }\n    .tabulator-row .tabulator-row-resize-handle.prev {\n      top: 0;\n      bottom: auto; }\n    @media (hover: hover) and (pointer: fine) {\n      .tabulator-row .tabulator-row-resize-handle:hover {\n        cursor: ns-resize; } }\n  .tabulator-row .tabulator-responsive-collapse {\n    box-sizing: border-box;\n    padding: 5px;\n    border-top: 1px solid #aaa;\n    border-bottom: 1px solid #aaa; }\n    .tabulator-row .tabulator-responsive-collapse:empty {\n      display: none; }\n    .tabulator-row .tabulator-responsive-collapse table {\n      font-size: 14px; }\n      .tabulator-row .tabulator-responsive-collapse table tr td {\n        position: relative; }\n        .tabulator-row .tabulator-responsive-collapse table tr td:first-of-type {\n          padding-right: 10px; }\n  .tabulator-row .tabulator-cell {\n    display: inline-block;\n    position: relative;\n    box-sizing: border-box;\n    padding: 4px;\n    border-right: 1px solid #aaa;\n    vertical-align: middle;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis; }\n    .tabulator-row .tabulator-cell.tabulator-frozen {\n      display: inline-block;\n      position: sticky;\n      left: 0;\n      background-color: inherit;\n      z-index: 11; }\n      .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-left {\n        border-right: 2px solid #aaa; }\n      .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-right {\n        border-left: 2px solid #aaa; }\n    .tabulator-row .tabulator-cell.tabulator-editing {\n      border: 1px solid #1D68CD;\n      outline: none;\n      padding: 0; }\n      .tabulator-row .tabulator-cell.tabulator-editing input, .tabulator-row .tabulator-cell.tabulator-editing select {\n        border: 1px;\n        background: transparent;\n        outline: none; }\n    .tabulator-row .tabulator-cell.tabulator-validation-fail {\n      border: 1px solid #dd0000; }\n      .tabulator-row .tabulator-cell.tabulator-validation-fail input, .tabulator-row .tabulator-cell.tabulator-validation-fail select {\n        border: 1px;\n        background: transparent;\n        color: #dd0000; }\n    .tabulator-row .tabulator-cell.tabulator-row-handle {\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      -moz-user-select: none;\n      -khtml-user-select: none;\n      -webkit-user-select: none;\n      -o-user-select: none; }\n      .tabulator-row .tabulator-cell.tabulator-row-handle .tabulator-row-handle-box {\n        width: 80%; }\n        .tabulator-row .tabulator-cell.tabulator-row-handle .tabulator-row-handle-box .tabulator-row-handle-bar {\n          width: 100%;\n          height: 3px;\n          margin-top: 2px;\n          background: #666; }\n    .tabulator-row .tabulator-cell .tabulator-data-tree-branch-empty {\n      display: inline-block;\n      width: 7px; }\n    .tabulator-row .tabulator-cell .tabulator-data-tree-branch {\n      display: inline-block;\n      vertical-align: middle;\n      height: 9px;\n      width: 7px;\n      margin-top: -9px;\n      margin-right: 5px;\n      border-bottom-left-radius: 1px;\n      border-left: 2px solid #aaa;\n      border-bottom: 2px solid #aaa; }\n    .tabulator-row .tabulator-cell .tabulator-data-tree-control {\n      display: inline-flex;\n      justify-content: center;\n      align-items: center;\n      vertical-align: middle;\n      height: 11px;\n      width: 11px;\n      margin-right: 5px;\n      border: 1px solid #333;\n      border-radius: 2px;\n      background: rgba(0, 0, 0, 0.1);\n      overflow: hidden; }\n      @media (hover: hover) and (pointer: fine) {\n        .tabulator-row .tabulator-cell .tabulator-data-tree-control:hover {\n          cursor: pointer;\n          background: rgba(0, 0, 0, 0.2); } }\n      .tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-collapse {\n        display: inline-block;\n        position: relative;\n        height: 7px;\n        width: 1px;\n        background: transparent; }\n        .tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-collapse:after {\n          position: absolute;\n          content: "";\n          left: -3px;\n          top: 3px;\n          height: 1px;\n          width: 7px;\n          background: #333; }\n      .tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-expand {\n        display: inline-block;\n        position: relative;\n        height: 7px;\n        width: 1px;\n        background: #333; }\n        .tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-expand:after {\n          position: absolute;\n          content: "";\n          left: -3px;\n          top: 3px;\n          height: 1px;\n          width: 7px;\n          background: #333; }\n    .tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle {\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      -moz-user-select: none;\n      -khtml-user-select: none;\n      -webkit-user-select: none;\n      -o-user-select: none;\n      height: 15px;\n      width: 15px;\n      border-radius: 20px;\n      background: #666;\n      color: #fff;\n      font-weight: bold;\n      font-size: 1.1em; }\n      @media (hover: hover) and (pointer: fine) {\n        .tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle:hover {\n          opacity: .7;\n          cursor: pointer; } }\n      .tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle.open .tabulator-responsive-collapse-toggle-close {\n        display: initial; }\n      .tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle.open .tabulator-responsive-collapse-toggle-open {\n        display: none; }\n      .tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle svg {\n        stroke: #fff; }\n      .tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle .tabulator-responsive-collapse-toggle-close {\n        display: none; }\n    .tabulator-row .tabulator-cell .tabulator-traffic-light {\n      display: inline-block;\n      height: 14px;\n      width: 14px;\n      border-radius: 14px; }\n  .tabulator-row.tabulator-group {\n    box-sizing: border-box;\n    border-bottom: 1px solid #999;\n    border-right: 1px solid #aaa;\n    border-top: 1px solid #999;\n    padding: 5px;\n    padding-left: 10px;\n    background: #ccc;\n    font-weight: bold;\n    min-width: 100%; }\n    @media (hover: hover) and (pointer: fine) {\n      .tabulator-row.tabulator-group:hover {\n        cursor: pointer;\n        background-color: rgba(0, 0, 0, 0.1); } }\n    .tabulator-row.tabulator-group.tabulator-group-visible .tabulator-arrow {\n      margin-right: 10px;\n      border-left: 6px solid transparent;\n      border-right: 6px solid transparent;\n      border-top: 6px solid #666;\n      border-bottom: 0; }\n    .tabulator-row.tabulator-group.tabulator-group-level-1 {\n      padding-left: 30px; }\n    .tabulator-row.tabulator-group.tabulator-group-level-2 {\n      padding-left: 50px; }\n    .tabulator-row.tabulator-group.tabulator-group-level-3 {\n      padding-left: 70px; }\n    .tabulator-row.tabulator-group.tabulator-group-level-4 {\n      padding-left: 90px; }\n    .tabulator-row.tabulator-group.tabulator-group-level-5 {\n      padding-left: 110px; }\n    .tabulator-row.tabulator-group .tabulator-group-toggle {\n      display: inline-block; }\n    .tabulator-row.tabulator-group .tabulator-arrow {\n      display: inline-block;\n      width: 0;\n      height: 0;\n      margin-right: 16px;\n      border-top: 6px solid transparent;\n      border-bottom: 6px solid transparent;\n      border-right: 0;\n      border-left: 6px solid #666;\n      vertical-align: middle; }\n    .tabulator-row.tabulator-group span {\n      margin-left: 10px;\n      color: #d00; }\n\n.tabulator-popup-container {\n  position: absolute;\n  display: inline-block;\n  box-sizing: border-box;\n  background: #fff;\n  border: 1px solid #aaa;\n  box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.2);\n  font-size: 14px;\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n  z-index: 10000; }\n\n.tabulator-popup {\n  padding: 5px;\n  border-radius: 3px; }\n\n.tabulator-tooltip {\n  max-width: Min(500px, 100%);\n  padding: 3px 5px;\n  border-radius: 2px;\n  box-shadow: none;\n  font-size: 12px;\n  pointer-events: none; }\n\n.tabulator-menu .tabulator-menu-item {\n  position: relative;\n  box-sizing: border-box;\n  padding: 5px 10px;\n  user-select: none; }\n  .tabulator-menu .tabulator-menu-item.tabulator-menu-item-disabled {\n    opacity: .5; }\n  @media (hover: hover) and (pointer: fine) {\n    .tabulator-menu .tabulator-menu-item:not(.tabulator-menu-item-disabled):hover {\n      cursor: pointer;\n      background: #EFEFEF; } }\n  .tabulator-menu .tabulator-menu-item.tabulator-menu-item-submenu {\n    padding-right: 25px; }\n    .tabulator-menu .tabulator-menu-item.tabulator-menu-item-submenu::after {\n      display: inline-block;\n      position: absolute;\n      top: calc(5px + .4em);\n      right: 10px;\n      height: 7px;\n      width: 7px;\n      content: \'\';\n      border-width: 1px 1px 0 0;\n      border-style: solid;\n      border-color: #aaa;\n      vertical-align: top;\n      transform: rotate(45deg); }\n\n.tabulator-menu .tabulator-menu-separator {\n  border-top: 1px solid #aaa; }\n\n.tabulator-edit-list {\n  max-height: 200px;\n  font-size: 14px;\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch; }\n  .tabulator-edit-list .tabulator-edit-list-item {\n    padding: 4px;\n    color: #333;\n    outline: none; }\n    .tabulator-edit-list .tabulator-edit-list-item.active {\n      color: #fff;\n      background: #1D68CD; }\n      .tabulator-edit-list .tabulator-edit-list-item.active.focused {\n        outline: 1px solid rgba(255, 255, 255, 0.5); }\n    .tabulator-edit-list .tabulator-edit-list-item.focused {\n      outline: 1px solid #1D68CD; }\n    @media (hover: hover) and (pointer: fine) {\n      .tabulator-edit-list .tabulator-edit-list-item:hover {\n        cursor: pointer;\n        color: #fff;\n        background: #1D68CD; } }\n  .tabulator-edit-list .tabulator-edit-list-placeholder {\n    padding: 4px;\n    color: #333;\n    text-align: center; }\n  .tabulator-edit-list .tabulator-edit-list-group {\n    border-bottom: 1px solid #aaa;\n    padding: 4px;\n    padding-top: 6px;\n    color: #333;\n    font-weight: bold; }\n  .tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-2, .tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-2 {\n    padding-left: 12px; }\n  .tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-3, .tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-3 {\n    padding-left: 20px; }\n  .tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-4, .tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-4 {\n    padding-left: 28px; }\n  .tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-5, .tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-5 {\n    padding-left: 36px; }\n\n.tabulator.tabulator-ltr {\n  direction: ltr; }\n\n.tabulator.tabulator-rtl {\n  text-align: initial;\n  direction: rtl; }\n  .tabulator.tabulator-rtl .tabulator-header .tabulator-col {\n    text-align: initial;\n    border-left: 1px solid #aaa;\n    border-right: initial; }\n    .tabulator.tabulator-rtl .tabulator-header .tabulator-col.tabulator-col-group .tabulator-col-group-cols {\n      margin-right: initial;\n      margin-left: -1px; }\n    .tabulator.tabulator-rtl .tabulator-header .tabulator-col.tabulator-sortable .tabulator-col-title {\n      padding-right: 0;\n      padding-left: 25px; }\n    .tabulator.tabulator-rtl .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter {\n      left: 8px;\n      right: initial; }\n  .tabulator.tabulator-rtl .tabulator-row .tabulator-cell {\n    border-right: initial;\n    border-left: 1px solid #aaa; }\n    .tabulator.tabulator-rtl .tabulator-row .tabulator-cell .tabulator-data-tree-branch {\n      margin-right: initial;\n      margin-left: 5px;\n      border-bottom-left-radius: initial;\n      border-bottom-right-radius: 1px;\n      border-left: initial;\n      border-right: 2px solid #aaa; }\n    .tabulator.tabulator-rtl .tabulator-row .tabulator-cell .tabulator-data-tree-control {\n      margin-right: initial;\n      margin-left: 5px; }\n    .tabulator.tabulator-rtl .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-left {\n      border-left: 2px solid #aaa; }\n    .tabulator.tabulator-rtl .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-right {\n      border-right: 2px solid #aaa; }\n  .tabulator.tabulator-rtl .tabulator-row .tabulator-col-resize-handle:last-of-type {\n    width: 3px;\n    margin-left: 0;\n    margin-right: -3px; }\n  .tabulator.tabulator-rtl .tabulator-footer .tabulator-calcs-holder {\n    text-align: initial; }\n\n.tabulator-print-fullscreen {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 10000; }\n\nbody.tabulator-print-fullscreen-hide > *:not(.tabulator-print-fullscreen) {\n  display: none !important; }\n\n.tabulator-print-table {\n  border-collapse: collapse; }\n  .tabulator-print-table .tabulator-data-tree-branch {\n    display: inline-block;\n    vertical-align: middle;\n    height: 9px;\n    width: 7px;\n    margin-top: -9px;\n    margin-right: 5px;\n    border-bottom-left-radius: 1px;\n    border-left: 2px solid #aaa;\n    border-bottom: 2px solid #aaa; }\n  .tabulator-print-table .tabulator-print-table-group {\n    box-sizing: border-box;\n    border-bottom: 1px solid #999;\n    border-right: 1px solid #aaa;\n    border-top: 1px solid #999;\n    padding: 5px;\n    padding-left: 10px;\n    background: #ccc;\n    font-weight: bold;\n    min-width: 100%; }\n    @media (hover: hover) and (pointer: fine) {\n      .tabulator-print-table .tabulator-print-table-group:hover {\n        cursor: pointer;\n        background-color: rgba(0, 0, 0, 0.1); } }\n    .tabulator-print-table .tabulator-print-table-group.tabulator-group-visible .tabulator-arrow {\n      margin-right: 10px;\n      border-left: 6px solid transparent;\n      border-right: 6px solid transparent;\n      border-top: 6px solid #666;\n      border-bottom: 0; }\n    .tabulator-print-table .tabulator-print-table-group.tabulator-group-level-1 td {\n      padding-left: 30px !important; }\n    .tabulator-print-table .tabulator-print-table-group.tabulator-group-level-2 td {\n      padding-left: 50px !important; }\n    .tabulator-print-table .tabulator-print-table-group.tabulator-group-level-3 td {\n      padding-left: 70px !important; }\n    .tabulator-print-table .tabulator-print-table-group.tabulator-group-level-4 td {\n      padding-left: 90px !important; }\n    .tabulator-print-table .tabulator-print-table-group.tabulator-group-level-5 td {\n      padding-left: 110px !important; }\n    .tabulator-print-table .tabulator-print-table-group .tabulator-group-toggle {\n      display: inline-block; }\n    .tabulator-print-table .tabulator-print-table-group .tabulator-arrow {\n      display: inline-block;\n      width: 0;\n      height: 0;\n      margin-right: 16px;\n      border-top: 6px solid transparent;\n      border-bottom: 6px solid transparent;\n      border-right: 0;\n      border-left: 6px solid #666;\n      vertical-align: middle; }\n    .tabulator-print-table .tabulator-print-table-group span {\n      margin-left: 10px;\n      color: #d00; }\n  .tabulator-print-table .tabulator-data-tree-control {\n    display: inline-flex;\n    justify-content: center;\n    align-items: center;\n    vertical-align: middle;\n    height: 11px;\n    width: 11px;\n    margin-right: 5px;\n    border: 1px solid #333;\n    border-radius: 2px;\n    background: rgba(0, 0, 0, 0.1);\n    overflow: hidden; }\n    @media (hover: hover) and (pointer: fine) {\n      .tabulator-print-table .tabulator-data-tree-control:hover {\n        cursor: pointer;\n        background: rgba(0, 0, 0, 0.2); } }\n    .tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-collapse {\n      display: inline-block;\n      position: relative;\n      height: 7px;\n      width: 1px;\n      background: transparent; }\n      .tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-collapse:after {\n        position: absolute;\n        content: "";\n        left: -3px;\n        top: 3px;\n        height: 1px;\n        width: 7px;\n        background: #333; }\n    .tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-expand {\n      display: inline-block;\n      position: relative;\n      height: 7px;\n      width: 1px;\n      background: #333; }\n      .tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-expand:after {\n        position: absolute;\n        content: "";\n        left: -3px;\n        top: 3px;\n        height: 1px;\n        width: 7px;\n        background: #333; }\n','.tabulator {\n  position: relative;\n  border: 1px solid #999;\n  background-color: #888;\n  font-size: 14px;\n  text-align: left;\n  overflow: hidden;\n  -webkit-transform: translateZ(0);\n  -moz-transform: translateZ(0);\n  -ms-transform: translateZ(0);\n  -o-transform: translateZ(0);\n  transform: translateZ(0);\n}\n\n.tabulator[tabulator-layout="fitDataFill"] .tabulator-tableholder .tabulator-table {\n  min-width: 100%;\n}\n\n.tabulator[tabulator-layout="fitDataTable"] {\n  display: inline-block;\n}\n\n.tabulator.tabulator-block-select {\n  user-select: none;\n}\n\n.tabulator .tabulator-header {\n  position: relative;\n  box-sizing: border-box;\n  width: 100%;\n  border-bottom: 1px solid #999;\n  background-color: #e6e6e6;\n  color: #555;\n  font-weight: bold;\n  white-space: nowrap;\n  overflow: hidden;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n}\n\n.tabulator .tabulator-header.tabulator-header-hidden {\n  display: none;\n}\n\n.tabulator .tabulator-header .tabulator-header-contents {\n  position: relative;\n  overflow: hidden;\n}\n\n.tabulator .tabulator-header .tabulator-header-contents .tabulator-headers {\n  display: inline-block;\n}\n\n.tabulator .tabulator-header .tabulator-col {\n  display: inline-flex;\n  position: relative;\n  box-sizing: border-box;\n  flex-direction: column;\n  justify-content: flex-start;\n  border-right: 1px solid #aaa;\n  background: #e6e6e6;\n  text-align: left;\n  vertical-align: bottom;\n  overflow: hidden;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-moving {\n  position: absolute;\n  border: 1px solid #999;\n  background: #cdcdcd;\n  pointer-events: none;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content {\n  box-sizing: border-box;\n  position: relative;\n  padding: 4px;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-header-popup-button {\n  padding: 0 8px;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-header-popup-button:hover {\n  cursor: pointer;\n  opacity: .6;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title-holder {\n  position: relative;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title {\n  box-sizing: border-box;\n  width: 100%;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  vertical-align: bottom;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title.tabulator-col-title-wrap {\n  white-space: normal;\n  text-overflow: initial;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title .tabulator-title-editor {\n  box-sizing: border-box;\n  width: 100%;\n  border: 1px solid #999;\n  padding: 1px;\n  background: #fff;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title .tabulator-header-popup-button + .tabulator-title-editor {\n  width: calc(100% - 22px);\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter {\n  display: flex;\n  align-items: center;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  right: 4px;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n  width: 0;\n  height: 0;\n  border-left: 6px solid transparent;\n  border-right: 6px solid transparent;\n  border-bottom: 6px solid #bbb;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-group .tabulator-col-group-cols {\n  position: relative;\n  display: flex;\n  border-top: 1px solid #aaa;\n  overflow: hidden;\n  margin-right: -1px;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter {\n  position: relative;\n  box-sizing: border-box;\n  margin-top: 2px;\n  width: 100%;\n  text-align: center;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter textarea {\n  height: auto !important;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter svg {\n  margin-top: 3px;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter input::-ms-clear {\n  width: 0;\n  height: 0;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable .tabulator-col-title {\n  padding-right: 25px;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-header .tabulator-col.tabulator-sortable.tabulator-col-sorter-element:hover {\n    cursor: pointer;\n    background-color: #cdcdcd;\n  }\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="none"] .tabulator-col-content .tabulator-col-sorter {\n  color: #bbb;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="none"] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover {\n    cursor: pointer;\n    border-bottom: 6px solid #555;\n  }\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="none"] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n  border-top: none;\n  border-bottom: 6px solid #bbb;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="ascending"] .tabulator-col-content .tabulator-col-sorter {\n  color: #666;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="ascending"] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover {\n    cursor: pointer;\n    border-bottom: 6px solid #555;\n  }\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="ascending"] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n  border-top: none;\n  border-bottom: 6px solid #666;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="descending"] .tabulator-col-content .tabulator-col-sorter {\n  color: #666;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="descending"] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover {\n    cursor: pointer;\n    border-top: 6px solid #555;\n  }\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="descending"] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n  border-bottom: none;\n  border-top: 6px solid #666;\n  color: #666;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical .tabulator-col-content .tabulator-col-title {\n  writing-mode: vertical-rl;\n  text-orientation: mixed;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-col-vertical-flip .tabulator-col-title {\n  transform: rotate(180deg);\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable .tabulator-col-title {\n  padding-right: 0;\n  padding-top: 20px;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable.tabulator-col-vertical-flip .tabulator-col-title {\n  padding-right: 0;\n  padding-bottom: 20px;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable .tabulator-col-sorter {\n  justify-content: center;\n  left: 0;\n  right: 0;\n  top: 4px;\n  bottom: auto;\n}\n\n.tabulator .tabulator-header .tabulator-frozen {\n  position: sticky;\n  left: 0;\n  z-index: 11;\n}\n\n.tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-left {\n  border-right: 2px solid #aaa;\n}\n\n.tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-right {\n  border-left: 2px solid #aaa;\n}\n\n.tabulator .tabulator-header .tabulator-calcs-holder {\n  box-sizing: border-box;\n  background: #f3f3f3 !important;\n  border-top: 1px solid #aaa;\n  border-bottom: 1px solid #aaa;\n}\n\n.tabulator .tabulator-header .tabulator-calcs-holder .tabulator-row {\n  background: #f3f3f3 !important;\n}\n\n.tabulator .tabulator-header .tabulator-calcs-holder .tabulator-row .tabulator-col-resize-handle {\n  display: none;\n}\n\n.tabulator .tabulator-header .tabulator-frozen-rows-holder:empty {\n  display: none;\n}\n\n.tabulator .tabulator-tableholder {\n  position: relative;\n  width: 100%;\n  white-space: nowrap;\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n}\n\n.tabulator .tabulator-tableholder:focus {\n  outline: none;\n}\n\n.tabulator .tabulator-tableholder .tabulator-placeholder {\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n}\n\n.tabulator .tabulator-tableholder .tabulator-placeholder[tabulator-render-mode="virtual"] {\n  min-height: 100%;\n  min-width: 100%;\n}\n\n.tabulator .tabulator-tableholder .tabulator-placeholder .tabulator-placeholder-contents {\n  display: inline-block;\n  text-align: center;\n  padding: 10px;\n  color: #ccc;\n  font-weight: bold;\n  font-size: 20px;\n  white-space: normal;\n}\n\n.tabulator .tabulator-tableholder .tabulator-table {\n  position: relative;\n  display: inline-block;\n  background-color: #fff;\n  white-space: nowrap;\n  overflow: visible;\n  color: #333;\n}\n\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs {\n  font-weight: bold;\n  background: #e2e2e2 !important;\n}\n\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs.tabulator-calcs-top {\n  border-bottom: 2px solid #aaa;\n}\n\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs.tabulator-calcs-bottom {\n  border-top: 2px solid #aaa;\n}\n\n.tabulator .tabulator-footer {\n  border-top: 1px solid #999;\n  background-color: #e6e6e6;\n  color: #555;\n  font-weight: bold;\n  white-space: nowrap;\n  user-select: none;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n}\n\n.tabulator .tabulator-footer .tabulator-footer-contents {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  padding: 5px 10px;\n}\n\n.tabulator .tabulator-footer .tabulator-footer-contents:empty {\n  display: none;\n}\n\n.tabulator .tabulator-footer .tabulator-calcs-holder {\n  box-sizing: border-box;\n  width: 100%;\n  text-align: left;\n  background: #f3f3f3 !important;\n  border-bottom: 1px solid #aaa;\n  border-top: 1px solid #aaa;\n  overflow: hidden;\n}\n\n.tabulator .tabulator-footer .tabulator-calcs-holder .tabulator-row {\n  display: inline-block;\n  background: #f3f3f3 !important;\n}\n\n.tabulator .tabulator-footer .tabulator-calcs-holder .tabulator-row .tabulator-col-resize-handle {\n  display: none;\n}\n\n.tabulator .tabulator-footer .tabulator-calcs-holder:only-child {\n  margin-bottom: -5px;\n  border-bottom: none;\n}\n\n.tabulator .tabulator-footer > * + .tabulator-page-counter {\n  margin-left: 10px;\n}\n\n.tabulator .tabulator-footer .tabulator-page-counter {\n  font-weight: normal;\n}\n\n.tabulator .tabulator-footer .tabulator-paginator {\n  flex: 1;\n  text-align: right;\n  color: #555;\n  font-family: inherit;\n  font-weight: inherit;\n  font-size: inherit;\n}\n\n.tabulator .tabulator-footer .tabulator-page-size {\n  display: inline-block;\n  margin: 0 5px;\n  padding: 2px 5px;\n  border: 1px solid #aaa;\n  border-radius: 3px;\n}\n\n.tabulator .tabulator-footer .tabulator-pages {\n  margin: 0 7px;\n}\n\n.tabulator .tabulator-footer .tabulator-page {\n  display: inline-block;\n  margin: 0 2px;\n  padding: 2px 5px;\n  border: 1px solid #aaa;\n  border-radius: 3px;\n  background: rgba(255, 255, 255, 0.2);\n}\n\n.tabulator .tabulator-footer .tabulator-page.active {\n  color: #d00;\n}\n\n.tabulator .tabulator-footer .tabulator-page:disabled {\n  opacity: .5;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-footer .tabulator-page:not(.disabled):hover {\n    cursor: pointer;\n    background: rgba(0, 0, 0, 0.2);\n    color: #fff;\n  }\n}\n\n.tabulator .tabulator-col-resize-handle {\n  position: relative;\n  display: inline-block;\n  width: 6px;\n  margin-left: -3px;\n  margin-right: -3px;\n  z-index: 10;\n  vertical-align: middle;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-col-resize-handle:hover {\n    cursor: ew-resize;\n  }\n}\n\n.tabulator .tabulator-col-resize-handle:last-of-type {\n  width: 3px;\n  margin-right: 0;\n}\n\n.tabulator .tabulator-alert {\n  position: absolute;\n  display: flex;\n  align-items: center;\n  top: 0;\n  left: 0;\n  z-index: 100;\n  height: 100%;\n  width: 100%;\n  background: rgba(0, 0, 0, 0.4);\n  text-align: center;\n}\n\n.tabulator .tabulator-alert .tabulator-alert-msg {\n  display: inline-block;\n  margin: 0 auto;\n  padding: 10px 20px;\n  border-radius: 10px;\n  background: #fff;\n  font-weight: bold;\n  font-size: 16px;\n}\n\n.tabulator .tabulator-alert .tabulator-alert-msg.tabulator-alert-state-msg {\n  border: 4px solid #333;\n  color: #000;\n}\n\n.tabulator .tabulator-alert .tabulator-alert-msg.tabulator-alert-state-error {\n  border: 4px solid #D00;\n  color: #590000;\n}\n\n.tabulator-row {\n  position: relative;\n  box-sizing: border-box;\n  min-height: 22px;\n  background-color: #fff;\n}\n\n.tabulator-row.tabulator-row-even {\n  background-color: #EFEFEF;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row.tabulator-selectable:hover {\n    background-color: #bbb;\n    cursor: pointer;\n  }\n}\n\n.tabulator-row.tabulator-selected {\n  background-color: #9ABCEA;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row.tabulator-selected:hover {\n    background-color: #769BCC;\n    cursor: pointer;\n  }\n}\n\n.tabulator-row.tabulator-row-moving {\n  border: 1px solid #000;\n  background: #fff;\n}\n\n.tabulator-row.tabulator-moving {\n  position: absolute;\n  border-top: 1px solid #aaa;\n  border-bottom: 1px solid #aaa;\n  pointer-events: none;\n  z-index: 15;\n}\n\n.tabulator-row .tabulator-row-resize-handle {\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  height: 5px;\n}\n\n.tabulator-row .tabulator-row-resize-handle.prev {\n  top: 0;\n  bottom: auto;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row .tabulator-row-resize-handle:hover {\n    cursor: ns-resize;\n  }\n}\n\n.tabulator-row .tabulator-responsive-collapse {\n  box-sizing: border-box;\n  padding: 5px;\n  border-top: 1px solid #aaa;\n  border-bottom: 1px solid #aaa;\n}\n\n.tabulator-row .tabulator-responsive-collapse:empty {\n  display: none;\n}\n\n.tabulator-row .tabulator-responsive-collapse table {\n  font-size: 14px;\n}\n\n.tabulator-row .tabulator-responsive-collapse table tr td {\n  position: relative;\n}\n\n.tabulator-row .tabulator-responsive-collapse table tr td:first-of-type {\n  padding-right: 10px;\n}\n\n.tabulator-row .tabulator-cell {\n  display: inline-block;\n  position: relative;\n  box-sizing: border-box;\n  padding: 4px;\n  border-right: 1px solid #aaa;\n  vertical-align: middle;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.tabulator-row .tabulator-cell.tabulator-frozen {\n  display: inline-block;\n  position: sticky;\n  left: 0;\n  background-color: inherit;\n  z-index: 11;\n}\n\n.tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-left {\n  border-right: 2px solid #aaa;\n}\n\n.tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-right {\n  border-left: 2px solid #aaa;\n}\n\n.tabulator-row .tabulator-cell.tabulator-editing {\n  border: 1px solid #1D68CD;\n  outline: none;\n  padding: 0;\n}\n\n.tabulator-row .tabulator-cell.tabulator-editing input,\n.tabulator-row .tabulator-cell.tabulator-editing select {\n  border: 1px;\n  background: transparent;\n  outline: none;\n}\n\n.tabulator-row .tabulator-cell.tabulator-validation-fail {\n  border: 1px solid #dd0000;\n}\n\n.tabulator-row .tabulator-cell.tabulator-validation-fail input,\n.tabulator-row .tabulator-cell.tabulator-validation-fail select {\n  border: 1px;\n  background: transparent;\n  color: #dd0000;\n}\n\n.tabulator-row .tabulator-cell.tabulator-row-handle {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n}\n\n.tabulator-row .tabulator-cell.tabulator-row-handle .tabulator-row-handle-box {\n  width: 80%;\n}\n\n.tabulator-row .tabulator-cell.tabulator-row-handle .tabulator-row-handle-box .tabulator-row-handle-bar {\n  width: 100%;\n  height: 3px;\n  margin-top: 2px;\n  background: #666;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-branch-empty {\n  display: inline-block;\n  width: 7px;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-branch {\n  display: inline-block;\n  vertical-align: middle;\n  height: 9px;\n  width: 7px;\n  margin-top: -9px;\n  margin-right: 5px;\n  border-bottom-left-radius: 1px;\n  border-left: 2px solid #aaa;\n  border-bottom: 2px solid #aaa;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-control {\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  vertical-align: middle;\n  height: 11px;\n  width: 11px;\n  margin-right: 5px;\n  border: 1px solid #333;\n  border-radius: 2px;\n  background: rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row .tabulator-cell .tabulator-data-tree-control:hover {\n    cursor: pointer;\n    background: rgba(0, 0, 0, 0.2);\n  }\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-collapse {\n  display: inline-block;\n  position: relative;\n  height: 7px;\n  width: 1px;\n  background: transparent;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-collapse:after {\n  position: absolute;\n  content: "";\n  left: -3px;\n  top: 3px;\n  height: 1px;\n  width: 7px;\n  background: #333;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-expand {\n  display: inline-block;\n  position: relative;\n  height: 7px;\n  width: 1px;\n  background: #333;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-expand:after {\n  position: absolute;\n  content: "";\n  left: -3px;\n  top: 3px;\n  height: 1px;\n  width: 7px;\n  background: #333;\n}\n\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n  height: 15px;\n  width: 15px;\n  border-radius: 20px;\n  background: #666;\n  color: #fff;\n  font-weight: bold;\n  font-size: 1.1em;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle:hover {\n    opacity: .7;\n    cursor: pointer;\n  }\n}\n\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle.open .tabulator-responsive-collapse-toggle-close {\n  display: initial;\n}\n\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle.open .tabulator-responsive-collapse-toggle-open {\n  display: none;\n}\n\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle svg {\n  stroke: #fff;\n}\n\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle .tabulator-responsive-collapse-toggle-close {\n  display: none;\n}\n\n.tabulator-row .tabulator-cell .tabulator-traffic-light {\n  display: inline-block;\n  height: 14px;\n  width: 14px;\n  border-radius: 14px;\n}\n\n.tabulator-row.tabulator-group {\n  box-sizing: border-box;\n  border-bottom: 1px solid #999;\n  border-right: 1px solid #aaa;\n  border-top: 1px solid #999;\n  padding: 5px;\n  padding-left: 10px;\n  background: #ccc;\n  font-weight: bold;\n  min-width: 100%;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row.tabulator-group:hover {\n    cursor: pointer;\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n}\n\n.tabulator-row.tabulator-group.tabulator-group-visible .tabulator-arrow {\n  margin-right: 10px;\n  border-left: 6px solid transparent;\n  border-right: 6px solid transparent;\n  border-top: 6px solid #666;\n  border-bottom: 0;\n}\n\n.tabulator-row.tabulator-group.tabulator-group-level-1 {\n  padding-left: 30px;\n}\n\n.tabulator-row.tabulator-group.tabulator-group-level-2 {\n  padding-left: 50px;\n}\n\n.tabulator-row.tabulator-group.tabulator-group-level-3 {\n  padding-left: 70px;\n}\n\n.tabulator-row.tabulator-group.tabulator-group-level-4 {\n  padding-left: 90px;\n}\n\n.tabulator-row.tabulator-group.tabulator-group-level-5 {\n  padding-left: 110px;\n}\n\n.tabulator-row.tabulator-group .tabulator-group-toggle {\n  display: inline-block;\n}\n\n.tabulator-row.tabulator-group .tabulator-arrow {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-right: 16px;\n  border-top: 6px solid transparent;\n  border-bottom: 6px solid transparent;\n  border-right: 0;\n  border-left: 6px solid #666;\n  vertical-align: middle;\n}\n\n.tabulator-row.tabulator-group span {\n  margin-left: 10px;\n  color: #d00;\n}\n\n.tabulator-popup-container {\n  position: absolute;\n  display: inline-block;\n  box-sizing: border-box;\n  background: #fff;\n  border: 1px solid #aaa;\n  box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.2);\n  font-size: 14px;\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n  z-index: 10000;\n}\n\n.tabulator-popup {\n  padding: 5px;\n  border-radius: 3px;\n}\n\n.tabulator-tooltip {\n  max-width: Min(500px, 100%);\n  padding: 3px 5px;\n  border-radius: 2px;\n  box-shadow: none;\n  font-size: 12px;\n  pointer-events: none;\n}\n\n.tabulator-menu .tabulator-menu-item {\n  position: relative;\n  box-sizing: border-box;\n  padding: 5px 10px;\n  user-select: none;\n}\n\n.tabulator-menu .tabulator-menu-item.tabulator-menu-item-disabled {\n  opacity: .5;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-menu .tabulator-menu-item:not(.tabulator-menu-item-disabled):hover {\n    cursor: pointer;\n    background: #EFEFEF;\n  }\n}\n\n.tabulator-menu .tabulator-menu-item.tabulator-menu-item-submenu {\n  padding-right: 25px;\n}\n\n.tabulator-menu .tabulator-menu-item.tabulator-menu-item-submenu::after {\n  display: inline-block;\n  position: absolute;\n  top: calc(5px + .4em);\n  right: 10px;\n  height: 7px;\n  width: 7px;\n  content: \'\';\n  border-width: 1px 1px 0 0;\n  border-style: solid;\n  border-color: #aaa;\n  vertical-align: top;\n  transform: rotate(45deg);\n}\n\n.tabulator-menu .tabulator-menu-separator {\n  border-top: 1px solid #aaa;\n}\n\n.tabulator-edit-list {\n  max-height: 200px;\n  font-size: 14px;\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item {\n  padding: 4px;\n  color: #333;\n  outline: none;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.active {\n  color: #fff;\n  background: #1D68CD;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.active.focused {\n  outline: 1px solid rgba(255, 255, 255, 0.5);\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.focused {\n  outline: 1px solid #1D68CD;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-edit-list .tabulator-edit-list-item:hover {\n    cursor: pointer;\n    color: #fff;\n    background: #1D68CD;\n  }\n}\n\n.tabulator-edit-list .tabulator-edit-list-placeholder {\n  padding: 4px;\n  color: #333;\n  text-align: center;\n}\n\n.tabulator-edit-list .tabulator-edit-list-group {\n  border-bottom: 1px solid #aaa;\n  padding: 4px;\n  padding-top: 6px;\n  color: #333;\n  font-weight: bold;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-2,\n.tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-2 {\n  padding-left: 12px;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-3,\n.tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-3 {\n  padding-left: 20px;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-4,\n.tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-4 {\n  padding-left: 28px;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-5,\n.tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-5 {\n  padding-left: 36px;\n}\n\n.tabulator.tabulator-ltr {\n  direction: ltr;\n}\n\n.tabulator.tabulator-rtl {\n  text-align: initial;\n  direction: rtl;\n}\n\n.tabulator.tabulator-rtl .tabulator-header .tabulator-col {\n  text-align: initial;\n  border-left: 1px solid #aaa;\n  border-right: initial;\n}\n\n.tabulator.tabulator-rtl .tabulator-header .tabulator-col.tabulator-col-group .tabulator-col-group-cols {\n  margin-right: initial;\n  margin-left: -1px;\n}\n\n.tabulator.tabulator-rtl .tabulator-header .tabulator-col.tabulator-sortable .tabulator-col-title {\n  padding-right: 0;\n  padding-left: 25px;\n}\n\n.tabulator.tabulator-rtl .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter {\n  left: 8px;\n  right: initial;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell {\n  border-right: initial;\n  border-left: 1px solid #aaa;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell .tabulator-data-tree-branch {\n  margin-right: initial;\n  margin-left: 5px;\n  border-bottom-left-radius: initial;\n  border-bottom-right-radius: 1px;\n  border-left: initial;\n  border-right: 2px solid #aaa;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell .tabulator-data-tree-control {\n  margin-right: initial;\n  margin-left: 5px;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-left {\n  border-left: 2px solid #aaa;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-right {\n  border-right: 2px solid #aaa;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-col-resize-handle:last-of-type {\n  width: 3px;\n  margin-left: 0;\n  margin-right: -3px;\n}\n\n.tabulator.tabulator-rtl .tabulator-footer .tabulator-calcs-holder {\n  text-align: initial;\n}\n\n.tabulator-print-fullscreen {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 10000;\n}\n\nbody.tabulator-print-fullscreen-hide > *:not(.tabulator-print-fullscreen) {\n  display: none !important;\n}\n\n.tabulator-print-table {\n  border-collapse: collapse;\n}\n\n.tabulator-print-table .tabulator-data-tree-branch {\n  display: inline-block;\n  vertical-align: middle;\n  height: 9px;\n  width: 7px;\n  margin-top: -9px;\n  margin-right: 5px;\n  border-bottom-left-radius: 1px;\n  border-left: 2px solid #aaa;\n  border-bottom: 2px solid #aaa;\n}\n\n.tabulator-print-table .tabulator-print-table-group {\n  box-sizing: border-box;\n  border-bottom: 1px solid #999;\n  border-right: 1px solid #aaa;\n  border-top: 1px solid #999;\n  padding: 5px;\n  padding-left: 10px;\n  background: #ccc;\n  font-weight: bold;\n  min-width: 100%;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-print-table .tabulator-print-table-group:hover {\n    cursor: pointer;\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-visible .tabulator-arrow {\n  margin-right: 10px;\n  border-left: 6px solid transparent;\n  border-right: 6px solid transparent;\n  border-top: 6px solid #666;\n  border-bottom: 0;\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-1 td {\n  padding-left: 30px !important;\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-2 td {\n  padding-left: 50px !important;\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-3 td {\n  padding-left: 70px !important;\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-4 td {\n  padding-left: 90px !important;\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-5 td {\n  padding-left: 110px !important;\n}\n\n.tabulator-print-table .tabulator-print-table-group .tabulator-group-toggle {\n  display: inline-block;\n}\n\n.tabulator-print-table .tabulator-print-table-group .tabulator-arrow {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-right: 16px;\n  border-top: 6px solid transparent;\n  border-bottom: 6px solid transparent;\n  border-right: 0;\n  border-left: 6px solid #666;\n  vertical-align: middle;\n}\n\n.tabulator-print-table .tabulator-print-table-group span {\n  margin-left: 10px;\n  color: #d00;\n}\n\n.tabulator-print-table .tabulator-data-tree-control {\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  vertical-align: middle;\n  height: 11px;\n  width: 11px;\n  margin-right: 5px;\n  border: 1px solid #333;\n  border-radius: 2px;\n  background: rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-print-table .tabulator-data-tree-control:hover {\n    cursor: pointer;\n    background: rgba(0, 0, 0, 0.2);\n  }\n}\n\n.tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-collapse {\n  display: inline-block;\n  position: relative;\n  height: 7px;\n  width: 1px;\n  background: transparent;\n}\n\n.tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-collapse:after {\n  position: absolute;\n  content: "";\n  left: -3px;\n  top: 3px;\n  height: 1px;\n  width: 7px;\n  background: #333;\n}\n\n.tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-expand {\n  display: inline-block;\n  position: relative;\n  height: 7px;\n  width: 1px;\n  background: #333;\n}\n\n.tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-expand:after {\n  position: absolute;\n  content: "";\n  left: -3px;\n  top: 3px;\n  height: 1px;\n  width: 7px;\n  background: #333;\n}\n\n/*# sourceMappingURL=tabulator.css.map */'],sourceRoot:""}]);const l=a},426:(t,e,n)=>{"use strict";n.d(e,{Z:()=>u});var i=n(537),o=n.n(i),r=n(645),a=n.n(r),l=n(257),s=a()(o());s.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Epilogue:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Inter:wght@100;200;300;400;500;600;700;800;900&family=Orbitron:wght@400;500;600;700;800;900&family=Sintony:wght@400;700&display=swap);"]),s.i(l.Z),s.push([t.id,"* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n:root {\n    --gigantic-text: 4.768rem;\n    --jumbo-text: 3.815rem;\n    --h1-text: 3.052rem;\n    --h2-text: 2.441rem;\n    --h3-text: 1.953rem;\n    --h4-text: 1.563rem;\n    --h5-text: 1.25rem;\n    --small-text: 0.72rem;\n    --smaller-text: 0.64rem;\n    --smallest-text: 0.512rem;\n    --main-color: rgb(0,32,91);\n    --text-color: #0d0607;\n    --dark-color: #2b2b2b;\n    --third-color: #b9e937;\n    --red-color: #b90000;\n}\n\nhtml {\n    font-size: 100%;\n    scroll-behavior: smooth;\n}\n\nbody {\n    font-family: 'Sintony', sans-serif;\n    font-weight: 400;\n    color: white;\n}\n\na {\n    cursor: pointer;\n}\n\nbutton {\n    cursor: pointer;\n}\n\np {margin-bottom: 1rem;}\n\nh1, h2, h3, h4, h5 {\n  margin: 3rem 0 1.38rem;\n  font-weight: 700;\n  line-height: 1;\n}\n\nh1 {\n  margin-top: 0;\n  font-size: var(--h1-text);\n  font-weight: 700;\n  text-transform: uppercase;\n}\n\nh2 {font-size: var(--h2-text);}\n\nh3 {font-size: var(--h3-text);}\n\nh4 {font-size: var(--h4-text);}\n\nh5 {font-size: var(--h5-text);}\n\n.material-symbols-outlined {\n  font-variation-settings:\n  'FILL' 0,\n  'wght' 400,\n  'GRAD' 0,\n  'opsz' 24\n}\n\nul {list-style-type: none;}\n\na {\n    text-decoration: none;\n    color: inherit;\n}\n\n.header {\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n    align-items: center;\n    background-color: var(--main-color);\n}\n\n.header__logo {\n    height: auto;\n    width: 100px;\n}\n\n.divider {\n    position: relative;\n    margin-top: 10px;\n    width: 160px;\n    border-top: 1px solid white;\n}\n\n.header__title {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 150px;\n    width: 100%;\n    gap: 15px;\n}\n\n.header__title__text {\n    text-transform: uppercase;\n    font-weight: 900;\n    font-size: var(--h1-text);\n    font-family: 'Inter', sans-serif;\n    text-align: center;\n    width: 250px;\n}\n\n.header__badge {\n    width: -webkit-fill-available;\n    background: rgb(0,32,91);\n    background: linear-gradient(180deg, rgba(0,32,91,1) 0%, rgba(0,0,0,1) 100%);\n}\n\n.header__stats-section {\n    width: -webkit-fill-available;\n    padding: 15px 25px 40px 25px;\n}\n\n.header__stats-section__list__item__logo {\n    width: 50px;\n    height: auto;\n}\n\n\n.header__stats-section__top-section {\n    display: flex;\n    justify-content: space-around;\n    margin-bottom: 25px;\n    margin-top: 25px;\n}\n\n.section-title > span {\n    font-size: var(--h4-text);\n    font-family: 'Sintony', sans-serif;\n    font-weight: 700;\n}\n\n.header__stats-section-top {\n    padding-top: 10px;\n}\n\n.header__stats-section__top {\n    color: white;\n    text-transform: uppercase;\n    font-weight: 700;\n    font-size: var(--smaller-text);\n}\n\n.stats-results {\n    color: white;\n    text-align: center;\n    font-size: var(--h1-text);\n    font-weight: 700;\n}\n\n.participation {\n    display: flex;\n    gap: 15px;\n    padding: 10px;\n}\n\n.team-logo {\n    width: 40px;\n    height: auto;\n}\n\n.tabulator {\n    border-color: #c5c5c5;\n\n}\n\n.header__stats-section-middle {\n    padding-bottom: 5px;\n    padding-top: 15px;\n}\n\n.header__stats-sectio-bottom-section {\n    margin-top: 25px;\n}\n\n.header__stats-sectio-bottom-section .divider {\n    width: 200px;\n}\n\n#stats-table {\n    margin-bottom: 35px;\n    margin-top: 35px;\n}\n\n#stats-table .tabulator-cell[tabulator-field=\"equipe\"] {\n    font-size: var(--small-text);\n}\n\n.tabulator .tabulator-header,\n.tabulator .tabulator-header .tabulator-col {\n    border-color: #c5c5c5;\n    color: #dfdfdf;\n    background-color: #0a0a0a;\n    font-weight: 600;\n}\n\n.tabulator .tabulator-header .tabulator-col {\n    height: 40px;\n    justify-content: center;\n}\n\n#stats-table .tabulator-cell {\n    gap: 15px;\n    padding: 0;\n    color:#fff;\n    font-weight: 500;\n}\n\n#stats-table .tabulator-cell > div {\n    text-transform: uppercase;\n}\n\n#stats-table .tabulator-cell > img {\n    width: auto;\n    max-width: 59px;\n    height: 100%;\n    padding-left: 5px;\n    padding-right: 5px;\n}\n\n.tabulator-cell > img {\n    width: auto;\n    height: 100%;\n}\n\n/*Theme the Tabulator element*/\n#pick-table {\n    border: 1px solid #c5c5c5;\n}\n\n/*Theme the header*/\n.tabulator-header {\n    background-color:#1d191a;\n    color:#fff;\n}\n\n/*Allow column header names to wrap lines*/\n#pick-table .tabulator-header .tabulator-col,\n#pick-table .tabulator-header .tabulator-col-row-handle {\n    white-space: normal;\n}\n\n/*Color the table rows base on player name*/\n#pick-table .tabulator-table .tabulator-row.a-player {\n    background-color: #ffffff;\n}\n\n#pick-table .tabulator-table .tabulator-row.another-player {\n    background-color: #dbdbdb;\n}\n\n#pick-table .tabulator-cell[tabulator-field=\"joueur\"] {\n    font-size: var(--small-text);\n}\n\n/* Color the border cells */\n.tabulator-row .tabulator-cell {\n    border-bottom: 1px solid #c5c5c5;\n}\n\n#stats-table .tabulator-row .tabulator-cell:last-of-type,\n#stats-table .tabulator-header .tabulator-col:last-of-type {\n    border-right: none;\n}\n\n#stats-table .tabulator-row:last-of-type .tabulator-cell {\n    border-bottom: none;\n}\n\n.tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-right,\n.tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-right {\n    border-left: 1px;\n}\n\n.grayscale-effect {\n    filter: grayscale(100%);\n  }\n/* NHL TEAMS COLOR */\n#stats-table .anaheim-ducks {\n    background-color: #55472d;\n}\n\n.anaheim-ducks img, .anaheim-ducks {\n    background-color: #b6985a;\n}\n\n#stats-table .arizona-coyotes {\n    background-color: #390b18;\n}\n\n.arizona-coyotes img, .arizona-coyotes {\n    background-color: #7a0022;\n}\n\n#stats-table .boston-bruins {\n    background-color: #b48518;\n}\n\n.boston-bruins img, .boston-bruins {\n    background-color: #fdb91e;\n}\n\n#stats-table .buffalo-sabres {\n    background-color: #0a1c40;\n}\n\n.buffalo-sabres img, .buffalo-sabres {\n    background-color: #023089;\n}\n\n#stats-table .calgary-flames {\n    background-color: #68111e;\n}\n\n.calgary-flames img, .calgary-flames {\n    background-color: #e30a2b;\n}\n\n#stats-table .carolina-hurricanes {\n    background-color: #8c2626;\n}\n\n.carolina-hurricanes img, .carolina-hurricanes {\n    background-color: #c8102e;\n}\n\n#stats-table .chicago-blackhawks {\n    background-color: #670e1c;\n}\n\n.chicago-blackhawks img, .chicago-blackhawks {\n    background-color: #e30829;\n}\n\n#stats-table .colorado-avalanche {\n    background-color: #2f1214;\n}\n\n.colorado-avalanche img, .colorado-avalanche {\n    background-color: #6f263d;\n}\n\n#stats-table .columbus-blue-jackets {\n    background-color: #091c32;\n}\n\n.columbus-blue-jackets img, .columbus-blue-jackets {\n    background-color: #032d65;\n}\n\n#stats-table .dallas-stars {\n    background-color: #174233;\n}\n\n.dallas-stars img, .dallas-stars {\n    background-color: #00704a;\n}\n\n#stats-table .detroit-red-wings {\n    background-color: #640c18;\n}\n\n.detroit-red-wings img, .detroit-red-wings {\n    background-color: #e30524;\n}\n\n#stats-table .edmonton-oilers {\n    background-color: #001131;\n}\n\n.edmonton-oilers img, .edmonton-oilers {\n    background-color: #00205b;\n}\n\n#stats-table .florida-panthers {\n    background-color: #920b21;\n}\n\n.florida-panthers img, .florida-panthers {\n    background-color: #c8102e;\n}\n\n#stats-table .seattle-kraken {\n    background-color: #0a101e;\n}\n\n.seattle-kraken img, .seattle-kraken {\n    background-color: #000f32;\n}\n\n#stats-table .los-angeles-kings {\n    background-color: #5b5b5d;\n}\n\n.los-angeles-kings img, .los-angeles-kings {\n    background-color: #b1b6ba;\n}\n\n#stats-table .minnesota-wild {\n    background-color: #002217;\n}\n\n.minnesota-wild img, .minnesota-wild {\n    background-color: #025736;\n}\n\n#stats-table .montreal-canadiens {\n    background-color: #570d1a;\n}\n\n.montreal-canadiens img, .montreal-canadiens {\n    background-color: #c20828;\n}\n\n#stats-table .nashville-predators {\n    background-color: #71541a;\n}\n\n.nashville-predators img, .nashville-predators {\n    background-color: #fdb623;\n}\n\n#stats-table .new-jersey-devils {\n    background-color: #640c18;\n}\n\n.new-jersey-devils img, .new-jersey-devils {\n    background-color: #e10623;\n}\n\n#stats-table .new-york-islanders {\n    background-color: #0b2643;\n}\n\n.new-york-islanders img, .new-york-islanders {\n    background-color: #00478c;\n}\n\n#stats-table .new-york-rangers {\n    background-color: #183859;\n}\n\n.new-york-rangers img, .new-york-rangers {\n    background-color: #0056a8;\n}\n\n#stats-table .ottawa-senators {\n    background-color: #650c19;\n}\n\n.ottawa-senators img, .ottawa-senators {\n    background-color: #e30526;\n}\n\n#stats-table .philadelphia-flyers {\n    background-color: #6f290b;\n}\n\n.philadelphia-flyers img, .philadelphia-flyers {\n    background-color: #fc4c02;\n}\n\n#stats-table .pittsburgh-penguins {\n    background-color: #1b1b1c;\n}\n\n.pittsburgh-penguins img, .pittsburgh-penguins {\n    background-color: #0e0e0f;\n}\n\n#stats-table .san-jose-sharks {\n    background-color: #0a363d;\n}\n\n.san-jose-sharks img, .san-jose-sharks {\n    background-color: #006d80;\n}\n\n#stats-table .st-louis-blues {\n    background-color: #181a39;\n}\n\n.st-louis-blues img, .st-louis-blues {\n    background-color: #003087;\n}\n\n#stats-table .tampa-bay-lightning {\n    background-color: #0c0e24;\n}\n\n.tampa-bay-lightning img, .tampa-bay-lightning {\n    background-color: #00205b;\n}\n\n#stats-table .toronto-maple-leafs {\n    background-color: #151722;\n}\n\n.toronto-maple-leafs img, .toronto-maple-leafs {\n    background-color: #00205b;\n}\n\n#stats-table .vancouver-canucks {\n    background-color: #091d2e;\n}\n\n.vancouver-canucks img, .vancouver-canucks {\n    background-color: #012d53;\n}\n\n#stats-table .vegas-golden-knights {\n    background-color: #53472d;\n}\n\n.vegas-golden-knights img, .vegas-golden-knights {\n    background-color: #b7975c;\n}\n\n#stats-table .washington-capitals {\n    background-color: #660d1b;\n}\n\n.washington-capitals img, .washington-capitals {\n    background-color: #e30628;\n}\n\n#stats-table .winnipeg-jets {\n    background-color: #091c32;\n}\n\n.winnipeg-jets img, .winnipeg-jets {\n    background-color: #002e63;\n}\n\n@media only screen and (max-width: 365px) {\n    .header__title__text {\n        font-size: var(--h2-text);\n    }\n\n}\n\n@media only screen and (min-width: 768px) {\n    body {\n        background: rgb(0,32,91);\n        background: linear-gradient(180deg, rgba(0,32,91,1) 0%, rgba(0,0,0,1) 100%);\n    }\n    \n    .header {\n        background-color: transparent;\n    }\n\n    .main-index {\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n    }\n\n    .header__badge {\n        background-color: none;\n        background: none;\n    }\n\n    .section-title > span {\n        font-size: var(--jumbo-text);\n        line-height: 1;\n    }\n\n    .header__stats-section__top {\n        font-size: var(--small-text);\n    }\n\n    .stats-results {\n        font-size: var(--jumbo-text);\n    }\n\n    .header__stats-section {\n        padding-left: 100px;\n    }\n\n    .header__stats-section__top-section {\n        justify-content: center;\n        gap: 150px;\n        margin-top: 50px;\n    }\n\n    .stats-table-flex {\n        display: flex;\n        justify-content: center;\n    }\n\n    .stats-table-size {\n        min-width: 450px;\n    }\n\n    #stats-table {\n        width: -webkit-fill-available;\n        margin-top: 55px;\n    }\n\n    #stats-table .tabulator-cell[tabulator-field=\"equipe\"] {\n        font-size: 1rem;\n    }\n\n    .header__stats-sectio-bottom-section.section-title {\n        display: none;\n    }\n\n    .divider {\n        display: none;\n    }\n\n    .pick-table-flex {\n        display: flex;\n    }\n\n    .pick-table-size {\n        max-width: 700px;\n    }\n\n    #pick-table {\n        margin-top: 25px;\n    }\n\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAGA;IACI,SAAS;IACT,UAAU;IACV,sBAAsB;AAC1B;;AAEA;IACI,yBAAyB;IACzB,sBAAsB;IACtB,mBAAmB;IACnB,mBAAmB;IACnB,mBAAmB;IACnB,mBAAmB;IACnB,kBAAkB;IAClB,qBAAqB;IACrB,uBAAuB;IACvB,yBAAyB;IACzB,0BAA0B;IAC1B,qBAAqB;IACrB,qBAAqB;IACrB,sBAAsB;IACtB,oBAAoB;AACxB;;AAEA;IACI,eAAe;IACf,uBAAuB;AAC3B;;AAEA;IACI,kCAAkC;IAClC,gBAAgB;IAChB,YAAY;AAChB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA,GAAG,mBAAmB,CAAC;;AAEvB;EACE,sBAAsB;EACtB,gBAAgB;EAChB,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,yBAAyB;EACzB,gBAAgB;EAChB,yBAAyB;AAC3B;;AAEA,IAAI,yBAAyB,CAAC;;AAE9B,IAAI,yBAAyB,CAAC;;AAE9B,IAAI,yBAAyB,CAAC;;AAE9B,IAAI,yBAAyB,CAAC;;AAE9B;EACE;;;;;AAKF;;AAEA,IAAI,qBAAqB,CAAC;;AAE1B;IACI,qBAAqB;IACrB,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,sBAAsB;IACtB,mBAAmB;IACnB,mCAAmC;AACvC;;AAEA;IACI,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,gBAAgB;IAChB,YAAY;IACZ,2BAA2B;AAC/B;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,aAAa;IACb,WAAW;IACX,SAAS;AACb;;AAEA;IACI,yBAAyB;IACzB,gBAAgB;IAChB,yBAAyB;IACzB,gCAAgC;IAChC,kBAAkB;IAClB,YAAY;AAChB;;AAEA;IACI,6BAA6B;IAC7B,wBAAwB;IACxB,2EAA2E;AAC/E;;AAEA;IACI,6BAA6B;IAC7B,4BAA4B;AAChC;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;;AAGA;IACI,aAAa;IACb,6BAA6B;IAC7B,mBAAmB;IACnB,gBAAgB;AACpB;;AAEA;IACI,yBAAyB;IACzB,kCAAkC;IAClC,gBAAgB;AACpB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,YAAY;IACZ,yBAAyB;IACzB,gBAAgB;IAChB,8BAA8B;AAClC;;AAEA;IACI,YAAY;IACZ,kBAAkB;IAClB,yBAAyB;IACzB,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,SAAS;IACT,aAAa;AACjB;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,qBAAqB;;AAEzB;;AAEA;IACI,mBAAmB;IACnB,iBAAiB;AACrB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,mBAAmB;IACnB,gBAAgB;AACpB;;AAEA;IACI,4BAA4B;AAChC;;AAEA;;IAEI,qBAAqB;IACrB,cAAc;IACd,yBAAyB;IACzB,gBAAgB;AACpB;;AAEA;IACI,YAAY;IACZ,uBAAuB;AAC3B;;AAEA;IACI,SAAS;IACT,UAAU;IACV,UAAU;IACV,gBAAgB;AACpB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,WAAW;IACX,eAAe;IACf,YAAY;IACZ,iBAAiB;IACjB,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA,8BAA8B;AAC9B;IACI,yBAAyB;AAC7B;;AAEA,mBAAmB;AACnB;IACI,wBAAwB;IACxB,UAAU;AACd;;AAEA,0CAA0C;AAC1C;;IAEI,mBAAmB;AACvB;;AAEA,2CAA2C;AAC3C;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,4BAA4B;AAChC;;AAEA,2BAA2B;AAC3B;IACI,gCAAgC;AACpC;;AAEA;;IAEI,kBAAkB;AACtB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;;IAEI,gBAAgB;AACpB;;AAEA;IACI,uBAAuB;EACzB;AACF,oBAAoB;AACpB;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI;QACI,yBAAyB;IAC7B;;AAEJ;;AAEA;IACI;QACI,wBAAwB;QACxB,2EAA2E;IAC/E;;IAEA;QACI,6BAA6B;IACjC;;IAEA;QACI,aAAa;QACb,8BAA8B;IAClC;;IAEA;QACI,sBAAsB;QACtB,gBAAgB;IACpB;;IAEA;QACI,4BAA4B;QAC5B,cAAc;IAClB;;IAEA;QACI,4BAA4B;IAChC;;IAEA;QACI,4BAA4B;IAChC;;IAEA;QACI,mBAAmB;IACvB;;IAEA;QACI,uBAAuB;QACvB,UAAU;QACV,gBAAgB;IACpB;;IAEA;QACI,aAAa;QACb,uBAAuB;IAC3B;;IAEA;QACI,gBAAgB;IACpB;;IAEA;QACI,6BAA6B;QAC7B,gBAAgB;IACpB;;IAEA;QACI,eAAe;IACnB;;IAEA;QACI,aAAa;IACjB;;IAEA;QACI,aAAa;IACjB;;IAEA;QACI,aAAa;IACjB;;IAEA;QACI,gBAAgB;IACpB;;IAEA;QACI,gBAAgB;IACpB;;AAEJ",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Epilogue:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Inter:wght@100;200;300;400;500;600;700;800;900&family=Orbitron:wght@400;500;600;700;800;900&family=Sintony:wght@400;700&display=swap');\n@import  \"tabulator-tables\";\n\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n:root {\n    --gigantic-text: 4.768rem;\n    --jumbo-text: 3.815rem;\n    --h1-text: 3.052rem;\n    --h2-text: 2.441rem;\n    --h3-text: 1.953rem;\n    --h4-text: 1.563rem;\n    --h5-text: 1.25rem;\n    --small-text: 0.72rem;\n    --smaller-text: 0.64rem;\n    --smallest-text: 0.512rem;\n    --main-color: rgb(0,32,91);\n    --text-color: #0d0607;\n    --dark-color: #2b2b2b;\n    --third-color: #b9e937;\n    --red-color: #b90000;\n}\n\nhtml {\n    font-size: 100%;\n    scroll-behavior: smooth;\n}\n\nbody {\n    font-family: 'Sintony', sans-serif;\n    font-weight: 400;\n    color: white;\n}\n\na {\n    cursor: pointer;\n}\n\nbutton {\n    cursor: pointer;\n}\n\np {margin-bottom: 1rem;}\n\nh1, h2, h3, h4, h5 {\n  margin: 3rem 0 1.38rem;\n  font-weight: 700;\n  line-height: 1;\n}\n\nh1 {\n  margin-top: 0;\n  font-size: var(--h1-text);\n  font-weight: 700;\n  text-transform: uppercase;\n}\n\nh2 {font-size: var(--h2-text);}\n\nh3 {font-size: var(--h3-text);}\n\nh4 {font-size: var(--h4-text);}\n\nh5 {font-size: var(--h5-text);}\n\n.material-symbols-outlined {\n  font-variation-settings:\n  'FILL' 0,\n  'wght' 400,\n  'GRAD' 0,\n  'opsz' 24\n}\n\nul {list-style-type: none;}\n\na {\n    text-decoration: none;\n    color: inherit;\n}\n\n.header {\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n    align-items: center;\n    background-color: var(--main-color);\n}\n\n.header__logo {\n    height: auto;\n    width: 100px;\n}\n\n.divider {\n    position: relative;\n    margin-top: 10px;\n    width: 160px;\n    border-top: 1px solid white;\n}\n\n.header__title {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 150px;\n    width: 100%;\n    gap: 15px;\n}\n\n.header__title__text {\n    text-transform: uppercase;\n    font-weight: 900;\n    font-size: var(--h1-text);\n    font-family: 'Inter', sans-serif;\n    text-align: center;\n    width: 250px;\n}\n\n.header__badge {\n    width: -webkit-fill-available;\n    background: rgb(0,32,91);\n    background: linear-gradient(180deg, rgba(0,32,91,1) 0%, rgba(0,0,0,1) 100%);\n}\n\n.header__stats-section {\n    width: -webkit-fill-available;\n    padding: 15px 25px 40px 25px;\n}\n\n.header__stats-section__list__item__logo {\n    width: 50px;\n    height: auto;\n}\n\n\n.header__stats-section__top-section {\n    display: flex;\n    justify-content: space-around;\n    margin-bottom: 25px;\n    margin-top: 25px;\n}\n\n.section-title > span {\n    font-size: var(--h4-text);\n    font-family: 'Sintony', sans-serif;\n    font-weight: 700;\n}\n\n.header__stats-section-top {\n    padding-top: 10px;\n}\n\n.header__stats-section__top {\n    color: white;\n    text-transform: uppercase;\n    font-weight: 700;\n    font-size: var(--smaller-text);\n}\n\n.stats-results {\n    color: white;\n    text-align: center;\n    font-size: var(--h1-text);\n    font-weight: 700;\n}\n\n.participation {\n    display: flex;\n    gap: 15px;\n    padding: 10px;\n}\n\n.team-logo {\n    width: 40px;\n    height: auto;\n}\n\n.tabulator {\n    border-color: #c5c5c5;\n\n}\n\n.header__stats-section-middle {\n    padding-bottom: 5px;\n    padding-top: 15px;\n}\n\n.header__stats-sectio-bottom-section {\n    margin-top: 25px;\n}\n\n.header__stats-sectio-bottom-section .divider {\n    width: 200px;\n}\n\n#stats-table {\n    margin-bottom: 35px;\n    margin-top: 35px;\n}\n\n#stats-table .tabulator-cell[tabulator-field=\"equipe\"] {\n    font-size: var(--small-text);\n}\n\n.tabulator .tabulator-header,\n.tabulator .tabulator-header .tabulator-col {\n    border-color: #c5c5c5;\n    color: #dfdfdf;\n    background-color: #0a0a0a;\n    font-weight: 600;\n}\n\n.tabulator .tabulator-header .tabulator-col {\n    height: 40px;\n    justify-content: center;\n}\n\n#stats-table .tabulator-cell {\n    gap: 15px;\n    padding: 0;\n    color:#fff;\n    font-weight: 500;\n}\n\n#stats-table .tabulator-cell > div {\n    text-transform: uppercase;\n}\n\n#stats-table .tabulator-cell > img {\n    width: auto;\n    max-width: 59px;\n    height: 100%;\n    padding-left: 5px;\n    padding-right: 5px;\n}\n\n.tabulator-cell > img {\n    width: auto;\n    height: 100%;\n}\n\n/*Theme the Tabulator element*/\n#pick-table {\n    border: 1px solid #c5c5c5;\n}\n\n/*Theme the header*/\n.tabulator-header {\n    background-color:#1d191a;\n    color:#fff;\n}\n\n/*Allow column header names to wrap lines*/\n#pick-table .tabulator-header .tabulator-col,\n#pick-table .tabulator-header .tabulator-col-row-handle {\n    white-space: normal;\n}\n\n/*Color the table rows base on player name*/\n#pick-table .tabulator-table .tabulator-row.a-player {\n    background-color: #ffffff;\n}\n\n#pick-table .tabulator-table .tabulator-row.another-player {\n    background-color: #dbdbdb;\n}\n\n#pick-table .tabulator-cell[tabulator-field=\"joueur\"] {\n    font-size: var(--small-text);\n}\n\n/* Color the border cells */\n.tabulator-row .tabulator-cell {\n    border-bottom: 1px solid #c5c5c5;\n}\n\n#stats-table .tabulator-row .tabulator-cell:last-of-type,\n#stats-table .tabulator-header .tabulator-col:last-of-type {\n    border-right: none;\n}\n\n#stats-table .tabulator-row:last-of-type .tabulator-cell {\n    border-bottom: none;\n}\n\n.tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-right,\n.tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-right {\n    border-left: 1px;\n}\n\n.grayscale-effect {\n    filter: grayscale(100%);\n  }\n/* NHL TEAMS COLOR */\n#stats-table .anaheim-ducks {\n    background-color: #55472d;\n}\n\n.anaheim-ducks img, .anaheim-ducks {\n    background-color: #b6985a;\n}\n\n#stats-table .arizona-coyotes {\n    background-color: #390b18;\n}\n\n.arizona-coyotes img, .arizona-coyotes {\n    background-color: #7a0022;\n}\n\n#stats-table .boston-bruins {\n    background-color: #b48518;\n}\n\n.boston-bruins img, .boston-bruins {\n    background-color: #fdb91e;\n}\n\n#stats-table .buffalo-sabres {\n    background-color: #0a1c40;\n}\n\n.buffalo-sabres img, .buffalo-sabres {\n    background-color: #023089;\n}\n\n#stats-table .calgary-flames {\n    background-color: #68111e;\n}\n\n.calgary-flames img, .calgary-flames {\n    background-color: #e30a2b;\n}\n\n#stats-table .carolina-hurricanes {\n    background-color: #8c2626;\n}\n\n.carolina-hurricanes img, .carolina-hurricanes {\n    background-color: #c8102e;\n}\n\n#stats-table .chicago-blackhawks {\n    background-color: #670e1c;\n}\n\n.chicago-blackhawks img, .chicago-blackhawks {\n    background-color: #e30829;\n}\n\n#stats-table .colorado-avalanche {\n    background-color: #2f1214;\n}\n\n.colorado-avalanche img, .colorado-avalanche {\n    background-color: #6f263d;\n}\n\n#stats-table .columbus-blue-jackets {\n    background-color: #091c32;\n}\n\n.columbus-blue-jackets img, .columbus-blue-jackets {\n    background-color: #032d65;\n}\n\n#stats-table .dallas-stars {\n    background-color: #174233;\n}\n\n.dallas-stars img, .dallas-stars {\n    background-color: #00704a;\n}\n\n#stats-table .detroit-red-wings {\n    background-color: #640c18;\n}\n\n.detroit-red-wings img, .detroit-red-wings {\n    background-color: #e30524;\n}\n\n#stats-table .edmonton-oilers {\n    background-color: #001131;\n}\n\n.edmonton-oilers img, .edmonton-oilers {\n    background-color: #00205b;\n}\n\n#stats-table .florida-panthers {\n    background-color: #920b21;\n}\n\n.florida-panthers img, .florida-panthers {\n    background-color: #c8102e;\n}\n\n#stats-table .seattle-kraken {\n    background-color: #0a101e;\n}\n\n.seattle-kraken img, .seattle-kraken {\n    background-color: #000f32;\n}\n\n#stats-table .los-angeles-kings {\n    background-color: #5b5b5d;\n}\n\n.los-angeles-kings img, .los-angeles-kings {\n    background-color: #b1b6ba;\n}\n\n#stats-table .minnesota-wild {\n    background-color: #002217;\n}\n\n.minnesota-wild img, .minnesota-wild {\n    background-color: #025736;\n}\n\n#stats-table .montreal-canadiens {\n    background-color: #570d1a;\n}\n\n.montreal-canadiens img, .montreal-canadiens {\n    background-color: #c20828;\n}\n\n#stats-table .nashville-predators {\n    background-color: #71541a;\n}\n\n.nashville-predators img, .nashville-predators {\n    background-color: #fdb623;\n}\n\n#stats-table .new-jersey-devils {\n    background-color: #640c18;\n}\n\n.new-jersey-devils img, .new-jersey-devils {\n    background-color: #e10623;\n}\n\n#stats-table .new-york-islanders {\n    background-color: #0b2643;\n}\n\n.new-york-islanders img, .new-york-islanders {\n    background-color: #00478c;\n}\n\n#stats-table .new-york-rangers {\n    background-color: #183859;\n}\n\n.new-york-rangers img, .new-york-rangers {\n    background-color: #0056a8;\n}\n\n#stats-table .ottawa-senators {\n    background-color: #650c19;\n}\n\n.ottawa-senators img, .ottawa-senators {\n    background-color: #e30526;\n}\n\n#stats-table .philadelphia-flyers {\n    background-color: #6f290b;\n}\n\n.philadelphia-flyers img, .philadelphia-flyers {\n    background-color: #fc4c02;\n}\n\n#stats-table .pittsburgh-penguins {\n    background-color: #1b1b1c;\n}\n\n.pittsburgh-penguins img, .pittsburgh-penguins {\n    background-color: #0e0e0f;\n}\n\n#stats-table .san-jose-sharks {\n    background-color: #0a363d;\n}\n\n.san-jose-sharks img, .san-jose-sharks {\n    background-color: #006d80;\n}\n\n#stats-table .st-louis-blues {\n    background-color: #181a39;\n}\n\n.st-louis-blues img, .st-louis-blues {\n    background-color: #003087;\n}\n\n#stats-table .tampa-bay-lightning {\n    background-color: #0c0e24;\n}\n\n.tampa-bay-lightning img, .tampa-bay-lightning {\n    background-color: #00205b;\n}\n\n#stats-table .toronto-maple-leafs {\n    background-color: #151722;\n}\n\n.toronto-maple-leafs img, .toronto-maple-leafs {\n    background-color: #00205b;\n}\n\n#stats-table .vancouver-canucks {\n    background-color: #091d2e;\n}\n\n.vancouver-canucks img, .vancouver-canucks {\n    background-color: #012d53;\n}\n\n#stats-table .vegas-golden-knights {\n    background-color: #53472d;\n}\n\n.vegas-golden-knights img, .vegas-golden-knights {\n    background-color: #b7975c;\n}\n\n#stats-table .washington-capitals {\n    background-color: #660d1b;\n}\n\n.washington-capitals img, .washington-capitals {\n    background-color: #e30628;\n}\n\n#stats-table .winnipeg-jets {\n    background-color: #091c32;\n}\n\n.winnipeg-jets img, .winnipeg-jets {\n    background-color: #002e63;\n}\n\n@media only screen and (max-width: 365px) {\n    .header__title__text {\n        font-size: var(--h2-text);\n    }\n\n}\n\n@media only screen and (min-width: 768px) {\n    body {\n        background: rgb(0,32,91);\n        background: linear-gradient(180deg, rgba(0,32,91,1) 0%, rgba(0,0,0,1) 100%);\n    }\n    \n    .header {\n        background-color: transparent;\n    }\n\n    .main-index {\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n    }\n\n    .header__badge {\n        background-color: none;\n        background: none;\n    }\n\n    .section-title > span {\n        font-size: var(--jumbo-text);\n        line-height: 1;\n    }\n\n    .header__stats-section__top {\n        font-size: var(--small-text);\n    }\n\n    .stats-results {\n        font-size: var(--jumbo-text);\n    }\n\n    .header__stats-section {\n        padding-left: 100px;\n    }\n\n    .header__stats-section__top-section {\n        justify-content: center;\n        gap: 150px;\n        margin-top: 50px;\n    }\n\n    .stats-table-flex {\n        display: flex;\n        justify-content: center;\n    }\n\n    .stats-table-size {\n        min-width: 450px;\n    }\n\n    #stats-table {\n        width: -webkit-fill-available;\n        margin-top: 55px;\n    }\n\n    #stats-table .tabulator-cell[tabulator-field=\"equipe\"] {\n        font-size: 1rem;\n    }\n\n    .header__stats-sectio-bottom-section.section-title {\n        display: none;\n    }\n\n    .divider {\n        display: none;\n    }\n\n    .pick-table-flex {\n        display: flex;\n    }\n\n    .pick-table-size {\n        max-width: 700px;\n    }\n\n    #pick-table {\n        margin-top: 25px;\n    }\n\n}\n"],sourceRoot:""}]);const u=s},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",i=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),i&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),i&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,i,o,r){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(i)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(a[s]=!0)}for(var u=0;u<t.length;u++){var h=[].concat(t[u]);i&&a[h[0]]||(void 0!==r&&(void 0===h[5]||(h[1]="@layer".concat(h[5].length>0?" ".concat(h[5]):""," {").concat(h[1],"}")),h[5]=r),n&&(h[2]?(h[1]="@media ".concat(h[2]," {").concat(h[1],"}"),h[2]=n):h[2]=n),o&&(h[4]?(h[1]="@supports (".concat(h[4],") {").concat(h[1],"}"),h[4]=o):h[4]="".concat(o)),e.push(h))}},e}},537:t=>{"use strict";t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),r="/*# ".concat(o," */");return[e].concat([r]).join("\n")}return[e].join("\n")}},534:t=>{t.exports=[["boston bruins","0","Boston Bruins"],["los angeles kings","0","Los Angeles Kings"],["vancouver canucks","0","Vancouver Canucks"],["colorado avalanche","0","Colorado Avalanche"],["new york islanders","0","New York Islanders"],["ottawa senators","0","Ottawa Senators"],["tampa bay lightning","0","Tampa Bay Lightning"],["detroit red wings","0","Detroit Red Wings"],["pittsburgh penguins","0","Pittsburgh Penguins"],["buffalo sabres","0","Buffalo Sabres"],["dallas stars","0","Dallas Stars"],["carolina hurricanes","0","Carolina Hurricanes"],["columbus blue jackets","0","Columbus Blue Jackets"],["edmonton oilers","0","Edmonton Oilers"],["new jersey devils","0","New Jersey Devils"],["florida panthers","0","Florida Panthers"],["montreal canadiens","0","Montreal Canadiens"],["new york rangers","0","New York Rangers"],["philadelphia flyers","0","Philadelphia Flyers"],["toronto maple leafs","0","Toronto Maple Leafs"],["washington capitals","0","Washington Capitals"],["arizona coyotes","0","Arizona Coyotes"],["anaheim ducks","0","Anaheim Ducks"],["chicago blackhawks","0","Chicago Blackhawks"],["calgary flames","0","Calgary Flames"],["st. louis blues","0","St.Louis Blues"],["minnesota wild","0","Minnesota Wild"],["san jose sharks","0","San Jose Sharks"],["nashville predators","0","Nashville Predators"],["seattle kraken","0","Seattle Kraken"],["winnipeg jets","0","Winnipeg Jets"],["vegas golden knights","0","Vegas Golden Knights"]]},66:t=>{t.exports=[["win","#","Joueurs","Samedi 11 novembre","Samedi 18 novembre","Samedi 25 novembre","Samedi 2 décembre","Samedi 9 décembre","Samedi 16 décembre","w","e","r","t","y","u"],["1","","Francois Tremblay","Detroit Red Wings","Washington Capitals","Colorado Avalanche","Winnipeg Jets","New Jersey Devils","","","","","","",""],["1","","Louis- Alexandre Belisle Roy","Detroit Red Wings","Boston Bruins","Los Angeles Kings","Winnipeg Jets","Tampa Bay Lightning","","","","","","",""],["1","","Mathieu Lacombe","Pittsburgh Penguins","Washington Capitals","Los Angeles Kings","Winnipeg Jets","Boston Bruins","","","","","","",""],["1","","Philippe Reid","Ottawa Senators","Boston Bruins","Los Angeles Kings","Carolina Hurricanes","Colorado Avalanche","","","","","","",""],["1","","Vincent Meslage","Ottawa Senators","Washington Capitals","Los Angeles Kings","Winnipeg Jets","Detroit Red Wings","","","","","","",""],["0","","Charles-Antoine Messier","Detroit Red Wings","Boston Bruins","Los Angeles Kings","Colorado Avalanche","","","","","","","",""],["0","","Vincent Ménard","Arizona Coyotes","Washington Capitals","Colorado Avalanche","Florida Panthers","","","","","","","",""],["0","","Charles Jutras","Ottawa Senators","Boston Bruins","Vegas Golden Knights","","","","","","","","",""],["0","","Maxime Loranger","Detroit Red Wings","Boston Bruins","Vancouver Canucks","","","","","","","","",""],["0","","Olivier Tremblay","Dallas Stars","Washington Capitals","Vancouver Canucks","","","","","","","","",""],["0","","Patrick Loranger","Pittsburgh Penguins","Boston Bruins","Vegas Golden Knights","","","","","","","","",""],["0","","Philippe Jutras","Ottawa Senators","Boston Bruins","Vegas Golden Knights","","","","","","","","",""],["0","","Sebastien Meslage","Pittsburgh Penguins","Boston Bruins","Vancouver Canucks","","","","","","","","",""],["0","","Véronique Bilodeau","Pittsburgh Penguins","Boston Bruins","Vegas Golden Knights","","","","","","","","",""],["0","","Véronique Bilodeau","Detroit Red Wings","Washington Capitals","Vancouver Canucks","","","","","","","","",""],["0","","Jonathan Crabey","Detroit Red Wings","Vancouver Canucks","","","","","","","","","",""],["0","","Jonathan Perreault","Pittsburgh Penguins","Vegas Golden Knights","","","","","","","","","",""],["0","","Jonathan Perreault","Ottawa Senators","Vancouver Canucks","","","","","","","","","",""],["0","","Mathieu Blanchette","Ottawa Senators","Vegas Golden Knights","","","","","","","","","",""],["0","","Mathieu Lacombe","Detroit Red Wings","Vegas Golden Knights","","","","","","","","","",""],["0","","Maxim Daaneau","Dallas Stars","Vegas Golden Knights","","","","","","","","","",""],["0","","Patrick Loranger","Edmonton Oilers","Vegas Golden Knights","","","","","","","","","",""],["0","","Sebastien Meslage","Detroit Red Wings","Vancouver Canucks","","","","","","","","","",""],["0","","Simon Hébert","Pittsburgh Penguins","Vegas Golden Knights","","","","","","","","","",""],["0","","Vincent Ménard","Dallas Stars","Vegas Golden Knights","","","","","","","","","",""],["0","","Vincent Ménard","Ottawa Senators","Vegas Golden Knights","","","","","","","","","",""],["0","","Vincent Ménard","Pittsburgh Penguins","Vancouver Canucks","","","","","","","","","",""],["0","","Albert Dalpé-Messier","Boston Bruins","","","","","","","","","","",""],["0","","Albert Dalpé-Messier","Boston Bruins","","","","","","","","","","",""],["0","","Albert Dalpé-Messier","Los Angeles Kings","","","","","","","","","","",""],["0","","Albert Dalpé-Messier","Los Angeles Kings","","","","","","","","","","",""],["0","","Albert Dalpé-Messier","Vancouver Canucks","","","","","","","","","","",""],["0","","Bernard-Olivier Giguere","Colorado Avalanche","","","","","","","","","","",""],["0","","Bernard-Olivier Giguere","Los Angeles Kings","","","","","","","","","","",""],["0","","Bernard-Olivier Giguere","Boston Bruins","","","","","","","","","","",""],["0","","Bruno Marquette","New York Islanders","","","","","","","","","","",""],["0","","Bruno Marquette","Los Angeles Kings","","","","","","","","","","",""],["0","","Bruno Marquette","Colorado Avalanche","","","","","","","","","","",""],["0","","Cedric Deniverville","Los Angeles Kings","","","","","","","","","","",""],["0","","Cedric Deniverville","Los Angeles Kings","","","","","","","","","","",""],["0","","Cedric Deniverville","Boston Bruins","","","","","","","","","","",""],["0","","Cedric Deniverville","Boston Bruins","","","","","","","","","","",""],["0","","Cedric Deniverville","New York Islanders","","","","","","","","","","",""],["0","","Charles Jutras","Los Angeles Kings","","","","","","","","","","",""],["0","","Charles Jutras","Los Angeles Kings","","","","","","","","","","",""],["0","","Charles Jutras","New York Islanders","","","","","","","","","","",""],["0","","Charles Jutras","Colorado Avalanche","","","","","","","","","","",""],["0","","Charles-Antoine Messier","Tampa Bay Lightning","","","","","","","","","","",""],["0","","Charles-Antoine Messier","Colorado Avalanche","","","","","","","","","","",""],["0","","Charles-Antoine Messier","Los Angeles Kings","","","","","","","","","","",""],["0","","Charles-Antoine Messier","Los Angeles Kings","","","","","","","","","","",""],["0","","Claude-Olivier Perreault","Colorado Avalanche","","","","","","","","","","",""],["0","","Claude-Olivier Perreault","Los Angeles Kings","","","","","","","","","","",""],["0","","Francis Dubois","Colorado Avalanche","","","","","","","","","","",""],["0","","Francis Dubois","Boston Bruins","","","","","","","","","","",""],["0","","Francois Gatien","Los Angeles Kings","","","","","","","","","","",""],["0","","Francois Gatien","Los Angeles Kings","","","","","","","","","","",""],["0","","Francois Gatien","Boston Bruins","","","","","","","","","","",""],["0","","Francois Tremblay","New York Islanders","","","","","","","","","","",""],["0","","Francois Tremblay","Los Angeles Kings","","","","","","","","","","",""],["0","","Jonathan Crabey","Boston Bruins","","","","","","","","","","",""],["0","","Jonathan Crabey","Los Angeles Kings","","","","","","","","","","",""],["0","","Justin Lafrance","Colorado Avalanche","","","","","","","","","","",""],["0","","Justin Lafrance","Los Angeles Kings","","","","","","","","","","",""],["0","","Jonathan Perreault","New York Islanders","","","","","","","","","","",""],["0","","Jonathan Perreault","Los Angeles Kings","","","","","","","","","","",""],["0","","Jonathan Perreault","Los Angeles Kings","","","","","","","","","","",""],["0","","Jonathan Richard","Boston Bruins","","","","","","","","","","",""],["0","","Jonathan Richard","Los Angeles Kings","","","","","","","","","","",""],["0","","Loic Blanchette","Boston Bruins","","","","","","","","","","",""],["0","","Louis- Alexandre Belisle Roy","Boston Bruins","","","","","","","","","","",""],["0","","Louis- Alexandre Belisle Roy","Los Angeles Kings","","","","","","","","","","",""],["0","","Mathieu Blanchette","Los Angeles Kings","","","","","","","","","","",""],["0","","Mathieu Lacombe","Boston Bruins","","","","","","","","","","",""],["0","","Mathieu Lacombe","Colorado Avalanche","","","","","","","","","","",""],["0","","Mathieu Lacombe","Los Angeles Kings","","","","","","","","","","",""],["0","","Mathieu Lefebvre","Los Angeles Kings","","","","","","","","","","",""],["0","","Mathieu Lefebvre","Los Angeles Kings","","","","","","","","","","",""],["0","","Mathieu Lefebvre","New York Islanders","","","","","","","","","","",""],["0","","Mathieu Lefebvre","Buffalo Sabres","","","","","","","","","","",""],["0","","Matthieu Auger","Los Angeles Kings","","","","","","","","","","",""],["0","","Matthieu Auger","Los Angeles Kings","","","","","","","","","","",""],["0","","Matthieu Auger","Colorado Avalanche","","","","","","","","","","",""],["0","","Maxime Loranger","Colorado Avalanche","","","","","","","","","","",""],["0","","Maxime Loranger","Colorado Avalanche","","","","","","","","","","",""],["0","","Maxime Loranger","Los Angeles Kings","","","","","","","","","","",""],["0","","Maxime Loranger","Los Angeles Kings","","","","","","","","","","",""],["0","","Olivier Tremblay","Los Angeles Kings","","","","","","","","","","",""],["0","","Patrick Loranger","New York Islanders","","","","","","","","","","",""],["0","","Patrick Loranger","Boston Bruins","","","","","","","","","","",""],["0","","Patrick Loranger","Los Angeles Kings","","","","","","","","","","",""],["0","","Philippe Jutras","Boston Bruins","","","","","","","","","","",""],["0","","Philippe Jutras","Colorado Avalanche","","","","","","","","","","",""],["0","","Philippe Jutras","Los Angeles Kings","","","","","","","","","","",""],["0","","Philippe Jutras","Boston Bruins","","","","","","","","","","",""],["0","","Philippe Reid","New York Islanders","","","","","","","","","","",""],["0","","Philippe Reid","Los Angeles Kings","","","","","","","","","","",""],["0","","Roxane Pronovost","Colorado Avalanche","","","","","","","","","","",""],["0","","Sebastien Meslage","Boston Bruins","","","","","","","","","","",""],["0","","Simon Hébert","Colorado Avalanche","","","","","","","","","","",""],["0","","Vincent Décarie","Boston Bruins","","","","","","","","","","",""],["0","","Vincent Décarie","Los Angeles Kings","","","","","","","","","","",""],["0","","Vincent Meslage","Los Angeles Kings","","","","","","","","","","",""],["0","","Vincent Meslage","New York Islanders","","","","","","","","","","",""]]},486:function(t,e,n){var i;t=n.nmd(t),function(){var o,r="Expected a function",a="__lodash_hash_undefined__",l="__lodash_placeholder__",s=32,u=128,h=1/0,c=9007199254740991,d=NaN,p=4294967295,b=[["ary",u],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",s],["partialRight",64],["rearg",256]],m="[object Arguments]",g="[object Array]",f="[object Boolean]",A="[object Date]",v="[object Error]",w="[object Function]",C="[object GeneratorFunction]",E="[object Map]",y="[object Number]",x="[object Object]",B="[object Promise]",k="[object RegExp]",R="[object Set]",_="[object String]",T="[object Symbol]",z="[object WeakMap]",M="[object ArrayBuffer]",L="[object DataView]",S="[object Float32Array]",D="[object Float64Array]",P="[object Int8Array]",I="[object Int16Array]",F="[object Int32Array]",H="[object Uint8Array]",O="[object Uint8ClampedArray]",W="[object Uint16Array]",j="[object Uint32Array]",V=/\b__p \+= '';/g,N=/\b(__p \+=) '' \+/g,G=/(__e\(.*?\)|\b__t\)) \+\n'';/g,U=/&(?:amp|lt|gt|quot|#39);/g,q=/[&<>"']/g,Y=RegExp(U.source),X=RegExp(q.source),K=/<%-([\s\S]+?)%>/g,J=/<%([\s\S]+?)%>/g,Z=/<%=([\s\S]+?)%>/g,Q=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,$=/^\w*$/,tt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,et=/[\\^$.*+?()[\]{}|]/g,nt=RegExp(et.source),it=/^\s+/,ot=/\s/,rt=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,at=/\{\n\/\* \[wrapped with (.+)\] \*/,lt=/,? & /,st=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,ut=/[()=,{}\[\]\/\s]/,ht=/\\(\\)?/g,ct=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,dt=/\w*$/,pt=/^[-+]0x[0-9a-f]+$/i,bt=/^0b[01]+$/i,mt=/^\[object .+?Constructor\]$/,gt=/^0o[0-7]+$/i,ft=/^(?:0|[1-9]\d*)$/,At=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,vt=/($^)/,wt=/['\n\r\u2028\u2029\\]/g,Ct="\\ud800-\\udfff",Et="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",yt="\\u2700-\\u27bf",xt="a-z\\xdf-\\xf6\\xf8-\\xff",Bt="A-Z\\xc0-\\xd6\\xd8-\\xde",kt="\\ufe0e\\ufe0f",Rt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",_t="["+Ct+"]",Tt="["+Rt+"]",zt="["+Et+"]",Mt="\\d+",Lt="["+yt+"]",St="["+xt+"]",Dt="[^"+Ct+Rt+Mt+yt+xt+Bt+"]",Pt="\\ud83c[\\udffb-\\udfff]",It="[^"+Ct+"]",Ft="(?:\\ud83c[\\udde6-\\uddff]){2}",Ht="[\\ud800-\\udbff][\\udc00-\\udfff]",Ot="["+Bt+"]",Wt="\\u200d",jt="(?:"+St+"|"+Dt+")",Vt="(?:"+Ot+"|"+Dt+")",Nt="(?:['’](?:d|ll|m|re|s|t|ve))?",Gt="(?:['’](?:D|LL|M|RE|S|T|VE))?",Ut="(?:"+zt+"|"+Pt+")?",qt="["+kt+"]?",Yt=qt+Ut+"(?:"+Wt+"(?:"+[It,Ft,Ht].join("|")+")"+qt+Ut+")*",Xt="(?:"+[Lt,Ft,Ht].join("|")+")"+Yt,Kt="(?:"+[It+zt+"?",zt,Ft,Ht,_t].join("|")+")",Jt=RegExp("['’]","g"),Zt=RegExp(zt,"g"),Qt=RegExp(Pt+"(?="+Pt+")|"+Kt+Yt,"g"),$t=RegExp([Ot+"?"+St+"+"+Nt+"(?="+[Tt,Ot,"$"].join("|")+")",Vt+"+"+Gt+"(?="+[Tt,Ot+jt,"$"].join("|")+")",Ot+"?"+jt+"+"+Nt,Ot+"+"+Gt,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",Mt,Xt].join("|"),"g"),te=RegExp("["+Wt+Ct+Et+kt+"]"),ee=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,ne=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],ie=-1,oe={};oe[S]=oe[D]=oe[P]=oe[I]=oe[F]=oe[H]=oe[O]=oe[W]=oe[j]=!0,oe[m]=oe[g]=oe[M]=oe[f]=oe[L]=oe[A]=oe[v]=oe[w]=oe[E]=oe[y]=oe[x]=oe[k]=oe[R]=oe[_]=oe[z]=!1;var re={};re[m]=re[g]=re[M]=re[L]=re[f]=re[A]=re[S]=re[D]=re[P]=re[I]=re[F]=re[E]=re[y]=re[x]=re[k]=re[R]=re[_]=re[T]=re[H]=re[O]=re[W]=re[j]=!0,re[v]=re[w]=re[z]=!1;var ae={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},le=parseFloat,se=parseInt,ue="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,he="object"==typeof self&&self&&self.Object===Object&&self,ce=ue||he||Function("return this")(),de=e&&!e.nodeType&&e,pe=de&&t&&!t.nodeType&&t,be=pe&&pe.exports===de,me=be&&ue.process,ge=function(){try{return pe&&pe.require&&pe.require("util").types||me&&me.binding&&me.binding("util")}catch(t){}}(),fe=ge&&ge.isArrayBuffer,Ae=ge&&ge.isDate,ve=ge&&ge.isMap,we=ge&&ge.isRegExp,Ce=ge&&ge.isSet,Ee=ge&&ge.isTypedArray;function ye(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}function xe(t,e,n,i){for(var o=-1,r=null==t?0:t.length;++o<r;){var a=t[o];e(i,a,n(a),t)}return i}function Be(t,e){for(var n=-1,i=null==t?0:t.length;++n<i&&!1!==e(t[n],n,t););return t}function ke(t,e){for(var n=null==t?0:t.length;n--&&!1!==e(t[n],n,t););return t}function Re(t,e){for(var n=-1,i=null==t?0:t.length;++n<i;)if(!e(t[n],n,t))return!1;return!0}function _e(t,e){for(var n=-1,i=null==t?0:t.length,o=0,r=[];++n<i;){var a=t[n];e(a,n,t)&&(r[o++]=a)}return r}function Te(t,e){return!(null==t||!t.length)&&Oe(t,e,0)>-1}function ze(t,e,n){for(var i=-1,o=null==t?0:t.length;++i<o;)if(n(e,t[i]))return!0;return!1}function Me(t,e){for(var n=-1,i=null==t?0:t.length,o=Array(i);++n<i;)o[n]=e(t[n],n,t);return o}function Le(t,e){for(var n=-1,i=e.length,o=t.length;++n<i;)t[o+n]=e[n];return t}function Se(t,e,n,i){var o=-1,r=null==t?0:t.length;for(i&&r&&(n=t[++o]);++o<r;)n=e(n,t[o],o,t);return n}function De(t,e,n,i){var o=null==t?0:t.length;for(i&&o&&(n=t[--o]);o--;)n=e(n,t[o],o,t);return n}function Pe(t,e){for(var n=-1,i=null==t?0:t.length;++n<i;)if(e(t[n],n,t))return!0;return!1}var Ie=Ne("length");function Fe(t,e,n){var i;return n(t,(function(t,n,o){if(e(t,n,o))return i=n,!1})),i}function He(t,e,n,i){for(var o=t.length,r=n+(i?1:-1);i?r--:++r<o;)if(e(t[r],r,t))return r;return-1}function Oe(t,e,n){return e==e?function(t,e,n){for(var i=n-1,o=t.length;++i<o;)if(t[i]===e)return i;return-1}(t,e,n):He(t,je,n)}function We(t,e,n,i){for(var o=n-1,r=t.length;++o<r;)if(i(t[o],e))return o;return-1}function je(t){return t!=t}function Ve(t,e){var n=null==t?0:t.length;return n?qe(t,e)/n:d}function Ne(t){return function(e){return null==e?o:e[t]}}function Ge(t){return function(e){return null==t?o:t[e]}}function Ue(t,e,n,i,o){return o(t,(function(t,o,r){n=i?(i=!1,t):e(n,t,o,r)})),n}function qe(t,e){for(var n,i=-1,r=t.length;++i<r;){var a=e(t[i]);a!==o&&(n=n===o?a:n+a)}return n}function Ye(t,e){for(var n=-1,i=Array(t);++n<t;)i[n]=e(n);return i}function Xe(t){return t?t.slice(0,dn(t)+1).replace(it,""):t}function Ke(t){return function(e){return t(e)}}function Je(t,e){return Me(e,(function(e){return t[e]}))}function Ze(t,e){return t.has(e)}function Qe(t,e){for(var n=-1,i=t.length;++n<i&&Oe(e,t[n],0)>-1;);return n}function $e(t,e){for(var n=t.length;n--&&Oe(e,t[n],0)>-1;);return n}var tn=Ge({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),en=Ge({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function nn(t){return"\\"+ae[t]}function on(t){return te.test(t)}function rn(t){var e=-1,n=Array(t.size);return t.forEach((function(t,i){n[++e]=[i,t]})),n}function an(t,e){return function(n){return t(e(n))}}function ln(t,e){for(var n=-1,i=t.length,o=0,r=[];++n<i;){var a=t[n];a!==e&&a!==l||(t[n]=l,r[o++]=n)}return r}function sn(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=t})),n}function un(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=[t,t]})),n}function hn(t){return on(t)?function(t){for(var e=Qt.lastIndex=0;Qt.test(t);)++e;return e}(t):Ie(t)}function cn(t){return on(t)?function(t){return t.match(Qt)||[]}(t):function(t){return t.split("")}(t)}function dn(t){for(var e=t.length;e--&&ot.test(t.charAt(e)););return e}var pn=Ge({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),bn=function t(e){var n,i=(e=null==e?ce:bn.defaults(ce.Object(),e,bn.pick(ce,ne))).Array,ot=e.Date,Ct=e.Error,Et=e.Function,yt=e.Math,xt=e.Object,Bt=e.RegExp,kt=e.String,Rt=e.TypeError,_t=i.prototype,Tt=Et.prototype,zt=xt.prototype,Mt=e["__core-js_shared__"],Lt=Tt.toString,St=zt.hasOwnProperty,Dt=0,Pt=(n=/[^.]+$/.exec(Mt&&Mt.keys&&Mt.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",It=zt.toString,Ft=Lt.call(xt),Ht=ce._,Ot=Bt("^"+Lt.call(St).replace(et,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Wt=be?e.Buffer:o,jt=e.Symbol,Vt=e.Uint8Array,Nt=Wt?Wt.allocUnsafe:o,Gt=an(xt.getPrototypeOf,xt),Ut=xt.create,qt=zt.propertyIsEnumerable,Yt=_t.splice,Xt=jt?jt.isConcatSpreadable:o,Kt=jt?jt.iterator:o,Qt=jt?jt.toStringTag:o,te=function(){try{var t=ur(xt,"defineProperty");return t({},"",{}),t}catch(t){}}(),ae=e.clearTimeout!==ce.clearTimeout&&e.clearTimeout,ue=ot&&ot.now!==ce.Date.now&&ot.now,he=e.setTimeout!==ce.setTimeout&&e.setTimeout,de=yt.ceil,pe=yt.floor,me=xt.getOwnPropertySymbols,ge=Wt?Wt.isBuffer:o,Ie=e.isFinite,Ge=_t.join,mn=an(xt.keys,xt),gn=yt.max,fn=yt.min,An=ot.now,vn=e.parseInt,wn=yt.random,Cn=_t.reverse,En=ur(e,"DataView"),yn=ur(e,"Map"),xn=ur(e,"Promise"),Bn=ur(e,"Set"),kn=ur(e,"WeakMap"),Rn=ur(xt,"create"),_n=kn&&new kn,Tn={},zn=Fr(En),Mn=Fr(yn),Ln=Fr(xn),Sn=Fr(Bn),Dn=Fr(kn),Pn=jt?jt.prototype:o,In=Pn?Pn.valueOf:o,Fn=Pn?Pn.toString:o;function Hn(t){if(tl(t)&&!Na(t)&&!(t instanceof Vn)){if(t instanceof jn)return t;if(St.call(t,"__wrapped__"))return Hr(t)}return new jn(t)}var On=function(){function t(){}return function(e){if(!$a(e))return{};if(Ut)return Ut(e);t.prototype=e;var n=new t;return t.prototype=o,n}}();function Wn(){}function jn(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=o}function Vn(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=p,this.__views__=[]}function Nn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var i=t[e];this.set(i[0],i[1])}}function Gn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var i=t[e];this.set(i[0],i[1])}}function Un(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var i=t[e];this.set(i[0],i[1])}}function qn(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new Un;++e<n;)this.add(t[e])}function Yn(t){var e=this.__data__=new Gn(t);this.size=e.size}function Xn(t,e){var n=Na(t),i=!n&&Va(t),o=!n&&!i&&Ya(t),r=!n&&!i&&!o&&sl(t),a=n||i||o||r,l=a?Ye(t.length,kt):[],s=l.length;for(var u in t)!e&&!St.call(t,u)||a&&("length"==u||o&&("offset"==u||"parent"==u)||r&&("buffer"==u||"byteLength"==u||"byteOffset"==u)||gr(u,s))||l.push(u);return l}function Kn(t){var e=t.length;return e?t[Ui(0,e-1)]:o}function Jn(t,e){return Lr(Ro(t),ri(e,0,t.length))}function Zn(t){return Lr(Ro(t))}function Qn(t,e,n){(n!==o&&!Oa(t[e],n)||n===o&&!(e in t))&&ii(t,e,n)}function $n(t,e,n){var i=t[e];St.call(t,e)&&Oa(i,n)&&(n!==o||e in t)||ii(t,e,n)}function ti(t,e){for(var n=t.length;n--;)if(Oa(t[n][0],e))return n;return-1}function ei(t,e,n,i){return hi(t,(function(t,o,r){e(i,t,n(t),r)})),i}function ni(t,e){return t&&_o(e,zl(e),t)}function ii(t,e,n){"__proto__"==e&&te?te(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}function oi(t,e){for(var n=-1,r=e.length,a=i(r),l=null==t;++n<r;)a[n]=l?o:Bl(t,e[n]);return a}function ri(t,e,n){return t==t&&(n!==o&&(t=t<=n?t:n),e!==o&&(t=t>=e?t:e)),t}function ai(t,e,n,i,r,a){var l,s=1&e,u=2&e,h=4&e;if(n&&(l=r?n(t,i,r,a):n(t)),l!==o)return l;if(!$a(t))return t;var c=Na(t);if(c){if(l=function(t){var e=t.length,n=new t.constructor(e);return e&&"string"==typeof t[0]&&St.call(t,"index")&&(n.index=t.index,n.input=t.input),n}(t),!s)return Ro(t,l)}else{var d=dr(t),p=d==w||d==C;if(Ya(t))return Co(t,s);if(d==x||d==m||p&&!r){if(l=u||p?{}:br(t),!s)return u?function(t,e){return _o(t,cr(t),e)}(t,function(t,e){return t&&_o(e,Ml(e),t)}(l,t)):function(t,e){return _o(t,hr(t),e)}(t,ni(l,t))}else{if(!re[d])return r?t:{};l=function(t,e,n){var i,o=t.constructor;switch(e){case M:return Eo(t);case f:case A:return new o(+t);case L:return function(t,e){var n=e?Eo(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}(t,n);case S:case D:case P:case I:case F:case H:case O:case W:case j:return yo(t,n);case E:return new o;case y:case _:return new o(t);case k:return function(t){var e=new t.constructor(t.source,dt.exec(t));return e.lastIndex=t.lastIndex,e}(t);case R:return new o;case T:return i=t,In?xt(In.call(i)):{}}}(t,d,s)}}a||(a=new Yn);var b=a.get(t);if(b)return b;a.set(t,l),rl(t)?t.forEach((function(i){l.add(ai(i,e,n,i,t,a))})):el(t)&&t.forEach((function(i,o){l.set(o,ai(i,e,n,o,t,a))}));var g=c?o:(h?u?nr:er:u?Ml:zl)(t);return Be(g||t,(function(i,o){g&&(i=t[o=i]),$n(l,o,ai(i,e,n,o,t,a))})),l}function li(t,e,n){var i=n.length;if(null==t)return!i;for(t=xt(t);i--;){var r=n[i],a=e[r],l=t[r];if(l===o&&!(r in t)||!a(l))return!1}return!0}function si(t,e,n){if("function"!=typeof t)throw new Rt(r);return _r((function(){t.apply(o,n)}),e)}function ui(t,e,n,i){var o=-1,r=Te,a=!0,l=t.length,s=[],u=e.length;if(!l)return s;n&&(e=Me(e,Ke(n))),i?(r=ze,a=!1):e.length>=200&&(r=Ze,a=!1,e=new qn(e));t:for(;++o<l;){var h=t[o],c=null==n?h:n(h);if(h=i||0!==h?h:0,a&&c==c){for(var d=u;d--;)if(e[d]===c)continue t;s.push(h)}else r(e,c,i)||s.push(h)}return s}Hn.templateSettings={escape:K,evaluate:J,interpolate:Z,variable:"",imports:{_:Hn}},Hn.prototype=Wn.prototype,Hn.prototype.constructor=Hn,jn.prototype=On(Wn.prototype),jn.prototype.constructor=jn,Vn.prototype=On(Wn.prototype),Vn.prototype.constructor=Vn,Nn.prototype.clear=function(){this.__data__=Rn?Rn(null):{},this.size=0},Nn.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},Nn.prototype.get=function(t){var e=this.__data__;if(Rn){var n=e[t];return n===a?o:n}return St.call(e,t)?e[t]:o},Nn.prototype.has=function(t){var e=this.__data__;return Rn?e[t]!==o:St.call(e,t)},Nn.prototype.set=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=Rn&&e===o?a:e,this},Gn.prototype.clear=function(){this.__data__=[],this.size=0},Gn.prototype.delete=function(t){var e=this.__data__,n=ti(e,t);return!(n<0||(n==e.length-1?e.pop():Yt.call(e,n,1),--this.size,0))},Gn.prototype.get=function(t){var e=this.__data__,n=ti(e,t);return n<0?o:e[n][1]},Gn.prototype.has=function(t){return ti(this.__data__,t)>-1},Gn.prototype.set=function(t,e){var n=this.__data__,i=ti(n,t);return i<0?(++this.size,n.push([t,e])):n[i][1]=e,this},Un.prototype.clear=function(){this.size=0,this.__data__={hash:new Nn,map:new(yn||Gn),string:new Nn}},Un.prototype.delete=function(t){var e=lr(this,t).delete(t);return this.size-=e?1:0,e},Un.prototype.get=function(t){return lr(this,t).get(t)},Un.prototype.has=function(t){return lr(this,t).has(t)},Un.prototype.set=function(t,e){var n=lr(this,t),i=n.size;return n.set(t,e),this.size+=n.size==i?0:1,this},qn.prototype.add=qn.prototype.push=function(t){return this.__data__.set(t,a),this},qn.prototype.has=function(t){return this.__data__.has(t)},Yn.prototype.clear=function(){this.__data__=new Gn,this.size=0},Yn.prototype.delete=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n},Yn.prototype.get=function(t){return this.__data__.get(t)},Yn.prototype.has=function(t){return this.__data__.has(t)},Yn.prototype.set=function(t,e){var n=this.__data__;if(n instanceof Gn){var i=n.__data__;if(!yn||i.length<199)return i.push([t,e]),this.size=++n.size,this;n=this.__data__=new Un(i)}return n.set(t,e),this.size=n.size,this};var hi=Mo(Ai),ci=Mo(vi,!0);function di(t,e){var n=!0;return hi(t,(function(t,i,o){return n=!!e(t,i,o)})),n}function pi(t,e,n){for(var i=-1,r=t.length;++i<r;){var a=t[i],l=e(a);if(null!=l&&(s===o?l==l&&!ll(l):n(l,s)))var s=l,u=a}return u}function bi(t,e){var n=[];return hi(t,(function(t,i,o){e(t,i,o)&&n.push(t)})),n}function mi(t,e,n,i,o){var r=-1,a=t.length;for(n||(n=mr),o||(o=[]);++r<a;){var l=t[r];e>0&&n(l)?e>1?mi(l,e-1,n,i,o):Le(o,l):i||(o[o.length]=l)}return o}var gi=Lo(),fi=Lo(!0);function Ai(t,e){return t&&gi(t,e,zl)}function vi(t,e){return t&&fi(t,e,zl)}function wi(t,e){return _e(e,(function(e){return Ja(t[e])}))}function Ci(t,e){for(var n=0,i=(e=fo(e,t)).length;null!=t&&n<i;)t=t[Ir(e[n++])];return n&&n==i?t:o}function Ei(t,e,n){var i=e(t);return Na(t)?i:Le(i,n(t))}function yi(t){return null==t?t===o?"[object Undefined]":"[object Null]":Qt&&Qt in xt(t)?function(t){var e=St.call(t,Qt),n=t[Qt];try{t[Qt]=o;var i=!0}catch(t){}var r=It.call(t);return i&&(e?t[Qt]=n:delete t[Qt]),r}(t):function(t){return It.call(t)}(t)}function xi(t,e){return t>e}function Bi(t,e){return null!=t&&St.call(t,e)}function ki(t,e){return null!=t&&e in xt(t)}function Ri(t,e,n){for(var r=n?ze:Te,a=t[0].length,l=t.length,s=l,u=i(l),h=1/0,c=[];s--;){var d=t[s];s&&e&&(d=Me(d,Ke(e))),h=fn(d.length,h),u[s]=!n&&(e||a>=120&&d.length>=120)?new qn(s&&d):o}d=t[0];var p=-1,b=u[0];t:for(;++p<a&&c.length<h;){var m=d[p],g=e?e(m):m;if(m=n||0!==m?m:0,!(b?Ze(b,g):r(c,g,n))){for(s=l;--s;){var f=u[s];if(!(f?Ze(f,g):r(t[s],g,n)))continue t}b&&b.push(g),c.push(m)}}return c}function _i(t,e,n){var i=null==(t=Br(t,e=fo(e,t)))?t:t[Ir(Kr(e))];return null==i?o:ye(i,t,n)}function Ti(t){return tl(t)&&yi(t)==m}function zi(t,e,n,i,r){return t===e||(null==t||null==e||!tl(t)&&!tl(e)?t!=t&&e!=e:function(t,e,n,i,r,a){var l=Na(t),s=Na(e),u=l?g:dr(t),h=s?g:dr(e),c=(u=u==m?x:u)==x,d=(h=h==m?x:h)==x,p=u==h;if(p&&Ya(t)){if(!Ya(e))return!1;l=!0,c=!1}if(p&&!c)return a||(a=new Yn),l||sl(t)?$o(t,e,n,i,r,a):function(t,e,n,i,o,r,a){switch(n){case L:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case M:return!(t.byteLength!=e.byteLength||!r(new Vt(t),new Vt(e)));case f:case A:case y:return Oa(+t,+e);case v:return t.name==e.name&&t.message==e.message;case k:case _:return t==e+"";case E:var l=rn;case R:var s=1&i;if(l||(l=sn),t.size!=e.size&&!s)return!1;var u=a.get(t);if(u)return u==e;i|=2,a.set(t,e);var h=$o(l(t),l(e),i,o,r,a);return a.delete(t),h;case T:if(In)return In.call(t)==In.call(e)}return!1}(t,e,u,n,i,r,a);if(!(1&n)){var b=c&&St.call(t,"__wrapped__"),w=d&&St.call(e,"__wrapped__");if(b||w){var C=b?t.value():t,B=w?e.value():e;return a||(a=new Yn),r(C,B,n,i,a)}}return!!p&&(a||(a=new Yn),function(t,e,n,i,r,a){var l=1&n,s=er(t),u=s.length;if(u!=er(e).length&&!l)return!1;for(var h=u;h--;){var c=s[h];if(!(l?c in e:St.call(e,c)))return!1}var d=a.get(t),p=a.get(e);if(d&&p)return d==e&&p==t;var b=!0;a.set(t,e),a.set(e,t);for(var m=l;++h<u;){var g=t[c=s[h]],f=e[c];if(i)var A=l?i(f,g,c,e,t,a):i(g,f,c,t,e,a);if(!(A===o?g===f||r(g,f,n,i,a):A)){b=!1;break}m||(m="constructor"==c)}if(b&&!m){var v=t.constructor,w=e.constructor;v==w||!("constructor"in t)||!("constructor"in e)||"function"==typeof v&&v instanceof v&&"function"==typeof w&&w instanceof w||(b=!1)}return a.delete(t),a.delete(e),b}(t,e,n,i,r,a))}(t,e,n,i,zi,r))}function Mi(t,e,n,i){var r=n.length,a=r,l=!i;if(null==t)return!a;for(t=xt(t);r--;){var s=n[r];if(l&&s[2]?s[1]!==t[s[0]]:!(s[0]in t))return!1}for(;++r<a;){var u=(s=n[r])[0],h=t[u],c=s[1];if(l&&s[2]){if(h===o&&!(u in t))return!1}else{var d=new Yn;if(i)var p=i(h,c,u,t,e,d);if(!(p===o?zi(c,h,3,i,d):p))return!1}}return!0}function Li(t){return!(!$a(t)||(e=t,Pt&&Pt in e))&&(Ja(t)?Ot:mt).test(Fr(t));var e}function Si(t){return"function"==typeof t?t:null==t?ns:"object"==typeof t?Na(t)?Hi(t[0],t[1]):Fi(t):cs(t)}function Di(t){if(!Cr(t))return mn(t);var e=[];for(var n in xt(t))St.call(t,n)&&"constructor"!=n&&e.push(n);return e}function Pi(t,e){return t<e}function Ii(t,e){var n=-1,o=Ua(t)?i(t.length):[];return hi(t,(function(t,i,r){o[++n]=e(t,i,r)})),o}function Fi(t){var e=sr(t);return 1==e.length&&e[0][2]?yr(e[0][0],e[0][1]):function(n){return n===t||Mi(n,t,e)}}function Hi(t,e){return Ar(t)&&Er(e)?yr(Ir(t),e):function(n){var i=Bl(n,t);return i===o&&i===e?kl(n,t):zi(e,i,3)}}function Oi(t,e,n,i,r){t!==e&&gi(e,(function(a,l){if(r||(r=new Yn),$a(a))!function(t,e,n,i,r,a,l){var s=kr(t,n),u=kr(e,n),h=l.get(u);if(h)Qn(t,n,h);else{var c=a?a(s,u,n+"",t,e,l):o,d=c===o;if(d){var p=Na(u),b=!p&&Ya(u),m=!p&&!b&&sl(u);c=u,p||b||m?Na(s)?c=s:qa(s)?c=Ro(s):b?(d=!1,c=Co(u,!0)):m?(d=!1,c=yo(u,!0)):c=[]:il(u)||Va(u)?(c=s,Va(s)?c=gl(s):$a(s)&&!Ja(s)||(c=br(u))):d=!1}d&&(l.set(u,c),r(c,u,i,a,l),l.delete(u)),Qn(t,n,c)}}(t,e,l,n,Oi,i,r);else{var s=i?i(kr(t,l),a,l+"",t,e,r):o;s===o&&(s=a),Qn(t,l,s)}}),Ml)}function Wi(t,e){var n=t.length;if(n)return gr(e+=e<0?n:0,n)?t[e]:o}function ji(t,e,n){e=e.length?Me(e,(function(t){return Na(t)?function(e){return Ci(e,1===t.length?t[0]:t)}:t})):[ns];var i=-1;e=Me(e,Ke(ar()));var o=Ii(t,(function(t,n,o){var r=Me(e,(function(e){return e(t)}));return{criteria:r,index:++i,value:t}}));return function(t,e){var i=t.length;for(t.sort((function(t,e){return function(t,e,n){for(var i=-1,o=t.criteria,r=e.criteria,a=o.length,l=n.length;++i<a;){var s=xo(o[i],r[i]);if(s)return i>=l?s:s*("desc"==n[i]?-1:1)}return t.index-e.index}(t,e,n)}));i--;)t[i]=t[i].value;return t}(o)}function Vi(t,e,n){for(var i=-1,o=e.length,r={};++i<o;){var a=e[i],l=Ci(t,a);n(l,a)&&Ji(r,fo(a,t),l)}return r}function Ni(t,e,n,i){var o=i?We:Oe,r=-1,a=e.length,l=t;for(t===e&&(e=Ro(e)),n&&(l=Me(t,Ke(n)));++r<a;)for(var s=0,u=e[r],h=n?n(u):u;(s=o(l,h,s,i))>-1;)l!==t&&Yt.call(l,s,1),Yt.call(t,s,1);return t}function Gi(t,e){for(var n=t?e.length:0,i=n-1;n--;){var o=e[n];if(n==i||o!==r){var r=o;gr(o)?Yt.call(t,o,1):so(t,o)}}return t}function Ui(t,e){return t+pe(wn()*(e-t+1))}function qi(t,e){var n="";if(!t||e<1||e>c)return n;do{e%2&&(n+=t),(e=pe(e/2))&&(t+=t)}while(e);return n}function Yi(t,e){return Tr(xr(t,e,ns),t+"")}function Xi(t){return Kn(Ol(t))}function Ki(t,e){var n=Ol(t);return Lr(n,ri(e,0,n.length))}function Ji(t,e,n,i){if(!$a(t))return t;for(var r=-1,a=(e=fo(e,t)).length,l=a-1,s=t;null!=s&&++r<a;){var u=Ir(e[r]),h=n;if("__proto__"===u||"constructor"===u||"prototype"===u)return t;if(r!=l){var c=s[u];(h=i?i(c,u,s):o)===o&&(h=$a(c)?c:gr(e[r+1])?[]:{})}$n(s,u,h),s=s[u]}return t}var Zi=_n?function(t,e){return _n.set(t,e),t}:ns,Qi=te?function(t,e){return te(t,"toString",{configurable:!0,enumerable:!1,value:$l(e),writable:!0})}:ns;function $i(t){return Lr(Ol(t))}function to(t,e,n){var o=-1,r=t.length;e<0&&(e=-e>r?0:r+e),(n=n>r?r:n)<0&&(n+=r),r=e>n?0:n-e>>>0,e>>>=0;for(var a=i(r);++o<r;)a[o]=t[o+e];return a}function eo(t,e){var n;return hi(t,(function(t,i,o){return!(n=e(t,i,o))})),!!n}function no(t,e,n){var i=0,o=null==t?i:t.length;if("number"==typeof e&&e==e&&o<=2147483647){for(;i<o;){var r=i+o>>>1,a=t[r];null!==a&&!ll(a)&&(n?a<=e:a<e)?i=r+1:o=r}return o}return io(t,e,ns,n)}function io(t,e,n,i){var r=0,a=null==t?0:t.length;if(0===a)return 0;for(var l=(e=n(e))!=e,s=null===e,u=ll(e),h=e===o;r<a;){var c=pe((r+a)/2),d=n(t[c]),p=d!==o,b=null===d,m=d==d,g=ll(d);if(l)var f=i||m;else f=h?m&&(i||p):s?m&&p&&(i||!b):u?m&&p&&!b&&(i||!g):!b&&!g&&(i?d<=e:d<e);f?r=c+1:a=c}return fn(a,4294967294)}function oo(t,e){for(var n=-1,i=t.length,o=0,r=[];++n<i;){var a=t[n],l=e?e(a):a;if(!n||!Oa(l,s)){var s=l;r[o++]=0===a?0:a}}return r}function ro(t){return"number"==typeof t?t:ll(t)?d:+t}function ao(t){if("string"==typeof t)return t;if(Na(t))return Me(t,ao)+"";if(ll(t))return Fn?Fn.call(t):"";var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function lo(t,e,n){var i=-1,o=Te,r=t.length,a=!0,l=[],s=l;if(n)a=!1,o=ze;else if(r>=200){var u=e?null:Yo(t);if(u)return sn(u);a=!1,o=Ze,s=new qn}else s=e?[]:l;t:for(;++i<r;){var h=t[i],c=e?e(h):h;if(h=n||0!==h?h:0,a&&c==c){for(var d=s.length;d--;)if(s[d]===c)continue t;e&&s.push(c),l.push(h)}else o(s,c,n)||(s!==l&&s.push(c),l.push(h))}return l}function so(t,e){return null==(t=Br(t,e=fo(e,t)))||delete t[Ir(Kr(e))]}function uo(t,e,n,i){return Ji(t,e,n(Ci(t,e)),i)}function ho(t,e,n,i){for(var o=t.length,r=i?o:-1;(i?r--:++r<o)&&e(t[r],r,t););return n?to(t,i?0:r,i?r+1:o):to(t,i?r+1:0,i?o:r)}function co(t,e){var n=t;return n instanceof Vn&&(n=n.value()),Se(e,(function(t,e){return e.func.apply(e.thisArg,Le([t],e.args))}),n)}function po(t,e,n){var o=t.length;if(o<2)return o?lo(t[0]):[];for(var r=-1,a=i(o);++r<o;)for(var l=t[r],s=-1;++s<o;)s!=r&&(a[r]=ui(a[r]||l,t[s],e,n));return lo(mi(a,1),e,n)}function bo(t,e,n){for(var i=-1,r=t.length,a=e.length,l={};++i<r;){var s=i<a?e[i]:o;n(l,t[i],s)}return l}function mo(t){return qa(t)?t:[]}function go(t){return"function"==typeof t?t:ns}function fo(t,e){return Na(t)?t:Ar(t,e)?[t]:Pr(fl(t))}var Ao=Yi;function vo(t,e,n){var i=t.length;return n=n===o?i:n,!e&&n>=i?t:to(t,e,n)}var wo=ae||function(t){return ce.clearTimeout(t)};function Co(t,e){if(e)return t.slice();var n=t.length,i=Nt?Nt(n):new t.constructor(n);return t.copy(i),i}function Eo(t){var e=new t.constructor(t.byteLength);return new Vt(e).set(new Vt(t)),e}function yo(t,e){var n=e?Eo(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}function xo(t,e){if(t!==e){var n=t!==o,i=null===t,r=t==t,a=ll(t),l=e!==o,s=null===e,u=e==e,h=ll(e);if(!s&&!h&&!a&&t>e||a&&l&&u&&!s&&!h||i&&l&&u||!n&&u||!r)return 1;if(!i&&!a&&!h&&t<e||h&&n&&r&&!i&&!a||s&&n&&r||!l&&r||!u)return-1}return 0}function Bo(t,e,n,o){for(var r=-1,a=t.length,l=n.length,s=-1,u=e.length,h=gn(a-l,0),c=i(u+h),d=!o;++s<u;)c[s]=e[s];for(;++r<l;)(d||r<a)&&(c[n[r]]=t[r]);for(;h--;)c[s++]=t[r++];return c}function ko(t,e,n,o){for(var r=-1,a=t.length,l=-1,s=n.length,u=-1,h=e.length,c=gn(a-s,0),d=i(c+h),p=!o;++r<c;)d[r]=t[r];for(var b=r;++u<h;)d[b+u]=e[u];for(;++l<s;)(p||r<a)&&(d[b+n[l]]=t[r++]);return d}function Ro(t,e){var n=-1,o=t.length;for(e||(e=i(o));++n<o;)e[n]=t[n];return e}function _o(t,e,n,i){var r=!n;n||(n={});for(var a=-1,l=e.length;++a<l;){var s=e[a],u=i?i(n[s],t[s],s,n,t):o;u===o&&(u=t[s]),r?ii(n,s,u):$n(n,s,u)}return n}function To(t,e){return function(n,i){var o=Na(n)?xe:ei,r=e?e():{};return o(n,t,ar(i,2),r)}}function zo(t){return Yi((function(e,n){var i=-1,r=n.length,a=r>1?n[r-1]:o,l=r>2?n[2]:o;for(a=t.length>3&&"function"==typeof a?(r--,a):o,l&&fr(n[0],n[1],l)&&(a=r<3?o:a,r=1),e=xt(e);++i<r;){var s=n[i];s&&t(e,s,i,a)}return e}))}function Mo(t,e){return function(n,i){if(null==n)return n;if(!Ua(n))return t(n,i);for(var o=n.length,r=e?o:-1,a=xt(n);(e?r--:++r<o)&&!1!==i(a[r],r,a););return n}}function Lo(t){return function(e,n,i){for(var o=-1,r=xt(e),a=i(e),l=a.length;l--;){var s=a[t?l:++o];if(!1===n(r[s],s,r))break}return e}}function So(t){return function(e){var n=on(e=fl(e))?cn(e):o,i=n?n[0]:e.charAt(0),r=n?vo(n,1).join(""):e.slice(1);return i[t]()+r}}function Do(t){return function(e){return Se(Jl(Vl(e).replace(Jt,"")),t,"")}}function Po(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var n=On(t.prototype),i=t.apply(n,e);return $a(i)?i:n}}function Io(t){return function(e,n,i){var r=xt(e);if(!Ua(e)){var a=ar(n,3);e=zl(e),n=function(t){return a(r[t],t,r)}}var l=t(e,n,i);return l>-1?r[a?e[l]:l]:o}}function Fo(t){return tr((function(e){var n=e.length,i=n,a=jn.prototype.thru;for(t&&e.reverse();i--;){var l=e[i];if("function"!=typeof l)throw new Rt(r);if(a&&!s&&"wrapper"==or(l))var s=new jn([],!0)}for(i=s?i:n;++i<n;){var u=or(l=e[i]),h="wrapper"==u?ir(l):o;s=h&&vr(h[0])&&424==h[1]&&!h[4].length&&1==h[9]?s[or(h[0])].apply(s,h[3]):1==l.length&&vr(l)?s[u]():s.thru(l)}return function(){var t=arguments,i=t[0];if(s&&1==t.length&&Na(i))return s.plant(i).value();for(var o=0,r=n?e[o].apply(this,t):i;++o<n;)r=e[o].call(this,r);return r}}))}function Ho(t,e,n,r,a,l,s,h,c,d){var p=e&u,b=1&e,m=2&e,g=24&e,f=512&e,A=m?o:Po(t);return function u(){for(var v=arguments.length,w=i(v),C=v;C--;)w[C]=arguments[C];if(g)var E=rr(u),y=function(t,e){for(var n=t.length,i=0;n--;)t[n]===e&&++i;return i}(w,E);if(r&&(w=Bo(w,r,a,g)),l&&(w=ko(w,l,s,g)),v-=y,g&&v<d){var x=ln(w,E);return Uo(t,e,Ho,u.placeholder,n,w,x,h,c,d-v)}var B=b?n:this,k=m?B[t]:t;return v=w.length,h?w=function(t,e){for(var n=t.length,i=fn(e.length,n),r=Ro(t);i--;){var a=e[i];t[i]=gr(a,n)?r[a]:o}return t}(w,h):f&&v>1&&w.reverse(),p&&c<v&&(w.length=c),this&&this!==ce&&this instanceof u&&(k=A||Po(k)),k.apply(B,w)}}function Oo(t,e){return function(n,i){return function(t,e,n,i){return Ai(t,(function(t,o,r){e(i,n(t),o,r)})),i}(n,t,e(i),{})}}function Wo(t,e){return function(n,i){var r;if(n===o&&i===o)return e;if(n!==o&&(r=n),i!==o){if(r===o)return i;"string"==typeof n||"string"==typeof i?(n=ao(n),i=ao(i)):(n=ro(n),i=ro(i)),r=t(n,i)}return r}}function jo(t){return tr((function(e){return e=Me(e,Ke(ar())),Yi((function(n){var i=this;return t(e,(function(t){return ye(t,i,n)}))}))}))}function Vo(t,e){var n=(e=e===o?" ":ao(e)).length;if(n<2)return n?qi(e,t):e;var i=qi(e,de(t/hn(e)));return on(e)?vo(cn(i),0,t).join(""):i.slice(0,t)}function No(t){return function(e,n,r){return r&&"number"!=typeof r&&fr(e,n,r)&&(n=r=o),e=dl(e),n===o?(n=e,e=0):n=dl(n),function(t,e,n,o){for(var r=-1,a=gn(de((e-t)/(n||1)),0),l=i(a);a--;)l[o?a:++r]=t,t+=n;return l}(e,n,r=r===o?e<n?1:-1:dl(r),t)}}function Go(t){return function(e,n){return"string"==typeof e&&"string"==typeof n||(e=ml(e),n=ml(n)),t(e,n)}}function Uo(t,e,n,i,r,a,l,u,h,c){var d=8&e;e|=d?s:64,4&(e&=~(d?64:s))||(e&=-4);var p=[t,e,r,d?a:o,d?l:o,d?o:a,d?o:l,u,h,c],b=n.apply(o,p);return vr(t)&&Rr(b,p),b.placeholder=i,zr(b,t,e)}function qo(t){var e=yt[t];return function(t,n){if(t=ml(t),(n=null==n?0:fn(pl(n),292))&&Ie(t)){var i=(fl(t)+"e").split("e");return+((i=(fl(e(i[0]+"e"+(+i[1]+n)))+"e").split("e"))[0]+"e"+(+i[1]-n))}return e(t)}}var Yo=Bn&&1/sn(new Bn([,-0]))[1]==h?function(t){return new Bn(t)}:ls;function Xo(t){return function(e){var n=dr(e);return n==E?rn(e):n==R?un(e):function(t,e){return Me(e,(function(e){return[e,t[e]]}))}(e,t(e))}}function Ko(t,e,n,a,h,c,d,p){var b=2&e;if(!b&&"function"!=typeof t)throw new Rt(r);var m=a?a.length:0;if(m||(e&=-97,a=h=o),d=d===o?d:gn(pl(d),0),p=p===o?p:pl(p),m-=h?h.length:0,64&e){var g=a,f=h;a=h=o}var A=b?o:ir(t),v=[t,e,n,a,h,g,f,c,d,p];if(A&&function(t,e){var n=t[1],i=e[1],o=n|i,r=o<131,a=i==u&&8==n||i==u&&256==n&&t[7].length<=e[8]||384==i&&e[7].length<=e[8]&&8==n;if(!r&&!a)return t;1&i&&(t[2]=e[2],o|=1&n?0:4);var s=e[3];if(s){var h=t[3];t[3]=h?Bo(h,s,e[4]):s,t[4]=h?ln(t[3],l):e[4]}(s=e[5])&&(h=t[5],t[5]=h?ko(h,s,e[6]):s,t[6]=h?ln(t[5],l):e[6]),(s=e[7])&&(t[7]=s),i&u&&(t[8]=null==t[8]?e[8]:fn(t[8],e[8])),null==t[9]&&(t[9]=e[9]),t[0]=e[0],t[1]=o}(v,A),t=v[0],e=v[1],n=v[2],a=v[3],h=v[4],!(p=v[9]=v[9]===o?b?0:t.length:gn(v[9]-m,0))&&24&e&&(e&=-25),e&&1!=e)w=8==e||16==e?function(t,e,n){var r=Po(t);return function a(){for(var l=arguments.length,s=i(l),u=l,h=rr(a);u--;)s[u]=arguments[u];var c=l<3&&s[0]!==h&&s[l-1]!==h?[]:ln(s,h);return(l-=c.length)<n?Uo(t,e,Ho,a.placeholder,o,s,c,o,o,n-l):ye(this&&this!==ce&&this instanceof a?r:t,this,s)}}(t,e,p):e!=s&&33!=e||h.length?Ho.apply(o,v):function(t,e,n,o){var r=1&e,a=Po(t);return function e(){for(var l=-1,s=arguments.length,u=-1,h=o.length,c=i(h+s),d=this&&this!==ce&&this instanceof e?a:t;++u<h;)c[u]=o[u];for(;s--;)c[u++]=arguments[++l];return ye(d,r?n:this,c)}}(t,e,n,a);else var w=function(t,e,n){var i=1&e,o=Po(t);return function e(){return(this&&this!==ce&&this instanceof e?o:t).apply(i?n:this,arguments)}}(t,e,n);return zr((A?Zi:Rr)(w,v),t,e)}function Jo(t,e,n,i){return t===o||Oa(t,zt[n])&&!St.call(i,n)?e:t}function Zo(t,e,n,i,r,a){return $a(t)&&$a(e)&&(a.set(e,t),Oi(t,e,o,Zo,a),a.delete(e)),t}function Qo(t){return il(t)?o:t}function $o(t,e,n,i,r,a){var l=1&n,s=t.length,u=e.length;if(s!=u&&!(l&&u>s))return!1;var h=a.get(t),c=a.get(e);if(h&&c)return h==e&&c==t;var d=-1,p=!0,b=2&n?new qn:o;for(a.set(t,e),a.set(e,t);++d<s;){var m=t[d],g=e[d];if(i)var f=l?i(g,m,d,e,t,a):i(m,g,d,t,e,a);if(f!==o){if(f)continue;p=!1;break}if(b){if(!Pe(e,(function(t,e){if(!Ze(b,e)&&(m===t||r(m,t,n,i,a)))return b.push(e)}))){p=!1;break}}else if(m!==g&&!r(m,g,n,i,a)){p=!1;break}}return a.delete(t),a.delete(e),p}function tr(t){return Tr(xr(t,o,Gr),t+"")}function er(t){return Ei(t,zl,hr)}function nr(t){return Ei(t,Ml,cr)}var ir=_n?function(t){return _n.get(t)}:ls;function or(t){for(var e=t.name+"",n=Tn[e],i=St.call(Tn,e)?n.length:0;i--;){var o=n[i],r=o.func;if(null==r||r==t)return o.name}return e}function rr(t){return(St.call(Hn,"placeholder")?Hn:t).placeholder}function ar(){var t=Hn.iteratee||is;return t=t===is?Si:t,arguments.length?t(arguments[0],arguments[1]):t}function lr(t,e){var n,i,o=t.__data__;return("string"==(i=typeof(n=e))||"number"==i||"symbol"==i||"boolean"==i?"__proto__"!==n:null===n)?o["string"==typeof e?"string":"hash"]:o.map}function sr(t){for(var e=zl(t),n=e.length;n--;){var i=e[n],o=t[i];e[n]=[i,o,Er(o)]}return e}function ur(t,e){var n=function(t,e){return null==t?o:t[e]}(t,e);return Li(n)?n:o}var hr=me?function(t){return null==t?[]:(t=xt(t),_e(me(t),(function(e){return qt.call(t,e)})))}:bs,cr=me?function(t){for(var e=[];t;)Le(e,hr(t)),t=Gt(t);return e}:bs,dr=yi;function pr(t,e,n){for(var i=-1,o=(e=fo(e,t)).length,r=!1;++i<o;){var a=Ir(e[i]);if(!(r=null!=t&&n(t,a)))break;t=t[a]}return r||++i!=o?r:!!(o=null==t?0:t.length)&&Qa(o)&&gr(a,o)&&(Na(t)||Va(t))}function br(t){return"function"!=typeof t.constructor||Cr(t)?{}:On(Gt(t))}function mr(t){return Na(t)||Va(t)||!!(Xt&&t&&t[Xt])}function gr(t,e){var n=typeof t;return!!(e=null==e?c:e)&&("number"==n||"symbol"!=n&&ft.test(t))&&t>-1&&t%1==0&&t<e}function fr(t,e,n){if(!$a(n))return!1;var i=typeof e;return!!("number"==i?Ua(n)&&gr(e,n.length):"string"==i&&e in n)&&Oa(n[e],t)}function Ar(t,e){if(Na(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!ll(t))||$.test(t)||!Q.test(t)||null!=e&&t in xt(e)}function vr(t){var e=or(t),n=Hn[e];if("function"!=typeof n||!(e in Vn.prototype))return!1;if(t===n)return!0;var i=ir(n);return!!i&&t===i[0]}(En&&dr(new En(new ArrayBuffer(1)))!=L||yn&&dr(new yn)!=E||xn&&dr(xn.resolve())!=B||Bn&&dr(new Bn)!=R||kn&&dr(new kn)!=z)&&(dr=function(t){var e=yi(t),n=e==x?t.constructor:o,i=n?Fr(n):"";if(i)switch(i){case zn:return L;case Mn:return E;case Ln:return B;case Sn:return R;case Dn:return z}return e});var wr=Mt?Ja:ms;function Cr(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||zt)}function Er(t){return t==t&&!$a(t)}function yr(t,e){return function(n){return null!=n&&n[t]===e&&(e!==o||t in xt(n))}}function xr(t,e,n){return e=gn(e===o?t.length-1:e,0),function(){for(var o=arguments,r=-1,a=gn(o.length-e,0),l=i(a);++r<a;)l[r]=o[e+r];r=-1;for(var s=i(e+1);++r<e;)s[r]=o[r];return s[e]=n(l),ye(t,this,s)}}function Br(t,e){return e.length<2?t:Ci(t,to(e,0,-1))}function kr(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}var Rr=Mr(Zi),_r=he||function(t,e){return ce.setTimeout(t,e)},Tr=Mr(Qi);function zr(t,e,n){var i=e+"";return Tr(t,function(t,e){var n=e.length;if(!n)return t;var i=n-1;return e[i]=(n>1?"& ":"")+e[i],e=e.join(n>2?", ":" "),t.replace(rt,"{\n/* [wrapped with "+e+"] */\n")}(i,function(t,e){return Be(b,(function(n){var i="_."+n[0];e&n[1]&&!Te(t,i)&&t.push(i)})),t.sort()}(function(t){var e=t.match(at);return e?e[1].split(lt):[]}(i),n)))}function Mr(t){var e=0,n=0;return function(){var i=An(),r=16-(i-n);if(n=i,r>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(o,arguments)}}function Lr(t,e){var n=-1,i=t.length,r=i-1;for(e=e===o?i:e;++n<e;){var a=Ui(n,r),l=t[a];t[a]=t[n],t[n]=l}return t.length=e,t}var Sr,Dr,Pr=(Sr=Sa((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(tt,(function(t,n,i,o){e.push(i?o.replace(ht,"$1"):n||t)})),e}),(function(t){return 500===Dr.size&&Dr.clear(),t})),Dr=Sr.cache,Sr);function Ir(t){if("string"==typeof t||ll(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function Fr(t){if(null!=t){try{return Lt.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Hr(t){if(t instanceof Vn)return t.clone();var e=new jn(t.__wrapped__,t.__chain__);return e.__actions__=Ro(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var Or=Yi((function(t,e){return qa(t)?ui(t,mi(e,1,qa,!0)):[]})),Wr=Yi((function(t,e){var n=Kr(e);return qa(n)&&(n=o),qa(t)?ui(t,mi(e,1,qa,!0),ar(n,2)):[]})),jr=Yi((function(t,e){var n=Kr(e);return qa(n)&&(n=o),qa(t)?ui(t,mi(e,1,qa,!0),o,n):[]}));function Vr(t,e,n){var i=null==t?0:t.length;if(!i)return-1;var o=null==n?0:pl(n);return o<0&&(o=gn(i+o,0)),He(t,ar(e,3),o)}function Nr(t,e,n){var i=null==t?0:t.length;if(!i)return-1;var r=i-1;return n!==o&&(r=pl(n),r=n<0?gn(i+r,0):fn(r,i-1)),He(t,ar(e,3),r,!0)}function Gr(t){return null!=t&&t.length?mi(t,1):[]}function Ur(t){return t&&t.length?t[0]:o}var qr=Yi((function(t){var e=Me(t,mo);return e.length&&e[0]===t[0]?Ri(e):[]})),Yr=Yi((function(t){var e=Kr(t),n=Me(t,mo);return e===Kr(n)?e=o:n.pop(),n.length&&n[0]===t[0]?Ri(n,ar(e,2)):[]})),Xr=Yi((function(t){var e=Kr(t),n=Me(t,mo);return(e="function"==typeof e?e:o)&&n.pop(),n.length&&n[0]===t[0]?Ri(n,o,e):[]}));function Kr(t){var e=null==t?0:t.length;return e?t[e-1]:o}var Jr=Yi(Zr);function Zr(t,e){return t&&t.length&&e&&e.length?Ni(t,e):t}var Qr=tr((function(t,e){var n=null==t?0:t.length,i=oi(t,e);return Gi(t,Me(e,(function(t){return gr(t,n)?+t:t})).sort(xo)),i}));function $r(t){return null==t?t:Cn.call(t)}var ta=Yi((function(t){return lo(mi(t,1,qa,!0))})),ea=Yi((function(t){var e=Kr(t);return qa(e)&&(e=o),lo(mi(t,1,qa,!0),ar(e,2))})),na=Yi((function(t){var e=Kr(t);return e="function"==typeof e?e:o,lo(mi(t,1,qa,!0),o,e)}));function ia(t){if(!t||!t.length)return[];var e=0;return t=_e(t,(function(t){if(qa(t))return e=gn(t.length,e),!0})),Ye(e,(function(e){return Me(t,Ne(e))}))}function oa(t,e){if(!t||!t.length)return[];var n=ia(t);return null==e?n:Me(n,(function(t){return ye(e,o,t)}))}var ra=Yi((function(t,e){return qa(t)?ui(t,e):[]})),aa=Yi((function(t){return po(_e(t,qa))})),la=Yi((function(t){var e=Kr(t);return qa(e)&&(e=o),po(_e(t,qa),ar(e,2))})),sa=Yi((function(t){var e=Kr(t);return e="function"==typeof e?e:o,po(_e(t,qa),o,e)})),ua=Yi(ia),ha=Yi((function(t){var e=t.length,n=e>1?t[e-1]:o;return n="function"==typeof n?(t.pop(),n):o,oa(t,n)}));function ca(t){var e=Hn(t);return e.__chain__=!0,e}function da(t,e){return e(t)}var pa=tr((function(t){var e=t.length,n=e?t[0]:0,i=this.__wrapped__,r=function(e){return oi(e,t)};return!(e>1||this.__actions__.length)&&i instanceof Vn&&gr(n)?((i=i.slice(n,+n+(e?1:0))).__actions__.push({func:da,args:[r],thisArg:o}),new jn(i,this.__chain__).thru((function(t){return e&&!t.length&&t.push(o),t}))):this.thru(r)})),ba=To((function(t,e,n){St.call(t,n)?++t[n]:ii(t,n,1)})),ma=Io(Vr),ga=Io(Nr);function fa(t,e){return(Na(t)?Be:hi)(t,ar(e,3))}function Aa(t,e){return(Na(t)?ke:ci)(t,ar(e,3))}var va=To((function(t,e,n){St.call(t,n)?t[n].push(e):ii(t,n,[e])})),wa=Yi((function(t,e,n){var o=-1,r="function"==typeof e,a=Ua(t)?i(t.length):[];return hi(t,(function(t){a[++o]=r?ye(e,t,n):_i(t,e,n)})),a})),Ca=To((function(t,e,n){ii(t,n,e)}));function Ea(t,e){return(Na(t)?Me:Ii)(t,ar(e,3))}var ya=To((function(t,e,n){t[n?0:1].push(e)}),(function(){return[[],[]]})),xa=Yi((function(t,e){if(null==t)return[];var n=e.length;return n>1&&fr(t,e[0],e[1])?e=[]:n>2&&fr(e[0],e[1],e[2])&&(e=[e[0]]),ji(t,mi(e,1),[])})),Ba=ue||function(){return ce.Date.now()};function ka(t,e,n){return e=n?o:e,e=t&&null==e?t.length:e,Ko(t,u,o,o,o,o,e)}function Ra(t,e){var n;if("function"!=typeof e)throw new Rt(r);return t=pl(t),function(){return--t>0&&(n=e.apply(this,arguments)),t<=1&&(e=o),n}}var _a=Yi((function(t,e,n){var i=1;if(n.length){var o=ln(n,rr(_a));i|=s}return Ko(t,i,e,n,o)})),Ta=Yi((function(t,e,n){var i=3;if(n.length){var o=ln(n,rr(Ta));i|=s}return Ko(e,i,t,n,o)}));function za(t,e,n){var i,a,l,s,u,h,c=0,d=!1,p=!1,b=!0;if("function"!=typeof t)throw new Rt(r);function m(e){var n=i,r=a;return i=a=o,c=e,s=t.apply(r,n)}function g(t){var n=t-h;return h===o||n>=e||n<0||p&&t-c>=l}function f(){var t=Ba();if(g(t))return A(t);u=_r(f,function(t){var n=e-(t-h);return p?fn(n,l-(t-c)):n}(t))}function A(t){return u=o,b&&i?m(t):(i=a=o,s)}function v(){var t=Ba(),n=g(t);if(i=arguments,a=this,h=t,n){if(u===o)return function(t){return c=t,u=_r(f,e),d?m(t):s}(h);if(p)return wo(u),u=_r(f,e),m(h)}return u===o&&(u=_r(f,e)),s}return e=ml(e)||0,$a(n)&&(d=!!n.leading,l=(p="maxWait"in n)?gn(ml(n.maxWait)||0,e):l,b="trailing"in n?!!n.trailing:b),v.cancel=function(){u!==o&&wo(u),c=0,i=h=a=u=o},v.flush=function(){return u===o?s:A(Ba())},v}var Ma=Yi((function(t,e){return si(t,1,e)})),La=Yi((function(t,e,n){return si(t,ml(e)||0,n)}));function Sa(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new Rt(r);var n=function(){var i=arguments,o=e?e.apply(this,i):i[0],r=n.cache;if(r.has(o))return r.get(o);var a=t.apply(this,i);return n.cache=r.set(o,a)||r,a};return n.cache=new(Sa.Cache||Un),n}function Da(t){if("function"!=typeof t)throw new Rt(r);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}Sa.Cache=Un;var Pa=Ao((function(t,e){var n=(e=1==e.length&&Na(e[0])?Me(e[0],Ke(ar())):Me(mi(e,1),Ke(ar()))).length;return Yi((function(i){for(var o=-1,r=fn(i.length,n);++o<r;)i[o]=e[o].call(this,i[o]);return ye(t,this,i)}))})),Ia=Yi((function(t,e){var n=ln(e,rr(Ia));return Ko(t,s,o,e,n)})),Fa=Yi((function(t,e){var n=ln(e,rr(Fa));return Ko(t,64,o,e,n)})),Ha=tr((function(t,e){return Ko(t,256,o,o,o,e)}));function Oa(t,e){return t===e||t!=t&&e!=e}var Wa=Go(xi),ja=Go((function(t,e){return t>=e})),Va=Ti(function(){return arguments}())?Ti:function(t){return tl(t)&&St.call(t,"callee")&&!qt.call(t,"callee")},Na=i.isArray,Ga=fe?Ke(fe):function(t){return tl(t)&&yi(t)==M};function Ua(t){return null!=t&&Qa(t.length)&&!Ja(t)}function qa(t){return tl(t)&&Ua(t)}var Ya=ge||ms,Xa=Ae?Ke(Ae):function(t){return tl(t)&&yi(t)==A};function Ka(t){if(!tl(t))return!1;var e=yi(t);return e==v||"[object DOMException]"==e||"string"==typeof t.message&&"string"==typeof t.name&&!il(t)}function Ja(t){if(!$a(t))return!1;var e=yi(t);return e==w||e==C||"[object AsyncFunction]"==e||"[object Proxy]"==e}function Za(t){return"number"==typeof t&&t==pl(t)}function Qa(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=c}function $a(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function tl(t){return null!=t&&"object"==typeof t}var el=ve?Ke(ve):function(t){return tl(t)&&dr(t)==E};function nl(t){return"number"==typeof t||tl(t)&&yi(t)==y}function il(t){if(!tl(t)||yi(t)!=x)return!1;var e=Gt(t);if(null===e)return!0;var n=St.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&Lt.call(n)==Ft}var ol=we?Ke(we):function(t){return tl(t)&&yi(t)==k},rl=Ce?Ke(Ce):function(t){return tl(t)&&dr(t)==R};function al(t){return"string"==typeof t||!Na(t)&&tl(t)&&yi(t)==_}function ll(t){return"symbol"==typeof t||tl(t)&&yi(t)==T}var sl=Ee?Ke(Ee):function(t){return tl(t)&&Qa(t.length)&&!!oe[yi(t)]},ul=Go(Pi),hl=Go((function(t,e){return t<=e}));function cl(t){if(!t)return[];if(Ua(t))return al(t)?cn(t):Ro(t);if(Kt&&t[Kt])return function(t){for(var e,n=[];!(e=t.next()).done;)n.push(e.value);return n}(t[Kt]());var e=dr(t);return(e==E?rn:e==R?sn:Ol)(t)}function dl(t){return t?(t=ml(t))===h||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function pl(t){var e=dl(t),n=e%1;return e==e?n?e-n:e:0}function bl(t){return t?ri(pl(t),0,p):0}function ml(t){if("number"==typeof t)return t;if(ll(t))return d;if($a(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=$a(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=Xe(t);var n=bt.test(t);return n||gt.test(t)?se(t.slice(2),n?2:8):pt.test(t)?d:+t}function gl(t){return _o(t,Ml(t))}function fl(t){return null==t?"":ao(t)}var Al=zo((function(t,e){if(Cr(e)||Ua(e))_o(e,zl(e),t);else for(var n in e)St.call(e,n)&&$n(t,n,e[n])})),vl=zo((function(t,e){_o(e,Ml(e),t)})),wl=zo((function(t,e,n,i){_o(e,Ml(e),t,i)})),Cl=zo((function(t,e,n,i){_o(e,zl(e),t,i)})),El=tr(oi),yl=Yi((function(t,e){t=xt(t);var n=-1,i=e.length,r=i>2?e[2]:o;for(r&&fr(e[0],e[1],r)&&(i=1);++n<i;)for(var a=e[n],l=Ml(a),s=-1,u=l.length;++s<u;){var h=l[s],c=t[h];(c===o||Oa(c,zt[h])&&!St.call(t,h))&&(t[h]=a[h])}return t})),xl=Yi((function(t){return t.push(o,Zo),ye(Sl,o,t)}));function Bl(t,e,n){var i=null==t?o:Ci(t,e);return i===o?n:i}function kl(t,e){return null!=t&&pr(t,e,ki)}var Rl=Oo((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=It.call(e)),t[e]=n}),$l(ns)),_l=Oo((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=It.call(e)),St.call(t,e)?t[e].push(n):t[e]=[n]}),ar),Tl=Yi(_i);function zl(t){return Ua(t)?Xn(t):Di(t)}function Ml(t){return Ua(t)?Xn(t,!0):function(t){if(!$a(t))return function(t){var e=[];if(null!=t)for(var n in xt(t))e.push(n);return e}(t);var e=Cr(t),n=[];for(var i in t)("constructor"!=i||!e&&St.call(t,i))&&n.push(i);return n}(t)}var Ll=zo((function(t,e,n){Oi(t,e,n)})),Sl=zo((function(t,e,n,i){Oi(t,e,n,i)})),Dl=tr((function(t,e){var n={};if(null==t)return n;var i=!1;e=Me(e,(function(e){return e=fo(e,t),i||(i=e.length>1),e})),_o(t,nr(t),n),i&&(n=ai(n,7,Qo));for(var o=e.length;o--;)so(n,e[o]);return n})),Pl=tr((function(t,e){return null==t?{}:function(t,e){return Vi(t,e,(function(e,n){return kl(t,n)}))}(t,e)}));function Il(t,e){if(null==t)return{};var n=Me(nr(t),(function(t){return[t]}));return e=ar(e),Vi(t,n,(function(t,n){return e(t,n[0])}))}var Fl=Xo(zl),Hl=Xo(Ml);function Ol(t){return null==t?[]:Je(t,zl(t))}var Wl=Do((function(t,e,n){return e=e.toLowerCase(),t+(n?jl(e):e)}));function jl(t){return Kl(fl(t).toLowerCase())}function Vl(t){return(t=fl(t))&&t.replace(At,tn).replace(Zt,"")}var Nl=Do((function(t,e,n){return t+(n?"-":"")+e.toLowerCase()})),Gl=Do((function(t,e,n){return t+(n?" ":"")+e.toLowerCase()})),Ul=So("toLowerCase"),ql=Do((function(t,e,n){return t+(n?"_":"")+e.toLowerCase()})),Yl=Do((function(t,e,n){return t+(n?" ":"")+Kl(e)})),Xl=Do((function(t,e,n){return t+(n?" ":"")+e.toUpperCase()})),Kl=So("toUpperCase");function Jl(t,e,n){return t=fl(t),(e=n?o:e)===o?function(t){return ee.test(t)}(t)?function(t){return t.match($t)||[]}(t):function(t){return t.match(st)||[]}(t):t.match(e)||[]}var Zl=Yi((function(t,e){try{return ye(t,o,e)}catch(t){return Ka(t)?t:new Ct(t)}})),Ql=tr((function(t,e){return Be(e,(function(e){e=Ir(e),ii(t,e,_a(t[e],t))})),t}));function $l(t){return function(){return t}}var ts=Fo(),es=Fo(!0);function ns(t){return t}function is(t){return Si("function"==typeof t?t:ai(t,1))}var os=Yi((function(t,e){return function(n){return _i(n,t,e)}})),rs=Yi((function(t,e){return function(n){return _i(t,n,e)}}));function as(t,e,n){var i=zl(e),o=wi(e,i);null!=n||$a(e)&&(o.length||!i.length)||(n=e,e=t,t=this,o=wi(e,zl(e)));var r=!($a(n)&&"chain"in n&&!n.chain),a=Ja(t);return Be(o,(function(n){var i=e[n];t[n]=i,a&&(t.prototype[n]=function(){var e=this.__chain__;if(r||e){var n=t(this.__wrapped__);return(n.__actions__=Ro(this.__actions__)).push({func:i,args:arguments,thisArg:t}),n.__chain__=e,n}return i.apply(t,Le([this.value()],arguments))})})),t}function ls(){}var ss=jo(Me),us=jo(Re),hs=jo(Pe);function cs(t){return Ar(t)?Ne(Ir(t)):function(t){return function(e){return Ci(e,t)}}(t)}var ds=No(),ps=No(!0);function bs(){return[]}function ms(){return!1}var gs,fs=Wo((function(t,e){return t+e}),0),As=qo("ceil"),vs=Wo((function(t,e){return t/e}),1),ws=qo("floor"),Cs=Wo((function(t,e){return t*e}),1),Es=qo("round"),ys=Wo((function(t,e){return t-e}),0);return Hn.after=function(t,e){if("function"!=typeof e)throw new Rt(r);return t=pl(t),function(){if(--t<1)return e.apply(this,arguments)}},Hn.ary=ka,Hn.assign=Al,Hn.assignIn=vl,Hn.assignInWith=wl,Hn.assignWith=Cl,Hn.at=El,Hn.before=Ra,Hn.bind=_a,Hn.bindAll=Ql,Hn.bindKey=Ta,Hn.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return Na(t)?t:[t]},Hn.chain=ca,Hn.chunk=function(t,e,n){e=(n?fr(t,e,n):e===o)?1:gn(pl(e),0);var r=null==t?0:t.length;if(!r||e<1)return[];for(var a=0,l=0,s=i(de(r/e));a<r;)s[l++]=to(t,a,a+=e);return s},Hn.compact=function(t){for(var e=-1,n=null==t?0:t.length,i=0,o=[];++e<n;){var r=t[e];r&&(o[i++]=r)}return o},Hn.concat=function(){var t=arguments.length;if(!t)return[];for(var e=i(t-1),n=arguments[0],o=t;o--;)e[o-1]=arguments[o];return Le(Na(n)?Ro(n):[n],mi(e,1))},Hn.cond=function(t){var e=null==t?0:t.length,n=ar();return t=e?Me(t,(function(t){if("function"!=typeof t[1])throw new Rt(r);return[n(t[0]),t[1]]})):[],Yi((function(n){for(var i=-1;++i<e;){var o=t[i];if(ye(o[0],this,n))return ye(o[1],this,n)}}))},Hn.conforms=function(t){return function(t){var e=zl(t);return function(n){return li(n,t,e)}}(ai(t,1))},Hn.constant=$l,Hn.countBy=ba,Hn.create=function(t,e){var n=On(t);return null==e?n:ni(n,e)},Hn.curry=function t(e,n,i){var r=Ko(e,8,o,o,o,o,o,n=i?o:n);return r.placeholder=t.placeholder,r},Hn.curryRight=function t(e,n,i){var r=Ko(e,16,o,o,o,o,o,n=i?o:n);return r.placeholder=t.placeholder,r},Hn.debounce=za,Hn.defaults=yl,Hn.defaultsDeep=xl,Hn.defer=Ma,Hn.delay=La,Hn.difference=Or,Hn.differenceBy=Wr,Hn.differenceWith=jr,Hn.drop=function(t,e,n){var i=null==t?0:t.length;return i?to(t,(e=n||e===o?1:pl(e))<0?0:e,i):[]},Hn.dropRight=function(t,e,n){var i=null==t?0:t.length;return i?to(t,0,(e=i-(e=n||e===o?1:pl(e)))<0?0:e):[]},Hn.dropRightWhile=function(t,e){return t&&t.length?ho(t,ar(e,3),!0,!0):[]},Hn.dropWhile=function(t,e){return t&&t.length?ho(t,ar(e,3),!0):[]},Hn.fill=function(t,e,n,i){var r=null==t?0:t.length;return r?(n&&"number"!=typeof n&&fr(t,e,n)&&(n=0,i=r),function(t,e,n,i){var r=t.length;for((n=pl(n))<0&&(n=-n>r?0:r+n),(i=i===o||i>r?r:pl(i))<0&&(i+=r),i=n>i?0:bl(i);n<i;)t[n++]=e;return t}(t,e,n,i)):[]},Hn.filter=function(t,e){return(Na(t)?_e:bi)(t,ar(e,3))},Hn.flatMap=function(t,e){return mi(Ea(t,e),1)},Hn.flatMapDeep=function(t,e){return mi(Ea(t,e),h)},Hn.flatMapDepth=function(t,e,n){return n=n===o?1:pl(n),mi(Ea(t,e),n)},Hn.flatten=Gr,Hn.flattenDeep=function(t){return null!=t&&t.length?mi(t,h):[]},Hn.flattenDepth=function(t,e){return null!=t&&t.length?mi(t,e=e===o?1:pl(e)):[]},Hn.flip=function(t){return Ko(t,512)},Hn.flow=ts,Hn.flowRight=es,Hn.fromPairs=function(t){for(var e=-1,n=null==t?0:t.length,i={};++e<n;){var o=t[e];i[o[0]]=o[1]}return i},Hn.functions=function(t){return null==t?[]:wi(t,zl(t))},Hn.functionsIn=function(t){return null==t?[]:wi(t,Ml(t))},Hn.groupBy=va,Hn.initial=function(t){return null!=t&&t.length?to(t,0,-1):[]},Hn.intersection=qr,Hn.intersectionBy=Yr,Hn.intersectionWith=Xr,Hn.invert=Rl,Hn.invertBy=_l,Hn.invokeMap=wa,Hn.iteratee=is,Hn.keyBy=Ca,Hn.keys=zl,Hn.keysIn=Ml,Hn.map=Ea,Hn.mapKeys=function(t,e){var n={};return e=ar(e,3),Ai(t,(function(t,i,o){ii(n,e(t,i,o),t)})),n},Hn.mapValues=function(t,e){var n={};return e=ar(e,3),Ai(t,(function(t,i,o){ii(n,i,e(t,i,o))})),n},Hn.matches=function(t){return Fi(ai(t,1))},Hn.matchesProperty=function(t,e){return Hi(t,ai(e,1))},Hn.memoize=Sa,Hn.merge=Ll,Hn.mergeWith=Sl,Hn.method=os,Hn.methodOf=rs,Hn.mixin=as,Hn.negate=Da,Hn.nthArg=function(t){return t=pl(t),Yi((function(e){return Wi(e,t)}))},Hn.omit=Dl,Hn.omitBy=function(t,e){return Il(t,Da(ar(e)))},Hn.once=function(t){return Ra(2,t)},Hn.orderBy=function(t,e,n,i){return null==t?[]:(Na(e)||(e=null==e?[]:[e]),Na(n=i?o:n)||(n=null==n?[]:[n]),ji(t,e,n))},Hn.over=ss,Hn.overArgs=Pa,Hn.overEvery=us,Hn.overSome=hs,Hn.partial=Ia,Hn.partialRight=Fa,Hn.partition=ya,Hn.pick=Pl,Hn.pickBy=Il,Hn.property=cs,Hn.propertyOf=function(t){return function(e){return null==t?o:Ci(t,e)}},Hn.pull=Jr,Hn.pullAll=Zr,Hn.pullAllBy=function(t,e,n){return t&&t.length&&e&&e.length?Ni(t,e,ar(n,2)):t},Hn.pullAllWith=function(t,e,n){return t&&t.length&&e&&e.length?Ni(t,e,o,n):t},Hn.pullAt=Qr,Hn.range=ds,Hn.rangeRight=ps,Hn.rearg=Ha,Hn.reject=function(t,e){return(Na(t)?_e:bi)(t,Da(ar(e,3)))},Hn.remove=function(t,e){var n=[];if(!t||!t.length)return n;var i=-1,o=[],r=t.length;for(e=ar(e,3);++i<r;){var a=t[i];e(a,i,t)&&(n.push(a),o.push(i))}return Gi(t,o),n},Hn.rest=function(t,e){if("function"!=typeof t)throw new Rt(r);return Yi(t,e=e===o?e:pl(e))},Hn.reverse=$r,Hn.sampleSize=function(t,e,n){return e=(n?fr(t,e,n):e===o)?1:pl(e),(Na(t)?Jn:Ki)(t,e)},Hn.set=function(t,e,n){return null==t?t:Ji(t,e,n)},Hn.setWith=function(t,e,n,i){return i="function"==typeof i?i:o,null==t?t:Ji(t,e,n,i)},Hn.shuffle=function(t){return(Na(t)?Zn:$i)(t)},Hn.slice=function(t,e,n){var i=null==t?0:t.length;return i?(n&&"number"!=typeof n&&fr(t,e,n)?(e=0,n=i):(e=null==e?0:pl(e),n=n===o?i:pl(n)),to(t,e,n)):[]},Hn.sortBy=xa,Hn.sortedUniq=function(t){return t&&t.length?oo(t):[]},Hn.sortedUniqBy=function(t,e){return t&&t.length?oo(t,ar(e,2)):[]},Hn.split=function(t,e,n){return n&&"number"!=typeof n&&fr(t,e,n)&&(e=n=o),(n=n===o?p:n>>>0)?(t=fl(t))&&("string"==typeof e||null!=e&&!ol(e))&&!(e=ao(e))&&on(t)?vo(cn(t),0,n):t.split(e,n):[]},Hn.spread=function(t,e){if("function"!=typeof t)throw new Rt(r);return e=null==e?0:gn(pl(e),0),Yi((function(n){var i=n[e],o=vo(n,0,e);return i&&Le(o,i),ye(t,this,o)}))},Hn.tail=function(t){var e=null==t?0:t.length;return e?to(t,1,e):[]},Hn.take=function(t,e,n){return t&&t.length?to(t,0,(e=n||e===o?1:pl(e))<0?0:e):[]},Hn.takeRight=function(t,e,n){var i=null==t?0:t.length;return i?to(t,(e=i-(e=n||e===o?1:pl(e)))<0?0:e,i):[]},Hn.takeRightWhile=function(t,e){return t&&t.length?ho(t,ar(e,3),!1,!0):[]},Hn.takeWhile=function(t,e){return t&&t.length?ho(t,ar(e,3)):[]},Hn.tap=function(t,e){return e(t),t},Hn.throttle=function(t,e,n){var i=!0,o=!0;if("function"!=typeof t)throw new Rt(r);return $a(n)&&(i="leading"in n?!!n.leading:i,o="trailing"in n?!!n.trailing:o),za(t,e,{leading:i,maxWait:e,trailing:o})},Hn.thru=da,Hn.toArray=cl,Hn.toPairs=Fl,Hn.toPairsIn=Hl,Hn.toPath=function(t){return Na(t)?Me(t,Ir):ll(t)?[t]:Ro(Pr(fl(t)))},Hn.toPlainObject=gl,Hn.transform=function(t,e,n){var i=Na(t),o=i||Ya(t)||sl(t);if(e=ar(e,4),null==n){var r=t&&t.constructor;n=o?i?new r:[]:$a(t)&&Ja(r)?On(Gt(t)):{}}return(o?Be:Ai)(t,(function(t,i,o){return e(n,t,i,o)})),n},Hn.unary=function(t){return ka(t,1)},Hn.union=ta,Hn.unionBy=ea,Hn.unionWith=na,Hn.uniq=function(t){return t&&t.length?lo(t):[]},Hn.uniqBy=function(t,e){return t&&t.length?lo(t,ar(e,2)):[]},Hn.uniqWith=function(t,e){return e="function"==typeof e?e:o,t&&t.length?lo(t,o,e):[]},Hn.unset=function(t,e){return null==t||so(t,e)},Hn.unzip=ia,Hn.unzipWith=oa,Hn.update=function(t,e,n){return null==t?t:uo(t,e,go(n))},Hn.updateWith=function(t,e,n,i){return i="function"==typeof i?i:o,null==t?t:uo(t,e,go(n),i)},Hn.values=Ol,Hn.valuesIn=function(t){return null==t?[]:Je(t,Ml(t))},Hn.without=ra,Hn.words=Jl,Hn.wrap=function(t,e){return Ia(go(e),t)},Hn.xor=aa,Hn.xorBy=la,Hn.xorWith=sa,Hn.zip=ua,Hn.zipObject=function(t,e){return bo(t||[],e||[],$n)},Hn.zipObjectDeep=function(t,e){return bo(t||[],e||[],Ji)},Hn.zipWith=ha,Hn.entries=Fl,Hn.entriesIn=Hl,Hn.extend=vl,Hn.extendWith=wl,as(Hn,Hn),Hn.add=fs,Hn.attempt=Zl,Hn.camelCase=Wl,Hn.capitalize=jl,Hn.ceil=As,Hn.clamp=function(t,e,n){return n===o&&(n=e,e=o),n!==o&&(n=(n=ml(n))==n?n:0),e!==o&&(e=(e=ml(e))==e?e:0),ri(ml(t),e,n)},Hn.clone=function(t){return ai(t,4)},Hn.cloneDeep=function(t){return ai(t,5)},Hn.cloneDeepWith=function(t,e){return ai(t,5,e="function"==typeof e?e:o)},Hn.cloneWith=function(t,e){return ai(t,4,e="function"==typeof e?e:o)},Hn.conformsTo=function(t,e){return null==e||li(t,e,zl(e))},Hn.deburr=Vl,Hn.defaultTo=function(t,e){return null==t||t!=t?e:t},Hn.divide=vs,Hn.endsWith=function(t,e,n){t=fl(t),e=ao(e);var i=t.length,r=n=n===o?i:ri(pl(n),0,i);return(n-=e.length)>=0&&t.slice(n,r)==e},Hn.eq=Oa,Hn.escape=function(t){return(t=fl(t))&&X.test(t)?t.replace(q,en):t},Hn.escapeRegExp=function(t){return(t=fl(t))&&nt.test(t)?t.replace(et,"\\$&"):t},Hn.every=function(t,e,n){var i=Na(t)?Re:di;return n&&fr(t,e,n)&&(e=o),i(t,ar(e,3))},Hn.find=ma,Hn.findIndex=Vr,Hn.findKey=function(t,e){return Fe(t,ar(e,3),Ai)},Hn.findLast=ga,Hn.findLastIndex=Nr,Hn.findLastKey=function(t,e){return Fe(t,ar(e,3),vi)},Hn.floor=ws,Hn.forEach=fa,Hn.forEachRight=Aa,Hn.forIn=function(t,e){return null==t?t:gi(t,ar(e,3),Ml)},Hn.forInRight=function(t,e){return null==t?t:fi(t,ar(e,3),Ml)},Hn.forOwn=function(t,e){return t&&Ai(t,ar(e,3))},Hn.forOwnRight=function(t,e){return t&&vi(t,ar(e,3))},Hn.get=Bl,Hn.gt=Wa,Hn.gte=ja,Hn.has=function(t,e){return null!=t&&pr(t,e,Bi)},Hn.hasIn=kl,Hn.head=Ur,Hn.identity=ns,Hn.includes=function(t,e,n,i){t=Ua(t)?t:Ol(t),n=n&&!i?pl(n):0;var o=t.length;return n<0&&(n=gn(o+n,0)),al(t)?n<=o&&t.indexOf(e,n)>-1:!!o&&Oe(t,e,n)>-1},Hn.indexOf=function(t,e,n){var i=null==t?0:t.length;if(!i)return-1;var o=null==n?0:pl(n);return o<0&&(o=gn(i+o,0)),Oe(t,e,o)},Hn.inRange=function(t,e,n){return e=dl(e),n===o?(n=e,e=0):n=dl(n),function(t,e,n){return t>=fn(e,n)&&t<gn(e,n)}(t=ml(t),e,n)},Hn.invoke=Tl,Hn.isArguments=Va,Hn.isArray=Na,Hn.isArrayBuffer=Ga,Hn.isArrayLike=Ua,Hn.isArrayLikeObject=qa,Hn.isBoolean=function(t){return!0===t||!1===t||tl(t)&&yi(t)==f},Hn.isBuffer=Ya,Hn.isDate=Xa,Hn.isElement=function(t){return tl(t)&&1===t.nodeType&&!il(t)},Hn.isEmpty=function(t){if(null==t)return!0;if(Ua(t)&&(Na(t)||"string"==typeof t||"function"==typeof t.splice||Ya(t)||sl(t)||Va(t)))return!t.length;var e=dr(t);if(e==E||e==R)return!t.size;if(Cr(t))return!Di(t).length;for(var n in t)if(St.call(t,n))return!1;return!0},Hn.isEqual=function(t,e){return zi(t,e)},Hn.isEqualWith=function(t,e,n){var i=(n="function"==typeof n?n:o)?n(t,e):o;return i===o?zi(t,e,o,n):!!i},Hn.isError=Ka,Hn.isFinite=function(t){return"number"==typeof t&&Ie(t)},Hn.isFunction=Ja,Hn.isInteger=Za,Hn.isLength=Qa,Hn.isMap=el,Hn.isMatch=function(t,e){return t===e||Mi(t,e,sr(e))},Hn.isMatchWith=function(t,e,n){return n="function"==typeof n?n:o,Mi(t,e,sr(e),n)},Hn.isNaN=function(t){return nl(t)&&t!=+t},Hn.isNative=function(t){if(wr(t))throw new Ct("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Li(t)},Hn.isNil=function(t){return null==t},Hn.isNull=function(t){return null===t},Hn.isNumber=nl,Hn.isObject=$a,Hn.isObjectLike=tl,Hn.isPlainObject=il,Hn.isRegExp=ol,Hn.isSafeInteger=function(t){return Za(t)&&t>=-9007199254740991&&t<=c},Hn.isSet=rl,Hn.isString=al,Hn.isSymbol=ll,Hn.isTypedArray=sl,Hn.isUndefined=function(t){return t===o},Hn.isWeakMap=function(t){return tl(t)&&dr(t)==z},Hn.isWeakSet=function(t){return tl(t)&&"[object WeakSet]"==yi(t)},Hn.join=function(t,e){return null==t?"":Ge.call(t,e)},Hn.kebabCase=Nl,Hn.last=Kr,Hn.lastIndexOf=function(t,e,n){var i=null==t?0:t.length;if(!i)return-1;var r=i;return n!==o&&(r=(r=pl(n))<0?gn(i+r,0):fn(r,i-1)),e==e?function(t,e,n){for(var i=n+1;i--;)if(t[i]===e)return i;return i}(t,e,r):He(t,je,r,!0)},Hn.lowerCase=Gl,Hn.lowerFirst=Ul,Hn.lt=ul,Hn.lte=hl,Hn.max=function(t){return t&&t.length?pi(t,ns,xi):o},Hn.maxBy=function(t,e){return t&&t.length?pi(t,ar(e,2),xi):o},Hn.mean=function(t){return Ve(t,ns)},Hn.meanBy=function(t,e){return Ve(t,ar(e,2))},Hn.min=function(t){return t&&t.length?pi(t,ns,Pi):o},Hn.minBy=function(t,e){return t&&t.length?pi(t,ar(e,2),Pi):o},Hn.stubArray=bs,Hn.stubFalse=ms,Hn.stubObject=function(){return{}},Hn.stubString=function(){return""},Hn.stubTrue=function(){return!0},Hn.multiply=Cs,Hn.nth=function(t,e){return t&&t.length?Wi(t,pl(e)):o},Hn.noConflict=function(){return ce._===this&&(ce._=Ht),this},Hn.noop=ls,Hn.now=Ba,Hn.pad=function(t,e,n){t=fl(t);var i=(e=pl(e))?hn(t):0;if(!e||i>=e)return t;var o=(e-i)/2;return Vo(pe(o),n)+t+Vo(de(o),n)},Hn.padEnd=function(t,e,n){t=fl(t);var i=(e=pl(e))?hn(t):0;return e&&i<e?t+Vo(e-i,n):t},Hn.padStart=function(t,e,n){t=fl(t);var i=(e=pl(e))?hn(t):0;return e&&i<e?Vo(e-i,n)+t:t},Hn.parseInt=function(t,e,n){return n||null==e?e=0:e&&(e=+e),vn(fl(t).replace(it,""),e||0)},Hn.random=function(t,e,n){if(n&&"boolean"!=typeof n&&fr(t,e,n)&&(e=n=o),n===o&&("boolean"==typeof e?(n=e,e=o):"boolean"==typeof t&&(n=t,t=o)),t===o&&e===o?(t=0,e=1):(t=dl(t),e===o?(e=t,t=0):e=dl(e)),t>e){var i=t;t=e,e=i}if(n||t%1||e%1){var r=wn();return fn(t+r*(e-t+le("1e-"+((r+"").length-1))),e)}return Ui(t,e)},Hn.reduce=function(t,e,n){var i=Na(t)?Se:Ue,o=arguments.length<3;return i(t,ar(e,4),n,o,hi)},Hn.reduceRight=function(t,e,n){var i=Na(t)?De:Ue,o=arguments.length<3;return i(t,ar(e,4),n,o,ci)},Hn.repeat=function(t,e,n){return e=(n?fr(t,e,n):e===o)?1:pl(e),qi(fl(t),e)},Hn.replace=function(){var t=arguments,e=fl(t[0]);return t.length<3?e:e.replace(t[1],t[2])},Hn.result=function(t,e,n){var i=-1,r=(e=fo(e,t)).length;for(r||(r=1,t=o);++i<r;){var a=null==t?o:t[Ir(e[i])];a===o&&(i=r,a=n),t=Ja(a)?a.call(t):a}return t},Hn.round=Es,Hn.runInContext=t,Hn.sample=function(t){return(Na(t)?Kn:Xi)(t)},Hn.size=function(t){if(null==t)return 0;if(Ua(t))return al(t)?hn(t):t.length;var e=dr(t);return e==E||e==R?t.size:Di(t).length},Hn.snakeCase=ql,Hn.some=function(t,e,n){var i=Na(t)?Pe:eo;return n&&fr(t,e,n)&&(e=o),i(t,ar(e,3))},Hn.sortedIndex=function(t,e){return no(t,e)},Hn.sortedIndexBy=function(t,e,n){return io(t,e,ar(n,2))},Hn.sortedIndexOf=function(t,e){var n=null==t?0:t.length;if(n){var i=no(t,e);if(i<n&&Oa(t[i],e))return i}return-1},Hn.sortedLastIndex=function(t,e){return no(t,e,!0)},Hn.sortedLastIndexBy=function(t,e,n){return io(t,e,ar(n,2),!0)},Hn.sortedLastIndexOf=function(t,e){if(null!=t&&t.length){var n=no(t,e,!0)-1;if(Oa(t[n],e))return n}return-1},Hn.startCase=Yl,Hn.startsWith=function(t,e,n){return t=fl(t),n=null==n?0:ri(pl(n),0,t.length),e=ao(e),t.slice(n,n+e.length)==e},Hn.subtract=ys,Hn.sum=function(t){return t&&t.length?qe(t,ns):0},Hn.sumBy=function(t,e){return t&&t.length?qe(t,ar(e,2)):0},Hn.template=function(t,e,n){var i=Hn.templateSettings;n&&fr(t,e,n)&&(e=o),t=fl(t),e=wl({},e,i,Jo);var r,a,l=wl({},e.imports,i.imports,Jo),s=zl(l),u=Je(l,s),h=0,c=e.interpolate||vt,d="__p += '",p=Bt((e.escape||vt).source+"|"+c.source+"|"+(c===Z?ct:vt).source+"|"+(e.evaluate||vt).source+"|$","g"),b="//# sourceURL="+(St.call(e,"sourceURL")?(e.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++ie+"]")+"\n";t.replace(p,(function(e,n,i,o,l,s){return i||(i=o),d+=t.slice(h,s).replace(wt,nn),n&&(r=!0,d+="' +\n__e("+n+") +\n'"),l&&(a=!0,d+="';\n"+l+";\n__p += '"),i&&(d+="' +\n((__t = ("+i+")) == null ? '' : __t) +\n'"),h=s+e.length,e})),d+="';\n";var m=St.call(e,"variable")&&e.variable;if(m){if(ut.test(m))throw new Ct("Invalid `variable` option passed into `_.template`")}else d="with (obj) {\n"+d+"\n}\n";d=(a?d.replace(V,""):d).replace(N,"$1").replace(G,"$1;"),d="function("+(m||"obj")+") {\n"+(m?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(r?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+d+"return __p\n}";var g=Zl((function(){return Et(s,b+"return "+d).apply(o,u)}));if(g.source=d,Ka(g))throw g;return g},Hn.times=function(t,e){if((t=pl(t))<1||t>c)return[];var n=p,i=fn(t,p);e=ar(e),t-=p;for(var o=Ye(i,e);++n<t;)e(n);return o},Hn.toFinite=dl,Hn.toInteger=pl,Hn.toLength=bl,Hn.toLower=function(t){return fl(t).toLowerCase()},Hn.toNumber=ml,Hn.toSafeInteger=function(t){return t?ri(pl(t),-9007199254740991,c):0===t?t:0},Hn.toString=fl,Hn.toUpper=function(t){return fl(t).toUpperCase()},Hn.trim=function(t,e,n){if((t=fl(t))&&(n||e===o))return Xe(t);if(!t||!(e=ao(e)))return t;var i=cn(t),r=cn(e);return vo(i,Qe(i,r),$e(i,r)+1).join("")},Hn.trimEnd=function(t,e,n){if((t=fl(t))&&(n||e===o))return t.slice(0,dn(t)+1);if(!t||!(e=ao(e)))return t;var i=cn(t);return vo(i,0,$e(i,cn(e))+1).join("")},Hn.trimStart=function(t,e,n){if((t=fl(t))&&(n||e===o))return t.replace(it,"");if(!t||!(e=ao(e)))return t;var i=cn(t);return vo(i,Qe(i,cn(e))).join("")},Hn.truncate=function(t,e){var n=30,i="...";if($a(e)){var r="separator"in e?e.separator:r;n="length"in e?pl(e.length):n,i="omission"in e?ao(e.omission):i}var a=(t=fl(t)).length;if(on(t)){var l=cn(t);a=l.length}if(n>=a)return t;var s=n-hn(i);if(s<1)return i;var u=l?vo(l,0,s).join(""):t.slice(0,s);if(r===o)return u+i;if(l&&(s+=u.length-s),ol(r)){if(t.slice(s).search(r)){var h,c=u;for(r.global||(r=Bt(r.source,fl(dt.exec(r))+"g")),r.lastIndex=0;h=r.exec(c);)var d=h.index;u=u.slice(0,d===o?s:d)}}else if(t.indexOf(ao(r),s)!=s){var p=u.lastIndexOf(r);p>-1&&(u=u.slice(0,p))}return u+i},Hn.unescape=function(t){return(t=fl(t))&&Y.test(t)?t.replace(U,pn):t},Hn.uniqueId=function(t){var e=++Dt;return fl(t)+e},Hn.upperCase=Xl,Hn.upperFirst=Kl,Hn.each=fa,Hn.eachRight=Aa,Hn.first=Ur,as(Hn,(gs={},Ai(Hn,(function(t,e){St.call(Hn.prototype,e)||(gs[e]=t)})),gs),{chain:!1}),Hn.VERSION="4.17.21",Be(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){Hn[t].placeholder=Hn})),Be(["drop","take"],(function(t,e){Vn.prototype[t]=function(n){n=n===o?1:gn(pl(n),0);var i=this.__filtered__&&!e?new Vn(this):this.clone();return i.__filtered__?i.__takeCount__=fn(n,i.__takeCount__):i.__views__.push({size:fn(n,p),type:t+(i.__dir__<0?"Right":"")}),i},Vn.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}})),Be(["filter","map","takeWhile"],(function(t,e){var n=e+1,i=1==n||3==n;Vn.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:ar(t,3),type:n}),e.__filtered__=e.__filtered__||i,e}})),Be(["head","last"],(function(t,e){var n="take"+(e?"Right":"");Vn.prototype[t]=function(){return this[n](1).value()[0]}})),Be(["initial","tail"],(function(t,e){var n="drop"+(e?"":"Right");Vn.prototype[t]=function(){return this.__filtered__?new Vn(this):this[n](1)}})),Vn.prototype.compact=function(){return this.filter(ns)},Vn.prototype.find=function(t){return this.filter(t).head()},Vn.prototype.findLast=function(t){return this.reverse().find(t)},Vn.prototype.invokeMap=Yi((function(t,e){return"function"==typeof t?new Vn(this):this.map((function(n){return _i(n,t,e)}))})),Vn.prototype.reject=function(t){return this.filter(Da(ar(t)))},Vn.prototype.slice=function(t,e){t=pl(t);var n=this;return n.__filtered__&&(t>0||e<0)?new Vn(n):(t<0?n=n.takeRight(-t):t&&(n=n.drop(t)),e!==o&&(n=(e=pl(e))<0?n.dropRight(-e):n.take(e-t)),n)},Vn.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},Vn.prototype.toArray=function(){return this.take(p)},Ai(Vn.prototype,(function(t,e){var n=/^(?:filter|find|map|reject)|While$/.test(e),i=/^(?:head|last)$/.test(e),r=Hn[i?"take"+("last"==e?"Right":""):e],a=i||/^find/.test(e);r&&(Hn.prototype[e]=function(){var e=this.__wrapped__,l=i?[1]:arguments,s=e instanceof Vn,u=l[0],h=s||Na(e),c=function(t){var e=r.apply(Hn,Le([t],l));return i&&d?e[0]:e};h&&n&&"function"==typeof u&&1!=u.length&&(s=h=!1);var d=this.__chain__,p=!!this.__actions__.length,b=a&&!d,m=s&&!p;if(!a&&h){e=m?e:new Vn(this);var g=t.apply(e,l);return g.__actions__.push({func:da,args:[c],thisArg:o}),new jn(g,d)}return b&&m?t.apply(this,l):(g=this.thru(c),b?i?g.value()[0]:g.value():g)})})),Be(["pop","push","shift","sort","splice","unshift"],(function(t){var e=_t[t],n=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",i=/^(?:pop|shift)$/.test(t);Hn.prototype[t]=function(){var t=arguments;if(i&&!this.__chain__){var o=this.value();return e.apply(Na(o)?o:[],t)}return this[n]((function(n){return e.apply(Na(n)?n:[],t)}))}})),Ai(Vn.prototype,(function(t,e){var n=Hn[e];if(n){var i=n.name+"";St.call(Tn,i)||(Tn[i]=[]),Tn[i].push({name:e,func:n})}})),Tn[Ho(o,2).name]=[{name:"wrapper",func:o}],Vn.prototype.clone=function(){var t=new Vn(this.__wrapped__);return t.__actions__=Ro(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=Ro(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=Ro(this.__views__),t},Vn.prototype.reverse=function(){if(this.__filtered__){var t=new Vn(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},Vn.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,n=Na(t),i=e<0,o=n?t.length:0,r=function(t,e,n){for(var i=-1,o=n.length;++i<o;){var r=n[i],a=r.size;switch(r.type){case"drop":t+=a;break;case"dropRight":e-=a;break;case"take":e=fn(e,t+a);break;case"takeRight":t=gn(t,e-a)}}return{start:t,end:e}}(0,o,this.__views__),a=r.start,l=r.end,s=l-a,u=i?l:a-1,h=this.__iteratees__,c=h.length,d=0,p=fn(s,this.__takeCount__);if(!n||!i&&o==s&&p==s)return co(t,this.__actions__);var b=[];t:for(;s--&&d<p;){for(var m=-1,g=t[u+=e];++m<c;){var f=h[m],A=f.iteratee,v=f.type,w=A(g);if(2==v)g=w;else if(!w){if(1==v)continue t;break t}}b[d++]=g}return b},Hn.prototype.at=pa,Hn.prototype.chain=function(){return ca(this)},Hn.prototype.commit=function(){return new jn(this.value(),this.__chain__)},Hn.prototype.next=function(){this.__values__===o&&(this.__values__=cl(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?o:this.__values__[this.__index__++]}},Hn.prototype.plant=function(t){for(var e,n=this;n instanceof Wn;){var i=Hr(n);i.__index__=0,i.__values__=o,e?r.__wrapped__=i:e=i;var r=i;n=n.__wrapped__}return r.__wrapped__=t,e},Hn.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof Vn){var e=t;return this.__actions__.length&&(e=new Vn(this)),(e=e.reverse()).__actions__.push({func:da,args:[$r],thisArg:o}),new jn(e,this.__chain__)}return this.thru($r)},Hn.prototype.toJSON=Hn.prototype.valueOf=Hn.prototype.value=function(){return co(this.__wrapped__,this.__actions__)},Hn.prototype.first=Hn.prototype.head,Kt&&(Hn.prototype[Kt]=function(){return this}),Hn}();ce._=bn,(i=function(){return bn}.call(e,n,e,t))===o||(t.exports=i)}.call(this)},379:t=>{"use strict";var e=[];function n(t){for(var n=-1,i=0;i<e.length;i++)if(e[i].identifier===t){n=i;break}return n}function i(t,i){for(var r={},a=[],l=0;l<t.length;l++){var s=t[l],u=i.base?s[0]+i.base:s[0],h=r[u]||0,c="".concat(u," ").concat(h);r[u]=h+1;var d=n(c),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==d)e[d].references++,e[d].updater(p);else{var b=o(p,i);i.byIndex=l,e.splice(l,0,{identifier:c,updater:b,references:1})}a.push(c)}return a}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var r=i(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<r.length;a++){var l=n(r[a]);e[l].references--}for(var s=i(t,o),u=0;u<r.length;u++){var h=n(r[u]);0===e[h].references&&(e[h].updater(),e.splice(h,1))}r=s}}},569:t=>{"use strict";var e={};t.exports=function(t,n){var i=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{"use strict";t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{"use strict";t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,o&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleTagTransform(i,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(i){var o=e[i];if(void 0!==o)return o.exports;var r=e[i]={id:i,loaded:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.loaded=!0,r.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),n.nc=void 0,(()=>{"use strict";var t=n(379),e=n.n(t),i=n(795),o=n.n(i),r=n(569),a=n.n(r),l=n(565),s=n.n(l),u=n(216),h=n.n(u),c=n(589),d=n.n(c),p=n(426),b={};b.styleTagTransform=d(),b.setAttributes=s(),b.insert=a().bind(null,"head"),b.domAPI=o(),b.insertStyleElement=h(),e()(p.Z,b),p.Z&&p.Z.locals&&p.Z.locals,n(486);const m=t=>{document.querySelector(".header__stats-section__list__item__result").innerHTML=t},g=t=>{document.querySelector(".header__stats-section__top-result").innerHTML=t};var f=n(534),A=n.n(f);class v{constructor(t){this.table=t}reloadData(t,e,n){return this.table.dataLoader.load(t,void 0,void 0,void 0,e,n)}langText(){return this.table.modules.localize.getText(...arguments)}langBind(){return this.table.modules.localize.bind(...arguments)}langLocale(){return this.table.modules.localize.getLocale(...arguments)}commsConnections(){return this.table.modules.comms.getConnections(...arguments)}commsSend(){return this.table.modules.comms.send(...arguments)}layoutMode(){return this.table.modules.layout.getMode()}layoutRefresh(t){return this.table.modules.layout.layout(t)}subscribe(){return this.table.eventBus.subscribe(...arguments)}unsubscribe(){return this.table.eventBus.unsubscribe(...arguments)}subscribed(t){return this.table.eventBus.subscribed(t)}subscriptionChange(){return this.table.eventBus.subscriptionChange(...arguments)}dispatch(){return this.table.eventBus.dispatch(...arguments)}chain(){return this.table.eventBus.chain(...arguments)}confirm(){return this.table.eventBus.confirm(...arguments)}dispatchExternal(){return this.table.externalEvents.dispatch(...arguments)}subscribedExternal(t){return this.table.externalEvents.subscribed(t)}subscriptionChangeExternal(){return this.table.externalEvents.subscriptionChange(...arguments)}options(t){return this.table.options[t]}setOption(t,e){return void 0!==e&&(this.table.options[t]=e),this.table.options[t]}deprecationCheck(t,e){return this.table.deprecationAdvisor.check(t,e)}deprecationCheckMsg(t,e){return this.table.deprecationAdvisor.checkMsg(t,e)}deprecationMsg(t){return this.table.deprecationAdvisor.msg(t)}module(t){return this.table.module(t)}}class w{static elVisible(t){return!(t.offsetWidth<=0&&t.offsetHeight<=0)}static elOffset(t){var e=t.getBoundingClientRect();return{top:e.top+window.pageYOffset-document.documentElement.clientTop,left:e.left+window.pageXOffset-document.documentElement.clientLeft}}static deepClone(t,e,n=[]){var i={}.__proto__,o=[].__proto__;for(var r in e||(e=Object.assign(Array.isArray(t)?[]:{},t)),t){let a,l,s=t[r];null==s||"object"!=typeof s||s.__proto__!==i&&s.__proto__!==o||(a=n.findIndex((t=>t.subject===s)),a>-1?e[r]=n[a].copy:(l=Object.assign(Array.isArray(s)?[]:{},s),n.unshift({subject:s,copy:l}),e[r]=this.deepClone(s,l,n)))}return e}}class C extends v{constructor(t,e,n){super(t),this.element=e,this.container=this._lookupContainer(),this.parent=n,this.reversedX=!1,this.childPopup=null,this.blurable=!1,this.blurCallback=null,this.blurEventsBound=!1,this.renderedCallback=null,this.visible=!1,this.hideable=!0,this.element.classList.add("tabulator-popup-container"),this.blurEvent=this.hide.bind(this,!1),this.escEvent=this._escapeCheck.bind(this),this.destroyBinding=this.tableDestroyed.bind(this),this.destroyed=!1}tableDestroyed(){this.destroyed=!0,this.hide(!0)}_lookupContainer(){var t=this.table.options.popupContainer;return"string"==typeof t?(t=document.querySelector(t))||console.warn("Menu Error - no container element found matching selector:",this.table.options.popupContainer,"(defaulting to document body)"):!0===t&&(t=this.table.element),t&&!this._checkContainerIsParent(t)&&(t=!1,console.warn("Menu Error - container element does not contain this table:",this.table.options.popupContainer,"(defaulting to document body)")),t||(t=document.body),t}_checkContainerIsParent(t,e=this.table.element){return t===e||!!e.parentNode&&this._checkContainerIsParent(t,e.parentNode)}renderCallback(t){this.renderedCallback=t}containerEventCoords(t){var e=!(t instanceof MouseEvent),n=e?t.touches[0].pageX:t.pageX,i=e?t.touches[0].pageY:t.pageY;if(this.container!==document.body){let t=w.elOffset(this.container);n-=t.left,i-=t.top}return{x:n,y:i}}elementPositionCoords(t,e="right"){var n,i,o,r=w.elOffset(t);switch(this.container!==document.body&&(n=w.elOffset(this.container),r.left-=n.left,r.top-=n.top),e){case"right":i=r.left+t.offsetWidth,o=r.top-1;break;case"bottom":i=r.left,o=r.top+t.offsetHeight;break;case"left":i=r.left,o=r.top-1;break;case"top":i=r.left,o=r.top;break;case"center":i=r.left+t.offsetWidth/2,o=r.top+t.offsetHeight/2}return{x:i,y:o,offset:r}}show(t,e){var n,i,o,r,a;return this.destroyed||this.table.destroyed||(t instanceof HTMLElement?(o=t,r=(a=this.elementPositionCoords(t,e)).offset,n=a.x,i=a.y):"number"==typeof t?(r={top:0,left:0},n=t,i=e):(n=(a=this.containerEventCoords(t)).x,i=a.y,this.reversedX=!1),this.element.style.top=i+"px",this.element.style.left=n+"px",this.container.appendChild(this.element),"function"==typeof this.renderedCallback&&this.renderedCallback(),this._fitToScreen(n,i,o,r,e),this.visible=!0,this.subscribe("table-destroy",this.destroyBinding),this.element.addEventListener("mousedown",(t=>{t.stopPropagation()}))),this}_fitToScreen(t,e,n,i,o){var r=this.container===document.body?document.documentElement.scrollTop:this.container.scrollTop;(t+this.element.offsetWidth>=this.container.offsetWidth||this.reversedX)&&(this.element.style.left="",this.element.style.right=n?this.container.offsetWidth-i.left+"px":this.container.offsetWidth-t+"px",this.reversedX=!0),e+this.element.offsetHeight>Math.max(this.container.offsetHeight,r?this.container.scrollHeight:0)&&(this.element.style.top=n?"bottom"===o?parseInt(this.element.style.top)-this.element.offsetHeight-n.offsetHeight-1+"px":parseInt(this.element.style.top)-this.element.offsetHeight+n.offsetHeight+1+"px":parseInt(this.element.style.top)-this.element.offsetHeight+"px")}isVisible(){return this.visible}hideOnBlur(t){return this.blurable=!0,this.visible&&(setTimeout((()=>{this.visible&&(this.table.rowManager.element.addEventListener("scroll",this.blurEvent),this.subscribe("cell-editing",this.blurEvent),document.body.addEventListener("click",this.blurEvent),document.body.addEventListener("contextmenu",this.blurEvent),document.body.addEventListener("mousedown",this.blurEvent),window.addEventListener("resize",this.blurEvent),document.body.addEventListener("keydown",this.escEvent),this.blurEventsBound=!0)}),100),this.blurCallback=t),this}_escapeCheck(t){27==t.keyCode&&this.hide()}blockHide(){this.hideable=!1}restoreHide(){this.hideable=!0}hide(t=!1){return this.visible&&this.hideable&&(this.blurable&&this.blurEventsBound&&(document.body.removeEventListener("keydown",this.escEvent),document.body.removeEventListener("click",this.blurEvent),document.body.removeEventListener("contextmenu",this.blurEvent),document.body.removeEventListener("mousedown",this.blurEvent),window.removeEventListener("resize",this.blurEvent),this.table.rowManager.element.removeEventListener("scroll",this.blurEvent),this.unsubscribe("cell-editing",this.blurEvent),this.blurEventsBound=!1),this.childPopup&&this.childPopup.hide(),this.parent&&(this.parent.childPopup=null),this.element.parentNode&&this.element.parentNode.removeChild(this.element),this.visible=!1,this.blurCallback&&!t&&this.blurCallback(),this.unsubscribe("table-destroy",this.destroyBinding)),this}child(t){return this.childPopup&&this.childPopup.hide(),this.childPopup=new C(this.table,t,this),this.childPopup}}class E extends v{constructor(t,e){super(t),this._handler=null}initialize(){}registerTableOption(t,e){this.table.optionsList.register(t,e)}registerColumnOption(t,e){this.table.columnManager.optionsList.register(t,e)}registerTableFunction(t,e){void 0===this.table[t]?this.table[t]=(...n)=>(this.table.initGuard(t),e(...n)):console.warn("Unable to bind table function, name already in use",t)}registerComponentFunction(t,e,n){return this.table.componentFunctionBinder.bind(t,e,n)}registerDataHandler(t,e){this.table.rowManager.registerDataPipelineHandler(t,e),this._handler=t}registerDisplayHandler(t,e){this.table.rowManager.registerDisplayPipelineHandler(t,e),this._handler=t}displayRows(t){var e,n=this.table.rowManager.displayRows.length-1;if(this._handler&&(e=this.table.rowManager.displayPipeline.findIndex((t=>t.handler===this._handler)))>-1&&(n=e),t&&(n+=t),this._handler)return n>-1?this.table.rowManager.getDisplayRows(n):this.activeRows()}activeRows(){return this.table.rowManager.activeRows}refreshData(t,e){e||(e=this._handler),e&&this.table.rowManager.refreshActiveData(e,!1,t)}footerAppend(t){return this.table.footerManager.append(t)}footerPrepend(t){return this.table.footerManager.prepend(t)}footerRemove(t){return this.table.footerManager.remove(t)}popup(t,e){return new C(this.table,t,e)}alert(t,e){return this.table.alertManager.alert(t,e)}clearAlert(){return this.table.alertManager.clear()}}class y extends E{constructor(t){super(t),this.allowedTypes=["","data","download","clipboard","print","htmlOutput"],this.registerColumnOption("accessor"),this.registerColumnOption("accessorParams"),this.registerColumnOption("accessorData"),this.registerColumnOption("accessorDataParams"),this.registerColumnOption("accessorDownload"),this.registerColumnOption("accessorDownloadParams"),this.registerColumnOption("accessorClipboard"),this.registerColumnOption("accessorClipboardParams"),this.registerColumnOption("accessorPrint"),this.registerColumnOption("accessorPrintParams"),this.registerColumnOption("accessorHtmlOutput"),this.registerColumnOption("accessorHtmlOutputParams")}initialize(){this.subscribe("column-layout",this.initializeColumn.bind(this)),this.subscribe("row-data-retrieve",this.transformRow.bind(this))}initializeColumn(t){var e=!1,n={};this.allowedTypes.forEach((i=>{var o,r="accessor"+(i.charAt(0).toUpperCase()+i.slice(1));t.definition[r]&&(o=this.lookupAccessor(t.definition[r]))&&(e=!0,n[r]={accessor:o,params:t.definition[r+"Params"]||{}})})),e&&(t.modules.accessor=n)}lookupAccessor(t){var e=!1;switch(typeof t){case"string":y.accessors[t]?e=y.accessors[t]:console.warn("Accessor Error - No such accessor found, ignoring: ",t);break;case"function":e=t}return e}transformRow(t,e){var n="accessor"+(e.charAt(0).toUpperCase()+e.slice(1)),i=t.getComponent(),o=w.deepClone(t.data||{});return this.table.columnManager.traverse((function(t){var r,a,l,s;t.modules.accessor&&(a=t.modules.accessor[n]||t.modules.accessor.accessor||!1)&&"undefined"!=(r=t.getFieldValue(o))&&(s=t.getComponent(),l="function"==typeof a.params?a.params(r,o,e,s,i):a.params,t.setFieldValue(o,a.accessor(r,o,e,l,s,i)))})),o}}function x(t,e){var n=[];if(e=e||"",Array.isArray(t))t.forEach(((t,i)=>{n=n.concat(x(t,e?e+"["+i+"]":i))}));else if("object"==typeof t)for(var i in t)n=n.concat(x(t[i],e?e+"["+i+"]":i));else n.push({key:e,value:t});return n}function B(t){var e=x(t),n=[];return e.forEach((function(t){n.push(encodeURIComponent(t.key)+"="+encodeURIComponent(t.value))})),n.join("&")}function k(t,e,n){return t&&n&&Object.keys(n).length&&(e.method&&"get"!=e.method.toLowerCase()||(e.method="get",t+=(t.includes("?")?"&":"?")+B(n))),t}function R(t,e){var n=[];if(e=e||"",Array.isArray(t))t.forEach(((t,i)=>{n=n.concat(R(t,e?e+"["+i+"]":i))}));else if("object"==typeof t)for(var i in t)n=n.concat(R(t[i],e?e+"["+i+"]":i));else n.push({key:e,value:t});return n}y.moduleName="accessor",y.accessors={};var _={json:{headers:{"Content-Type":"application/json"},body:function(t,e,n){return JSON.stringify(n)}},form:{headers:{},body:function(t,e,n){var i=R(n),o=new FormData;return i.forEach((function(t){o.append(t.key,t.value)})),o}}};class T extends E{constructor(t){super(t),this.config={},this.url="",this.urlGenerator=!1,this.params=!1,this.loaderPromise=!1,this.registerTableOption("ajaxURL",!1),this.registerTableOption("ajaxURLGenerator",!1),this.registerTableOption("ajaxParams",{}),this.registerTableOption("ajaxConfig","get"),this.registerTableOption("ajaxContentType","form"),this.registerTableOption("ajaxRequestFunc",!1),this.registerTableOption("ajaxRequesting",(function(){})),this.registerTableOption("ajaxResponse",!1),this.contentTypeFormatters=T.contentTypeFormatters}initialize(){this.loaderPromise=this.table.options.ajaxRequestFunc||T.defaultLoaderPromise,this.urlGenerator=this.table.options.ajaxURLGenerator||T.defaultURLGenerator,this.table.options.ajaxURL&&this.setUrl(this.table.options.ajaxURL),this.setDefaultConfig(this.table.options.ajaxConfig),this.registerTableFunction("getAjaxUrl",this.getUrl.bind(this)),this.subscribe("data-loading",this.requestDataCheck.bind(this)),this.subscribe("data-params",this.requestParams.bind(this)),this.subscribe("data-load",this.requestData.bind(this))}requestParams(t,e,n,i){var o=this.table.options.ajaxParams;return o&&("function"==typeof o&&(o=o.call(this.table)),i=Object.assign(i,o)),i}requestDataCheck(t,e,n,i){return!((t||!this.url)&&"string"!=typeof t)}requestData(t,e,n,i,o){var r;return!o&&this.requestDataCheck(t)?(t&&this.setUrl(t),r=this.generateConfig(n),this.sendRequest(this.url,e,r)):o}setDefaultConfig(t={}){this.config=Object.assign({},T.defaultConfig),"string"==typeof t?this.config.method=t:Object.assign(this.config,t)}generateConfig(t={}){var e=Object.assign({},this.config);return"string"==typeof t?e.method=t:Object.assign(e,t),e}setUrl(t){this.url=t}getUrl(){return this.url}sendRequest(t,e,n){return!1!==this.table.options.ajaxRequesting.call(this.table,t,e)?this.loaderPromise(t,n,e).then((n=>(this.table.options.ajaxResponse&&(n=this.table.options.ajaxResponse.call(this.table,t,e,n)),n))):Promise.reject()}}T.moduleName="ajax",T.defaultConfig={method:"GET"},T.defaultURLGenerator=k,T.defaultLoaderPromise=function(t,e,n){var i;return new Promise(((o,r)=>{if(t=this.urlGenerator.call(this.table,t,e,n),"GET"!=e.method.toUpperCase())if(i="object"==typeof this.table.options.ajaxContentType?this.table.options.ajaxContentType:this.contentTypeFormatters[this.table.options.ajaxContentType]){for(var a in i.headers)e.headers||(e.headers={}),void 0===e.headers[a]&&(e.headers[a]=i.headers[a]);e.body=i.body.call(this,t,e,n)}else console.warn("Ajax Error - Invalid ajaxContentType value:",this.table.options.ajaxContentType);t?(void 0===e.headers&&(e.headers={}),void 0===e.headers.Accept&&(e.headers.Accept="application/json"),void 0===e.headers["X-Requested-With"]&&(e.headers["X-Requested-With"]="XMLHttpRequest"),void 0===e.mode&&(e.mode="cors"),"cors"==e.mode?(void 0===e.headers.Origin&&(e.headers.Origin=window.location.origin),void 0===e.credentials&&(e.credentials="same-origin")):void 0===e.credentials&&(e.credentials="include"),fetch(t,e).then((t=>{t.ok?t.json().then((t=>{o(t)})).catch((t=>{r(t),console.warn("Ajax Load Error - Invalid JSON returned",t)})):(console.error("Ajax Load Error - Connection Error: "+t.status,t.statusText),r(t))})).catch((t=>{console.error("Ajax Load Error - Connection Error: ",t),r(t)}))):(console.warn("Ajax Load Error - No URL Set"),o([]))}))},T.contentTypeFormatters=_;class z extends E{constructor(t){super(t),this.mode=!0,this.pasteParser=function(){},this.pasteAction=function(){},this.customSelection=!1,this.rowRange=!1,this.blocked=!0,this.registerTableOption("clipboard",!1),this.registerTableOption("clipboardCopyStyled",!0),this.registerTableOption("clipboardCopyConfig",!1),this.registerTableOption("clipboardCopyFormatter",!1),this.registerTableOption("clipboardCopyRowRange","active"),this.registerTableOption("clipboardPasteParser","table"),this.registerTableOption("clipboardPasteAction","insert"),this.registerColumnOption("clipboard"),this.registerColumnOption("titleClipboard")}initialize(){this.mode=this.table.options.clipboard,this.rowRange=this.table.options.clipboardCopyRowRange,!0!==this.mode&&"copy"!==this.mode||this.table.element.addEventListener("copy",(t=>{var e,n,i;this.blocked||(t.preventDefault(),this.customSelection?(e=this.customSelection,this.table.options.clipboardCopyFormatter&&(e=this.table.options.clipboardCopyFormatter("plain",e))):(i=this.table.modules.export.generateExportList(this.table.options.clipboardCopyConfig,this.table.options.clipboardCopyStyled,this.rowRange,"clipboard"),e=(n=this.table.modules.export.generateHTMLTable(i))?this.generatePlainContent(i):"",this.table.options.clipboardCopyFormatter&&(e=this.table.options.clipboardCopyFormatter("plain",e),n=this.table.options.clipboardCopyFormatter("html",n))),window.clipboardData&&window.clipboardData.setData?window.clipboardData.setData("Text",e):t.clipboardData&&t.clipboardData.setData?(t.clipboardData.setData("text/plain",e),n&&t.clipboardData.setData("text/html",n)):t.originalEvent&&t.originalEvent.clipboardData.setData&&(t.originalEvent.clipboardData.setData("text/plain",e),n&&t.originalEvent.clipboardData.setData("text/html",n)),this.dispatchExternal("clipboardCopied",e,n),this.reset())})),!0!==this.mode&&"paste"!==this.mode||this.table.element.addEventListener("paste",(t=>{this.paste(t)})),this.setPasteParser(this.table.options.clipboardPasteParser),this.setPasteAction(this.table.options.clipboardPasteAction),this.registerTableFunction("copyToClipboard",this.copy.bind(this))}reset(){this.blocked=!0,this.customSelection=!1}generatePlainContent(t){var e=[];return t.forEach((t=>{var n=[];t.columns.forEach((e=>{var i="";if(e)if("group"===t.type&&(e.value=e.component.getKey()),null===e.value)i="";else switch(typeof e.value){case"object":i=JSON.stringify(e.value);break;case"undefined":i="";break;default:i=e.value}n.push(i)})),e.push(n.join("\t"))})),e.join("\n")}copy(t,e){var n,i;this.blocked=!1,this.customSelection=!1,!0!==this.mode&&"copy"!==this.mode||(this.rowRange=t||this.table.options.clipboardCopyRowRange,void 0!==window.getSelection&&void 0!==document.createRange?((t=document.createRange()).selectNodeContents(this.table.element),(n=window.getSelection()).toString()&&e&&(this.customSelection=n.toString()),n.removeAllRanges(),n.addRange(t)):void 0!==document.selection&&void 0!==document.body.createTextRange&&((i=document.body.createTextRange()).moveToElementText(this.table.element),i.select()),document.execCommand("copy"),n&&n.removeAllRanges())}setPasteAction(t){switch(typeof t){case"string":this.pasteAction=z.pasteActions[t],this.pasteAction||console.warn("Clipboard Error - No such paste action found:",t);break;case"function":this.pasteAction=t}}setPasteParser(t){switch(typeof t){case"string":this.pasteParser=z.pasteParsers[t],this.pasteParser||console.warn("Clipboard Error - No such paste parser found:",t);break;case"function":this.pasteParser=t}}paste(t){var e,n,i;this.checkPaseOrigin(t)&&(e=this.getPasteData(t),(n=this.pasteParser.call(this,e))?(t.preventDefault(),this.table.modExists("mutator")&&(n=this.mutateData(n)),i=this.pasteAction.call(this,n),this.dispatchExternal("clipboardPasted",e,n,i)):this.dispatchExternal("clipboardPasteError",e))}mutateData(t){var e=[];return Array.isArray(t)?t.forEach((t=>{e.push(this.table.modules.mutator.transformRow(t,"clipboard"))})):e=t,e}checkPaseOrigin(t){var e=!0;return("DIV"!=t.target.tagName||this.table.modules.edit.currentCell)&&(e=!1),e}getPasteData(t){var e;return window.clipboardData&&window.clipboardData.getData?e=window.clipboardData.getData("Text"):t.clipboardData&&t.clipboardData.getData?e=t.clipboardData.getData("text/plain"):t.originalEvent&&t.originalEvent.clipboardData.getData&&(e=t.originalEvent.clipboardData.getData("text/plain")),e}}z.moduleName="clipboard",z.pasteActions={replace:function(t){return this.table.setData(t)},update:function(t){return this.table.updateOrAddData(t)},insert:function(t){return this.table.addData(t)}},z.pasteParsers={table:function(t){var e=[],n=!0,i=this.table.columnManager.columns,o=[],r=[];return(t=t.split("\n")).forEach((function(t){e.push(t.split("\t"))})),!(!e.length||1===e.length&&e[0].length<2)&&(e[0].forEach((function(t){var e=i.find((function(e){return t&&e.definition.title&&t.trim()&&e.definition.title.trim()===t.trim()}));e?o.push(e):n=!1})),n||(n=!0,o=[],e[0].forEach((function(t){var e=i.find((function(e){return t&&e.field&&t.trim()&&e.field.trim()===t.trim()}));e?o.push(e):n=!1})),n||(o=this.table.columnManager.columnsByIndex)),n&&e.shift(),e.forEach((function(t){var e={};t.forEach((function(t,n){o[n]&&(e[o[n].field]=t)})),r.push(e)})),r)}};class M{constructor(t){return this._row=t,new Proxy(this,{get:function(t,e,n){return void 0!==t[e]?t[e]:t._row.table.componentFunctionBinder.handle("row",t._row,e)}})}getData(t){return this._row.getData(t)}getElement(){return this._row.getElement()}getTable(){return this._row.table}getCells(){var t=[];return this._row.getCells().forEach((function(e){t.push(e.getComponent())})),t}getCell(t){var e=this._row.getCell(t);return!!e&&e.getComponent()}_getSelf(){return this._row}}class L{constructor(t){return this._cell=t,new Proxy(this,{get:function(t,e,n){return void 0!==t[e]?t[e]:t._cell.table.componentFunctionBinder.handle("cell",t._cell,e)}})}getValue(){return this._cell.getValue()}getOldValue(){return this._cell.getOldValue()}getInitialValue(){return this._cell.initialValue}getElement(){return this._cell.getElement()}getRow(){return this._cell.row.getComponent()}getData(t){return this._cell.row.getData(t)}getType(){return"cell"}getField(){return this._cell.column.getField()}getColumn(){return this._cell.column.getComponent()}setValue(t,e){void 0===e&&(e=!0),this._cell.setValue(t,e)}restoreOldValue(){this._cell.setValueActual(this._cell.getOldValue())}restoreInitialValue(){this._cell.setValueActual(this._cell.initialValue)}checkHeight(){this._cell.checkHeight()}getTable(){return this._cell.table}_getSelf(){return this._cell}}class S extends v{constructor(t,e){super(t.table),this.table=t.table,this.column=t,this.row=e,this.element=null,this.value=null,this.initialValue,this.oldValue=null,this.modules={},this.height=null,this.width=null,this.minWidth=null,this.component=null,this.loaded=!1,this.build()}build(){this.generateElement(),this.setWidth(),this._configureCell(),this.setValueActual(this.column.getFieldValue(this.row.data)),this.initialValue=this.value}generateElement(){this.element=document.createElement("div"),this.element.className="tabulator-cell",this.element.setAttribute("role","gridcell")}_configureCell(){var t=this.element,e=this.column.getField();t.style.textAlign=this.column.hozAlign,this.column.vertAlign&&(t.style.display="inline-flex",t.style.alignItems={top:"flex-start",bottom:"flex-end",middle:"center"}[this.column.vertAlign]||"",this.column.hozAlign&&(t.style.justifyContent={left:"flex-start",right:"flex-end",center:"center"}[this.column.hozAlign]||"")),e&&t.setAttribute("tabulator-field",e),this.column.definition.cssClass&&this.column.definition.cssClass.split(" ").forEach((e=>{t.classList.add(e)})),this.dispatch("cell-init",this),this.column.visible||this.hide()}_generateContents(){var t;switch(typeof(t=this.chain("cell-format",this,null,(()=>this.element.innerHTML=this.value)))){case"object":if(t instanceof Node){for(;this.element.firstChild;)this.element.removeChild(this.element.firstChild);this.element.appendChild(t)}else this.element.innerHTML="",null!=t&&console.warn("Format Error - Formatter has returned a type of object, the only valid formatter object return is an instance of Node, the formatter returned:",t);break;case"undefined":this.element.innerHTML="";break;default:this.element.innerHTML=t}}cellRendered(){this.dispatch("cell-rendered",this)}getElement(t){return this.loaded||(this.loaded=!0,t||this.layoutElement()),this.element}getValue(){return this.value}getOldValue(){return this.oldValue}setValue(t,e,n){this.setValueProcessData(t,e,n)&&(this.dispatch("cell-value-updated",this),this.cellRendered(),this.column.definition.cellEdited&&this.column.definition.cellEdited.call(this.table,this.getComponent()),this.dispatchExternal("cellEdited",this.getComponent()),this.subscribedExternal("dataChanged")&&this.dispatchExternal("dataChanged",this.table.rowManager.getData()))}setValueProcessData(t,e,n){var i=!1;return(this.value!==t||n)&&(i=!0,e&&(t=this.chain("cell-value-changing",[this,t],null,t))),this.setValueActual(t),i&&this.dispatch("cell-value-changed",this),i}setValueActual(t){this.oldValue=this.value,this.value=t,this.dispatch("cell-value-save-before",this),this.column.setFieldValue(this.row.data,t),this.dispatch("cell-value-save-after",this),this.loaded&&this.layoutElement()}layoutElement(){this._generateContents(),this.dispatch("cell-layout",this)}setWidth(){this.width=this.column.width,this.element.style.width=this.column.widthStyled}clearWidth(){this.width="",this.element.style.width=""}getWidth(){return this.width||this.element.offsetWidth}setMinWidth(){this.minWidth=this.column.minWidth,this.element.style.minWidth=this.column.minWidthStyled}setMaxWidth(){this.maxWidth=this.column.maxWidth,this.element.style.maxWidth=this.column.maxWidthStyled}checkHeight(){this.row.reinitializeHeight()}clearHeight(){this.element.style.height="",this.height=null,this.dispatch("cell-height",this,"")}setHeight(){this.height=this.row.height,this.element.style.height=this.row.heightStyled,this.dispatch("cell-height",this,this.row.heightStyled)}getHeight(){return this.height||this.element.offsetHeight}show(){this.element.style.display=this.column.vertAlign?"inline-flex":""}hide(){this.element.style.display="none"}delete(){this.dispatch("cell-delete",this),!this.table.rowManager.redrawBlock&&this.element.parentNode&&this.element.parentNode.removeChild(this.element),this.element=!1,this.column.deleteCell(this),this.row.deleteCell(this),this.calcs={}}getIndex(){return this.row.getCellIndex(this)}getComponent(){return this.component||(this.component=new L(this)),this.component}}class D{constructor(t){return this._column=t,this.type="ColumnComponent",new Proxy(this,{get:function(t,e,n){return void 0!==t[e]?t[e]:t._column.table.componentFunctionBinder.handle("column",t._column,e)}})}getElement(){return this._column.getElement()}getDefinition(){return this._column.getDefinition()}getField(){return this._column.getField()}getTitleDownload(){return this._column.getTitleDownload()}getCells(){var t=[];return this._column.cells.forEach((function(e){t.push(e.getComponent())})),t}isVisible(){return this._column.visible}show(){this._column.isGroup?this._column.columns.forEach((function(t){t.show()})):this._column.show()}hide(){this._column.isGroup?this._column.columns.forEach((function(t){t.hide()})):this._column.hide()}toggle(){this._column.visible?this.hide():this.show()}delete(){return this._column.delete()}getSubColumns(){var t=[];return this._column.columns.length&&this._column.columns.forEach((function(e){t.push(e.getComponent())})),t}getParentColumn(){return this._column.parent instanceof I&&this._column.parent.getComponent()}_getSelf(){return this._column}scrollTo(t,e){return this._column.table.columnManager.scrollToColumn(this._column,t,e)}getTable(){return this._column.table}move(t,e){var n=this._column.table.columnManager.findColumn(t);n?this._column.table.columnManager.moveColumn(this._column,n,e):console.warn("Move Error - No matching column found:",n)}getNextColumn(){var t=this._column.nextColumn();return!!t&&t.getComponent()}getPrevColumn(){var t=this._column.prevColumn();return!!t&&t.getComponent()}updateDefinition(t){return this._column.updateDefinition(t)}getWidth(){return this._column.getWidth()}setWidth(t){var e;return e=!0===t?this._column.reinitializeWidth(!0):this._column.setWidth(t),this._column.table.columnManager.rerenderColumns(!0),e}}var P={title:void 0,field:void 0,columns:void 0,visible:void 0,hozAlign:void 0,vertAlign:void 0,width:void 0,minWidth:40,maxWidth:void 0,maxInitialWidth:void 0,cssClass:void 0,variableHeight:void 0,headerVertical:void 0,headerHozAlign:void 0,headerWordWrap:!1,editableTitle:void 0};class I extends v{constructor(t,e){super(e.table),this.definition=t,this.parent=e,this.type="column",this.columns=[],this.cells=[],this.element=this.createElement(),this.contentElement=!1,this.titleHolderElement=!1,this.titleElement=!1,this.groupElement=this.createGroupElement(),this.isGroup=!1,this.hozAlign="",this.vertAlign="",this.field="",this.fieldStructure="",this.getFieldValue="",this.setFieldValue="",this.titleDownload=null,this.titleFormatterRendered=!1,this.mapDefinitions(),this.setField(this.definition.field),this.modules={},this.width=null,this.widthStyled="",this.maxWidth=null,this.maxWidthStyled="",this.maxInitialWidth=null,this.minWidth=null,this.minWidthStyled="",this.widthFixed=!1,this.visible=!0,this.component=null,this.definition.columns?(this.isGroup=!0,this.definition.columns.forEach(((t,e)=>{var n=new I(t,this);this.attachColumn(n)})),this.checkColumnVisibility()):e.registerColumnField(this),this._initialize()}createElement(){var t=document.createElement("div");switch(t.classList.add("tabulator-col"),t.setAttribute("role","columnheader"),t.setAttribute("aria-sort","none"),this.table.options.columnHeaderVertAlign){case"middle":t.style.justifyContent="center";break;case"bottom":t.style.justifyContent="flex-end"}return t}createGroupElement(){var t=document.createElement("div");return t.classList.add("tabulator-col-group-cols"),t}mapDefinitions(){var t=this.table.options.columnDefaults;if(t)for(let e in t)void 0===this.definition[e]&&(this.definition[e]=t[e]);this.definition=this.table.columnManager.optionsList.generate(I.defaultOptionList,this.definition)}checkDefinition(){Object.keys(this.definition).forEach((t=>{-1===I.defaultOptionList.indexOf(t)&&console.warn("Invalid column definition option in '"+(this.field||this.definition.title)+"' column:",t)}))}setField(t){this.field=t,this.fieldStructure=t?this.table.options.nestedFieldSeparator?t.split(this.table.options.nestedFieldSeparator):[t]:[],this.getFieldValue=this.fieldStructure.length>1?this._getNestedData:this._getFlatData,this.setFieldValue=this.fieldStructure.length>1?this._setNestedData:this._setFlatData}registerColumnPosition(t){this.parent.registerColumnPosition(t)}registerColumnField(t){this.parent.registerColumnField(t)}reRegisterPosition(){this.isGroup?this.columns.forEach((function(t){t.reRegisterPosition()})):this.registerColumnPosition(this)}_initialize(){for(var t=this.definition;this.element.firstChild;)this.element.removeChild(this.element.firstChild);t.headerVertical&&(this.element.classList.add("tabulator-col-vertical"),"flip"===t.headerVertical&&this.element.classList.add("tabulator-col-vertical-flip")),this.contentElement=this._buildColumnHeaderContent(),this.element.appendChild(this.contentElement),this.isGroup?this._buildGroupHeader():this._buildColumnHeader(),this.dispatch("column-init",this)}_buildColumnHeader(){var t=this.definition;this.dispatch("column-layout",this),void 0!==t.visible&&(t.visible?this.show(!0):this.hide(!0)),t.cssClass&&t.cssClass.split(" ").forEach((t=>{this.element.classList.add(t)})),t.field&&this.element.setAttribute("tabulator-field",t.field),this.setMinWidth(parseInt(t.minWidth)),t.maxInitialWidth&&(this.maxInitialWidth=parseInt(t.maxInitialWidth)),t.maxWidth&&this.setMaxWidth(parseInt(t.maxWidth)),this.reinitializeWidth(),this.hozAlign=this.definition.hozAlign,this.vertAlign=this.definition.vertAlign,this.titleElement.style.textAlign=this.definition.headerHozAlign}_buildColumnHeaderContent(){var t=document.createElement("div");return t.classList.add("tabulator-col-content"),this.titleHolderElement=document.createElement("div"),this.titleHolderElement.classList.add("tabulator-col-title-holder"),t.appendChild(this.titleHolderElement),this.titleElement=this._buildColumnHeaderTitle(),this.titleHolderElement.appendChild(this.titleElement),t}_buildColumnHeaderTitle(){var t=this.definition,e=document.createElement("div");if(e.classList.add("tabulator-col-title"),t.headerWordWrap&&e.classList.add("tabulator-col-title-wrap"),t.editableTitle){var n=document.createElement("input");n.classList.add("tabulator-title-editor"),n.addEventListener("click",(t=>{t.stopPropagation(),n.focus()})),n.addEventListener("change",(()=>{t.title=n.value,this.dispatchExternal("columnTitleChanged",this.getComponent())})),e.appendChild(n),t.field?this.langBind("columns|"+t.field,(e=>{n.value=e||t.title||"&nbsp;"})):n.value=t.title||"&nbsp;"}else t.field?this.langBind("columns|"+t.field,(n=>{this._formatColumnHeaderTitle(e,n||t.title||"&nbsp;")})):this._formatColumnHeaderTitle(e,t.title||"&nbsp;");return e}_formatColumnHeaderTitle(t,e){var n=this.chain("column-format",[this,e,t],null,(()=>e));switch(typeof n){case"object":n instanceof Node?t.appendChild(n):(t.innerHTML="",console.warn("Format Error - Title formatter has returned a type of object, the only valid formatter object return is an instance of Node, the formatter returned:",n));break;case"undefined":t.innerHTML="";break;default:t.innerHTML=n}}_buildGroupHeader(){this.element.classList.add("tabulator-col-group"),this.element.setAttribute("role","columngroup"),this.element.setAttribute("aria-title",this.definition.title),this.definition.cssClass&&this.definition.cssClass.split(" ").forEach((t=>{this.element.classList.add(t)})),this.titleElement.style.textAlign=this.definition.headerHozAlign,this.element.appendChild(this.groupElement)}_getFlatData(t){return t[this.field]}_getNestedData(t){var e,n=t,i=this.fieldStructure,o=i.length;for(let t=0;t<o&&(e=n=n[i[t]],n);t++);return e}_setFlatData(t,e){this.field&&(t[this.field]=e)}_setNestedData(t,e){var n=t,i=this.fieldStructure,o=i.length;for(let t=0;t<o;t++)if(t==o-1)n[i[t]]=e;else{if(!n[i[t]]){if(void 0===e)break;n[i[t]]={}}n=n[i[t]]}}attachColumn(t){this.groupElement?(this.columns.push(t),this.groupElement.appendChild(t.getElement()),t.columnRendered()):console.warn("Column Warning - Column being attached to another column instead of column group")}verticalAlign(t,e){var n=this.parent.isGroup?this.parent.getGroupElement().clientHeight:e||this.parent.getHeadersElement().clientHeight;this.element.style.height=n+"px",this.dispatch("column-height",this,this.element.style.height),this.isGroup&&(this.groupElement.style.minHeight=n-this.contentElement.offsetHeight+"px"),this.columns.forEach((function(e){e.verticalAlign(t)}))}clearVerticalAlign(){this.element.style.paddingTop="",this.element.style.height="",this.element.style.minHeight="",this.groupElement.style.minHeight="",this.columns.forEach((function(t){t.clearVerticalAlign()})),this.dispatch("column-height",this,"")}getElement(){return this.element}getGroupElement(){return this.groupElement}getField(){return this.field}getTitleDownload(){return this.titleDownload}getFirstColumn(){return this.isGroup?!!this.columns.length&&this.columns[0].getFirstColumn():this}getLastColumn(){return this.isGroup?!!this.columns.length&&this.columns[this.columns.length-1].getLastColumn():this}getColumns(t){var e=[];return t?this.columns.forEach((t=>{e.push(t),e=e.concat(t.getColumns(!0))})):e=this.columns,e}getCells(){return this.cells}getTopColumn(){return this.parent.isGroup?this.parent.getTopColumn():this}getDefinition(t){var e=[];return this.isGroup&&t&&(this.columns.forEach((function(t){e.push(t.getDefinition(!0))})),this.definition.columns=e),this.definition}checkColumnVisibility(){var t=!1;this.columns.forEach((function(e){e.visible&&(t=!0)})),t?(this.show(),this.dispatchExternal("columnVisibilityChanged",this.getComponent(),!1)):this.hide()}show(t,e){this.visible||(this.visible=!0,this.element.style.display="",this.parent.isGroup&&this.parent.checkColumnVisibility(),this.cells.forEach((function(t){t.show()})),this.isGroup||null!==this.width||this.reinitializeWidth(),this.table.columnManager.verticalAlignHeaders(),this.dispatch("column-show",this,e),t||this.dispatchExternal("columnVisibilityChanged",this.getComponent(),!0),this.parent.isGroup&&this.parent.matchChildWidths(),this.silent||this.table.columnManager.rerenderColumns())}hide(t,e){this.visible&&(this.visible=!1,this.element.style.display="none",this.table.columnManager.verticalAlignHeaders(),this.parent.isGroup&&this.parent.checkColumnVisibility(),this.cells.forEach((function(t){t.hide()})),this.dispatch("column-hide",this,e),t||this.dispatchExternal("columnVisibilityChanged",this.getComponent(),!1),this.parent.isGroup&&this.parent.matchChildWidths(),this.silent||this.table.columnManager.rerenderColumns())}matchChildWidths(){var t=0;this.contentElement&&this.columns.length&&(this.columns.forEach((function(e){e.visible&&(t+=e.getWidth())})),this.contentElement.style.maxWidth=t-1+"px",this.parent.isGroup&&this.parent.matchChildWidths())}removeChild(t){var e=this.columns.indexOf(t);e>-1&&this.columns.splice(e,1),this.columns.length||this.delete()}setWidth(t){this.widthFixed=!0,this.setWidthActual(t)}setWidthActual(t){isNaN(t)&&(t=Math.floor(this.table.element.clientWidth/100*parseInt(t))),t=Math.max(this.minWidth,t),this.maxWidth&&(t=Math.min(this.maxWidth,t)),this.width=t,this.widthStyled=t?t+"px":"",this.element.style.width=this.widthStyled,this.isGroup||this.cells.forEach((function(t){t.setWidth()})),this.parent.isGroup&&this.parent.matchChildWidths(),this.dispatch("column-width",this)}checkCellHeights(){var t=[];this.cells.forEach((function(e){e.row.heightInitialized&&(null!==e.row.getElement().offsetParent?(t.push(e.row),e.row.clearCellHeight()):e.row.heightInitialized=!1)})),t.forEach((function(t){t.calcHeight()})),t.forEach((function(t){t.setCellHeight()}))}getWidth(){var t=0;return this.isGroup?this.columns.forEach((function(e){e.visible&&(t+=e.getWidth())})):t=this.width,t}getLeftOffset(){var t=this.element.offsetLeft;return this.parent.isGroup&&(t+=this.parent.getLeftOffset()),t}getHeight(){return Math.ceil(this.element.getBoundingClientRect().height)}setMinWidth(t){this.maxWidth&&t>this.maxWidth&&(t=this.maxWidth,console.warn("the minWidth ("+t+"px) for column '"+this.field+"' cannot be bigger that its maxWidth ("+this.maxWidthStyled+")")),this.minWidth=t,this.minWidthStyled=t?t+"px":"",this.element.style.minWidth=this.minWidthStyled,this.cells.forEach((function(t){t.setMinWidth()}))}setMaxWidth(t){this.minWidth&&t<this.minWidth&&(t=this.minWidth,console.warn("the maxWidth ("+t+"px) for column '"+this.field+"' cannot be smaller that its minWidth ("+this.minWidthStyled+")")),this.maxWidth=t,this.maxWidthStyled=t?t+"px":"",this.element.style.maxWidth=this.maxWidthStyled,this.cells.forEach((function(t){t.setMaxWidth()}))}delete(){return new Promise(((t,e)=>{this.isGroup&&this.columns.forEach((function(t){t.delete()})),this.dispatch("column-delete",this);var n=this.cells.length;for(let t=0;t<n;t++)this.cells[0].delete();this.element.parentNode&&this.element.parentNode.removeChild(this.element),this.element=!1,this.contentElement=!1,this.titleElement=!1,this.groupElement=!1,this.parent.isGroup&&this.parent.removeChild(this),this.table.columnManager.deregisterColumn(this),this.table.columnManager.rerenderColumns(!0),t()}))}columnRendered(){this.titleFormatterRendered&&this.titleFormatterRendered(),this.dispatch("column-rendered",this)}generateCell(t){var e=new S(this,t);return this.cells.push(e),e}nextColumn(){var t=this.table.columnManager.findColumnIndex(this);return t>-1&&this._nextVisibleColumn(t+1)}_nextVisibleColumn(t){var e=this.table.columnManager.getColumnByIndex(t);return!e||e.visible?e:this._nextVisibleColumn(t+1)}prevColumn(){var t=this.table.columnManager.findColumnIndex(this);return t>-1&&this._prevVisibleColumn(t-1)}_prevVisibleColumn(t){var e=this.table.columnManager.getColumnByIndex(t);return!e||e.visible?e:this._prevVisibleColumn(t-1)}reinitializeWidth(t){this.widthFixed=!1,void 0===this.definition.width||t||this.setWidth(this.definition.width),this.dispatch("column-width-fit-before",this),this.fitToData(t),this.dispatch("column-width-fit-after",this)}fitToData(t){if(!this.isGroup){this.widthFixed||(this.element.style.width="",this.cells.forEach((t=>{t.clearWidth()})));var e=this.element.offsetWidth;if((!this.width||!this.widthFixed)&&(this.cells.forEach((t=>{var n=t.getWidth();n>e&&(e=n)})),e)){var n=e+1;this.maxInitialWidth&&!t&&(n=Math.min(n,this.maxInitialWidth)),this.setWidthActual(n)}}}updateDefinition(t){var e;return this.isGroup||this.parent.isGroup?(console.error("Column Update Error - The updateDefinition function is only available on ungrouped columns"),Promise.reject("Column Update Error - The updateDefinition function is only available on columns, not column groups")):(e=Object.assign({},this.getDefinition()),e=Object.assign(e,t),this.table.columnManager.addColumn(e,!1,this).then((t=>(e.field==this.field&&(this.field=!1),this.delete().then((()=>t.getComponent()))))))}deleteCell(t){var e=this.cells.indexOf(t);e>-1&&this.cells.splice(e,1)}getComponent(){return this.component||(this.component=new D(this)),this.component}}I.defaultOptionList=P;class F{constructor(t){return this._row=t,new Proxy(this,{get:function(t,e,n){return void 0!==t[e]?t[e]:t._row.table.componentFunctionBinder.handle("row",t._row,e)}})}getData(t){return this._row.getData(t)}getElement(){return this._row.getElement()}getCells(){var t=[];return this._row.getCells().forEach((function(e){t.push(e.getComponent())})),t}getCell(t){var e=this._row.getCell(t);return!!e&&e.getComponent()}getIndex(){return this._row.getData("data")[this._row.table.options.index]}getPosition(){return this._row.getPosition()}watchPosition(t){return this._row.watchPosition(t)}delete(){return this._row.delete()}scrollTo(t,e){return this._row.table.rowManager.scrollToRow(this._row,t,e)}move(t,e){this._row.moveToRow(t,e)}update(t){return this._row.updateData(t)}normalizeHeight(){this._row.normalizeHeight(!0)}_getSelf(){return this._row}reformat(){return this._row.reinitialize()}getTable(){return this._row.table}getNextRow(){var t=this._row.nextRow();return t?t.getComponent():t}getPrevRow(){var t=this._row.prevRow();return t?t.getComponent():t}}class H extends v{constructor(t,e,n="row"){super(e.table),this.parent=e,this.data={},this.type=n,this.element=!1,this.modules={},this.cells=[],this.height=0,this.heightStyled="",this.manualHeight=!1,this.outerHeight=0,this.initialized=!1,this.heightInitialized=!1,this.position=0,this.positionWatchers=[],this.component=null,this.created=!1,this.setData(t)}create(){this.created||(this.created=!0,this.generateElement())}createElement(){var t=document.createElement("div");t.classList.add("tabulator-row"),t.setAttribute("role","row"),this.element=t}getElement(){return this.create(),this.element}detachElement(){this.element&&this.element.parentNode&&this.element.parentNode.removeChild(this.element)}generateElement(){this.createElement(),this.dispatch("row-init",this)}generateCells(){this.cells=this.table.columnManager.generateCells(this)}initialize(t,e){if(this.create(),!this.initialized||t){for(this.deleteCells();this.element.firstChild;)this.element.removeChild(this.element.firstChild);this.dispatch("row-layout-before",this),this.generateCells(),this.initialized=!0,this.table.columnManager.renderer.renderRowCells(this,e),t&&this.normalizeHeight(),this.dispatch("row-layout",this),this.table.options.rowFormatter&&this.table.options.rowFormatter(this.getComponent()),this.dispatch("row-layout-after",this)}else this.table.columnManager.renderer.rerenderRowCells(this,e)}rendered(){this.cells.forEach((t=>{t.cellRendered()}))}reinitializeHeight(){this.heightInitialized=!1,this.element&&null!==this.element.offsetParent&&this.normalizeHeight(!0)}deinitialize(){this.initialized=!1}deinitializeHeight(){this.heightInitialized=!1}reinitialize(t){this.initialized=!1,this.heightInitialized=!1,this.manualHeight||(this.height=0,this.heightStyled=""),this.element&&null!==this.element.offsetParent&&this.initialize(!0),this.dispatch("row-relayout",this)}calcHeight(t){var e,n=0;this.table.options.rowHeight?this.height=this.table.options.rowHeight:(e=this.table.options.resizableRows?this.element.clientHeight:0,this.cells.forEach((function(t){var e=t.getHeight();e>n&&(n=e)})),this.height=t?Math.max(n,e):this.manualHeight?this.height:Math.max(n,e)),this.heightStyled=this.height?this.height+"px":"",this.outerHeight=this.element.offsetHeight}setCellHeight(){this.cells.forEach((function(t){t.setHeight()})),this.heightInitialized=!0}clearCellHeight(){this.cells.forEach((function(t){t.clearHeight()}))}normalizeHeight(t){t&&!this.table.options.rowHeight&&this.clearCellHeight(),this.calcHeight(t),this.setCellHeight()}setHeight(t,e){(this.height!=t||e)&&(this.manualHeight=!0,this.height=t,this.heightStyled=t?t+"px":"",this.setCellHeight(),this.outerHeight=this.element.offsetHeight)}getHeight(){return this.outerHeight}getWidth(){return this.element.offsetWidth}deleteCell(t){var e=this.cells.indexOf(t);e>-1&&this.cells.splice(e,1)}setData(t){this.data=this.chain("row-data-init-before",[this,t],void 0,t),this.dispatch("row-data-init-after",this)}updateData(t){var e,n=this.element&&w.elVisible(this.element),i={};return new Promise(((o,r)=>{"string"==typeof t&&(t=JSON.parse(t)),this.dispatch("row-data-save-before",this),this.subscribed("row-data-changing")&&(i=Object.assign(i,this.data),i=Object.assign(i,t)),e=this.chain("row-data-changing",[this,i,t],null,t);for(let t in e)this.data[t]=e[t];this.dispatch("row-data-save-after",this);for(let i in t)this.table.columnManager.getColumnsByFieldRoot(i).forEach((t=>{let i=this.getCell(t.getField());if(i){let o=t.getFieldValue(e);i.getValue()!==o&&(i.setValueProcessData(o),n&&i.cellRendered())}}));n?(this.normalizeHeight(!0),this.table.options.rowFormatter&&this.table.options.rowFormatter(this.getComponent())):(this.initialized=!1,this.height=0,this.heightStyled=""),this.dispatch("row-data-changed",this,n,t),this.dispatchExternal("rowUpdated",this.getComponent()),this.subscribedExternal("dataChanged")&&this.dispatchExternal("dataChanged",this.table.rowManager.getData()),o()}))}getData(t){return t?this.chain("row-data-retrieve",[this,t],null,this.data):this.data}getCell(t){return t=this.table.columnManager.findColumn(t),this.initialized||0!==this.cells.length||this.generateCells(),this.cells.find((function(e){return e.column===t}))}getCellIndex(t){return this.cells.findIndex((function(e){return e===t}))}findCell(t){return this.cells.find((e=>e.element===t))}getCells(){return this.initialized||0!==this.cells.length||this.generateCells(),this.cells}nextRow(){return this.table.rowManager.nextDisplayRow(this,!0)||!1}prevRow(){return this.table.rowManager.prevDisplayRow(this,!0)||!1}moveToRow(t,e){var n=this.table.rowManager.findRow(t);n?(this.table.rowManager.moveRowActual(this,n,!e),this.table.rowManager.refreshActiveData("display",!1,!0)):console.warn("Move Error - No matching row found:",t)}delete(){return this.dispatch("row-delete",this),this.deleteActual(),Promise.resolve()}deleteActual(t){this.detachModules(),this.table.rowManager.deleteRow(this,t),this.deleteCells(),this.initialized=!1,this.heightInitialized=!1,this.element=!1,this.dispatch("row-deleted",this)}detachModules(){this.dispatch("row-deleting",this)}deleteCells(){var t=this.cells.length;for(let e=0;e<t;e++)this.cells[0].delete()}wipe(){if(this.detachModules(),this.deleteCells(),this.element){for(;this.element.firstChild;)this.element.removeChild(this.element.firstChild);this.element.parentNode&&this.element.parentNode.removeChild(this.element)}this.element=!1,this.modules={}}isDisplayed(){return this.table.rowManager.getDisplayRows().includes(this)}getPosition(){return!!this.isDisplayed()&&this.position}setPosition(t){t!=this.position&&(this.position=t,this.positionWatchers.forEach((t=>{t(this.position)})))}watchPosition(t){this.positionWatchers.push(t),t(this.position)}getGroup(){return this.modules.group||!1}getComponent(){return this.component||(this.component=new F(this)),this.component}}var O={avg:function(t,e,n){var i=0,o=void 0!==n.precision?n.precision:2;return t.length&&(i=t.reduce((function(t,e){return Number(t)+Number(e)})),i/=t.length,i=!1!==o?i.toFixed(o):i),parseFloat(i).toString()},max:function(t,e,n){var i=null,o=void 0!==n.precision&&n.precision;return t.forEach((function(t){((t=Number(t))>i||null===i)&&(i=t)})),null!==i?!1!==o?i.toFixed(o):i:""},min:function(t,e,n){var i=null,o=void 0!==n.precision&&n.precision;return t.forEach((function(t){((t=Number(t))<i||null===i)&&(i=t)})),null!==i?!1!==o?i.toFixed(o):i:""},sum:function(t,e,n){var i=0,o=void 0!==n.precision&&n.precision;return t.length&&t.forEach((function(t){t=Number(t),i+=isNaN(t)?0:Number(t)})),!1!==o?i.toFixed(o):i},concat:function(t,e,n){var i=0;return t.length&&(i=t.reduce((function(t,e){return String(t)+String(e)}))),i},count:function(t,e,n){var i=0;return t.length&&t.forEach((function(t){t&&i++})),i},unique:function(t,e,n){return t.filter(((e,n)=>(t||0===e)&&t.indexOf(e)===n)).length}};class W extends E{constructor(t){super(t),this.topCalcs=[],this.botCalcs=[],this.genColumn=!1,this.topElement=this.createElement(),this.botElement=this.createElement(),this.topRow=!1,this.botRow=!1,this.topInitialized=!1,this.botInitialized=!1,this.blocked=!1,this.recalcAfterBlock=!1,this.registerTableOption("columnCalcs",!0),this.registerColumnOption("topCalc"),this.registerColumnOption("topCalcParams"),this.registerColumnOption("topCalcFormatter"),this.registerColumnOption("topCalcFormatterParams"),this.registerColumnOption("bottomCalc"),this.registerColumnOption("bottomCalcParams"),this.registerColumnOption("bottomCalcFormatter"),this.registerColumnOption("bottomCalcFormatterParams")}createElement(){var t=document.createElement("div");return t.classList.add("tabulator-calcs-holder"),t}initialize(){this.genColumn=new I({field:"value"},this),this.subscribe("cell-value-changed",this.cellValueChanged.bind(this)),this.subscribe("column-init",this.initializeColumnCheck.bind(this)),this.subscribe("row-deleted",this.rowsUpdated.bind(this)),this.subscribe("scroll-horizontal",this.scrollHorizontal.bind(this)),this.subscribe("row-added",this.rowsUpdated.bind(this)),this.subscribe("column-moved",this.recalcActiveRows.bind(this)),this.subscribe("column-add",this.recalcActiveRows.bind(this)),this.subscribe("data-refreshed",this.recalcActiveRowsRefresh.bind(this)),this.subscribe("table-redraw",this.tableRedraw.bind(this)),this.subscribe("rows-visible",this.visibleRows.bind(this)),this.subscribe("scrollbar-vertical",this.adjustForScrollbar.bind(this)),this.subscribe("redraw-blocked",this.blockRedraw.bind(this)),this.subscribe("redraw-restored",this.restoreRedraw.bind(this)),this.subscribe("table-redrawing",this.resizeHolderWidth.bind(this)),this.subscribe("column-resized",this.resizeHolderWidth.bind(this)),this.subscribe("column-show",this.resizeHolderWidth.bind(this)),this.subscribe("column-hide",this.resizeHolderWidth.bind(this)),this.registerTableFunction("getCalcResults",this.getResults.bind(this)),this.registerTableFunction("recalc",this.userRecalc.bind(this)),this.resizeHolderWidth()}resizeHolderWidth(){this.topElement.style.minWidth=this.table.columnManager.headersElement.offsetWidth+"px"}tableRedraw(t){this.recalc(this.table.rowManager.activeRows),t&&this.redraw()}blockRedraw(){this.blocked=!0,this.recalcAfterBlock=!1}restoreRedraw(){this.blocked=!1,this.recalcAfterBlock&&(this.recalcAfterBlock=!1,this.recalcActiveRowsRefresh())}userRecalc(){this.recalc(this.table.rowManager.activeRows)}blockCheck(){return this.blocked&&(this.recalcAfterBlock=!0),this.blocked}visibleRows(t,e){return this.topRow&&e.unshift(this.topRow),this.botRow&&e.push(this.botRow),e}rowsUpdated(t){this.table.options.groupBy?this.recalcRowGroup(t):this.recalcActiveRows()}recalcActiveRowsRefresh(){this.table.options.groupBy&&this.table.options.dataTreeStartExpanded&&this.table.options.dataTree?this.recalcAll():this.recalcActiveRows()}recalcActiveRows(){this.recalc(this.table.rowManager.activeRows)}cellValueChanged(t){(t.column.definition.topCalc||t.column.definition.bottomCalc)&&(this.table.options.groupBy?("table"!=this.table.options.columnCalcs&&"both"!=this.table.options.columnCalcs||this.recalcActiveRows(),"table"!=this.table.options.columnCalcs&&this.recalcRowGroup(t.row)):this.recalcActiveRows())}initializeColumnCheck(t){(t.definition.topCalc||t.definition.bottomCalc)&&this.initializeColumn(t)}initializeColumn(t){var e=t.definition,n={topCalcParams:e.topCalcParams||{},botCalcParams:e.bottomCalcParams||{}};if(e.topCalc){switch(typeof e.topCalc){case"string":W.calculations[e.topCalc]?n.topCalc=W.calculations[e.topCalc]:console.warn("Column Calc Error - No such calculation found, ignoring: ",e.topCalc);break;case"function":n.topCalc=e.topCalc}n.topCalc&&(t.modules.columnCalcs=n,this.topCalcs.push(t),"group"!=this.table.options.columnCalcs&&this.initializeTopRow())}if(e.bottomCalc){switch(typeof e.bottomCalc){case"string":W.calculations[e.bottomCalc]?n.botCalc=W.calculations[e.bottomCalc]:console.warn("Column Calc Error - No such calculation found, ignoring: ",e.bottomCalc);break;case"function":n.botCalc=e.bottomCalc}n.botCalc&&(t.modules.columnCalcs=n,this.botCalcs.push(t),"group"!=this.table.options.columnCalcs&&this.initializeBottomRow())}}registerColumnField(){}removeCalcs(){var t=!1;this.topInitialized&&(this.topInitialized=!1,this.topElement.parentNode.removeChild(this.topElement),t=!0),this.botInitialized&&(this.botInitialized=!1,this.footerRemove(this.botElement),t=!0),t&&this.table.rowManager.adjustTableSize()}reinitializeCalcs(){this.topCalcs.length&&this.initializeTopRow(),this.botCalcs.length&&this.initializeBottomRow()}initializeTopRow(){this.topInitialized||(this.table.columnManager.getContentsElement().insertBefore(this.topElement,this.table.columnManager.headersElement.nextSibling),this.topInitialized=!0)}initializeBottomRow(){this.botInitialized||(this.footerPrepend(this.botElement),this.botInitialized=!0)}scrollHorizontal(t){this.botInitialized&&this.botRow&&(this.botElement.scrollLeft=t)}recalc(t){var e,n;if(!this.blockCheck()&&(this.topInitialized||this.botInitialized)){if(e=this.rowsToData(t),this.topInitialized){for(this.topRow&&this.topRow.deleteCells(),n=this.generateRow("top",e),this.topRow=n;this.topElement.firstChild;)this.topElement.removeChild(this.topElement.firstChild);this.topElement.appendChild(n.getElement()),n.initialize(!0)}if(this.botInitialized){for(this.botRow&&this.botRow.deleteCells(),n=this.generateRow("bottom",e),this.botRow=n;this.botElement.firstChild;)this.botElement.removeChild(this.botElement.firstChild);this.botElement.appendChild(n.getElement()),n.initialize(!0)}this.table.rowManager.adjustTableSize(),this.table.modExists("frozenColumns")&&this.table.modules.frozenColumns.layout()}}recalcRowGroup(t){this.recalcGroup(this.table.modules.groupRows.getRowGroup(t))}recalcAll(){(this.topCalcs.length||this.botCalcs.length)&&("group"!==this.table.options.columnCalcs&&this.recalcActiveRows(),this.table.options.groupBy&&"table"!==this.table.options.columnCalcs&&this.table.modules.groupRows.getChildGroups().forEach((t=>{this.recalcGroup(t)})))}recalcGroup(t){var e,n;this.blockCheck()||t&&t.calcs&&(t.calcs.bottom&&(e=this.rowsToData(t.rows),n=this.generateRowData("bottom",e),t.calcs.bottom.updateData(n),t.calcs.bottom.reinitialize()),t.calcs.top&&(e=this.rowsToData(t.rows),n=this.generateRowData("top",e),t.calcs.top.updateData(n),t.calcs.top.reinitialize()))}generateTopRow(t){return this.generateRow("top",this.rowsToData(t))}generateBottomRow(t){return this.generateRow("bottom",this.rowsToData(t))}rowsToData(t){var e=[];return t.forEach((t=>{if(e.push(t.getData()),this.table.options.dataTree&&this.table.options.dataTreeChildColumnCalcs&&t.modules.dataTree&&t.modules.dataTree.open){var n=this.rowsToData(this.table.modules.dataTree.getFilteredTreeChildren(t));e=e.concat(n)}})),e}generateRow(t,e){var n,i=this.generateRowData(t,e);return this.table.modExists("mutator")&&this.table.modules.mutator.disable(),n=new H(i,this,"calc"),this.table.modExists("mutator")&&this.table.modules.mutator.enable(),n.getElement().classList.add("tabulator-calcs","tabulator-calcs-"+t),n.component=!1,n.getComponent=()=>(n.component||(n.component=new M(n)),n.component),n.generateCells=()=>{var e=[];this.table.columnManager.columnsByIndex.forEach((i=>{this.genColumn.setField(i.getField()),this.genColumn.hozAlign=i.hozAlign,i.definition[t+"CalcFormatter"]&&this.table.modExists("format")?this.genColumn.modules.format={formatter:this.table.modules.format.getFormatter(i.definition[t+"CalcFormatter"]),params:i.definition[t+"CalcFormatterParams"]||{}}:this.genColumn.modules.format={formatter:this.table.modules.format.getFormatter("plaintext"),params:{}},this.genColumn.definition.cssClass=i.definition.cssClass;var o=new S(this.genColumn,n);o.getElement(),o.column=i,o.setWidth(),i.cells.push(o),e.push(o),i.visible||o.hide()})),n.cells=e},n}generateRowData(t,e){var n,i,o={},r="top"==t?this.topCalcs:this.botCalcs,a="top"==t?"topCalc":"botCalc";return r.forEach((function(t){var r=[];t.modules.columnCalcs&&t.modules.columnCalcs[a]&&(e.forEach((function(e){r.push(t.getFieldValue(e))})),i=a+"Params",n="function"==typeof t.modules.columnCalcs[i]?t.modules.columnCalcs[i](r,e):t.modules.columnCalcs[i],t.setFieldValue(o,t.modules.columnCalcs[a](r,e,n)))})),o}hasTopCalcs(){return!!this.topCalcs.length}hasBottomCalcs(){return!!this.botCalcs.length}redraw(){this.topRow&&this.topRow.normalizeHeight(!0),this.botRow&&this.botRow.normalizeHeight(!0)}getResults(){var t={};return this.table.options.groupBy&&this.table.modExists("groupRows")?this.table.modules.groupRows.getGroups(!0).forEach((e=>{t[e.getKey()]=this.getGroupResults(e)})):t={top:this.topRow?this.topRow.getData():{},bottom:this.botRow?this.botRow.getData():{}},t}getGroupResults(t){var e=t._getSelf(),n=t.getSubGroups(),i={};return n.forEach((t=>{i[t.getKey()]=this.getGroupResults(t)})),{top:e.calcs.top?e.calcs.top.getData():{},bottom:e.calcs.bottom?e.calcs.bottom.getData():{},groups:i}}adjustForScrollbar(t){this.botRow&&(this.table.rtl?this.botElement.style.paddingLeft=t+"px":this.botElement.style.paddingRight=t+"px")}}W.moduleName="columnCalcs",W.calculations=O;class j extends E{constructor(t){super(t),this.indent=10,this.field="",this.collapseEl=null,this.expandEl=null,this.branchEl=null,this.elementField=!1,this.startOpen=function(){},this.registerTableOption("dataTree",!1),this.registerTableOption("dataTreeFilter",!0),this.registerTableOption("dataTreeSort",!0),this.registerTableOption("dataTreeElementColumn",!1),this.registerTableOption("dataTreeBranchElement",!0),this.registerTableOption("dataTreeChildIndent",9),this.registerTableOption("dataTreeChildField","_children"),this.registerTableOption("dataTreeCollapseElement",!1),this.registerTableOption("dataTreeExpandElement",!1),this.registerTableOption("dataTreeStartExpanded",!1),this.registerTableOption("dataTreeChildColumnCalcs",!1),this.registerTableOption("dataTreeSelectPropagate",!1),this.registerComponentFunction("row","treeCollapse",this.collapseRow.bind(this)),this.registerComponentFunction("row","treeExpand",this.expandRow.bind(this)),this.registerComponentFunction("row","treeToggle",this.toggleRow.bind(this)),this.registerComponentFunction("row","getTreeParent",this.getTreeParent.bind(this)),this.registerComponentFunction("row","getTreeChildren",this.getRowChildren.bind(this)),this.registerComponentFunction("row","addTreeChild",this.addTreeChildRow.bind(this)),this.registerComponentFunction("row","isTreeExpanded",this.isRowExpanded.bind(this))}initialize(){if(this.table.options.dataTree){var t=null,e=this.table.options;switch(this.field=e.dataTreeChildField,this.indent=e.dataTreeChildIndent,this.options("movableRows")&&console.warn("The movableRows option is not available with dataTree enabled, moving of child rows could result in unpredictable behavior"),e.dataTreeBranchElement?!0===e.dataTreeBranchElement?(this.branchEl=document.createElement("div"),this.branchEl.classList.add("tabulator-data-tree-branch")):"string"==typeof e.dataTreeBranchElement?((t=document.createElement("div")).innerHTML=e.dataTreeBranchElement,this.branchEl=t.firstChild):this.branchEl=e.dataTreeBranchElement:(this.branchEl=document.createElement("div"),this.branchEl.classList.add("tabulator-data-tree-branch-empty")),e.dataTreeCollapseElement?"string"==typeof e.dataTreeCollapseElement?((t=document.createElement("div")).innerHTML=e.dataTreeCollapseElement,this.collapseEl=t.firstChild):this.collapseEl=e.dataTreeCollapseElement:(this.collapseEl=document.createElement("div"),this.collapseEl.classList.add("tabulator-data-tree-control"),this.collapseEl.tabIndex=0,this.collapseEl.innerHTML="<div class='tabulator-data-tree-control-collapse'></div>"),e.dataTreeExpandElement?"string"==typeof e.dataTreeExpandElement?((t=document.createElement("div")).innerHTML=e.dataTreeExpandElement,this.expandEl=t.firstChild):this.expandEl=e.dataTreeExpandElement:(this.expandEl=document.createElement("div"),this.expandEl.classList.add("tabulator-data-tree-control"),this.expandEl.tabIndex=0,this.expandEl.innerHTML="<div class='tabulator-data-tree-control-expand'></div>"),typeof e.dataTreeStartExpanded){case"boolean":this.startOpen=function(t,n){return e.dataTreeStartExpanded};break;case"function":this.startOpen=e.dataTreeStartExpanded;break;default:this.startOpen=function(t,n){return e.dataTreeStartExpanded[n]}}this.subscribe("row-init",this.initializeRow.bind(this)),this.subscribe("row-layout-after",this.layoutRow.bind(this)),this.subscribe("row-deleted",this.rowDelete.bind(this),0),this.subscribe("row-data-changed",this.rowDataChanged.bind(this),10),this.subscribe("cell-value-updated",this.cellValueChanged.bind(this)),this.subscribe("edit-cancelled",this.cellValueChanged.bind(this)),this.subscribe("column-moving-rows",this.columnMoving.bind(this)),this.subscribe("table-built",this.initializeElementField.bind(this)),this.subscribe("table-redrawing",this.tableRedrawing.bind(this)),this.registerDisplayHandler(this.getRows.bind(this),30)}}tableRedrawing(t){t&&this.table.rowManager.getRows().forEach((t=>{this.reinitializeRowChildren(t)}))}initializeElementField(){var t=this.table.columnManager.getFirstVisibleColumn();this.elementField=this.table.options.dataTreeElementColumn||!!t&&t.field}getRowChildren(t){return this.getTreeChildren(t,!0)}columnMoving(){var t=[];return this.table.rowManager.rows.forEach((e=>{t=t.concat(this.getTreeChildren(e,!1,!0))})),t}rowDataChanged(t,e,n){this.redrawNeeded(n)&&(this.initializeRow(t),e&&(this.layoutRow(t),this.refreshData(!0)))}cellValueChanged(t){t.column.getField()===this.elementField&&this.layoutRow(t.row)}initializeRow(t){var e=t.getData()[this.field],n=Array.isArray(e),i=n||!n&&"object"==typeof e&&null!==e;!i&&t.modules.dataTree&&t.modules.dataTree.branchEl&&t.modules.dataTree.branchEl.parentNode.removeChild(t.modules.dataTree.branchEl),!i&&t.modules.dataTree&&t.modules.dataTree.controlEl&&t.modules.dataTree.controlEl.parentNode.removeChild(t.modules.dataTree.controlEl),t.modules.dataTree={index:t.modules.dataTree?t.modules.dataTree.index:0,open:!!i&&(t.modules.dataTree?t.modules.dataTree.open:this.startOpen(t.getComponent(),0)),controlEl:!(!t.modules.dataTree||!i)&&t.modules.dataTree.controlEl,branchEl:!(!t.modules.dataTree||!i)&&t.modules.dataTree.branchEl,parent:!!t.modules.dataTree&&t.modules.dataTree.parent,children:i}}reinitializeRowChildren(t){this.getTreeChildren(t,!1,!0).forEach((function(t){t.reinitialize(!0)}))}layoutRow(t){var e=(this.elementField?t.getCell(this.elementField):t.getCells()[0]).getElement(),n=t.modules.dataTree;n.branchEl&&(n.branchEl.parentNode&&n.branchEl.parentNode.removeChild(n.branchEl),n.branchEl=!1),n.controlEl&&(n.controlEl.parentNode&&n.controlEl.parentNode.removeChild(n.controlEl),n.controlEl=!1),this.generateControlElement(t,e),t.getElement().classList.add("tabulator-tree-level-"+n.index),n.index&&(this.branchEl?(n.branchEl=this.branchEl.cloneNode(!0),e.insertBefore(n.branchEl,e.firstChild),this.table.rtl?n.branchEl.style.marginRight=(n.branchEl.offsetWidth+n.branchEl.style.marginLeft)*(n.index-1)+n.index*this.indent+"px":n.branchEl.style.marginLeft=(n.branchEl.offsetWidth+n.branchEl.style.marginRight)*(n.index-1)+n.index*this.indent+"px"):this.table.rtl?e.style.paddingRight=parseInt(window.getComputedStyle(e,null).getPropertyValue("padding-right"))+n.index*this.indent+"px":e.style.paddingLeft=parseInt(window.getComputedStyle(e,null).getPropertyValue("padding-left"))+n.index*this.indent+"px")}generateControlElement(t,e){var n=t.modules.dataTree,i=n.controlEl;e=e||t.getCells()[0].getElement(),!1!==n.children&&(n.open?(n.controlEl=this.collapseEl.cloneNode(!0),n.controlEl.addEventListener("click",(e=>{e.stopPropagation(),this.collapseRow(t)}))):(n.controlEl=this.expandEl.cloneNode(!0),n.controlEl.addEventListener("click",(e=>{e.stopPropagation(),this.expandRow(t)}))),n.controlEl.addEventListener("mousedown",(t=>{t.stopPropagation()})),i&&i.parentNode===e?i.parentNode.replaceChild(n.controlEl,i):e.insertBefore(n.controlEl,e.firstChild))}getRows(t){var e=[];return t.forEach(((t,n)=>{var i;e.push(t),t instanceof H&&(t.create(),(i=t.modules.dataTree).index||!1===i.children||this.getChildren(t).forEach((t=>{t.create(),e.push(t)})))})),e}getChildren(t,e){var n=t.modules.dataTree,i=[],o=[];return!1!==n.children&&(n.open||e)&&(Array.isArray(n.children)||(n.children=this.generateChildren(t)),i=this.table.modExists("filter")&&this.table.options.dataTreeFilter?this.table.modules.filter.filter(n.children):n.children,this.table.modExists("sort")&&this.table.options.dataTreeSort&&this.table.modules.sort.sort(i),i.forEach((t=>{o.push(t),this.getChildren(t).forEach((t=>{o.push(t)}))}))),o}generateChildren(t){var e=[],n=t.getData()[this.field];return Array.isArray(n)||(n=[n]),n.forEach((n=>{var i=new H(n||{},this.table.rowManager);i.create(),i.modules.dataTree.index=t.modules.dataTree.index+1,i.modules.dataTree.parent=t,i.modules.dataTree.children&&(i.modules.dataTree.open=this.startOpen(i.getComponent(),i.modules.dataTree.index)),e.push(i)})),e}expandRow(t,e){var n=t.modules.dataTree;!1!==n.children&&(n.open=!0,t.reinitialize(),this.refreshData(!0),this.dispatchExternal("dataTreeRowExpanded",t.getComponent(),t.modules.dataTree.index))}collapseRow(t){var e=t.modules.dataTree;!1!==e.children&&(e.open=!1,t.reinitialize(),this.refreshData(!0),this.dispatchExternal("dataTreeRowCollapsed",t.getComponent(),t.modules.dataTree.index))}toggleRow(t){var e=t.modules.dataTree;!1!==e.children&&(e.open?this.collapseRow(t):this.expandRow(t))}isRowExpanded(t){return t.modules.dataTree.open}getTreeParent(t){return!!t.modules.dataTree.parent&&t.modules.dataTree.parent.getComponent()}getTreeParentRoot(t){return t.modules.dataTree&&t.modules.dataTree.parent?this.getTreeParentRoot(t.modules.dataTree.parent):t}getFilteredTreeChildren(t){var e=t.modules.dataTree,n=[];return e.children&&(Array.isArray(e.children)||(e.children=this.generateChildren(t)),(this.table.modExists("filter")&&this.table.options.dataTreeFilter?this.table.modules.filter.filter(e.children):e.children).forEach((t=>{t instanceof H&&n.push(t)}))),n}rowDelete(t){var e,n=t.modules.dataTree.parent;n&&(!1!==(e=this.findChildIndex(t,n))&&n.data[this.field].splice(e,1),n.data[this.field].length||delete n.data[this.field],this.initializeRow(n),this.layoutRow(n)),this.refreshData(!0)}addTreeChildRow(t,e,n,i){var o=!1;"string"==typeof e&&(e=JSON.parse(e)),Array.isArray(t.data[this.field])||(t.data[this.field]=[],t.modules.dataTree.open=this.startOpen(t.getComponent(),t.modules.dataTree.index)),void 0!==i&&!1!==(o=this.findChildIndex(i,t))&&t.data[this.field].splice(n?o:o+1,0,e),!1===o&&(n?t.data[this.field].unshift(e):t.data[this.field].push(e)),this.initializeRow(t),this.layoutRow(t),this.refreshData(!0)}findChildIndex(t,e){var n=!1;return"object"==typeof t?t instanceof H?n=t.data:t instanceof F?n=t._getSelf().data:"undefined"!=typeof HTMLElement&&t instanceof HTMLElement?e.modules.dataTree&&(n=e.modules.dataTree.children.find((e=>e instanceof H&&e.element===t)))&&(n=n.data):null===t&&(n=!1):n=void 0!==t&&e.data[this.field].find((e=>e.data[this.table.options.index]==t)),n&&(Array.isArray(e.data[this.field])&&(n=e.data[this.field].indexOf(n)),-1==n&&(n=!1)),n}getTreeChildren(t,e,n){var i=t.modules.dataTree,o=[];return i&&i.children&&(Array.isArray(i.children)||(i.children=this.generateChildren(t)),i.children.forEach((t=>{t instanceof H&&(o.push(e?t.getComponent():t),n&&(o=o.concat(this.getTreeChildren(t,e,n))))}))),o}getChildField(){return this.field}redrawNeeded(t){return!!this.field&&void 0!==t[this.field]||!!this.elementField&&void 0!==t[this.elementField]}}j.moduleName="dataTree";var V={csv:function(t,e={},n){var i=e.delimiter?e.delimiter:",",o=[],r=[];t.forEach((t=>{var e=[];switch(t.type){case"group":console.warn("Download Warning - CSV downloader cannot process row groups");break;case"calc":console.warn("Download Warning - CSV downloader cannot process column calculations");break;case"header":t.columns.forEach(((t,e)=>{t&&1===t.depth&&(r[e]=void 0===t.value||null===t.value?"":'"'+String(t.value).split('"').join('""')+'"')}));break;case"row":t.columns.forEach((t=>{if(t){switch(typeof t.value){case"object":t.value=null!==t.value?JSON.stringify(t.value):"";break;case"undefined":t.value=""}e.push('"'+String(t.value).split('"').join('""')+'"')}})),o.push(e.join(i))}})),r.length&&o.unshift(r.join(i)),o=o.join("\n"),e.bom&&(o="\ufeff"+o),n(o,"text/csv")},json:function(t,e,n){var i=[];t.forEach((t=>{var e={};switch(t.type){case"header":break;case"group":console.warn("Download Warning - JSON downloader cannot process row groups");break;case"calc":console.warn("Download Warning - JSON downloader cannot process column calculations");break;case"row":t.columns.forEach((t=>{t&&(e[t.component.getTitleDownload()||t.component.getField()]=t.value)})),i.push(e)}})),n(i=JSON.stringify(i,null,"\t"),"application/json")},jsonLines:function(t,e,n){const i=[];t.forEach((t=>{const e={};switch(t.type){case"header":break;case"group":console.warn("Download Warning - JSON downloader cannot process row groups");break;case"calc":console.warn("Download Warning - JSON downloader cannot process column calculations");break;case"row":t.columns.forEach((t=>{t&&(e[t.component.getTitleDownload()||t.component.getField()]=t.value)})),i.push(JSON.stringify(e))}})),n(i.join("\n"),"application/x-ndjson")},pdf:function(t,e={},n){var i=[],o=[],r={},a=e.rowGroupStyles||{fontStyle:"bold",fontSize:12,cellPadding:6,fillColor:220},l=e.rowCalcStyles||{fontStyle:"bold",fontSize:10,cellPadding:4,fillColor:232},s=e.jsPDF||{},u=e.title?e.title:"";function h(t,e){var n=[];return t.columns.forEach((t=>{var i;if(t){switch(typeof t.value){case"object":t.value=null!==t.value?JSON.stringify(t.value):"";break;case"undefined":t.value=""}i={content:t.value,colSpan:t.width,rowSpan:t.height},e&&(i.styles=e),n.push(i)}})),n}s.orientation||(s.orientation=e.orientation||"landscape"),s.unit||(s.unit="pt"),t.forEach((t=>{switch(t.type){case"header":i.push(h(t));break;case"group":o.push(h(t,a));break;case"calc":o.push(h(t,l));break;case"row":o.push(h(t))}}));var c=new jspdf.jsPDF(s);e.autoTable&&(r="function"==typeof e.autoTable?e.autoTable(c)||{}:e.autoTable),u&&(r.didDrawPage=function(t){c.text(u,40,30)}),r.head=i,r.body=o,c.autoTable(r),e.documentProcessing&&e.documentProcessing(c),n(c.output("arraybuffer"),"application/pdf")},xlsx:function(t,e,n){var i=e.sheetName||"Sheet1",o=XLSX.utils.book_new(),r=new v(this),a=!("compress"in e)||e.compress,l=e.writeOptions||{bookType:"xlsx",bookSST:!0,compression:a};function s(){var e=[],n=[],i={},o={s:{c:0,r:0},e:{c:t[0]?t[0].columns.reduce(((t,e)=>t+(e&&e.width?e.width:1)),0):0,r:t.length}};return t.forEach(((t,i)=>{var o=[];t.columns.forEach((function(t,e){t?(o.push(t.value instanceof Date||"object"!=typeof t.value?t.value:JSON.stringify(t.value)),(t.width>1||t.height>-1)&&(t.height>1||t.width>1)&&n.push({s:{r:i,c:e},e:{r:i+t.height-1,c:e+t.width-1}})):o.push("")})),e.push(o)})),XLSX.utils.sheet_add_aoa(i,e),i["!ref"]=XLSX.utils.encode_range(o),n.length&&(i["!merges"]=n),i}if(l.type="binary",o.SheetNames=[],o.Sheets={},e.sheetOnly)n(s());else{if(e.sheets)for(var u in e.sheets)!0===e.sheets[u]?(o.SheetNames.push(u),o.Sheets[u]=s()):(o.SheetNames.push(u),r.commsSend(e.sheets[u],"download","intercept",{type:"xlsx",options:{sheetOnly:!0},active:this.active,intercept:function(t){o.Sheets[u]=t}}));else o.SheetNames.push(i),o.Sheets[i]=s();e.documentProcessing&&(o=e.documentProcessing(o)),n(function(t){for(var e=new ArrayBuffer(t.length),n=new Uint8Array(e),i=0;i!=t.length;++i)n[i]=255&t.charCodeAt(i);return e}(XLSX.write(o,l)),"application/octet-stream")}},html:function(t,e,n){this.modExists("export",!0)&&n(this.modules.export.generateHTMLTable(t),"text/html")}};class N extends E{constructor(t){super(t),this.registerTableOption("downloadEncoder",(function(t,e){return new Blob([t],{type:e})})),this.registerTableOption("downloadReady",void 0),this.registerTableOption("downloadConfig",{}),this.registerTableOption("downloadRowRange","active"),this.registerColumnOption("download"),this.registerColumnOption("titleDownload")}initialize(){this.deprecatedOptionsCheck(),this.registerTableFunction("download",this.download.bind(this)),this.registerTableFunction("downloadToTab",this.downloadToTab.bind(this))}deprecatedOptionsCheck(){this.deprecationCheck("downloadReady","downloadEncoder")}downloadToTab(t,e,n,i){this.download(t,e,n,i,!0)}download(t,e,n,i,o){var r=!1;if("function"==typeof t?r=t:N.downloaders[t]?r=N.downloaders[t]:console.warn("Download Error - No such download type found: ",t),r){var a=this.generateExportList(i);r.call(this.table,a,n||{},function(n,i){o?!0===o?this.triggerDownload(n,i,t,e,!0):o(n):this.triggerDownload(n,i,t,e)}.bind(this))}}generateExportList(t){var e=this.table.modules.export.generateExportList(this.table.options.downloadConfig,!1,t||this.table.options.downloadRowRange,"download"),n=this.table.options.groupHeaderDownload;return n&&!Array.isArray(n)&&(n=[n]),e.forEach((t=>{var e;"group"===t.type&&(e=t.columns[0],n&&n[t.indent]&&(e.value=n[t.indent](e.value,t.component._group.getRowCount(),t.component._group.getData(),t.component)))})),e}triggerDownload(t,e,n,i,o){var r=document.createElement("a"),a=this.table.options.downloadEncoder(t,e);a&&(o?window.open(window.URL.createObjectURL(a)):(i=i||"Tabulator."+("function"==typeof n?"txt":n),navigator.msSaveOrOpenBlob?navigator.msSaveOrOpenBlob(a,i):(r.setAttribute("href",window.URL.createObjectURL(a)),r.setAttribute("download",i),r.style.display="none",document.body.appendChild(r),r.click(),document.body.removeChild(r))),this.dispatchExternal("downloadComplete"))}commsReceived(t,e,n){"intercept"===e&&this.download(n.type,"",n.options,n.active,n.intercept)}}function G(t,e){var n=e.mask,i=void 0!==e.maskLetterChar?e.maskLetterChar:"A",o=void 0!==e.maskNumberChar?e.maskNumberChar:"9",r=void 0!==e.maskWildcardChar?e.maskWildcardChar:"*";function a(e){var l=n[e];void 0!==l&&l!==r&&l!==i&&l!==o&&(t.value=t.value+""+l,a(e+1))}t.addEventListener("keydown",(e=>{var a=t.value.length,l=e.key;if(e.keyCode>46&&!e.ctrlKey&&!e.metaKey){if(a>=n.length)return e.preventDefault(),e.stopPropagation(),!1;switch(n[a]){case i:if(l.toUpperCase()==l.toLowerCase())return e.preventDefault(),e.stopPropagation(),!1;break;case o:if(isNaN(l))return e.preventDefault(),e.stopPropagation(),!1;break;case r:break;default:if(l!==n[a])return e.preventDefault(),e.stopPropagation(),!1}}})),t.addEventListener("keyup",(n=>{n.keyCode>46&&e.maskAutoFill&&a(t.value.length)})),t.placeholder||(t.placeholder=n),e.maskAutoFill&&a(t.value.length)}N.moduleName="download",N.downloaders=V;class U{constructor(t,e,n,i,o,r){this.edit=t,this.table=t.table,this.cell=e,this.params=this._initializeParams(r),this.data=[],this.displayItems=[],this.currentItems=[],this.focusedItem=null,this.input=this._createInputElement(),this.listEl=this._createListElement(),this.initialValues=null,this.isFilter="header"===e.getType(),this.filterTimeout=null,this.filtered=!1,this.typing=!1,this.values=[],this.popup=null,this.listIteration=0,this.lastAction="",this.filterTerm="",this.blurable=!0,this.actions={success:i,cancel:o},this._deprecatedOptionsCheck(),this._initializeValue(),n(this._onRendered.bind(this))}_deprecatedOptionsCheck(){this.params.listItemFormatter&&this.cell.getTable().deprecationAdvisor.msg("The listItemFormatter editor param has been deprecated, please see the latest editor documentation for updated options"),this.params.sortValuesList&&this.cell.getTable().deprecationAdvisor.msg("The sortValuesList editor param has been deprecated, please see the latest editor documentation for updated options"),this.params.searchFunc&&this.cell.getTable().deprecationAdvisor.msg("The searchFunc editor param has been deprecated, please see the latest editor documentation for updated options"),this.params.searchingPlaceholder&&this.cell.getTable().deprecationAdvisor.msg("The searchingPlaceholder editor param has been deprecated, please see the latest editor documentation for updated options")}_initializeValue(){var t=this.cell.getValue();void 0===t&&void 0!==this.params.defaultValue&&(t=this.params.defaultValue),this.initialValues=this.params.multiselect?t:[t],this.isFilter&&(this.input.value=this.initialValues?this.initialValues.join(","):"",this.headerFilterInitialListGen())}_onRendered(){var t=this.cell.getElement();function e(t){t.stopPropagation()}this.isFilter||(this.input.style.height="100%",this.input.focus({preventScroll:!0})),t.addEventListener("click",e),setTimeout((()=>{t.removeEventListener("click",e)}),1e3),this.input.addEventListener("mousedown",this._preventPopupBlur.bind(this))}_createListElement(){var t=document.createElement("div");return t.classList.add("tabulator-edit-list"),t.addEventListener("mousedown",this._preventBlur.bind(this)),t.addEventListener("keydown",this._inputKeyDown.bind(this)),t}_setListWidth(){var t=this.isFilter?this.input:this.cell.getElement();this.listEl.style.minWidth=t.offsetWidth+"px",this.params.maxWidth&&(!0===this.params.maxWidth?this.listEl.style.maxWidth=t.offsetWidth+"px":"number"==typeof this.params.maxWidth?this.listEl.style.maxWidth=this.params.maxWidth+"px":this.listEl.style.maxWidth=this.params.maxWidth)}_createInputElement(){var t=this.params.elementAttributes,e=document.createElement("input");if(e.setAttribute("type",this.params.clearable?"search":"text"),e.style.padding="4px",e.style.width="100%",e.style.boxSizing="border-box",this.params.autocomplete||(e.style.cursor="default",e.style.caretColor="transparent"),t&&"object"==typeof t)for(let n in t)"+"==n.charAt(0)?(n=n.slice(1),e.setAttribute(n,e.getAttribute(n)+t["+"+n])):e.setAttribute(n,t[n]);return this.params.mask&&G(e,this.params),this._bindInputEvents(e),e}_initializeParams(t){var e,n=["values","valuesURL","valuesLookup"];return(t=Object.assign({},t)).verticalNavigation=t.verticalNavigation||"editor",t.placeholderLoading=void 0===t.placeholderLoading?"Searching ...":t.placeholderLoading,t.placeholderEmpty=void 0===t.placeholderEmpty?"No Results Found":t.placeholderEmpty,t.filterDelay=void 0===t.filterDelay?300:t.filterDelay,t.emptyValue=Object.keys(t).includes("emptyValue")?t.emptyValue:"",(e=Object.keys(t).filter((t=>n.includes(t))).length)?e>1&&console.warn("list editor config error - only one of the values, valuesURL, or valuesLookup options can be set on the same editor"):console.warn("list editor config error - either the values, valuesURL, or valuesLookup option must be set"),t.autocomplete?t.multiselect&&(t.multiselect=!1,console.warn("list editor config error - multiselect option is not available when autocomplete is enabled")):(t.freetext&&(t.freetext=!1,console.warn("list editor config error - freetext option is only available when autocomplete is enabled")),t.filterFunc&&(t.filterFunc=!1,console.warn("list editor config error - filterFunc option is only available when autocomplete is enabled")),t.filterRemote&&(t.filterRemote=!1,console.warn("list editor config error - filterRemote option is only available when autocomplete is enabled")),t.mask&&(t.mask=!1,console.warn("list editor config error - mask option is only available when autocomplete is enabled")),t.allowEmpty&&(t.allowEmpty=!1,console.warn("list editor config error - allowEmpty option is only available when autocomplete is enabled")),t.listOnEmpty&&(t.listOnEmpty=!1,console.warn("list editor config error - listOnEmpty option is only available when autocomplete is enabled"))),t.filterRemote&&"function"!=typeof t.valuesLookup&&!t.valuesURL&&(t.filterRemote=!1,console.warn("list editor config error - filterRemote option should only be used when values list is populated from a remote source")),t}_bindInputEvents(t){t.addEventListener("focus",this._inputFocus.bind(this)),t.addEventListener("click",this._inputClick.bind(this)),t.addEventListener("blur",this._inputBlur.bind(this)),t.addEventListener("keydown",this._inputKeyDown.bind(this)),t.addEventListener("search",this._inputSearch.bind(this)),this.params.autocomplete&&t.addEventListener("keyup",this._inputKeyUp.bind(this))}_inputFocus(t){this.rebuildOptionsList()}_filter(){this.params.filterRemote?(clearTimeout(this.filterTimeout),this.filterTimeout=setTimeout((()=>{this.rebuildOptionsList()}),this.params.filterDelay)):this._filterList()}_inputClick(t){t.stopPropagation()}_inputBlur(t){this.blurable&&(this.popup?this.popup.hide():this._resolveValue(!0))}_inputSearch(){this._clearChoices()}_inputKeyDown(t){switch(t.keyCode){case 38:this._keyUp(t);break;case 40:this._keyDown(t);break;case 37:case 39:this._keySide(t);break;case 13:this._keyEnter();break;case 27:this._keyEsc();break;case 36:case 35:this._keyHomeEnd(t);break;case 9:this._keyTab(t);break;default:this._keySelectLetter(t)}}_inputKeyUp(t){switch(t.keyCode){case 38:case 37:case 39:case 40:case 13:case 27:break;default:this._keyAutoCompLetter(t)}}_preventPopupBlur(){this.popup&&this.popup.blockHide(),setTimeout((()=>{this.popup&&this.popup.restoreHide()}),10)}_preventBlur(){this.blurable=!1,setTimeout((()=>{this.blurable=!0}),10)}_keyTab(t){this.params.autocomplete&&"typing"===this.lastAction?this._resolveValue(!0):this.focusedItem&&this._chooseItem(this.focusedItem,!0)}_keyUp(t){var e=this.displayItems.indexOf(this.focusedItem);("editor"==this.params.verticalNavigation||"hybrid"==this.params.verticalNavigation&&e)&&(t.stopImmediatePropagation(),t.stopPropagation(),t.preventDefault(),e>0&&this._focusItem(this.displayItems[e-1]))}_keyDown(t){var e=this.displayItems.indexOf(this.focusedItem);("editor"==this.params.verticalNavigation||"hybrid"==this.params.verticalNavigation&&e<this.displayItems.length-1)&&(t.stopImmediatePropagation(),t.stopPropagation(),t.preventDefault(),e<this.displayItems.length-1&&(-1==e?this._focusItem(this.displayItems[0]):this._focusItem(this.displayItems[e+1])))}_keySide(t){this.params.autocomplete||(t.stopImmediatePropagation(),t.stopPropagation(),t.preventDefault())}_keyEnter(t){this.params.autocomplete&&"typing"===this.lastAction?this._resolveValue(!0):this.focusedItem&&this._chooseItem(this.focusedItem)}_keyEsc(t){this._cancel()}_keyHomeEnd(t){this.params.autocomplete&&t.stopImmediatePropagation()}_keySelectLetter(t){this.params.autocomplete||(t.preventDefault(),t.keyCode>=38&&t.keyCode<=90&&this._scrollToValue(t.keyCode))}_keyAutoCompLetter(t){this._filter(),this.lastAction="typing",this.typing=!0}_scrollToValue(t){clearTimeout(this.filterTimeout);var e=String.fromCharCode(t).toLowerCase();this.filterTerm+=e.toLowerCase();var n=this.displayItems.find((t=>void 0!==t.label&&t.label.toLowerCase().startsWith(this.filterTerm)));n&&this._focusItem(n),this.filterTimeout=setTimeout((()=>{this.filterTerm=""}),800)}_focusItem(t){this.lastAction="focus",this.focusedItem&&this.focusedItem.element&&this.focusedItem.element.classList.remove("focused"),this.focusedItem=t,t&&t.element&&(t.element.classList.add("focused"),t.element.scrollIntoView({behavior:"smooth",block:"nearest",inline:"start"}))}headerFilterInitialListGen(){this._generateOptions(!0)}rebuildOptionsList(){this._generateOptions().then(this._sortOptions.bind(this)).then(this._buildList.bind(this)).then(this._showList.bind(this)).catch((t=>{Number.isInteger(t)||console.error("List generation error",t)}))}_filterList(){this._buildList(this._filterOptions()),this._showList()}_generateOptions(t){var e=[],n=++this.listIteration;return this.filtered=!1,this.params.values?e=this.params.values:this.params.valuesURL?e=this._ajaxRequest(this.params.valuesURL,this.input.value):"function"==typeof this.params.valuesLookup?e=this.params.valuesLookup(this.cell,this.input.value):this.params.valuesLookup&&(e=this._uniqueColumnValues(this.params.valuesLookupField)),e instanceof Promise?(t||this._addPlaceholder(this.params.placeholderLoading),e.then().then((t=>this.listIteration===n?this._parseList(t):Promise.reject(n)))):Promise.resolve(this._parseList(e))}_addPlaceholder(t){var e=document.createElement("div");"function"==typeof t&&(t=t(this.cell.getComponent(),this.listEl)),t&&(this._clearList(),t instanceof HTMLElement?e=t:(e.classList.add("tabulator-edit-list-placeholder"),e.innerHTML=t),this.listEl.appendChild(e),this._showList())}_ajaxRequest(t,e){return t=k(t,{},this.params.filterRemote?{term:e}:{}),fetch(t).then((t=>t.ok?t.json().catch((t=>(console.warn("List Ajax Load Error - Invalid JSON returned",t),Promise.reject(t)))):(console.error("List Ajax Load Error - Connection Error: "+t.status,t.statusText),Promise.reject(t)))).catch((t=>(console.error("List Ajax Load Error - Connection Error: ",t),Promise.reject(t))))}_uniqueColumnValues(t){var e,n={},i=this.table.getData(this.params.valuesLookup);return(e=t?this.table.columnManager.getColumnByField(t):this.cell.getColumn()._getSelf())?i.forEach((t=>{var i=e.getFieldValue(t);null!=i&&""!==i&&(n[i]=!0)})):(console.warn("unable to find matching column to create select lookup list:",t),n=[]),Object.keys(n)}_parseList(t){var e=[];return Array.isArray(t)||(t=Object.entries(t).map((([t,e])=>({label:e,value:t})))),t.forEach((t=>{"object"!=typeof t&&(t={label:t,value:t}),this._parseListItem(t,e,0)})),!this.currentItems.length&&this.params.freetext&&(this.input.value=this.initialValues,this.typing=!0,this.lastAction="typing"),this.data=e,e}_parseListItem(t,e,n){var i={};t.options?i=this._parseListGroup(t,n+1):(i={label:t.label,value:t.value,itemParams:t.itemParams,elementAttributes:t.elementAttributes,element:!1,selected:!1,visible:!0,level:n,original:t},this.initialValues&&this.initialValues.indexOf(t.value)>-1&&this._chooseItem(i,!0)),e.push(i)}_parseListGroup(t,e){var n={label:t.label,group:!0,itemParams:t.itemParams,elementAttributes:t.elementAttributes,element:!1,visible:!0,level:e,options:[],original:t};return t.options.forEach((t=>{this._parseListItem(t,n.options,e)})),n}_sortOptions(t){var e;return this.params.sort&&(e="function"==typeof this.params.sort?this.params.sort:this._defaultSortFunction.bind(this),this._sortGroup(e,t)),t}_sortGroup(t,e){e.sort(((e,n)=>t(e.label,n.label,e.value,n.value,e.original,n.original))),e.forEach((e=>{e.group&&this._sortGroup(t,e.options)}))}_defaultSortFunction(t,e){var n,i,o,r,a,l=0,s=/(\d+)|(\D+)/g,u=/\d/,h=0;if("desc"===this.params.sort&&([t,e]=[e,t]),t||0===t){if(e||0===e){if(isFinite(t)&&isFinite(e))return t-e;if((n=String(t).toLowerCase())===(i=String(e).toLowerCase()))return 0;if(!u.test(n)||!u.test(i))return n>i?1:-1;for(n=n.match(s),i=i.match(s),a=n.length>i.length?i.length:n.length;l<a;)if((o=n[l])!==(r=i[l++]))return isFinite(o)&&isFinite(r)?("0"===o.charAt(0)&&(o="."+o),"0"===r.charAt(0)&&(r="."+r),o-r):o>r?1:-1;return n.length>i.length}h=1}else h=e||0===e?-1:0;return h}_filterOptions(){var t=this.params.filterFunc||this._defaultFilterFunc,e=this.input.value;return e?(this.filtered=!0,this.data.forEach((n=>{this._filterItem(t,e,n)}))):this.filtered=!1,this.data}_filterItem(t,e,n){var i=!1;return n.group?(n.options.forEach((n=>{this._filterItem(t,e,n)&&(i=!0)})),n.visible=i):n.visible=t(e,n.label,n.value,n.original),n.visible}_defaultFilterFunc(t,e,n,i){return t=String(t).toLowerCase(),null!=e&&(String(e).toLowerCase().indexOf(t)>-1||String(n).toLowerCase().indexOf(t)>-1)}_clearList(){for(;this.listEl.firstChild;)this.listEl.removeChild(this.listEl.firstChild);this.displayItems=[]}_buildList(t){this._clearList(),t.forEach((t=>{this._buildItem(t)})),this.displayItems.length||this._addPlaceholder(this.params.placeholderEmpty)}_buildItem(t){var e,n=t.element;if(!this.filtered||t.visible){if(!n){if((n=document.createElement("div")).tabIndex=0,(e=this.params.itemFormatter?this.params.itemFormatter(t.label,t.value,t.original,n):t.label)instanceof HTMLElement?n.appendChild(e):n.innerHTML=e,t.group?n.classList.add("tabulator-edit-list-group"):n.classList.add("tabulator-edit-list-item"),n.classList.add("tabulator-edit-list-group-level-"+t.level),t.elementAttributes&&"object"==typeof t.elementAttributes)for(let e in t.elementAttributes)"+"==e.charAt(0)?(e=e.slice(1),n.setAttribute(e,this.input.getAttribute(e)+t.elementAttributes["+"+e])):n.setAttribute(e,t.elementAttributes[e]);t.group?n.addEventListener("click",this._groupClick.bind(this,t)):n.addEventListener("click",this._itemClick.bind(this,t)),n.addEventListener("mousedown",this._preventBlur.bind(this)),t.element=n}this._styleItem(t),this.listEl.appendChild(n),t.group?t.options.forEach((t=>{this._buildItem(t)})):this.displayItems.push(t)}}_showList(){var t=this.popup&&this.popup.isVisible();if(this.input.parentNode){if(this.params.autocomplete&&""===this.input.value&&!this.params.listOnEmpty)return void(this.popup&&this.popup.hide(!0));this._setListWidth(),this.popup||(this.popup=this.edit.popup(this.listEl)),this.popup.show(this.cell.getElement(),"bottom"),t||setTimeout((()=>{this.popup.hideOnBlur(this._resolveValue.bind(this,!0))}),10)}}_styleItem(t){t&&t.element&&(t.selected?t.element.classList.add("active"):t.element.classList.remove("active"))}_itemClick(t,e){e.stopPropagation(),this._chooseItem(t)}_groupClick(t,e){e.stopPropagation()}_cancel(){this.popup.hide(!0),this.actions.cancel()}_clearChoices(){this.typing=!0,this.currentItems.forEach((t=>{t.selected=!1,this._styleItem(t)})),this.currentItems=[],this.focusedItem=null}_chooseItem(t,e){var n;this.typing=!1,this.params.multiselect?((n=this.currentItems.indexOf(t))>-1?(this.currentItems.splice(n,1),t.selected=!1):(this.currentItems.push(t),t.selected=!0),this.input.value=this.currentItems.map((t=>t.label)).join(","),this._styleItem(t)):(this.currentItems=[t],t.selected=!0,this.input.value=t.label,this._styleItem(t),e||this._resolveValue()),this._focusItem(t)}_resolveValue(t){var e,n;if(this.popup&&this.popup.hide(!0),this.params.multiselect)e=this.currentItems.map((t=>t.value));else if(t&&this.params.autocomplete&&this.typing){if(!(this.params.freetext||this.params.allowEmpty&&""===this.input.value))return void this.actions.cancel();e=this.input.value}else e=this.currentItems[0]?this.currentItems[0].value:null==(n=Array.isArray(this.initialValues)?this.initialValues[0]:this.initialValues)||""===n?n:this.params.emptyValue;""===e&&(e=this.params.emptyValue),this.actions.success(e),this.isFilter&&(this.initialValues=e&&!Array.isArray(e)?[e]:e,this.currentItems=[])}}var q={input:function(t,e,n,i,o){var r=t.getValue(),a=document.createElement("input");if(a.setAttribute("type",o.search?"search":"text"),a.style.padding="4px",a.style.width="100%",a.style.boxSizing="border-box",o.elementAttributes&&"object"==typeof o.elementAttributes)for(let t in o.elementAttributes)"+"==t.charAt(0)?(t=t.slice(1),a.setAttribute(t,a.getAttribute(t)+o.elementAttributes["+"+t])):a.setAttribute(t,o.elementAttributes[t]);function l(t){null==r&&""!==a.value||a.value!==r?n(a.value)&&(r=a.value):i()}return a.value=void 0!==r?r:"",e((function(){"cell"===t.getType()&&(a.focus({preventScroll:!0}),a.style.height="100%",o.selectContents&&a.select())})),a.addEventListener("change",l),a.addEventListener("blur",l),a.addEventListener("keydown",(function(t){switch(t.keyCode){case 13:l();break;case 27:i();break;case 35:case 36:t.stopPropagation()}})),o.mask&&G(a,o),a},textarea:function(t,e,n,i,o){var r=t.getValue(),a=o.verticalNavigation||"hybrid",l=String(null!=r?r:""),s=document.createElement("textarea"),u=0;if(s.style.display="block",s.style.padding="2px",s.style.height="100%",s.style.width="100%",s.style.boxSizing="border-box",s.style.whiteSpace="pre-wrap",s.style.resize="none",o.elementAttributes&&"object"==typeof o.elementAttributes)for(let t in o.elementAttributes)"+"==t.charAt(0)?(t=t.slice(1),s.setAttribute(t,s.getAttribute(t)+o.elementAttributes["+"+t])):s.setAttribute(t,o.elementAttributes[t]);function h(e){null==r&&""!==s.value||s.value!==r?(n(s.value)&&(r=s.value),setTimeout((function(){t.getRow().normalizeHeight()}),300)):i()}return s.value=l,e((function(){"cell"===t.getType()&&(s.focus({preventScroll:!0}),s.style.height="100%",s.scrollHeight,s.style.height=s.scrollHeight+"px",t.getRow().normalizeHeight(),o.selectContents&&s.select())})),s.addEventListener("change",h),s.addEventListener("blur",h),s.addEventListener("keyup",(function(){s.style.height="";var e=s.scrollHeight;s.style.height=e+"px",e!=u&&(u=e,t.getRow().normalizeHeight())})),s.addEventListener("keydown",(function(t){switch(t.keyCode){case 13:t.shiftKey&&o.shiftEnterSubmit&&h();break;case 27:i();break;case 38:("editor"==a||"hybrid"==a&&s.selectionStart)&&(t.stopImmediatePropagation(),t.stopPropagation());break;case 40:("editor"==a||"hybrid"==a&&s.selectionStart!==s.value.length)&&(t.stopImmediatePropagation(),t.stopPropagation());break;case 35:case 36:t.stopPropagation()}})),o.mask&&G(s,o),s},number:function(t,e,n,i,o){var r=t.getValue(),a=o.verticalNavigation||"editor",l=document.createElement("input");if(l.setAttribute("type","number"),void 0!==o.max&&l.setAttribute("max",o.max),void 0!==o.min&&l.setAttribute("min",o.min),void 0!==o.step&&l.setAttribute("step",o.step),l.style.padding="4px",l.style.width="100%",l.style.boxSizing="border-box",o.elementAttributes&&"object"==typeof o.elementAttributes)for(let t in o.elementAttributes)"+"==t.charAt(0)?(t=t.slice(1),l.setAttribute(t,l.getAttribute(t)+o.elementAttributes["+"+t])):l.setAttribute(t,o.elementAttributes[t]);l.value=r;var s=function(t){u()};function u(){var t=l.value;isNaN(t)||""===t||(t=Number(t)),t!==r?n(t)&&(r=t):i()}return e((function(){"cell"===t.getType()&&(l.removeEventListener("blur",s),l.focus({preventScroll:!0}),l.style.height="100%",l.addEventListener("blur",s),o.selectContents&&l.select())})),l.addEventListener("keydown",(function(t){switch(t.keyCode){case 13:u();break;case 27:i();break;case 38:case 40:"editor"==a&&(t.stopImmediatePropagation(),t.stopPropagation());break;case 35:case 36:t.stopPropagation()}})),o.mask&&G(l,o),l},range:function(t,e,n,i,o){var r=t.getValue(),a=document.createElement("input");if(a.setAttribute("type","range"),void 0!==o.max&&a.setAttribute("max",o.max),void 0!==o.min&&a.setAttribute("min",o.min),void 0!==o.step&&a.setAttribute("step",o.step),a.style.padding="4px",a.style.width="100%",a.style.boxSizing="border-box",o.elementAttributes&&"object"==typeof o.elementAttributes)for(let t in o.elementAttributes)"+"==t.charAt(0)?(t=t.slice(1),a.setAttribute(t,a.getAttribute(t)+o.elementAttributes["+"+t])):a.setAttribute(t,o.elementAttributes[t]);function l(){var t=a.value;isNaN(t)||""===t||(t=Number(t)),t!=r?n(t)&&(r=t):i()}return a.value=r,e((function(){"cell"===t.getType()&&(a.focus({preventScroll:!0}),a.style.height="100%")})),a.addEventListener("blur",(function(t){l()})),a.addEventListener("keydown",(function(t){switch(t.keyCode){case 13:l();break;case 27:i()}})),a},date:function(t,e,n,i,o){var r=o.format,a=o.verticalNavigation||"editor",l=r?window.DateTime||luxon.DateTime:null,s=t.getValue(),u=document.createElement("input");function h(t){return(l.isDateTime(t)?t:"iso"===r?l.fromISO(String(t)):l.fromFormat(String(t),r)).toFormat("yyyy-MM-dd")}if(u.type="date",u.style.padding="4px",u.style.width="100%",u.style.boxSizing="border-box",o.max&&u.setAttribute("max",r?h(o.max):o.max),o.min&&u.setAttribute("min",r?h(o.min):o.min),o.elementAttributes&&"object"==typeof o.elementAttributes)for(let t in o.elementAttributes)"+"==t.charAt(0)?(t=t.slice(1),u.setAttribute(t,u.getAttribute(t)+o.elementAttributes["+"+t])):u.setAttribute(t,o.elementAttributes[t]);function c(){var t,e=u.value;if(null==s&&""!==e||e!==s){if(e&&r)switch(t=l.fromFormat(String(e),"yyyy-MM-dd"),r){case!0:e=t;break;case"iso":e=t.toISO();break;default:e=t.toFormat(r)}n(e)&&(s=u.value)}else i()}return s=void 0!==s?s:"",r&&(l?s=h(s):console.error("Editor Error - 'date' editor 'format' param is dependant on luxon.js")),u.value=s,e((function(){"cell"===t.getType()&&(u.focus({preventScroll:!0}),u.style.height="100%",o.selectContents&&u.select())})),u.addEventListener("blur",(function(t){(t.relatedTarget||t.rangeParent||t.explicitOriginalTarget!==u)&&c()})),u.addEventListener("keydown",(function(t){switch(t.keyCode){case 13:c();break;case 27:i();break;case 35:case 36:t.stopPropagation();break;case 38:case 40:"editor"==a&&(t.stopImmediatePropagation(),t.stopPropagation())}})),u},time:function(t,e,n,i,o){var r,a=o.format,l=o.verticalNavigation||"editor",s=a?window.DateTime||luxon.DateTime:null,u=t.getValue(),h=document.createElement("input");if(h.type="time",h.style.padding="4px",h.style.width="100%",h.style.boxSizing="border-box",o.elementAttributes&&"object"==typeof o.elementAttributes)for(let t in o.elementAttributes)"+"==t.charAt(0)?(t=t.slice(1),h.setAttribute(t,h.getAttribute(t)+o.elementAttributes["+"+t])):h.setAttribute(t,o.elementAttributes[t]);function c(){var t,e=h.value;if(null==u&&""!==e||e!==u){if(e&&a)switch(t=s.fromFormat(String(e),"hh:mm"),a){case!0:e=t;break;case"iso":e=t.toISO();break;default:e=t.toFormat(a)}n(e)&&(u=h.value)}else i()}return u=void 0!==u?u:"",a&&(s?(r=s.isDateTime(u)?u:"iso"===a?s.fromISO(String(u)):s.fromFormat(String(u),a),u=r.toFormat("hh:mm")):console.error("Editor Error - 'date' editor 'format' param is dependant on luxon.js")),h.value=u,e((function(){"cell"==t.getType()&&(h.focus({preventScroll:!0}),h.style.height="100%",o.selectContents&&h.select())})),h.addEventListener("blur",(function(t){(t.relatedTarget||t.rangeParent||t.explicitOriginalTarget!==h)&&c()})),h.addEventListener("keydown",(function(t){switch(t.keyCode){case 13:c();break;case 27:i();break;case 35:case 36:t.stopPropagation();break;case 38:case 40:"editor"==l&&(t.stopImmediatePropagation(),t.stopPropagation())}})),h},datetime:function(t,e,n,i,o){var r,a=o.format,l=o.verticalNavigation||"editor",s=a?window.DateTime||luxon.DateTime:null,u=t.getValue(),h=document.createElement("input");if(h.type="datetime-local",h.style.padding="4px",h.style.width="100%",h.style.boxSizing="border-box",o.elementAttributes&&"object"==typeof o.elementAttributes)for(let t in o.elementAttributes)"+"==t.charAt(0)?(t=t.slice(1),h.setAttribute(t,h.getAttribute(t)+o.elementAttributes["+"+t])):h.setAttribute(t,o.elementAttributes[t]);function c(){var t,e=h.value;if(null==u&&""!==e||e!==u){if(e&&a)switch(t=s.fromISO(String(e)),a){case!0:e=t;break;case"iso":e=t.toISO();break;default:e=t.toFormat(a)}n(e)&&(u=h.value)}else i()}return u=void 0!==u?u:"",a&&(s?(r=s.isDateTime(u)?u:"iso"===a?s.fromISO(String(u)):s.fromFormat(String(u),a),u=r.toFormat("yyyy-MM-dd")+"T"+r.toFormat("hh:mm")):console.error("Editor Error - 'date' editor 'format' param is dependant on luxon.js")),h.value=u,e((function(){"cell"===t.getType()&&(h.focus({preventScroll:!0}),h.style.height="100%",o.selectContents&&h.select())})),h.addEventListener("blur",(function(t){(t.relatedTarget||t.rangeParent||t.explicitOriginalTarget!==h)&&c()})),h.addEventListener("keydown",(function(t){switch(t.keyCode){case 13:c();break;case 27:i();break;case 35:case 36:t.stopPropagation();break;case 38:case 40:"editor"==l&&(t.stopImmediatePropagation(),t.stopPropagation())}})),h},select:function(t,e,n,i,o){return this.deprecationMsg("The select editor has been deprecated, please use the new list editor"),new U(this,t,e,n,i,o).input},list:function(t,e,n,i,o){return new U(this,t,e,n,i,o).input},autocomplete:function(t,e,n,i,o){return this.deprecationMsg("The autocomplete editor has been deprecated, please use the new list editor with the 'autocomplete' editorParam"),o.autocomplete=!0,new U(this,t,e,n,i,o).input},star:function(t,e,n,i,o){var r=this,a=t.getElement(),l=t.getValue(),s=a.getElementsByTagName("svg").length||5,u=a.getElementsByTagName("svg")[0]?a.getElementsByTagName("svg")[0].getAttribute("width"):14,h=[],c=document.createElement("div"),d=document.createElementNS("http://www.w3.org/2000/svg","svg");function p(t){h.forEach((function(e,n){n<t?("ie"==r.table.browser?e.setAttribute("class","tabulator-star-active"):e.classList.replace("tabulator-star-inactive","tabulator-star-active"),e.innerHTML='<polygon fill="#488CE9" stroke="#014AAE" stroke-width="37.6152" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" points="259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 "/>'):("ie"==r.table.browser?e.setAttribute("class","tabulator-star-inactive"):e.classList.replace("tabulator-star-active","tabulator-star-inactive"),e.innerHTML='<polygon fill="#010155" stroke="#686868" stroke-width="37.6152" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" points="259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 "/>')}))}function b(t){var e=document.createElement("span"),i=d.cloneNode(!0);h.push(i),e.addEventListener("mouseenter",(function(e){e.stopPropagation(),e.stopImmediatePropagation(),p(t)})),e.addEventListener("mousemove",(function(t){t.stopPropagation(),t.stopImmediatePropagation()})),e.addEventListener("click",(function(e){e.stopPropagation(),e.stopImmediatePropagation(),n(t),a.blur()})),e.appendChild(i),c.appendChild(e)}function m(t){l=t,p(t)}if(a.style.whiteSpace="nowrap",a.style.overflow="hidden",a.style.textOverflow="ellipsis",c.style.verticalAlign="middle",c.style.display="inline-block",c.style.padding="4px",d.setAttribute("width",u),d.setAttribute("height",u),d.setAttribute("viewBox","0 0 512 512"),d.setAttribute("xml:space","preserve"),d.style.padding="0 1px",o.elementAttributes&&"object"==typeof o.elementAttributes)for(let t in o.elementAttributes)"+"==t.charAt(0)?(t=t.slice(1),c.setAttribute(t,c.getAttribute(t)+o.elementAttributes["+"+t])):c.setAttribute(t,o.elementAttributes[t]);for(var g=1;g<=s;g++)b(g);return p(l=Math.min(parseInt(l),s)),c.addEventListener("mousemove",(function(t){p(0)})),c.addEventListener("click",(function(t){n(0)})),a.addEventListener("blur",(function(t){i()})),a.addEventListener("keydown",(function(t){switch(t.keyCode){case 39:m(l+1);break;case 37:m(l-1);break;case 13:n(l);break;case 27:i()}})),c},progress:function(t,e,n,i,o){var r,a,l=t.getElement(),s=void 0===o.max?l.getElementsByTagName("div")[0]&&l.getElementsByTagName("div")[0].getAttribute("max")||100:o.max,u=void 0===o.min?l.getElementsByTagName("div")[0]&&l.getElementsByTagName("div")[0].getAttribute("min")||0:o.min,h=(s-u)/100,c=t.getValue()||0,d=document.createElement("div"),p=document.createElement("div");function b(){var t=window.getComputedStyle(l,null),e=h*Math.round(p.offsetWidth/((l.clientWidth-parseInt(t.getPropertyValue("padding-left"))-parseInt(t.getPropertyValue("padding-right")))/100))+u;n(e),l.setAttribute("aria-valuenow",e),l.setAttribute("aria-label",c)}if(d.style.position="absolute",d.style.right="0",d.style.top="0",d.style.bottom="0",d.style.width="5px",d.classList.add("tabulator-progress-handle"),p.style.display="inline-block",p.style.position="relative",p.style.height="100%",p.style.backgroundColor="#488CE9",p.style.maxWidth="100%",p.style.minWidth="0%",o.elementAttributes&&"object"==typeof o.elementAttributes)for(let t in o.elementAttributes)"+"==t.charAt(0)?(t=t.slice(1),p.setAttribute(t,p.getAttribute(t)+o.elementAttributes["+"+t])):p.setAttribute(t,o.elementAttributes[t]);return l.style.padding="4px 4px",c=Math.min(parseFloat(c),s),c=Math.max(parseFloat(c),u),c=Math.round((c-u)/h),p.style.width=c+"%",l.setAttribute("aria-valuemin",u),l.setAttribute("aria-valuemax",s),p.appendChild(d),d.addEventListener("mousedown",(function(t){r=t.screenX,a=p.offsetWidth})),d.addEventListener("mouseover",(function(){d.style.cursor="ew-resize"})),l.addEventListener("mousemove",(function(t){r&&(p.style.width=a+t.screenX-r+"px")})),l.addEventListener("mouseup",(function(t){r&&(t.stopPropagation(),t.stopImmediatePropagation(),r=!1,a=!1,b())})),l.addEventListener("keydown",(function(t){switch(t.keyCode){case 39:t.preventDefault(),p.style.width=p.clientWidth+l.clientWidth/100+"px";break;case 37:t.preventDefault(),p.style.width=p.clientWidth-l.clientWidth/100+"px";break;case 9:case 13:b();break;case 27:i()}})),l.addEventListener("blur",(function(){i()})),p},tickCross:function(t,e,n,i,o){var r=t.getValue(),a=document.createElement("input"),l=o.tristate,s=void 0===o.indeterminateValue?null:o.indeterminateValue,u=!1,h=Object.keys(o).includes("trueValue"),c=Object.keys(o).includes("falseValue");if(a.setAttribute("type","checkbox"),a.style.marginTop="5px",a.style.boxSizing="border-box",o.elementAttributes&&"object"==typeof o.elementAttributes)for(let t in o.elementAttributes)"+"==t.charAt(0)?(t=t.slice(1),a.setAttribute(t,a.getAttribute(t)+o.elementAttributes["+"+t])):a.setAttribute(t,o.elementAttributes[t]);function d(t){var e=a.checked;return h&&e?e=o.trueValue:c&&!e&&(e=o.falseValue),l?t?u?s:e:a.checked&&!u?(a.checked=!1,a.indeterminate=!0,u=!0,s):(u=!1,e):e}return a.value=r,!l||void 0!==r&&r!==s&&""!==r||(u=!0,a.indeterminate=!0),"firefox"!=this.table.browser&&"safari"!=this.table.browser&&e((function(){"cell"===t.getType()&&a.focus({preventScroll:!0})})),a.checked=h?r===o.trueValue:!0===r||"true"===r||"True"===r||1===r,a.addEventListener("change",(function(t){n(d())})),a.addEventListener("blur",(function(t){n(d(!0))})),a.addEventListener("keydown",(function(t){13==t.keyCode&&n(d()),27==t.keyCode&&i()})),a}};class Y extends E{constructor(t){super(t),this.currentCell=!1,this.mouseClick=!1,this.recursionBlock=!1,this.invalidEdit=!1,this.editedCells=[],this.editors=Y.editors,this.registerColumnOption("editable"),this.registerColumnOption("editor"),this.registerColumnOption("editorParams"),this.registerColumnOption("cellEditing"),this.registerColumnOption("cellEdited"),this.registerColumnOption("cellEditCancelled"),this.registerTableFunction("getEditedCells",this.getEditedCells.bind(this)),this.registerTableFunction("clearCellEdited",this.clearCellEdited.bind(this)),this.registerTableFunction("navigatePrev",this.navigatePrev.bind(this)),this.registerTableFunction("navigateNext",this.navigateNext.bind(this)),this.registerTableFunction("navigateLeft",this.navigateLeft.bind(this)),this.registerTableFunction("navigateRight",this.navigateRight.bind(this)),this.registerTableFunction("navigateUp",this.navigateUp.bind(this)),this.registerTableFunction("navigateDown",this.navigateDown.bind(this)),this.registerComponentFunction("cell","isEdited",this.cellIsEdited.bind(this)),this.registerComponentFunction("cell","clearEdited",this.clearEdited.bind(this)),this.registerComponentFunction("cell","edit",this.editCell.bind(this)),this.registerComponentFunction("cell","cancelEdit",this.cellCancelEdit.bind(this)),this.registerComponentFunction("cell","navigatePrev",this.navigatePrev.bind(this)),this.registerComponentFunction("cell","navigateNext",this.navigateNext.bind(this)),this.registerComponentFunction("cell","navigateLeft",this.navigateLeft.bind(this)),this.registerComponentFunction("cell","navigateRight",this.navigateRight.bind(this)),this.registerComponentFunction("cell","navigateUp",this.navigateUp.bind(this)),this.registerComponentFunction("cell","navigateDown",this.navigateDown.bind(this))}initialize(){this.subscribe("cell-init",this.bindEditor.bind(this)),this.subscribe("cell-delete",this.clearEdited.bind(this)),this.subscribe("cell-value-changed",this.updateCellClass.bind(this)),this.subscribe("column-layout",this.initializeColumnCheck.bind(this)),this.subscribe("column-delete",this.columnDeleteCheck.bind(this)),this.subscribe("row-deleting",this.rowDeleteCheck.bind(this)),this.subscribe("row-layout",this.rowEditableCheck.bind(this)),this.subscribe("data-refreshing",this.cancelEdit.bind(this)),this.subscribe("keybinding-nav-prev",this.navigatePrev.bind(this,void 0)),this.subscribe("keybinding-nav-next",this.keybindingNavigateNext.bind(this)),this.subscribe("keybinding-nav-left",this.navigateLeft.bind(this,void 0)),this.subscribe("keybinding-nav-right",this.navigateRight.bind(this,void 0)),this.subscribe("keybinding-nav-up",this.navigateUp.bind(this,void 0)),this.subscribe("keybinding-nav-down",this.navigateDown.bind(this,void 0))}keybindingNavigateNext(t){var e=this.currentCell,n=this.options("tabEndNewRow");e&&(this.navigateNext(e,t)||n&&(e.getElement().firstChild.blur(),(n=!0===n?this.table.addRow({}):"function"==typeof n?this.table.addRow(n(e.row.getComponent())):this.table.addRow(Object.assign({},n))).then((()=>{setTimeout((()=>{e.getComponent().navigateNext()}))}))))}cellIsEdited(t){return!!t.modules.edit&&t.modules.edit.edited}cellCancelEdit(t){t===this.currentCell?this.table.modules.edit.cancelEdit():console.warn("Cancel Editor Error - This cell is not currently being edited ")}updateCellClass(t){this.allowEdit(t)?t.getElement().classList.add("tabulator-editable"):t.getElement().classList.remove("tabulator-editable")}clearCellEdited(t){t||(t=this.table.modules.edit.getEditedCells()),Array.isArray(t)||(t=[t]),t.forEach((t=>{this.table.modules.edit.clearEdited(t._getSelf())}))}navigatePrev(t=this.currentCell,e){var n,i;if(t){if(e&&e.preventDefault(),n=this.navigateLeft())return!0;if((i=this.table.rowManager.prevDisplayRow(t.row,!0))&&(n=this.findPrevEditableCell(i,i.cells.length)))return n.getComponent().edit(),!0}return!1}navigateNext(t=this.currentCell,e){var n,i;if(t){if(e&&e.preventDefault(),n=this.navigateRight())return!0;if((i=this.table.rowManager.nextDisplayRow(t.row,!0))&&(n=this.findNextEditableCell(i,-1)))return n.getComponent().edit(),!0}return!1}navigateLeft(t=this.currentCell,e){var n,i;return!!(t&&(e&&e.preventDefault(),n=t.getIndex(),i=this.findPrevEditableCell(t.row,n)))&&(i.getComponent().edit(),!0)}navigateRight(t=this.currentCell,e){var n,i;return!!(t&&(e&&e.preventDefault(),n=t.getIndex(),i=this.findNextEditableCell(t.row,n)))&&(i.getComponent().edit(),!0)}navigateUp(t=this.currentCell,e){var n,i;return!!(t&&(e&&e.preventDefault(),n=t.getIndex(),i=this.table.rowManager.prevDisplayRow(t.row,!0)))&&(i.cells[n].getComponent().edit(),!0)}navigateDown(t=this.currentCell,e){var n,i;return!!(t&&(e&&e.preventDefault(),n=t.getIndex(),i=this.table.rowManager.nextDisplayRow(t.row,!0)))&&(i.cells[n].getComponent().edit(),!0)}findNextEditableCell(t,e){var n=!1;if(e<t.cells.length-1)for(var i=e+1;i<t.cells.length;i++){let e=t.cells[i];if(e.column.modules.edit&&w.elVisible(e.getElement())&&this.allowEdit(e)){n=e;break}}return n}findPrevEditableCell(t,e){var n=!1;if(e>0)for(var i=e-1;i>=0;i--){let e=t.cells[i];if(e.column.modules.edit&&w.elVisible(e.getElement())&&this.allowEdit(e)){n=e;break}}return n}initializeColumnCheck(t){void 0!==t.definition.editor&&this.initializeColumn(t)}columnDeleteCheck(t){this.currentCell&&this.currentCell.column===t&&this.cancelEdit()}rowDeleteCheck(t){this.currentCell&&this.currentCell.row===t&&this.cancelEdit()}rowEditableCheck(t){t.getCells().forEach((t=>{t.column.modules.edit&&"function"==typeof t.column.modules.edit.check&&this.updateCellClass(t)}))}initializeColumn(t){var e={editor:!1,blocked:!1,check:t.definition.editable,params:t.definition.editorParams||{}};switch(typeof t.definition.editor){case"string":this.editors[t.definition.editor]?e.editor=this.editors[t.definition.editor]:console.warn("Editor Error - No such editor found: ",t.definition.editor);break;case"function":e.editor=t.definition.editor;break;case"boolean":!0===t.definition.editor&&("function"!=typeof t.definition.formatter?this.editors[t.definition.formatter]?e.editor=this.editors[t.definition.formatter]:e.editor=this.editors.input:console.warn("Editor Error - Cannot auto lookup editor for a custom formatter: ",t.definition.formatter))}e.editor&&(t.modules.edit=e)}getCurrentCell(){return!!this.currentCell&&this.currentCell.getComponent()}clearEditor(t){var e,n=this.currentCell;if(this.invalidEdit=!1,n){for(this.currentCell=!1,e=n.getElement(),this.dispatch("edit-editor-clear",n,t),e.classList.remove("tabulator-editing");e.firstChild;)e.removeChild(e.firstChild);n.row.getElement().classList.remove("tabulator-editing"),n.table.element.classList.remove("tabulator-editing")}}cancelEdit(){if(this.currentCell){var t=this.currentCell,e=this.currentCell.getComponent();this.clearEditor(!0),t.setValueActual(t.getValue()),t.cellRendered(),("textarea"==t.column.definition.editor||t.column.definition.variableHeight)&&t.row.normalizeHeight(!0),t.column.definition.cellEditCancelled&&t.column.definition.cellEditCancelled.call(this.table,e),this.dispatch("edit-cancelled",t),this.dispatchExternal("cellEditCancelled",e)}}bindEditor(t){if(t.column.modules.edit){var e=this,n=t.getElement(!0);this.updateCellClass(t),n.setAttribute("tabindex",0),n.addEventListener("click",(function(t){n.classList.contains("tabulator-editing")||n.focus({preventScroll:!0})})),n.addEventListener("mousedown",(function(t){2===t.button?t.preventDefault():e.mouseClick=!0})),n.addEventListener("focus",(function(n){e.recursionBlock||e.edit(t,n,!1)}))}}focusCellNoEvent(t,e){this.recursionBlock=!0,e&&"ie"===this.table.browser||t.getElement().focus({preventScroll:!0}),this.recursionBlock=!1}editCell(t,e){this.focusCellNoEvent(t),this.edit(t,!1,e)}focusScrollAdjust(t){if("virtual"==this.table.rowManager.getRenderMode()){var e=this.table.rowManager.element.scrollTop,n=this.table.rowManager.element.clientHeight+this.table.rowManager.element.scrollTop,i=t.row.getElement();i.offsetTop<e?this.table.rowManager.element.scrollTop-=e-i.offsetTop:i.offsetTop+i.offsetHeight>n&&(this.table.rowManager.element.scrollTop+=i.offsetTop+i.offsetHeight-n);var o=this.table.rowManager.element.scrollLeft,r=this.table.rowManager.element.clientWidth+this.table.rowManager.element.scrollLeft,a=t.getElement();this.table.modExists("frozenColumns")&&(o+=parseInt(this.table.modules.frozenColumns.leftMargin||0),r-=parseInt(this.table.modules.frozenColumns.rightMargin||0)),"virtual"===this.table.options.renderHorizontal&&(o-=parseInt(this.table.columnManager.renderer.vDomPadLeft),r-=parseInt(this.table.columnManager.renderer.vDomPadLeft)),a.offsetLeft<o?this.table.rowManager.element.scrollLeft-=o-a.offsetLeft:a.offsetLeft+a.offsetWidth>r&&(this.table.rowManager.element.scrollLeft+=a.offsetLeft+a.offsetWidth-r)}}allowEdit(t){var e=!!t.column.modules.edit;if(t.column.modules.edit)switch(typeof t.column.modules.edit.check){case"function":t.row.initialized&&(e=t.column.modules.edit.check(t.getComponent()));break;case"string":e=!!t.row.data[t.column.modules.edit.check];break;case"boolean":e=t.column.modules.edit.check}return e}edit(t,e,n){var i,o,r,a=this,l=function(){},s=t.getElement();if(!this.currentCell){if(t.column.modules.edit.blocked)return this.mouseClick=!1,s.blur(),!1;if(e&&e.stopPropagation(),this.allowEdit(t)||n){if(a.cancelEdit(),a.currentCell=t,this.focusScrollAdjust(t),o=t.getComponent(),this.mouseClick&&(this.mouseClick=!1,t.column.definition.cellClick&&t.column.definition.cellClick.call(this.table,e,o)),t.column.definition.cellEditing&&t.column.definition.cellEditing.call(this.table,o),this.dispatch("cell-editing",t),this.dispatchExternal("cellEditing",o),r="function"==typeof t.column.modules.edit.params?t.column.modules.edit.params(o):t.column.modules.edit.params,i=t.column.modules.edit.editor.call(a,o,(function(t){l=t}),(function(e){if(a.currentCell===t){var n=a.chain("edit-success",[t,e],!0,!0);return!0===n||"highlight"===a.table.options.validationMode?(a.clearEditor(),t.modules.edit||(t.modules.edit={}),t.modules.edit.edited=!0,-1==a.editedCells.indexOf(t)&&a.editedCells.push(t),t.setValue(e,!0),!0===n):(a.invalidEdit=!0,a.focusCellNoEvent(t,!0),l(),!1)}}),(function(){a.currentCell===t&&a.cancelEdit()}),r),!this.currentCell||!1===i)return s.blur(),!1;if(!(i instanceof Node))return console.warn("Edit Error - Editor should return an instance of Node, the editor returned:",i),s.blur(),!1;for(s.classList.add("tabulator-editing"),t.row.getElement().classList.add("tabulator-editing"),t.table.element.classList.add("tabulator-editing");s.firstChild;)s.removeChild(s.firstChild);s.appendChild(i),l();for(var u=s.children,h=0;h<u.length;h++)u[h].addEventListener("click",(function(t){t.stopPropagation()}));return!0}return this.mouseClick=!1,s.blur(),!1}this.invalidEdit||this.currentCell===t||this.cancelEdit()}getEditedCells(){var t=[];return this.editedCells.forEach((e=>{t.push(e.getComponent())})),t}clearEdited(t){var e;t.modules.edit&&t.modules.edit.edited&&(t.modules.edit.edited=!1,this.dispatch("edit-edited-clear",t)),(e=this.editedCells.indexOf(t))>-1&&this.editedCells.splice(e,1)}}Y.moduleName="edit",Y.editors=q;class X{constructor(t,e,n,i){this.type=t,this.columns=e,this.component=n||!1,this.indent=i||0}}class K{constructor(t,e,n,i,o){this.value=t,this.component=e||!1,this.width=n,this.height=i,this.depth=o}}class J extends E{constructor(t){super(t),this.config={},this.cloneTableStyle=!0,this.colVisProp="",this.registerTableOption("htmlOutputConfig",!1),this.registerColumnOption("htmlOutput"),this.registerColumnOption("titleHtmlOutput")}initialize(){this.registerTableFunction("getHtml",this.getHtml.bind(this))}generateExportList(t,e,n,i){this.cloneTableStyle=e,this.config=t||{},this.colVisProp=i;var o=!1!==this.config.columnHeaders?this.headersToExportRows(this.generateColumnGroupHeaders()):[],r=this.bodyToExportRows(this.rowLookup(n));return o.concat(r)}generateTable(t,e,n,i){var o=this.generateExportList(t,e,n,i);return this.generateTableElement(o)}rowLookup(t){var e=[];if("function"==typeof t)t.call(this.table).forEach((t=>{(t=this.table.rowManager.findRow(t))&&e.push(t)}));else switch(t){case!0:case"visible":e=this.table.rowManager.getVisibleRows(!1,!0);break;case"all":e=this.table.rowManager.rows;break;case"selected":e=this.table.modules.selectRow.selectedRows;break;default:e=this.table.options.pagination?this.table.rowManager.getDisplayRows(this.table.rowManager.displayRows.length-2):this.table.rowManager.getDisplayRows()}return Object.assign([],e)}generateColumnGroupHeaders(){var t=[];return(!1!==this.config.columnGroups?this.table.columnManager.columns:this.table.columnManager.columnsByIndex).forEach((e=>{var n=this.processColumnGroup(e);n&&t.push(n)})),t}processColumnGroup(t){var e=t.columns,n=0,i={title:t.definition["title"+(this.colVisProp.charAt(0).toUpperCase()+this.colVisProp.slice(1))]||t.definition.title,column:t,depth:1};if(e.length){if(i.subGroups=[],i.width=0,e.forEach((t=>{var e=this.processColumnGroup(t);e&&(i.width+=e.width,i.subGroups.push(e),e.depth>n&&(n=e.depth))})),i.depth+=n,!i.width)return!1}else{if(!this.columnVisCheck(t))return!1;i.width=1}return i}columnVisCheck(t){var e=t.definition[this.colVisProp];return"function"==typeof e&&(e=e.call(this.table,t.getComponent())),!1!==e&&(t.visible||!t.visible&&e)}headersToExportRows(t){var e=[],n=0,i=[];function o(t,i){var r=n-i;if(void 0===e[i]&&(e[i]=[]),t.height=t.subGroups?1:r-t.depth+1,e[i].push(t),t.height>1)for(let n=1;n<t.height;n++)void 0===e[i+n]&&(e[i+n]=[]),e[i+n].push(!1);if(t.width>1)for(let n=1;n<t.width;n++)e[i].push(!1);t.subGroups&&t.subGroups.forEach((function(t){o(t,i+1)}))}return t.forEach((function(t){t.depth>n&&(n=t.depth)})),t.forEach((function(t){o(t,0)})),e.forEach((t=>{var e=[];t.forEach((t=>{if(t){let n=void 0===t.title?"":t.title;e.push(new K(n,t.column.getComponent(),t.width,t.height,t.depth))}else e.push(null)})),i.push(new X("header",e))})),i}bodyToExportRows(t){var e=[],n=[];return this.table.columnManager.columnsByIndex.forEach((t=>{this.columnVisCheck(t)&&e.push(t.getComponent())})),!1!==this.config.columnCalcs&&this.table.modExists("columnCalcs")&&(this.table.modules.columnCalcs.topInitialized&&t.unshift(this.table.modules.columnCalcs.topRow),this.table.modules.columnCalcs.botInitialized&&t.push(this.table.modules.columnCalcs.botRow)),(t=t.filter((t=>{switch(t.type){case"group":return!1!==this.config.rowGroups;case"calc":return!1!==this.config.columnCalcs;case"row":return!(this.table.options.dataTree&&!1===this.config.dataTree&&t.modules.dataTree.parent)}return!0}))).forEach(((t,i)=>{var o=t.getData(this.colVisProp),r=[],a=0;switch(t.type){case"group":a=t.level,r.push(new K(t.key,t.getComponent(),e.length,1));break;case"calc":case"row":e.forEach((t=>{r.push(new K(t._column.getFieldValue(o),t,1,1))})),this.table.options.dataTree&&!1!==this.config.dataTree&&(a=t.modules.dataTree.index)}n.push(new X(t.type,r,t.getComponent(),a))})),n}generateTableElement(t){var e=document.createElement("table"),n=document.createElement("thead"),i=document.createElement("tbody"),o=this.lookupTableStyles(),r=this.table.options["rowFormatter"+(this.colVisProp.charAt(0).toUpperCase()+this.colVisProp.slice(1))],a={};return a.rowFormatter=null!==r?r:this.table.options.rowFormatter,this.table.options.dataTree&&!1!==this.config.dataTree&&this.table.modExists("columnCalcs")&&(a.treeElementField=this.table.modules.dataTree.elementField),a.groupHeader=this.table.options["groupHeader"+(this.colVisProp.charAt(0).toUpperCase()+this.colVisProp.slice(1))],a.groupHeader&&!Array.isArray(a.groupHeader)&&(a.groupHeader=[a.groupHeader]),e.classList.add("tabulator-print-table"),this.mapElementStyles(this.table.columnManager.getHeadersElement(),n,["border-top","border-left","border-right","border-bottom","background-color","color","font-weight","font-family","font-size"]),t.length>1e3&&console.warn("It may take a long time to render an HTML table with more than 1000 rows"),t.forEach(((t,e)=>{let r;switch(t.type){case"header":n.appendChild(this.generateHeaderElement(t,a,o));break;case"group":i.appendChild(this.generateGroupElement(t,a,o));break;case"calc":i.appendChild(this.generateCalcElement(t,a,o));break;case"row":r=this.generateRowElement(t,a,o),this.mapElementStyles(e%2&&o.evenRow?o.evenRow:o.oddRow,r,["border-top","border-left","border-right","border-bottom","color","font-weight","font-family","font-size","background-color"]),i.appendChild(r)}})),n.innerHTML&&e.appendChild(n),e.appendChild(i),this.mapElementStyles(this.table.element,e,["border-top","border-left","border-right","border-bottom"]),e}lookupTableStyles(){var t={};return this.cloneTableStyle&&window.getComputedStyle&&(t.oddRow=this.table.element.querySelector(".tabulator-row-odd:not(.tabulator-group):not(.tabulator-calcs)"),t.evenRow=this.table.element.querySelector(".tabulator-row-even:not(.tabulator-group):not(.tabulator-calcs)"),t.calcRow=this.table.element.querySelector(".tabulator-row.tabulator-calcs"),t.firstRow=this.table.element.querySelector(".tabulator-row:not(.tabulator-group):not(.tabulator-calcs)"),t.firstGroup=this.table.element.getElementsByClassName("tabulator-group")[0],t.firstRow&&(t.styleCells=t.firstRow.getElementsByClassName("tabulator-cell"),t.firstCell=t.styleCells[0],t.lastCell=t.styleCells[t.styleCells.length-1])),t}generateHeaderElement(t,e,n){var i=document.createElement("tr");return t.columns.forEach((t=>{if(t){var e=document.createElement("th"),n=t.component._column.definition.cssClass?t.component._column.definition.cssClass.split(" "):[];e.colSpan=t.width,e.rowSpan=t.height,e.innerHTML=t.value,this.cloneTableStyle&&(e.style.boxSizing="border-box"),n.forEach((function(t){e.classList.add(t)})),this.mapElementStyles(t.component.getElement(),e,["text-align","border-top","border-left","border-right","border-bottom","background-color","color","font-weight","font-family","font-size"]),this.mapElementStyles(t.component._column.contentElement,e,["padding-top","padding-left","padding-right","padding-bottom"]),t.component._column.visible?this.mapElementStyles(t.component.getElement(),e,["width"]):t.component._column.definition.width&&(e.style.width=t.component._column.definition.width+"px"),t.component._column.parent&&this.mapElementStyles(t.component._column.parent.groupElement,e,["border-top"]),i.appendChild(e)}})),i}generateGroupElement(t,e,n){var i=document.createElement("tr"),o=document.createElement("td"),r=t.columns[0];return i.classList.add("tabulator-print-table-row"),e.groupHeader&&e.groupHeader[t.indent]?r.value=e.groupHeader[t.indent](r.value,t.component._group.getRowCount(),t.component._group.getData(),t.component):!1!==e.groupHeader&&(r.value=t.component._group.generator(r.value,t.component._group.getRowCount(),t.component._group.getData(),t.component)),o.colSpan=r.width,o.innerHTML=r.value,i.classList.add("tabulator-print-table-group"),i.classList.add("tabulator-group-level-"+t.indent),r.component.isVisible()&&i.classList.add("tabulator-group-visible"),this.mapElementStyles(n.firstGroup,i,["border-top","border-left","border-right","border-bottom","color","font-weight","font-family","font-size","background-color"]),this.mapElementStyles(n.firstGroup,o,["padding-top","padding-left","padding-right","padding-bottom"]),i.appendChild(o),i}generateCalcElement(t,e,n){var i=this.generateRowElement(t,e,n);return i.classList.add("tabulator-print-table-calcs"),this.mapElementStyles(n.calcRow,i,["border-top","border-left","border-right","border-bottom","color","font-weight","font-family","font-size","background-color"]),i}generateRowElement(t,e,n){var i=document.createElement("tr");return i.classList.add("tabulator-print-table-row"),t.columns.forEach(((o,r)=>{if(o){var a,l=document.createElement("td"),s=o.component._column,u=this.table.columnManager.findColumnIndex(s),h=o.value,c={modules:{},getValue:function(){return h},getField:function(){return s.definition.field},getElement:function(){return l},getType:function(){return"cell"},getColumn:function(){return s.getComponent()},getData:function(){return t.component.getData()},getRow:function(){return t.component},getComponent:function(){return c},column:s};if((s.definition.cssClass?s.definition.cssClass.split(" "):[]).forEach((function(t){l.classList.add(t)})),this.table.modExists("format")&&!1!==this.config.formatCells)h=this.table.modules.format.formatExportValue(c,this.colVisProp);else switch(typeof h){case"object":h=null!==h?JSON.stringify(h):"";break;case"undefined":h=""}h instanceof Node?l.appendChild(h):l.innerHTML=h,(a=n.styleCells&&n.styleCells[u]?n.styleCells[u]:n.firstCell)&&(this.mapElementStyles(a,l,["padding-top","padding-left","padding-right","padding-bottom","border-top","border-left","border-right","border-bottom","color","font-weight","font-family","font-size","text-align"]),s.definition.align&&(l.style.textAlign=s.definition.align)),this.table.options.dataTree&&!1!==this.config.dataTree&&(e.treeElementField&&e.treeElementField==s.field||!e.treeElementField&&0==r)&&(t.component._row.modules.dataTree.controlEl&&l.insertBefore(t.component._row.modules.dataTree.controlEl.cloneNode(!0),l.firstChild),t.component._row.modules.dataTree.branchEl&&l.insertBefore(t.component._row.modules.dataTree.branchEl.cloneNode(!0),l.firstChild)),i.appendChild(l),c.modules.format&&c.modules.format.renderedCallback&&c.modules.format.renderedCallback()}})),e.rowFormatter&&"row"===t.type&&!1!==this.config.formatCells&&(Object.assign(t.component).getElement=function(){return i},e.rowFormatter(t.component)),i}generateHTMLTable(t){var e=document.createElement("div");return e.appendChild(this.generateTableElement(t)),e.innerHTML}getHtml(t,e,n,i){var o=this.generateExportList(n||this.table.options.htmlOutputConfig,e,t,i||"htmlOutput");return this.generateHTMLTable(o)}mapElementStyles(t,e,n){if(this.cloneTableStyle&&t&&e){var i={"background-color":"backgroundColor",color:"fontColor",width:"width","font-weight":"fontWeight","font-family":"fontFamily","font-size":"fontSize","text-align":"textAlign","border-top":"borderTop","border-left":"borderLeft","border-right":"borderRight","border-bottom":"borderBottom","padding-top":"paddingTop","padding-left":"paddingLeft","padding-right":"paddingRight","padding-bottom":"paddingBottom"};if(window.getComputedStyle){var o=window.getComputedStyle(t);n.forEach((function(t){e.style[i[t]]||(e.style[i[t]]=o.getPropertyValue(t))}))}}}}J.moduleName="export";var Z={"=":function(t,e,n,i){return e==t},"<":function(t,e,n,i){return e<t},"<=":function(t,e,n,i){return e<=t},">":function(t,e,n,i){return e>t},">=":function(t,e,n,i){return e>=t},"!=":function(t,e,n,i){return e!=t},regex:function(t,e,n,i){return"string"==typeof t&&(t=new RegExp(t)),t.test(e)},like:function(t,e,n,i){return null==t?e===t:null!=e&&String(e).toLowerCase().indexOf(t.toLowerCase())>-1},keywords:function(t,e,n,i){var o=t.toLowerCase().split(void 0===i.separator?" ":i.separator),r=String(null==e?"":e).toLowerCase(),a=[];return o.forEach((t=>{r.includes(t)&&a.push(!0)})),i.matchAll?a.length===o.length:!!a.length},starts:function(t,e,n,i){return null==t?e===t:null!=e&&String(e).toLowerCase().startsWith(t.toLowerCase())},ends:function(t,e,n,i){return null==t?e===t:null!=e&&String(e).toLowerCase().endsWith(t.toLowerCase())},in:function(t,e,n,i){return Array.isArray(t)?!t.length||t.indexOf(e)>-1:(console.warn("Filter Error - filter value is not an array:",t),!1)}};class Q extends E{constructor(t){super(t),this.filterList=[],this.headerFilters={},this.headerFilterColumns=[],this.prevHeaderFilterChangeCheck="",this.prevHeaderFilterChangeCheck="{}",this.changed=!1,this.tableInitialized=!1,this.registerTableOption("filterMode","local"),this.registerTableOption("initialFilter",!1),this.registerTableOption("initialHeaderFilter",!1),this.registerTableOption("headerFilterLiveFilterDelay",300),this.registerTableOption("placeholderHeaderFilter",!1),this.registerColumnOption("headerFilter"),this.registerColumnOption("headerFilterPlaceholder"),this.registerColumnOption("headerFilterParams"),this.registerColumnOption("headerFilterEmptyCheck"),this.registerColumnOption("headerFilterFunc"),this.registerColumnOption("headerFilterFuncParams"),this.registerColumnOption("headerFilterLiveFilter"),this.registerTableFunction("searchRows",this.searchRows.bind(this)),this.registerTableFunction("searchData",this.searchData.bind(this)),this.registerTableFunction("setFilter",this.userSetFilter.bind(this)),this.registerTableFunction("refreshFilter",this.userRefreshFilter.bind(this)),this.registerTableFunction("addFilter",this.userAddFilter.bind(this)),this.registerTableFunction("getFilters",this.getFilters.bind(this)),this.registerTableFunction("setHeaderFilterFocus",this.userSetHeaderFilterFocus.bind(this)),this.registerTableFunction("getHeaderFilterValue",this.userGetHeaderFilterValue.bind(this)),this.registerTableFunction("setHeaderFilterValue",this.userSetHeaderFilterValue.bind(this)),this.registerTableFunction("getHeaderFilters",this.getHeaderFilters.bind(this)),this.registerTableFunction("removeFilter",this.userRemoveFilter.bind(this)),this.registerTableFunction("clearFilter",this.userClearFilter.bind(this)),this.registerTableFunction("clearHeaderFilter",this.userClearHeaderFilter.bind(this)),this.registerComponentFunction("column","headerFilterFocus",this.setHeaderFilterFocus.bind(this)),this.registerComponentFunction("column","reloadHeaderFilter",this.reloadHeaderFilter.bind(this)),this.registerComponentFunction("column","getHeaderFilterValue",this.getHeaderFilterValue.bind(this)),this.registerComponentFunction("column","setHeaderFilterValue",this.setHeaderFilterValue.bind(this))}initialize(){this.subscribe("column-init",this.initializeColumnHeaderFilter.bind(this)),this.subscribe("column-width-fit-before",this.hideHeaderFilterElements.bind(this)),this.subscribe("column-width-fit-after",this.showHeaderFilterElements.bind(this)),this.subscribe("table-built",this.tableBuilt.bind(this)),this.subscribe("placeholder",this.generatePlaceholder.bind(this)),"remote"===this.table.options.filterMode&&this.subscribe("data-params",this.remoteFilterParams.bind(this)),this.registerDataHandler(this.filter.bind(this),10)}tableBuilt(){this.table.options.initialFilter&&this.setFilter(this.table.options.initialFilter),this.table.options.initialHeaderFilter&&this.table.options.initialHeaderFilter.forEach((t=>{var e=this.table.columnManager.findColumn(t.field);if(!e)return console.warn("Column Filter Error - No matching column found:",t.field),!1;this.setHeaderFilterValue(e,t.value)})),this.tableInitialized=!0}remoteFilterParams(t,e,n,i){return i.filter=this.getFilters(!0,!0),i}generatePlaceholder(t){if(this.table.options.placeholderHeaderFilter&&Object.keys(this.headerFilters).length)return this.table.options.placeholderHeaderFilter}userSetFilter(t,e,n,i){this.setFilter(t,e,n,i),this.refreshFilter()}userRefreshFilter(){this.refreshFilter()}userAddFilter(t,e,n,i){this.addFilter(t,e,n,i),this.refreshFilter()}userSetHeaderFilterFocus(t){var e=this.table.columnManager.findColumn(t);if(!e)return console.warn("Column Filter Focus Error - No matching column found:",t),!1;this.setHeaderFilterFocus(e)}userGetHeaderFilterValue(t){var e=this.table.columnManager.findColumn(t);if(e)return this.getHeaderFilterValue(e);console.warn("Column Filter Error - No matching column found:",t)}userSetHeaderFilterValue(t,e){var n=this.table.columnManager.findColumn(t);if(!n)return console.warn("Column Filter Error - No matching column found:",t),!1;this.setHeaderFilterValue(n,e)}userRemoveFilter(t,e,n){this.removeFilter(t,e,n),this.refreshFilter()}userClearFilter(t){this.clearFilter(t),this.refreshFilter()}userClearHeaderFilter(){this.clearHeaderFilter(),this.refreshFilter()}searchRows(t,e,n){return this.search("rows",t,e,n)}searchData(t,e,n){return this.search("data",t,e,n)}initializeColumnHeaderFilter(t){t.definition.headerFilter&&this.initializeColumn(t)}initializeColumn(t,e){var n=this,i=t.getField();t.modules.filter={success:function(e){var o,r="input"==t.modules.filter.tagType&&"text"==t.modules.filter.attrType||"textarea"==t.modules.filter.tagType?"partial":"match",a="",l="";if(void 0===t.modules.filter.prevSuccess||t.modules.filter.prevSuccess!==e){if(t.modules.filter.prevSuccess=e,t.modules.filter.emptyFunc(e))delete n.headerFilters[i];else{switch(t.modules.filter.value=e,typeof t.definition.headerFilterFunc){case"string":Q.filters[t.definition.headerFilterFunc]?(a=t.definition.headerFilterFunc,o=function(n){var i=t.definition.headerFilterFuncParams||{},o=t.getFieldValue(n);return i="function"==typeof i?i(e,o,n):i,Q.filters[t.definition.headerFilterFunc](e,o,n,i)}):console.warn("Header Filter Error - Matching filter function not found: ",t.definition.headerFilterFunc);break;case"function":a=o=function(n){var i=t.definition.headerFilterFuncParams||{},o=t.getFieldValue(n);return i="function"==typeof i?i(e,o,n):i,t.definition.headerFilterFunc(e,o,n,i)}}o||("partial"===r?(o=function(n){var i=t.getFieldValue(n);return null!=i&&String(i).toLowerCase().indexOf(String(e).toLowerCase())>-1},a="like"):(o=function(n){return t.getFieldValue(n)==e},a="=")),n.headerFilters[i]={value:e,func:o,type:a}}t.modules.filter.value=e,l=JSON.stringify(n.headerFilters),n.prevHeaderFilterChangeCheck!==l&&(n.prevHeaderFilterChangeCheck=l,n.trackChanges(),n.refreshFilter())}return!0},attrType:!1,tagType:!1,emptyFunc:!1},this.generateHeaderFilterElement(t)}generateHeaderFilterElement(t,e,n){var i,o,r,a,l,s,u,h,c=this,d=t.modules.filter.success,p=t.getField();if(t.modules.filter.value=e,t.modules.filter.headerElement&&t.modules.filter.headerElement.parentNode&&t.contentElement.removeChild(t.modules.filter.headerElement.parentNode),p){switch(t.modules.filter.emptyFunc=t.definition.headerFilterEmptyCheck||function(t){return!t&&0!==t},(i=document.createElement("div")).classList.add("tabulator-header-filter"),typeof t.definition.headerFilter){case"string":c.table.modules.edit.editors[t.definition.headerFilter]?(o=c.table.modules.edit.editors[t.definition.headerFilter],"tick"!==t.definition.headerFilter&&"tickCross"!==t.definition.headerFilter||t.definition.headerFilterEmptyCheck||(t.modules.filter.emptyFunc=function(t){return!0!==t&&!1!==t})):console.warn("Filter Error - Cannot build header filter, No such editor found: ",t.definition.editor);break;case"function":o=t.definition.headerFilter;break;case"boolean":t.modules.edit&&t.modules.edit.editor?o=t.modules.edit.editor:t.definition.formatter&&c.table.modules.edit.editors[t.definition.formatter]?(o=c.table.modules.edit.editors[t.definition.formatter],"tick"!==t.definition.formatter&&"tickCross"!==t.definition.formatter||t.definition.headerFilterEmptyCheck||(t.modules.filter.emptyFunc=function(t){return!0!==t&&!1!==t})):o=c.table.modules.edit.editors.input}if(o){if(a={getValue:function(){return void 0!==e?e:""},getField:function(){return t.definition.field},getElement:function(){return i},getColumn:function(){return t.getComponent()},getTable:()=>this.table,getType:()=>"header",getRow:function(){return{normalizeHeight:function(){}}}},u="function"==typeof(u=t.definition.headerFilterParams||{})?u.call(c.table,a):u,!(r=o.call(this.table.modules.edit,a,(function(t){h=t}),d,(function(){}),u)))return void console.warn("Filter Error - Cannot add filter to "+p+" column, editor returned a value of false");if(!(r instanceof Node))return void console.warn("Filter Error - Cannot add filter to "+p+" column, editor should return an instance of Node, the editor returned:",r);c.langBind("headerFilters|columns|"+t.definition.field,(function(e){r.setAttribute("placeholder",void 0!==e&&e?e:t.definition.headerFilterPlaceholder||c.langText("headerFilters|default"))})),r.addEventListener("click",(function(t){t.stopPropagation(),r.focus()})),r.addEventListener("focus",(t=>{var e=this.table.columnManager.contentsElement.scrollLeft;e!==this.table.rowManager.element.scrollLeft&&(this.table.rowManager.scrollHorizontal(e),this.table.columnManager.scrollHorizontal(e))})),l=!1,s=function(t){l&&clearTimeout(l),l=setTimeout((function(){d(r.value)}),c.table.options.headerFilterLiveFilterDelay)},t.modules.filter.headerElement=r,t.modules.filter.attrType=r.hasAttribute("type")?r.getAttribute("type").toLowerCase():"",t.modules.filter.tagType=r.tagName.toLowerCase(),!1!==t.definition.headerFilterLiveFilter&&("autocomplete"!==t.definition.headerFilter&&"tickCross"!==t.definition.headerFilter&&("autocomplete"!==t.definition.editor&&"tickCross"!==t.definition.editor||!0!==t.definition.headerFilter)&&(r.addEventListener("keyup",s),r.addEventListener("search",s),"number"==t.modules.filter.attrType&&r.addEventListener("change",(function(t){d(r.value)})),"text"==t.modules.filter.attrType&&"ie"!==this.table.browser&&r.setAttribute("type","search")),"input"!=t.modules.filter.tagType&&"select"!=t.modules.filter.tagType&&"textarea"!=t.modules.filter.tagType||r.addEventListener("mousedown",(function(t){t.stopPropagation()}))),i.appendChild(r),t.contentElement.appendChild(i),n||c.headerFilterColumns.push(t),h&&h()}}else console.warn("Filter Error - Cannot add header filter, column has no field set:",t.definition.title)}hideHeaderFilterElements(){this.headerFilterColumns.forEach((function(t){t.modules.filter&&t.modules.filter.headerElement&&(t.modules.filter.headerElement.style.display="none")}))}showHeaderFilterElements(){this.headerFilterColumns.forEach((function(t){t.modules.filter&&t.modules.filter.headerElement&&(t.modules.filter.headerElement.style.display="")}))}setHeaderFilterFocus(t){t.modules.filter&&t.modules.filter.headerElement?t.modules.filter.headerElement.focus():console.warn("Column Filter Focus Error - No header filter set on column:",t.getField())}getHeaderFilterValue(t){if(t.modules.filter&&t.modules.filter.headerElement)return t.modules.filter.value;console.warn("Column Filter Error - No header filter set on column:",t.getField())}setHeaderFilterValue(t,e){t&&(t.modules.filter&&t.modules.filter.headerElement?(this.generateHeaderFilterElement(t,e,!0),t.modules.filter.success(e)):console.warn("Column Filter Error - No header filter set on column:",t.getField()))}reloadHeaderFilter(t){t&&(t.modules.filter&&t.modules.filter.headerElement?this.generateHeaderFilterElement(t,t.modules.filter.value,!0):console.warn("Column Filter Error - No header filter set on column:",t.getField()))}refreshFilter(){this.tableInitialized&&("remote"===this.table.options.filterMode?this.reloadData(null,!1,!1):this.refreshData(!0))}trackChanges(){this.changed=!0,this.dispatch("filter-changed")}hasChanged(){var t=this.changed;return this.changed=!1,t}setFilter(t,e,n,i){this.filterList=[],Array.isArray(t)||(t=[{field:t,type:e,value:n,params:i}]),this.addFilter(t)}addFilter(t,e,n,i){var o=!1;Array.isArray(t)||(t=[{field:t,type:e,value:n,params:i}]),t.forEach((t=>{(t=this.findFilter(t))&&(this.filterList.push(t),o=!0)})),o&&this.trackChanges()}findFilter(t){var e;if(Array.isArray(t))return this.findSubFilters(t);var n=!1;return"function"==typeof t.field?n=function(e){return t.field(e,t.type||{})}:Q.filters[t.type]?n=(e=this.table.columnManager.getColumnByField(t.field))?function(n){return Q.filters[t.type](t.value,e.getFieldValue(n),n,t.params||{})}:function(e){return Q.filters[t.type](t.value,e[t.field],e,t.params||{})}:console.warn("Filter Error - No such filter type found, ignoring: ",t.type),t.func=n,!!t.func&&t}findSubFilters(t){var e=[];return t.forEach((t=>{(t=this.findFilter(t))&&e.push(t)})),!!e.length&&e}getFilters(t,e){var n=[];return t&&(n=this.getHeaderFilters()),e&&n.forEach((function(t){"function"==typeof t.type&&(t.type="function")})),n.concat(this.filtersToArray(this.filterList,e))}filtersToArray(t,e){var n=[];return t.forEach((t=>{var i;Array.isArray(t)?n.push(this.filtersToArray(t,e)):(i={field:t.field,type:t.type,value:t.value},e&&"function"==typeof i.type&&(i.type="function"),n.push(i))})),n}getHeaderFilters(){var t=[];for(var e in this.headerFilters)t.push({field:e,type:this.headerFilters[e].type,value:this.headerFilters[e].value});return t}removeFilter(t,e,n){Array.isArray(t)||(t=[{field:t,type:e,value:n}]),t.forEach((t=>{var e;(e="object"==typeof t.field?this.filterList.findIndex((e=>t===e)):this.filterList.findIndex((e=>t.field===e.field&&t.type===e.type&&t.value===e.value)))>-1?this.filterList.splice(e,1):console.warn("Filter Error - No matching filter type found, ignoring: ",t.type)})),this.trackChanges()}clearFilter(t){this.filterList=[],t&&this.clearHeaderFilter(),this.trackChanges()}clearHeaderFilter(){this.headerFilters={},this.prevHeaderFilterChangeCheck="{}",this.headerFilterColumns.forEach((t=>{void 0!==t.modules.filter.value&&delete t.modules.filter.value,t.modules.filter.prevSuccess=void 0,this.reloadHeaderFilter(t)})),this.trackChanges()}search(t,e,n,i){var o=[],r=[];return Array.isArray(e)||(e=[{field:e,type:n,value:i}]),e.forEach((t=>{(t=this.findFilter(t))&&r.push(t)})),this.table.rowManager.rows.forEach((e=>{var n=!0;r.forEach((t=>{this.filterRecurse(t,e.getData())||(n=!1)})),n&&o.push("data"===t?e.getData("data"):e.getComponent())})),o}filter(t,e){var n=[],i=[];return this.subscribedExternal("dataFiltering")&&this.dispatchExternal("dataFiltering",this.getFilters(!0)),"remote"!==this.table.options.filterMode&&(this.filterList.length||Object.keys(this.headerFilters).length)?t.forEach((t=>{this.filterRow(t)&&n.push(t)})):n=t.slice(0),this.subscribedExternal("dataFiltered")&&(n.forEach((t=>{i.push(t.getComponent())})),this.dispatchExternal("dataFiltered",this.getFilters(!0),i)),n}filterRow(t,e){var n=!0,i=t.getData();for(var o in this.filterList.forEach((t=>{this.filterRecurse(t,i)||(n=!1)})),this.headerFilters)this.headerFilters[o].func(i)||(n=!1);return n}filterRecurse(t,e){var n=!1;return Array.isArray(t)?t.forEach((t=>{this.filterRecurse(t,e)&&(n=!0)})):n=t.func(e),n}}Q.moduleName="filter",Q.filters=Z;var $={plaintext:function(t,e,n){return this.emptyToSpace(this.sanitizeHTML(t.getValue()))},html:function(t,e,n){return t.getValue()},textarea:function(t,e,n){return t.getElement().style.whiteSpace="pre-wrap",this.emptyToSpace(this.sanitizeHTML(t.getValue()))},money:function(t,e,n){var i,o,r,a,l,s=parseFloat(t.getValue()),u="",h=e.decimal||".",c=e.thousand||",",d=e.negativeSign||"-",p=e.symbol||"",b=!!e.symbolAfter,m=void 0!==e.precision?e.precision:2;if(isNaN(s))return this.emptyToSpace(this.sanitizeHTML(t.getValue()));if(s<0&&(s=Math.abs(s),u=d),i=!1!==m?s.toFixed(m):s,o=(i=String(i).split("."))[0],r=i.length>1?h+i[1]:"",!1!==e.thousand)for(a=/(\d+)(\d{3})/;a.test(o);)o=o.replace(a,"$1"+c+"$2");return l=o+r,!0===u?(l="("+l+")",b?l+p:p+l):b?u+l+p:u+p+l},link:function(t,e,n){var i,o=t.getValue(),r=e.urlPrefix||"",a=e.download,l=o,s=document.createElement("a");if(e.labelField&&(i=t.getData(),l=function t(e,n){var i=n[e.shift()];return e.length&&"object"==typeof i?t(e,i):i}(e.labelField.split(this.table.options.nestedFieldSeparator),i)),e.label)switch(typeof e.label){case"string":l=e.label;break;case"function":l=e.label(t)}if(l){if(e.urlField&&(o=(i=t.getData())[e.urlField]),e.url)switch(typeof e.url){case"string":o=e.url;break;case"function":o=e.url(t)}return s.setAttribute("href",r+o),e.target&&s.setAttribute("target",e.target),e.download&&(a="function"==typeof a?a(t):!0===a?"":a,s.setAttribute("download",a)),s.innerHTML=this.emptyToSpace(this.sanitizeHTML(l)),s}return"&nbsp;"},image:function(t,e,n){var i=document.createElement("img"),o=t.getValue();switch(e.urlPrefix&&(o=e.urlPrefix+t.getValue()),e.urlSuffix&&(o+=e.urlSuffix),i.setAttribute("src",o),typeof e.height){case"number":i.style.height=e.height+"px";break;case"string":i.style.height=e.height}switch(typeof e.width){case"number":i.style.width=e.width+"px";break;case"string":i.style.width=e.width}return i.addEventListener("load",(function(){t.getRow().normalizeHeight()})),i},tickCross:function(t,e,n){var i=t.getValue(),o=t.getElement(),r=e.allowEmpty,a=e.allowTruthy,l=Object.keys(e).includes("trueValue"),s=void 0!==e.tickElement?e.tickElement:'<svg enable-background="new 0 0 24 24" height="14" width="14" viewBox="0 0 24 24" xml:space="preserve" ><path fill="#2DC214" clip-rule="evenodd" d="M21.652,3.211c-0.293-0.295-0.77-0.295-1.061,0L9.41,14.34  c-0.293,0.297-0.771,0.297-1.062,0L3.449,9.351C3.304,9.203,3.114,9.13,2.923,9.129C2.73,9.128,2.534,9.201,2.387,9.351  l-2.165,1.946C0.078,11.445,0,11.63,0,11.823c0,0.194,0.078,0.397,0.223,0.544l4.94,5.184c0.292,0.296,0.771,0.776,1.062,1.07  l2.124,2.141c0.292,0.293,0.769,0.293,1.062,0l14.366-14.34c0.293-0.294,0.293-0.777,0-1.071L21.652,3.211z" fill-rule="evenodd"/></svg>',u=void 0!==e.crossElement?e.crossElement:'<svg enable-background="new 0 0 24 24" height="14" width="14"  viewBox="0 0 24 24" xml:space="preserve" ><path fill="#CE1515" d="M22.245,4.015c0.313,0.313,0.313,0.826,0,1.139l-6.276,6.27c-0.313,0.312-0.313,0.826,0,1.14l6.273,6.272  c0.313,0.313,0.313,0.826,0,1.14l-2.285,2.277c-0.314,0.312-0.828,0.312-1.142,0l-6.271-6.271c-0.313-0.313-0.828-0.313-1.141,0  l-6.276,6.267c-0.313,0.313-0.828,0.313-1.141,0l-2.282-2.28c-0.313-0.313-0.313-0.826,0-1.14l6.278-6.269  c0.313-0.312,0.313-0.826,0-1.14L1.709,5.147c-0.314-0.313-0.314-0.827,0-1.14l2.284-2.278C4.308,1.417,4.821,1.417,5.135,1.73  L11.405,8c0.314,0.314,0.828,0.314,1.141,0.001l6.276-6.267c0.312-0.312,0.826-0.312,1.141,0L22.245,4.015z"/></svg>';return l&&i===e.trueValue||!l&&(a&&i||!0===i||"true"===i||"True"===i||1===i||"1"===i)?(o.setAttribute("aria-checked",!0),s||""):!r||"null"!==i&&""!==i&&null!=i?(o.setAttribute("aria-checked",!1),u||""):(o.setAttribute("aria-checked","mixed"),"")},datetime:function(t,e,n){var i,o=window.DateTime||luxon.DateTime,r=e.inputFormat||"yyyy-MM-dd HH:mm:ss",a=e.outputFormat||"dd/MM/yyyy HH:mm:ss",l=void 0!==e.invalidPlaceholder?e.invalidPlaceholder:"",s=t.getValue();if(void 0!==o)return(i=o.isDateTime(s)?s:"iso"===r?o.fromISO(String(s)):o.fromFormat(String(s),r)).isValid?(e.timezone&&(i=i.setZone(e.timezone)),i.toFormat(a)):!0!==l&&s?"function"==typeof l?l(s):l:s;console.error("Format Error - 'datetime' formatter is dependant on luxon.js")},datetimediff:function(t,e,n){var i,o=window.DateTime||luxon.DateTime,r=e.inputFormat||"yyyy-MM-dd HH:mm:ss",a=void 0!==e.invalidPlaceholder?e.invalidPlaceholder:"",l=void 0!==e.suffix&&e.suffix,s=void 0!==e.unit?e.unit:"days",u=void 0!==e.humanize&&e.humanize,h=void 0!==e.date?e.date:o.now(),c=t.getValue();if(void 0!==o)return(i=o.isDateTime(c)?c:"iso"===r?o.fromISO(String(c)):o.fromFormat(String(c),r)).isValid?u?i.diff(h,s).toHuman()+(l?" "+l:""):parseInt(i.diff(h,s)[s])+(l?" "+l:""):!0===a?c:"function"==typeof a?a(c):a;console.error("Format Error - 'datetimediff' formatter is dependant on luxon.js")},lookup:function(t,e,n){var i=t.getValue();return void 0===e[i]?(console.warn("Missing display value for "+i),i):e[i]},star:function(t,e,n){var i=t.getValue(),o=t.getElement(),r=e&&e.stars?e.stars:5,a=document.createElement("span"),l=document.createElementNS("http://www.w3.org/2000/svg","svg");a.style.verticalAlign="middle",l.setAttribute("width","14"),l.setAttribute("height","14"),l.setAttribute("viewBox","0 0 512 512"),l.setAttribute("xml:space","preserve"),l.style.padding="0 1px",i=i&&!isNaN(i)?parseInt(i):0,i=Math.max(0,Math.min(i,r));for(var s=1;s<=r;s++){var u=l.cloneNode(!0);u.innerHTML=s<=i?'<polygon fill="#FFEA00" stroke="#C1AB60" stroke-width="37.6152" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" points="259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 "/>':'<polygon fill="#D2D2D2" stroke="#686868" stroke-width="37.6152" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" points="259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 "/>',a.appendChild(u)}return o.style.whiteSpace="nowrap",o.style.overflow="hidden",o.style.textOverflow="ellipsis",o.setAttribute("aria-label",i),a},traffic:function(t,e,n){var i,o,r=this.sanitizeHTML(t.getValue())||0,a=document.createElement("span"),l=e&&e.max?e.max:100,s=e&&e.min?e.min:0,u=e&&void 0!==e.color?e.color:["red","orange","green"],h="#666666";if(!isNaN(r)&&void 0!==t.getValue()){switch(a.classList.add("tabulator-traffic-light"),o=parseFloat(r)<=l?parseFloat(r):l,o=parseFloat(o)>=s?parseFloat(o):s,i=(l-s)/100,o=Math.round((o-s)/i),typeof u){case"string":h=u;break;case"function":h=u(r);break;case"object":if(Array.isArray(u)){var c=100/u.length,d=Math.floor(o/c);d=Math.min(d,u.length-1),h=u[d=Math.max(d,0)];break}}return a.style.backgroundColor=h,a}},progress:function(t,e={},n){var i,o,r,a,l,s=this.sanitizeHTML(t.getValue())||0,u=t.getElement(),h=e.max?e.max:100,c=e.min?e.min:0,d=e.legendAlign?e.legendAlign:"center";switch(o=parseFloat(s)<=h?parseFloat(s):h,o=parseFloat(o)>=c?parseFloat(o):c,i=(h-c)/100,o=Math.round((o-c)/i),typeof e.color){case"string":r=e.color;break;case"function":r=e.color(s);break;case"object":if(Array.isArray(e.color)){let t=100/e.color.length,n=Math.floor(o/t);n=Math.min(n,e.color.length-1),n=Math.max(n,0),r=e.color[n];break}default:r="#2DC214"}switch(typeof e.legend){case"string":a=e.legend;break;case"function":a=e.legend(s);break;case"boolean":a=s;break;default:a=!1}switch(typeof e.legendColor){case"string":l=e.legendColor;break;case"function":l=e.legendColor(s);break;case"object":if(Array.isArray(e.legendColor)){let t=100/e.legendColor.length,n=Math.floor(o/t);n=Math.min(n,e.legendColor.length-1),n=Math.max(n,0),l=e.legendColor[n]}break;default:l="#000"}u.style.minWidth="30px",u.style.position="relative",u.setAttribute("aria-label",o);var p=document.createElement("div");p.style.display="inline-block",p.style.width=o+"%",p.style.backgroundColor=r,p.style.height="100%",p.setAttribute("data-max",h),p.setAttribute("data-min",c);var b=document.createElement("div");if(b.style.position="relative",b.style.width="100%",b.style.height="100%",a){var m=document.createElement("div");m.style.position="absolute",m.style.top=0,m.style.left=0,m.style.textAlign=d,m.style.width="100%",m.style.color=l,m.innerHTML=a}return n((function(){if(!(t instanceof L)){var e=document.createElement("div");e.style.position="absolute",e.style.top="4px",e.style.bottom="4px",e.style.left="4px",e.style.right="4px",u.appendChild(e),u=e}u.appendChild(b),b.appendChild(p),a&&b.appendChild(m)})),""},color:function(t,e,n){return t.getElement().style.backgroundColor=this.sanitizeHTML(t.getValue()),""},buttonTick:function(t,e,n){return'<svg enable-background="new 0 0 24 24" height="14" width="14" viewBox="0 0 24 24" xml:space="preserve" ><path fill="#2DC214" clip-rule="evenodd" d="M21.652,3.211c-0.293-0.295-0.77-0.295-1.061,0L9.41,14.34  c-0.293,0.297-0.771,0.297-1.062,0L3.449,9.351C3.304,9.203,3.114,9.13,2.923,9.129C2.73,9.128,2.534,9.201,2.387,9.351  l-2.165,1.946C0.078,11.445,0,11.63,0,11.823c0,0.194,0.078,0.397,0.223,0.544l4.94,5.184c0.292,0.296,0.771,0.776,1.062,1.07  l2.124,2.141c0.292,0.293,0.769,0.293,1.062,0l14.366-14.34c0.293-0.294,0.293-0.777,0-1.071L21.652,3.211z" fill-rule="evenodd"/></svg>'},buttonCross:function(t,e,n){return'<svg enable-background="new 0 0 24 24" height="14" width="14" viewBox="0 0 24 24" xml:space="preserve" ><path fill="#CE1515" d="M22.245,4.015c0.313,0.313,0.313,0.826,0,1.139l-6.276,6.27c-0.313,0.312-0.313,0.826,0,1.14l6.273,6.272  c0.313,0.313,0.313,0.826,0,1.14l-2.285,2.277c-0.314,0.312-0.828,0.312-1.142,0l-6.271-6.271c-0.313-0.313-0.828-0.313-1.141,0  l-6.276,6.267c-0.313,0.313-0.828,0.313-1.141,0l-2.282-2.28c-0.313-0.313-0.313-0.826,0-1.14l6.278-6.269  c0.313-0.312,0.313-0.826,0-1.14L1.709,5.147c-0.314-0.313-0.314-0.827,0-1.14l2.284-2.278C4.308,1.417,4.821,1.417,5.135,1.73  L11.405,8c0.314,0.314,0.828,0.314,1.141,0.001l6.276-6.267c0.312-0.312,0.826-0.312,1.141,0L22.245,4.015z"/></svg>'},rownum:function(t,e,n){var i=document.createElement("span");return t.getRow().watchPosition((t=>{i.innerText=t})),i},handle:function(t,e,n){return t.getElement().classList.add("tabulator-row-handle"),"<div class='tabulator-row-handle-box'><div class='tabulator-row-handle-bar'></div><div class='tabulator-row-handle-bar'></div><div class='tabulator-row-handle-bar'></div></div>"},responsiveCollapse:function(t,e,n){var i=document.createElement("div"),o=t.getRow()._row.modules.responsiveLayout;function r(t){var e=o.element;o.open=t,e&&(o.open?(i.classList.add("open"),e.style.display=""):(i.classList.remove("open"),e.style.display="none"))}return i.classList.add("tabulator-responsive-collapse-toggle"),i.innerHTML='<svg class=\'tabulator-responsive-collapse-toggle-open\' viewbox="0 0 24 24">\n  <line x1="7" y1="12" x2="17" y2="12" fill="none" stroke-width="3" stroke-linecap="round" />\n  <line y1="7" x1="12" y2="17" x2="12" fill="none" stroke-width="3" stroke-linecap="round" />\n</svg>\n\n<svg class=\'tabulator-responsive-collapse-toggle-close\' viewbox="0 0 24 24">\n  <line x1="7" y1="12" x2="17" y2="12"  fill="none" stroke-width="3" stroke-linecap="round" />\n</svg>',t.getElement().classList.add("tabulator-row-handle"),i.addEventListener("click",(function(e){e.stopImmediatePropagation(),r(!o.open),t.getTable().rowManager.adjustTableSize()})),r(o.open),i},rowSelection:function(t,e,n){var i=document.createElement("input"),o=!1;if(i.type="checkbox",i.setAttribute("aria-label","Select Row"),this.table.modExists("selectRow",!0))if(i.addEventListener("click",(t=>{t.stopPropagation()})),"function"==typeof t.getRow){var r=t.getRow();r instanceof F?(i.addEventListener("change",(t=>{"click"===this.table.options.selectableRangeMode&&o?o=!1:r.toggleSelect()})),"click"===this.table.options.selectableRangeMode&&i.addEventListener("click",(t=>{o=!0,this.table.modules.selectRow.handleComplexRowClick(r._row,t)})),i.checked=r.isSelected&&r.isSelected(),this.table.modules.selectRow.registerRowSelectCheckbox(r,i)):i=""}else i.addEventListener("change",(t=>{this.table.modules.selectRow.selectedRows.length?this.table.deselectRow():this.table.selectRow(e.rowRange)})),this.table.modules.selectRow.registerHeaderSelectCheckbox(i);return i}};class tt extends E{constructor(t){super(t),this.registerColumnOption("formatter"),this.registerColumnOption("formatterParams"),this.registerColumnOption("formatterPrint"),this.registerColumnOption("formatterPrintParams"),this.registerColumnOption("formatterClipboard"),this.registerColumnOption("formatterClipboardParams"),this.registerColumnOption("formatterHtmlOutput"),this.registerColumnOption("formatterHtmlOutputParams"),this.registerColumnOption("titleFormatter"),this.registerColumnOption("titleFormatterParams")}initialize(){this.subscribe("cell-format",this.formatValue.bind(this)),this.subscribe("cell-rendered",this.cellRendered.bind(this)),this.subscribe("column-layout",this.initializeColumn.bind(this)),this.subscribe("column-format",this.formatHeader.bind(this))}initializeColumn(t){t.modules.format=this.lookupFormatter(t,""),void 0!==t.definition.formatterPrint&&(t.modules.format.print=this.lookupFormatter(t,"Print")),void 0!==t.definition.formatterClipboard&&(t.modules.format.clipboard=this.lookupFormatter(t,"Clipboard")),void 0!==t.definition.formatterHtmlOutput&&(t.modules.format.htmlOutput=this.lookupFormatter(t,"HtmlOutput"))}lookupFormatter(t,e){var n={params:t.definition["formatter"+e+"Params"]||{}},i=t.definition["formatter"+e];switch(typeof i){case"string":tt.formatters[i]?n.formatter=tt.formatters[i]:(console.warn("Formatter Error - No such formatter found: ",i),n.formatter=tt.formatters.plaintext);break;case"function":n.formatter=i;break;default:n.formatter=tt.formatters.plaintext}return n}cellRendered(t){t.modules.format&&t.modules.format.renderedCallback&&!t.modules.format.rendered&&(t.modules.format.renderedCallback(),t.modules.format.rendered=!0)}formatHeader(t,e,n){var i,o,r,a;return t.definition.titleFormatter?(i=this.getFormatter(t.definition.titleFormatter),r=e=>{t.titleFormatterRendered=e},a={getValue:function(){return e},getElement:function(){return n},getType:function(){return"header"},getColumn:function(){return t.getComponent()},getTable:()=>this.table},o="function"==typeof(o=t.definition.titleFormatterParams||{})?o():o,i.call(this,a,o,r)):e}formatValue(t){var e=t.getComponent(),n="function"==typeof t.column.modules.format.params?t.column.modules.format.params(e):t.column.modules.format.params;return t.column.modules.format.formatter.call(this,e,n,(function(e){t.modules.format||(t.modules.format={}),t.modules.format.renderedCallback=e,t.modules.format.rendered=!1}))}formatExportValue(t,e){var n,i=t.column.modules.format[e];if(i){function o(e){t.modules.format||(t.modules.format={}),t.modules.format.renderedCallback=e,t.modules.format.rendered=!1}return n="function"==typeof i.params?i.params(t.getComponent()):i.params,i.formatter.call(this,t.getComponent(),n,o)}return this.formatValue(t)}sanitizeHTML(t){if(t){var e={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"};return String(t).replace(/[&<>"'`=/]/g,(function(t){return e[t]}))}return t}emptyToSpace(t){return null==t||""===t?"&nbsp;":t}getFormatter(t){switch(typeof t){case"string":tt.formatters[t]?t=tt.formatters[t]:(console.warn("Formatter Error - No such formatter found: ",t),t=tt.formatters.plaintext);break;case"function":break;default:t=tt.formatters.plaintext}return t}}tt.moduleName="format",tt.formatters=$;class et extends E{constructor(t){super(t),this.leftColumns=[],this.rightColumns=[],this.initializationMode="left",this.active=!1,this.blocked=!0,this.registerColumnOption("frozen")}reset(){this.initializationMode="left",this.leftColumns=[],this.rightColumns=[],this.active=!1}initialize(){this.subscribe("cell-layout",this.layoutCell.bind(this)),this.subscribe("column-init",this.initializeColumn.bind(this)),this.subscribe("column-width",this.layout.bind(this)),this.subscribe("row-layout-after",this.layoutRow.bind(this)),this.subscribe("table-layout",this.layout.bind(this)),this.subscribe("columns-loading",this.reset.bind(this)),this.subscribe("column-add",this.reinitializeColumns.bind(this)),this.subscribe("column-delete",this.reinitializeColumns.bind(this)),this.subscribe("table-redraw",this.layout.bind(this)),this.subscribe("layout-refreshing",this.blockLayout.bind(this)),this.subscribe("layout-refreshed",this.unblockLayout.bind(this)),this.subscribe("scrollbar-vertical",this.adjustForScrollbar.bind(this))}blockLayout(){this.blocked=!0}unblockLayout(){this.blocked=!1}layoutCell(t){this.layoutElement(t.element,t.column)}reinitializeColumns(){this.reset(),this.table.columnManager.columnsByIndex.forEach((t=>{this.initializeColumn(t)}))}initializeColumn(t){var e={margin:0,edge:!1};t.isGroup||(this.frozenCheck(t)?(e.position=this.initializationMode,"left"==this.initializationMode?this.leftColumns.push(t):this.rightColumns.unshift(t),this.active=!0,t.modules.frozen=e):this.initializationMode="right")}frozenCheck(t){return t.parent.isGroup&&t.definition.frozen&&console.warn("Frozen Column Error - Parent column group must be frozen, not individual columns or sub column groups"),t.parent.isGroup?this.frozenCheck(t.parent):t.definition.frozen}layoutCalcRows(){this.table.modExists("columnCalcs")&&(this.table.modules.columnCalcs.topInitialized&&this.table.modules.columnCalcs.topRow&&this.layoutRow(this.table.modules.columnCalcs.topRow),this.table.modules.columnCalcs.botInitialized&&this.table.modules.columnCalcs.botRow&&this.layoutRow(this.table.modules.columnCalcs.botRow),this.table.modExists("groupRows")&&this.layoutGroupCalcs(this.table.modules.groupRows.getGroups()))}layoutGroupCalcs(t){t.forEach((t=>{t.calcs.top&&this.layoutRow(t.calcs.top),t.calcs.bottom&&this.layoutRow(t.calcs.bottom),t.groupList&&t.groupList.length&&this.layoutGroupCalcs(t.groupList)}))}layoutColumnPosition(t){var e=[],n=0,i=0;this.leftColumns.forEach(((i,o)=>{if(i.modules.frozen.marginValue=n,i.modules.frozen.margin=i.modules.frozen.marginValue+"px",i.visible&&(n+=i.getWidth()),o==this.leftColumns.length-1?i.modules.frozen.edge=!0:i.modules.frozen.edge=!1,i.parent.isGroup){var r=this.getColGroupParentElement(i);e.includes(r)||(this.layoutElement(r,i),e.push(r)),i.modules.frozen.edge&&r.classList.add("tabulator-frozen-"+i.modules.frozen.position)}else this.layoutElement(i.getElement(),i);t&&i.cells.forEach((t=>{this.layoutElement(t.getElement(!0),i)}))})),this.rightColumns.forEach(((e,n)=>{e.modules.frozen.marginValue=i,e.modules.frozen.margin=e.modules.frozen.marginValue+"px",e.visible&&(i+=e.getWidth()),n==this.rightColumns.length-1?e.modules.frozen.edge=!0:e.modules.frozen.edge=!1,e.parent.isGroup?this.layoutElement(this.getColGroupParentElement(e),e):this.layoutElement(e.getElement(),e),t&&e.cells.forEach((t=>{this.layoutElement(t.getElement(!0),e)}))}))}getColGroupParentElement(t){return t.parent.isGroup?this.getColGroupParentElement(t.parent):t.getElement()}layout(){this.active&&!this.blocked&&(this.layoutColumnPosition(),this.reinitializeRows(),this.layoutCalcRows())}reinitializeRows(){var t=this.table.rowManager.getVisibleRows(!0);this.table.rowManager.getRows().filter((e=>!t.includes(e))).forEach((t=>{t.deinitialize()})),t.forEach((t=>{"row"===t.type&&this.layoutRow(t)}))}layoutRow(t){"fitDataFill"===this.table.options.layout&&this.rightColumns.length&&(this.table.rowManager.getTableElement().style.minWidth="calc(100% - "+this.rightMargin+")"),this.leftColumns.forEach((e=>{var n=t.getCell(e);n&&this.layoutElement(n.getElement(!0),e)})),this.rightColumns.forEach((e=>{var n=t.getCell(e);n&&this.layoutElement(n.getElement(!0),e)}))}layoutElement(t,e){var n;e.modules.frozen&&t&&(t.style.position="sticky",n=this.table.rtl?"left"===e.modules.frozen.position?"right":"left":e.modules.frozen.position,t.style[n]=e.modules.frozen.margin,t.classList.add("tabulator-frozen"),e.modules.frozen.edge&&t.classList.add("tabulator-frozen-"+e.modules.frozen.position))}adjustForScrollbar(t){this.rightColumns.length&&(this.table.columnManager.getContentsElement().style.width="calc(100% - "+t+"px)")}_calcSpace(t,e){var n=0;for(let i=0;i<e;i++)t[i].visible&&(n+=t[i].getWidth());return n}}et.moduleName="frozenColumns";class nt extends E{constructor(t){super(t),this.topElement=document.createElement("div"),this.rows=[],this.registerComponentFunction("row","freeze",this.freezeRow.bind(this)),this.registerComponentFunction("row","unfreeze",this.unfreezeRow.bind(this)),this.registerComponentFunction("row","isFrozen",this.isRowFrozen.bind(this)),this.registerTableOption("frozenRowsField","id"),this.registerTableOption("frozenRows",!1)}initialize(){this.rows=[],this.topElement.classList.add("tabulator-frozen-rows-holder"),this.table.columnManager.getContentsElement().insertBefore(this.topElement,this.table.columnManager.headersElement.nextSibling),this.subscribe("row-deleting",this.detachRow.bind(this)),this.subscribe("rows-visible",this.visibleRows.bind(this)),this.registerDisplayHandler(this.getRows.bind(this),10),this.table.options.frozenRows&&(this.subscribe("data-processed",this.initializeRows.bind(this)),this.subscribe("row-added",this.initializeRow.bind(this)),this.subscribe("table-redrawing",this.resizeHolderWidth.bind(this)),this.subscribe("column-resized",this.resizeHolderWidth.bind(this)),this.subscribe("column-show",this.resizeHolderWidth.bind(this)),this.subscribe("column-hide",this.resizeHolderWidth.bind(this))),this.resizeHolderWidth()}resizeHolderWidth(){this.topElement.style.minWidth=this.table.columnManager.headersElement.offsetWidth+"px"}initializeRows(){this.table.rowManager.getRows().forEach((t=>{this.initializeRow(t)}))}initializeRow(t){var e=this.table.options.frozenRows,n=typeof e;"number"===n?t.getPosition()&&t.getPosition()+this.rows.length<=e&&this.freezeRow(t):"function"===n?e.call(this.table,t.getComponent())&&this.freezeRow(t):Array.isArray(e)&&e.includes(t.data[this.options("frozenRowsField")])&&this.freezeRow(t)}isRowFrozen(t){return this.rows.indexOf(t)>-1}isFrozen(){return!!this.rows.length}visibleRows(t,e){return this.rows.forEach((t=>{e.push(t)})),e}getRows(t){var e=t.slice(0);return this.rows.forEach((function(t){var n=e.indexOf(t);n>-1&&e.splice(n,1)})),e}freezeRow(t){t.modules.frozen?console.warn("Freeze Error - Row is already frozen"):(t.modules.frozen=!0,this.topElement.appendChild(t.getElement()),t.initialize(),t.normalizeHeight(),this.rows.push(t),this.refreshData(!1,"display"),this.table.rowManager.adjustTableSize(),this.styleRows())}unfreezeRow(t){t.modules.frozen?(t.modules.frozen=!1,this.detachRow(t),this.table.rowManager.adjustTableSize(),this.refreshData(!1,"display"),this.rows.length&&this.styleRows()):console.warn("Freeze Error - Row is already unfrozen")}detachRow(t){var e=this.rows.indexOf(t);if(e>-1){var n=t.getElement();n.parentNode&&n.parentNode.removeChild(n),this.rows.splice(e,1)}}styleRows(t){this.rows.forEach(((t,e)=>{this.table.rowManager.styleRow(t,e)}))}}nt.moduleName="frozenRows";class it{constructor(t){return this._group=t,this.type="GroupComponent",new Proxy(this,{get:function(t,e,n){return void 0!==t[e]?t[e]:t._group.groupManager.table.componentFunctionBinder.handle("group",t._group,e)}})}getKey(){return this._group.key}getField(){return this._group.field}getElement(){return this._group.element}getRows(){return this._group.getRows(!0)}getSubGroups(){return this._group.getSubGroups(!0)}getParentGroup(){return!!this._group.parent&&this._group.parent.getComponent()}isVisible(){return this._group.visible}show(){this._group.show()}hide(){this._group.hide()}toggle(){this._group.toggleVisibility()}scrollTo(t,e){return this._group.groupManager.table.rowManager.scrollToRow(this._group,t,e)}_getSelf(){return this._group}getTable(){return this._group.groupManager.table}}class ot{constructor(t,e,n,i,o,r,a){this.groupManager=t,this.parent=e,this.key=i,this.level=n,this.field=o,this.hasSubGroups=n<t.groupIDLookups.length-1,this.addRow=this.hasSubGroups?this._addRowToGroup:this._addRow,this.type="group",this.old=a,this.rows=[],this.groups=[],this.groupList=[],this.generator=r,this.element=!1,this.elementContents=!1,this.height=0,this.outerHeight=0,this.initialized=!1,this.calcs={},this.initialized=!1,this.modules={},this.arrowElement=!1,this.visible=a?a.visible:void 0!==t.startOpen[n]?t.startOpen[n]:t.startOpen[0],this.component=null,this.createElements(),this.addBindings(),this.createValueGroups()}wipe(t){t||(this.groupList.length?this.groupList.forEach((function(t){t.wipe()})):this.rows.forEach((t=>{t.modules&&delete t.modules.group}))),this.element=!1,this.arrowElement=!1,this.elementContents=!1}createElements(){var t=document.createElement("div");t.classList.add("tabulator-arrow"),this.element=document.createElement("div"),this.element.classList.add("tabulator-row"),this.element.classList.add("tabulator-group"),this.element.classList.add("tabulator-group-level-"+this.level),this.element.setAttribute("role","rowgroup"),this.arrowElement=document.createElement("div"),this.arrowElement.classList.add("tabulator-group-toggle"),this.arrowElement.appendChild(t),!1!==this.groupManager.table.options.movableRows&&this.groupManager.table.modExists("moveRow")&&this.groupManager.table.modules.moveRow.initializeGroupHeader(this)}createValueGroups(){var t=this.level+1;this.groupManager.allowedValues&&this.groupManager.allowedValues[t]&&this.groupManager.allowedValues[t].forEach((e=>{this._createGroup(e,t)}))}addBindings(){this.groupManager.table.options.groupToggleElement&&("arrow"==this.groupManager.table.options.groupToggleElement?this.arrowElement:this.element).addEventListener("click",(t=>{"arrow"===this.groupManager.table.options.groupToggleElement&&(t.stopPropagation(),t.stopImmediatePropagation()),setTimeout((()=>{this.toggleVisibility()}))}))}_createGroup(t,e){var n=e+"_"+t,i=new ot(this.groupManager,this,e,t,this.groupManager.groupIDLookups[e].field,this.groupManager.headerGenerator[e]||this.groupManager.headerGenerator[0],!!this.old&&this.old.groups[n]);this.groups[n]=i,this.groupList.push(i)}_addRowToGroup(t){var e=this.level+1;if(this.hasSubGroups){var n=this.groupManager.groupIDLookups[e].func(t.getData()),i=e+"_"+n;this.groupManager.allowedValues&&this.groupManager.allowedValues[e]?this.groups[i]&&this.groups[i].addRow(t):(this.groups[i]||this._createGroup(n,e),this.groups[i].addRow(t))}}_addRow(t){this.rows.push(t),t.modules.group=this}insertRow(t,e,n){var i=this.conformRowData({});t.updateData(i);var o=this.rows.indexOf(e);o>-1?n?this.rows.splice(o+1,0,t):this.rows.splice(o,0,t):n?this.rows.push(t):this.rows.unshift(t),t.modules.group=this,this.groupManager.table.modExists("columnCalcs")&&"table"!=this.groupManager.table.options.columnCalcs&&this.groupManager.table.modules.columnCalcs.recalcGroup(this),this.groupManager.updateGroupRows(!0)}scrollHeader(t){this.arrowElement&&(this.arrowElement.style.marginLeft=t,this.groupList.forEach((function(e){e.scrollHeader(t)})))}getRowIndex(t){}conformRowData(t){return this.field?t[this.field]=this.key:console.warn("Data Conforming Error - Cannot conform row data to match new group as groupBy is a function"),this.parent&&(t=this.parent.conformRowData(t)),t}removeRow(t){var e=this.rows.indexOf(t),n=t.getElement();e>-1&&this.rows.splice(e,1),this.groupManager.table.options.groupValues||this.rows.length?(n.parentNode&&n.parentNode.removeChild(n),this.groupManager.blockRedraw||(this.generateGroupHeaderContents(),this.groupManager.table.modExists("columnCalcs")&&"table"!=this.groupManager.table.options.columnCalcs&&this.groupManager.table.modules.columnCalcs.recalcGroup(this))):(this.parent?this.parent.removeGroup(this):this.groupManager.removeGroup(this),this.groupManager.updateGroupRows(!0))}removeGroup(t){var e,n=t.level+"_"+t.key;this.groups[n]&&(delete this.groups[n],(e=this.groupList.indexOf(t))>-1&&this.groupList.splice(e,1),this.groupList.length||(this.parent?this.parent.removeGroup(this):this.groupManager.removeGroup(this)))}getHeadersAndRows(){var t=[];return t.push(this),this._visSet(),this.calcs.top&&(this.calcs.top.detachElement(),this.calcs.top.deleteCells()),this.calcs.bottom&&(this.calcs.bottom.detachElement(),this.calcs.bottom.deleteCells()),this.visible?this.groupList.length?this.groupList.forEach((function(e){t=t.concat(e.getHeadersAndRows())})):("table"!=this.groupManager.table.options.columnCalcs&&this.groupManager.table.modExists("columnCalcs")&&this.groupManager.table.modules.columnCalcs.hasTopCalcs()&&(this.calcs.top=this.groupManager.table.modules.columnCalcs.generateTopRow(this.rows),t.push(this.calcs.top)),t=t.concat(this.rows),"table"!=this.groupManager.table.options.columnCalcs&&this.groupManager.table.modExists("columnCalcs")&&this.groupManager.table.modules.columnCalcs.hasBottomCalcs()&&(this.calcs.bottom=this.groupManager.table.modules.columnCalcs.generateBottomRow(this.rows),t.push(this.calcs.bottom))):this.groupList.length||"table"==this.groupManager.table.options.columnCalcs||this.groupManager.table.modExists("columnCalcs")&&(this.groupManager.table.modules.columnCalcs.hasTopCalcs()&&this.groupManager.table.options.groupClosedShowCalcs&&(this.calcs.top=this.groupManager.table.modules.columnCalcs.generateTopRow(this.rows),t.push(this.calcs.top)),this.groupManager.table.modules.columnCalcs.hasBottomCalcs()&&this.groupManager.table.options.groupClosedShowCalcs&&(this.calcs.bottom=this.groupManager.table.modules.columnCalcs.generateBottomRow(this.rows),t.push(this.calcs.bottom))),t}getData(t,e){var n=[];return this._visSet(),(!t||t&&this.visible)&&this.rows.forEach((t=>{n.push(t.getData(e||"data"))})),n}getRowCount(){var t=0;return this.groupList.length?this.groupList.forEach((e=>{t+=e.getRowCount()})):t=this.rows.length,t}toggleVisibility(){this.visible?this.hide():this.show()}hide(){this.visible=!1,"basic"!=this.groupManager.table.rowManager.getRenderMode()||this.groupManager.table.options.pagination||(this.element.classList.remove("tabulator-group-visible"),this.groupList.length?this.groupList.forEach((t=>{t.getHeadersAndRows().forEach((t=>{t.detachElement()}))})):this.rows.forEach((t=>{var e=t.getElement();e.parentNode.removeChild(e)}))),this.groupManager.updateGroupRows(!0),this.groupManager.table.externalEvents.dispatch("groupVisibilityChanged",this.getComponent(),!1)}show(){if(this.visible=!0,"basic"!=this.groupManager.table.rowManager.getRenderMode()||this.groupManager.table.options.pagination)this.groupManager.updateGroupRows(!0);else{this.element.classList.add("tabulator-group-visible");var t=this.generateElement();this.groupList.length?this.groupList.forEach((e=>{e.getHeadersAndRows().forEach((e=>{var n=e.getElement();t.parentNode.insertBefore(n,t.nextSibling),e.initialize(),t=n}))})):this.rows.forEach((e=>{var n=e.getElement();t.parentNode.insertBefore(n,t.nextSibling),e.initialize(),t=n})),this.groupManager.updateGroupRows(!0)}this.groupManager.table.externalEvents.dispatch("groupVisibilityChanged",this.getComponent(),!0)}_visSet(){var t=[];"function"==typeof this.visible&&(this.rows.forEach((function(e){t.push(e.getData())})),this.visible=this.visible(this.key,this.getRowCount(),t,this.getComponent()))}getRowGroup(t){var e=!1;return this.groupList.length?this.groupList.forEach((function(n){var i=n.getRowGroup(t);i&&(e=i)})):this.rows.find((function(e){return e===t}))&&(e=this),e}getSubGroups(t){var e=[];return this.groupList.forEach((function(n){e.push(t?n.getComponent():n)})),e}getRows(t,e){var n=[];return e&&this.groupList.length?this.groupList.forEach((i=>{n=n.concat(i.getRows(t,e))})):this.rows.forEach((function(e){n.push(t?e.getComponent():e)})),n}generateGroupHeaderContents(){var t=[];for(this.getRows(!1,!0).forEach((function(e){t.push(e.getData())})),this.elementContents=this.generator(this.key,this.getRowCount(),t,this.getComponent());this.element.firstChild;)this.element.removeChild(this.element.firstChild);"string"==typeof this.elementContents?this.element.innerHTML=this.elementContents:this.element.appendChild(this.elementContents),this.element.insertBefore(this.arrowElement,this.element.firstChild)}getPath(t=[]){return t.unshift(this.key),this.parent&&this.parent.getPath(t),t}getElement(){return this.elementContents?this.element:this.generateElement()}generateElement(){this.addBindings=!1,this._visSet(),this.visible?this.element.classList.add("tabulator-group-visible"):this.element.classList.remove("tabulator-group-visible");for(var t=0;t<this.element.childNodes.length;++t)this.element.childNodes[t].parentNode.removeChild(this.element.childNodes[t]);return this.generateGroupHeaderContents(),this.element}detachElement(){this.element&&this.element.parentNode&&this.element.parentNode.removeChild(this.element)}normalizeHeight(){this.setHeight(this.element.clientHeight)}initialize(t){this.initialized&&!t||(this.normalizeHeight(),this.initialized=!0)}reinitialize(){this.initialized=!1,this.height=0,w.elVisible(this.element)&&this.initialize(!0)}setHeight(t){this.height!=t&&(this.height=t,this.outerHeight=this.element.offsetHeight)}getHeight(){return this.outerHeight}getGroup(){return this}reinitializeHeight(){}calcHeight(){}setCellHeight(){}clearCellHeight(){}deinitializeHeight(){}rendered(){}getComponent(){return this.component||(this.component=new it(this)),this.component}}class rt extends E{constructor(t){super(t),this.groupIDLookups=!1,this.startOpen=[function(){return!1}],this.headerGenerator=[function(){return""}],this.groupList=[],this.allowedValues=!1,this.groups={},this.displayHandler=this.getRows.bind(this),this.blockRedraw=!1,this.registerTableOption("groupBy",!1),this.registerTableOption("groupStartOpen",!0),this.registerTableOption("groupValues",!1),this.registerTableOption("groupUpdateOnCellEdit",!1),this.registerTableOption("groupHeader",!1),this.registerTableOption("groupHeaderPrint",null),this.registerTableOption("groupHeaderClipboard",null),this.registerTableOption("groupHeaderHtmlOutput",null),this.registerTableOption("groupHeaderDownload",null),this.registerTableOption("groupToggleElement","arrow"),this.registerTableOption("groupClosedShowCalcs",!1),this.registerTableFunction("setGroupBy",this.setGroupBy.bind(this)),this.registerTableFunction("setGroupValues",this.setGroupValues.bind(this)),this.registerTableFunction("setGroupStartOpen",this.setGroupStartOpen.bind(this)),this.registerTableFunction("setGroupHeader",this.setGroupHeader.bind(this)),this.registerTableFunction("getGroups",this.userGetGroups.bind(this)),this.registerTableFunction("getGroupedData",this.userGetGroupedData.bind(this)),this.registerComponentFunction("row","getGroup",this.rowGetGroup.bind(this))}initialize(){this.subscribe("table-destroy",this._blockRedrawing.bind(this)),this.subscribe("rows-wipe",this._blockRedrawing.bind(this)),this.subscribe("rows-wiped",this._restore_redrawing.bind(this)),this.table.options.groupBy&&(this.table.options.groupUpdateOnCellEdit&&(this.subscribe("cell-value-updated",this.cellUpdated.bind(this)),this.subscribe("row-data-changed",this.reassignRowToGroup.bind(this),0)),this.subscribe("table-built",this.configureGroupSetup.bind(this)),this.subscribe("row-deleting",this.rowDeleting.bind(this)),this.subscribe("row-deleted",this.rowsUpdated.bind(this)),this.subscribe("scroll-horizontal",this.scrollHeaders.bind(this)),this.subscribe("rows-wipe",this.wipe.bind(this)),this.subscribe("rows-added",this.rowsUpdated.bind(this)),this.subscribe("row-moving",this.rowMoving.bind(this)),this.subscribe("row-adding-index",this.rowAddingIndex.bind(this)),this.subscribe("rows-sample",this.rowSample.bind(this)),this.subscribe("render-virtual-fill",this.virtualRenderFill.bind(this)),this.registerDisplayHandler(this.displayHandler,20),this.initialized=!0)}_blockRedrawing(){this.blockRedraw=!0}_restore_redrawing(){this.blockRedraw=!1}configureGroupSetup(){if(this.table.options.groupBy){var t=this.table.options.groupBy,e=this.table.options.groupStartOpen,n=this.table.options.groupHeader;this.allowedValues=this.table.options.groupValues,Array.isArray(t)&&Array.isArray(n)&&t.length>n.length&&console.warn("Error creating group headers, groupHeader array is shorter than groupBy array"),this.headerGenerator=[function(){return""}],this.startOpen=[function(){return!1}],this.langBind("groups|item",((t,e)=>{this.headerGenerator[0]=(n,i,o)=>(void 0===n?"":n)+"<span>("+i+" "+(1===i?t:e.groups.items)+")</span>"})),this.groupIDLookups=[],t?this.table.modExists("columnCalcs")&&"table"!=this.table.options.columnCalcs&&"both"!=this.table.options.columnCalcs&&this.table.modules.columnCalcs.removeCalcs():this.table.modExists("columnCalcs")&&"group"!=this.table.options.columnCalcs&&this.table.columnManager.getRealColumns().forEach((t=>{t.definition.topCalc&&this.table.modules.columnCalcs.initializeTopRow(),t.definition.bottomCalc&&this.table.modules.columnCalcs.initializeBottomRow()})),Array.isArray(t)||(t=[t]),t.forEach(((t,e)=>{var n,i;n="function"==typeof t?t:(i=this.table.columnManager.getColumnByField(t))?function(t){return i.getFieldValue(t)}:function(e){return e[t]},this.groupIDLookups.push({field:"function"!=typeof t&&t,func:n,values:!!this.allowedValues&&this.allowedValues[e]})})),e&&(Array.isArray(e)||(e=[e]),e.forEach((t=>{})),this.startOpen=e),n&&(this.headerGenerator=Array.isArray(n)?n:[n])}else this.groupList=[],this.groups={}}rowSample(t,e){if(this.table.options.groupBy){var n=this.getGroups(!1)[0];e.push(n.getRows(!1)[0])}return e}virtualRenderFill(){var t=this.table.rowManager.tableElement,e=this.table.rowManager.getVisibleRows();if(!this.table.options.groupBy)return e;e=e.filter((t=>"group"!==t.type)),t.style.minWidth=e.length?"":this.table.columnManager.getWidth()+"px"}rowAddingIndex(t,e,n){if(this.table.options.groupBy){this.assignRowToGroup(t);var i=t.modules.group.rows;return i.length>1&&(!e||e&&-1==i.indexOf(e)?n?i[0]!==t&&(e=i[0],this.table.rowManager.moveRowInArray(t.modules.group.rows,t,e,!n)):i[i.length-1]!==t&&(e=i[i.length-1],this.table.rowManager.moveRowInArray(t.modules.group.rows,t,e,!n)):this.table.rowManager.moveRowInArray(t.modules.group.rows,t,e,!n)),e}}trackChanges(){this.dispatch("group-changed")}setGroupBy(t){this.table.options.groupBy=t,this.initialized||this.initialize(),this.configureGroupSetup(),!t&&this.table.modExists("columnCalcs")&&!0===this.table.options.columnCalcs&&this.table.modules.columnCalcs.reinitializeCalcs(),this.refreshData(),this.trackChanges()}setGroupValues(t){this.table.options.groupValues=t,this.configureGroupSetup(),this.refreshData(),this.trackChanges()}setGroupStartOpen(t){this.table.options.groupStartOpen=t,this.configureGroupSetup(),this.table.options.groupBy?(this.refreshData(),this.trackChanges()):console.warn("Grouping Update - cant refresh view, no groups have been set")}setGroupHeader(t){this.table.options.groupHeader=t,this.configureGroupSetup(),this.table.options.groupBy?(this.refreshData(),this.trackChanges()):console.warn("Grouping Update - cant refresh view, no groups have been set")}userGetGroups(t){return this.getGroups(!0)}userGetGroupedData(){return this.table.options.groupBy?this.getGroupedData():this.getData()}rowGetGroup(t){return!!t.modules.group&&t.modules.group.getComponent()}rowMoving(t,e,n){if(this.table.options.groupBy){!n&&e instanceof ot&&(e=this.table.rowManager.prevDisplayRow(t)||e);var i=e instanceof ot?e:e.modules.group,o=t instanceof ot?t:t.modules.group;i===o?this.table.rowManager.moveRowInArray(i.rows,t,e,n):(o&&o.removeRow(t),i.insertRow(t,e,n))}}rowDeleting(t){this.table.options.groupBy&&t.modules.group&&t.modules.group.removeRow(t)}rowsUpdated(t){this.table.options.groupBy&&this.updateGroupRows(!0)}cellUpdated(t){this.table.options.groupBy&&this.reassignRowToGroup(t.row)}getRows(t){return this.table.options.groupBy&&this.groupIDLookups.length?(this.dispatchExternal("dataGrouping"),this.generateGroups(t),this.subscribedExternal("dataGrouped")&&this.dispatchExternal("dataGrouped",this.getGroups(!0)),this.updateGroupRows()):t.slice(0)}getGroups(t){var e=[];return this.groupList.forEach((function(n){e.push(t?n.getComponent():n)})),e}getChildGroups(t){var e=[];return t||(t=this),t.groupList.forEach((t=>{t.groupList.length?e=e.concat(this.getChildGroups(t)):e.push(t)})),e}wipe(){this.table.options.groupBy&&(this.groupList.forEach((function(t){t.wipe()})),this.groupList=[],this.groups={})}pullGroupListData(t){var e=[];return t.forEach((t=>{var n={level:0,rowCount:0,headerContent:""},i=[];t.hasSubGroups?(i=this.pullGroupListData(t.groupList),n.level=t.level,n.rowCount=i.length-t.groupList.length,n.headerContent=t.generator(t.key,n.rowCount,t.rows,t),e.push(n),e=e.concat(i)):(n.level=t.level,n.headerContent=t.generator(t.key,t.rows.length,t.rows,t),n.rowCount=t.getRows().length,e.push(n),t.getRows().forEach((t=>{e.push(t.getData("data"))})))})),e}getGroupedData(){return this.pullGroupListData(this.groupList)}getRowGroup(t){var e=!1;return this.options("dataTree")&&(t=this.table.modules.dataTree.getTreeParentRoot(t)),this.groupList.forEach((n=>{var i=n.getRowGroup(t);i&&(e=i)})),e}countGroups(){return this.groupList.length}generateGroups(t){var e=this.groups;this.groups={},this.groupList=[],this.allowedValues&&this.allowedValues[0]?(this.allowedValues[0].forEach((t=>{this.createGroup(t,0,e)})),t.forEach((t=>{this.assignRowToExistingGroup(t,e)}))):t.forEach((t=>{this.assignRowToGroup(t,e)})),Object.values(e).forEach((t=>{t.wipe(!0)}))}createGroup(t,e,n){var i,o=e+"_"+t;n=n||[],i=new ot(this,!1,e,t,this.groupIDLookups[0].field,this.headerGenerator[0],n[o]),this.groups[o]=i,this.groupList.push(i)}assignRowToExistingGroup(t,e){var n="0_"+this.groupIDLookups[0].func(t.getData());this.groups[n]&&this.groups[n].addRow(t)}assignRowToGroup(t,e){var n=this.groupIDLookups[0].func(t.getData()),i=!this.groups["0_"+n];return i&&this.createGroup(n,0,e),this.groups["0_"+n].addRow(t),!i}reassignRowToGroup(t){if("row"===t.type){var e=t.modules.group,n=e.getPath(),i=this.getExpectedPath(t);n.length==i.length&&n.every(((t,e)=>t===i[e]))||(e.removeRow(t),this.assignRowToGroup(t,this.groups),this.refreshData(!0))}}getExpectedPath(t){var e=[],n=t.getData();return this.groupIDLookups.forEach((t=>{e.push(t.func(n))})),e}updateGroupRows(t){var e=[];return this.blockRedraw||(this.groupList.forEach((t=>{e=e.concat(t.getHeadersAndRows())})),t&&this.refreshData(!0)),e}scrollHeaders(t){this.table.options.groupBy&&("virtual"===this.table.options.renderHorizontal&&(t-=this.table.columnManager.renderer.vDomPadLeft),t+="px",this.groupList.forEach((e=>{e.scrollHeader(t)})))}removeGroup(t){var e,n=t.level+"_"+t.key;this.groups[n]&&(delete this.groups[n],(e=this.groupList.indexOf(t))>-1&&this.groupList.splice(e,1))}checkBasicModeGroupHeaderWidth(){var t=this.table.rowManager.tableElement,e=!0;this.table.rowManager.getDisplayRows().forEach(((n,i)=>{this.table.rowManager.styleRow(n,i),t.appendChild(n.getElement()),n.initialize(!0),"group"!==n.type&&(e=!1)})),t.style.minWidth=e?this.table.columnManager.getWidth()+"px":""}}rt.moduleName="groupRows";class at extends E{constructor(t){super(t),this.history=[],this.index=-1,this.registerTableOption("history",!1)}initialize(){this.table.options.history&&(this.subscribe("cell-value-updated",this.cellUpdated.bind(this)),this.subscribe("cell-delete",this.clearComponentHistory.bind(this)),this.subscribe("row-delete",this.rowDeleted.bind(this)),this.subscribe("rows-wipe",this.clear.bind(this)),this.subscribe("row-added",this.rowAdded.bind(this)),this.subscribe("row-move",this.rowMoved.bind(this))),this.registerTableFunction("undo",this.undo.bind(this)),this.registerTableFunction("redo",this.redo.bind(this)),this.registerTableFunction("getHistoryUndoSize",this.getHistoryUndoSize.bind(this)),this.registerTableFunction("getHistoryRedoSize",this.getHistoryRedoSize.bind(this)),this.registerTableFunction("clearHistory",this.clear.bind(this))}rowMoved(t,e,n){this.action("rowMove",t,{posFrom:t.getPosition(),posTo:e.getPosition(),to:e,after:n})}rowAdded(t,e,n,i){this.action("rowAdd",t,{data:e,pos:n,index:i})}rowDeleted(t){var e,n;this.table.options.groupBy?(e=(n=t.getComponent().getGroup()._getSelf().rows).indexOf(t))&&(e=n[e-1]):(e=t.table.rowManager.getRowIndex(t))&&(e=t.table.rowManager.rows[e-1]),this.action("rowDelete",t,{data:t.getData(),pos:!e,index:e})}cellUpdated(t){this.action("cellEdit",t,{oldValue:t.oldValue,newValue:t.value})}clear(){this.history=[],this.index=-1}action(t,e,n){this.history=this.history.slice(0,this.index+1),this.history.push({type:t,component:e,data:n}),this.index++}getHistoryUndoSize(){return this.index+1}getHistoryRedoSize(){return this.history.length-(this.index+1)}clearComponentHistory(t){var e=this.history.findIndex((function(e){return e.component===t}));e>-1&&(this.history.splice(e,1),e<=this.index&&this.index--,this.clearComponentHistory(t))}undo(){if(this.index>-1){let t=this.history[this.index];return at.undoers[t.type].call(this,t),this.index--,this.dispatchExternal("historyUndo",t.type,t.component.getComponent(),t.data),!0}return console.warn("History Undo Error - No more history to undo"),!1}redo(){if(this.history.length-1>this.index){this.index++;let t=this.history[this.index];return at.redoers[t.type].call(this,t),this.dispatchExternal("historyRedo",t.type,t.component.getComponent(),t.data),!0}return console.warn("History Redo Error - No more history to redo"),!1}_rebindRow(t,e){this.history.forEach((function(n){if(n.component instanceof H)n.component===t&&(n.component=e);else if(n.component instanceof S&&n.component.row===t){var i=n.component.column.getField();i&&(n.component=e.getCell(i))}}))}}at.moduleName="history",at.undoers={cellEdit:function(t){t.component.setValueProcessData(t.data.oldValue),t.component.cellRendered()},rowAdd:function(t){t.component.deleteActual()},rowDelete:function(t){var e=this.table.rowManager.addRowActual(t.data.data,t.data.pos,t.data.index);this.table.options.groupBy&&this.table.modExists("groupRows")&&this.table.modules.groupRows.updateGroupRows(!0),this._rebindRow(t.component,e)},rowMove:function(t){var e=t.data.posFrom-t.data.posTo>0;this.table.rowManager.moveRowActual(t.component,this.table.rowManager.getRowFromPosition(t.data.posFrom),e),this.table.rowManager.regenerateRowPositions(),this.table.rowManager.reRenderInPosition()}},at.redoers={cellEdit:function(t){t.component.setValueProcessData(t.data.newValue),t.component.cellRendered()},rowAdd:function(t){var e=this.table.rowManager.addRowActual(t.data.data,t.data.pos,t.data.index);this.table.options.groupBy&&this.table.modExists("groupRows")&&this.table.modules.groupRows.updateGroupRows(!0),this._rebindRow(t.component,e)},rowDelete:function(t){t.component.deleteActual()},rowMove:function(t){this.table.rowManager.moveRowActual(t.component,this.table.rowManager.getRowFromPosition(t.data.posTo),t.data.after),this.table.rowManager.regenerateRowPositions(),this.table.rowManager.reRenderInPosition()}};class lt extends E{constructor(t){super(t),this.fieldIndex=[],this.hasIndex=!1}initialize(){this.tableElementCheck()}tableElementCheck(){this.table.originalElement&&"TABLE"===this.table.originalElement.tagName&&(this.table.originalElement.childNodes.length?this.parseTable():console.warn("Unable to parse data from empty table tag, Tabulator should be initialized on a div tag unless importing data from a table element."))}parseTable(){var t=this.table.originalElement,e=this.table.options,n=t.getElementsByTagName("th"),i=t.getElementsByTagName("tbody")[0],o=[];this.hasIndex=!1,this.dispatchExternal("htmlImporting"),i=i?i.getElementsByTagName("tr"):[],this._extractOptions(t,e),n.length?this._extractHeaders(n,i):this._generateBlankHeaders(n,i);for(var r=0;r<i.length;r++){var a=i[r].getElementsByTagName("td"),l={};this.hasIndex||(l[e.index]=r);for(var s=0;s<a.length;s++){var u=a[s];void 0!==this.fieldIndex[s]&&(l[this.fieldIndex[s]]=u.innerHTML)}o.push(l)}e.data=o,this.dispatchExternal("htmlImported")}_extractOptions(t,e,n){var i=t.attributes,o=n?Object.keys(n):Object.keys(e),r={};for(var a in o.forEach((t=>{r[t.toLowerCase()]=t})),i){var l,s=i[a];s&&"object"==typeof s&&s.name&&0===s.name.indexOf("tabulator-")&&(l=s.name.replace("tabulator-",""),void 0!==r[l]&&(e[r[l]]=this._attribValue(s.value)))}}_attribValue(t){return"true"===t||"false"!==t&&t}_findCol(t){return this.table.options.columns.find((e=>e.title===t))||!1}_extractHeaders(t,e){for(var n=0;n<t.length;n++){var i,o=t[n],r=!1,a=this._findCol(o.textContent);a?r=!0:a={title:o.textContent.trim()},a.field||(a.field=o.textContent.trim().toLowerCase().replaceAll(" ","_")),(i=o.getAttribute("width"))&&!a.width&&(a.width=i),this._extractOptions(o,a,this.table.columnManager.optionsList.registeredDefaults),this.fieldIndex[n]=a.field,a.field==this.table.options.index&&(this.hasIndex=!0),r||this.table.options.columns.push(a)}}_generateBlankHeaders(t,e){for(var n=0;n<t.length;n++){var i=t[n],o={title:"",field:"col"+n};this.fieldIndex[n]=o.field;var r=i.getAttribute("width");r&&(o.width=r),this.table.options.columns.push(o)}}}lt.moduleName="htmlTableImport";var st={csv:function(t){var e=[],n=0,i=0,o=!1;for(let r=0;r<t.length;r++){let a=t[r],l=t[r+1];e[n]||(e[n]=[]),e[n][i]||(e[n][i]=""),'"'==a&&o&&'"'==l?(e[n][i]+=a,r++):'"'!=a?","!=a||o?"\r"!=a||"\n"!=l||o?"\r"!=a&&"\n"!=a||o?e[n][i]+=a:(i=0,n++):(i=0,n++,r++):i++:o=!o}return e},json:function(t){try{return JSON.parse(t)}catch(t){return console.warn("JSON Import Error - File contents is invalid JSON",t),Promise.reject()}},array:function(t){return t}};class ut extends E{constructor(t){super(t),this.registerTableOption("importFormat"),this.registerTableOption("importReader","text")}initialize(){this.registerTableFunction("import",this.importFromFile.bind(this)),this.table.options.importFormat&&(this.subscribe("data-loading",this.loadDataCheck.bind(this),10),this.subscribe("data-load",this.loadData.bind(this),10))}loadDataCheck(t){return this.table.options.importFormat&&("string"==typeof t||Array.isArray(t)&&t.length&&Array.isArray(t))}loadData(t,e,n,i,o){return this.importData(this.lookupImporter(),t).then(this.structureData.bind(this)).catch((t=>(console.error("Import Error:",t||"Unable to import data"),Promise.reject(t))))}lookupImporter(t){var e;return t||(t=this.table.options.importFormat),(e="string"==typeof t?ut.importers[t]:t)||console.error("Import Error - Importer not found:",t),e}importFromFile(t,e){var n=this.lookupImporter(t);if(n)return this.pickFile(e).then(this.importData.bind(this,n)).then(this.structureData.bind(this)).then(this.setData.bind(this)).catch((t=>(console.error("Import Error:",t||"Unable to import file"),Promise.reject(t))))}pickFile(t){return new Promise(((e,n)=>{var i=document.createElement("input");i.type="file",i.accept=t,i.addEventListener("change",(t=>{var o=i.files[0],r=new FileReader;switch(this.table.options.importReader){case"buffer":r.readAsArrayBuffer(o);break;case"binary":r.readAsBinaryString(o);break;case"url":r.readAsDataURL(o);break;default:r.readAsText(o)}r.onload=t=>{e(r.result)},r.onerror=t=>{console.warn("File Load Error - Unable to read file"),n()}})),i.click()}))}importData(t,e){var n=t.call(this.table,e);return n instanceof Promise?n:n?Promise.resolve(n):Promise.reject()}structureData(t){return Array.isArray(t)&&t.length&&Array.isArray(t[0])?this.table.options.autoColumns?this.structureArrayToObject(t):this.structureArrayToColumns(t):t}structureArrayToObject(t){var e=t.shift();return t.map((t=>{var n={};return e.forEach(((e,i)=>{n[e]=t[i]})),n}))}structureArrayToColumns(t){var e=[],n=this.table.getColumns();return n[0]&&t[0][0]&&n[0].getDefinition().title===t[0][0]&&t.shift(),t.forEach((t=>{var i={};t.forEach(((t,e)=>{var o=n[e];o&&(i[o.getField()]=t)})),e.push(i)})),e}setData(t){return this.table.setData(t)}}ut.moduleName="import",ut.importers=st;class ht extends E{constructor(t){super(t),this.eventMap={rowClick:"row-click",rowDblClick:"row-dblclick",rowContext:"row-contextmenu",rowMouseEnter:"row-mouseenter",rowMouseLeave:"row-mouseleave",rowMouseOver:"row-mouseover",rowMouseOut:"row-mouseout",rowMouseMove:"row-mousemove",rowMouseDown:"row-mousedown",rowMouseUp:"row-mouseup",rowTap:"row",rowDblTap:"row",rowTapHold:"row",cellClick:"cell-click",cellDblClick:"cell-dblclick",cellContext:"cell-contextmenu",cellMouseEnter:"cell-mouseenter",cellMouseLeave:"cell-mouseleave",cellMouseOver:"cell-mouseover",cellMouseOut:"cell-mouseout",cellMouseMove:"cell-mousemove",cellMouseDown:"cell-mousedown",cellMouseUp:"cell-mouseup",cellTap:"cell",cellDblTap:"cell",cellTapHold:"cell",headerClick:"column-click",headerDblClick:"column-dblclick",headerContext:"column-contextmenu",headerMouseEnter:"column-mouseenter",headerMouseLeave:"column-mouseleave",headerMouseOver:"column-mouseover",headerMouseOut:"column-mouseout",headerMouseMove:"column-mousemove",headerMouseDown:"column-mousedown",headerMouseUp:"column-mouseup",headerTap:"column",headerDblTap:"column",headerTapHold:"column",groupClick:"group-click",groupDblClick:"group-dblclick",groupContext:"group-contextmenu",groupMouseEnter:"group-mouseenter",groupMouseLeave:"group-mouseleave",groupMouseOver:"group-mouseover",groupMouseOut:"group-mouseout",groupMouseMove:"group-mousemove",groupMouseDown:"group-mousedown",groupMouseUp:"group-mouseup",groupTap:"group",groupDblTap:"group",groupTapHold:"group"},this.subscribers={},this.touchSubscribers={},this.columnSubscribers={},this.touchWatchers={row:{tap:null,tapDbl:null,tapHold:null},cell:{tap:null,tapDbl:null,tapHold:null},column:{tap:null,tapDbl:null,tapHold:null},group:{tap:null,tapDbl:null,tapHold:null}},this.registerColumnOption("headerClick"),this.registerColumnOption("headerDblClick"),this.registerColumnOption("headerContext"),this.registerColumnOption("headerMouseEnter"),this.registerColumnOption("headerMouseLeave"),this.registerColumnOption("headerMouseOver"),this.registerColumnOption("headerMouseOut"),this.registerColumnOption("headerMouseMove"),this.registerColumnOption("headerMouseDown"),this.registerColumnOption("headerMouseUp"),this.registerColumnOption("headerTap"),this.registerColumnOption("headerDblTap"),this.registerColumnOption("headerTapHold"),this.registerColumnOption("cellClick"),this.registerColumnOption("cellDblClick"),this.registerColumnOption("cellContext"),this.registerColumnOption("cellMouseEnter"),this.registerColumnOption("cellMouseLeave"),this.registerColumnOption("cellMouseOver"),this.registerColumnOption("cellMouseOut"),this.registerColumnOption("cellMouseMove"),this.registerColumnOption("cellMouseDown"),this.registerColumnOption("cellMouseUp"),this.registerColumnOption("cellTap"),this.registerColumnOption("cellDblTap"),this.registerColumnOption("cellTapHold")}initialize(){this.initializeExternalEvents(),this.subscribe("column-init",this.initializeColumn.bind(this)),this.subscribe("cell-dblclick",this.cellContentsSelectionFixer.bind(this)),this.subscribe("scroll-horizontal",this.clearTouchWatchers.bind(this)),this.subscribe("scroll-vertical",this.clearTouchWatchers.bind(this))}clearTouchWatchers(){Object.values(this.touchWatchers).forEach((t=>{for(let e in t)t[e]=null}))}cellContentsSelectionFixer(t,e){var n;if(!this.table.modExists("edit")||this.table.modules.edit.currentCell!==e){t.preventDefault();try{document.selection?((n=document.body.createTextRange()).moveToElementText(e.getElement()),n.select()):window.getSelection&&((n=document.createRange()).selectNode(e.getElement()),window.getSelection().removeAllRanges(),window.getSelection().addRange(n))}catch(t){}}}initializeExternalEvents(){for(let t in this.eventMap)this.subscriptionChangeExternal(t,this.subscriptionChanged.bind(this,t))}subscriptionChanged(t,e){e?this.subscribers[t]||(this.eventMap[t].includes("-")?(this.subscribers[t]=this.handle.bind(this,t),this.subscribe(this.eventMap[t],this.subscribers[t])):this.subscribeTouchEvents(t)):this.eventMap[t].includes("-")?!this.subscribers[t]||this.columnSubscribers[t]||this.subscribedExternal(t)||(this.unsubscribe(this.eventMap[t],this.subscribers[t]),delete this.subscribers[t]):this.unsubscribeTouchEvents(t)}subscribeTouchEvents(t){var e=this.eventMap[t];this.touchSubscribers[e+"-touchstart"]||(this.touchSubscribers[e+"-touchstart"]=this.handleTouch.bind(this,e,"start"),this.touchSubscribers[e+"-touchend"]=this.handleTouch.bind(this,e,"end"),this.subscribe(e+"-touchstart",this.touchSubscribers[e+"-touchstart"]),this.subscribe(e+"-touchend",this.touchSubscribers[e+"-touchend"])),this.subscribers[t]=!0}unsubscribeTouchEvents(t){var e=!0,n=this.eventMap[t];if(this.subscribers[t]&&!this.subscribedExternal(t)){delete this.subscribers[t];for(let t in this.eventMap)this.eventMap[t]===n&&this.subscribers[t]&&(e=!1);e&&(this.unsubscribe(n+"-touchstart",this.touchSubscribers[n+"-touchstart"]),this.unsubscribe(n+"-touchend",this.touchSubscribers[n+"-touchend"]),delete this.touchSubscribers[n+"-touchstart"],delete this.touchSubscribers[n+"-touchend"])}}initializeColumn(t){var e=t.definition;for(let n in this.eventMap)e[n]&&(this.subscriptionChanged(n,!0),this.columnSubscribers[n]||(this.columnSubscribers[n]=[]),this.columnSubscribers[n].push(t))}handle(t,e,n){this.dispatchEvent(t,e,n)}handleTouch(t,e,n,i){var o=this.touchWatchers[t];switch("column"===t&&(t="header"),e){case"start":o.tap=!0,clearTimeout(o.tapHold),o.tapHold=setTimeout((()=>{clearTimeout(o.tapHold),o.tapHold=null,o.tap=null,clearTimeout(o.tapDbl),o.tapDbl=null,this.dispatchEvent(t+"TapHold",n,i)}),1e3);break;case"end":o.tap&&(o.tap=null,this.dispatchEvent(t+"Tap",n,i)),o.tapDbl?(clearTimeout(o.tapDbl),o.tapDbl=null,this.dispatchEvent(t+"DblTap",n,i)):o.tapDbl=setTimeout((()=>{clearTimeout(o.tapDbl),o.tapDbl=null}),300),clearTimeout(o.tapHold),o.tapHold=null}}dispatchEvent(t,e,n){var i,o=n.getComponent();this.columnSubscribers[t]&&(n instanceof S?i=n.column.definition[t]:n instanceof I&&(i=n.definition[t]),i&&i(e,o)),this.dispatchExternal(t,e,o)}}ht.moduleName="interaction";class ct extends E{constructor(t){super(t),this.watchKeys=null,this.pressedKeys=null,this.keyupBinding=!1,this.keydownBinding=!1,this.registerTableOption("keybindings",{}),this.registerTableOption("tabEndNewRow",!1)}initialize(){var t=this.table.options.keybindings,e={};this.watchKeys={},this.pressedKeys=[],!1!==t&&(Object.assign(e,ct.bindings),Object.assign(e,t),this.mapBindings(e),this.bindEvents()),this.subscribe("table-destroy",this.clearBindings.bind(this))}mapBindings(t){for(let e in t)ct.actions[e]?t[e]&&("object"!=typeof t[e]&&(t[e]=[t[e]]),t[e].forEach((t=>{(Array.isArray(t)?t:[t]).forEach((t=>{this.mapBinding(e,t)}))}))):console.warn("Key Binding Error - no such action:",e)}mapBinding(t,e){var n={action:ct.actions[t],keys:[],ctrl:!1,shift:!1,meta:!1};e.toString().toLowerCase().split(" ").join("").split("+").forEach((t=>{switch(t){case"ctrl":n.ctrl=!0;break;case"shift":n.shift=!0;break;case"meta":n.meta=!0;break;default:t=isNaN(t)?t.toUpperCase().charCodeAt(0):parseInt(t),n.keys.push(t),this.watchKeys[t]||(this.watchKeys[t]=[]),this.watchKeys[t].push(n)}}))}bindEvents(){var t=this;this.keyupBinding=function(e){var n=e.keyCode,i=t.watchKeys[n];i&&(t.pressedKeys.push(n),i.forEach((function(n){t.checkBinding(e,n)})))},this.keydownBinding=function(e){var n=e.keyCode;if(t.watchKeys[n]){var i=t.pressedKeys.indexOf(n);i>-1&&t.pressedKeys.splice(i,1)}},this.table.element.addEventListener("keydown",this.keyupBinding),this.table.element.addEventListener("keyup",this.keydownBinding)}clearBindings(){this.keyupBinding&&this.table.element.removeEventListener("keydown",this.keyupBinding),this.keydownBinding&&this.table.element.removeEventListener("keyup",this.keydownBinding)}checkBinding(t,e){var n=!0;return t.ctrlKey==e.ctrl&&t.shiftKey==e.shift&&t.metaKey==e.meta&&(e.keys.forEach((t=>{-1==this.pressedKeys.indexOf(t)&&(n=!1)})),n&&e.action.call(this,t),!0)}}ct.moduleName="keybindings",ct.bindings={navPrev:"shift + 9",navNext:9,navUp:38,navDown:40,scrollPageUp:33,scrollPageDown:34,scrollToStart:36,scrollToEnd:35,undo:["ctrl + 90","meta + 90"],redo:["ctrl + 89","meta + 89"],copyToClipboard:["ctrl + 67","meta + 67"]},ct.actions={keyBlock:function(t){t.stopPropagation(),t.preventDefault()},scrollPageUp:function(t){var e=this.table.rowManager,n=e.scrollTop-e.element.clientHeight;t.preventDefault(),e.displayRowsCount&&(n>=0?e.element.scrollTop=n:e.scrollToRow(e.getDisplayRows()[0])),this.table.element.focus()},scrollPageDown:function(t){var e=this.table.rowManager,n=e.scrollTop+e.element.clientHeight,i=e.element.scrollHeight;t.preventDefault(),e.displayRowsCount&&(n<=i?e.element.scrollTop=n:e.scrollToRow(e.getDisplayRows()[e.displayRowsCount-1])),this.table.element.focus()},scrollToStart:function(t){var e=this.table.rowManager;t.preventDefault(),e.displayRowsCount&&e.scrollToRow(e.getDisplayRows()[0]),this.table.element.focus()},scrollToEnd:function(t){var e=this.table.rowManager;t.preventDefault(),e.displayRowsCount&&e.scrollToRow(e.getDisplayRows()[e.displayRowsCount-1]),this.table.element.focus()},navPrev:function(t){this.dispatch("keybinding-nav-prev",t)},navNext:function(t){this.dispatch("keybinding-nav-next",t)},navLeft:function(t){this.dispatch("keybinding-nav-left",t)},navRight:function(t){this.dispatch("keybinding-nav-right",t)},navUp:function(t){this.dispatch("keybinding-nav-up",t)},navDown:function(t){this.dispatch("keybinding-nav-down",t)},undo:function(t){this.table.options.history&&this.table.modExists("history")&&this.table.modExists("edit")&&(this.table.modules.edit.currentCell||(t.preventDefault(),this.table.modules.history.undo()))},redo:function(t){this.table.options.history&&this.table.modExists("history")&&this.table.modExists("edit")&&(this.table.modules.edit.currentCell||(t.preventDefault(),this.table.modules.history.redo()))},copyToClipboard:function(t){this.table.modules.edit.currentCell||this.table.modExists("clipboard",!0)&&this.table.modules.clipboard.copy(!1,!0)}};class dt extends E{constructor(t){super(t),this.menuContainer=null,this.nestedMenuBlock=!1,this.currentComponent=null,this.rootPopup=null,this.columnSubscribers={},this.registerTableOption("menuContainer",void 0),this.registerTableOption("rowContextMenu",!1),this.registerTableOption("rowClickMenu",!1),this.registerTableOption("rowDblClickMenu",!1),this.registerTableOption("groupContextMenu",!1),this.registerTableOption("groupClickMenu",!1),this.registerTableOption("groupDblClickMenu",!1),this.registerColumnOption("headerContextMenu"),this.registerColumnOption("headerClickMenu"),this.registerColumnOption("headerDblClickMenu"),this.registerColumnOption("headerMenu"),this.registerColumnOption("headerMenuIcon"),this.registerColumnOption("contextMenu"),this.registerColumnOption("clickMenu"),this.registerColumnOption("dblClickMenu")}initialize(){this.deprecatedOptionsCheck(),this.initializeRowWatchers(),this.initializeGroupWatchers(),this.subscribe("column-init",this.initializeColumn.bind(this))}deprecatedOptionsCheck(){this.deprecationCheck("menuContainer","popupContainer")||(this.table.options.popupContainer=this.table.options.menuContainer)}initializeRowWatchers(){this.table.options.rowContextMenu&&(this.subscribe("row-contextmenu",this.loadMenuEvent.bind(this,this.table.options.rowContextMenu)),this.table.on("rowTapHold",this.loadMenuEvent.bind(this,this.table.options.rowContextMenu))),this.table.options.rowClickMenu&&this.subscribe("row-click",this.loadMenuEvent.bind(this,this.table.options.rowClickMenu)),this.table.options.rowDblClickMenu&&this.subscribe("row-dblclick",this.loadMenuEvent.bind(this,this.table.options.rowDblClickMenu))}initializeGroupWatchers(){this.table.options.groupContextMenu&&(this.subscribe("group-contextmenu",this.loadMenuEvent.bind(this,this.table.options.groupContextMenu)),this.table.on("groupTapHold",this.loadMenuEvent.bind(this,this.table.options.groupContextMenu))),this.table.options.groupClickMenu&&this.subscribe("group-click",this.loadMenuEvent.bind(this,this.table.options.groupClickMenu)),this.table.options.groupDblClickMenu&&this.subscribe("group-dblclick",this.loadMenuEvent.bind(this,this.table.options.groupDblClickMenu))}initializeColumn(t){var e=t.definition;e.headerContextMenu&&!this.columnSubscribers.headerContextMenu&&(this.columnSubscribers.headerContextMenu=this.loadMenuTableColumnEvent.bind(this,"headerContextMenu"),this.subscribe("column-contextmenu",this.columnSubscribers.headerContextMenu),this.table.on("headerTapHold",this.loadMenuTableColumnEvent.bind(this,"headerContextMenu"))),e.headerClickMenu&&!this.columnSubscribers.headerClickMenu&&(this.columnSubscribers.headerClickMenu=this.loadMenuTableColumnEvent.bind(this,"headerClickMenu"),this.subscribe("column-click",this.columnSubscribers.headerClickMenu)),e.headerDblClickMenu&&!this.columnSubscribers.headerDblClickMenu&&(this.columnSubscribers.headerDblClickMenu=this.loadMenuTableColumnEvent.bind(this,"headerDblClickMenu"),this.subscribe("column-dblclick",this.columnSubscribers.headerDblClickMenu)),e.headerMenu&&this.initializeColumnHeaderMenu(t),e.contextMenu&&!this.columnSubscribers.contextMenu&&(this.columnSubscribers.contextMenu=this.loadMenuTableCellEvent.bind(this,"contextMenu"),this.subscribe("cell-contextmenu",this.columnSubscribers.contextMenu),this.table.on("cellTapHold",this.loadMenuTableCellEvent.bind(this,"contextMenu"))),e.clickMenu&&!this.columnSubscribers.clickMenu&&(this.columnSubscribers.clickMenu=this.loadMenuTableCellEvent.bind(this,"clickMenu"),this.subscribe("cell-click",this.columnSubscribers.clickMenu)),e.dblClickMenu&&!this.columnSubscribers.dblClickMenu&&(this.columnSubscribers.dblClickMenu=this.loadMenuTableCellEvent.bind(this,"dblClickMenu"),this.subscribe("cell-dblclick",this.columnSubscribers.dblClickMenu))}initializeColumnHeaderMenu(t){var e,n=t.definition.headerMenuIcon;(e=document.createElement("span")).classList.add("tabulator-header-popup-button"),n?("function"==typeof n&&(n=n(t.getComponent())),n instanceof HTMLElement?e.appendChild(n):e.innerHTML=n):e.innerHTML="&vellip;",e.addEventListener("click",(e=>{e.stopPropagation(),e.preventDefault(),this.loadMenuEvent(t.definition.headerMenu,e,t)})),t.titleElement.insertBefore(e,t.titleElement.firstChild)}loadMenuTableCellEvent(t,e,n){n._cell&&(n=n._cell),n.column.definition[t]&&this.loadMenuEvent(n.column.definition[t],e,n)}loadMenuTableColumnEvent(t,e,n){n._column&&(n=n._column),n.definition[t]&&this.loadMenuEvent(n.definition[t],e,n)}loadMenuEvent(t,e,n){n._group?n=n._group:n._row&&(n=n._row),t="function"==typeof t?t.call(this.table,e,n.getComponent()):t,this.loadMenu(e,n,t)}loadMenu(t,e,n,i,o){var r,a=!(t instanceof MouseEvent),l=document.createElement("div");if(l.classList.add("tabulator-menu"),a||t.preventDefault(),n&&n.length){if(i)r=o.child(l);else{if(this.nestedMenuBlock){if(this.rootPopup)return}else this.nestedMenuBlock=setTimeout((()=>{this.nestedMenuBlock=!1}),100);this.rootPopup&&this.rootPopup.hide(),this.rootPopup=r=this.popup(l)}n.forEach((t=>{var n=document.createElement("div"),i=t.label,o=t.disabled;t.separator?n.classList.add("tabulator-menu-separator"):(n.classList.add("tabulator-menu-item"),"function"==typeof i&&(i=i.call(this.table,e.getComponent())),i instanceof Node?n.appendChild(i):n.innerHTML=i,"function"==typeof o&&(o=o.call(this.table,e.getComponent())),o?(n.classList.add("tabulator-menu-item-disabled"),n.addEventListener("click",(t=>{t.stopPropagation()}))):t.menu&&t.menu.length?n.addEventListener("click",(i=>{i.stopPropagation(),this.loadMenu(i,e,t.menu,n,r)})):t.action&&n.addEventListener("click",(n=>{t.action(n,e.getComponent())})),t.menu&&t.menu.length&&n.classList.add("tabulator-menu-item-submenu")),l.appendChild(n)})),l.addEventListener("click",(t=>{this.rootPopup&&this.rootPopup.hide()})),r.show(i||t),r===this.rootPopup&&(this.rootPopup.hideOnBlur((()=>{this.rootPopup=null,this.currentComponent&&(this.dispatchExternal("menuClosed",this.currentComponent.getComponent()),this.currentComponent=null)})),this.currentComponent=e,this.dispatchExternal("menuOpened",e.getComponent()))}}}dt.moduleName="menu";class pt extends E{constructor(t){super(t),this.placeholderElement=this.createPlaceholderElement(),this.hoverElement=!1,this.checkTimeout=!1,this.checkPeriod=250,this.moving=!1,this.toCol=!1,this.toColAfter=!1,this.startX=0,this.autoScrollMargin=40,this.autoScrollStep=5,this.autoScrollTimeout=!1,this.touchMove=!1,this.moveHover=this.moveHover.bind(this),this.endMove=this.endMove.bind(this),this.registerTableOption("movableColumns",!1)}createPlaceholderElement(){var t=document.createElement("div");return t.classList.add("tabulator-col"),t.classList.add("tabulator-col-placeholder"),t}initialize(){this.table.options.movableColumns&&this.subscribe("column-init",this.initializeColumn.bind(this))}initializeColumn(t){var e,n=this,i={};t.modules.frozen||t.isGroup||(e=t.getElement(),i.mousemove=function(i){t.parent===n.moving.parent&&((n.touchMove?i.touches[0].pageX:i.pageX)-w.elOffset(e).left+n.table.columnManager.contentsElement.scrollLeft>t.getWidth()/2?n.toCol===t&&n.toColAfter||(e.parentNode.insertBefore(n.placeholderElement,e.nextSibling),n.moveColumn(t,!0)):(n.toCol!==t||n.toColAfter)&&(e.parentNode.insertBefore(n.placeholderElement,e),n.moveColumn(t,!1)))}.bind(n),e.addEventListener("mousedown",(function(e){n.touchMove=!1,1===e.which&&(n.checkTimeout=setTimeout((function(){n.startMove(e,t)}),n.checkPeriod))})),e.addEventListener("mouseup",(function(t){1===t.which&&n.checkTimeout&&clearTimeout(n.checkTimeout)})),n.bindTouchEvents(t)),t.modules.moveColumn=i}bindTouchEvents(t){var e,n,i,o,r,a,l=t.getElement(),s=!1;l.addEventListener("touchstart",(l=>{this.checkTimeout=setTimeout((()=>{this.touchMove=!0,e=t.nextColumn(),i=e?e.getWidth()/2:0,n=t.prevColumn(),o=n?n.getWidth()/2:0,r=0,a=0,s=!1,this.startMove(l,t)}),this.checkPeriod)}),{passive:!0}),l.addEventListener("touchmove",(l=>{var u,h;this.moving&&(this.moveHover(l),s||(s=l.touches[0].pageX),(u=l.touches[0].pageX-s)>0?e&&u-r>i&&(h=e)!==t&&(s=l.touches[0].pageX,h.getElement().parentNode.insertBefore(this.placeholderElement,h.getElement().nextSibling),this.moveColumn(h,!0)):n&&-u-a>o&&(h=n)!==t&&(s=l.touches[0].pageX,h.getElement().parentNode.insertBefore(this.placeholderElement,h.getElement()),this.moveColumn(h,!1)),h&&(e=h.nextColumn(),r=i,i=e?e.getWidth()/2:0,n=h.prevColumn(),a=o,o=n?n.getWidth()/2:0))}),{passive:!0}),l.addEventListener("touchend",(t=>{this.checkTimeout&&clearTimeout(this.checkTimeout),this.moving&&this.endMove(t)}))}startMove(t,e){var n=e.getElement(),i=this.table.columnManager.getContentsElement(),o=this.table.columnManager.getHeadersElement();this.moving=e,this.startX=(this.touchMove?t.touches[0].pageX:t.pageX)-w.elOffset(n).left,this.table.element.classList.add("tabulator-block-select"),this.placeholderElement.style.width=e.getWidth()+"px",this.placeholderElement.style.height=e.getHeight()+"px",n.parentNode.insertBefore(this.placeholderElement,n),n.parentNode.removeChild(n),this.hoverElement=n.cloneNode(!0),this.hoverElement.classList.add("tabulator-moving"),i.appendChild(this.hoverElement),this.hoverElement.style.left="0",this.hoverElement.style.bottom=i.clientHeight-o.offsetHeight+"px",this.touchMove||(this._bindMouseMove(),document.body.addEventListener("mousemove",this.moveHover),document.body.addEventListener("mouseup",this.endMove)),this.moveHover(t)}_bindMouseMove(){this.table.columnManager.columnsByIndex.forEach((function(t){t.modules.moveColumn.mousemove&&t.getElement().addEventListener("mousemove",t.modules.moveColumn.mousemove)}))}_unbindMouseMove(){this.table.columnManager.columnsByIndex.forEach((function(t){t.modules.moveColumn.mousemove&&t.getElement().removeEventListener("mousemove",t.modules.moveColumn.mousemove)}))}moveColumn(t,e){var n=this.moving.getCells();this.toCol=t,this.toColAfter=e,e?t.getCells().forEach((function(t,e){var i=t.getElement(!0);i.parentNode&&n[e]&&i.parentNode.insertBefore(n[e].getElement(),i.nextSibling)})):t.getCells().forEach((function(t,e){var i=t.getElement(!0);i.parentNode&&n[e]&&i.parentNode.insertBefore(n[e].getElement(),i)}))}endMove(t){(1===t.which||this.touchMove)&&(this._unbindMouseMove(),this.placeholderElement.parentNode.insertBefore(this.moving.getElement(),this.placeholderElement.nextSibling),this.placeholderElement.parentNode.removeChild(this.placeholderElement),this.hoverElement.parentNode.removeChild(this.hoverElement),this.table.element.classList.remove("tabulator-block-select"),this.toCol&&this.table.columnManager.moveColumnActual(this.moving,this.toCol,this.toColAfter),this.moving=!1,this.toCol=!1,this.toColAfter=!1,this.touchMove||(document.body.removeEventListener("mousemove",this.moveHover),document.body.removeEventListener("mouseup",this.endMove)))}moveHover(t){var e,n=this.table.columnManager.getContentsElement(),i=n.scrollLeft,o=(this.touchMove?t.touches[0].pageX:t.pageX)-w.elOffset(n).left+i;this.hoverElement.style.left=o-this.startX+"px",o-i<this.autoScrollMargin&&(this.autoScrollTimeout||(this.autoScrollTimeout=setTimeout((()=>{e=Math.max(0,i-5),this.table.rowManager.getElement().scrollLeft=e,this.autoScrollTimeout=!1}),1))),i+n.clientWidth-o<this.autoScrollMargin&&(this.autoScrollTimeout||(this.autoScrollTimeout=setTimeout((()=>{e=Math.min(n.clientWidth,i+5),this.table.rowManager.getElement().scrollLeft=e,this.autoScrollTimeout=!1}),1)))}}pt.moduleName="moveColumn";class bt extends E{constructor(t){super(t),this.placeholderElement=this.createPlaceholderElement(),this.hoverElement=!1,this.checkTimeout=!1,this.checkPeriod=150,this.moving=!1,this.toRow=!1,this.toRowAfter=!1,this.hasHandle=!1,this.startY=0,this.startX=0,this.moveHover=this.moveHover.bind(this),this.endMove=this.endMove.bind(this),this.tableRowDropEvent=!1,this.touchMove=!1,this.connection=!1,this.connectionSelectorsTables=!1,this.connectionSelectorsElements=!1,this.connectionElements=[],this.connections=[],this.connectedTable=!1,this.connectedRow=!1,this.registerTableOption("movableRows",!1),this.registerTableOption("movableRowsConnectedTables",!1),this.registerTableOption("movableRowsConnectedElements",!1),this.registerTableOption("movableRowsSender",!1),this.registerTableOption("movableRowsReceiver","insert"),this.registerColumnOption("rowHandle")}createPlaceholderElement(){var t=document.createElement("div");return t.classList.add("tabulator-row"),t.classList.add("tabulator-row-placeholder"),t}initialize(){this.table.options.movableRows&&(this.connectionSelectorsTables=this.table.options.movableRowsConnectedTables,this.connectionSelectorsElements=this.table.options.movableRowsConnectedElements,this.connection=this.connectionSelectorsTables||this.connectionSelectorsElements,this.subscribe("cell-init",this.initializeCell.bind(this)),this.subscribe("column-init",this.initializeColumn.bind(this)),this.subscribe("row-init",this.initializeRow.bind(this)))}initializeGroupHeader(t){var e=this,n={};n.mouseup=function(n){e.tableRowDrop(n,t)}.bind(e),n.mousemove=function(n){var i;n.pageY-w.elOffset(t.element).top+e.table.rowManager.element.scrollTop>t.getHeight()/2?e.toRow===t&&e.toRowAfter||((i=t.getElement()).parentNode.insertBefore(e.placeholderElement,i.nextSibling),e.moveRow(t,!0)):(e.toRow!==t||e.toRowAfter)&&(i=t.getElement()).previousSibling&&(i.parentNode.insertBefore(e.placeholderElement,i),e.moveRow(t,!1))}.bind(e),t.modules.moveRow=n}initializeRow(t){var e,n=this,i={};i.mouseup=function(e){n.tableRowDrop(e,t)}.bind(n),i.mousemove=function(e){var i=t.getElement();e.pageY-w.elOffset(i).top+n.table.rowManager.element.scrollTop>t.getHeight()/2?n.toRow===t&&n.toRowAfter||(i.parentNode.insertBefore(n.placeholderElement,i.nextSibling),n.moveRow(t,!0)):(n.toRow!==t||n.toRowAfter)&&(i.parentNode.insertBefore(n.placeholderElement,i),n.moveRow(t,!1))}.bind(n),this.hasHandle||((e=t.getElement()).addEventListener("mousedown",(function(e){1===e.which&&(n.checkTimeout=setTimeout((function(){n.startMove(e,t)}),n.checkPeriod))})),e.addEventListener("mouseup",(function(t){1===t.which&&n.checkTimeout&&clearTimeout(n.checkTimeout)})),this.bindTouchEvents(t,t.getElement())),t.modules.moveRow=i}initializeColumn(t){t.definition.rowHandle&&!1!==this.table.options.movableRows&&(this.hasHandle=!0)}initializeCell(t){if(t.column.definition.rowHandle&&!1!==this.table.options.movableRows){var e=this,n=t.getElement(!0);n.addEventListener("mousedown",(function(n){1===n.which&&(e.checkTimeout=setTimeout((function(){e.startMove(n,t.row)}),e.checkPeriod))})),n.addEventListener("mouseup",(function(t){1===t.which&&e.checkTimeout&&clearTimeout(e.checkTimeout)})),this.bindTouchEvents(t.row,n)}}bindTouchEvents(t,e){var n,i,o,r,a,l,s=!1;e.addEventListener("touchstart",(e=>{this.checkTimeout=setTimeout((()=>{this.touchMove=!0,n=t.nextRow(),o=n?n.getHeight()/2:0,i=t.prevRow(),r=i?i.getHeight()/2:0,a=0,l=0,s=!1,this.startMove(e,t)}),this.checkPeriod)}),{passive:!0}),this.moving,this.toRow,this.toRowAfter,e.addEventListener("touchmove",(e=>{var u,h;this.moving&&(e.preventDefault(),this.moveHover(e),s||(s=e.touches[0].pageY),(u=e.touches[0].pageY-s)>0?n&&u-a>o&&(h=n)!==t&&(s=e.touches[0].pageY,h.getElement().parentNode.insertBefore(this.placeholderElement,h.getElement().nextSibling),this.moveRow(h,!0)):i&&-u-l>r&&(h=i)!==t&&(s=e.touches[0].pageY,h.getElement().parentNode.insertBefore(this.placeholderElement,h.getElement()),this.moveRow(h,!1)),h&&(n=h.nextRow(),a=o,o=n?n.getHeight()/2:0,i=h.prevRow(),l=r,r=i?i.getHeight()/2:0))})),e.addEventListener("touchend",(t=>{this.checkTimeout&&clearTimeout(this.checkTimeout),this.moving&&(this.endMove(t),this.touchMove=!1)}))}_bindMouseMove(){this.table.rowManager.getDisplayRows().forEach((t=>{("row"===t.type||"group"===t.type)&&t.modules.moveRow&&t.modules.moveRow.mousemove&&t.getElement().addEventListener("mousemove",t.modules.moveRow.mousemove)}))}_unbindMouseMove(){this.table.rowManager.getDisplayRows().forEach((t=>{("row"===t.type||"group"===t.type)&&t.modules.moveRow&&t.modules.moveRow.mousemove&&t.getElement().removeEventListener("mousemove",t.modules.moveRow.mousemove)}))}startMove(t,e){var n=e.getElement();this.setStartPosition(t,e),this.moving=e,this.table.element.classList.add("tabulator-block-select"),this.placeholderElement.style.width=e.getWidth()+"px",this.placeholderElement.style.height=e.getHeight()+"px",this.connection?(this.table.element.classList.add("tabulator-movingrow-sending"),this.connectToTables(e)):(n.parentNode.insertBefore(this.placeholderElement,n),n.parentNode.removeChild(n)),this.hoverElement=n.cloneNode(!0),this.hoverElement.classList.add("tabulator-moving"),this.connection?(document.body.appendChild(this.hoverElement),this.hoverElement.style.left="0",this.hoverElement.style.top="0",this.hoverElement.style.width=this.table.element.clientWidth+"px",this.hoverElement.style.whiteSpace="nowrap",this.hoverElement.style.overflow="hidden",this.hoverElement.style.pointerEvents="none"):(this.table.rowManager.getTableElement().appendChild(this.hoverElement),this.hoverElement.style.left="0",this.hoverElement.style.top="0",this._bindMouseMove()),document.body.addEventListener("mousemove",this.moveHover),document.body.addEventListener("mouseup",this.endMove),this.dispatchExternal("rowMoving",e.getComponent()),this.moveHover(t)}setStartPosition(t,e){var n,i,o=this.touchMove?t.touches[0].pageX:t.pageX,r=this.touchMove?t.touches[0].pageY:t.pageY;n=e.getElement(),this.connection?(i=n.getBoundingClientRect(),this.startX=i.left-o+window.pageXOffset,this.startY=i.top-r+window.pageYOffset):this.startY=r-n.getBoundingClientRect().top}endMove(t){t&&1!==t.which&&!this.touchMove||(this._unbindMouseMove(),this.connection||(this.placeholderElement.parentNode.insertBefore(this.moving.getElement(),this.placeholderElement.nextSibling),this.placeholderElement.parentNode.removeChild(this.placeholderElement)),this.hoverElement.parentNode.removeChild(this.hoverElement),this.table.element.classList.remove("tabulator-block-select"),this.toRow?this.table.rowManager.moveRow(this.moving,this.toRow,this.toRowAfter):this.dispatchExternal("rowMoveCancelled",this.moving.getComponent()),this.moving=!1,this.toRow=!1,this.toRowAfter=!1,document.body.removeEventListener("mousemove",this.moveHover),document.body.removeEventListener("mouseup",this.endMove),this.connection&&(this.table.element.classList.remove("tabulator-movingrow-sending"),this.disconnectFromTables()))}moveRow(t,e){this.toRow=t,this.toRowAfter=e}moveHover(t){this.connection?this.moveHoverConnections.call(this,t):this.moveHoverTable.call(this,t)}moveHoverTable(t){var e=this.table.rowManager.getElement(),n=e.scrollTop,i=(this.touchMove?t.touches[0].pageY:t.pageY)-e.getBoundingClientRect().top+n;this.hoverElement.style.top=Math.min(i-this.startY,this.table.rowManager.element.scrollHeight-this.hoverElement.offsetHeight)+"px"}moveHoverConnections(t){this.hoverElement.style.left=this.startX+(this.touchMove?t.touches[0].pageX:t.pageX)+"px",this.hoverElement.style.top=this.startY+(this.touchMove?t.touches[0].pageY:t.pageY)+"px"}elementRowDrop(t,e,n){this.dispatchExternal("movableRowsElementDrop",t,e,!!n&&n.getComponent())}connectToTables(t){var e;this.connectionSelectorsTables&&(e=this.commsConnections(this.connectionSelectorsTables),this.dispatchExternal("movableRowsSendingStart",e),this.commsSend(this.connectionSelectorsTables,"moveRow","connect",{row:t})),this.connectionSelectorsElements&&(this.connectionElements=[],Array.isArray(this.connectionSelectorsElements)||(this.connectionSelectorsElements=[this.connectionSelectorsElements]),this.connectionSelectorsElements.forEach((t=>{"string"==typeof t?this.connectionElements=this.connectionElements.concat(Array.prototype.slice.call(document.querySelectorAll(t))):this.connectionElements.push(t)})),this.connectionElements.forEach((t=>{var e=e=>{this.elementRowDrop(e,t,this.moving)};t.addEventListener("mouseup",e),t.tabulatorElementDropEvent=e,t.classList.add("tabulator-movingrow-receiving")})))}disconnectFromTables(){var t;this.connectionSelectorsTables&&(t=this.commsConnections(this.connectionSelectorsTables),this.dispatchExternal("movableRowsSendingStop",t),this.commsSend(this.connectionSelectorsTables,"moveRow","disconnect")),this.connectionElements.forEach((t=>{t.classList.remove("tabulator-movingrow-receiving"),t.removeEventListener("mouseup",t.tabulatorElementDropEvent),delete t.tabulatorElementDropEvent}))}connect(t,e){return this.connectedTable?(console.warn("Move Row Error - Table cannot accept connection, already connected to table:",this.connectedTable),!1):(this.connectedTable=t,this.connectedRow=e,this.table.element.classList.add("tabulator-movingrow-receiving"),this.table.rowManager.getDisplayRows().forEach((t=>{"row"===t.type&&t.modules.moveRow&&t.modules.moveRow.mouseup&&t.getElement().addEventListener("mouseup",t.modules.moveRow.mouseup)})),this.tableRowDropEvent=this.tableRowDrop.bind(this),this.table.element.addEventListener("mouseup",this.tableRowDropEvent),this.dispatchExternal("movableRowsReceivingStart",e,t),!0)}disconnect(t){t===this.connectedTable?(this.connectedTable=!1,this.connectedRow=!1,this.table.element.classList.remove("tabulator-movingrow-receiving"),this.table.rowManager.getDisplayRows().forEach((t=>{"row"===t.type&&t.modules.moveRow&&t.modules.moveRow.mouseup&&t.getElement().removeEventListener("mouseup",t.modules.moveRow.mouseup)})),this.table.element.removeEventListener("mouseup",this.tableRowDropEvent),this.dispatchExternal("movableRowsReceivingStop",t)):console.warn("Move Row Error - trying to disconnect from non connected table")}dropComplete(t,e,n){var i=!1;if(n){switch(typeof this.table.options.movableRowsSender){case"string":i=this.senders[this.table.options.movableRowsSender];break;case"function":i=this.table.options.movableRowsSender}i?i.call(this,this.moving?this.moving.getComponent():void 0,e?e.getComponent():void 0,t):this.table.options.movableRowsSender&&console.warn("Mover Row Error - no matching sender found:",this.table.options.movableRowsSender),this.dispatchExternal("movableRowsSent",this.moving.getComponent(),e?e.getComponent():void 0,t)}else this.dispatchExternal("movableRowsSentFailed",this.moving.getComponent(),e?e.getComponent():void 0,t);this.endMove()}tableRowDrop(t,e){var n=!1,i=!1;switch(t.stopImmediatePropagation(),typeof this.table.options.movableRowsReceiver){case"string":n=this.receivers[this.table.options.movableRowsReceiver];break;case"function":n=this.table.options.movableRowsReceiver}n?i=n.call(this,this.connectedRow.getComponent(),e?e.getComponent():void 0,this.connectedTable):console.warn("Mover Row Error - no matching receiver found:",this.table.options.movableRowsReceiver),i?this.dispatchExternal("movableRowsReceived",this.connectedRow.getComponent(),e?e.getComponent():void 0,this.connectedTable):this.dispatchExternal("movableRowsReceivedFailed",this.connectedRow.getComponent(),e?e.getComponent():void 0,this.connectedTable),this.commsSend(this.connectedTable,"moveRow","dropcomplete",{row:e,success:i})}commsReceived(t,e,n){switch(e){case"connect":return this.connect(t,n.row);case"disconnect":return this.disconnect(t);case"dropcomplete":return this.dropComplete(t,n.row,n.success)}}}bt.prototype.receivers={insert:function(t,e,n){return this.table.addRow(t.getData(),void 0,e),!0},add:function(t,e,n){return this.table.addRow(t.getData()),!0},update:function(t,e,n){return!!e&&(e.update(t.getData()),!0)},replace:function(t,e,n){return!!e&&(this.table.addRow(t.getData(),void 0,e),e.delete(),!0)}},bt.prototype.senders={delete:function(t,e,n){t.delete()}},bt.moduleName="moveRow";class mt extends E{constructor(t){super(t),this.allowedTypes=["","data","edit","clipboard"],this.enabled=!0,this.registerColumnOption("mutator"),this.registerColumnOption("mutatorParams"),this.registerColumnOption("mutatorData"),this.registerColumnOption("mutatorDataParams"),this.registerColumnOption("mutatorEdit"),this.registerColumnOption("mutatorEditParams"),this.registerColumnOption("mutatorClipboard"),this.registerColumnOption("mutatorClipboardParams"),this.registerColumnOption("mutateLink")}initialize(){this.subscribe("cell-value-changing",this.transformCell.bind(this)),this.subscribe("cell-value-changed",this.mutateLink.bind(this)),this.subscribe("column-layout",this.initializeColumn.bind(this)),this.subscribe("row-data-init-before",this.rowDataChanged.bind(this)),this.subscribe("row-data-changing",this.rowDataChanged.bind(this))}rowDataChanged(t,e,n){return this.transformRow(e,"data",n)}initializeColumn(t){var e=!1,n={};this.allowedTypes.forEach((i=>{var o,r="mutator"+(i.charAt(0).toUpperCase()+i.slice(1));t.definition[r]&&(o=this.lookupMutator(t.definition[r]))&&(e=!0,n[r]={mutator:o,params:t.definition[r+"Params"]||{}})})),e&&(t.modules.mutate=n)}lookupMutator(t){var e=!1;switch(typeof t){case"string":mt.mutators[t]?e=mt.mutators[t]:console.warn("Mutator Error - No such mutator found, ignoring: ",t);break;case"function":e=t}return e}transformRow(t,e,n){var i,o="mutator"+(e.charAt(0).toUpperCase()+e.slice(1));return this.enabled&&this.table.columnManager.traverse((r=>{var a,l,s;r.modules.mutate&&(a=r.modules.mutate[o]||r.modules.mutate.mutator||!1)&&(i=r.getFieldValue(void 0!==n?n:t),("data"==e&&!n||void 0!==i)&&(s=r.getComponent(),l="function"==typeof a.params?a.params(i,t,e,s):a.params,r.setFieldValue(t,a.mutator(i,t,e,l,s))))})),t}transformCell(t,e){if(t.column.modules.mutate){var n=t.column.modules.mutate.mutatorEdit||t.column.modules.mutate.mutator||!1,i={};if(n)return i=Object.assign(i,t.row.getData()),t.column.setFieldValue(i,e),n.mutator(e,i,"edit",n.params,t.getComponent())}return e}mutateLink(t){var e=t.column.definition.mutateLink;e&&(Array.isArray(e)||(e=[e]),e.forEach((e=>{var n=t.row.getCell(e);n&&n.setValue(n.getValue(),!0,!0)})))}enable(){this.enabled=!0}disable(){this.enabled=!1}}mt.moduleName="mutator",mt.mutators={};var gt={rows:function(t,e,n,i,o){var r=document.createElement("span"),a=document.createElement("span"),l=document.createElement("span"),s=document.createElement("span"),u=document.createElement("span"),h=document.createElement("span");return this.table.modules.localize.langBind("pagination|counter|showing",(t=>{a.innerHTML=t})),this.table.modules.localize.langBind("pagination|counter|of",(t=>{s.innerHTML=t})),this.table.modules.localize.langBind("pagination|counter|rows",(t=>{h.innerHTML=t})),i?(l.innerHTML=" "+e+"-"+Math.min(e+t-1,i)+" ",u.innerHTML=" "+i+" ",r.appendChild(a),r.appendChild(l),r.appendChild(s),r.appendChild(u),r.appendChild(h)):(l.innerHTML=" 0 ",r.appendChild(a),r.appendChild(l),r.appendChild(h)),r},pages:function(t,e,n,i,o){var r=document.createElement("span"),a=document.createElement("span"),l=document.createElement("span"),s=document.createElement("span"),u=document.createElement("span"),h=document.createElement("span");return this.table.modules.localize.langBind("pagination|counter|showing",(t=>{a.innerHTML=t})),l.innerHTML=" "+n+" ",this.table.modules.localize.langBind("pagination|counter|of",(t=>{s.innerHTML=t})),u.innerHTML=" "+o+" ",this.table.modules.localize.langBind("pagination|counter|pages",(t=>{h.innerHTML=t})),r.appendChild(a),r.appendChild(l),r.appendChild(s),r.appendChild(u),r.appendChild(h),r}};class ft extends E{constructor(t){super(t),this.mode="local",this.progressiveLoad=!1,this.element=null,this.pageCounterElement=null,this.pageCounter=null,this.size=0,this.page=1,this.count=5,this.max=1,this.remoteRowCountEstimate=null,this.initialLoad=!0,this.dataChanging=!1,this.pageSizes=[],this.registerTableOption("pagination",!1),this.registerTableOption("paginationMode","local"),this.registerTableOption("paginationSize",!1),this.registerTableOption("paginationInitialPage",1),this.registerTableOption("paginationCounter",!1),this.registerTableOption("paginationCounterElement",!1),this.registerTableOption("paginationButtonCount",5),this.registerTableOption("paginationSizeSelector",!1),this.registerTableOption("paginationElement",!1),this.registerTableOption("paginationAddRow","page"),this.registerTableOption("progressiveLoad",!1),this.registerTableOption("progressiveLoadDelay",0),this.registerTableOption("progressiveLoadScrollMargin",0),this.registerTableFunction("setMaxPage",this.setMaxPage.bind(this)),this.registerTableFunction("setPage",this.setPage.bind(this)),this.registerTableFunction("setPageToRow",this.userSetPageToRow.bind(this)),this.registerTableFunction("setPageSize",this.userSetPageSize.bind(this)),this.registerTableFunction("getPageSize",this.getPageSize.bind(this)),this.registerTableFunction("previousPage",this.previousPage.bind(this)),this.registerTableFunction("nextPage",this.nextPage.bind(this)),this.registerTableFunction("getPage",this.getPage.bind(this)),this.registerTableFunction("getPageMax",this.getPageMax.bind(this)),this.registerComponentFunction("row","pageTo",this.setPageToRow.bind(this))}initialize(){this.table.options.pagination?(this.subscribe("row-deleted",this.rowsUpdated.bind(this)),this.subscribe("row-added",this.rowsUpdated.bind(this)),this.subscribe("data-processed",this.initialLoadComplete.bind(this)),this.subscribe("table-built",this.calculatePageSizes.bind(this)),this.subscribe("footer-redraw",this.footerRedraw.bind(this)),"page"==this.table.options.paginationAddRow&&this.subscribe("row-adding-position",this.rowAddingPosition.bind(this)),"remote"===this.table.options.paginationMode&&(this.subscribe("data-params",this.remotePageParams.bind(this)),this.subscribe("data-loaded",this._parseRemoteData.bind(this))),this.table.options.progressiveLoad&&console.error("Progressive Load Error - Pagination and progressive load cannot be used at the same time"),this.registerDisplayHandler(this.restOnRenderBefore.bind(this),40),this.registerDisplayHandler(this.getRows.bind(this),50),this.createElements(),this.initializePageCounter(),this.initializePaginator()):this.table.options.progressiveLoad&&(this.subscribe("data-params",this.remotePageParams.bind(this)),this.subscribe("data-loaded",this._parseRemoteData.bind(this)),this.subscribe("table-built",this.calculatePageSizes.bind(this)),this.subscribe("data-processed",this.initialLoadComplete.bind(this)),this.initializeProgressive(this.table.options.progressiveLoad),"scroll"===this.table.options.progressiveLoad&&this.subscribe("scroll-vertical",this.scrollVertical.bind(this)))}rowAddingPosition(t,e){var n,i=this.table.rowManager,o=i.getDisplayRows();return e?o.length?n=o[0]:i.activeRows.length&&(n=i.activeRows[i.activeRows.length-1],e=!1):o.length&&(n=o[o.length-1],e=!(o.length<this.size)),{index:n,top:e}}calculatePageSizes(){var t,e;this.table.options.paginationSize?this.size=this.table.options.paginationSize:((t=document.createElement("div")).classList.add("tabulator-row"),t.style.visibility="hidden",(e=document.createElement("div")).classList.add("tabulator-cell"),e.innerHTML="Page Row Test",t.appendChild(e),this.table.rowManager.getTableElement().appendChild(t),this.size=Math.floor(this.table.rowManager.getElement().clientHeight/t.offsetHeight),this.table.rowManager.getTableElement().removeChild(t)),this.dispatchExternal("pageSizeChanged",this.size),this.generatePageSizeSelectList()}initialLoadComplete(){this.initialLoad=!1}remotePageParams(t,e,n,i){return this.initialLoad||(this.progressiveLoad&&!n||!this.progressiveLoad&&!this.dataChanging)&&this.reset(!0),i.page=this.page,this.size&&(i.size=this.size),i}userSetPageToRow(t){return this.table.options.pagination&&(t=this.rowManager.findRow(t))?this.setPageToRow(t):Promise.reject()}userSetPageSize(t){return!!this.table.options.pagination&&(this.setPageSize(t),this.setPage(1))}scrollVertical(t,e){var n;e||this.table.dataLoader.loading||(n=this.table.rowManager.getElement()).scrollHeight-n.clientHeight-t<(this.table.options.progressiveLoadScrollMargin||2*n.clientHeight)&&this.nextPage().catch((()=>{}))}restOnRenderBefore(t,e){return e||"local"===this.mode&&this.reset(),t}rowsUpdated(){this.refreshData(!0,"all")}createElements(){var t;this.element=document.createElement("span"),this.element.classList.add("tabulator-paginator"),this.pagesElement=document.createElement("span"),this.pagesElement.classList.add("tabulator-pages"),(t=document.createElement("button")).classList.add("tabulator-page"),t.setAttribute("type","button"),t.setAttribute("role","button"),t.setAttribute("aria-label",""),t.setAttribute("title",""),this.firstBut=t.cloneNode(!0),this.firstBut.setAttribute("data-page","first"),this.prevBut=t.cloneNode(!0),this.prevBut.setAttribute("data-page","prev"),this.nextBut=t.cloneNode(!0),this.nextBut.setAttribute("data-page","next"),this.lastBut=t.cloneNode(!0),this.lastBut.setAttribute("data-page","last"),this.table.options.paginationSizeSelector&&(this.pageSizeSelect=document.createElement("select"),this.pageSizeSelect.classList.add("tabulator-page-size"))}generatePageSizeSelectList(){var t=[];if(this.pageSizeSelect){if(Array.isArray(this.table.options.paginationSizeSelector))t=this.table.options.paginationSizeSelector,this.pageSizes=t,-1==this.pageSizes.indexOf(this.size)&&t.unshift(this.size);else if(-1==this.pageSizes.indexOf(this.size)){t=[];for(let e=1;e<5;e++)t.push(this.size*e);this.pageSizes=t}else t=this.pageSizes;for(;this.pageSizeSelect.firstChild;)this.pageSizeSelect.removeChild(this.pageSizeSelect.firstChild);t.forEach((t=>{var e=document.createElement("option");e.value=t,!0===t?this.langBind("pagination|all",(function(t){e.innerHTML=t})):e.innerHTML=t,this.pageSizeSelect.appendChild(e)})),this.pageSizeSelect.value=this.size}}initializePageCounter(){var t=this.table.options.paginationCounter,e=null;t&&((e="function"==typeof t?t:ft.pageCounters[t])?(this.pageCounter=e,this.pageCounterElement=document.createElement("span"),this.pageCounterElement.classList.add("tabulator-page-counter")):console.warn("Pagination Error - No such page counter found: ",t))}initializePaginator(t){var e,n;t||(this.langBind("pagination|first",(t=>{this.firstBut.innerHTML=t})),this.langBind("pagination|first_title",(t=>{this.firstBut.setAttribute("aria-label",t),this.firstBut.setAttribute("title",t)})),this.langBind("pagination|prev",(t=>{this.prevBut.innerHTML=t})),this.langBind("pagination|prev_title",(t=>{this.prevBut.setAttribute("aria-label",t),this.prevBut.setAttribute("title",t)})),this.langBind("pagination|next",(t=>{this.nextBut.innerHTML=t})),this.langBind("pagination|next_title",(t=>{this.nextBut.setAttribute("aria-label",t),this.nextBut.setAttribute("title",t)})),this.langBind("pagination|last",(t=>{this.lastBut.innerHTML=t})),this.langBind("pagination|last_title",(t=>{this.lastBut.setAttribute("aria-label",t),this.lastBut.setAttribute("title",t)})),this.firstBut.addEventListener("click",(()=>{this.setPage(1)})),this.prevBut.addEventListener("click",(()=>{this.previousPage()})),this.nextBut.addEventListener("click",(()=>{this.nextPage()})),this.lastBut.addEventListener("click",(()=>{this.setPage(this.max)})),this.table.options.paginationElement&&(this.element=this.table.options.paginationElement),this.pageSizeSelect&&(e=document.createElement("label"),this.langBind("pagination|page_size",(t=>{this.pageSizeSelect.setAttribute("aria-label",t),this.pageSizeSelect.setAttribute("title",t),e.innerHTML=t})),this.element.appendChild(e),this.element.appendChild(this.pageSizeSelect),this.pageSizeSelect.addEventListener("change",(t=>{this.setPageSize("true"==this.pageSizeSelect.value||this.pageSizeSelect.value),this.setPage(1)}))),this.element.appendChild(this.firstBut),this.element.appendChild(this.prevBut),this.element.appendChild(this.pagesElement),this.element.appendChild(this.nextBut),this.element.appendChild(this.lastBut),this.table.options.paginationElement||(this.table.options.paginationCounter&&(this.table.options.paginationCounterElement?this.table.options.paginationCounterElement instanceof HTMLElement?this.table.options.paginationCounterElement.appendChild(this.pageCounterElement):"string"==typeof this.table.options.paginationCounterElement&&((n=document.querySelector(this.table.options.paginationCounterElement))?n.appendChild(this.pageCounterElement):console.warn("Pagination Error - Unable to find element matching paginationCounterElement selector:",this.table.options.paginationCounterElement)):this.footerAppend(this.pageCounterElement)),this.footerAppend(this.element)),this.page=this.table.options.paginationInitialPage,this.count=this.table.options.paginationButtonCount),this.mode=this.table.options.paginationMode}initializeProgressive(t){this.initializePaginator(!0),this.mode="progressive_"+t,this.progressiveLoad=!0}trackChanges(){this.dispatch("page-changed")}setMaxRows(t){this.max=t?!0===this.size?1:Math.ceil(t/this.size):1,this.page>this.max&&(this.page=this.max)}reset(t){this.initialLoad||("local"==this.mode||t)&&(this.page=1,this.trackChanges())}setMaxPage(t){t=parseInt(t),this.max=t||1,this.page>this.max&&(this.page=this.max,this.trigger())}setPage(t){switch(t){case"first":return this.setPage(1);case"prev":return this.previousPage();case"next":return this.nextPage();case"last":return this.setPage(this.max)}return(t=parseInt(t))>0&&t<=this.max||"local"!==this.mode?(this.page=t,this.trackChanges(),this.trigger()):(console.warn("Pagination Error - Requested page is out of range of 1 - "+this.max+":",t),Promise.reject())}setPageToRow(t){var e=this.displayRows(-1).indexOf(t);if(e>-1){var n=!0===this.size?1:Math.ceil((e+1)/this.size);return this.setPage(n)}return console.warn("Pagination Error - Requested row is not visible"),Promise.reject()}setPageSize(t){!0!==t&&(t=parseInt(t)),t>0&&(this.size=t,this.dispatchExternal("pageSizeChanged",t)),this.pageSizeSelect&&this.generatePageSizeSelectList(),this.trackChanges()}_setPageCounter(t,e,n){var i;if(this.pageCounter)switch("remote"===this.mode&&(e=this.size,n=(this.page-1)*this.size+1,t=this.remoteRowCountEstimate),typeof(i=this.pageCounter.call(this,e,n,this.page,t,this.max))){case"object":if(i instanceof Node){for(;this.pageCounterElement.firstChild;)this.pageCounterElement.removeChild(this.pageCounterElement.firstChild);this.pageCounterElement.appendChild(i)}else this.pageCounterElement.innerHTML="",null!=i&&console.warn("Page Counter Error - Page Counter has returned a type of object, the only valid page counter object return is an instance of Node, the page counter returned:",i);break;case"undefined":this.pageCounterElement.innerHTML="";break;default:this.pageCounterElement.innerHTML=i}}_setPageButtons(){let t=Math.floor((this.count-1)/2),e=Math.ceil((this.count-1)/2),n=this.max-this.page+t+1<this.count?this.max-this.count+1:Math.max(this.page-t,1),i=this.page<=e?Math.min(this.count,this.max):Math.min(this.page+e,this.max);for(;this.pagesElement.firstChild;)this.pagesElement.removeChild(this.pagesElement.firstChild);1==this.page?(this.firstBut.disabled=!0,this.prevBut.disabled=!0):(this.firstBut.disabled=!1,this.prevBut.disabled=!1),this.page==this.max?(this.lastBut.disabled=!0,this.nextBut.disabled=!0):(this.lastBut.disabled=!1,this.nextBut.disabled=!1);for(let t=n;t<=i;t++)t>0&&t<=this.max&&this.pagesElement.appendChild(this._generatePageButton(t));this.footerRedraw()}_generatePageButton(t){var e=document.createElement("button");return e.classList.add("tabulator-page"),t==this.page&&e.classList.add("active"),e.setAttribute("type","button"),e.setAttribute("role","button"),this.langBind("pagination|page_title",(n=>{e.setAttribute("aria-label",n+" "+t),e.setAttribute("title",n+" "+t)})),e.setAttribute("data-page",t),e.textContent=t,e.addEventListener("click",(e=>{this.setPage(t)})),e}previousPage(){return this.page>1?(this.page--,this.trackChanges(),this.trigger()):(console.warn("Pagination Error - Previous page would be less than page 1:",0),Promise.reject())}nextPage(){return this.page<this.max?(this.page++,this.trackChanges(),this.trigger()):(this.progressiveLoad||console.warn("Pagination Error - Next page would be greater than maximum page of "+this.max+":",this.max+1),Promise.reject())}getPage(){return this.page}getPageMax(){return this.max}getPageSize(t){return this.size}getMode(){return this.mode}getRows(t){var e,n,i,o,r=0,a=t.filter((t=>"row"===t.type));if("local"==this.mode){e=[],this.setMaxRows(t.length),!0===this.size?(n=0,i=t.length):i=(n=this.size*(this.page-1))+parseInt(this.size),this._setPageButtons();for(let a=n;a<i;a++){let n=t[a];n&&(e.push(n),"row"===n.type&&(o||(o=n),r++))}return this._setPageCounter(a.length,r,o?a.indexOf(o)+1:0),e}return this._setPageButtons(),this._setPageCounter(a.length),t.slice(0)}trigger(){var t;switch(this.mode){case"local":return t=this.table.rowManager.scrollLeft,this.refreshData(),this.table.rowManager.scrollHorizontal(t),this.dispatchExternal("pageLoaded",this.getPage()),Promise.resolve();case"remote":return this.dataChanging=!0,this.reloadData(null).finally((()=>{this.dataChanging=!1}));case"progressive_load":case"progressive_scroll":return this.reloadData(null,!0);default:return console.warn("Pagination Error - no such pagination mode:",this.mode),Promise.reject()}}_parseRemoteData(t){var e;if(void 0===t.last_page&&console.warn("Remote Pagination Error - Server response missing '"+(this.options("dataReceiveParams").last_page||"last_page")+"' property"),t.data){if(this.max=parseInt(t.last_page)||1,this.remoteRowCountEstimate=void 0!==t.last_row?t.last_row:t.last_page*this.size-(this.page==t.last_page?this.size-t.data.length:0),this.progressiveLoad){switch(this.mode){case"progressive_load":1==this.page?this.table.rowManager.setData(t.data,!1,1==this.page):this.table.rowManager.addRows(t.data),this.page<this.max&&setTimeout((()=>{this.nextPage()}),this.table.options.progressiveLoadDelay);break;case"progressive_scroll":t=1===this.page?t.data:this.table.rowManager.getData().concat(t.data),this.table.rowManager.setData(t,1!==this.page,1==this.page),e=this.table.options.progressiveLoadScrollMargin||2*this.table.rowManager.element.clientHeight,this.table.rowManager.element.scrollHeight<=this.table.rowManager.element.clientHeight+e&&this.page<this.max&&setTimeout((()=>{this.nextPage()}))}return!1}this.dispatchExternal("pageLoaded",this.getPage())}else console.warn("Remote Pagination Error - Server response missing '"+(this.options("dataReceiveParams").data||"data")+"' property");return t.data}footerRedraw(){var t=this.table.footerManager.containerElement;Math.ceil(t.clientWidth)-t.scrollWidth<0?this.pagesElement.style.display="none":(this.pagesElement.style.display="",Math.ceil(t.clientWidth)-t.scrollWidth<0&&(this.pagesElement.style.display="none"))}}ft.moduleName="page",ft.pageCounters=gt;var At={local:function(t,e){var n=localStorage.getItem(t+"-"+e);return!!n&&JSON.parse(n)},cookie:function(t,e){var n,i,o=document.cookie,r=t+"-"+e,a=o.indexOf(r+"=");return a>-1&&((n=(o=o.slice(a)).indexOf(";"))>-1&&(o=o.slice(0,n)),i=o.replace(r+"=","")),!!i&&JSON.parse(i)}},vt={local:function(t,e,n){localStorage.setItem(t+"-"+e,JSON.stringify(n))},cookie:function(t,e,n){var i=new Date;i.setDate(i.getDate()+1e4),document.cookie=t+"-"+e+"="+JSON.stringify(n)+"; expires="+i.toUTCString()}};class wt extends E{constructor(t){super(t),this.mode="",this.id="",this.defWatcherBlock=!1,this.config={},this.readFunc=!1,this.writeFunc=!1,this.registerTableOption("persistence",!1),this.registerTableOption("persistenceID",""),this.registerTableOption("persistenceMode",!0),this.registerTableOption("persistenceReaderFunc",!1),this.registerTableOption("persistenceWriterFunc",!1)}localStorageTest(){var t="_tabulator_test";try{return window.localStorage.setItem(t,t),window.localStorage.removeItem(t),!0}catch(t){return!1}}initialize(){if(this.table.options.persistence){var t,e=this.table.options.persistenceMode,n=this.table.options.persistenceID;this.mode=!0!==e?e:this.localStorageTest()?"local":"cookie",this.table.options.persistenceReaderFunc?"function"==typeof this.table.options.persistenceReaderFunc?this.readFunc=this.table.options.persistenceReaderFunc:wt.readers[this.table.options.persistenceReaderFunc]?this.readFunc=wt.readers[this.table.options.persistenceReaderFunc]:console.warn("Persistence Read Error - invalid reader set",this.table.options.persistenceReaderFunc):wt.readers[this.mode]?this.readFunc=wt.readers[this.mode]:console.warn("Persistence Read Error - invalid reader set",this.mode),this.table.options.persistenceWriterFunc?"function"==typeof this.table.options.persistenceWriterFunc?this.writeFunc=this.table.options.persistenceWriterFunc:wt.writers[this.table.options.persistenceWriterFunc]?this.writeFunc=wt.writers[this.table.options.persistenceWriterFunc]:console.warn("Persistence Write Error - invalid reader set",this.table.options.persistenceWriterFunc):wt.writers[this.mode]?this.writeFunc=wt.writers[this.mode]:console.warn("Persistence Write Error - invalid writer set",this.mode),this.id="tabulator-"+(n||this.table.element.getAttribute("id")||""),this.config={sort:!0===this.table.options.persistence||this.table.options.persistence.sort,filter:!0===this.table.options.persistence||this.table.options.persistence.filter,headerFilter:!0===this.table.options.persistence||this.table.options.persistence.headerFilter,group:!0===this.table.options.persistence||this.table.options.persistence.group,page:!0===this.table.options.persistence||this.table.options.persistence.page,columns:!0===this.table.options.persistence?["title","width","visible"]:this.table.options.persistence.columns},this.config.page&&(t=this.retrieveData("page"))&&(void 0===t.paginationSize||!0!==this.config.page&&!this.config.page.size||(this.table.options.paginationSize=t.paginationSize),void 0===t.paginationInitialPage||!0!==this.config.page&&!this.config.page.page||(this.table.options.paginationInitialPage=t.paginationInitialPage)),this.config.group&&(t=this.retrieveData("group"))&&(void 0===t.groupBy||!0!==this.config.group&&!this.config.group.groupBy||(this.table.options.groupBy=t.groupBy),void 0===t.groupStartOpen||!0!==this.config.group&&!this.config.group.groupStartOpen||(this.table.options.groupStartOpen=t.groupStartOpen),void 0===t.groupHeader||!0!==this.config.group&&!this.config.group.groupHeader||(this.table.options.groupHeader=t.groupHeader)),this.config.columns&&(this.table.options.columns=this.load("columns",this.table.options.columns),this.subscribe("column-init",this.initializeColumn.bind(this)),this.subscribe("column-show",this.save.bind(this,"columns")),this.subscribe("column-hide",this.save.bind(this,"columns")),this.subscribe("column-moved",this.save.bind(this,"columns"))),this.subscribe("table-built",this.tableBuilt.bind(this),0),this.subscribe("table-redraw",this.tableRedraw.bind(this)),this.subscribe("filter-changed",this.eventSave.bind(this,"filter")),this.subscribe("filter-changed",this.eventSave.bind(this,"headerFilter")),this.subscribe("sort-changed",this.eventSave.bind(this,"sort")),this.subscribe("group-changed",this.eventSave.bind(this,"group")),this.subscribe("page-changed",this.eventSave.bind(this,"page")),this.subscribe("column-resized",this.eventSave.bind(this,"columns")),this.subscribe("column-width",this.eventSave.bind(this,"columns")),this.subscribe("layout-refreshed",this.eventSave.bind(this,"columns"))}this.registerTableFunction("getColumnLayout",this.getColumnLayout.bind(this)),this.registerTableFunction("setColumnLayout",this.setColumnLayout.bind(this))}eventSave(t){this.config[t]&&this.save(t)}tableBuilt(){var t,e,n;this.config.sort&&0==!(t=this.load("sort"))&&(this.table.options.initialSort=t),this.config.filter&&0==!(e=this.load("filter"))&&(this.table.options.initialFilter=e),this.config.headerFilter&&0==!(n=this.load("headerFilter"))&&(this.table.options.initialHeaderFilter=n)}tableRedraw(t){t&&this.config.columns&&this.save("columns")}getColumnLayout(){return this.parseColumns(this.table.columnManager.getColumns())}setColumnLayout(t){return this.table.columnManager.setColumns(this.mergeDefinition(this.table.options.columns,t)),!0}initializeColumn(t){var e;this.config.columns&&(this.defWatcherBlock=!0,e=t.getDefinition(),(!0===this.config.columns?Object.keys(e):this.config.columns).forEach((t=>{var n=Object.getOwnPropertyDescriptor(e,t),i=e[t];n&&Object.defineProperty(e,t,{set:t=>{i=t,this.defWatcherBlock||this.save("columns"),n.set&&n.set(t)},get:()=>(n.get&&n.get(),i)})})),this.defWatcherBlock=!1)}load(t,e){var n=this.retrieveData(t);return e&&(n=n?this.mergeDefinition(e,n):e),n}retrieveData(t){return!!this.readFunc&&this.readFunc(this.id,t)}mergeDefinition(t,e){var n=[];return(e=e||[]).forEach(((e,i)=>{var o,r=this._findColumn(t,e);r&&(!0===this.config.columns||null==this.config.columns?(o=Object.keys(r)).push("width"):o=this.config.columns,o.forEach((t=>{"columns"!==t&&void 0!==e[t]&&(r[t]=e[t])})),r.columns&&(r.columns=this.mergeDefinition(r.columns,e.columns)),n.push(r))})),t.forEach(((t,i)=>{this._findColumn(e,t)||(n.length>i?n.splice(i,0,t):n.push(t))})),n}_findColumn(t,e){var n=e.columns?"group":e.field?"field":"object";return t.find((function(t){switch(n){case"group":return t.title===e.title&&t.columns.length===e.columns.length;case"field":return t.field===e.field;case"object":return t===e}}))}save(t){var e={};switch(t){case"columns":e=this.parseColumns(this.table.columnManager.getColumns());break;case"filter":e=this.table.modules.filter.getFilters();break;case"headerFilter":e=this.table.modules.filter.getHeaderFilters();break;case"sort":e=this.validateSorters(this.table.modules.sort.getSort());break;case"group":e=this.getGroupConfig();break;case"page":e=this.getPageConfig()}this.writeFunc&&this.writeFunc(this.id,t,e)}validateSorters(t){return t.forEach((function(t){t.column=t.field,delete t.field})),t}getGroupConfig(){var t={};return this.config.group&&((!0===this.config.group||this.config.group.groupBy)&&(t.groupBy=this.table.options.groupBy),(!0===this.config.group||this.config.group.groupStartOpen)&&(t.groupStartOpen=this.table.options.groupStartOpen),(!0===this.config.group||this.config.group.groupHeader)&&(t.groupHeader=this.table.options.groupHeader)),t}getPageConfig(){var t={};return this.config.page&&((!0===this.config.page||this.config.page.size)&&(t.paginationSize=this.table.modules.page.getPageSize()),(!0===this.config.page||this.config.page.page)&&(t.paginationInitialPage=this.table.modules.page.getPage())),t}parseColumns(t){var e=[],n=["headerContextMenu","headerMenu","contextMenu","clickMenu"];return t.forEach((t=>{var i,o={},r=t.getDefinition();t.isGroup?(o.title=r.title,o.columns=this.parseColumns(t.getColumns())):(o.field=t.getField(),!0===this.config.columns||null==this.config.columns?((i=Object.keys(r)).push("width"),i.push("visible")):i=this.config.columns,i.forEach((e=>{switch(e){case"width":o.width=t.getWidth();break;case"visible":o.visible=t.visible;break;default:"function"!=typeof r[e]&&-1===n.indexOf(e)&&(o[e]=r[e])}}))),e.push(o)})),e}}wt.moduleName="persistence",wt.moduleInitOrder=-10,wt.readers=At,wt.writers=vt;class Ct extends E{constructor(t){super(t),this.columnSubscribers={},this.registerTableOption("rowContextPopup",!1),this.registerTableOption("rowClickPopup",!1),this.registerTableOption("rowDblClickPopup",!1),this.registerTableOption("groupContextPopup",!1),this.registerTableOption("groupClickPopup",!1),this.registerTableOption("groupDblClickPopup",!1),this.registerColumnOption("headerContextPopup"),this.registerColumnOption("headerClickPopup"),this.registerColumnOption("headerDblClickPopup"),this.registerColumnOption("headerPopup"),this.registerColumnOption("headerPopupIcon"),this.registerColumnOption("contextPopup"),this.registerColumnOption("clickPopup"),this.registerColumnOption("dblClickPopup"),this.registerComponentFunction("cell","popup",this._componentPopupCall.bind(this)),this.registerComponentFunction("column","popup",this._componentPopupCall.bind(this)),this.registerComponentFunction("row","popup",this._componentPopupCall.bind(this)),this.registerComponentFunction("group","popup",this._componentPopupCall.bind(this))}initialize(){this.initializeRowWatchers(),this.initializeGroupWatchers(),this.subscribe("column-init",this.initializeColumn.bind(this))}_componentPopupCall(t,e,n){this.loadPopupEvent(e,null,t,n)}initializeRowWatchers(){this.table.options.rowContextPopup&&(this.subscribe("row-contextmenu",this.loadPopupEvent.bind(this,this.table.options.rowContextPopup)),this.table.on("rowTapHold",this.loadPopupEvent.bind(this,this.table.options.rowContextPopup))),this.table.options.rowClickPopup&&this.subscribe("row-click",this.loadPopupEvent.bind(this,this.table.options.rowClickPopup)),this.table.options.rowDblClickPopup&&this.subscribe("row-dblclick",this.loadPopupEvent.bind(this,this.table.options.rowDblClickPopup))}initializeGroupWatchers(){this.table.options.groupContextPopup&&(this.subscribe("group-contextmenu",this.loadPopupEvent.bind(this,this.table.options.groupContextPopup)),this.table.on("groupTapHold",this.loadPopupEvent.bind(this,this.table.options.groupContextPopup))),this.table.options.groupClickPopup&&this.subscribe("group-click",this.loadPopupEvent.bind(this,this.table.options.groupClickPopup)),this.table.options.groupDblClickPopup&&this.subscribe("group-dblclick",this.loadPopupEvent.bind(this,this.table.options.groupDblClickPopup))}initializeColumn(t){var e=t.definition;e.headerContextPopup&&!this.columnSubscribers.headerContextPopup&&(this.columnSubscribers.headerContextPopup=this.loadPopupTableColumnEvent.bind(this,"headerContextPopup"),this.subscribe("column-contextmenu",this.columnSubscribers.headerContextPopup),this.table.on("headerTapHold",this.loadPopupTableColumnEvent.bind(this,"headerContextPopup"))),e.headerClickPopup&&!this.columnSubscribers.headerClickPopup&&(this.columnSubscribers.headerClickPopup=this.loadPopupTableColumnEvent.bind(this,"headerClickPopup"),this.subscribe("column-click",this.columnSubscribers.headerClickPopup)),e.headerDblClickPopup&&!this.columnSubscribers.headerDblClickPopup&&(this.columnSubscribers.headerDblClickPopup=this.loadPopupTableColumnEvent.bind(this,"headerDblClickPopup"),this.subscribe("column-dblclick",this.columnSubscribers.headerDblClickPopup)),e.headerPopup&&this.initializeColumnHeaderPopup(t),e.contextPopup&&!this.columnSubscribers.contextPopup&&(this.columnSubscribers.contextPopup=this.loadPopupTableCellEvent.bind(this,"contextPopup"),this.subscribe("cell-contextmenu",this.columnSubscribers.contextPopup),this.table.on("cellTapHold",this.loadPopupTableCellEvent.bind(this,"contextPopup"))),e.clickPopup&&!this.columnSubscribers.clickPopup&&(this.columnSubscribers.clickPopup=this.loadPopupTableCellEvent.bind(this,"clickPopup"),this.subscribe("cell-click",this.columnSubscribers.clickPopup)),e.dblClickPopup&&!this.columnSubscribers.dblClickPopup&&(this.columnSubscribers.dblClickPopup=this.loadPopupTableCellEvent.bind(this,"dblClickPopup"),this.subscribe("cell-click",this.columnSubscribers.dblClickPopup))}initializeColumnHeaderPopup(t){var e,n=t.definition.headerPopupIcon;(e=document.createElement("span")).classList.add("tabulator-header-popup-button"),n?("function"==typeof n&&(n=n(t.getComponent())),n instanceof HTMLElement?e.appendChild(n):e.innerHTML=n):e.innerHTML="&vellip;",e.addEventListener("click",(e=>{e.stopPropagation(),e.preventDefault(),this.loadPopupEvent(t.definition.headerPopup,e,t)})),t.titleElement.insertBefore(e,t.titleElement.firstChild)}loadPopupTableCellEvent(t,e,n){n._cell&&(n=n._cell),n.column.definition[t]&&this.loadPopupEvent(n.column.definition[t],e,n)}loadPopupTableColumnEvent(t,e,n){n._column&&(n=n._column),n.definition[t]&&this.loadPopupEvent(n.definition[t],e,n)}loadPopupEvent(t,e,n,i){var o;n._group?n=n._group:n._row&&(n=n._row),t="function"==typeof t?t.call(this.table,e,n.getComponent(),(function(t){o=t})):t,this.loadPopup(e,n,t,o,i)}loadPopup(t,e,n,i,o){var r,a,l=!(t instanceof MouseEvent);n instanceof HTMLElement?r=n:(r=document.createElement("div")).innerHTML=n,r.classList.add("tabulator-popup"),r.addEventListener("click",(t=>{t.stopPropagation()})),l||t.preventDefault(),a=this.popup(r),"function"==typeof i&&a.renderCallback(i),t?a.show(t):a.show(e.getElement(),o||"center"),a.hideOnBlur((()=>{this.dispatchExternal("popupClosed",e.getComponent())})),this.dispatchExternal("popupOpened",e.getComponent())}}Ct.moduleName="popup";class Et extends E{constructor(t){super(t),this.element=!1,this.manualBlock=!1,this.beforeprintEventHandler=null,this.afterprintEventHandler=null,this.registerTableOption("printAsHtml",!1),this.registerTableOption("printFormatter",!1),this.registerTableOption("printHeader",!1),this.registerTableOption("printFooter",!1),this.registerTableOption("printStyled",!0),this.registerTableOption("printRowRange","visible"),this.registerTableOption("printConfig",{}),this.registerColumnOption("print"),this.registerColumnOption("titlePrint")}initialize(){this.table.options.printAsHtml&&(this.beforeprintEventHandler=this.replaceTable.bind(this),this.afterprintEventHandler=this.cleanup.bind(this),window.addEventListener("beforeprint",this.beforeprintEventHandler),window.addEventListener("afterprint",this.afterprintEventHandler),this.subscribe("table-destroy",this.destroy.bind(this))),this.registerTableFunction("print",this.printFullscreen.bind(this))}destroy(){this.table.options.printAsHtml&&(window.removeEventListener("beforeprint",this.beforeprintEventHandler),window.removeEventListener("afterprint",this.afterprintEventHandler))}replaceTable(){this.manualBlock||(this.element=document.createElement("div"),this.element.classList.add("tabulator-print-table"),this.element.appendChild(this.table.modules.export.generateTable(this.table.options.printConfig,this.table.options.printStyled,this.table.options.printRowRange,"print")),this.table.element.style.display="none",this.table.element.parentNode.insertBefore(this.element,this.table.element))}cleanup(){document.body.classList.remove("tabulator-print-fullscreen-hide"),this.element&&this.element.parentNode&&(this.element.parentNode.removeChild(this.element),this.table.element.style.display="")}printFullscreen(t,e,n){var i,o,r=window.scrollX,a=window.scrollY,l=document.createElement("div"),s=document.createElement("div"),u=this.table.modules.export.generateTable(void 0!==n?n:this.table.options.printConfig,void 0!==e?e:this.table.options.printStyled,t||this.table.options.printRowRange,"print");this.manualBlock=!0,this.element=document.createElement("div"),this.element.classList.add("tabulator-print-fullscreen"),this.table.options.printHeader&&(l.classList.add("tabulator-print-header"),"string"==typeof(i="function"==typeof this.table.options.printHeader?this.table.options.printHeader.call(this.table):this.table.options.printHeader)?l.innerHTML=i:l.appendChild(i),this.element.appendChild(l)),this.element.appendChild(u),this.table.options.printFooter&&(s.classList.add("tabulator-print-footer"),"string"==typeof(o="function"==typeof this.table.options.printFooter?this.table.options.printFooter.call(this.table):this.table.options.printFooter)?s.innerHTML=o:s.appendChild(o),this.element.appendChild(s)),document.body.classList.add("tabulator-print-fullscreen-hide"),document.body.appendChild(this.element),this.table.options.printFormatter&&this.table.options.printFormatter(this.element,u),window.print(),this.cleanup(),window.scrollTo(r,a),this.manualBlock=!1}}Et.moduleName="print";class yt extends E{constructor(t){super(t),this.data=!1,this.blocked=!1,this.origFuncs={},this.currentVersion=0,this.registerTableOption("reactiveData",!1)}initialize(){this.table.options.reactiveData&&(this.subscribe("cell-value-save-before",this.block.bind(this,"cellsave")),this.subscribe("cell-value-save-after",this.unblock.bind(this,"cellsave")),this.subscribe("row-data-save-before",this.block.bind(this,"rowsave")),this.subscribe("row-data-save-after",this.unblock.bind(this,"rowsave")),this.subscribe("row-data-init-after",this.watchRow.bind(this)),this.subscribe("data-processing",this.watchData.bind(this)),this.subscribe("table-destroy",this.unwatchData.bind(this)))}watchData(t){var e,n=this;this.currentVersion++,e=this.currentVersion,this.unwatchData(),this.data=t,this.origFuncs.push=t.push,Object.defineProperty(this.data,"push",{enumerable:!1,configurable:!0,value:function(){var i,o=Array.from(arguments);return n.blocked||e!==n.currentVersion||(n.block("data-push"),o.forEach((t=>{n.table.rowManager.addRowActual(t,!1)})),i=n.origFuncs.push.apply(t,arguments),n.unblock("data-push")),i}}),this.origFuncs.unshift=t.unshift,Object.defineProperty(this.data,"unshift",{enumerable:!1,configurable:!0,value:function(){var i,o=Array.from(arguments);return n.blocked||e!==n.currentVersion||(n.block("data-unshift"),o.forEach((t=>{n.table.rowManager.addRowActual(t,!0)})),i=n.origFuncs.unshift.apply(t,arguments),n.unblock("data-unshift")),i}}),this.origFuncs.shift=t.shift,Object.defineProperty(this.data,"shift",{enumerable:!1,configurable:!0,value:function(){var i,o;return n.blocked||e!==n.currentVersion||(n.block("data-shift"),n.data.length&&(i=n.table.rowManager.getRowFromDataObject(n.data[0]))&&i.deleteActual(),o=n.origFuncs.shift.call(t),n.unblock("data-shift")),o}}),this.origFuncs.pop=t.pop,Object.defineProperty(this.data,"pop",{enumerable:!1,configurable:!0,value:function(){var i,o;return n.blocked||e!==n.currentVersion||(n.block("data-pop"),n.data.length&&(i=n.table.rowManager.getRowFromDataObject(n.data[n.data.length-1]))&&i.deleteActual(),o=n.origFuncs.pop.call(t),n.unblock("data-pop")),o}}),this.origFuncs.splice=t.splice,Object.defineProperty(this.data,"splice",{enumerable:!1,configurable:!0,value:function(){var i,o,r=Array.from(arguments),a=r[0]<0?t.length+r[0]:r[0],l=r[1],s=!!r[2]&&r.slice(2);if(!n.blocked&&e===n.currentVersion){if(n.block("data-splice"),s&&((i=!!t[a]&&n.table.rowManager.getRowFromDataObject(t[a]))?s.forEach((t=>{n.table.rowManager.addRowActual(t,!0,i,!0)})):(s=s.slice().reverse()).forEach((t=>{n.table.rowManager.addRowActual(t,!0,!1,!0)}))),0!==l){var u=t.slice(a,void 0===r[1]?r[1]:a+l);u.forEach(((t,e)=>{var i=n.table.rowManager.getRowFromDataObject(t);i&&i.deleteActual(e!==u.length-1)}))}(s||0!==l)&&n.table.rowManager.reRenderInPosition(),o=n.origFuncs.splice.apply(t,arguments),n.unblock("data-splice")}return o}})}unwatchData(){if(!1!==this.data)for(var t in this.origFuncs)Object.defineProperty(this.data,t,{enumerable:!0,configurable:!0,writable:!0,value:this.origFuncs.key})}watchRow(t){var e=t.getData();for(var n in e)this.watchKey(t,e,n);this.table.options.dataTree&&this.watchTreeChildren(t)}watchTreeChildren(t){var e=this,n=t.getData()[this.table.options.dataTreeChildField],i={};n&&(i.push=n.push,Object.defineProperty(n,"push",{enumerable:!1,configurable:!0,value:()=>{if(!e.blocked){e.block("tree-push");var o=i.push.apply(n,arguments);this.rebuildTree(t),e.unblock("tree-push")}return o}}),i.unshift=n.unshift,Object.defineProperty(n,"unshift",{enumerable:!1,configurable:!0,value:()=>{if(!e.blocked){e.block("tree-unshift");var o=i.unshift.apply(n,arguments);this.rebuildTree(t),e.unblock("tree-unshift")}return o}}),i.shift=n.shift,Object.defineProperty(n,"shift",{enumerable:!1,configurable:!0,value:()=>{if(!e.blocked){e.block("tree-shift");var o=i.shift.call(n);this.rebuildTree(t),e.unblock("tree-shift")}return o}}),i.pop=n.pop,Object.defineProperty(n,"pop",{enumerable:!1,configurable:!0,value:()=>{if(!e.blocked){e.block("tree-pop");var o=i.pop.call(n);this.rebuildTree(t),e.unblock("tree-pop")}return o}}),i.splice=n.splice,Object.defineProperty(n,"splice",{enumerable:!1,configurable:!0,value:()=>{if(!e.blocked){e.block("tree-splice");var o=i.splice.apply(n,arguments);this.rebuildTree(t),e.unblock("tree-splice")}return o}}))}rebuildTree(t){this.table.modules.dataTree.initializeRow(t),this.table.modules.dataTree.layoutRow(t),this.table.rowManager.refreshActiveData("tree",!1,!0)}watchKey(t,e,n){var i=this,o=Object.getOwnPropertyDescriptor(e,n),r=e[n],a=this.currentVersion;Object.defineProperty(e,n,{set:e=>{if(r=e,!i.blocked&&a===i.currentVersion){i.block("key");var l={};l[n]=e,t.updateData(l),i.unblock("key")}o.set&&o.set(e)},get:()=>(o.get&&o.get(),r)})}unwatchRow(t){var e=t.getData();for(var n in e)Object.defineProperty(e,n,{value:e[n]})}block(t){this.blocked||(this.blocked=t)}unblock(t){this.blocked===t&&(this.blocked=!1)}}yt.moduleName="reactiveData";class xt extends E{constructor(t){super(t),this.startColumn=!1,this.startX=!1,this.startWidth=!1,this.latestX=!1,this.handle=null,this.initialNextColumn=null,this.nextColumn=null,this.initialized=!1,this.registerColumnOption("resizable",!0),this.registerTableOption("resizableColumnFit",!1)}initialize(){this.subscribe("column-rendered",this.layoutColumnHeader.bind(this))}initializeEventWatchers(){this.initialized||(this.subscribe("cell-rendered",this.layoutCellHandles.bind(this)),this.subscribe("cell-delete",this.deInitializeComponent.bind(this)),this.subscribe("cell-height",this.resizeHandle.bind(this)),this.subscribe("column-moved",this.columnLayoutUpdated.bind(this)),this.subscribe("column-hide",this.deInitializeColumn.bind(this)),this.subscribe("column-show",this.columnLayoutUpdated.bind(this)),this.subscribe("column-width",this.columnWidthUpdated.bind(this)),this.subscribe("column-delete",this.deInitializeComponent.bind(this)),this.subscribe("column-height",this.resizeHandle.bind(this)),this.initialized=!0)}layoutCellHandles(t){"row"===t.row.type&&(this.deInitializeComponent(t),this.initializeColumn("cell",t,t.column,t.element))}layoutColumnHeader(t){t.definition.resizable&&(this.initializeEventWatchers(),this.deInitializeComponent(t),this.initializeColumn("header",t,t,t.element))}columnLayoutUpdated(t){var e=t.prevColumn();this.reinitializeColumn(t),e&&this.reinitializeColumn(e)}columnWidthUpdated(t){t.modules.frozen&&(this.table.modules.frozenColumns.leftColumns.includes(t)?this.table.modules.frozenColumns.leftColumns.forEach((t=>{this.reinitializeColumn(t)})):this.table.modules.frozenColumns.rightColumns.includes(t)&&this.table.modules.frozenColumns.rightColumns.forEach((t=>{this.reinitializeColumn(t)})))}frozenColumnOffset(t){var e=!1;return t.modules.frozen&&(e=t.modules.frozen.marginValue,"left"===t.modules.frozen.position?e+=t.getWidth()-3:e&&(e-=3)),!1!==e&&e+"px"}reinitializeColumn(t){var e=this.frozenColumnOffset(t);t.cells.forEach((n=>{n.modules.resize&&n.modules.resize.handleEl&&(e&&(n.modules.resize.handleEl.style[t.modules.frozen.position]=e,n.modules.resize.handleEl.style["z-index"]=11),n.element.after(n.modules.resize.handleEl))})),t.modules.resize&&t.modules.resize.handleEl&&(e&&(t.modules.resize.handleEl.style[t.modules.frozen.position]=e),t.element.after(t.modules.resize.handleEl))}initializeColumn(t,e,n,i){var o=this,r=n.definition.resizable,a={},l=n.getLastColumn();if("header"===t&&(a={variableHeight:"textarea"==n.definition.formatter||n.definition.variableHeight}),(!0===r||r==t)&&this._checkResizability(l)){var s=document.createElement("span");s.className="tabulator-col-resize-handle",s.addEventListener("click",(function(t){t.stopPropagation()}));var u=function(t){o.startColumn=n,o.initialNextColumn=o.nextColumn=l.nextColumn(),o._mouseDown(t,l,s)};s.addEventListener("mousedown",u),s.addEventListener("touchstart",u,{passive:!0}),s.addEventListener("dblclick",(t=>{var e=l.getWidth();t.stopPropagation(),l.reinitializeWidth(!0),e!==l.getWidth()&&(o.dispatch("column-resized",l),o.table.externalEvents.dispatch("columnResized",l.getComponent()))})),n.modules.frozen&&(s.style.position="sticky",s.style[n.modules.frozen.position]=this.frozenColumnOffset(n)),a.handleEl=s,i.parentNode&&n.visible&&i.after(s)}e.modules.resize=a}deInitializeColumn(t){this.deInitializeComponent(t),t.cells.forEach((t=>{this.deInitializeComponent(t)}))}deInitializeComponent(t){var e;t.modules.resize&&(e=t.modules.resize.handleEl)&&e.parentElement&&e.parentElement.removeChild(e)}resizeHandle(t,e){t.modules.resize&&t.modules.resize.handleEl&&(t.modules.resize.handleEl.style.height=e)}_checkResizability(t){return t.definition.resizable}_mouseDown(t,e,n){var i=this;function o(t){var n,o,r=void 0===t.screenX?t.touches[0].screenX:t.screenX,a=r-i.startX,l=r-i.latestX;if(i.latestX=r,i.table.rtl&&(a=-a,l=-l),n=e.width==e.minWidth||e.width==e.maxWidth,e.setWidth(i.startWidth+a),o=e.width==e.minWidth||e.width==e.maxWidth,l<0&&(i.nextColumn=i.initialNextColumn),i.table.options.resizableColumnFit&&i.nextColumn&&(!n||!o)){let t=i.nextColumn.getWidth();l>0&&t<=i.nextColumn.minWidth&&(i.nextColumn=i.nextColumn.nextColumn()),i.nextColumn&&i.nextColumn.setWidth(i.nextColumn.getWidth()-l)}i.table.columnManager.rerenderColumns(!0),!i.table.browserSlow&&e.modules.resize&&e.modules.resize.variableHeight&&e.checkCellHeights()}function r(t){i.startColumn.modules.edit&&(i.startColumn.modules.edit.blocked=!1),i.table.browserSlow&&e.modules.resize&&e.modules.resize.variableHeight&&e.checkCellHeights(),document.body.removeEventListener("mouseup",r),document.body.removeEventListener("mousemove",o),n.removeEventListener("touchmove",o),n.removeEventListener("touchend",r),i.table.element.classList.remove("tabulator-block-select"),i.startWidth!==e.getWidth()&&(i.table.columnManager.verticalAlignHeaders(),i.dispatch("column-resized",e),i.table.externalEvents.dispatch("columnResized",e.getComponent()))}i.table.element.classList.add("tabulator-block-select"),t.stopPropagation(),i.startColumn.modules.edit&&(i.startColumn.modules.edit.blocked=!0),i.startX=void 0===t.screenX?t.touches[0].screenX:t.screenX,i.latestX=i.startX,i.startWidth=e.getWidth(),document.body.addEventListener("mousemove",o),document.body.addEventListener("mouseup",r),n.addEventListener("touchmove",o,{passive:!0}),n.addEventListener("touchend",r)}}xt.moduleName="resizeColumns";class Bt extends E{constructor(t){super(t),this.startColumn=!1,this.startY=!1,this.startHeight=!1,this.handle=null,this.prevHandle=null,this.registerTableOption("resizableRows",!1)}initialize(){this.table.options.resizableRows&&this.subscribe("row-layout-after",this.initializeRow.bind(this))}initializeRow(t){var e=this,n=t.getElement(),i=document.createElement("div");i.className="tabulator-row-resize-handle";var o=document.createElement("div");o.className="tabulator-row-resize-handle prev",i.addEventListener("click",(function(t){t.stopPropagation()}));var r=function(n){e.startRow=t,e._mouseDown(n,t,i)};i.addEventListener("mousedown",r),i.addEventListener("touchstart",r,{passive:!0}),o.addEventListener("click",(function(t){t.stopPropagation()}));var a=function(n){var i=e.table.rowManager.prevDisplayRow(t);i&&(e.startRow=i,e._mouseDown(n,i,o))};o.addEventListener("mousedown",a),o.addEventListener("touchstart",a,{passive:!0}),n.appendChild(i),n.appendChild(o)}_mouseDown(t,e,n){var i=this;function o(t){e.setHeight(i.startHeight+((void 0===t.screenY?t.touches[0].screenY:t.screenY)-i.startY))}function r(t){document.body.removeEventListener("mouseup",o),document.body.removeEventListener("mousemove",o),n.removeEventListener("touchmove",o),n.removeEventListener("touchend",r),i.table.element.classList.remove("tabulator-block-select"),i.dispatchExternal("rowResized",e.getComponent())}i.table.element.classList.add("tabulator-block-select"),t.stopPropagation(),i.startY=void 0===t.screenY?t.touches[0].screenY:t.screenY,i.startHeight=e.getHeight(),document.body.addEventListener("mousemove",o),document.body.addEventListener("mouseup",r),n.addEventListener("touchmove",o,{passive:!0}),n.addEventListener("touchend",r)}}Bt.moduleName="resizeRows";class kt extends E{constructor(t){super(t),this.binding=!1,this.visibilityObserver=!1,this.resizeObserver=!1,this.containerObserver=!1,this.tableHeight=0,this.tableWidth=0,this.containerHeight=0,this.containerWidth=0,this.autoResize=!1,this.visible=!1,this.initialized=!1,this.initialRedraw=!1,this.registerTableOption("autoResize",!0)}initialize(){if(this.table.options.autoResize){var t,e=this.table;this.tableHeight=e.element.clientHeight,this.tableWidth=e.element.clientWidth,e.element.parentNode&&(this.containerHeight=e.element.parentNode.clientHeight,this.containerWidth=e.element.parentNode.clientWidth),"undefined"!=typeof IntersectionObserver&&"undefined"!=typeof ResizeObserver&&"virtual"===e.rowManager.getRenderMode()?(this.initializeVisibilityObserver(),this.autoResize=!0,this.resizeObserver=new ResizeObserver((t=>{if(!e.browserMobile||e.browserMobile&&!e.modules.edit.currentCell){var n=Math.floor(t[0].contentRect.height),i=Math.floor(t[0].contentRect.width);this.tableHeight==n&&this.tableWidth==i||(this.tableHeight=n,this.tableWidth=i,e.element.parentNode&&(this.containerHeight=e.element.parentNode.clientHeight,this.containerWidth=e.element.parentNode.clientWidth),this.redrawTable())}})),this.resizeObserver.observe(e.element),t=window.getComputedStyle(e.element),this.table.element.parentNode&&!this.table.rowManager.fixedHeight&&(t.getPropertyValue("max-height")||t.getPropertyValue("min-height"))&&(this.containerObserver=new ResizeObserver((t=>{if(!e.browserMobile||e.browserMobile&&!e.modules.edit.currentCell){var n=Math.floor(t[0].contentRect.height),i=Math.floor(t[0].contentRect.width);this.containerHeight==n&&this.containerWidth==i||(this.containerHeight=n,this.containerWidth=i,this.tableHeight=e.element.clientHeight,this.tableWidth=e.element.clientWidth),this.redrawTable()}})),this.containerObserver.observe(this.table.element.parentNode)),this.subscribe("table-resize",this.tableResized.bind(this))):(this.binding=function(){(!e.browserMobile||e.browserMobile&&!e.modules.edit.currentCell)&&(e.columnManager.rerenderColumns(!0),e.redraw())},window.addEventListener("resize",this.binding)),this.subscribe("table-destroy",this.clearBindings.bind(this))}}initializeVisibilityObserver(){this.visibilityObserver=new IntersectionObserver((t=>{this.visible=t[0].isIntersecting,this.initialized?this.visible&&(this.redrawTable(this.initialRedraw),this.initialRedraw=!1):(this.initialized=!0,this.initialRedraw=!this.visible)})),this.visibilityObserver.observe(this.table.element)}redrawTable(t){this.initialized&&this.visible&&(this.table.columnManager.rerenderColumns(!0),this.table.redraw(t))}tableResized(){this.table.rowManager.redraw()}clearBindings(){this.binding&&window.removeEventListener("resize",this.binding),this.resizeObserver&&this.resizeObserver.unobserve(this.table.element),this.visibilityObserver&&this.visibilityObserver.unobserve(this.table.element),this.containerObserver&&this.containerObserver.unobserve(this.table.element.parentNode)}}kt.moduleName="resizeTable";class Rt extends E{constructor(t){super(t),this.columns=[],this.hiddenColumns=[],this.mode="",this.index=0,this.collapseFormatter=[],this.collapseStartOpen=!0,this.collapseHandleColumn=!1,this.registerTableOption("responsiveLayout",!1),this.registerTableOption("responsiveLayoutCollapseStartOpen",!0),this.registerTableOption("responsiveLayoutCollapseUseFormatters",!0),this.registerTableOption("responsiveLayoutCollapseFormatter",!1),this.registerColumnOption("responsive")}initialize(){this.table.options.responsiveLayout&&(this.subscribe("column-layout",this.initializeColumn.bind(this)),this.subscribe("column-show",this.updateColumnVisibility.bind(this)),this.subscribe("column-hide",this.updateColumnVisibility.bind(this)),this.subscribe("columns-loaded",this.initializeResponsivity.bind(this)),this.subscribe("column-moved",this.initializeResponsivity.bind(this)),this.subscribe("column-add",this.initializeResponsivity.bind(this)),this.subscribe("column-delete",this.initializeResponsivity.bind(this)),this.subscribe("table-redrawing",this.tableRedraw.bind(this)),"collapse"===this.table.options.responsiveLayout&&(this.subscribe("row-data-changed",this.generateCollapsedRowContent.bind(this)),this.subscribe("row-init",this.initializeRow.bind(this)),this.subscribe("row-layout",this.layoutRow.bind(this))))}tableRedraw(t){-1===["fitColumns","fitDataStretch"].indexOf(this.layoutMode())&&(t||this.update())}initializeResponsivity(){var t=[];this.mode=this.table.options.responsiveLayout,this.collapseFormatter=this.table.options.responsiveLayoutCollapseFormatter||this.formatCollapsedData,this.collapseStartOpen=this.table.options.responsiveLayoutCollapseStartOpen,this.hiddenColumns=[],this.table.columnManager.columnsByIndex.forEach(((e,n)=>{e.modules.responsive&&e.modules.responsive.order&&e.modules.responsive.visible&&(e.modules.responsive.index=n,t.push(e),e.visible||"collapse"!==this.mode||this.hiddenColumns.push(e))})),t=(t=t.reverse()).sort(((t,e)=>e.modules.responsive.order-t.modules.responsive.order||e.modules.responsive.index-t.modules.responsive.index)),this.columns=t,"collapse"===this.mode&&this.generateCollapsedContent();for(let t of this.table.columnManager.columnsByIndex)if("responsiveCollapse"==t.definition.formatter){this.collapseHandleColumn=t;break}this.collapseHandleColumn&&(this.hiddenColumns.length?this.collapseHandleColumn.show():this.collapseHandleColumn.hide())}initializeColumn(t){var e=t.getDefinition();t.modules.responsive={order:void 0===e.responsive?1:e.responsive,visible:!1!==e.visible}}initializeRow(t){var e;"calc"!==t.type&&((e=document.createElement("div")).classList.add("tabulator-responsive-collapse"),t.modules.responsiveLayout={element:e,open:this.collapseStartOpen},this.collapseStartOpen||(e.style.display="none"))}layoutRow(t){var e=t.getElement();t.modules.responsiveLayout&&(e.appendChild(t.modules.responsiveLayout.element),this.generateCollapsedRowContent(t))}updateColumnVisibility(t,e){!e&&t.modules.responsive&&(t.modules.responsive.visible=t.visible,this.initializeResponsivity())}hideColumn(t){var e=this.hiddenColumns.length;t.hide(!1,!0),"collapse"===this.mode&&(this.hiddenColumns.unshift(t),this.generateCollapsedContent(),this.collapseHandleColumn&&!e&&this.collapseHandleColumn.show())}showColumn(t){var e;t.show(!1,!0),t.setWidth(t.getWidth()),"collapse"===this.mode&&((e=this.hiddenColumns.indexOf(t))>-1&&this.hiddenColumns.splice(e,1),this.generateCollapsedContent(),this.collapseHandleColumn&&!this.hiddenColumns.length&&this.collapseHandleColumn.hide())}update(){for(var t=!0;t;){let e="fitColumns"==this.table.modules.layout.getMode()?this.table.columnManager.getFlexBaseWidth():this.table.columnManager.getWidth(),n=(this.table.options.headerVisible?this.table.columnManager.element.clientWidth:this.table.element.clientWidth)-e;if(n<0){let e=this.columns[this.index];e?(this.hideColumn(e),this.index++):t=!1}else{let e=this.columns[this.index-1];e&&n>0&&n>=e.getWidth()?(this.showColumn(e),this.index--):t=!1}this.table.rowManager.activeRowsCount||this.table.rowManager.renderEmptyScroll()}}generateCollapsedContent(){this.table.rowManager.getDisplayRows().forEach((t=>{this.generateCollapsedRowContent(t)}))}generateCollapsedRowContent(t){var e,n;if(t.modules.responsiveLayout){for(e=t.modules.responsiveLayout.element;e.firstChild;)e.removeChild(e.firstChild);(n=this.collapseFormatter(this.generateCollapsedRowData(t)))&&e.appendChild(n)}}generateCollapsedRowData(t){var e,n=t.getData(),i=[];return this.hiddenColumns.forEach((o=>{var r=o.getFieldValue(n);if(o.definition.title&&o.field)if(o.modules.format&&this.table.options.responsiveLayoutCollapseUseFormatters){function a(t){t()}e={value:!1,data:{},getValue:function(){return r},getData:function(){return n},getType:function(){return"cell"},getElement:function(){return document.createElement("div")},getRow:function(){return t.getComponent()},getColumn:function(){return o.getComponent()},getTable:()=>this.table},i.push({field:o.field,title:o.definition.title,value:o.modules.format.formatter.call(this.table.modules.format,e,o.modules.format.params,a)})}else i.push({field:o.field,title:o.definition.title,value:r})})),i}formatCollapsedData(t){var e=document.createElement("table");return t.forEach((function(t){var n,i=document.createElement("tr"),o=document.createElement("td"),r=document.createElement("td"),a=document.createElement("strong");o.appendChild(a),this.langBind("columns|"+t.field,(function(e){a.innerHTML=e||t.title})),t.value instanceof Node?((n=document.createElement("div")).appendChild(t.value),r.appendChild(n)):r.innerHTML=t.value,i.appendChild(o),i.appendChild(r),e.appendChild(i)}),this),Object.keys(t).length?e:""}}Rt.moduleName="responsiveLayout";class _t extends E{constructor(t){super(t),this.selecting=!1,this.lastClickedRow=!1,this.selectPrev=[],this.selectedRows=[],this.headerCheckboxElement=null,this.registerTableOption("selectable","highlight"),this.registerTableOption("selectableRangeMode","drag"),this.registerTableOption("selectableRollingSelection",!0),this.registerTableOption("selectablePersistence",!0),this.registerTableOption("selectableCheck",(function(t,e){return!0})),this.registerTableFunction("selectRow",this.selectRows.bind(this)),this.registerTableFunction("deselectRow",this.deselectRows.bind(this)),this.registerTableFunction("toggleSelectRow",this.toggleRow.bind(this)),this.registerTableFunction("getSelectedRows",this.getSelectedRows.bind(this)),this.registerTableFunction("getSelectedData",this.getSelectedData.bind(this)),this.registerComponentFunction("row","select",this.selectRows.bind(this)),this.registerComponentFunction("row","deselect",this.deselectRows.bind(this)),this.registerComponentFunction("row","toggleSelect",this.toggleRow.bind(this)),this.registerComponentFunction("row","isSelected",this.isRowSelected.bind(this))}initialize(){!1!==this.table.options.selectable&&(this.subscribe("row-init",this.initializeRow.bind(this)),this.subscribe("row-deleting",this.rowDeleted.bind(this)),this.subscribe("rows-wipe",this.clearSelectionData.bind(this)),this.subscribe("rows-retrieve",this.rowRetrieve.bind(this)),this.table.options.selectable&&!this.table.options.selectablePersistence&&this.subscribe("data-refreshing",this.deselectRows.bind(this)))}rowRetrieve(t,e){return"selected"===t?this.selectedRows:e}rowDeleted(t){this._deselectRow(t,!0)}clearSelectionData(t){var e=this.selectedRows.length;this.selecting=!1,this.lastClickedRow=!1,this.selectPrev=[],this.selectedRows=[],e&&!0!==t&&this._rowSelectionChanged()}initializeRow(t){var e=this,n=t.getElement(),i=function(){setTimeout((function(){e.selecting=!1}),50),document.body.removeEventListener("mouseup",i)};t.modules.select={selected:!1},e.checkRowSelectability(t)?(n.classList.add("tabulator-selectable"),n.classList.remove("tabulator-unselectable"),e.table.options.selectable&&"highlight"!=e.table.options.selectable&&("click"===e.table.options.selectableRangeMode?n.addEventListener("click",this.handleComplexRowClick.bind(this,t)):(n.addEventListener("click",(function(n){e.table.modExists("edit")&&e.table.modules.edit.getCurrentCell()||e.table._clearSelection(),e.selecting||e.toggleRow(t)})),n.addEventListener("mousedown",(function(n){if(n.shiftKey)return e.table._clearSelection(),e.selecting=!0,e.selectPrev=[],document.body.addEventListener("mouseup",i),document.body.addEventListener("keyup",i),e.toggleRow(t),!1})),n.addEventListener("mouseenter",(function(n){e.selecting&&(e.table._clearSelection(),e.toggleRow(t),e.selectPrev[1]==t&&e.toggleRow(e.selectPrev[0]))})),n.addEventListener("mouseout",(function(n){e.selecting&&(e.table._clearSelection(),e.selectPrev.unshift(t))}))))):(n.classList.add("tabulator-unselectable"),n.classList.remove("tabulator-selectable"))}handleComplexRowClick(t,e){if(e.shiftKey){this.table._clearSelection(),this.lastClickedRow=this.lastClickedRow||t;var n=this.table.rowManager.getDisplayRowIndex(this.lastClickedRow),i=this.table.rowManager.getDisplayRowIndex(t),o=n<=i?n:i,r=n>=i?n:i,a=this.table.rowManager.getDisplayRows().slice(0).splice(o,r-o+1);e.ctrlKey||e.metaKey?(a.forEach((e=>{e!==this.lastClickedRow&&(!0===this.table.options.selectable||this.isRowSelected(t)||this.selectedRows.length<this.table.options.selectable)&&this.toggleRow(e)})),this.lastClickedRow=t):(this.deselectRows(void 0,!0),!0!==this.table.options.selectable&&a.length>this.table.options.selectable&&(a=a.slice(0,this.table.options.selectable)),this.selectRows(a)),this.table._clearSelection()}else e.ctrlKey||e.metaKey?(this.toggleRow(t),this.lastClickedRow=t):(this.deselectRows(void 0,!0),this.selectRows(t),this.lastClickedRow=t)}checkRowSelectability(t){return!(!t||"row"!==t.type)&&this.table.options.selectableCheck.call(this.table,t.getComponent())}toggleRow(t){this.checkRowSelectability(t)&&(t.modules.select&&t.modules.select.selected?this._deselectRow(t):this._selectRow(t))}selectRows(t){var e,n,i=[];switch(typeof t){case"undefined":e=this.table.rowManager.rows;break;case"string":(e=this.table.rowManager.findRow(t))||(e=this.table.rowManager.getRows(t));break;default:e=t}Array.isArray(e)?e.length&&(e.forEach((t=>{(n=this._selectRow(t,!0,!0))&&i.push(n)})),this._rowSelectionChanged(!1,i)):e&&this._selectRow(e,!1,!0)}_selectRow(t,e,n){if(!isNaN(this.table.options.selectable)&&!0!==this.table.options.selectable&&!n&&this.selectedRows.length>=this.table.options.selectable){if(!this.table.options.selectableRollingSelection)return!1;this._deselectRow(this.selectedRows[0])}var i=this.table.rowManager.findRow(t);if(i){if(-1==this.selectedRows.indexOf(i))return i.getElement().classList.add("tabulator-selected"),i.modules.select||(i.modules.select={}),i.modules.select.selected=!0,i.modules.select.checkboxEl&&(i.modules.select.checkboxEl.checked=!0),this.selectedRows.push(i),this.table.options.dataTreeSelectPropagate&&this.childRowSelection(i,!0),this.dispatchExternal("rowSelected",i.getComponent()),this._rowSelectionChanged(e,i),i}else e||console.warn("Selection Error - No such row found, ignoring selection:"+t)}isRowSelected(t){return-1!==this.selectedRows.indexOf(t)}deselectRows(t,e){var n,i,o=[];switch(typeof t){case"undefined":n=Object.assign([],this.selectedRows);break;case"string":(n=this.table.rowManager.findRow(t))||(n=this.table.rowManager.getRows(t));break;default:n=t}Array.isArray(n)?n.length&&(n.forEach((t=>{(i=this._deselectRow(t,!0,!0))&&o.push(i)})),this._rowSelectionChanged(e,[],o)):n&&this._deselectRow(n,e,!0)}_deselectRow(t,e){var n,i,o=this,r=o.table.rowManager.findRow(t);if(r){if((n=o.selectedRows.findIndex((function(t){return t==r})))>-1)return(i=r.getElement())&&i.classList.remove("tabulator-selected"),r.modules.select||(r.modules.select={}),r.modules.select.selected=!1,r.modules.select.checkboxEl&&(r.modules.select.checkboxEl.checked=!1),o.selectedRows.splice(n,1),this.table.options.dataTreeSelectPropagate&&this.childRowSelection(r,!1),this.dispatchExternal("rowDeselected",r.getComponent()),o._rowSelectionChanged(e,void 0,r),r}else e||console.warn("Deselection Error - No such row found, ignoring selection:"+t)}getSelectedData(){var t=[];return this.selectedRows.forEach((function(e){t.push(e.getData())})),t}getSelectedRows(){var t=[];return this.selectedRows.forEach((function(e){t.push(e.getComponent())})),t}_rowSelectionChanged(t,e=[],n=[]){this.headerCheckboxElement&&(0===this.selectedRows.length?(this.headerCheckboxElement.checked=!1,this.headerCheckboxElement.indeterminate=!1):this.table.rowManager.rows.length===this.selectedRows.length?(this.headerCheckboxElement.checked=!0,this.headerCheckboxElement.indeterminate=!1):(this.headerCheckboxElement.indeterminate=!0,this.headerCheckboxElement.checked=!1)),t||(Array.isArray(e)||(e=[e]),e=e.map((t=>t.getComponent())),Array.isArray(n)||(n=[n]),n=n.map((t=>t.getComponent())),this.dispatchExternal("rowSelectionChanged",this.getSelectedData(),this.getSelectedRows(),e,n))}registerRowSelectCheckbox(t,e){t._row.modules.select||(t._row.modules.select={}),t._row.modules.select.checkboxEl=e}registerHeaderSelectCheckbox(t){this.headerCheckboxElement=t}childRowSelection(t,e){var n=this.table.modules.dataTree.getChildren(t,!0);if(e)for(let t of n)this._selectRow(t,!0);else for(let t of n)this._deselectRow(t,!0)}}function Tt(t,e,n,i,o,r,a){var l=window.DateTime||luxon.DateTime,s=a.format||"dd/MM/yyyy HH:mm:ss",u=a.alignEmptyValues,h=0;if(void 0!==l){if(l.isDateTime(t)||(t="iso"===s?l.fromISO(String(t)):l.fromFormat(String(t),s)),l.isDateTime(e)||(e="iso"===s?l.fromISO(String(e)):l.fromFormat(String(e),s)),t.isValid){if(e.isValid)return t-e;h=1}else h=e.isValid?-1:0;return("top"===u&&"desc"===r||"bottom"===u&&"asc"===r)&&(h*=-1),h}console.error("Sort Error - 'datetime' sorter is dependant on luxon.js")}_t.moduleName="selectRow";var zt={number:function(t,e,n,i,o,r,a){var l=a.alignEmptyValues,s=a.decimalSeparator,u=a.thousandSeparator,h=0;if(t=String(t),e=String(e),u&&(t=t.split(u).join(""),e=e.split(u).join("")),s&&(t=t.split(s).join("."),e=e.split(s).join(".")),t=parseFloat(t),e=parseFloat(e),isNaN(t))h=isNaN(e)?0:-1;else{if(!isNaN(e))return t-e;h=1}return("top"===l&&"desc"===r||"bottom"===l&&"asc"===r)&&(h*=-1),h},string:function(t,e,n,i,o,r,a){var l,s=a.alignEmptyValues,u=0;if(t){if(e){switch(typeof a.locale){case"boolean":a.locale&&(l=this.langLocale());break;case"string":l=a.locale}return String(t).toLowerCase().localeCompare(String(e).toLowerCase(),l)}u=1}else u=e?-1:0;return("top"===s&&"desc"===r||"bottom"===s&&"asc"===r)&&(u*=-1),u},date:function(t,e,n,i,o,r,a){return a.format||(a.format="dd/MM/yyyy"),Tt.call(this,t,e,n,i,o,r,a)},time:function(t,e,n,i,o,r,a){return a.format||(a.format="HH:mm"),Tt.call(this,t,e,n,i,o,r,a)},datetime:Tt,boolean:function(t,e,n,i,o,r,a){return(!0===t||"true"===t||"True"===t||1===t?1:0)-(!0===e||"true"===e||"True"===e||1===e?1:0)},array:function(t,e,n,i,o,r,a){var l=a.type||"length",s=a.alignEmptyValues,u=0;function h(t){var e;switch(l){case"length":e=t.length;break;case"sum":e=t.reduce((function(t,e){return t+e}));break;case"max":e=Math.max.apply(null,t);break;case"min":e=Math.min.apply(null,t);break;case"avg":e=t.reduce((function(t,e){return t+e}))/t.length}return e}if(Array.isArray(t)){if(Array.isArray(e))return h(e)-h(t);u=1}else u=Array.isArray(e)?-1:0;return("top"===s&&"desc"===r||"bottom"===s&&"asc"===r)&&(u*=-1),u},exists:function(t,e,n,i,o,r,a){return(void 0===t?0:1)-(void 0===e?0:1)},alphanum:function(t,e,n,i,o,r,a){var l,s,u,h,c,d=0,p=/(\d+)|(\D+)/g,b=/\d/,m=a.alignEmptyValues,g=0;if(t||0===t){if(e||0===e){if(isFinite(t)&&isFinite(e))return t-e;if((l=String(t).toLowerCase())===(s=String(e).toLowerCase()))return 0;if(!b.test(l)||!b.test(s))return l>s?1:-1;for(l=l.match(p),s=s.match(p),c=l.length>s.length?s.length:l.length;d<c;)if((u=l[d])!==(h=s[d++]))return isFinite(u)&&isFinite(h)?("0"===u.charAt(0)&&(u="."+u),"0"===h.charAt(0)&&(h="."+h),u-h):u>h?1:-1;return l.length>s.length}g=1}else g=e||0===e?-1:0;return("top"===m&&"desc"===r||"bottom"===m&&"asc"===r)&&(g*=-1),g}};class Mt extends E{constructor(t){super(t),this.sortList=[],this.changed=!1,this.registerTableOption("sortMode","local"),this.registerTableOption("initialSort",!1),this.registerTableOption("columnHeaderSortMulti",!0),this.registerTableOption("sortOrderReverse",!1),this.registerTableOption("headerSortElement","<div class='tabulator-arrow'></div>"),this.registerTableOption("headerSortClickElement","header"),this.registerColumnOption("sorter"),this.registerColumnOption("sorterParams"),this.registerColumnOption("headerSort",!0),this.registerColumnOption("headerSortStartingDir"),this.registerColumnOption("headerSortTristate")}initialize(){this.subscribe("column-layout",this.initializeColumn.bind(this)),this.subscribe("table-built",this.tableBuilt.bind(this)),this.registerDataHandler(this.sort.bind(this),20),this.registerTableFunction("setSort",this.userSetSort.bind(this)),this.registerTableFunction("getSorters",this.getSort.bind(this)),this.registerTableFunction("clearSort",this.clearSort.bind(this)),"remote"===this.table.options.sortMode&&this.subscribe("data-params",this.remoteSortParams.bind(this))}tableBuilt(){this.table.options.initialSort&&this.setSort(this.table.options.initialSort)}remoteSortParams(t,e,n,i){var o=this.getSort();return o.forEach((t=>{delete t.column})),i.sort=o,i}userSetSort(t,e){this.setSort(t,e),this.refreshSort()}clearSort(){this.clear(),this.refreshSort()}initializeColumn(t){var e,n,i=!1;switch(typeof t.definition.sorter){case"string":Mt.sorters[t.definition.sorter]?i=Mt.sorters[t.definition.sorter]:console.warn("Sort Error - No such sorter found: ",t.definition.sorter);break;case"function":i=t.definition.sorter}if(t.modules.sort={sorter:i,dir:"none",params:t.definition.sorterParams||{},startingDir:t.definition.headerSortStartingDir||"asc",tristate:t.definition.headerSortTristate},!1!==t.definition.headerSort){switch((e=t.getElement()).classList.add("tabulator-sortable"),(n=document.createElement("div")).classList.add("tabulator-col-sorter"),"icon"===this.table.options.headerSortClickElement?n.classList.add("tabulator-col-sorter-element"):e.classList.add("tabulator-col-sorter-element"),this.table.options.headerSortElement){case"function":break;case"object":n.appendChild(this.table.options.headerSortElement);break;default:n.innerHTML=this.table.options.headerSortElement}t.titleHolderElement.appendChild(n),t.modules.sort.element=n,this.setColumnHeaderSortIcon(t,"none"),("icon"===this.table.options.headerSortClickElement?n:e).addEventListener("click",(e=>{var n="",i=[],o=!1;if(t.modules.sort){if(t.modules.sort.tristate)n="none"==t.modules.sort.dir?t.modules.sort.startingDir:t.modules.sort.dir==t.modules.sort.startingDir?"asc"==t.modules.sort.dir?"desc":"asc":"none";else switch(t.modules.sort.dir){case"asc":n="desc";break;case"desc":n="asc";break;default:n=t.modules.sort.startingDir}this.table.options.columnHeaderSortMulti&&(e.shiftKey||e.ctrlKey)?(o=(i=this.getSort()).findIndex((e=>e.field===t.getField())),o>-1?(i[o].dir=n,o=i.splice(o,1)[0],"none"!=n&&i.push(o)):"none"!=n&&i.push({column:t,dir:n}),this.setSort(i)):"none"==n?this.clear():this.setSort(t,n),this.refreshSort()}}))}}refreshSort(){"remote"===this.table.options.sortMode?this.reloadData(null,!1,!1):this.refreshData(!0)}hasChanged(){var t=this.changed;return this.changed=!1,t}getSort(){var t=[];return this.sortList.forEach((function(e){e.column&&t.push({column:e.column.getComponent(),field:e.column.getField(),dir:e.dir})})),t}setSort(t,e){var n=this,i=[];Array.isArray(t)||(t=[{column:t,dir:e}]),t.forEach((function(t){var e;(e=n.table.columnManager.findColumn(t.column))?(t.column=e,i.push(t),n.changed=!0):console.warn("Sort Warning - Sort field does not exist and is being ignored: ",t.column)})),n.sortList=i,this.dispatch("sort-changed")}clear(){this.setSort([])}findSorter(t){var e,n=this.table.rowManager.activeRows[0],i="string";if(n&&(n=n.getData(),t.getField()))switch(typeof(e=t.getFieldValue(n))){case"undefined":i="string";break;case"boolean":i="boolean";break;default:isNaN(e)||""===e?e.match(/((^[0-9]+[a-z]+)|(^[a-z]+[0-9]+))+$/i)&&(i="alphanum"):i="number"}return Mt.sorters[i]}sort(t){var e=this,n=this.table.options.sortOrderReverse?e.sortList.slice().reverse():e.sortList,i=[],o=[];return this.subscribedExternal("dataSorting")&&this.dispatchExternal("dataSorting",e.getSort()),e.clearColumnHeaders(),"remote"!==this.table.options.sortMode?(n.forEach((function(t,n){var o;t.column&&((o=t.column.modules.sort)&&(o.sorter||(o.sorter=e.findSorter(t.column)),t.params="function"==typeof o.params?o.params(t.column.getComponent(),t.dir):o.params,i.push(t)),e.setColumnHeader(t.column,t.dir))})),i.length&&e._sortItems(t,i)):n.forEach((function(t,n){e.setColumnHeader(t.column,t.dir)})),this.subscribedExternal("dataSorted")&&(t.forEach((t=>{o.push(t.getComponent())})),this.dispatchExternal("dataSorted",e.getSort(),o)),t}clearColumnHeaders(){this.table.columnManager.getRealColumns().forEach((t=>{t.modules.sort&&(t.modules.sort.dir="none",t.getElement().setAttribute("aria-sort","none"),this.setColumnHeaderSortIcon(t,"none"))}))}setColumnHeader(t,e){t.modules.sort.dir=e,t.getElement().setAttribute("aria-sort","asc"===e?"ascending":"descending"),this.setColumnHeaderSortIcon(t,e)}setColumnHeaderSortIcon(t,e){var n,i=t.modules.sort.element;if(t.definition.headerSort&&"function"==typeof this.table.options.headerSortElement){for(;i.firstChild;)i.removeChild(i.firstChild);"object"==typeof(n=this.table.options.headerSortElement.call(this.table,t.getComponent(),e))?i.appendChild(n):i.innerHTML=n}}_sortItems(t,e){var n=e.length-1;t.sort(((t,i)=>{for(var o,r=n;r>=0;r--){let n=e[r];if(0!==(o=this._sortRow(t,i,n.column,n.dir,n.params)))break}return o}))}_sortRow(t,e,n,i,o){var r,a,l="asc"==i?t:e,s="asc"==i?e:t;return t=void 0!==(t=n.getFieldValue(l.getData()))?t:"",e=void 0!==(e=n.getFieldValue(s.getData()))?e:"",r=l.getComponent(),a=s.getComponent(),n.modules.sort.sorter.call(this,t,e,r,a,n.getComponent(),i,o)}}Mt.moduleName="sort",Mt.sorters=zt;class Lt extends E{constructor(t){super(t),this.tooltipSubscriber=null,this.headerSubscriber=null,this.timeout=null,this.popupInstance=null,this.registerTableOption("tooltipGenerationMode",void 0),this.registerTableOption("tooltipDelay",300),this.registerColumnOption("tooltip"),this.registerColumnOption("headerTooltip")}initialize(){this.deprecatedOptionsCheck(),this.subscribe("column-init",this.initializeColumn.bind(this))}deprecatedOptionsCheck(){this.deprecationCheckMsg("tooltipGenerationMode","This option is no longer needed as tooltips are always generated on hover now")}initializeColumn(t){t.definition.headerTooltip&&!this.headerSubscriber&&(this.headerSubscriber=!0,this.subscribe("column-mousemove",this.mousemoveCheck.bind(this,"headerTooltip")),this.subscribe("column-mouseout",this.mouseoutCheck.bind(this,"headerTooltip"))),t.definition.tooltip&&!this.tooltipSubscriber&&(this.tooltipSubscriber=!0,this.subscribe("cell-mousemove",this.mousemoveCheck.bind(this,"tooltip")),this.subscribe("cell-mouseout",this.mouseoutCheck.bind(this,"tooltip")))}mousemoveCheck(t,e,n){var i="tooltip"===t?n.column.definition.tooltip:n.definition.headerTooltip;i&&(this.clearPopup(),this.timeout=setTimeout(this.loadTooltip.bind(this,e,n,i),this.table.options.tooltipDelay))}mouseoutCheck(t,e,n){this.popupInstance||this.clearPopup()}clearPopup(t,e,n){clearTimeout(this.timeout),this.timeout=null,this.popupInstance&&this.popupInstance.hide()}loadTooltip(t,e,n){var i,o,r;"function"==typeof n&&(n=n(t,e.getComponent(),(function(t){o=t}))),n instanceof HTMLElement?i=n:(i=document.createElement("div"),!0===n&&(e instanceof S?n=e.value:e.definition.field?this.langBind("columns|"+e.definition.field,(t=>{i.innerHTML=n=t||e.definition.title})):n=e.definition.title),i.innerHTML=n),(n||0===n||!1===n)&&(i.classList.add("tabulator-tooltip"),i.addEventListener("mousemove",(t=>t.preventDefault())),this.popupInstance=this.popup(i),"function"==typeof o&&this.popupInstance.renderCallback(o),r=this.popupInstance.containerEventCoords(t),this.popupInstance.show(r.x+15,r.y+15).hideOnBlur((()=>{this.dispatchExternal("TooltipClosed",e.getComponent()),this.popupInstance=null})),this.dispatchExternal("TooltipOpened",e.getComponent()))}}Lt.moduleName="tooltip";var St={integer:function(t,e,n){return""===e||null==e||(e=Number(e),!isNaN(e)&&isFinite(e)&&Math.floor(e)===e)},float:function(t,e,n){return""===e||null==e||(e=Number(e),!isNaN(e)&&isFinite(e)&&e%1!=0)},numeric:function(t,e,n){return""===e||null==e||!isNaN(e)},string:function(t,e,n){return""===e||null==e||isNaN(e)},max:function(t,e,n){return""===e||null==e||parseFloat(e)<=n},min:function(t,e,n){return""===e||null==e||parseFloat(e)>=n},starts:function(t,e,n){return""===e||null==e||String(e).toLowerCase().startsWith(String(n).toLowerCase())},ends:function(t,e,n){return""===e||null==e||String(e).toLowerCase().endsWith(String(n).toLowerCase())},minLength:function(t,e,n){return""===e||null==e||String(e).length>=n},maxLength:function(t,e,n){return""===e||null==e||String(e).length<=n},in:function(t,e,n){return""===e||null==e||("string"==typeof n&&(n=n.split("|")),n.indexOf(e)>-1)},regex:function(t,e,n){return""===e||null==e||new RegExp(n).test(e)},unique:function(t,e,n){if(""===e||null==e)return!0;var i=!0,o=t.getData(),r=t.getColumn()._getSelf();return this.table.rowManager.rows.forEach((function(t){var n=t.getData();n!==o&&e==r.getFieldValue(n)&&(i=!1)})),i},required:function(t,e,n){return""!==e&&null!=e}};class Dt extends E{constructor(t){super(t),this.invalidCells=[],this.registerTableOption("validationMode","blocking"),this.registerColumnOption("validator"),this.registerTableFunction("getInvalidCells",this.getInvalidCells.bind(this)),this.registerTableFunction("clearCellValidation",this.userClearCellValidation.bind(this)),this.registerTableFunction("validate",this.userValidate.bind(this)),this.registerComponentFunction("cell","isValid",this.cellIsValid.bind(this)),this.registerComponentFunction("cell","clearValidation",this.clearValidation.bind(this)),this.registerComponentFunction("cell","validate",this.cellValidate.bind(this)),this.registerComponentFunction("column","validate",this.columnValidate.bind(this)),this.registerComponentFunction("row","validate",this.rowValidate.bind(this))}initialize(){this.subscribe("cell-delete",this.clearValidation.bind(this)),this.subscribe("column-layout",this.initializeColumnCheck.bind(this)),this.subscribe("edit-success",this.editValidate.bind(this)),this.subscribe("edit-editor-clear",this.editorClear.bind(this)),this.subscribe("edit-edited-clear",this.editedClear.bind(this))}editValidate(t,e,n){var i="manual"===this.table.options.validationMode||this.validate(t.column.modules.validate,t,e);return!0!==i&&setTimeout((()=>{t.getElement().classList.add("tabulator-validation-fail"),this.dispatchExternal("validationFailed",t.getComponent(),e,i)})),i}editorClear(t,e){e&&t.column.modules.validate&&this.cellValidate(t),t.getElement().classList.remove("tabulator-validation-fail")}editedClear(t){t.modules.validate&&(t.modules.validate.invalid=!1)}cellIsValid(t){return t.modules.validate&&t.modules.validate.invalid||!0}cellValidate(t){return this.validate(t.column.modules.validate,t,t.getValue())}columnValidate(t){var e=[];return t.cells.forEach((t=>{!0!==this.cellValidate(t)&&e.push(t.getComponent())})),!e.length||e}rowValidate(t){var e=[];return t.cells.forEach((t=>{!0!==this.cellValidate(t)&&e.push(t.getComponent())})),!e.length||e}userClearCellValidation(t){t||(t=this.getInvalidCells()),Array.isArray(t)||(t=[t]),t.forEach((t=>{this.clearValidation(t._getSelf())}))}userValidate(t){var e=[];return this.table.rowManager.rows.forEach((t=>{var n=(t=t.getComponent()).validate();!0!==n&&(e=e.concat(n))})),!e.length||e}initializeColumnCheck(t){void 0!==t.definition.validator&&this.initializeColumn(t)}initializeColumn(t){var e,n=this,i=[];t.definition.validator&&(Array.isArray(t.definition.validator)?t.definition.validator.forEach((t=>{(e=n._extractValidator(t))&&i.push(e)})):(e=this._extractValidator(t.definition.validator))&&i.push(e),t.modules.validate=!!i.length&&i)}_extractValidator(t){var e,n,i;switch(typeof t){case"string":return(i=t.indexOf(":"))>-1?(e=t.substring(0,i),n=t.substring(i+1)):e=t,this._buildValidator(e,n);case"function":return this._buildValidator(t);case"object":return this._buildValidator(t.type,t.parameters)}}_buildValidator(t,e){var n="function"==typeof t?t:Dt.validators[t];return n?{type:"function"==typeof t?"function":t,func:n,params:e}:(console.warn("Validator Setup Error - No matching validator found:",t),!1)}validate(t,e,n){var i=this,o=[],r=this.invalidCells.indexOf(e);return t&&t.forEach((t=>{t.func.call(i,e.getComponent(),n,t.params)||o.push({type:t.type,parameters:t.params})})),e.modules.validate||(e.modules.validate={}),o.length?(e.modules.validate.invalid=o,"manual"!==this.table.options.validationMode&&e.getElement().classList.add("tabulator-validation-fail"),-1==r&&this.invalidCells.push(e)):(e.modules.validate.invalid=!1,e.getElement().classList.remove("tabulator-validation-fail"),r>-1&&this.invalidCells.splice(r,1)),!o.length||o}getInvalidCells(){var t=[];return this.invalidCells.forEach((e=>{t.push(e.getComponent())})),t}clearValidation(t){var e;t.modules.validate&&t.modules.validate.invalid&&(t.getElement().classList.remove("tabulator-validation-fail"),t.modules.validate.invalid=!1,(e=this.invalidCells.indexOf(t))>-1&&this.invalidCells.splice(e,1))}}Dt.moduleName="validate",Dt.validators=St;var Pt=Object.freeze({__proto__:null,AccessorModule:y,AjaxModule:T,ClipboardModule:z,ColumnCalcsModule:W,DataTreeModule:j,DownloadModule:N,EditModule:Y,ExportModule:J,FilterModule:Q,FormatModule:tt,FrozenColumnsModule:et,FrozenRowsModule:nt,GroupRowsModule:rt,HistoryModule:at,HtmlTableImportModule:lt,ImportModule:ut,InteractionModule:ht,KeybindingsModule:ct,MenuModule:dt,MoveColumnsModule:pt,MoveRowsModule:bt,MutatorModule:mt,PageModule:ft,PersistenceModule:wt,PopupModule:Ct,PrintModule:Et,ReactiveDataModule:yt,ResizeColumnsModule:xt,ResizeRowsModule:Bt,ResizeTableModule:kt,ResponsiveLayoutModule:Rt,SelectRowModule:_t,SortModule:Mt,TooltipModule:Lt,ValidateModule:Dt});class It{constructor(t,e,n={}){this.table=t,this.msgType=e,this.registeredDefaults=Object.assign({},n)}register(t,e){this.registeredDefaults[t]=e}generate(t,e={}){var n=Object.assign({},this.registeredDefaults),i=this.table.options.debugInvalidOptions||!0===e.debugInvalidOptions;Object.assign(n,t);for(let t in e)n.hasOwnProperty(t)||(i&&console.warn("Invalid "+this.msgType+" option:",t),n[t]=e.key);for(let t in n)t in e?n[t]=e[t]:Array.isArray(n[t])?n[t]=Object.assign([],n[t]):"object"==typeof n[t]&&null!==n[t]?n[t]=Object.assign({},n[t]):void 0===n[t]&&delete n[t];return n}}class Ft extends v{constructor(t){super(t),this.elementVertical=t.rowManager.element,this.elementHorizontal=t.columnManager.element,this.tableElement=t.rowManager.tableElement,this.verticalFillMode="fit"}initialize(){}clearRows(){}clearColumns(){}reinitializeColumnWidths(t){}renderRows(){}renderColumns(){}rerenderRows(t){t&&t()}rerenderColumns(t,e){}renderRowCells(t){}rerenderRowCells(t,e){}scrollColumns(t,e){}scrollRows(t,e){}resize(){}scrollToRow(t){}scrollToRowNearestTop(t){}visibleRows(t){return[]}rows(){return this.table.rowManager.getDisplayRows()}styleRow(t,e){var n=t.getElement();e%2?(n.classList.add("tabulator-row-even"),n.classList.remove("tabulator-row-odd")):(n.classList.add("tabulator-row-odd"),n.classList.remove("tabulator-row-even"))}clear(){this.clearRows(),this.clearColumns()}render(){this.renderRows(),this.renderColumns()}rerender(t){this.rerenderRows(),this.rerenderColumns()}scrollToRowPosition(t,e,n){var i=this.rows().indexOf(t),o=t.getElement(),r=0;return new Promise(((a,l)=>{if(i>-1){if(void 0===n&&(n=this.table.options.scrollToRowIfVisible),!n&&w.elVisible(o)&&(r=w.elOffset(o).top-w.elOffset(this.elementVertical).top)>0&&r<this.elementVertical.clientHeight-o.offsetHeight)return a(),!1;switch(void 0===e&&(e=this.table.options.scrollToRowPosition),"nearest"===e&&(e=this.scrollToRowNearestTop(t)?"top":"bottom"),this.scrollToRow(t),e){case"middle":case"center":this.elementVertical.scrollHeight-this.elementVertical.scrollTop==this.elementVertical.clientHeight?this.elementVertical.scrollTop=this.elementVertical.scrollTop+(o.offsetTop-this.elementVertical.scrollTop)-(this.elementVertical.scrollHeight-o.offsetTop)/2:this.elementVertical.scrollTop=this.elementVertical.scrollTop-this.elementVertical.clientHeight/2;break;case"bottom":this.elementVertical.scrollHeight-this.elementVertical.scrollTop==this.elementVertical.clientHeight?this.elementVertical.scrollTop=this.elementVertical.scrollTop-(this.elementVertical.scrollHeight-o.offsetTop)+o.offsetHeight:this.elementVertical.scrollTop=this.elementVertical.scrollTop-this.elementVertical.clientHeight+o.offsetHeight;break;case"top":this.elementVertical.scrollTop=o.offsetTop}a()}else console.warn("Scroll Error - Row not visible"),l("Scroll Error - Row not visible")}))}}class Ht extends Ft{constructor(t){super(t)}renderRowCells(t,e){const n=document.createDocumentFragment();t.cells.forEach((t=>{n.appendChild(t.getElement())})),t.element.appendChild(n),e||t.cells.forEach((t=>{t.cellRendered()}))}reinitializeColumnWidths(t){t.forEach((function(t){t.reinitializeWidth()}))}}class Ot extends Ft{constructor(t){super(t),this.leftCol=0,this.rightCol=0,this.scrollLeft=0,this.vDomScrollPosLeft=0,this.vDomScrollPosRight=0,this.vDomPadLeft=0,this.vDomPadRight=0,this.fitDataColAvg=0,this.windowBuffer=200,this.visibleRows=null,this.initialized=!1,this.isFitData=!1,this.columns=[]}initialize(){this.compatibilityCheck(),this.layoutCheck(),this.vertScrollListen()}compatibilityCheck(){"fitDataTable"==this.options("layout")&&console.warn("Horizontal Virtual DOM is not compatible with fitDataTable layout mode"),this.options("responsiveLayout")&&console.warn("Horizontal Virtual DOM is not compatible with responsive columns"),this.options("rtl")&&console.warn("Horizontal Virtual DOM is not currently compatible with RTL text direction")}layoutCheck(){this.isFitData=this.options("layout").startsWith("fitData")}vertScrollListen(){this.subscribe("scroll-vertical",this.clearVisRowCache.bind(this)),this.subscribe("data-refreshed",this.clearVisRowCache.bind(this))}clearVisRowCache(){this.visibleRows=null}renderColumns(t,e){this.dataChange()}scrollColumns(t,e){this.scrollLeft!=t&&(this.scrollLeft=t,this.scroll(t-(this.vDomScrollPosLeft+this.windowBuffer)))}calcWindowBuffer(){var t=this.elementVertical.clientWidth;this.table.columnManager.columnsByIndex.forEach((e=>{if(e.visible){var n=e.getWidth();n>t&&(t=n)}})),this.windowBuffer=2*t}rerenderColumns(t,e){var n={cols:this.columns,leftCol:this.leftCol,rightCol:this.rightCol},i=0;t&&!this.initialized||(this.clear(),this.calcWindowBuffer(),this.scrollLeft=this.elementVertical.scrollLeft,this.vDomScrollPosLeft=this.scrollLeft-this.windowBuffer,this.vDomScrollPosRight=this.scrollLeft+this.elementVertical.clientWidth+this.windowBuffer,this.table.columnManager.columnsByIndex.forEach((t=>{var e,n={};t.visible&&(t.modules.frozen||(e=t.getWidth(),n.leftPos=i,n.rightPos=i+e,n.width=e,this.isFitData&&(n.fitDataCheck=!t.modules.vdomHoz||t.modules.vdomHoz.fitDataCheck),i+e>this.vDomScrollPosLeft&&i<this.vDomScrollPosRight?(-1==this.leftCol&&(this.leftCol=this.columns.length,this.vDomPadLeft=i),this.rightCol=this.columns.length):-1!==this.leftCol&&(this.vDomPadRight+=e),this.columns.push(t),t.modules.vdomHoz=n,i+=e))})),this.tableElement.style.paddingLeft=this.vDomPadLeft+"px",this.tableElement.style.paddingRight=this.vDomPadRight+"px",this.initialized=!0,e||t&&!this.reinitChanged(n)||this.reinitializeRows(),this.elementVertical.scrollLeft=this.scrollLeft)}renderRowCells(t){if(this.initialized)this.initializeRow(t);else{const e=document.createDocumentFragment();t.cells.forEach((t=>{e.appendChild(t.getElement())})),t.element.appendChild(e),t.cells.forEach((t=>{t.cellRendered()}))}}rerenderRowCells(t,e){this.reinitializeRow(t,e)}reinitializeColumnWidths(t){for(let t=this.leftCol;t<=this.rightCol;t++)this.columns[t].reinitializeWidth()}deinitialize(){this.initialized=!1}clear(){this.columns=[],this.leftCol=-1,this.rightCol=0,this.vDomScrollPosLeft=0,this.vDomScrollPosRight=0,this.vDomPadLeft=0,this.vDomPadRight=0}dataChange(){var t,e,n=!1;if(this.isFitData){if(this.table.columnManager.columnsByIndex.forEach((t=>{!t.definition.width&&t.visible&&(n=!0)})),n&&this.table.rowManager.getDisplayRows().length&&(this.vDomScrollPosRight=this.scrollLeft+this.elementVertical.clientWidth+this.windowBuffer,t=this.chain("rows-sample",[1],[],(()=>this.table.rowManager.getDisplayRows()))[0])){e=t.getElement(),t.generateCells(),this.tableElement.appendChild(e);for(let n=0;n<t.cells.length;n++){let i=t.cells[n];e.appendChild(i.getElement()),i.column.reinitializeWidth()}e.parentNode.removeChild(e),this.rerenderColumns(!1,!0)}}else"fitColumns"===this.options("layout")&&(this.layoutRefresh(),this.rerenderColumns(!1,!0))}reinitChanged(t){var e=!0;return t.cols.length!==this.columns.length||t.leftCol!==this.leftCol||t.rightCol!==this.rightCol||(t.cols.forEach(((t,n)=>{t!==this.columns[n]&&(e=!1)})),!e)}reinitializeRows(){var t=this.getVisibleRows(),e=this.table.rowManager.getRows().filter((e=>!t.includes(e)));t.forEach((t=>{this.reinitializeRow(t,!0)})),e.forEach((t=>{t.deinitialize()}))}getVisibleRows(){return this.visibleRows||(this.visibleRows=this.table.rowManager.getVisibleRows()),this.visibleRows}scroll(t){this.vDomScrollPosLeft+=t,this.vDomScrollPosRight+=t,Math.abs(t)>this.windowBuffer/2?this.rerenderColumns():t>0?(this.addColRight(),this.removeColLeft()):(this.addColLeft(),this.removeColRight())}colPositionAdjust(t,e,n){for(let i=t;i<e;i++){let t=this.columns[i];t.modules.vdomHoz.leftPos+=n,t.modules.vdomHoz.rightPos+=n}}addColRight(){for(var t=!1,e=!0;e;){let n=this.columns[this.rightCol+1];n&&n.modules.vdomHoz.leftPos<=this.vDomScrollPosRight?(t=!0,this.getVisibleRows().forEach((t=>{if("group"!==t.type){var e=t.getCell(n);t.getElement().insertBefore(e.getElement(),t.getCell(this.columns[this.rightCol]).getElement().nextSibling),e.cellRendered()}})),this.fitDataColActualWidthCheck(n),this.rightCol++,this.getVisibleRows().forEach((t=>{"group"!==t.type&&(t.modules.vdomHoz.rightCol=this.rightCol)})),this.rightCol>=this.columns.length-1?this.vDomPadRight=0:this.vDomPadRight-=n.getWidth()):e=!1}t&&(this.tableElement.style.paddingRight=this.vDomPadRight+"px")}addColLeft(){for(var t=!1,e=!0;e;){let n=this.columns[this.leftCol-1];if(n)if(n.modules.vdomHoz.rightPos>=this.vDomScrollPosLeft){t=!0,this.getVisibleRows().forEach((t=>{if("group"!==t.type){var e=t.getCell(n);t.getElement().insertBefore(e.getElement(),t.getCell(this.columns[this.leftCol]).getElement()),e.cellRendered()}})),this.leftCol--,this.getVisibleRows().forEach((t=>{"group"!==t.type&&(t.modules.vdomHoz.leftCol=this.leftCol)})),this.leftCol<=0?this.vDomPadLeft=0:this.vDomPadLeft-=n.getWidth();let e=this.fitDataColActualWidthCheck(n);e&&(this.scrollLeft=this.elementVertical.scrollLeft=this.elementVertical.scrollLeft+e,this.vDomPadRight-=e)}else e=!1;else e=!1}t&&(this.tableElement.style.paddingLeft=this.vDomPadLeft+"px")}removeColRight(){for(var t=!1,e=!0;e;){let n=this.columns[this.rightCol];n&&n.modules.vdomHoz.leftPos>this.vDomScrollPosRight?(t=!0,this.getVisibleRows().forEach((t=>{if("group"!==t.type){var e=t.getCell(n);try{t.getElement().removeChild(e.getElement())}catch(t){console.warn("Could not removeColRight",t.message)}}})),this.vDomPadRight+=n.getWidth(),this.rightCol--,this.getVisibleRows().forEach((t=>{"group"!==t.type&&(t.modules.vdomHoz.rightCol=this.rightCol)}))):e=!1}t&&(this.tableElement.style.paddingRight=this.vDomPadRight+"px")}removeColLeft(){for(var t=!1,e=!0;e;){let n=this.columns[this.leftCol];n&&n.modules.vdomHoz.rightPos<this.vDomScrollPosLeft?(t=!0,this.getVisibleRows().forEach((t=>{if("group"!==t.type){var e=t.getCell(n);try{t.getElement().removeChild(e.getElement())}catch(t){console.warn("Could not removeColLeft",t.message)}}})),this.vDomPadLeft+=n.getWidth(),this.leftCol++,this.getVisibleRows().forEach((t=>{"group"!==t.type&&(t.modules.vdomHoz.leftCol=this.leftCol)}))):e=!1}t&&(this.tableElement.style.paddingLeft=this.vDomPadLeft+"px")}fitDataColActualWidthCheck(t){var e,n;return t.modules.vdomHoz.fitDataCheck&&(t.reinitializeWidth(),(n=(e=t.getWidth())-t.modules.vdomHoz.width)&&(t.modules.vdomHoz.rightPos+=n,t.modules.vdomHoz.width=e,this.colPositionAdjust(this.columns.indexOf(t)+1,this.columns.length,n)),t.modules.vdomHoz.fitDataCheck=!1),n}initializeRow(t){if("group"!==t.type){t.modules.vdomHoz={leftCol:this.leftCol,rightCol:this.rightCol},this.table.modules.frozenColumns&&this.table.modules.frozenColumns.leftColumns.forEach((e=>{this.appendCell(t,e)}));for(let e=this.leftCol;e<=this.rightCol;e++)this.appendCell(t,this.columns[e]);this.table.modules.frozenColumns&&this.table.modules.frozenColumns.rightColumns.forEach((e=>{this.appendCell(t,e)}))}}appendCell(t,e){if(e&&e.visible){let n=t.getCell(e);t.getElement().appendChild(n.getElement()),n.cellRendered()}}reinitializeRow(t,e){if("group"!==t.type&&(e||!t.modules.vdomHoz||t.modules.vdomHoz.leftCol!==this.leftCol||t.modules.vdomHoz.rightCol!==this.rightCol)){for(var n=t.getElement();n.firstChild;)n.removeChild(n.firstChild);this.initializeRow(t)}}}class Wt extends v{constructor(t){super(t),this.blockHozScrollEvent=!1,this.headersElement=null,this.contentsElement=null,this.element=null,this.columns=[],this.columnsByIndex=[],this.columnsByField={},this.scrollLeft=0,this.optionsList=new It(this.table,"column definition",P),this.redrawBlock=!1,this.redrawBlockUpdate=null,this.renderer=null}initialize(){this.initializeRenderer(),this.headersElement=this.createHeadersElement(),this.contentsElement=this.createHeaderContentsElement(),this.element=this.createHeaderElement(),this.contentsElement.insertBefore(this.headersElement,this.contentsElement.firstChild),this.element.insertBefore(this.contentsElement,this.element.firstChild),this.initializeScrollWheelWatcher(),this.subscribe("scroll-horizontal",this.scrollHorizontal.bind(this)),this.subscribe("scrollbar-vertical",this.padVerticalScrollbar.bind(this))}padVerticalScrollbar(t){this.table.rtl?this.headersElement.style.marginLeft=t+"px":this.headersElement.style.marginRight=t+"px"}initializeRenderer(){var t,e={virtual:Ot,basic:Ht};(t="string"==typeof this.table.options.renderHorizontal?e[this.table.options.renderHorizontal]:this.table.options.renderHorizontal)?(this.renderer=new t(this.table,this.element,this.tableElement),this.renderer.initialize()):console.error("Unable to find matching renderer:",this.table.options.renderHorizontal)}createHeadersElement(){var t=document.createElement("div");return t.classList.add("tabulator-headers"),t.setAttribute("role","row"),t}createHeaderContentsElement(){var t=document.createElement("div");return t.classList.add("tabulator-header-contents"),t.setAttribute("role","rowgroup"),t}createHeaderElement(){var t=document.createElement("div");return t.classList.add("tabulator-header"),t.setAttribute("role","rowgroup"),this.table.options.headerVisible||t.classList.add("tabulator-header-hidden"),t}getElement(){return this.element}getContentsElement(){return this.contentsElement}getHeadersElement(){return this.headersElement}scrollHorizontal(t){this.contentsElement.scrollLeft=t,this.scrollLeft=t,this.renderer.scrollColumns(t)}initializeScrollWheelWatcher(){this.contentsElement.addEventListener("wheel",(t=>{var e;t.deltaX&&(e=this.contentsElement.scrollLeft+t.deltaX,this.table.rowManager.scrollHorizontal(e),this.table.columnManager.scrollHorizontal(e))}))}generateColumnsFromRowData(t){var e,n,i=[],o=this.table.options.autoColumnsDefinitions;if(t&&t.length){for(var r in e=t[0]){let t={field:r,title:r},o=e[r];switch(typeof o){case"undefined":n="string";break;case"boolean":n="boolean";break;case"object":n=Array.isArray(o)?"array":"string";break;default:n=isNaN(o)||""===o?o.match(/((^[0-9]+[a-z]+)|(^[a-z]+[0-9]+))+$/i)?"alphanum":"string":"number"}t.sorter=n,i.push(t)}if(o)switch(typeof o){case"function":this.table.options.columns=o.call(this.table,i);break;case"object":Array.isArray(o)?i.forEach((t=>{var e=o.find((e=>e.field===t.field));e&&Object.assign(t,e)})):i.forEach((t=>{o[t.field]&&Object.assign(t,o[t.field])})),this.table.options.columns=i}else this.table.options.columns=i;this.setColumns(this.table.options.columns)}}setColumns(t,e){for(;this.headersElement.firstChild;)this.headersElement.removeChild(this.headersElement.firstChild);this.columns=[],this.columnsByIndex=[],this.columnsByField={},this.dispatch("columns-loading"),t.forEach(((t,e)=>{this._addColumn(t)})),this._reIndexColumns(),this.dispatch("columns-loaded"),this.rerenderColumns(!1,!0),this.redraw(!0)}_addColumn(t,e,n){var i=new I(t,this),o=i.getElement(),r=n?this.findColumnIndex(n):n;if(n&&r>-1){var a=n.getTopColumn(),l=this.columns.indexOf(a),s=a.getElement();e?(this.columns.splice(l,0,i),s.parentNode.insertBefore(o,s)):(this.columns.splice(l+1,0,i),s.parentNode.insertBefore(o,s.nextSibling))}else e?(this.columns.unshift(i),this.headersElement.insertBefore(i.getElement(),this.headersElement.firstChild)):(this.columns.push(i),this.headersElement.appendChild(i.getElement()));return i.columnRendered(),i}registerColumnField(t){t.definition.field&&(this.columnsByField[t.definition.field]=t)}registerColumnPosition(t){this.columnsByIndex.push(t)}_reIndexColumns(){this.columnsByIndex=[],this.columns.forEach((function(t){t.reRegisterPosition()}))}verticalAlignHeaders(){var t=0;this.redrawBlock||(this.headersElement.style.height="",this.columns.forEach((t=>{t.clearVerticalAlign()})),this.columns.forEach((e=>{var n=e.getHeight();n>t&&(t=n)})),this.headersElement.style.height=t+"px",this.columns.forEach((e=>{e.verticalAlign(this.table.options.columnHeaderVertAlign,t)})),this.table.rowManager.adjustTableSize())}findColumn(t){var e;return"object"!=typeof t?this.columnsByField[t]||!1:t instanceof I?t:t instanceof D?t._getSelf()||!1:"undefined"!=typeof HTMLElement&&t instanceof HTMLElement&&(e=[],this.columns.forEach((t=>{e.push(t),e=e.concat(t.getColumns(!0))})),e.find((e=>e.element===t))||!1)}getColumnByField(t){return this.columnsByField[t]}getColumnsByFieldRoot(t){var e=[];return Object.keys(this.columnsByField).forEach((n=>{n.split(".")[0]===t&&e.push(this.columnsByField[n])})),e}getColumnByIndex(t){return this.columnsByIndex[t]}getFirstVisibleColumn(){var t=this.columnsByIndex.findIndex((t=>t.visible));return t>-1&&this.columnsByIndex[t]}getColumns(){return this.columns}findColumnIndex(t){return this.columnsByIndex.findIndex((e=>t===e))}getRealColumns(){return this.columnsByIndex}traverse(t){this.columnsByIndex.forEach(((e,n)=>{t(e,n)}))}getDefinitions(t){var e=[];return this.columnsByIndex.forEach((n=>{(!t||t&&n.visible)&&e.push(n.getDefinition())})),e}getDefinitionTree(){var t=[];return this.columns.forEach((e=>{t.push(e.getDefinition(!0))})),t}getComponents(t){var e=[];return(t?this.columns:this.columnsByIndex).forEach((t=>{e.push(t.getComponent())})),e}getWidth(){var t=0;return this.columnsByIndex.forEach((e=>{e.visible&&(t+=e.getWidth())})),t}moveColumn(t,e,n){e.element.parentNode.insertBefore(t.element,e.element),n&&e.element.parentNode.insertBefore(e.element,t.element),this.moveColumnActual(t,e,n),this.verticalAlignHeaders(),this.table.rowManager.reinitialize()}moveColumnActual(t,e,n){t.parent.isGroup?this._moveColumnInArray(t.parent.columns,t,e,n):this._moveColumnInArray(this.columns,t,e,n),this._moveColumnInArray(this.columnsByIndex,t,e,n,!0),this.rerenderColumns(!0),this.dispatch("column-moved",t,e,n),this.subscribedExternal("columnMoved")&&this.dispatchExternal("columnMoved",t.getComponent(),this.table.columnManager.getComponents())}_moveColumnInArray(t,e,n,i,o){var r,a=t.indexOf(e);a>-1&&(t.splice(a,1),(r=t.indexOf(n))>-1?i&&(r+=1):r=a,t.splice(r,0,e),o&&(this.chain("column-moving-rows",[e,n,i],null,[])||[]).concat(this.table.rowManager.rows).forEach((function(t){if(t.cells.length){var e=t.cells.splice(a,1)[0];t.cells.splice(r,0,e)}})))}scrollToColumn(t,e,n){var i=0,o=t.getLeftOffset(),r=0,a=t.getElement();return new Promise(((l,s)=>{if(void 0===e&&(e=this.table.options.scrollToColumnPosition),void 0===n&&(n=this.table.options.scrollToColumnIfVisible),t.visible){switch(e){case"middle":case"center":r=-this.element.clientWidth/2;break;case"right":r=a.clientWidth-this.headersElement.clientWidth}if(!n&&o>0&&o+a.offsetWidth<this.element.clientWidth)return!1;i=o+r,i=Math.max(Math.min(i,this.table.rowManager.element.scrollWidth-this.table.rowManager.element.clientWidth),0),this.table.rowManager.scrollHorizontal(i),this.scrollHorizontal(i),l()}else console.warn("Scroll Error - Column not visible"),s("Scroll Error - Column not visible")}))}generateCells(t){var e=[];return this.columnsByIndex.forEach((n=>{e.push(n.generateCell(t))})),e}getFlexBaseWidth(){var t=this.table.element.clientWidth,e=0;return this.table.rowManager.element.scrollHeight>this.table.rowManager.element.clientHeight&&(t-=this.table.rowManager.element.offsetWidth-this.table.rowManager.element.clientWidth),this.columnsByIndex.forEach((function(n){var i,o,r;n.visible&&(i=n.definition.width||0,o=parseInt(n.minWidth),r="string"==typeof i?i.indexOf("%")>-1?t/100*parseInt(i):parseInt(i):i,e+=r>o?r:o)})),e}addColumn(t,e,n){return new Promise(((i,o)=>{var r=this._addColumn(t,e,n);this._reIndexColumns(),this.dispatch("column-add",t,e,n),"fitColumns"!=this.layoutMode()&&r.reinitializeWidth(),this.redraw(!0),this.table.rowManager.reinitialize(),this.rerenderColumns(),i(r)}))}deregisterColumn(t){var e,n=t.getField();n&&delete this.columnsByField[n],(e=this.columnsByIndex.indexOf(t))>-1&&this.columnsByIndex.splice(e,1),(e=this.columns.indexOf(t))>-1&&this.columns.splice(e,1),this.verticalAlignHeaders(),this.redraw()}rerenderColumns(t,e){this.redrawBlock?(!1===t||!0===t&&null===this.redrawBlockUpdate)&&(this.redrawBlockUpdate=t):this.renderer.rerenderColumns(t,e)}blockRedraw(){this.redrawBlock=!0,this.redrawBlockUpdate=null}restoreRedraw(){this.redrawBlock=!1,this.verticalAlignHeaders(),this.renderer.rerenderColumns(this.redrawBlockUpdate)}redraw(t){w.elVisible(this.element)&&this.verticalAlignHeaders(),t&&(this.table.rowManager.resetScroll(),this.table.rowManager.reinitialize()),this.confirm("table-redrawing",t)||this.layoutRefresh(t),this.dispatch("table-redraw",t),this.table.footerManager.redraw()}}class jt extends Ft{constructor(t){super(t),this.verticalFillMode="fill",this.scrollTop=0,this.scrollLeft=0,this.scrollTop=0,this.scrollLeft=0}clearRows(){for(var t=this.tableElement;t.firstChild;)t.removeChild(t.firstChild);t.scrollTop=0,t.scrollLeft=0,t.style.minWidth="",t.style.minHeight="",t.style.display="",t.style.visibility=""}renderRows(){var t=this.tableElement,e=!0,n=document.createDocumentFragment(),i=this.rows();i.forEach(((t,i)=>{this.styleRow(t,i),t.initialize(!1,!0),"group"!==t.type&&(e=!1),n.appendChild(t.getElement())})),t.appendChild(n),i.forEach((t=>{t.rendered(),t.heightInitialized||t.calcHeight(!0)})),i.forEach((t=>{t.heightInitialized||t.setCellHeight()})),t.style.minWidth=e?this.table.columnManager.getWidth()+"px":""}rerenderRows(t){this.clearRows(),t&&t(),this.renderRows()}scrollToRowNearestTop(t){var e=w.elOffset(t.getElement()).top;return!(Math.abs(this.elementVertical.scrollTop-e)>Math.abs(this.elementVertical.scrollTop+this.elementVertical.clientHeight-e))}scrollToRow(t){var e=t.getElement();this.elementVertical.scrollTop=w.elOffset(e).top-w.elOffset(this.elementVertical).top+this.elementVertical.scrollTop}visibleRows(t){return this.rows()}}class Vt extends Ft{constructor(t){super(t),this.verticalFillMode="fill",this.scrollTop=0,this.scrollLeft=0,this.vDomRowHeight=20,this.vDomTop=0,this.vDomBottom=0,this.vDomScrollPosTop=0,this.vDomScrollPosBottom=0,this.vDomTopPad=0,this.vDomBottomPad=0,this.vDomMaxRenderChain=90,this.vDomWindowBuffer=0,this.vDomWindowMinTotalRows=20,this.vDomWindowMinMarginRows=5,this.vDomTopNewRows=[],this.vDomBottomNewRows=[]}clearRows(){for(var t=this.tableElement;t.firstChild;)t.removeChild(t.firstChild);t.style.paddingTop="",t.style.paddingBottom="",t.style.minHeight="",t.style.display="",t.style.visibility="",this.elementVertical.scrollTop=0,this.elementVertical.scrollLeft=0,this.scrollTop=0,this.scrollLeft=0,this.vDomTop=0,this.vDomBottom=0,this.vDomTopPad=0,this.vDomBottomPad=0,this.vDomScrollPosTop=0,this.vDomScrollPosBottom=0}renderRows(){this._virtualRenderFill()}rerenderRows(t){for(var e=this.elementVertical.scrollTop,n=!1,i=!1,o=this.table.rowManager.scrollLeft,r=this.rows(),a=this.vDomTop;a<=this.vDomBottom;a++)if(r[a]){var l=e-r[a].getElement().offsetTop;if(!(!1===i||Math.abs(l)<i))break;i=l,n=a}r.forEach((t=>{t.deinitializeHeight()})),t&&t(),this.rows().length?this._virtualRenderFill(!1===n?this.rows.length-1:n,!0,i||0):(this.clear(),this.table.rowManager.tableEmpty()),this.scrollColumns(o)}scrollColumns(t){this.table.rowManager.scrollHorizontal(t)}scrollRows(t,e){var n=t-this.vDomScrollPosTop,i=t-this.vDomScrollPosBottom,o=2*this.vDomWindowBuffer,r=this.rows();if(this.scrollTop=t,-n>o||i>o){var a=this.table.rowManager.scrollLeft;this._virtualRenderFill(Math.floor(this.elementVertical.scrollTop/this.elementVertical.scrollHeight*r.length)),this.scrollColumns(a)}else e?(n<0&&this._addTopRow(r,-n),i<0&&(this.vDomScrollHeight-this.scrollTop>this.vDomWindowBuffer?this._removeBottomRow(r,-i):this.vDomScrollPosBottom=this.scrollTop)):(i>=0&&this._addBottomRow(r,i),n>=0&&(this.scrollTop>this.vDomWindowBuffer?this._removeTopRow(r,n):this.vDomScrollPosTop=this.scrollTop))}resize(){this.vDomWindowBuffer=this.table.options.renderVerticalBuffer||this.elementVertical.clientHeight}scrollToRowNearestTop(t){var e=this.rows().indexOf(t);return!(Math.abs(this.vDomTop-e)>Math.abs(this.vDomBottom-e))}scrollToRow(t){var e=this.rows().indexOf(t);e>-1&&this._virtualRenderFill(e,!0)}visibleRows(t){var e=this.elementVertical.scrollTop,n=this.elementVertical.clientHeight+e,i=!1,o=0,r=0,a=this.rows();if(t)o=this.vDomTop,r=this.vDomBottom;else for(var l=this.vDomTop;l<=this.vDomBottom;l++)if(a[l])if(i){if(!(n-a[l].getElement().offsetTop>=0))break;r=l}else if(e-a[l].getElement().offsetTop>=0)o=l;else{if(i=!0,!(n-a[l].getElement().offsetTop>=0))break;r=l}return a.slice(o,r+1)}_virtualRenderFill(t,e,n){var i,o,r=this.tableElement,a=this.elementVertical,l=0,s=0,u=0,h=0,c=0,d=0,p=this.rows(),b=p.length,m=0,g=[],f=0,A=0,v=this.table.rowManager.fixedHeight,C=this.elementVertical.clientHeight,E=this.table.options.rowHeight,y=!0;if(n=n||0,t=t||0){for(;r.firstChild;)r.removeChild(r.firstChild);(h=(b-t+1)*this.vDomRowHeight)<C&&(t-=Math.ceil((C-h)/this.vDomRowHeight))<0&&(t=0),t-=l=Math.min(Math.max(Math.floor(this.vDomWindowBuffer/this.vDomRowHeight),this.vDomWindowMinMarginRows),t)}else this.clear();if(b&&w.elVisible(this.elementVertical)){for(this.vDomTop=t,this.vDomBottom=t-1,v||this.table.options.maxHeight?(E&&(A=C/E+this.vDomWindowBuffer/E),A=Math.max(this.vDomWindowMinTotalRows,Math.ceil(A))):A=b;(A==b||s<=C+this.vDomWindowBuffer||f<this.vDomWindowMinTotalRows)&&this.vDomBottom<b-1;){for(g=[],o=document.createDocumentFragment(),d=0;d<A&&this.vDomBottom<b-1;)i=p[m=this.vDomBottom+1],this.styleRow(i,m),i.initialize(!1,!0),i.heightInitialized||this.table.options.rowHeight||i.clearCellHeight(),o.appendChild(i.getElement()),g.push(i),this.vDomBottom++,d++;if(!g.length)break;r.appendChild(o),g.forEach((t=>{t.rendered(),t.heightInitialized||t.calcHeight(!0)})),g.forEach((t=>{t.heightInitialized||t.setCellHeight()})),g.forEach((t=>{u=t.getHeight(),f<l?c+=u:s+=u,u>this.vDomWindowBuffer&&(this.vDomWindowBuffer=2*u),f++})),y=this.table.rowManager.adjustTableSize(),C=this.elementVertical.clientHeight,y&&(v||this.table.options.maxHeight)&&(E=s/f,A=Math.max(this.vDomWindowMinTotalRows,Math.ceil(C/E+this.vDomWindowBuffer/E)))}t?(this.vDomTopPad=e?this.vDomRowHeight*this.vDomTop+n:this.scrollTop-c,this.vDomBottomPad=this.vDomBottom==b-1?0:Math.max(this.vDomScrollHeight-this.vDomTopPad-s-c,0)):(this.vDomTopPad=0,this.vDomRowHeight=Math.floor((s+c)/f),this.vDomBottomPad=this.vDomRowHeight*(b-this.vDomBottom-1),this.vDomScrollHeight=c+s+this.vDomBottomPad-C),r.style.paddingTop=this.vDomTopPad+"px",r.style.paddingBottom=this.vDomBottomPad+"px",e&&(this.scrollTop=this.vDomTopPad+c+n-(this.elementVertical.scrollWidth>this.elementVertical.clientWidth?this.elementVertical.offsetHeight-C:0)),this.scrollTop=Math.min(this.scrollTop,this.elementVertical.scrollHeight-C),this.elementVertical.scrollWidth>this.elementVertical.clientWidth&&e&&(this.scrollTop+=this.elementVertical.offsetHeight-C),this.vDomScrollPosTop=this.scrollTop,this.vDomScrollPosBottom=this.scrollTop,a.scrollTop=this.scrollTop,this.dispatch("render-virtual-fill")}}_addTopRow(t,e){for(var n=this.tableElement,i=[],o=0,r=this.vDomTop-1,a=0,l=!0;l;)if(this.vDomTop){let s,u,h=t[r];h&&a<this.vDomMaxRenderChain?(s=h.getHeight()||this.vDomRowHeight,u=h.initialized,e>=s?(this.styleRow(h,r),n.insertBefore(h.getElement(),n.firstChild),h.initialized&&h.heightInitialized||i.push(h),h.initialize(),u||(s=h.getElement().offsetHeight,s>this.vDomWindowBuffer&&(this.vDomWindowBuffer=2*s)),e-=s,o+=s,this.vDomTop--,r--,a++):l=!1):l=!1}else l=!1;for(let t of i)t.clearCellHeight();this._quickNormalizeRowHeight(i),o&&(this.vDomTopPad-=o,this.vDomTopPad<0&&(this.vDomTopPad=r*this.vDomRowHeight),r<1&&(this.vDomTopPad=0),n.style.paddingTop=this.vDomTopPad+"px",this.vDomScrollPosTop-=o)}_removeTopRow(t,e){for(var n=[],i=0,o=0,r=!0;r;){let a,l=t[this.vDomTop];l&&o<this.vDomMaxRenderChain?(a=l.getHeight()||this.vDomRowHeight,e>=a?(this.vDomTop++,e-=a,i+=a,n.push(l),o++):r=!1):r=!1}for(let t of n){let e=t.getElement();e.parentNode&&e.parentNode.removeChild(e)}i&&(this.vDomTopPad+=i,this.tableElement.style.paddingTop=this.vDomTopPad+"px",this.vDomScrollPosTop+=this.vDomTop?i:i+this.vDomWindowBuffer)}_addBottomRow(t,e){for(var n=this.tableElement,i=[],o=0,r=this.vDomBottom+1,a=0,l=!0;l;){let s,u,h=t[r];h&&a<this.vDomMaxRenderChain?(s=h.getHeight()||this.vDomRowHeight,u=h.initialized,e>=s?(this.styleRow(h,r),n.appendChild(h.getElement()),h.initialized&&h.heightInitialized||i.push(h),h.initialize(),u||(s=h.getElement().offsetHeight,s>this.vDomWindowBuffer&&(this.vDomWindowBuffer=2*s)),e-=s,o+=s,this.vDomBottom++,r++,a++):l=!1):l=!1}for(let t of i)t.clearCellHeight();this._quickNormalizeRowHeight(i),o&&(this.vDomBottomPad-=o,(this.vDomBottomPad<0||r==t.length-1)&&(this.vDomBottomPad=0),n.style.paddingBottom=this.vDomBottomPad+"px",this.vDomScrollPosBottom+=o)}_removeBottomRow(t,e){for(var n=[],i=0,o=0,r=!0;r;){let a,l=t[this.vDomBottom];l&&o<this.vDomMaxRenderChain?(a=l.getHeight()||this.vDomRowHeight,e>=a?(this.vDomBottom--,e-=a,i+=a,n.push(l),o++):r=!1):r=!1}for(let t of n){let e=t.getElement();e.parentNode&&e.parentNode.removeChild(e)}i&&(this.vDomBottomPad+=i,this.vDomBottomPad<0&&(this.vDomBottomPad=0),this.tableElement.style.paddingBottom=this.vDomBottomPad+"px",this.vDomScrollPosBottom-=i)}_quickNormalizeRowHeight(t){for(let e of t)e.calcHeight();for(let e of t)e.setCellHeight()}}class Nt extends v{constructor(t){super(t),this.element=this.createHolderElement(),this.tableElement=this.createTableElement(),this.heightFixer=this.createTableElement(),this.placeholder=null,this.placeholderContents=null,this.firstRender=!1,this.renderMode="virtual",this.fixedHeight=!1,this.rows=[],this.activeRowsPipeline=[],this.activeRows=[],this.activeRowsCount=0,this.displayRows=[],this.displayRowsCount=0,this.scrollTop=0,this.scrollLeft=0,this.redrawBlock=!1,this.redrawBlockRestoreConfig=!1,this.redrawBlockRenderInPosition=!1,this.dataPipeline=[],this.displayPipeline=[],this.scrollbarWidth=0,this.renderer=null}createHolderElement(){var t=document.createElement("div");return t.classList.add("tabulator-tableholder"),t.setAttribute("tabindex",0),t}createTableElement(){var t=document.createElement("div");return t.classList.add("tabulator-table"),t.setAttribute("role","rowgroup"),t}initializePlaceholder(){var t=this.table.options.placeholder;if("function"==typeof t&&(t=t.call(this.table)),t=this.chain("placeholder",[t],t,t)||t){let e=document.createElement("div");if(e.classList.add("tabulator-placeholder"),"string"==typeof t){let n=document.createElement("div");n.classList.add("tabulator-placeholder-contents"),n.innerHTML=t,e.appendChild(n),this.placeholderContents=n}else"undefined"!=typeof HTMLElement&&t instanceof HTMLElement?(e.appendChild(t),this.placeholderContents=t):(console.warn("Invalid placeholder provided, must be string or HTML Element",t),this.el=null);this.placeholder=e}}getElement(){return this.element}getTableElement(){return this.tableElement}initialize(){this.initializePlaceholder(),this.initializeRenderer(),this.element.appendChild(this.tableElement),this.firstRender=!0,this.element.addEventListener("scroll",(()=>{var t=this.element.scrollLeft,e=this.scrollLeft>t,n=this.element.scrollTop,i=this.scrollTop>n;this.scrollLeft!=t&&(this.scrollLeft=t,this.dispatch("scroll-horizontal",t,e),this.dispatchExternal("scrollHorizontal",t,e),this._positionPlaceholder()),this.scrollTop!=n&&(this.scrollTop=n,this.renderer.scrollRows(n,i),this.dispatch("scroll-vertical",n,i),this.dispatchExternal("scrollVertical",n,i))}))}findRow(t){return"object"!=typeof t?void 0!==t&&(this.rows.find((e=>e.data[this.table.options.index]==t))||!1):t instanceof H?t:t instanceof F?t._getSelf()||!1:"undefined"!=typeof HTMLElement&&t instanceof HTMLElement&&this.rows.find((e=>e.getElement()===t))||!1}getRowFromDataObject(t){return this.rows.find((e=>e.data===t))||!1}getRowFromPosition(t){return this.getDisplayRows().find((e=>e.getPosition()===t&&e.isDisplayed()))}scrollToRow(t,e,n){return this.renderer.scrollToRowPosition(t,e,n)}setData(t,e,n){return new Promise(((i,o)=>{e&&this.getDisplayRows().length?this.table.options.pagination?this._setDataActual(t,!0):this.reRenderInPosition((()=>{this._setDataActual(t)})):(this.table.options.autoColumns&&n&&this.table.initialized&&this.table.columnManager.generateColumnsFromRowData(t),this.resetScroll(),this._setDataActual(t)),i()}))}_setDataActual(t,e){this.dispatchExternal("dataProcessing",t),this._wipeElements(),Array.isArray(t)?(this.dispatch("data-processing",t),t.forEach(((t,e)=>{if(t&&"object"==typeof t){var n=new H(t,this);this.rows.push(n)}else console.warn("Data Loading Warning - Invalid row data detected and ignored, expecting object but received:",t)})),this.refreshActiveData(!1,!1,e),this.dispatch("data-processed",t),this.dispatchExternal("dataProcessed",t)):console.error("Data Loading Error - Unable to process data due to invalid data type \nExpecting: array \nReceived: ",typeof t,"\nData:     ",t)}_wipeElements(){this.dispatch("rows-wipe"),this.destroy(),this.adjustTableSize(),this.dispatch("rows-wiped")}destroy(){this.rows.forEach((t=>{t.wipe()})),this.rows=[],this.activeRows=[],this.activeRowsPipeline=[],this.activeRowsCount=0,this.displayRows=[],this.displayRowsCount=0}deleteRow(t,e){var n=this.rows.indexOf(t),i=this.activeRows.indexOf(t);i>-1&&this.activeRows.splice(i,1),n>-1&&this.rows.splice(n,1),this.setActiveRows(this.activeRows),this.displayRowIterator((e=>{var n=e.indexOf(t);n>-1&&e.splice(n,1)})),e||this.reRenderInPosition(),this.regenerateRowPositions(),this.dispatchExternal("rowDeleted",t.getComponent()),this.displayRowsCount||this.tableEmpty(),this.subscribedExternal("dataChanged")&&this.dispatchExternal("dataChanged",this.getData())}addRow(t,e,n,i){return this.addRowActual(t,e,n,i)}addRows(t,e,n,i){var o=[];return new Promise(((r,a)=>{e=this.findAddRowPos(e),Array.isArray(t)||(t=[t]),(void 0===n&&e||void 0!==n&&!e)&&t.reverse(),t.forEach(((t,i)=>{var r=this.addRow(t,e,n,!0);o.push(r),this.dispatch("row-added",r,t,e,n)})),this.refreshActiveData(!!i&&"displayPipeline",!1,!0),this.regenerateRowPositions(),o.length&&this._clearPlaceholder(),r(o)}))}findAddRowPos(t){return void 0===t&&(t=this.table.options.addRowPos),"pos"===t&&(t=!0),"bottom"===t&&(t=!1),t}addRowActual(t,e,n,i){var o,r,a=t instanceof H?t:new H(t||{},this),l=this.findAddRowPos(e),s=-1;return n||(r=this.chain("row-adding-position",[a,l],null,{index:n,top:l}),n=r.index,l=r.top),void 0!==n&&(n=this.findRow(n)),(n=this.chain("row-adding-index",[a,n,l],null,n))&&(s=this.rows.indexOf(n)),n&&s>-1?(o=this.activeRows.indexOf(n),this.displayRowIterator((function(t){var e=t.indexOf(n);e>-1&&t.splice(l?e:e+1,0,a)})),o>-1&&this.activeRows.splice(l?o:o+1,0,a),this.rows.splice(l?s:s+1,0,a)):l?(this.displayRowIterator((function(t){t.unshift(a)})),this.activeRows.unshift(a),this.rows.unshift(a)):(this.displayRowIterator((function(t){t.push(a)})),this.activeRows.push(a),this.rows.push(a)),this.setActiveRows(this.activeRows),this.dispatchExternal("rowAdded",a.getComponent()),this.subscribedExternal("dataChanged")&&this.dispatchExternal("dataChanged",this.table.rowManager.getData()),i||this.reRenderInPosition(),a}moveRow(t,e,n){this.dispatch("row-move",t,e,n),this.moveRowActual(t,e,n),this.regenerateRowPositions(),this.dispatch("row-moved",t,e,n),this.dispatchExternal("rowMoved",t.getComponent())}moveRowActual(t,e,n){this.moveRowInArray(this.rows,t,e,n),this.moveRowInArray(this.activeRows,t,e,n),this.displayRowIterator((i=>{this.moveRowInArray(i,t,e,n)})),this.dispatch("row-moving",t,e,n)}moveRowInArray(t,e,n,i){var o,r,a;if(e!==n&&((o=t.indexOf(e))>-1&&(t.splice(o,1),(r=t.indexOf(n))>-1?i?t.splice(r+1,0,e):t.splice(r,0,e):t.splice(o,0,e)),t===this.getDisplayRows())){a=r>o?r:o+1;for(let e=o<r?o:r;e<=a;e++)t[e]&&this.styleRow(t[e],e)}}clearData(){this.setData([])}getRowIndex(t){return this.findRowIndex(t,this.rows)}getDisplayRowIndex(t){var e=this.getDisplayRows().indexOf(t);return e>-1&&e}nextDisplayRow(t,e){var n=this.getDisplayRowIndex(t),i=!1;return!1!==n&&n<this.displayRowsCount-1&&(i=this.getDisplayRows()[n+1]),!i||i instanceof H&&"row"==i.type?i:this.nextDisplayRow(i,e)}prevDisplayRow(t,e){var n=this.getDisplayRowIndex(t),i=!1;return n&&(i=this.getDisplayRows()[n-1]),!e||!i||i instanceof H&&"row"==i.type?i:this.prevDisplayRow(i,e)}findRowIndex(t,e){var n;return!!((t=this.findRow(t))&&(n=e.indexOf(t))>-1)&&n}getData(t,e){var n=[];return this.getRows(t).forEach((function(t){"row"==t.type&&n.push(t.getData(e||"data"))})),n}getComponents(t){var e=[];return this.getRows(t).forEach((function(t){e.push(t.getComponent())})),e}getDataCount(t){return this.getRows(t).length}scrollHorizontal(t){this.scrollLeft=t,this.element.scrollLeft=t,this.dispatch("scroll-horizontal",t)}registerDataPipelineHandler(t,e){void 0!==e?(this.dataPipeline.push({handler:t,priority:e}),this.dataPipeline.sort(((t,e)=>t.priority-e.priority))):console.error("Data pipeline handlers must have a priority in order to be registered")}registerDisplayPipelineHandler(t,e){void 0!==e?(this.displayPipeline.push({handler:t,priority:e}),this.displayPipeline.sort(((t,e)=>t.priority-e.priority))):console.error("Display pipeline handlers must have a priority in order to be registered")}refreshActiveData(t,e,n){var i=this.table,o="",r=0,a=["all","dataPipeline","display","displayPipeline","end"];if(!this.table.destroyed){if("function"==typeof t)if((r=this.dataPipeline.findIndex((e=>e.handler===t)))>-1)o="dataPipeline",e&&(r==this.dataPipeline.length-1?o="display":r++);else{if(!((r=this.displayPipeline.findIndex((e=>e.handler===t)))>-1))return void console.error("Unable to refresh data, invalid handler provided",t);o="displayPipeline",e&&(r==this.displayPipeline.length-1?o="end":r++)}else o=t||"all",r=0;if(this.redrawBlock)return void((!this.redrawBlockRestoreConfig||this.redrawBlockRestoreConfig&&(this.redrawBlockRestoreConfig.stage===o&&r<this.redrawBlockRestoreConfig.index||a.indexOf(o)<a.indexOf(this.redrawBlockRestoreConfig.stage)))&&(this.redrawBlockRestoreConfig={handler:t,skipStage:e,renderInPosition:n,stage:o,index:r}));w.elVisible(this.element)?n?this.reRenderInPosition(this.refreshPipelines.bind(this,t,o,r,n)):(this.refreshPipelines(t,o,r,n),t||this.table.columnManager.renderer.renderColumns(),this.renderTable(),i.options.layoutColumnsOnNewData&&this.table.columnManager.redraw(!0)):this.refreshPipelines(t,o,r,n),this.dispatch("data-refreshed")}}refreshPipelines(t,e,n,i){switch(this.dispatch("data-refreshing"),t||(this.activeRowsPipeline[0]=this.rows.slice(0)),e){case"all":case"dataPipeline":for(let t=n;t<this.dataPipeline.length;t++){let e=this.dataPipeline[t].handler(this.activeRowsPipeline[t].slice(0));this.activeRowsPipeline[t+1]=e||this.activeRowsPipeline[t].slice(0)}this.setActiveRows(this.activeRowsPipeline[this.dataPipeline.length]);case"display":n=0,this.resetDisplayRows();case"displayPipeline":for(let t=n;t<this.displayPipeline.length;t++){let e=this.displayPipeline[t].handler((t?this.getDisplayRows(t-1):this.activeRows).slice(0),i);this.setDisplayRows(e||this.getDisplayRows(t-1).slice(0),t)}case"end":this.regenerateRowPositions()}this.getDisplayRows().length&&this._clearPlaceholder()}regenerateRowPositions(){var t=this.getDisplayRows(),e=1;t.forEach((t=>{"row"===t.type&&(t.setPosition(e),e++)}))}setActiveRows(t){this.activeRows=this.activeRows=Object.assign([],t),this.activeRowsCount=this.activeRows.length}resetDisplayRows(){this.displayRows=[],this.displayRows.push(this.activeRows.slice(0)),this.displayRowsCount=this.displayRows[0].length}setDisplayRows(t,e){this.displayRows[e]=t,e==this.displayRows.length-1&&(this.displayRowsCount=this.displayRows[this.displayRows.length-1].length)}getDisplayRows(t){return void 0===t?this.displayRows.length?this.displayRows[this.displayRows.length-1]:[]:this.displayRows[t]||[]}getVisibleRows(t,e){var n=Object.assign([],this.renderer.visibleRows(!e));return t&&(n=this.chain("rows-visible",[e],n,n)),n}displayRowIterator(t){this.activeRowsPipeline.forEach(t),this.displayRows.forEach(t),this.displayRowsCount=this.displayRows[this.displayRows.length-1].length}getRows(t){var e=[];switch(t){case"active":e=this.activeRows;break;case"display":e=this.table.rowManager.getDisplayRows();break;case"visible":e=this.getVisibleRows(!1,!0);break;default:e=this.chain("rows-retrieve",t,null,this.rows)||this.rows}return e}reRenderInPosition(t){this.redrawBlock?t?t():this.redrawBlockRenderInPosition=!0:(this.dispatchExternal("renderStarted"),this.renderer.rerenderRows(t),this.fixedHeight||this.adjustTableSize(),this.scrollBarCheck(),this.dispatchExternal("renderComplete"))}scrollBarCheck(){var t=0;this.element.scrollHeight>this.element.clientHeight&&(t=this.element.offsetWidth-this.element.clientWidth),t!==this.scrollbarWidth&&(this.scrollbarWidth=t,this.dispatch("scrollbar-vertical",t))}initializeRenderer(){var t,e={virtual:Vt,basic:jt};(t="string"==typeof this.table.options.renderVertical?e[this.table.options.renderVertical]:this.table.options.renderVertical)?(this.renderMode=this.table.options.renderVertical,this.renderer=new t(this.table,this.element,this.tableElement),this.renderer.initialize(),!this.table.element.clientHeight&&!this.table.options.height||this.table.options.minHeight&&this.table.options.maxHeight?this.fixedHeight=!1:this.fixedHeight=!0):console.error("Unable to find matching renderer:",this.table.options.renderVertical)}getRenderMode(){return this.renderMode}renderTable(){this.dispatchExternal("renderStarted"),this.element.scrollTop=0,this._clearTable(),this.displayRowsCount?(this.renderer.renderRows(),this.firstRender&&(this.firstRender=!1,this.fixedHeight||this.adjustTableSize(),this.layoutRefresh(!0))):this.renderEmptyScroll(),this.fixedHeight||this.adjustTableSize(),this.dispatch("table-layout"),this.displayRowsCount||this._showPlaceholder(),this.scrollBarCheck(),this.dispatchExternal("renderComplete")}renderEmptyScroll(){this.placeholder?this.tableElement.style.display="none":this.tableElement.style.minWidth=this.table.columnManager.getWidth()+"px"}_clearTable(){this._clearPlaceholder(),this.scrollTop=0,this.scrollLeft=0,this.renderer.clearRows()}tableEmpty(){this.renderEmptyScroll(),this._showPlaceholder()}_showPlaceholder(){this.placeholder&&(this.placeholder&&this.placeholder.parentNode&&this.placeholder.parentNode.removeChild(this.placeholder),this.initializePlaceholder(),this.placeholder.setAttribute("tabulator-render-mode",this.renderMode),this.getElement().appendChild(this.placeholder),this._positionPlaceholder(),this.adjustTableSize())}_clearPlaceholder(){this.placeholder&&this.placeholder.parentNode&&this.placeholder.parentNode.removeChild(this.placeholder),this.tableElement.style.minWidth="",this.tableElement.style.display=""}_positionPlaceholder(){this.placeholder&&this.placeholder.parentNode&&(this.placeholder.style.width=this.table.columnManager.getWidth()+"px",this.placeholderContents.style.width=this.table.rowManager.element.clientWidth+"px",this.placeholderContents.style.marginLeft=this.scrollLeft+"px")}styleRow(t,e){var n=t.getElement();e%2?(n.classList.add("tabulator-row-even"),n.classList.remove("tabulator-row-odd")):(n.classList.add("tabulator-row-odd"),n.classList.remove("tabulator-row-even"))}normalizeHeight(){this.activeRows.forEach((function(t){t.normalizeHeight()}))}adjustTableSize(){let t,e=this.element.clientHeight,n=!1;if("fill"===this.renderer.verticalFillMode){let i=Math.floor(this.table.columnManager.getElement().getBoundingClientRect().height+(this.table.footerManager&&this.table.footerManager.active&&!this.table.footerManager.external?this.table.footerManager.getElement().getBoundingClientRect().height:0));if(this.fixedHeight){t=isNaN(this.table.options.minHeight)?this.table.options.minHeight:this.table.options.minHeight+"px";const e="calc(100% - "+i+"px)";this.element.style.minHeight=t||"calc(100% - "+i+"px)",this.element.style.height=e,this.element.style.maxHeight=e}else this.element.style.height="",this.element.style.height=this.table.element.clientHeight-i+"px",this.element.scrollTop=this.scrollTop;this.renderer.resize(),this.fixedHeight||e==this.element.clientHeight||(n=!0,this.subscribed("table-resize")?this.dispatch("table-resize"):this.redraw()),this.scrollBarCheck()}return this._positionPlaceholder(),n}reinitialize(){this.rows.forEach((function(t){t.reinitialize(!0)}))}blockRedraw(){this.redrawBlock=!0,this.redrawBlockRestoreConfig=!1}restoreRedraw(){this.redrawBlock=!1,this.redrawBlockRestoreConfig?(this.refreshActiveData(this.redrawBlockRestoreConfig.handler,this.redrawBlockRestoreConfig.skipStage,this.redrawBlockRestoreConfig.renderInPosition),this.redrawBlockRestoreConfig=!1):this.redrawBlockRenderInPosition&&this.reRenderInPosition(),this.redrawBlockRenderInPosition=!1}redraw(t){const e=this.adjustTableSize();this.table.tableWidth=this.table.element.clientWidth,t?this.renderTable():(e&&this.reRenderInPosition(),this.scrollHorizontal(this.scrollLeft))}resetScroll(){if(this.element.scrollLeft=0,this.element.scrollTop=0,"ie"===this.table.browser){var t=document.createEvent("Event");t.initEvent("scroll",!1,!0),this.element.dispatchEvent(t)}else this.element.dispatchEvent(new Event("scroll"))}}class Gt extends v{constructor(t){super(t),this.active=!1,this.element=this.createElement(),this.containerElement=this.createContainerElement(),this.external=!1}initialize(){this.initializeElement()}createElement(){var t=document.createElement("div");return t.classList.add("tabulator-footer"),t}createContainerElement(){var t=document.createElement("div");return t.classList.add("tabulator-footer-contents"),this.element.appendChild(t),t}initializeElement(){this.table.options.footerElement&&("string"==typeof this.table.options.footerElement?"<"===this.table.options.footerElement[0]?this.containerElement.innerHTML=this.table.options.footerElement:(this.external=!0,this.containerElement=document.querySelector(this.table.options.footerElement)):this.element=this.table.options.footerElement)}getElement(){return this.element}append(t){this.activate(),this.containerElement.appendChild(t),this.table.rowManager.adjustTableSize()}prepend(t){this.activate(),this.element.insertBefore(t,this.element.firstChild),this.table.rowManager.adjustTableSize()}remove(t){t.parentNode.removeChild(t),this.deactivate()}deactivate(t){this.element.firstChild&&!t||(this.external||this.element.parentNode.removeChild(this.element),this.active=!1)}activate(){this.active||(this.active=!0,this.external||(this.table.element.appendChild(this.getElement()),this.table.element.style.display=""))}redraw(){this.dispatch("footer-redraw")}}class Ut extends v{constructor(t){super(t),this.el=null,this.abortClasses=["tabulator-headers","tabulator-table"],this.previousTargets={},this.listeners=["click","dblclick","contextmenu","mouseenter","mouseleave","mouseover","mouseout","mousemove","mouseup","mousedown","touchstart","touchend"],this.componentMap={"tabulator-cell":"cell","tabulator-row":"row","tabulator-group":"group","tabulator-col":"column"},this.pseudoTrackers={row:{subscriber:null,target:null},cell:{subscriber:null,target:null},group:{subscriber:null,target:null},column:{subscriber:null,target:null}},this.pseudoTracking=!1}initialize(){this.el=this.table.element,this.buildListenerMap(),this.bindSubscriptionWatchers()}buildListenerMap(){var t={};this.listeners.forEach((e=>{t[e]={handler:null,components:[]}})),this.listeners=t}bindPseudoEvents(){Object.keys(this.pseudoTrackers).forEach((t=>{this.pseudoTrackers[t].subscriber=this.pseudoMouseEnter.bind(this,t),this.subscribe(t+"-mouseover",this.pseudoTrackers[t].subscriber)})),this.pseudoTracking=!0}pseudoMouseEnter(t,e,n){this.pseudoTrackers[t].target!==n&&(this.pseudoTrackers[t].target&&this.dispatch(t+"-mouseleave",e,this.pseudoTrackers[t].target),this.pseudoMouseLeave(t,e),this.pseudoTrackers[t].target=n,this.dispatch(t+"-mouseenter",e,n))}pseudoMouseLeave(t,e){var n=Object.keys(this.pseudoTrackers),i={row:["cell"],cell:["row"]};(n=n.filter((e=>{var n=i[t];return e!==t&&(!n||n&&!n.includes(e))}))).forEach((t=>{var n=this.pseudoTrackers[t].target;this.pseudoTrackers[t].target&&(this.dispatch(t+"-mouseleave",e,n),this.pseudoTrackers[t].target=null)}))}bindSubscriptionWatchers(){var t=Object.keys(this.listeners),e=Object.values(this.componentMap);for(let n of e)for(let e of t){let t=n+"-"+e;this.subscriptionChange(t,this.subscriptionChanged.bind(this,n,e))}this.subscribe("table-destroy",this.clearWatchers.bind(this))}subscriptionChanged(t,e,n){var i=this.listeners[e].components,o=i.indexOf(t),r=!1;n?-1===o&&(i.push(t),r=!0):this.subscribed(t+"-"+e)||o>-1&&(i.splice(o,1),r=!0),"mouseenter"!==e&&"mouseleave"!==e||this.pseudoTracking||this.bindPseudoEvents(),r&&this.updateEventListeners()}updateEventListeners(){for(let t in this.listeners){let e=this.listeners[t];e.components.length?e.handler||(e.handler=this.track.bind(this,t),this.el.addEventListener(t,e.handler)):e.handler&&(this.el.removeEventListener(t,e.handler),e.handler=null)}}track(t,e){var n=e.composedPath&&e.composedPath()||e.path,i=this.findTargets(n);i=this.bindComponents(t,i),this.triggerEvents(t,e,i),!this.pseudoTracking||"mouseover"!=t&&"mouseleave"!=t||Object.keys(i).length||this.pseudoMouseLeave("none",e)}findTargets(t){var e={};let n=Object.keys(this.componentMap);for(let i of t){let t=i.classList?[...i.classList]:[];if(t.filter((t=>this.abortClasses.includes(t))).length)break;let o=t.filter((t=>n.includes(t)));for(let t of o)e[this.componentMap[t]]||(e[this.componentMap[t]]=i)}return e.group&&e.group===e.row&&delete e.row,e}bindComponents(t,e){var n=Object.keys(e).reverse(),i=this.listeners[t],o={},r={};for(let t of n){let n,a=e[t],l=this.previousTargets[t];if(l&&l.target===a)n=l.component;else switch(t){case"row":case"group":(i.components.includes("row")||i.components.includes("cell")||i.components.includes("group"))&&(n=this.table.rowManager.getVisibleRows(!0).find((t=>t.getElement()===a)),e.row&&e.row.parentNode&&e.row.parentNode.closest(".tabulator-row")&&(e[t]=!1));break;case"column":i.components.includes("column")&&(n=this.table.columnManager.findColumn(a));break;case"cell":i.components.includes("cell")&&(o.row instanceof H?n=o.row.findCell(a):e.row&&console.warn("Event Target Lookup Error - The row this cell is attached to cannot be found, has the table been reinitialized without being destroyed first?"))}n&&(o[t]=n,r[t]={target:a,component:n})}return this.previousTargets=r,o}triggerEvents(t,e,n){var i=this.listeners[t];for(let o in n)n[o]&&i.components.includes(o)&&this.dispatch(o+"-"+t,e,n[o])}clearWatchers(){for(let t in this.listeners){let e=this.listeners[t];e.handler&&(this.el.removeEventListener(t,e.handler),e.handler=null)}}}class qt{constructor(t){this.table=t,this.bindings={}}bind(t,e,n){this.bindings[t]||(this.bindings[t]={}),this.bindings[t][e]?console.warn("Unable to bind component handler, a matching function name is already bound",t,e,n):this.bindings[t][e]=n}handle(t,e,n){if(this.bindings[t]&&this.bindings[t][n]&&"function"==typeof this.bindings[t][n].bind)return this.bindings[t][n].bind(null,e);"then"===n||"string"!=typeof n||n.startsWith("_")||this.table.options.debugInvalidComponentFuncs&&console.error("The "+t+" component does not have a "+n+" function, have you checked that you have the correct Tabulator module installed?")}}class Yt extends v{constructor(t){super(t),this.requestOrder=0,this.loading=!1}initialize(){}load(t,e,n,i,o,r){var a=++this.requestOrder;return this.table.destroyed?Promise.resolve():(this.dispatchExternal("dataLoading",t),!t||0!=t.indexOf("{")&&0!=t.indexOf("[")||(t=JSON.parse(t)),this.confirm("data-loading",[t,e,n,o])?(this.loading=!0,o||this.alertLoader(),e=this.chain("data-params",[t,n,o],e||{},e||{}),e=this.mapParams(e,this.table.options.dataSendParams),this.chain("data-load",[t,e,n,o],!1,Promise.resolve([])).then((t=>{if(this.table.destroyed)console.warn("Data Load Response Blocked - Table has been destroyed");else{Array.isArray(t)||"object"!=typeof t||(t=this.mapParams(t,this.objectInvert(this.table.options.dataReceiveParams)));var e=this.chain("data-loaded",t,null,t);a==this.requestOrder?(this.clearAlert(),!1!==e&&(this.dispatchExternal("dataLoaded",e),this.table.rowManager.setData(e,i,void 0===r?!i:r))):console.warn("Data Load Response Blocked - An active data load request was blocked by an attempt to change table data while the request was being made")}})).catch((t=>{console.error("Data Load Error: ",t),this.dispatchExternal("dataLoadError",t),o||this.alertError(),setTimeout((()=>{this.clearAlert()}),this.table.options.dataLoaderErrorTimeout)})).finally((()=>{this.loading=!1}))):(this.dispatchExternal("dataLoaded",t),t||(t=[]),this.table.rowManager.setData(t,i,void 0===r?!i:r),Promise.resolve()))}mapParams(t,e){var n={};for(let i in t)n[e.hasOwnProperty(i)?e[i]:i]=t[i];return n}objectInvert(t){var e={};for(let n in t)e[t[n]]=n;return e}blockActiveLoad(){this.requestOrder++}alertLoader(){("function"==typeof this.table.options.dataLoader?this.table.options.dataLoader():this.table.options.dataLoader)&&this.table.alertManager.alert(this.table.options.dataLoaderLoading||this.langText("data|loading"))}alertError(){this.table.alertManager.alert(this.table.options.dataLoaderError||this.langText("data|error"),"error")}clearAlert(){this.table.alertManager.clear()}}class Xt{constructor(t,e,n){this.table=t,this.events={},this.optionsList=e||{},this.subscriptionNotifiers={},this.dispatch=n?this._debugDispatch.bind(this):this._dispatch.bind(this),this.debug=n}subscriptionChange(t,e){this.subscriptionNotifiers[t]||(this.subscriptionNotifiers[t]=[]),this.subscriptionNotifiers[t].push(e),this.subscribed(t)&&this._notifySubscriptionChange(t,!0)}subscribe(t,e){this.events[t]||(this.events[t]=[]),this.events[t].push(e),this._notifySubscriptionChange(t,!0)}unsubscribe(t,e){var n;if(this.events[t]){if(e){if(!((n=this.events[t].findIndex((t=>t===e)))>-1))return void console.warn("Cannot remove event, no matching event found:",t,e);this.events[t].splice(n,1)}else delete this.events[t];this._notifySubscriptionChange(t,!1)}else console.warn("Cannot remove event, no events set on:",t)}subscribed(t){return this.events[t]&&this.events[t].length}_notifySubscriptionChange(t,e){var n=this.subscriptionNotifiers[t];n&&n.forEach((t=>{t(e)}))}_dispatch(){var t,e=Array.from(arguments),n=e.shift();return this.events[n]&&this.events[n].forEach(((n,i)=>{let o=n.apply(this.table,e);i||(t=o)})),t}_debugDispatch(){var t=Array.from(arguments),e=t[0];return t[0]="ExternalEvent:"+t[0],(!0===this.debug||this.debug.includes(e))&&console.log(...t),this._dispatch(...arguments)}}class Kt{constructor(t){this.events={},this.subscriptionNotifiers={},this.dispatch=t?this._debugDispatch.bind(this):this._dispatch.bind(this),this.chain=t?this._debugChain.bind(this):this._chain.bind(this),this.confirm=t?this._debugConfirm.bind(this):this._confirm.bind(this),this.debug=t}subscriptionChange(t,e){this.subscriptionNotifiers[t]||(this.subscriptionNotifiers[t]=[]),this.subscriptionNotifiers[t].push(e),this.subscribed(t)&&this._notifySubscriptionChange(t,!0)}subscribe(t,e,n=1e4){this.events[t]||(this.events[t]=[]),this.events[t].push({callback:e,priority:n}),this.events[t].sort(((t,e)=>t.priority-e.priority)),this._notifySubscriptionChange(t,!0)}unsubscribe(t,e){var n;if(this.events[t]){if(e){if(!((n=this.events[t].findIndex((t=>t.callback===e)))>-1))return void console.warn("Cannot remove event, no matching event found:",t,e);this.events[t].splice(n,1)}this._notifySubscriptionChange(t,!1)}else console.warn("Cannot remove event, no events set on:",t)}subscribed(t){return this.events[t]&&this.events[t].length}_chain(t,e,n,i){var o=n;return Array.isArray(e)||(e=[e]),this.subscribed(t)?(this.events[t].forEach(((t,n)=>{o=t.callback.apply(this,e.concat([o]))})),o):"function"==typeof i?i():i}_confirm(t,e){var n=!1;return Array.isArray(e)||(e=[e]),this.subscribed(t)&&this.events[t].forEach(((t,i)=>{t.callback.apply(this,e)&&(n=!0)})),n}_notifySubscriptionChange(t,e){var n=this.subscriptionNotifiers[t];n&&n.forEach((t=>{t(e)}))}_dispatch(){var t=Array.from(arguments),e=t.shift();this.events[e]&&this.events[e].forEach((e=>{e.callback.apply(this,t)}))}_debugDispatch(){var t=Array.from(arguments),e=t[0];return t[0]="InternalEvent:"+e,(!0===this.debug||this.debug.includes(e))&&console.log(...t),this._dispatch(...arguments)}_debugChain(){var t=Array.from(arguments),e=t[0];return t[0]="InternalEvent:"+e,(!0===this.debug||this.debug.includes(e))&&console.log(...t),this._chain(...arguments)}_debugConfirm(){var t=Array.from(arguments),e=t[0];return t[0]="InternalEvent:"+e,(!0===this.debug||this.debug.includes(e))&&console.log(...t),this._confirm(...arguments)}}class Jt extends v{constructor(t){super(t)}_warnUser(){this.options("debugDeprecation")&&console.warn(...arguments)}check(t,e){var n="";return void 0===this.options(t)||(n="Deprecated Setup Option - Use of the %c"+t+"%c option is now deprecated",e?(n=n+", Please use the %c"+e+"%c option instead",this._warnUser(n,"font-weight: bold;","font-weight: normal;","font-weight: bold;","font-weight: normal;")):this._warnUser(n,"font-weight: bold;","font-weight: normal;"),!1)}checkMsg(t,e){return void 0===this.options(t)||(this._warnUser("%cDeprecated Setup Option - Use of the %c"+t+" %c option is now deprecated, "+e,"font-weight: normal;","font-weight: bold;","font-weight: normal;"),!1)}msg(t){this._warnUser(t)}}class Zt{static register(t){Zt.tables.push(t)}static deregister(t){var e=Zt.tables.indexOf(t);e>-1&&Zt.tables.splice(e,1)}static lookupTable(t,e){var n,i,o=[];if("string"==typeof t){if((n=document.querySelectorAll(t)).length)for(var r=0;r<n.length;r++)(i=Zt.matchElement(n[r]))&&o.push(i)}else"undefined"!=typeof HTMLElement&&t instanceof HTMLElement||t instanceof ae?(i=Zt.matchElement(t))&&o.push(i):Array.isArray(t)?t.forEach((function(t){o=o.concat(Zt.lookupTable(t))})):e||console.warn("Table Connection Error - Invalid Selector",t);return o}static matchElement(t){return Zt.tables.find((function(e){return t instanceof ae?e===t:e.element===t}))}}function Qt(t,e){t.forEach((function(t){t.reinitializeWidth()})),this.table.options.responsiveLayout&&this.table.modExists("responsiveLayout",!0)&&this.table.modules.responsiveLayout.update()}Zt.tables=[];var $t={fitData:function(t,e){e&&this.table.columnManager.renderer.reinitializeColumnWidths(t),this.table.options.responsiveLayout&&this.table.modExists("responsiveLayout",!0)&&this.table.modules.responsiveLayout.update()},fitDataFill:Qt,fitDataTable:Qt,fitDataStretch:function(t,e){var n=0,i=this.table.rowManager.element.clientWidth,o=0,r=!1;t.forEach(((t,e)=>{t.widthFixed||t.reinitializeWidth(),(this.table.options.responsiveLayout?t.modules.responsive.visible:t.visible)&&(r=t),t.visible&&(n+=t.getWidth())})),r?(o=i-n+r.getWidth(),this.table.options.responsiveLayout&&this.table.modExists("responsiveLayout",!0)&&(r.setWidth(0),this.table.modules.responsiveLayout.update()),o>0?r.setWidth(o):r.reinitializeWidth()):this.table.options.responsiveLayout&&this.table.modExists("responsiveLayout",!0)&&this.table.modules.responsiveLayout.update()},fitColumns:function(t,e){var n,i,o=this.table.rowManager.element.getBoundingClientRect().width,r=0,a=0,l=0,s=[],u=[],h=0,c=0;function d(t){return"string"==typeof t?t.indexOf("%")>-1?o/100*parseInt(t):parseInt(t):t}function p(t,e,n,i){var o=[],r=0,a=0,s=0,u=l,h=0,c=0,b=[];function m(t){return n*(t.column.definition.widthGrow||1)}function g(t){return d(t.width)-n*(t.column.definition.widthShrink||0)}return t.forEach((function(t,r){var a=i?g(t):m(t);t.column.minWidth>=a?o.push(t):t.column.maxWidth&&t.column.maxWidth<a?(t.width=t.column.maxWidth,e-=t.column.maxWidth,(u-=i?t.column.definition.widthShrink||1:t.column.definition.widthGrow||1)&&(n=Math.floor(e/u))):(b.push(t),c+=i?t.column.definition.widthShrink||1:t.column.definition.widthGrow||1)})),o.length?(o.forEach((function(t){r+=i?t.width-t.column.minWidth:t.column.minWidth,t.width=t.column.minWidth})),a=e-r,s=c?Math.floor(a/c):a,h=p(b,a,s,i)):(h=c?e-Math.floor(e/c)*c:e,b.forEach((function(t){t.width=i?g(t):m(t)}))),h}this.table.options.responsiveLayout&&this.table.modExists("responsiveLayout",!0)&&this.table.modules.responsiveLayout.update(),this.table.rowManager.element.scrollHeight>this.table.rowManager.element.clientHeight&&(o-=this.table.rowManager.element.offsetWidth-this.table.rowManager.element.clientWidth),t.forEach((function(t){var e,n,i;t.visible&&(e=t.definition.width,n=parseInt(t.minWidth),e?(i=d(e),r+=i>n?i:n,t.definition.widthShrink&&(u.push({column:t,width:i>n?i:n}),h+=t.definition.widthShrink)):(s.push({column:t,width:0}),l+=t.definition.widthGrow||1))})),a=o-r,n=Math.floor(a/l),c=p(s,a,n,!1),s.length&&c>0&&(s[s.length-1].width+=c),s.forEach((function(t){a-=t.width})),(i=Math.abs(c)+a)>0&&h&&(c=p(u,i,Math.floor(i/h),!0)),c&&u.length&&(u[u.length-1].width-=c),s.forEach((function(t){t.column.setWidth(t.width)})),u.forEach((function(t){t.column.setWidth(t.width)}))}};class te extends E{constructor(t){super(t,"layout"),this.mode=null,this.registerTableOption("layout","fitData"),this.registerTableOption("layoutColumnsOnNewData",!1),this.registerColumnOption("widthGrow"),this.registerColumnOption("widthShrink")}initialize(){var t=this.table.options.layout;te.modes[t]?this.mode=t:(console.warn("Layout Error - invalid mode set, defaulting to 'fitData' : "+t),this.mode="fitData"),this.table.element.setAttribute("tabulator-layout",this.mode),this.subscribe("column-init",this.initializeColumn.bind(this))}initializeColumn(t){t.definition.widthGrow&&(t.definition.widthGrow=Number(t.definition.widthGrow)),t.definition.widthShrink&&(t.definition.widthShrink=Number(t.definition.widthShrink))}getMode(){return this.mode}layout(t){this.dispatch("layout-refreshing"),te.modes[this.mode].call(this,this.table.columnManager.columnsByIndex,t),this.dispatch("layout-refreshed")}}te.moduleName="layout",te.modes=$t;class ee extends E{constructor(t){super(t),this.locale="default",this.lang=!1,this.bindings={},this.langList={},this.registerTableOption("locale",!1),this.registerTableOption("langs",{})}initialize(){this.langList=w.deepClone(ee.langs),!1!==this.table.options.columnDefaults.headerFilterPlaceholder&&this.setHeaderFilterPlaceholder(this.table.options.columnDefaults.headerFilterPlaceholder);for(let t in this.table.options.langs)this.installLang(t,this.table.options.langs[t]);this.setLocale(this.table.options.locale),this.registerTableFunction("setLocale",this.setLocale.bind(this)),this.registerTableFunction("getLocale",this.getLocale.bind(this)),this.registerTableFunction("getLang",this.getLang.bind(this))}setHeaderFilterPlaceholder(t){this.langList.default.headerFilters.default=t}installLang(t,e){this.langList[t]?this._setLangProp(this.langList[t],e):this.langList[t]=e}_setLangProp(t,e){for(let n in e)t[n]&&"object"==typeof t[n]?this._setLangProp(t[n],e[n]):t[n]=e[n]}setLocale(t){if(!0===(t=t||"default")&&navigator.language&&(t=navigator.language.toLowerCase()),t&&!this.langList[t]){let e=t.split("-")[0];this.langList[e]?(console.warn("Localization Error - Exact matching locale not found, using closest match: ",t,e),t=e):(console.warn("Localization Error - Matching locale not found, using default: ",t),t="default")}this.locale=t,this.lang=w.deepClone(this.langList.default||{}),"default"!=t&&function t(e,n){for(var i in e)"object"==typeof e[i]?(n[i]||(n[i]={}),t(e[i],n[i])):n[i]=e[i]}(this.langList[t],this.lang),this.dispatchExternal("localized",this.locale,this.lang),this._executeBindings()}getLocale(t){return this.locale}getLang(t){return t?this.langList[t]:this.lang}getText(t,e){var n=(e?t+"|"+e:t).split("|");return this._getLangElement(n,this.locale)||""}_getLangElement(t,e){var n=this.lang;return t.forEach((function(t){var e;n&&(e=n[t],n=void 0!==e&&e)})),n}bind(t,e){this.bindings[t]||(this.bindings[t]=[]),this.bindings[t].push(e),e(this.getText(t),this.lang)}_executeBindings(){for(let t in this.bindings)this.bindings[t].forEach((e=>{e(this.getText(t),this.lang)}))}}ee.moduleName="localize",ee.langs={default:{groups:{item:"item",items:"items"},columns:{},data:{loading:"Loading",error:"Error"},pagination:{page_size:"Page Size",page_title:"Show Page",first:"First",first_title:"First Page",last:"Last",last_title:"Last Page",prev:"Prev",prev_title:"Prev Page",next:"Next",next_title:"Next Page",all:"All",counter:{showing:"Showing",of:"of",rows:"rows",pages:"pages"}},headerFilters:{default:"filter column...",columns:{}}}};class ne extends E{constructor(t){super(t)}initialize(){this.registerTableFunction("tableComms",this.receive.bind(this))}getConnections(t){var e=[];return Zt.lookupTable(t).forEach((t=>{this.table!==t&&e.push(t)})),e}send(t,e,n,i){var o=this.getConnections(t);o.forEach((t=>{t.tableComms(this.table.element,e,n,i)})),!o.length&&t&&console.warn("Table Connection Error - No tables matching selector found",t)}receive(t,e,n,i){if(this.table.modExists(e))return this.table.modules[e].commsReceived(t,n,i);console.warn("Inter-table Comms Error - no such module:",e)}}ne.moduleName="comms";var ie=Object.freeze({__proto__:null,LayoutModule:te,LocalizeModule:ee,CommsModule:ne});class oe{constructor(t,e){this.bindStaticFunctionality(t),this.bindModules(t,ie,!0),e&&this.bindModules(t,e)}bindStaticFunctionality(t){t.moduleBindings={},t.extendModule=function(e,n,i){if(t.moduleBindings[e]){var o=t.moduleBindings[e][n];if(o)if("object"==typeof i)for(let t in i)o[t]=i[t];else console.warn("Module Error - Invalid value type, it must be an object");else console.warn("Module Error - property does not exist:",n)}else console.warn("Module Error - module does not exist:",e)},t.registerModule=function(e){Array.isArray(e)||(e=[e]),e.forEach((e=>{t.registerModuleBinding(e)}))},t.registerModuleBinding=function(e){t.moduleBindings[e.moduleName]=e},t.findTable=function(t){var e=Zt.lookupTable(t,!0);return!(Array.isArray(e)&&!e.length)&&e},t.prototype.bindModules=function(){var e=[],n=[],i=[];for(var o in this.modules={},t.moduleBindings){let r=t.moduleBindings[o],a=new r(this);this.modules[o]=a,r.prototype.moduleCore?this.modulesCore.push(a):r.moduleInitOrder?r.moduleInitOrder<0?e.push(a):n.push(a):i.push(a)}e.sort(((t,e)=>t.moduleInitOrder>e.moduleInitOrder?1:-1)),n.sort(((t,e)=>t.moduleInitOrder>e.moduleInitOrder?1:-1)),this.modulesRegular=e.concat(i.concat(n))}}bindModules(t,e,n){var i=Object.values(e);n&&i.forEach((t=>{t.prototype.moduleCore=!0})),t.registerModule(i)}}class re extends v{constructor(t){super(t),this.element=this._createAlertElement(),this.msgElement=this._createMsgElement(),this.type=null,this.element.appendChild(this.msgElement)}_createAlertElement(){var t=document.createElement("div");return t.classList.add("tabulator-alert"),t}_createMsgElement(){var t=document.createElement("div");return t.classList.add("tabulator-alert-msg"),t.setAttribute("role","alert"),t}_typeClass(){return"tabulator-alert-state-"+this.type}alert(t,e="msg"){if(t){for(this.clear(),this.type=e;this.msgElement.firstChild;)this.msgElement.removeChild(this.msgElement.firstChild);this.msgElement.classList.add(this._typeClass()),"function"==typeof t&&(t=t()),t instanceof HTMLElement?this.msgElement.appendChild(t):this.msgElement.innerHTML=t,this.table.element.appendChild(this.element)}}clear(){this.element.parentNode&&this.element.parentNode.removeChild(this.element),this.msgElement.classList.remove(this._typeClass())}}class ae{constructor(t,e){this.options={},this.columnManager=null,this.rowManager=null,this.footerManager=null,this.alertManager=null,this.vdomHoz=null,this.externalEvents=null,this.eventBus=null,this.interactionMonitor=!1,this.browser="",this.browserSlow=!1,this.browserMobile=!1,this.rtl=!1,this.originalElement=null,this.componentFunctionBinder=new qt(this),this.dataLoader=!1,this.modules={},this.modulesCore=[],this.modulesRegular=[],this.deprecationAdvisor=new Jt(this),this.optionsList=new It(this,"table constructor"),this.initialized=!1,this.destroyed=!1,this.initializeElement(t)&&(this.initializeCoreSystems(e),setTimeout((()=>{this._create()}))),Zt.register(this)}initializeElement(t){return"undefined"!=typeof HTMLElement&&t instanceof HTMLElement?(this.element=t,!0):"string"==typeof t?(this.element=document.querySelector(t),!!this.element||(console.error("Tabulator Creation Error - no element found matching selector: ",t),!1)):(console.error("Tabulator Creation Error - Invalid element provided:",t),!1)}initializeCoreSystems(t){this.columnManager=new Wt(this),this.rowManager=new Nt(this),this.footerManager=new Gt(this),this.dataLoader=new Yt(this),this.alertManager=new re(this),this.bindModules(),this.options=this.optionsList.generate(ae.defaultOptions,t),this._clearObjectPointers(),this._mapDeprecatedFunctionality(),this.externalEvents=new Xt(this,this.options,this.options.debugEventsExternal),this.eventBus=new Kt(this.options.debugEventsInternal),this.interactionMonitor=new Ut(this),this.dataLoader.initialize(),this.footerManager.initialize()}_mapDeprecatedFunctionality(){}_clearSelection(){this.element.classList.add("tabulator-block-select"),window.getSelection?window.getSelection().empty?window.getSelection().empty():window.getSelection().removeAllRanges&&window.getSelection().removeAllRanges():document.selection&&document.selection.empty(),this.element.classList.remove("tabulator-block-select")}_create(){this.externalEvents.dispatch("tableBuilding"),this.eventBus.dispatch("table-building"),this._rtlCheck(),this._buildElement(),this._initializeTable(),this._loadInitialData(),this.initialized=!0,this.externalEvents.dispatch("tableBuilt")}_rtlCheck(){var t=window.getComputedStyle(this.element);switch(this.options.textDirection){case"auto":if("rtl"!==t.direction)break;case"rtl":this.element.classList.add("tabulator-rtl"),this.rtl=!0;break;case"ltr":this.element.classList.add("tabulator-ltr");default:this.rtl=!1}}_clearObjectPointers(){this.options.columns=this.options.columns.slice(0),Array.isArray(this.options.data)&&!this.options.reactiveData&&(this.options.data=this.options.data.slice(0))}_buildElement(){var t,e=this.element,n=this.options;if("TABLE"===e.tagName){this.originalElement=this.element,t=document.createElement("div");var i=e.attributes;for(var o in i)"object"==typeof i[o]&&t.setAttribute(i[o].name,i[o].value);e.parentNode.replaceChild(t,e),this.element=e=t}for(e.classList.add("tabulator"),e.setAttribute("role","grid");e.firstChild;)e.removeChild(e.firstChild);n.height&&(n.height=isNaN(n.height)?n.height:n.height+"px",e.style.height=n.height),!1!==n.minHeight&&(n.minHeight=isNaN(n.minHeight)?n.minHeight:n.minHeight+"px",e.style.minHeight=n.minHeight),!1!==n.maxHeight&&(n.maxHeight=isNaN(n.maxHeight)?n.maxHeight:n.maxHeight+"px",e.style.maxHeight=n.maxHeight)}_initializeTable(){var t=this.element,e=this.options;this.interactionMonitor.initialize(),this.columnManager.initialize(),this.rowManager.initialize(),this._detectBrowser(),this.modulesCore.forEach((t=>{t.initialize()})),t.appendChild(this.columnManager.getElement()),t.appendChild(this.rowManager.getElement()),e.footerElement&&this.footerManager.activate(),e.autoColumns&&e.data&&this.columnManager.generateColumnsFromRowData(this.options.data),this.modulesRegular.forEach((t=>{t.initialize()})),this.columnManager.setColumns(e.columns),this.eventBus.dispatch("table-built")}_loadInitialData(){this.dataLoader.load(this.options.data)}destroy(){var t=this.element;for(this.destroyed=!0,Zt.deregister(this),this.eventBus.dispatch("table-destroy"),this.rowManager.destroy();t.firstChild;)t.removeChild(t.firstChild);t.classList.remove("tabulator"),this.externalEvents.dispatch("tableDestroyed")}_detectBrowser(){var t=navigator.userAgent||navigator.vendor||window.opera;t.indexOf("Trident")>-1?(this.browser="ie",this.browserSlow=!0):t.indexOf("Edge")>-1?(this.browser="edge",this.browserSlow=!0):t.indexOf("Firefox")>-1?(this.browser="firefox",this.browserSlow=!1):t.indexOf("Mac OS")>-1?(this.browser="safari",this.browserSlow=!1):(this.browser="other",this.browserSlow=!1),this.browserMobile=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(t.slice(0,4))}initGuard(t,e){var n,i;return this.options.debugInitialization&&!this.initialized&&(t||(t=" "==(i="Error"==(n=(new Error).stack.split("\n"))[0]?n[2]:n[1])[0]?i.trim().split(" ")[1].split(".")[1]:i.trim().split("@")[0]),console.warn("Table Not Initialized - Calling the "+t+" function before the table is initialized may result in inconsistent behavior, Please wait for the `tableBuilt` event before calling this function."+(e?" "+e:""))),this.initialized}blockRedraw(){this.initGuard(),this.eventBus.dispatch("redraw-blocking"),this.rowManager.blockRedraw(),this.columnManager.blockRedraw(),this.eventBus.dispatch("redraw-blocked")}restoreRedraw(){this.initGuard(),this.eventBus.dispatch("redraw-restoring"),this.rowManager.restoreRedraw(),this.columnManager.restoreRedraw(),this.eventBus.dispatch("redraw-restored")}setData(t,e,n){return this.initGuard(!1,"To set initial data please use the 'data' property in the table constructor."),this.dataLoader.load(t,e,n,!1)}clearData(){this.initGuard(),this.dataLoader.blockActiveLoad(),this.rowManager.clearData()}getData(t){return this.rowManager.getData(t)}getDataCount(t){return this.rowManager.getDataCount(t)}replaceData(t,e,n){return this.initGuard(),this.dataLoader.load(t,e,n,!0,!0)}updateData(t){var e=0;return this.initGuard(),new Promise(((n,i)=>{this.dataLoader.blockActiveLoad(),"string"==typeof t&&(t=JSON.parse(t)),t&&t.length>0?t.forEach((t=>{var o=this.rowManager.findRow(t[this.options.index]);o?(e++,o.updateData(t).then((()=>{--e||n()})).catch((e=>{i("Update Error - Unable to update row",t,e)}))):i("Update Error - Unable to find row",t)})):(console.warn("Update Error - No data provided"),i("Update Error - No data provided"))}))}addData(t,e,n){return this.initGuard(),new Promise(((i,o)=>{this.dataLoader.blockActiveLoad(),"string"==typeof t&&(t=JSON.parse(t)),t?this.rowManager.addRows(t,e,n).then((t=>{var e=[];t.forEach((function(t){e.push(t.getComponent())})),i(e)})):(console.warn("Update Error - No data provided"),o("Update Error - No data provided"))}))}updateOrAddData(t){var e=[],n=0;return this.initGuard(),new Promise(((i,o)=>{this.dataLoader.blockActiveLoad(),"string"==typeof t&&(t=JSON.parse(t)),t&&t.length>0?t.forEach((t=>{var o=this.rowManager.findRow(t[this.options.index]);n++,o?o.updateData(t).then((()=>{n--,e.push(o.getComponent()),n||i(e)})):this.rowManager.addRows(t).then((t=>{n--,e.push(t[0].getComponent()),n||i(e)}))})):(console.warn("Update Error - No data provided"),o("Update Error - No data provided"))}))}getRow(t){var e=this.rowManager.findRow(t);return e?e.getComponent():(console.warn("Find Error - No matching row found:",t),!1)}getRowFromPosition(t){var e=this.rowManager.getRowFromPosition(t);return e?e.getComponent():(console.warn("Find Error - No matching row found:",t),!1)}deleteRow(t){var e=[];this.initGuard(),Array.isArray(t)||(t=[t]);for(let n of t){let t=this.rowManager.findRow(n,!0);if(!t)return console.error("Delete Error - No matching row found:",n),Promise.reject("Delete Error - No matching row found");e.push(t)}return e.sort(((t,e)=>this.rowManager.rows.indexOf(t)>this.rowManager.rows.indexOf(e)?1:-1)),e.forEach((t=>{t.delete()})),this.rowManager.reRenderInPosition(),Promise.resolve()}addRow(t,e,n){return this.initGuard(),"string"==typeof t&&(t=JSON.parse(t)),this.rowManager.addRows(t,e,n,!0).then((t=>t[0].getComponent()))}updateOrAddRow(t,e){var n=this.rowManager.findRow(t);return this.initGuard(),"string"==typeof e&&(e=JSON.parse(e)),n?n.updateData(e).then((()=>n.getComponent())):this.rowManager.addRows(e).then((t=>t[0].getComponent()))}updateRow(t,e){var n=this.rowManager.findRow(t);return this.initGuard(),"string"==typeof e&&(e=JSON.parse(e)),n?n.updateData(e).then((()=>Promise.resolve(n.getComponent()))):(console.warn("Update Error - No matching row found:",t),Promise.reject("Update Error - No matching row found"))}scrollToRow(t,e,n){var i=this.rowManager.findRow(t);return i?this.rowManager.scrollToRow(i,e,n):(console.warn("Scroll Error - No matching row found:",t),Promise.reject("Scroll Error - No matching row found"))}moveRow(t,e,n){var i=this.rowManager.findRow(t);this.initGuard(),i?i.moveToRow(e,n):console.warn("Move Error - No matching row found:",t)}getRows(t){return this.rowManager.getComponents(t)}getRowPosition(t){var e=this.rowManager.findRow(t);return e?e.getPosition():(console.warn("Position Error - No matching row found:",t),!1)}setColumns(t){this.initGuard(!1,"To set initial columns please use the 'columns' property in the table constructor"),this.columnManager.setColumns(t)}getColumns(t){return this.columnManager.getComponents(t)}getColumn(t){var e=this.columnManager.findColumn(t);return e?e.getComponent():(console.warn("Find Error - No matching column found:",t),!1)}getColumnDefinitions(){return this.columnManager.getDefinitionTree()}showColumn(t){var e=this.columnManager.findColumn(t);if(this.initGuard(),!e)return console.warn("Column Show Error - No matching column found:",t),!1;e.show()}hideColumn(t){var e=this.columnManager.findColumn(t);if(this.initGuard(),!e)return console.warn("Column Hide Error - No matching column found:",t),!1;e.hide()}toggleColumn(t){var e=this.columnManager.findColumn(t);if(this.initGuard(),!e)return console.warn("Column Visibility Toggle Error - No matching column found:",t),!1;e.visible?e.hide():e.show()}addColumn(t,e,n){var i=this.columnManager.findColumn(n);return this.initGuard(),this.columnManager.addColumn(t,e,i).then((t=>t.getComponent()))}deleteColumn(t){var e=this.columnManager.findColumn(t);return this.initGuard(),e?e.delete():(console.warn("Column Delete Error - No matching column found:",t),Promise.reject())}updateColumnDefinition(t,e){var n=this.columnManager.findColumn(t);return this.initGuard(),n?n.updateDefinition(e):(console.warn("Column Update Error - No matching column found:",t),Promise.reject())}moveColumn(t,e,n){var i=this.columnManager.findColumn(t),o=this.columnManager.findColumn(e);this.initGuard(),i?o?this.columnManager.moveColumn(i,o,n):console.warn("Move Error - No matching column found:",o):console.warn("Move Error - No matching column found:",t)}scrollToColumn(t,e,n){return new Promise(((i,o)=>{var r=this.columnManager.findColumn(t);return r?this.columnManager.scrollToColumn(r,e,n):(console.warn("Scroll Error - No matching column found:",t),Promise.reject("Scroll Error - No matching column found"))}))}redraw(t){this.initGuard(),this.columnManager.redraw(t),this.rowManager.redraw(t)}setHeight(t){this.options.height=isNaN(t)?t:t+"px",this.element.style.height=this.options.height,this.rowManager.initializeRenderer(),this.rowManager.redraw()}on(t,e){this.externalEvents.subscribe(t,e)}off(t,e){this.externalEvents.unsubscribe(t,e)}dispatchEvent(){Array.from(arguments).shift(),this.externalEvents.dispatch(...arguments)}alert(t,e){this.initGuard(),this.alertManager.alert(t,e)}clearAlert(){this.initGuard(),this.alertManager.clear()}modExists(t,e){return!!this.modules[t]||(e&&console.error("Tabulator Module Not Installed: "+t),!1)}module(t){var e=this.modules[t];return e||console.error("Tabulator module not installed: "+t),e}}ae.defaultOptions={debugEventsExternal:!1,debugEventsInternal:!1,debugInvalidOptions:!0,debugInvalidComponentFuncs:!0,debugInitialization:!0,debugDeprecation:!0,height:!1,minHeight:!1,maxHeight:!1,columnHeaderVertAlign:"top",popupContainer:!1,columns:[],columnDefaults:{},data:!1,autoColumns:!1,autoColumnsDefinitions:!1,nestedFieldSeparator:".",footerElement:!1,index:"id",textDirection:"auto",addRowPos:"bottom",headerVisible:!0,renderVertical:"virtual",renderHorizontal:"basic",renderVerticalBuffer:0,scrollToRowPosition:"top",scrollToRowIfVisible:!0,scrollToColumnPosition:"left",scrollToColumnIfVisible:!0,rowFormatter:!1,rowFormatterPrint:null,rowFormatterClipboard:null,rowFormatterHtmlOutput:null,rowHeight:null,placeholder:!1,dataLoader:!0,dataLoaderLoading:!1,dataLoaderError:!1,dataLoaderErrorTimeout:3e3,dataSendParams:{},dataReceiveParams:{}},new oe(ae),new oe(class extends ae{},Pt);var le=n(66),se=n.n(le);ae.registerModule([tt,Y,ut,et,yt]);let ue=se(),he=["currentPlayer","a-player",1];const ce=t=>{const e=t.getData(),n=t.getElement(),i=e.joueur;he[0]=i,n.classList.add(he[1]),e.participation=he[2]},de=t=>{t.getNextRow()&&t.getNextRow().getData().joueur!==he[0]?(he[1]="a-player"===he[1]?"another-player":"a-player",he[2]=1):he[2]++},pe=t=>{const e=t.getData(),n=t=>{t.getElement().classList.add("grayscale-effect")};""===e.weekE.trim()&&(n(t.getCell("weekD")),""===e.weekD.trim()&&n(t.getCell("weekC")),""===e.weekC.trim()&&n(t.getCell("weekB")),""===e.weekB.trim()&&n(t.getCell("weekA")))},be=(t,e,n)=>{const i=ve.getTeam(e),o=i.teamName.toLowerCase();return t.getElement().classList.add(o.toLowerCase().replace(/\s+/g,"-")),5===n&&(ve.incrementPlayersCount(),ve.incrementCount(o.toLowerCase())),`<img src='/docs/images/${i.img}'>`},me=t=>""===t.trim();new ae("#pick-table",{data:ue,reactiveData:!0,importFormat:"array",rowHeight:40,rowFormatter:function(t){ce(t),de(t),pe(t)},columns:[{title:"win",field:"win",frozen:!0,visible:!1},{title:"#",field:"participation",hozAlign:"center",headerHozAlign:"center",vertAlign:"middle",sorter:"number",width:40,frozen:!0},{title:"JOUEURS",field:"joueur",sorter:"string",headerHozAlign:"center",hozAlign:"left",vertAlign:"middle",formatter:"plaintext",frozen:!0},{title:"11",field:"weekA",hozAlign:"center",headerHozAlign:"center",vertAlign:"middle",width:50,formatter:function(t,e,n){const i=t.getValue();return me(i)?"":be(t,i.toLowerCase(),1)}},{title:"18",field:"weekB",hozAlign:"center",headerHozAlign:"center",vertAlign:"middle",width:50,formatter:function(t,e,n){const i=t.getValue();return me(i)?"":be(t,i.toLowerCase(),2)}},{title:"25",field:"weekC",hozAlign:"center",headerHozAlign:"center",vertAlign:"middle",width:50,formatter:function(t,e,n){const i=t.getValue();return me(i)?"":be(t,i.toLowerCase(),3)}},{title:"2",field:"weekD",hozAlign:"center",headerHozAlign:"center",vertAlign:"middle",width:50,formatter:function(t,e,n){const i=t.getValue();return me(i)?"":be(t,i.toLowerCase(),4)}},{title:"9",field:"weekE",hozAlign:"center",headerHozAlign:"center",vertAlign:"middle",width:50,formatter:function(t,e,n){const i=t.getValue();return me(i)?"":be(t,i.toLowerCase(),5)}},{title:"16",field:"weekF",hozAlign:"center",headerHozAlign:"center",vertAlign:"middle",width:50,formatter:function(t,e,n){const i=t.getValue();return me(i)?"":be(t,i.toLowerCase(),6)}},{title:"23",field:"weekG",hozAlign:"center",headerHozAlign:"center",vertAlign:"middle",width:50,formatter:function(t,e,n){const i=t.getValue();return me(i)?"":be(t,i.toLowerCase(),7)}},{title:"30",field:"weekH",hozAlign:"center",headerHozAlign:"center",vertAlign:"middle",width:50,formatter:function(t,e,n){const i=t.getValue();return me(i)?"":be(t,i.toLowerCase(),8)}}]}).on("dataProcessed",(function(){let t=ve.getMostCommmonTeams();var e=[{id:1,position:"1",equipe:`${t[0].team}`,pick:`${t[0].count}`},{id:2,position:"2",equipe:`${t[1].team}`,pick:`${t[1].count}`},{id:3,position:"3",equipe:`${t[2].team}`,pick:`${t[2].count}`}];new ae("#stats-table",{data:e,layout:"fitColumns",rowHeight:50,rowFormatter:function(e){var n=e.getData();n.equipe==`${t[0].team}`?e.getElement().classList.add(t[0].team.replace(/\s+/g,"-").toLowerCase()):n.equipe==`${t[1].team}`?e.getElement().classList.add(t[1].team.replace(/\s+/g,"-").toLowerCase()):e.getElement().classList.add(t[2].team.replace(/\s+/g,"-").toLowerCase())},columns:[{title:"#",field:"position",width:25,headerHozAlign:"center",hozAlign:"center",vertAlign:"middle"},{title:"ÉQUIPE",field:"equipe",headerHozAlign:"center",vertAlign:"middle",formatter:function(t,e,n){let i=t.getValue();return`<img src='/docs/images/${ve.getTeam(i).img}'><div>${i}</div>`}},{title:"PICK",field:"pick",width:55,hozAlign:"center",headerHozAlign:"center",vertAlign:"middle"}]}).on("tableBuilt",(function(){m(fe),g(5)}))}));var ge=[],fe=0;const Ae=(t,e,n)=>({team:t,count:e,properName:n}),ve={getTeam:t=>{let e,n,i={teamName:"",img:""};switch(!0){case t.includes("anah"):n="Anaheim Ducks",e="ducks-logo.png";break;case t.includes("coyote"):n="Arizona Coyotes",e="arizona-logo.png";break;case t.includes("boston"):n="Boston Bruins",e="boston-bruins-logo.png";break;case t.includes("buffalo"):n="Buffalo Sabres",e="buffalo-logo.png";break;case t.includes("calgary"):n="Calgary Flames",e="calgary-logo.png";break;case t.includes("carolin"):n="Carolina Hurricanes",e="carolina-logo.png";break;case t.includes("chicago"):n="Chicago Blackhawks",e="chicago-blackhawks-logo.png";break;case t.includes("avala"):n="Colorado Avalanche",e="colorado-logo.png";break;case t.includes("columbus"):n="Columbus Blue Jackets",e="columbus-logo.png";break;case t.includes("dallas"):n="Dallas Stars",e="dallas-logo.png";break;case t.includes("detroit"):n="Detroit Red Wings",e="detroit-logo.png";break;case t.includes("edmonton"):n="Edmonton Oilers",e="edmonton-logo.png";break;case t.includes("florid"):n="Florida Panthers",e="florida-logo.png";break;case t.includes("kings"):n="Los Angeles Kings",e="los-angeles-kings-logo.png";break;case t.includes("wild"):n="Minnesota Wild",e="minnesota-logo.png";break;case t.includes("montr"):n="Montreal Canadiens",e="montreal-logo.png";break;case t.includes("nash"):n="Nashville Predators",e="nashville-logo.png";break;case t.includes("jersey"):n="New Jersey Devils",e="new-jersey-logo.png";break;case t.includes("isla"):n="New York Islanders",e="new-york-islanders-logo.png";break;case t.includes("ranger"):n="New York Rangers",e="new-york-rangers-logo.png";break;case t.includes("ottawa"):n="Ottawa Senators",e="ottawa-logo.png";break;case t.includes("phila"):n="Philadelphia Flyers",e="philadelphia-logo.png";break;case t.includes("pitt"):n="Pittsburgh Penguins",e="pittsburgh-penguins-logo.png";break;case t.includes("shark"):n="San Jose Sharks",e="san-jose-logo.png";break;case t.includes("krak"):n="Seattle Kraken",e="kraken-logo.png";break;case t.includes("louis"):n="St-Louis Blues",e="st-louis-logo.png";break;case t.includes("tampa"):n="Tampa Bay Lightning",e="TBL_dark.svg";break;case t.includes("toronto"):n="Toronto Maple Leafs",e="toronto-logo.png";break;case t.includes("vancouv"):n="Vancouver Canucks",e="vancouver-logo.png";break;case t.includes("vegas"):n="Vegas Golden Knights",e="vegas-logo.png";break;case t.includes("wash"):n="Washington Capitals",e="washington-capitals-logo.png";break;case t.includes("jets"):n="Winnipeg Jets",e="winnipeg-logo.png"}return i.teamName=n,i.img=e,i},incrementPlayersCount:t=>{fe++},initialiseTeamsList:()=>{for(let t in A())ge.push(Ae(A()[t][0],parseInt(A()[t][1]),Ae(A()[t][2])))},incrementCount:t=>{let e=ge.find((e=>e.team===t));e&&e.count++},getMostCommmonTeams:()=>{const t=[...ge];return t.sort(((t,e)=>e.count-t.count)),t.slice(0,3).map((t=>({team:t.team,count:t.count})))}};ve.initialiseTeamsList()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Z0JBQWdCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxtQkFBbUIsZUFBZSxzQkFBc0Isb0JBQW9CLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLG1CQUFtQixzQkFBc0IsZ0JBQWdCLHVCQUF1QixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxrQkFBa0Isa0JBQWtCLGdCQUFnQix1QkFBdUIsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsb0JBQW9CLHNCQUFzQixnQkFBZ0Isb0JBQW9CLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLHFCQUFxQixzQkFBc0IsZ0JBQWdCLHVCQUF1QixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxxQkFBcUIsb0JBQW9CLHNCQUFzQixvQkFBb0IsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLG9CQUFvQixvQkFBb0IsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxxQkFBcUIsc0JBQXNCLHVCQUF1QixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLHFCQUFxQixrQkFBa0Isb0JBQW9CLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcscUJBQXFCLGtCQUFrQix1QkFBdUIsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxrQkFBa0Isb0JBQW9CLHVCQUF1QixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLGdCQUFnQixlQUFlLHVCQUF1QixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLG1CQUFtQixrQkFBa0IsdUJBQXVCLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsb0JBQW9CLG9CQUFvQixvQkFBb0IsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxlQUFlLHNCQUFzQix1QkFBdUIsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxpQkFBaUIsZUFBZSx1QkFBdUIsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxpQkFBaUIsa0JBQWtCLHVCQUF1QixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLGlCQUFpQixzQkFBc0Isb0JBQW9CLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsdUJBQXVCLGdCQUFnQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsdUJBQXVCLGdCQUFnQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsdUJBQXVCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsdUJBQXVCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsdUJBQXVCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsMEJBQTBCLHFCQUFxQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsMEJBQTBCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsMEJBQTBCLGdCQUFnQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLHFCQUFxQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLHFCQUFxQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsc0JBQXNCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsc0JBQXNCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsc0JBQXNCLGdCQUFnQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsc0JBQXNCLGdCQUFnQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsc0JBQXNCLHFCQUFxQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsaUJBQWlCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsaUJBQWlCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsaUJBQWlCLHFCQUFxQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsaUJBQWlCLHFCQUFxQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsMEJBQTBCLHNCQUFzQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsMEJBQTBCLHFCQUFxQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsMEJBQTBCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsMEJBQTBCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsMkJBQTJCLHFCQUFxQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsMkJBQTJCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsaUJBQWlCLHFCQUFxQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsaUJBQWlCLGdCQUFnQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLGdCQUFnQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsb0JBQW9CLHFCQUFxQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsb0JBQW9CLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLGdCQUFnQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLHFCQUFxQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcscUJBQXFCLHFCQUFxQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcscUJBQXFCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcscUJBQXFCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsbUJBQW1CLGdCQUFnQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsbUJBQW1CLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLGdCQUFnQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsK0JBQStCLGdCQUFnQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsK0JBQStCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcscUJBQXFCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLGdCQUFnQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLHFCQUFxQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsbUJBQW1CLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsbUJBQW1CLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsbUJBQW1CLHFCQUFxQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsbUJBQW1CLGlCQUFpQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsaUJBQWlCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsaUJBQWlCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsaUJBQWlCLHFCQUFxQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLHFCQUFxQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLHFCQUFxQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsbUJBQW1CLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsbUJBQW1CLHFCQUFxQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsbUJBQW1CLGdCQUFnQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsbUJBQW1CLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLGdCQUFnQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLHFCQUFxQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLGdCQUFnQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsZ0JBQWdCLHFCQUFxQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsZ0JBQWdCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsbUJBQW1CLHFCQUFxQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsb0JBQW9CLGdCQUFnQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsZUFBZSxxQkFBcUIsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLGtCQUFrQixnQkFBZ0IsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLGtCQUFrQixvQkFBb0IsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLGtCQUFrQixvQkFBb0IsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLGtCQUFrQixxQkFBcUIsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRywwQkNBMzBTLGlCQVFFLFdBR0EsSUFBSWlCLEVB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LEVBQVEsS0FBTSxFQUFRLEtBQ3RCLEVBQVEsS0FBTSxFQUFRLEtBQ3RCLEVBQVEsS0FFUixFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFDekMsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQ3pDLEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDeEQsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN4RCxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQ3hELEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQ3ZFLEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQ3ZFLEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDeEQsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN4RCxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQ3hELEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQ3ZFLEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQ3ZFLEVBQVUsSUFBTSxFQUFVLElBQzFCLEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUN6QyxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN2RSxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN2RSxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQ3hELEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDeEQsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQ3pDLEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUN6QyxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFDekMsRUFBVSxJ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TyxLQUFJdXRILElBQVEsQ0FBR0EsS0FBTUEsRUFBS0EsS0FBTW44RixNQUFPbThGLEVBQUtuOEYsU0FBUyxHQ2xMMUV5N0YsR0FBWWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uaGwtc3Vydml2b3IvLi9ub2RlX21vZHVsZXMvdGFidWxhdG9yLXRhYmxlcy9kaXN0L2Nzcy90YWJ1bGF0b3IuY3NzIiwid2VicGFjazovL25obC1zdXJ2aXZvci8uL3NyYy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vbmhsLXN1cnZpdm9yLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9uaGwtc3Vydml2b3IvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9uaGwtc3Vydml2b3IvLi9zcmMvZmlsZXMvdGVhbS5jc3YiLCJ3ZWJwYWNrOi8vbmhsLXN1cnZpdm9yLy4vc3JjL2ZpbGVzL3dlZWs1X3BpY2suY3N2Iiwid2VicGFjazovL25obC1zdXJ2aXZvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbG9kYXNoLmpzIiwid2VicGFjazovL25obC1zdXJ2aXZvci8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9uaGwtc3Vydml2b3IvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL25obC1zdXJ2aXZvci8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9uaGwtc3Vydml2b3IvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vbmhsLXN1cnZpdm9yLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vbmhsLXN1cnZpdm9yLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vbmhsLXN1cnZpdm9yL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL25obC1zdXJ2aXZvci93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9uaGwtc3Vydml2b3Ivd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL25obC1zdXJ2aXZvci93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL25obC1zdXJ2aXZvci93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL25obC1zdXJ2aXZvci93ZWJwYWNrL3J1bnRpbWUvbm9kZSBtb2R1bGUgZGVjb3JhdG9yIiwid2VicGFjazovL25obC1zdXJ2aXZvci93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vbmhsLXN1cnZpdm9yLy4vc3JjL3N0eWxlLmNzcz83MTYzIiwid2VicGFjazovL25obC1zdXJ2aXZvci8uL3NyYy9kb20uanMiLCJ3ZWJwYWNrOi8vbmhsLXN1cnZpdm9yLy4vbm9kZV9tb2R1bGVzL3RhYnVsYXRvci10YWJsZXMvZGlzdC9qcy90YWJ1bGF0b3JfZXNtLmpzIiwid2VicGFjazovL25obC1zdXJ2aXZvci8uL3NyYy90YWJsZS5qcyIsIndlYnBhY2s6Ly9uaGwtc3Vydml2b3IvLi9zcmMvZGF0YS5qcyIsIndlYnBhY2s6Ly9uaGwtc3Vydml2b3IvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAudGFidWxhdG9yIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBib3JkZXI6IDFweCBzb2xpZCAjOTk5O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjODg4O1xuICBmb250LXNpemU6IDE0cHg7XG4gIHRleHQtYWxpZ246IGxlZnQ7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVaKDApO1xuICAtbW96LXRyYW5zZm9ybTogdHJhbnNsYXRlWigwKTtcbiAgLW1zLXRyYW5zZm9ybTogdHJhbnNsYXRlWigwKTtcbiAgLW8tdHJhbnNmb3JtOiB0cmFuc2xhdGVaKDApO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XG59XG5cbi50YWJ1bGF0b3JbdGFidWxhdG9yLWxheW91dD1cImZpdERhdGFGaWxsXCJdIC50YWJ1bGF0b3ItdGFibGVob2xkZXIgLnRhYnVsYXRvci10YWJsZSB7XG4gIG1pbi13aWR0aDogMTAwJTtcbn1cblxuLnRhYnVsYXRvclt0YWJ1bGF0b3ItbGF5b3V0PVwiZml0RGF0YVRhYmxlXCJdIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xufVxuXG4udGFidWxhdG9yLnRhYnVsYXRvci1ibG9jay1zZWxlY3Qge1xuICB1c2VyLXNlbGVjdDogbm9uZTtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgd2lkdGg6IDEwMCU7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjOTk5O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTZlNmU2O1xuICBjb2xvcjogIzU1NTtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XG4gIC1raHRtbC11c2VyLXNlbGVjdDogbm9uZTtcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcbiAgLW8tdXNlci1zZWxlY3Q6IG5vbmU7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIudGFidWxhdG9yLWhlYWRlci1oaWRkZW4ge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItaGVhZGVyLWNvbnRlbnRzIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItaGVhZGVyLWNvbnRlbnRzIC50YWJ1bGF0b3ItaGVhZGVycyB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbCB7XG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI2FhYTtcbiAgYmFja2dyb3VuZDogI2U2ZTZlNjtcbiAgdGV4dC1hbGlnbjogbGVmdDtcbiAgdmVydGljYWwtYWxpZ246IGJvdHRvbTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3ItbW92aW5nIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBib3JkZXI6IDFweCBzb2xpZCAjOTk5O1xuICBiYWNrZ3JvdW5kOiAjY2RjZGNkO1xuICBwb2ludGVyLWV2ZW50czogbm9uZTtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbCAudGFidWxhdG9yLWNvbC1jb250ZW50IHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBwYWRkaW5nOiA0cHg7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWhlYWRlci1wb3B1cC1idXR0b24ge1xuICBwYWRkaW5nOiAwIDhweDtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbCAudGFidWxhdG9yLWNvbC1jb250ZW50IC50YWJ1bGF0b3ItaGVhZGVyLXBvcHVwLWJ1dHRvbjpob3ZlciB7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgb3BhY2l0eTogLjY7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC10aXRsZS1ob2xkZXIge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC10aXRsZSB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIHdpZHRoOiAxMDAlO1xuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgdmVydGljYWwtYWxpZ246IGJvdHRvbTtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbCAudGFidWxhdG9yLWNvbC1jb250ZW50IC50YWJ1bGF0b3ItY29sLXRpdGxlLnRhYnVsYXRvci1jb2wtdGl0bGUtd3JhcCB7XG4gIHdoaXRlLXNwYWNlOiBub3JtYWw7XG4gIHRleHQtb3ZlcmZsb3c6IGluaXRpYWw7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC10aXRsZSAudGFidWxhdG9yLXRpdGxlLWVkaXRvciB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIHdpZHRoOiAxMDAlO1xuICBib3JkZXI6IDFweCBzb2xpZCAjOTk5O1xuICBwYWRkaW5nOiAxcHg7XG4gIGJhY2tncm91bmQ6ICNmZmY7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC10aXRsZSAudGFidWxhdG9yLWhlYWRlci1wb3B1cC1idXR0b24gKyAudGFidWxhdG9yLXRpdGxlLWVkaXRvciB7XG4gIHdpZHRoOiBjYWxjKDEwMCUgLSAyMnB4KTtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbCAudGFidWxhdG9yLWNvbC1jb250ZW50IC50YWJ1bGF0b3ItY29sLXNvcnRlciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICBib3R0b206IDA7XG4gIHJpZ2h0OiA0cHg7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC1zb3J0ZXIgLnRhYnVsYXRvci1hcnJvdyB7XG4gIHdpZHRoOiAwO1xuICBoZWlnaHQ6IDA7XG4gIGJvcmRlci1sZWZ0OiA2cHggc29saWQgdHJhbnNwYXJlbnQ7XG4gIGJvcmRlci1yaWdodDogNnB4IHNvbGlkIHRyYW5zcGFyZW50O1xuICBib3JkZXItYm90dG9tOiA2cHggc29saWQgI2JiYjtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3ItY29sLWdyb3VwIC50YWJ1bGF0b3ItY29sLWdyb3VwLWNvbHMge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjYWFhO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBtYXJnaW4tcmlnaHQ6IC0xcHg7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1oZWFkZXItZmlsdGVyIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBtYXJnaW4tdG9wOiAycHg7XG4gIHdpZHRoOiAxMDAlO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1oZWFkZXItZmlsdGVyIHRleHRhcmVhIHtcbiAgaGVpZ2h0OiBhdXRvICFpbXBvcnRhbnQ7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1oZWFkZXItZmlsdGVyIHN2ZyB7XG4gIG1hcmdpbi10b3A6IDNweDtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbCAudGFidWxhdG9yLWhlYWRlci1maWx0ZXIgaW5wdXQ6Oi1tcy1jbGVhciB7XG4gIHdpZHRoOiAwO1xuICBoZWlnaHQ6IDA7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlIC50YWJ1bGF0b3ItY29sLXRpdGxlIHtcbiAgcGFkZGluZy1yaWdodDogMjVweDtcbn1cblxuQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xuICAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1zb3J0YWJsZS50YWJ1bGF0b3ItY29sLXNvcnRlci1lbGVtZW50OmhvdmVyIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2NkY2RjZDtcbiAgfVxufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1zb3J0YWJsZVthcmlhLXNvcnQ9XCJub25lXCJdIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtc29ydGVyIHtcbiAgY29sb3I6ICNiYmI7XG59XG5cbkBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcbiAgLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3Itc29ydGFibGVbYXJpYS1zb3J0PVwibm9uZVwiXSAudGFidWxhdG9yLWNvbC1jb250ZW50IC50YWJ1bGF0b3ItY29sLXNvcnRlci50YWJ1bGF0b3ItY29sLXNvcnRlci1lbGVtZW50IC50YWJ1bGF0b3ItYXJyb3c6aG92ZXIge1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICBib3JkZXItYm90dG9tOiA2cHggc29saWQgIzU1NTtcbiAgfVxufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1zb3J0YWJsZVthcmlhLXNvcnQ9XCJub25lXCJdIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtc29ydGVyIC50YWJ1bGF0b3ItYXJyb3cge1xuICBib3JkZXItdG9wOiBub25lO1xuICBib3JkZXItYm90dG9tOiA2cHggc29saWQgI2JiYjtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3Itc29ydGFibGVbYXJpYS1zb3J0PVwiYXNjZW5kaW5nXCJdIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtc29ydGVyIHtcbiAgY29sb3I6ICM2NjY7XG59XG5cbkBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcbiAgLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3Itc29ydGFibGVbYXJpYS1zb3J0PVwiYXNjZW5kaW5nXCJdIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtc29ydGVyLnRhYnVsYXRvci1jb2wtc29ydGVyLWVsZW1lbnQgLnRhYnVsYXRvci1hcnJvdzpob3ZlciB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIGJvcmRlci1ib3R0b206IDZweCBzb2xpZCAjNTU1O1xuICB9XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlW2FyaWEtc29ydD1cImFzY2VuZGluZ1wiXSAudGFidWxhdG9yLWNvbC1jb250ZW50IC50YWJ1bGF0b3ItY29sLXNvcnRlciAudGFidWxhdG9yLWFycm93IHtcbiAgYm9yZGVyLXRvcDogbm9uZTtcbiAgYm9yZGVyLWJvdHRvbTogNnB4IHNvbGlkICM2NjY7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlW2FyaWEtc29ydD1cImRlc2NlbmRpbmdcIl0gLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC1zb3J0ZXIge1xuICBjb2xvcjogIzY2Njtcbn1cblxuQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xuICAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1zb3J0YWJsZVthcmlhLXNvcnQ9XCJkZXNjZW5kaW5nXCJdIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtc29ydGVyLnRhYnVsYXRvci1jb2wtc29ydGVyLWVsZW1lbnQgLnRhYnVsYXRvci1hcnJvdzpob3ZlciB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIGJvcmRlci10b3A6IDZweCBzb2xpZCAjNTU1O1xuICB9XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlW2FyaWEtc29ydD1cImRlc2NlbmRpbmdcIl0gLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC1zb3J0ZXIgLnRhYnVsYXRvci1hcnJvdyB7XG4gIGJvcmRlci1ib3R0b206IG5vbmU7XG4gIGJvcmRlci10b3A6IDZweCBzb2xpZCAjNjY2O1xuICBjb2xvcjogIzY2Njtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3ItY29sLXZlcnRpY2FsIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtdGl0bGUge1xuICB3cml0aW5nLW1vZGU6IHZlcnRpY2FsLXJsO1xuICB0ZXh0LW9yaWVudGF0aW9uOiBtaXhlZDtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLWNvbC12ZXJ0aWNhbC50YWJ1bGF0b3ItY29sLXZlcnRpY2FsLWZsaXAgLnRhYnVsYXRvci1jb2wtdGl0bGUge1xuICB0cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpO1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1jb2wtdmVydGljYWwudGFidWxhdG9yLXNvcnRhYmxlIC50YWJ1bGF0b3ItY29sLXRpdGxlIHtcbiAgcGFkZGluZy1yaWdodDogMDtcbiAgcGFkZGluZy10b3A6IDIwcHg7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLWNvbC12ZXJ0aWNhbC50YWJ1bGF0b3Itc29ydGFibGUudGFidWxhdG9yLWNvbC12ZXJ0aWNhbC1mbGlwIC50YWJ1bGF0b3ItY29sLXRpdGxlIHtcbiAgcGFkZGluZy1yaWdodDogMDtcbiAgcGFkZGluZy1ib3R0b206IDIwcHg7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLWNvbC12ZXJ0aWNhbC50YWJ1bGF0b3Itc29ydGFibGUgLnRhYnVsYXRvci1jb2wtc29ydGVyIHtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGxlZnQ6IDA7XG4gIHJpZ2h0OiAwO1xuICB0b3A6IDRweDtcbiAgYm90dG9tOiBhdXRvO1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItZnJvemVuIHtcbiAgcG9zaXRpb246IHN0aWNreTtcbiAgbGVmdDogMDtcbiAgei1pbmRleDogMTE7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1mcm96ZW4udGFidWxhdG9yLWZyb3plbi1sZWZ0IHtcbiAgYm9yZGVyLXJpZ2h0OiAycHggc29saWQgI2FhYTtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWZyb3plbi50YWJ1bGF0b3ItZnJvemVuLXJpZ2h0IHtcbiAgYm9yZGVyLWxlZnQ6IDJweCBzb2xpZCAjYWFhO1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY2FsY3MtaG9sZGVyIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgYmFja2dyb3VuZDogI2YzZjNmMyAhaW1wb3J0YW50O1xuICBib3JkZXItdG9wOiAxcHggc29saWQgI2FhYTtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNhYWE7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jYWxjcy1ob2xkZXIgLnRhYnVsYXRvci1yb3cge1xuICBiYWNrZ3JvdW5kOiAjZjNmM2YzICFpbXBvcnRhbnQ7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jYWxjcy1ob2xkZXIgLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jb2wtcmVzaXplLWhhbmRsZSB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1mcm96ZW4tcm93cy1ob2xkZXI6ZW1wdHkge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItdGFibGVob2xkZXIge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHdpZHRoOiAxMDAlO1xuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICBvdmVyZmxvdzogYXV0bztcbiAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoO1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItdGFibGVob2xkZXI6Zm9jdXMge1xuICBvdXRsaW5lOiBub25lO1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItdGFibGVob2xkZXIgLnRhYnVsYXRvci1wbGFjZWhvbGRlciB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICB3aWR0aDogMTAwJTtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLXRhYmxlaG9sZGVyIC50YWJ1bGF0b3ItcGxhY2Vob2xkZXJbdGFidWxhdG9yLXJlbmRlci1tb2RlPVwidmlydHVhbFwiXSB7XG4gIG1pbi1oZWlnaHQ6IDEwMCU7XG4gIG1pbi13aWR0aDogMTAwJTtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLXRhYmxlaG9sZGVyIC50YWJ1bGF0b3ItcGxhY2Vob2xkZXIgLnRhYnVsYXRvci1wbGFjZWhvbGRlci1jb250ZW50cyB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBwYWRkaW5nOiAxMHB4O1xuICBjb2xvcjogI2NjYztcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgd2hpdGUtc3BhY2U6IG5vcm1hbDtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLXRhYmxlaG9sZGVyIC50YWJ1bGF0b3ItdGFibGUge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgb3ZlcmZsb3c6IHZpc2libGU7XG4gIGNvbG9yOiAjMzMzO1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItdGFibGVob2xkZXIgLnRhYnVsYXRvci10YWJsZSAudGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItY2FsY3Mge1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgYmFja2dyb3VuZDogI2UyZTJlMiAhaW1wb3J0YW50O1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItdGFibGVob2xkZXIgLnRhYnVsYXRvci10YWJsZSAudGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItY2FsY3MudGFidWxhdG9yLWNhbGNzLXRvcCB7XG4gIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCAjYWFhO1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItdGFibGVob2xkZXIgLnRhYnVsYXRvci10YWJsZSAudGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItY2FsY3MudGFidWxhdG9yLWNhbGNzLWJvdHRvbSB7XG4gIGJvcmRlci10b3A6IDJweCBzb2xpZCAjYWFhO1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyIHtcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICM5OTk7XG4gIGJhY2tncm91bmQtY29sb3I6ICNlNmU2ZTY7XG4gIGNvbG9yOiAjNTU1O1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XG4gIC1raHRtbC11c2VyLXNlbGVjdDogbm9uZTtcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcbiAgLW8tdXNlci1zZWxlY3Q6IG5vbmU7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1mb290ZXItY29udGVudHMge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIHBhZGRpbmc6IDVweCAxMHB4O1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyIC50YWJ1bGF0b3ItZm9vdGVyLWNvbnRlbnRzOmVtcHR5IHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLWZvb3RlciAudGFidWxhdG9yLWNhbGNzLWhvbGRlciB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIHdpZHRoOiAxMDAlO1xuICB0ZXh0LWFsaWduOiBsZWZ0O1xuICBiYWNrZ3JvdW5kOiAjZjNmM2YzICFpbXBvcnRhbnQ7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjYWFhO1xuICBib3JkZXItdG9wOiAxcHggc29saWQgI2FhYTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLWZvb3RlciAudGFidWxhdG9yLWNhbGNzLWhvbGRlciAudGFidWxhdG9yLXJvdyB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgYmFja2dyb3VuZDogI2YzZjNmMyAhaW1wb3J0YW50O1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyIC50YWJ1bGF0b3ItY2FsY3MtaG9sZGVyIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY29sLXJlc2l6ZS1oYW5kbGUge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyIC50YWJ1bGF0b3ItY2FsY3MtaG9sZGVyOm9ubHktY2hpbGQge1xuICBtYXJnaW4tYm90dG9tOiAtNXB4O1xuICBib3JkZXItYm90dG9tOiBub25lO1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyID4gKiArIC50YWJ1bGF0b3ItcGFnZS1jb3VudGVyIHtcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1wYWdlLWNvdW50ZXIge1xuICBmb250LXdlaWdodDogbm9ybWFsO1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyIC50YWJ1bGF0b3ItcGFnaW5hdG9yIHtcbiAgZmxleDogMTtcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gIGNvbG9yOiAjNTU1O1xuICBmb250LWZhbWlseTogaW5oZXJpdDtcbiAgZm9udC13ZWlnaHQ6IGluaGVyaXQ7XG4gIGZvbnQtc2l6ZTogaW5oZXJpdDtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLWZvb3RlciAudGFidWxhdG9yLXBhZ2Utc2l6ZSB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgbWFyZ2luOiAwIDVweDtcbiAgcGFkZGluZzogMnB4IDVweDtcbiAgYm9yZGVyOiAxcHggc29saWQgI2FhYTtcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyIC50YWJ1bGF0b3ItcGFnZXMge1xuICBtYXJnaW46IDAgN3B4O1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyIC50YWJ1bGF0b3ItcGFnZSB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgbWFyZ2luOiAwIDJweDtcbiAgcGFkZGluZzogMnB4IDVweDtcbiAgYm9yZGVyOiAxcHggc29saWQgI2FhYTtcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xuICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1wYWdlLmFjdGl2ZSB7XG4gIGNvbG9yOiAjZDAwO1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyIC50YWJ1bGF0b3ItcGFnZTpkaXNhYmxlZCB7XG4gIG9wYWNpdHk6IC41O1xufVxuXG5AbWVkaWEgKGhvdmVyOiBob3ZlcikgYW5kIChwb2ludGVyOiBmaW5lKSB7XG4gIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1wYWdlOm5vdCguZGlzYWJsZWQpOmhvdmVyIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjIpO1xuICAgIGNvbG9yOiAjZmZmO1xuICB9XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1jb2wtcmVzaXplLWhhbmRsZSB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB3aWR0aDogNnB4O1xuICBtYXJnaW4tbGVmdDogLTNweDtcbiAgbWFyZ2luLXJpZ2h0OiAtM3B4O1xuICB6LWluZGV4OiAxMDtcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbn1cblxuQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xuICAudGFidWxhdG9yIC50YWJ1bGF0b3ItY29sLXJlc2l6ZS1oYW5kbGU6aG92ZXIge1xuICAgIGN1cnNvcjogZXctcmVzaXplO1xuICB9XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1jb2wtcmVzaXplLWhhbmRsZTpsYXN0LW9mLXR5cGUge1xuICB3aWR0aDogM3B4O1xuICBtYXJnaW4tcmlnaHQ6IDA7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1hbGVydCB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICB6LWluZGV4OiAxMDA7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC40KTtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItYWxlcnQgLnRhYnVsYXRvci1hbGVydC1tc2cge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIG1hcmdpbjogMCBhdXRvO1xuICBwYWRkaW5nOiAxMHB4IDIwcHg7XG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4gIGJhY2tncm91bmQ6ICNmZmY7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICBmb250LXNpemU6IDE2cHg7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1hbGVydCAudGFidWxhdG9yLWFsZXJ0LW1zZy50YWJ1bGF0b3ItYWxlcnQtc3RhdGUtbXNnIHtcbiAgYm9yZGVyOiA0cHggc29saWQgIzMzMztcbiAgY29sb3I6ICMwMDA7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1hbGVydCAudGFidWxhdG9yLWFsZXJ0LW1zZy50YWJ1bGF0b3ItYWxlcnQtc3RhdGUtZXJyb3Ige1xuICBib3JkZXI6IDRweCBzb2xpZCAjRDAwO1xuICBjb2xvcjogIzU5MDAwMDtcbn1cblxuLnRhYnVsYXRvci1yb3cge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIG1pbi1oZWlnaHQ6IDIycHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG59XG5cbi50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1yb3ctZXZlbiB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNFRkVGRUY7XG59XG5cbkBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcbiAgLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLXNlbGVjdGFibGU6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNiYmI7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICB9XG59XG5cbi50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1zZWxlY3RlZCB7XG4gIGJhY2tncm91bmQtY29sb3I6ICM5QUJDRUE7XG59XG5cbkBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcbiAgLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLXNlbGVjdGVkOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNzY5QkNDO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgfVxufVxuXG4udGFidWxhdG9yLXJvdy50YWJ1bGF0b3Itcm93LW1vdmluZyB7XG4gIGJvcmRlcjogMXB4IHNvbGlkICMwMDA7XG4gIGJhY2tncm91bmQ6ICNmZmY7XG59XG5cbi50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1tb3Zpbmcge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjYWFhO1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2FhYTtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gIHotaW5kZXg6IDE1O1xufVxuXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLXJvdy1yZXNpemUtaGFuZGxlIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICByaWdodDogMDtcbiAgYm90dG9tOiAwO1xuICBsZWZ0OiAwO1xuICBoZWlnaHQ6IDVweDtcbn1cblxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1yb3ctcmVzaXplLWhhbmRsZS5wcmV2IHtcbiAgdG9wOiAwO1xuICBib3R0b206IGF1dG87XG59XG5cbkBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcbiAgLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1yb3ctcmVzaXplLWhhbmRsZTpob3ZlciB7XG4gICAgY3Vyc29yOiBucy1yZXNpemU7XG4gIH1cbn1cblxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1yZXNwb25zaXZlLWNvbGxhcHNlIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgcGFkZGluZzogNXB4O1xuICBib3JkZXItdG9wOiAxcHggc29saWQgI2FhYTtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNhYWE7XG59XG5cbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItcmVzcG9uc2l2ZS1jb2xsYXBzZTplbXB0eSB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItcmVzcG9uc2l2ZS1jb2xsYXBzZSB0YWJsZSB7XG4gIGZvbnQtc2l6ZTogMTRweDtcbn1cblxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1yZXNwb25zaXZlLWNvbGxhcHNlIHRhYmxlIHRyIHRkIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2UgdGFibGUgdHIgdGQ6Zmlyc3Qtb2YtdHlwZSB7XG4gIHBhZGRpbmctcmlnaHQ6IDEwcHg7XG59XG5cbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBwYWRkaW5nOiA0cHg7XG4gIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNhYWE7XG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xufVxuXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwudGFidWxhdG9yLWZyb3plbiB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgcG9zaXRpb246IHN0aWNreTtcbiAgbGVmdDogMDtcbiAgYmFja2dyb3VuZC1jb2xvcjogaW5oZXJpdDtcbiAgei1pbmRleDogMTE7XG59XG5cbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3ItZnJvemVuLnRhYnVsYXRvci1mcm96ZW4tbGVmdCB7XG4gIGJvcmRlci1yaWdodDogMnB4IHNvbGlkICNhYWE7XG59XG5cbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3ItZnJvemVuLnRhYnVsYXRvci1mcm96ZW4tcmlnaHQge1xuICBib3JkZXItbGVmdDogMnB4IHNvbGlkICNhYWE7XG59XG5cbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3ItZWRpdGluZyB7XG4gIGJvcmRlcjogMXB4IHNvbGlkICMxRDY4Q0Q7XG4gIG91dGxpbmU6IG5vbmU7XG4gIHBhZGRpbmc6IDA7XG59XG5cbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3ItZWRpdGluZyBpbnB1dCxcbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3ItZWRpdGluZyBzZWxlY3Qge1xuICBib3JkZXI6IDFweDtcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gIG91dGxpbmU6IG5vbmU7XG59XG5cbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3ItdmFsaWRhdGlvbi1mYWlsIHtcbiAgYm9yZGVyOiAxcHggc29saWQgI2RkMDAwMDtcbn1cblxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsLnRhYnVsYXRvci12YWxpZGF0aW9uLWZhaWwgaW5wdXQsXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwudGFidWxhdG9yLXZhbGlkYXRpb24tZmFpbCBzZWxlY3Qge1xuICBib3JkZXI6IDFweDtcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gIGNvbG9yOiAjZGQwMDAwO1xufVxuXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwudGFidWxhdG9yLXJvdy1oYW5kbGUge1xuICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XG4gIC1raHRtbC11c2VyLXNlbGVjdDogbm9uZTtcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcbiAgLW8tdXNlci1zZWxlY3Q6IG5vbmU7XG59XG5cbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3Itcm93LWhhbmRsZSAudGFidWxhdG9yLXJvdy1oYW5kbGUtYm94IHtcbiAgd2lkdGg6IDgwJTtcbn1cblxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsLnRhYnVsYXRvci1yb3ctaGFuZGxlIC50YWJ1bGF0b3Itcm93LWhhbmRsZS1ib3ggLnRhYnVsYXRvci1yb3ctaGFuZGxlLWJhciB7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDNweDtcbiAgbWFyZ2luLXRvcDogMnB4O1xuICBiYWNrZ3JvdW5kOiAjNjY2O1xufVxuXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtYnJhbmNoLWVtcHR5IHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB3aWR0aDogN3B4O1xufVxuXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtYnJhbmNoIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICBoZWlnaHQ6IDlweDtcbiAgd2lkdGg6IDdweDtcbiAgbWFyZ2luLXRvcDogLTlweDtcbiAgbWFyZ2luLXJpZ2h0OiA1cHg7XG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDFweDtcbiAgYm9yZGVyLWxlZnQ6IDJweCBzb2xpZCAjYWFhO1xuICBib3JkZXItYm90dG9tOiAycHggc29saWQgI2FhYTtcbn1cblxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wge1xuICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIGhlaWdodDogMTFweDtcbiAgd2lkdGg6IDExcHg7XG4gIG1hcmdpbi1yaWdodDogNXB4O1xuICBib3JkZXI6IDFweCBzb2xpZCAjMzMzO1xuICBib3JkZXItcmFkaXVzOiAycHg7XG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC4xKTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxuQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xuICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbDpob3ZlciB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC4yKTtcbiAgfVxufVxuXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbCAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sLWNvbGxhcHNlIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGhlaWdodDogN3B4O1xuICB3aWR0aDogMXB4O1xuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbn1cblxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbC1jb2xsYXBzZTphZnRlciB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgY29udGVudDogXCJcIjtcbiAgbGVmdDogLTNweDtcbiAgdG9wOiAzcHg7XG4gIGhlaWdodDogMXB4O1xuICB3aWR0aDogN3B4O1xuICBiYWNrZ3JvdW5kOiAjMzMzO1xufVxuXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbCAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sLWV4cGFuZCB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBoZWlnaHQ6IDdweDtcbiAgd2lkdGg6IDFweDtcbiAgYmFja2dyb3VuZDogIzMzMztcbn1cblxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbC1leHBhbmQ6YWZ0ZXIge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGNvbnRlbnQ6IFwiXCI7XG4gIGxlZnQ6IC0zcHg7XG4gIHRvcDogM3B4O1xuICBoZWlnaHQ6IDFweDtcbiAgd2lkdGg6IDdweDtcbiAgYmFja2dyb3VuZDogIzMzMztcbn1cblxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItcmVzcG9uc2l2ZS1jb2xsYXBzZS10b2dnbGUge1xuICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XG4gIC1raHRtbC11c2VyLXNlbGVjdDogbm9uZTtcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcbiAgLW8tdXNlci1zZWxlY3Q6IG5vbmU7XG4gIGhlaWdodDogMTVweDtcbiAgd2lkdGg6IDE1cHg7XG4gIGJvcmRlci1yYWRpdXM6IDIwcHg7XG4gIGJhY2tncm91bmQ6ICM2NjY7XG4gIGNvbG9yOiAjZmZmO1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgZm9udC1zaXplOiAxLjFlbTtcbn1cblxuQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xuICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1yZXNwb25zaXZlLWNvbGxhcHNlLXRvZ2dsZTpob3ZlciB7XG4gICAgb3BhY2l0eTogLjc7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICB9XG59XG5cbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCAudGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2UtdG9nZ2xlLm9wZW4gLnRhYnVsYXRvci1yZXNwb25zaXZlLWNvbGxhcHNlLXRvZ2dsZS1jbG9zZSB7XG4gIGRpc3BsYXk6IGluaXRpYWw7XG59XG5cbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCAudGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2UtdG9nZ2xlLm9wZW4gLnRhYnVsYXRvci1yZXNwb25zaXZlLWNvbGxhcHNlLXRvZ2dsZS1vcGVuIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItcmVzcG9uc2l2ZS1jb2xsYXBzZS10b2dnbGUgc3ZnIHtcbiAgc3Ryb2tlOiAjZmZmO1xufVxuXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1yZXNwb25zaXZlLWNvbGxhcHNlLXRvZ2dsZSAudGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2UtdG9nZ2xlLWNsb3NlIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItdHJhZmZpYy1saWdodCB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgaGVpZ2h0OiAxNHB4O1xuICB3aWR0aDogMTRweDtcbiAgYm9yZGVyLXJhZGl1czogMTRweDtcbn1cblxuLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLWdyb3VwIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICM5OTk7XG4gIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNhYWE7XG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjOTk5O1xuICBwYWRkaW5nOiA1cHg7XG4gIHBhZGRpbmctbGVmdDogMTBweDtcbiAgYmFja2dyb3VuZDogI2NjYztcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIG1pbi13aWR0aDogMTAwJTtcbn1cblxuQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xuICAudGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItZ3JvdXA6aG92ZXIge1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMSk7XG4gIH1cbn1cblxuLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLWdyb3VwLnRhYnVsYXRvci1ncm91cC12aXNpYmxlIC50YWJ1bGF0b3ItYXJyb3cge1xuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gIGJvcmRlci1sZWZ0OiA2cHggc29saWQgdHJhbnNwYXJlbnQ7XG4gIGJvcmRlci1yaWdodDogNnB4IHNvbGlkIHRyYW5zcGFyZW50O1xuICBib3JkZXItdG9wOiA2cHggc29saWQgIzY2NjtcbiAgYm9yZGVyLWJvdHRvbTogMDtcbn1cblxuLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLWdyb3VwLnRhYnVsYXRvci1ncm91cC1sZXZlbC0xIHtcbiAgcGFkZGluZy1sZWZ0OiAzMHB4O1xufVxuXG4udGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItZ3JvdXAudGFidWxhdG9yLWdyb3VwLWxldmVsLTIge1xuICBwYWRkaW5nLWxlZnQ6IDUwcHg7XG59XG5cbi50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1ncm91cC50YWJ1bGF0b3ItZ3JvdXAtbGV2ZWwtMyB7XG4gIHBhZGRpbmctbGVmdDogNzBweDtcbn1cblxuLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLWdyb3VwLnRhYnVsYXRvci1ncm91cC1sZXZlbC00IHtcbiAgcGFkZGluZy1sZWZ0OiA5MHB4O1xufVxuXG4udGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItZ3JvdXAudGFidWxhdG9yLWdyb3VwLWxldmVsLTUge1xuICBwYWRkaW5nLWxlZnQ6IDExMHB4O1xufVxuXG4udGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItZ3JvdXAgLnRhYnVsYXRvci1ncm91cC10b2dnbGUge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG59XG5cbi50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1ncm91cCAudGFidWxhdG9yLWFycm93IHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB3aWR0aDogMDtcbiAgaGVpZ2h0OiAwO1xuICBtYXJnaW4tcmlnaHQ6IDE2cHg7XG4gIGJvcmRlci10b3A6IDZweCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgYm9yZGVyLWJvdHRvbTogNnB4IHNvbGlkIHRyYW5zcGFyZW50O1xuICBib3JkZXItcmlnaHQ6IDA7XG4gIGJvcmRlci1sZWZ0OiA2cHggc29saWQgIzY2NjtcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbn1cblxuLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLWdyb3VwIHNwYW4ge1xuICBtYXJnaW4tbGVmdDogMTBweDtcbiAgY29sb3I6ICNkMDA7XG59XG5cbi50YWJ1bGF0b3ItcG9wdXAtY29udGFpbmVyIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIGJhY2tncm91bmQ6ICNmZmY7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNhYWE7XG4gIGJveC1zaGFkb3c6IDAgMCA1cHggMCByZ2JhKDAsIDAsIDAsIDAuMik7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgb3ZlcmZsb3cteTogYXV0bztcbiAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoO1xuICB6LWluZGV4OiAxMDAwMDtcbn1cblxuLnRhYnVsYXRvci1wb3B1cCB7XG4gIHBhZGRpbmc6IDVweDtcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xufVxuXG4udGFidWxhdG9yLXRvb2x0aXAge1xuICBtYXgtd2lkdGg6IE1pbig1MDBweCwgMTAwJSk7XG4gIHBhZGRpbmc6IDNweCA1cHg7XG4gIGJvcmRlci1yYWRpdXM6IDJweDtcbiAgYm94LXNoYWRvdzogbm9uZTtcbiAgZm9udC1zaXplOiAxMnB4O1xuICBwb2ludGVyLWV2ZW50czogbm9uZTtcbn1cblxuLnRhYnVsYXRvci1tZW51IC50YWJ1bGF0b3ItbWVudS1pdGVtIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBwYWRkaW5nOiA1cHggMTBweDtcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XG59XG5cbi50YWJ1bGF0b3ItbWVudSAudGFidWxhdG9yLW1lbnUtaXRlbS50YWJ1bGF0b3ItbWVudS1pdGVtLWRpc2FibGVkIHtcbiAgb3BhY2l0eTogLjU7XG59XG5cbkBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcbiAgLnRhYnVsYXRvci1tZW51IC50YWJ1bGF0b3ItbWVudS1pdGVtOm5vdCgudGFidWxhdG9yLW1lbnUtaXRlbS1kaXNhYmxlZCk6aG92ZXIge1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICBiYWNrZ3JvdW5kOiAjRUZFRkVGO1xuICB9XG59XG5cbi50YWJ1bGF0b3ItbWVudSAudGFidWxhdG9yLW1lbnUtaXRlbS50YWJ1bGF0b3ItbWVudS1pdGVtLXN1Ym1lbnUge1xuICBwYWRkaW5nLXJpZ2h0OiAyNXB4O1xufVxuXG4udGFidWxhdG9yLW1lbnUgLnRhYnVsYXRvci1tZW51LWl0ZW0udGFidWxhdG9yLW1lbnUtaXRlbS1zdWJtZW51OjphZnRlciB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IGNhbGMoNXB4ICsgLjRlbSk7XG4gIHJpZ2h0OiAxMHB4O1xuICBoZWlnaHQ6IDdweDtcbiAgd2lkdGg6IDdweDtcbiAgY29udGVudDogJyc7XG4gIGJvcmRlci13aWR0aDogMXB4IDFweCAwIDA7XG4gIGJvcmRlci1zdHlsZTogc29saWQ7XG4gIGJvcmRlci1jb2xvcjogI2FhYTtcbiAgdmVydGljYWwtYWxpZ246IHRvcDtcbiAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1xufVxuXG4udGFidWxhdG9yLW1lbnUgLnRhYnVsYXRvci1tZW51LXNlcGFyYXRvciB7XG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjYWFhO1xufVxuXG4udGFidWxhdG9yLWVkaXQtbGlzdCB7XG4gIG1heC1oZWlnaHQ6IDIwMHB4O1xuICBmb250LXNpemU6IDE0cHg7XG4gIG92ZXJmbG93LXk6IGF1dG87XG4gIC13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOiB0b3VjaDtcbn1cblxuLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtaXRlbSB7XG4gIHBhZGRpbmc6IDRweDtcbiAgY29sb3I6ICMzMzM7XG4gIG91dGxpbmU6IG5vbmU7XG59XG5cbi50YWJ1bGF0b3ItZWRpdC1saXN0IC50YWJ1bGF0b3ItZWRpdC1saXN0LWl0ZW0uYWN0aXZlIHtcbiAgY29sb3I6ICNmZmY7XG4gIGJhY2tncm91bmQ6ICMxRDY4Q0Q7XG59XG5cbi50YWJ1bGF0b3ItZWRpdC1saXN0IC50YWJ1bGF0b3ItZWRpdC1saXN0LWl0ZW0uYWN0aXZlLmZvY3VzZWQge1xuICBvdXRsaW5lOiAxcHggc29saWQgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpO1xufVxuXG4udGFidWxhdG9yLWVkaXQtbGlzdCAudGFidWxhdG9yLWVkaXQtbGlzdC1pdGVtLmZvY3VzZWQge1xuICBvdXRsaW5lOiAxcHggc29saWQgIzFENjhDRDtcbn1cblxuQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xuICAudGFidWxhdG9yLWVkaXQtbGlzdCAudGFidWxhdG9yLWVkaXQtbGlzdC1pdGVtOmhvdmVyIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgY29sb3I6ICNmZmY7XG4gICAgYmFja2dyb3VuZDogIzFENjhDRDtcbiAgfVxufVxuXG4udGFidWxhdG9yLWVkaXQtbGlzdCAudGFidWxhdG9yLWVkaXQtbGlzdC1wbGFjZWhvbGRlciB7XG4gIHBhZGRpbmc6IDRweDtcbiAgY29sb3I6ICMzMzM7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtZ3JvdXAge1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2FhYTtcbiAgcGFkZGluZzogNHB4O1xuICBwYWRkaW5nLXRvcDogNnB4O1xuICBjb2xvcjogIzMzMztcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbi50YWJ1bGF0b3ItZWRpdC1saXN0IC50YWJ1bGF0b3ItZWRpdC1saXN0LWl0ZW0udGFidWxhdG9yLWVkaXQtbGlzdC1ncm91cC1sZXZlbC0yLFxuLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtZ3JvdXAudGFidWxhdG9yLWVkaXQtbGlzdC1ncm91cC1sZXZlbC0yIHtcbiAgcGFkZGluZy1sZWZ0OiAxMnB4O1xufVxuXG4udGFidWxhdG9yLWVkaXQtbGlzdCAudGFidWxhdG9yLWVkaXQtbGlzdC1pdGVtLnRhYnVsYXRvci1lZGl0LWxpc3QtZ3JvdXAtbGV2ZWwtMyxcbi50YWJ1bGF0b3ItZWRpdC1saXN0IC50YWJ1bGF0b3ItZWRpdC1saXN0LWdyb3VwLnRhYnVsYXRvci1lZGl0LWxpc3QtZ3JvdXAtbGV2ZWwtMyB7XG4gIHBhZGRpbmctbGVmdDogMjBweDtcbn1cblxuLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtaXRlbS50YWJ1bGF0b3ItZWRpdC1saXN0LWdyb3VwLWxldmVsLTQsXG4udGFidWxhdG9yLWVkaXQtbGlzdCAudGFidWxhdG9yLWVkaXQtbGlzdC1ncm91cC50YWJ1bGF0b3ItZWRpdC1saXN0LWdyb3VwLWxldmVsLTQge1xuICBwYWRkaW5nLWxlZnQ6IDI4cHg7XG59XG5cbi50YWJ1bGF0b3ItZWRpdC1saXN0IC50YWJ1bGF0b3ItZWRpdC1saXN0LWl0ZW0udGFidWxhdG9yLWVkaXQtbGlzdC1ncm91cC1sZXZlbC01LFxuLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtZ3JvdXAudGFidWxhdG9yLWVkaXQtbGlzdC1ncm91cC1sZXZlbC01IHtcbiAgcGFkZGluZy1sZWZ0OiAzNnB4O1xufVxuXG4udGFidWxhdG9yLnRhYnVsYXRvci1sdHIge1xuICBkaXJlY3Rpb246IGx0cjtcbn1cblxuLnRhYnVsYXRvci50YWJ1bGF0b3ItcnRsIHtcbiAgdGV4dC1hbGlnbjogaW5pdGlhbDtcbiAgZGlyZWN0aW9uOiBydGw7XG59XG5cbi50YWJ1bGF0b3IudGFidWxhdG9yLXJ0bCAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbCB7XG4gIHRleHQtYWxpZ246IGluaXRpYWw7XG4gIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI2FhYTtcbiAgYm9yZGVyLXJpZ2h0OiBpbml0aWFsO1xufVxuXG4udGFidWxhdG9yLnRhYnVsYXRvci1ydGwgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLWNvbC1ncm91cCAudGFidWxhdG9yLWNvbC1ncm91cC1jb2xzIHtcbiAgbWFyZ2luLXJpZ2h0OiBpbml0aWFsO1xuICBtYXJnaW4tbGVmdDogLTFweDtcbn1cblxuLnRhYnVsYXRvci50YWJ1bGF0b3ItcnRsIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1zb3J0YWJsZSAudGFidWxhdG9yLWNvbC10aXRsZSB7XG4gIHBhZGRpbmctcmlnaHQ6IDA7XG4gIHBhZGRpbmctbGVmdDogMjVweDtcbn1cblxuLnRhYnVsYXRvci50YWJ1bGF0b3ItcnRsIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtc29ydGVyIHtcbiAgbGVmdDogOHB4O1xuICByaWdodDogaW5pdGlhbDtcbn1cblxuLnRhYnVsYXRvci50YWJ1bGF0b3ItcnRsIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCB7XG4gIGJvcmRlci1yaWdodDogaW5pdGlhbDtcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjYWFhO1xufVxuXG4udGFidWxhdG9yLnRhYnVsYXRvci1ydGwgLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItZGF0YS10cmVlLWJyYW5jaCB7XG4gIG1hcmdpbi1yaWdodDogaW5pdGlhbDtcbiAgbWFyZ2luLWxlZnQ6IDVweDtcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogaW5pdGlhbDtcbiAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDFweDtcbiAgYm9yZGVyLWxlZnQ6IGluaXRpYWw7XG4gIGJvcmRlci1yaWdodDogMnB4IHNvbGlkICNhYWE7XG59XG5cbi50YWJ1bGF0b3IudGFidWxhdG9yLXJ0bCAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbCB7XG4gIG1hcmdpbi1yaWdodDogaW5pdGlhbDtcbiAgbWFyZ2luLWxlZnQ6IDVweDtcbn1cblxuLnRhYnVsYXRvci50YWJ1bGF0b3ItcnRsIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3ItZnJvemVuLnRhYnVsYXRvci1mcm96ZW4tbGVmdCB7XG4gIGJvcmRlci1sZWZ0OiAycHggc29saWQgI2FhYTtcbn1cblxuLnRhYnVsYXRvci50YWJ1bGF0b3ItcnRsIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3ItZnJvemVuLnRhYnVsYXRvci1mcm96ZW4tcmlnaHQge1xuICBib3JkZXItcmlnaHQ6IDJweCBzb2xpZCAjYWFhO1xufVxuXG4udGFidWxhdG9yLnRhYnVsYXRvci1ydGwgLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jb2wtcmVzaXplLWhhbmRsZTpsYXN0LW9mLXR5cGUge1xuICB3aWR0aDogM3B4O1xuICBtYXJnaW4tbGVmdDogMDtcbiAgbWFyZ2luLXJpZ2h0OiAtM3B4O1xufVxuXG4udGFidWxhdG9yLnRhYnVsYXRvci1ydGwgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1jYWxjcy1ob2xkZXIge1xuICB0ZXh0LWFsaWduOiBpbml0aWFsO1xufVxuXG4udGFidWxhdG9yLXByaW50LWZ1bGxzY3JlZW4ge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgYm90dG9tOiAwO1xuICBsZWZ0OiAwO1xuICByaWdodDogMDtcbiAgei1pbmRleDogMTAwMDA7XG59XG5cbmJvZHkudGFidWxhdG9yLXByaW50LWZ1bGxzY3JlZW4taGlkZSA+ICo6bm90KC50YWJ1bGF0b3ItcHJpbnQtZnVsbHNjcmVlbikge1xuICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XG59XG5cbi50YWJ1bGF0b3ItcHJpbnQtdGFibGUge1xuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xufVxuXG4udGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItZGF0YS10cmVlLWJyYW5jaCB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgaGVpZ2h0OiA5cHg7XG4gIHdpZHRoOiA3cHg7XG4gIG1hcmdpbi10b3A6IC05cHg7XG4gIG1hcmdpbi1yaWdodDogNXB4O1xuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAxcHg7XG4gIGJvcmRlci1sZWZ0OiAycHggc29saWQgI2FhYTtcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICNhYWE7XG59XG5cbi50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1wcmludC10YWJsZS1ncm91cCB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjOTk5O1xuICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjYWFhO1xuICBib3JkZXItdG9wOiAxcHggc29saWQgIzk5OTtcbiAgcGFkZGluZzogNXB4O1xuICBwYWRkaW5nLWxlZnQ6IDEwcHg7XG4gIGJhY2tncm91bmQ6ICNjY2M7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICBtaW4td2lkdGg6IDEwMCU7XG59XG5cbkBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcbiAgLnRhYnVsYXRvci1wcmludC10YWJsZSAudGFidWxhdG9yLXByaW50LXRhYmxlLWdyb3VwOmhvdmVyIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjEpO1xuICB9XG59XG5cbi50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1wcmludC10YWJsZS1ncm91cC50YWJ1bGF0b3ItZ3JvdXAtdmlzaWJsZSAudGFidWxhdG9yLWFycm93IHtcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICBib3JkZXItbGVmdDogNnB4IHNvbGlkIHRyYW5zcGFyZW50O1xuICBib3JkZXItcmlnaHQ6IDZweCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgYm9yZGVyLXRvcDogNnB4IHNvbGlkICM2NjY7XG4gIGJvcmRlci1ib3R0b206IDA7XG59XG5cbi50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1wcmludC10YWJsZS1ncm91cC50YWJ1bGF0b3ItZ3JvdXAtbGV2ZWwtMSB0ZCB7XG4gIHBhZGRpbmctbGVmdDogMzBweCAhaW1wb3J0YW50O1xufVxuXG4udGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUtZ3JvdXAudGFidWxhdG9yLWdyb3VwLWxldmVsLTIgdGQge1xuICBwYWRkaW5nLWxlZnQ6IDUwcHggIWltcG9ydGFudDtcbn1cblxuLnRhYnVsYXRvci1wcmludC10YWJsZSAudGFidWxhdG9yLXByaW50LXRhYmxlLWdyb3VwLnRhYnVsYXRvci1ncm91cC1sZXZlbC0zIHRkIHtcbiAgcGFkZGluZy1sZWZ0OiA3MHB4ICFpbXBvcnRhbnQ7XG59XG5cbi50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1wcmludC10YWJsZS1ncm91cC50YWJ1bGF0b3ItZ3JvdXAtbGV2ZWwtNCB0ZCB7XG4gIHBhZGRpbmctbGVmdDogOTBweCAhaW1wb3J0YW50O1xufVxuXG4udGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUtZ3JvdXAudGFidWxhdG9yLWdyb3VwLWxldmVsLTUgdGQge1xuICBwYWRkaW5nLWxlZnQ6IDExMHB4ICFpbXBvcnRhbnQ7XG59XG5cbi50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1wcmludC10YWJsZS1ncm91cCAudGFidWxhdG9yLWdyb3VwLXRvZ2dsZSB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbn1cblxuLnRhYnVsYXRvci1wcmludC10YWJsZSAudGFidWxhdG9yLXByaW50LXRhYmxlLWdyb3VwIC50YWJ1bGF0b3ItYXJyb3cge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHdpZHRoOiAwO1xuICBoZWlnaHQ6IDA7XG4gIG1hcmdpbi1yaWdodDogMTZweDtcbiAgYm9yZGVyLXRvcDogNnB4IHNvbGlkIHRyYW5zcGFyZW50O1xuICBib3JkZXItYm90dG9tOiA2cHggc29saWQgdHJhbnNwYXJlbnQ7XG4gIGJvcmRlci1yaWdodDogMDtcbiAgYm9yZGVyLWxlZnQ6IDZweCBzb2xpZCAjNjY2O1xuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xufVxuXG4udGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUtZ3JvdXAgc3BhbiB7XG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xuICBjb2xvcjogI2QwMDtcbn1cblxuLnRhYnVsYXRvci1wcmludC10YWJsZSAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sIHtcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICBoZWlnaHQ6IDExcHg7XG4gIHdpZHRoOiAxMXB4O1xuICBtYXJnaW4tcmlnaHQ6IDVweDtcbiAgYm9yZGVyOiAxcHggc29saWQgIzMzMztcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xuICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuMSk7XG4gIG92ZXJmbG93OiBoaWRkZW47XG59XG5cbkBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcbiAgLnRhYnVsYXRvci1wcmludC10YWJsZSAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sOmhvdmVyIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjIpO1xuICB9XG59XG5cbi50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbCAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sLWNvbGxhcHNlIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGhlaWdodDogN3B4O1xuICB3aWR0aDogMXB4O1xuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbn1cblxuLnRhYnVsYXRvci1wcmludC10YWJsZSAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wtY29sbGFwc2U6YWZ0ZXIge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGNvbnRlbnQ6IFwiXCI7XG4gIGxlZnQ6IC0zcHg7XG4gIHRvcDogM3B4O1xuICBoZWlnaHQ6IDFweDtcbiAgd2lkdGg6IDdweDtcbiAgYmFja2dyb3VuZDogIzMzMztcbn1cblxuLnRhYnVsYXRvci1wcmludC10YWJsZSAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wtZXhwYW5kIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGhlaWdodDogN3B4O1xuICB3aWR0aDogMXB4O1xuICBiYWNrZ3JvdW5kOiAjMzMzO1xufVxuXG4udGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbC1leHBhbmQ6YWZ0ZXIge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGNvbnRlbnQ6IFwiXCI7XG4gIGxlZnQ6IC0zcHg7XG4gIHRvcDogM3B4O1xuICBoZWlnaHQ6IDFweDtcbiAgd2lkdGg6IDdweDtcbiAgYmFja2dyb3VuZDogIzMzMztcbn1cblxuLyojIHNvdXJjZU1hcHBpbmdVUkw9dGFidWxhdG9yLmNzcy5tYXAgKi9gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy90YWJ1bGF0b3ItdGFibGVzL2Rpc3QvY3NzL3RhYnVsYXRvci5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvdGFidWxhdG9yLXRhYmxlcy9kaXN0L2Nzcy90YWJ1bGF0b3IuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0Usa0JBQWtCO0VBQ2xCLHNCQUFzQjtFQUN0QixzQkFBc0I7RUFDdEIsZUFBZTtFQUNmLGdCQUFnQjtFQUNoQixnQkFBZ0I7RUFDaEIsZ0NBQWdDO0VBQ2hDLDZCQUE2QjtFQUM3Qiw0QkFBNEI7RUFDNUIsMkJBQTJCO0VBQzNCLHdCQUF3QjtBQUFFOztBQUMxQjtFQUNFLGVBQWU7QUFBRTs7QUFDbkI7RUFDRSxxQkFBcUI7QUFBRTs7QUFDekI7RUFDRSxpQkFBaUI7QUFBRTs7QUFDckI7RUFDRSxrQkFBa0I7RUFDbEIsc0JBQXNCO0VBQ3RCLFdBQVc7RUFDWCw2QkFBNkI7RUFDN0IseUJBQXlCO0VBQ3pCLFdBQVc7RUFDWCxpQkFBaUI7RUFDakIsbUJBQW1CO0VBQ25CLGdCQUFnQjtFQUNoQixzQkFBc0I7RUFDdEIsd0JBQXdCO0VBQ3hCLHlCQUF5QjtFQUN6QixvQkFBb0I7QUFBRTs7QUFDdEI7RUFDRSxhQUFhO0FBQUU7O0FBQ2pCO0VBQ0Usa0JBQWtCO0VBQ2xCLGdCQUFnQjtBQUFFOztBQUNsQjtFQUNFLHFCQUFxQjtBQUFFOztBQUMzQjtFQUNFLG9CQUFvQjtFQUNwQixrQkFBa0I7RUFDbEIsc0JBQXNCO0VBQ3RCLHNCQUFzQjtFQUN0QiwyQkFBMkI7RUFDM0IsNEJBQTRCO0VBQzVCLG1CQUFtQjtFQUNuQixnQkFBZ0I7RUFDaEIsc0JBQXNCO0VBQ3RCLGdCQUFnQjtBQUFFOztBQUNsQjtFQUNFLGtCQUFrQjtFQUNsQixzQkFBc0I7RUFDdEIsbUJBQW1CO0VBQ25CLG9CQUFvQjtBQUFFOztBQUN4QjtF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QTZCO0FBQUU7O0FBQ2pDO0VBQ0UsNkJBQTZCO0FBQUU7O0FBQ2pDO0VBQ0UsNkJBQTZCO0FBQUU7O0FBQ2pDO0VBQ0UsOEJBQThCO0FBQUU7O0FBQ2xDO0VBQ0UscUJBQXFCO0FBQUU7O0FBQ3pCO0VBQ0UscUJBQXFCO0VBQ3JCLFFBQVE7RUFDUixTQUFTO0VBQ1Qsa0JBQWtCO0VBQ2xCLGlDQUFpQztFQUNqQyxvQ0FBb0M7RUFDcEMsZUFBZTtFQUNmLDJCQUEyQjtFQUMzQixzQkFBc0I7QUFBRTs7QUFDMUI7RUFDRSxpQkFBaUI7RUFDakIsV0FBVztBQUFFOztBQUNqQjtFQUNFLG9CQUFvQjtFQUNwQix1QkFBdUI7RUFDdkIsbUJBQW1CO0VBQ25CLHNCQUFzQjtFQUN0QixZQUFZO0VBQ1osV0FBVztFQUNYLGlCQUFpQjtFQUNqQixzQkFBc0I7RUFDdEIsa0JBQWtCO0VBQ2xCLDhCQUE4QjtFQUM5QixnQkFBZ0I7QUFBRTs7QUFDbEI7RUFDRTtJQUNFLGVBQWU7SUFDZiw4QkFBOEI7RUFBRTtBQUFFOztBQUN0QztFQUNFLHFCQUFxQjtFQUNyQixrQkFBa0I7RUFDbEIsV0FBVztFQUNYLFVBQVU7RUFDVix1QkFBdUI7QUFBRTs7QUFDekI7RUFDRSxrQkFBa0I7RUFDbEIsV0FBVztFQUNYLFVBQVU7RUFDVixRQUFRO0VBQ1IsV0FBVztFQUNYLFVBQVU7RUFDVixnQkFBZ0I7QUFBRTs7QUFDdEI7RUFDRSxxQkFBcUI7RUFDckIsa0JBQWtCO0VBQ2xCLFdBQVc7RUFDWCxVQUFVO0VBQ1YsZ0JBQWdCO0FBQUU7O0FBQ2xCO0VBQ0Usa0JBQWtCO0VBQ2xCLFdBQVc7RUFDWCxVQUFVO0VBQ1YsUUFBUTtFQUNSLFdBQVc7RUFDWCxVQUFVO0VBQ1YsZ0JBQWdCO0FBQUU7O0FDaVkxQix3Q0FBd0NcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLnRhYnVsYXRvciB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjOTk5O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzg4ODtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XFxuICAtbW96LXRyYW5zZm9ybTogdHJhbnNsYXRlWigwKTtcXG4gIC1tcy10cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XFxuICAtby10cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7IH1cXG4gIC50YWJ1bGF0b3JbdGFidWxhdG9yLWxheW91dD1cXFwiZml0RGF0YUZpbGxcXFwiXSAudGFidWxhdG9yLXRhYmxlaG9sZGVyIC50YWJ1bGF0b3ItdGFibGUge1xcbiAgICBtaW4td2lkdGg6IDEwMCU7IH1cXG4gIC50YWJ1bGF0b3JbdGFidWxhdG9yLWxheW91dD1cXFwiZml0RGF0YVRhYmxlXFxcIl0ge1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IH1cXG4gIC50YWJ1bGF0b3IudGFidWxhdG9yLWJsb2NrLXNlbGVjdCB7XFxuICAgIHVzZXItc2VsZWN0OiBub25lOyB9XFxuICAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICM5OTk7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlNmU2ZTY7XFxuICAgIGNvbG9yOiAjNTU1O1xcbiAgICBmb250LXdlaWdodDogYm9sZDtcXG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gICAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcXG4gICAgLWtodG1sLXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAtby11c2VyLXNlbGVjdDogbm9uZTsgfVxcbiAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyLnRhYnVsYXRvci1oZWFkZXItaGlkZGVuIHtcXG4gICAgICBkaXNwbGF5OiBub25lOyB9XFxuICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1oZWFkZXItY29udGVudHMge1xcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgICBvdmVyZmxvdzogaGlkZGVuOyB9XFxuICAgICAgLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWhlYWRlci1jb250ZW50cyAudGFidWxhdG9yLWhlYWRlcnMge1xcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOyB9XFxuICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wge1xcbiAgICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcbiAgICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNhYWE7XFxuICAgICAgYmFja2dyb3VuZDogI2U2ZTZlNjtcXG4gICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xcbiAgICAgIHZlcnRpY2FsLWFsaWduOiBib3R0b207XFxuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjsgfVxcbiAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLW1vdmluZyB7XFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjOTk5O1xcbiAgICAgICAgYmFja2dyb3VuZDogI2NkY2RjZDtcXG4gICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lOyB9XFxuICAgICAgLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbCAudGFidWxhdG9yLWNvbC1jb250ZW50IHtcXG4gICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgICBwYWRkaW5nOiA0cHg7IH1cXG4gICAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWhlYWRlci1wb3B1cC1idXR0b24ge1xcbiAgICAgICAgICBwYWRkaW5nOiAwIDhweDsgfVxcbiAgICAgICAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1oZWFkZXItcG9wdXAtYnV0dG9uOmhvdmVyIHtcXG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgICAgICAgb3BhY2l0eTogLjY7IH1cXG4gICAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC10aXRsZS1ob2xkZXIge1xcbiAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7IH1cXG4gICAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC10aXRsZSB7XFxuICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgICAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXG4gICAgICAgICAgdmVydGljYWwtYWxpZ246IGJvdHRvbTsgfVxcbiAgICAgICAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtdGl0bGUudGFidWxhdG9yLWNvbC10aXRsZS13cmFwIHtcXG4gICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm9ybWFsO1xcbiAgICAgICAgICAgIHRleHQtb3ZlcmZsb3c6IGluaXRpYWw7IH1cXG4gICAgICAgICAgLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbCAudGFidWxhdG9yLWNvbC1jb250ZW50IC50YWJ1bGF0b3ItY29sLXRpdGxlIC50YWJ1bGF0b3ItdGl0bGUtZWRpdG9yIHtcXG4gICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICM5OTk7XFxuICAgICAgICAgICAgcGFkZGluZzogMXB4O1xcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICNmZmY7IH1cXG4gICAgICAgICAgLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbCAudGFidWxhdG9yLWNvbC1jb250ZW50IC50YWJ1bGF0b3ItY29sLXRpdGxlIC50YWJ1bGF0b3ItaGVhZGVyLXBvcHVwLWJ1dHRvbiArIC50YWJ1bGF0b3ItdGl0bGUtZWRpdG9yIHtcXG4gICAgICAgICAgICB3aWR0aDogY2FsYygxMDAlIC0gMjJweCk7IH1cXG4gICAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC1zb3J0ZXIge1xcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICAgIHRvcDogMDtcXG4gICAgICAgICAgYm90dG9tOiAwO1xcbiAgICAgICAgICByaWdodDogNHB4OyB9XFxuICAgICAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC1zb3J0ZXIgLnRhYnVsYXRvci1hcnJvdyB7XFxuICAgICAgICAgICAgd2lkdGg6IDA7XFxuICAgICAgICAgICAgaGVpZ2h0OiAwO1xcbiAgICAgICAgICAgIGJvcmRlci1sZWZ0OiA2cHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICAgICAgICAgICAgYm9yZGVyLXJpZ2h0OiA2cHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogNnB4IHNvbGlkICNiYmI7IH1cXG4gICAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1jb2wtZ3JvdXAgLnRhYnVsYXRvci1jb2wtZ3JvdXAtY29scyB7XFxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNhYWE7XFxuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAtMXB4OyB9XFxuICAgICAgLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbCAudGFidWxhdG9yLWhlYWRlci1maWx0ZXIge1xcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgICAgIG1hcmdpbi10b3A6IDJweDtcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOyB9XFxuICAgICAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sIC50YWJ1bGF0b3ItaGVhZGVyLWZpbHRlciB0ZXh0YXJlYSB7XFxuICAgICAgICAgIGhlaWdodDogYXV0byAhaW1wb3J0YW50OyB9XFxuICAgICAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sIC50YWJ1bGF0b3ItaGVhZGVyLWZpbHRlciBzdmcge1xcbiAgICAgICAgICBtYXJnaW4tdG9wOiAzcHg7IH1cXG4gICAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1oZWFkZXItZmlsdGVyIGlucHV0OjotbXMtY2xlYXIge1xcbiAgICAgICAgICB3aWR0aDogMDtcXG4gICAgICAgICAgaGVpZ2h0OiAwOyB9XFxuICAgICAgLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3Itc29ydGFibGUgLnRhYnVsYXRvci1jb2wtdGl0bGUge1xcbiAgICAgICAgcGFkZGluZy1yaWdodDogMjVweDsgfVxcbiAgICAgIEBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcXG4gICAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlLnRhYnVsYXRvci1jb2wtc29ydGVyLWVsZW1lbnQ6aG92ZXIge1xcbiAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNjZGNkY2Q7IH0gfVxcbiAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlW2FyaWEtc29ydD1cXFwibm9uZVxcXCJdIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtc29ydGVyIHtcXG4gICAgICAgIGNvbG9yOiAjYmJiOyB9XFxuICAgICAgICBAbWVkaWEgKGhvdmVyOiBob3ZlcikgYW5kIChwb2ludGVyOiBmaW5lKSB7XFxuICAgICAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlW2FyaWEtc29ydD1cXFwibm9uZVxcXCJdIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtc29ydGVyLnRhYnVsYXRvci1jb2wtc29ydGVyLWVsZW1lbnQgLnRhYnVsYXRvci1hcnJvdzpob3ZlciB7XFxuICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICAgICAgICAgIGJvcmRlci1ib3R0b206IDZweCBzb2xpZCAjNTU1OyB9IH1cXG4gICAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlW2FyaWEtc29ydD1cXFwibm9uZVxcXCJdIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtc29ydGVyIC50YWJ1bGF0b3ItYXJyb3cge1xcbiAgICAgICAgICBib3JkZXItdG9wOiBub25lO1xcbiAgICAgICAgICBib3JkZXItYm90dG9tOiA2cHggc29saWQgI2JiYjsgfVxcbiAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlW2FyaWEtc29ydD1cXFwiYXNjZW5kaW5nXFxcIl0gLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC1zb3J0ZXIge1xcbiAgICAgICAgY29sb3I6ICM2NjY7IH1cXG4gICAgICAgIEBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcXG4gICAgICAgICAgLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3Itc29ydGFibGVbYXJpYS1zb3J0PVxcXCJhc2NlbmRpbmdcXFwiXSAudGFidWxhdG9yLWNvbC1jb250ZW50IC50YWJ1bGF0b3ItY29sLXNvcnRlci50YWJ1bGF0b3ItY29sLXNvcnRlci1lbGVtZW50IC50YWJ1bGF0b3ItYXJyb3c6aG92ZXIge1xcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgICAgICAgICBib3JkZXItYm90dG9tOiA2cHggc29saWQgIzU1NTsgfSB9XFxuICAgICAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1zb3J0YWJsZVthcmlhLXNvcnQ9XFxcImFzY2VuZGluZ1xcXCJdIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtc29ydGVyIC50YWJ1bGF0b3ItYXJyb3cge1xcbiAgICAgICAgICBib3JkZXItdG9wOiBub25lO1xcbiAgICAgICAgICBib3JkZXItYm90dG9tOiA2cHggc29saWQgIzY2NjsgfVxcbiAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlW2FyaWEtc29ydD1cXFwiZGVzY2VuZGluZ1xcXCJdIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtc29ydGVyIHtcXG4gICAgICAgIGNvbG9yOiAjNjY2OyB9XFxuICAgICAgICBAbWVkaWEgKGhvdmVyOiBob3ZlcikgYW5kIChwb2ludGVyOiBmaW5lKSB7XFxuICAgICAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlW2FyaWEtc29ydD1cXFwiZGVzY2VuZGluZ1xcXCJdIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtc29ydGVyLnRhYnVsYXRvci1jb2wtc29ydGVyLWVsZW1lbnQgLnRhYnVsYXRvci1hcnJvdzpob3ZlciB7XFxuICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICAgICAgICAgIGJvcmRlci10b3A6IDZweCBzb2xpZCAjNTU1OyB9IH1cXG4gICAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlW2FyaWEtc29ydD1cXFwiZGVzY2VuZGluZ1xcXCJdIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtc29ydGVyIC50YWJ1bGF0b3ItYXJyb3cge1xcbiAgICAgICAgICBib3JkZXItYm90dG9tOiBub25lO1xcbiAgICAgICAgICBib3JkZXItdG9wOiA2cHggc29saWQgIzY2NjtcXG4gICAgICAgICAgY29sb3I6ICM2NjY7IH1cXG4gICAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1jb2wtdmVydGljYWwgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC10aXRsZSB7XFxuICAgICAgICB3cml0aW5nLW1vZGU6IHZlcnRpY2FsLXJsO1xcbiAgICAgICAgdGV4dC1vcmllbnRhdGlvbjogbWl4ZWQ7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOyB9XFxuICAgICAgLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3ItY29sLXZlcnRpY2FsLnRhYnVsYXRvci1jb2wtdmVydGljYWwtZmxpcCAudGFidWxhdG9yLWNvbC10aXRsZSB7XFxuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpOyB9XFxuICAgICAgLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3ItY29sLXZlcnRpY2FsLnRhYnVsYXRvci1zb3J0YWJsZSAudGFidWxhdG9yLWNvbC10aXRsZSB7XFxuICAgICAgICBwYWRkaW5nLXJpZ2h0OiAwO1xcbiAgICAgICAgcGFkZGluZy10b3A6IDIwcHg7IH1cXG4gICAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1jb2wtdmVydGljYWwudGFidWxhdG9yLXNvcnRhYmxlLnRhYnVsYXRvci1jb2wtdmVydGljYWwtZmxpcCAudGFidWxhdG9yLWNvbC10aXRsZSB7XFxuICAgICAgICBwYWRkaW5nLXJpZ2h0OiAwO1xcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDIwcHg7IH1cXG4gICAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1jb2wtdmVydGljYWwudGFidWxhdG9yLXNvcnRhYmxlIC50YWJ1bGF0b3ItY29sLXNvcnRlciB7XFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgICAgIGxlZnQ6IDA7XFxuICAgICAgICByaWdodDogMDtcXG4gICAgICAgIHRvcDogNHB4O1xcbiAgICAgICAgYm90dG9tOiBhdXRvOyB9XFxuICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1mcm96ZW4ge1xcbiAgICAgIHBvc2l0aW9uOiBzdGlja3k7XFxuICAgICAgbGVmdDogMDtcXG4gICAgICB6LWluZGV4OiAxMTsgfVxcbiAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1mcm96ZW4udGFidWxhdG9yLWZyb3plbi1sZWZ0IHtcXG4gICAgICAgIGJvcmRlci1yaWdodDogMnB4IHNvbGlkICNhYWE7IH1cXG4gICAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItZnJvemVuLnRhYnVsYXRvci1mcm96ZW4tcmlnaHQge1xcbiAgICAgICAgYm9yZGVyLWxlZnQ6IDJweCBzb2xpZCAjYWFhOyB9XFxuICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jYWxjcy1ob2xkZXIge1xcbiAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgICAgYmFja2dyb3VuZDogI2YzZjNmMyAhaW1wb3J0YW50O1xcbiAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjYWFhO1xcbiAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjYWFhOyB9XFxuICAgICAgLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNhbGNzLWhvbGRlciAudGFidWxhdG9yLXJvdyB7XFxuICAgICAgICBiYWNrZ3JvdW5kOiAjZjNmM2YzICFpbXBvcnRhbnQ7IH1cXG4gICAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jYWxjcy1ob2xkZXIgLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jb2wtcmVzaXplLWhhbmRsZSB7XFxuICAgICAgICAgIGRpc3BsYXk6IG5vbmU7IH1cXG4gICAgLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWZyb3plbi1yb3dzLWhvbGRlcjplbXB0eSB7XFxuICAgICAgZGlzcGxheTogbm9uZTsgfVxcbiAgLnRhYnVsYXRvciAudGFidWxhdG9yLXRhYmxlaG9sZGVyIHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gICAgb3ZlcmZsb3c6IGF1dG87XFxuICAgIC13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOiB0b3VjaDsgfVxcbiAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItdGFibGVob2xkZXI6Zm9jdXMge1xcbiAgICAgIG91dGxpbmU6IG5vbmU7IH1cXG4gICAgLnRhYnVsYXRvciAudGFidWxhdG9yLXRhYmxlaG9sZGVyIC50YWJ1bGF0b3ItcGxhY2Vob2xkZXIge1xcbiAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICAgIHdpZHRoOiAxMDAlOyB9XFxuICAgICAgLnRhYnVsYXRvciAudGFidWxhdG9yLXRhYmxlaG9sZGVyIC50YWJ1bGF0b3ItcGxhY2Vob2xkZXJbdGFidWxhdG9yLXJlbmRlci1tb2RlPVxcXCJ2aXJ0dWFsXFxcIl0ge1xcbiAgICAgICAgbWluLWhlaWdodDogMTAwJTtcXG4gICAgICAgIG1pbi13aWR0aDogMTAwJTsgfVxcbiAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci10YWJsZWhvbGRlciAudGFidWxhdG9yLXBsYWNlaG9sZGVyIC50YWJ1bGF0b3ItcGxhY2Vob2xkZXItY29udGVudHMge1xcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICAgICAgcGFkZGluZzogMTBweDtcXG4gICAgICAgIGNvbG9yOiAjY2NjO1xcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICAgICAgICBmb250LXNpemU6IDIwcHg7XFxuICAgICAgICB3aGl0ZS1zcGFjZTogbm9ybWFsOyB9XFxuICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci10YWJsZWhvbGRlciAudGFidWxhdG9yLXRhYmxlIHtcXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gICAgICBvdmVyZmxvdzogdmlzaWJsZTtcXG4gICAgICBjb2xvcjogIzMzMzsgfVxcbiAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci10YWJsZWhvbGRlciAudGFidWxhdG9yLXRhYmxlIC50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1jYWxjcyB7XFxuICAgICAgICBmb250LXdlaWdodDogYm9sZDtcXG4gICAgICAgIGJhY2tncm91bmQ6ICNlMmUyZTIgIWltcG9ydGFudDsgfVxcbiAgICAgICAgLnRhYnVsYXRvciAudGFidWxhdG9yLXRhYmxlaG9sZGVyIC50YWJ1bGF0b3ItdGFibGUgLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLWNhbGNzLnRhYnVsYXRvci1jYWxjcy10b3Age1xcbiAgICAgICAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgI2FhYTsgfVxcbiAgICAgICAgLnRhYnVsYXRvciAudGFidWxhdG9yLXRhYmxlaG9sZGVyIC50YWJ1bGF0b3ItdGFibGUgLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLWNhbGNzLnRhYnVsYXRvci1jYWxjcy1ib3R0b20ge1xcbiAgICAgICAgICBib3JkZXItdG9wOiAycHggc29saWQgI2FhYTsgfVxcbiAgLnRhYnVsYXRvciAudGFidWxhdG9yLWZvb3RlciB7XFxuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjOTk5O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTZlNmU2O1xcbiAgICBjb2xvcjogIzU1NTtcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICAgIHVzZXItc2VsZWN0OiBub25lO1xcbiAgICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAta2h0bWwtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgIC1vLXVzZXItc2VsZWN0OiBub25lOyB9XFxuICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1mb290ZXItY29udGVudHMge1xcbiAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gICAgICBwYWRkaW5nOiA1cHggMTBweDsgfVxcbiAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1mb290ZXItY29udGVudHM6ZW1wdHkge1xcbiAgICAgICAgZGlzcGxheTogbm9uZTsgfVxcbiAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyIC50YWJ1bGF0b3ItY2FsY3MtaG9sZGVyIHtcXG4gICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgIHRleHQtYWxpZ246IGxlZnQ7XFxuICAgICAgYmFja2dyb3VuZDogI2YzZjNmMyAhaW1wb3J0YW50O1xcbiAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjYWFhO1xcbiAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjYWFhO1xcbiAgICAgIG92ZXJmbG93OiBoaWRkZW47IH1cXG4gICAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyIC50YWJ1bGF0b3ItY2FsY3MtaG9sZGVyIC50YWJ1bGF0b3Itcm93IHtcXG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgICAgIGJhY2tncm91bmQ6ICNmM2YzZjMgIWltcG9ydGFudDsgfVxcbiAgICAgICAgLnRhYnVsYXRvciAudGFidWxhdG9yLWZvb3RlciAudGFidWxhdG9yLWNhbGNzLWhvbGRlciAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNvbC1yZXNpemUtaGFuZGxlIHtcXG4gICAgICAgICAgZGlzcGxheTogbm9uZTsgfVxcbiAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1jYWxjcy1ob2xkZXI6b25seS1jaGlsZCB7XFxuICAgICAgICBtYXJnaW4tYm90dG9tOiAtNXB4O1xcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogbm9uZTsgfVxcbiAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyID4gKiArIC50YWJ1bGF0b3ItcGFnZS1jb3VudGVyIHtcXG4gICAgICBtYXJnaW4tbGVmdDogMTBweDsgfVxcbiAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyIC50YWJ1bGF0b3ItcGFnZS1jb3VudGVyIHtcXG4gICAgICBmb250LXdlaWdodDogbm9ybWFsOyB9XFxuICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1wYWdpbmF0b3Ige1xcbiAgICAgIGZsZXg6IDE7XFxuICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XFxuICAgICAgY29sb3I6ICM1NTU7XFxuICAgICAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XFxuICAgICAgZm9udC13ZWlnaHQ6IGluaGVyaXQ7XFxuICAgICAgZm9udC1zaXplOiBpbmhlcml0OyB9XFxuICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1wYWdlLXNpemUge1xcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgICBtYXJnaW46IDAgNXB4O1xcbiAgICAgIHBhZGRpbmc6IDJweCA1cHg7XFxuICAgICAgYm9yZGVyOiAxcHggc29saWQgI2FhYTtcXG4gICAgICBib3JkZXItcmFkaXVzOiAzcHg7IH1cXG4gICAgLnRhYnVsYXRvciAudGFidWxhdG9yLWZvb3RlciAudGFidWxhdG9yLXBhZ2VzIHtcXG4gICAgICBtYXJnaW46IDAgN3B4OyB9XFxuICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1wYWdlIHtcXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgICAgbWFyZ2luOiAwIDJweDtcXG4gICAgICBwYWRkaW5nOiAycHggNXB4O1xcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNhYWE7XFxuICAgICAgYm9yZGVyLXJhZGl1czogM3B4O1xcbiAgICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTsgfVxcbiAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1wYWdlLmFjdGl2ZSB7XFxuICAgICAgICBjb2xvcjogI2QwMDsgfVxcbiAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1wYWdlOmRpc2FibGVkIHtcXG4gICAgICAgIG9wYWNpdHk6IC41OyB9XFxuICAgICAgQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xcbiAgICAgICAgLnRhYnVsYXRvciAudGFidWxhdG9yLWZvb3RlciAudGFidWxhdG9yLXBhZ2U6bm90KC5kaXNhYmxlZCk6aG92ZXIge1xcbiAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC4yKTtcXG4gICAgICAgICAgY29sb3I6ICNmZmY7IH0gfVxcbiAgLnRhYnVsYXRvciAudGFidWxhdG9yLWNvbC1yZXNpemUtaGFuZGxlIHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgIHdpZHRoOiA2cHg7XFxuICAgIG1hcmdpbi1sZWZ0OiAtM3B4O1xcbiAgICBtYXJnaW4tcmlnaHQ6IC0zcHg7XFxuICAgIHotaW5kZXg6IDEwO1xcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOyB9XFxuICAgIEBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcXG4gICAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItY29sLXJlc2l6ZS1oYW5kbGU6aG92ZXIge1xcbiAgICAgICAgY3Vyc29yOiBldy1yZXNpemU7IH0gfVxcbiAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItY29sLXJlc2l6ZS1oYW5kbGU6bGFzdC1vZi10eXBlIHtcXG4gICAgICB3aWR0aDogM3B4O1xcbiAgICAgIG1hcmdpbi1yaWdodDogMDsgfVxcbiAgLnRhYnVsYXRvciAudGFidWxhdG9yLWFsZXJ0IHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICB0b3A6IDA7XFxuICAgIGxlZnQ6IDA7XFxuICAgIHotaW5kZXg6IDEwMDtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjQpO1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7IH1cXG4gICAgLnRhYnVsYXRvciAudGFidWxhdG9yLWFsZXJ0IC50YWJ1bGF0b3ItYWxlcnQtbXNnIHtcXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgICAgbWFyZ2luOiAwIGF1dG87XFxuICAgICAgcGFkZGluZzogMTBweCAyMHB4O1xcbiAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICAgICAgYmFja2dyb3VuZDogI2ZmZjtcXG4gICAgICBmb250LXdlaWdodDogYm9sZDtcXG4gICAgICBmb250LXNpemU6IDE2cHg7IH1cXG4gICAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItYWxlcnQgLnRhYnVsYXRvci1hbGVydC1tc2cudGFidWxhdG9yLWFsZXJ0LXN0YXRlLW1zZyB7XFxuICAgICAgICBib3JkZXI6IDRweCBzb2xpZCAjMzMzO1xcbiAgICAgICAgY29sb3I6ICMwMDA7IH1cXG4gICAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItYWxlcnQgLnRhYnVsYXRvci1hbGVydC1tc2cudGFidWxhdG9yLWFsZXJ0LXN0YXRlLWVycm9yIHtcXG4gICAgICAgIGJvcmRlcjogNHB4IHNvbGlkICNEMDA7XFxuICAgICAgICBjb2xvcjogIzU5MDAwMDsgfVxcblxcbi50YWJ1bGF0b3Itcm93IHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBtaW4taGVpZ2h0OiAyMnB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsgfVxcbiAgLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLXJvdy1ldmVuIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0VGRUZFRjsgfVxcbiAgQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xcbiAgICAudGFidWxhdG9yLXJvdy50YWJ1bGF0b3Itc2VsZWN0YWJsZTpob3ZlciB7XFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2JiYjtcXG4gICAgICBjdXJzb3I6IHBvaW50ZXI7IH0gfVxcbiAgLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLXNlbGVjdGVkIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzlBQkNFQTsgfVxcbiAgQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xcbiAgICAudGFidWxhdG9yLXJvdy50YWJ1bGF0b3Itc2VsZWN0ZWQ6aG92ZXIge1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICM3NjlCQ0M7XFxuICAgICAgY3Vyc29yOiBwb2ludGVyOyB9IH1cXG4gIC50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1yb3ctbW92aW5nIHtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgIzAwMDtcXG4gICAgYmFja2dyb3VuZDogI2ZmZjsgfVxcbiAgLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLW1vdmluZyB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNhYWE7XFxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjYWFhO1xcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gICAgei1pbmRleDogMTU7IH1cXG4gIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3Itcm93LXJlc2l6ZS1oYW5kbGUge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHJpZ2h0OiAwO1xcbiAgICBib3R0b206IDA7XFxuICAgIGxlZnQ6IDA7XFxuICAgIGhlaWdodDogNXB4OyB9XFxuICAgIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3Itcm93LXJlc2l6ZS1oYW5kbGUucHJldiB7XFxuICAgICAgdG9wOiAwO1xcbiAgICAgIGJvdHRvbTogYXV0bzsgfVxcbiAgICBAbWVkaWEgKGhvdmVyOiBob3ZlcikgYW5kIChwb2ludGVyOiBmaW5lKSB7XFxuICAgICAgLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1yb3ctcmVzaXplLWhhbmRsZTpob3ZlciB7XFxuICAgICAgICBjdXJzb3I6IG5zLXJlc2l6ZTsgfSB9XFxuICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2Uge1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICBwYWRkaW5nOiA1cHg7XFxuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjYWFhO1xcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2FhYTsgfVxcbiAgICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2U6ZW1wdHkge1xcbiAgICAgIGRpc3BsYXk6IG5vbmU7IH1cXG4gICAgLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1yZXNwb25zaXZlLWNvbGxhcHNlIHRhYmxlIHtcXG4gICAgICBmb250LXNpemU6IDE0cHg7IH1cXG4gICAgICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2UgdGFibGUgdHIgdGQge1xcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOyB9XFxuICAgICAgICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2UgdGFibGUgdHIgdGQ6Zmlyc3Qtb2YtdHlwZSB7XFxuICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDEwcHg7IH1cXG4gIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICBwYWRkaW5nOiA0cHg7XFxuICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNhYWE7XFxuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzOyB9XFxuICAgIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3ItZnJvemVuIHtcXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgICAgcG9zaXRpb246IHN0aWNreTtcXG4gICAgICBsZWZ0OiAwO1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IGluaGVyaXQ7XFxuICAgICAgei1pbmRleDogMTE7IH1cXG4gICAgICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwudGFidWxhdG9yLWZyb3plbi50YWJ1bGF0b3ItZnJvemVuLWxlZnQge1xcbiAgICAgICAgYm9yZGVyLXJpZ2h0OiAycHggc29saWQgI2FhYTsgfVxcbiAgICAgIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3ItZnJvemVuLnRhYnVsYXRvci1mcm96ZW4tcmlnaHQge1xcbiAgICAgICAgYm9yZGVyLWxlZnQ6IDJweCBzb2xpZCAjYWFhOyB9XFxuICAgIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3ItZWRpdGluZyB7XFxuICAgICAgYm9yZGVyOiAxcHggc29saWQgIzFENjhDRDtcXG4gICAgICBvdXRsaW5lOiBub25lO1xcbiAgICAgIHBhZGRpbmc6IDA7IH1cXG4gICAgICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwudGFidWxhdG9yLWVkaXRpbmcgaW5wdXQsIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3ItZWRpdGluZyBzZWxlY3Qge1xcbiAgICAgICAgYm9yZGVyOiAxcHg7XFxuICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG4gICAgICAgIG91dGxpbmU6IG5vbmU7IH1cXG4gICAgLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsLnRhYnVsYXRvci12YWxpZGF0aW9uLWZhaWwge1xcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNkZDAwMDA7IH1cXG4gICAgICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwudGFidWxhdG9yLXZhbGlkYXRpb24tZmFpbCBpbnB1dCwgLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsLnRhYnVsYXRvci12YWxpZGF0aW9uLWZhaWwgc2VsZWN0IHtcXG4gICAgICAgIGJvcmRlcjogMXB4O1xcbiAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuICAgICAgICBjb2xvcjogI2RkMDAwMDsgfVxcbiAgICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwudGFidWxhdG9yLXJvdy1oYW5kbGUge1xcbiAgICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgICAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcXG4gICAgICAta2h0bWwtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgICAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXG4gICAgICAtby11c2VyLXNlbGVjdDogbm9uZTsgfVxcbiAgICAgIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3Itcm93LWhhbmRsZSAudGFidWxhdG9yLXJvdy1oYW5kbGUtYm94IHtcXG4gICAgICAgIHdpZHRoOiA4MCU7IH1cXG4gICAgICAgIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3Itcm93LWhhbmRsZSAudGFidWxhdG9yLXJvdy1oYW5kbGUtYm94IC50YWJ1bGF0b3Itcm93LWhhbmRsZS1iYXIge1xcbiAgICAgICAgICB3aWR0aDogMTAwJTtcXG4gICAgICAgICAgaGVpZ2h0OiAzcHg7XFxuICAgICAgICAgIG1hcmdpbi10b3A6IDJweDtcXG4gICAgICAgICAgYmFja2dyb3VuZDogIzY2NjsgfVxcbiAgICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtYnJhbmNoLWVtcHR5IHtcXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgICAgd2lkdGg6IDdweDsgfVxcbiAgICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtYnJhbmNoIHtcXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG4gICAgICBoZWlnaHQ6IDlweDtcXG4gICAgICB3aWR0aDogN3B4O1xcbiAgICAgIG1hcmdpbi10b3A6IC05cHg7XFxuICAgICAgbWFyZ2luLXJpZ2h0OiA1cHg7XFxuICAgICAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMXB4O1xcbiAgICAgIGJvcmRlci1sZWZ0OiAycHggc29saWQgI2FhYTtcXG4gICAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgI2FhYTsgfVxcbiAgICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbCB7XFxuICAgICAgZGlzcGxheTogaW5saW5lLWZsZXg7XFxuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgICAgIGhlaWdodDogMTFweDtcXG4gICAgICB3aWR0aDogMTFweDtcXG4gICAgICBtYXJnaW4tcmlnaHQ6IDVweDtcXG4gICAgICBib3JkZXI6IDFweCBzb2xpZCAjMzMzO1xcbiAgICAgIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gICAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuMSk7XFxuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjsgfVxcbiAgICAgIEBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcXG4gICAgICAgIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sOmhvdmVyIHtcXG4gICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuMik7IH0gfVxcbiAgICAgIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wtY29sbGFwc2Uge1xcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICAgICAgaGVpZ2h0OiA3cHg7XFxuICAgICAgICB3aWR0aDogMXB4O1xcbiAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7IH1cXG4gICAgICAgIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wtY29sbGFwc2U6YWZ0ZXIge1xcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICAgIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgICAgICAgICBsZWZ0OiAtM3B4O1xcbiAgICAgICAgICB0b3A6IDNweDtcXG4gICAgICAgICAgaGVpZ2h0OiAxcHg7XFxuICAgICAgICAgIHdpZHRoOiA3cHg7XFxuICAgICAgICAgIGJhY2tncm91bmQ6ICMzMzM7IH1cXG4gICAgICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbCAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sLWV4cGFuZCB7XFxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgICBoZWlnaHQ6IDdweDtcXG4gICAgICAgIHdpZHRoOiAxcHg7XFxuICAgICAgICBiYWNrZ3JvdW5kOiAjMzMzOyB9XFxuICAgICAgICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbCAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sLWV4cGFuZDphZnRlciB7XFxuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgICAgY29udGVudDogXFxcIlxcXCI7XFxuICAgICAgICAgIGxlZnQ6IC0zcHg7XFxuICAgICAgICAgIHRvcDogM3B4O1xcbiAgICAgICAgICBoZWlnaHQ6IDFweDtcXG4gICAgICAgICAgd2lkdGg6IDdweDtcXG4gICAgICAgICAgYmFja2dyb3VuZDogIzMzMzsgfVxcbiAgICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1yZXNwb25zaXZlLWNvbGxhcHNlLXRvZ2dsZSB7XFxuICAgICAgZGlzcGxheTogaW5saW5lLWZsZXg7XFxuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAgIC1raHRtbC11c2VyLXNlbGVjdDogbm9uZTtcXG4gICAgICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAgIC1vLXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAgIGhlaWdodDogMTVweDtcXG4gICAgICB3aWR0aDogMTVweDtcXG4gICAgICBib3JkZXItcmFkaXVzOiAyMHB4O1xcbiAgICAgIGJhY2tncm91bmQ6ICM2NjY7XFxuICAgICAgY29sb3I6ICNmZmY7XFxuICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICAgICAgZm9udC1zaXplOiAxLjFlbTsgfVxcbiAgICAgIEBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcXG4gICAgICAgIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCAudGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2UtdG9nZ2xlOmhvdmVyIHtcXG4gICAgICAgICAgb3BhY2l0eTogLjc7XFxuICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjsgfSB9XFxuICAgICAgLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItcmVzcG9uc2l2ZS1jb2xsYXBzZS10b2dnbGUub3BlbiAudGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2UtdG9nZ2xlLWNsb3NlIHtcXG4gICAgICAgIGRpc3BsYXk6IGluaXRpYWw7IH1cXG4gICAgICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1yZXNwb25zaXZlLWNvbGxhcHNlLXRvZ2dsZS5vcGVuIC50YWJ1bGF0b3ItcmVzcG9uc2l2ZS1jb2xsYXBzZS10b2dnbGUtb3BlbiB7XFxuICAgICAgICBkaXNwbGF5OiBub25lOyB9XFxuICAgICAgLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItcmVzcG9uc2l2ZS1jb2xsYXBzZS10b2dnbGUgc3ZnIHtcXG4gICAgICAgIHN0cm9rZTogI2ZmZjsgfVxcbiAgICAgIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCAudGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2UtdG9nZ2xlIC50YWJ1bGF0b3ItcmVzcG9uc2l2ZS1jb2xsYXBzZS10b2dnbGUtY2xvc2Uge1xcbiAgICAgICAgZGlzcGxheTogbm9uZTsgfVxcbiAgICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci10cmFmZmljLWxpZ2h0IHtcXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgICAgaGVpZ2h0OiAxNHB4O1xcbiAgICAgIHdpZHRoOiAxNHB4O1xcbiAgICAgIGJvcmRlci1yYWRpdXM6IDE0cHg7IH1cXG4gIC50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1ncm91cCB7XFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjOTk5O1xcbiAgICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjYWFhO1xcbiAgICBib3JkZXItdG9wOiAxcHggc29saWQgIzk5OTtcXG4gICAgcGFkZGluZzogNXB4O1xcbiAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XFxuICAgIGJhY2tncm91bmQ6ICNjY2M7XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgICBtaW4td2lkdGg6IDEwMCU7IH1cXG4gICAgQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xcbiAgICAgIC50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1ncm91cDpob3ZlciB7XFxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMSk7IH0gfVxcbiAgICAudGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItZ3JvdXAudGFidWxhdG9yLWdyb3VwLXZpc2libGUgLnRhYnVsYXRvci1hcnJvdyB7XFxuICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcbiAgICAgIGJvcmRlci1sZWZ0OiA2cHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICAgICAgYm9yZGVyLXJpZ2h0OiA2cHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICAgICAgYm9yZGVyLXRvcDogNnB4IHNvbGlkICM2NjY7XFxuICAgICAgYm9yZGVyLWJvdHRvbTogMDsgfVxcbiAgICAudGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItZ3JvdXAudGFidWxhdG9yLWdyb3VwLWxldmVsLTEge1xcbiAgICAgIHBhZGRpbmctbGVmdDogMzBweDsgfVxcbiAgICAudGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItZ3JvdXAudGFidWxhdG9yLWdyb3VwLWxldmVsLTIge1xcbiAgICAgIHBhZGRpbmctbGVmdDogNTBweDsgfVxcbiAgICAudGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItZ3JvdXAudGFidWxhdG9yLWdyb3VwLWxldmVsLTMge1xcbiAgICAgIHBhZGRpbmctbGVmdDogNzBweDsgfVxcbiAgICAudGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItZ3JvdXAudGFidWxhdG9yLWdyb3VwLWxldmVsLTQge1xcbiAgICAgIHBhZGRpbmctbGVmdDogOTBweDsgfVxcbiAgICAudGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItZ3JvdXAudGFidWxhdG9yLWdyb3VwLWxldmVsLTUge1xcbiAgICAgIHBhZGRpbmctbGVmdDogMTEwcHg7IH1cXG4gICAgLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLWdyb3VwIC50YWJ1bGF0b3ItZ3JvdXAtdG9nZ2xlIHtcXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IH1cXG4gICAgLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLWdyb3VwIC50YWJ1bGF0b3ItYXJyb3cge1xcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgICB3aWR0aDogMDtcXG4gICAgICBoZWlnaHQ6IDA7XFxuICAgICAgbWFyZ2luLXJpZ2h0OiAxNnB4O1xcbiAgICAgIGJvcmRlci10b3A6IDZweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gICAgICBib3JkZXItYm90dG9tOiA2cHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICAgICAgYm9yZGVyLXJpZ2h0OiAwO1xcbiAgICAgIGJvcmRlci1sZWZ0OiA2cHggc29saWQgIzY2NjtcXG4gICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOyB9XFxuICAgIC50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1ncm91cCBzcGFuIHtcXG4gICAgICBtYXJnaW4tbGVmdDogMTBweDtcXG4gICAgICBjb2xvcjogI2QwMDsgfVxcblxcbi50YWJ1bGF0b3ItcG9wdXAtY29udGFpbmVyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBiYWNrZ3JvdW5kOiAjZmZmO1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2FhYTtcXG4gIGJveC1zaGFkb3c6IDAgMCA1cHggMCByZ2JhKDAsIDAsIDAsIDAuMik7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBvdmVyZmxvdy15OiBhdXRvO1xcbiAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoO1xcbiAgei1pbmRleDogMTAwMDA7IH1cXG5cXG4udGFidWxhdG9yLXBvcHVwIHtcXG4gIHBhZGRpbmc6IDVweDtcXG4gIGJvcmRlci1yYWRpdXM6IDNweDsgfVxcblxcbi50YWJ1bGF0b3ItdG9vbHRpcCB7XFxuICBtYXgtd2lkdGg6IE1pbig1MDBweCwgMTAwJSk7XFxuICBwYWRkaW5nOiAzcHggNXB4O1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgYm94LXNoYWRvdzogbm9uZTtcXG4gIGZvbnQtc2l6ZTogMTJweDtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lOyB9XFxuXFxuLnRhYnVsYXRvci1tZW51IC50YWJ1bGF0b3ItbWVudS1pdGVtIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBwYWRkaW5nOiA1cHggMTBweDtcXG4gIHVzZXItc2VsZWN0OiBub25lOyB9XFxuICAudGFidWxhdG9yLW1lbnUgLnRhYnVsYXRvci1tZW51LWl0ZW0udGFidWxhdG9yLW1lbnUtaXRlbS1kaXNhYmxlZCB7XFxuICAgIG9wYWNpdHk6IC41OyB9XFxuICBAbWVkaWEgKGhvdmVyOiBob3ZlcikgYW5kIChwb2ludGVyOiBmaW5lKSB7XFxuICAgIC50YWJ1bGF0b3ItbWVudSAudGFidWxhdG9yLW1lbnUtaXRlbTpub3QoLnRhYnVsYXRvci1tZW51LWl0ZW0tZGlzYWJsZWQpOmhvdmVyIHtcXG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgYmFja2dyb3VuZDogI0VGRUZFRjsgfSB9XFxuICAudGFidWxhdG9yLW1lbnUgLnRhYnVsYXRvci1tZW51LWl0ZW0udGFidWxhdG9yLW1lbnUtaXRlbS1zdWJtZW51IHtcXG4gICAgcGFkZGluZy1yaWdodDogMjVweDsgfVxcbiAgICAudGFidWxhdG9yLW1lbnUgLnRhYnVsYXRvci1tZW51LWl0ZW0udGFidWxhdG9yLW1lbnUtaXRlbS1zdWJtZW51OjphZnRlciB7XFxuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICB0b3A6IGNhbGMoNXB4ICsgLjRlbSk7XFxuICAgICAgcmlnaHQ6IDEwcHg7XFxuICAgICAgaGVpZ2h0OiA3cHg7XFxuICAgICAgd2lkdGg6IDdweDtcXG4gICAgICBjb250ZW50OiAnJztcXG4gICAgICBib3JkZXItd2lkdGg6IDFweCAxcHggMCAwO1xcbiAgICAgIGJvcmRlci1zdHlsZTogc29saWQ7XFxuICAgICAgYm9yZGVyLWNvbG9yOiAjYWFhO1xcbiAgICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7XFxuICAgICAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpOyB9XFxuXFxuLnRhYnVsYXRvci1tZW51IC50YWJ1bGF0b3ItbWVudS1zZXBhcmF0b3Ige1xcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNhYWE7IH1cXG5cXG4udGFidWxhdG9yLWVkaXQtbGlzdCB7XFxuICBtYXgtaGVpZ2h0OiAyMDBweDtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIG92ZXJmbG93LXk6IGF1dG87XFxuICAtd2Via2l0LW92ZXJmbG93LXNjcm9sbGluZzogdG91Y2g7IH1cXG4gIC50YWJ1bGF0b3ItZWRpdC1saXN0IC50YWJ1bGF0b3ItZWRpdC1saXN0LWl0ZW0ge1xcbiAgICBwYWRkaW5nOiA0cHg7XFxuICAgIGNvbG9yOiAjMzMzO1xcbiAgICBvdXRsaW5lOiBub25lOyB9XFxuICAgIC50YWJ1bGF0b3ItZWRpdC1saXN0IC50YWJ1bGF0b3ItZWRpdC1saXN0LWl0ZW0uYWN0aXZlIHtcXG4gICAgICBjb2xvcjogI2ZmZjtcXG4gICAgICBiYWNrZ3JvdW5kOiAjMUQ2OENEOyB9XFxuICAgICAgLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtaXRlbS5hY3RpdmUuZm9jdXNlZCB7XFxuICAgICAgICBvdXRsaW5lOiAxcHggc29saWQgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpOyB9XFxuICAgIC50YWJ1bGF0b3ItZWRpdC1saXN0IC50YWJ1bGF0b3ItZWRpdC1saXN0LWl0ZW0uZm9jdXNlZCB7XFxuICAgICAgb3V0bGluZTogMXB4IHNvbGlkICMxRDY4Q0Q7IH1cXG4gICAgQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xcbiAgICAgIC50YWJ1bGF0b3ItZWRpdC1saXN0IC50YWJ1bGF0b3ItZWRpdC1saXN0LWl0ZW06aG92ZXIge1xcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICAgICAgY29sb3I6ICNmZmY7XFxuICAgICAgICBiYWNrZ3JvdW5kOiAjMUQ2OENEOyB9IH1cXG4gIC50YWJ1bGF0b3ItZWRpdC1saXN0IC50YWJ1bGF0b3ItZWRpdC1saXN0LXBsYWNlaG9sZGVyIHtcXG4gICAgcGFkZGluZzogNHB4O1xcbiAgICBjb2xvcjogIzMzMztcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyOyB9XFxuICAudGFidWxhdG9yLWVkaXQtbGlzdCAudGFidWxhdG9yLWVkaXQtbGlzdC1ncm91cCB7XFxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjYWFhO1xcbiAgICBwYWRkaW5nOiA0cHg7XFxuICAgIHBhZGRpbmctdG9wOiA2cHg7XFxuICAgIGNvbG9yOiAjMzMzO1xcbiAgICBmb250LXdlaWdodDogYm9sZDsgfVxcbiAgLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtaXRlbS50YWJ1bGF0b3ItZWRpdC1saXN0LWdyb3VwLWxldmVsLTIsIC50YWJ1bGF0b3ItZWRpdC1saXN0IC50YWJ1bGF0b3ItZWRpdC1saXN0LWdyb3VwLnRhYnVsYXRvci1lZGl0LWxpc3QtZ3JvdXAtbGV2ZWwtMiB7XFxuICAgIHBhZGRpbmctbGVmdDogMTJweDsgfVxcbiAgLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtaXRlbS50YWJ1bGF0b3ItZWRpdC1saXN0LWdyb3VwLWxldmVsLTMsIC50YWJ1bGF0b3ItZWRpdC1saXN0IC50YWJ1bGF0b3ItZWRpdC1saXN0LWdyb3VwLnRhYnVsYXRvci1lZGl0LWxpc3QtZ3JvdXAtbGV2ZWwtMyB7XFxuICAgIHBhZGRpbmctbGVmdDogMjBweDsgfVxcbiAgLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtaXRlbS50YWJ1bGF0b3ItZWRpdC1saXN0LWdyb3VwLWxldmVsLTQsIC50YWJ1bGF0b3ItZWRpdC1saXN0IC50YWJ1bGF0b3ItZWRpdC1saXN0LWdyb3VwLnRhYnVsYXRvci1lZGl0LWxpc3QtZ3JvdXAtbGV2ZWwtNCB7XFxuICAgIHBhZGRpbmctbGVmdDogMjhweDsgfVxcbiAgLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtaXRlbS50YWJ1bGF0b3ItZWRpdC1saXN0LWdyb3VwLWxldmVsLTUsIC50YWJ1bGF0b3ItZWRpdC1saXN0IC50YWJ1bGF0b3ItZWRpdC1saXN0LWdyb3VwLnRhYnVsYXRvci1lZGl0LWxpc3QtZ3JvdXAtbGV2ZWwtNSB7XFxuICAgIHBhZGRpbmctbGVmdDogMzZweDsgfVxcblxcbi50YWJ1bGF0b3IudGFidWxhdG9yLWx0ciB7XFxuICBkaXJlY3Rpb246IGx0cjsgfVxcblxcbi50YWJ1bGF0b3IudGFidWxhdG9yLXJ0bCB7XFxuICB0ZXh0LWFsaWduOiBpbml0aWFsO1xcbiAgZGlyZWN0aW9uOiBydGw7IH1cXG4gIC50YWJ1bGF0b3IudGFidWxhdG9yLXJ0bCAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbCB7XFxuICAgIHRleHQtYWxpZ246IGluaXRpYWw7XFxuICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI2FhYTtcXG4gICAgYm9yZGVyLXJpZ2h0OiBpbml0aWFsOyB9XFxuICAgIC50YWJ1bGF0b3IudGFidWxhdG9yLXJ0bCAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3ItY29sLWdyb3VwIC50YWJ1bGF0b3ItY29sLWdyb3VwLWNvbHMge1xcbiAgICAgIG1hcmdpbi1yaWdodDogaW5pdGlhbDtcXG4gICAgICBtYXJnaW4tbGVmdDogLTFweDsgfVxcbiAgICAudGFidWxhdG9yLnRhYnVsYXRvci1ydGwgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlIC50YWJ1bGF0b3ItY29sLXRpdGxlIHtcXG4gICAgICBwYWRkaW5nLXJpZ2h0OiAwO1xcbiAgICAgIHBhZGRpbmctbGVmdDogMjVweDsgfVxcbiAgICAudGFidWxhdG9yLnRhYnVsYXRvci1ydGwgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC1zb3J0ZXIge1xcbiAgICAgIGxlZnQ6IDhweDtcXG4gICAgICByaWdodDogaW5pdGlhbDsgfVxcbiAgLnRhYnVsYXRvci50YWJ1bGF0b3ItcnRsIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCB7XFxuICAgIGJvcmRlci1yaWdodDogaW5pdGlhbDtcXG4gICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjYWFhOyB9XFxuICAgIC50YWJ1bGF0b3IudGFidWxhdG9yLXJ0bCAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtYnJhbmNoIHtcXG4gICAgICBtYXJnaW4tcmlnaHQ6IGluaXRpYWw7XFxuICAgICAgbWFyZ2luLWxlZnQ6IDVweDtcXG4gICAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiBpbml0aWFsO1xcbiAgICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAxcHg7XFxuICAgICAgYm9yZGVyLWxlZnQ6IGluaXRpYWw7XFxuICAgICAgYm9yZGVyLXJpZ2h0OiAycHggc29saWQgI2FhYTsgfVxcbiAgICAudGFidWxhdG9yLnRhYnVsYXRvci1ydGwgLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wge1xcbiAgICAgIG1hcmdpbi1yaWdodDogaW5pdGlhbDtcXG4gICAgICBtYXJnaW4tbGVmdDogNXB4OyB9XFxuICAgIC50YWJ1bGF0b3IudGFidWxhdG9yLXJ0bCAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwudGFidWxhdG9yLWZyb3plbi50YWJ1bGF0b3ItZnJvemVuLWxlZnQge1xcbiAgICAgIGJvcmRlci1sZWZ0OiAycHggc29saWQgI2FhYTsgfVxcbiAgICAudGFidWxhdG9yLnRhYnVsYXRvci1ydGwgLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsLnRhYnVsYXRvci1mcm96ZW4udGFidWxhdG9yLWZyb3plbi1yaWdodCB7XFxuICAgICAgYm9yZGVyLXJpZ2h0OiAycHggc29saWQgI2FhYTsgfVxcbiAgLnRhYnVsYXRvci50YWJ1bGF0b3ItcnRsIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY29sLXJlc2l6ZS1oYW5kbGU6bGFzdC1vZi10eXBlIHtcXG4gICAgd2lkdGg6IDNweDtcXG4gICAgbWFyZ2luLWxlZnQ6IDA7XFxuICAgIG1hcmdpbi1yaWdodDogLTNweDsgfVxcbiAgLnRhYnVsYXRvci50YWJ1bGF0b3ItcnRsIC50YWJ1bGF0b3ItZm9vdGVyIC50YWJ1bGF0b3ItY2FsY3MtaG9sZGVyIHtcXG4gICAgdGV4dC1hbGlnbjogaW5pdGlhbDsgfVxcblxcbi50YWJ1bGF0b3ItcHJpbnQtZnVsbHNjcmVlbiB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiAwO1xcbiAgcmlnaHQ6IDA7XFxuICB6LWluZGV4OiAxMDAwMDsgfVxcblxcbmJvZHkudGFidWxhdG9yLXByaW50LWZ1bGxzY3JlZW4taGlkZSA+ICo6bm90KC50YWJ1bGF0b3ItcHJpbnQtZnVsbHNjcmVlbikge1xcbiAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50OyB9XFxuXFxuLnRhYnVsYXRvci1wcmludC10YWJsZSB7XFxuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlOyB9XFxuICAudGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItZGF0YS10cmVlLWJyYW5jaCB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG4gICAgaGVpZ2h0OiA5cHg7XFxuICAgIHdpZHRoOiA3cHg7XFxuICAgIG1hcmdpbi10b3A6IC05cHg7XFxuICAgIG1hcmdpbi1yaWdodDogNXB4O1xcbiAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAxcHg7XFxuICAgIGJvcmRlci1sZWZ0OiAycHggc29saWQgI2FhYTtcXG4gICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICNhYWE7IH1cXG4gIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1wcmludC10YWJsZS1ncm91cCB7XFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjOTk5O1xcbiAgICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjYWFhO1xcbiAgICBib3JkZXItdG9wOiAxcHggc29saWQgIzk5OTtcXG4gICAgcGFkZGluZzogNXB4O1xcbiAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XFxuICAgIGJhY2tncm91bmQ6ICNjY2M7XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgICBtaW4td2lkdGg6IDEwMCU7IH1cXG4gICAgQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xcbiAgICAgIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1wcmludC10YWJsZS1ncm91cDpob3ZlciB7XFxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMSk7IH0gfVxcbiAgICAudGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUtZ3JvdXAudGFidWxhdG9yLWdyb3VwLXZpc2libGUgLnRhYnVsYXRvci1hcnJvdyB7XFxuICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcbiAgICAgIGJvcmRlci1sZWZ0OiA2cHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICAgICAgYm9yZGVyLXJpZ2h0OiA2cHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICAgICAgYm9yZGVyLXRvcDogNnB4IHNvbGlkICM2NjY7XFxuICAgICAgYm9yZGVyLWJvdHRvbTogMDsgfVxcbiAgICAudGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUtZ3JvdXAudGFidWxhdG9yLWdyb3VwLWxldmVsLTEgdGQge1xcbiAgICAgIHBhZGRpbmctbGVmdDogMzBweCAhaW1wb3J0YW50OyB9XFxuICAgIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1wcmludC10YWJsZS1ncm91cC50YWJ1bGF0b3ItZ3JvdXAtbGV2ZWwtMiB0ZCB7XFxuICAgICAgcGFkZGluZy1sZWZ0OiA1MHB4ICFpbXBvcnRhbnQ7IH1cXG4gICAgLnRhYnVsYXRvci1wcmludC10YWJsZSAudGFidWxhdG9yLXByaW50LXRhYmxlLWdyb3VwLnRhYnVsYXRvci1ncm91cC1sZXZlbC0zIHRkIHtcXG4gICAgICBwYWRkaW5nLWxlZnQ6IDcwcHggIWltcG9ydGFudDsgfVxcbiAgICAudGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUtZ3JvdXAudGFidWxhdG9yLWdyb3VwLWxldmVsLTQgdGQge1xcbiAgICAgIHBhZGRpbmctbGVmdDogOTBweCAhaW1wb3J0YW50OyB9XFxuICAgIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1wcmludC10YWJsZS1ncm91cC50YWJ1bGF0b3ItZ3JvdXAtbGV2ZWwtNSB0ZCB7XFxuICAgICAgcGFkZGluZy1sZWZ0OiAxMTBweCAhaW1wb3J0YW50OyB9XFxuICAgIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1wcmludC10YWJsZS1ncm91cCAudGFidWxhdG9yLWdyb3VwLXRvZ2dsZSB7XFxuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOyB9XFxuICAgIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1wcmludC10YWJsZS1ncm91cCAudGFidWxhdG9yLWFycm93IHtcXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgICAgd2lkdGg6IDA7XFxuICAgICAgaGVpZ2h0OiAwO1xcbiAgICAgIG1hcmdpbi1yaWdodDogMTZweDtcXG4gICAgICBib3JkZXItdG9wOiA2cHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICAgICAgYm9yZGVyLWJvdHRvbTogNnB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgICAgIGJvcmRlci1yaWdodDogMDtcXG4gICAgICBib3JkZXItbGVmdDogNnB4IHNvbGlkICM2NjY7XFxuICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsgfVxcbiAgICAudGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUtZ3JvdXAgc3BhbiB7XFxuICAgICAgbWFyZ2luLWxlZnQ6IDEwcHg7XFxuICAgICAgY29sb3I6ICNkMDA7IH1cXG4gIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbCB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG4gICAgaGVpZ2h0OiAxMXB4O1xcbiAgICB3aWR0aDogMTFweDtcXG4gICAgbWFyZ2luLXJpZ2h0OiA1cHg7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICMzMzM7XFxuICAgIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gICAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjEpO1xcbiAgICBvdmVyZmxvdzogaGlkZGVuOyB9XFxuICAgIEBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcXG4gICAgICAudGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2w6aG92ZXIge1xcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICAgICAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjIpOyB9IH1cXG4gICAgLnRhYnVsYXRvci1wcmludC10YWJsZSAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wtY29sbGFwc2Uge1xcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgaGVpZ2h0OiA3cHg7XFxuICAgICAgd2lkdGg6IDFweDtcXG4gICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsgfVxcbiAgICAgIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbCAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sLWNvbGxhcHNlOmFmdGVyIHtcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgICAgICAgbGVmdDogLTNweDtcXG4gICAgICAgIHRvcDogM3B4O1xcbiAgICAgICAgaGVpZ2h0OiAxcHg7XFxuICAgICAgICB3aWR0aDogN3B4O1xcbiAgICAgICAgYmFja2dyb3VuZDogIzMzMzsgfVxcbiAgICAudGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbC1leHBhbmQge1xcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgaGVpZ2h0OiA3cHg7XFxuICAgICAgd2lkdGg6IDFweDtcXG4gICAgICBiYWNrZ3JvdW5kOiAjMzMzOyB9XFxuICAgICAgLnRhYnVsYXRvci1wcmludC10YWJsZSAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wtZXhwYW5kOmFmdGVyIHtcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgICAgICAgbGVmdDogLTNweDtcXG4gICAgICAgIHRvcDogM3B4O1xcbiAgICAgICAgaGVpZ2h0OiAxcHg7XFxuICAgICAgICB3aWR0aDogN3B4O1xcbiAgICAgICAgYmFja2dyb3VuZDogIzMzMzsgfVxcblwiLFwiLnRhYnVsYXRvciB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjOTk5O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzg4ODtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XFxuICAtbW96LXRyYW5zZm9ybTogdHJhbnNsYXRlWigwKTtcXG4gIC1tcy10cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XFxuICAtby10cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XFxufVxcblxcbi50YWJ1bGF0b3JbdGFidWxhdG9yLWxheW91dD1cXFwiZml0RGF0YUZpbGxcXFwiXSAudGFidWxhdG9yLXRhYmxlaG9sZGVyIC50YWJ1bGF0b3ItdGFibGUge1xcbiAgbWluLXdpZHRoOiAxMDAlO1xcbn1cXG5cXG4udGFidWxhdG9yW3RhYnVsYXRvci1sYXlvdXQ9XFxcImZpdERhdGFUYWJsZVxcXCJdIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG59XFxuXFxuLnRhYnVsYXRvci50YWJ1bGF0b3ItYmxvY2stc2VsZWN0IHtcXG4gIHVzZXItc2VsZWN0OiBub25lO1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjOTk5O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U2ZTZlNjtcXG4gIGNvbG9yOiAjNTU1O1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAta2h0bWwtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcbiAgLW8tdXNlci1zZWxlY3Q6IG5vbmU7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIudGFidWxhdG9yLWhlYWRlci1oaWRkZW4ge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWhlYWRlci1jb250ZW50cyB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItaGVhZGVyLWNvbnRlbnRzIC50YWJ1bGF0b3ItaGVhZGVycyB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wge1xcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXG4gIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNhYWE7XFxuICBiYWNrZ3JvdW5kOiAjZTZlNmU2O1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG4gIHZlcnRpY2FsLWFsaWduOiBib3R0b207XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1tb3Zpbmcge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgYm9yZGVyOiAxcHggc29saWQgIzk5OTtcXG4gIGJhY2tncm91bmQ6ICNjZGNkY2Q7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbCAudGFidWxhdG9yLWNvbC1jb250ZW50IHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBwYWRkaW5nOiA0cHg7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWhlYWRlci1wb3B1cC1idXR0b24ge1xcbiAgcGFkZGluZzogMCA4cHg7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWhlYWRlci1wb3B1cC1idXR0b246aG92ZXIge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgb3BhY2l0eTogLjY7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC10aXRsZS1ob2xkZXIge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtdGl0bGUge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXG4gIHZlcnRpY2FsLWFsaWduOiBib3R0b207XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC10aXRsZS50YWJ1bGF0b3ItY29sLXRpdGxlLXdyYXAge1xcbiAgd2hpdGUtc3BhY2U6IG5vcm1hbDtcXG4gIHRleHQtb3ZlcmZsb3c6IGluaXRpYWw7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC10aXRsZSAudGFidWxhdG9yLXRpdGxlLWVkaXRvciB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgd2lkdGg6IDEwMCU7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjOTk5O1xcbiAgcGFkZGluZzogMXB4O1xcbiAgYmFja2dyb3VuZDogI2ZmZjtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbCAudGFidWxhdG9yLWNvbC1jb250ZW50IC50YWJ1bGF0b3ItY29sLXRpdGxlIC50YWJ1bGF0b3ItaGVhZGVyLXBvcHVwLWJ1dHRvbiArIC50YWJ1bGF0b3ItdGl0bGUtZWRpdG9yIHtcXG4gIHdpZHRoOiBjYWxjKDEwMCUgLSAyMnB4KTtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbCAudGFidWxhdG9yLWNvbC1jb250ZW50IC50YWJ1bGF0b3ItY29sLXNvcnRlciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIHJpZ2h0OiA0cHg7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC1zb3J0ZXIgLnRhYnVsYXRvci1hcnJvdyB7XFxuICB3aWR0aDogMDtcXG4gIGhlaWdodDogMDtcXG4gIGJvcmRlci1sZWZ0OiA2cHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItcmlnaHQ6IDZweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1ib3R0b206IDZweCBzb2xpZCAjYmJiO1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1jb2wtZ3JvdXAgLnRhYnVsYXRvci1jb2wtZ3JvdXAtY29scyB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNhYWE7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgbWFyZ2luLXJpZ2h0OiAtMXB4O1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sIC50YWJ1bGF0b3ItaGVhZGVyLWZpbHRlciB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgbWFyZ2luLXRvcDogMnB4O1xcbiAgd2lkdGg6IDEwMCU7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1oZWFkZXItZmlsdGVyIHRleHRhcmVhIHtcXG4gIGhlaWdodDogYXV0byAhaW1wb3J0YW50O1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sIC50YWJ1bGF0b3ItaGVhZGVyLWZpbHRlciBzdmcge1xcbiAgbWFyZ2luLXRvcDogM3B4O1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sIC50YWJ1bGF0b3ItaGVhZGVyLWZpbHRlciBpbnB1dDo6LW1zLWNsZWFyIHtcXG4gIHdpZHRoOiAwO1xcbiAgaGVpZ2h0OiAwO1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1zb3J0YWJsZSAudGFidWxhdG9yLWNvbC10aXRsZSB7XFxuICBwYWRkaW5nLXJpZ2h0OiAyNXB4O1xcbn1cXG5cXG5AbWVkaWEgKGhvdmVyOiBob3ZlcikgYW5kIChwb2ludGVyOiBmaW5lKSB7XFxuICAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1zb3J0YWJsZS50YWJ1bGF0b3ItY29sLXNvcnRlci1lbGVtZW50OmhvdmVyIHtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjY2RjZGNkO1xcbiAgfVxcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1zb3J0YWJsZVthcmlhLXNvcnQ9XFxcIm5vbmVcXFwiXSAudGFidWxhdG9yLWNvbC1jb250ZW50IC50YWJ1bGF0b3ItY29sLXNvcnRlciB7XFxuICBjb2xvcjogI2JiYjtcXG59XFxuXFxuQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xcbiAgLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3Itc29ydGFibGVbYXJpYS1zb3J0PVxcXCJub25lXFxcIl0gLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC1zb3J0ZXIudGFidWxhdG9yLWNvbC1zb3J0ZXItZWxlbWVudCAudGFidWxhdG9yLWFycm93OmhvdmVyIHtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICBib3JkZXItYm90dG9tOiA2cHggc29saWQgIzU1NTtcXG4gIH1cXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3Itc29ydGFibGVbYXJpYS1zb3J0PVxcXCJub25lXFxcIl0gLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC1zb3J0ZXIgLnRhYnVsYXRvci1hcnJvdyB7XFxuICBib3JkZXItdG9wOiBub25lO1xcbiAgYm9yZGVyLWJvdHRvbTogNnB4IHNvbGlkICNiYmI7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlW2FyaWEtc29ydD1cXFwiYXNjZW5kaW5nXFxcIl0gLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC1zb3J0ZXIge1xcbiAgY29sb3I6ICM2NjY7XFxufVxcblxcbkBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcXG4gIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlW2FyaWEtc29ydD1cXFwiYXNjZW5kaW5nXFxcIl0gLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC1zb3J0ZXIudGFidWxhdG9yLWNvbC1zb3J0ZXItZWxlbWVudCAudGFidWxhdG9yLWFycm93OmhvdmVyIHtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICBib3JkZXItYm90dG9tOiA2cHggc29saWQgIzU1NTtcXG4gIH1cXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3Itc29ydGFibGVbYXJpYS1zb3J0PVxcXCJhc2NlbmRpbmdcXFwiXSAudGFidWxhdG9yLWNvbC1jb250ZW50IC50YWJ1bGF0b3ItY29sLXNvcnRlciAudGFidWxhdG9yLWFycm93IHtcXG4gIGJvcmRlci10b3A6IG5vbmU7XFxuICBib3JkZXItYm90dG9tOiA2cHggc29saWQgIzY2NjtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3Itc29ydGFibGVbYXJpYS1zb3J0PVxcXCJkZXNjZW5kaW5nXFxcIl0gLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC1zb3J0ZXIge1xcbiAgY29sb3I6ICM2NjY7XFxufVxcblxcbkBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcXG4gIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlW2FyaWEtc29ydD1cXFwiZGVzY2VuZGluZ1xcXCJdIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtc29ydGVyLnRhYnVsYXRvci1jb2wtc29ydGVyLWVsZW1lbnQgLnRhYnVsYXRvci1hcnJvdzpob3ZlciB7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgYm9yZGVyLXRvcDogNnB4IHNvbGlkICM1NTU7XFxuICB9XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlW2FyaWEtc29ydD1cXFwiZGVzY2VuZGluZ1xcXCJdIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtc29ydGVyIC50YWJ1bGF0b3ItYXJyb3cge1xcbiAgYm9yZGVyLWJvdHRvbTogbm9uZTtcXG4gIGJvcmRlci10b3A6IDZweCBzb2xpZCAjNjY2O1xcbiAgY29sb3I6ICM2NjY7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLWNvbC12ZXJ0aWNhbCAudGFidWxhdG9yLWNvbC1jb250ZW50IC50YWJ1bGF0b3ItY29sLXRpdGxlIHtcXG4gIHdyaXRpbmctbW9kZTogdmVydGljYWwtcmw7XFxuICB0ZXh0LW9yaWVudGF0aW9uOiBtaXhlZDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLWNvbC12ZXJ0aWNhbC50YWJ1bGF0b3ItY29sLXZlcnRpY2FsLWZsaXAgLnRhYnVsYXRvci1jb2wtdGl0bGUge1xcbiAgdHJhbnNmb3JtOiByb3RhdGUoMTgwZGVnKTtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3ItY29sLXZlcnRpY2FsLnRhYnVsYXRvci1zb3J0YWJsZSAudGFidWxhdG9yLWNvbC10aXRsZSB7XFxuICBwYWRkaW5nLXJpZ2h0OiAwO1xcbiAgcGFkZGluZy10b3A6IDIwcHg7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLWNvbC12ZXJ0aWNhbC50YWJ1bGF0b3Itc29ydGFibGUudGFidWxhdG9yLWNvbC12ZXJ0aWNhbC1mbGlwIC50YWJ1bGF0b3ItY29sLXRpdGxlIHtcXG4gIHBhZGRpbmctcmlnaHQ6IDA7XFxuICBwYWRkaW5nLWJvdHRvbTogMjBweDtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3ItY29sLXZlcnRpY2FsLnRhYnVsYXRvci1zb3J0YWJsZSAudGFidWxhdG9yLWNvbC1zb3J0ZXIge1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBsZWZ0OiAwO1xcbiAgcmlnaHQ6IDA7XFxuICB0b3A6IDRweDtcXG4gIGJvdHRvbTogYXV0bztcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWZyb3plbiB7XFxuICBwb3NpdGlvbjogc3RpY2t5O1xcbiAgbGVmdDogMDtcXG4gIHotaW5kZXg6IDExO1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItZnJvemVuLnRhYnVsYXRvci1mcm96ZW4tbGVmdCB7XFxuICBib3JkZXItcmlnaHQ6IDJweCBzb2xpZCAjYWFhO1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItZnJvemVuLnRhYnVsYXRvci1mcm96ZW4tcmlnaHQge1xcbiAgYm9yZGVyLWxlZnQ6IDJweCBzb2xpZCAjYWFhO1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY2FsY3MtaG9sZGVyIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBiYWNrZ3JvdW5kOiAjZjNmM2YzICFpbXBvcnRhbnQ7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgI2FhYTtcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjYWFhO1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY2FsY3MtaG9sZGVyIC50YWJ1bGF0b3Itcm93IHtcXG4gIGJhY2tncm91bmQ6ICNmM2YzZjMgIWltcG9ydGFudDtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNhbGNzLWhvbGRlciAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNvbC1yZXNpemUtaGFuZGxlIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1mcm96ZW4tcm93cy1ob2xkZXI6ZW1wdHkge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLXRhYmxlaG9sZGVyIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIG92ZXJmbG93OiBhdXRvO1xcbiAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoO1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItdGFibGVob2xkZXI6Zm9jdXMge1xcbiAgb3V0bGluZTogbm9uZTtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLXRhYmxlaG9sZGVyIC50YWJ1bGF0b3ItcGxhY2Vob2xkZXIge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLXRhYmxlaG9sZGVyIC50YWJ1bGF0b3ItcGxhY2Vob2xkZXJbdGFidWxhdG9yLXJlbmRlci1tb2RlPVxcXCJ2aXJ0dWFsXFxcIl0ge1xcbiAgbWluLWhlaWdodDogMTAwJTtcXG4gIG1pbi13aWR0aDogMTAwJTtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLXRhYmxlaG9sZGVyIC50YWJ1bGF0b3ItcGxhY2Vob2xkZXIgLnRhYnVsYXRvci1wbGFjZWhvbGRlci1jb250ZW50cyB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBwYWRkaW5nOiAxMHB4O1xcbiAgY29sb3I6ICNjY2M7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIGZvbnQtc2l6ZTogMjBweDtcXG4gIHdoaXRlLXNwYWNlOiBub3JtYWw7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci10YWJsZWhvbGRlciAudGFidWxhdG9yLXRhYmxlIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgb3ZlcmZsb3c6IHZpc2libGU7XFxuICBjb2xvcjogIzMzMztcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLXRhYmxlaG9sZGVyIC50YWJ1bGF0b3ItdGFibGUgLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLWNhbGNzIHtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgYmFja2dyb3VuZDogI2UyZTJlMiAhaW1wb3J0YW50O1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItdGFibGVob2xkZXIgLnRhYnVsYXRvci10YWJsZSAudGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItY2FsY3MudGFidWxhdG9yLWNhbGNzLXRvcCB7XFxuICBib3JkZXItYm90dG9tOiAycHggc29saWQgI2FhYTtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLXRhYmxlaG9sZGVyIC50YWJ1bGF0b3ItdGFibGUgLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLWNhbGNzLnRhYnVsYXRvci1jYWxjcy1ib3R0b20ge1xcbiAgYm9yZGVyLXRvcDogMnB4IHNvbGlkICNhYWE7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIge1xcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICM5OTk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTZlNmU2O1xcbiAgY29sb3I6ICM1NTU7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICB1c2VyLXNlbGVjdDogbm9uZTtcXG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAta2h0bWwtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcbiAgLW8tdXNlci1zZWxlY3Q6IG5vbmU7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1mb290ZXItY29udGVudHMge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgcGFkZGluZzogNXB4IDEwcHg7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1mb290ZXItY29udGVudHM6ZW1wdHkge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWZvb3RlciAudGFidWxhdG9yLWNhbGNzLWhvbGRlciB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgd2lkdGg6IDEwMCU7XFxuICB0ZXh0LWFsaWduOiBsZWZ0O1xcbiAgYmFja2dyb3VuZDogI2YzZjNmMyAhaW1wb3J0YW50O1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNhYWE7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgI2FhYTtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1jYWxjcy1ob2xkZXIgLnRhYnVsYXRvci1yb3cge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgYmFja2dyb3VuZDogI2YzZjNmMyAhaW1wb3J0YW50O1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyIC50YWJ1bGF0b3ItY2FsY3MtaG9sZGVyIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY29sLXJlc2l6ZS1oYW5kbGUge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWZvb3RlciAudGFidWxhdG9yLWNhbGNzLWhvbGRlcjpvbmx5LWNoaWxkIHtcXG4gIG1hcmdpbi1ib3R0b206IC01cHg7XFxuICBib3JkZXItYm90dG9tOiBub25lO1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyID4gKiArIC50YWJ1bGF0b3ItcGFnZS1jb3VudGVyIHtcXG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyIC50YWJ1bGF0b3ItcGFnZS1jb3VudGVyIHtcXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1wYWdpbmF0b3Ige1xcbiAgZmxleDogMTtcXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xcbiAgY29sb3I6ICM1NTU7XFxuICBmb250LWZhbWlseTogaW5oZXJpdDtcXG4gIGZvbnQtd2VpZ2h0OiBpbmhlcml0O1xcbiAgZm9udC1zaXplOiBpbmhlcml0O1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyIC50YWJ1bGF0b3ItcGFnZS1zaXplIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIG1hcmdpbjogMCA1cHg7XFxuICBwYWRkaW5nOiAycHggNXB4O1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2FhYTtcXG4gIGJvcmRlci1yYWRpdXM6IDNweDtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWZvb3RlciAudGFidWxhdG9yLXBhZ2VzIHtcXG4gIG1hcmdpbjogMCA3cHg7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1wYWdlIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIG1hcmdpbjogMCAycHg7XFxuICBwYWRkaW5nOiAycHggNXB4O1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2FhYTtcXG4gIGJvcmRlci1yYWRpdXM6IDNweDtcXG4gIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWZvb3RlciAudGFidWxhdG9yLXBhZ2UuYWN0aXZlIHtcXG4gIGNvbG9yOiAjZDAwO1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyIC50YWJ1bGF0b3ItcGFnZTpkaXNhYmxlZCB7XFxuICBvcGFjaXR5OiAuNTtcXG59XFxuXFxuQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xcbiAgLnRhYnVsYXRvciAudGFidWxhdG9yLWZvb3RlciAudGFidWxhdG9yLXBhZ2U6bm90KC5kaXNhYmxlZCk6aG92ZXIge1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC4yKTtcXG4gICAgY29sb3I6ICNmZmY7XFxuICB9XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1jb2wtcmVzaXplLWhhbmRsZSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB3aWR0aDogNnB4O1xcbiAgbWFyZ2luLWxlZnQ6IC0zcHg7XFxuICBtYXJnaW4tcmlnaHQ6IC0zcHg7XFxuICB6LWluZGV4OiAxMDtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxufVxcblxcbkBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcXG4gIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1jb2wtcmVzaXplLWhhbmRsZTpob3ZlciB7XFxuICAgIGN1cnNvcjogZXctcmVzaXplO1xcbiAgfVxcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItY29sLXJlc2l6ZS1oYW5kbGU6bGFzdC1vZi10eXBlIHtcXG4gIHdpZHRoOiAzcHg7XFxuICBtYXJnaW4tcmlnaHQ6IDA7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1hbGVydCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICB6LWluZGV4OiAxMDA7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC40KTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWFsZXJ0IC50YWJ1bGF0b3ItYWxlcnQtbXNnIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIG1hcmdpbjogMCBhdXRvO1xcbiAgcGFkZGluZzogMTBweCAyMHB4O1xcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gIGJhY2tncm91bmQ6ICNmZmY7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWFsZXJ0IC50YWJ1bGF0b3ItYWxlcnQtbXNnLnRhYnVsYXRvci1hbGVydC1zdGF0ZS1tc2cge1xcbiAgYm9yZGVyOiA0cHggc29saWQgIzMzMztcXG4gIGNvbG9yOiAjMDAwO1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItYWxlcnQgLnRhYnVsYXRvci1hbGVydC1tc2cudGFidWxhdG9yLWFsZXJ0LXN0YXRlLWVycm9yIHtcXG4gIGJvcmRlcjogNHB4IHNvbGlkICNEMDA7XFxuICBjb2xvcjogIzU5MDAwMDtcXG59XFxuXFxuLnRhYnVsYXRvci1yb3cge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIG1pbi1oZWlnaHQ6IDIycHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbn1cXG5cXG4udGFidWxhdG9yLXJvdy50YWJ1bGF0b3Itcm93LWV2ZW4ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI0VGRUZFRjtcXG59XFxuXFxuQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xcbiAgLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLXNlbGVjdGFibGU6aG92ZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYmJiO1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICB9XFxufVxcblxcbi50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1zZWxlY3RlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjOUFCQ0VBO1xcbn1cXG5cXG5AbWVkaWEgKGhvdmVyOiBob3ZlcikgYW5kIChwb2ludGVyOiBmaW5lKSB7XFxuICAudGFidWxhdG9yLXJvdy50YWJ1bGF0b3Itc2VsZWN0ZWQ6aG92ZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNzY5QkNDO1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICB9XFxufVxcblxcbi50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1yb3ctbW92aW5nIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICMwMDA7XFxuICBiYWNrZ3JvdW5kOiAjZmZmO1xcbn1cXG5cXG4udGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItbW92aW5nIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjYWFhO1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNhYWE7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gIHotaW5kZXg6IDE1O1xcbn1cXG5cXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLXJvdy1yZXNpemUtaGFuZGxlIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHJpZ2h0OiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG4gIGhlaWdodDogNXB4O1xcbn1cXG5cXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLXJvdy1yZXNpemUtaGFuZGxlLnByZXYge1xcbiAgdG9wOiAwO1xcbiAgYm90dG9tOiBhdXRvO1xcbn1cXG5cXG5AbWVkaWEgKGhvdmVyOiBob3ZlcikgYW5kIChwb2ludGVyOiBmaW5lKSB7XFxuICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLXJvdy1yZXNpemUtaGFuZGxlOmhvdmVyIHtcXG4gICAgY3Vyc29yOiBucy1yZXNpemU7XFxuICB9XFxufVxcblxcbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItcmVzcG9uc2l2ZS1jb2xsYXBzZSB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgcGFkZGluZzogNXB4O1xcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNhYWE7XFxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2FhYTtcXG59XFxuXFxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1yZXNwb25zaXZlLWNvbGxhcHNlOmVtcHR5IHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItcmVzcG9uc2l2ZS1jb2xsYXBzZSB0YWJsZSB7XFxuICBmb250LXNpemU6IDE0cHg7XFxufVxcblxcbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItcmVzcG9uc2l2ZS1jb2xsYXBzZSB0YWJsZSB0ciB0ZCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItcmVzcG9uc2l2ZS1jb2xsYXBzZSB0YWJsZSB0ciB0ZDpmaXJzdC1vZi10eXBlIHtcXG4gIHBhZGRpbmctcmlnaHQ6IDEwcHg7XFxufVxcblxcbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgcGFkZGluZzogNHB4O1xcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI2FhYTtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xcbn1cXG5cXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwudGFidWxhdG9yLWZyb3plbiB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBwb3NpdGlvbjogc3RpY2t5O1xcbiAgbGVmdDogMDtcXG4gIGJhY2tncm91bmQtY29sb3I6IGluaGVyaXQ7XFxuICB6LWluZGV4OiAxMTtcXG59XFxuXFxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsLnRhYnVsYXRvci1mcm96ZW4udGFidWxhdG9yLWZyb3plbi1sZWZ0IHtcXG4gIGJvcmRlci1yaWdodDogMnB4IHNvbGlkICNhYWE7XFxufVxcblxcbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3ItZnJvemVuLnRhYnVsYXRvci1mcm96ZW4tcmlnaHQge1xcbiAgYm9yZGVyLWxlZnQ6IDJweCBzb2xpZCAjYWFhO1xcbn1cXG5cXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwudGFidWxhdG9yLWVkaXRpbmcge1xcbiAgYm9yZGVyOiAxcHggc29saWQgIzFENjhDRDtcXG4gIG91dGxpbmU6IG5vbmU7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG5cXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwudGFidWxhdG9yLWVkaXRpbmcgaW5wdXQsXFxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsLnRhYnVsYXRvci1lZGl0aW5nIHNlbGVjdCB7XFxuICBib3JkZXI6IDFweDtcXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcbiAgb3V0bGluZTogbm9uZTtcXG59XFxuXFxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsLnRhYnVsYXRvci12YWxpZGF0aW9uLWZhaWwge1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2RkMDAwMDtcXG59XFxuXFxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsLnRhYnVsYXRvci12YWxpZGF0aW9uLWZhaWwgaW5wdXQsXFxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsLnRhYnVsYXRvci12YWxpZGF0aW9uLWZhaWwgc2VsZWN0IHtcXG4gIGJvcmRlcjogMXB4O1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogI2RkMDAwMDtcXG59XFxuXFxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsLnRhYnVsYXRvci1yb3ctaGFuZGxlIHtcXG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcXG4gIC1raHRtbC11c2VyLXNlbGVjdDogbm9uZTtcXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtby11c2VyLXNlbGVjdDogbm9uZTtcXG59XFxuXFxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsLnRhYnVsYXRvci1yb3ctaGFuZGxlIC50YWJ1bGF0b3Itcm93LWhhbmRsZS1ib3gge1xcbiAgd2lkdGg6IDgwJTtcXG59XFxuXFxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsLnRhYnVsYXRvci1yb3ctaGFuZGxlIC50YWJ1bGF0b3Itcm93LWhhbmRsZS1ib3ggLnRhYnVsYXRvci1yb3ctaGFuZGxlLWJhciB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogM3B4O1xcbiAgbWFyZ2luLXRvcDogMnB4O1xcbiAgYmFja2dyb3VuZDogIzY2NjtcXG59XFxuXFxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItZGF0YS10cmVlLWJyYW5jaC1lbXB0eSB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB3aWR0aDogN3B4O1xcbn1cXG5cXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtYnJhbmNoIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxuICBoZWlnaHQ6IDlweDtcXG4gIHdpZHRoOiA3cHg7XFxuICBtYXJnaW4tdG9wOiAtOXB4O1xcbiAgbWFyZ2luLXJpZ2h0OiA1cHg7XFxuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAxcHg7XFxuICBib3JkZXItbGVmdDogMnB4IHNvbGlkICNhYWE7XFxuICBib3JkZXItYm90dG9tOiAycHggc29saWQgI2FhYTtcXG59XFxuXFxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wge1xcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgaGVpZ2h0OiAxMXB4O1xcbiAgd2lkdGg6IDExcHg7XFxuICBtYXJnaW4tcmlnaHQ6IDVweDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICMzMzM7XFxuICBib3JkZXItcmFkaXVzOiAycHg7XFxuICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuMSk7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG5cXG5AbWVkaWEgKGhvdmVyOiBob3ZlcikgYW5kIChwb2ludGVyOiBmaW5lKSB7XFxuICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbDpob3ZlciB7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjIpO1xcbiAgfVxcbn1cXG5cXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbCAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sLWNvbGxhcHNlIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGhlaWdodDogN3B4O1xcbiAgd2lkdGg6IDFweDtcXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbCAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sLWNvbGxhcHNlOmFmdGVyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgbGVmdDogLTNweDtcXG4gIHRvcDogM3B4O1xcbiAgaGVpZ2h0OiAxcHg7XFxuICB3aWR0aDogN3B4O1xcbiAgYmFja2dyb3VuZDogIzMzMztcXG59XFxuXFxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbC1leHBhbmQge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgaGVpZ2h0OiA3cHg7XFxuICB3aWR0aDogMXB4O1xcbiAgYmFja2dyb3VuZDogIzMzMztcXG59XFxuXFxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbC1leHBhbmQ6YWZ0ZXIge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBsZWZ0OiAtM3B4O1xcbiAgdG9wOiAzcHg7XFxuICBoZWlnaHQ6IDFweDtcXG4gIHdpZHRoOiA3cHg7XFxuICBiYWNrZ3JvdW5kOiAjMzMzO1xcbn1cXG5cXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1yZXNwb25zaXZlLWNvbGxhcHNlLXRvZ2dsZSB7XFxuICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAta2h0bWwtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcbiAgLW8tdXNlci1zZWxlY3Q6IG5vbmU7XFxuICBoZWlnaHQ6IDE1cHg7XFxuICB3aWR0aDogMTVweDtcXG4gIGJvcmRlci1yYWRpdXM6IDIwcHg7XFxuICBiYWNrZ3JvdW5kOiAjNjY2O1xcbiAgY29sb3I6ICNmZmY7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIGZvbnQtc2l6ZTogMS4xZW07XFxufVxcblxcbkBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcXG4gIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCAudGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2UtdG9nZ2xlOmhvdmVyIHtcXG4gICAgb3BhY2l0eTogLjc7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gIH1cXG59XFxuXFxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItcmVzcG9uc2l2ZS1jb2xsYXBzZS10b2dnbGUub3BlbiAudGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2UtdG9nZ2xlLWNsb3NlIHtcXG4gIGRpc3BsYXk6IGluaXRpYWw7XFxufVxcblxcbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCAudGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2UtdG9nZ2xlLm9wZW4gLnRhYnVsYXRvci1yZXNwb25zaXZlLWNvbGxhcHNlLXRvZ2dsZS1vcGVuIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCAudGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2UtdG9nZ2xlIHN2ZyB7XFxuICBzdHJva2U6ICNmZmY7XFxufVxcblxcbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCAudGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2UtdG9nZ2xlIC50YWJ1bGF0b3ItcmVzcG9uc2l2ZS1jb2xsYXBzZS10b2dnbGUtY2xvc2Uge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItdHJhZmZpYy1saWdodCB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBoZWlnaHQ6IDE0cHg7XFxuICB3aWR0aDogMTRweDtcXG4gIGJvcmRlci1yYWRpdXM6IDE0cHg7XFxufVxcblxcbi50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1ncm91cCB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICM5OTk7XFxuICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjYWFhO1xcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICM5OTk7XFxuICBwYWRkaW5nOiA1cHg7XFxuICBwYWRkaW5nLWxlZnQ6IDEwcHg7XFxuICBiYWNrZ3JvdW5kOiAjY2NjO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBtaW4td2lkdGg6IDEwMCU7XFxufVxcblxcbkBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcXG4gIC50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1ncm91cDpob3ZlciB7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjEpO1xcbiAgfVxcbn1cXG5cXG4udGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItZ3JvdXAudGFidWxhdG9yLWdyb3VwLXZpc2libGUgLnRhYnVsYXRvci1hcnJvdyB7XFxuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxuICBib3JkZXItbGVmdDogNnB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLXJpZ2h0OiA2cHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItdG9wOiA2cHggc29saWQgIzY2NjtcXG4gIGJvcmRlci1ib3R0b206IDA7XFxufVxcblxcbi50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1ncm91cC50YWJ1bGF0b3ItZ3JvdXAtbGV2ZWwtMSB7XFxuICBwYWRkaW5nLWxlZnQ6IDMwcHg7XFxufVxcblxcbi50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1ncm91cC50YWJ1bGF0b3ItZ3JvdXAtbGV2ZWwtMiB7XFxuICBwYWRkaW5nLWxlZnQ6IDUwcHg7XFxufVxcblxcbi50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1ncm91cC50YWJ1bGF0b3ItZ3JvdXAtbGV2ZWwtMyB7XFxuICBwYWRkaW5nLWxlZnQ6IDcwcHg7XFxufVxcblxcbi50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1ncm91cC50YWJ1bGF0b3ItZ3JvdXAtbGV2ZWwtNCB7XFxuICBwYWRkaW5nLWxlZnQ6IDkwcHg7XFxufVxcblxcbi50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1ncm91cC50YWJ1bGF0b3ItZ3JvdXAtbGV2ZWwtNSB7XFxuICBwYWRkaW5nLWxlZnQ6IDExMHB4O1xcbn1cXG5cXG4udGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItZ3JvdXAgLnRhYnVsYXRvci1ncm91cC10b2dnbGUge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbn1cXG5cXG4udGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItZ3JvdXAgLnRhYnVsYXRvci1hcnJvdyB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB3aWR0aDogMDtcXG4gIGhlaWdodDogMDtcXG4gIG1hcmdpbi1yaWdodDogMTZweDtcXG4gIGJvcmRlci10b3A6IDZweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1ib3R0b206IDZweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1yaWdodDogMDtcXG4gIGJvcmRlci1sZWZ0OiA2cHggc29saWQgIzY2NjtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxufVxcblxcbi50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1ncm91cCBzcGFuIHtcXG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xcbiAgY29sb3I6ICNkMDA7XFxufVxcblxcbi50YWJ1bGF0b3ItcG9wdXAtY29udGFpbmVyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBiYWNrZ3JvdW5kOiAjZmZmO1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2FhYTtcXG4gIGJveC1zaGFkb3c6IDAgMCA1cHggMCByZ2JhKDAsIDAsIDAsIDAuMik7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBvdmVyZmxvdy15OiBhdXRvO1xcbiAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoO1xcbiAgei1pbmRleDogMTAwMDA7XFxufVxcblxcbi50YWJ1bGF0b3ItcG9wdXAge1xcbiAgcGFkZGluZzogNXB4O1xcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xcbn1cXG5cXG4udGFidWxhdG9yLXRvb2x0aXAge1xcbiAgbWF4LXdpZHRoOiBNaW4oNTAwcHgsIDEwMCUpO1xcbiAgcGFkZGluZzogM3B4IDVweDtcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gIGJveC1zaGFkb3c6IG5vbmU7XFxuICBmb250LXNpemU6IDEycHg7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG59XFxuXFxuLnRhYnVsYXRvci1tZW51IC50YWJ1bGF0b3ItbWVudS1pdGVtIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBwYWRkaW5nOiA1cHggMTBweDtcXG4gIHVzZXItc2VsZWN0OiBub25lO1xcbn1cXG5cXG4udGFidWxhdG9yLW1lbnUgLnRhYnVsYXRvci1tZW51LWl0ZW0udGFidWxhdG9yLW1lbnUtaXRlbS1kaXNhYmxlZCB7XFxuICBvcGFjaXR5OiAuNTtcXG59XFxuXFxuQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xcbiAgLnRhYnVsYXRvci1tZW51IC50YWJ1bGF0b3ItbWVudS1pdGVtOm5vdCgudGFidWxhdG9yLW1lbnUtaXRlbS1kaXNhYmxlZCk6aG92ZXIge1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIGJhY2tncm91bmQ6ICNFRkVGRUY7XFxuICB9XFxufVxcblxcbi50YWJ1bGF0b3ItbWVudSAudGFidWxhdG9yLW1lbnUtaXRlbS50YWJ1bGF0b3ItbWVudS1pdGVtLXN1Ym1lbnUge1xcbiAgcGFkZGluZy1yaWdodDogMjVweDtcXG59XFxuXFxuLnRhYnVsYXRvci1tZW51IC50YWJ1bGF0b3ItbWVudS1pdGVtLnRhYnVsYXRvci1tZW51LWl0ZW0tc3VibWVudTo6YWZ0ZXIge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiBjYWxjKDVweCArIC40ZW0pO1xcbiAgcmlnaHQ6IDEwcHg7XFxuICBoZWlnaHQ6IDdweDtcXG4gIHdpZHRoOiA3cHg7XFxuICBjb250ZW50OiAnJztcXG4gIGJvcmRlci13aWR0aDogMXB4IDFweCAwIDA7XFxuICBib3JkZXItc3R5bGU6IHNvbGlkO1xcbiAgYm9yZGVyLWNvbG9yOiAjYWFhO1xcbiAgdmVydGljYWwtYWxpZ246IHRvcDtcXG4gIHRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcXG59XFxuXFxuLnRhYnVsYXRvci1tZW51IC50YWJ1bGF0b3ItbWVudS1zZXBhcmF0b3Ige1xcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNhYWE7XFxufVxcblxcbi50YWJ1bGF0b3ItZWRpdC1saXN0IHtcXG4gIG1heC1oZWlnaHQ6IDIwMHB4O1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbiAgb3ZlcmZsb3cteTogYXV0bztcXG4gIC13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOiB0b3VjaDtcXG59XFxuXFxuLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtaXRlbSB7XFxuICBwYWRkaW5nOiA0cHg7XFxuICBjb2xvcjogIzMzMztcXG4gIG91dGxpbmU6IG5vbmU7XFxufVxcblxcbi50YWJ1bGF0b3ItZWRpdC1saXN0IC50YWJ1bGF0b3ItZWRpdC1saXN0LWl0ZW0uYWN0aXZlIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZDogIzFENjhDRDtcXG59XFxuXFxuLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtaXRlbS5hY3RpdmUuZm9jdXNlZCB7XFxuICBvdXRsaW5lOiAxcHggc29saWQgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpO1xcbn1cXG5cXG4udGFidWxhdG9yLWVkaXQtbGlzdCAudGFidWxhdG9yLWVkaXQtbGlzdC1pdGVtLmZvY3VzZWQge1xcbiAgb3V0bGluZTogMXB4IHNvbGlkICMxRDY4Q0Q7XFxufVxcblxcbkBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcXG4gIC50YWJ1bGF0b3ItZWRpdC1saXN0IC50YWJ1bGF0b3ItZWRpdC1saXN0LWl0ZW06aG92ZXIge1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIGNvbG9yOiAjZmZmO1xcbiAgICBiYWNrZ3JvdW5kOiAjMUQ2OENEO1xcbiAgfVxcbn1cXG5cXG4udGFidWxhdG9yLWVkaXQtbGlzdCAudGFidWxhdG9yLWVkaXQtbGlzdC1wbGFjZWhvbGRlciB7XFxuICBwYWRkaW5nOiA0cHg7XFxuICBjb2xvcjogIzMzMztcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtZ3JvdXAge1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNhYWE7XFxuICBwYWRkaW5nOiA0cHg7XFxuICBwYWRkaW5nLXRvcDogNnB4O1xcbiAgY29sb3I6ICMzMzM7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG59XFxuXFxuLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtaXRlbS50YWJ1bGF0b3ItZWRpdC1saXN0LWdyb3VwLWxldmVsLTIsXFxuLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtZ3JvdXAudGFidWxhdG9yLWVkaXQtbGlzdC1ncm91cC1sZXZlbC0yIHtcXG4gIHBhZGRpbmctbGVmdDogMTJweDtcXG59XFxuXFxuLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtaXRlbS50YWJ1bGF0b3ItZWRpdC1saXN0LWdyb3VwLWxldmVsLTMsXFxuLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtZ3JvdXAudGFidWxhdG9yLWVkaXQtbGlzdC1ncm91cC1sZXZlbC0zIHtcXG4gIHBhZGRpbmctbGVmdDogMjBweDtcXG59XFxuXFxuLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtaXRlbS50YWJ1bGF0b3ItZWRpdC1saXN0LWdyb3VwLWxldmVsLTQsXFxuLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtZ3JvdXAudGFidWxhdG9yLWVkaXQtbGlzdC1ncm91cC1sZXZlbC00IHtcXG4gIHBhZGRpbmctbGVmdDogMjhweDtcXG59XFxuXFxuLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtaXRlbS50YWJ1bGF0b3ItZWRpdC1saXN0LWdyb3VwLWxldmVsLTUsXFxuLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtZ3JvdXAudGFidWxhdG9yLWVkaXQtbGlzdC1ncm91cC1sZXZlbC01IHtcXG4gIHBhZGRpbmctbGVmdDogMzZweDtcXG59XFxuXFxuLnRhYnVsYXRvci50YWJ1bGF0b3ItbHRyIHtcXG4gIGRpcmVjdGlvbjogbHRyO1xcbn1cXG5cXG4udGFidWxhdG9yLnRhYnVsYXRvci1ydGwge1xcbiAgdGV4dC1hbGlnbjogaW5pdGlhbDtcXG4gIGRpcmVjdGlvbjogcnRsO1xcbn1cXG5cXG4udGFidWxhdG9yLnRhYnVsYXRvci1ydGwgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wge1xcbiAgdGV4dC1hbGlnbjogaW5pdGlhbDtcXG4gIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI2FhYTtcXG4gIGJvcmRlci1yaWdodDogaW5pdGlhbDtcXG59XFxuXFxuLnRhYnVsYXRvci50YWJ1bGF0b3ItcnRsIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1jb2wtZ3JvdXAgLnRhYnVsYXRvci1jb2wtZ3JvdXAtY29scyB7XFxuICBtYXJnaW4tcmlnaHQ6IGluaXRpYWw7XFxuICBtYXJnaW4tbGVmdDogLTFweDtcXG59XFxuXFxuLnRhYnVsYXRvci50YWJ1bGF0b3ItcnRsIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1zb3J0YWJsZSAudGFidWxhdG9yLWNvbC10aXRsZSB7XFxuICBwYWRkaW5nLXJpZ2h0OiAwO1xcbiAgcGFkZGluZy1sZWZ0OiAyNXB4O1xcbn1cXG5cXG4udGFidWxhdG9yLnRhYnVsYXRvci1ydGwgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC1zb3J0ZXIge1xcbiAgbGVmdDogOHB4O1xcbiAgcmlnaHQ6IGluaXRpYWw7XFxufVxcblxcbi50YWJ1bGF0b3IudGFidWxhdG9yLXJ0bCAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwge1xcbiAgYm9yZGVyLXJpZ2h0OiBpbml0aWFsO1xcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjYWFhO1xcbn1cXG5cXG4udGFidWxhdG9yLnRhYnVsYXRvci1ydGwgLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItZGF0YS10cmVlLWJyYW5jaCB7XFxuICBtYXJnaW4tcmlnaHQ6IGluaXRpYWw7XFxuICBtYXJnaW4tbGVmdDogNXB4O1xcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogaW5pdGlhbDtcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAxcHg7XFxuICBib3JkZXItbGVmdDogaW5pdGlhbDtcXG4gIGJvcmRlci1yaWdodDogMnB4IHNvbGlkICNhYWE7XFxufVxcblxcbi50YWJ1bGF0b3IudGFidWxhdG9yLXJ0bCAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbCB7XFxuICBtYXJnaW4tcmlnaHQ6IGluaXRpYWw7XFxuICBtYXJnaW4tbGVmdDogNXB4O1xcbn1cXG5cXG4udGFidWxhdG9yLnRhYnVsYXRvci1ydGwgLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsLnRhYnVsYXRvci1mcm96ZW4udGFidWxhdG9yLWZyb3plbi1sZWZ0IHtcXG4gIGJvcmRlci1sZWZ0OiAycHggc29saWQgI2FhYTtcXG59XFxuXFxuLnRhYnVsYXRvci50YWJ1bGF0b3ItcnRsIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3ItZnJvemVuLnRhYnVsYXRvci1mcm96ZW4tcmlnaHQge1xcbiAgYm9yZGVyLXJpZ2h0OiAycHggc29saWQgI2FhYTtcXG59XFxuXFxuLnRhYnVsYXRvci50YWJ1bGF0b3ItcnRsIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY29sLXJlc2l6ZS1oYW5kbGU6bGFzdC1vZi10eXBlIHtcXG4gIHdpZHRoOiAzcHg7XFxuICBtYXJnaW4tbGVmdDogMDtcXG4gIG1hcmdpbi1yaWdodDogLTNweDtcXG59XFxuXFxuLnRhYnVsYXRvci50YWJ1bGF0b3ItcnRsIC50YWJ1bGF0b3ItZm9vdGVyIC50YWJ1bGF0b3ItY2FsY3MtaG9sZGVyIHtcXG4gIHRleHQtYWxpZ246IGluaXRpYWw7XFxufVxcblxcbi50YWJ1bGF0b3ItcHJpbnQtZnVsbHNjcmVlbiB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiAwO1xcbiAgcmlnaHQ6IDA7XFxuICB6LWluZGV4OiAxMDAwMDtcXG59XFxuXFxuYm9keS50YWJ1bGF0b3ItcHJpbnQtZnVsbHNjcmVlbi1oaWRlID4gKjpub3QoLnRhYnVsYXRvci1wcmludC1mdWxsc2NyZWVuKSB7XFxuICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XFxufVxcblxcbi50YWJ1bGF0b3ItcHJpbnQtdGFibGUge1xcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcXG59XFxuXFxuLnRhYnVsYXRvci1wcmludC10YWJsZSAudGFidWxhdG9yLWRhdGEtdHJlZS1icmFuY2gge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG4gIGhlaWdodDogOXB4O1xcbiAgd2lkdGg6IDdweDtcXG4gIG1hcmdpbi10b3A6IC05cHg7XFxuICBtYXJnaW4tcmlnaHQ6IDVweDtcXG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDFweDtcXG4gIGJvcmRlci1sZWZ0OiAycHggc29saWQgI2FhYTtcXG4gIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCAjYWFhO1xcbn1cXG5cXG4udGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUtZ3JvdXAge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjOTk5O1xcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI2FhYTtcXG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjOTk5O1xcbiAgcGFkZGluZzogNXB4O1xcbiAgcGFkZGluZy1sZWZ0OiAxMHB4O1xcbiAgYmFja2dyb3VuZDogI2NjYztcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgbWluLXdpZHRoOiAxMDAlO1xcbn1cXG5cXG5AbWVkaWEgKGhvdmVyOiBob3ZlcikgYW5kIChwb2ludGVyOiBmaW5lKSB7XFxuICAudGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUtZ3JvdXA6aG92ZXIge1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4xKTtcXG4gIH1cXG59XFxuXFxuLnRhYnVsYXRvci1wcmludC10YWJsZSAudGFidWxhdG9yLXByaW50LXRhYmxlLWdyb3VwLnRhYnVsYXRvci1ncm91cC12aXNpYmxlIC50YWJ1bGF0b3ItYXJyb3cge1xcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcbiAgYm9yZGVyLWxlZnQ6IDZweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1yaWdodDogNnB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLXRvcDogNnB4IHNvbGlkICM2NjY7XFxuICBib3JkZXItYm90dG9tOiAwO1xcbn1cXG5cXG4udGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUtZ3JvdXAudGFidWxhdG9yLWdyb3VwLWxldmVsLTEgdGQge1xcbiAgcGFkZGluZy1sZWZ0OiAzMHB4ICFpbXBvcnRhbnQ7XFxufVxcblxcbi50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1wcmludC10YWJsZS1ncm91cC50YWJ1bGF0b3ItZ3JvdXAtbGV2ZWwtMiB0ZCB7XFxuICBwYWRkaW5nLWxlZnQ6IDUwcHggIWltcG9ydGFudDtcXG59XFxuXFxuLnRhYnVsYXRvci1wcmludC10YWJsZSAudGFidWxhdG9yLXByaW50LXRhYmxlLWdyb3VwLnRhYnVsYXRvci1ncm91cC1sZXZlbC0zIHRkIHtcXG4gIHBhZGRpbmctbGVmdDogNzBweCAhaW1wb3J0YW50O1xcbn1cXG5cXG4udGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUtZ3JvdXAudGFidWxhdG9yLWdyb3VwLWxldmVsLTQgdGQge1xcbiAgcGFkZGluZy1sZWZ0OiA5MHB4ICFpbXBvcnRhbnQ7XFxufVxcblxcbi50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1wcmludC10YWJsZS1ncm91cC50YWJ1bGF0b3ItZ3JvdXAtbGV2ZWwtNSB0ZCB7XFxuICBwYWRkaW5nLWxlZnQ6IDExMHB4ICFpbXBvcnRhbnQ7XFxufVxcblxcbi50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1wcmludC10YWJsZS1ncm91cCAudGFidWxhdG9yLWdyb3VwLXRvZ2dsZSB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcblxcbi50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1wcmludC10YWJsZS1ncm91cCAudGFidWxhdG9yLWFycm93IHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdpZHRoOiAwO1xcbiAgaGVpZ2h0OiAwO1xcbiAgbWFyZ2luLXJpZ2h0OiAxNnB4O1xcbiAgYm9yZGVyLXRvcDogNnB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWJvdHRvbTogNnB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLXJpZ2h0OiAwO1xcbiAgYm9yZGVyLWxlZnQ6IDZweCBzb2xpZCAjNjY2O1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG59XFxuXFxuLnRhYnVsYXRvci1wcmludC10YWJsZSAudGFidWxhdG9yLXByaW50LXRhYmxlLWdyb3VwIHNwYW4ge1xcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XFxuICBjb2xvcjogI2QwMDtcXG59XFxuXFxuLnRhYnVsYXRvci1wcmludC10YWJsZSAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sIHtcXG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG4gIGhlaWdodDogMTFweDtcXG4gIHdpZHRoOiAxMXB4O1xcbiAgbWFyZ2luLXJpZ2h0OiA1cHg7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjMzMzO1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjEpO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuXFxuQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xcbiAgLnRhYnVsYXRvci1wcmludC10YWJsZSAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sOmhvdmVyIHtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuMik7XFxuICB9XFxufVxcblxcbi50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbCAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sLWNvbGxhcHNlIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGhlaWdodDogN3B4O1xcbiAgd2lkdGg6IDFweDtcXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG4udGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbC1jb2xsYXBzZTphZnRlciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG4gIGxlZnQ6IC0zcHg7XFxuICB0b3A6IDNweDtcXG4gIGhlaWdodDogMXB4O1xcbiAgd2lkdGg6IDdweDtcXG4gIGJhY2tncm91bmQ6ICMzMzM7XFxufVxcblxcbi50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbCAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sLWV4cGFuZCB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBoZWlnaHQ6IDdweDtcXG4gIHdpZHRoOiAxcHg7XFxuICBiYWNrZ3JvdW5kOiAjMzMzO1xcbn1cXG5cXG4udGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbC1leHBhbmQ6YWZ0ZXIge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBsZWZ0OiAtM3B4O1xcbiAgdG9wOiAzcHg7XFxuICBoZWlnaHQ6IDFweDtcXG4gIHdpZHRoOiA3cHg7XFxuICBiYWNrZ3JvdW5kOiAjMzMzO1xcbn1cXG5cXG4vKiMgc291cmNlTWFwcGluZ1VSTD10YWJ1bGF0b3IuY3NzLm1hcCAqL1wiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18gZnJvbSBcIi0hLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3RhYnVsYXRvci10YWJsZXMvZGlzdC9jc3MvdGFidWxhdG9yLmNzc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIkBpbXBvcnQgdXJsKGh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9RXBpbG9ndWU6aXRhbCx3Z2h0QDAsMTAwOzAsMjAwOzAsMzAwOzAsNDAwOzAsNTAwOzAsNjAwOzAsNzAwOzAsODAwOzAsOTAwOzEsMTAwOzEsMjAwOzEsMzAwOzEsNDAwOzEsNTAwOzEsNjAwOzEsNzAwOzEsODAwOzEsOTAwJmZhbWlseT1JbnRlcjp3Z2h0QDEwMDsyMDA7MzAwOzQwMDs1MDA7NjAwOzcwMDs4MDA7OTAwJmZhbWlseT1PcmJpdHJvbjp3Z2h0QDQwMDs1MDA7NjAwOzcwMDs4MDA7OTAwJmZhbWlseT1TaW50b255OndnaHRANDAwOzcwMCZkaXNwbGF5PXN3YXApO1wiXSk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYCoge1xuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG59XG5cbjpyb290IHtcbiAgICAtLWdpZ2FudGljLXRleHQ6IDQuNzY4cmVtO1xuICAgIC0tanVtYm8tdGV4dDogMy44MTVyZW07XG4gICAgLS1oMS10ZXh0OiAzLjA1MnJlbTtcbiAgICAtLWgyLXRleHQ6IDIuNDQxcmVtO1xuICAgIC0taDMtdGV4dDogMS45NTNyZW07XG4gICAgLS1oNC10ZXh0OiAxLjU2M3JlbTtcbiAgICAtLWg1LXRleHQ6IDEuMjVyZW07XG4gICAgLS1zbWFsbC10ZXh0OiAwLjcycmVtO1xuICAgIC0tc21hbGxlci10ZXh0OiAwLjY0cmVtO1xuICAgIC0tc21hbGxlc3QtdGV4dDogMC41MTJyZW07XG4gICAgLS1tYWluLWNvbG9yOiByZ2IoMCwzMiw5MSk7XG4gICAgLS10ZXh0LWNvbG9yOiAjMGQwNjA3O1xuICAgIC0tZGFyay1jb2xvcjogIzJiMmIyYjtcbiAgICAtLXRoaXJkLWNvbG9yOiAjYjllOTM3O1xuICAgIC0tcmVkLWNvbG9yOiAjYjkwMDAwO1xufVxuXG5odG1sIHtcbiAgICBmb250LXNpemU6IDEwMCU7XG4gICAgc2Nyb2xsLWJlaGF2aW9yOiBzbW9vdGg7XG59XG5cbmJvZHkge1xuICAgIGZvbnQtZmFtaWx5OiAnU2ludG9ueScsIHNhbnMtc2VyaWY7XG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICBjb2xvcjogd2hpdGU7XG59XG5cbmEge1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuYnV0dG9uIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbnAge21hcmdpbi1ib3R0b206IDFyZW07fVxuXG5oMSwgaDIsIGgzLCBoNCwgaDUge1xuICBtYXJnaW46IDNyZW0gMCAxLjM4cmVtO1xuICBmb250LXdlaWdodDogNzAwO1xuICBsaW5lLWhlaWdodDogMTtcbn1cblxuaDEge1xuICBtYXJnaW4tdG9wOiAwO1xuICBmb250LXNpemU6IHZhcigtLWgxLXRleHQpO1xuICBmb250LXdlaWdodDogNzAwO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xufVxuXG5oMiB7Zm9udC1zaXplOiB2YXIoLS1oMi10ZXh0KTt9XG5cbmgzIHtmb250LXNpemU6IHZhcigtLWgzLXRleHQpO31cblxuaDQge2ZvbnQtc2l6ZTogdmFyKC0taDQtdGV4dCk7fVxuXG5oNSB7Zm9udC1zaXplOiB2YXIoLS1oNS10ZXh0KTt9XG5cbi5tYXRlcmlhbC1zeW1ib2xzLW91dGxpbmVkIHtcbiAgZm9udC12YXJpYXRpb24tc2V0dGluZ3M6XG4gICdGSUxMJyAwLFxuICAnd2dodCcgNDAwLFxuICAnR1JBRCcgMCxcbiAgJ29wc3onIDI0XG59XG5cbnVsIHtsaXN0LXN0eWxlLXR5cGU6IG5vbmU7fVxuXG5hIHtcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgY29sb3I6IGluaGVyaXQ7XG59XG5cbi5oZWFkZXIge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW1haW4tY29sb3IpO1xufVxuXG4uaGVhZGVyX19sb2dvIHtcbiAgICBoZWlnaHQ6IGF1dG87XG4gICAgd2lkdGg6IDEwMHB4O1xufVxuXG4uZGl2aWRlciB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgd2lkdGg6IDE2MHB4O1xuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCB3aGl0ZTtcbn1cblxuLmhlYWRlcl9fdGl0bGUge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBoZWlnaHQ6IDE1MHB4O1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGdhcDogMTVweDtcbn1cblxuLmhlYWRlcl9fdGl0bGVfX3RleHQge1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgZm9udC13ZWlnaHQ6IDkwMDtcbiAgICBmb250LXNpemU6IHZhcigtLWgxLXRleHQpO1xuICAgIGZvbnQtZmFtaWx5OiAnSW50ZXInLCBzYW5zLXNlcmlmO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICB3aWR0aDogMjUwcHg7XG59XG5cbi5oZWFkZXJfX2JhZGdlIHtcbiAgICB3aWR0aDogLXdlYmtpdC1maWxsLWF2YWlsYWJsZTtcbiAgICBiYWNrZ3JvdW5kOiByZ2IoMCwzMiw5MSk7XG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDE4MGRlZywgcmdiYSgwLDMyLDkxLDEpIDAlLCByZ2JhKDAsMCwwLDEpIDEwMCUpO1xufVxuXG4uaGVhZGVyX19zdGF0cy1zZWN0aW9uIHtcbiAgICB3aWR0aDogLXdlYmtpdC1maWxsLWF2YWlsYWJsZTtcbiAgICBwYWRkaW5nOiAxNXB4IDI1cHggNDBweCAyNXB4O1xufVxuXG4uaGVhZGVyX19zdGF0cy1zZWN0aW9uX19saXN0X19pdGVtX19sb2dvIHtcbiAgICB3aWR0aDogNTBweDtcbiAgICBoZWlnaHQ6IGF1dG87XG59XG5cblxuLmhlYWRlcl9fc3RhdHMtc2VjdGlvbl9fdG9wLXNlY3Rpb24ge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XG4gICAgbWFyZ2luLWJvdHRvbTogMjVweDtcbiAgICBtYXJnaW4tdG9wOiAyNXB4O1xufVxuXG4uc2VjdGlvbi10aXRsZSA+IHNwYW4ge1xuICAgIGZvbnQtc2l6ZTogdmFyKC0taDQtdGV4dCk7XG4gICAgZm9udC1mYW1pbHk6ICdTaW50b255Jywgc2Fucy1zZXJpZjtcbiAgICBmb250LXdlaWdodDogNzAwO1xufVxuXG4uaGVhZGVyX19zdGF0cy1zZWN0aW9uLXRvcCB7XG4gICAgcGFkZGluZy10b3A6IDEwcHg7XG59XG5cbi5oZWFkZXJfX3N0YXRzLXNlY3Rpb25fX3RvcCB7XG4gICAgY29sb3I6IHdoaXRlO1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgICBmb250LXNpemU6IHZhcigtLXNtYWxsZXItdGV4dCk7XG59XG5cbi5zdGF0cy1yZXN1bHRzIHtcbiAgICBjb2xvcjogd2hpdGU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGZvbnQtc2l6ZTogdmFyKC0taDEtdGV4dCk7XG4gICAgZm9udC13ZWlnaHQ6IDcwMDtcbn1cblxuLnBhcnRpY2lwYXRpb24ge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZ2FwOiAxNXB4O1xuICAgIHBhZGRpbmc6IDEwcHg7XG59XG5cbi50ZWFtLWxvZ28ge1xuICAgIHdpZHRoOiA0MHB4O1xuICAgIGhlaWdodDogYXV0bztcbn1cblxuLnRhYnVsYXRvciB7XG4gICAgYm9yZGVyLWNvbG9yOiAjYzVjNWM1O1xuXG59XG5cbi5oZWFkZXJfX3N0YXRzLXNlY3Rpb24tbWlkZGxlIHtcbiAgICBwYWRkaW5nLWJvdHRvbTogNXB4O1xuICAgIHBhZGRpbmctdG9wOiAxNXB4O1xufVxuXG4uaGVhZGVyX19zdGF0cy1zZWN0aW8tYm90dG9tLXNlY3Rpb24ge1xuICAgIG1hcmdpbi10b3A6IDI1cHg7XG59XG5cbi5oZWFkZXJfX3N0YXRzLXNlY3Rpby1ib3R0b20tc2VjdGlvbiAuZGl2aWRlciB7XG4gICAgd2lkdGg6IDIwMHB4O1xufVxuXG4jc3RhdHMtdGFibGUge1xuICAgIG1hcmdpbi1ib3R0b206IDM1cHg7XG4gICAgbWFyZ2luLXRvcDogMzVweDtcbn1cblxuI3N0YXRzLXRhYmxlIC50YWJ1bGF0b3ItY2VsbFt0YWJ1bGF0b3ItZmllbGQ9XCJlcXVpcGVcIl0ge1xuICAgIGZvbnQtc2l6ZTogdmFyKC0tc21hbGwtdGV4dCk7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIsXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sIHtcbiAgICBib3JkZXItY29sb3I6ICNjNWM1YzU7XG4gICAgY29sb3I6ICNkZmRmZGY7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzBhMGEwYTtcbiAgICBmb250LXdlaWdodDogNjAwO1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sIHtcbiAgICBoZWlnaHQ6IDQwcHg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG59XG5cbiNzdGF0cy10YWJsZSAudGFidWxhdG9yLWNlbGwge1xuICAgIGdhcDogMTVweDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIGNvbG9yOiNmZmY7XG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcbn1cblxuI3N0YXRzLXRhYmxlIC50YWJ1bGF0b3ItY2VsbCA+IGRpdiB7XG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbn1cblxuI3N0YXRzLXRhYmxlIC50YWJ1bGF0b3ItY2VsbCA+IGltZyB7XG4gICAgd2lkdGg6IGF1dG87XG4gICAgbWF4LXdpZHRoOiA1OXB4O1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBwYWRkaW5nLWxlZnQ6IDVweDtcbiAgICBwYWRkaW5nLXJpZ2h0OiA1cHg7XG59XG5cbi50YWJ1bGF0b3ItY2VsbCA+IGltZyB7XG4gICAgd2lkdGg6IGF1dG87XG4gICAgaGVpZ2h0OiAxMDAlO1xufVxuXG4vKlRoZW1lIHRoZSBUYWJ1bGF0b3IgZWxlbWVudCovXG4jcGljay10YWJsZSB7XG4gICAgYm9yZGVyOiAxcHggc29saWQgI2M1YzVjNTtcbn1cblxuLypUaGVtZSB0aGUgaGVhZGVyKi9cbi50YWJ1bGF0b3ItaGVhZGVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiMxZDE5MWE7XG4gICAgY29sb3I6I2ZmZjtcbn1cblxuLypBbGxvdyBjb2x1bW4gaGVhZGVyIG5hbWVzIHRvIHdyYXAgbGluZXMqL1xuI3BpY2stdGFibGUgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wsXG4jcGljay10YWJsZSAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC1yb3ctaGFuZGxlIHtcbiAgICB3aGl0ZS1zcGFjZTogbm9ybWFsO1xufVxuXG4vKkNvbG9yIHRoZSB0YWJsZSByb3dzIGJhc2Ugb24gcGxheWVyIG5hbWUqL1xuI3BpY2stdGFibGUgLnRhYnVsYXRvci10YWJsZSAudGFidWxhdG9yLXJvdy5hLXBsYXllciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjtcbn1cblxuI3BpY2stdGFibGUgLnRhYnVsYXRvci10YWJsZSAudGFidWxhdG9yLXJvdy5hbm90aGVyLXBsYXllciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2RiZGJkYjtcbn1cblxuI3BpY2stdGFibGUgLnRhYnVsYXRvci1jZWxsW3RhYnVsYXRvci1maWVsZD1cImpvdWV1clwiXSB7XG4gICAgZm9udC1zaXplOiB2YXIoLS1zbWFsbC10ZXh0KTtcbn1cblxuLyogQ29sb3IgdGhlIGJvcmRlciBjZWxscyAqL1xuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIHtcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2M1YzVjNTtcbn1cblxuI3N0YXRzLXRhYmxlIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbDpsYXN0LW9mLXR5cGUsXG4jc3RhdHMtdGFibGUgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2w6bGFzdC1vZi10eXBlIHtcbiAgICBib3JkZXItcmlnaHQ6IG5vbmU7XG59XG5cbiNzdGF0cy10YWJsZSAudGFidWxhdG9yLXJvdzpsYXN0LW9mLXR5cGUgLnRhYnVsYXRvci1jZWxsIHtcbiAgICBib3JkZXItYm90dG9tOiBub25lO1xufVxuXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwudGFidWxhdG9yLWZyb3plbi50YWJ1bGF0b3ItZnJvemVuLXJpZ2h0LFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWZyb3plbi50YWJ1bGF0b3ItZnJvemVuLXJpZ2h0IHtcbiAgICBib3JkZXItbGVmdDogMXB4O1xufVxuXG4uZ3JheXNjYWxlLWVmZmVjdCB7XG4gICAgZmlsdGVyOiBncmF5c2NhbGUoMTAwJSk7XG4gIH1cbi8qIE5ITCBURUFNUyBDT0xPUiAqL1xuI3N0YXRzLXRhYmxlIC5hbmFoZWltLWR1Y2tzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNTU0NzJkO1xufVxuXG4uYW5haGVpbS1kdWNrcyBpbWcsIC5hbmFoZWltLWR1Y2tzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYjY5ODVhO1xufVxuXG4jc3RhdHMtdGFibGUgLmFyaXpvbmEtY295b3RlcyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzM5MGIxODtcbn1cblxuLmFyaXpvbmEtY295b3RlcyBpbWcsIC5hcml6b25hLWNveW90ZXMge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICM3YTAwMjI7XG59XG5cbiNzdGF0cy10YWJsZSAuYm9zdG9uLWJydWlucyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2I0ODUxODtcbn1cblxuLmJvc3Rvbi1icnVpbnMgaW1nLCAuYm9zdG9uLWJydWlucyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZkYjkxZTtcbn1cblxuI3N0YXRzLXRhYmxlIC5idWZmYWxvLXNhYnJlcyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzBhMWM0MDtcbn1cblxuLmJ1ZmZhbG8tc2FicmVzIGltZywgLmJ1ZmZhbG8tc2FicmVzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDIzMDg5O1xufVxuXG4jc3RhdHMtdGFibGUgLmNhbGdhcnktZmxhbWVzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjgxMTFlO1xufVxuXG4uY2FsZ2FyeS1mbGFtZXMgaW1nLCAuY2FsZ2FyeS1mbGFtZXMge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNlMzBhMmI7XG59XG5cbiNzdGF0cy10YWJsZSAuY2Fyb2xpbmEtaHVycmljYW5lcyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzhjMjYyNjtcbn1cblxuLmNhcm9saW5hLWh1cnJpY2FuZXMgaW1nLCAuY2Fyb2xpbmEtaHVycmljYW5lcyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2M4MTAyZTtcbn1cblxuI3N0YXRzLXRhYmxlIC5jaGljYWdvLWJsYWNraGF3a3Mge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICM2NzBlMWM7XG59XG5cbi5jaGljYWdvLWJsYWNraGF3a3MgaW1nLCAuY2hpY2Fnby1ibGFja2hhd2tzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTMwODI5O1xufVxuXG4jc3RhdHMtdGFibGUgLmNvbG9yYWRvLWF2YWxhbmNoZSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzJmMTIxNDtcbn1cblxuLmNvbG9yYWRvLWF2YWxhbmNoZSBpbWcsIC5jb2xvcmFkby1hdmFsYW5jaGUge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICM2ZjI2M2Q7XG59XG5cbiNzdGF0cy10YWJsZSAuY29sdW1idXMtYmx1ZS1qYWNrZXRzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDkxYzMyO1xufVxuXG4uY29sdW1idXMtYmx1ZS1qYWNrZXRzIGltZywgLmNvbHVtYnVzLWJsdWUtamFja2V0cyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAzMmQ2NTtcbn1cblxuI3N0YXRzLXRhYmxlIC5kYWxsYXMtc3RhcnMge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMxNzQyMzM7XG59XG5cbi5kYWxsYXMtc3RhcnMgaW1nLCAuZGFsbGFzLXN0YXJzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3MDRhO1xufVxuXG4jc3RhdHMtdGFibGUgLmRldHJvaXQtcmVkLXdpbmdzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjQwYzE4O1xufVxuXG4uZGV0cm9pdC1yZWQtd2luZ3MgaW1nLCAuZGV0cm9pdC1yZWQtd2luZ3Mge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNlMzA1MjQ7XG59XG5cbiNzdGF0cy10YWJsZSAuZWRtb250b24tb2lsZXJzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAxMTMxO1xufVxuXG4uZWRtb250b24tb2lsZXJzIGltZywgLmVkbW9udG9uLW9pbGVycyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMjA1Yjtcbn1cblxuI3N0YXRzLXRhYmxlIC5mbG9yaWRhLXBhbnRoZXJzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjOTIwYjIxO1xufVxuXG4uZmxvcmlkYS1wYW50aGVycyBpbWcsIC5mbG9yaWRhLXBhbnRoZXJzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYzgxMDJlO1xufVxuXG4jc3RhdHMtdGFibGUgLnNlYXR0bGUta3Jha2VuIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMGExMDFlO1xufVxuXG4uc2VhdHRsZS1rcmFrZW4gaW1nLCAuc2VhdHRsZS1rcmFrZW4ge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDBmMzI7XG59XG5cbiNzdGF0cy10YWJsZSAubG9zLWFuZ2VsZXMta2luZ3Mge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICM1YjViNWQ7XG59XG5cbi5sb3MtYW5nZWxlcy1raW5ncyBpbWcsIC5sb3MtYW5nZWxlcy1raW5ncyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2IxYjZiYTtcbn1cblxuI3N0YXRzLXRhYmxlIC5taW5uZXNvdGEtd2lsZCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMjIxNztcbn1cblxuLm1pbm5lc290YS13aWxkIGltZywgLm1pbm5lc290YS13aWxkIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDI1NzM2O1xufVxuXG4jc3RhdHMtdGFibGUgLm1vbnRyZWFsLWNhbmFkaWVucyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzU3MGQxYTtcbn1cblxuLm1vbnRyZWFsLWNhbmFkaWVucyBpbWcsIC5tb250cmVhbC1jYW5hZGllbnMge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNjMjA4Mjg7XG59XG5cbiNzdGF0cy10YWJsZSAubmFzaHZpbGxlLXByZWRhdG9ycyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzcxNTQxYTtcbn1cblxuLm5hc2h2aWxsZS1wcmVkYXRvcnMgaW1nLCAubmFzaHZpbGxlLXByZWRhdG9ycyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZkYjYyMztcbn1cblxuI3N0YXRzLXRhYmxlIC5uZXctamVyc2V5LWRldmlscyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzY0MGMxODtcbn1cblxuLm5ldy1qZXJzZXktZGV2aWxzIGltZywgLm5ldy1qZXJzZXktZGV2aWxzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTEwNjIzO1xufVxuXG4jc3RhdHMtdGFibGUgLm5ldy15b3JrLWlzbGFuZGVycyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzBiMjY0Mztcbn1cblxuLm5ldy15b3JrLWlzbGFuZGVycyBpbWcsIC5uZXcteW9yay1pc2xhbmRlcnMge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDQ3OGM7XG59XG5cbiNzdGF0cy10YWJsZSAubmV3LXlvcmstcmFuZ2VycyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzE4Mzg1OTtcbn1cblxuLm5ldy15b3JrLXJhbmdlcnMgaW1nLCAubmV3LXlvcmstcmFuZ2VycyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwNTZhODtcbn1cblxuI3N0YXRzLXRhYmxlIC5vdHRhd2Etc2VuYXRvcnMge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICM2NTBjMTk7XG59XG5cbi5vdHRhd2Etc2VuYXRvcnMgaW1nLCAub3R0YXdhLXNlbmF0b3JzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTMwNTI2O1xufVxuXG4jc3RhdHMtdGFibGUgLnBoaWxhZGVscGhpYS1mbHllcnMge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICM2ZjI5MGI7XG59XG5cbi5waGlsYWRlbHBoaWEtZmx5ZXJzIGltZywgLnBoaWxhZGVscGhpYS1mbHllcnMge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmYzRjMDI7XG59XG5cbiNzdGF0cy10YWJsZSAucGl0dHNidXJnaC1wZW5ndWlucyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzFiMWIxYztcbn1cblxuLnBpdHRzYnVyZ2gtcGVuZ3VpbnMgaW1nLCAucGl0dHNidXJnaC1wZW5ndWlucyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzBlMGUwZjtcbn1cblxuI3N0YXRzLXRhYmxlIC5zYW4tam9zZS1zaGFya3Mge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMwYTM2M2Q7XG59XG5cbi5zYW4tam9zZS1zaGFya3MgaW1nLCAuc2FuLWpvc2Utc2hhcmtzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA2ZDgwO1xufVxuXG4jc3RhdHMtdGFibGUgLnN0LWxvdWlzLWJsdWVzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTgxYTM5O1xufVxuXG4uc3QtbG91aXMtYmx1ZXMgaW1nLCAuc3QtbG91aXMtYmx1ZXMge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDMwODc7XG59XG5cbiNzdGF0cy10YWJsZSAudGFtcGEtYmF5LWxpZ2h0bmluZyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzBjMGUyNDtcbn1cblxuLnRhbXBhLWJheS1saWdodG5pbmcgaW1nLCAudGFtcGEtYmF5LWxpZ2h0bmluZyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMjA1Yjtcbn1cblxuI3N0YXRzLXRhYmxlIC50b3JvbnRvLW1hcGxlLWxlYWZzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTUxNzIyO1xufVxuXG4udG9yb250by1tYXBsZS1sZWFmcyBpbWcsIC50b3JvbnRvLW1hcGxlLWxlYWZzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAyMDViO1xufVxuXG4jc3RhdHMtdGFibGUgLnZhbmNvdXZlci1jYW51Y2tzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDkxZDJlO1xufVxuXG4udmFuY291dmVyLWNhbnVja3MgaW1nLCAudmFuY291dmVyLWNhbnVja3Mge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMTJkNTM7XG59XG5cbiNzdGF0cy10YWJsZSAudmVnYXMtZ29sZGVuLWtuaWdodHMge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICM1MzQ3MmQ7XG59XG5cbi52ZWdhcy1nb2xkZW4ta25pZ2h0cyBpbWcsIC52ZWdhcy1nb2xkZW4ta25pZ2h0cyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2I3OTc1Yztcbn1cblxuI3N0YXRzLXRhYmxlIC53YXNoaW5ndG9uLWNhcGl0YWxzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjYwZDFiO1xufVxuXG4ud2FzaGluZ3Rvbi1jYXBpdGFscyBpbWcsIC53YXNoaW5ndG9uLWNhcGl0YWxzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTMwNjI4O1xufVxuXG4jc3RhdHMtdGFibGUgLndpbm5pcGVnLWpldHMge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMwOTFjMzI7XG59XG5cbi53aW5uaXBlZy1qZXRzIGltZywgLndpbm5pcGVnLWpldHMge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDJlNjM7XG59XG5cbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogMzY1cHgpIHtcbiAgICAuaGVhZGVyX190aXRsZV9fdGV4dCB7XG4gICAgICAgIGZvbnQtc2l6ZTogdmFyKC0taDItdGV4dCk7XG4gICAgfVxuXG59XG5cbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY4cHgpIHtcbiAgICBib2R5IHtcbiAgICAgICAgYmFja2dyb3VuZDogcmdiKDAsMzIsOTEpO1xuICAgICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCByZ2JhKDAsMzIsOTEsMSkgMCUsIHJnYmEoMCwwLDAsMSkgMTAwJSk7XG4gICAgfVxuICAgIFxuICAgIC5oZWFkZXIge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICB9XG5cbiAgICAubWFpbi1pbmRleCB7XG4gICAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmcjtcbiAgICB9XG5cbiAgICAuaGVhZGVyX19iYWRnZSB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IG5vbmU7XG4gICAgICAgIGJhY2tncm91bmQ6IG5vbmU7XG4gICAgfVxuXG4gICAgLnNlY3Rpb24tdGl0bGUgPiBzcGFuIHtcbiAgICAgICAgZm9udC1zaXplOiB2YXIoLS1qdW1iby10ZXh0KTtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDE7XG4gICAgfVxuXG4gICAgLmhlYWRlcl9fc3RhdHMtc2VjdGlvbl9fdG9wIHtcbiAgICAgICAgZm9udC1zaXplOiB2YXIoLS1zbWFsbC10ZXh0KTtcbiAgICB9XG5cbiAgICAuc3RhdHMtcmVzdWx0cyB7XG4gICAgICAgIGZvbnQtc2l6ZTogdmFyKC0tanVtYm8tdGV4dCk7XG4gICAgfVxuXG4gICAgLmhlYWRlcl9fc3RhdHMtc2VjdGlvbiB7XG4gICAgICAgIHBhZGRpbmctbGVmdDogMTAwcHg7XG4gICAgfVxuXG4gICAgLmhlYWRlcl9fc3RhdHMtc2VjdGlvbl9fdG9wLXNlY3Rpb24ge1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgZ2FwOiAxNTBweDtcbiAgICAgICAgbWFyZ2luLXRvcDogNTBweDtcbiAgICB9XG5cbiAgICAuc3RhdHMtdGFibGUtZmxleCB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIH1cblxuICAgIC5zdGF0cy10YWJsZS1zaXplIHtcbiAgICAgICAgbWluLXdpZHRoOiA0NTBweDtcbiAgICB9XG5cbiAgICAjc3RhdHMtdGFibGUge1xuICAgICAgICB3aWR0aDogLXdlYmtpdC1maWxsLWF2YWlsYWJsZTtcbiAgICAgICAgbWFyZ2luLXRvcDogNTVweDtcbiAgICB9XG5cbiAgICAjc3RhdHMtdGFibGUgLnRhYnVsYXRvci1jZWxsW3RhYnVsYXRvci1maWVsZD1cImVxdWlwZVwiXSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMXJlbTtcbiAgICB9XG5cbiAgICAuaGVhZGVyX19zdGF0cy1zZWN0aW8tYm90dG9tLXNlY3Rpb24uc2VjdGlvbi10aXRsZSB7XG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgfVxuXG4gICAgLmRpdmlkZXIge1xuICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgIH1cblxuICAgIC5waWNrLXRhYmxlLWZsZXgge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgIH1cblxuICAgIC5waWNrLXRhYmxlLXNpemUge1xuICAgICAgICBtYXgtd2lkdGg6IDcwMHB4O1xuICAgIH1cblxuICAgICNwaWNrLXRhYmxlIHtcbiAgICAgICAgbWFyZ2luLXRvcDogMjVweDtcbiAgICB9XG5cbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFHQTtJQUNJLFNBQVM7SUFDVCxVQUFVO0lBQ1Ysc0JBQXNCO0FBQzFCOztBQUVBO0lBQ0kseUJBQXlCO0lBQ3pCLHNCQUFzQjtJQUN0QixtQkFBbUI7SUFDbkIsbUJBQW1CO0lBQ25CLG1CQUFtQjtJQUNuQixtQkFBbUI7SUFDbkIsa0JBQWtCO0lBQ2xCLHFCQUFxQjtJQUNyQix1QkFBdUI7SUFDdkIseUJBQXlCO0lBQ3pCLDBCQUEwQjtJQUMxQixxQkFBcUI7SUFDckIscUJBQXFCO0lBQ3JCLHNCQUFzQjtJQUN0QixvQkFBb0I7QUFDeEI7O0FBRUE7SUFDSSxlQUFlO0lBQ2YsdUJBQXVCO0FBQzNCOztBQUVBO0lBQ0ksa0NBQWtDO0lBQ2xDLGdCQUFnQjtJQUNoQixZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksZUFBZTtBQUNuQjs7QUFFQTtJQUNJLGVBQWU7QUFDbkI7O0FBRUEsR0FBRyxtQkFBbUIsQ0FBQzs7QUFFdkI7RUFDRSxzQkFBc0I7RUFDdEIsZ0JBQWdCO0VBQ2hCLGNBQWM7QUFDaEI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IseUJBQXlCO0VBQ3pCLGdCQUFnQjtFQUNoQix5QkFBeUI7QUFDM0I7O0FBRUEsSUFBSSx5QkFBeUIsQ0FB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QUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0k7UUFDSSx5QkFBeUI7SUFDN0I7O0FBRUo7O0FBRUE7SUFDSTtRQUNJLHdCQUF3QjtRQUN4QiwyRUFBMkU7SUFDL0U7O0lBRUE7UUFDSSw2QkFBNkI7SUFDakM7O0lBRUE7UUFDSSxhQUFhO1FBQ2IsOEJBQThCO0lBQ2xDOztJQUVBO1FBQ0ksc0JBQXNCO1FBQ3RCLGdCQUFnQjtJQUNwQjs7SUFFQTtRQUNJLDRCQUE0QjtRQUM1QixjQUFjO0lBQ2xCOztJQUVBO1FBQ0ksNEJBQTRCO0lBQ2hDOztJQUVBO1FBQ0ksNEJBQTRCO0lBQ2hDOztJQUVBO1FBQ0ksbUJBQW1CO0lBQ3ZCOztJQUVBO1FBQ0ksdUJBQXVCO1FBQ3ZCLFVBQVU7UUFDVixnQkFBZ0I7SUFDcEI7O0lBRUE7UUFDSSxhQUFhO1FBQ2IsdUJBQXVCO0lBQzNCOztJQUVBO1FBQ0ksZ0JBQWdCO0lBQ3BCOztJQUVBO1FBQ0ksNkJBQTZCO1FBQzdCLGdCQUFnQjtJQUNwQjs7SUFFQTtRQUNJLGVBQWU7SUFDbkI7O0lBRUE7UUFDSSxhQUFhO0lBQ2pCOztJQUVBO1FBQ0ksYUFBYTtJQUNqQjs7SUFFQTtRQUNJLGFBQWE7SUFDakI7O0lBRUE7UUFDSSxnQkFBZ0I7SUFDcEI7O0lBRUE7UUFDSSxnQkFBZ0I7SUFDcEI7O0FBRUpcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCB1cmwoJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9RXBpbG9ndWU6aXRhbCx3Z2h0QDAsMTAwOzAsMjAwOzAsMzAwOzAsNDAwOzAsNTAwOzAsNjAwOzAsNzAwOzAsODAwOzAsOTAwOzEsMTAwOzEsMjAwOzEsMzAwOzEsNDAwOzEsNTAwOzEsNjAwOzEsNzAwOzEsODAwOzEsOTAwJmZhbWlseT1JbnRlcjp3Z2h0QDEwMDsyMDA7MzAwOzQwMDs1MDA7NjAwOzcwMDs4MDA7OTAwJmZhbWlseT1PcmJpdHJvbjp3Z2h0QDQwMDs1MDA7NjAwOzcwMDs4MDA7OTAwJmZhbWlseT1TaW50b255OndnaHRANDAwOzcwMCZkaXNwbGF5PXN3YXAnKTtcXG5AaW1wb3J0ICBcXFwidGFidWxhdG9yLXRhYmxlc1xcXCI7XFxuXFxuKiB7XFxuICAgIG1hcmdpbjogMDtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuOnJvb3Qge1xcbiAgICAtLWdpZ2FudGljLXRleHQ6IDQuNzY4cmVtO1xcbiAgICAtLWp1bWJvLXRleHQ6IDMuODE1cmVtO1xcbiAgICAtLWgxLXRleHQ6IDMuMDUycmVtO1xcbiAgICAtLWgyLXRleHQ6IDIuNDQxcmVtO1xcbiAgICAtLWgzLXRleHQ6IDEuOTUzcmVtO1xcbiAgICAtLWg0LXRleHQ6IDEuNTYzcmVtO1xcbiAgICAtLWg1LXRleHQ6IDEuMjVyZW07XFxuICAgIC0tc21hbGwtdGV4dDogMC43MnJlbTtcXG4gICAgLS1zbWFsbGVyLXRleHQ6IDAuNjRyZW07XFxuICAgIC0tc21hbGxlc3QtdGV4dDogMC41MTJyZW07XFxuICAgIC0tbWFpbi1jb2xvcjogcmdiKDAsMzIsOTEpO1xcbiAgICAtLXRleHQtY29sb3I6ICMwZDA2MDc7XFxuICAgIC0tZGFyay1jb2xvcjogIzJiMmIyYjtcXG4gICAgLS10aGlyZC1jb2xvcjogI2I5ZTkzNztcXG4gICAgLS1yZWQtY29sb3I6ICNiOTAwMDA7XFxufVxcblxcbmh0bWwge1xcbiAgICBmb250LXNpemU6IDEwMCU7XFxuICAgIHNjcm9sbC1iZWhhdmlvcjogc21vb3RoO1xcbn1cXG5cXG5ib2R5IHtcXG4gICAgZm9udC1mYW1pbHk6ICdTaW50b255Jywgc2Fucy1zZXJpZjtcXG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gICAgY29sb3I6IHdoaXRlO1xcbn1cXG5cXG5hIHtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG5idXR0b24ge1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbnAge21hcmdpbi1ib3R0b206IDFyZW07fVxcblxcbmgxLCBoMiwgaDMsIGg0LCBoNSB7XFxuICBtYXJnaW46IDNyZW0gMCAxLjM4cmVtO1xcbiAgZm9udC13ZWlnaHQ6IDcwMDtcXG4gIGxpbmUtaGVpZ2h0OiAxO1xcbn1cXG5cXG5oMSB7XFxuICBtYXJnaW4tdG9wOiAwO1xcbiAgZm9udC1zaXplOiB2YXIoLS1oMS10ZXh0KTtcXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XFxuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xcbn1cXG5cXG5oMiB7Zm9udC1zaXplOiB2YXIoLS1oMi10ZXh0KTt9XFxuXFxuaDMge2ZvbnQtc2l6ZTogdmFyKC0taDMtdGV4dCk7fVxcblxcbmg0IHtmb250LXNpemU6IHZhcigtLWg0LXRleHQpO31cXG5cXG5oNSB7Zm9udC1zaXplOiB2YXIoLS1oNS10ZXh0KTt9XFxuXFxuLm1hdGVyaWFsLXN5bWJvbHMtb3V0bGluZWQge1xcbiAgZm9udC12YXJpYXRpb24tc2V0dGluZ3M6XFxuICAnRklMTCcgMCxcXG4gICd3Z2h0JyA0MDAsXFxuICAnR1JBRCcgMCxcXG4gICdvcHN6JyAyNFxcbn1cXG5cXG51bCB7bGlzdC1zdHlsZS10eXBlOiBub25lO31cXG5cXG5hIHtcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbiAgICBjb2xvcjogaW5oZXJpdDtcXG59XFxuXFxuLmhlYWRlciB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1tYWluLWNvbG9yKTtcXG59XFxuXFxuLmhlYWRlcl9fbG9nbyB7XFxuICAgIGhlaWdodDogYXV0bztcXG4gICAgd2lkdGg6IDEwMHB4O1xcbn1cXG5cXG4uZGl2aWRlciB7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgbWFyZ2luLXRvcDogMTBweDtcXG4gICAgd2lkdGg6IDE2MHB4O1xcbiAgICBib3JkZXItdG9wOiAxcHggc29saWQgd2hpdGU7XFxufVxcblxcbi5oZWFkZXJfX3RpdGxlIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGhlaWdodDogMTUwcHg7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBnYXA6IDE1cHg7XFxufVxcblxcbi5oZWFkZXJfX3RpdGxlX190ZXh0IHtcXG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXG4gICAgZm9udC13ZWlnaHQ6IDkwMDtcXG4gICAgZm9udC1zaXplOiB2YXIoLS1oMS10ZXh0KTtcXG4gICAgZm9udC1mYW1pbHk6ICdJbnRlcicsIHNhbnMtc2VyaWY7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgd2lkdGg6IDI1MHB4O1xcbn1cXG5cXG4uaGVhZGVyX19iYWRnZSB7XFxuICAgIHdpZHRoOiAtd2Via2l0LWZpbGwtYXZhaWxhYmxlO1xcbiAgICBiYWNrZ3JvdW5kOiByZ2IoMCwzMiw5MSk7XFxuICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxODBkZWcsIHJnYmEoMCwzMiw5MSwxKSAwJSwgcmdiYSgwLDAsMCwxKSAxMDAlKTtcXG59XFxuXFxuLmhlYWRlcl9fc3RhdHMtc2VjdGlvbiB7XFxuICAgIHdpZHRoOiAtd2Via2l0LWZpbGwtYXZhaWxhYmxlO1xcbiAgICBwYWRkaW5nOiAxNXB4IDI1cHggNDBweCAyNXB4O1xcbn1cXG5cXG4uaGVhZGVyX19zdGF0cy1zZWN0aW9uX19saXN0X19pdGVtX19sb2dvIHtcXG4gICAgd2lkdGg6IDUwcHg7XFxuICAgIGhlaWdodDogYXV0bztcXG59XFxuXFxuXFxuLmhlYWRlcl9fc3RhdHMtc2VjdGlvbl9fdG9wLXNlY3Rpb24ge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcXG4gICAgbWFyZ2luLWJvdHRvbTogMjVweDtcXG4gICAgbWFyZ2luLXRvcDogMjVweDtcXG59XFxuXFxuLnNlY3Rpb24tdGl0bGUgPiBzcGFuIHtcXG4gICAgZm9udC1zaXplOiB2YXIoLS1oNC10ZXh0KTtcXG4gICAgZm9udC1mYW1pbHk6ICdTaW50b255Jywgc2Fucy1zZXJpZjtcXG4gICAgZm9udC13ZWlnaHQ6IDcwMDtcXG59XFxuXFxuLmhlYWRlcl9fc3RhdHMtc2VjdGlvbi10b3Age1xcbiAgICBwYWRkaW5nLXRvcDogMTBweDtcXG59XFxuXFxuLmhlYWRlcl9fc3RhdHMtc2VjdGlvbl9fdG9wIHtcXG4gICAgY29sb3I6IHdoaXRlO1xcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xcbiAgICBmb250LXdlaWdodDogNzAwO1xcbiAgICBmb250LXNpemU6IHZhcigtLXNtYWxsZXItdGV4dCk7XFxufVxcblxcbi5zdGF0cy1yZXN1bHRzIHtcXG4gICAgY29sb3I6IHdoaXRlO1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIGZvbnQtc2l6ZTogdmFyKC0taDEtdGV4dCk7XFxuICAgIGZvbnQtd2VpZ2h0OiA3MDA7XFxufVxcblxcbi5wYXJ0aWNpcGF0aW9uIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZ2FwOiAxNXB4O1xcbiAgICBwYWRkaW5nOiAxMHB4O1xcbn1cXG5cXG4udGVhbS1sb2dvIHtcXG4gICAgd2lkdGg6IDQwcHg7XFxuICAgIGhlaWdodDogYXV0bztcXG59XFxuXFxuLnRhYnVsYXRvciB7XFxuICAgIGJvcmRlci1jb2xvcjogI2M1YzVjNTtcXG5cXG59XFxuXFxuLmhlYWRlcl9fc3RhdHMtc2VjdGlvbi1taWRkbGUge1xcbiAgICBwYWRkaW5nLWJvdHRvbTogNXB4O1xcbiAgICBwYWRkaW5nLXRvcDogMTVweDtcXG59XFxuXFxuLmhlYWRlcl9fc3RhdHMtc2VjdGlvLWJvdHRvbS1zZWN0aW9uIHtcXG4gICAgbWFyZ2luLXRvcDogMjVweDtcXG59XFxuXFxuLmhlYWRlcl9fc3RhdHMtc2VjdGlvLWJvdHRvbS1zZWN0aW9uIC5kaXZpZGVyIHtcXG4gICAgd2lkdGg6IDIwMHB4O1xcbn1cXG5cXG4jc3RhdHMtdGFibGUge1xcbiAgICBtYXJnaW4tYm90dG9tOiAzNXB4O1xcbiAgICBtYXJnaW4tdG9wOiAzNXB4O1xcbn1cXG5cXG4jc3RhdHMtdGFibGUgLnRhYnVsYXRvci1jZWxsW3RhYnVsYXRvci1maWVsZD1cXFwiZXF1aXBlXFxcIl0ge1xcbiAgICBmb250LXNpemU6IHZhcigtLXNtYWxsLXRleHQpO1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyLFxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wge1xcbiAgICBib3JkZXItY29sb3I6ICNjNWM1YzU7XFxuICAgIGNvbG9yOiAjZGZkZmRmO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMGEwYTBhO1xcbiAgICBmb250LXdlaWdodDogNjAwO1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sIHtcXG4gICAgaGVpZ2h0OiA0MHB4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG59XFxuXFxuI3N0YXRzLXRhYmxlIC50YWJ1bGF0b3ItY2VsbCB7XFxuICAgIGdhcDogMTVweDtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgY29sb3I6I2ZmZjtcXG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcXG59XFxuXFxuI3N0YXRzLXRhYmxlIC50YWJ1bGF0b3ItY2VsbCA+IGRpdiB7XFxuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XFxufVxcblxcbiNzdGF0cy10YWJsZSAudGFidWxhdG9yLWNlbGwgPiBpbWcge1xcbiAgICB3aWR0aDogYXV0bztcXG4gICAgbWF4LXdpZHRoOiA1OXB4O1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIHBhZGRpbmctbGVmdDogNXB4O1xcbiAgICBwYWRkaW5nLXJpZ2h0OiA1cHg7XFxufVxcblxcbi50YWJ1bGF0b3ItY2VsbCA+IGltZyB7XFxuICAgIHdpZHRoOiBhdXRvO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxufVxcblxcbi8qVGhlbWUgdGhlIFRhYnVsYXRvciBlbGVtZW50Ki9cXG4jcGljay10YWJsZSB7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNjNWM1YzU7XFxufVxcblxcbi8qVGhlbWUgdGhlIGhlYWRlciovXFxuLnRhYnVsYXRvci1oZWFkZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiMxZDE5MWE7XFxuICAgIGNvbG9yOiNmZmY7XFxufVxcblxcbi8qQWxsb3cgY29sdW1uIGhlYWRlciBuYW1lcyB0byB3cmFwIGxpbmVzKi9cXG4jcGljay10YWJsZSAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbCxcXG4jcGljay10YWJsZSAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC1yb3ctaGFuZGxlIHtcXG4gICAgd2hpdGUtc3BhY2U6IG5vcm1hbDtcXG59XFxuXFxuLypDb2xvciB0aGUgdGFibGUgcm93cyBiYXNlIG9uIHBsYXllciBuYW1lKi9cXG4jcGljay10YWJsZSAudGFidWxhdG9yLXRhYmxlIC50YWJ1bGF0b3Itcm93LmEtcGxheWVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjtcXG59XFxuXFxuI3BpY2stdGFibGUgLnRhYnVsYXRvci10YWJsZSAudGFidWxhdG9yLXJvdy5hbm90aGVyLXBsYXllciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNkYmRiZGI7XFxufVxcblxcbiNwaWNrLXRhYmxlIC50YWJ1bGF0b3ItY2VsbFt0YWJ1bGF0b3ItZmllbGQ9XFxcImpvdWV1clxcXCJdIHtcXG4gICAgZm9udC1zaXplOiB2YXIoLS1zbWFsbC10ZXh0KTtcXG59XFxuXFxuLyogQ29sb3IgdGhlIGJvcmRlciBjZWxscyAqL1xcbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCB7XFxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjYzVjNWM1O1xcbn1cXG5cXG4jc3RhdHMtdGFibGUgLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsOmxhc3Qtb2YtdHlwZSxcXG4jc3RhdHMtdGFibGUgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2w6bGFzdC1vZi10eXBlIHtcXG4gICAgYm9yZGVyLXJpZ2h0OiBub25lO1xcbn1cXG5cXG4jc3RhdHMtdGFibGUgLnRhYnVsYXRvci1yb3c6bGFzdC1vZi10eXBlIC50YWJ1bGF0b3ItY2VsbCB7XFxuICAgIGJvcmRlci1ib3R0b206IG5vbmU7XFxufVxcblxcbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3ItZnJvemVuLnRhYnVsYXRvci1mcm96ZW4tcmlnaHQsXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWZyb3plbi50YWJ1bGF0b3ItZnJvemVuLXJpZ2h0IHtcXG4gICAgYm9yZGVyLWxlZnQ6IDFweDtcXG59XFxuXFxuLmdyYXlzY2FsZS1lZmZlY3Qge1xcbiAgICBmaWx0ZXI6IGdyYXlzY2FsZSgxMDAlKTtcXG4gIH1cXG4vKiBOSEwgVEVBTVMgQ09MT1IgKi9cXG4jc3RhdHMtdGFibGUgLmFuYWhlaW0tZHVja3Mge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNTU0NzJkO1xcbn1cXG5cXG4uYW5haGVpbS1kdWNrcyBpbWcsIC5hbmFoZWltLWR1Y2tzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2I2OTg1YTtcXG59XFxuXFxuI3N0YXRzLXRhYmxlIC5hcml6b25hLWNveW90ZXMge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzkwYjE4O1xcbn1cXG5cXG4uYXJpem9uYS1jb3lvdGVzIGltZywgLmFyaXpvbmEtY295b3RlcyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM3YTAwMjI7XFxufVxcblxcbiNzdGF0cy10YWJsZSAuYm9zdG9uLWJydWlucyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNiNDg1MTg7XFxufVxcblxcbi5ib3N0b24tYnJ1aW5zIGltZywgLmJvc3Rvbi1icnVpbnMge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmRiOTFlO1xcbn1cXG5cXG4jc3RhdHMtdGFibGUgLmJ1ZmZhbG8tc2FicmVzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzBhMWM0MDtcXG59XFxuXFxuLmJ1ZmZhbG8tc2FicmVzIGltZywgLmJ1ZmZhbG8tc2FicmVzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAyMzA4OTtcXG59XFxuXFxuI3N0YXRzLXRhYmxlIC5jYWxnYXJ5LWZsYW1lcyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM2ODExMWU7XFxufVxcblxcbi5jYWxnYXJ5LWZsYW1lcyBpbWcsIC5jYWxnYXJ5LWZsYW1lcyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlMzBhMmI7XFxufVxcblxcbiNzdGF0cy10YWJsZSAuY2Fyb2xpbmEtaHVycmljYW5lcyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM4YzI2MjY7XFxufVxcblxcbi5jYXJvbGluYS1odXJyaWNhbmVzIGltZywgLmNhcm9saW5hLWh1cnJpY2FuZXMge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYzgxMDJlO1xcbn1cXG5cXG4jc3RhdHMtdGFibGUgLmNoaWNhZ28tYmxhY2toYXdrcyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM2NzBlMWM7XFxufVxcblxcbi5jaGljYWdvLWJsYWNraGF3a3MgaW1nLCAuY2hpY2Fnby1ibGFja2hhd2tzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2UzMDgyOTtcXG59XFxuXFxuI3N0YXRzLXRhYmxlIC5jb2xvcmFkby1hdmFsYW5jaGUge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMmYxMjE0O1xcbn1cXG5cXG4uY29sb3JhZG8tYXZhbGFuY2hlIGltZywgLmNvbG9yYWRvLWF2YWxhbmNoZSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM2ZjI2M2Q7XFxufVxcblxcbiNzdGF0cy10YWJsZSAuY29sdW1idXMtYmx1ZS1qYWNrZXRzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzA5MWMzMjtcXG59XFxuXFxuLmNvbHVtYnVzLWJsdWUtamFja2V0cyBpbWcsIC5jb2x1bWJ1cy1ibHVlLWphY2tldHMge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDMyZDY1O1xcbn1cXG5cXG4jc3RhdHMtdGFibGUgLmRhbGxhcy1zdGFycyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMxNzQyMzM7XFxufVxcblxcbi5kYWxsYXMtc3RhcnMgaW1nLCAuZGFsbGFzLXN0YXJzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwNzA0YTtcXG59XFxuXFxuI3N0YXRzLXRhYmxlIC5kZXRyb2l0LXJlZC13aW5ncyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM2NDBjMTg7XFxufVxcblxcbi5kZXRyb2l0LXJlZC13aW5ncyBpbWcsIC5kZXRyb2l0LXJlZC13aW5ncyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlMzA1MjQ7XFxufVxcblxcbiNzdGF0cy10YWJsZSAuZWRtb250b24tb2lsZXJzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMTEzMTtcXG59XFxuXFxuLmVkbW9udG9uLW9pbGVycyBpbWcsIC5lZG1vbnRvbi1vaWxlcnMge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAyMDViO1xcbn1cXG5cXG4jc3RhdHMtdGFibGUgLmZsb3JpZGEtcGFudGhlcnMge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjOTIwYjIxO1xcbn1cXG5cXG4uZmxvcmlkYS1wYW50aGVycyBpbWcsIC5mbG9yaWRhLXBhbnRoZXJzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2M4MTAyZTtcXG59XFxuXFxuI3N0YXRzLXRhYmxlIC5zZWF0dGxlLWtyYWtlbiB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwYTEwMWU7XFxufVxcblxcbi5zZWF0dGxlLWtyYWtlbiBpbWcsIC5zZWF0dGxlLWtyYWtlbiB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDBmMzI7XFxufVxcblxcbiNzdGF0cy10YWJsZSAubG9zLWFuZ2VsZXMta2luZ3Mge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNWI1YjVkO1xcbn1cXG5cXG4ubG9zLWFuZ2VsZXMta2luZ3MgaW1nLCAubG9zLWFuZ2VsZXMta2luZ3Mge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYjFiNmJhO1xcbn1cXG5cXG4jc3RhdHMtdGFibGUgLm1pbm5lc290YS13aWxkIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMjIxNztcXG59XFxuXFxuLm1pbm5lc290YS13aWxkIGltZywgLm1pbm5lc290YS13aWxkIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAyNTczNjtcXG59XFxuXFxuI3N0YXRzLXRhYmxlIC5tb250cmVhbC1jYW5hZGllbnMge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNTcwZDFhO1xcbn1cXG5cXG4ubW9udHJlYWwtY2FuYWRpZW5zIGltZywgLm1vbnRyZWFsLWNhbmFkaWVucyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNjMjA4Mjg7XFxufVxcblxcbiNzdGF0cy10YWJsZSAubmFzaHZpbGxlLXByZWRhdG9ycyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM3MTU0MWE7XFxufVxcblxcbi5uYXNodmlsbGUtcHJlZGF0b3JzIGltZywgLm5hc2h2aWxsZS1wcmVkYXRvcnMge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmRiNjIzO1xcbn1cXG5cXG4jc3RhdHMtdGFibGUgLm5ldy1qZXJzZXktZGV2aWxzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzY0MGMxODtcXG59XFxuXFxuLm5ldy1qZXJzZXktZGV2aWxzIGltZywgLm5ldy1qZXJzZXktZGV2aWxzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2UxMDYyMztcXG59XFxuXFxuI3N0YXRzLXRhYmxlIC5uZXcteW9yay1pc2xhbmRlcnMge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMGIyNjQzO1xcbn1cXG5cXG4ubmV3LXlvcmstaXNsYW5kZXJzIGltZywgLm5ldy15b3JrLWlzbGFuZGVycyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDQ3OGM7XFxufVxcblxcbiNzdGF0cy10YWJsZSAubmV3LXlvcmstcmFuZ2VycyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMxODM4NTk7XFxufVxcblxcbi5uZXcteW9yay1yYW5nZXJzIGltZywgLm5ldy15b3JrLXJhbmdlcnMge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA1NmE4O1xcbn1cXG5cXG4jc3RhdHMtdGFibGUgLm90dGF3YS1zZW5hdG9ycyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM2NTBjMTk7XFxufVxcblxcbi5vdHRhd2Etc2VuYXRvcnMgaW1nLCAub3R0YXdhLXNlbmF0b3JzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2UzMDUyNjtcXG59XFxuXFxuI3N0YXRzLXRhYmxlIC5waGlsYWRlbHBoaWEtZmx5ZXJzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzZmMjkwYjtcXG59XFxuXFxuLnBoaWxhZGVscGhpYS1mbHllcnMgaW1nLCAucGhpbGFkZWxwaGlhLWZseWVycyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmYzRjMDI7XFxufVxcblxcbiNzdGF0cy10YWJsZSAucGl0dHNidXJnaC1wZW5ndWlucyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMxYjFiMWM7XFxufVxcblxcbi5waXR0c2J1cmdoLXBlbmd1aW5zIGltZywgLnBpdHRzYnVyZ2gtcGVuZ3VpbnMge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMGUwZTBmO1xcbn1cXG5cXG4jc3RhdHMtdGFibGUgLnNhbi1qb3NlLXNoYXJrcyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwYTM2M2Q7XFxufVxcblxcbi5zYW4tam9zZS1zaGFya3MgaW1nLCAuc2FuLWpvc2Utc2hhcmtzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwNmQ4MDtcXG59XFxuXFxuI3N0YXRzLXRhYmxlIC5zdC1sb3Vpcy1ibHVlcyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMxODFhMzk7XFxufVxcblxcbi5zdC1sb3Vpcy1ibHVlcyBpbWcsIC5zdC1sb3Vpcy1ibHVlcyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDMwODc7XFxufVxcblxcbiNzdGF0cy10YWJsZSAudGFtcGEtYmF5LWxpZ2h0bmluZyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwYzBlMjQ7XFxufVxcblxcbi50YW1wYS1iYXktbGlnaHRuaW5nIGltZywgLnRhbXBhLWJheS1saWdodG5pbmcge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAyMDViO1xcbn1cXG5cXG4jc3RhdHMtdGFibGUgLnRvcm9udG8tbWFwbGUtbGVhZnMge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTUxNzIyO1xcbn1cXG5cXG4udG9yb250by1tYXBsZS1sZWFmcyBpbWcsIC50b3JvbnRvLW1hcGxlLWxlYWZzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMjA1YjtcXG59XFxuXFxuI3N0YXRzLXRhYmxlIC52YW5jb3V2ZXItY2FudWNrcyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwOTFkMmU7XFxufVxcblxcbi52YW5jb3V2ZXItY2FudWNrcyBpbWcsIC52YW5jb3V2ZXItY2FudWNrcyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMTJkNTM7XFxufVxcblxcbiNzdGF0cy10YWJsZSAudmVnYXMtZ29sZGVuLWtuaWdodHMge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNTM0NzJkO1xcbn1cXG5cXG4udmVnYXMtZ29sZGVuLWtuaWdodHMgaW1nLCAudmVnYXMtZ29sZGVuLWtuaWdodHMge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYjc5NzVjO1xcbn1cXG5cXG4jc3RhdHMtdGFibGUgLndhc2hpbmd0b24tY2FwaXRhbHMge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjYwZDFiO1xcbn1cXG5cXG4ud2FzaGluZ3Rvbi1jYXBpdGFscyBpbWcsIC53YXNoaW5ndG9uLWNhcGl0YWxzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2UzMDYyODtcXG59XFxuXFxuI3N0YXRzLXRhYmxlIC53aW5uaXBlZy1qZXRzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzA5MWMzMjtcXG59XFxuXFxuLndpbm5pcGVnLWpldHMgaW1nLCAud2lubmlwZWctamV0cyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDJlNjM7XFxufVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogMzY1cHgpIHtcXG4gICAgLmhlYWRlcl9fdGl0bGVfX3RleHQge1xcbiAgICAgICAgZm9udC1zaXplOiB2YXIoLS1oMi10ZXh0KTtcXG4gICAgfVxcblxcbn1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OHB4KSB7XFxuICAgIGJvZHkge1xcbiAgICAgICAgYmFja2dyb3VuZDogcmdiKDAsMzIsOTEpO1xcbiAgICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDE4MGRlZywgcmdiYSgwLDMyLDkxLDEpIDAlLCByZ2JhKDAsMCwwLDEpIDEwMCUpO1xcbiAgICB9XFxuICAgIFxcbiAgICAuaGVhZGVyIHtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICB9XFxuXFxuICAgIC5tYWluLWluZGV4IHtcXG4gICAgICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnI7XFxuICAgIH1cXG5cXG4gICAgLmhlYWRlcl9fYmFkZ2Uge1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogbm9uZTtcXG4gICAgICAgIGJhY2tncm91bmQ6IG5vbmU7XFxuICAgIH1cXG5cXG4gICAgLnNlY3Rpb24tdGl0bGUgPiBzcGFuIHtcXG4gICAgICAgIGZvbnQtc2l6ZTogdmFyKC0tanVtYm8tdGV4dCk7XFxuICAgICAgICBsaW5lLWhlaWdodDogMTtcXG4gICAgfVxcblxcbiAgICAuaGVhZGVyX19zdGF0cy1zZWN0aW9uX190b3Age1xcbiAgICAgICAgZm9udC1zaXplOiB2YXIoLS1zbWFsbC10ZXh0KTtcXG4gICAgfVxcblxcbiAgICAuc3RhdHMtcmVzdWx0cyB7XFxuICAgICAgICBmb250LXNpemU6IHZhcigtLWp1bWJvLXRleHQpO1xcbiAgICB9XFxuXFxuICAgIC5oZWFkZXJfX3N0YXRzLXNlY3Rpb24ge1xcbiAgICAgICAgcGFkZGluZy1sZWZ0OiAxMDBweDtcXG4gICAgfVxcblxcbiAgICAuaGVhZGVyX19zdGF0cy1zZWN0aW9uX190b3Atc2VjdGlvbiB7XFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgICAgIGdhcDogMTUwcHg7XFxuICAgICAgICBtYXJnaW4tdG9wOiA1MHB4O1xcbiAgICB9XFxuXFxuICAgIC5zdGF0cy10YWJsZS1mbGV4IHtcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgfVxcblxcbiAgICAuc3RhdHMtdGFibGUtc2l6ZSB7XFxuICAgICAgICBtaW4td2lkdGg6IDQ1MHB4O1xcbiAgICB9XFxuXFxuICAgICNzdGF0cy10YWJsZSB7XFxuICAgICAgICB3aWR0aDogLXdlYmtpdC1maWxsLWF2YWlsYWJsZTtcXG4gICAgICAgIG1hcmdpbi10b3A6IDU1cHg7XFxuICAgIH1cXG5cXG4gICAgI3N0YXRzLXRhYmxlIC50YWJ1bGF0b3ItY2VsbFt0YWJ1bGF0b3ItZmllbGQ9XFxcImVxdWlwZVxcXCJdIHtcXG4gICAgICAgIGZvbnQtc2l6ZTogMXJlbTtcXG4gICAgfVxcblxcbiAgICAuaGVhZGVyX19zdGF0cy1zZWN0aW8tYm90dG9tLXNlY3Rpb24uc2VjdGlvbi10aXRsZSB7XFxuICAgICAgICBkaXNwbGF5OiBub25lO1xcbiAgICB9XFxuXFxuICAgIC5kaXZpZGVyIHtcXG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgIH1cXG5cXG4gICAgLnBpY2stdGFibGUtZmxleCB7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICB9XFxuXFxuICAgIC5waWNrLXRhYmxlLXNpemUge1xcbiAgICAgICAgbWF4LXdpZHRoOiA3MDBweDtcXG4gICAgfVxcblxcbiAgICAjcGljay10YWJsZSB7XFxuICAgICAgICBtYXJnaW4tdG9wOiAyNXB4O1xcbiAgICB9XFxuXFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSBbW1wiYm9zdG9uIGJydWluc1wiLFwiMFwiLFwiQm9zdG9uIEJydWluc1wiXSxbXCJsb3MgYW5nZWxlcyBraW5nc1wiLFwiMFwiLFwiTG9zIEFuZ2VsZXMgS2luZ3NcIl0sW1widmFuY291dmVyIGNhbnVja3NcIixcIjBcIixcIlZhbmNvdXZlciBDYW51Y2tzXCJdLFtcImNvbG9yYWRvIGF2YWxhbmNoZVwiLFwiMFwiLFwiQ29sb3JhZG8gQXZhbGFuY2hlXCJdLFtcIm5ldyB5b3JrIGlzbGFuZGVyc1wiLFwiMFwiLFwiTmV3IFlvcmsgSXNsYW5kZXJzXCJdLFtcIm90dGF3YSBzZW5hdG9yc1wiLFwiMFwiLFwiT3R0YXdhIFNlbmF0b3JzXCJdLFtcInRhbXBhIGJheSBsaWdodG5pbmdcIixcIjBcIixcIlRhbXBhIEJheSBMaWdodG5pbmdcIl0sW1wiZGV0cm9pdCByZWQgd2luZ3NcIixcIjBcIixcIkRldHJvaXQgUmVkIFdpbmdzXCJdLFtcInBpdHRzYnVyZ2ggcGVuZ3VpbnNcIixcIjBcIixcIlBpdHRzYnVyZ2ggUGVuZ3VpbnNcIl0sW1wiYnVmZmFsbyBzYWJyZXNcIixcIjBcIixcIkJ1ZmZhbG8gU2FicmVzXCJdLFtcImRhbGxhcyBzdGFyc1wiLFwiMFwiLFwiRGFsbGFzIFN0YXJzXCJdLFtcImNhcm9saW5hIGh1cnJpY2FuZXNcIixcIjBcIixcIkNhcm9saW5hIEh1cnJpY2FuZXNcIl0sW1wiY29sdW1idXMgYmx1ZSBqYWNrZXRzXCIsXCIwXCIsXCJDb2x1bWJ1cyBCbHVlIEphY2tldHNcIl0sW1wiZWRtb250b24gb2lsZXJzXCIsXCIwXCIsXCJFZG1vbnRvbiBPaWxlcnNcIl0sW1wibmV3IGplcnNleSBkZXZpbHNcIixcIjBcIixcIk5ldyBKZXJzZXkgRGV2aWxzXCJdLFtcImZsb3JpZGEgcGFudGhlcnNcIixcIjBcIixcIkZsb3JpZGEgUGFudGhlcnNcIl0sW1wibW9udHJlYWwgY2FuYWRpZW5zXCIsXCIwXCIsXCJNb250cmVhbCBDYW5hZGllbnNcIl0sW1wibmV3IHlvcmsgcmFuZ2Vyc1wiLFwiMFwiLFwiTmV3IFlvcmsgUmFuZ2Vyc1wiXSxbXCJwaGlsYWRlbHBoaWEgZmx5ZXJzXCIsXCIwXCIsXCJQaGlsYWRlbHBoaWEgRmx5ZXJzXCJdLFtcInRvcm9udG8gbWFwbGUgbGVhZnNcIixcIjBcIixcIlRvcm9udG8gTWFwbGUgTGVhZnNcIl0sW1wid2FzaGluZ3RvbiBjYXBpdGFsc1wiLFwiMFwiLFwiV2FzaGluZ3RvbiBDYXBpdGFsc1wiXSxbXCJhcml6b25hIGNveW90ZXNcIixcIjBcIixcIkFyaXpvbmEgQ295b3Rlc1wiXSxbXCJhbmFoZWltIGR1Y2tzXCIsXCIwXCIsXCJBbmFoZWltIER1Y2tzXCJdLFtcImNoaWNhZ28gYmxhY2toYXdrc1wiLFwiMFwiLFwiQ2hpY2FnbyBCbGFja2hhd2tzXCJdLFtcImNhbGdhcnkgZmxhbWVzXCIsXCIwXCIsXCJDYWxnYXJ5IEZsYW1lc1wiXSxbXCJzdC4gbG91aXMgYmx1ZXNcIixcIjBcIixcIlN0LkxvdWlzIEJsdWVzXCJdLFtcIm1pbm5lc290YSB3aWxkXCIsXCIwXCIsXCJNaW5uZXNvdGEgV2lsZFwiXSxbXCJzYW4gam9zZSBzaGFya3NcIixcIjBcIixcIlNhbiBKb3NlIFNoYXJrc1wiXSxbXCJuYXNodmlsbGUgcHJlZGF0b3JzXCIsXCIwXCIsXCJOYXNodmlsbGUgUHJlZGF0b3JzXCJdLFtcInNlYXR0bGUga3Jha2VuXCIsXCIwXCIsXCJTZWF0dGxlIEtyYWtlblwiXSxbXCJ3aW5uaXBlZyBqZXRzXCIsXCIwXCIsXCJXaW5uaXBlZyBKZXRzXCJdLFtcInZlZ2FzIGdvbGRlbiBrbmlnaHRzXCIsXCIwXCIsXCJWZWdhcyBHb2xkZW4gS25pZ2h0c1wiXV0iLCJtb2R1bGUuZXhwb3J0cyA9IFtbXCJ3aW5cIixcIiNcIixcIkpvdWV1cnNcIixcIlNhbWVkaSAxMSBub3ZlbWJyZVwiLFwiU2FtZWRpIDE4IG5vdmVtYnJlXCIsXCJTYW1lZGkgMjUgbm92ZW1icmVcIixcIlNhbWVkaSAyIGTDqWNlbWJyZVwiLFwiU2FtZWRpIDkgZMOpY2VtYnJlXCIsXCJTYW1lZGkgMTYgZMOpY2VtYnJlXCIsXCJ3XCIsXCJlXCIsXCJyXCIsXCJ0XCIsXCJ5XCIsXCJ1XCJdLFtcIjFcIixcIlwiLFwiRnJhbmNvaXMgVHJlbWJsYXlcIixcIkRldHJvaXQgUmVkIFdpbmdzXCIsXCJXYXNoaW5ndG9uIENhcGl0YWxzXCIsXCJDb2xvcmFkbyBBdmFsYW5jaGVcIixcIldpbm5pcGVnIEpldHNcIixcIk5ldyBKZXJzZXkgRGV2aWxzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMVwiLFwiXCIsXCJMb3Vpcy0gQWxleGFuZHJlIEJlbGlzbGUgUm95XCIsXCJEZXRyb2l0IFJlZCBXaW5nc1wiLFwiQm9zdG9uIEJydWluc1wiLFwiTG9zIEFuZ2VsZXMgS2luZ3NcIixcIldpbm5pcGVnIEpldHNcIixcIlRhbXBhIEJheSBMaWdodG5pbmdcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIxXCIsXCJcIixcIk1hdGhpZXUgTGFjb21iZVwiLFwiUGl0dHNidXJnaCBQZW5ndWluc1wiLFwiV2FzaGluZ3RvbiBDYXBpdGFsc1wiLFwiTG9zIEFuZ2VsZXMgS2luZ3NcIixcIldpbm5pcGVnIEpldHNcIixcIkJvc3RvbiBCcnVpbnNcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIxXCIsXCJcIixcIlBoaWxpcHBlIFJlaWRcIixcIk90dGF3YSBTZW5hdG9yc1wiLFwiQm9zdG9uIEJydWluc1wiLFwiTG9zIEFuZ2VsZXMgS2luZ3NcIixcIkNhcm9saW5hIEh1cnJpY2FuZXNcIixcIkNvbG9yYWRvIEF2YWxhbmNoZVwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjFcIixcIlwiLFwiVmluY2VudCBNZXNsYWdlXCIsXCJPdHRhd2EgU2VuYXRvcnNcIixcIldhc2hpbmd0b24gQ2FwaXRhbHNcIixcIkxvcyBBbmdlbGVzIEtpbmdzXCIsXCJXaW5uaXBlZyBKZXRzXCIsXCJEZXRyb2l0IFJlZCBXaW5nc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiQ2hhcmxlcy1BbnRvaW5lIE1lc3NpZXJcIixcIkRldHJvaXQgUmVkIFdpbmdzXCIsXCJCb3N0b24gQnJ1aW5zXCIsXCJMb3MgQW5nZWxlcyBLaW5nc1wiLFwiQ29sb3JhZG8gQXZhbGFuY2hlXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIlZpbmNlbnQgTcOpbmFyZFwiLFwiQXJpem9uYSBDb3lvdGVzXCIsXCJXYXNoaW5ndG9uIENhcGl0YWxzXCIsXCJDb2xvcmFkbyBBdmFsYW5jaGVcIixcIkZsb3JpZGEgUGFudGhlcnNcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiQ2hhcmxlcyBKdXRyYXNcIixcIk90dGF3YSBTZW5hdG9yc1wiLFwiQm9zdG9uIEJydWluc1wiLFwiVmVnYXMgR29sZGVuIEtuaWdodHNcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJNYXhpbWUgTG9yYW5nZXJcIixcIkRldHJvaXQgUmVkIFdpbmdzXCIsXCJCb3N0b24gQnJ1aW5zXCIsXCJWYW5jb3V2ZXIgQ2FudWNrc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIk9saXZpZXIgVHJlbWJsYXlcIixcIkRhbGxhcyBTdGFyc1wiLFwiV2FzaGluZ3RvbiBDYXBpdGFsc1wiLFwiVmFuY291dmVyIENhbnVja3NcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJQYXRyaWNrIExvcmFuZ2VyXCIsXCJQaXR0c2J1cmdoIFBlbmd1aW5zXCIsXCJCb3N0b24gQnJ1aW5zXCIsXCJWZWdhcyBHb2xkZW4gS25pZ2h0c1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIlBoaWxpcHBlIEp1dHJhc1wiLFwiT3R0YXdhIFNlbmF0b3JzXCIsXCJCb3N0b24gQnJ1aW5zXCIsXCJWZWdhcyBHb2xkZW4gS25pZ2h0c1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIlNlYmFzdGllbiBNZXNsYWdlXCIsXCJQaXR0c2J1cmdoIFBlbmd1aW5zXCIsXCJCb3N0b24gQnJ1aW5zXCIsXCJWYW5jb3V2ZXIgQ2FudWNrc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIlbDqXJvbmlxdWUgQmlsb2RlYXVcIixcIlBpdHRzYnVyZ2ggUGVuZ3VpbnNcIixcIkJvc3RvbiBCcnVpbnNcIixcIlZlZ2FzIEdvbGRlbiBLbmlnaHRzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiVsOpcm9uaXF1ZSBCaWxvZGVhdVwiLFwiRGV0cm9pdCBSZWQgV2luZ3NcIixcIldhc2hpbmd0b24gQ2FwaXRhbHNcIixcIlZhbmNvdXZlciBDYW51Y2tzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiSm9uYXRoYW4gQ3JhYmV5XCIsXCJEZXRyb2l0IFJlZCBXaW5nc1wiLFwiVmFuY291dmVyIENhbnVja3NcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIkpvbmF0aGFuIFBlcnJlYXVsdFwiLFwiUGl0dHNidXJnaCBQZW5ndWluc1wiLFwiVmVnYXMgR29sZGVuIEtuaWdodHNcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIkpvbmF0aGFuIFBlcnJlYXVsdFwiLFwiT3R0YXdhIFNlbmF0b3JzXCIsXCJWYW5jb3V2ZXIgQ2FudWNrc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiTWF0aGlldSBCbGFuY2hldHRlXCIsXCJPdHRhd2EgU2VuYXRvcnNcIixcIlZlZ2FzIEdvbGRlbiBLbmlnaHRzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJNYXRoaWV1IExhY29tYmVcIixcIkRldHJvaXQgUmVkIFdpbmdzXCIsXCJWZWdhcyBHb2xkZW4gS25pZ2h0c1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiTWF4aW0gRGFhbmVhdVwiLFwiRGFsbGFzIFN0YXJzXCIsXCJWZWdhcyBHb2xkZW4gS25pZ2h0c1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiUGF0cmljayBMb3JhbmdlclwiLFwiRWRtb250b24gT2lsZXJzXCIsXCJWZWdhcyBHb2xkZW4gS25pZ2h0c1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiU2ViYXN0aWVuIE1lc2xhZ2VcIixcIkRldHJvaXQgUmVkIFdpbmdzXCIsXCJWYW5jb3V2ZXIgQ2FudWNrc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiU2ltb24gSMOpYmVydFwiLFwiUGl0dHNidXJnaCBQZW5ndWluc1wiLFwiVmVnYXMgR29sZGVuIEtuaWdodHNcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIlZpbmNlbnQgTcOpbmFyZFwiLFwiRGFsbGFzIFN0YXJzXCIsXCJWZWdhcyBHb2xkZW4gS25pZ2h0c1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiVmluY2VudCBNw6luYXJkXCIsXCJPdHRhd2EgU2VuYXRvcnNcIixcIlZlZ2FzIEdvbGRlbiBLbmlnaHRzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJWaW5jZW50IE3DqW5hcmRcIixcIlBpdHRzYnVyZ2ggUGVuZ3VpbnNcIixcIlZhbmNvdXZlciBDYW51Y2tzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJBbGJlcnQgRGFscMOpLU1lc3NpZXJcIixcIkJvc3RvbiBCcnVpbnNcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiQWxiZXJ0IERhbHDDqS1NZXNzaWVyXCIsXCJCb3N0b24gQnJ1aW5zXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIkFsYmVydCBEYWxww6ktTWVzc2llclwiLFwiTG9zIEFuZ2VsZXMgS2luZ3NcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiQWxiZXJ0IERhbHDDqS1NZXNzaWVyXCIsXCJMb3MgQW5nZWxlcyBLaW5nc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJBbGJlcnQgRGFscMOpLU1lc3NpZXJcIixcIlZhbmNvdXZlciBDYW51Y2tzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIkJlcm5hcmQtT2xpdmllciBHaWd1ZXJlXCIsXCJDb2xvcmFkbyBBdmFsYW5jaGVcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiQmVybmFyZC1PbGl2aWVyIEdpZ3VlcmVcIixcIkxvcyBBbmdlbGVzIEtpbmdzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIkJlcm5hcmQtT2xpdmllciBHaWd1ZXJlXCIsXCJCb3N0b24gQnJ1aW5zXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIkJydW5vIE1hcnF1ZXR0ZVwiLFwiTmV3IFlvcmsgSXNsYW5kZXJzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIkJydW5vIE1hcnF1ZXR0ZVwiLFwiTG9zIEFuZ2VsZXMgS2luZ3NcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiQnJ1bm8gTWFycXVldHRlXCIsXCJDb2xvcmFkbyBBdmFsYW5jaGVcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiQ2VkcmljIERlbml2ZXJ2aWxsZVwiLFwiTG9zIEFuZ2VsZXMgS2luZ3NcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiQ2VkcmljIERlbml2ZXJ2aWxsZVwiLFwiTG9zIEFuZ2VsZXMgS2luZ3NcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiQ2VkcmljIERlbml2ZXJ2aWxsZVwiLFwiQm9zdG9uIEJydWluc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJDZWRyaWMgRGVuaXZlcnZpbGxlXCIsXCJCb3N0b24gQnJ1aW5zXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIkNlZHJpYyBEZW5pdmVydmlsbGVcIixcIk5ldyBZb3JrIElzbGFuZGVyc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJDaGFybGVzIEp1dHJhc1wiLFwiTG9zIEFuZ2VsZXMgS2luZ3NcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiQ2hhcmxlcyBKdXRyYXNcIixcIkxvcyBBbmdlbGVzIEtpbmdzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIkNoYXJsZXMgSnV0cmFzXCIsXCJOZXcgWW9yayBJc2xhbmRlcnNcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiQ2hhcmxlcyBKdXRyYXNcIixcIkNvbG9yYWRvIEF2YWxhbmNoZVwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJDaGFybGVzLUFudG9pbmUgTWVzc2llclwiLFwiVGFtcGEgQmF5IExpZ2h0bmluZ1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJDaGFybGVzLUFudG9pbmUgTWVzc2llclwiLFwiQ29sb3JhZG8gQXZhbGFuY2hlXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIkNoYXJsZXMtQW50b2luZSBNZXNzaWVyXCIsXCJMb3MgQW5nZWxlcyBLaW5nc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJDaGFybGVzLUFudG9pbmUgTWVzc2llclwiLFwiTG9zIEFuZ2VsZXMgS2luZ3NcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiQ2xhdWRlLU9saXZpZXIgUGVycmVhdWx0XCIsXCJDb2xvcmFkbyBBdmFsYW5jaGVcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiQ2xhdWRlLU9saXZpZXIgUGVycmVhdWx0XCIsXCJMb3MgQW5nZWxlcyBLaW5nc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJGcmFuY2lzIER1Ym9pc1wiLFwiQ29sb3JhZG8gQXZhbGFuY2hlXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIkZyYW5jaXMgRHVib2lzXCIsXCJCb3N0b24gQnJ1aW5zXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIkZyYW5jb2lzIEdhdGllblwiLFwiTG9zIEFuZ2VsZXMgS2luZ3NcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiRnJhbmNvaXMgR2F0aWVuXCIsXCJMb3MgQW5nZWxlcyBLaW5nc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJGcmFuY29pcyBHYXRpZW5cIixcIkJvc3RvbiBCcnVpbnNcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiRnJhbmNvaXMgVHJlbWJsYXlcIixcIk5ldyBZb3JrIElzbGFuZGVyc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJGcmFuY29pcyBUcmVtYmxheVwiLFwiTG9zIEFuZ2VsZXMgS2luZ3NcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiSm9uYXRoYW4gQ3JhYmV5XCIsXCJCb3N0b24gQnJ1aW5zXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIkpvbmF0aGFuIENyYWJleVwiLFwiTG9zIEFuZ2VsZXMgS2luZ3NcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiSnVzdGluIExhZnJhbmNlXCIsXCJDb2xvcmFkbyBBdmFsYW5jaGVcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiSnVzdGluIExhZnJhbmNlXCIsXCJMb3MgQW5nZWxlcyBLaW5nc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJKb25hdGhhbiBQZXJyZWF1bHRcIixcIk5ldyBZb3JrIElzbGFuZGVyc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJKb25hdGhhbiBQZXJyZWF1bHRcIixcIkxvcyBBbmdlbGVzIEtpbmdzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIkpvbmF0aGFuIFBlcnJlYXVsdFwiLFwiTG9zIEFuZ2VsZXMgS2luZ3NcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiSm9uYXRoYW4gUmljaGFyZFwiLFwiQm9zdG9uIEJydWluc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJKb25hdGhhbiBSaWNoYXJkXCIsXCJMb3MgQW5nZWxlcyBLaW5nc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJMb2ljIEJsYW5jaGV0dGVcIixcIkJvc3RvbiBCcnVpbnNcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiTG91aXMtIEFsZXhhbmRyZSBCZWxpc2xlIFJveVwiLFwiQm9zdG9uIEJydWluc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJMb3Vpcy0gQWxleGFuZHJlIEJlbGlzbGUgUm95XCIsXCJMb3MgQW5nZWxlcyBLaW5nc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJNYXRoaWV1IEJsYW5jaGV0dGVcIixcIkxvcyBBbmdlbGVzIEtpbmdzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIk1hdGhpZXUgTGFjb21iZVwiLFwiQm9zdG9uIEJydWluc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJNYXRoaWV1IExhY29tYmVcIixcIkNvbG9yYWRvIEF2YWxhbmNoZVwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJNYXRoaWV1IExhY29tYmVcIixcIkxvcyBBbmdlbGVzIEtpbmdzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIk1hdGhpZXUgTGVmZWJ2cmVcIixcIkxvcyBBbmdlbGVzIEtpbmdzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIk1hdGhpZXUgTGVmZWJ2cmVcIixcIkxvcyBBbmdlbGVzIEtpbmdzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIk1hdGhpZXUgTGVmZWJ2cmVcIixcIk5ldyBZb3JrIElzbGFuZGVyc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJNYXRoaWV1IExlZmVidnJlXCIsXCJCdWZmYWxvIFNhYnJlc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJNYXR0aGlldSBBdWdlclwiLFwiTG9zIEFuZ2VsZXMgS2luZ3NcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiTWF0dGhpZXUgQXVnZXJcIixcIkxvcyBBbmdlbGVzIEtpbmdzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIk1hdHRoaWV1IEF1Z2VyXCIsXCJDb2xvcmFkbyBBdmFsYW5jaGVcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiTWF4aW1lIExvcmFuZ2VyXCIsXCJDb2xvcmFkbyBBdmFsYW5jaGVcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiTWF4aW1lIExvcmFuZ2VyXCIsXCJDb2xvcmFkbyBBdmFsYW5jaGVcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiTWF4aW1lIExvcmFuZ2VyXCIsXCJMb3MgQW5nZWxlcyBLaW5nc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJNYXhpbWUgTG9yYW5nZXJcIixcIkxvcyBBbmdlbGVzIEtpbmdzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIk9saXZpZXIgVHJlbWJsYXlcIixcIkxvcyBBbmdlbGVzIEtpbmdzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIlBhdHJpY2sgTG9yYW5nZXJcIixcIk5ldyBZb3JrIElzbGFuZGVyc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJQYXRyaWNrIExvcmFuZ2VyXCIsXCJCb3N0b24gQnJ1aW5zXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIlBhdHJpY2sgTG9yYW5nZXJcIixcIkxvcyBBbmdlbGVzIEtpbmdzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIlBoaWxpcHBlIEp1dHJhc1wiLFwiQm9zdG9uIEJydWluc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJQaGlsaXBwZSBKdXRyYXNcIixcIkNvbG9yYWRvIEF2YWxhbmNoZVwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJQaGlsaXBwZSBKdXRyYXNcIixcIkxvcyBBbmdlbGVzIEtpbmdzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIlBoaWxpcHBlIEp1dHJhc1wiLFwiQm9zdG9uIEJydWluc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJQaGlsaXBwZSBSZWlkXCIsXCJOZXcgWW9yayBJc2xhbmRlcnNcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiUGhpbGlwcGUgUmVpZFwiLFwiTG9zIEFuZ2VsZXMgS2luZ3NcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiUm94YW5lIFByb25vdm9zdFwiLFwiQ29sb3JhZG8gQXZhbGFuY2hlXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIlNlYmFzdGllbiBNZXNsYWdlXCIsXCJCb3N0b24gQnJ1aW5zXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIlNpbW9uIEjDqWJlcnRcIixcIkNvbG9yYWRvIEF2YWxhbmNoZVwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJWaW5jZW50IETDqWNhcmllXCIsXCJCb3N0b24gQnJ1aW5zXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIlZpbmNlbnQgRMOpY2FyaWVcIixcIkxvcyBBbmdlbGVzIEtpbmdzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIlZpbmNlbnQgTWVzbGFnZVwiLFwiTG9zIEFuZ2VsZXMgS2luZ3NcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiVmluY2VudCBNZXNsYWdlXCIsXCJOZXcgWW9yayBJc2xhbmRlcnNcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdXSIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIExvZGFzaCA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIENvcHlyaWdodCBPcGVuSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL29wZW5qc2Yub3JnLz5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqL1xuOyhmdW5jdGlvbigpIHtcblxuICAvKiogVXNlZCBhcyBhIHNhZmUgcmVmZXJlbmNlIGZvciBgdW5kZWZpbmVkYCBpbiBwcmUtRVM1IGVudmlyb25tZW50cy4gKi9cbiAgdmFyIHVuZGVmaW5lZDtcblxuICAvKiogVXNlZCBhcyB0aGUgc2VtYW50aWMgdmVyc2lvbiBudW1iZXIuICovXG4gIHZhciBWRVJTSU9OID0gJzQuMTcuMjEnO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xuICB2YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuICAvKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG4gIHZhciBDT1JFX0VSUk9SX1RFWFQgPSAnVW5zdXBwb3J0ZWQgY29yZS1qcyB1c2UuIFRyeSBodHRwczovL25wbXMuaW8vc2VhcmNoP3E9cG9ueWZpbGwuJyxcbiAgICAgIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJyxcbiAgICAgIElOVkFMSURfVEVNUExfVkFSX0VSUk9SX1RFWFQgPSAnSW52YWxpZCBgdmFyaWFibGVgIG9wdGlvbiBwYXNzZWQgaW50byBgXy50ZW1wbGF0ZWAnO1xuXG4gIC8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbiAgdmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBtYXhpbXVtIG1lbW9pemUgY2FjaGUgc2l6ZS4gKi9cbiAgdmFyIE1BWF9NRU1PSVpFX1NJWkUgPSA1MDA7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIGludGVybmFsIGFyZ3VtZW50IHBsYWNlaG9sZGVyLiAqL1xuICB2YXIgUExBQ0VIT0xERVIgPSAnX19sb2Rhc2hfcGxhY2Vob2xkZXJfXyc7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY2xvbmluZy4gKi9cbiAgdmFyIENMT05FX0RFRVBfRkxBRyA9IDEsXG4gICAgICBDTE9ORV9GTEFUX0ZMQUcgPSAyLFxuICAgICAgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbiAgdmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xuICB2YXIgV1JBUF9CSU5EX0ZMQUcgPSAxLFxuICAgICAgV1JBUF9CSU5EX0tFWV9GTEFHID0gMixcbiAgICAgIFdSQVBfQ1VSUllfQk9VTkRfRkxBRyA9IDQsXG4gICAgICBXUkFQX0NVUlJZX0ZMQUcgPSA4LFxuICAgICAgV1JBUF9DVVJSWV9SSUdIVF9GTEFHID0gMTYsXG4gICAgICBXUkFQX1BBUlRJQUxfRkxBRyA9IDMyLFxuICAgICAgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcgPSA2NCxcbiAgICAgIFdSQVBfQVJZX0ZMQUcgPSAxMjgsXG4gICAgICBXUkFQX1JFQVJHX0ZMQUcgPSAyNTYsXG4gICAgICBXUkFQX0ZMSVBfRkxBRyA9IDUxMjtcblxuICAvKiogVXNlZCBhcyBkZWZhdWx0IG9wdGlvbnMgZm9yIGBfLnRydW5jYXRlYC4gKi9cbiAgdmFyIERFRkFVTFRfVFJVTkNfTEVOR1RIID0gMzAsXG4gICAgICBERUZBVUxUX1RSVU5DX09NSVNTSU9OID0gJy4uLic7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGhvdCBmdW5jdGlvbnMgYnkgbnVtYmVyIG9mIGNhbGxzIHdpdGhpbiBhIHNwYW4gb2YgbWlsbGlzZWNvbmRzLiAqL1xuICB2YXIgSE9UX0NPVU5UID0gODAwLFxuICAgICAgSE9UX1NQQU4gPSAxNjtcblxuICAvKiogVXNlZCB0byBpbmRpY2F0ZSB0aGUgdHlwZSBvZiBsYXp5IGl0ZXJhdGVlcy4gKi9cbiAgdmFyIExBWllfRklMVEVSX0ZMQUcgPSAxLFxuICAgICAgTEFaWV9NQVBfRkxBRyA9IDIsXG4gICAgICBMQVpZX1dISUxFX0ZMQUcgPSAzO1xuXG4gIC8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xuICB2YXIgSU5GSU5JVFkgPSAxIC8gMCxcbiAgICAgIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxLFxuICAgICAgTUFYX0lOVEVHRVIgPSAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOCxcbiAgICAgIE5BTiA9IDAgLyAwO1xuXG4gIC8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHRoZSBtYXhpbXVtIGxlbmd0aCBhbmQgaW5kZXggb2YgYW4gYXJyYXkuICovXG4gIHZhciBNQVhfQVJSQVlfTEVOR1RIID0gNDI5NDk2NzI5NSxcbiAgICAgIE1BWF9BUlJBWV9JTkRFWCA9IE1BWF9BUlJBWV9MRU5HVEggLSAxLFxuICAgICAgSEFMRl9NQVhfQVJSQVlfTEVOR1RIID0gTUFYX0FSUkFZX0xFTkdUSCA+Pj4gMTtcblxuICAvKiogVXNlZCB0byBhc3NvY2lhdGUgd3JhcCBtZXRob2RzIHdpdGggdGhlaXIgYml0IGZsYWdzLiAqL1xuICB2YXIgd3JhcEZsYWdzID0gW1xuICAgIFsnYXJ5JywgV1JBUF9BUllfRkxBR10sXG4gICAgWydiaW5kJywgV1JBUF9CSU5EX0ZMQUddLFxuICAgIFsnYmluZEtleScsIFdSQVBfQklORF9LRVlfRkxBR10sXG4gICAgWydjdXJyeScsIFdSQVBfQ1VSUllfRkxBR10sXG4gICAgWydjdXJyeVJpZ2h0JywgV1JBUF9DVVJSWV9SSUdIVF9GTEFHXSxcbiAgICBbJ2ZsaXAnLCBXUkFQX0ZMSVBfRkxBR10sXG4gICAgWydwYXJ0aWFsJywgV1JBUF9QQVJUSUFMX0ZMQUddLFxuICAgIFsncGFydGlhbFJpZ2h0JywgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUddLFxuICAgIFsncmVhcmcnLCBXUkFQX1JFQVJHX0ZMQUddXG4gIF07XG5cbiAgLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xuICB2YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgICAgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICAgIGRvbUV4Y1RhZyA9ICdbb2JqZWN0IERPTUV4Y2VwdGlvbl0nLFxuICAgICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICAgIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsXG4gICAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XScsXG4gICAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJyxcbiAgICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nLFxuICAgICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJyxcbiAgICAgIHdlYWtTZXRUYWcgPSAnW29iamVjdCBXZWFrU2V0XSc7XG5cbiAgdmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuICAvKiogVXNlZCB0byBtYXRjaCBlbXB0eSBzdHJpbmcgbGl0ZXJhbHMgaW4gY29tcGlsZWQgdGVtcGxhdGUgc291cmNlLiAqL1xuICB2YXIgcmVFbXB0eVN0cmluZ0xlYWRpbmcgPSAvXFxiX19wIFxcKz0gJyc7L2csXG4gICAgICByZUVtcHR5U3RyaW5nTWlkZGxlID0gL1xcYihfX3AgXFwrPSkgJycgXFwrL2csXG4gICAgICByZUVtcHR5U3RyaW5nVHJhaWxpbmcgPSAvKF9fZVxcKC4qP1xcKXxcXGJfX3RcXCkpIFxcK1xcbicnOy9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIEhUTUwgZW50aXRpZXMgYW5kIEhUTUwgY2hhcmFjdGVycy4gKi9cbiAgdmFyIHJlRXNjYXBlZEh0bWwgPSAvJig/OmFtcHxsdHxndHxxdW90fCMzOSk7L2csXG4gICAgICByZVVuZXNjYXBlZEh0bWwgPSAvWyY8PlwiJ10vZyxcbiAgICAgIHJlSGFzRXNjYXBlZEh0bWwgPSBSZWdFeHAocmVFc2NhcGVkSHRtbC5zb3VyY2UpLFxuICAgICAgcmVIYXNVbmVzY2FwZWRIdG1sID0gUmVnRXhwKHJlVW5lc2NhcGVkSHRtbC5zb3VyY2UpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG4gIHZhciByZUVzY2FwZSA9IC88JS0oW1xcc1xcU10rPyklPi9nLFxuICAgICAgcmVFdmFsdWF0ZSA9IC88JShbXFxzXFxTXSs/KSU+L2csXG4gICAgICByZUludGVycG9sYXRlID0gLzwlPShbXFxzXFxTXSs/KSU+L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xuICB2YXIgcmVJc0RlZXBQcm9wID0gL1xcLnxcXFsoPzpbXltcXF1dKnwoW1wiJ10pKD86KD8hXFwxKVteXFxcXF18XFxcXC4pKj9cXDEpXFxdLyxcbiAgICAgIHJlSXNQbGFpblByb3AgPSAvXlxcdyokLyxcbiAgICAgIHJlUHJvcE5hbWUgPSAvW14uW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JCkpL2c7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAgICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gICAqL1xuICB2YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nLFxuICAgICAgcmVIYXNSZWdFeHBDaGFyID0gUmVnRXhwKHJlUmVnRXhwQ2hhci5zb3VyY2UpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgd2hpdGVzcGFjZS4gKi9cbiAgdmFyIHJlVHJpbVN0YXJ0ID0gL15cXHMrLztcblxuICAvKiogVXNlZCB0byBtYXRjaCBhIHNpbmdsZSB3aGl0ZXNwYWNlIGNoYXJhY3Rlci4gKi9cbiAgdmFyIHJlV2hpdGVzcGFjZSA9IC9cXHMvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHdyYXAgZGV0YWlsIGNvbW1lbnRzLiAqL1xuICB2YXIgcmVXcmFwQ29tbWVudCA9IC9cXHsoPzpcXG5cXC9cXCogXFxbd3JhcHBlZCB3aXRoIC4rXFxdIFxcKlxcLyk/XFxuPy8sXG4gICAgICByZVdyYXBEZXRhaWxzID0gL1xce1xcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggKC4rKVxcXSBcXCovLFxuICAgICAgcmVTcGxpdERldGFpbHMgPSAvLD8gJiAvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHdvcmRzIGNvbXBvc2VkIG9mIGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgcmVBc2NpaVdvcmQgPSAvW15cXHgwMC1cXHgyZlxceDNhLVxceDQwXFx4NWItXFx4NjBcXHg3Yi1cXHg3Zl0rL2c7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gdmFsaWRhdGUgdGhlIGB2YWxpZGF0ZWAgb3B0aW9uIGluIGBfLnRlbXBsYXRlYCB2YXJpYWJsZS5cbiAgICpcbiAgICogRm9yYmlkcyBjaGFyYWN0ZXJzIHdoaWNoIGNvdWxkIHBvdGVudGlhbGx5IGNoYW5nZSB0aGUgbWVhbmluZyBvZiB0aGUgZnVuY3Rpb24gYXJndW1lbnQgZGVmaW5pdGlvbjpcbiAgICogLSBcIigpLFwiIChtb2RpZmljYXRpb24gb2YgZnVuY3Rpb24gcGFyYW1ldGVycylcbiAgICogLSBcIj1cIiAoZGVmYXVsdCB2YWx1ZSlcbiAgICogLSBcIltde31cIiAoZGVzdHJ1Y3R1cmluZyBvZiBmdW5jdGlvbiBwYXJhbWV0ZXJzKVxuICAgKiAtIFwiL1wiIChiZWdpbm5pbmcgb2YgYSBjb21tZW50KVxuICAgKiAtIHdoaXRlc3BhY2VcbiAgICovXG4gIHZhciByZUZvcmJpZGRlbklkZW50aWZpZXJDaGFycyA9IC9bKCk9LHt9XFxbXFxdXFwvXFxzXS87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG4gIHZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZztcblxuICAvKipcbiAgICogVXNlZCB0byBtYXRjaFxuICAgKiBbRVMgdGVtcGxhdGUgZGVsaW1pdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdGVtcGxhdGUtbGl0ZXJhbC1sZXhpY2FsLWNvbXBvbmVudHMpLlxuICAgKi9cbiAgdmFyIHJlRXNUZW1wbGF0ZSA9IC9cXCRcXHsoW15cXFxcfV0qKD86XFxcXC5bXlxcXFx9XSopKilcXH0vZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBgUmVnRXhwYCBmbGFncyBmcm9tIHRoZWlyIGNvZXJjZWQgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlRmxhZ3MgPSAvXFx3KiQvO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGJpbmFyeSBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG4gIHZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBvY3RhbCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG4gIHZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggTGF0aW4gVW5pY29kZSBsZXR0ZXJzIChleGNsdWRpbmcgbWF0aGVtYXRpY2FsIG9wZXJhdG9ycykuICovXG4gIHZhciByZUxhdGluID0gL1tcXHhjMC1cXHhkNlxceGQ4LVxceGY2XFx4ZjgtXFx4ZmZcXHUwMTAwLVxcdTAxN2ZdL2c7XG5cbiAgLyoqIFVzZWQgdG8gZW5zdXJlIGNhcHR1cmluZyBvcmRlciBvZiB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLiAqL1xuICB2YXIgcmVOb01hdGNoID0gLygkXikvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHVuZXNjYXBlZCBjaGFyYWN0ZXJzIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy4gKi9cbiAgdmFyIHJlVW5lc2NhcGVkU3RyaW5nID0gL1snXFxuXFxyXFx1MjAyOFxcdTIwMjlcXFxcXS9nO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjaGFyYWN0ZXIgY2xhc3Nlcy4gKi9cbiAgdmFyIHJzQXN0cmFsUmFuZ2UgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZicsXG4gICAgICByc0NvbWJvTWFya3NSYW5nZSA9ICdcXFxcdTAzMDAtXFxcXHUwMzZmJyxcbiAgICAgIHJlQ29tYm9IYWxmTWFya3NSYW5nZSA9ICdcXFxcdWZlMjAtXFxcXHVmZTJmJyxcbiAgICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsXG4gICAgICByc0NvbWJvUmFuZ2UgPSByc0NvbWJvTWFya3NSYW5nZSArIHJlQ29tYm9IYWxmTWFya3NSYW5nZSArIHJzQ29tYm9TeW1ib2xzUmFuZ2UsXG4gICAgICByc0RpbmdiYXRSYW5nZSA9ICdcXFxcdTI3MDAtXFxcXHUyN2JmJyxcbiAgICAgIHJzTG93ZXJSYW5nZSA9ICdhLXpcXFxceGRmLVxcXFx4ZjZcXFxceGY4LVxcXFx4ZmYnLFxuICAgICAgcnNNYXRoT3BSYW5nZSA9ICdcXFxceGFjXFxcXHhiMVxcXFx4ZDdcXFxceGY3JyxcbiAgICAgIHJzTm9uQ2hhclJhbmdlID0gJ1xcXFx4MDAtXFxcXHgyZlxcXFx4M2EtXFxcXHg0MFxcXFx4NWItXFxcXHg2MFxcXFx4N2ItXFxcXHhiZicsXG4gICAgICByc1B1bmN0dWF0aW9uUmFuZ2UgPSAnXFxcXHUyMDAwLVxcXFx1MjA2ZicsXG4gICAgICByc1NwYWNlUmFuZ2UgPSAnIFxcXFx0XFxcXHgwYlxcXFxmXFxcXHhhMFxcXFx1ZmVmZlxcXFxuXFxcXHJcXFxcdTIwMjhcXFxcdTIwMjlcXFxcdTE2ODBcXFxcdTE4MGVcXFxcdTIwMDBcXFxcdTIwMDFcXFxcdTIwMDJcXFxcdTIwMDNcXFxcdTIwMDRcXFxcdTIwMDVcXFxcdTIwMDZcXFxcdTIwMDdcXFxcdTIwMDhcXFxcdTIwMDlcXFxcdTIwMGFcXFxcdTIwMmZcXFxcdTIwNWZcXFxcdTMwMDAnLFxuICAgICAgcnNVcHBlclJhbmdlID0gJ0EtWlxcXFx4YzAtXFxcXHhkNlxcXFx4ZDgtXFxcXHhkZScsXG4gICAgICByc1ZhclJhbmdlID0gJ1xcXFx1ZmUwZVxcXFx1ZmUwZicsXG4gICAgICByc0JyZWFrUmFuZ2UgPSByc01hdGhPcFJhbmdlICsgcnNOb25DaGFyUmFuZ2UgKyByc1B1bmN0dWF0aW9uUmFuZ2UgKyByc1NwYWNlUmFuZ2U7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNhcHR1cmUgZ3JvdXBzLiAqL1xuICB2YXIgcnNBcG9zID0gXCJbJ1xcdTIwMTldXCIsXG4gICAgICByc0FzdHJhbCA9ICdbJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgICByc0JyZWFrID0gJ1snICsgcnNCcmVha1JhbmdlICsgJ10nLFxuICAgICAgcnNDb21ibyA9ICdbJyArIHJzQ29tYm9SYW5nZSArICddJyxcbiAgICAgIHJzRGlnaXRzID0gJ1xcXFxkKycsXG4gICAgICByc0RpbmdiYXQgPSAnWycgKyByc0RpbmdiYXRSYW5nZSArICddJyxcbiAgICAgIHJzTG93ZXIgPSAnWycgKyByc0xvd2VyUmFuZ2UgKyAnXScsXG4gICAgICByc01pc2MgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArIHJzQnJlYWtSYW5nZSArIHJzRGlnaXRzICsgcnNEaW5nYmF0UmFuZ2UgKyByc0xvd2VyUmFuZ2UgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgICByc0ZpdHogPSAnXFxcXHVkODNjW1xcXFx1ZGZmYi1cXFxcdWRmZmZdJyxcbiAgICAgIHJzTW9kaWZpZXIgPSAnKD86JyArIHJzQ29tYm8gKyAnfCcgKyByc0ZpdHogKyAnKScsXG4gICAgICByc05vbkFzdHJhbCA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgICAgcnNSZWdpb25hbCA9ICcoPzpcXFxcdWQ4M2NbXFxcXHVkZGU2LVxcXFx1ZGRmZl0pezJ9JyxcbiAgICAgIHJzU3VyclBhaXIgPSAnW1xcXFx1ZDgwMC1cXFxcdWRiZmZdW1xcXFx1ZGMwMC1cXFxcdWRmZmZdJyxcbiAgICAgIHJzVXBwZXIgPSAnWycgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgICByc1pXSiA9ICdcXFxcdTIwMGQnO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSByZWdleGVzLiAqL1xuICB2YXIgcnNNaXNjTG93ZXIgPSAnKD86JyArIHJzTG93ZXIgKyAnfCcgKyByc01pc2MgKyAnKScsXG4gICAgICByc01pc2NVcHBlciA9ICcoPzonICsgcnNVcHBlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICAgIHJzT3B0Q29udHJMb3dlciA9ICcoPzonICsgcnNBcG9zICsgJyg/OmR8bGx8bXxyZXxzfHR8dmUpKT8nLFxuICAgICAgcnNPcHRDb250clVwcGVyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86RHxMTHxNfFJFfFN8VHxWRSkpPycsXG4gICAgICByZU9wdE1vZCA9IHJzTW9kaWZpZXIgKyAnPycsXG4gICAgICByc09wdFZhciA9ICdbJyArIHJzVmFyUmFuZ2UgKyAnXT8nLFxuICAgICAgcnNPcHRKb2luID0gJyg/OicgKyByc1pXSiArICcoPzonICsgW3JzTm9uQXN0cmFsLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc09wdFZhciArIHJlT3B0TW9kICsgJykqJyxcbiAgICAgIHJzT3JkTG93ZXIgPSAnXFxcXGQqKD86MXN0fDJuZHwzcmR8KD8hWzEyM10pXFxcXGR0aCkoPz1cXFxcYnxbQS1aX10pJyxcbiAgICAgIHJzT3JkVXBwZXIgPSAnXFxcXGQqKD86MVNUfDJORHwzUkR8KD8hWzEyM10pXFxcXGRUSCkoPz1cXFxcYnxbYS16X10pJyxcbiAgICAgIHJzU2VxID0gcnNPcHRWYXIgKyByZU9wdE1vZCArIHJzT3B0Sm9pbixcbiAgICAgIHJzRW1vamkgPSAnKD86JyArIFtyc0RpbmdiYXQsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzU2VxLFxuICAgICAgcnNTeW1ib2wgPSAnKD86JyArIFtyc05vbkFzdHJhbCArIHJzQ29tYm8gKyAnPycsIHJzQ29tYm8sIHJzUmVnaW9uYWwsIHJzU3VyclBhaXIsIHJzQXN0cmFsXS5qb2luKCd8JykgKyAnKSc7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggYXBvc3Ryb3BoZXMuICovXG4gIHZhciByZUFwb3MgPSBSZWdFeHAocnNBcG9zLCAnZycpO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3NdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrcykgYW5kXG4gICAqIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3MgZm9yIHN5bWJvbHNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrc19mb3JfU3ltYm9scykuXG4gICAqL1xuICB2YXIgcmVDb21ib01hcmsgPSBSZWdFeHAocnNDb21ibywgJ2cnKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBbc3RyaW5nIHN5bWJvbHNdKGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LXVuaWNvZGUpLiAqL1xuICB2YXIgcmVVbmljb2RlID0gUmVnRXhwKHJzRml0eiArICcoPz0nICsgcnNGaXR6ICsgJyl8JyArIHJzU3ltYm9sICsgcnNTZXEsICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggY29tcGxleCBvciBjb21wb3VuZCB3b3Jkcy4gKi9cbiAgdmFyIHJlVW5pY29kZVdvcmQgPSBSZWdFeHAoW1xuICAgIHJzVXBwZXIgKyAnPycgKyByc0xvd2VyICsgJysnICsgcnNPcHRDb250ckxvd2VyICsgJyg/PScgKyBbcnNCcmVhaywgcnNVcHBlciwgJyQnXS5qb2luKCd8JykgKyAnKScsXG4gICAgcnNNaXNjVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyICsgcnNNaXNjTG93ZXIsICckJ10uam9pbignfCcpICsgJyknLFxuICAgIHJzVXBwZXIgKyAnPycgKyByc01pc2NMb3dlciArICcrJyArIHJzT3B0Q29udHJMb3dlcixcbiAgICByc1VwcGVyICsgJysnICsgcnNPcHRDb250clVwcGVyLFxuICAgIHJzT3JkVXBwZXIsXG4gICAgcnNPcmRMb3dlcixcbiAgICByc0RpZ2l0cyxcbiAgICByc0Vtb2ppXG4gIF0uam9pbignfCcpLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHdpdGggW3plcm8td2lkdGggam9pbmVycyBvciBjb2RlIHBvaW50cyBmcm9tIHRoZSBhc3RyYWwgcGxhbmVzXShodHRwOi8vZWV2LmVlL2Jsb2cvMjAxNS8wOS8xMi9kYXJrLWNvcm5lcnMtb2YtdW5pY29kZS8pLiAqL1xuICB2YXIgcmVIYXNVbmljb2RlID0gUmVnRXhwKCdbJyArIHJzWldKICsgcnNBc3RyYWxSYW5nZSAgKyByc0NvbWJvUmFuZ2UgKyByc1ZhclJhbmdlICsgJ10nKTtcblxuICAvKiogVXNlZCB0byBkZXRlY3Qgc3RyaW5ncyB0aGF0IG5lZWQgYSBtb3JlIHJvYnVzdCByZWdleHAgdG8gbWF0Y2ggd29yZHMuICovXG4gIHZhciByZUhhc1VuaWNvZGVXb3JkID0gL1thLXpdW0EtWl18W0EtWl17Mn1bYS16XXxbMC05XVthLXpBLVpdfFthLXpBLVpdWzAtOV18W15hLXpBLVowLTkgXS87XG5cbiAgLyoqIFVzZWQgdG8gYXNzaWduIGRlZmF1bHQgYGNvbnRleHRgIG9iamVjdCBwcm9wZXJ0aWVzLiAqL1xuICB2YXIgY29udGV4dFByb3BzID0gW1xuICAgICdBcnJheScsICdCdWZmZXInLCAnRGF0YVZpZXcnLCAnRGF0ZScsICdFcnJvcicsICdGbG9hdDMyQXJyYXknLCAnRmxvYXQ2NEFycmF5JyxcbiAgICAnRnVuY3Rpb24nLCAnSW50OEFycmF5JywgJ0ludDE2QXJyYXknLCAnSW50MzJBcnJheScsICdNYXAnLCAnTWF0aCcsICdPYmplY3QnLFxuICAgICdQcm9taXNlJywgJ1JlZ0V4cCcsICdTZXQnLCAnU3RyaW5nJywgJ1N5bWJvbCcsICdUeXBlRXJyb3InLCAnVWludDhBcnJheScsXG4gICAgJ1VpbnQ4Q2xhbXBlZEFycmF5JywgJ1VpbnQxNkFycmF5JywgJ1VpbnQzMkFycmF5JywgJ1dlYWtNYXAnLFxuICAgICdfJywgJ2NsZWFyVGltZW91dCcsICdpc0Zpbml0ZScsICdwYXJzZUludCcsICdzZXRUaW1lb3V0J1xuICBdO1xuXG4gIC8qKiBVc2VkIHRvIG1ha2UgdGVtcGxhdGUgc291cmNlVVJMcyBlYXNpZXIgdG8gaWRlbnRpZnkuICovXG4gIHZhciB0ZW1wbGF0ZUNvdW50ZXIgPSAtMTtcblxuICAvKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG4gIHZhciB0eXBlZEFycmF5VGFncyA9IHt9O1xuICB0eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tpbnQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50OFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuICB0eXBlZEFycmF5VGFnc1thcmdzVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2FycmF5VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tlcnJvclRhZ10gPSB0eXBlZEFycmF5VGFnc1tmdW5jVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tzZXRUYWddID0gdHlwZWRBcnJheVRhZ3Nbc3RyaW5nVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgc3VwcG9ydGVkIGJ5IGBfLmNsb25lYC4gKi9cbiAgdmFyIGNsb25lYWJsZVRhZ3MgPSB7fTtcbiAgY2xvbmVhYmxlVGFnc1thcmdzVGFnXSA9IGNsb25lYWJsZVRhZ3NbYXJyYXlUYWddID1cbiAgY2xvbmVhYmxlVGFnc1thcnJheUJ1ZmZlclRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGFWaWV3VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbYm9vbFRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGVUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tmbG9hdDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZmxvYXQ2NFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2ludDhUYWddID0gY2xvbmVhYmxlVGFnc1tpbnQxNlRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2ludDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbbWFwVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbbnVtYmVyVGFnXSA9IGNsb25lYWJsZVRhZ3Nbb2JqZWN0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbcmVnZXhwVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc2V0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3Nbc3RyaW5nVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc3ltYm9sVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbdWludDhUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50OENsYW1wZWRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t1aW50MTZUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbiAgY2xvbmVhYmxlVGFnc1tlcnJvclRhZ10gPSBjbG9uZWFibGVUYWdzW2Z1bmNUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBMYXRpbiBVbmljb2RlIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy4gKi9cbiAgdmFyIGRlYnVycmVkTGV0dGVycyA9IHtcbiAgICAvLyBMYXRpbi0xIFN1cHBsZW1lbnQgYmxvY2suXG4gICAgJ1xceGMwJzogJ0EnLCAgJ1xceGMxJzogJ0EnLCAnXFx4YzInOiAnQScsICdcXHhjMyc6ICdBJywgJ1xceGM0JzogJ0EnLCAnXFx4YzUnOiAnQScsXG4gICAgJ1xceGUwJzogJ2EnLCAgJ1xceGUxJzogJ2EnLCAnXFx4ZTInOiAnYScsICdcXHhlMyc6ICdhJywgJ1xceGU0JzogJ2EnLCAnXFx4ZTUnOiAnYScsXG4gICAgJ1xceGM3JzogJ0MnLCAgJ1xceGU3JzogJ2MnLFxuICAgICdcXHhkMCc6ICdEJywgICdcXHhmMCc6ICdkJyxcbiAgICAnXFx4YzgnOiAnRScsICAnXFx4YzknOiAnRScsICdcXHhjYSc6ICdFJywgJ1xceGNiJzogJ0UnLFxuICAgICdcXHhlOCc6ICdlJywgICdcXHhlOSc6ICdlJywgJ1xceGVhJzogJ2UnLCAnXFx4ZWInOiAnZScsXG4gICAgJ1xceGNjJzogJ0knLCAgJ1xceGNkJzogJ0knLCAnXFx4Y2UnOiAnSScsICdcXHhjZic6ICdJJyxcbiAgICAnXFx4ZWMnOiAnaScsICAnXFx4ZWQnOiAnaScsICdcXHhlZSc6ICdpJywgJ1xceGVmJzogJ2knLFxuICAgICdcXHhkMSc6ICdOJywgICdcXHhmMSc6ICduJyxcbiAgICAnXFx4ZDInOiAnTycsICAnXFx4ZDMnOiAnTycsICdcXHhkNCc6ICdPJywgJ1xceGQ1JzogJ08nLCAnXFx4ZDYnOiAnTycsICdcXHhkOCc6ICdPJyxcbiAgICAnXFx4ZjInOiAnbycsICAnXFx4ZjMnOiAnbycsICdcXHhmNCc6ICdvJywgJ1xceGY1JzogJ28nLCAnXFx4ZjYnOiAnbycsICdcXHhmOCc6ICdvJyxcbiAgICAnXFx4ZDknOiAnVScsICAnXFx4ZGEnOiAnVScsICdcXHhkYic6ICdVJywgJ1xceGRjJzogJ1UnLFxuICAgICdcXHhmOSc6ICd1JywgICdcXHhmYSc6ICd1JywgJ1xceGZiJzogJ3UnLCAnXFx4ZmMnOiAndScsXG4gICAgJ1xceGRkJzogJ1knLCAgJ1xceGZkJzogJ3knLCAnXFx4ZmYnOiAneScsXG4gICAgJ1xceGM2JzogJ0FlJywgJ1xceGU2JzogJ2FlJyxcbiAgICAnXFx4ZGUnOiAnVGgnLCAnXFx4ZmUnOiAndGgnLFxuICAgICdcXHhkZic6ICdzcycsXG4gICAgLy8gTGF0aW4gRXh0ZW5kZWQtQSBibG9jay5cbiAgICAnXFx1MDEwMCc6ICdBJywgICdcXHUwMTAyJzogJ0EnLCAnXFx1MDEwNCc6ICdBJyxcbiAgICAnXFx1MDEwMSc6ICdhJywgICdcXHUwMTAzJzogJ2EnLCAnXFx1MDEwNSc6ICdhJyxcbiAgICAnXFx1MDEwNic6ICdDJywgICdcXHUwMTA4JzogJ0MnLCAnXFx1MDEwYSc6ICdDJywgJ1xcdTAxMGMnOiAnQycsXG4gICAgJ1xcdTAxMDcnOiAnYycsICAnXFx1MDEwOSc6ICdjJywgJ1xcdTAxMGInOiAnYycsICdcXHUwMTBkJzogJ2MnLFxuICAgICdcXHUwMTBlJzogJ0QnLCAgJ1xcdTAxMTAnOiAnRCcsICdcXHUwMTBmJzogJ2QnLCAnXFx1MDExMSc6ICdkJyxcbiAgICAnXFx1MDExMic6ICdFJywgICdcXHUwMTE0JzogJ0UnLCAnXFx1MDExNic6ICdFJywgJ1xcdTAxMTgnOiAnRScsICdcXHUwMTFhJzogJ0UnLFxuICAgICdcXHUwMTEzJzogJ2UnLCAgJ1xcdTAxMTUnOiAnZScsICdcXHUwMTE3JzogJ2UnLCAnXFx1MDExOSc6ICdlJywgJ1xcdTAxMWInOiAnZScsXG4gICAgJ1xcdTAxMWMnOiAnRycsICAnXFx1MDExZSc6ICdHJywgJ1xcdTAxMjAnOiAnRycsICdcXHUwMTIyJzogJ0cnLFxuICAgICdcXHUwMTFkJzogJ2cnLCAgJ1xcdTAxMWYnOiAnZycsICdcXHUwMTIxJzogJ2cnLCAnXFx1MDEyMyc6ICdnJyxcbiAgICAnXFx1MDEyNCc6ICdIJywgICdcXHUwMTI2JzogJ0gnLCAnXFx1MDEyNSc6ICdoJywgJ1xcdTAxMjcnOiAnaCcsXG4gICAgJ1xcdTAxMjgnOiAnSScsICAnXFx1MDEyYSc6ICdJJywgJ1xcdTAxMmMnOiAnSScsICdcXHUwMTJlJzogJ0knLCAnXFx1MDEzMCc6ICdJJyxcbiAgICAnXFx1MDEyOSc6ICdpJywgICdcXHUwMTJiJzogJ2knLCAnXFx1MDEyZCc6ICdpJywgJ1xcdTAxMmYnOiAnaScsICdcXHUwMTMxJzogJ2knLFxuICAgICdcXHUwMTM0JzogJ0onLCAgJ1xcdTAxMzUnOiAnaicsXG4gICAgJ1xcdTAxMzYnOiAnSycsICAnXFx1MDEzNyc6ICdrJywgJ1xcdTAxMzgnOiAnaycsXG4gICAgJ1xcdTAxMzknOiAnTCcsICAnXFx1MDEzYic6ICdMJywgJ1xcdTAxM2QnOiAnTCcsICdcXHUwMTNmJzogJ0wnLCAnXFx1MDE0MSc6ICdMJyxcbiAgICAnXFx1MDEzYSc6ICdsJywgICdcXHUwMTNjJzogJ2wnLCAnXFx1MDEzZSc6ICdsJywgJ1xcdTAxNDAnOiAnbCcsICdcXHUwMTQyJzogJ2wnLFxuICAgICdcXHUwMTQzJzogJ04nLCAgJ1xcdTAxNDUnOiAnTicsICdcXHUwMTQ3JzogJ04nLCAnXFx1MDE0YSc6ICdOJyxcbiAgICAnXFx1MDE0NCc6ICduJywgICdcXHUwMTQ2JzogJ24nLCAnXFx1MDE0OCc6ICduJywgJ1xcdTAxNGInOiAnbicsXG4gICAgJ1xcdTAxNGMnOiAnTycsICAnXFx1MDE0ZSc6ICdPJywgJ1xcdTAxNTAnOiAnTycsXG4gICAgJ1xcdTAxNGQnOiAnbycsICAnXFx1MDE0Zic6ICdvJywgJ1xcdTAxNTEnOiAnbycsXG4gICAgJ1xcdTAxNTQnOiAnUicsICAnXFx1MDE1Nic6ICdSJywgJ1xcdTAxNTgnOiAnUicsXG4gICAgJ1xcdTAxNTUnOiAncicsICAnXFx1MDE1Nyc6ICdyJywgJ1xcdTAxNTknOiAncicsXG4gICAgJ1xcdTAxNWEnOiAnUycsICAnXFx1MDE1Yyc6ICdTJywgJ1xcdTAxNWUnOiAnUycsICdcXHUwMTYwJzogJ1MnLFxuICAgICdcXHUwMTViJzogJ3MnLCAgJ1xcdTAxNWQnOiAncycsICdcXHUwMTVmJzogJ3MnLCAnXFx1MDE2MSc6ICdzJyxcbiAgICAnXFx1MDE2Mic6ICdUJywgICdcXHUwMTY0JzogJ1QnLCAnXFx1MDE2Nic6ICdUJyxcbiAgICAnXFx1MDE2Myc6ICd0JywgICdcXHUwMTY1JzogJ3QnLCAnXFx1MDE2Nyc6ICd0JyxcbiAgICAnXFx1MDE2OCc6ICdVJywgICdcXHUwMTZhJzogJ1UnLCAnXFx1MDE2Yyc6ICdVJywgJ1xcdTAxNmUnOiAnVScsICdcXHUwMTcwJzogJ1UnLCAnXFx1MDE3Mic6ICdVJyxcbiAgICAnXFx1MDE2OSc6ICd1JywgICdcXHUwMTZiJzogJ3UnLCAnXFx1MDE2ZCc6ICd1JywgJ1xcdTAxNmYnOiAndScsICdcXHUwMTcxJzogJ3UnLCAnXFx1MDE3Myc6ICd1JyxcbiAgICAnXFx1MDE3NCc6ICdXJywgICdcXHUwMTc1JzogJ3cnLFxuICAgICdcXHUwMTc2JzogJ1knLCAgJ1xcdTAxNzcnOiAneScsICdcXHUwMTc4JzogJ1knLFxuICAgICdcXHUwMTc5JzogJ1onLCAgJ1xcdTAxN2InOiAnWicsICdcXHUwMTdkJzogJ1onLFxuICAgICdcXHUwMTdhJzogJ3onLCAgJ1xcdTAxN2MnOiAneicsICdcXHUwMTdlJzogJ3onLFxuICAgICdcXHUwMTMyJzogJ0lKJywgJ1xcdTAxMzMnOiAnaWonLFxuICAgICdcXHUwMTUyJzogJ09lJywgJ1xcdTAxNTMnOiAnb2UnLFxuICAgICdcXHUwMTQ5JzogXCInblwiLCAnXFx1MDE3Zic6ICdzJ1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBjaGFyYWN0ZXJzIHRvIEhUTUwgZW50aXRpZXMuICovXG4gIHZhciBodG1sRXNjYXBlcyA9IHtcbiAgICAnJic6ICcmYW1wOycsXG4gICAgJzwnOiAnJmx0OycsXG4gICAgJz4nOiAnJmd0OycsXG4gICAgJ1wiJzogJyZxdW90OycsXG4gICAgXCInXCI6ICcmIzM5OydcbiAgfTtcblxuICAvKiogVXNlZCB0byBtYXAgSFRNTCBlbnRpdGllcyB0byBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgaHRtbFVuZXNjYXBlcyA9IHtcbiAgICAnJmFtcDsnOiAnJicsXG4gICAgJyZsdDsnOiAnPCcsXG4gICAgJyZndDsnOiAnPicsXG4gICAgJyZxdW90Oyc6ICdcIicsXG4gICAgJyYjMzk7JzogXCInXCJcbiAgfTtcblxuICAvKiogVXNlZCB0byBlc2NhcGUgY2hhcmFjdGVycyBmb3IgaW5jbHVzaW9uIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy4gKi9cbiAgdmFyIHN0cmluZ0VzY2FwZXMgPSB7XG4gICAgJ1xcXFwnOiAnXFxcXCcsXG4gICAgXCInXCI6IFwiJ1wiLFxuICAgICdcXG4nOiAnbicsXG4gICAgJ1xccic6ICdyJyxcbiAgICAnXFx1MjAyOCc6ICd1MjAyOCcsXG4gICAgJ1xcdTIwMjknOiAndTIwMjknXG4gIH07XG5cbiAgLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbiAgdmFyIGZyZWVQYXJzZUZsb2F0ID0gcGFyc2VGbG9hdCxcbiAgICAgIGZyZWVQYXJzZUludCA9IHBhcnNlSW50O1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG4gIHZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xuICB2YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuICAvKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbiAgdmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbiAgdmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbiAgdmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuICAvKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xuICB2YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbiAgdmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbiAgLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG4gIHZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgLy8gVXNlIGB1dGlsLnR5cGVzYCBmb3IgTm9kZS5qcyAxMCsuXG4gICAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcblxuICAgICAgaWYgKHR5cGVzKSB7XG4gICAgICAgIHJldHVybiB0eXBlcztcbiAgICAgIH1cblxuICAgICAgLy8gTGVnYWN5IGBwcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKWAgZm9yIE5vZGUuanMgPCAxMC5cbiAgICAgIHJldHVybiBmcmVlUHJvY2VzcyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9KCkpO1xuXG4gIC8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG4gIHZhciBub2RlSXNBcnJheUJ1ZmZlciA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzQXJyYXlCdWZmZXIsXG4gICAgICBub2RlSXNEYXRlID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNEYXRlLFxuICAgICAgbm9kZUlzTWFwID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNNYXAsXG4gICAgICBub2RlSXNSZWdFeHAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1JlZ0V4cCxcbiAgICAgIG5vZGVJc1NldCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzU2V0LFxuICAgICAgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvKipcbiAgICogQSBmYXN0ZXIgYWx0ZXJuYXRpdmUgdG8gYEZ1bmN0aW9uI2FwcGx5YCwgdGhpcyBmdW5jdGlvbiBpbnZva2VzIGBmdW5jYFxuICAgKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2AgYW5kIHRoZSBhcmd1bWVudHMgb2YgYGFyZ3NgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBmdW5jYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFwcGx5KGZ1bmMsIHRoaXNBcmcsIGFyZ3MpIHtcbiAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICBjYXNlIDA6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZyk7XG4gICAgICBjYXNlIDE6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSk7XG4gICAgICBjYXNlIDI6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICBjYXNlIDM6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUFnZ3JlZ2F0b3JgIGZvciBhcnJheXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICogQHBhcmFtIHtPYmplY3R9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIGFnZ3JlZ2F0ZWQgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5QWdncmVnYXRvcihhcnJheSwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaXRlcmF0ZWUodmFsdWUpLCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUVhY2goYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZvckVhY2hSaWdodGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUVhY2hSaWdodChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGlmIChpdGVyYXRlZShhcnJheVtsZW5ndGhdLCBsZW5ndGgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZXZlcnlgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICogIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RXZlcnkoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoIXByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZmlsdGVyYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUZpbHRlcihhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluY2x1ZGVzYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogc3BlY2lmeWluZyBhbiBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB0YXJnZXQgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlJbmNsdWRlcyhhcnJheSwgdmFsdWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgcmV0dXJuICEhbGVuZ3RoICYmIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgMCkgPiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFycmF5SW5jbHVkZXNgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYSBjb21wYXJhdG9yLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHRhcmdldGAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5SW5jbHVkZXNXaXRoKGFycmF5LCB2YWx1ZSwgY29tcGFyYXRvcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoY29tcGFyYXRvcih2YWx1ZSwgYXJyYXlbaW5kZXhdKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tYXBgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgKiBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5TWFwKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGVuZHMgdGhlIGVsZW1lbnRzIG9mIGB2YWx1ZXNgIHRvIGBhcnJheWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFwcGVuZC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVB1c2goYXJyYXksIHZhbHVlcykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICBvZmZzZXQgPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5yZWR1Y2VgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBbaW5pdEFjY3VtXSBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAgICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVJlZHVjZShhcnJheSwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0pIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICBpZiAoaW5pdEFjY3VtICYmIGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBhcnJheVsrK2luZGV4XTtcbiAgICB9XG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5yZWR1Y2VSaWdodGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgIGFzXG4gICAqICB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlSZWR1Y2VSaWdodChhcnJheSwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0pIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgaWYgKGluaXRBY2N1bSAmJiBsZW5ndGgpIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gYXJyYXlbLS1sZW5ndGhdO1xuICAgIH1cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIGFycmF5W2xlbmd0aF0sIGxlbmd0aCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNvbWVgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgKiBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAqICBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVNvbWUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHNpemUgb2YgYW4gQVNDSUkgYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAgICovXG4gIHZhciBhc2NpaVNpemUgPSBiYXNlUHJvcGVydHkoJ2xlbmd0aCcpO1xuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhbiBBU0NJSSBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXNjaWlUb0FycmF5KHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcuc3BsaXQoJycpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwbGl0cyBhbiBBU0NJSSBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFzY2lpV29yZHMoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZUFzY2lpV29yZCkgfHwgW107XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmZpbmRLZXlgIGFuZCBgXy5maW5kTGFzdEtleWAsXG4gICAqIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcywgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgY29sbGVjdGlvbmBcbiAgICogdXNpbmcgYGVhY2hGdW5jYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYGNvbGxlY3Rpb25gLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZm91bmQgZWxlbWVudCBvciBpdHMga2V5LCBlbHNlIGB1bmRlZmluZWRgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUZpbmRLZXkoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBlYWNoRnVuYykge1xuICAgIHZhciByZXN1bHQ7XG4gICAgZWFjaEZ1bmMoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSkge1xuICAgICAgICByZXN1bHQgPSBrZXk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbmRJbmRleGAgYW5kIGBfLmZpbmRMYXN0SW5kZXhgIHdpdGhvdXRcbiAgICogc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlRmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCwgZnJvbVJpZ2h0KSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgaW5kZXggPSBmcm9tSW5kZXggKyAoZnJvbVJpZ2h0ID8gMSA6IC0xKTtcblxuICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbmRleE9mYCB3aXRob3V0IGBmcm9tSW5kZXhgIGJvdW5kcyBjaGVja3MuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZVxuICAgICAgPyBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KVxuICAgICAgOiBiYXNlRmluZEluZGV4KGFycmF5LCBiYXNlSXNOYU4sIGZyb21JbmRleCk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBiYXNlSW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUluZGV4T2ZXaXRoKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4LCBjb21wYXJhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChjb21wYXJhdG9yKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmFOYCB3aXRob3V0IHN1cHBvcnQgZm9yIG51bWJlciBvYmplY3RzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VJc05hTih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWVhbmAgYW5kIGBfLm1lYW5CeWAgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZU1lYW4oYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgIHJldHVybiBsZW5ndGggPyAoYmFzZVN1bShhcnJheSwgaXRlcmF0ZWUpIC8gbGVuZ3RoKSA6IE5BTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eWAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUHJvcGVydHkoa2V5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eU9mYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUHJvcGVydHlPZihvYmplY3QpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlZHVjZWAgYW5kIGBfLnJlZHVjZVJpZ2h0YCwgd2l0aG91dCBzdXBwb3J0XG4gICAqIGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB3aGljaCBpdGVyYXRlcyBvdmVyIGBjb2xsZWN0aW9uYCB1c2luZyBgZWFjaEZ1bmNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7Kn0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5pdEFjY3VtIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IG9yIGxhc3QgZWxlbWVudCBvZlxuICAgKiAgYGNvbGxlY3Rpb25gIGFzIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGBjb2xsZWN0aW9uYC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVJlZHVjZShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgZWFjaEZ1bmMpIHtcbiAgICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaW5pdEFjY3VtXG4gICAgICAgID8gKGluaXRBY2N1bSA9IGZhbHNlLCB2YWx1ZSlcbiAgICAgICAgOiBpdGVyYXRlZShhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydEJ5YCB3aGljaCB1c2VzIGBjb21wYXJlcmAgdG8gZGVmaW5lIHRoZVxuICAgKiBzb3J0IG9yZGVyIG9mIGBhcnJheWAgYW5kIHJlcGxhY2VzIGNyaXRlcmlhIG9iamVjdHMgd2l0aCB0aGVpciBjb3JyZXNwb25kaW5nXG4gICAqIHZhbHVlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNvcnQuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmVyIFRoZSBmdW5jdGlvbiB0byBkZWZpbmUgc29ydCBvcmRlci5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlU29ydEJ5KGFycmF5LCBjb21wYXJlcikge1xuICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICBhcnJheS5zb3J0KGNvbXBhcmVyKTtcbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGFycmF5W2xlbmd0aF0gPSBhcnJheVtsZW5ndGhdLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc3VtYCBhbmQgYF8uc3VtQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVN1bShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgcmVzdWx0LFxuICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIGN1cnJlbnQgPSBpdGVyYXRlZShhcnJheVtpbmRleF0pO1xuICAgICAgaWYgKGN1cnJlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGN1cnJlbnQgOiAocmVzdWx0ICsgY3VycmVudCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICAgKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvUGFpcnNgIGFuZCBgXy50b1BhaXJzSW5gIHdoaWNoIGNyZWF0ZXMgYW4gYXJyYXlcbiAgICogb2Yga2V5LXZhbHVlIHBhaXJzIGZvciBgb2JqZWN0YCBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9wZXJ0eSBuYW1lcyBvZiBgcHJvcHNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBnZXQgdmFsdWVzIGZvci5cbiAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVRvUGFpcnMob2JqZWN0LCBwcm9wcykge1xuICAgIHJldHVybiBhcnJheU1hcChwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gW2tleSwgb2JqZWN0W2tleV1dO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRyaW1gLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVHJpbShzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nXG4gICAgICA/IHN0cmluZy5zbGljZSgwLCB0cmltbWVkRW5kSW5kZXgoc3RyaW5nKSArIDEpLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKVxuICAgICAgOiBzdHJpbmc7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy52YWx1ZXNgIGFuZCBgXy52YWx1ZXNJbmAgd2hpY2ggY3JlYXRlcyBhblxuICAgKiBhcnJheSBvZiBgb2JqZWN0YCBwcm9wZXJ0eSB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvcGVydHkgbmFtZXNcbiAgICogb2YgYHByb3BzYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZ2V0IHZhbHVlcyBmb3IuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VWYWx1ZXMob2JqZWN0LCBwcm9wcykge1xuICAgIHJldHVybiBhcnJheU1hcChwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gY2FjaGVIYXMoY2FjaGUsIGtleSkge1xuICAgIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltU3RhcnRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IHN0cmluZyBzeW1ib2xcbiAgICogdGhhdCBpcyBub3QgZm91bmQgaW4gdGhlIGNoYXJhY3RlciBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBzdHJTeW1ib2xzIFRoZSBzdHJpbmcgc3ltYm9scyB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0FycmF5fSBjaHJTeW1ib2xzIFRoZSBjaGFyYWN0ZXIgc3ltYm9scyB0byBmaW5kLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgdW5tYXRjaGVkIHN0cmluZyBzeW1ib2wuXG4gICAqL1xuICBmdW5jdGlvbiBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBzdHJTeW1ib2xzLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIGJhc2VJbmRleE9mKGNoclN5bWJvbHMsIHN0clN5bWJvbHNbaW5kZXhdLCAwKSA+IC0xKSB7fVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltRW5kYCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHN0cmluZyBzeW1ib2xcbiAgICogdGhhdCBpcyBub3QgZm91bmQgaW4gdGhlIGNoYXJhY3RlciBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBzdHJTeW1ib2xzIFRoZSBzdHJpbmcgc3ltYm9scyB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0FycmF5fSBjaHJTeW1ib2xzIFRoZSBjaGFyYWN0ZXIgc3ltYm9scyB0byBmaW5kLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbGFzdCB1bm1hdGNoZWQgc3RyaW5nIHN5bWJvbC5cbiAgICovXG4gIGZ1bmN0aW9uIGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykge1xuICAgIHZhciBpbmRleCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGluZGV4LS0gJiYgYmFzZUluZGV4T2YoY2hyU3ltYm9scywgc3RyU3ltYm9sc1tpbmRleF0sIDApID4gLTEpIHt9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG51bWJlciBvZiBgcGxhY2Vob2xkZXJgIG9jY3VycmVuY2VzIGluIGBhcnJheWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB0byBzZWFyY2ggZm9yLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciBjb3VudC5cbiAgICovXG4gIGZ1bmN0aW9uIGNvdW50SG9sZGVycyhhcnJheSwgcGxhY2Vob2xkZXIpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSAwO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBpZiAoYXJyYXlbbGVuZ3RoXSA9PT0gcGxhY2Vob2xkZXIpIHtcbiAgICAgICAgKytyZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy5kZWJ1cnJgIHRvIGNvbnZlcnQgTGF0aW4tMSBTdXBwbGVtZW50IGFuZCBMYXRpbiBFeHRlbmRlZC1BXG4gICAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxldHRlciBUaGUgbWF0Y2hlZCBsZXR0ZXIgdG8gZGVidXJyLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBsZXR0ZXIuXG4gICAqL1xuICB2YXIgZGVidXJyTGV0dGVyID0gYmFzZVByb3BlcnR5T2YoZGVidXJyZWRMZXR0ZXJzKTtcblxuICAvKipcbiAgICogVXNlZCBieSBgXy5lc2NhcGVgIHRvIGNvbnZlcnQgY2hhcmFjdGVycyB0byBIVE1MIGVudGl0aWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgdmFyIGVzY2FwZUh0bWxDaGFyID0gYmFzZVByb3BlcnR5T2YoaHRtbEVzY2FwZXMpO1xuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRlbXBsYXRlYCB0byBlc2NhcGUgY2hhcmFjdGVycyBmb3IgaW5jbHVzaW9uIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIGZ1bmN0aW9uIGVzY2FwZVN0cmluZ0NoYXIoY2hyKSB7XG4gICAgcmV0dXJuICdcXFxcJyArIHN0cmluZ0VzY2FwZXNbY2hyXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBgc3RyaW5nYCBjb250YWlucyBVbmljb2RlIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSBzeW1ib2wgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGhhc1VuaWNvZGUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHJlSGFzVW5pY29kZS50ZXN0KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIGEgd29yZCBjb21wb3NlZCBvZiBVbmljb2RlIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSB3b3JkIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBoYXNVbmljb2RlV29yZChzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVIYXNVbmljb2RlV29yZC50ZXN0KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYGl0ZXJhdG9yYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGl0ZXJhdG9yIFRoZSBpdGVyYXRvciB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGl0ZXJhdG9yVG9BcnJheShpdGVyYXRvcikge1xuICAgIHZhciBkYXRhLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICghKGRhdGEgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGRhdGEudmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICAgIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IFtrZXksIHZhbHVlXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGFsbCBgcGxhY2Vob2xkZXJgIGVsZW1lbnRzIGluIGBhcnJheWAgd2l0aCBhbiBpbnRlcm5hbCBwbGFjZWhvbGRlclxuICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGVpciBpbmRleGVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB0byByZXBsYWNlLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgKi9cbiAgZnVuY3Rpb24gcmVwbGFjZUhvbGRlcnMoYXJyYXksIHBsYWNlaG9sZGVyKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBpZiAodmFsdWUgPT09IHBsYWNlaG9sZGVyIHx8IHZhbHVlID09PSBQTEFDRUhPTERFUikge1xuICAgICAgICBhcnJheVtpbmRleF0gPSBQTEFDRUhPTERFUjtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHNldGAgdG8gYW4gYXJyYXkgb2YgaXRzIHZhbHVlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWVzLlxuICAgKi9cbiAgZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gICAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHNldGAgdG8gaXRzIHZhbHVlLXZhbHVlIHBhaXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIHNldFRvUGFpcnMoc2V0KSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICAgIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXN1bHRbKytpbmRleF0gPSBbdmFsdWUsIHZhbHVlXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5pbmRleE9mYCB3aGljaCBwZXJmb3JtcyBzdHJpY3QgZXF1YWxpdHlcbiAgICogY29tcGFyaXNvbnMgb2YgdmFsdWVzLCBpLmUuIGA9PT1gLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5sYXN0SW5kZXhPZmAgd2hpY2ggcGVyZm9ybXMgc3RyaWN0IGVxdWFsaXR5XG4gICAqIGNvbXBhcmlzb25zIG9mIHZhbHVlcywgaS5lLiBgPT09YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaWN0TGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggKyAxO1xuICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBudW1iZXIgb2Ygc3ltYm9scyBpbiBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaW5nU2l6ZShzdHJpbmcpIHtcbiAgICByZXR1cm4gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICA/IHVuaWNvZGVTaXplKHN0cmluZylcbiAgICAgIDogYXNjaWlTaXplKHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmluZ1RvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgPyB1bmljb2RlVG9BcnJheShzdHJpbmcpXG4gICAgICA6IGFzY2lpVG9BcnJheShzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udHJpbWAgYW5kIGBfLnRyaW1FbmRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgbm9uLXdoaXRlc3BhY2VcbiAgICogY2hhcmFjdGVyIG9mIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVyLlxuICAgKi9cbiAgZnVuY3Rpb24gdHJpbW1lZEVuZEluZGV4KHN0cmluZykge1xuICAgIHZhciBpbmRleCA9IHN0cmluZy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaW5kZXgtLSAmJiByZVdoaXRlc3BhY2UudGVzdChzdHJpbmcuY2hhckF0KGluZGV4KSkpIHt9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udW5lc2NhcGVgIHRvIGNvbnZlcnQgSFRNTCBlbnRpdGllcyB0byBjaGFyYWN0ZXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byB1bmVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIHZhciB1bmVzY2FwZUh0bWxDaGFyID0gYmFzZVByb3BlcnR5T2YoaHRtbFVuZXNjYXBlcyk7XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHNpemUgb2YgYSBVbmljb2RlIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlU2l6ZShzdHJpbmcpIHtcbiAgICB2YXIgcmVzdWx0ID0gcmVVbmljb2RlLmxhc3RJbmRleCA9IDA7XG4gICAgd2hpbGUgKHJlVW5pY29kZS50ZXN0KHN0cmluZykpIHtcbiAgICAgICsrcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGEgVW5pY29kZSBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gdW5pY29kZVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGUpIHx8IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwbGl0cyBhIFVuaWNvZGUgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlV29yZHMoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGVXb3JkKSB8fCBbXTtcbiAgfVxuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgcHJpc3RpbmUgYGxvZGFzaGAgZnVuY3Rpb24gdXNpbmcgdGhlIGBjb250ZXh0YCBvYmplY3QuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIF9cbiAgICogQHNpbmNlIDEuMS4wXG4gICAqIEBjYXRlZ29yeSBVdGlsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbY29udGV4dD1yb290XSBUaGUgY29udGV4dCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBhIG5ldyBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogXy5taXhpbih7ICdmb28nOiBfLmNvbnN0YW50KCdmb28nKSB9KTtcbiAgICpcbiAgICogdmFyIGxvZGFzaCA9IF8ucnVuSW5Db250ZXh0KCk7XG4gICAqIGxvZGFzaC5taXhpbih7ICdiYXInOiBsb2Rhc2guY29uc3RhbnQoJ2JhcicpIH0pO1xuICAgKlxuICAgKiBfLmlzRnVuY3Rpb24oXy5mb28pO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqIF8uaXNGdW5jdGlvbihfLmJhcik7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqXG4gICAqIGxvZGFzaC5pc0Z1bmN0aW9uKGxvZGFzaC5mb28pO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKiBsb2Rhc2guaXNGdW5jdGlvbihsb2Rhc2guYmFyKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiAvLyBDcmVhdGUgYSBzdXBlZC11cCBgZGVmZXJgIGluIE5vZGUuanMuXG4gICAqIHZhciBkZWZlciA9IF8ucnVuSW5Db250ZXh0KHsgJ3NldFRpbWVvdXQnOiBzZXRJbW1lZGlhdGUgfSkuZGVmZXI7XG4gICAqL1xuICB2YXIgcnVuSW5Db250ZXh0ID0gKGZ1bmN0aW9uIHJ1bkluQ29udGV4dChjb250ZXh0KSB7XG4gICAgY29udGV4dCA9IGNvbnRleHQgPT0gbnVsbCA/IHJvb3QgOiBfLmRlZmF1bHRzKHJvb3QuT2JqZWN0KCksIGNvbnRleHQsIF8ucGljayhyb290LCBjb250ZXh0UHJvcHMpKTtcblxuICAgIC8qKiBCdWlsdC1pbiBjb25zdHJ1Y3RvciByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBBcnJheSA9IGNvbnRleHQuQXJyYXksXG4gICAgICAgIERhdGUgPSBjb250ZXh0LkRhdGUsXG4gICAgICAgIEVycm9yID0gY29udGV4dC5FcnJvcixcbiAgICAgICAgRnVuY3Rpb24gPSBjb250ZXh0LkZ1bmN0aW9uLFxuICAgICAgICBNYXRoID0gY29udGV4dC5NYXRoLFxuICAgICAgICBPYmplY3QgPSBjb250ZXh0Lk9iamVjdCxcbiAgICAgICAgUmVnRXhwID0gY29udGV4dC5SZWdFeHAsXG4gICAgICAgIFN0cmluZyA9IGNvbnRleHQuU3RyaW5nLFxuICAgICAgICBUeXBlRXJyb3IgPSBjb250ZXh0LlR5cGVFcnJvcjtcblxuICAgIC8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSxcbiAgICAgICAgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgICAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG4gICAgdmFyIGNvcmVKc0RhdGEgPSBjb250ZXh0WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuICAgIC8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbiAgICB2YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4gICAgLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG4gICAgdmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbiAgICAvKiogVXNlZCB0byBnZW5lcmF0ZSB1bmlxdWUgSURzLiAqL1xuICAgIHZhciBpZENvdW50ZXIgPSAwO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbiAgICB2YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgICAgIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gICAgICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAgICAgKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAgICAgKiBvZiB2YWx1ZXMuXG4gICAgICovXG4gICAgdmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbiAgICAvKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG4gICAgdmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4gICAgLyoqIFVzZWQgdG8gcmVzdG9yZSB0aGUgb3JpZ2luYWwgYF9gIHJlZmVyZW5jZSBpbiBgXy5ub0NvbmZsaWN0YC4gKi9cbiAgICB2YXIgb2xkRGFzaCA9IHJvb3QuXztcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG4gICAgdmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgICAgIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gICAgICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbiAgICApO1xuXG4gICAgLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyBjb250ZXh0LkJ1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICAgICAgU3ltYm9sID0gY29udGV4dC5TeW1ib2wsXG4gICAgICAgIFVpbnQ4QXJyYXkgPSBjb250ZXh0LlVpbnQ4QXJyYXksXG4gICAgICAgIGFsbG9jVW5zYWZlID0gQnVmZmVyID8gQnVmZmVyLmFsbG9jVW5zYWZlIDogdW5kZWZpbmVkLFxuICAgICAgICBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KSxcbiAgICAgICAgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZSxcbiAgICAgICAgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZSxcbiAgICAgICAgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2UsXG4gICAgICAgIHNwcmVhZGFibGVTeW1ib2wgPSBTeW1ib2wgPyBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1JdGVyYXRvciA9IFN5bWJvbCA/IFN5bWJvbC5pdGVyYXRvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgZnVuYyA9IGdldE5hdGl2ZShPYmplY3QsICdkZWZpbmVQcm9wZXJ0eScpO1xuICAgICAgICBmdW5jKHt9LCAnJywge30pO1xuICAgICAgICByZXR1cm4gZnVuYztcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfSgpKTtcblxuICAgIC8qKiBNb2NrZWQgYnVpbHQtaW5zLiAqL1xuICAgIHZhciBjdHhDbGVhclRpbWVvdXQgPSBjb250ZXh0LmNsZWFyVGltZW91dCAhPT0gcm9vdC5jbGVhclRpbWVvdXQgJiYgY29udGV4dC5jbGVhclRpbWVvdXQsXG4gICAgICAgIGN0eE5vdyA9IERhdGUgJiYgRGF0ZS5ub3cgIT09IHJvb3QuRGF0ZS5ub3cgJiYgRGF0ZS5ub3csXG4gICAgICAgIGN0eFNldFRpbWVvdXQgPSBjb250ZXh0LnNldFRpbWVvdXQgIT09IHJvb3Quc2V0VGltZW91dCAmJiBjb250ZXh0LnNldFRpbWVvdXQ7XG5cbiAgICAvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG4gICAgdmFyIG5hdGl2ZUNlaWwgPSBNYXRoLmNlaWwsXG4gICAgICAgIG5hdGl2ZUZsb29yID0gTWF0aC5mbG9vcixcbiAgICAgICAgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXG4gICAgICAgIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgICAgICBuYXRpdmVJc0Zpbml0ZSA9IGNvbnRleHQuaXNGaW5pdGUsXG4gICAgICAgIG5hdGl2ZUpvaW4gPSBhcnJheVByb3RvLmpvaW4sXG4gICAgICAgIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpLFxuICAgICAgICBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICAgICAgbmF0aXZlTWluID0gTWF0aC5taW4sXG4gICAgICAgIG5hdGl2ZU5vdyA9IERhdGUubm93LFxuICAgICAgICBuYXRpdmVQYXJzZUludCA9IGNvbnRleHQucGFyc2VJbnQsXG4gICAgICAgIG5hdGl2ZVJhbmRvbSA9IE1hdGgucmFuZG9tLFxuICAgICAgICBuYXRpdmVSZXZlcnNlID0gYXJyYXlQcm90by5yZXZlcnNlO1xuXG4gICAgLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xuICAgIHZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShjb250ZXh0LCAnRGF0YVZpZXcnKSxcbiAgICAgICAgTWFwID0gZ2V0TmF0aXZlKGNvbnRleHQsICdNYXAnKSxcbiAgICAgICAgUHJvbWlzZSA9IGdldE5hdGl2ZShjb250ZXh0LCAnUHJvbWlzZScpLFxuICAgICAgICBTZXQgPSBnZXROYXRpdmUoY29udGV4dCwgJ1NldCcpLFxuICAgICAgICBXZWFrTWFwID0gZ2V0TmF0aXZlKGNvbnRleHQsICdXZWFrTWFwJyksXG4gICAgICAgIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxuICAgIC8qKiBVc2VkIHRvIHN0b3JlIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xuICAgIHZhciBtZXRhTWFwID0gV2Vha01hcCAmJiBuZXcgV2Vha01hcDtcblxuICAgIC8qKiBVc2VkIHRvIGxvb2t1cCB1bm1pbmlmaWVkIGZ1bmN0aW9uIG5hbWVzLiAqL1xuICAgIHZhciByZWFsTmFtZXMgPSB7fTtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG4gICAgdmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICAgICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG4gICAgICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgICAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXG4gICAgLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG4gICAgdmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIG9iamVjdCB3aGljaCB3cmFwcyBgdmFsdWVgIHRvIGVuYWJsZSBpbXBsaWNpdCBtZXRob2RcbiAgICAgKiBjaGFpbiBzZXF1ZW5jZXMuIE1ldGhvZHMgdGhhdCBvcGVyYXRlIG9uIGFuZCByZXR1cm4gYXJyYXlzLCBjb2xsZWN0aW9ucyxcbiAgICAgKiBhbmQgZnVuY3Rpb25zIGNhbiBiZSBjaGFpbmVkIHRvZ2V0aGVyLiBNZXRob2RzIHRoYXQgcmV0cmlldmUgYSBzaW5nbGUgdmFsdWVcbiAgICAgKiBvciBtYXkgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlIHdpbGwgYXV0b21hdGljYWxseSBlbmQgdGhlIGNoYWluIHNlcXVlbmNlXG4gICAgICogYW5kIHJldHVybiB0aGUgdW53cmFwcGVkIHZhbHVlLiBPdGhlcndpc2UsIHRoZSB2YWx1ZSBtdXN0IGJlIHVud3JhcHBlZFxuICAgICAqIHdpdGggYF8jdmFsdWVgLlxuICAgICAqXG4gICAgICogRXhwbGljaXQgY2hhaW4gc2VxdWVuY2VzLCB3aGljaCBtdXN0IGJlIHVud3JhcHBlZCB3aXRoIGBfI3ZhbHVlYCwgbWF5IGJlXG4gICAgICogZW5hYmxlZCB1c2luZyBgXy5jaGFpbmAuXG4gICAgICpcbiAgICAgKiBUaGUgZXhlY3V0aW9uIG9mIGNoYWluZWQgbWV0aG9kcyBpcyBsYXp5LCB0aGF0IGlzLCBpdCdzIGRlZmVycmVkIHVudGlsXG4gICAgICogYF8jdmFsdWVgIGlzIGltcGxpY2l0bHkgb3IgZXhwbGljaXRseSBjYWxsZWQuXG4gICAgICpcbiAgICAgKiBMYXp5IGV2YWx1YXRpb24gYWxsb3dzIHNldmVyYWwgbWV0aG9kcyB0byBzdXBwb3J0IHNob3J0Y3V0IGZ1c2lvbi5cbiAgICAgKiBTaG9ydGN1dCBmdXNpb24gaXMgYW4gb3B0aW1pemF0aW9uIHRvIG1lcmdlIGl0ZXJhdGVlIGNhbGxzOyB0aGlzIGF2b2lkc1xuICAgICAqIHRoZSBjcmVhdGlvbiBvZiBpbnRlcm1lZGlhdGUgYXJyYXlzIGFuZCBjYW4gZ3JlYXRseSByZWR1Y2UgdGhlIG51bWJlciBvZlxuICAgICAqIGl0ZXJhdGVlIGV4ZWN1dGlvbnMuIFNlY3Rpb25zIG9mIGEgY2hhaW4gc2VxdWVuY2UgcXVhbGlmeSBmb3Igc2hvcnRjdXRcbiAgICAgKiBmdXNpb24gaWYgdGhlIHNlY3Rpb24gaXMgYXBwbGllZCB0byBhbiBhcnJheSBhbmQgaXRlcmF0ZWVzIGFjY2VwdCBvbmx5XG4gICAgICogb25lIGFyZ3VtZW50LiBUaGUgaGV1cmlzdGljIGZvciB3aGV0aGVyIGEgc2VjdGlvbiBxdWFsaWZpZXMgZm9yIHNob3J0Y3V0XG4gICAgICogZnVzaW9uIGlzIHN1YmplY3QgdG8gY2hhbmdlLlxuICAgICAqXG4gICAgICogQ2hhaW5pbmcgaXMgc3VwcG9ydGVkIGluIGN1c3RvbSBidWlsZHMgYXMgbG9uZyBhcyB0aGUgYF8jdmFsdWVgIG1ldGhvZCBpc1xuICAgICAqIGRpcmVjdGx5IG9yIGluZGlyZWN0bHkgaW5jbHVkZWQgaW4gdGhlIGJ1aWxkLlxuICAgICAqXG4gICAgICogSW4gYWRkaXRpb24gdG8gbG9kYXNoIG1ldGhvZHMsIHdyYXBwZXJzIGhhdmUgYEFycmF5YCBhbmQgYFN0cmluZ2AgbWV0aG9kcy5cbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIGBBcnJheWAgbWV0aG9kcyBhcmU6XG4gICAgICogYGNvbmNhdGAsIGBqb2luYCwgYHBvcGAsIGBwdXNoYCwgYHNoaWZ0YCwgYHNvcnRgLCBgc3BsaWNlYCwgYW5kIGB1bnNoaWZ0YFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgYFN0cmluZ2AgbWV0aG9kcyBhcmU6XG4gICAgICogYHJlcGxhY2VgIGFuZCBgc3BsaXRgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBtZXRob2RzIHRoYXQgc3VwcG9ydCBzaG9ydGN1dCBmdXNpb24gYXJlOlxuICAgICAqIGBhdGAsIGBjb21wYWN0YCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCwgYGRyb3BXaGlsZWAsIGBmaWx0ZXJgLCBgZmluZGAsXG4gICAgICogYGZpbmRMYXN0YCwgYGhlYWRgLCBgaW5pdGlhbGAsIGBsYXN0YCwgYG1hcGAsIGByZWplY3RgLCBgcmV2ZXJzZWAsIGBzbGljZWAsXG4gICAgICogYHRhaWxgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLCBgdGFrZVJpZ2h0V2hpbGVgLCBgdGFrZVdoaWxlYCwgYW5kIGB0b0FycmF5YFxuICAgICAqXG4gICAgICogVGhlIGNoYWluYWJsZSB3cmFwcGVyIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhZnRlcmAsIGBhcnlgLCBgYXNzaWduYCwgYGFzc2lnbkluYCwgYGFzc2lnbkluV2l0aGAsIGBhc3NpZ25XaXRoYCwgYGF0YCxcbiAgICAgKiBgYmVmb3JlYCwgYGJpbmRgLCBgYmluZEFsbGAsIGBiaW5kS2V5YCwgYGNhc3RBcnJheWAsIGBjaGFpbmAsIGBjaHVua2AsXG4gICAgICogYGNvbW1pdGAsIGBjb21wYWN0YCwgYGNvbmNhdGAsIGBjb25mb3Jtc2AsIGBjb25zdGFudGAsIGBjb3VudEJ5YCwgYGNyZWF0ZWAsXG4gICAgICogYGN1cnJ5YCwgYGRlYm91bmNlYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsIGBkZWZlcmAsIGBkZWxheWAsXG4gICAgICogYGRpZmZlcmVuY2VgLCBgZGlmZmVyZW5jZUJ5YCwgYGRpZmZlcmVuY2VXaXRoYCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCxcbiAgICAgKiBgZHJvcFJpZ2h0V2hpbGVgLCBgZHJvcFdoaWxlYCwgYGV4dGVuZGAsIGBleHRlbmRXaXRoYCwgYGZpbGxgLCBgZmlsdGVyYCxcbiAgICAgKiBgZmxhdE1hcGAsIGBmbGF0TWFwRGVlcGAsIGBmbGF0TWFwRGVwdGhgLCBgZmxhdHRlbmAsIGBmbGF0dGVuRGVlcGAsXG4gICAgICogYGZsYXR0ZW5EZXB0aGAsIGBmbGlwYCwgYGZsb3dgLCBgZmxvd1JpZ2h0YCwgYGZyb21QYWlyc2AsIGBmdW5jdGlvbnNgLFxuICAgICAqIGBmdW5jdGlvbnNJbmAsIGBncm91cEJ5YCwgYGluaXRpYWxgLCBgaW50ZXJzZWN0aW9uYCwgYGludGVyc2VjdGlvbkJ5YCxcbiAgICAgKiBgaW50ZXJzZWN0aW9uV2l0aGAsIGBpbnZlcnRgLCBgaW52ZXJ0QnlgLCBgaW52b2tlTWFwYCwgYGl0ZXJhdGVlYCwgYGtleUJ5YCxcbiAgICAgKiBga2V5c2AsIGBrZXlzSW5gLCBgbWFwYCwgYG1hcEtleXNgLCBgbWFwVmFsdWVzYCwgYG1hdGNoZXNgLCBgbWF0Y2hlc1Byb3BlcnR5YCxcbiAgICAgKiBgbWVtb2l6ZWAsIGBtZXJnZWAsIGBtZXJnZVdpdGhgLCBgbWV0aG9kYCwgYG1ldGhvZE9mYCwgYG1peGluYCwgYG5lZ2F0ZWAsXG4gICAgICogYG50aEFyZ2AsIGBvbWl0YCwgYG9taXRCeWAsIGBvbmNlYCwgYG9yZGVyQnlgLCBgb3ZlcmAsIGBvdmVyQXJnc2AsXG4gICAgICogYG92ZXJFdmVyeWAsIGBvdmVyU29tZWAsIGBwYXJ0aWFsYCwgYHBhcnRpYWxSaWdodGAsIGBwYXJ0aXRpb25gLCBgcGlja2AsXG4gICAgICogYHBpY2tCeWAsIGBwbGFudGAsIGBwcm9wZXJ0eWAsIGBwcm9wZXJ0eU9mYCwgYHB1bGxgLCBgcHVsbEFsbGAsIGBwdWxsQWxsQnlgLFxuICAgICAqIGBwdWxsQWxsV2l0aGAsIGBwdWxsQXRgLCBgcHVzaGAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlYXJnYCwgYHJlamVjdGAsXG4gICAgICogYHJlbW92ZWAsIGByZXN0YCwgYHJldmVyc2VgLCBgc2FtcGxlU2l6ZWAsIGBzZXRgLCBgc2V0V2l0aGAsIGBzaHVmZmxlYCxcbiAgICAgKiBgc2xpY2VgLCBgc29ydGAsIGBzb3J0QnlgLCBgc3BsaWNlYCwgYHNwcmVhZGAsIGB0YWlsYCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAgICAgKiBgdGFrZVJpZ2h0V2hpbGVgLCBgdGFrZVdoaWxlYCwgYHRhcGAsIGB0aHJvdHRsZWAsIGB0aHJ1YCwgYHRvQXJyYXlgLFxuICAgICAqIGB0b1BhaXJzYCwgYHRvUGFpcnNJbmAsIGB0b1BhdGhgLCBgdG9QbGFpbk9iamVjdGAsIGB0cmFuc2Zvcm1gLCBgdW5hcnlgLFxuICAgICAqIGB1bmlvbmAsIGB1bmlvbkJ5YCwgYHVuaW9uV2l0aGAsIGB1bmlxYCwgYHVuaXFCeWAsIGB1bmlxV2l0aGAsIGB1bnNldGAsXG4gICAgICogYHVuc2hpZnRgLCBgdW56aXBgLCBgdW56aXBXaXRoYCwgYHVwZGF0ZWAsIGB1cGRhdGVXaXRoYCwgYHZhbHVlc2AsXG4gICAgICogYHZhbHVlc0luYCwgYHdpdGhvdXRgLCBgd3JhcGAsIGB4b3JgLCBgeG9yQnlgLCBgeG9yV2l0aGAsIGB6aXBgLFxuICAgICAqIGB6aXBPYmplY3RgLCBgemlwT2JqZWN0RGVlcGAsIGFuZCBgemlwV2l0aGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIG1ldGhvZHMgdGhhdCBhcmUgKipub3QqKiBjaGFpbmFibGUgYnkgZGVmYXVsdCBhcmU6XG4gICAgICogYGFkZGAsIGBhdHRlbXB0YCwgYGNhbWVsQ2FzZWAsIGBjYXBpdGFsaXplYCwgYGNlaWxgLCBgY2xhbXBgLCBgY2xvbmVgLFxuICAgICAqIGBjbG9uZURlZXBgLCBgY2xvbmVEZWVwV2l0aGAsIGBjbG9uZVdpdGhgLCBgY29uZm9ybXNUb2AsIGBkZWJ1cnJgLFxuICAgICAqIGBkZWZhdWx0VG9gLCBgZGl2aWRlYCwgYGVhY2hgLCBgZWFjaFJpZ2h0YCwgYGVuZHNXaXRoYCwgYGVxYCwgYGVzY2FwZWAsXG4gICAgICogYGVzY2FwZVJlZ0V4cGAsIGBldmVyeWAsIGBmaW5kYCwgYGZpbmRJbmRleGAsIGBmaW5kS2V5YCwgYGZpbmRMYXN0YCxcbiAgICAgKiBgZmluZExhc3RJbmRleGAsIGBmaW5kTGFzdEtleWAsIGBmaXJzdGAsIGBmbG9vcmAsIGBmb3JFYWNoYCwgYGZvckVhY2hSaWdodGAsXG4gICAgICogYGZvckluYCwgYGZvckluUmlnaHRgLCBgZm9yT3duYCwgYGZvck93blJpZ2h0YCwgYGdldGAsIGBndGAsIGBndGVgLCBgaGFzYCxcbiAgICAgKiBgaGFzSW5gLCBgaGVhZGAsIGBpZGVudGl0eWAsIGBpbmNsdWRlc2AsIGBpbmRleE9mYCwgYGluUmFuZ2VgLCBgaW52b2tlYCxcbiAgICAgKiBgaXNBcmd1bWVudHNgLCBgaXNBcnJheWAsIGBpc0FycmF5QnVmZmVyYCwgYGlzQXJyYXlMaWtlYCwgYGlzQXJyYXlMaWtlT2JqZWN0YCxcbiAgICAgKiBgaXNCb29sZWFuYCwgYGlzQnVmZmVyYCwgYGlzRGF0ZWAsIGBpc0VsZW1lbnRgLCBgaXNFbXB0eWAsIGBpc0VxdWFsYCxcbiAgICAgKiBgaXNFcXVhbFdpdGhgLCBgaXNFcnJvcmAsIGBpc0Zpbml0ZWAsIGBpc0Z1bmN0aW9uYCwgYGlzSW50ZWdlcmAsIGBpc0xlbmd0aGAsXG4gICAgICogYGlzTWFwYCwgYGlzTWF0Y2hgLCBgaXNNYXRjaFdpdGhgLCBgaXNOYU5gLCBgaXNOYXRpdmVgLCBgaXNOaWxgLCBgaXNOdWxsYCxcbiAgICAgKiBgaXNOdW1iZXJgLCBgaXNPYmplY3RgLCBgaXNPYmplY3RMaWtlYCwgYGlzUGxhaW5PYmplY3RgLCBgaXNSZWdFeHBgLFxuICAgICAqIGBpc1NhZmVJbnRlZ2VyYCwgYGlzU2V0YCwgYGlzU3RyaW5nYCwgYGlzVW5kZWZpbmVkYCwgYGlzVHlwZWRBcnJheWAsXG4gICAgICogYGlzV2Vha01hcGAsIGBpc1dlYWtTZXRgLCBgam9pbmAsIGBrZWJhYkNhc2VgLCBgbGFzdGAsIGBsYXN0SW5kZXhPZmAsXG4gICAgICogYGxvd2VyQ2FzZWAsIGBsb3dlckZpcnN0YCwgYGx0YCwgYGx0ZWAsIGBtYXhgLCBgbWF4QnlgLCBgbWVhbmAsIGBtZWFuQnlgLFxuICAgICAqIGBtaW5gLCBgbWluQnlgLCBgbXVsdGlwbHlgLCBgbm9Db25mbGljdGAsIGBub29wYCwgYG5vd2AsIGBudGhgLCBgcGFkYCxcbiAgICAgKiBgcGFkRW5kYCwgYHBhZFN0YXJ0YCwgYHBhcnNlSW50YCwgYHBvcGAsIGByYW5kb21gLCBgcmVkdWNlYCwgYHJlZHVjZVJpZ2h0YCxcbiAgICAgKiBgcmVwZWF0YCwgYHJlc3VsdGAsIGByb3VuZGAsIGBydW5JbkNvbnRleHRgLCBgc2FtcGxlYCwgYHNoaWZ0YCwgYHNpemVgLFxuICAgICAqIGBzbmFrZUNhc2VgLCBgc29tZWAsIGBzb3J0ZWRJbmRleGAsIGBzb3J0ZWRJbmRleEJ5YCwgYHNvcnRlZExhc3RJbmRleGAsXG4gICAgICogYHNvcnRlZExhc3RJbmRleEJ5YCwgYHN0YXJ0Q2FzZWAsIGBzdGFydHNXaXRoYCwgYHN0dWJBcnJheWAsIGBzdHViRmFsc2VgLFxuICAgICAqIGBzdHViT2JqZWN0YCwgYHN0dWJTdHJpbmdgLCBgc3R1YlRydWVgLCBgc3VidHJhY3RgLCBgc3VtYCwgYHN1bUJ5YCxcbiAgICAgKiBgdGVtcGxhdGVgLCBgdGltZXNgLCBgdG9GaW5pdGVgLCBgdG9JbnRlZ2VyYCwgYHRvSlNPTmAsIGB0b0xlbmd0aGAsXG4gICAgICogYHRvTG93ZXJgLCBgdG9OdW1iZXJgLCBgdG9TYWZlSW50ZWdlcmAsIGB0b1N0cmluZ2AsIGB0b1VwcGVyYCwgYHRyaW1gLFxuICAgICAqIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGB0cnVuY2F0ZWAsIGB1bmVzY2FwZWAsIGB1bmlxdWVJZGAsIGB1cHBlckNhc2VgLFxuICAgICAqIGB1cHBlckZpcnN0YCwgYHZhbHVlYCwgYW5kIGB3b3Jkc2BcbiAgICAgKlxuICAgICAqIEBuYW1lIF9cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcCBpbiBhIGBsb2Rhc2hgIGluc3RhbmNlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMiwgM10pO1xuICAgICAqXG4gICAgICogLy8gUmV0dXJucyBhbiB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogd3JhcHBlZC5yZWR1Y2UoXy5hZGQpO1xuICAgICAqIC8vID0+IDZcbiAgICAgKlxuICAgICAqIC8vIFJldHVybnMgYSB3cmFwcGVkIHZhbHVlLlxuICAgICAqIHZhciBzcXVhcmVzID0gd3JhcHBlZC5tYXAoc3F1YXJlKTtcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShzcXVhcmVzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KHNxdWFyZXMudmFsdWUoKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxvZGFzaCh2YWx1ZSkge1xuICAgICAgaWYgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzQXJyYXkodmFsdWUpICYmICEodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikpIHtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTG9kYXNoV3JhcHBlcikge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ19fd3JhcHBlZF9fJykpIHtcbiAgICAgICAgICByZXR1cm4gd3JhcHBlckNsb25lKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXNzaWduaW5nXG4gICAgICogcHJvcGVydGllcyB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm90byBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIHZhciBiYXNlQ3JlYXRlID0gKGZ1bmN0aW9uKCkge1xuICAgICAgZnVuY3Rpb24gb2JqZWN0KCkge31cbiAgICAgIHJldHVybiBmdW5jdGlvbihwcm90bykge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KHByb3RvKSkge1xuICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqZWN0Q3JlYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdENyZWF0ZShwcm90byk7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IG9iamVjdDtcbiAgICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBmdW5jdGlvbiB3aG9zZSBwcm90b3R5cGUgY2hhaW4gc2VxdWVuY2Ugd3JhcHBlcnMgaW5oZXJpdCBmcm9tLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTG9kYXNoKCkge1xuICAgICAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBjb25zdHJ1Y3RvciBmb3IgY3JlYXRpbmcgYGxvZGFzaGAgd3JhcHBlciBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2NoYWluQWxsXSBFbmFibGUgZXhwbGljaXQgbWV0aG9kIGNoYWluIHNlcXVlbmNlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMb2Rhc2hXcmFwcGVyKHZhbHVlLCBjaGFpbkFsbCkge1xuICAgICAgdGhpcy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgdGhpcy5fX2FjdGlvbnNfXyA9IFtdO1xuICAgICAgdGhpcy5fX2NoYWluX18gPSAhIWNoYWluQWxsO1xuICAgICAgdGhpcy5fX2luZGV4X18gPSAwO1xuICAgICAgdGhpcy5fX3ZhbHVlc19fID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJ5IGRlZmF1bHQsIHRoZSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzIHVzZWQgYnkgbG9kYXNoIGFyZSBsaWtlIHRob3NlIGluXG4gICAgICogZW1iZWRkZWQgUnVieSAoRVJCKSBhcyB3ZWxsIGFzIEVTMjAxNSB0ZW1wbGF0ZSBzdHJpbmdzLiBDaGFuZ2UgdGhlXG4gICAgICogZm9sbG93aW5nIHRlbXBsYXRlIHNldHRpbmdzIHRvIHVzZSBhbHRlcm5hdGl2ZSBkZWxpbWl0ZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICBsb2Rhc2gudGVtcGxhdGVTZXR0aW5ncyA9IHtcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGJlIEhUTUwtZXNjYXBlZC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnZXNjYXBlJzogcmVFc2NhcGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgY29kZSB0byBiZSBldmFsdWF0ZWQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAqL1xuICAgICAgJ2V2YWx1YXRlJzogcmVFdmFsdWF0ZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGluamVjdC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnaW50ZXJwb2xhdGUnOiByZUludGVycG9sYXRlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gcmVmZXJlbmNlIHRoZSBkYXRhIG9iamVjdCBpbiB0aGUgdGVtcGxhdGUgdGV4dC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAgICovXG4gICAgICAndmFyaWFibGUnOiAnJyxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGltcG9ydCB2YXJpYWJsZXMgaW50byB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAgICAqL1xuICAgICAgJ2ltcG9ydHMnOiB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5ncy5pbXBvcnRzXG4gICAgICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICAgICAgICovXG4gICAgICAgICdfJzogbG9kYXNoXG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIEVuc3VyZSB3cmFwcGVycyBhcmUgaW5zdGFuY2VzIG9mIGBiYXNlTG9kYXNoYC5cbiAgICBsb2Rhc2gucHJvdG90eXBlID0gYmFzZUxvZGFzaC5wcm90b3R5cGU7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGxvZGFzaDtcblxuICAgIExvZGFzaFdyYXBwZXIucHJvdG90eXBlID0gYmFzZUNyZWF0ZShiYXNlTG9kYXNoLnByb3RvdHlwZSk7XG4gICAgTG9kYXNoV3JhcHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMb2Rhc2hXcmFwcGVyO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGxhenkgd3JhcHBlciBvYmplY3Qgd2hpY2ggd3JhcHMgYHZhbHVlYCB0byBlbmFibGUgbGF6eSBldmFsdWF0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExhenlXcmFwcGVyKHZhbHVlKSB7XG4gICAgICB0aGlzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICB0aGlzLl9fYWN0aW9uc19fID0gW107XG4gICAgICB0aGlzLl9fZGlyX18gPSAxO1xuICAgICAgdGhpcy5fX2ZpbHRlcmVkX18gPSBmYWxzZTtcbiAgICAgIHRoaXMuX19pdGVyYXRlZXNfXyA9IFtdO1xuICAgICAgdGhpcy5fX3Rha2VDb3VudF9fID0gTUFYX0FSUkFZX0xFTkdUSDtcbiAgICAgIHRoaXMuX192aWV3c19fID0gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBsYXp5IHdyYXBwZXIgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbG9uZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBgTGF6eVdyYXBwZXJgIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5Q2xvbmUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IExhenlXcmFwcGVyKHRoaXMuX193cmFwcGVkX18pO1xuICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHRoaXMuX19hY3Rpb25zX18pO1xuICAgICAgcmVzdWx0Ll9fZGlyX18gPSB0aGlzLl9fZGlyX187XG4gICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gdGhpcy5fX2ZpbHRlcmVkX187XG4gICAgICByZXN1bHQuX19pdGVyYXRlZXNfXyA9IGNvcHlBcnJheSh0aGlzLl9faXRlcmF0ZWVzX18pO1xuICAgICAgcmVzdWx0Ll9fdGFrZUNvdW50X18gPSB0aGlzLl9fdGFrZUNvdW50X187XG4gICAgICByZXN1bHQuX192aWV3c19fID0gY29weUFycmF5KHRoaXMuX192aWV3c19fKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJzZXMgdGhlIGRpcmVjdGlvbiBvZiBsYXp5IGl0ZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgcmV2ZXJzZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyByZXZlcnNlZCBgTGF6eVdyYXBwZXJgIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5UmV2ZXJzZSgpIHtcbiAgICAgIGlmICh0aGlzLl9fZmlsdGVyZWRfXykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICByZXN1bHQuX19kaXJfXyA9IC0xO1xuICAgICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgcmVzdWx0Ll9fZGlyX18gKj0gLTE7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHRoZSB1bndyYXBwZWQgdmFsdWUgZnJvbSBpdHMgbGF6eSB3cmFwcGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSB2YWx1ZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eVZhbHVlKCkge1xuICAgICAgdmFyIGFycmF5ID0gdGhpcy5fX3dyYXBwZWRfXy52YWx1ZSgpLFxuICAgICAgICAgIGRpciA9IHRoaXMuX19kaXJfXyxcbiAgICAgICAgICBpc0FyciA9IGlzQXJyYXkoYXJyYXkpLFxuICAgICAgICAgIGlzUmlnaHQgPSBkaXIgPCAwLFxuICAgICAgICAgIGFyckxlbmd0aCA9IGlzQXJyID8gYXJyYXkubGVuZ3RoIDogMCxcbiAgICAgICAgICB2aWV3ID0gZ2V0VmlldygwLCBhcnJMZW5ndGgsIHRoaXMuX192aWV3c19fKSxcbiAgICAgICAgICBzdGFydCA9IHZpZXcuc3RhcnQsXG4gICAgICAgICAgZW5kID0gdmlldy5lbmQsXG4gICAgICAgICAgbGVuZ3RoID0gZW5kIC0gc3RhcnQsXG4gICAgICAgICAgaW5kZXggPSBpc1JpZ2h0ID8gZW5kIDogKHN0YXJ0IC0gMSksXG4gICAgICAgICAgaXRlcmF0ZWVzID0gdGhpcy5fX2l0ZXJhdGVlc19fLFxuICAgICAgICAgIGl0ZXJMZW5ndGggPSBpdGVyYXRlZXMubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICB0YWtlQ291bnQgPSBuYXRpdmVNaW4obGVuZ3RoLCB0aGlzLl9fdGFrZUNvdW50X18pO1xuXG4gICAgICBpZiAoIWlzQXJyIHx8ICghaXNSaWdodCAmJiBhcnJMZW5ndGggPT0gbGVuZ3RoICYmIHRha2VDb3VudCA9PSBsZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBiYXNlV3JhcHBlclZhbHVlKGFycmF5LCB0aGlzLl9fYWN0aW9uc19fKTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAobGVuZ3RoLS0gJiYgcmVzSW5kZXggPCB0YWtlQ291bnQpIHtcbiAgICAgICAgaW5kZXggKz0gZGlyO1xuXG4gICAgICAgIHZhciBpdGVySW5kZXggPSAtMSxcbiAgICAgICAgICAgIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuXG4gICAgICAgIHdoaWxlICgrK2l0ZXJJbmRleCA8IGl0ZXJMZW5ndGgpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IGl0ZXJhdGVlc1tpdGVySW5kZXhdLFxuICAgICAgICAgICAgICBpdGVyYXRlZSA9IGRhdGEuaXRlcmF0ZWUsXG4gICAgICAgICAgICAgIHR5cGUgPSBkYXRhLnR5cGUsXG4gICAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgICAgaWYgKHR5cGUgPT0gTEFaWV9NQVBfRkxBRykge1xuICAgICAgICAgICAgdmFsdWUgPSBjb21wdXRlZDtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFjb21wdXRlZCkge1xuICAgICAgICAgICAgaWYgKHR5cGUgPT0gTEFaWV9GSUxURVJfRkxBRykge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGJyZWFrIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIGBMYXp5V3JhcHBlcmAgaXMgYW4gaW5zdGFuY2Ugb2YgYGJhc2VMb2Rhc2hgLlxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZSA9IGJhc2VDcmVhdGUoYmFzZUxvZGFzaC5wcm90b3R5cGUpO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExhenlXcmFwcGVyO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgICAgIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICAgICAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG4gICAgSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG4gICAgSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbiAgICBIYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuICAgIEhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG4gICAgSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICAgICAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgICAgICBkYXRhLnBvcCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICAgICAgfVxuICAgICAgLS10aGlzLnNpemU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgKyt0aGlzLnNpemU7XG4gICAgICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAgICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgICAgIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gICAgICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgICAgIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgICAgIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICAgICAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB2YWx1ZXMgPT0gbnVsbCA/IDAgOiB2YWx1ZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdGhpcy5hZGQodmFsdWVzW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBgdmFsdWVgIHRvIHRoZSBhcnJheSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgYWRkXG4gICAgICogQG1lbWJlck9mIFNldENhY2hlXG4gICAgICogQGFsaWFzIHB1c2hcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjYWNoZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkge1xuICAgICAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIHRoZSBhcnJheSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIFNldENhY2hlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC5cbiAgICBTZXRDYWNoZS5wcm90b3R5cGUuYWRkID0gU2V0Q2FjaGUucHJvdG90eXBlLnB1c2ggPSBzZXRDYWNoZUFkZDtcbiAgICBTZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICAgICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICAgICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gICAgICB9XG4gICAgICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG4gICAgU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcbiAgICBTdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG4gICAgU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuICAgIFN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcbiAgICBTdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiAhaXNBcmcgJiYgaXNCdWZmZXIodmFsdWUpLFxuICAgICAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgICAgICByZXN1bHQgPSBza2lwSW5kZXhlcyA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZykgOiBbXSxcbiAgICAgICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICAgICAga2V5ID09ICdsZW5ndGgnIHx8XG4gICAgICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAgICAgLy8gUGhhbnRvbUpTIDIgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gdHlwZWQgYXJyYXlzLlxuICAgICAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgICAgICBpc0luZGV4KGtleSwgbGVuZ3RoKVxuICAgICAgICAgICAgKSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zYW1wbGVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2FtcGxlKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGFycmF5W2Jhc2VSYW5kb20oMCwgbGVuZ3RoIC0gMSldIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zYW1wbGVTaXplYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2FtcGxlU2l6ZShhcnJheSwgbikge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGNvcHlBcnJheShhcnJheSksIGJhc2VDbGFtcChuLCAwLCBhcnJheS5sZW5ndGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2h1ZmZsZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTaHVmZmxlKGFycmF5KSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoY29weUFycmF5KGFycmF5KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBhc3NpZ25WYWx1ZWAgZXhjZXB0IHRoYXQgaXQgZG9lc24ndCBhc3NpZ25cbiAgICAgKiBgdW5kZWZpbmVkYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWVxKG9iamVjdFtrZXldLCB2YWx1ZSkpIHx8XG4gICAgICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBgdmFsdWVgIHRvIGBrZXlgIG9mIGBvYmplY3RgIGlmIHRoZSBleGlzdGluZyB2YWx1ZSBpcyBub3QgZXF1aXZhbGVudFxuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldO1xuICAgICAgaWYgKCEoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZXEob2JqVmFsdWUsIHZhbHVlKSkgfHxcbiAgICAgICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFnZ3JlZ2F0ZXMgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIG9uIGBhY2N1bXVsYXRvcmAgd2l0aCBrZXlzIHRyYW5zZm9ybWVkXG4gICAgICogYnkgYGl0ZXJhdGVlYCBhbmQgdmFsdWVzIHNldCBieSBgc2V0dGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFnZ3JlZ2F0b3IoY29sbGVjdGlvbiwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaXRlcmF0ZWUodmFsdWUpLCBjb2xsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gICAgICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICAgICAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnbkluKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYXNzaWduVmFsdWVgIGFuZCBgYXNzaWduTWVyZ2VWYWx1ZWAgd2l0aG91dFxuICAgICAqIHZhbHVlIGNoZWNrcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKGtleSA9PSAnX19wcm90b19fJyAmJiBkZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgICAgICdlbnVtZXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgICAndmFsdWUnOiB2YWx1ZSxcbiAgICAgICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hdGAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcGlja2VkIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBdChvYmplY3QsIHBhdGhzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICBza2lwID0gb2JqZWN0ID09IG51bGw7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBza2lwID8gdW5kZWZpbmVkIDogZ2V0KG9iamVjdCwgcGF0aHNbaW5kZXhdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xhbXBgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNsYW1wLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXJdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNsYW1wZWQgbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDbGFtcChudW1iZXIsIGxvd2VyLCB1cHBlcikge1xuICAgICAgaWYgKG51bWJlciA9PT0gbnVtYmVyKSB7XG4gICAgICAgIGlmICh1cHBlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbnVtYmVyID0gbnVtYmVyIDw9IHVwcGVyID8gbnVtYmVyIDogdXBwZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvd2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBudW1iZXIgPSBudW1iZXIgPj0gbG93ZXIgPyBudW1iZXIgOiBsb3dlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbG9uZWAgYW5kIGBfLmNsb25lRGVlcGAgd2hpY2ggdHJhY2tzXG4gICAgICogdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgMSAtIERlZXAgY2xvbmVcbiAgICAgKiAgMiAtIEZsYXR0ZW4gaW5oZXJpdGVkIHByb3BlcnRpZXNcbiAgICAgKiAgNCAtIENsb25lIHN5bWJvbHNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBba2V5XSBUaGUga2V5IG9mIGB2YWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGB2YWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGFuZCB0aGVpciBjbG9uZSBjb3VudGVycGFydHMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ2xvbmUodmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgb2JqZWN0LCBzdGFjaykge1xuICAgICAgdmFyIHJlc3VsdCxcbiAgICAgICAgICBpc0RlZXAgPSBiaXRtYXNrICYgQ0xPTkVfREVFUF9GTEFHLFxuICAgICAgICAgIGlzRmxhdCA9IGJpdG1hc2sgJiBDTE9ORV9GTEFUX0ZMQUcsXG4gICAgICAgICAgaXNGdWxsID0gYml0bWFzayAmIENMT05FX1NZTUJPTFNfRkxBRztcblxuICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgcmVzdWx0ID0gb2JqZWN0ID8gY3VzdG9taXplcih2YWx1ZSwga2V5LCBvYmplY3QsIHN0YWNrKSA6IGN1c3RvbWl6ZXIodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKTtcbiAgICAgIGlmIChpc0Fycikge1xuICAgICAgICByZXN1bHQgPSBpbml0Q2xvbmVBcnJheSh2YWx1ZSk7XG4gICAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgICAgcmV0dXJuIGNvcHlBcnJheSh2YWx1ZSwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgICBpc0Z1bmMgPSB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnO1xuXG4gICAgICAgIGlmIChpc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gY2xvbmVCdWZmZXIodmFsdWUsIGlzRGVlcCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZyA9PSBvYmplY3RUYWcgfHwgdGFnID09IGFyZ3NUYWcgfHwgKGlzRnVuYyAmJiAhb2JqZWN0KSkge1xuICAgICAgICAgIHJlc3VsdCA9IChpc0ZsYXQgfHwgaXNGdW5jKSA/IHt9IDogaW5pdENsb25lT2JqZWN0KHZhbHVlKTtcbiAgICAgICAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgICAgICAgcmV0dXJuIGlzRmxhdFxuICAgICAgICAgICAgICA/IGNvcHlTeW1ib2xzSW4odmFsdWUsIGJhc2VBc3NpZ25JbihyZXN1bHQsIHZhbHVlKSlcbiAgICAgICAgICAgICAgOiBjb3B5U3ltYm9scyh2YWx1ZSwgYmFzZUFzc2lnbihyZXN1bHQsIHZhbHVlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghY2xvbmVhYmxlVGFnc1t0YWddKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0ID8gdmFsdWUgOiB7fTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gaW5pdENsb25lQnlUYWcodmFsdWUsIHRhZywgaXNEZWVwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgZm9yIGNpcmN1bGFyIHJlZmVyZW5jZXMgYW5kIHJldHVybiBpdHMgY29ycmVzcG9uZGluZyBjbG9uZS5cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldCh2YWx1ZSk7XG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZDtcbiAgICAgIH1cbiAgICAgIHN0YWNrLnNldCh2YWx1ZSwgcmVzdWx0KTtcblxuICAgICAgaWYgKGlzU2V0KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlKSB7XG4gICAgICAgICAgcmVzdWx0LmFkZChiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN1YlZhbHVlLCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGlzTWFwKHZhbHVlKSkge1xuICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICAgICAgICByZXN1bHQuc2V0KGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGtleXNGdW5jID0gaXNGdWxsXG4gICAgICAgID8gKGlzRmxhdCA/IGdldEFsbEtleXNJbiA6IGdldEFsbEtleXMpXG4gICAgICAgIDogKGlzRmxhdCA/IGtleXNJbiA6IGtleXMpO1xuXG4gICAgICB2YXIgcHJvcHMgPSBpc0FyciA/IHVuZGVmaW5lZCA6IGtleXNGdW5jKHZhbHVlKTtcbiAgICAgIGFycmF5RWFjaChwcm9wcyB8fCB2YWx1ZSwgZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgICAgICBpZiAocHJvcHMpIHtcbiAgICAgICAgICBrZXkgPSBzdWJWYWx1ZTtcbiAgICAgICAgICBzdWJWYWx1ZSA9IHZhbHVlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgcG9wdWxhdGUgY2xvbmUgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgYXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jb25mb3Jtc2Agd2hpY2ggZG9lc24ndCBjbG9uZSBgc291cmNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDb25mb3Jtcyhzb3VyY2UpIHtcbiAgICAgIHZhciBwcm9wcyA9IGtleXMoc291cmNlKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBwcm9wcyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNvbmZvcm1zVG9gIHdoaWNoIGFjY2VwdHMgYHByb3BzYCB0byBjaGVjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgY29uZm9ybXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwgcHJvcHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICFsZW5ndGg7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIga2V5ID0gcHJvcHNbbGVuZ3RoXSxcbiAgICAgICAgICAgIHByZWRpY2F0ZSA9IHNvdXJjZVtrZXldLFxuICAgICAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICBpZiAoKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkgfHwgIXByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmRlbGF5YCBhbmQgYF8uZGVmZXJgIHdoaWNoIGFjY2VwdHMgYGFyZ3NgXG4gICAgICogdG8gcHJvdmlkZSB0byBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIHByb3ZpZGUgdG8gYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ8T2JqZWN0fSBSZXR1cm5zIHRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRGVsYXkoZnVuYywgd2FpdCwgYXJncykge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTsgfSwgd2FpdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmRpZmZlcmVuY2VgIHdpdGhvdXQgc3VwcG9ydFxuICAgICAqIGZvciBleGNsdWRpbmcgbXVsdGlwbGUgYXJyYXlzIG9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZURpZmZlcmVuY2UoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBpc0NvbW1vbiA9IHRydWUsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IFtdLFxuICAgICAgICAgIHZhbHVlc0xlbmd0aCA9IHZhbHVlcy5sZW5ndGg7XG5cbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFsdWVzID0gYXJyYXlNYXAodmFsdWVzLCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlc1dpdGg7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICh2YWx1ZXMubGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICAgICAgaW5jbHVkZXMgPSBjYWNoZUhhcztcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzID0gbmV3IFNldENhY2hlKHZhbHVlcyk7XG4gICAgICB9XG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPT0gbnVsbCA/IHZhbHVlIDogaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoaXNDb21tb24gJiYgY29tcHV0ZWQgPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgdmFyIHZhbHVlc0luZGV4ID0gdmFsdWVzTGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICh2YWx1ZXNJbmRleC0tKSB7XG4gICAgICAgICAgICBpZiAodmFsdWVzW3ZhbHVlc0luZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaW5jbHVkZXModmFsdWVzLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUVhY2ggPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hSaWdodGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUVhY2hSaWdodCA9IGNyZWF0ZUJhc2VFYWNoKGJhc2VGb3JPd25SaWdodCwgdHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5ldmVyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VFdmVyeShjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdCA9ICEhcHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLm1heGAgYW5kIGBfLm1pbmAgd2hpY2ggYWNjZXB0cyBhXG4gICAgICogYGNvbXBhcmF0b3JgIHRvIGRldGVybWluZSB0aGUgZXh0cmVtdW0gdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIHVzZWQgdG8gY29tcGFyZSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGV4dHJlbXVtIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VFeHRyZW11bShhcnJheSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY3VycmVudCA9IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICBpZiAoY3VycmVudCAhPSBudWxsICYmIChjb21wdXRlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gKGN1cnJlbnQgPT09IGN1cnJlbnQgJiYgIWlzU3ltYm9sKGN1cnJlbnQpKVxuICAgICAgICAgICAgICA6IGNvbXBhcmF0b3IoY3VycmVudCwgY29tcHV0ZWQpXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgdmFyIGNvbXB1dGVkID0gY3VycmVudCxcbiAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmlsbGAgd2l0aG91dCBhbiBpdGVyYXRlZSBjYWxsIGd1YXJkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmlsbC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBmaWxsIGBhcnJheWAgd2l0aC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBzdGFydCA9IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gICAgICB9XG4gICAgICBlbmQgPSAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gbGVuZ3RoKSA/IGxlbmd0aCA6IHRvSW50ZWdlcihlbmQpO1xuICAgICAgaWYgKGVuZCA8IDApIHtcbiAgICAgICAgZW5kICs9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGVuZCA9IHN0YXJ0ID4gZW5kID8gMCA6IHRvTGVuZ3RoKGVuZCk7XG4gICAgICB3aGlsZSAoc3RhcnQgPCBlbmQpIHtcbiAgICAgICAgYXJyYXlbc3RhcnQrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maWx0ZXJgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmxhdHRlbmAgd2l0aCBzdXBwb3J0IGZvciByZXN0cmljdGluZyBmbGF0dGVuaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGVwdGggVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ByZWRpY2F0ZT1pc0ZsYXR0ZW5hYmxlXSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzU3RyaWN0XSBSZXN0cmljdCB0byB2YWx1ZXMgdGhhdCBwYXNzIGBwcmVkaWNhdGVgIGNoZWNrcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0PVtdXSBUaGUgaW5pdGlhbCByZXN1bHQgdmFsdWUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGbGF0dGVuKGFycmF5LCBkZXB0aCwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHByZWRpY2F0ZSB8fCAocHJlZGljYXRlID0gaXNGbGF0dGVuYWJsZSk7XG4gICAgICByZXN1bHQgfHwgKHJlc3VsdCA9IFtdKTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAoZGVwdGggPiAwICYmIHByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICBpZiAoZGVwdGggPiAxKSB7XG4gICAgICAgICAgICAvLyBSZWN1cnNpdmVseSBmbGF0dGVuIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICAgICAgYmFzZUZsYXR0ZW4odmFsdWUsIGRlcHRoIC0gMSwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJyYXlQdXNoKHJlc3VsdCwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghaXNTdHJpY3QpIHtcbiAgICAgICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYmFzZUZvck93bmAgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgb2JqZWN0YFxuICAgICAqIHByb3BlcnRpZXMgcmV0dXJuZWQgYnkgYGtleXNGdW5jYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUZvciA9IGNyZWF0ZUJhc2VGb3IoKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYmFzZUZvcmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzXG4gICAgICogaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIHZhciBiYXNlRm9yUmlnaHQgPSBjcmVhdGVCYXNlRm9yKHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yKG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvck93blJpZ2h0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGb3JPd25SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JSaWdodChvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mdW5jdGlvbnNgIHdoaWNoIGNyZWF0ZXMgYW4gYXJyYXkgb2ZcbiAgICAgKiBgb2JqZWN0YCBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmaWx0ZXJlZCBmcm9tIGBwcm9wc2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBmaWx0ZXIuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRnVuY3Rpb25zKG9iamVjdCwgcHJvcHMpIHtcbiAgICAgIHJldHVybiBhcnJheUZpbHRlcihwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKG9iamVjdFtrZXldKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmdldGAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWZhdWx0IHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIG9iamVjdCA9IG9iamVjdFt0b0tleShwYXRoW2luZGV4KytdKV07XG4gICAgICB9XG4gICAgICByZXR1cm4gKGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCkgPyBvYmplY3QgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldEFsbEtleXNgIGFuZCBgZ2V0QWxsS2V5c0luYCB3aGljaCB1c2VzXG4gICAgICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gICAgICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ga2V5c0Z1bmMob2JqZWN0KTtcbiAgICAgIHJldHVybiBpc0FycmF5KG9iamVjdCkgPyByZXN1bHQgOiBhcnJheVB1c2gocmVzdWx0LCBzeW1ib2xzRnVuYyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgICAgIH1cbiAgICAgIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICAgICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmd0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHdCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+IG90aGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc2Agd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VIYXMob2JqZWN0LCBrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNJbmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VIYXNJbihvYmplY3QsIGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGtleSBpbiBPYmplY3Qob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pblJhbmdlYCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgbnVtYmVyYCBpcyBpbiB0aGUgcmFuZ2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHJldHVybiBudW1iZXIgPj0gbmF0aXZlTWluKHN0YXJ0LCBlbmQpICYmIG51bWJlciA8IG5hdGl2ZU1heChzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCwgd2l0aG91dCBzdXBwb3J0XG4gICAgICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHRoYXQgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXlzIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHNoYXJlZCB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludGVyc2VjdGlvbihhcnJheXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5jbHVkZXMgPSBjb21wYXJhdG9yID8gYXJyYXlJbmNsdWRlc1dpdGggOiBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5c1swXS5sZW5ndGgsXG4gICAgICAgICAgb3RoTGVuZ3RoID0gYXJyYXlzLmxlbmd0aCxcbiAgICAgICAgICBvdGhJbmRleCA9IG90aExlbmd0aCxcbiAgICAgICAgICBjYWNoZXMgPSBBcnJheShvdGhMZW5ndGgpLFxuICAgICAgICAgIG1heExlbmd0aCA9IEluZmluaXR5LFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAob3RoSW5kZXgtLSkge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcnJheXNbb3RoSW5kZXhdO1xuICAgICAgICBpZiAob3RoSW5kZXggJiYgaXRlcmF0ZWUpIHtcbiAgICAgICAgICBhcnJheSA9IGFycmF5TWFwKGFycmF5LCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgICAgfVxuICAgICAgICBtYXhMZW5ndGggPSBuYXRpdmVNaW4oYXJyYXkubGVuZ3RoLCBtYXhMZW5ndGgpO1xuICAgICAgICBjYWNoZXNbb3RoSW5kZXhdID0gIWNvbXBhcmF0b3IgJiYgKGl0ZXJhdGVlIHx8IChsZW5ndGggPj0gMTIwICYmIGFycmF5Lmxlbmd0aCA+PSAxMjApKVxuICAgICAgICAgID8gbmV3IFNldENhY2hlKG90aEluZGV4ICYmIGFycmF5KVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgYXJyYXkgPSBhcnJheXNbMF07XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHNlZW4gPSBjYWNoZXNbMF07XG5cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGggJiYgcmVzdWx0Lmxlbmd0aCA8IG1heExlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmICghKHNlZW5cbiAgICAgICAgICAgICAgPyBjYWNoZUhhcyhzZWVuLCBjb21wdXRlZClcbiAgICAgICAgICAgICAgOiBpbmNsdWRlcyhyZXN1bHQsIGNvbXB1dGVkLCBjb21wYXJhdG9yKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIG90aEluZGV4ID0gb3RoTGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICgtLW90aEluZGV4KSB7XG4gICAgICAgICAgICB2YXIgY2FjaGUgPSBjYWNoZXNbb3RoSW5kZXhdO1xuICAgICAgICAgICAgaWYgKCEoY2FjaGVcbiAgICAgICAgICAgICAgICAgID8gY2FjaGVIYXMoY2FjaGUsIGNvbXB1dGVkKVxuICAgICAgICAgICAgICAgICAgOiBpbmNsdWRlcyhhcnJheXNbb3RoSW5kZXhdLCBjb21wdXRlZCwgY29tcGFyYXRvcikpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2Vlbikge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmludmVydGAgYW5kIGBfLmludmVydEJ5YCB3aGljaCBpbnZlcnRzXG4gICAgICogYG9iamVjdGAgd2l0aCB2YWx1ZXMgdHJhbnNmb3JtZWQgYnkgYGl0ZXJhdGVlYCBhbmQgc2V0IGJ5IGBzZXR0ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0gdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludmVydGVyKG9iamVjdCwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCBpdGVyYXRlZSh2YWx1ZSksIGtleSwgb2JqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmludm9rZWAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogbWV0aG9kIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgIG9iamVjdCA9IHBhcmVudChvYmplY3QsIHBhdGgpO1xuICAgICAgdmFyIGZ1bmMgPSBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IG9iamVjdFt0b0tleShsYXN0KHBhdGgpKV07XG4gICAgICByZXR1cm4gZnVuYyA9PSBudWxsID8gdW5kZWZpbmVkIDogYXBwbHkoZnVuYywgb2JqZWN0LCBhcmdzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcnJheUJ1ZmZlcmAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0FycmF5QnVmZmVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcnJheUJ1ZmZlclRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0RhdGVgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGRhdGUgb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRGF0ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gZGF0ZVRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0VxdWFsYCB3aGljaCBzdXBwb3J0cyBwYXJ0aWFsIGNvbXBhcmlzb25zXG4gICAgICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gICAgICogIDIgLSBQYXJ0aWFsIGNvbXBhcmlzb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCBvdGhlciA9PSBudWxsIHx8ICghaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNPYmplY3RMaWtlKG90aGVyKSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUlzRXF1YWxEZWVwKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgYmFzZUlzRXF1YWwsIHN0YWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gICAgICogZGVlcCBjb21wYXJpc29ucyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICAgICAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRXF1YWxEZWVwKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgICAgICBvdGhJc0FyciA9IGlzQXJyYXkob3RoZXIpLFxuICAgICAgICAgIG9ialRhZyA9IG9iaklzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob2JqZWN0KSxcbiAgICAgICAgICBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTtcblxuICAgICAgb2JqVGFnID0gb2JqVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvYmpUYWc7XG4gICAgICBvdGhUYWcgPSBvdGhUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG90aFRhZztcblxuICAgICAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyxcbiAgICAgICAgICBvdGhJc09iaiA9IG90aFRhZyA9PSBvYmplY3RUYWcsXG4gICAgICAgICAgaXNTYW1lVGFnID0gb2JqVGFnID09IG90aFRhZztcblxuICAgICAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgICAgIGlmICghaXNCdWZmZXIob3RoZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIG9iaklzQXJyID0gdHJ1ZTtcbiAgICAgICAgb2JqSXNPYmogPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1NhbWVUYWcgJiYgIW9iaklzT2JqKSB7XG4gICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICAgICAgPyBlcXVhbEFycmF5cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKVxuICAgICAgICAgIDogZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCBvYmpUYWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgfVxuICAgICAgaWYgKCEoYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHKSkge1xuICAgICAgICB2YXIgb2JqSXNXcmFwcGVkID0gb2JqSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdfX3dyYXBwZWRfXycpLFxuICAgICAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICAgICAgaWYgKG9iaklzV3JhcHBlZCB8fCBvdGhJc1dyYXBwZWQpIHtcbiAgICAgICAgICB2YXIgb2JqVW53cmFwcGVkID0gb2JqSXNXcmFwcGVkID8gb2JqZWN0LnZhbHVlKCkgOiBvYmplY3QsXG4gICAgICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgICAgcmV0dXJuIGVxdWFsRnVuYyhvYmpVbndyYXBwZWQsIG90aFVud3JhcHBlZCwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWlzU2FtZVRhZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hcGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTWFwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IG1hcFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hdGNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtBcnJheX0gbWF0Y2hEYXRhIFRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBpbmRleCA9IG1hdGNoRGF0YS5sZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoID0gaW5kZXgsXG4gICAgICAgICAgbm9DdXN0b21pemVyID0gIWN1c3RvbWl6ZXI7XG5cbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gIWxlbmd0aDtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgdmFyIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgICAgICBpZiAoKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKVxuICAgICAgICAgICAgICA/IGRhdGFbMV0gIT09IG9iamVjdFtkYXRhWzBdXVxuICAgICAgICAgICAgICA6ICEoZGF0YVswXSBpbiBvYmplY3QpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgICAgICB2YXIga2V5ID0gZGF0YVswXSxcbiAgICAgICAgICAgIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgICAgICBzcmNWYWx1ZSA9IGRhdGFbMV07XG5cbiAgICAgICAgaWYgKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKSB7XG4gICAgICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgc3RhY2sgPSBuZXcgU3RhY2s7XG4gICAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIShyZXN1bHQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcsIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgICAgIDogcmVzdWx0XG4gICAgICAgICAgICAgICkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1JlZ0V4cGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcmVnZXhwLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzUmVnRXhwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSByZWdleHBUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNTZXRgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1NldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBzZXRUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXRlcmF0ZWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IFt2YWx1ZT1fLmlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGl0ZXJhdGVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJdGVyYXRlZSh2YWx1ZSkge1xuICAgICAgLy8gRG9uJ3Qgc3RvcmUgdGhlIGB0eXBlb2ZgIHJlc3VsdCBpbiBhIHZhcmlhYmxlIHRvIGF2b2lkIGEgSklUIGJ1ZyBpbiBTYWZhcmkgOS5cbiAgICAgIC8vIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTU2MDM0IGZvciBtb3JlIGRldGFpbHMuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSlcbiAgICAgICAgICA/IGJhc2VNYXRjaGVzUHJvcGVydHkodmFsdWVbMF0sIHZhbHVlWzFdKVxuICAgICAgICAgIDogYmFzZU1hdGNoZXModmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb3BlcnR5KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICAgICAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzSW5gIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUtleXNJbihvYmplY3QpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gbmF0aXZlS2V5c0luKG9iamVjdCk7XG4gICAgICB9XG4gICAgICB2YXIgaXNQcm90byA9IGlzUHJvdG90eXBlKG9iamVjdCksXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgaWYgKCEoa2V5ID09ICdjb25zdHJ1Y3RvcicgJiYgKGlzUHJvdG8gfHwgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmx0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VMdCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA8IG90aGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hcGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHRbKytpbmRleF0gPSBpdGVyYXRlZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hdGNoZXMoc291cmNlKSB7XG4gICAgICB2YXIgbWF0Y2hEYXRhID0gZ2V0TWF0Y2hEYXRhKHNvdXJjZSk7XG4gICAgICBpZiAobWF0Y2hEYXRhLmxlbmd0aCA9PSAxICYmIG1hdGNoRGF0YVswXVsyXSkge1xuICAgICAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUobWF0Y2hEYXRhWzBdWzBdLCBtYXRjaERhdGFbMF1bMV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNQcm9wZXJ0eWAgd2hpY2ggZG9lc24ndCBjbG9uZSBgc3JjVmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICAgICAgaWYgKGlzS2V5KHBhdGgpICYmIGlzU3RyaWN0Q29tcGFyYWJsZShzcmNWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKHRvS2V5KHBhdGgpLCBzcmNWYWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHZhciBvYmpWYWx1ZSA9IGdldChvYmplY3QsIHBhdGgpO1xuICAgICAgICByZXR1cm4gKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgb2JqVmFsdWUgPT09IHNyY1ZhbHVlKVxuICAgICAgICAgID8gaGFzSW4ob2JqZWN0LCBwYXRoKVxuICAgICAgICAgIDogYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZXJnZWAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdlZCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICBpZiAob2JqZWN0ID09PSBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYmFzZUZvcihzb3VyY2UsIGZ1bmN0aW9uKHNyY1ZhbHVlLCBrZXkpIHtcbiAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgaWYgKGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgICAgIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIGJhc2VNZXJnZSwgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgICAgID8gY3VzdG9taXplcihzYWZlR2V0KG9iamVjdCwga2V5KSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VNZXJnZWAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICAgICAqIGRlZXAgbWVyZ2VzIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gICAgICogcmVmZXJlbmNlcyB0byBiZSBtZXJnZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gbWVyZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtZXJnZUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1lcmdlIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIG1lcmdlRnVuYywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IHNhZmVHZXQob2JqZWN0LCBrZXkpLFxuICAgICAgICAgIHNyY1ZhbHVlID0gc2FmZUdldChzb3VyY2UsIGtleSksXG4gICAgICAgICAgc3RhY2tlZCA9IHN0YWNrLmdldChzcmNWYWx1ZSk7XG5cbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHN0YWNrZWQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgID8gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHZhciBpc0NvbW1vbiA9IG5ld1ZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChpc0NvbW1vbikge1xuICAgICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHNyY1ZhbHVlKSxcbiAgICAgICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiBpc0J1ZmZlcihzcmNWYWx1ZSksXG4gICAgICAgICAgICBpc1R5cGVkID0gIWlzQXJyICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHNyY1ZhbHVlKTtcblxuICAgICAgICBuZXdWYWx1ZSA9IHNyY1ZhbHVlO1xuICAgICAgICBpZiAoaXNBcnIgfHwgaXNCdWZmIHx8IGlzVHlwZWQpIHtcbiAgICAgICAgICBpZiAoaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjb3B5QXJyYXkob2JqVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc0J1ZmYpIHtcbiAgICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNsb25lQnVmZmVyKHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNUeXBlZCkge1xuICAgICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY2xvbmVUeXBlZEFycmF5KHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHNyY1ZhbHVlKSB8fCBpc0FyZ3VtZW50cyhzcmNWYWx1ZSkpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgICAgIGlmIChpc0FyZ3VtZW50cyhvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gdG9QbGFpbk9iamVjdChvYmpWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKCFpc09iamVjdChvYmpWYWx1ZSkgfHwgaXNGdW5jdGlvbihvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gaW5pdENsb25lT2JqZWN0KHNyY1ZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzQ29tbW9uKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBzdGFjay5zZXQoc3JjVmFsdWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgbWVyZ2VGdW5jKG5ld1ZhbHVlLCBzcmNWYWx1ZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5udGhgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG50aCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU50aChhcnJheSwgbikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG4gKz0gbiA8IDAgPyBsZW5ndGggOiAwO1xuICAgICAgcmV0dXJuIGlzSW5kZXgobiwgbGVuZ3RoKSA/IGFycmF5W25dIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm9yZGVyQnlgIHdpdGhvdXQgcGFyYW0gZ3VhcmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbltdfE9iamVjdFtdfHN0cmluZ1tdfSBpdGVyYXRlZXMgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IG9yZGVycyBUaGUgc29ydCBvcmRlcnMgb2YgYGl0ZXJhdGVlc2AuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzKSB7XG4gICAgICBpZiAoaXRlcmF0ZWVzLmxlbmd0aCkge1xuICAgICAgICBpdGVyYXRlZXMgPSBhcnJheU1hcChpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgaWYgKGlzQXJyYXkoaXRlcmF0ZWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGJhc2VHZXQodmFsdWUsIGl0ZXJhdGVlLmxlbmd0aCA9PT0gMSA/IGl0ZXJhdGVlWzBdIDogaXRlcmF0ZWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gaXRlcmF0ZWU7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW2lkZW50aXR5XTtcbiAgICAgIH1cblxuICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICBpdGVyYXRlZXMgPSBhcnJheU1hcChpdGVyYXRlZXMsIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG5cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlTWFwKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgdmFyIGNyaXRlcmlhID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICAgIHJldHVybiBpdGVyYXRlZSh2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4geyAnY3JpdGVyaWEnOiBjcml0ZXJpYSwgJ2luZGV4JzogKytpbmRleCwgJ3ZhbHVlJzogdmFsdWUgfTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYmFzZVNvcnRCeShyZXN1bHQsIGZ1bmN0aW9uKG9iamVjdCwgb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucGlja2Agd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUGljayhvYmplY3QsIHBhdGhzKSB7XG4gICAgICByZXR1cm4gYmFzZVBpY2tCeShvYmplY3QsIHBhdGhzLCBmdW5jdGlvbih2YWx1ZSwgcGF0aCkge1xuICAgICAgICByZXR1cm4gaGFzSW4ob2JqZWN0LCBwYXRoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mICBgXy5waWNrQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVBpY2tCeShvYmplY3QsIHBhdGhzLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHBhdGggPSBwYXRoc1tpbmRleF0sXG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcblxuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBwYXRoKSkge1xuICAgICAgICAgIGJhc2VTZXQocmVzdWx0LCBjYXN0UGF0aChwYXRoLCBvYmplY3QpLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUHJvcGVydHlgIHdoaWNoIHN1cHBvcnRzIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVByb3BlcnR5RGVlcChwYXRoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnB1bGxBbGxCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgICAqIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleE9mID0gY29tcGFyYXRvciA/IGJhc2VJbmRleE9mV2l0aCA6IGJhc2VJbmRleE9mLFxuICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICBzZWVuID0gYXJyYXk7XG5cbiAgICAgIGlmIChhcnJheSA9PT0gdmFsdWVzKSB7XG4gICAgICAgIHZhbHVlcyA9IGNvcHlBcnJheSh2YWx1ZXMpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIHNlZW4gPSBhcnJheU1hcChhcnJheSwgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZnJvbUluZGV4ID0gMCxcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWVzW2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB3aGlsZSAoKGZyb21JbmRleCA9IGluZGV4T2Yoc2VlbiwgY29tcHV0ZWQsIGZyb21JbmRleCwgY29tcGFyYXRvcikpID4gLTEpIHtcbiAgICAgICAgICBpZiAoc2VlbiAhPT0gYXJyYXkpIHtcbiAgICAgICAgICAgIHNwbGljZS5jYWxsKHNlZW4sIGZyb21JbmRleCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNwbGljZS5jYWxsKGFycmF5LCBmcm9tSW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHVsbEF0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBpbmRleGVzIG9yIGNhcHR1cmluZyB0aGUgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcltdfSBpbmRleGVzIFRoZSBpbmRleGVzIG9mIGVsZW1lbnRzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHVsbEF0KGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPyBpbmRleGVzLmxlbmd0aCA6IDAsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGluZGV4ZXNbbGVuZ3RoXTtcbiAgICAgICAgaWYgKGxlbmd0aCA9PSBsYXN0SW5kZXggfHwgaW5kZXggIT09IHByZXZpb3VzKSB7XG4gICAgICAgICAgdmFyIHByZXZpb3VzID0gaW5kZXg7XG4gICAgICAgICAgaWYgKGlzSW5kZXgoaW5kZXgpKSB7XG4gICAgICAgICAgICBzcGxpY2UuY2FsbChhcnJheSwgaW5kZXgsIDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBiYXNlVW5zZXQoYXJyYXksIGluZGV4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yYW5kb21gIHdpdGhvdXQgc3VwcG9ydCBmb3IgcmV0dXJuaW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxvd2VyIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJhbmRvbSBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJhbmRvbShsb3dlciwgdXBwZXIpIHtcbiAgICAgIHJldHVybiBsb3dlciArIG5hdGl2ZUZsb29yKG5hdGl2ZVJhbmRvbSgpICogKHVwcGVyIC0gbG93ZXIgKyAxKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmFuZ2VgIGFuZCBgXy5yYW5nZVJpZ2h0YCB3aGljaCBkb2Vzbid0XG4gICAgICogY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RlcCBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXAsIGZyb21SaWdodCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KG5hdGl2ZUNlaWwoKGVuZCAtIHN0YXJ0KSAvIChzdGVwIHx8IDEpKSwgMCksXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHJlc3VsdFtmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XSA9IHN0YXJ0O1xuICAgICAgICBzdGFydCArPSBzdGVwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXBlYXRgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIHJlcGVhdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgc3RyaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJlcGVhdGVkIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmVwZWF0KHN0cmluZywgbikge1xuICAgICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgICAgaWYgKCFzdHJpbmcgfHwgbiA8IDEgfHwgbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIC8vIExldmVyYWdlIHRoZSBleHBvbmVudGlhdGlvbiBieSBzcXVhcmluZyBhbGdvcml0aG0gZm9yIGEgZmFzdGVyIHJlcGVhdC5cbiAgICAgIC8vIFNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FeHBvbmVudGlhdGlvbl9ieV9zcXVhcmluZyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgZG8ge1xuICAgICAgICBpZiAobiAlIDIpIHtcbiAgICAgICAgICByZXN1bHQgKz0gc3RyaW5nO1xuICAgICAgICB9XG4gICAgICAgIG4gPSBuYXRpdmVGbG9vcihuIC8gMik7XG4gICAgICAgIGlmIChuKSB7XG4gICAgICAgICAgc3RyaW5nICs9IHN0cmluZztcbiAgICAgICAgfVxuICAgICAgfSB3aGlsZSAobik7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVzdGAgd2hpY2ggZG9lc24ndCB2YWxpZGF0ZSBvciBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmVzdChmdW5jLCBzdGFydCkge1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCBpZGVudGl0eSksIGZ1bmMgKyAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2FtcGxlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2FtcGxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBhcnJheVNhbXBsZSh2YWx1ZXMoY29sbGVjdGlvbikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNhbXBsZVNpemVgIHdpdGhvdXQgcGFyYW0gZ3VhcmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNhbXBsZVNpemUoY29sbGVjdGlvbiwgbikge1xuICAgICAgdmFyIGFycmF5ID0gdmFsdWVzKGNvbGxlY3Rpb24pO1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGFycmF5LCBiYXNlQ2xhbXAobiwgMCwgYXJyYXkubGVuZ3RoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2V0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBwYXRoIGNyZWF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH1cbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxLFxuICAgICAgICAgIG5lc3RlZCA9IG9iamVjdDtcblxuICAgICAgd2hpbGUgKG5lc3RlZCAhPSBudWxsICYmICsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKSxcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gdmFsdWU7XG5cbiAgICAgICAgaWYgKGtleSA9PT0gJ19fcHJvdG9fXycgfHwga2V5ID09PSAnY29uc3RydWN0b3InIHx8IGtleSA9PT0gJ3Byb3RvdHlwZScpIHtcbiAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluZGV4ICE9IGxhc3RJbmRleCkge1xuICAgICAgICAgIHZhciBvYmpWYWx1ZSA9IG5lc3RlZFtrZXldO1xuICAgICAgICAgIG5ld1ZhbHVlID0gY3VzdG9taXplciA/IGN1c3RvbWl6ZXIob2JqVmFsdWUsIGtleSwgbmVzdGVkKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBpc09iamVjdChvYmpWYWx1ZSlcbiAgICAgICAgICAgICAgPyBvYmpWYWx1ZVxuICAgICAgICAgICAgICA6IChpc0luZGV4KHBhdGhbaW5kZXggKyAxXSkgPyBbXSA6IHt9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXNzaWduVmFsdWUobmVzdGVkLCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgbmVzdGVkID0gbmVzdGVkW2tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXREYXRhYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NvY2lhdGUgbWV0YWRhdGEgd2l0aC5cbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgVGhlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGJhc2VTZXREYXRhID0gIW1ldGFNYXAgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIGRhdGEpIHtcbiAgICAgIG1ldGFNYXAuc2V0KGZ1bmMsIGRhdGEpO1xuICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXRUb1N0cmluZ2Agd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZVNldFRvU3RyaW5nID0gIWRlZmluZVByb3BlcnR5ID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBzdHJpbmcpIHtcbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eShmdW5jLCAndG9TdHJpbmcnLCB7XG4gICAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgICAnZW51bWVyYWJsZSc6IGZhbHNlLFxuICAgICAgICAndmFsdWUnOiBjb25zdGFudChzdHJpbmcpLFxuICAgICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2h1ZmZsZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNodWZmbGUoY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKHZhbHVlcyhjb2xsZWN0aW9uKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2xpY2VgIHdpdGhvdXQgYW4gaXRlcmF0ZWUgY2FsbCBndWFyZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogKGxlbmd0aCArIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGVuZCA9IGVuZCA+IGxlbmd0aCA/IGxlbmd0aCA6IGVuZDtcbiAgICAgIGlmIChlbmQgPCAwKSB7XG4gICAgICAgIGVuZCArPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBsZW5ndGggPSBzdGFydCA+IGVuZCA/IDAgOiAoKGVuZCAtIHN0YXJ0KSA+Pj4gMCk7XG4gICAgICBzdGFydCA+Pj49IDA7XG5cbiAgICAgIHZhciByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IGFycmF5W2luZGV4ICsgc3RhcnRdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb21lYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29tZShjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQ7XG5cbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHQgPSBwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuICFyZXN1bHQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiAhIXJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRJbmRleGAgYW5kIGBfLnNvcnRlZExhc3RJbmRleGAgd2hpY2hcbiAgICAgKiBwZXJmb3JtcyBhIGJpbmFyeSBzZWFyY2ggb2YgYGFycmF5YCB0byBkZXRlcm1pbmUgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWBcbiAgICAgKiBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcmV0SGlnaGVzdF0gU3BlY2lmeSByZXR1cm5pbmcgdGhlIGhpZ2hlc3QgcXVhbGlmaWVkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCByZXRIaWdoZXN0KSB7XG4gICAgICB2YXIgbG93ID0gMCxcbiAgICAgICAgICBoaWdoID0gYXJyYXkgPT0gbnVsbCA/IGxvdyA6IGFycmF5Lmxlbmd0aDtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PT0gdmFsdWUgJiYgaGlnaCA8PSBIQUxGX01BWF9BUlJBWV9MRU5HVEgpIHtcbiAgICAgICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgICB2YXIgbWlkID0gKGxvdyArIGhpZ2gpID4+PiAxLFxuICAgICAgICAgICAgICBjb21wdXRlZCA9IGFycmF5W21pZF07XG5cbiAgICAgICAgICBpZiAoY29tcHV0ZWQgIT09IG51bGwgJiYgIWlzU3ltYm9sKGNvbXB1dGVkKSAmJlxuICAgICAgICAgICAgICAocmV0SGlnaGVzdCA/IChjb21wdXRlZCA8PSB2YWx1ZSkgOiAoY29tcHV0ZWQgPCB2YWx1ZSkpKSB7XG4gICAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGlnaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGlkZW50aXR5LCByZXRIaWdoZXN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRJbmRleEJ5YCBhbmQgYF8uc29ydGVkTGFzdEluZGV4QnlgXG4gICAgICogd2hpY2ggaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlXG4gICAgICogdGhlaXIgc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JldEhpZ2hlc3RdIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBoaWdoZXN0IHF1YWxpZmllZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSwgcmV0SGlnaGVzdCkge1xuICAgICAgdmFyIGxvdyA9IDAsXG4gICAgICAgICAgaGlnaCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKGhpZ2ggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG5cbiAgICAgIHZhbHVlID0gaXRlcmF0ZWUodmFsdWUpO1xuICAgICAgdmFyIHZhbElzTmFOID0gdmFsdWUgIT09IHZhbHVlLFxuICAgICAgICAgIHZhbElzTnVsbCA9IHZhbHVlID09PSBudWxsLFxuICAgICAgICAgIHZhbElzU3ltYm9sID0gaXNTeW1ib2wodmFsdWUpLFxuICAgICAgICAgIHZhbElzVW5kZWZpbmVkID0gdmFsdWUgPT09IHVuZGVmaW5lZDtcblxuICAgICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgdmFyIG1pZCA9IG5hdGl2ZUZsb29yKChsb3cgKyBoaWdoKSAvIDIpLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZShhcnJheVttaWRdKSxcbiAgICAgICAgICAgIG90aElzRGVmaW5lZCA9IGNvbXB1dGVkICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICBvdGhJc051bGwgPSBjb21wdXRlZCA9PT0gbnVsbCxcbiAgICAgICAgICAgIG90aElzUmVmbGV4aXZlID0gY29tcHV0ZWQgPT09IGNvbXB1dGVkLFxuICAgICAgICAgICAgb3RoSXNTeW1ib2wgPSBpc1N5bWJvbChjb21wdXRlZCk7XG5cbiAgICAgICAgaWYgKHZhbElzTmFOKSB7XG4gICAgICAgICAgdmFyIHNldExvdyA9IHJldEhpZ2hlc3QgfHwgb3RoSXNSZWZsZXhpdmU7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNVbmRlZmluZWQpIHtcbiAgICAgICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiAocmV0SGlnaGVzdCB8fCBvdGhJc0RlZmluZWQpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzTnVsbCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIG90aElzRGVmaW5lZCAmJiAocmV0SGlnaGVzdCB8fCAhb3RoSXNOdWxsKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc1N5bWJvbCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIG90aElzRGVmaW5lZCAmJiAhb3RoSXNOdWxsICYmIChyZXRIaWdoZXN0IHx8ICFvdGhJc1N5bWJvbCk7XG4gICAgICAgIH0gZWxzZSBpZiAob3RoSXNOdWxsIHx8IG90aElzU3ltYm9sKSB7XG4gICAgICAgICAgc2V0TG93ID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0TG93ID0gcmV0SGlnaGVzdCA/IChjb21wdXRlZCA8PSB2YWx1ZSkgOiAoY29tcHV0ZWQgPCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNldExvdykge1xuICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZU1pbihoaWdoLCBNQVhfQVJSQVlfSU5ERVgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZFVuaXFgIGFuZCBgXy5zb3J0ZWRVbmlxQnlgIHdpdGhvdXRcbiAgICAgKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRVbmlxKGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIGlmICghaW5kZXggfHwgIWVxKGNvbXB1dGVkLCBzZWVuKSkge1xuICAgICAgICAgIHZhciBzZWVuID0gY29tcHV0ZWQ7XG4gICAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9OdW1iZXJgIHdoaWNoIGRvZXNuJ3QgZW5zdXJlIGNvcnJlY3RcbiAgICAgKiBjb252ZXJzaW9ucyBvZiBiaW5hcnksIGhleGFkZWNpbWFsLCBvciBvY3RhbCBzdHJpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVG9OdW1iZXIodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gTkFOO1xuICAgICAgfVxuICAgICAgcmV0dXJuICt2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1N0cmluZ2Agd2hpY2ggZG9lc24ndCBjb252ZXJ0IG51bGxpc2hcbiAgICAgKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29udmVydCB2YWx1ZXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCBiYXNlVG9TdHJpbmcpICsgJyc7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICAgICAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuaXFCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VVbmlxKGFycmF5LCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBpc0NvbW1vbiA9IHRydWUsXG4gICAgICAgICAgcmVzdWx0ID0gW10sXG4gICAgICAgICAgc2VlbiA9IHJlc3VsdDtcblxuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzV2l0aDtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGxlbmd0aCA+PSBMQVJHRV9BUlJBWV9TSVpFKSB7XG4gICAgICAgIHZhciBzZXQgPSBpdGVyYXRlZSA/IG51bGwgOiBjcmVhdGVTZXQoYXJyYXkpO1xuICAgICAgICBpZiAoc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIHNldFRvQXJyYXkoc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBpbmNsdWRlcyA9IGNhY2hlSGFzO1xuICAgICAgICBzZWVuID0gbmV3IFNldENhY2hlO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHNlZW4gPSBpdGVyYXRlZSA/IFtdIDogcmVzdWx0O1xuICAgICAgfVxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmIChpc0NvbW1vbiAmJiBjb21wdXRlZCA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICB2YXIgc2VlbkluZGV4ID0gc2Vlbi5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKHNlZW5JbmRleC0tKSB7XG4gICAgICAgICAgICBpZiAoc2VlbltzZWVuSW5kZXhdID09PSBjb21wdXRlZCkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWluY2x1ZGVzKHNlZW4sIGNvbXB1dGVkLCBjb21wYXJhdG9yKSkge1xuICAgICAgICAgIGlmIChzZWVuICE9PSByZXN1bHQpIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bnNldGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHByb3BlcnR5IHBhdGggdG8gdW5zZXQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBwcm9wZXJ0eSBpcyBkZWxldGVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVuc2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICBvYmplY3QgPSBwYXJlbnQob2JqZWN0LCBwYXRoKTtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCB8fCBkZWxldGUgb2JqZWN0W3RvS2V5KGxhc3QocGF0aCkpXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51cGRhdGVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byB1cGRhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlciBUaGUgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBwYXRoIGNyZWF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIHVwZGF0ZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHJldHVybiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdXBkYXRlcihiYXNlR2V0KG9iamVjdCwgcGF0aCkpLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZHJvcFdoaWxlYCBhbmQgYF8udGFrZVdoaWxlYFxuICAgICAqIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRHJvcF0gU3BlY2lmeSBkcm9wcGluZyBlbGVtZW50cyBpbnN0ZWFkIG9mIHRha2luZyB0aGVtLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlV2hpbGUoYXJyYXksIHByZWRpY2F0ZSwgaXNEcm9wLCBmcm9tUmlnaHQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMTtcblxuICAgICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkgJiZcbiAgICAgICAgcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge31cblxuICAgICAgcmV0dXJuIGlzRHJvcFxuICAgICAgICA/IGJhc2VTbGljZShhcnJheSwgKGZyb21SaWdodCA/IDAgOiBpbmRleCksIChmcm9tUmlnaHQgPyBpbmRleCArIDEgOiBsZW5ndGgpKVxuICAgICAgICA6IGJhc2VTbGljZShhcnJheSwgKGZyb21SaWdodCA/IGluZGV4ICsgMSA6IDApLCAoZnJvbVJpZ2h0ID8gbGVuZ3RoIDogaW5kZXgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgd3JhcHBlclZhbHVlYCB3aGljaCByZXR1cm5zIHRoZSByZXN1bHQgb2ZcbiAgICAgKiBwZXJmb3JtaW5nIGEgc2VxdWVuY2Ugb2YgYWN0aW9ucyBvbiB0aGUgdW53cmFwcGVkIGB2YWx1ZWAsIHdoZXJlIGVhY2hcbiAgICAgKiBzdWNjZXNzaXZlIGFjdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFjdGlvbnMgQWN0aW9ucyB0byBwZXJmb3JtIHRvIHJlc29sdmUgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVdyYXBwZXJWYWx1ZSh2YWx1ZSwgYWN0aW9ucykge1xuICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC52YWx1ZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlKGFjdGlvbnMsIGZ1bmN0aW9uKHJlc3VsdCwgYWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBhY3Rpb24uZnVuYy5hcHBseShhY3Rpb24udGhpc0FyZywgYXJyYXlQdXNoKFtyZXN1bHRdLCBhY3Rpb24uYXJncykpO1xuICAgICAgfSwgcmVzdWx0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8ueG9yYCwgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHRoYXQgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXlzIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlWG9yKGFycmF5cywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheXMubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VVbmlxKGFycmF5c1swXSkgOiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFycmF5c1tpbmRleF0sXG4gICAgICAgICAgICBvdGhJbmRleCA9IC0xO1xuXG4gICAgICAgIHdoaWxlICgrK290aEluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKG90aEluZGV4ICE9IGluZGV4KSB7XG4gICAgICAgICAgICByZXN1bHRbaW5kZXhdID0gYmFzZURpZmZlcmVuY2UocmVzdWx0W2luZGV4XSB8fCBhcnJheSwgYXJyYXlzW290aEluZGV4XSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKHJlc3VsdCwgMSksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uemlwT2JqZWN0YCB3aGljaCBhc3NpZ25zIHZhbHVlcyB1c2luZyBgYXNzaWduRnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhc3NpZ25GdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVppcE9iamVjdChwcm9wcywgdmFsdWVzLCBhc3NpZ25GdW5jKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGgsXG4gICAgICAgICAgdmFsc0xlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGluZGV4IDwgdmFsc0xlbmd0aCA/IHZhbHVlc1tpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICAgIGFzc2lnbkZ1bmMocmVzdWx0LCBwcm9wc1tpbmRleF0sIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBhbiBlbXB0eSBhcnJheSBpZiBpdCdzIG5vdCBhbiBhcnJheSBsaWtlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIHRoZSBjYXN0IGFycmF5LWxpa2Ugb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkgPyB2YWx1ZSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYGlkZW50aXR5YCBpZiBpdCdzIG5vdCBhIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBjYXN0IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nID8gdmFsdWUgOiBpZGVudGl0eTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGEgcGF0aCBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0UGF0aCh2YWx1ZSwgb2JqZWN0KSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzS2V5KHZhbHVlLCBvYmplY3QpID8gW3ZhbHVlXSA6IHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgYGJhc2VSZXN0YCBhbGlhcyB3aGljaCBjYW4gYmUgcmVwbGFjZWQgd2l0aCBgaWRlbnRpdHlgIGJ5IG1vZHVsZVxuICAgICAqIHJlcGxhY2VtZW50IHBsdWdpbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIHZhciBjYXN0UmVzdCA9IGJhc2VSZXN0O1xuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYGFycmF5YCB0byBhIHNsaWNlIGlmIGl0J3MgbmVlZGVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3Qgc2xpY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdFNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQ7XG4gICAgICByZXR1cm4gKCFzdGFydCAmJiBlbmQgPj0gbGVuZ3RoKSA/IGFycmF5IDogYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNpbXBsZSB3cmFwcGVyIGFyb3VuZCB0aGUgZ2xvYmFsIFtgY2xlYXJUaW1lb3V0YF0oaHR0cHM6Ly9tZG4uaW8vY2xlYXJUaW1lb3V0KS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ8T2JqZWN0fSBpZCBUaGUgdGltZXIgaWQgb3IgdGltZW91dCBvYmplY3Qgb2YgdGhlIHRpbWVyIHRvIGNsZWFyLlxuICAgICAqL1xuICAgIHZhciBjbGVhclRpbWVvdXQgPSBjdHhDbGVhclRpbWVvdXQgfHwgZnVuY3Rpb24oaWQpIHtcbiAgICAgIHJldHVybiByb290LmNsZWFyVGltZW91dChpZCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiAgYGJ1ZmZlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgVGhlIGJ1ZmZlciB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBidWZmZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVCdWZmZXIoYnVmZmVyLCBpc0RlZXApIHtcbiAgICAgIGlmIChpc0RlZXApIHtcbiAgICAgICAgcmV0dXJuIGJ1ZmZlci5zbGljZSgpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGJ1ZmZlci5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gYWxsb2NVbnNhZmUgPyBhbGxvY1Vuc2FmZShsZW5ndGgpIDogbmV3IGJ1ZmZlci5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gICAgICBidWZmZXIuY29weShyZXN1bHQpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGFycmF5QnVmZmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYXJyYXlCdWZmZXIgVGhlIGFycmF5IGJ1ZmZlciB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXlCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBhcnJheSBidWZmZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVBcnJheUJ1ZmZlcihhcnJheUJ1ZmZlcikge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBhcnJheUJ1ZmZlci5jb25zdHJ1Y3RvcihhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgIG5ldyBVaW50OEFycmF5KHJlc3VsdCkuc2V0KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgZGF0YVZpZXdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVZpZXcgVGhlIGRhdGEgdmlldyB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBkYXRhIHZpZXcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEYXRhVmlldyhkYXRhVmlldywgaXNEZWVwKSB7XG4gICAgICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcihkYXRhVmlldy5idWZmZXIpIDogZGF0YVZpZXcuYnVmZmVyO1xuICAgICAgcmV0dXJuIG5ldyBkYXRhVmlldy5jb25zdHJ1Y3RvcihidWZmZXIsIGRhdGFWaWV3LmJ5dGVPZmZzZXQsIGRhdGFWaWV3LmJ5dGVMZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgcmVnZXhwYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHJlZ2V4cCBUaGUgcmVnZXhwIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCByZWdleHAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVSZWdFeHAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IHJlZ2V4cC5jb25zdHJ1Y3RvcihyZWdleHAuc291cmNlLCByZUZsYWdzLmV4ZWMocmVnZXhwKSk7XG4gICAgICByZXN1bHQubGFzdEluZGV4ID0gcmVnZXhwLmxhc3RJbmRleDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBgc3ltYm9sYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzeW1ib2wgVGhlIHN5bWJvbCBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHN5bWJvbCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVTeW1ib2woc3ltYm9sKSB7XG4gICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZiA/IE9iamVjdChzeW1ib2xWYWx1ZU9mLmNhbGwoc3ltYm9sKSkgOiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHR5cGVkQXJyYXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdHlwZWRBcnJheSBUaGUgdHlwZWQgYXJyYXkgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgdHlwZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVUeXBlZEFycmF5KHR5cGVkQXJyYXksIGlzRGVlcCkge1xuICAgICAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIodHlwZWRBcnJheS5idWZmZXIpIDogdHlwZWRBcnJheS5idWZmZXI7XG4gICAgICByZXR1cm4gbmV3IHR5cGVkQXJyYXkuY29uc3RydWN0b3IoYnVmZmVyLCB0eXBlZEFycmF5LmJ5dGVPZmZzZXQsIHR5cGVkQXJyYXkubGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wYXJlcyB2YWx1ZXMgdG8gc29ydCB0aGVtIGluIGFzY2VuZGluZyBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHNvcnQgb3JkZXIgaW5kaWNhdG9yIGZvciBgdmFsdWVgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVBc2NlbmRpbmcodmFsdWUsIG90aGVyKSB7XG4gICAgICBpZiAodmFsdWUgIT09IG90aGVyKSB7XG4gICAgICAgIHZhciB2YWxJc0RlZmluZWQgPSB2YWx1ZSAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgdmFsSXNOdWxsID0gdmFsdWUgPT09IG51bGwsXG4gICAgICAgICAgICB2YWxJc1JlZmxleGl2ZSA9IHZhbHVlID09PSB2YWx1ZSxcbiAgICAgICAgICAgIHZhbElzU3ltYm9sID0gaXNTeW1ib2wodmFsdWUpO1xuXG4gICAgICAgIHZhciBvdGhJc0RlZmluZWQgPSBvdGhlciAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgb3RoSXNOdWxsID0gb3RoZXIgPT09IG51bGwsXG4gICAgICAgICAgICBvdGhJc1JlZmxleGl2ZSA9IG90aGVyID09PSBvdGhlcixcbiAgICAgICAgICAgIG90aElzU3ltYm9sID0gaXNTeW1ib2wob3RoZXIpO1xuXG4gICAgICAgIGlmICgoIW90aElzTnVsbCAmJiAhb3RoSXNTeW1ib2wgJiYgIXZhbElzU3ltYm9sICYmIHZhbHVlID4gb3RoZXIpIHx8XG4gICAgICAgICAgICAodmFsSXNTeW1ib2wgJiYgb3RoSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlICYmICFvdGhJc051bGwgJiYgIW90aElzU3ltYm9sKSB8fFxuICAgICAgICAgICAgKHZhbElzTnVsbCAmJiBvdGhJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAoIXZhbElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICF2YWxJc1JlZmxleGl2ZSkge1xuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoIXZhbElzTnVsbCAmJiAhdmFsSXNTeW1ib2wgJiYgIW90aElzU3ltYm9sICYmIHZhbHVlIDwgb3RoZXIpIHx8XG4gICAgICAgICAgICAob3RoSXNTeW1ib2wgJiYgdmFsSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlICYmICF2YWxJc051bGwgJiYgIXZhbElzU3ltYm9sKSB8fFxuICAgICAgICAgICAgKG90aElzTnVsbCAmJiB2YWxJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAoIW90aElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICFvdGhJc1JlZmxleGl2ZSkge1xuICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5vcmRlckJ5YCB0byBjb21wYXJlIG11bHRpcGxlIHByb3BlcnRpZXMgb2YgYSB2YWx1ZSB0byBhbm90aGVyXG4gICAgICogYW5kIHN0YWJsZSBzb3J0IHRoZW0uXG4gICAgICpcbiAgICAgKiBJZiBgb3JkZXJzYCBpcyB1bnNwZWNpZmllZCwgYWxsIHZhbHVlcyBhcmUgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlci4gT3RoZXJ3aXNlLFxuICAgICAqIHNwZWNpZnkgYW4gb3JkZXIgb2YgXCJkZXNjXCIgZm9yIGRlc2NlbmRpbmcgb3IgXCJhc2NcIiBmb3IgYXNjZW5kaW5nIHNvcnQgb3JkZXJcbiAgICAgKiBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW5bXXxzdHJpbmdbXX0gb3JkZXJzIFRoZSBvcmRlciB0byBzb3J0IGJ5IGZvciBlYWNoIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHNvcnQgb3JkZXIgaW5kaWNhdG9yIGZvciBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYXJlTXVsdGlwbGUob2JqZWN0LCBvdGhlciwgb3JkZXJzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBvYmpDcml0ZXJpYSA9IG9iamVjdC5jcml0ZXJpYSxcbiAgICAgICAgICBvdGhDcml0ZXJpYSA9IG90aGVyLmNyaXRlcmlhLFxuICAgICAgICAgIGxlbmd0aCA9IG9iakNyaXRlcmlhLmxlbmd0aCxcbiAgICAgICAgICBvcmRlcnNMZW5ndGggPSBvcmRlcnMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY29tcGFyZUFzY2VuZGluZyhvYmpDcml0ZXJpYVtpbmRleF0sIG90aENyaXRlcmlhW2luZGV4XSk7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICBpZiAoaW5kZXggPj0gb3JkZXJzTGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgb3JkZXIgPSBvcmRlcnNbaW5kZXhdO1xuICAgICAgICAgIHJldHVybiByZXN1bHQgKiAob3JkZXIgPT0gJ2Rlc2MnID8gLTEgOiAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gRml4ZXMgYW4gYEFycmF5I3NvcnRgIGJ1ZyBpbiB0aGUgSlMgZW5naW5lIGVtYmVkZGVkIGluIEFkb2JlIGFwcGxpY2F0aW9uc1xuICAgICAgLy8gdGhhdCBjYXVzZXMgaXQsIHVuZGVyIGNlcnRhaW4gY2lyY3Vtc3RhbmNlcywgdG8gcHJvdmlkZSB0aGUgc2FtZSB2YWx1ZSBmb3JcbiAgICAgIC8vIGBvYmplY3RgIGFuZCBgb3RoZXJgLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2phc2hrZW5hcy91bmRlcnNjb3JlL3B1bGwvMTI0N1xuICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIC8vXG4gICAgICAvLyBUaGlzIGFsc28gZW5zdXJlcyBhIHN0YWJsZSBzb3J0IGluIFY4IGFuZCBvdGhlciBlbmdpbmVzLlxuICAgICAgLy8gU2VlIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTkwIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICByZXR1cm4gb2JqZWN0LmluZGV4IC0gb3RoZXIuaW5kZXg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSB0aGF0IGlzIHRoZSBjb21wb3NpdGlvbiBvZiBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMsXG4gICAgICogcGxhY2Vob2xkZXJzLCBhbmQgcHJvdmlkZWQgYXJndW1lbnRzIGludG8gYSBzaW5nbGUgYXJyYXkgb2YgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGhvbGRlcnMgVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW1zIHtib29sZWFufSBbaXNDdXJyaWVkXSBTcGVjaWZ5IGNvbXBvc2luZyBmb3IgYSBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbXBvc2VkIGFyZ3VtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wb3NlQXJncyhhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKSB7XG4gICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoLFxuICAgICAgICAgIGhvbGRlcnNMZW5ndGggPSBob2xkZXJzLmxlbmd0aCxcbiAgICAgICAgICBsZWZ0SW5kZXggPSAtMSxcbiAgICAgICAgICBsZWZ0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgIHJhbmdlTGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3NMZW5ndGggLSBob2xkZXJzTGVuZ3RoLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZWZ0TGVuZ3RoICsgcmFuZ2VMZW5ndGgpLFxuICAgICAgICAgIGlzVW5jdXJyaWVkID0gIWlzQ3VycmllZDtcblxuICAgICAgd2hpbGUgKCsrbGVmdEluZGV4IDwgbGVmdExlbmd0aCkge1xuICAgICAgICByZXN1bHRbbGVmdEluZGV4XSA9IHBhcnRpYWxzW2xlZnRJbmRleF07XG4gICAgICB9XG4gICAgICB3aGlsZSAoKythcmdzSW5kZXggPCBob2xkZXJzTGVuZ3RoKSB7XG4gICAgICAgIGlmIChpc1VuY3VycmllZCB8fCBhcmdzSW5kZXggPCBhcmdzTGVuZ3RoKSB7XG4gICAgICAgICAgcmVzdWx0W2hvbGRlcnNbYXJnc0luZGV4XV0gPSBhcmdzW2FyZ3NJbmRleF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdoaWxlIChyYW5nZUxlbmd0aC0tKSB7XG4gICAgICAgIHJlc3VsdFtsZWZ0SW5kZXgrK10gPSBhcmdzW2FyZ3NJbmRleCsrXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBjb21wb3NlQXJnc2AgZXhjZXB0IHRoYXQgdGhlIGFyZ3VtZW50cyBjb21wb3NpdGlvblxuICAgICAqIGlzIHRhaWxvcmVkIGZvciBgXy5wYXJ0aWFsUmlnaHRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBhcHBlbmQgdG8gdGhvc2UgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaG9sZGVycyBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbXMge2Jvb2xlYW59IFtpc0N1cnJpZWRdIFNwZWNpZnkgY29tcG9zaW5nIGZvciBhIGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tcG9zZWQgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBvc2VBcmdzUmlnaHQoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCkge1xuICAgICAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aCxcbiAgICAgICAgICBob2xkZXJzSW5kZXggPSAtMSxcbiAgICAgICAgICBob2xkZXJzTGVuZ3RoID0gaG9sZGVycy5sZW5ndGgsXG4gICAgICAgICAgcmlnaHRJbmRleCA9IC0xLFxuICAgICAgICAgIHJpZ2h0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgIHJhbmdlTGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3NMZW5ndGggLSBob2xkZXJzTGVuZ3RoLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShyYW5nZUxlbmd0aCArIHJpZ2h0TGVuZ3RoKSxcbiAgICAgICAgICBpc1VuY3VycmllZCA9ICFpc0N1cnJpZWQ7XG5cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IHJhbmdlTGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFthcmdzSW5kZXhdID0gYXJnc1thcmdzSW5kZXhdO1xuICAgICAgfVxuICAgICAgdmFyIG9mZnNldCA9IGFyZ3NJbmRleDtcbiAgICAgIHdoaWxlICgrK3JpZ2h0SW5kZXggPCByaWdodExlbmd0aCkge1xuICAgICAgICByZXN1bHRbb2Zmc2V0ICsgcmlnaHRJbmRleF0gPSBwYXJ0aWFsc1tyaWdodEluZGV4XTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2hvbGRlcnNJbmRleCA8IGhvbGRlcnNMZW5ndGgpIHtcbiAgICAgICAgaWYgKGlzVW5jdXJyaWVkIHx8IGFyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHRbb2Zmc2V0ICsgaG9sZGVyc1tob2xkZXJzSW5kZXhdXSA9IGFyZ3NbYXJnc0luZGV4KytdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXk9W11dIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyB0by5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5QXJyYXkoc291cmNlLCBhcnJheSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICAgICAgYXJyYXkgfHwgKGFycmF5ID0gQXJyYXkobGVuZ3RoKSk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb20uXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIHRvLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvcGllZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5T2JqZWN0KHNvdXJjZSwgcHJvcHMsIG9iamVjdCwgY3VzdG9taXplcikge1xuICAgICAgdmFyIGlzTmV3ID0gIW9iamVjdDtcbiAgICAgIG9iamVjdCB8fCAob2JqZWN0ID0ge30pO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG5cbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICAgID8gY3VzdG9taXplcihvYmplY3Rba2V5XSwgc291cmNlW2tleV0sIGtleSwgb2JqZWN0LCBzb3VyY2UpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc05ldykge1xuICAgICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIG93biBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weVN5bWJvbHMoc291cmNlLCBvYmplY3QpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9scyhzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBvd24gYW5kIGluaGVyaXRlZCBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weVN5bWJvbHNJbihzb3VyY2UsIG9iamVjdCkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5ncm91cEJ5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYWNjdW11bGF0b3IgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpbml0aWFsaXplcl0gVGhlIGFjY3VtdWxhdG9yIG9iamVjdCBpbml0aWFsaXplci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhZ2dyZWdhdG9yIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUFnZ3JlZ2F0b3Ioc2V0dGVyLCBpbml0aWFsaXplcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5QWdncmVnYXRvciA6IGJhc2VBZ2dyZWdhdG9yLFxuICAgICAgICAgICAgYWNjdW11bGF0b3IgPSBpbml0aWFsaXplciA/IGluaXRpYWxpemVyKCkgOiB7fTtcblxuICAgICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBzZXR0ZXIsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYWNjdW11bGF0b3IpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5hc3NpZ25gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhc3NpZ25lciBUaGUgZnVuY3Rpb24gdG8gYXNzaWduIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhc3NpZ25lciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVBc3NpZ25lcihhc3NpZ25lcikge1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IHNvdXJjZXMubGVuZ3RoLFxuICAgICAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA+IDEgPyBzb3VyY2VzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgICAgICBjdXN0b21pemVyID0gKGFzc2lnbmVyLmxlbmd0aCA+IDMgJiYgdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICA/IChsZW5ndGgtLSwgY3VzdG9taXplcilcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc291cmNlc1swXSwgc291cmNlc1sxXSwgZ3VhcmQpKSB7XG4gICAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiBjdXN0b21pemVyO1xuICAgICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuICAgICAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgICAgIGFzc2lnbmVyKG9iamVjdCwgc291cmNlLCBpbmRleCwgY3VzdG9taXplcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGJhc2VFYWNoYCBvciBgYmFzZUVhY2hSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYSBjb2xsZWN0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmFzZUVhY2goZWFjaEZ1bmMsIGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgcmV0dXJuIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGgsXG4gICAgICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xLFxuICAgICAgICAgICAgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG5cbiAgICAgICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVbaW5kZXhdLCBpbmRleCwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYmFzZSBmdW5jdGlvbiBmb3IgbWV0aG9kcyBsaWtlIGBfLmZvckluYCBhbmQgYF8uZm9yT3duYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCYXNlRm9yKGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUsIGtleXNGdW5jKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgaXRlcmFibGUgPSBPYmplY3Qob2JqZWN0KSxcbiAgICAgICAgICAgIHByb3BzID0ga2V5c0Z1bmMob2JqZWN0KSxcbiAgICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgICB2YXIga2V5ID0gcHJvcHNbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF07XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCB0aGUgb3B0aW9uYWwgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiBgdGhpc0FyZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmluZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuICAgICAgICByZXR1cm4gZm4uYXBwbHkoaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5sb3dlckZpcnN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIGBTdHJpbmdgIGNhc2UgbWV0aG9kIHRvIHVzZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNhc2VGaXJzdChtZXRob2ROYW1lKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICAgICAgdmFyIHN0clN5bWJvbHMgPSBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgICAgICA/IHN0cmluZ1RvQXJyYXkoc3RyaW5nKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIHZhciBjaHIgPSBzdHJTeW1ib2xzXG4gICAgICAgICAgPyBzdHJTeW1ib2xzWzBdXG4gICAgICAgICAgOiBzdHJpbmcuY2hhckF0KDApO1xuXG4gICAgICAgIHZhciB0cmFpbGluZyA9IHN0clN5bWJvbHNcbiAgICAgICAgICA/IGNhc3RTbGljZShzdHJTeW1ib2xzLCAxKS5qb2luKCcnKVxuICAgICAgICAgIDogc3RyaW5nLnNsaWNlKDEpO1xuXG4gICAgICAgIHJldHVybiBjaHJbbWV0aG9kTmFtZV0oKSArIHRyYWlsaW5nO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5jYW1lbENhc2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gY29tYmluZSBlYWNoIHdvcmQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG91bmRlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDb21wb3VuZGVyKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBhcnJheVJlZHVjZSh3b3JkcyhkZWJ1cnIoc3RyaW5nKS5yZXBsYWNlKHJlQXBvcywgJycpKSwgY2FsbGJhY2ssICcnKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcHJvZHVjZXMgYW4gaW5zdGFuY2Ugb2YgYEN0b3JgIHJlZ2FyZGxlc3Mgb2ZcbiAgICAgKiB3aGV0aGVyIGl0IHdhcyBpbnZva2VkIGFzIHBhcnQgb2YgYSBgbmV3YCBleHByZXNzaW9uIG9yIGJ5IGBjYWxsYCBvciBgYXBwbHlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBDdG9yIFRoZSBjb25zdHJ1Y3RvciB0byB3cmFwLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ3RvcihDdG9yKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIFVzZSBhIGBzd2l0Y2hgIHN0YXRlbWVudCB0byB3b3JrIHdpdGggY2xhc3MgY29uc3RydWN0b3JzLiBTZWVcbiAgICAgICAgLy8gaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1mdW5jdGlvbi1vYmplY3RzLWNhbGwtdGhpc2FyZ3VtZW50LWFyZ3VtZW50c2xpc3RcbiAgICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQ3RvcjtcbiAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdKTtcbiAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdKTtcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdKTtcbiAgICAgICAgICBjYXNlIDc6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdLCBhcmdzWzZdKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGhpc0JpbmRpbmcgPSBiYXNlQ3JlYXRlKEN0b3IucHJvdG90eXBlKSxcbiAgICAgICAgICAgIHJlc3VsdCA9IEN0b3IuYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpO1xuXG4gICAgICAgIC8vIE1pbWljIHRoZSBjb25zdHJ1Y3RvcidzIGByZXR1cm5gIGJlaGF2aW9yLlxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTMuMi4yIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogdGhpc0JpbmRpbmc7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBlbmFibGUgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYXJpdHkgVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUN1cnJ5KGZ1bmMsIGJpdG1hc2ssIGFyaXR5KSB7XG4gICAgICB2YXIgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aCxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyID0gZ2V0SG9sZGVyKHdyYXBwZXIpO1xuXG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBob2xkZXJzID0gKGxlbmd0aCA8IDMgJiYgYXJnc1swXSAhPT0gcGxhY2Vob2xkZXIgJiYgYXJnc1tsZW5ndGggLSAxXSAhPT0gcGxhY2Vob2xkZXIpXG4gICAgICAgICAgPyBbXVxuICAgICAgICAgIDogcmVwbGFjZUhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuXG4gICAgICAgIGxlbmd0aCAtPSBob2xkZXJzLmxlbmd0aDtcbiAgICAgICAgaWYgKGxlbmd0aCA8IGFyaXR5KSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZVJlY3VycnkoXG4gICAgICAgICAgICBmdW5jLCBiaXRtYXNrLCBjcmVhdGVIeWJyaWQsIHdyYXBwZXIucGxhY2Vob2xkZXIsIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGFyZ3MsIGhvbGRlcnMsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSAtIGxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZuLCB0aGlzLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5maW5kYCBvciBgXy5maW5kTGFzdGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZpbmRJbmRleEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGZpbmQgdGhlIGNvbGxlY3Rpb24gaW5kZXguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmluZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVGaW5kKGZpbmRJbmRleEZ1bmMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgICB2YXIgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG4gICAgICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICB2YXIgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpO1xuICAgICAgICAgIGNvbGxlY3Rpb24gPSBrZXlzKGNvbGxlY3Rpb24pO1xuICAgICAgICAgIHByZWRpY2F0ZSA9IGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSk7IH07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGluZGV4ID0gZmluZEluZGV4RnVuYyhjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGZyb21JbmRleCk7XG4gICAgICAgIHJldHVybiBpbmRleCA+IC0xID8gaXRlcmFibGVbaXRlcmF0ZWUgPyBjb2xsZWN0aW9uW2luZGV4XSA6IGluZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmZsb3dgIG9yIGBfLmZsb3dSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZsb3cgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRmxvdyhmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmbGF0UmVzdChmdW5jdGlvbihmdW5jcykge1xuICAgICAgICB2YXIgbGVuZ3RoID0gZnVuY3MubGVuZ3RoLFxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGgsXG4gICAgICAgICAgICBwcmVyZXEgPSBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZS50aHJ1O1xuXG4gICAgICAgIGlmIChmcm9tUmlnaHQpIHtcbiAgICAgICAgICBmdW5jcy5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICB2YXIgZnVuYyA9IGZ1bmNzW2luZGV4XTtcbiAgICAgICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocHJlcmVxICYmICF3cmFwcGVyICYmIGdldEZ1bmNOYW1lKGZ1bmMpID09ICd3cmFwcGVyJykge1xuICAgICAgICAgICAgdmFyIHdyYXBwZXIgPSBuZXcgTG9kYXNoV3JhcHBlcihbXSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gd3JhcHBlciA/IGluZGV4IDogbGVuZ3RoO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGZ1bmMgPSBmdW5jc1tpbmRleF07XG5cbiAgICAgICAgICB2YXIgZnVuY05hbWUgPSBnZXRGdW5jTmFtZShmdW5jKSxcbiAgICAgICAgICAgICAgZGF0YSA9IGZ1bmNOYW1lID09ICd3cmFwcGVyJyA/IGdldERhdGEoZnVuYykgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAoZGF0YSAmJiBpc0xhemlhYmxlKGRhdGFbMF0pICYmXG4gICAgICAgICAgICAgICAgZGF0YVsxXSA9PSAoV1JBUF9BUllfRkxBRyB8IFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfUEFSVElBTF9GTEFHIHwgV1JBUF9SRUFSR19GTEFHKSAmJlxuICAgICAgICAgICAgICAgICFkYXRhWzRdLmxlbmd0aCAmJiBkYXRhWzldID09IDFcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICB3cmFwcGVyID0gd3JhcHBlcltnZXRGdW5jTmFtZShkYXRhWzBdKV0uYXBwbHkod3JhcHBlciwgZGF0YVszXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdyYXBwZXIgPSAoZnVuYy5sZW5ndGggPT0gMSAmJiBpc0xhemlhYmxlKGZ1bmMpKVxuICAgICAgICAgICAgICA/IHdyYXBwZXJbZnVuY05hbWVdKClcbiAgICAgICAgICAgICAgOiB3cmFwcGVyLnRocnUoZnVuYyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgdmFsdWUgPSBhcmdzWzBdO1xuXG4gICAgICAgICAgaWYgKHdyYXBwZXIgJiYgYXJncy5sZW5ndGggPT0gMSAmJiBpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHdyYXBwZXIucGxhbnQodmFsdWUpLnZhbHVlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgICAgIHJlc3VsdCA9IGxlbmd0aCA/IGZ1bmNzW2luZGV4XS5hcHBseSh0aGlzLCBhcmdzKSA6IHZhbHVlO1xuXG4gICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmNzW2luZGV4XS5jYWxsKHRoaXMsIHJlc3VsdCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggb3B0aW9uYWwgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiBgdGhpc0FyZ2AsIHBhcnRpYWwgYXBwbGljYXRpb24sIGFuZCBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGZ1bmMgVGhlIGZ1bmN0aW9uIG9yIG1ldGhvZCBuYW1lIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzUmlnaHRdIFRoZSBhcmd1bWVudHMgdG8gYXBwZW5kIHRvIHRob3NlIHByb3ZpZGVkXG4gICAgICogIHRvIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNSaWdodF0gVGhlIGBwYXJ0aWFsc1JpZ2h0YCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUh5YnJpZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0FyeSA9IGJpdG1hc2sgJiBXUkFQX0FSWV9GTEFHLFxuICAgICAgICAgIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgICAgICBpc0JpbmRLZXkgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0tFWV9GTEFHLFxuICAgICAgICAgIGlzQ3VycmllZCA9IGJpdG1hc2sgJiAoV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSxcbiAgICAgICAgICBpc0ZsaXAgPSBiaXRtYXNrICYgV1JBUF9GTElQX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGlzQmluZEtleSA/IHVuZGVmaW5lZCA6IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNDdXJyaWVkKSB7XG4gICAgICAgICAgdmFyIHBsYWNlaG9sZGVyID0gZ2V0SG9sZGVyKHdyYXBwZXIpLFxuICAgICAgICAgICAgICBob2xkZXJzQ291bnQgPSBjb3VudEhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aWFscykge1xuICAgICAgICAgIGFyZ3MgPSBjb21wb3NlQXJncyhhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydGlhbHNSaWdodCkge1xuICAgICAgICAgIGFyZ3MgPSBjb21wb3NlQXJnc1JpZ2h0KGFyZ3MsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCwgaXNDdXJyaWVkKTtcbiAgICAgICAgfVxuICAgICAgICBsZW5ndGggLT0gaG9sZGVyc0NvdW50O1xuICAgICAgICBpZiAoaXNDdXJyaWVkICYmIGxlbmd0aCA8IGFyaXR5KSB7XG4gICAgICAgICAgdmFyIG5ld0hvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZVJlY3VycnkoXG4gICAgICAgICAgICBmdW5jLCBiaXRtYXNrLCBjcmVhdGVIeWJyaWQsIHdyYXBwZXIucGxhY2Vob2xkZXIsIHRoaXNBcmcsXG4gICAgICAgICAgICBhcmdzLCBuZXdIb2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkgLSBsZW5ndGhcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGlzQmluZGluZyA9IGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLFxuICAgICAgICAgICAgZm4gPSBpc0JpbmRLZXkgPyB0aGlzQmluZGluZ1tmdW5jXSA6IGZ1bmM7XG5cbiAgICAgICAgbGVuZ3RoID0gYXJncy5sZW5ndGg7XG4gICAgICAgIGlmIChhcmdQb3MpIHtcbiAgICAgICAgICBhcmdzID0gcmVvcmRlcihhcmdzLCBhcmdQb3MpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRmxpcCAmJiBsZW5ndGggPiAxKSB7XG4gICAgICAgICAgYXJncy5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJ5ICYmIGFyeSA8IGxlbmd0aCkge1xuICAgICAgICAgIGFyZ3MubGVuZ3RoID0gYXJ5O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpIHtcbiAgICAgICAgICBmbiA9IEN0b3IgfHwgY3JlYXRlQ3Rvcihmbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNCaW5kaW5nLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmludmVydEJ5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYWNjdW11bGF0b3IgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHRvSXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgaXRlcmF0ZWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludmVydGVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUludmVydGVyKHNldHRlciwgdG9JdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZlcnRlcihvYmplY3QsIHNldHRlciwgdG9JdGVyYXRlZShpdGVyYXRlZSksIHt9KTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSBtYXRoZW1hdGljYWwgb3BlcmF0aW9uIG9uIHR3byB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wZXJhdG9yIFRoZSBmdW5jdGlvbiB0byBwZXJmb3JtIHRoZSBvcGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSB1c2VkIGZvciBgdW5kZWZpbmVkYCBhcmd1bWVudHMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWF0aGVtYXRpY2FsIG9wZXJhdGlvbiBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVNYXRoT3BlcmF0aW9uKG9wZXJhdG9yLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgb3RoZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3RoZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIG90aGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IHR5cGVvZiBvdGhlciA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdmFsdWUgPSBiYXNlVG9TdHJpbmcodmFsdWUpO1xuICAgICAgICAgICAgb3RoZXIgPSBiYXNlVG9TdHJpbmcob3RoZXIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VUb051bWJlcih2YWx1ZSk7XG4gICAgICAgICAgICBvdGhlciA9IGJhc2VUb051bWJlcihvdGhlcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IG9wZXJhdG9yKHZhbHVlLCBvdGhlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ub3ZlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFycmF5RnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGl0ZXJhdGVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBvdmVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU92ZXIoYXJyYXlGdW5jKSB7XG4gICAgICByZXR1cm4gZmxhdFJlc3QoZnVuY3Rpb24oaXRlcmF0ZWVzKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcbiAgICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgICB2YXIgdGhpc0FyZyA9IHRoaXM7XG4gICAgICAgICAgcmV0dXJuIGFycmF5RnVuYyhpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgICByZXR1cm4gYXBwbHkoaXRlcmF0ZWUsIHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGhlIHBhZGRpbmcgZm9yIGBzdHJpbmdgIGJhc2VkIG9uIGBsZW5ndGhgLiBUaGUgYGNoYXJzYCBzdHJpbmdcbiAgICAgKiBpcyB0cnVuY2F0ZWQgaWYgdGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIGV4Y2VlZHMgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkaW5nIGZvciBgc3RyaW5nYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVQYWRkaW5nKGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIGNoYXJzID0gY2hhcnMgPT09IHVuZGVmaW5lZCA/ICcgJyA6IGJhc2VUb1N0cmluZyhjaGFycyk7XG5cbiAgICAgIHZhciBjaGFyc0xlbmd0aCA9IGNoYXJzLmxlbmd0aDtcbiAgICAgIGlmIChjaGFyc0xlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIGNoYXJzTGVuZ3RoID8gYmFzZVJlcGVhdChjaGFycywgbGVuZ3RoKSA6IGNoYXJzO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VSZXBlYXQoY2hhcnMsIG5hdGl2ZUNlaWwobGVuZ3RoIC8gc3RyaW5nU2l6ZShjaGFycykpKTtcbiAgICAgIHJldHVybiBoYXNVbmljb2RlKGNoYXJzKVxuICAgICAgICA/IGNhc3RTbGljZShzdHJpbmdUb0FycmF5KHJlc3VsdCksIDAsIGxlbmd0aCkuam9pbignJylcbiAgICAgICAgOiByZXN1bHQuc2xpY2UoMCwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nXG4gICAgICogb2YgYHRoaXNBcmdgIGFuZCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVQYXJ0aWFsKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGxlZnRJbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVmdExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZWZ0TGVuZ3RoICsgYXJnc0xlbmd0aCksXG4gICAgICAgICAgICBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG5cbiAgICAgICAgd2hpbGUgKCsrbGVmdEluZGV4IDwgbGVmdExlbmd0aCkge1xuICAgICAgICAgIGFyZ3NbbGVmdEluZGV4XSA9IHBhcnRpYWxzW2xlZnRJbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGFyZ3NMZW5ndGgtLSkge1xuICAgICAgICAgIGFyZ3NbbGVmdEluZGV4KytdID0gYXJndW1lbnRzWysrYXJnc0luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZm4sIGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5yYW5nZWAgb3IgYF8ucmFuZ2VSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJhbmdlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJhbmdlKGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0YXJ0LCBlbmQsIHN0ZXApIHtcbiAgICAgICAgaWYgKHN0ZXAgJiYgdHlwZW9mIHN0ZXAgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoc3RhcnQsIGVuZCwgc3RlcCkpIHtcbiAgICAgICAgICBlbmQgPSBzdGVwID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVuc3VyZSB0aGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAgICAgICAgc3RhcnQgPSB0b0Zpbml0ZShzdGFydCk7XG4gICAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGVuZCA9IHN0YXJ0O1xuICAgICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbmQgPSB0b0Zpbml0ZShlbmQpO1xuICAgICAgICB9XG4gICAgICAgIHN0ZXAgPSBzdGVwID09PSB1bmRlZmluZWQgPyAoc3RhcnQgPCBlbmQgPyAxIDogLTEpIDogdG9GaW5pdGUoc3RlcCk7XG4gICAgICAgIHJldHVybiBiYXNlUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCwgZnJvbVJpZ2h0KTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSByZWxhdGlvbmFsIG9wZXJhdGlvbiBvbiB0d28gdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcGVyYXRvciBUaGUgZnVuY3Rpb24gdG8gcGVyZm9ybSB0aGUgb3BlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlbGF0aW9uYWwgb3BlcmF0aW9uIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24ob3BlcmF0b3IpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgICAgaWYgKCEodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnICYmIHR5cGVvZiBvdGhlciA9PSAnc3RyaW5nJykpIHtcbiAgICAgICAgICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICBvdGhlciA9IHRvTnVtYmVyKG90aGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3BlcmF0b3IodmFsdWUsIG90aGVyKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGNvbnRpbnVlIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgYGZ1bmNgIHdyYXBwZXIuXG4gICAgICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICAgICAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJlY3VycnkoZnVuYywgYml0bWFzaywgd3JhcEZ1bmMsIHBsYWNlaG9sZGVyLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNDdXJyeSA9IGJpdG1hc2sgJiBXUkFQX0NVUlJZX0ZMQUcsXG4gICAgICAgICAgbmV3SG9sZGVycyA9IGlzQ3VycnkgPyBob2xkZXJzIDogdW5kZWZpbmVkLFxuICAgICAgICAgIG5ld0hvbGRlcnNSaWdodCA9IGlzQ3VycnkgPyB1bmRlZmluZWQgOiBob2xkZXJzLFxuICAgICAgICAgIG5ld1BhcnRpYWxzID0gaXNDdXJyeSA/IHBhcnRpYWxzIDogdW5kZWZpbmVkLFxuICAgICAgICAgIG5ld1BhcnRpYWxzUmlnaHQgPSBpc0N1cnJ5ID8gdW5kZWZpbmVkIDogcGFydGlhbHM7XG5cbiAgICAgIGJpdG1hc2sgfD0gKGlzQ3VycnkgPyBXUkFQX1BBUlRJQUxfRkxBRyA6IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKTtcbiAgICAgIGJpdG1hc2sgJj0gfihpc0N1cnJ5ID8gV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcgOiBXUkFQX1BBUlRJQUxfRkxBRyk7XG5cbiAgICAgIGlmICghKGJpdG1hc2sgJiBXUkFQX0NVUlJZX0JPVU5EX0ZMQUcpKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRyk7XG4gICAgICB9XG4gICAgICB2YXIgbmV3RGF0YSA9IFtcbiAgICAgICAgZnVuYywgYml0bWFzaywgdGhpc0FyZywgbmV3UGFydGlhbHMsIG5ld0hvbGRlcnMsIG5ld1BhcnRpYWxzUmlnaHQsXG4gICAgICAgIG5ld0hvbGRlcnNSaWdodCwgYXJnUG9zLCBhcnksIGFyaXR5XG4gICAgICBdO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gd3JhcEZ1bmMuYXBwbHkodW5kZWZpbmVkLCBuZXdEYXRhKTtcbiAgICAgIGlmIChpc0xhemlhYmxlKGZ1bmMpKSB7XG4gICAgICAgIHNldERhdGEocmVzdWx0LCBuZXdEYXRhKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHNldFdyYXBUb1N0cmluZyhyZXN1bHQsIGZ1bmMsIGJpdG1hc2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLnJvdW5kYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIGBNYXRoYCBtZXRob2QgdG8gdXNlIHdoZW4gcm91bmRpbmcuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcm91bmQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUm91bmQobWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBNYXRoW21ldGhvZE5hbWVdO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG51bWJlciwgcHJlY2lzaW9uKSB7XG4gICAgICAgIG51bWJlciA9IHRvTnVtYmVyKG51bWJlcik7XG4gICAgICAgIHByZWNpc2lvbiA9IHByZWNpc2lvbiA9PSBudWxsID8gMCA6IG5hdGl2ZU1pbih0b0ludGVnZXIocHJlY2lzaW9uKSwgMjkyKTtcbiAgICAgICAgaWYgKHByZWNpc2lvbiAmJiBuYXRpdmVJc0Zpbml0ZShudW1iZXIpKSB7XG4gICAgICAgICAgLy8gU2hpZnQgd2l0aCBleHBvbmVudGlhbCBub3RhdGlvbiB0byBhdm9pZCBmbG9hdGluZy1wb2ludCBpc3N1ZXMuXG4gICAgICAgICAgLy8gU2VlIFtNRE5dKGh0dHBzOi8vbWRuLmlvL3JvdW5kI0V4YW1wbGVzKSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICAgIHZhciBwYWlyID0gKHRvU3RyaW5nKG51bWJlcikgKyAnZScpLnNwbGl0KCdlJyksXG4gICAgICAgICAgICAgIHZhbHVlID0gZnVuYyhwYWlyWzBdICsgJ2UnICsgKCtwYWlyWzFdICsgcHJlY2lzaW9uKSk7XG5cbiAgICAgICAgICBwYWlyID0gKHRvU3RyaW5nKHZhbHVlKSArICdlJykuc3BsaXQoJ2UnKTtcbiAgICAgICAgICByZXR1cm4gKyhwYWlyWzBdICsgJ2UnICsgKCtwYWlyWzFdIC0gcHJlY2lzaW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmMobnVtYmVyKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNldCBvYmplY3Qgb2YgYHZhbHVlc2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFkZCB0byB0aGUgc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBzZXQuXG4gICAgICovXG4gICAgdmFyIGNyZWF0ZVNldCA9ICEoU2V0ICYmICgxIC8gc2V0VG9BcnJheShuZXcgU2V0KFssLTBdKSlbMV0pID09IElORklOSVRZKSA/IG5vb3AgOiBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBuZXcgU2V0KHZhbHVlcyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy50b1BhaXJzYCBvciBgXy50b1BhaXJzSW5gIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhaXJzIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVRvUGFpcnMoa2V5c0Z1bmMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgdmFyIHRhZyA9IGdldFRhZyhvYmplY3QpO1xuICAgICAgICBpZiAodGFnID09IG1hcFRhZykge1xuICAgICAgICAgIHJldHVybiBtYXBUb0FycmF5KG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VG9QYWlycyhvYmplY3QpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiYXNlVG9QYWlycyhvYmplY3QsIGtleXNGdW5jKG9iamVjdCkpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBlaXRoZXIgY3VycmllcyBvciBpbnZva2VzIGBmdW5jYCB3aXRoIG9wdGlvbmFsXG4gICAgICogYHRoaXNgIGJpbmRpbmcgYW5kIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGZ1bmMgVGhlIGZ1bmN0aW9uIG9yIG1ldGhvZCBuYW1lIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gICAgICogICAgMSAtIGBfLmJpbmRgXG4gICAgICogICAgMiAtIGBfLmJpbmRLZXlgXG4gICAgICogICAgNCAtIGBfLmN1cnJ5YCBvciBgXy5jdXJyeVJpZ2h0YCBvZiBhIGJvdW5kIGZ1bmN0aW9uXG4gICAgICogICAgOCAtIGBfLmN1cnJ5YFxuICAgICAqICAgMTYgLSBgXy5jdXJyeVJpZ2h0YFxuICAgICAqICAgMzIgLSBgXy5wYXJ0aWFsYFxuICAgICAqICAgNjQgLSBgXy5wYXJ0aWFsUmlnaHRgXG4gICAgICogIDEyOCAtIGBfLnJlYXJnYFxuICAgICAqICAyNTYgLSBgXy5hcnlgXG4gICAgICogIDUxMiAtIGBfLmZsaXBgXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlV3JhcChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNCaW5kS2V5ID0gYml0bWFzayAmIFdSQVBfQklORF9LRVlfRkxBRztcbiAgICAgIGlmICghaXNCaW5kS2V5ICYmIHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IHBhcnRpYWxzID8gcGFydGlhbHMubGVuZ3RoIDogMDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX1BBUlRJQUxfRkxBRyB8IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKTtcbiAgICAgICAgcGFydGlhbHMgPSBob2xkZXJzID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgYXJ5ID0gYXJ5ID09PSB1bmRlZmluZWQgPyBhcnkgOiBuYXRpdmVNYXgodG9JbnRlZ2VyKGFyeSksIDApO1xuICAgICAgYXJpdHkgPSBhcml0eSA9PT0gdW5kZWZpbmVkID8gYXJpdHkgOiB0b0ludGVnZXIoYXJpdHkpO1xuICAgICAgbGVuZ3RoIC09IGhvbGRlcnMgPyBob2xkZXJzLmxlbmd0aCA6IDA7XG5cbiAgICAgIGlmIChiaXRtYXNrICYgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxzUmlnaHQgPSBwYXJ0aWFscyxcbiAgICAgICAgICAgIGhvbGRlcnNSaWdodCA9IGhvbGRlcnM7XG5cbiAgICAgICAgcGFydGlhbHMgPSBob2xkZXJzID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgdmFyIGRhdGEgPSBpc0JpbmRLZXkgPyB1bmRlZmluZWQgOiBnZXREYXRhKGZ1bmMpO1xuXG4gICAgICB2YXIgbmV3RGF0YSA9IFtcbiAgICAgICAgZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCxcbiAgICAgICAgYXJnUG9zLCBhcnksIGFyaXR5XG4gICAgICBdO1xuXG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBtZXJnZURhdGEobmV3RGF0YSwgZGF0YSk7XG4gICAgICB9XG4gICAgICBmdW5jID0gbmV3RGF0YVswXTtcbiAgICAgIGJpdG1hc2sgPSBuZXdEYXRhWzFdO1xuICAgICAgdGhpc0FyZyA9IG5ld0RhdGFbMl07XG4gICAgICBwYXJ0aWFscyA9IG5ld0RhdGFbM107XG4gICAgICBob2xkZXJzID0gbmV3RGF0YVs0XTtcbiAgICAgIGFyaXR5ID0gbmV3RGF0YVs5XSA9IG5ld0RhdGFbOV0gPT09IHVuZGVmaW5lZFxuICAgICAgICA/IChpc0JpbmRLZXkgPyAwIDogZnVuYy5sZW5ndGgpXG4gICAgICAgIDogbmF0aXZlTWF4KG5ld0RhdGFbOV0gLSBsZW5ndGgsIDApO1xuXG4gICAgICBpZiAoIWFyaXR5ICYmIGJpdG1hc2sgJiAoV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSkge1xuICAgICAgICBiaXRtYXNrICY9IH4oV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKTtcbiAgICAgIH1cbiAgICAgIGlmICghYml0bWFzayB8fCBiaXRtYXNrID09IFdSQVBfQklORF9GTEFHKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVCaW5kKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcpO1xuICAgICAgfSBlbHNlIGlmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRyB8fCBiaXRtYXNrID09IFdSQVBfQ1VSUllfUklHSFRfRkxBRykge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVDdXJyeShmdW5jLCBiaXRtYXNrLCBhcml0eSk7XG4gICAgICB9IGVsc2UgaWYgKChiaXRtYXNrID09IFdSQVBfUEFSVElBTF9GTEFHIHx8IGJpdG1hc2sgPT0gKFdSQVBfQklORF9GTEFHIHwgV1JBUF9QQVJUSUFMX0ZMQUcpKSAmJiAhaG9sZGVycy5sZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlUGFydGlhbChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVIeWJyaWQuYXBwbHkodW5kZWZpbmVkLCBuZXdEYXRhKTtcbiAgICAgIH1cbiAgICAgIHZhciBzZXR0ZXIgPSBkYXRhID8gYmFzZVNldERhdGEgOiBzZXREYXRhO1xuICAgICAgcmV0dXJuIHNldFdyYXBUb1N0cmluZyhzZXR0ZXIocmVzdWx0LCBuZXdEYXRhKSwgZnVuYywgYml0bWFzayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5kZWZhdWx0c2AgdG8gY3VzdG9taXplIGl0cyBgXy5hc3NpZ25JbmAgdXNlIHRvIGFzc2lnbiBwcm9wZXJ0aWVzXG4gICAgICogb2Ygc291cmNlIG9iamVjdHMgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBmb3IgYWxsIGRlc3RpbmF0aW9uIHByb3BlcnRpZXNcbiAgICAgKiB0aGF0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gb2JqVmFsdWUgVGhlIGRlc3RpbmF0aW9uIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHNvdXJjZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBvYmpWYWx1ZWAuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgKGVxKG9ialZhbHVlLCBvYmplY3RQcm90b1trZXldKSAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSB7XG4gICAgICAgIHJldHVybiBzcmNWYWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLmRlZmF1bHRzRGVlcGAgdG8gY3VzdG9taXplIGl0cyBgXy5tZXJnZWAgdXNlIHRvIG1lcmdlIHNvdXJjZVxuICAgICAqIG9iamVjdHMgaW50byBkZXN0aW5hdGlvbiBvYmplY3RzIHRoYXQgYXJlIHBhc3NlZCB0aHJ1LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IG9ialZhbHVlIFRoZSBkZXN0aW5hdGlvbiB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSBzb3VyY2UgdmFsdWUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBtZXJnZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBvYmpWYWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgcGFyZW50IG9iamVjdCBvZiBgc3JjVmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gICAgICogIGNvdW50ZXJwYXJ0cy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbURlZmF1bHRzTWVyZ2Uob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjaykge1xuICAgICAgaWYgKGlzT2JqZWN0KG9ialZhbHVlKSAmJiBpc09iamVjdChzcmNWYWx1ZSkpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgbWVyZ2Ugb2JqZWN0cyBhbmQgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgb2JqVmFsdWUpO1xuICAgICAgICBiYXNlTWVyZ2Uob2JqVmFsdWUsIHNyY1ZhbHVlLCB1bmRlZmluZWQsIGN1c3RvbURlZmF1bHRzTWVyZ2UsIHN0YWNrKTtcbiAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLm9taXRgIHRvIGN1c3RvbWl6ZSBpdHMgYF8uY2xvbmVEZWVwYCB1c2UgdG8gb25seSBjbG9uZSBwbGFpblxuICAgICAqIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB1bmNsb25lZCB2YWx1ZSBvciBgdW5kZWZpbmVkYCB0byBkZWZlciBjbG9uaW5nIHRvIGBfLmNsb25lRGVlcGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tT21pdENsb25lKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNQbGFpbk9iamVjdCh2YWx1ZSkgPyB1bmRlZmluZWQgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGFycmF5cyB3aXRoIHN1cHBvcnQgZm9yXG4gICAgICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBvdGhlciBUaGUgb3RoZXIgYXJyYXkgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBhcnJheWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsQXJyYXlzKGFycmF5LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgICAgICBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgb3RoTGVuZ3RoID0gb3RoZXIubGVuZ3RoO1xuXG4gICAgICBpZiAoYXJyTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhKGlzUGFydGlhbCAmJiBvdGhMZW5ndGggPiBhcnJMZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIENoZWNrIHRoYXQgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgYXJyU3RhY2tlZCA9IHN0YWNrLmdldChhcnJheSk7XG4gICAgICB2YXIgb3RoU3RhY2tlZCA9IHN0YWNrLmdldChvdGhlcik7XG4gICAgICBpZiAoYXJyU3RhY2tlZCAmJiBvdGhTdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBhcnJTdGFja2VkID09IG90aGVyICYmIG90aFN0YWNrZWQgPT0gYXJyYXk7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSB0cnVlLFxuICAgICAgICAgIHNlZW4gPSAoYml0bWFzayAmIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpID8gbmV3IFNldENhY2hlIDogdW5kZWZpbmVkO1xuXG4gICAgICBzdGFjay5zZXQoYXJyYXksIG90aGVyKTtcbiAgICAgIHN0YWNrLnNldChvdGhlciwgYXJyYXkpO1xuXG4gICAgICAvLyBJZ25vcmUgbm9uLWluZGV4IHByb3BlcnRpZXMuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGFyckxlbmd0aCkge1xuICAgICAgICB2YXIgYXJyVmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2luZGV4XTtcblxuICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBhcnJWYWx1ZSwgaW5kZXgsIG90aGVyLCBhcnJheSwgc3RhY2spXG4gICAgICAgICAgICA6IGN1c3RvbWl6ZXIoYXJyVmFsdWUsIG90aFZhbHVlLCBpbmRleCwgYXJyYXksIG90aGVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbXBhcmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAoY29tcGFyZWQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBpZiAoc2Vlbikge1xuICAgICAgICAgIGlmICghYXJyYXlTb21lKG90aGVyLCBmdW5jdGlvbihvdGhWYWx1ZSwgb3RoSW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWNhY2hlSGFzKHNlZW4sIG90aEluZGV4KSAmJlxuICAgICAgICAgICAgICAgICAgICAoYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSkpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBzZWVuLnB1c2gob3RoSW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCEoXG4gICAgICAgICAgICAgIGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fFxuICAgICAgICAgICAgICAgIGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzdGFja1snZGVsZXRlJ10oYXJyYXkpO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBjb21wYXJpbmcgb2JqZWN0cyBvZlxuICAgICAqIHRoZSBzYW1lIGB0b1N0cmluZ1RhZ2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNvbXBhcmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gICAgICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0cyB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIHRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgc3dpdGNoICh0YWcpIHtcbiAgICAgICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgICAgIChvYmplY3QuYnl0ZU9mZnNldCAhPSBvdGhlci5ieXRlT2Zmc2V0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvYmplY3QgPSBvYmplY3QuYnVmZmVyO1xuICAgICAgICAgIG90aGVyID0gb3RoZXIuYnVmZmVyO1xuXG4gICAgICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICAgICAhZXF1YWxGdW5jKG5ldyBVaW50OEFycmF5KG9iamVjdCksIG5ldyBVaW50OEFycmF5KG90aGVyKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgY2FzZSBib29sVGFnOlxuICAgICAgICBjYXNlIGRhdGVUYWc6XG4gICAgICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgICAgIC8vIENvZXJjZSBib29sZWFucyB0byBgMWAgb3IgYDBgIGFuZCBkYXRlcyB0byBtaWxsaXNlY29uZHMuXG4gICAgICAgICAgLy8gSW52YWxpZCBkYXRlcyBhcmUgY29lcmNlZCB0byBgTmFOYC5cbiAgICAgICAgICByZXR1cm4gZXEoK29iamVjdCwgK290aGVyKTtcblxuICAgICAgICBjYXNlIGVycm9yVGFnOlxuICAgICAgICAgIHJldHVybiBvYmplY3QubmFtZSA9PSBvdGhlci5uYW1lICYmIG9iamVjdC5tZXNzYWdlID09IG90aGVyLm1lc3NhZ2U7XG5cbiAgICAgICAgY2FzZSByZWdleHBUYWc6XG4gICAgICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgICAgIC8vIENvZXJjZSByZWdleGVzIHRvIHN0cmluZ3MgYW5kIHRyZWF0IHN0cmluZ3MsIHByaW1pdGl2ZXMgYW5kIG9iamVjdHMsXG4gICAgICAgICAgLy8gYXMgZXF1YWwuIFNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuICAgICAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgICAgcmV0dXJuIG9iamVjdCA9PSAob3RoZXIgKyAnJyk7XG5cbiAgICAgICAgY2FzZSBtYXBUYWc6XG4gICAgICAgICAgdmFyIGNvbnZlcnQgPSBtYXBUb0FycmF5O1xuXG4gICAgICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUc7XG4gICAgICAgICAgY29udmVydCB8fCAoY29udmVydCA9IHNldFRvQXJyYXkpO1xuXG4gICAgICAgICAgaWYgKG9iamVjdC5zaXplICE9IG90aGVyLnNpemUgJiYgIWlzUGFydGlhbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJpdG1hc2sgfD0gQ09NUEFSRV9VTk9SREVSRURfRkxBRztcblxuICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gZXF1YWxBcnJheXMoY29udmVydChvYmplY3QpLCBjb252ZXJ0KG90aGVyKSwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgICAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgICAgICBpZiAoc3ltYm9sVmFsdWVPZikge1xuICAgICAgICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YuY2FsbChvYmplY3QpID09IHN5bWJvbFZhbHVlT2YuY2FsbChvdGhlcik7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3Igb2JqZWN0cyB3aXRoIHN1cHBvcnQgZm9yXG4gICAgICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgICAgICBvYmpQcm9wcyA9IGdldEFsbEtleXMob2JqZWN0KSxcbiAgICAgICAgICBvYmpMZW5ndGggPSBvYmpQcm9wcy5sZW5ndGgsXG4gICAgICAgICAgb3RoUHJvcHMgPSBnZXRBbGxLZXlzKG90aGVyKSxcbiAgICAgICAgICBvdGhMZW5ndGggPSBvdGhQcm9wcy5sZW5ndGg7XG5cbiAgICAgIGlmIChvYmpMZW5ndGggIT0gb3RoTGVuZ3RoICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gb2JqTGVuZ3RoO1xuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgdmFyIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICAgICAgaWYgKCEoaXNQYXJ0aWFsID8ga2V5IGluIG90aGVyIDogaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwga2V5KSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIENoZWNrIHRoYXQgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgb2JqU3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgdmFyIG90aFN0YWNrZWQgPSBzdGFjay5nZXQob3RoZXIpO1xuICAgICAgaWYgKG9ialN0YWNrZWQgJiYgb3RoU3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gb2JqU3RhY2tlZCA9PSBvdGhlciAmJiBvdGhTdGFja2VkID09IG9iamVjdDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgc3RhY2suc2V0KG90aGVyLCBvYmplY3QpO1xuXG4gICAgICB2YXIgc2tpcEN0b3IgPSBpc1BhcnRpYWw7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IG9iakxlbmd0aCkge1xuICAgICAgICBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltrZXldO1xuXG4gICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIG9ialZhbHVlLCBrZXksIG90aGVyLCBvYmplY3QsIHN0YWNrKVxuICAgICAgICAgICAgOiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSwga2V5LCBvYmplY3QsIG90aGVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGlmICghKGNvbXBhcmVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyAob2JqVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhvYmpWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSlcbiAgICAgICAgICAgICAgOiBjb21wYXJlZFxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHNraXBDdG9yIHx8IChza2lwQ3RvciA9IGtleSA9PSAnY29uc3RydWN0b3InKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgJiYgIXNraXBDdG9yKSB7XG4gICAgICAgIHZhciBvYmpDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLFxuICAgICAgICAgICAgb3RoQ3RvciA9IG90aGVyLmNvbnN0cnVjdG9yO1xuXG4gICAgICAgIC8vIE5vbiBgT2JqZWN0YCBvYmplY3QgaW5zdGFuY2VzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWFsLlxuICAgICAgICBpZiAob2JqQ3RvciAhPSBvdGhDdG9yICYmXG4gICAgICAgICAgICAoJ2NvbnN0cnVjdG9yJyBpbiBvYmplY3QgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvdGhlcikgJiZcbiAgICAgICAgICAgICEodHlwZW9mIG9iakN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvYmpDdG9yIGluc3RhbmNlb2Ygb2JqQ3RvciAmJlxuICAgICAgICAgICAgICB0eXBlb2Ygb3RoQ3RvciA9PSAnZnVuY3Rpb24nICYmIG90aEN0b3IgaW5zdGFuY2VvZiBvdGhDdG9yKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIGZsYXR0ZW5zIHRoZSByZXN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRSZXN0KGZ1bmMpIHtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCB1bmRlZmluZWQsIGZsYXR0ZW4pLCBmdW5jICsgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEFsbEtleXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzLCBnZXRTeW1ib2xzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gICAgICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0QWxsS2V5c0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0luLCBnZXRTeW1ib2xzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGdldERhdGEgPSAhbWV0YU1hcCA/IG5vb3AgOiBmdW5jdGlvbihmdW5jKSB7XG4gICAgICByZXR1cm4gbWV0YU1hcC5nZXQoZnVuYyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5hbWUgb2YgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEZ1bmNOYW1lKGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSAoZnVuYy5uYW1lICsgJycpLFxuICAgICAgICAgIGFycmF5ID0gcmVhbE5hbWVzW3Jlc3VsdF0sXG4gICAgICAgICAgbGVuZ3RoID0gaGFzT3duUHJvcGVydHkuY2FsbChyZWFsTmFtZXMsIHJlc3VsdCkgPyBhcnJheS5sZW5ndGggOiAwO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGRhdGEgPSBhcnJheVtsZW5ndGhdLFxuICAgICAgICAgICAgb3RoZXJGdW5jID0gZGF0YS5mdW5jO1xuICAgICAgICBpZiAob3RoZXJGdW5jID09IG51bGwgfHwgb3RoZXJGdW5jID09IGZ1bmMpIHtcbiAgICAgICAgICByZXR1cm4gZGF0YS5uYW1lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFyZ3VtZW50IHBsYWNlaG9sZGVyIHZhbHVlIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHBsYWNlaG9sZGVyIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEhvbGRlcihmdW5jKSB7XG4gICAgICB2YXIgb2JqZWN0ID0gaGFzT3duUHJvcGVydHkuY2FsbChsb2Rhc2gsICdwbGFjZWhvbGRlcicpID8gbG9kYXNoIDogZnVuYztcbiAgICAgIHJldHVybiBvYmplY3QucGxhY2Vob2xkZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYXBwcm9wcmlhdGUgXCJpdGVyYXRlZVwiIGZ1bmN0aW9uLiBJZiBgXy5pdGVyYXRlZWAgaXMgY3VzdG9taXplZCxcbiAgICAgKiB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIGN1c3RvbSBtZXRob2QsIG90aGVyd2lzZSBpdCByZXR1cm5zIGBiYXNlSXRlcmF0ZWVgLlxuICAgICAqIElmIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQsIHRoZSBjaG9zZW4gZnVuY3Rpb24gaXMgaW52b2tlZCB3aXRoIHRoZW0gYW5kXG4gICAgICogaXRzIHJlc3VsdCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBbdmFsdWVdIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiB0aGUgY3JlYXRlZCBpdGVyYXRlZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNob3NlbiBmdW5jdGlvbiBvciBpdHMgcmVzdWx0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEl0ZXJhdGVlKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaC5pdGVyYXRlZSB8fCBpdGVyYXRlZTtcbiAgICAgIHJlc3VsdCA9IHJlc3VsdCA9PT0gaXRlcmF0ZWUgPyBiYXNlSXRlcmF0ZWUgOiByZXN1bHQ7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHJlc3VsdChhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSkgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgICAgIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgICAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgICAgICA6IGRhdGEubWFwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBtYXRjaCBkYXRhIG9mIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE1hdGNoRGF0YShvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBrZXlzKG9iamVjdCksXG4gICAgICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSByZXN1bHRbbGVuZ3RoXSxcbiAgICAgICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgcmVzdWx0W2xlbmd0aF0gPSBba2V5LCB2YWx1ZSwgaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gICAgICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICAgICAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICAgICAgfSBjYXRjaCAoZSkge31cblxuICAgICAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgaWYgKHVubWFza2VkKSB7XG4gICAgICAgIGlmIChpc093bikge1xuICAgICAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gICAgICovXG4gICAgdmFyIGdldFN5bWJvbHMgPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgcmV0dXJuIGFycmF5RmlsdGVyKG5hdGl2ZUdldFN5bWJvbHMob2JqZWN0KSwgZnVuY3Rpb24oc3ltYm9sKSB7XG4gICAgICAgIHJldHVybiBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgc3ltYm9sKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gICAgICovXG4gICAgdmFyIGdldFN5bWJvbHNJbiA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICB3aGlsZSAob2JqZWN0KSB7XG4gICAgICAgIGFycmF5UHVzaChyZXN1bHQsIGdldFN5bWJvbHMob2JqZWN0KSk7XG4gICAgICAgIG9iamVjdCA9IGdldFByb3RvdHlwZShvYmplY3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIHZhciBnZXRUYWcgPSBiYXNlR2V0VGFnO1xuXG4gICAgLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEgYW5kIHByb21pc2VzIGluIE5vZGUuanMgPCA2LlxuICAgIGlmICgoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRhVmlld1RhZykgfHxcbiAgICAgICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuICAgICAgICAoUHJvbWlzZSAmJiBnZXRUYWcoUHJvbWlzZS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgICAgIChTZXQgJiYgZ2V0VGFnKG5ldyBTZXQpICE9IHNldFRhZykgfHxcbiAgICAgICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICAgICAgZ2V0VGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGJhc2VHZXRUYWcodmFsdWUpLFxuICAgICAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiAnJztcblxuICAgICAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgICAgIHN3aXRjaCAoY3RvclN0cmluZykge1xuICAgICAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6IHJldHVybiBkYXRhVmlld1RhZztcbiAgICAgICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgICAgIGNhc2UgcHJvbWlzZUN0b3JTdHJpbmc6IHJldHVybiBwcm9taXNlVGFnO1xuICAgICAgICAgICAgY2FzZSBzZXRDdG9yU3RyaW5nOiByZXR1cm4gc2V0VGFnO1xuICAgICAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZpZXcsIGFwcGx5aW5nIGFueSBgdHJhbnNmb3Jtc2AgdG8gdGhlIGBzdGFydGAgYW5kIGBlbmRgIHBvc2l0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgdmlldy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHZpZXcuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdHJhbnNmb3JtcyBUaGUgdHJhbnNmb3JtYXRpb25zIHRvIGFwcGx5IHRvIHRoZSB2aWV3LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGBzdGFydGAgYW5kIGBlbmRgXG4gICAgICogIHBvc2l0aW9ucyBvZiB0aGUgdmlldy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRWaWV3KHN0YXJ0LCBlbmQsIHRyYW5zZm9ybXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHRyYW5zZm9ybXMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZGF0YSA9IHRyYW5zZm9ybXNbaW5kZXhdLFxuICAgICAgICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICAgICAgICBzd2l0Y2ggKGRhdGEudHlwZSkge1xuICAgICAgICAgIGNhc2UgJ2Ryb3AnOiAgICAgIHN0YXJ0ICs9IHNpemU7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2Ryb3BSaWdodCc6IGVuZCAtPSBzaXplOyBicmVhaztcbiAgICAgICAgICBjYXNlICd0YWtlJzogICAgICBlbmQgPSBuYXRpdmVNaW4oZW5kLCBzdGFydCArIHNpemUpOyBicmVhaztcbiAgICAgICAgICBjYXNlICd0YWtlUmlnaHQnOiBzdGFydCA9IG5hdGl2ZU1heChzdGFydCwgZW5kIC0gc2l6ZSk7IGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4geyAnc3RhcnQnOiBzdGFydCwgJ2VuZCc6IGVuZCB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHdyYXBwZXIgZGV0YWlscyBmcm9tIHRoZSBgc291cmNlYCBib2R5IGNvbW1lbnQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgVGhlIHNvdXJjZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd3JhcHBlciBkZXRhaWxzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFdyYXBEZXRhaWxzKHNvdXJjZSkge1xuICAgICAgdmFyIG1hdGNoID0gc291cmNlLm1hdGNoKHJlV3JhcERldGFpbHMpO1xuICAgICAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0uc3BsaXQocmVTcGxpdERldGFpbHMpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBleGlzdHMgb24gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYXNGdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjayBwcm9wZXJ0aWVzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzUGF0aChvYmplY3QsIHBhdGgsIGhhc0Z1bmMpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKTtcbiAgICAgICAgaWYgKCEocmVzdWx0ID0gb2JqZWN0ICE9IG51bGwgJiYgaGFzRnVuYyhvYmplY3QsIGtleSkpKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gb2JqZWN0W2tleV07XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0IHx8ICsraW5kZXggIT0gbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBsZW5ndGggPSBvYmplY3QgPT0gbnVsbCA/IDAgOiBvYmplY3QubGVuZ3RoO1xuICAgICAgcmV0dXJuICEhbGVuZ3RoICYmIGlzTGVuZ3RoKGxlbmd0aCkgJiYgaXNJbmRleChrZXksIGxlbmd0aCkgJiZcbiAgICAgICAgKGlzQXJyYXkob2JqZWN0KSB8fCBpc0FyZ3VtZW50cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBhcnJheSBjbG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lQXJyYXkoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gbmV3IGFycmF5LmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgICAgIC8vIEFkZCBwcm9wZXJ0aWVzIGFzc2lnbmVkIGJ5IGBSZWdFeHAjZXhlY2AuXG4gICAgICBpZiAobGVuZ3RoICYmIHR5cGVvZiBhcnJheVswXSA9PSAnc3RyaW5nJyAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGFycmF5LCAnaW5kZXgnKSkge1xuICAgICAgICByZXN1bHQuaW5kZXggPSBhcnJheS5pbmRleDtcbiAgICAgICAgcmVzdWx0LmlucHV0ID0gYXJyYXkuaW5wdXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZU9iamVjdChvYmplY3QpIHtcbiAgICAgIHJldHVybiAodHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmICFpc1Byb3RvdHlwZShvYmplY3QpKVxuICAgICAgICA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpXG4gICAgICAgIDoge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lIGJhc2VkIG9uIGl0cyBgdG9TdHJpbmdUYWdgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjbG9uaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAgICAgKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE1hcGAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgYFNldGAsIG9yIGBTdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lQnlUYWcob2JqZWN0LCB0YWcsIGlzRGVlcCkge1xuICAgICAgdmFyIEN0b3IgPSBvYmplY3QuY29uc3RydWN0b3I7XG4gICAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZUFycmF5QnVmZmVyKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSBib29sVGFnOlxuICAgICAgICBjYXNlIGRhdGVUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKCtvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lRGF0YVZpZXcob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgICAgIGNhc2UgZmxvYXQzMlRhZzogY2FzZSBmbG9hdDY0VGFnOlxuICAgICAgICBjYXNlIGludDhUYWc6IGNhc2UgaW50MTZUYWc6IGNhc2UgaW50MzJUYWc6XG4gICAgICAgIGNhc2UgdWludDhUYWc6IGNhc2UgdWludDhDbGFtcGVkVGFnOiBjYXNlIHVpbnQxNlRhZzogY2FzZSB1aW50MzJUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lVHlwZWRBcnJheShvYmplY3QsIGlzRGVlcCk7XG5cbiAgICAgICAgY2FzZSBtYXBUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3Iob2JqZWN0KTtcblxuICAgICAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVSZWdFeHAob2JqZWN0KTtcblxuICAgICAgICBjYXNlIHNldFRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICAgICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lU3ltYm9sKG9iamVjdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5zZXJ0cyB3cmFwcGVyIGBkZXRhaWxzYCBpbiBhIGNvbW1lbnQgYXQgdGhlIHRvcCBvZiB0aGUgYHNvdXJjZWAgYm9keS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSBUaGUgc291cmNlIHRvIG1vZGlmeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IGRldGFpbHMgVGhlIGRldGFpbHMgdG8gaW5zZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIG1vZGlmaWVkIHNvdXJjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbnNlcnRXcmFwRGV0YWlscyhzb3VyY2UsIGRldGFpbHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBkZXRhaWxzLmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgICB9XG4gICAgICB2YXIgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICAgIGRldGFpbHNbbGFzdEluZGV4XSA9IChsZW5ndGggPiAxID8gJyYgJyA6ICcnKSArIGRldGFpbHNbbGFzdEluZGV4XTtcbiAgICAgIGRldGFpbHMgPSBkZXRhaWxzLmpvaW4obGVuZ3RoID4gMiA/ICcsICcgOiAnICcpO1xuICAgICAgcmV0dXJuIHNvdXJjZS5yZXBsYWNlKHJlV3JhcENvbW1lbnQsICd7XFxuLyogW3dyYXBwZWQgd2l0aCAnICsgZGV0YWlscyArICddICovXFxuJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBmbGF0dGVuYWJsZSBgYXJndW1lbnRzYCBvYmplY3Qgb3IgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZsYXR0ZW5hYmxlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGbGF0dGVuYWJsZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSB8fFxuICAgICAgICAhIShzcHJlYWRhYmxlU3ltYm9sICYmIHZhbHVlICYmIHZhbHVlW3NwcmVhZGFibGVTeW1ib2xdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcblxuICAgICAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgICAgICh0eXBlID09ICdudW1iZXInIHx8XG4gICAgICAgICAgKHR5cGUgIT0gJ3N5bWJvbCcgJiYgcmVJc1VpbnQudGVzdCh2YWx1ZSkpKSAmJlxuICAgICAgICAgICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSB2YWx1ZSBhcmd1bWVudC5cbiAgICAgKiBAcGFyYW0geyp9IGluZGV4IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgaW5kZXggb3Iga2V5IGFyZ3VtZW50LlxuICAgICAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgb2JqZWN0IGFyZ3VtZW50LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0l0ZXJhdGVlQ2FsbCh2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIGluZGV4O1xuICAgICAgaWYgKHR5cGUgPT0gJ251bWJlcidcbiAgICAgICAgICAgID8gKGlzQXJyYXlMaWtlKG9iamVjdCkgJiYgaXNJbmRleChpbmRleCwgb2JqZWN0Lmxlbmd0aCkpXG4gICAgICAgICAgICA6ICh0eXBlID09ICdzdHJpbmcnICYmIGluZGV4IGluIG9iamVjdClcbiAgICAgICAgICApIHtcbiAgICAgICAgcmV0dXJuIGVxKG9iamVjdFtpbmRleF0sIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUgYW5kIG5vdCBhIHByb3BlcnR5IHBhdGguXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNLZXkodmFsdWUsIG9iamVjdCkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgaWYgKHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJyB8fFxuICAgICAgICAgIHZhbHVlID09IG51bGwgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlSXNQbGFpblByb3AudGVzdCh2YWx1ZSkgfHwgIXJlSXNEZWVwUHJvcC50ZXN0KHZhbHVlKSB8fFxuICAgICAgICAob2JqZWN0ICE9IG51bGwgJiYgdmFsdWUgaW4gT2JqZWN0KG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICAgICAgOiAodmFsdWUgPT09IG51bGwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGEgbGF6eSBjb3VudGVycGFydC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBoYXMgYSBsYXp5IGNvdW50ZXJwYXJ0LFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNMYXppYWJsZShmdW5jKSB7XG4gICAgICB2YXIgZnVuY05hbWUgPSBnZXRGdW5jTmFtZShmdW5jKSxcbiAgICAgICAgICBvdGhlciA9IGxvZGFzaFtmdW5jTmFtZV07XG5cbiAgICAgIGlmICh0eXBlb2Ygb3RoZXIgIT0gJ2Z1bmN0aW9uJyB8fCAhKGZ1bmNOYW1lIGluIExhenlXcmFwcGVyLnByb3RvdHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGZ1bmMgPT09IG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIGRhdGEgPSBnZXREYXRhKG90aGVyKTtcbiAgICAgIHJldHVybiAhIWRhdGEgJiYgZnVuYyA9PT0gZGF0YVswXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gICAgICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgZnVuY2AgaXMgY2FwYWJsZSBvZiBiZWluZyBtYXNrZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2FibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICB2YXIgaXNNYXNrYWJsZSA9IGNvcmVKc0RhdGEgPyBpc0Z1bmN0aW9uIDogc3R1YkZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICAgICAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICAgICAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpZiBzdWl0YWJsZSBmb3Igc3RyaWN0XG4gICAgICogIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlICYmICFpc09iamVjdCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBtYXRjaGVzUHJvcGVydHlgIGZvciBzb3VyY2UgdmFsdWVzIHN1aXRhYmxlXG4gICAgICogZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShrZXksIHNyY1ZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0W2tleV0gPT09IHNyY1ZhbHVlICYmXG4gICAgICAgICAgKHNyY1ZhbHVlICE9PSB1bmRlZmluZWQgfHwgKGtleSBpbiBPYmplY3Qob2JqZWN0KSkpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWVtb2l6ZWAgd2hpY2ggY2xlYXJzIHRoZSBtZW1vaXplZCBmdW5jdGlvbidzXG4gICAgICogY2FjaGUgd2hlbiBpdCBleGNlZWRzIGBNQVhfTUVNT0laRV9TSVpFYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lbW9pemVDYXBwZWQoZnVuYykge1xuICAgICAgdmFyIHJlc3VsdCA9IG1lbW9pemUoZnVuYywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIGlmIChjYWNoZS5zaXplID09PSBNQVhfTUVNT0laRV9TSVpFKSB7XG4gICAgICAgICAgY2FjaGUuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBjYWNoZSA9IHJlc3VsdC5jYWNoZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWVyZ2VzIHRoZSBmdW5jdGlvbiBtZXRhZGF0YSBvZiBgc291cmNlYCBpbnRvIGBkYXRhYC5cbiAgICAgKlxuICAgICAqIE1lcmdpbmcgbWV0YWRhdGEgcmVkdWNlcyB0aGUgbnVtYmVyIG9mIHdyYXBwZXJzIHVzZWQgdG8gaW52b2tlIGEgZnVuY3Rpb24uXG4gICAgICogVGhpcyBpcyBwb3NzaWJsZSBiZWNhdXNlIG1ldGhvZHMgbGlrZSBgXy5iaW5kYCwgYF8uY3VycnlgLCBhbmQgYF8ucGFydGlhbGBcbiAgICAgKiBtYXkgYmUgYXBwbGllZCByZWdhcmRsZXNzIG9mIGV4ZWN1dGlvbiBvcmRlci4gTWV0aG9kcyBsaWtlIGBfLmFyeWAgYW5kXG4gICAgICogYF8ucmVhcmdgIG1vZGlmeSBmdW5jdGlvbiBhcmd1bWVudHMsIG1ha2luZyB0aGUgb3JkZXIgaW4gd2hpY2ggdGhleSBhcmVcbiAgICAgKiBleGVjdXRlZCBpbXBvcnRhbnQsIHByZXZlbnRpbmcgdGhlIG1lcmdpbmcgb2YgbWV0YWRhdGEuIEhvd2V2ZXIsIHdlIG1ha2VcbiAgICAgKiBhbiBleGNlcHRpb24gZm9yIGEgc2FmZSBjb21iaW5lZCBjYXNlIHdoZXJlIGN1cnJpZWQgZnVuY3Rpb25zIGhhdmUgYF8uYXJ5YFxuICAgICAqIGFuZCBvciBgXy5yZWFyZ2AgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gZGF0YSBUaGUgZGVzdGluYXRpb24gbWV0YWRhdGEuXG4gICAgICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBzb3VyY2UgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBkYXRhYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZXJnZURhdGEoZGF0YSwgc291cmNlKSB7XG4gICAgICB2YXIgYml0bWFzayA9IGRhdGFbMV0sXG4gICAgICAgICAgc3JjQml0bWFzayA9IHNvdXJjZVsxXSxcbiAgICAgICAgICBuZXdCaXRtYXNrID0gYml0bWFzayB8IHNyY0JpdG1hc2ssXG4gICAgICAgICAgaXNDb21tb24gPSBuZXdCaXRtYXNrIDwgKFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHIHwgV1JBUF9BUllfRkxBRyk7XG5cbiAgICAgIHZhciBpc0NvbWJvID1cbiAgICAgICAgKChzcmNCaXRtYXNrID09IFdSQVBfQVJZX0ZMQUcpICYmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRykpIHx8XG4gICAgICAgICgoc3JjQml0bWFzayA9PSBXUkFQX0FSWV9GTEFHKSAmJiAoYml0bWFzayA9PSBXUkFQX1JFQVJHX0ZMQUcpICYmIChkYXRhWzddLmxlbmd0aCA8PSBzb3VyY2VbOF0pKSB8fFxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gKFdSQVBfQVJZX0ZMQUcgfCBXUkFQX1JFQVJHX0ZMQUcpKSAmJiAoc291cmNlWzddLmxlbmd0aCA8PSBzb3VyY2VbOF0pICYmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRykpO1xuXG4gICAgICAvLyBFeGl0IGVhcmx5IGlmIG1ldGFkYXRhIGNhbid0IGJlIG1lcmdlZC5cbiAgICAgIGlmICghKGlzQ29tbW9uIHx8IGlzQ29tYm8pKSB7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgdGhpc0FyZ2AgaWYgYXZhaWxhYmxlLlxuICAgICAgaWYgKHNyY0JpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRykge1xuICAgICAgICBkYXRhWzJdID0gc291cmNlWzJdO1xuICAgICAgICAvLyBTZXQgd2hlbiBjdXJyeWluZyBhIGJvdW5kIGZ1bmN0aW9uLlxuICAgICAgICBuZXdCaXRtYXNrIHw9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyA/IDAgOiBXUkFQX0NVUlJZX0JPVU5EX0ZMQUc7XG4gICAgICB9XG4gICAgICAvLyBDb21wb3NlIHBhcnRpYWwgYXJndW1lbnRzLlxuICAgICAgdmFyIHZhbHVlID0gc291cmNlWzNdO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHZhciBwYXJ0aWFscyA9IGRhdGFbM107XG4gICAgICAgIGRhdGFbM10gPSBwYXJ0aWFscyA/IGNvbXBvc2VBcmdzKHBhcnRpYWxzLCB2YWx1ZSwgc291cmNlWzRdKSA6IHZhbHVlO1xuICAgICAgICBkYXRhWzRdID0gcGFydGlhbHMgPyByZXBsYWNlSG9sZGVycyhkYXRhWzNdLCBQTEFDRUhPTERFUikgOiBzb3VyY2VbNF07XG4gICAgICB9XG4gICAgICAvLyBDb21wb3NlIHBhcnRpYWwgcmlnaHQgYXJndW1lbnRzLlxuICAgICAgdmFsdWUgPSBzb3VyY2VbNV07XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgcGFydGlhbHMgPSBkYXRhWzVdO1xuICAgICAgICBkYXRhWzVdID0gcGFydGlhbHMgPyBjb21wb3NlQXJnc1JpZ2h0KHBhcnRpYWxzLCB2YWx1ZSwgc291cmNlWzZdKSA6IHZhbHVlO1xuICAgICAgICBkYXRhWzZdID0gcGFydGlhbHMgPyByZXBsYWNlSG9sZGVycyhkYXRhWzVdLCBQTEFDRUhPTERFUikgOiBzb3VyY2VbNl07XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcmdQb3NgIGlmIGF2YWlsYWJsZS5cbiAgICAgIHZhbHVlID0gc291cmNlWzddO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGRhdGFbN10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyeWAgaWYgaXQncyBzbWFsbGVyLlxuICAgICAgaWYgKHNyY0JpdG1hc2sgJiBXUkFQX0FSWV9GTEFHKSB7XG4gICAgICAgIGRhdGFbOF0gPSBkYXRhWzhdID09IG51bGwgPyBzb3VyY2VbOF0gOiBuYXRpdmVNaW4oZGF0YVs4XSwgc291cmNlWzhdKTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyaXR5YCBpZiBvbmUgaXMgbm90IHByb3ZpZGVkLlxuICAgICAgaWYgKGRhdGFbOV0gPT0gbnVsbCkge1xuICAgICAgICBkYXRhWzldID0gc291cmNlWzldO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgZnVuY2AgYW5kIG1lcmdlIGJpdG1hc2tzLlxuICAgICAgZGF0YVswXSA9IHNvdXJjZVswXTtcbiAgICAgIGRhdGFbMV0gPSBuZXdCaXRtYXNrO1xuXG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2VcbiAgICAgKiBbYE9iamVjdC5rZXlzYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gICAgICogZXhjZXB0IHRoYXQgaXQgaW5jbHVkZXMgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbmF0aXZlS2V5c0luKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKG9iamVjdCAhPSBudWxsKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIHRyYW5zZm9ybXMgdGhlIHJlc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgcmVzdCBhcnJheSB0cmFuc2Zvcm0uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gb3ZlclJlc3QoZnVuYywgc3RhcnQsIHRyYW5zZm9ybSkge1xuICAgICAgc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQgPT09IHVuZGVmaW5lZCA/IChmdW5jLmxlbmd0aCAtIDEpIDogc3RhcnQsIDApO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoYXJncy5sZW5ndGggLSBzdGFydCwgMCksXG4gICAgICAgICAgICBhcnJheSA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBhcnJheVtpbmRleF0gPSBhcmdzW3N0YXJ0ICsgaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gLTE7XG4gICAgICAgIHZhciBvdGhlckFyZ3MgPSBBcnJheShzdGFydCArIDEpO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IHN0YXJ0KSB7XG4gICAgICAgICAgb3RoZXJBcmdzW2luZGV4XSA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIG90aGVyQXJnc1tzdGFydF0gPSB0cmFuc2Zvcm0oYXJyYXkpO1xuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcGFyZW50IHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhdGggVGhlIHBhdGggdG8gZ2V0IHRoZSBwYXJlbnQgdmFsdWUgb2YuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHBhcmVudCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYXJlbnQob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5sZW5ndGggPCAyID8gb2JqZWN0IDogYmFzZUdldChvYmplY3QsIGJhc2VTbGljZShwYXRoLCAwLCAtMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlb3JkZXIgYGFycmF5YCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCBpbmRleGVzIHdoZXJlIHRoZSBlbGVtZW50IGF0XG4gICAgICogdGhlIGZpcnN0IGluZGV4IGlzIGFzc2lnbmVkIGFzIHRoZSBmaXJzdCBlbGVtZW50LCB0aGUgZWxlbWVudCBhdFxuICAgICAqIHRoZSBzZWNvbmQgaW5kZXggaXMgYXNzaWduZWQgYXMgdGhlIHNlY29uZCBlbGVtZW50LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byByZW9yZGVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGluZGV4ZXMgVGhlIGFycmFuZ2VkIGFycmF5IGluZGV4ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVvcmRlcihhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4oaW5kZXhlcy5sZW5ndGgsIGFyckxlbmd0aCksXG4gICAgICAgICAgb2xkQXJyYXkgPSBjb3B5QXJyYXkoYXJyYXkpO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGluZGV4ID0gaW5kZXhlc1tsZW5ndGhdO1xuICAgICAgICBhcnJheVtsZW5ndGhdID0gaXNJbmRleChpbmRleCwgYXJyTGVuZ3RoKSA/IG9sZEFycmF5W2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCwgdW5sZXNzIGBrZXlgIGlzIFwiX19wcm90b19fXCIgb3IgXCJjb25zdHJ1Y3RvclwiLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhZmVHZXQob2JqZWN0LCBrZXkpIHtcbiAgICAgIGlmIChrZXkgPT09ICdjb25zdHJ1Y3RvcicgJiYgdHlwZW9mIG9iamVjdFtrZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGtleSA9PSAnX19wcm90b19fJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvYmplY3Rba2V5XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgdGhpcyBmdW5jdGlvbiBiZWNvbWVzIGhvdCwgaS5lLiBpcyBpbnZva2VkIGEgbG90IGluIGEgc2hvcnRcbiAgICAgKiBwZXJpb2Qgb2YgdGltZSwgaXQgd2lsbCB0cmlwIGl0cyBicmVha2VyIGFuZCB0cmFuc2l0aW9uIHRvIGFuIGlkZW50aXR5XG4gICAgICogZnVuY3Rpb24gdG8gYXZvaWQgZ2FyYmFnZSBjb2xsZWN0aW9uIHBhdXNlcyBpbiBWOC4gU2VlXG4gICAgICogW1Y4IGlzc3VlIDIwNzBdKGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTIwNzApXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzb2NpYXRlIG1ldGFkYXRhIHdpdGguXG4gICAgICogQHBhcmFtIHsqfSBkYXRhIFRoZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBzZXREYXRhID0gc2hvcnRPdXQoYmFzZVNldERhdGEpO1xuXG4gICAgLyoqXG4gICAgICogQSBzaW1wbGUgd3JhcHBlciBhcm91bmQgdGhlIGdsb2JhbCBbYHNldFRpbWVvdXRgXShodHRwczovL21kbi5pby9zZXRUaW1lb3V0KS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfE9iamVjdH0gUmV0dXJucyB0aGUgdGltZXIgaWQgb3IgdGltZW91dCBvYmplY3QuXG4gICAgICovXG4gICAgdmFyIHNldFRpbWVvdXQgPSBjdHhTZXRUaW1lb3V0IHx8IGZ1bmN0aW9uKGZ1bmMsIHdhaXQpIHtcbiAgICAgIHJldHVybiByb290LnNldFRpbWVvdXQoZnVuYywgd2FpdCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGBmdW5jYCB0byByZXR1cm4gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIHNldFRvU3RyaW5nID0gc2hvcnRPdXQoYmFzZVNldFRvU3RyaW5nKTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGB3cmFwcGVyYCB0byBtaW1pYyB0aGUgc291cmNlIG9mIGByZWZlcmVuY2VgXG4gICAgICogd2l0aCB3cmFwcGVyIGRldGFpbHMgaW4gYSBjb21tZW50IGF0IHRoZSB0b3Agb2YgdGhlIHNvdXJjZSBib2R5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB3cmFwcGVyIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVmZXJlbmNlIFRoZSByZWZlcmVuY2UgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYHdyYXBwZXJgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldFdyYXBUb1N0cmluZyh3cmFwcGVyLCByZWZlcmVuY2UsIGJpdG1hc2spIHtcbiAgICAgIHZhciBzb3VyY2UgPSAocmVmZXJlbmNlICsgJycpO1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKHdyYXBwZXIsIGluc2VydFdyYXBEZXRhaWxzKHNvdXJjZSwgdXBkYXRlV3JhcERldGFpbHMoZ2V0V3JhcERldGFpbHMoc291cmNlKSwgYml0bWFzaykpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCdsbCBzaG9ydCBvdXQgYW5kIGludm9rZSBgaWRlbnRpdHlgIGluc3RlYWRcbiAgICAgKiBvZiBgZnVuY2Agd2hlbiBpdCdzIGNhbGxlZCBgSE9UX0NPVU5UYCBvciBtb3JlIHRpbWVzIGluIGBIT1RfU1BBTmBcbiAgICAgKiBtaWxsaXNlY29uZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNob3J0YWJsZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaG9ydE91dChmdW5jKSB7XG4gICAgICB2YXIgY291bnQgPSAwLFxuICAgICAgICAgIGxhc3RDYWxsZWQgPSAwO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzdGFtcCA9IG5hdGl2ZU5vdygpLFxuICAgICAgICAgICAgcmVtYWluaW5nID0gSE9UX1NQQU4gLSAoc3RhbXAgLSBsYXN0Q2FsbGVkKTtcblxuICAgICAgICBsYXN0Q2FsbGVkID0gc3RhbXA7XG4gICAgICAgIGlmIChyZW1haW5pbmcgPiAwKSB7XG4gICAgICAgICAgaWYgKCsrY291bnQgPj0gSE9UX0NPVU5UKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzWzBdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb3VudCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2h1ZmZsZWAgd2hpY2ggbXV0YXRlcyBhbmQgc2V0cyB0aGUgc2l6ZSBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2h1ZmZsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NpemU9YXJyYXkubGVuZ3RoXSBUaGUgc2l6ZSBvZiBgYXJyYXlgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNodWZmbGVTZWxmKGFycmF5LCBzaXplKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcblxuICAgICAgc2l6ZSA9IHNpemUgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHNpemU7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IHNpemUpIHtcbiAgICAgICAgdmFyIHJhbmQgPSBiYXNlUmFuZG9tKGluZGV4LCBsYXN0SW5kZXgpLFxuICAgICAgICAgICAgdmFsdWUgPSBhcnJheVtyYW5kXTtcblxuICAgICAgICBhcnJheVtyYW5kXSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICBhcnJheS5sZW5ndGggPSBzaXplO1xuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqL1xuICAgIHZhciBzdHJpbmdUb1BhdGggPSBtZW1vaXplQ2FwcGVkKGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKHN0cmluZy5jaGFyQ29kZUF0KDApID09PSA0NiAvKiAuICovKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKCcnKTtcbiAgICAgIH1cbiAgICAgIHN0cmluZy5yZXBsYWNlKHJlUHJvcE5hbWUsIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdWJTdHJpbmcpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gocXVvdGUgPyBzdWJTdHJpbmcucmVwbGFjZShyZUVzY2FwZUNoYXIsICckMScpIDogKG51bWJlciB8fCBtYXRjaCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyBrZXkgaWYgaXQncyBub3QgYSBzdHJpbmcgb3Igc3ltYm9sLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8c3ltYm9sfSBSZXR1cm5zIHRoZSBrZXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9LZXkodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gICAgICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gICAgICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHdyYXBwZXIgYGRldGFpbHNgIGJhc2VkIG9uIGBiaXRtYXNrYCBmbGFncy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybnMge0FycmF5fSBkZXRhaWxzIFRoZSBkZXRhaWxzIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgZGV0YWlsc2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlV3JhcERldGFpbHMoZGV0YWlscywgYml0bWFzaykge1xuICAgICAgYXJyYXlFYWNoKHdyYXBGbGFncywgZnVuY3Rpb24ocGFpcikge1xuICAgICAgICB2YXIgdmFsdWUgPSAnXy4nICsgcGFpclswXTtcbiAgICAgICAgaWYgKChiaXRtYXNrICYgcGFpclsxXSkgJiYgIWFycmF5SW5jbHVkZXMoZGV0YWlscywgdmFsdWUpKSB7XG4gICAgICAgICAgZGV0YWlscy5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZGV0YWlscy5zb3J0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGB3cmFwcGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHdyYXBwZXIgVGhlIHdyYXBwZXIgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHdyYXBwZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlckNsb25lKHdyYXBwZXIpIHtcbiAgICAgIGlmICh3cmFwcGVyIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgcmV0dXJuIHdyYXBwZXIuY2xvbmUoKTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBuZXcgTG9kYXNoV3JhcHBlcih3cmFwcGVyLl9fd3JhcHBlZF9fLCB3cmFwcGVyLl9fY2hhaW5fXyk7XG4gICAgICByZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkod3JhcHBlci5fX2FjdGlvbnNfXyk7XG4gICAgICByZXN1bHQuX19pbmRleF9fICA9IHdyYXBwZXIuX19pbmRleF9fO1xuICAgICAgcmVzdWx0Ll9fdmFsdWVzX18gPSB3cmFwcGVyLl9fdmFsdWVzX187XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgc3BsaXQgaW50byBncm91cHMgdGhlIGxlbmd0aCBvZiBgc2l6ZWAuXG4gICAgICogSWYgYGFycmF5YCBjYW4ndCBiZSBzcGxpdCBldmVubHksIHRoZSBmaW5hbCBjaHVuayB3aWxsIGJlIHRoZSByZW1haW5pbmdcbiAgICAgKiBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2l6ZT0xXSBUaGUgbGVuZ3RoIG9mIGVhY2ggY2h1bmtcbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNodW5rcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jaHVuayhbJ2EnLCAnYicsICdjJywgJ2QnXSwgMik7XG4gICAgICogLy8gPT4gW1snYScsICdiJ10sIFsnYycsICdkJ11dXG4gICAgICpcbiAgICAgKiBfLmNodW5rKFsnYScsICdiJywgJ2MnLCAnZCddLCAzKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InLCAnYyddLCBbJ2QnXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjaHVuayhhcnJheSwgc2l6ZSwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgc2l6ZSwgZ3VhcmQpIDogc2l6ZSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBzaXplID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNpemUgPSBuYXRpdmVNYXgodG9JbnRlZ2VyKHNpemUpLCAwKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoIHx8IHNpemUgPCAxKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KG5hdGl2ZUNlaWwobGVuZ3RoIC8gc2l6ZSkpO1xuXG4gICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gYmFzZVNsaWNlKGFycmF5LCBpbmRleCwgKGluZGV4ICs9IHNpemUpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSB3aXRoIGFsbCBmYWxzZXkgdmFsdWVzIHJlbW92ZWQuIFRoZSB2YWx1ZXMgYGZhbHNlYCwgYG51bGxgLFxuICAgICAqIGAwYCwgYFwiXCJgLCBgdW5kZWZpbmVkYCwgYW5kIGBOYU5gIGFyZSBmYWxzZXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY29tcGFjdChbMCwgMSwgZmFsc2UsIDIsICcnLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFjdChhcnJheSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgYXJyYXkgY29uY2F0ZW5hdGluZyBgYXJyYXlgIHdpdGggYW55IGFkZGl0aW9uYWwgYXJyYXlzXG4gICAgICogYW5kL29yIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb25jYXRlbmF0ZS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY29uY2F0ZW5hdGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgY29uY2F0ZW5hdGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMV07XG4gICAgICogdmFyIG90aGVyID0gXy5jb25jYXQoYXJyYXksIDIsIFszXSwgW1s0XV0pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob3RoZXIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCBbNF1dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uY2F0KCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgYXJncyA9IEFycmF5KGxlbmd0aCAtIDEpLFxuICAgICAgICAgIGFycmF5ID0gYXJndW1lbnRzWzBdLFxuICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICBhcmdzW2luZGV4IC0gMV0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5UHVzaChpc0FycmF5KGFycmF5KSA/IGNvcHlBcnJheShhcnJheSkgOiBbYXJyYXldLCBiYXNlRmxhdHRlbihhcmdzLCAxKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBgYXJyYXlgIHZhbHVlcyBub3QgaW5jbHVkZWQgaW4gdGhlIG90aGVyIGdpdmVuIGFycmF5c1xuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBzZWUgXy53aXRob3V0LCBfLnhvclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRpZmZlcmVuY2UoWzIsIDFdLCBbMiwgM10pO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSlcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGlmZmVyZW5jZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgYW5kIGB2YWx1ZXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb25cbiAgICAgKiBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbEJ5YCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRpZmZlcmVuY2VCeShbMi4xLCAxLjJdLCBbMi4zLCAzLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kaWZmZXJlbmNlQnkoW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCBbeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgdmFyIGRpZmZlcmVuY2VCeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QodmFsdWVzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRpZmZlcmVuY2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheWAgdG8gYHZhbHVlc2AuIFRoZSBvcmRlciBhbmRcbiAgICAgKiByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgY29tcGFyYXRvclxuICAgICAqIGlzIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsV2l0aGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICpcbiAgICAgKiBfLmRpZmZlcmVuY2VXaXRoKG9iamVjdHMsIFt7ICd4JzogMSwgJ3knOiAyIH1dLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIGRpZmZlcmVuY2VXaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KHZhbHVlcyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoY29tcGFyYXRvcikpIHtcbiAgICAgICAgY29tcGFyYXRvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIGRyb3AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBuIDwgMCA/IDAgOiBuLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgZW5kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIGRyb3AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wUmlnaHQoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgbiA9IGxlbmd0aCAtIG47XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCAwLCBuIDwgMCA/IDAgOiBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBleGNsdWRpbmcgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBlbmQuXG4gICAgICogRWxlbWVudHMgYXJlIGRyb3BwZWQgdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFJpZ2h0V2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCB0cnVlLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGV4Y2x1ZGluZyBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKiBFbGVtZW50cyBhcmUgZHJvcHBlZCB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wV2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbGxzIGVsZW1lbnRzIG9mIGBhcnJheWAgd2l0aCBgdmFsdWVgIGZyb20gYHN0YXJ0YCB1cCB0bywgYnV0IG5vdFxuICAgICAqIGluY2x1ZGluZywgYGVuZGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZpbGwuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZmlsbCBgYXJyYXlgIHdpdGguXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfLmZpbGwoYXJyYXksICdhJyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYScsICdhJywgJ2EnXVxuICAgICAqXG4gICAgICogXy5maWxsKEFycmF5KDMpLCAyKTtcbiAgICAgKiAvLyA9PiBbMiwgMiwgMl1cbiAgICAgKlxuICAgICAqIF8uZmlsbChbNCwgNiwgOCwgMTBdLCAnKicsIDEsIDMpO1xuICAgICAqIC8vID0+IFs0LCAnKicsICcqJywgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydCAmJiB0eXBlb2Ygc3RhcnQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoYXJyYXksIHZhbHVlLCBzdGFydCkpIHtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICBlbmQgPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdFxuICAgICAqIGVsZW1lbnQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yIGluc3RlYWQgb2YgdGhlIGVsZW1lbnQgaXRzZWxmLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyID09ICdiYXJuZXknOyB9KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCB7ICd1c2VyJzogJ2ZyZWQnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gZnJvbUluZGV4ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlRmluZEluZGV4KGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBpbmRleCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHNcbiAgICAgKiBvZiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PWFycmF5Lmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXIgPT0gJ3BlYmJsZXMnOyB9KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRMYXN0SW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICAgICAgaWYgKGZyb21JbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGluZGV4ID0gdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICAgIGluZGV4ID0gZnJvbUluZGV4IDwgMFxuICAgICAgICAgID8gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKVxuICAgICAgICAgIDogbmF0aXZlTWluKGluZGV4LCBsZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlRmluZEluZGV4KGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBpbmRleCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmxhdHRlbnMgYGFycmF5YCBhIHNpbmdsZSBsZXZlbCBkZWVwLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW4oWzEsIFsyLCBbMywgWzRdXSwgNV1dKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgWzMsIFs0XV0sIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbihhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VGbGF0dGVuKGFycmF5LCAxKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlZXAoWzEsIFsyLCBbMywgWzRdXSwgNV1dKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgNCwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuRGVlcChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VGbGF0dGVuKGFycmF5LCBJTkZJTklUWSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBmbGF0dGVuIGBhcnJheWAgdXAgdG8gYGRlcHRoYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjQuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVwdGg9MV0gVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIFsyLCBbMywgWzRdXSwgNV1dO1xuICAgICAqXG4gICAgICogXy5mbGF0dGVuRGVwdGgoYXJyYXksIDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCBbMywgWzRdXSwgNV1cbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlcHRoKGFycmF5LCAyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgWzRdLCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW5EZXB0aChhcnJheSwgZGVwdGgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGRlcHRoID0gZGVwdGggPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGgpO1xuICAgICAgcmV0dXJuIGJhc2VGbGF0dGVuKGFycmF5LCBkZXB0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGludmVyc2Ugb2YgYF8udG9QYWlyc2A7IHRoaXMgbWV0aG9kIHJldHVybnMgYW4gb2JqZWN0IGNvbXBvc2VkXG4gICAgICogZnJvbSBrZXktdmFsdWUgYHBhaXJzYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhaXJzIFRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mcm9tUGFpcnMoW1snYScsIDFdLCBbJ2InLCAyXV0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZyb21QYWlycyhwYWlycykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGFpcnMgPT0gbnVsbCA/IDAgOiBwYWlycy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBwYWlyID0gcGFpcnNbaW5kZXhdO1xuICAgICAgICByZXN1bHRbcGFpclswXV0gPSBwYWlyWzFdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgZmlyc3RcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5oZWFkKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogXy5oZWFkKFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoZWFkKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBhcnJheVswXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBgdmFsdWVgIGlzIGZvdW5kIGluIGBhcnJheWBcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gSWYgYGZyb21JbmRleGAgaXMgbmVnYXRpdmUsIGl0J3MgdXNlZCBhcyB0aGVcbiAgICAgKiBvZmZzZXQgZnJvbSB0aGUgZW5kIG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluZGV4T2YoWzEsIDIsIDEsIDJdLCAyKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBTZWFyY2ggZnJvbSB0aGUgYGZyb21JbmRleGAuXG4gICAgICogXy5pbmRleE9mKFsxLCAyLCAxLCAyXSwgMiwgMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGZyb21JbmRleCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBpbmRleCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgYnV0IHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5pdGlhbChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRpYWwoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlU2xpY2UoYXJyYXksIDAsIC0xKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcyB0aGF0IGFyZSBpbmNsdWRlZCBpbiBhbGwgZ2l2ZW4gYXJyYXlzXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMl1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcbiAgICAgIHJldHVybiAobWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSlcbiAgICAgICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZClcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgZWFjaCBgYXJyYXlzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uaW50ZXJzZWN0aW9uQnkoW3sgJ3gnOiAxIH1dLCBbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH1dXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbkJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyksXG4gICAgICAgICAgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcblxuICAgICAgaWYgKGl0ZXJhdGVlID09PSBsYXN0KG1hcHBlZCkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXBwZWQucG9wKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzXG4gICAgICogb2YgcmVzdWx0IHZhbHVlcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBjb21wYXJhdG9yIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgaW50ZXJzZWN0aW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb25XaXRoKG9iamVjdHMsIG90aGVycywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9XVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb25XaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QoYXJyYXlzKSxcbiAgICAgICAgICBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuXG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBtYXBwZWQucG9wKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQsIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGFsbCBlbGVtZW50cyBpbiBgYXJyYXlgIGludG8gYSBzdHJpbmcgc2VwYXJhdGVkIGJ5IGBzZXBhcmF0b3JgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbnZlcnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzZXBhcmF0b3I9JywnXSBUaGUgZWxlbWVudCBzZXBhcmF0b3IuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgam9pbmVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5qb2luKFsnYScsICdiJywgJ2MnXSwgJ34nKTtcbiAgICAgKiAvLyA9PiAnYX5ifmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gam9pbihhcnJheSwgc2VwYXJhdG9yKSB7XG4gICAgICByZXR1cm4gYXJyYXkgPT0gbnVsbCA/ICcnIDogbmF0aXZlSm9pbi5jYWxsKGFycmF5LCBzZXBhcmF0b3IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sYXN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhc3QoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBhcnJheVtsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgYXJyYXlgIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9YXJyYXkubGVuZ3RoLTFdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxhc3RJbmRleE9mKFsxLCAyLCAxLCAyXSwgMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogLy8gU2VhcmNoIGZyb20gdGhlIGBmcm9tSW5kZXhgLlxuICAgICAqIF8ubGFzdEluZGV4T2YoWzEsIDIsIDEsIDJdLCAyLCAyKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGxlbmd0aDtcbiAgICAgIGlmIChmcm9tSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpbmRleCA9IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgICBpbmRleCA9IGluZGV4IDwgMCA/IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCkgOiBuYXRpdmVNaW4oaW5kZXgsIGxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZVxuICAgICAgICA/IHN0cmljdExhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgaW5kZXgpXG4gICAgICAgIDogYmFzZUZpbmRJbmRleChhcnJheSwgYmFzZUlzTmFOLCBpbmRleCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZWxlbWVudCBhdCBpbmRleCBgbmAgb2YgYGFycmF5YC4gSWYgYG5gIGlzIG5lZ2F0aXZlLCB0aGUgbnRoXG4gICAgICogZWxlbWVudCBmcm9tIHRoZSBlbmQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0wXSBUaGUgaW5kZXggb2YgdGhlIGVsZW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBudGggZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2QnXTtcbiAgICAgKlxuICAgICAqIF8ubnRoKGFycmF5LCAxKTtcbiAgICAgKiAvLyA9PiAnYidcbiAgICAgKlxuICAgICAqIF8ubnRoKGFycmF5LCAtMik7XG4gICAgICogLy8gPT4gJ2MnO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG50aChhcnJheSwgbikge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZU50aChhcnJheSwgdG9JbnRlZ2VyKG4pKSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBnaXZlbiB2YWx1ZXMgZnJvbSBgYXJyYXlgIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLndpdGhvdXRgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuIFVzZSBgXy5yZW1vdmVgXG4gICAgICogdG8gcmVtb3ZlIGVsZW1lbnRzIGZyb20gYW4gYXJyYXkgYnkgcHJlZGljYXRlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2EnLCAnYicsICdjJ107XG4gICAgICpcbiAgICAgKiBfLnB1bGwoYXJyYXksICdhJywgJ2MnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydiJywgJ2InXVxuICAgICAqL1xuICAgIHZhciBwdWxsID0gYmFzZVJlc3QocHVsbEFsbCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYW4gYXJyYXkgb2YgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZGlmZmVyZW5jZWAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2EnLCAnYicsICdjJ107XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGwoYXJyYXksIFsnYScsICdjJ10pO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2InLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbChhcnJheSwgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzKVxuICAgICAgICA6IGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbEFsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgYW5kIGB2YWx1ZXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb25cbiAgICAgKiBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZGlmZmVyZW5jZUJ5YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbeyAneCc6IDEgfSwgeyAneCc6IDIgfSwgeyAneCc6IDMgfSwgeyAneCc6IDEgfV07XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGxCeShhcnJheSwgW3sgJ3gnOiAxIH0sIHsgJ3gnOiAzIH1dLCAneCcpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsQWxsQnkoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxBbGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheWAgdG8gYHZhbHVlc2AuIFRoZSBjb21wYXJhdG9yIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VXaXRoYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAzLCAneSc6IDQgfSwgeyAneCc6IDUsICd5JzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8ucHVsbEFsbFdpdGgoYXJyYXksIFt7ICd4JzogMywgJ3knOiA0IH1dLCBfLmlzRXF1YWwpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogNSwgJ3knOiA2IH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbFdpdGgoYXJyYXksIHZhbHVlcywgY29tcGFyYXRvcikge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgdW5kZWZpbmVkLCBjb21wYXJhdG9yKVxuICAgICAgICA6IGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgZWxlbWVudHMgZnJvbSBgYXJyYXlgIGNvcnJlc3BvbmRpbmcgdG8gYGluZGV4ZXNgIGFuZCByZXR1cm5zIGFuXG4gICAgICogYXJyYXkgb2YgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uYXRgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7Li4uKG51bWJlcnxudW1iZXJbXSl9IFtpbmRleGVzXSBUaGUgaW5kZXhlcyBvZiBlbGVtZW50cyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdkJ107XG4gICAgICogdmFyIHB1bGxlZCA9IF8ucHVsbEF0KGFycmF5LCBbMSwgM10pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYScsICdjJ11cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKHB1bGxlZCk7XG4gICAgICogLy8gPT4gWydiJywgJ2QnXVxuICAgICAqL1xuICAgIHZhciBwdWxsQXQgPSBmbGF0UmVzdChmdW5jdGlvbihhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IGJhc2VBdChhcnJheSwgaW5kZXhlcyk7XG5cbiAgICAgIGJhc2VQdWxsQXQoYXJyYXksIGFycmF5TWFwKGluZGV4ZXMsIGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIHJldHVybiBpc0luZGV4KGluZGV4LCBsZW5ndGgpID8gK2luZGV4IDogaW5kZXg7XG4gICAgICB9KS5zb3J0KGNvbXBhcmVBc2NlbmRpbmcpKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGVsZW1lbnRzIGZyb20gYGFycmF5YCB0aGF0IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvclxuICAgICAqIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHRoZSByZW1vdmVkIGVsZW1lbnRzLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5maWx0ZXJgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuIFVzZSBgXy5wdWxsYFxuICAgICAqIHRvIHB1bGwgZWxlbWVudHMgZnJvbSBhbiBhcnJheSBieSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzLCA0XTtcbiAgICAgKiB2YXIgZXZlbnMgPSBfLnJlbW92ZShhcnJheSwgZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDNdXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhldmVucyk7XG4gICAgICogLy8gPT4gWzIsIDRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVtb3ZlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluZGV4ZXMgPSBbXSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHByZWRpY2F0ZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgaW5kZXhlcy5wdXNoKGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYmFzZVB1bGxBdChhcnJheSwgaW5kZXhlcyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmVyc2VzIGBhcnJheWAgc28gdGhhdCB0aGUgZmlyc3QgZWxlbWVudCBiZWNvbWVzIHRoZSBsYXN0LCB0aGUgc2Vjb25kXG4gICAgICogZWxlbWVudCBiZWNvbWVzIHRoZSBzZWNvbmQgdG8gbGFzdCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YCBhbmQgaXMgYmFzZWQgb25cbiAgICAgKiBbYEFycmF5I3JldmVyc2VgXShodHRwczovL21kbi5pby9BcnJheS9yZXZlcnNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8ucmV2ZXJzZShhcnJheSk7XG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmV2ZXJzZShhcnJheSkge1xuICAgICAgcmV0dXJuIGFycmF5ID09IG51bGwgPyBhcnJheSA6IG5hdGl2ZVJldmVyc2UuY2FsbChhcnJheSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZnJvbSBgc3RhcnRgIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgdXNlZCBpbnN0ZWFkIG9mXG4gICAgICogW2BBcnJheSNzbGljZWBdKGh0dHBzOi8vbWRuLmlvL0FycmF5L3NsaWNlKSB0byBlbnN1cmUgZGVuc2UgYXJyYXlzIGFyZVxuICAgICAqIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQgJiYgdHlwZW9mIGVuZCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgc3RhcnQsIGVuZCkpIHtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICBlbmQgPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc3RhcnQgPSBzdGFydCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9JbnRlZ2VyKGVuZCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VzIGEgYmluYXJ5IHNlYXJjaCB0byBkZXRlcm1pbmUgdGhlIGxvd2VzdCBpbmRleCBhdCB3aGljaCBgdmFsdWVgXG4gICAgICogc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0byBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXgoWzMwLCA1MF0sIDQwKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRJbmRleGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZSB0aGVpclxuICAgICAqIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDQgfSwgeyAneCc6IDUgfV07XG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgZnVuY3Rpb24obykgeyByZXR1cm4gby54OyB9KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvcnRlZEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgJ3gnKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgcGVyZm9ybXMgYSBiaW5hcnlcbiAgICAgKiBzZWFyY2ggb24gYSBzb3J0ZWQgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleE9mKFs0LCA1LCA1LCA1LCA2XSwgNSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpO1xuICAgICAgICBpZiAoaW5kZXggPCBsZW5ndGggJiYgZXEoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZEluZGV4YCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBoaWdoZXN0XG4gICAgICogaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvXG4gICAgICogbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleChbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXgoYXJyYXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRMYXN0SW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGUgdGhlaXJcbiAgICAgKiBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiA0IH0sIHsgJ3gnOiA1IH1dO1xuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCBmdW5jdGlvbihvKSB7IHJldHVybiBvLng7IH0pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgJ3gnKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmxhc3RJbmRleE9mYCBleGNlcHQgdGhhdCBpdCBwZXJmb3JtcyBhIGJpbmFyeVxuICAgICAqIHNlYXJjaCBvbiBhIHNvcnRlZCBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleE9mKFs0LCA1LCA1LCA1LCA2XSwgNSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICB2YXIgaW5kZXggPSBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCB0cnVlKSAtIDE7XG4gICAgICAgIGlmIChlcShhcnJheVtpbmRleF0sIHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQncyBkZXNpZ25lZCBhbmQgb3B0aW1pemVkXG4gICAgICogZm9yIHNvcnRlZCBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRVbmlxKFsxLCAxLCAyXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkVW5pcShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVNvcnRlZFVuaXEoYXJyYXkpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxQnlgIGV4Y2VwdCB0aGF0IGl0J3MgZGVzaWduZWQgYW5kIG9wdGltaXplZFxuICAgICAqIGZvciBzb3J0ZWQgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRVbmlxQnkoWzEuMSwgMS4yLCAyLjMsIDIuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsxLjEsIDIuM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRVbmlxQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU29ydGVkVW5pcShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIGJ1dCB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWlsKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFpbChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VTbGljZShhcnJheSwgMSwgbGVuZ3RoKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byB0YWtlLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2UoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCAwLCBuIDwgMCA/IDAgOiBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBlbmQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gdGFrZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VSaWdodChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICBuID0gbGVuZ3RoIC0gbjtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIG4gPCAwID8gMCA6IG4sIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBlbmQuIEVsZW1lbnRzIGFyZVxuICAgICAqIHRha2VuIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVJpZ2h0V2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBmYWxzZSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGJlZ2lubmluZy4gRWxlbWVudHNcbiAgICAgKiBhcmUgdGFrZW4gdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlV2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcywgaW4gb3JkZXIsIGZyb20gYWxsIGdpdmVuIGFycmF5cyB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlvbihbMl0sIFsxLCAyXSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgdmFyIHVuaW9uID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSkpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieVxuICAgICAqIHdoaWNoIHVuaXF1ZW5lc3MgaXMgY29tcHV0ZWQuIFJlc3VsdCB2YWx1ZXMgYXJlIGNob3NlbiBmcm9tIHRoZSBmaXJzdFxuICAgICAqIGFycmF5IGluIHdoaWNoIHRoZSB2YWx1ZSBvY2N1cnMuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlvbkJ5KFsyLjFdLCBbMS4yLCAyLjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMi4xLCAxLjJdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnVuaW9uQnkoW3sgJ3gnOiAxIH1dLCBbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgdmFyIHVuaW9uQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gUmVzdWx0IHZhbHVlcyBhcmUgY2hvc2VuIGZyb21cbiAgICAgKiB0aGUgZmlyc3QgYXJyYXkgaW4gd2hpY2ggdGhlIHZhbHVlIG9jY3Vycy4gVGhlIGNvbXBhcmF0b3IgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8udW5pb25XaXRoKG9iamVjdHMsIG90aGVycywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgdW5pb25XaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkdXBsaWNhdGUtZnJlZSB2ZXJzaW9uIG9mIGFuIGFycmF5LCB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpbiB3aGljaCBvbmx5IHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGVhY2ggZWxlbWVudFxuICAgICAqIGlzIGtlcHQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXJcbiAgICAgKiBpbiB0aGUgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlxKFsyLCAxLCAyXSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXkpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5IHdoaWNoXG4gICAgICogdW5pcXVlbmVzcyBpcyBjb21wdXRlZC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGVcbiAgICAgKiBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlxQnkoWzIuMSwgMS4yLCAyLjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMi4xLCAxLjJdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnVuaXFCeShbeyAneCc6IDEgfSwgeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheWAuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXkuVGhlIGNvbXBhcmF0b3IgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8udW5pcVdpdGgob2JqZWN0cywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcVdpdGgoYXJyYXksIGNvbXBhcmF0b3IpIHtcbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5LCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYW4gYXJyYXkgb2YgZ3JvdXBlZFxuICAgICAqIGVsZW1lbnRzIGFuZCBjcmVhdGVzIGFuIGFycmF5IHJlZ3JvdXBpbmcgdGhlIGVsZW1lbnRzIHRvIHRoZWlyIHByZS16aXBcbiAgICAgKiBjb25maWd1cmF0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMi4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZWdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB6aXBwZWQgPSBfLnppcChbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxLCB0cnVlXSwgWydiJywgMiwgZmFsc2VdXVxuICAgICAqXG4gICAgICogXy51bnppcCh6aXBwZWQpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW56aXAoYXJyYXkpIHtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IDA7XG4gICAgICBhcnJheSA9IGFycmF5RmlsdGVyKGFycmF5LCBmdW5jdGlvbihncm91cCkge1xuICAgICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoZ3JvdXApKSB7XG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGdyb3VwLmxlbmd0aCwgbGVuZ3RoKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gYmFzZVRpbWVzKGxlbmd0aCwgZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKGFycmF5LCBiYXNlUHJvcGVydHkoaW5kZXgpKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB0byBzcGVjaWZ5XG4gICAgICogaG93IHJlZ3JvdXBlZCB2YWx1ZXMgc2hvdWxkIGJlIGNvbWJpbmVkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRoZVxuICAgICAqIGVsZW1lbnRzIG9mIGVhY2ggZ3JvdXA6ICguLi5ncm91cCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy44LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cyB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gdG8gY29tYmluZVxuICAgICAqICByZWdyb3VwZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHppcHBlZCA9IF8uemlwKFsxLCAyXSwgWzEwLCAyMF0sIFsxMDAsIDIwMF0pO1xuICAgICAqIC8vID0+IFtbMSwgMTAsIDEwMF0sIFsyLCAyMCwgMjAwXV1cbiAgICAgKlxuICAgICAqIF8udW56aXBXaXRoKHppcHBlZCwgXy5hZGQpO1xuICAgICAqIC8vID0+IFszLCAzMCwgMzAwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuemlwV2l0aChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHVuemlwKGFycmF5KTtcbiAgICAgIGlmIChpdGVyYXRlZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlNYXAocmVzdWx0LCBmdW5jdGlvbihncm91cCkge1xuICAgICAgICByZXR1cm4gYXBwbHkoaXRlcmF0ZWUsIHVuZGVmaW5lZCwgZ3JvdXApO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBleGNsdWRpbmcgYWxsIGdpdmVuIHZhbHVlcyB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8uZGlmZmVyZW5jZSwgXy54b3JcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy53aXRob3V0KFsyLCAxLCAyLCAzXSwgMSwgMik7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICovXG4gICAgdmFyIHdpdGhvdXQgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIHZhbHVlcylcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcyB0aGF0IGlzIHRoZVxuICAgICAqIFtzeW1tZXRyaWMgZGlmZmVyZW5jZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3ltbWV0cmljX2RpZmZlcmVuY2UpXG4gICAgICogb2YgdGhlIGdpdmVuIGFycmF5cy4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXJcbiAgICAgKiB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBzZWUgXy5kaWZmZXJlbmNlLCBfLndpdGhvdXRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy54b3IoWzIsIDFdLCBbMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAzXVxuICAgICAqL1xuICAgIHZhciB4b3IgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHJldHVybiBiYXNlWG9yKGFycmF5RmlsdGVyKGFycmF5cywgaXNBcnJheUxpa2VPYmplY3QpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ueG9yYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgZWFjaCBgYXJyYXlzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5XG4gICAgICogd2hpY2ggYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZFxuICAgICAqIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lXG4gICAgICogYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy54b3JCeShbMi4xLCAxLjJdLCBbMi4zLCAzLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4yLCAzLjRdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnhvckJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciB4b3JCeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGl0ZXJhdGVlKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlWG9yKGFycmF5RmlsdGVyKGFycmF5cywgaXNBcnJheUxpa2VPYmplY3QpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy54b3JgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpc1xuICAgICAqIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5cy4gVGhlIGNvbXBhcmF0b3IgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8ueG9yV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciB4b3JXaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlWG9yKGFycmF5RmlsdGVyKGFycmF5cywgaXNBcnJheUxpa2VPYmplY3QpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLCB0aGUgZmlyc3Qgb2Ygd2hpY2ggY29udGFpbnMgdGhlXG4gICAgICogZmlyc3QgZWxlbWVudHMgb2YgdGhlIGdpdmVuIGFycmF5cywgdGhlIHNlY29uZCBvZiB3aGljaCBjb250YWlucyB0aGVcbiAgICAgKiBzZWNvbmQgZWxlbWVudHMgb2YgdGhlIGdpdmVuIGFycmF5cywgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwKFsnYScsICdiJ10sIFsxLCAyXSwgW3RydWUsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gW1snYScsIDEsIHRydWVdLCBbJ2InLCAyLCBmYWxzZV1dXG4gICAgICovXG4gICAgdmFyIHppcCA9IGJhc2VSZXN0KHVuemlwKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZnJvbVBhaXJzYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIHR3byBhcnJheXMsXG4gICAgICogb25lIG9mIHByb3BlcnR5IGlkZW50aWZpZXJzIGFuZCBvbmUgb2YgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcHM9W11dIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzPVtdXSBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwT2JqZWN0KFsnYScsICdiJ10sIFsxLCAyXSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gemlwT2JqZWN0KHByb3BzLCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBiYXNlWmlwT2JqZWN0KHByb3BzIHx8IFtdLCB2YWx1ZXMgfHwgW10sIGFzc2lnblZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnppcE9iamVjdGAgZXhjZXB0IHRoYXQgaXQgc3VwcG9ydHMgcHJvcGVydHkgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcHM9W11dIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzPVtdXSBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwT2JqZWN0RGVlcChbJ2EuYlswXS5jJywgJ2EuYlsxXS5kJ10sIFsxLCAyXSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2InOiBbeyAnYyc6IDEgfSwgeyAnZCc6IDIgfV0gfSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gemlwT2JqZWN0RGVlcChwcm9wcywgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gYmFzZVppcE9iamVjdChwcm9wcyB8fCBbXSwgdmFsdWVzIHx8IFtdLCBiYXNlU2V0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHRvIHNwZWNpZnlcbiAgICAgKiBob3cgZ3JvdXBlZCB2YWx1ZXMgc2hvdWxkIGJlIGNvbWJpbmVkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRoZVxuICAgICAqIGVsZW1lbnRzIG9mIGVhY2ggZ3JvdXA6ICguLi5ncm91cCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy44LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lXG4gICAgICogIGdyb3VwZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwV2l0aChbMSwgMl0sIFsxMCwgMjBdLCBbMTAwLCAyMDBdLCBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gYSArIGIgKyBjO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IFsxMTEsIDIyMl1cbiAgICAgKi9cbiAgICB2YXIgemlwV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5cy5sZW5ndGgsXG4gICAgICAgICAgaXRlcmF0ZWUgPSBsZW5ndGggPiAxID8gYXJyYXlzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xuXG4gICAgICBpdGVyYXRlZSA9IHR5cGVvZiBpdGVyYXRlZSA9PSAnZnVuY3Rpb24nID8gKGFycmF5cy5wb3AoKSwgaXRlcmF0ZWUpIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIHVuemlwV2l0aChhcnJheXMsIGl0ZXJhdGVlKTtcbiAgICB9KTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlIHRoYXQgd3JhcHMgYHZhbHVlYCB3aXRoIGV4cGxpY2l0IG1ldGhvZFxuICAgICAqIGNoYWluIHNlcXVlbmNlcyBlbmFibGVkLiBUaGUgcmVzdWx0IG9mIHN1Y2ggc2VxdWVuY2VzIG11c3QgYmUgdW53cmFwcGVkXG4gICAgICogd2l0aCBgXyN2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogdmFyIHlvdW5nZXN0ID0gX1xuICAgICAqICAgLmNoYWluKHVzZXJzKVxuICAgICAqICAgLnNvcnRCeSgnYWdlJylcbiAgICAgKiAgIC5tYXAoZnVuY3Rpb24obykge1xuICAgICAqICAgICByZXR1cm4gby51c2VyICsgJyBpcyAnICsgby5hZ2U7XG4gICAgICogICB9KVxuICAgICAqICAgLmhlYWQoKVxuICAgICAqICAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMgaXMgMSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjaGFpbih2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaCh2YWx1ZSk7XG4gICAgICByZXN1bHQuX19jaGFpbl9fID0gdHJ1ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaW52b2tlcyBgaW50ZXJjZXB0b3JgIGFuZCByZXR1cm5zIGB2YWx1ZWAuIFRoZSBpbnRlcmNlcHRvclxuICAgICAqIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7ICh2YWx1ZSkuIFRoZSBwdXJwb3NlIG9mIHRoaXMgbWV0aG9kIGlzIHRvXG4gICAgICogXCJ0YXAgaW50b1wiIGEgbWV0aG9kIGNoYWluIHNlcXVlbmNlIGluIG9yZGVyIHRvIG1vZGlmeSBpbnRlcm1lZGlhdGUgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm92aWRlIHRvIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaW50ZXJjZXB0b3IgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKFsxLCAyLCAzXSlcbiAgICAgKiAgLnRhcChmdW5jdGlvbihhcnJheSkge1xuICAgICAqICAgIC8vIE11dGF0ZSBpbnB1dCBhcnJheS5cbiAgICAgKiAgICBhcnJheS5wb3AoKTtcbiAgICAgKiAgfSlcbiAgICAgKiAgLnJldmVyc2UoKVxuICAgICAqICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YXAodmFsdWUsIGludGVyY2VwdG9yKSB7XG4gICAgICBpbnRlcmNlcHRvcih2YWx1ZSk7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy50YXBgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIHJlc3VsdCBvZiBgaW50ZXJjZXB0b3JgLlxuICAgICAqIFRoZSBwdXJwb3NlIG9mIHRoaXMgbWV0aG9kIGlzIHRvIFwicGFzcyB0aHJ1XCIgdmFsdWVzIHJlcGxhY2luZyBpbnRlcm1lZGlhdGVcbiAgICAgKiByZXN1bHRzIGluIGEgbWV0aG9kIGNoYWluIHNlcXVlbmNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb3ZpZGUgdG8gYGludGVyY2VwdG9yYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbnRlcmNlcHRvciBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGludGVyY2VwdG9yYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXygnICBhYmMgICcpXG4gICAgICogIC5jaGFpbigpXG4gICAgICogIC50cmltKClcbiAgICAgKiAgLnRocnUoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgICByZXR1cm4gW3ZhbHVlXTtcbiAgICAgKiAgfSlcbiAgICAgKiAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWydhYmMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocnUodmFsdWUsIGludGVyY2VwdG9yKSB7XG4gICAgICByZXR1cm4gaW50ZXJjZXB0b3IodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHRoZSB3cmFwcGVyIHZlcnNpb24gb2YgYF8uYXRgLlxuICAgICAqXG4gICAgICogQG5hbWUgYXRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9LCA0XSB9O1xuICAgICAqXG4gICAgICogXyhvYmplY3QpLmF0KFsnYVswXS5iLmMnLCAnYVsxXSddKS52YWx1ZSgpO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqL1xuICAgIHZhciB3cmFwcGVyQXQgPSBmbGF0UmVzdChmdW5jdGlvbihwYXRocykge1xuICAgICAgdmFyIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICBzdGFydCA9IGxlbmd0aCA/IHBhdGhzWzBdIDogMCxcbiAgICAgICAgICB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX18sXG4gICAgICAgICAgaW50ZXJjZXB0b3IgPSBmdW5jdGlvbihvYmplY3QpIHsgcmV0dXJuIGJhc2VBdChvYmplY3QsIHBhdGhzKTsgfTtcblxuICAgICAgaWYgKGxlbmd0aCA+IDEgfHwgdGhpcy5fX2FjdGlvbnNfXy5sZW5ndGggfHxcbiAgICAgICAgICAhKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHx8ICFpc0luZGV4KHN0YXJ0KSkge1xuICAgICAgICByZXR1cm4gdGhpcy50aHJ1KGludGVyY2VwdG9yKTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2Uoc3RhcnQsICtzdGFydCArIChsZW5ndGggPyAxIDogMCkpO1xuICAgICAgdmFsdWUuX19hY3Rpb25zX18ucHVzaCh7XG4gICAgICAgICdmdW5jJzogdGhydSxcbiAgICAgICAgJ2FyZ3MnOiBbaW50ZXJjZXB0b3JdLFxuICAgICAgICAndGhpc0FyZyc6IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodmFsdWUsIHRoaXMuX19jaGFpbl9fKS50aHJ1KGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICAgIGlmIChsZW5ndGggJiYgIWFycmF5Lmxlbmd0aCkge1xuICAgICAgICAgIGFycmF5LnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlIHdpdGggZXhwbGljaXQgbWV0aG9kIGNoYWluIHNlcXVlbmNlcyBlbmFibGVkLlxuICAgICAqXG4gICAgICogQG5hbWUgY2hhaW5cbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gQSBzZXF1ZW5jZSB3aXRob3V0IGV4cGxpY2l0IGNoYWluaW5nLlxuICAgICAqIF8odXNlcnMpLmhlYWQoKTtcbiAgICAgKiAvLyA9PiB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9XG4gICAgICpcbiAgICAgKiAvLyBBIHNlcXVlbmNlIHdpdGggZXhwbGljaXQgY2hhaW5pbmcuXG4gICAgICogXyh1c2VycylcbiAgICAgKiAgIC5jaGFpbigpXG4gICAgICogICAuaGVhZCgpXG4gICAgICogICAucGljaygndXNlcicpXG4gICAgICogICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiB7ICd1c2VyJzogJ2Jhcm5leScgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDaGFpbigpIHtcbiAgICAgIHJldHVybiBjaGFpbih0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlcyB0aGUgY2hhaW4gc2VxdWVuY2UgYW5kIHJldHVybnMgdGhlIHdyYXBwZWQgcmVzdWx0LlxuICAgICAqXG4gICAgICogQG5hbWUgY29tbWl0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyXTtcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oYXJyYXkpLnB1c2goMyk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiB3cmFwcGVkID0gd3JhcHBlZC5jb21taXQoKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiB3cmFwcGVkLmxhc3QoKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlckNvbW1pdCgpIHtcbiAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih0aGlzLnZhbHVlKCksIHRoaXMuX19jaGFpbl9fKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuZXh0IHZhbHVlIG9uIGEgd3JhcHBlZCBvYmplY3QgZm9sbG93aW5nIHRoZVxuICAgICAqIFtpdGVyYXRvciBwcm90b2NvbF0oaHR0cHM6Ly9tZG4uaW8vaXRlcmF0aW9uX3Byb3RvY29scyNpdGVyYXRvcikuXG4gICAgICpcbiAgICAgKiBAbmFtZSBuZXh0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV4dCBpdGVyYXRvciB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyXSk7XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogZmFsc2UsICd2YWx1ZSc6IDEgfVxuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IGZhbHNlLCAndmFsdWUnOiAyIH1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiB0cnVlLCAndmFsdWUnOiB1bmRlZmluZWQgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJOZXh0KCkge1xuICAgICAgaWYgKHRoaXMuX192YWx1ZXNfXyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX192YWx1ZXNfXyA9IHRvQXJyYXkodGhpcy52YWx1ZSgpKTtcbiAgICAgIH1cbiAgICAgIHZhciBkb25lID0gdGhpcy5fX2luZGV4X18gPj0gdGhpcy5fX3ZhbHVlc19fLmxlbmd0aCxcbiAgICAgICAgICB2YWx1ZSA9IGRvbmUgPyB1bmRlZmluZWQgOiB0aGlzLl9fdmFsdWVzX19bdGhpcy5fX2luZGV4X18rK107XG5cbiAgICAgIHJldHVybiB7ICdkb25lJzogZG9uZSwgJ3ZhbHVlJzogdmFsdWUgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbmFibGVzIHRoZSB3cmFwcGVyIHRvIGJlIGl0ZXJhYmxlLlxuICAgICAqXG4gICAgICogQG5hbWUgU3ltYm9sLml0ZXJhdG9yXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgd3JhcHBlciBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pO1xuICAgICAqXG4gICAgICogd3JhcHBlZFtTeW1ib2wuaXRlcmF0b3JdKCkgPT09IHdyYXBwZWQ7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogQXJyYXkuZnJvbSh3cmFwcGVkKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyVG9JdGVyYXRvcigpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgY2hhaW4gc2VxdWVuY2UgcGxhbnRpbmcgYHZhbHVlYCBhcyB0aGUgd3JhcHBlZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHBsYW50XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGxhbnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyXSkubWFwKHNxdWFyZSk7XG4gICAgICogdmFyIG90aGVyID0gd3JhcHBlZC5wbGFudChbMywgNF0pO1xuICAgICAqXG4gICAgICogb3RoZXIudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbOSwgMTZdXG4gICAgICpcbiAgICAgKiB3cmFwcGVkLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzEsIDRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclBsYW50KHZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0LFxuICAgICAgICAgIHBhcmVudCA9IHRoaXM7XG5cbiAgICAgIHdoaWxlIChwYXJlbnQgaW5zdGFuY2VvZiBiYXNlTG9kYXNoKSB7XG4gICAgICAgIHZhciBjbG9uZSA9IHdyYXBwZXJDbG9uZShwYXJlbnQpO1xuICAgICAgICBjbG9uZS5fX2luZGV4X18gPSAwO1xuICAgICAgICBjbG9uZS5fX3ZhbHVlc19fID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgcHJldmlvdXMuX193cmFwcGVkX18gPSBjbG9uZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQgPSBjbG9uZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJldmlvdXMgPSBjbG9uZTtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50Ll9fd3JhcHBlZF9fO1xuICAgICAgfVxuICAgICAgcHJldmlvdXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgdGhlIHdyYXBwZXIgdmVyc2lvbiBvZiBgXy5yZXZlcnNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIHRoZSB3cmFwcGVkIGFycmF5LlxuICAgICAqXG4gICAgICogQG5hbWUgcmV2ZXJzZVxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfKGFycmF5KS5yZXZlcnNlKCkudmFsdWUoKVxuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJSZXZlcnNlKCkge1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXztcbiAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHZhciB3cmFwcGVkID0gdmFsdWU7XG4gICAgICAgIGlmICh0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCkge1xuICAgICAgICAgIHdyYXBwZWQgPSBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgd3JhcHBlZCA9IHdyYXBwZWQucmV2ZXJzZSgpO1xuICAgICAgICB3cmFwcGVkLl9fYWN0aW9uc19fLnB1c2goe1xuICAgICAgICAgICdmdW5jJzogdGhydSxcbiAgICAgICAgICAnYXJncyc6IFtyZXZlcnNlXSxcbiAgICAgICAgICAndGhpc0FyZyc6IHVuZGVmaW5lZFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHdyYXBwZWQsIHRoaXMuX19jaGFpbl9fKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnRocnUocmV2ZXJzZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGNoYWluIHNlcXVlbmNlIHRvIHJlc29sdmUgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHZhbHVlXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgdG9KU09OLCB2YWx1ZU9mXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oWzEsIDIsIDNdKS52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJWYWx1ZSgpIHtcbiAgICAgIHJldHVybiBiYXNlV3JhcHBlclZhbHVlKHRoaXMuX193cmFwcGVkX18sIHRoaXMuX19hY3Rpb25zX18pO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZSBvZlxuICAgICAqIGVhY2gga2V5IGlzIHRoZSBudW1iZXIgb2YgdGltZXMgdGhlIGtleSB3YXMgcmV0dXJuZWQgYnkgYGl0ZXJhdGVlYC4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jb3VudEJ5KFs2LjEsIDQuMiwgNi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4geyAnNCc6IDEsICc2JzogMiB9XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmNvdW50QnkoWydvbmUnLCAndHdvJywgJ3RocmVlJ10sICdsZW5ndGgnKTtcbiAgICAgKiAvLyA9PiB7ICczJzogMiwgJzUnOiAxIH1cbiAgICAgKi9cbiAgICB2YXIgY291bnRCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIGtleSkpIHtcbiAgICAgICAgKytyZXN1bHRba2V5XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgMSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yICoqYWxsKiogZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqIEl0ZXJhdGlvbiBpcyBzdG9wcGVkIG9uY2UgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgcmV0dXJucyBgdHJ1ZWAgZm9yXG4gICAgICogW2VtcHR5IGNvbGxlY3Rpb25zXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FbXB0eV9zZXQpIGJlY2F1c2VcbiAgICAgKiBbZXZlcnl0aGluZyBpcyB0cnVlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9WYWN1b3VzX3RydXRoKSBvZlxuICAgICAqIGVsZW1lbnRzIG9mIGVtcHR5IGNvbGxlY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ldmVyeShbdHJ1ZSwgMSwgbnVsbCwgJ3llcyddLCBCb29sZWFuKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXZlcnkoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFdmVyeSA6IGJhc2VFdmVyeTtcbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSkge1xuICAgICAgICBwcmVkaWNhdGUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIGFuIGFycmF5IG9mIGFsbCBlbGVtZW50c1xuICAgICAqIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucmVtb3ZlYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICAgKiBAc2VlIF8ucmVqZWN0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gQ29tYmluaW5nIHNldmVyYWwgcHJlZGljYXRlcyB1c2luZyBgXy5vdmVyRXZlcnlgIG9yIGBfLm92ZXJTb21lYC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5vdmVyU29tZShbeyAnYWdlJzogMzYgfSwgWydhZ2UnLCA0MF1dKSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ2Jhcm5leSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmlsdGVyKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlGaWx0ZXIgOiBiYXNlRmlsdGVyO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAsIHJldHVybmluZyB0aGUgZmlyc3QgZWxlbWVudFxuICAgICAqIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAncGViYmxlcydcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAnYmFybmV5J1xuICAgICAqL1xuICAgIHZhciBmaW5kID0gY3JlYXRlRmluZChmaW5kSW5kZXgpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9Y29sbGVjdGlvbi5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3QoWzEsIDIsIDMsIDRdLCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgdmFyIGZpbmRMYXN0ID0gY3JlYXRlRmluZChmaW5kTGFzdEluZGV4KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmbGF0dGVuZWQgYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYFxuICAgICAqIHRocnUgYGl0ZXJhdGVlYCBhbmQgZmxhdHRlbmluZyB0aGUgbWFwcGVkIHJlc3VsdHMuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbbiwgbl07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwKFsxLCAyXSwgZHVwbGljYXRlKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMiwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbGF0TWFwYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBmbGF0dGVucyB0aGVcbiAgICAgKiBtYXBwZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbW1tuLCBuXV1dO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmxhdE1hcERlZXAoWzEsIDJdLCBkdXBsaWNhdGUpO1xuICAgICAqIC8vID0+IFsxLCAxLCAyLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXBEZWVwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgSU5GSU5JVFkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmxhdE1hcGAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgZmxhdHRlbnMgdGhlXG4gICAgICogbWFwcGVkIHJlc3VsdHMgdXAgdG8gYGRlcHRoYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVwdGg9MV0gVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbW1tuLCBuXV1dO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmxhdE1hcERlcHRoKFsxLCAyXSwgZHVwbGljYXRlLCAyKTtcbiAgICAgKiAvLyA9PiBbWzEsIDFdLCBbMiwgMl1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcERlcHRoKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBkZXB0aCkge1xuICAgICAgZGVwdGggPSBkZXB0aCA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlcihkZXB0aCk7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgZGVwdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggZWxlbWVudC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBBcyB3aXRoIG90aGVyIFwiQ29sbGVjdGlvbnNcIiBtZXRob2RzLCBvYmplY3RzIHdpdGggYSBcImxlbmd0aFwiXG4gICAgICogcHJvcGVydHkgYXJlIGl0ZXJhdGVkIGxpa2UgYXJyYXlzLiBUbyBhdm9pZCB0aGlzIGJlaGF2aW9yIHVzZSBgXy5mb3JJbmBcbiAgICAgKiBvciBgXy5mb3JPd25gIGZvciBvYmplY3QgaXRlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIGVhY2hcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBAc2VlIF8uZm9yRWFjaFJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaChbMSwgMl0sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyBgMWAgdGhlbiBgMmAuXG4gICAgICpcbiAgICAgKiBfLmZvckVhY2goeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnIHRoZW4gJ2InIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2goY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RWFjaCA6IGJhc2VFYWNoO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvckVhY2hgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGFsaWFzIGVhY2hSaWdodFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqIEBzZWUgXy5mb3JFYWNoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaFJpZ2h0KFsxLCAyXSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzIGAyYCB0aGVuIGAxYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JFYWNoUmlnaHQoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RWFjaFJpZ2h0IDogYmFzZUVhY2hSaWdodDtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBvcmRlciBvZiBncm91cGVkIHZhbHVlc1xuICAgICAqIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gYGNvbGxlY3Rpb25gLiBUaGUgY29ycmVzcG9uZGluZ1xuICAgICAqIHZhbHVlIG9mIGVhY2gga2V5IGlzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZVxuICAgICAqIGtleS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3JvdXBCeShbNi4xLCA0LjIsIDYuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IHsgJzQnOiBbNC4yXSwgJzYnOiBbNi4xLCA2LjNdIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZ3JvdXBCeShbJ29uZScsICd0d28nLCAndGhyZWUnXSwgJ2xlbmd0aCcpO1xuICAgICAqIC8vID0+IHsgJzMnOiBbJ29uZScsICd0d28nXSwgJzUnOiBbJ3RocmVlJ10gfVxuICAgICAqL1xuICAgIHZhciBncm91cEJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwga2V5KSkge1xuICAgICAgICByZXN1bHRba2V5XS5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgW3ZhbHVlXSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiBgY29sbGVjdGlvbmAuIElmIGBjb2xsZWN0aW9uYCBpcyBhIHN0cmluZywgaXQnc1xuICAgICAqIGNoZWNrZWQgZm9yIGEgc3Vic3RyaW5nIG9mIGB2YWx1ZWAsIG90aGVyd2lzZVxuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogaXMgdXNlZCBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCdzIHVzZWQgYXNcbiAgICAgKiB0aGUgb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLnJlZHVjZWAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyhbMSwgMiwgM10sIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoWzEsIDIsIDNdLCAxLCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyh7ICdhJzogMSwgJ2InOiAyIH0sIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoJ2FiY2QnLCAnYmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5jbHVkZXMoY29sbGVjdGlvbiwgdmFsdWUsIGZyb21JbmRleCwgZ3VhcmQpIHtcbiAgICAgIGNvbGxlY3Rpb24gPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IGNvbGxlY3Rpb24gOiB2YWx1ZXMoY29sbGVjdGlvbik7XG4gICAgICBmcm9tSW5kZXggPSAoZnJvbUluZGV4ICYmICFndWFyZCkgPyB0b0ludGVnZXIoZnJvbUluZGV4KSA6IDA7XG5cbiAgICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcbiAgICAgIGlmIChmcm9tSW5kZXggPCAwKSB7XG4gICAgICAgIGZyb21JbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBmcm9tSW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzU3RyaW5nKGNvbGxlY3Rpb24pXG4gICAgICAgID8gKGZyb21JbmRleCA8PSBsZW5ndGggJiYgY29sbGVjdGlvbi5pbmRleE9mKHZhbHVlLCBmcm9tSW5kZXgpID4gLTEpXG4gICAgICAgIDogKCEhbGVuZ3RoICYmIGJhc2VJbmRleE9mKGNvbGxlY3Rpb24sIHZhbHVlLCBmcm9tSW5kZXgpID4gLTEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nXG4gICAgICogYW4gYXJyYXkgb2YgdGhlIHJlc3VsdHMgb2YgZWFjaCBpbnZva2VkIG1ldGhvZC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzXG4gICAgICogYXJlIHByb3ZpZGVkIHRvIGVhY2ggaW52b2tlZCBtZXRob2QuIElmIGBwYXRoYCBpcyBhIGZ1bmN0aW9uLCBpdCdzIGludm9rZWRcbiAgICAgKiBmb3IsIGFuZCBgdGhpc2AgYm91bmQgdG8sIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZSBvclxuICAgICAqICB0aGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGVhY2ggbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludm9rZU1hcChbWzUsIDEsIDddLCBbMywgMiwgMV1dLCAnc29ydCcpO1xuICAgICAqIC8vID0+IFtbMSwgNSwgN10sIFsxLCAyLCAzXV1cbiAgICAgKlxuICAgICAqIF8uaW52b2tlTWFwKFsxMjMsIDQ1Nl0sIFN0cmluZy5wcm90b3R5cGUuc3BsaXQsICcnKTtcbiAgICAgKiAvLyA9PiBbWycxJywgJzInLCAnMyddLCBbJzQnLCAnNScsICc2J11dXG4gICAgICovXG4gICAgdmFyIGludm9rZU1hcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHBhdGgsIGFyZ3MpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGlzRnVuYyA9IHR5cGVvZiBwYXRoID09ICdmdW5jdGlvbicsXG4gICAgICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmVzdWx0WysraW5kZXhdID0gaXNGdW5jID8gYXBwbHkocGF0aCwgdmFsdWUsIGFyZ3MpIDogYmFzZUludm9rZSh2YWx1ZSwgcGF0aCwgYXJncyk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUgb2ZcbiAgICAgKiBlYWNoIGtleSBpcyB0aGUgbGFzdCBlbGVtZW50IHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZSBrZXkuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFtcbiAgICAgKiAgIHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LFxuICAgICAqICAgeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmtleUJ5KGFycmF5LCBmdW5jdGlvbihvKSB7XG4gICAgICogICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShvLmNvZGUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ2QnOiB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9IH1cbiAgICAgKlxuICAgICAqIF8ua2V5QnkoYXJyYXksICdkaXInKTtcbiAgICAgKiAvLyA9PiB7ICdsZWZ0JzogeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sICdyaWdodCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICAgICAqL1xuICAgIHZhciBrZXlCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIHZhbHVlKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1XG4gICAgICogYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gICAgICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogTWFueSBsb2Rhc2ggbWV0aG9kcyBhcmUgZ3VhcmRlZCB0byB3b3JrIGFzIGl0ZXJhdGVlcyBmb3IgbWV0aG9kcyBsaWtlXG4gICAgICogYF8uZXZlcnlgLCBgXy5maWx0ZXJgLCBgXy5tYXBgLCBgXy5tYXBWYWx1ZXNgLCBgXy5yZWplY3RgLCBhbmQgYF8uc29tZWAuXG4gICAgICpcbiAgICAgKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAgICAgKiBgYXJ5YCwgYGNodW5rYCwgYGN1cnJ5YCwgYGN1cnJ5UmlnaHRgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZXZlcnlgLFxuICAgICAqIGBmaWxsYCwgYGludmVydGAsIGBwYXJzZUludGAsIGByYW5kb21gLCBgcmFuZ2VgLCBgcmFuZ2VSaWdodGAsIGByZXBlYXRgLFxuICAgICAqIGBzYW1wbGVTaXplYCwgYHNsaWNlYCwgYHNvbWVgLCBgc29ydEJ5YCwgYHNwbGl0YCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAgICAgKiBgdGVtcGxhdGVgLCBgdHJpbWAsIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGFuZCBgd29yZHNgXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5tYXAoWzQsIDhdLCBzcXVhcmUpO1xuICAgICAqIC8vID0+IFsxNiwgNjRdXG4gICAgICpcbiAgICAgKiBfLm1hcCh7ICdhJzogNCwgJ2InOiA4IH0sIHNxdWFyZSk7XG4gICAgICogLy8gPT4gWzE2LCA2NF0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JyB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJyB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwKHVzZXJzLCAndXNlcicpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlNYXAgOiBiYXNlTWFwO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRCeWAgZXhjZXB0IHRoYXQgaXQgYWxsb3dzIHNwZWNpZnlpbmcgdGhlIHNvcnRcbiAgICAgKiBvcmRlcnMgb2YgdGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LiBJZiBgb3JkZXJzYCBpcyB1bnNwZWNpZmllZCwgYWxsIHZhbHVlc1xuICAgICAqIGFyZSBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyLiBPdGhlcndpc2UsIHNwZWNpZnkgYW4gb3JkZXIgb2YgXCJkZXNjXCIgZm9yXG4gICAgICogZGVzY2VuZGluZyBvciBcImFzY1wiIGZvciBhc2NlbmRpbmcgc29ydCBvcmRlciBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXlbXXxGdW5jdGlvbltdfE9iamVjdFtdfHN0cmluZ1tdfSBbaXRlcmF0ZWVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IFtvcmRlcnNdIFRoZSBzb3J0IG9yZGVycyBvZiBgaXRlcmF0ZWVzYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5yZWR1Y2VgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNvcnRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDggfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM0IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBTb3J0IGJ5IGB1c2VyYCBpbiBhc2NlbmRpbmcgb3JkZXIgYW5kIGJ5IGBhZ2VgIGluIGRlc2NlbmRpbmcgb3JkZXIuXG4gICAgICogXy5vcmRlckJ5KHVzZXJzLCBbJ3VzZXInLCAnYWdlJ10sIFsnYXNjJywgJ2Rlc2MnXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzZdLCBbJ2Jhcm5leScsIDM0XSwgWydmcmVkJywgNDhdLCBbJ2ZyZWQnLCA0MF1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gb3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycywgZ3VhcmQpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKCFpc0FycmF5KGl0ZXJhdGVlcykpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gaXRlcmF0ZWVzID09IG51bGwgPyBbXSA6IFtpdGVyYXRlZXNdO1xuICAgICAgfVxuICAgICAgb3JkZXJzID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBvcmRlcnM7XG4gICAgICBpZiAoIWlzQXJyYXkob3JkZXJzKSkge1xuICAgICAgICBvcmRlcnMgPSBvcmRlcnMgPT0gbnVsbCA/IFtdIDogW29yZGVyc107XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgc3BsaXQgaW50byB0d28gZ3JvdXBzLCB0aGUgZmlyc3Qgb2Ygd2hpY2hcbiAgICAgKiBjb250YWlucyBlbGVtZW50cyBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IsIHRoZSBzZWNvbmQgb2Ygd2hpY2hcbiAgICAgKiBjb250YWlucyBlbGVtZW50cyBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleSBmb3IuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydmcmVkJ10sIFsnYmFybmV5JywgJ3BlYmJsZXMnXV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsIHsgJ2FnZSc6IDEsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydwZWJibGVzJ10sIFsnYmFybmV5JywgJ2ZyZWQnXV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsICdwZWJibGVzJ10sIFsnZnJlZCddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydmcmVkJ10sIFsnYmFybmV5JywgJ3BlYmJsZXMnXV1cbiAgICAgKi9cbiAgICB2YXIgcGFydGl0aW9uID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIHJlc3VsdFtrZXkgPyAwIDogMV0ucHVzaCh2YWx1ZSk7XG4gICAgfSwgZnVuY3Rpb24oKSB7IHJldHVybiBbW10sIFtdXTsgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZWR1Y2VzIGBjb2xsZWN0aW9uYCB0byBhIHZhbHVlIHdoaWNoIGlzIHRoZSBhY2N1bXVsYXRlZCByZXN1bHQgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAgICAgKiBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLiBJZiBgYWNjdW11bGF0b3JgXG4gICAgICogaXMgbm90IGdpdmVuLCB0aGUgZmlyc3QgZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgaXMgdXNlZCBhcyB0aGUgaW5pdGlhbFxuICAgICAqIHZhbHVlLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOlxuICAgICAqIChhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAgICAgKiBgXy5yZWR1Y2VgLCBgXy5yZWR1Y2VSaWdodGAsIGFuZCBgXy50cmFuc2Zvcm1gLlxuICAgICAqXG4gICAgICogVGhlIGd1YXJkZWQgbWV0aG9kcyBhcmU6XG4gICAgICogYGFzc2lnbmAsIGBkZWZhdWx0c2AsIGBkZWZhdWx0c0RlZXBgLCBgaW5jbHVkZXNgLCBgbWVyZ2VgLCBgb3JkZXJCeWAsXG4gICAgICogYW5kIGBzb3J0QnlgXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5yZWR1Y2VSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlZHVjZShbMSwgMl0sIGZ1bmN0aW9uKHN1bSwgbikge1xuICAgICAqICAgcmV0dXJuIHN1bSArIG47XG4gICAgICogfSwgMCk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5yZWR1Y2UoeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH0sIGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAqICAgKHJlc3VsdFt2YWx1ZV0gfHwgKHJlc3VsdFt2YWx1ZV0gPSBbXSkpLnB1c2goa2V5KTtcbiAgICAgKiAgIHJldHVybiByZXN1bHQ7XG4gICAgICogfSwge30pO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWR1Y2UoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVJlZHVjZSA6IGJhc2VSZWR1Y2UsXG4gICAgICAgICAgaW5pdEFjY3VtID0gYXJndW1lbnRzLmxlbmd0aCA8IDM7XG5cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgYmFzZUVhY2gpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucmVkdWNlYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLnJlZHVjZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbWzAsIDFdLCBbMiwgM10sIFs0LCA1XV07XG4gICAgICpcbiAgICAgKiBfLnJlZHVjZVJpZ2h0KGFycmF5LCBmdW5jdGlvbihmbGF0dGVuZWQsIG90aGVyKSB7XG4gICAgICogICByZXR1cm4gZmxhdHRlbmVkLmNvbmNhdChvdGhlcik7XG4gICAgICogfSwgW10pO1xuICAgICAqIC8vID0+IFs0LCA1LCAyLCAzLCAwLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlSZWR1Y2VSaWdodCA6IGJhc2VSZWR1Y2UsXG4gICAgICAgICAgaW5pdEFjY3VtID0gYXJndW1lbnRzLmxlbmd0aCA8IDM7XG5cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgYmFzZUVhY2hSaWdodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLmZpbHRlcmA7IHRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYFxuICAgICAqIHRoYXQgYHByZWRpY2F0ZWAgZG9lcyAqKm5vdCoqIHJldHVybiB0cnV0aHkgZm9yLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqIEBzZWUgXy5maWx0ZXJcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5yZWplY3QodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVqZWN0KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlGaWx0ZXIgOiBiYXNlRmlsdGVyO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgbmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgcmFuZG9tIGVsZW1lbnQgZnJvbSBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2FtcGxlKFsxLCAyLCAzLCA0XSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhbXBsZShjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNhbXBsZSA6IGJhc2VTYW1wbGU7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGBuYCByYW5kb20gZWxlbWVudHMgYXQgdW5pcXVlIGtleXMgZnJvbSBgY29sbGVjdGlvbmAgdXAgdG8gdGhlXG4gICAgICogc2l6ZSBvZiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zYW1wbGVTaXplKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzMsIDFdXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZVNpemUoWzEsIDIsIDNdLCA0KTtcbiAgICAgKiAvLyA9PiBbMiwgMywgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzYW1wbGVTaXplKGNvbGxlY3Rpb24sIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgbiwgZ3VhcmQpIDogbiA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBuID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICB9XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNhbXBsZVNpemUgOiBiYXNlU2FtcGxlU2l6ZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygc2h1ZmZsZWQgdmFsdWVzLCB1c2luZyBhIHZlcnNpb24gb2YgdGhlXG4gICAgICogW0Zpc2hlci1ZYXRlcyBzaHVmZmxlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GaXNoZXItWWF0ZXNfc2h1ZmZsZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2h1ZmZsZShbMSwgMiwgMywgNF0pO1xuICAgICAqIC8vID0+IFs0LCAxLCAzLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNodWZmbGUoY29sbGVjdGlvbikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTaHVmZmxlIDogYmFzZVNodWZmbGU7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzaXplIG9mIGBjb2xsZWN0aW9uYCBieSByZXR1cm5pbmcgaXRzIGxlbmd0aCBmb3IgYXJyYXktbGlrZVxuICAgICAqIHZhbHVlcyBvciB0aGUgbnVtYmVyIG9mIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIGZvciBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb2xsZWN0aW9uIHNpemUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2l6ZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uc2l6ZSh7ICdhJzogMSwgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIF8uc2l6ZSgncGViYmxlcycpO1xuICAgICAqIC8vID0+IDdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaXplKGNvbGxlY3Rpb24pIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIGlzU3RyaW5nKGNvbGxlY3Rpb24pID8gc3RyaW5nU2l6ZShjb2xsZWN0aW9uKSA6IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyhjb2xsZWN0aW9uKTtcbiAgICAgIGlmICh0YWcgPT0gbWFwVGFnIHx8IHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb24uc2l6ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlS2V5cyhjb2xsZWN0aW9uKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciAqKmFueSoqIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqIEl0ZXJhdGlvbiBpcyBzdG9wcGVkIG9uY2UgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb21lKFtudWxsLCAwLCAneWVzJywgZmFsc2VdLCBCb29sZWFuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29tZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29tZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb21lKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U29tZSA6IGJhc2VTb21lO1xuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpKSB7XG4gICAgICAgIHByZWRpY2F0ZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMsIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIgYnkgdGhlIHJlc3VsdHMgb2ZcbiAgICAgKiBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBhIGNvbGxlY3Rpb24gdGhydSBlYWNoIGl0ZXJhdGVlLiBUaGlzIG1ldGhvZFxuICAgICAqIHBlcmZvcm1zIGEgc3RhYmxlIHNvcnQsIHRoYXQgaXMsIGl0IHByZXNlcnZlcyB0aGUgb3JpZ2luYWwgc29ydCBvcmRlciBvZlxuICAgICAqIGVxdWFsIGVsZW1lbnRzLiBUaGUgaXRlcmF0ZWVzIGFyZSBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0OCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDMwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uc29ydEJ5KHVzZXJzLCBbZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyOyB9XSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzZdLCBbJ2Jhcm5leScsIDM0XSwgWydmcmVkJywgNDhdLCBbJ2ZyZWQnLCAzMF1dXG4gICAgICpcbiAgICAgKiBfLnNvcnRCeSh1c2VycywgWyd1c2VyJywgJ2FnZSddKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNF0sIFsnYmFybmV5JywgMzZdLCBbJ2ZyZWQnLCAzMF0sIFsnZnJlZCcsIDQ4XV1cbiAgICAgKi9cbiAgICB2YXIgc29ydEJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWVzKSB7XG4gICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBpdGVyYXRlZXMubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCA+IDEgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0pKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IFtdO1xuICAgICAgfSBlbHNlIGlmIChsZW5ndGggPiAyICYmIGlzSXRlcmF0ZWVDYWxsKGl0ZXJhdGVlc1swXSwgaXRlcmF0ZWVzWzFdLCBpdGVyYXRlZXNbMl0pKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IFtpdGVyYXRlZXNbMF1dO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGJhc2VGbGF0dGVuKGl0ZXJhdGVlcywgMSksIFtdKTtcbiAgICB9KTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHRpbWVzdGFtcCBvZiB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IGhhdmUgZWxhcHNlZCBzaW5jZVxuICAgICAqIHRoZSBVbml4IGVwb2NoICgxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IERhdGVcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lc3RhbXAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKF8ubm93KCkgLSBzdGFtcCk7XG4gICAgICogfSwgXy5ub3coKSk7XG4gICAgICogLy8gPT4gTG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgaW52b2NhdGlvbi5cbiAgICAgKi9cbiAgICB2YXIgbm93ID0gY3R4Tm93IHx8IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJvb3QuRGF0ZS5ub3coKTtcbiAgICB9O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLmJlZm9yZWA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXNcbiAgICAgKiBgZnVuY2Agb25jZSBpdCdzIGNhbGxlZCBgbmAgb3IgbW9yZSB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgY2FsbHMgYmVmb3JlIGBmdW5jYCBpcyBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzYXZlcyA9IFsncHJvZmlsZScsICdzZXR0aW5ncyddO1xuICAgICAqXG4gICAgICogdmFyIGRvbmUgPSBfLmFmdGVyKHNhdmVzLmxlbmd0aCwgZnVuY3Rpb24oKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnZG9uZSBzYXZpbmchJyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBfLmZvckVhY2goc2F2ZXMsIGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgKiAgIGFzeW5jU2F2ZSh7ICd0eXBlJzogdHlwZSwgJ2NvbXBsZXRlJzogZG9uZSB9KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdkb25lIHNhdmluZyEnIGFmdGVyIHRoZSB0d28gYXN5bmMgc2F2ZXMgaGF2ZSBjb21wbGV0ZWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWZ0ZXIobiwgZnVuYykge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKC0tbiA8IDEpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgLCB3aXRoIHVwIHRvIGBuYCBhcmd1bWVudHMsXG4gICAgICogaWdub3JpbmcgYW55IGFkZGl0aW9uYWwgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgY2FwLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcChbJzYnLCAnOCcsICcxMCddLCBfLmFyeShwYXJzZUludCwgMSkpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnkoZnVuYywgbiwgZ3VhcmQpIHtcbiAgICAgIG4gPSBndWFyZCA/IHVuZGVmaW5lZCA6IG47XG4gICAgICBuID0gKGZ1bmMgJiYgbiA9PSBudWxsKSA/IGZ1bmMubGVuZ3RoIDogbjtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQVJZX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2AsIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHNcbiAgICAgKiBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbiwgd2hpbGUgaXQncyBjYWxsZWQgbGVzcyB0aGFuIGBuYCB0aW1lcy4gU3Vic2VxdWVudFxuICAgICAqIGNhbGxzIHRvIHRoZSBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBjYWxscyBhdCB3aGljaCBgZnVuY2AgaXMgbm8gbG9uZ2VyIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uYmVmb3JlKDUsIGFkZENvbnRhY3RUb0xpc3QpKTtcbiAgICAgKiAvLyA9PiBBbGxvd3MgYWRkaW5nIHVwIHRvIDQgY29udGFjdHMgdG8gdGhlIGxpc3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmVmb3JlKG4sIGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS1uID4gMCkge1xuICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobiA8PSAxKSB7XG4gICAgICAgICAgZnVuYyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2BcbiAgICAgKiBhbmQgYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5iaW5kLnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWMgYnVpbGRzLFxuICAgICAqIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgbmF0aXZlIGBGdW5jdGlvbiNiaW5kYCwgdGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCJcbiAgICAgKiBwcm9wZXJ0eSBvZiBib3VuZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBiaW5kLlxuICAgICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJvdW5kIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgcHVuY3R1YXRpb24pIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICd1c2VyJzogJ2ZyZWQnIH07XG4gICAgICpcbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmQoZ3JlZXQsIG9iamVjdCwgJ2hpJyk7XG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBCb3VuZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmQoZ3JlZXQsIG9iamVjdCwgXywgJyEnKTtcbiAgICAgKiBib3VuZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICovXG4gICAgdmFyIGJpbmQgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCB0aGlzQXJnLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGJpdG1hc2sgPSBXUkFQX0JJTkRfRkxBRztcbiAgICAgIGlmIChwYXJ0aWFscy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKGJpbmQpKTtcbiAgICAgICAgYml0bWFzayB8PSBXUkFQX1BBUlRJQUxfRkxBRztcbiAgICAgIH1cbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIG1ldGhvZCBhdCBgb2JqZWN0W2tleV1gIHdpdGggYHBhcnRpYWxzYFxuICAgICAqIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgZGlmZmVycyBmcm9tIGBfLmJpbmRgIGJ5IGFsbG93aW5nIGJvdW5kIGZ1bmN0aW9ucyB0byByZWZlcmVuY2VcbiAgICAgKiBtZXRob2RzIHRoYXQgbWF5IGJlIHJlZGVmaW5lZCBvciBkb24ndCB5ZXQgZXhpc3QuIFNlZVxuICAgICAqIFtQZXRlciBNaWNoYXV4J3MgYXJ0aWNsZV0oaHR0cDovL3BldGVyLm1pY2hhdXguY2EvYXJ0aWNsZXMvbGF6eS1mdW5jdGlvbi1kZWZpbml0aW9uLXBhdHRlcm4pXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5iaW5kS2V5LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52b2tlIHRoZSBtZXRob2Qgb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7XG4gICAgICogICAndXNlcic6ICdmcmVkJyxcbiAgICAgKiAgICdncmVldCc6IGZ1bmN0aW9uKGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiAgIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kS2V5KG9iamVjdCwgJ2dyZWV0JywgJ2hpJyk7XG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICpcbiAgICAgKiBvYmplY3QuZ3JlZXQgPSBmdW5jdGlvbihncmVldGluZywgcHVuY3R1YXRpb24pIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICd5YSAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIGJvdW5kKCchJyk7XG4gICAgICogLy8gPT4gJ2hpeWEgZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBCb3VuZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmRLZXkob2JqZWN0LCAnZ3JlZXQnLCBfLCAnIScpO1xuICAgICAqIGJvdW5kKCdoaScpO1xuICAgICAqIC8vID0+ICdoaXlhIGZyZWQhJ1xuICAgICAqL1xuICAgIHZhciBiaW5kS2V5ID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBrZXksIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgYml0bWFzayA9IFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHO1xuICAgICAgaWYgKHBhcnRpYWxzLmxlbmd0aCkge1xuICAgICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIoYmluZEtleSkpO1xuICAgICAgICBiaXRtYXNrIHw9IFdSQVBfUEFSVElBTF9GTEFHO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoa2V5LCBiaXRtYXNrLCBvYmplY3QsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgYXJndW1lbnRzIG9mIGBmdW5jYCBhbmQgZWl0aGVyIGludm9rZXNcbiAgICAgKiBgZnVuY2AgcmV0dXJuaW5nIGl0cyByZXN1bHQsIGlmIGF0IGxlYXN0IGBhcml0eWAgbnVtYmVyIG9mIGFyZ3VtZW50cyBoYXZlXG4gICAgICogYmVlbiBwcm92aWRlZCwgb3IgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB0aGUgcmVtYWluaW5nIGBmdW5jYFxuICAgICAqIGFyZ3VtZW50cywgYW5kIHNvIG9uLiBUaGUgYXJpdHkgb2YgYGZ1bmNgIG1heSBiZSBzcGVjaWZpZWQgaWYgYGZ1bmMubGVuZ3RoYFxuICAgICAqIGlzIG5vdCBzdWZmaWNpZW50LlxuICAgICAqXG4gICAgICogVGhlIGBfLmN1cnJ5LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWMgYnVpbGRzLFxuICAgICAqIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBjdXJyaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGN1cnJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHk9ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYWJjID0gZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGN1cnJpZWQgPSBfLmN1cnJ5KGFiYyk7XG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEpKDIpKDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyKSgzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiAvLyBDdXJyaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIGN1cnJpZWQoMSkoXywgMykoMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VycnkoZnVuYywgYXJpdHksIGd1YXJkKSB7XG4gICAgICBhcml0eSA9IGd1YXJkID8gdW5kZWZpbmVkIDogYXJpdHk7XG4gICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0NVUlJZX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSk7XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBjdXJyeS5wbGFjZWhvbGRlcjtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jdXJyeWAgZXhjZXB0IHRoYXQgYXJndW1lbnRzIGFyZSBhcHBsaWVkIHRvIGBmdW5jYFxuICAgICAqIGluIHRoZSBtYW5uZXIgb2YgYF8ucGFydGlhbFJpZ2h0YCBpbnN0ZWFkIG9mIGBfLnBhcnRpYWxgLlxuICAgICAqXG4gICAgICogVGhlIGBfLmN1cnJ5UmlnaHQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGN1cnJpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eT1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhYmMgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgY3VycmllZCA9IF8uY3VycnlSaWdodChhYmMpO1xuICAgICAqXG4gICAgICogY3VycmllZCgzKSgyKSgxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMiwgMykoMSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIsIDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogLy8gQ3VycmllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiBjdXJyaWVkKDMpKDEsIF8pKDIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1cnJ5UmlnaHQoZnVuYywgYXJpdHksIGd1YXJkKSB7XG4gICAgICBhcml0eSA9IGd1YXJkID8gdW5kZWZpbmVkIDogYXJpdHk7XG4gICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSk7XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBjdXJyeVJpZ2h0LnBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHRoYXQgZGVsYXlzIGludm9raW5nIGBmdW5jYCB1bnRpbCBhZnRlciBgd2FpdGBcbiAgICAgKiBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiB3YXNcbiAgICAgKiBpbnZva2VkLiBUaGUgZGVib3VuY2VkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYCBtZXRob2QgdG8gY2FuY2VsXG4gICAgICogZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG8gaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uXG4gICAgICogUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2Agc2hvdWxkIGJlIGludm9rZWQgb24gdGhlXG4gICAgICogbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnRcbiAgICAgKiBjYWxscyB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYFxuICAgICAqIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb25cbiAgICAgKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gICAgICpcbiAgICAgKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAgICAgKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAgICAgKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLmRlYm91bmNlYCBhbmQgYF8udGhyb3R0bGVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz1mYWxzZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhXYWl0XVxuICAgICAqICBUaGUgbWF4aW11bSB0aW1lIGBmdW5jYCBpcyBhbGxvd2VkIHRvIGJlIGRlbGF5ZWQgYmVmb3JlIGl0J3MgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBBdm9pZCBjb3N0bHkgY2FsY3VsYXRpb25zIHdoaWxlIHRoZSB3aW5kb3cgc2l6ZSBpcyBpbiBmbHV4LlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdyZXNpemUnLCBfLmRlYm91bmNlKGNhbGN1bGF0ZUxheW91dCwgMTUwKSk7XG4gICAgICpcbiAgICAgKiAvLyBJbnZva2UgYHNlbmRNYWlsYCB3aGVuIGNsaWNrZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxscy5cbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5kZWJvdW5jZShzZW5kTWFpbCwgMzAwLCB7XG4gICAgICogICAnbGVhZGluZyc6IHRydWUsXG4gICAgICogICAndHJhaWxpbmcnOiBmYWxzZVxuICAgICAqIH0pKTtcbiAgICAgKlxuICAgICAqIC8vIEVuc3VyZSBgYmF0Y2hMb2dgIGlzIGludm9rZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHMuXG4gICAgICogdmFyIGRlYm91bmNlZCA9IF8uZGVib3VuY2UoYmF0Y2hMb2csIDI1MCwgeyAnbWF4V2FpdCc6IDEwMDAgfSk7XG4gICAgICogdmFyIHNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSgnL3N0cmVhbScpO1xuICAgICAqIGpRdWVyeShzb3VyY2UpLm9uKCdtZXNzYWdlJywgZGVib3VuY2VkKTtcbiAgICAgKlxuICAgICAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgZGVib3VuY2VkIGludm9jYXRpb24uXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgZGVib3VuY2VkLmNhbmNlbCk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICAgICAgdmFyIGxhc3RBcmdzLFxuICAgICAgICAgIGxhc3RUaGlzLFxuICAgICAgICAgIG1heFdhaXQsXG4gICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgIHRpbWVySWQsXG4gICAgICAgICAgbGFzdENhbGxUaW1lLFxuICAgICAgICAgIGxhc3RJbnZva2VUaW1lID0gMCxcbiAgICAgICAgICBsZWFkaW5nID0gZmFsc2UsXG4gICAgICAgICAgbWF4aW5nID0gZmFsc2UsXG4gICAgICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB3YWl0ID0gdG9OdW1iZXIod2FpdCkgfHwgMDtcbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICBsZWFkaW5nID0gISFvcHRpb25zLmxlYWRpbmc7XG4gICAgICAgIG1heGluZyA9ICdtYXhXYWl0JyBpbiBvcHRpb25zO1xuICAgICAgICBtYXhXYWl0ID0gbWF4aW5nID8gbmF0aXZlTWF4KHRvTnVtYmVyKG9wdGlvbnMubWF4V2FpdCkgfHwgMCwgd2FpdCkgOiBtYXhXYWl0O1xuICAgICAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBpbnZva2VGdW5jKHRpbWUpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBsYXN0QXJncyxcbiAgICAgICAgICAgIHRoaXNBcmcgPSBsYXN0VGhpcztcblxuICAgICAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgICAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGxlYWRpbmdFZGdlKHRpbWUpIHtcbiAgICAgICAgLy8gUmVzZXQgYW55IGBtYXhXYWl0YCB0aW1lci5cbiAgICAgICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgICAgICAvLyBTdGFydCB0aGUgdGltZXIgZm9yIHRoZSB0cmFpbGluZyBlZGdlLlxuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICAvLyBJbnZva2UgdGhlIGxlYWRpbmcgZWRnZS5cbiAgICAgICAgcmV0dXJuIGxlYWRpbmcgPyBpbnZva2VGdW5jKHRpbWUpIDogcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZW1haW5pbmdXYWl0KHRpbWUpIHtcbiAgICAgICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWUsXG4gICAgICAgICAgICB0aW1lV2FpdGluZyA9IHdhaXQgLSB0aW1lU2luY2VMYXN0Q2FsbDtcblxuICAgICAgICByZXR1cm4gbWF4aW5nXG4gICAgICAgICAgPyBuYXRpdmVNaW4odGltZVdhaXRpbmcsIG1heFdhaXQgLSB0aW1lU2luY2VMYXN0SW52b2tlKVxuICAgICAgICAgIDogdGltZVdhaXRpbmc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNob3VsZEludm9rZSh0aW1lKSB7XG4gICAgICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lO1xuXG4gICAgICAgIC8vIEVpdGhlciB0aGlzIGlzIHRoZSBmaXJzdCBjYWxsLCBhY3Rpdml0eSBoYXMgc3RvcHBlZCBhbmQgd2UncmUgYXQgdGhlXG4gICAgICAgIC8vIHRyYWlsaW5nIGVkZ2UsIHRoZSBzeXN0ZW0gdGltZSBoYXMgZ29uZSBiYWNrd2FyZHMgYW5kIHdlJ3JlIHRyZWF0aW5nXG4gICAgICAgIC8vIGl0IGFzIHRoZSB0cmFpbGluZyBlZGdlLCBvciB3ZSd2ZSBoaXQgdGhlIGBtYXhXYWl0YCBsaW1pdC5cbiAgICAgICAgcmV0dXJuIChsYXN0Q2FsbFRpbWUgPT09IHVuZGVmaW5lZCB8fCAodGltZVNpbmNlTGFzdENhbGwgPj0gd2FpdCkgfHxcbiAgICAgICAgICAodGltZVNpbmNlTGFzdENhbGwgPCAwKSB8fCAobWF4aW5nICYmIHRpbWVTaW5jZUxhc3RJbnZva2UgPj0gbWF4V2FpdCkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB0aW1lckV4cGlyZWQoKSB7XG4gICAgICAgIHZhciB0aW1lID0gbm93KCk7XG4gICAgICAgIGlmIChzaG91bGRJbnZva2UodGltZSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJhaWxpbmdFZGdlKHRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlc3RhcnQgdGhlIHRpbWVyLlxuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHJlbWFpbmluZ1dhaXQodGltZSkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB0cmFpbGluZ0VkZ2UodGltZSkge1xuICAgICAgICB0aW1lcklkID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIC8vIE9ubHkgaW52b2tlIGlmIHdlIGhhdmUgYGxhc3RBcmdzYCB3aGljaCBtZWFucyBgZnVuY2AgaGFzIGJlZW5cbiAgICAgICAgLy8gZGVib3VuY2VkIGF0IGxlYXN0IG9uY2UuXG4gICAgICAgIGlmICh0cmFpbGluZyAmJiBsYXN0QXJncykge1xuICAgICAgICAgIHJldHVybiBpbnZva2VGdW5jKHRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICAgICAgaWYgKHRpbWVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0SW52b2tlVGltZSA9IDA7XG4gICAgICAgIGxhc3RBcmdzID0gbGFzdENhbGxUaW1lID0gbGFzdFRoaXMgPSB0aW1lcklkID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICAgICAgcmV0dXJuIHRpbWVySWQgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IHRyYWlsaW5nRWRnZShub3coKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBub3coKSxcbiAgICAgICAgICAgIGlzSW52b2tpbmcgPSBzaG91bGRJbnZva2UodGltZSk7XG5cbiAgICAgICAgbGFzdEFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICAgICAgbGFzdENhbGxUaW1lID0gdGltZTtcblxuICAgICAgICBpZiAoaXNJbnZva2luZykge1xuICAgICAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBsZWFkaW5nRWRnZShsYXN0Q2FsbFRpbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobWF4aW5nKSB7XG4gICAgICAgICAgICAvLyBIYW5kbGUgaW52b2NhdGlvbnMgaW4gYSB0aWdodCBsb29wLlxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBkZWJvdW5jZWQuY2FuY2VsID0gY2FuY2VsO1xuICAgICAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7XG4gICAgICByZXR1cm4gZGVib3VuY2VkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlZmVycyBpbnZva2luZyB0aGUgYGZ1bmNgIHVudGlsIHRoZSBjdXJyZW50IGNhbGwgc3RhY2sgaGFzIGNsZWFyZWQuIEFueVxuICAgICAqIGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWZlci5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lciBpZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZlcihmdW5jdGlvbih0ZXh0KSB7XG4gICAgICogICBjb25zb2xlLmxvZyh0ZXh0KTtcbiAgICAgKiB9LCAnZGVmZXJyZWQnKTtcbiAgICAgKiAvLyA9PiBMb2dzICdkZWZlcnJlZCcgYWZ0ZXIgb25lIG1pbGxpc2Vjb25kLlxuICAgICAqL1xuICAgIHZhciBkZWZlciA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBiYXNlRGVsYXkoZnVuYywgMSwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIGBmdW5jYCBhZnRlciBgd2FpdGAgbWlsbGlzZWNvbmRzLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlXG4gICAgICogcHJvdmlkZWQgdG8gYGZ1bmNgIHdoZW4gaXQncyBpbnZva2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lciBpZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWxheShmdW5jdGlvbih0ZXh0KSB7XG4gICAgICogICBjb25zb2xlLmxvZyh0ZXh0KTtcbiAgICAgKiB9LCAxMDAwLCAnbGF0ZXInKTtcbiAgICAgKiAvLyA9PiBMb2dzICdsYXRlcicgYWZ0ZXIgb25lIHNlY29uZC5cbiAgICAgKi9cbiAgICB2YXIgZGVsYXkgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCB3YWl0LCBhcmdzKSB7XG4gICAgICByZXR1cm4gYmFzZURlbGF5KGZ1bmMsIHRvTnVtYmVyKHdhaXQpIHx8IDAsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBhcmd1bWVudHMgcmV2ZXJzZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBmbGlwIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmxpcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZsaXBwZWQgPSBfLmZsaXAoZnVuY3Rpb24oKSB7XG4gICAgICogICByZXR1cm4gXy50b0FycmF5KGFyZ3VtZW50cyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBmbGlwcGVkKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gWydkJywgJ2MnLCAnYicsICdhJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGlwKGZ1bmMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfRkxJUF9GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBtZW1vaXplcyB0aGUgcmVzdWx0IG9mIGBmdW5jYC4gSWYgYHJlc29sdmVyYCBpc1xuICAgICAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAgICAgKiBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uLiBCeSBkZWZhdWx0LCB0aGUgZmlyc3QgYXJndW1lbnRcbiAgICAgKiBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24gaXMgdXNlZCBhcyB0aGUgbWFwIGNhY2hlIGtleS4gVGhlIGBmdW5jYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjYWNoZSBpcyBleHBvc2VkIGFzIHRoZSBgY2FjaGVgIHByb3BlcnR5IG9uIHRoZSBtZW1vaXplZFxuICAgICAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICAgICAqIGNvbnN0cnVjdG9yIHdpdGggb25lIHdob3NlIGluc3RhbmNlcyBpbXBsZW1lbnQgdGhlXG4gICAgICogW2BNYXBgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wcm9wZXJ0aWVzLW9mLXRoZS1tYXAtcHJvdG90eXBlLW9iamVjdClcbiAgICAgKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmVzb2x2ZXJdIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIHRoZSBjYWNoZSBrZXkuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICAgICAqXG4gICAgICogdmFyIHZhbHVlcyA9IF8ubWVtb2l6ZShfLnZhbHVlcyk7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiB2YWx1ZXMob3RoZXIpO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqXG4gICAgICogb2JqZWN0LmEgPSAyO1xuICAgICAqIHZhbHVlcyhvYmplY3QpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogLy8gTW9kaWZ5IHRoZSByZXN1bHQgY2FjaGUuXG4gICAgICogdmFsdWVzLmNhY2hlLnNldChvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIHZhbHVlcyhvYmplY3QpO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKlxuICAgICAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gICAgICogXy5tZW1vaXplLkNhY2hlID0gV2Vha01hcDtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJyB8fCAocmVzb2x2ZXIgIT0gbnVsbCAmJiB0eXBlb2YgcmVzb2x2ZXIgIT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgdmFyIG1lbW9pemVkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgICAgICBjYWNoZSA9IG1lbW9pemVkLmNhY2hlO1xuXG4gICAgICAgIGlmIChjYWNoZS5oYXMoa2V5KSkge1xuICAgICAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICAgIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgICAgIHJldHVybiBtZW1vaXplZDtcbiAgICB9XG5cbiAgICAvLyBFeHBvc2UgYE1hcENhY2hlYC5cbiAgICBtZW1vaXplLkNhY2hlID0gTWFwQ2FjaGU7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBuZWdhdGVzIHRoZSByZXN1bHQgb2YgdGhlIHByZWRpY2F0ZSBgZnVuY2AuIFRoZVxuICAgICAqIGBmdW5jYCBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIHByZWRpY2F0ZSB0byBuZWdhdGUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbmVnYXRlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNFdmVuKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKFsxLCAyLCAzLCA0LCA1LCA2XSwgXy5uZWdhdGUoaXNFdmVuKSk7XG4gICAgICogLy8gPT4gWzEsIDMsIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gbmVnYXRlKHByZWRpY2F0ZSkge1xuICAgICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgY2FzZSAwOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMpO1xuICAgICAgICAgIGNhc2UgMTogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdKTtcbiAgICAgICAgICBjYXNlIDI6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhcHJlZGljYXRlLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpcyByZXN0cmljdGVkIHRvIGludm9raW5nIGBmdW5jYCBvbmNlLiBSZXBlYXQgY2FsbHNcbiAgICAgKiB0byB0aGUgZnVuY3Rpb24gcmV0dXJuIHRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgaW52b2NhdGlvbi4gVGhlIGBmdW5jYCBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBpbml0aWFsaXplID0gXy5vbmNlKGNyZWF0ZUFwcGxpY2F0aW9uKTtcbiAgICAgKiBpbml0aWFsaXplKCk7XG4gICAgICogaW5pdGlhbGl6ZSgpO1xuICAgICAqIC8vID0+IGBjcmVhdGVBcHBsaWNhdGlvbmAgaXMgaW52b2tlZCBvbmNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25jZShmdW5jKSB7XG4gICAgICByZXR1cm4gYmVmb3JlKDIsIGZ1bmMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50cyB0cmFuc2Zvcm1lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFt0cmFuc2Zvcm1zPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGFyZ3VtZW50IHRyYW5zZm9ybXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGRvdWJsZWQobikge1xuICAgICAqICAgcmV0dXJuIG4gKiAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJBcmdzKGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgKiAgIHJldHVybiBbeCwgeV07XG4gICAgICogfSwgW3NxdWFyZSwgZG91YmxlZF0pO1xuICAgICAqXG4gICAgICogZnVuYyg5LCAzKTtcbiAgICAgKiAvLyA9PiBbODEsIDZdXG4gICAgICpcbiAgICAgKiBmdW5jKDEwLCA1KTtcbiAgICAgKiAvLyA9PiBbMTAwLCAxMF1cbiAgICAgKi9cbiAgICB2YXIgb3ZlckFyZ3MgPSBjYXN0UmVzdChmdW5jdGlvbihmdW5jLCB0cmFuc2Zvcm1zKSB7XG4gICAgICB0cmFuc2Zvcm1zID0gKHRyYW5zZm9ybXMubGVuZ3RoID09IDEgJiYgaXNBcnJheSh0cmFuc2Zvcm1zWzBdKSlcbiAgICAgICAgPyBhcnJheU1hcCh0cmFuc2Zvcm1zWzBdLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpXG4gICAgICAgIDogYXJyYXlNYXAoYmFzZUZsYXR0ZW4odHJhbnNmb3JtcywgMSksIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG5cbiAgICAgIHZhciBmdW5jc0xlbmd0aCA9IHRyYW5zZm9ybXMubGVuZ3RoO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4oYXJncy5sZW5ndGgsIGZ1bmNzTGVuZ3RoKTtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gdHJhbnNmb3Jtc1tpbmRleF0uY2FsbCh0aGlzLCBhcmdzW2luZGV4XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRoZVxuICAgICAqIGFyZ3VtZW50cyBpdCByZWNlaXZlcy4gVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5iaW5kYCBleGNlcHQgaXQgZG9lcyAqKm5vdCoqXG4gICAgICogYWx0ZXIgdGhlIGB0aGlzYCBiaW5kaW5nLlxuICAgICAqXG4gICAgICogVGhlIGBfLnBhcnRpYWwucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIHBhcnRpYWxseVxuICAgICAqIGFwcGxpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcGFydGlhbGx5IGFwcGx5IGFyZ3VtZW50cyB0by5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXJ0aWFsbHkgYXBwbGllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZ3JlZXQoZ3JlZXRpbmcsIG5hbWUpIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIG5hbWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHNheUhlbGxvVG8gPSBfLnBhcnRpYWwoZ3JlZXQsICdoZWxsbycpO1xuICAgICAqIHNheUhlbGxvVG8oJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFBhcnRpYWxseSBhcHBsaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBncmVldEZyZWQgPSBfLnBhcnRpYWwoZ3JlZXQsIF8sICdmcmVkJyk7XG4gICAgICogZ3JlZXRGcmVkKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkJ1xuICAgICAqL1xuICAgIHZhciBwYXJ0aWFsID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihwYXJ0aWFsKSk7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1BBUlRJQUxfRkxBRywgdW5kZWZpbmVkLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnBhcnRpYWxgIGV4Y2VwdCB0aGF0IHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50c1xuICAgICAqIGFyZSBhcHBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhlIGBfLnBhcnRpYWxSaWdodC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgcGFydGlhbGx5XG4gICAgICogYXBwbGllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgbmFtZSkge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgbmFtZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZ3JlZXRGcmVkID0gXy5wYXJ0aWFsUmlnaHQoZ3JlZXQsICdmcmVkJyk7XG4gICAgICogZ3JlZXRGcmVkKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkJ1xuICAgICAqXG4gICAgICogLy8gUGFydGlhbGx5IGFwcGxpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIHNheUhlbGxvVG8gPSBfLnBhcnRpYWxSaWdodChncmVldCwgJ2hlbGxvJywgXyk7XG4gICAgICogc2F5SGVsbG9UbygnZnJlZCcpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkJ1xuICAgICAqL1xuICAgIHZhciBwYXJ0aWFsUmlnaHQgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKHBhcnRpYWxSaWdodCkpO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcsIHVuZGVmaW5lZCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBhcmd1bWVudHMgYXJyYW5nZWQgYWNjb3JkaW5nXG4gICAgICogdG8gdGhlIHNwZWNpZmllZCBgaW5kZXhlc2Agd2hlcmUgdGhlIGFyZ3VtZW50IHZhbHVlIGF0IHRoZSBmaXJzdCBpbmRleCBpc1xuICAgICAqIHByb3ZpZGVkIGFzIHRoZSBmaXJzdCBhcmd1bWVudCwgdGhlIGFyZ3VtZW50IHZhbHVlIGF0IHRoZSBzZWNvbmQgaW5kZXggaXNcbiAgICAgKiBwcm92aWRlZCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZWFycmFuZ2UgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcGFyYW0gey4uLihudW1iZXJ8bnVtYmVyW10pfSBpbmRleGVzIFRoZSBhcnJhbmdlZCBhcmd1bWVudCBpbmRleGVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgcmVhcmdlZCA9IF8ucmVhcmcoZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9LCBbMiwgMCwgMV0pO1xuICAgICAqXG4gICAgICogcmVhcmdlZCgnYicsICdjJywgJ2EnKVxuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIHZhciByZWFyZyA9IGZsYXRSZXN0KGZ1bmN0aW9uKGZ1bmMsIGluZGV4ZXMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUkVBUkdfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaW5kZXhlcyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGVcbiAgICAgKiBjcmVhdGVkIGZ1bmN0aW9uIGFuZCBhcmd1bWVudHMgZnJvbSBgc3RhcnRgIGFuZCBiZXlvbmQgcHJvdmlkZWQgYXNcbiAgICAgKiBhbiBhcnJheS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvbiB0aGVcbiAgICAgKiBbcmVzdCBwYXJhbWV0ZXJdKGh0dHBzOi8vbWRuLmlvL3Jlc3RfcGFyYW1ldGVycykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNheSA9IF8ucmVzdChmdW5jdGlvbih3aGF0LCBuYW1lcykge1xuICAgICAqICAgcmV0dXJuIHdoYXQgKyAnICcgKyBfLmluaXRpYWwobmFtZXMpLmpvaW4oJywgJykgK1xuICAgICAqICAgICAoXy5zaXplKG5hbWVzKSA+IDEgPyAnLCAmICcgOiAnJykgKyBfLmxhc3QobmFtZXMpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogc2F5KCdoZWxsbycsICdmcmVkJywgJ2Jhcm5leScsICdwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQsIGJhcm5leSwgJiBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc3QoZnVuYywgc3RhcnQpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gc3RhcnQgPT09IHVuZGVmaW5lZCA/IHN0YXJ0IDogdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jLCBzdGFydCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlXG4gICAgICogY3JlYXRlIGZ1bmN0aW9uIGFuZCBhbiBhcnJheSBvZiBhcmd1bWVudHMgbXVjaCBsaWtlXG4gICAgICogW2BGdW5jdGlvbiNhcHBseWBdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1mdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uIHRoZVxuICAgICAqIFtzcHJlYWQgb3BlcmF0b3JdKGh0dHBzOi8vbWRuLmlvL3NwcmVhZF9vcGVyYXRvcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBzcHJlYWQgYXJndW1lbnRzIG92ZXIuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHNwcmVhZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNheSA9IF8uc3ByZWFkKGZ1bmN0aW9uKHdobywgd2hhdCkge1xuICAgICAqICAgcmV0dXJuIHdobyArICcgc2F5cyAnICsgd2hhdDtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHNheShbJ2ZyZWQnLCAnaGVsbG8nXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQgc2F5cyBoZWxsbydcbiAgICAgKlxuICAgICAqIHZhciBudW1iZXJzID0gUHJvbWlzZS5hbGwoW1xuICAgICAqICAgUHJvbWlzZS5yZXNvbHZlKDQwKSxcbiAgICAgKiAgIFByb21pc2UucmVzb2x2ZSgzNilcbiAgICAgKiBdKTtcbiAgICAgKlxuICAgICAqIG51bWJlcnMudGhlbihfLnNwcmVhZChmdW5jdGlvbih4LCB5KSB7XG4gICAgICogICByZXR1cm4geCArIHk7XG4gICAgICogfSkpO1xuICAgICAqIC8vID0+IGEgUHJvbWlzZSBvZiA3NlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNwcmVhZChmdW5jLCBzdGFydCkge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSBzdGFydCA9PSBudWxsID8gMCA6IG5hdGl2ZU1heCh0b0ludGVnZXIoc3RhcnQpLCAwKTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFyZ3Nbc3RhcnRdLFxuICAgICAgICAgICAgb3RoZXJBcmdzID0gY2FzdFNsaWNlKGFyZ3MsIDAsIHN0YXJ0KTtcblxuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBhcnJheVB1c2gob3RoZXJBcmdzLCBhcnJheSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgdGhyb3R0bGVkIGZ1bmN0aW9uIHRoYXQgb25seSBpbnZva2VzIGBmdW5jYCBhdCBtb3N0IG9uY2UgcGVyXG4gICAgICogZXZlcnkgYHdhaXRgIG1pbGxpc2Vjb25kcy4gVGhlIHRocm90dGxlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGBcbiAgICAgKiBtZXRob2QgdG8gY2FuY2VsIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvXG4gICAgICogaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgXG4gICAgICogc2hvdWxkIGJlIGludm9rZWQgb24gdGhlIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YFxuICAgICAqIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZCB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGVcbiAgICAgKiB0aHJvdHRsZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnQgY2FsbHMgdG8gdGhlIHRocm90dGxlZCBmdW5jdGlvbiByZXR1cm4gdGhlXG4gICAgICogcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICAgICAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uXG4gICAgICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICAgICAqXG4gICAgICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gICAgICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICAgICAqXG4gICAgICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gICAgICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy50aHJvdHRsZWAgYW5kIGBfLmRlYm91bmNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHRocm90dGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aHJvdHRsZSBpbnZvY2F0aW9ucyB0by5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB0aHJvdHRsZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIGV4Y2Vzc2l2ZWx5IHVwZGF0aW5nIHRoZSBwb3NpdGlvbiB3aGlsZSBzY3JvbGxpbmcuXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3Njcm9sbCcsIF8udGhyb3R0bGUodXBkYXRlUG9zaXRpb24sIDEwMCkpO1xuICAgICAqXG4gICAgICogLy8gSW52b2tlIGByZW5ld1Rva2VuYCB3aGVuIHRoZSBjbGljayBldmVudCBpcyBmaXJlZCwgYnV0IG5vdCBtb3JlIHRoYW4gb25jZSBldmVyeSA1IG1pbnV0ZXMuXG4gICAgICogdmFyIHRocm90dGxlZCA9IF8udGhyb3R0bGUocmVuZXdUb2tlbiwgMzAwMDAwLCB7ICd0cmFpbGluZyc6IGZhbHNlIH0pO1xuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCB0aHJvdHRsZWQpO1xuICAgICAqXG4gICAgICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyB0aHJvdHRsZWQgaW52b2NhdGlvbi5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCB0aHJvdHRsZWQuY2FuY2VsKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aHJvdHRsZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGVhZGluZyA9IHRydWUsXG4gICAgICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgbGVhZGluZyA9ICdsZWFkaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLmxlYWRpbmcgOiBsZWFkaW5nO1xuICAgICAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlYm91bmNlKGZ1bmMsIHdhaXQsIHtcbiAgICAgICAgJ2xlYWRpbmcnOiBsZWFkaW5nLFxuICAgICAgICAnbWF4V2FpdCc6IHdhaXQsXG4gICAgICAgICd0cmFpbGluZyc6IHRyYWlsaW5nXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHVwIHRvIG9uZSBhcmd1bWVudCwgaWdub3JpbmcgYW55XG4gICAgICogYWRkaXRpb25hbCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICc4JywgJzEwJ10sIF8udW5hcnkocGFyc2VJbnQpKTtcbiAgICAgKiAvLyA9PiBbNiwgOCwgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5hcnkoZnVuYykge1xuICAgICAgcmV0dXJuIGFyeShmdW5jLCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwcm92aWRlcyBgdmFsdWVgIHRvIGB3cmFwcGVyYCBhcyBpdHMgZmlyc3RcbiAgICAgKiBhcmd1bWVudC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBmdW5jdGlvbiBhcmUgYXBwZW5kZWRcbiAgICAgKiB0byB0aG9zZSBwcm92aWRlZCB0byB0aGUgYHdyYXBwZXJgLiBUaGUgd3JhcHBlciBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFt3cmFwcGVyPWlkZW50aXR5XSBUaGUgd3JhcHBlciBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHAgPSBfLndyYXAoXy5lc2NhcGUsIGZ1bmN0aW9uKGZ1bmMsIHRleHQpIHtcbiAgICAgKiAgIHJldHVybiAnPHA+JyArIGZ1bmModGV4dCkgKyAnPC9wPic7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBwKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICc8cD5mcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXM8L3A+J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXAodmFsdWUsIHdyYXBwZXIpIHtcbiAgICAgIHJldHVybiBwYXJ0aWFsKGNhc3RGdW5jdGlvbih3cmFwcGVyKSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgYXMgYW4gYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoMSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSh7ICdhJzogMSB9KTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEgfV1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBbJ2FiYyddXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheShudWxsKTtcbiAgICAgKiAvLyA9PiBbbnVsbF1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gW3VuZGVmaW5lZF1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKiBjb25zb2xlLmxvZyhfLmNhc3RBcnJheShhcnJheSkgPT09IGFycmF5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEFycmF5KCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciB2YWx1ZSA9IGFyZ3VtZW50c1swXTtcbiAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW3ZhbHVlXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2hhbGxvdyBjbG9uZSBvZiBgdmFsdWVgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb24gdGhlXG4gICAgICogW3N0cnVjdHVyZWQgY2xvbmUgYWxnb3JpdGhtXShodHRwczovL21kbi5pby9TdHJ1Y3R1cmVkX2Nsb25lX2FsZ29yaXRobSlcbiAgICAgKiBhbmQgc3VwcG9ydHMgY2xvbmluZyBhcnJheXMsIGFycmF5IGJ1ZmZlcnMsIGJvb2xlYW5zLCBkYXRlIG9iamVjdHMsIG1hcHMsXG4gICAgICogbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcywgc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkXG4gICAgICogYXJyYXlzLiBUaGUgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgYXJndW1lbnRzYCBvYmplY3RzIGFyZSBjbG9uZWRcbiAgICAgKiBhcyBwbGFpbiBvYmplY3RzLiBBbiBlbXB0eSBvYmplY3QgaXMgcmV0dXJuZWQgZm9yIHVuY2xvbmVhYmxlIHZhbHVlcyBzdWNoXG4gICAgICogYXMgZXJyb3Igb2JqZWN0cywgZnVuY3Rpb25zLCBET00gbm9kZXMsIGFuZCBXZWFrTWFwcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVEZWVwXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ2EnOiAxIH0sIHsgJ2InOiAyIH1dO1xuICAgICAqXG4gICAgICogdmFyIHNoYWxsb3cgPSBfLmNsb25lKG9iamVjdHMpO1xuICAgICAqIGNvbnNvbGUubG9nKHNoYWxsb3dbMF0gPT09IG9iamVjdHNbMF0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgY2xvbmVkIHZhbHVlLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCxcbiAgICAgKiBjbG9uaW5nIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHVwIHRvIGZvdXIgYXJndW1lbnRzOyAodmFsdWUgWywgaW5kZXh8a2V5LCBvYmplY3QsIHN0YWNrXSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVEZWVwV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKHZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0VsZW1lbnQodmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB2YWx1ZS5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBlbCA9IF8uY2xvbmVXaXRoKGRvY3VtZW50LmJvZHksIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZWwgPT09IGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICogY29uc29sZS5sb2coZWwubm9kZU5hbWUpO1xuICAgICAqIC8vID0+ICdCT0RZJ1xuICAgICAqIGNvbnNvbGUubG9nKGVsLmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVXaXRoKHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGNsb25lcyBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZWN1cnNpdmVseSBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZGVlcCBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ2EnOiAxIH0sIHsgJ2InOiAyIH1dO1xuICAgICAqXG4gICAgICogdmFyIGRlZXAgPSBfLmNsb25lRGVlcChvYmplY3RzKTtcbiAgICAgKiBjb25zb2xlLmxvZyhkZWVwWzBdID09PSBvYmplY3RzWzBdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGVlcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lV2l0aGAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgY2xvbmVzIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJlY3Vyc2l2ZWx5IGNsb25lLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGRlZXAgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZVdpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcih2YWx1ZSkge1xuICAgICAqICAgaWYgKF8uaXNFbGVtZW50KHZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdmFsdWUuY2xvbmVOb2RlKHRydWUpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBlbCA9IF8uY2xvbmVEZWVwV2l0aChkb2N1bWVudC5ib2R5LCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGVsID09PSBkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqIGNvbnNvbGUubG9nKGVsLm5vZGVOYW1lKTtcbiAgICAgKiAvLyA9PiAnQk9EWSdcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5jaGlsZE5vZGVzLmxlbmd0aCk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURlZXBXaXRoKHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgb2JqZWN0YCBjb25mb3JtcyB0byBgc291cmNlYCBieSBpbnZva2luZyB0aGUgcHJlZGljYXRlXG4gICAgICogcHJvcGVydGllcyBvZiBgc291cmNlYCB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIHByb3BlcnR5IHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBlcXVpdmFsZW50IHRvIGBfLmNvbmZvcm1zYCB3aGVuIGBzb3VyY2VgIGlzXG4gICAgICogcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xNC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBjb25mb3JtcywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqXG4gICAgICogXy5jb25mb3Jtc1RvKG9iamVjdCwgeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAxOyB9IH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uY29uZm9ybXNUbyhvYmplY3QsIHsgJ2InOiBmdW5jdGlvbihuKSB7IHJldHVybiBuID4gMjsgfSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBzb3VyY2UgPT0gbnVsbCB8fCBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwga2V5cyhzb3VyY2UpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVxKCdhJywgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVxKE5hTiwgTmFOKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmx0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3QoMywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndCgzLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5ndCgxLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBndCA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oYmFzZUd0KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvXG4gICAgICogIGBvdGhlcmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ubHRlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDMsIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDMsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDEsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGd0ZSA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gb3RoZXI7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgICAgICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheUJ1ZmZlcmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5QnVmZmVyKG5ldyBBcnJheUJ1ZmZlcigyKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5QnVmZmVyKG5ldyBBcnJheSgyKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcnJheUJ1ZmZlciA9IG5vZGVJc0FycmF5QnVmZmVyID8gYmFzZVVuYXJ5KG5vZGVJc0FycmF5QnVmZmVyKSA6IGJhc2VJc0FycmF5QnVmZmVyO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICAgICAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAgICAgKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzQXJyYXlMaWtlYCBleGNlcHQgdGhhdCBpdCBhbHNvIGNoZWNrcyBpZiBgdmFsdWVgXG4gICAgICogaXMgYW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheS1saWtlIG9iamVjdCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdChkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdChfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGlzQXJyYXlMaWtlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYm9vbGVhbiBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJvb2xlYW4sIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Jvb2xlYW4oZmFsc2UpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNCb29sZWFuKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09IGZhbHNlIHx8XG4gICAgICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGJvb2xUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBEYXRlYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZGF0ZSBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0RhdGUobmV3IERhdGUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNEYXRlKCdNb24gQXByaWwgMjMgMjAxMicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzRGF0ZSA9IG5vZGVJc0RhdGUgPyBiYXNlVW5hcnkobm9kZUlzRGF0ZSkgOiBiYXNlSXNEYXRlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgRE9NIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgRE9NIGVsZW1lbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0VsZW1lbnQoZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VsZW1lbnQoJzxib2R5PicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFbGVtZW50KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiB2YWx1ZS5ub2RlVHlwZSA9PT0gMSAmJiAhaXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gZW1wdHkgb2JqZWN0LCBjb2xsZWN0aW9uLCBtYXAsIG9yIHNldC5cbiAgICAgKlxuICAgICAqIE9iamVjdHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIG5vIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZFxuICAgICAqIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBBcnJheS1saWtlIHZhbHVlcyBzdWNoIGFzIGBhcmd1bWVudHNgIG9iamVjdHMsIGFycmF5cywgYnVmZmVycywgc3RyaW5ncywgb3JcbiAgICAgKiBqUXVlcnktbGlrZSBjb2xsZWN0aW9ucyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgYSBgbGVuZ3RoYCBvZiBgMGAuXG4gICAgICogU2ltaWxhcmx5LCBtYXBzIGFuZCBzZXRzIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBzaXplYCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGVtcHR5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eShudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkodHJ1ZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoeyAnYSc6IDEgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VtcHR5KHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkgJiZcbiAgICAgICAgICAoaXNBcnJheSh2YWx1ZSkgfHwgdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZS5zcGxpY2UgPT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAgICAgaXNCdWZmZXIodmFsdWUpIHx8IGlzVHlwZWRBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpKSkge1xuICAgICAgICByZXR1cm4gIXZhbHVlLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpO1xuICAgICAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgICAgICByZXR1cm4gIXZhbHVlLnNpemU7XG4gICAgICB9XG4gICAgICBpZiAoaXNQcm90b3R5cGUodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiAhYmFzZUtleXModmFsdWUpLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZVxuICAgICAqIGVxdWl2YWxlbnQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2Qgc3VwcG9ydHMgY29tcGFyaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsXG4gICAgICogZGF0ZSBvYmplY3RzLCBlcnJvciBvYmplY3RzLCBtYXBzLCBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLFxuICAgICAqIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZCBhcnJheXMuIGBPYmplY3RgIG9iamVjdHMgYXJlIGNvbXBhcmVkXG4gICAgICogYnkgdGhlaXIgb3duLCBub3QgaW5oZXJpdGVkLCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuIEZ1bmN0aW9ucyBhbmQgRE9NXG4gICAgICogbm9kZXMgYXJlIGNvbXBhcmVkIGJ5IHN0cmljdCBlcXVhbGl0eSwgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmlzRXF1YWwob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogb2JqZWN0ID09PSBvdGhlcjtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXF1YWwodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzRXF1YWxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIGNvbXBhcmlzb25zXG4gICAgICogYXJlIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCB1cCB0b1xuICAgICAqIHNpeCBhcmd1bWVudHM6IChvYmpWYWx1ZSwgb3RoVmFsdWUgWywgaW5kZXh8a2V5LCBvYmplY3QsIG90aGVyLCBzdGFja10pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNHcmVldGluZyh2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuIC9eaCg/Oml8ZWxsbykkLy50ZXN0KHZhbHVlKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSkge1xuICAgICAqICAgaWYgKGlzR3JlZXRpbmcob2JqVmFsdWUpICYmIGlzR3JlZXRpbmcob3RoVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB0cnVlO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnaGVsbG8nLCAnZ29vZGJ5ZSddO1xuICAgICAqIHZhciBvdGhlciA9IFsnaGknLCAnZ29vZGJ5ZSddO1xuICAgICAqXG4gICAgICogXy5pc0VxdWFsV2l0aChhcnJheSwgb3RoZXIsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VxdWFsV2l0aCh2YWx1ZSwgb3RoZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyID8gY3VzdG9taXplcih2YWx1ZSwgb3RoZXIpIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCB1bmRlZmluZWQsIGN1c3RvbWl6ZXIpIDogISFyZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gYEVycm9yYCwgYEV2YWxFcnJvcmAsIGBSYW5nZUVycm9yYCwgYFJlZmVyZW5jZUVycm9yYCxcbiAgICAgKiBgU3ludGF4RXJyb3JgLCBgVHlwZUVycm9yYCwgb3IgYFVSSUVycm9yYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGVycm9yIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRXJyb3IobmV3IEVycm9yKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRXJyb3IoRXJyb3IpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcnJvcih2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgICAgIHJldHVybiB0YWcgPT0gZXJyb3JUYWcgfHwgdGFnID09IGRvbUV4Y1RhZyB8fFxuICAgICAgICAodHlwZW9mIHZhbHVlLm1lc3NhZ2UgPT0gJ3N0cmluZycgJiYgdHlwZW9mIHZhbHVlLm5hbWUgPT0gJ3N0cmluZycgJiYgIWlzUGxhaW5PYmplY3QodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGZpbml0ZSBwcmltaXRpdmUgbnVtYmVyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNGaW5pdGVgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNGaW5pdGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZpbml0ZSBudW1iZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZSgzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Zpbml0ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiBuYXRpdmVJc0Zpbml0ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNGdW5jdGlvbihfKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gICAgICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgICAgIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgICAgIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzSW50ZWdlcmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc0ludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBpbnRlZ2VyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0ludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgdmFsdWUgPT0gdG9JbnRlZ2VyKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgICAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gICAgICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICAgICAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3Qoe30pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gICAgICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTWFwYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNNYXAobmV3IE1hcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc01hcChuZXcgV2Vha01hcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNNYXAgPSBub2RlSXNNYXAgPyBiYXNlVW5hcnkobm9kZUlzTWFwKSA6IGJhc2VJc01hcDtcblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiBgb2JqZWN0YCBhbmQgYHNvdXJjZWAgdG9cbiAgICAgKiBkZXRlcm1pbmUgaWYgYG9iamVjdGAgY29udGFpbnMgZXF1aXZhbGVudCBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgZXF1aXZhbGVudCB0byBgXy5tYXRjaGVzYCB3aGVuIGBzb3VyY2VgIGlzXG4gICAgICogcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBQYXJ0aWFsIGNvbXBhcmlzb25zIHdpbGwgbWF0Y2ggZW1wdHkgYXJyYXkgYW5kIGVtcHR5IG9iamVjdCBgc291cmNlYFxuICAgICAqIHZhbHVlcyBhZ2FpbnN0IGFueSBhcnJheSBvciBvYmplY3QgdmFsdWUsIHJlc3BlY3RpdmVseS4gU2VlIGBfLmlzRXF1YWxgXG4gICAgICogZm9yIGEgbGlzdCBvZiBzdXBwb3J0ZWQgdmFsdWUgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaChvYmplY3QsIHsgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaChvYmplY3QsIHsgJ2InOiAxIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXRjaChvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PT0gc291cmNlIHx8IGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBnZXRNYXRjaERhdGEoc291cmNlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc01hdGNoYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLCBjb21wYXJpc29uc1xuICAgICAqIGFyZSBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGggZml2ZVxuICAgICAqIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwgaW5kZXh8a2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNHcmVldGluZyh2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuIC9eaCg/Oml8ZWxsbykkLy50ZXN0KHZhbHVlKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgaWYgKGlzR3JlZXRpbmcob2JqVmFsdWUpICYmIGlzR3JlZXRpbmcoc3JjVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB0cnVlO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdncmVldGluZyc6ICdoZWxsbycgfTtcbiAgICAgKiB2YXIgc291cmNlID0geyAnZ3JlZXRpbmcnOiAnaGknIH07XG4gICAgICpcbiAgICAgKiBfLmlzTWF0Y2hXaXRoKG9iamVjdCwgc291cmNlLCBjdXN0b21pemVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXRjaFdpdGgob2JqZWN0LCBzb3VyY2UsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgZ2V0TWF0Y2hEYXRhKHNvdXJjZSksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBOYU5gLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNOYU5gXShodHRwczovL21kbi5pby9OdW1iZXIvaXNOYU4pIGFuZCBpcyBub3QgdGhlIHNhbWUgYXNcbiAgICAgKiBnbG9iYWwgW2Bpc05hTmBdKGh0dHBzOi8vbWRuLmlvL2lzTmFOKSB3aGljaCByZXR1cm5zIGB0cnVlYCBmb3JcbiAgICAgKiBgdW5kZWZpbmVkYCBhbmQgb3RoZXIgbm9uLW51bWJlciB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4oTmFOKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKG5ldyBOdW1iZXIoTmFOKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogaXNOYU4odW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc05hTih2YWx1ZSkge1xuICAgICAgLy8gQW4gYE5hTmAgcHJpbWl0aXZlIGlzIHRoZSBvbmx5IHZhbHVlIHRoYXQgaXMgbm90IGVxdWFsIHRvIGl0c2VsZi5cbiAgICAgIC8vIFBlcmZvcm0gdGhlIGB0b1N0cmluZ1RhZ2AgY2hlY2sgZmlyc3QgdG8gYXZvaWQgZXJyb3JzIHdpdGggc29tZVxuICAgICAgLy8gQWN0aXZlWCBvYmplY3RzIGluIElFLlxuICAgICAgcmV0dXJuIGlzTnVtYmVyKHZhbHVlKSAmJiB2YWx1ZSAhPSArdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcmlzdGluZSBuYXRpdmUgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgY2FuJ3QgcmVsaWFibHkgZGV0ZWN0IG5hdGl2ZSBmdW5jdGlvbnMgaW4gdGhlIHByZXNlbmNlXG4gICAgICogb2YgdGhlIGNvcmUtanMgcGFja2FnZSBiZWNhdXNlIGNvcmUtanMgY2lyY3VtdmVudHMgdGhpcyBraW5kIG9mIGRldGVjdGlvbi5cbiAgICAgKiBEZXNwaXRlIG11bHRpcGxlIHJlcXVlc3RzLCB0aGUgY29yZS1qcyBtYWludGFpbmVyIGhhcyBtYWRlIGl0IGNsZWFyOiBhbnlcbiAgICAgKiBhdHRlbXB0IHRvIGZpeCB0aGUgZGV0ZWN0aW9uIHdpbGwgYmUgb2JzdHJ1Y3RlZC4gQXMgYSByZXN1bHQsIHdlJ3JlIGxlZnRcbiAgICAgKiB3aXRoIGxpdHRsZSBjaG9pY2UgYnV0IHRvIHRocm93IGFuIGVycm9yLiBVbmZvcnR1bmF0ZWx5LCB0aGlzIGFsc28gYWZmZWN0c1xuICAgICAqIHBhY2thZ2VzLCBsaWtlIFtiYWJlbC1wb2x5ZmlsbF0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYmFiZWwtcG9seWZpbGwpLFxuICAgICAqIHdoaWNoIHJlbHkgb24gY29yZS1qcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05hdGl2ZShBcnJheS5wcm90b3R5cGUucHVzaCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05hdGl2ZShfKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmF0aXZlKHZhbHVlKSB7XG4gICAgICBpZiAoaXNNYXNrYWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKENPUkVfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgbnVsbGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBudWxsYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTnVsbChudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVsbCh2b2lkIDApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOdWxsKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYG51bGxgIG9yIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBudWxsaXNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOaWwobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05pbCh2b2lkIDApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOaWwoTmFOKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmlsKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYE51bWJlcmAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUbyBleGNsdWRlIGBJbmZpbml0eWAsIGAtSW5maW5pdHlgLCBhbmQgYE5hTmAsIHdoaWNoIGFyZVxuICAgICAqIGNsYXNzaWZpZWQgYXMgbnVtYmVycywgdXNlIHRoZSBgXy5pc0Zpbml0ZWAgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG51bWJlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gbnVtYmVyVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgdGhhdCBpcywgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlXG4gICAgICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuOC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGJhc2VHZXRUYWcodmFsdWUpICE9IG9iamVjdFRhZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICAgICAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIEN0b3IgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCAnY29uc3RydWN0b3InKSAmJiBwcm90by5jb25zdHJ1Y3RvcjtcbiAgICAgIHJldHVybiB0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IgaW5zdGFuY2VvZiBDdG9yICYmXG4gICAgICAgIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBSZWdFeHBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSByZWdleHAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1JlZ0V4cCgvYWJjLyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1JlZ0V4cCgnL2FiYy8nKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1JlZ0V4cCA9IG5vZGVJc1JlZ0V4cCA/IGJhc2VVbmFyeShub2RlSXNSZWdFeHApIDogYmFzZUlzUmVnRXhwO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBzYWZlIGludGVnZXIuIEFuIGludGVnZXIgaXMgc2FmZSBpZiBpdCdzIGFuIElFRUUtNzU0XG4gICAgICogZG91YmxlIHByZWNpc2lvbiBudW1iZXIgd2hpY2ggaXNuJ3QgdGhlIHJlc3VsdCBvZiBhIHJvdW5kZWQgdW5zYWZlIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc1NhZmVJbnRlZ2VyYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzU2FmZUludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNhZmUgaW50ZWdlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU2FmZUludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0ludGVnZXIodmFsdWUpICYmIHZhbHVlID49IC1NQVhfU0FGRV9JTlRFR0VSICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTZXRgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1NldChuZXcgU2V0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU2V0KG5ldyBXZWFrU2V0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1NldCA9IG5vZGVJc1NldCA/IGJhc2VVbmFyeShub2RlSXNTZXQpIDogYmFzZUlzU2V0O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTdHJpbmdgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3RyaW5nLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTdHJpbmcoJ2FiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTdHJpbmcoMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fFxuICAgICAgICAoIWlzQXJyYXkodmFsdWUpICYmIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3RyaW5nVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgdW5kZWZpbmVkYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzVW5kZWZpbmVkKHZvaWQgMCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1VuZGVmaW5lZChudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFdlYWtNYXBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB3ZWFrIG1hcCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha01hcChuZXcgV2Vha01hcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtNYXAobmV3IE1hcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1dlYWtNYXAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gd2Vha01hcFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFdlYWtTZXRgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB3ZWFrIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha1NldChuZXcgV2Vha1NldCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtTZXQobmV3IFNldCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1dlYWtTZXQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHdlYWtTZXRUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5ndFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmx0KDEsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHQoMywgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8ubHQoMywgMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgbHQgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGJhc2VMdCk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0b1xuICAgICAqICBgb3RoZXJgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmd0ZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgxLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgzLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgzLCAxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBsdGUgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlIDw9IG90aGVyO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0FycmF5KHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqXG4gICAgICogXy50b0FycmF5KDEpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkobnVsbCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0FycmF5KHZhbHVlKSB7XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGlzU3RyaW5nKHZhbHVlKSA/IHN0cmluZ1RvQXJyYXkodmFsdWUpIDogY29weUFycmF5KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChzeW1JdGVyYXRvciAmJiB2YWx1ZVtzeW1JdGVyYXRvcl0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVG9BcnJheSh2YWx1ZVtzeW1JdGVyYXRvcl0oKSk7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICBmdW5jID0gdGFnID09IG1hcFRhZyA/IG1hcFRvQXJyYXkgOiAodGFnID09IHNldFRhZyA/IHNldFRvQXJyYXkgOiB2YWx1ZXMpO1xuXG4gICAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIGZpbml0ZSBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMi4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoMy4yKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gNWUtMzI0XG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZSgnMy4yJyk7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9GaW5pdGUodmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiAwO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gICAgICBpZiAodmFsdWUgPT09IElORklOSVRZIHx8IHZhbHVlID09PSAtSU5GSU5JVFkpIHtcbiAgICAgICAgdmFyIHNpZ24gPSAodmFsdWUgPCAwID8gLTEgOiAxKTtcbiAgICAgICAgcmV0dXJuIHNpZ24gKiBNQVhfSU5URUdFUjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyB2YWx1ZSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYFRvSW50ZWdlcmBdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2ludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcigzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0ludGVnZXIodmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0b0Zpbml0ZSh2YWx1ZSksXG4gICAgICAgICAgcmVtYWluZGVyID0gcmVzdWx0ICUgMTtcblxuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gcmVzdWx0ID8gKHJlbWFpbmRlciA/IHJlc3VsdCAtIHJlbWFpbmRlciA6IHJlc3VsdCkgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlciBzdWl0YWJsZSBmb3IgdXNlIGFzIHRoZSBsZW5ndGggb2YgYW5cbiAgICAgKiBhcnJheS1saWtlIG9iamVjdC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoMy4yKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDQyOTQ5NjcyOTVcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0xlbmd0aCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID8gYmFzZUNsYW1wKHRvSW50ZWdlcih2YWx1ZSksIDAsIE1BWF9BUlJBWV9MRU5HVEgpIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b051bWJlcigzLjIpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqXG4gICAgICogXy50b051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiA1ZS0zMjRcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IEluZmluaXR5XG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKCczLjInKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBOQU47XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICAgICAgdmFsdWUgPSBpc09iamVjdChvdGhlcikgPyAob3RoZXIgKyAnJykgOiBvdGhlcjtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiArdmFsdWU7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IGJhc2VUcmltKHZhbHVlKTtcbiAgICAgIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7XG4gICAgICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICAgICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBwbGFpbiBvYmplY3QgZmxhdHRlbmluZyBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmdcbiAgICAgKiBrZXllZCBwcm9wZXJ0aWVzIG9mIGB2YWx1ZWAgdG8gb3duIHByb3BlcnRpZXMgb2YgdGhlIHBsYWluIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgcGxhaW4gb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMSB9LCBuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIF8udG9QbGFpbk9iamVjdChuZXcgRm9vKSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdCh2YWx1ZSwga2V5c0luKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHNhZmUgaW50ZWdlci4gQSBzYWZlIGludGVnZXIgY2FuIGJlIGNvbXBhcmVkIGFuZFxuICAgICAqIHJlcHJlc2VudGVkIGNvcnJlY3RseS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gOTAwNzE5OTI1NDc0MDk5MVxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKCczLjInKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9TYWZlSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgICAgID8gYmFzZUNsYW1wKHRvSW50ZWdlcih2YWx1ZSksIC1NQVhfU0FGRV9JTlRFR0VSLCBNQVhfU0FGRV9JTlRFR0VSKVxuICAgICAgICA6ICh2YWx1ZSA9PT0gMCA/IHZhbHVlIDogMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAgICAgKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKG51bGwpO1xuICAgICAqIC8vID0+ICcnXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKC0wKTtcbiAgICAgKiAvLyA9PiAnLTAnXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gJzEsMiwzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIHRvIHRoZVxuICAgICAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LlxuICAgICAqIFN1YnNlcXVlbnQgc291cmNlcyBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgIGFuZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gICAgICogW2BPYmplY3QuYXNzaWduYF0oaHR0cHM6Ly9tZG4uaW8vT2JqZWN0L2Fzc2lnbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25JblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEJhcigpIHtcbiAgICAgKiAgIHRoaXMuYyA9IDM7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5iID0gMjtcbiAgICAgKiBCYXIucHJvdG90eXBlLmQgPSA0O1xuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDAgfSwgbmV3IEZvbywgbmV3IEJhcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbiA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlKSB7XG4gICAgICBpZiAoaXNQcm90b3R5cGUoc291cmNlKSB8fCBpc0FycmF5TGlrZShzb3VyY2UpKSB7XG4gICAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgb3duIGFuZFxuICAgICAqIGluaGVyaXRlZCBzb3VyY2UgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGV4dGVuZFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQmFyKCkge1xuICAgICAqICAgdGhpcy5jID0gMztcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmIgPSAyO1xuICAgICAqIEJhci5wcm90b3R5cGUuZCA9IDQ7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbkluKHsgJ2EnOiAwIH0sIG5ldyBGb28sIG5ldyBCYXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMywgJ2QnOiA0IH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduSW4gPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25JbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGFzc2lnbmVkIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnNcbiAgICAgKiBgdW5kZWZpbmVkYCwgYXNzaWdubWVudCBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBmaXZlIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBleHRlbmRXaXRoXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbldpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiBfLmlzVW5kZWZpbmVkKG9ialZhbHVlKSA/IHNyY1ZhbHVlIDogb2JqVmFsdWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGRlZmF1bHRzID0gXy5wYXJ0aWFsUmlnaHQoXy5hc3NpZ25JbldpdGgsIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbkluV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBhc3NpZ25lZCB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zXG4gICAgICogYHVuZGVmaW5lZGAsIGFzc2lnbm1lbnQgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggZml2ZSBhcmd1bWVudHM6IChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduSW5XaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICByZXR1cm4gXy5pc1VuZGVmaW5lZChvYmpWYWx1ZSkgPyBzcmNWYWx1ZSA6IG9ialZhbHVlO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBkZWZhdWx0cyA9IF8ucGFydGlhbFJpZ2h0KF8uYXNzaWduV2l0aCwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBkZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdmFsdWVzIGNvcnJlc3BvbmRpbmcgdG8gYHBhdGhzYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwaWNrZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9LCA0XSB9O1xuICAgICAqXG4gICAgICogXy5hdChvYmplY3QsIFsnYVswXS5iLmMnLCAnYVsxXSddKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKi9cbiAgICB2YXIgYXQgPSBmbGF0UmVzdChiYXNlQXQpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIHRoZSBgcHJvdG90eXBlYCBvYmplY3QuIElmIGFcbiAgICAgKiBgcHJvcGVydGllc2Agb2JqZWN0IGlzIGdpdmVuLCBpdHMgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXNcbiAgICAgKiBhcmUgYXNzaWduZWQgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm90b3R5cGUgVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtwcm9wZXJ0aWVzXSBUaGUgcHJvcGVydGllcyB0byBhc3NpZ24gdG8gdGhlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBTaGFwZSgpIHtcbiAgICAgKiAgIHRoaXMueCA9IDA7XG4gICAgICogICB0aGlzLnkgPSAwO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIENpcmNsZSgpIHtcbiAgICAgKiAgIFNoYXBlLmNhbGwodGhpcyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogQ2lyY2xlLnByb3RvdHlwZSA9IF8uY3JlYXRlKFNoYXBlLnByb3RvdHlwZSwge1xuICAgICAqICAgJ2NvbnN0cnVjdG9yJzogQ2lyY2xlXG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiB2YXIgY2lyY2xlID0gbmV3IENpcmNsZTtcbiAgICAgKiBjaXJjbGUgaW5zdGFuY2VvZiBDaXJjbGU7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY2lyY2xlIGluc3RhbmNlb2YgU2hhcGU7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShwcm90b3R5cGUsIHByb3BlcnRpZXMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBiYXNlQ3JlYXRlKHByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gcHJvcGVydGllcyA9PSBudWxsID8gcmVzdWx0IDogYmFzZUFzc2lnbihyZXN1bHQsIHByb3BlcnRpZXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2VcbiAgICAgKiBvYmplY3RzIHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QgZm9yIGFsbCBkZXN0aW5hdGlvbiBwcm9wZXJ0aWVzIHRoYXRcbiAgICAgKiByZXNvbHZlIHRvIGB1bmRlZmluZWRgLiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gICAgICogT25jZSBhIHByb3BlcnR5IGlzIHNldCwgYWRkaXRpb25hbCB2YWx1ZXMgb2YgdGhlIHNhbWUgcHJvcGVydHkgYXJlIGlnbm9yZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZGVmYXVsdHNEZWVwXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGRlZmF1bHRzID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2VzKSB7XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICB2YXIgbGVuZ3RoID0gc291cmNlcy5sZW5ndGg7XG4gICAgICB2YXIgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICAgIHZhciBwcm9wcyA9IGtleXNJbihzb3VyY2UpO1xuICAgICAgICB2YXIgcHJvcHNJbmRleCA9IC0xO1xuICAgICAgICB2YXIgcHJvcHNMZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKCsrcHJvcHNJbmRleCA8IHByb3BzTGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGtleSA9IHByb3BzW3Byb3BzSW5kZXhdO1xuICAgICAgICAgIHZhciB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgKGVxKHZhbHVlLCBvYmplY3RQcm90b1trZXldKSAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSB7XG4gICAgICAgICAgICBvYmplY3Rba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kZWZhdWx0c2AgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgYXNzaWduc1xuICAgICAqIGRlZmF1bHQgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZGVmYXVsdHNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0c0RlZXAoeyAnYSc6IHsgJ2InOiAyIH0gfSwgeyAnYSc6IHsgJ2InOiAxLCAnYyc6IDMgfSB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogeyAnYic6IDIsICdjJzogMyB9IH1cbiAgICAgKi9cbiAgICB2YXIgZGVmYXVsdHNEZWVwID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgYXJncy5wdXNoKHVuZGVmaW5lZCwgY3VzdG9tRGVmYXVsdHNNZXJnZSk7XG4gICAgICByZXR1cm4gYXBwbHkobWVyZ2VXaXRoLCB1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBrZXkgb2YgdGhlIGZpcnN0XG4gICAgICogZWxlbWVudCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIG1hdGNoZWQgZWxlbWVudCxcbiAgICAgKiAgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2Jhcm5leSc6ICB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgICdmcmVkJzogICAgeyAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+ICdiYXJuZXknIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAnYmFybmV5J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBiYXNlRmluZEtleShvYmplY3QsIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGJhc2VGb3JPd24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEtleWAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGEgY29sbGVjdGlvbiBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIG1hdGNoZWQgZWxlbWVudCxcbiAgICAgKiAgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2Jhcm5leSc6ICB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgICdmcmVkJzogICAgeyAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiByZXR1cm5zICdwZWJibGVzJyBhc3N1bWluZyBgXy5maW5kS2V5YCByZXR1cm5zICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAnYmFybmV5J1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAncGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kTGFzdEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIGJhc2VGaW5kS2V5KG9iamVjdCwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgYmFzZUZvck93blJpZ2h0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYW5cbiAgICAgKiBvYmplY3QgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdFxuICAgICAqIGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9ySW5SaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JJbihuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnLCAnYicsIHRoZW4gJ2MnIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckluKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbFxuICAgICAgICA/IG9iamVjdFxuICAgICAgICA6IGJhc2VGb3Iob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JJbmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzIG9mXG4gICAgICogYG9iamVjdGAgaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9ySW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9ySW5SaWdodChuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2MnLCAnYicsIHRoZW4gJ2EnIGFzc3VtaW5nIGBfLmZvckluYCBsb2dzICdhJywgJ2InLCB0aGVuICdjJy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JJblJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbFxuICAgICAgICA/IG9iamVjdFxuICAgICAgICA6IGJhc2VGb3JSaWdodChvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGFuIG9iamVjdCBhbmRcbiAgICAgKiBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uXG4gICAgICogZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvck93blJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvck93bihuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnIHRoZW4gJ2InIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JPd24ob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9yT3duYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXMgb2ZcbiAgICAgKiBgb2JqZWN0YCBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JPd25cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9yT3duUmlnaHQobmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdiJyB0aGVuICdhJyBhc3N1bWluZyBgXy5mb3JPd25gIGxvZ3MgJ2EnIHRoZW4gJ2InLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvck93blJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvck93blJpZ2h0KG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZyb20gb3duIGVudW1lcmFibGUgcHJvcGVydGllc1xuICAgICAqIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZXMuXG4gICAgICogQHNlZSBfLmZ1bmN0aW9uc0luXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IF8uY29uc3RhbnQoJ2EnKTtcbiAgICAgKiAgIHRoaXMuYiA9IF8uY29uc3RhbnQoJ2InKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSBfLmNvbnN0YW50KCdjJyk7XG4gICAgICpcbiAgICAgKiBfLmZ1bmN0aW9ucyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnVuY3Rpb25zKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlRnVuY3Rpb25zKG9iamVjdCwga2V5cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZyb20gb3duIGFuZCBpbmhlcml0ZWRcbiAgICAgKiBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKiBAc2VlIF8uZnVuY3Rpb25zXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IF8uY29uc3RhbnQoJ2EnKTtcbiAgICAgKiAgIHRoaXMuYiA9IF8uY29uc3RhbnQoJ2InKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSBfLmNvbnN0YW50KCdjJyk7XG4gICAgICpcbiAgICAgKiBfLmZ1bmN0aW9uc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZ1bmN0aW9uc0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlRnVuY3Rpb25zKG9iamVjdCwga2V5c0luKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzXG4gICAgICogYHVuZGVmaW5lZGAsIHRoZSBgZGVmYXVsdFZhbHVlYCBpcyByZXR1cm5lZCBpbiBpdHMgcGxhY2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsICdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgJ2EuYi5jJywgJ2RlZmF1bHQnKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IHsgJ2InOiAyIH0gfTtcbiAgICAgKiB2YXIgb3RoZXIgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCAnYS5iJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvdGhlciwgJ2EnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhcyhvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBvciBpbmhlcml0ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2EuYicpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc0luKG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBpbnZlcnRlZCBrZXlzIGFuZCB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICogSWYgYG9iamVjdGAgY29udGFpbnMgZHVwbGljYXRlIHZhbHVlcywgc3Vic2VxdWVudCB2YWx1ZXMgb3ZlcndyaXRlXG4gICAgICogcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZlcnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9O1xuICAgICAqXG4gICAgICogXy5pbnZlcnQob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogJ2MnLCAnMic6ICdiJyB9XG4gICAgICovXG4gICAgdmFyIGludmVydCA9IGNyZWF0ZUludmVydGVyKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiZcbiAgICAgICAgICB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICByZXN1bHRbdmFsdWVdID0ga2V5O1xuICAgIH0sIGNvbnN0YW50KGlkZW50aXR5KSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludmVydGAgZXhjZXB0IHRoYXQgdGhlIGludmVydGVkIG9iamVjdCBpcyBnZW5lcmF0ZWRcbiAgICAgKiBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmcgZWFjaCBlbGVtZW50IG9mIGBvYmplY3RgIHRocnUgYGl0ZXJhdGVlYC4gVGhlXG4gICAgICogY29ycmVzcG9uZGluZyBpbnZlcnRlZCB2YWx1ZSBvZiBlYWNoIGludmVydGVkIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzXG4gICAgICogcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlIGludmVydGVkIHZhbHVlLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZlcnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0Qnkob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9XG4gICAgICpcbiAgICAgKiBfLmludmVydEJ5KG9iamVjdCwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiAnZ3JvdXAnICsgdmFsdWU7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnZ3JvdXAxJzogWydhJywgJ2MnXSwgJ2dyb3VwMic6IFsnYiddIH1cbiAgICAgKi9cbiAgICB2YXIgaW52ZXJ0QnkgPSBjcmVhdGVJbnZlcnRlcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmXG4gICAgICAgICAgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFsdWUgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCB2YWx1ZSkpIHtcbiAgICAgICAgcmVzdWx0W3ZhbHVlXS5wdXNoKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRbdmFsdWVdID0gW2tleV07XG4gICAgICB9XG4gICAgfSwgZ2V0SXRlcmF0ZWUpO1xuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IFsxLCAyLCAzLCA0XSB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLmludm9rZShvYmplY3QsICdhWzBdLmIuYy5zbGljZScsIDEsIDMpO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqL1xuICAgIHZhciBpbnZva2UgPSBiYXNlUmVzdChiYXNlSW52b2tlKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAgICAgKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8ua2V5cyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiBfLmtleXMoJ2hpJyk7XG4gICAgICogLy8gPT4gWycwJywgJzEnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5rZXlzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24ga2V5c0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCwgdHJ1ZSkgOiBiYXNlS2V5c0luKG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLm1hcFZhbHVlc2A7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IHdpdGggdGhlXG4gICAgICogc2FtZSB2YWx1ZXMgYXMgYG9iamVjdGAgYW5kIGtleXMgZ2VuZXJhdGVkIGJ5IHJ1bm5pbmcgZWFjaCBvd24gZW51bWVyYWJsZVxuICAgICAqIHN0cmluZyBrZXllZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBvYmplY3QuXG4gICAgICogQHNlZSBfLm1hcFZhbHVlc1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcEtleXMoeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICByZXR1cm4ga2V5ICsgdmFsdWU7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnYTEnOiAxLCAnYjInOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBLZXlzKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpO1xuXG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iamVjdCksIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYXMgYG9iamVjdGAgYW5kIHZhbHVlcyBnZW5lcmF0ZWRcbiAgICAgKiBieSBydW5uaW5nIGVhY2ggb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5IG9mIGBvYmplY3RgIHRocnVcbiAgICAgKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICAgICAqIEBzZWUgXy5tYXBLZXlzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdmcmVkJzogICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5tYXBWYWx1ZXModXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlOyB9KTtcbiAgICAgKiAvLyA9PiB7ICdmcmVkJzogNDAsICdwZWJibGVzJzogMSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1hcFZhbHVlcyh1c2VycywgJ2FnZScpO1xuICAgICAqIC8vID0+IHsgJ2ZyZWQnOiA0MCwgJ3BlYmJsZXMnOiAxIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBWYWx1ZXMob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyk7XG5cbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBpdGVyYXRlZSh2YWx1ZSwga2V5LCBvYmplY3QpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgbWVyZ2VzIG93biBhbmRcbiAgICAgKiBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0cyBpbnRvIHRoZVxuICAgICAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIHByb3BlcnRpZXMgdGhhdCByZXNvbHZlIHRvIGB1bmRlZmluZWRgIGFyZVxuICAgICAqIHNraXBwZWQgaWYgYSBkZXN0aW5hdGlvbiB2YWx1ZSBleGlzdHMuIEFycmF5IGFuZCBwbGFpbiBvYmplY3QgcHJvcGVydGllc1xuICAgICAqIGFyZSBtZXJnZWQgcmVjdXJzaXZlbHkuIE90aGVyIG9iamVjdHMgYW5kIHZhbHVlIHR5cGVzIGFyZSBvdmVycmlkZGVuIGJ5XG4gICAgICogYXNzaWdubWVudC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LiBTdWJzZXF1ZW50XG4gICAgICogc291cmNlcyBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge1xuICAgICAqICAgJ2EnOiBbeyAnYic6IDIgfSwgeyAnZCc6IDQgfV1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIG90aGVyID0ge1xuICAgICAqICAgJ2EnOiBbeyAnYyc6IDMgfSwgeyAnZSc6IDUgfV1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5tZXJnZShvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiAyLCAnYyc6IDMgfSwgeyAnZCc6IDQsICdlJzogNSB9XSB9XG4gICAgICovXG4gICAgdmFyIG1lcmdlID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KSB7XG4gICAgICBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWVyZ2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBtZXJnZWQgdmFsdWVzIG9mIHRoZSBkZXN0aW5hdGlvbiBhbmQgc291cmNlXG4gICAgICogcHJvcGVydGllcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIG1lcmdpbmcgaXMgaGFuZGxlZCBieSB0aGVcbiAgICAgKiBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGggc2l4IGFyZ3VtZW50czpcbiAgICAgKiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjaykuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzQXJyYXkob2JqVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiBvYmpWYWx1ZS5jb25jYXQoc3JjVmFsdWUpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogWzFdLCAnYic6IFsyXSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiBbM10sICdiJzogWzRdIH07XG4gICAgICpcbiAgICAgKiBfLm1lcmdlV2l0aChvYmplY3QsIG90aGVyLCBjdXN0b21pemVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogWzEsIDNdLCAnYic6IFsyLCA0XSB9XG4gICAgICovXG4gICAgdmFyIG1lcmdlV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucGlja2A7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZVxuICAgICAqIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgcGF0aHMgb2YgYG9iamVjdGAgdGhhdCBhcmUgbm90IG9taXR0ZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgY29uc2lkZXJhYmx5IHNsb3dlciB0aGFuIGBfLnBpY2tgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gb21pdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ub21pdChvYmplY3QsIFsnYScsICdjJ10pO1xuICAgICAqIC8vID0+IHsgJ2InOiAnMicgfVxuICAgICAqL1xuICAgIHZhciBvbWl0ID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBwYXRocykge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgaXNEZWVwID0gZmFsc2U7XG4gICAgICBwYXRocyA9IGFycmF5TWFwKHBhdGhzLCBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgICBpc0RlZXAgfHwgKGlzRGVlcCA9IHBhdGgubGVuZ3RoID4gMSk7XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgfSk7XG4gICAgICBjb3B5T2JqZWN0KG9iamVjdCwgZ2V0QWxsS2V5c0luKG9iamVjdCksIHJlc3VsdCk7XG4gICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgIHJlc3VsdCA9IGJhc2VDbG9uZShyZXN1bHQsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX0ZMQVRfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9tT21pdENsb25lKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBwYXRocy5sZW5ndGg7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgYmFzZVVuc2V0KHJlc3VsdCwgcGF0aHNbbGVuZ3RoXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnBpY2tCeWA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mXG4gICAgICogdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYG9iamVjdGAgdGhhdFxuICAgICAqIGBwcmVkaWNhdGVgIGRvZXNuJ3QgcmV0dXJuIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHR3b1xuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBrZXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLm9taXRCeShvYmplY3QsIF8uaXNOdW1iZXIpO1xuICAgICAqIC8vID0+IHsgJ2InOiAnMicgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9taXRCeShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHBpY2tCeShvYmplY3QsIG5lZ2F0ZShnZXRJdGVyYXRlZShwcmVkaWNhdGUpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIHBpY2tlZCBgb2JqZWN0YCBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ucGljayhvYmplY3QsIFsnYScsICdjJ10pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIHZhciBwaWNrID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBwYXRocykge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8ge30gOiBiYXNlUGljayhvYmplY3QsIHBhdGhzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBgb2JqZWN0YCBwcm9wZXJ0aWVzIGBwcmVkaWNhdGVgIHJldHVybnNcbiAgICAgKiB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAodmFsdWUsIGtleSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ucGlja0J5KG9iamVjdCwgXy5pc051bWJlcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gcGlja0J5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgICAgdmFyIHByb3BzID0gYXJyYXlNYXAoZ2V0QWxsS2V5c0luKG9iamVjdCksIGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIFtwcm9wXTtcbiAgICAgIH0pO1xuICAgICAgcHJlZGljYXRlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlKTtcbiAgICAgIHJldHVybiBiYXNlUGlja0J5KG9iamVjdCwgcHJvcHMsIGZ1bmN0aW9uKHZhbHVlLCBwYXRoKSB7XG4gICAgICAgIHJldHVybiBwcmVkaWNhdGUodmFsdWUsIHBhdGhbMF0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5nZXRgIGV4Y2VwdCB0aGF0IGlmIHRoZSByZXNvbHZlZCB2YWx1ZSBpcyBhXG4gICAgICogZnVuY3Rpb24gaXQncyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGl0cyBwYXJlbnQgb2JqZWN0IGFuZFxuICAgICAqIGl0cyByZXN1bHQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byByZXNvbHZlLlxuICAgICAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYzEnOiAzLCAnYzInOiBfLmNvbnN0YW50KDQpIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMScpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMicpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMycsICdkZWZhdWx0Jyk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzMnLCBfLmNvbnN0YW50KCdkZWZhdWx0JykpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc3VsdChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gICAgICAvLyBFbnN1cmUgdGhlIGxvb3AgaXMgZW50ZXJlZCB3aGVuIHBhdGggaXMgZW1wdHkuXG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgICBvYmplY3QgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFt0b0tleShwYXRoW2luZGV4XSldO1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuICAgICAgICAgIHZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IGlzRnVuY3Rpb24odmFsdWUpID8gdmFsdWUuY2FsbChvYmplY3QpIDogdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgYSBwb3J0aW9uIG9mIGBwYXRoYCBkb2Vzbid0IGV4aXN0LFxuICAgICAqIGl0J3MgY3JlYXRlZC4gQXJyYXlzIGFyZSBjcmVhdGVkIGZvciBtaXNzaW5nIGluZGV4IHByb3BlcnRpZXMgd2hpbGUgb2JqZWN0c1xuICAgICAqIGFyZSBjcmVhdGVkIGZvciBhbGwgb3RoZXIgbWlzc2luZyBwcm9wZXJ0aWVzLiBVc2UgYF8uc2V0V2l0aGAgdG8gY3VzdG9taXplXG4gICAgICogYHBhdGhgIGNyZWF0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5zZXQob2JqZWN0LCAnYVswXS5iLmMnLCA0KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QuYVswXS5iLmMpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8uc2V0KG9iamVjdCwgWyd4JywgJzAnLCAneScsICd6J10sIDUpO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC54WzBdLnkueik7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldChvYmplY3QsIHBhdGgsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc2V0YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgb2JqZWN0cyBvZiBgcGF0aGAuICBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYFxuICAgICAqIHBhdGggY3JlYXRpb24gaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAobnNWYWx1ZSwga2V5LCBuc09iamVjdCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge307XG4gICAgICpcbiAgICAgKiBfLnNldFdpdGgob2JqZWN0LCAnWzBdWzFdJywgJ2EnLCBPYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzAnOiB7ICcxJzogJ2EnIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldFdpdGgob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZC12YWx1ZSBwYWlycyBmb3IgYG9iamVjdGBcbiAgICAgKiB3aGljaCBjYW4gYmUgY29uc3VtZWQgYnkgYF8uZnJvbVBhaXJzYC4gSWYgYG9iamVjdGAgaXMgYSBtYXAgb3Igc2V0LCBpdHNcbiAgICAgKiBlbnRyaWVzIGFyZSByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBlbnRyaWVzXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udG9QYWlycyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMV0sIFsnYicsIDJdXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIHZhciB0b1BhaXJzID0gY3JlYXRlVG9QYWlycyhrZXlzKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQtdmFsdWUgcGFpcnNcbiAgICAgKiBmb3IgYG9iamVjdGAgd2hpY2ggY2FuIGJlIGNvbnN1bWVkIGJ5IGBfLmZyb21QYWlyc2AuIElmIGBvYmplY3RgIGlzIGEgbWFwXG4gICAgICogb3Igc2V0LCBpdHMgZW50cmllcyBhcmUgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZW50cmllc0luXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udG9QYWlyc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxXSwgWydiJywgMl0sIFsnYycsIDNdXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIHZhciB0b1BhaXJzSW4gPSBjcmVhdGVUb1BhaXJzKGtleXNJbik7XG5cbiAgICAvKipcbiAgICAgKiBBbiBhbHRlcm5hdGl2ZSB0byBgXy5yZWR1Y2VgOyB0aGlzIG1ldGhvZCB0cmFuc2Zvcm1zIGBvYmplY3RgIHRvIGEgbmV3XG4gICAgICogYGFjY3VtdWxhdG9yYCBvYmplY3Qgd2hpY2ggaXMgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGVhY2ggb2YgaXRzIG93blxuICAgICAqIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgdGhydSBgaXRlcmF0ZWVgLCB3aXRoIGVhY2ggaW52b2NhdGlvblxuICAgICAqIHBvdGVudGlhbGx5IG11dGF0aW5nIHRoZSBgYWNjdW11bGF0b3JgIG9iamVjdC4gSWYgYGFjY3VtdWxhdG9yYCBpcyBub3RcbiAgICAgKiBwcm92aWRlZCwgYSBuZXcgb2JqZWN0IHdpdGggdGhlIHNhbWUgYFtbUHJvdG90eXBlXV1gIHdpbGwgYmUgdXNlZC4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOiAoYWNjdW11bGF0b3IsIHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBjdXN0b20gYWNjdW11bGF0b3IgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyYW5zZm9ybShbMiwgMywgNF0sIGZ1bmN0aW9uKHJlc3VsdCwgbikge1xuICAgICAqICAgcmVzdWx0LnB1c2gobiAqPSBuKTtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH0sIFtdKTtcbiAgICAgKiAvLyA9PiBbNCwgOV1cbiAgICAgKlxuICAgICAqIF8udHJhbnNmb3JtKHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9LCBmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIChyZXN1bHRbdmFsdWVdIHx8IChyZXN1bHRbdmFsdWVdID0gW10pKS5wdXNoKGtleSk7XG4gICAgICogfSwge30pO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmFuc2Zvcm0ob2JqZWN0LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgICAgICBpc0Fyckxpa2UgPSBpc0FyciB8fCBpc0J1ZmZlcihvYmplY3QpIHx8IGlzVHlwZWRBcnJheShvYmplY3QpO1xuXG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KTtcbiAgICAgIGlmIChhY2N1bXVsYXRvciA9PSBudWxsKSB7XG4gICAgICAgIHZhciBDdG9yID0gb2JqZWN0ICYmIG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgICAgICAgaWYgKGlzQXJyTGlrZSkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0gaXNBcnIgPyBuZXcgQ3RvciA6IFtdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IGlzRnVuY3Rpb24oQ3RvcikgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKSA6IHt9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIChpc0Fyckxpa2UgPyBhcnJheUVhY2ggOiBiYXNlRm9yT3duKShvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRlZShhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBvYmplY3QpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgcHJvcGVydHkgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gdW5zZXQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBwcm9wZXJ0eSBpcyBkZWxldGVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogNyB9IH1dIH07XG4gICAgICogXy51bnNldChvYmplY3QsICdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzoge30gfV0gfTtcbiAgICAgKlxuICAgICAqIF8udW5zZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiB7fSB9XSB9O1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuc2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdHJ1ZSA6IGJhc2VVbnNldChvYmplY3QsIHBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc2V0YCBleGNlcHQgdGhhdCBhY2NlcHRzIGB1cGRhdGVyYCB0byBwcm9kdWNlIHRoZVxuICAgICAqIHZhbHVlIHRvIHNldC4gVXNlIGBfLnVwZGF0ZVdpdGhgIHRvIGN1c3RvbWl6ZSBgcGF0aGAgY3JlYXRpb24uIFRoZSBgdXBkYXRlcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8udXBkYXRlKG9iamVjdCwgJ2FbMF0uYi5jJywgZnVuY3Rpb24obikgeyByZXR1cm4gbiAqIG47IH0pO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC5hWzBdLmIuYyk7XG4gICAgICogLy8gPT4gOVxuICAgICAqXG4gICAgICogXy51cGRhdGUob2JqZWN0LCAneFswXS55LnonLCBmdW5jdGlvbihuKSB7IHJldHVybiBuID8gbiArIDEgOiAwOyB9KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QueFswXS55LnopO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGUob2JqZWN0LCBwYXRoLCB1cGRhdGVyKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgY2FzdEZ1bmN0aW9uKHVwZGF0ZXIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVwZGF0ZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG9iamVjdHMgb2YgYHBhdGhgLiAgSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGBcbiAgICAgKiBwYXRoIGNyZWF0aW9uIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKG5zVmFsdWUsIGtleSwgbnNPYmplY3QpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7fTtcbiAgICAgKlxuICAgICAqIF8udXBkYXRlV2l0aChvYmplY3QsICdbMF1bMV0nLCBfLmNvbnN0YW50KCdhJyksIE9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMCc6IHsgJzEnOiAnYScgfSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlV2l0aChvYmplY3QsIHBhdGgsIHVwZGF0ZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCBjYXN0RnVuY3Rpb24odXBkYXRlciksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnZhbHVlcyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbMSwgMl0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIF8udmFsdWVzKCdoaScpO1xuICAgICAqIC8vID0+IFsnaCcsICdpJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWx1ZXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VWYWx1ZXMob2JqZWN0LCBrZXlzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5XG4gICAgICogdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy52YWx1ZXNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWx1ZXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZVZhbHVlcyhvYmplY3QsIGtleXNJbihvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDbGFtcHMgYG51bWJlcmAgd2l0aGluIHRoZSBpbmNsdXNpdmUgYGxvd2VyYCBhbmQgYHVwcGVyYCBib3VuZHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNsYW1wLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXJdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNsYW1wZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNsYW1wKC0xMCwgLTUsIDUpO1xuICAgICAqIC8vID0+IC01XG4gICAgICpcbiAgICAgKiBfLmNsYW1wKDEwLCAtNSwgNSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsYW1wKG51bWJlciwgbG93ZXIsIHVwcGVyKSB7XG4gICAgICBpZiAodXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB1cHBlciA9IGxvd2VyO1xuICAgICAgICBsb3dlciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmICh1cHBlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVwcGVyID0gdG9OdW1iZXIodXBwZXIpO1xuICAgICAgICB1cHBlciA9IHVwcGVyID09PSB1cHBlciA/IHVwcGVyIDogMDtcbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxvd2VyID0gdG9OdW1iZXIobG93ZXIpO1xuICAgICAgICBsb3dlciA9IGxvd2VyID09PSBsb3dlciA/IGxvd2VyIDogMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlQ2xhbXAodG9OdW1iZXIobnVtYmVyKSwgbG93ZXIsIHVwcGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYG5gIGlzIGJldHdlZW4gYHN0YXJ0YCBhbmQgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC4gSWZcbiAgICAgKiBgZW5kYCBpcyBub3Qgc3BlY2lmaWVkLCBpdCdzIHNldCB0byBgc3RhcnRgIHdpdGggYHN0YXJ0YCB0aGVuIHNldCB0byBgMGAuXG4gICAgICogSWYgYHN0YXJ0YCBpcyBncmVhdGVyIHRoYW4gYGVuZGAgdGhlIHBhcmFtcyBhcmUgc3dhcHBlZCB0byBzdXBwb3J0XG4gICAgICogbmVnYXRpdmUgcmFuZ2VzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMy4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG51bWJlcmAgaXMgaW4gdGhlIHJhbmdlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLnJhbmdlLCBfLnJhbmdlUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDMsIDIsIDQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg0LCA4KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNCwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgyLCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDEuMiwgMik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDUuMiwgNCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgtMywgLTIsIC02KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHN0YXJ0ID0gdG9GaW5pdGUoc3RhcnQpO1xuICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVuZCA9IHN0YXJ0O1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmQgPSB0b0Zpbml0ZShlbmQpO1xuICAgICAgfVxuICAgICAgbnVtYmVyID0gdG9OdW1iZXIobnVtYmVyKTtcbiAgICAgIHJldHVybiBiYXNlSW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2R1Y2VzIGEgcmFuZG9tIG51bWJlciBiZXR3ZWVuIHRoZSBpbmNsdXNpdmUgYGxvd2VyYCBhbmQgYHVwcGVyYCBib3VuZHMuXG4gICAgICogSWYgb25seSBvbmUgYXJndW1lbnQgaXMgcHJvdmlkZWQgYSBudW1iZXIgYmV0d2VlbiBgMGAgYW5kIHRoZSBnaXZlbiBudW1iZXJcbiAgICAgKiBpcyByZXR1cm5lZC4gSWYgYGZsb2F0aW5nYCBpcyBgdHJ1ZWAsIG9yIGVpdGhlciBgbG93ZXJgIG9yIGB1cHBlcmAgYXJlXG4gICAgICogZmxvYXRzLCBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBpcyByZXR1cm5lZCBpbnN0ZWFkIG9mIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSmF2YVNjcmlwdCBmb2xsb3dzIHRoZSBJRUVFLTc1NCBzdGFuZGFyZCBmb3IgcmVzb2x2aW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgdmFsdWVzIHdoaWNoIGNhbiBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjcuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyPTBdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3VwcGVyPTFdIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmbG9hdGluZ10gU3BlY2lmeSByZXR1cm5pbmcgYSBmbG9hdGluZy1wb2ludCBudW1iZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcmFuZG9tIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5kb20oMCwgNSk7XG4gICAgICogLy8gPT4gYW4gaW50ZWdlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDUpO1xuICAgICAqIC8vID0+IGFsc28gYW4gaW50ZWdlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDUsIHRydWUpO1xuICAgICAqIC8vID0+IGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oMS4yLCA1LjIpO1xuICAgICAqIC8vID0+IGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGJldHdlZW4gMS4yIGFuZCA1LjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByYW5kb20obG93ZXIsIHVwcGVyLCBmbG9hdGluZykge1xuICAgICAgaWYgKGZsb2F0aW5nICYmIHR5cGVvZiBmbG9hdGluZyAhPSAnYm9vbGVhbicgJiYgaXNJdGVyYXRlZUNhbGwobG93ZXIsIHVwcGVyLCBmbG9hdGluZykpIHtcbiAgICAgICAgdXBwZXIgPSBmbG9hdGluZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChmbG9hdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdXBwZXIgPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgZmxvYXRpbmcgPSB1cHBlcjtcbiAgICAgICAgICB1cHBlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgbG93ZXIgPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgZmxvYXRpbmcgPSBsb3dlcjtcbiAgICAgICAgICBsb3dlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGxvd2VyID09PSB1bmRlZmluZWQgJiYgdXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsb3dlciA9IDA7XG4gICAgICAgIHVwcGVyID0gMTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBsb3dlciA9IHRvRmluaXRlKGxvd2VyKTtcbiAgICAgICAgaWYgKHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB1cHBlciA9IGxvd2VyO1xuICAgICAgICAgIGxvd2VyID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1cHBlciA9IHRvRmluaXRlKHVwcGVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGxvd2VyID4gdXBwZXIpIHtcbiAgICAgICAgdmFyIHRlbXAgPSBsb3dlcjtcbiAgICAgICAgbG93ZXIgPSB1cHBlcjtcbiAgICAgICAgdXBwZXIgPSB0ZW1wO1xuICAgICAgfVxuICAgICAgaWYgKGZsb2F0aW5nIHx8IGxvd2VyICUgMSB8fCB1cHBlciAlIDEpIHtcbiAgICAgICAgdmFyIHJhbmQgPSBuYXRpdmVSYW5kb20oKTtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZU1pbihsb3dlciArIChyYW5kICogKHVwcGVyIC0gbG93ZXIgKyBmcmVlUGFyc2VGbG9hdCgnMWUtJyArICgocmFuZCArICcnKS5sZW5ndGggLSAxKSkpKSwgdXBwZXIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VSYW5kb20obG93ZXIsIHVwcGVyKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBbY2FtZWwgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2FtZWxDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNhbWVsIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICovXG4gICAgdmFyIGNhbWVsQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgd29yZCA9IHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyBjYXBpdGFsaXplKHdvcmQpIDogd29yZCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIHVwcGVyIGNhc2UgYW5kIHRoZSByZW1haW5pbmdcbiAgICAgKiB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNhcGl0YWxpemUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY2FwaXRhbGl6ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhcGl0YWxpemUoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnRnJlZCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZykge1xuICAgICAgcmV0dXJuIHVwcGVyRmlyc3QodG9TdHJpbmcoc3RyaW5nKS50b0xvd2VyQ2FzZSgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWJ1cnJzIGBzdHJpbmdgIGJ5IGNvbnZlcnRpbmdcbiAgICAgKiBbTGF0aW4tMSBTdXBwbGVtZW50XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXRpbi0xX1N1cHBsZW1lbnRfKFVuaWNvZGVfYmxvY2spI0NoYXJhY3Rlcl90YWJsZSlcbiAgICAgKiBhbmQgW0xhdGluIEV4dGVuZGVkLUFdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluX0V4dGVuZGVkLUEpXG4gICAgICogbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzIGFuZCByZW1vdmluZ1xuICAgICAqIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3NdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrcykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZGVidXJyLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGRlYnVycmVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWJ1cnIoJ2TDqWrDoCB2dScpO1xuICAgICAqIC8vID0+ICdkZWphIHZ1J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlYnVycihzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gc3RyaW5nICYmIHN0cmluZy5yZXBsYWNlKHJlTGF0aW4sIGRlYnVyckxldHRlcikucmVwbGFjZShyZUNvbWJvTWFyaywgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgc3RyaW5nYCBlbmRzIHdpdGggdGhlIGdpdmVuIHRhcmdldCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3RhcmdldF0gVGhlIHN0cmluZyB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcG9zaXRpb249c3RyaW5nLmxlbmd0aF0gVGhlIHBvc2l0aW9uIHRvIHNlYXJjaCB1cCB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHN0cmluZ2AgZW5kcyB3aXRoIGB0YXJnZXRgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2InLCAyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZW5kc1dpdGgoc3RyaW5nLCB0YXJnZXQsIHBvc2l0aW9uKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgdGFyZ2V0ID0gYmFzZVRvU3RyaW5nKHRhcmdldCk7XG5cbiAgICAgIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gbGVuZ3RoXG4gICAgICAgIDogYmFzZUNsYW1wKHRvSW50ZWdlcihwb3NpdGlvbiksIDAsIGxlbmd0aCk7XG5cbiAgICAgIHZhciBlbmQgPSBwb3NpdGlvbjtcbiAgICAgIHBvc2l0aW9uIC09IHRhcmdldC5sZW5ndGg7XG4gICAgICByZXR1cm4gcG9zaXRpb24gPj0gMCAmJiBzdHJpbmcuc2xpY2UocG9zaXRpb24sIGVuZCkgPT0gdGFyZ2V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBjaGFyYWN0ZXJzIFwiJlwiLCBcIjxcIiwgXCI+XCIsICdcIicsIGFuZCBcIidcIiBpbiBgc3RyaW5nYCB0byB0aGVpclxuICAgICAqIGNvcnJlc3BvbmRpbmcgSFRNTCBlbnRpdGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBObyBvdGhlciBjaGFyYWN0ZXJzIGFyZSBlc2NhcGVkLiBUbyBlc2NhcGUgYWRkaXRpb25hbFxuICAgICAqIGNoYXJhY3RlcnMgdXNlIGEgdGhpcmQtcGFydHkgbGlicmFyeSBsaWtlIFtfaGVfXShodHRwczovL210aHMuYmUvaGUpLlxuICAgICAqXG4gICAgICogVGhvdWdoIHRoZSBcIj5cIiBjaGFyYWN0ZXIgaXMgZXNjYXBlZCBmb3Igc3ltbWV0cnksIGNoYXJhY3RlcnMgbGlrZVxuICAgICAqIFwiPlwiIGFuZCBcIi9cIiBkb24ndCBuZWVkIGVzY2FwaW5nIGluIEhUTUwgYW5kIGhhdmUgbm8gc3BlY2lhbCBtZWFuaW5nXG4gICAgICogdW5sZXNzIHRoZXkncmUgcGFydCBvZiBhIHRhZyBvciB1bnF1b3RlZCBhdHRyaWJ1dGUgdmFsdWUuIFNlZVxuICAgICAqIFtNYXRoaWFzIEJ5bmVucydzIGFydGljbGVdKGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9hbWJpZ3VvdXMtYW1wZXJzYW5kcylcbiAgICAgKiAodW5kZXIgXCJzZW1pLXJlbGF0ZWQgZnVuIGZhY3RcIikgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIFdoZW4gd29ya2luZyB3aXRoIEhUTUwgeW91IHNob3VsZCBhbHdheXNcbiAgICAgKiBbcXVvdGUgYXR0cmlidXRlIHZhbHVlc10oaHR0cDovL3dvbmtvLmNvbS9wb3N0L2h0bWwtZXNjYXBpbmcpIHRvIHJlZHVjZVxuICAgICAqIFhTUyB2ZWN0b3JzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lc2NhcGUoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlc2NhcGUoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNVbmVzY2FwZWRIdG1sLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZVVuZXNjYXBlZEh0bWwsIGVzY2FwZUh0bWxDaGFyKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFc2NhcGVzIHRoZSBgUmVnRXhwYCBzcGVjaWFsIGNoYXJhY3RlcnMgXCJeXCIsIFwiJFwiLCBcIlxcXCIsIFwiLlwiLCBcIipcIiwgXCIrXCIsXG4gICAgICogXCI/XCIsIFwiKFwiLCBcIilcIiwgXCJbXCIsIFwiXVwiLCBcIntcIiwgXCJ9XCIsIGFuZCBcInxcIiBpbiBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBlc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXNjYXBlUmVnRXhwKCdbbG9kYXNoXShodHRwczovL2xvZGFzaC5jb20vKScpO1xuICAgICAqIC8vID0+ICdcXFtsb2Rhc2hcXF1cXChodHRwczovL2xvZGFzaFxcLmNvbS9cXCknXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXNjYXBlUmVnRXhwKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzUmVnRXhwQ2hhci50ZXN0KHN0cmluZykpXG4gICAgICAgID8gc3RyaW5nLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBba2ViYWIgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGV0dGVyX2Nhc2UjU3BlY2lhbF9jYXNlX3N0eWxlcykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBrZWJhYiBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKi9cbiAgICB2YXIga2ViYWJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJy0nIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIHNwYWNlIHNlcGFyYXRlZCB3b3JkcywgdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGxvd2VyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJy0tRm9vLUJhci0tJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKi9cbiAgICB2YXIgbG93ZXJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sb3dlckZpcnN0KCdGcmVkJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiBfLmxvd2VyRmlyc3QoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnZlJFRCdcbiAgICAgKi9cbiAgICB2YXIgbG93ZXJGaXJzdCA9IGNyZWF0ZUNhc2VGaXJzdCgndG9Mb3dlckNhc2UnKTtcblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIGxlZnQgYW5kIHJpZ2h0IHNpZGVzIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLlxuICAgICAqIFBhZGRpbmcgY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgY2FuJ3QgYmUgZXZlbmx5IGRpdmlkZWQgYnkgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDgpO1xuICAgICAqIC8vID0+ICcgIGFiYyAgICdcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCA4LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnXy1hYmNfLV8nXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgaWYgKCFsZW5ndGggfHwgc3RyTGVuZ3RoID49IGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIG1pZCA9IChsZW5ndGggLSBzdHJMZW5ndGgpIC8gMjtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGNyZWF0ZVBhZGRpbmcobmF0aXZlRmxvb3IobWlkKSwgY2hhcnMpICtcbiAgICAgICAgc3RyaW5nICtcbiAgICAgICAgY3JlYXRlUGFkZGluZyhuYXRpdmVDZWlsKG1pZCksIGNoYXJzKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSByaWdodCBzaWRlIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLiBQYWRkaW5nXG4gICAgICogY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgZXhjZWVkIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCA2KTtcbiAgICAgKiAvLyA9PiAnYWJjICAgJ1xuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDYsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmNfLV8nXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWRFbmQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgcmV0dXJuIChsZW5ndGggJiYgc3RyTGVuZ3RoIDwgbGVuZ3RoKVxuICAgICAgICA/IChzdHJpbmcgKyBjcmVhdGVQYWRkaW5nKGxlbmd0aCAtIHN0ckxlbmd0aCwgY2hhcnMpKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSBsZWZ0IHNpZGUgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuIFBhZGRpbmdcbiAgICAgKiBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBleGNlZWQgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgNik7XG4gICAgICogLy8gPT4gJyAgIGFiYydcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDYsICdfLScpO1xuICAgICAqIC8vID0+ICdfLV9hYmMnXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZFN0YXJ0KHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIHJldHVybiAobGVuZ3RoICYmIHN0ckxlbmd0aCA8IGxlbmd0aClcbiAgICAgICAgPyAoY3JlYXRlUGFkZGluZyhsZW5ndGggLSBzdHJMZW5ndGgsIGNoYXJzKSArIHN0cmluZylcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gaW50ZWdlciBvZiB0aGUgc3BlY2lmaWVkIHJhZGl4LiBJZiBgcmFkaXhgIGlzXG4gICAgICogYHVuZGVmaW5lZGAgb3IgYDBgLCBhIGByYWRpeGAgb2YgYDEwYCBpcyB1c2VkIHVubGVzcyBgdmFsdWVgIGlzIGFcbiAgICAgKiBoZXhhZGVjaW1hbCwgaW4gd2hpY2ggY2FzZSBhIGByYWRpeGAgb2YgYDE2YCBpcyB1c2VkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGFsaWducyB3aXRoIHRoZVxuICAgICAqIFtFUzUgaW1wbGVtZW50YXRpb25dKGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjEuMi4yKSBvZiBgcGFyc2VJbnRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMS4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcmFkaXg9MTBdIFRoZSByYWRpeCB0byBpbnRlcnByZXQgYHZhbHVlYCBieS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhcnNlSW50KCcwOCcpO1xuICAgICAqIC8vID0+IDhcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICcwOCcsICcxMCddLCBfLnBhcnNlSW50KTtcbiAgICAgKiAvLyA9PiBbNiwgOCwgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFyc2VJbnQoc3RyaW5nLCByYWRpeCwgZ3VhcmQpIHtcbiAgICAgIGlmIChndWFyZCB8fCByYWRpeCA9PSBudWxsKSB7XG4gICAgICAgIHJhZGl4ID0gMDtcbiAgICAgIH0gZWxzZSBpZiAocmFkaXgpIHtcbiAgICAgICAgcmFkaXggPSArcmFkaXg7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlUGFyc2VJbnQodG9TdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlVHJpbVN0YXJ0LCAnJyksIHJhZGl4IHx8IDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcGVhdHMgdGhlIGdpdmVuIHN0cmluZyBgbmAgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcmVwZWF0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgc3RyaW5nLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmVwZWF0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnKicsIDMpO1xuICAgICAqIC8vID0+ICcqKionXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnYWJjJywgMik7XG4gICAgICogLy8gPT4gJ2FiY2FiYydcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCdhYmMnLCAwKTtcbiAgICAgKiAvLyA9PiAnJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlcGVhdChzdHJpbmcsIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBuLCBndWFyZCkgOiBuID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIG4gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlUmVwZWF0KHRvU3RyaW5nKHN0cmluZyksIG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2VzIG1hdGNoZXMgZm9yIGBwYXR0ZXJuYCBpbiBgc3RyaW5nYCB3aXRoIGByZXBsYWNlbWVudGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYFN0cmluZyNyZXBsYWNlYF0oaHR0cHM6Ly9tZG4uaW8vU3RyaW5nL3JlcGxhY2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IHBhdHRlcm4gVGhlIHBhdHRlcm4gdG8gcmVwbGFjZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gcmVwbGFjZW1lbnQgVGhlIG1hdGNoIHJlcGxhY2VtZW50LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIG1vZGlmaWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yZXBsYWNlKCdIaSBGcmVkJywgJ0ZyZWQnLCAnQmFybmV5Jyk7XG4gICAgICogLy8gPT4gJ0hpIEJhcm5leSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXBsYWNlKCkge1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgc3RyaW5nID0gdG9TdHJpbmcoYXJnc1swXSk7XG5cbiAgICAgIHJldHVybiBhcmdzLmxlbmd0aCA8IDMgPyBzdHJpbmcgOiBzdHJpbmcucmVwbGFjZShhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtzbmFrZSBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TbmFrZV9jYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNuYWtlIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCctLUZPTy1CQVItLScpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqL1xuICAgIHZhciBzbmFrZUNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnXycgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBTcGxpdHMgYHN0cmluZ2AgYnkgYHNlcGFyYXRvcmAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYFN0cmluZyNzcGxpdGBdKGh0dHBzOi8vbWRuLmlvL1N0cmluZy9zcGxpdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gc3BsaXQuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBzZXBhcmF0b3IgVGhlIHNlcGFyYXRvciBwYXR0ZXJuIHRvIHNwbGl0IGJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGltaXRdIFRoZSBsZW5ndGggdG8gdHJ1bmNhdGUgcmVzdWx0cyB0by5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHN0cmluZyBzZWdtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zcGxpdCgnYS1iLWMnLCAnLScsIDIpO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzcGxpdChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIGlmIChsaW1pdCAmJiB0eXBlb2YgbGltaXQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KSkge1xuICAgICAgICBzZXBhcmF0b3IgPSBsaW1pdCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGxpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9BUlJBWV9MRU5HVEggOiBsaW1pdCA+Pj4gMDtcbiAgICAgIGlmICghbGltaXQpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKFxuICAgICAgICAgICAgdHlwZW9mIHNlcGFyYXRvciA9PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICAgKHNlcGFyYXRvciAhPSBudWxsICYmICFpc1JlZ0V4cChzZXBhcmF0b3IpKVxuICAgICAgICAgICkpIHtcbiAgICAgICAgc2VwYXJhdG9yID0gYmFzZVRvU3RyaW5nKHNlcGFyYXRvcik7XG4gICAgICAgIGlmICghc2VwYXJhdG9yICYmIGhhc1VuaWNvZGUoc3RyaW5nKSkge1xuICAgICAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyaW5nVG9BcnJheShzdHJpbmcpLCAwLCBsaW1pdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHJpbmcuc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBbc3RhcnQgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGV0dGVyX2Nhc2UjU3R5bGlzdGljX29yX3NwZWNpYWxpc2VkX3VzYWdlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0YXJ0IGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJ0ZvbyBCYXInXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZvbyBCYXInXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKi9cbiAgICB2YXIgc3RhcnRDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgdXBwZXJGaXJzdCh3b3JkKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgc3RyaW5nYCBzdGFydHMgd2l0aCB0aGUgZ2l2ZW4gdGFyZ2V0IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdGFyZ2V0XSBUaGUgc3RyaW5nIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwb3NpdGlvbj0wXSBUaGUgcG9zaXRpb24gdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBzdHJpbmdgIHN0YXJ0cyB3aXRoIGB0YXJnZXRgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2InLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhcnRzV2l0aChzdHJpbmcsIHRhcmdldCwgcG9zaXRpb24pIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uID09IG51bGxcbiAgICAgICAgPyAwXG4gICAgICAgIDogYmFzZUNsYW1wKHRvSW50ZWdlcihwb3NpdGlvbiksIDAsIHN0cmluZy5sZW5ndGgpO1xuXG4gICAgICB0YXJnZXQgPSBiYXNlVG9TdHJpbmcodGFyZ2V0KTtcbiAgICAgIHJldHVybiBzdHJpbmcuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgdGFyZ2V0Lmxlbmd0aCkgPT0gdGFyZ2V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjb21waWxlZCB0ZW1wbGF0ZSBmdW5jdGlvbiB0aGF0IGNhbiBpbnRlcnBvbGF0ZSBkYXRhIHByb3BlcnRpZXNcbiAgICAgKiBpbiBcImludGVycG9sYXRlXCIgZGVsaW1pdGVycywgSFRNTC1lc2NhcGUgaW50ZXJwb2xhdGVkIGRhdGEgcHJvcGVydGllcyBpblxuICAgICAqIFwiZXNjYXBlXCIgZGVsaW1pdGVycywgYW5kIGV4ZWN1dGUgSmF2YVNjcmlwdCBpbiBcImV2YWx1YXRlXCIgZGVsaW1pdGVycy4gRGF0YVxuICAgICAqIHByb3BlcnRpZXMgbWF5IGJlIGFjY2Vzc2VkIGFzIGZyZWUgdmFyaWFibGVzIGluIHRoZSB0ZW1wbGF0ZS4gSWYgYSBzZXR0aW5nXG4gICAgICogb2JqZWN0IGlzIGdpdmVuLCBpdCB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgYF8udGVtcGxhdGVTZXR0aW5nc2AgdmFsdWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEluIHRoZSBkZXZlbG9wbWVudCBidWlsZCBgXy50ZW1wbGF0ZWAgdXRpbGl6ZXNcbiAgICAgKiBbc291cmNlVVJMc10oaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvZGV2ZWxvcGVydG9vbHMvc291cmNlbWFwcy8jdG9jLXNvdXJjZXVybClcbiAgICAgKiBmb3IgZWFzaWVyIGRlYnVnZ2luZy5cbiAgICAgKlxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHByZWNvbXBpbGluZyB0ZW1wbGF0ZXMgc2VlXG4gICAgICogW2xvZGFzaCdzIGN1c3RvbSBidWlsZHMgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9sb2Rhc2guY29tL2N1c3RvbS1idWlsZHMpLlxuICAgICAqXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gQ2hyb21lIGV4dGVuc2lvbiBzYW5kYm94ZXMgc2VlXG4gICAgICogW0Nocm9tZSdzIGV4dGVuc2lvbnMgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9leHRlbnNpb25zL3NhbmRib3hpbmdFdmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHRlbXBsYXRlIHN0cmluZy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXNjYXBlPV8udGVtcGxhdGVTZXR0aW5ncy5lc2NhcGVdXG4gICAgICogIFRoZSBIVE1MIFwiZXNjYXBlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5ldmFsdWF0ZT1fLnRlbXBsYXRlU2V0dGluZ3MuZXZhbHVhdGVdXG4gICAgICogIFRoZSBcImV2YWx1YXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5pbXBvcnRzPV8udGVtcGxhdGVTZXR0aW5ncy5pbXBvcnRzXVxuICAgICAqICBBbiBvYmplY3QgdG8gaW1wb3J0IGludG8gdGhlIHRlbXBsYXRlIGFzIGZyZWUgdmFyaWFibGVzLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5pbnRlcnBvbGF0ZT1fLnRlbXBsYXRlU2V0dGluZ3MuaW50ZXJwb2xhdGVdXG4gICAgICogIFRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5zb3VyY2VVUkw9J2xvZGFzaC50ZW1wbGF0ZVNvdXJjZXNbbl0nXVxuICAgICAqICBUaGUgc291cmNlVVJMIG9mIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudmFyaWFibGU9J29iaiddXG4gICAgICogIFRoZSBkYXRhIG9iamVjdCB2YXJpYWJsZSBuYW1lLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjb21waWxlZCB0ZW1wbGF0ZSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyIHRvIGNyZWF0ZSBhIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIDwlPSB1c2VyICU+IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnZnJlZCcgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBIVE1MIFwiZXNjYXBlXCIgZGVsaW1pdGVyIHRvIGVzY2FwZSBkYXRhIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8Yj48JS0gdmFsdWUgJT48L2I+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndmFsdWUnOiAnPHNjcmlwdD4nIH0pO1xuICAgICAqIC8vID0+ICc8Yj4mbHQ7c2NyaXB0Jmd0OzwvYj4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXIgdG8gZXhlY3V0ZSBKYXZhU2NyaXB0IGFuZCBnZW5lcmF0ZSBIVE1MLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlIF8uZm9yRWFjaCh1c2VycywgZnVuY3Rpb24odXNlcikgeyAlPjxsaT48JS0gdXNlciAlPjwvbGk+PCUgfSk7ICU+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcnMnOiBbJ2ZyZWQnLCAnYmFybmV5J10gfSk7XG4gICAgICogLy8gPT4gJzxsaT5mcmVkPC9saT48bGk+YmFybmV5PC9saT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGludGVybmFsIGBwcmludGAgZnVuY3Rpb24gaW4gXCJldmFsdWF0ZVwiIGRlbGltaXRlcnMuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCUgcHJpbnQoXCJoZWxsbyBcIiArIHVzZXIpOyAlPiEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ2Jhcm5leScgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGJhcm5leSEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIEVTIHRlbXBsYXRlIGxpdGVyYWwgZGVsaW1pdGVyIGFzIGFuIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogLy8gRGlzYWJsZSBzdXBwb3J0IGJ5IHJlcGxhY2luZyB0aGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyAkeyB1c2VyIH0hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdwZWJibGVzJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gcGViYmxlcyEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgYmFja3NsYXNoZXMgdG8gdHJlYXQgZGVsaW1pdGVycyBhcyBwbGFpbiB0ZXh0LlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlPSBcIlxcXFw8JS0gdmFsdWUgJVxcXFw+XCIgJT4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd2YWx1ZSc6ICdpZ25vcmVkJyB9KTtcbiAgICAgKiAvLyA9PiAnPCUtIHZhbHVlICU+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgaW1wb3J0c2Agb3B0aW9uIHRvIGltcG9ydCBgalF1ZXJ5YCBhcyBganFgLlxuICAgICAqIHZhciB0ZXh0ID0gJzwlIGpxLmVhY2godXNlcnMsIGZ1bmN0aW9uKHVzZXIpIHsgJT48bGk+PCUtIHVzZXIgJT48L2xpPjwlIH0pOyAlPic7XG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSh0ZXh0LCB7ICdpbXBvcnRzJzogeyAnanEnOiBqUXVlcnkgfSB9KTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2Vycyc6IFsnZnJlZCcsICdiYXJuZXknXSB9KTtcbiAgICAgKiAvLyA9PiAnPGxpPmZyZWQ8L2xpPjxsaT5iYXJuZXk8L2xpPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHNvdXJjZVVSTGAgb3B0aW9uIHRvIHNwZWNpZnkgYSBjdXN0b20gc291cmNlVVJMIGZvciB0aGUgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gPCU9IHVzZXIgJT4hJywgeyAnc291cmNlVVJMJzogJy9iYXNpYy9ncmVldGluZy5qc3QnIH0pO1xuICAgICAqIGNvbXBpbGVkKGRhdGEpO1xuICAgICAqIC8vID0+IEZpbmQgdGhlIHNvdXJjZSBvZiBcImdyZWV0aW5nLmpzdFwiIHVuZGVyIHRoZSBTb3VyY2VzIHRhYiBvciBSZXNvdXJjZXMgcGFuZWwgb2YgdGhlIHdlYiBpbnNwZWN0b3IuXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGB2YXJpYWJsZWAgb3B0aW9uIHRvIGVuc3VyZSBhIHdpdGgtc3RhdGVtZW50IGlzbid0IHVzZWQgaW4gdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hpIDwlPSBkYXRhLnVzZXIgJT4hJywgeyAndmFyaWFibGUnOiAnZGF0YScgfSk7XG4gICAgICogY29tcGlsZWQuc291cmNlO1xuICAgICAqIC8vID0+IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgKiAvLyAgIHZhciBfX3QsIF9fcCA9ICcnO1xuICAgICAqIC8vICAgX19wICs9ICdoaSAnICsgKChfX3QgPSAoIGRhdGEudXNlciApKSA9PSBudWxsID8gJycgOiBfX3QpICsgJyEnO1xuICAgICAqIC8vICAgcmV0dXJuIF9fcDtcbiAgICAgKiAvLyB9XG4gICAgICpcbiAgICAgKiAvLyBVc2UgY3VzdG9tIHRlbXBsYXRlIGRlbGltaXRlcnMuXG4gICAgICogXy50ZW1wbGF0ZVNldHRpbmdzLmludGVycG9sYXRlID0gL3t7KFtcXHNcXFNdKz8pfX0vZztcbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyB7eyB1c2VyIH19IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnbXVzdGFjaGUnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBtdXN0YWNoZSEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBzb3VyY2VgIHByb3BlcnR5IHRvIGlubGluZSBjb21waWxlZCB0ZW1wbGF0ZXMgZm9yIG1lYW5pbmdmdWxcbiAgICAgKiAvLyBsaW5lIG51bWJlcnMgaW4gZXJyb3IgbWVzc2FnZXMgYW5kIHN0YWNrIHRyYWNlcy5cbiAgICAgKiBmcy53cml0ZUZpbGVTeW5jKHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAnanN0LmpzJyksICdcXFxuICAgICAqICAgdmFyIEpTVCA9IHtcXFxuICAgICAqICAgICBcIm1haW5cIjogJyArIF8udGVtcGxhdGUobWFpblRleHQpLnNvdXJjZSArICdcXFxuICAgICAqICAgfTtcXFxuICAgICAqICcpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRlbXBsYXRlKHN0cmluZywgb3B0aW9ucywgZ3VhcmQpIHtcbiAgICAgIC8vIEJhc2VkIG9uIEpvaG4gUmVzaWcncyBgdG1wbGAgaW1wbGVtZW50YXRpb25cbiAgICAgIC8vIChodHRwOi8vZWpvaG4ub3JnL2Jsb2cvamF2YXNjcmlwdC1taWNyby10ZW1wbGF0aW5nLylcbiAgICAgIC8vIGFuZCBMYXVyYSBEb2t0b3JvdmEncyBkb1QuanMgKGh0dHBzOi8vZ2l0aHViLmNvbS9vbGFkby9kb1QpLlxuICAgICAgdmFyIHNldHRpbmdzID0gbG9kYXNoLnRlbXBsYXRlU2V0dGluZ3M7XG5cbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIG9wdGlvbnMsIGd1YXJkKSkge1xuICAgICAgICBvcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIG9wdGlvbnMgPSBhc3NpZ25JbldpdGgoe30sIG9wdGlvbnMsIHNldHRpbmdzLCBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKTtcblxuICAgICAgdmFyIGltcG9ydHMgPSBhc3NpZ25JbldpdGgoe30sIG9wdGlvbnMuaW1wb3J0cywgc2V0dGluZ3MuaW1wb3J0cywgY3VzdG9tRGVmYXVsdHNBc3NpZ25JbiksXG4gICAgICAgICAgaW1wb3J0c0tleXMgPSBrZXlzKGltcG9ydHMpLFxuICAgICAgICAgIGltcG9ydHNWYWx1ZXMgPSBiYXNlVmFsdWVzKGltcG9ydHMsIGltcG9ydHNLZXlzKTtcblxuICAgICAgdmFyIGlzRXNjYXBpbmcsXG4gICAgICAgICAgaXNFdmFsdWF0aW5nLFxuICAgICAgICAgIGluZGV4ID0gMCxcbiAgICAgICAgICBpbnRlcnBvbGF0ZSA9IG9wdGlvbnMuaW50ZXJwb2xhdGUgfHwgcmVOb01hdGNoLFxuICAgICAgICAgIHNvdXJjZSA9IFwiX19wICs9ICdcIjtcblxuICAgICAgLy8gQ29tcGlsZSB0aGUgcmVnZXhwIHRvIG1hdGNoIGVhY2ggZGVsaW1pdGVyLlxuICAgICAgdmFyIHJlRGVsaW1pdGVycyA9IFJlZ0V4cChcbiAgICAgICAgKG9wdGlvbnMuZXNjYXBlIHx8IHJlTm9NYXRjaCkuc291cmNlICsgJ3wnICtcbiAgICAgICAgaW50ZXJwb2xhdGUuc291cmNlICsgJ3wnICtcbiAgICAgICAgKGludGVycG9sYXRlID09PSByZUludGVycG9sYXRlID8gcmVFc1RlbXBsYXRlIDogcmVOb01hdGNoKS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICAob3B0aW9ucy5ldmFsdWF0ZSB8fCByZU5vTWF0Y2gpLnNvdXJjZSArICd8JCdcbiAgICAgICwgJ2cnKTtcblxuICAgICAgLy8gVXNlIGEgc291cmNlVVJMIGZvciBlYXNpZXIgZGVidWdnaW5nLlxuICAgICAgLy8gVGhlIHNvdXJjZVVSTCBnZXRzIGluamVjdGVkIGludG8gdGhlIHNvdXJjZSB0aGF0J3MgZXZhbC1lZCwgc28gYmUgY2FyZWZ1bFxuICAgICAgLy8gdG8gbm9ybWFsaXplIGFsbCBraW5kcyBvZiB3aGl0ZXNwYWNlLCBzbyBlLmcuIG5ld2xpbmVzIChhbmQgdW5pY29kZSB2ZXJzaW9ucyBvZiBpdCkgY2FuJ3Qgc25lYWsgaW5cbiAgICAgIC8vIGFuZCBlc2NhcGUgdGhlIGNvbW1lbnQsIHRodXMgaW5qZWN0aW5nIGNvZGUgdGhhdCBnZXRzIGV2YWxlZC5cbiAgICAgIHZhciBzb3VyY2VVUkwgPSAnLy8jIHNvdXJjZVVSTD0nICtcbiAgICAgICAgKGhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucywgJ3NvdXJjZVVSTCcpXG4gICAgICAgICAgPyAob3B0aW9ucy5zb3VyY2VVUkwgKyAnJykucmVwbGFjZSgvXFxzL2csICcgJylcbiAgICAgICAgICA6ICgnbG9kYXNoLnRlbXBsYXRlU291cmNlc1snICsgKCsrdGVtcGxhdGVDb3VudGVyKSArICddJylcbiAgICAgICAgKSArICdcXG4nO1xuXG4gICAgICBzdHJpbmcucmVwbGFjZShyZURlbGltaXRlcnMsIGZ1bmN0aW9uKG1hdGNoLCBlc2NhcGVWYWx1ZSwgaW50ZXJwb2xhdGVWYWx1ZSwgZXNUZW1wbGF0ZVZhbHVlLCBldmFsdWF0ZVZhbHVlLCBvZmZzZXQpIHtcbiAgICAgICAgaW50ZXJwb2xhdGVWYWx1ZSB8fCAoaW50ZXJwb2xhdGVWYWx1ZSA9IGVzVGVtcGxhdGVWYWx1ZSk7XG5cbiAgICAgICAgLy8gRXNjYXBlIGNoYXJhY3RlcnMgdGhhdCBjYW4ndCBiZSBpbmNsdWRlZCBpbiBzdHJpbmcgbGl0ZXJhbHMuXG4gICAgICAgIHNvdXJjZSArPSBzdHJpbmcuc2xpY2UoaW5kZXgsIG9mZnNldCkucmVwbGFjZShyZVVuZXNjYXBlZFN0cmluZywgZXNjYXBlU3RyaW5nQ2hhcik7XG5cbiAgICAgICAgLy8gUmVwbGFjZSBkZWxpbWl0ZXJzIHdpdGggc25pcHBldHMuXG4gICAgICAgIGlmIChlc2NhcGVWYWx1ZSkge1xuICAgICAgICAgIGlzRXNjYXBpbmcgPSB0cnVlO1xuICAgICAgICAgIHNvdXJjZSArPSBcIicgK1xcbl9fZShcIiArIGVzY2FwZVZhbHVlICsgXCIpICtcXG4nXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2YWx1YXRlVmFsdWUpIHtcbiAgICAgICAgICBpc0V2YWx1YXRpbmcgPSB0cnVlO1xuICAgICAgICAgIHNvdXJjZSArPSBcIic7XFxuXCIgKyBldmFsdWF0ZVZhbHVlICsgXCI7XFxuX19wICs9ICdcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW50ZXJwb2xhdGVWYWx1ZSkge1xuICAgICAgICAgIHNvdXJjZSArPSBcIicgK1xcbigoX190ID0gKFwiICsgaW50ZXJwb2xhdGVWYWx1ZSArIFwiKSkgPT0gbnVsbCA/ICcnIDogX190KSArXFxuJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gb2Zmc2V0ICsgbWF0Y2gubGVuZ3RoO1xuXG4gICAgICAgIC8vIFRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgcHJvZHVjdHMgbmVlZHMgYG1hdGNoYCByZXR1cm5lZCBpblxuICAgICAgICAvLyBvcmRlciB0byBwcm9kdWNlIHRoZSBjb3JyZWN0IGBvZmZzZXRgIHZhbHVlLlxuICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICB9KTtcblxuICAgICAgc291cmNlICs9IFwiJztcXG5cIjtcblxuICAgICAgLy8gSWYgYHZhcmlhYmxlYCBpcyBub3Qgc3BlY2lmaWVkIHdyYXAgYSB3aXRoLXN0YXRlbWVudCBhcm91bmQgdGhlIGdlbmVyYXRlZFxuICAgICAgLy8gY29kZSB0byBhZGQgdGhlIGRhdGEgb2JqZWN0IHRvIHRoZSB0b3Agb2YgdGhlIHNjb3BlIGNoYWluLlxuICAgICAgdmFyIHZhcmlhYmxlID0gaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb25zLCAndmFyaWFibGUnKSAmJiBvcHRpb25zLnZhcmlhYmxlO1xuICAgICAgaWYgKCF2YXJpYWJsZSkge1xuICAgICAgICBzb3VyY2UgPSAnd2l0aCAob2JqKSB7XFxuJyArIHNvdXJjZSArICdcXG59XFxuJztcbiAgICAgIH1cbiAgICAgIC8vIFRocm93IGFuIGVycm9yIGlmIGEgZm9yYmlkZGVuIGNoYXJhY3RlciB3YXMgZm91bmQgaW4gYHZhcmlhYmxlYCwgdG8gcHJldmVudFxuICAgICAgLy8gcG90ZW50aWFsIGNvbW1hbmQgaW5qZWN0aW9uIGF0dGFja3MuXG4gICAgICBlbHNlIGlmIChyZUZvcmJpZGRlbklkZW50aWZpZXJDaGFycy50ZXN0KHZhcmlhYmxlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoSU5WQUxJRF9URU1QTF9WQVJfRVJST1JfVEVYVCk7XG4gICAgICB9XG5cbiAgICAgIC8vIENsZWFudXAgY29kZSBieSBzdHJpcHBpbmcgZW1wdHkgc3RyaW5ncy5cbiAgICAgIHNvdXJjZSA9IChpc0V2YWx1YXRpbmcgPyBzb3VyY2UucmVwbGFjZShyZUVtcHR5U3RyaW5nTGVhZGluZywgJycpIDogc291cmNlKVxuICAgICAgICAucmVwbGFjZShyZUVtcHR5U3RyaW5nTWlkZGxlLCAnJDEnKVxuICAgICAgICAucmVwbGFjZShyZUVtcHR5U3RyaW5nVHJhaWxpbmcsICckMTsnKTtcblxuICAgICAgLy8gRnJhbWUgY29kZSBhcyB0aGUgZnVuY3Rpb24gYm9keS5cbiAgICAgIHNvdXJjZSA9ICdmdW5jdGlvbignICsgKHZhcmlhYmxlIHx8ICdvYmonKSArICcpIHtcXG4nICtcbiAgICAgICAgKHZhcmlhYmxlXG4gICAgICAgICAgPyAnJ1xuICAgICAgICAgIDogJ29iaiB8fCAob2JqID0ge30pO1xcbidcbiAgICAgICAgKSArXG4gICAgICAgIFwidmFyIF9fdCwgX19wID0gJydcIiArXG4gICAgICAgIChpc0VzY2FwaW5nXG4gICAgICAgICAgID8gJywgX19lID0gXy5lc2NhcGUnXG4gICAgICAgICAgIDogJydcbiAgICAgICAgKSArXG4gICAgICAgIChpc0V2YWx1YXRpbmdcbiAgICAgICAgICA/ICcsIF9faiA9IEFycmF5LnByb3RvdHlwZS5qb2luO1xcbicgK1xuICAgICAgICAgICAgXCJmdW5jdGlvbiBwcmludCgpIHsgX19wICs9IF9fai5jYWxsKGFyZ3VtZW50cywgJycpIH1cXG5cIlxuICAgICAgICAgIDogJztcXG4nXG4gICAgICAgICkgK1xuICAgICAgICBzb3VyY2UgK1xuICAgICAgICAncmV0dXJuIF9fcFxcbn0nO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYXR0ZW1wdChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uKGltcG9ydHNLZXlzLCBzb3VyY2VVUkwgKyAncmV0dXJuICcgKyBzb3VyY2UpXG4gICAgICAgICAgLmFwcGx5KHVuZGVmaW5lZCwgaW1wb3J0c1ZhbHVlcyk7XG4gICAgICB9KTtcblxuICAgICAgLy8gUHJvdmlkZSB0aGUgY29tcGlsZWQgZnVuY3Rpb24ncyBzb3VyY2UgYnkgaXRzIGB0b1N0cmluZ2AgbWV0aG9kIG9yXG4gICAgICAvLyB0aGUgYHNvdXJjZWAgcHJvcGVydHkgYXMgYSBjb252ZW5pZW5jZSBmb3IgaW5saW5pbmcgY29tcGlsZWQgdGVtcGxhdGVzLlxuICAgICAgcmVzdWx0LnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgIGlmIChpc0Vycm9yKHJlc3VsdCkpIHtcbiAgICAgICAgdGhyb3cgcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgYSB3aG9sZSwgdG8gbG93ZXIgY2FzZSBqdXN0IGxpa2VcbiAgICAgKiBbU3RyaW5nI3RvTG93ZXJDYXNlXShodHRwczovL21kbi5pby90b0xvd2VyQ2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBsb3dlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignLS1Gb28tQmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnLS1mb28tYmFyLS0nXG4gICAgICpcbiAgICAgKiBfLnRvTG93ZXIoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb29iYXInXG4gICAgICpcbiAgICAgKiBfLnRvTG93ZXIoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ19fZm9vX2Jhcl9fJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTG93ZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0b1N0cmluZyh2YWx1ZSkudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgYSB3aG9sZSwgdG8gdXBwZXIgY2FzZSBqdXN0IGxpa2VcbiAgICAgKiBbU3RyaW5nI3RvVXBwZXJDYXNlXShodHRwczovL21kbi5pby90b1VwcGVyQ2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1cHBlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignLS1mb28tYmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnLS1GT08tQkFSLS0nXG4gICAgICpcbiAgICAgKiBfLnRvVXBwZXIoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdGT09CQVInXG4gICAgICpcbiAgICAgKiBfLnRvVXBwZXIoJ19fZm9vX2Jhcl9fJyk7XG4gICAgICogLy8gPT4gJ19fRk9PX0JBUl9fJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvVXBwZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0b1N0cmluZyh2YWx1ZSkudG9VcHBlckNhc2UoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2Ugb3Igc3BlY2lmaWVkIGNoYXJhY3RlcnMgZnJvbSBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB0cmltLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9d2hpdGVzcGFjZV0gVGhlIGNoYXJhY3RlcnMgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyaW0oJyAgYWJjICAnKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqXG4gICAgICogXy50cmltKCctXy1hYmMtXy0nLCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqXG4gICAgICogXy5tYXAoWycgIGZvbyAgJywgJyAgYmFyICAnXSwgXy50cmltKTtcbiAgICAgKiAvLyA9PiBbJ2ZvbycsICdiYXInXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaW0oc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gYmFzZVRyaW0oc3RyaW5nKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgY2hyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoY2hhcnMpLFxuICAgICAgICAgIHN0YXJ0ID0gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpLFxuICAgICAgICAgIGVuZCA9IGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykgKyAxO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIHN0YXJ0LCBlbmQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdHJhaWxpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbUVuZCgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICcgIGFiYydcbiAgICAgKlxuICAgICAqIF8udHJpbUVuZCgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJy1fLWFiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltRW5kKHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5zbGljZSgwLCB0cmltbWVkRW5kSW5kZXgoc3RyaW5nKSArIDEpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBlbmQgPSBjaGFyc0VuZEluZGV4KHN0clN5bWJvbHMsIHN0cmluZ1RvQXJyYXkoY2hhcnMpKSArIDE7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMCwgZW5kKS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGxlYWRpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbVN0YXJ0KCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJ2FiYyAgJ1xuICAgICAqXG4gICAgICogXy50cmltU3RhcnQoJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmMtXy0nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbVN0YXJ0KHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbVN0YXJ0LCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIHN0YXJ0ID0gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIHN0cmluZ1RvQXJyYXkoY2hhcnMpKTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCBzdGFydCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJ1bmNhdGVzIGBzdHJpbmdgIGlmIGl0J3MgbG9uZ2VyIHRoYW4gdGhlIGdpdmVuIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAgICAgKiBUaGUgbGFzdCBjaGFyYWN0ZXJzIG9mIHRoZSB0cnVuY2F0ZWQgc3RyaW5nIGFyZSByZXBsYWNlZCB3aXRoIHRoZSBvbWlzc2lvblxuICAgICAqIHN0cmluZyB3aGljaCBkZWZhdWx0cyB0byBcIi4uLlwiLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRydW5jYXRlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5sZW5ndGg9MzBdIFRoZSBtYXhpbXVtIHN0cmluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm9taXNzaW9uPScuLi4nXSBUaGUgc3RyaW5nIHRvIGluZGljYXRlIHRleHQgaXMgb21pdHRlZC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IFtvcHRpb25zLnNlcGFyYXRvcl0gVGhlIHNlcGFyYXRvciBwYXR0ZXJuIHRvIHRydW5jYXRlIHRvLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRydW5jYXRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nKTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdsZW5ndGgnOiAyNCxcbiAgICAgKiAgICdzZXBhcmF0b3InOiAnICdcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLC4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnbGVuZ3RoJzogMjQsXG4gICAgICogICAnc2VwYXJhdG9yJzogLyw/ICsvXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZS4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnb21pc3Npb24nOiAnIFsuLi5dJ1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWcgWy4uLl0nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJ1bmNhdGUoc3RyaW5nLCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gREVGQVVMVF9UUlVOQ19MRU5HVEgsXG4gICAgICAgICAgb21pc3Npb24gPSBERUZBVUxUX1RSVU5DX09NSVNTSU9OO1xuXG4gICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgdmFyIHNlcGFyYXRvciA9ICdzZXBhcmF0b3InIGluIG9wdGlvbnMgPyBvcHRpb25zLnNlcGFyYXRvciA6IHNlcGFyYXRvcjtcbiAgICAgICAgbGVuZ3RoID0gJ2xlbmd0aCcgaW4gb3B0aW9ucyA/IHRvSW50ZWdlcihvcHRpb25zLmxlbmd0aCkgOiBsZW5ndGg7XG4gICAgICAgIG9taXNzaW9uID0gJ29taXNzaW9uJyBpbiBvcHRpb25zID8gYmFzZVRvU3RyaW5nKG9wdGlvbnMub21pc3Npb24pIDogb21pc3Npb247XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgICAgIGlmIChoYXNVbmljb2RlKHN0cmluZykpIHtcbiAgICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyk7XG4gICAgICAgIHN0ckxlbmd0aCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuICAgICAgfVxuICAgICAgaWYgKGxlbmd0aCA+PSBzdHJMZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBlbmQgPSBsZW5ndGggLSBzdHJpbmdTaXplKG9taXNzaW9uKTtcbiAgICAgIGlmIChlbmQgPCAxKSB7XG4gICAgICAgIHJldHVybiBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBzdHJTeW1ib2xzXG4gICAgICAgID8gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDAsIGVuZCkuam9pbignJylcbiAgICAgICAgOiBzdHJpbmcuc2xpY2UoMCwgZW5kKTtcblxuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQgKyBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIGlmIChzdHJTeW1ib2xzKSB7XG4gICAgICAgIGVuZCArPSAocmVzdWx0Lmxlbmd0aCAtIGVuZCk7XG4gICAgICB9XG4gICAgICBpZiAoaXNSZWdFeHAoc2VwYXJhdG9yKSkge1xuICAgICAgICBpZiAoc3RyaW5nLnNsaWNlKGVuZCkuc2VhcmNoKHNlcGFyYXRvcikpIHtcbiAgICAgICAgICB2YXIgbWF0Y2gsXG4gICAgICAgICAgICAgIHN1YnN0cmluZyA9IHJlc3VsdDtcblxuICAgICAgICAgIGlmICghc2VwYXJhdG9yLmdsb2JhbCkge1xuICAgICAgICAgICAgc2VwYXJhdG9yID0gUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIHRvU3RyaW5nKHJlRmxhZ3MuZXhlYyhzZXBhcmF0b3IpKSArICdnJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlcGFyYXRvci5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgIHdoaWxlICgobWF0Y2ggPSBzZXBhcmF0b3IuZXhlYyhzdWJzdHJpbmcpKSkge1xuICAgICAgICAgICAgdmFyIG5ld0VuZCA9IG1hdGNoLmluZGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgbmV3RW5kID09PSB1bmRlZmluZWQgPyBlbmQgOiBuZXdFbmQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHN0cmluZy5pbmRleE9mKGJhc2VUb1N0cmluZyhzZXBhcmF0b3IpLCBlbmQpICE9IGVuZCkge1xuICAgICAgICB2YXIgaW5kZXggPSByZXN1bHQubGFzdEluZGV4T2Yoc2VwYXJhdG9yKTtcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0ICsgb21pc3Npb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGludmVyc2Ugb2YgYF8uZXNjYXBlYDsgdGhpcyBtZXRob2QgY29udmVydHMgdGhlIEhUTUwgZW50aXRpZXNcbiAgICAgKiBgJmFtcDtgLCBgJmx0O2AsIGAmZ3Q7YCwgYCZxdW90O2AsIGFuZCBgJiMzOTtgIGluIGBzdHJpbmdgIHRvXG4gICAgICogdGhlaXIgY29ycmVzcG9uZGluZyBjaGFyYWN0ZXJzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vIG90aGVyIEhUTUwgZW50aXRpZXMgYXJlIHVuZXNjYXBlZC4gVG8gdW5lc2NhcGUgYWRkaXRpb25hbFxuICAgICAqIEhUTUwgZW50aXRpZXMgdXNlIGEgdGhpcmQtcGFydHkgbGlicmFyeSBsaWtlIFtfaGVfXShodHRwczovL210aHMuYmUvaGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNi4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHVuZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5lc2NhcGUoJ2ZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICdmcmVkLCBiYXJuZXksICYgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmVzY2FwZShzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc0VzY2FwZWRIdG1sLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZUVzY2FwZWRIdG1sLCB1bmVzY2FwZUh0bWxDaGFyKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgc3BhY2Ugc2VwYXJhdGVkIHdvcmRzLCB0byB1cHBlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdXBwZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnLS1mb28tYmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnX19mb29fYmFyX18nKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKi9cbiAgICB2YXIgdXBwZXJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgd29yZC50b1VwcGVyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byB1cHBlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51cHBlckZpcnN0KCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ0ZyZWQnXG4gICAgICpcbiAgICAgKiBfLnVwcGVyRmlyc3QoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnRlJFRCdcbiAgICAgKi9cbiAgICB2YXIgdXBwZXJGaXJzdCA9IGNyZWF0ZUNhc2VGaXJzdCgndG9VcHBlckNhc2UnKTtcblxuICAgIC8qKlxuICAgICAqIFNwbGl0cyBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW3BhdHRlcm5dIFRoZSBwYXR0ZXJuIHRvIG1hdGNoIHdvcmRzLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy53b3JkcygnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiBbJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogXy53b3JkcygnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnLCAvW14sIF0rL2cpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAnJicsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3b3JkcyhzdHJpbmcsIHBhdHRlcm4sIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcGF0dGVybiA9IGd1YXJkID8gdW5kZWZpbmVkIDogcGF0dGVybjtcblxuICAgICAgaWYgKHBhdHRlcm4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gaGFzVW5pY29kZVdvcmQoc3RyaW5nKSA/IHVuaWNvZGVXb3JkcyhzdHJpbmcpIDogYXNjaWlXb3JkcyhzdHJpbmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cmluZy5tYXRjaChwYXR0ZXJuKSB8fCBbXTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBdHRlbXB0cyB0byBpbnZva2UgYGZ1bmNgLCByZXR1cm5pbmcgZWl0aGVyIHRoZSByZXN1bHQgb3IgdGhlIGNhdWdodCBlcnJvclxuICAgICAqIG9iamVjdC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGF0dGVtcHQuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGBmdW5jYCByZXN1bHQgb3IgZXJyb3Igb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBBdm9pZCB0aHJvd2luZyBlcnJvcnMgZm9yIGludmFsaWQgc2VsZWN0b3JzLlxuICAgICAqIHZhciBlbGVtZW50cyA9IF8uYXR0ZW1wdChmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgICAqICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgICAqIH0sICc+Xz4nKTtcbiAgICAgKlxuICAgICAqIGlmIChfLmlzRXJyb3IoZWxlbWVudHMpKSB7XG4gICAgICogICBlbGVtZW50cyA9IFtdO1xuICAgICAqIH1cbiAgICAgKi9cbiAgICB2YXIgYXR0ZW1wdCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIGFyZ3MpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gaXNFcnJvcihlKSA/IGUgOiBuZXcgRXJyb3IoZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBCaW5kcyBtZXRob2RzIG9mIGFuIG9iamVjdCB0byB0aGUgb2JqZWN0IGl0c2VsZiwgb3ZlcndyaXRpbmcgdGhlIGV4aXN0aW5nXG4gICAgICogbWV0aG9kLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGJvdW5kIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGJpbmQgYW5kIGFzc2lnbiB0aGUgYm91bmQgbWV0aG9kcyB0by5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBtZXRob2ROYW1lcyBUaGUgb2JqZWN0IG1ldGhvZCBuYW1lcyB0byBiaW5kLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB2aWV3ID0ge1xuICAgICAqICAgJ2xhYmVsJzogJ2RvY3MnLFxuICAgICAqICAgJ2NsaWNrJzogZnVuY3Rpb24oKSB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKCdjbGlja2VkICcgKyB0aGlzLmxhYmVsKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5iaW5kQWxsKHZpZXcsIFsnY2xpY2snXSk7XG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHZpZXcuY2xpY2spO1xuICAgICAqIC8vID0+IExvZ3MgJ2NsaWNrZWQgZG9jcycgd2hlbiBjbGlja2VkLlxuICAgICAqL1xuICAgIHZhciBiaW5kQWxsID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBtZXRob2ROYW1lcykge1xuICAgICAgYXJyYXlFYWNoKG1ldGhvZE5hbWVzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAga2V5ID0gdG9LZXkoa2V5KTtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBiaW5kKG9iamVjdFtrZXldLCBvYmplY3QpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGl0ZXJhdGVzIG92ZXIgYHBhaXJzYCBhbmQgaW52b2tlcyB0aGUgY29ycmVzcG9uZGluZ1xuICAgICAqIGZ1bmN0aW9uIG9mIHRoZSBmaXJzdCBwcmVkaWNhdGUgdG8gcmV0dXJuIHRydXRoeS4gVGhlIHByZWRpY2F0ZS1mdW5jdGlvblxuICAgICAqIHBhaXJzIGFyZSBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlIGNyZWF0ZWRcbiAgICAgKiBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFpcnMgVGhlIHByZWRpY2F0ZS1mdW5jdGlvbiBwYWlycy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5jb25kKFtcbiAgICAgKiAgIFtfLm1hdGNoZXMoeyAnYSc6IDEgfSksICAgICAgICAgICBfLmNvbnN0YW50KCdtYXRjaGVzIEEnKV0sXG4gICAgICogICBbXy5jb25mb3Jtcyh7ICdiJzogXy5pc051bWJlciB9KSwgXy5jb25zdGFudCgnbWF0Y2hlcyBCJyldLFxuICAgICAqICAgW18uc3R1YlRydWUsICAgICAgICAgICAgICAgICAgICAgIF8uY29uc3RhbnQoJ25vIG1hdGNoJyldXG4gICAgICogXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gJ21hdGNoZXMgQSdcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6IDAsICdiJzogMSB9KTtcbiAgICAgKiAvLyA9PiAnbWF0Y2hlcyBCJ1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogJzEnLCAnYic6ICcyJyB9KTtcbiAgICAgKiAvLyA9PiAnbm8gbWF0Y2gnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZChwYWlycykge1xuICAgICAgdmFyIGxlbmd0aCA9IHBhaXJzID09IG51bGwgPyAwIDogcGFpcnMubGVuZ3RoLFxuICAgICAgICAgIHRvSXRlcmF0ZWUgPSBnZXRJdGVyYXRlZSgpO1xuXG4gICAgICBwYWlycyA9ICFsZW5ndGggPyBbXSA6IGFycmF5TWFwKHBhaXJzLCBmdW5jdGlvbihwYWlyKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcGFpclsxXSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbdG9JdGVyYXRlZShwYWlyWzBdKSwgcGFpclsxXV07XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHBhaXIgPSBwYWlyc1tpbmRleF07XG4gICAgICAgICAgaWYgKGFwcGx5KHBhaXJbMF0sIHRoaXMsIGFyZ3MpKSB7XG4gICAgICAgICAgICByZXR1cm4gYXBwbHkocGFpclsxXSwgdGhpcywgYXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBwcmVkaWNhdGUgcHJvcGVydGllcyBvZiBgc291cmNlYCB3aXRoXG4gICAgICogdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdmFsdWVzIG9mIGEgZ2l2ZW4gb2JqZWN0LCByZXR1cm5pbmcgYHRydWVgIGlmXG4gICAgICogYWxsIHByZWRpY2F0ZXMgcmV0dXJuIHRydXRoeSwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjcmVhdGVkIGZ1bmN0aW9uIGlzIGVxdWl2YWxlbnQgdG8gYF8uY29uZm9ybXNUb2Agd2l0aFxuICAgICAqIGBzb3VyY2VgIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDIsICdiJzogMSB9LFxuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8uY29uZm9ybXMoeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAxOyB9IH0pKTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEsICdiJzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmZvcm1zKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIGJhc2VDb25mb3JtcyhiYXNlQ2xvbmUoc291cmNlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJldHVybiBmcm9tIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29uc3RhbnQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gXy50aW1lcygyLCBfLmNvbnN0YW50KHsgJ2EnOiAxIH0pKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSB9LCB7ICdhJzogMSB9XVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbnN0YW50KHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGB2YWx1ZWAgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgYSBkZWZhdWx0IHZhbHVlIHNob3VsZCBiZSByZXR1cm5lZCBpblxuICAgICAqIGl0cyBwbGFjZS4gVGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGBudWxsYCxcbiAgICAgKiBvciBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjE0LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7Kn0gZGVmYXVsdFZhbHVlIFRoZSBkZWZhdWx0IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0VG8oMSwgMTApO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdFRvKHVuZGVmaW5lZCwgMTApO1xuICAgICAqIC8vID0+IDEwXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVmYXVsdFRvKHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHJldHVybiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUpID8gZGVmYXVsdFZhbHVlIDogdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgcmVzdWx0IG9mIGludm9raW5nIHRoZSBnaXZlbiBmdW5jdGlvbnNcbiAgICAgKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbiwgd2hlcmUgZWFjaCBzdWNjZXNzaXZlXG4gICAgICogaW52b2NhdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtmdW5jc10gVGhlIGZ1bmN0aW9ucyB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICAgICAqIEBzZWUgXy5mbG93UmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYWRkU3F1YXJlID0gXy5mbG93KFtfLmFkZCwgc3F1YXJlXSk7XG4gICAgICogYWRkU3F1YXJlKDEsIDIpO1xuICAgICAqIC8vID0+IDlcbiAgICAgKi9cbiAgICB2YXIgZmxvdyA9IGNyZWF0ZUZsb3coKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmxvd2AgZXhjZXB0IHRoYXQgaXQgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXRcbiAgICAgKiBpbnZva2VzIHRoZSBnaXZlbiBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2Z1bmNzXSBUaGUgZnVuY3Rpb25zIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQHNlZSBfLmZsb3dcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYWRkU3F1YXJlID0gXy5mbG93UmlnaHQoW3NxdWFyZSwgXy5hZGRdKTtcbiAgICAgKiBhZGRTcXVhcmUoMSwgMik7XG4gICAgICogLy8gPT4gOVxuICAgICAqL1xuICAgIHZhciBmbG93UmlnaHQgPSBjcmVhdGVGbG93KHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3QpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZFxuICAgICAqIGZ1bmN0aW9uLiBJZiBgZnVuY2AgaXMgYSBwcm9wZXJ0eSBuYW1lLCB0aGUgY3JlYXRlZCBmdW5jdGlvbiByZXR1cm5zIHRoZVxuICAgICAqIHByb3BlcnR5IHZhbHVlIGZvciBhIGdpdmVuIGVsZW1lbnQuIElmIGBmdW5jYCBpcyBhbiBhcnJheSBvciBvYmplY3QsIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgY29udGFpbiB0aGUgZXF1aXZhbGVudFxuICAgICAqIHNvdXJjZSBwcm9wZXJ0aWVzLCBvdGhlcndpc2UgaXQgcmV0dXJucyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IFtmdW5jPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGEgY2FsbGJhY2suXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjYWxsYmFjay5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5pdGVyYXRlZSh7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0pKTtcbiAgICAgKiAvLyA9PiBbeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH1dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIF8uaXRlcmF0ZWUoWyd1c2VyJywgJ2ZyZWQnXSkpO1xuICAgICAqIC8vID0+IFt7ICd1c2VyJzogJ2ZyZWQnLCAnYWdlJzogNDAgfV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwKHVzZXJzLCBfLml0ZXJhdGVlKCd1c2VyJykpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gQ3JlYXRlIGN1c3RvbSBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqIF8uaXRlcmF0ZWUgPSBfLndyYXAoXy5pdGVyYXRlZSwgZnVuY3Rpb24oaXRlcmF0ZWUsIGZ1bmMpIHtcbiAgICAgKiAgIHJldHVybiAhXy5pc1JlZ0V4cChmdW5jKSA/IGl0ZXJhdGVlKGZ1bmMpIDogZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICogICAgIHJldHVybiBmdW5jLnRlc3Qoc3RyaW5nKTtcbiAgICAgKiAgIH07XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihbJ2FiYycsICdkZWYnXSwgL2VmLyk7XG4gICAgICogLy8gPT4gWydkZWYnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGl0ZXJhdGVlKGZ1bmMpIHtcbiAgICAgIHJldHVybiBiYXNlSXRlcmF0ZWUodHlwZW9mIGZ1bmMgPT0gJ2Z1bmN0aW9uJyA/IGZ1bmMgOiBiYXNlQ2xvbmUoZnVuYywgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIGEgZ2l2ZW5cbiAgICAgKiBvYmplY3QgYW5kIGBzb3VyY2VgLCByZXR1cm5pbmcgYHRydWVgIGlmIHRoZSBnaXZlbiBvYmplY3QgaGFzIGVxdWl2YWxlbnRcbiAgICAgKiBwcm9wZXJ0eSB2YWx1ZXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGUgY3JlYXRlZCBmdW5jdGlvbiBpcyBlcXVpdmFsZW50IHRvIGBfLmlzTWF0Y2hgIHdpdGggYHNvdXJjZWBcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0IGBzb3VyY2VgXG4gICAgICogdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWUgYF8uaXNFcXVhbGBcbiAgICAgKiBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBNdWx0aXBsZSB2YWx1ZXMgY2FuIGJlIGNoZWNrZWQgYnkgY29tYmluaW5nIHNldmVyYWwgbWF0Y2hlcnNcbiAgICAgKiB1c2luZyBgXy5vdmVyU29tZWBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LFxuICAgICAqICAgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5tYXRjaGVzKHsgJ2EnOiA0LCAnYyc6IDYgfSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfV1cbiAgICAgKlxuICAgICAqIC8vIENoZWNraW5nIGZvciBzZXZlcmFsIHBvc3NpYmxlIHZhbHVlc1xuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8ub3ZlclNvbWUoW18ubWF0Y2hlcyh7ICdhJzogMSB9KSwgXy5tYXRjaGVzKHsgJ2EnOiA0IH0pXSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfSwgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlcyhzb3VyY2UpIHtcbiAgICAgIHJldHVybiBiYXNlTWF0Y2hlcyhiYXNlQ2xvbmUoc291cmNlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gdGhlXG4gICAgICogdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0IHRvIGBzcmNWYWx1ZWAsIHJldHVybmluZyBgdHJ1ZWAgaWYgdGhlXG4gICAgICogb2JqZWN0IHZhbHVlIGlzIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBQYXJ0aWFsIGNvbXBhcmlzb25zIHdpbGwgbWF0Y2ggZW1wdHkgYXJyYXkgYW5kIGVtcHR5IG9iamVjdFxuICAgICAqIGBzcmNWYWx1ZWAgdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWVcbiAgICAgKiBgXy5pc0VxdWFsYCBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBNdWx0aXBsZSB2YWx1ZXMgY2FuIGJlIGNoZWNrZWQgYnkgY29tYmluaW5nIHNldmVyYWwgbWF0Y2hlcnNcbiAgICAgKiB1c2luZyBgXy5vdmVyU29tZWBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LFxuICAgICAqICAgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kKG9iamVjdHMsIF8ubWF0Y2hlc1Byb3BlcnR5KCdhJywgNCkpO1xuICAgICAqIC8vID0+IHsgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XG4gICAgICpcbiAgICAgKiAvLyBDaGVja2luZyBmb3Igc2V2ZXJhbCBwb3NzaWJsZSB2YWx1ZXNcbiAgICAgKiBfLmZpbHRlcihvYmplY3RzLCBfLm92ZXJTb21lKFtfLm1hdGNoZXNQcm9wZXJ0eSgnYScsIDEpLCBfLm1hdGNoZXNQcm9wZXJ0eSgnYScsIDQpXSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfSwgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBiYXNlQ2xvbmUoc3JjVmFsdWUsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICogQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBpbnZva2VyIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogXy5jb25zdGFudCgyKSB9IH0sXG4gICAgICogICB7ICdhJzogeyAnYic6IF8uY29uc3RhbnQoMSkgfSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ubWV0aG9kKCdhLmInKSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICpcbiAgICAgKiBfLm1hcChvYmplY3RzLCBfLm1ldGhvZChbJ2EnLCAnYiddKSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgdmFyIG1ldGhvZCA9IGJhc2VSZXN0KGZ1bmN0aW9uKHBhdGgsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ubWV0aG9kYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlc1xuICAgICAqIHRoZSBtZXRob2QgYXQgYSBnaXZlbiBwYXRoIG9mIGBvYmplY3RgLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlXG4gICAgICogcHJvdmlkZWQgdG8gdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludm9rZXIgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IF8udGltZXMoMywgXy5jb25zdGFudCksXG4gICAgICogICAgIG9iamVjdCA9IHsgJ2EnOiBhcnJheSwgJ2InOiBhcnJheSwgJ2MnOiBhcnJheSB9O1xuICAgICAqXG4gICAgICogXy5tYXAoWydhWzJdJywgJ2NbMF0nXSwgXy5tZXRob2RPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKlxuICAgICAqIF8ubWFwKFtbJ2EnLCAnMiddLCBbJ2MnLCAnMCddXSwgXy5tZXRob2RPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKi9cbiAgICB2YXIgbWV0aG9kT2YgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52b2tlKG9iamVjdCwgcGF0aCwgYXJncyk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQWRkcyBhbGwgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIGZ1bmN0aW9uIHByb3BlcnRpZXMgb2YgYSBzb3VyY2VcbiAgICAgKiBvYmplY3QgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdC4gSWYgYG9iamVjdGAgaXMgYSBmdW5jdGlvbiwgdGhlbiBtZXRob2RzXG4gICAgICogYXJlIGFkZGVkIHRvIGl0cyBwcm90b3R5cGUgYXMgd2VsbC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVc2UgYF8ucnVuSW5Db250ZXh0YCB0byBjcmVhdGUgYSBwcmlzdGluZSBgbG9kYXNoYCBmdW5jdGlvbiB0b1xuICAgICAqIGF2b2lkIGNvbmZsaWN0cyBjYXVzZWQgYnkgbW9kaWZ5aW5nIHRoZSBvcmlnaW5hbC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IFtvYmplY3Q9bG9kYXNoXSBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBmdW5jdGlvbnMgdG8gYWRkLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuY2hhaW49dHJ1ZV0gU3BlY2lmeSB3aGV0aGVyIG1peGlucyBhcmUgY2hhaW5hYmxlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHZvd2VscyhzdHJpbmcpIHtcbiAgICAgKiAgIHJldHVybiBfLmZpbHRlcihzdHJpbmcsIGZ1bmN0aW9uKHYpIHtcbiAgICAgKiAgICAgcmV0dXJuIC9bYWVpb3VdL2kudGVzdCh2KTtcbiAgICAgKiAgIH0pO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8ubWl4aW4oeyAndm93ZWxzJzogdm93ZWxzIH0pO1xuICAgICAqIF8udm93ZWxzKCdmcmVkJyk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKlxuICAgICAqIF8oJ2ZyZWQnKS52b3dlbHMoKS52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICpcbiAgICAgKiBfLm1peGluKHsgJ3Zvd2Vscyc6IHZvd2VscyB9LCB7ICdjaGFpbic6IGZhbHNlIH0pO1xuICAgICAqIF8oJ2ZyZWQnKS52b3dlbHMoKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1peGluKG9iamVjdCwgc291cmNlLCBvcHRpb25zKSB7XG4gICAgICB2YXIgcHJvcHMgPSBrZXlzKHNvdXJjZSksXG4gICAgICAgICAgbWV0aG9kTmFtZXMgPSBiYXNlRnVuY3Rpb25zKHNvdXJjZSwgcHJvcHMpO1xuXG4gICAgICBpZiAob3B0aW9ucyA9PSBudWxsICYmXG4gICAgICAgICAgIShpc09iamVjdChzb3VyY2UpICYmIChtZXRob2ROYW1lcy5sZW5ndGggfHwgIXByb3BzLmxlbmd0aCkpKSB7XG4gICAgICAgIG9wdGlvbnMgPSBzb3VyY2U7XG4gICAgICAgIHNvdXJjZSA9IG9iamVjdDtcbiAgICAgICAgb2JqZWN0ID0gdGhpcztcbiAgICAgICAgbWV0aG9kTmFtZXMgPSBiYXNlRnVuY3Rpb25zKHNvdXJjZSwga2V5cyhzb3VyY2UpKTtcbiAgICAgIH1cbiAgICAgIHZhciBjaGFpbiA9ICEoaXNPYmplY3Qob3B0aW9ucykgJiYgJ2NoYWluJyBpbiBvcHRpb25zKSB8fCAhIW9wdGlvbnMuY2hhaW4sXG4gICAgICAgICAgaXNGdW5jID0gaXNGdW5jdGlvbihvYmplY3QpO1xuXG4gICAgICBhcnJheUVhY2gobWV0aG9kTmFtZXMsIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBzb3VyY2VbbWV0aG9kTmFtZV07XG4gICAgICAgIG9iamVjdFttZXRob2ROYW1lXSA9IGZ1bmM7XG4gICAgICAgIGlmIChpc0Z1bmMpIHtcbiAgICAgICAgICBvYmplY3QucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgY2hhaW5BbGwgPSB0aGlzLl9fY2hhaW5fXztcbiAgICAgICAgICAgIGlmIChjaGFpbiB8fCBjaGFpbkFsbCkge1xuICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gb2JqZWN0KHRoaXMuX193cmFwcGVkX18pLFxuICAgICAgICAgICAgICAgICAgYWN0aW9ucyA9IHJlc3VsdC5fX2FjdGlvbnNfXyA9IGNvcHlBcnJheSh0aGlzLl9fYWN0aW9uc19fKTtcblxuICAgICAgICAgICAgICBhY3Rpb25zLnB1c2goeyAnZnVuYyc6IGZ1bmMsICdhcmdzJzogYXJndW1lbnRzLCAndGhpc0FyZyc6IG9iamVjdCB9KTtcbiAgICAgICAgICAgICAgcmVzdWx0Ll9fY2hhaW5fXyA9IGNoYWluQWxsO1xuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkob2JqZWN0LCBhcnJheVB1c2goW3RoaXMudmFsdWUoKV0sIGFyZ3VtZW50cykpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmVydHMgdGhlIGBfYCB2YXJpYWJsZSB0byBpdHMgcHJldmlvdXMgdmFsdWUgYW5kIHJldHVybnMgYSByZWZlcmVuY2UgdG9cbiAgICAgKiB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBsb2Rhc2ggPSBfLm5vQ29uZmxpY3QoKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBub0NvbmZsaWN0KCkge1xuICAgICAgaWYgKHJvb3QuXyA9PT0gdGhpcykge1xuICAgICAgICByb290Ll8gPSBvbGREYXNoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5ub29wKTtcbiAgICAgKiAvLyA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9vcCgpIHtcbiAgICAgIC8vIE5vIG9wZXJhdGlvbiBwZXJmb3JtZWQuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgZ2V0cyB0aGUgYXJndW1lbnQgYXQgaW5kZXggYG5gLiBJZiBgbmAgaXMgbmVnYXRpdmUsXG4gICAgICogdGhlIG50aCBhcmd1bWVudCBmcm9tIHRoZSBlbmQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0wXSBUaGUgaW5kZXggb2YgdGhlIGFyZ3VtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXNzLXRocnUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5udGhBcmcoMSk7XG4gICAgICogZnVuYygnYScsICdiJywgJ2MnLCAnZCcpO1xuICAgICAqIC8vID0+ICdiJ1xuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm50aEFyZygtMik7XG4gICAgICogZnVuYygnYScsICdiJywgJ2MnLCAnZCcpO1xuICAgICAqIC8vID0+ICdjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG50aEFyZyhuKSB7XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VOdGgoYXJncywgbik7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBpdGVyYXRlZXNgIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlc1xuICAgICAqIGFuZCByZXR1cm5zIHRoZWlyIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbaXRlcmF0ZWVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGl0ZXJhdGVlcyB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyKFtNYXRoLm1heCwgTWF0aC5taW5dKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoMSwgMiwgMywgNCk7XG4gICAgICogLy8gPT4gWzQsIDFdXG4gICAgICovXG4gICAgdmFyIG92ZXIgPSBjcmVhdGVPdmVyKGFycmF5TWFwKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiAqKmFsbCoqIG9mIHRoZSBgcHJlZGljYXRlc2AgcmV0dXJuXG4gICAgICogdHJ1dGh5IHdoZW4gaW52b2tlZCB3aXRoIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBGb2xsb3dpbmcgc2hvcnRoYW5kcyBhcmUgcG9zc2libGUgZm9yIHByb3ZpZGluZyBwcmVkaWNhdGVzLlxuICAgICAqIFBhc3MgYW4gYE9iamVjdGAgYW5kIGl0IHdpbGwgYmUgdXNlZCBhcyBhbiBwYXJhbWV0ZXIgZm9yIGBfLm1hdGNoZXNgIHRvIGNyZWF0ZSB0aGUgcHJlZGljYXRlLlxuICAgICAqIFBhc3MgYW4gYEFycmF5YCBvZiBwYXJhbWV0ZXJzIGZvciBgXy5tYXRjaGVzUHJvcGVydHlgIGFuZCB0aGUgcHJlZGljYXRlIHdpbGwgYmUgY3JlYXRlZCB1c2luZyB0aGVtLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3ByZWRpY2F0ZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgcHJlZGljYXRlcyB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJFdmVyeShbQm9vbGVhbiwgaXNGaW5pdGVdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoJzEnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBmdW5jKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBmdW5jKE5hTik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgb3ZlckV2ZXJ5ID0gY3JlYXRlT3ZlcihhcnJheUV2ZXJ5KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiAqKmFueSoqIG9mIHRoZSBgcHJlZGljYXRlc2AgcmV0dXJuXG4gICAgICogdHJ1dGh5IHdoZW4gaW52b2tlZCB3aXRoIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBGb2xsb3dpbmcgc2hvcnRoYW5kcyBhcmUgcG9zc2libGUgZm9yIHByb3ZpZGluZyBwcmVkaWNhdGVzLlxuICAgICAqIFBhc3MgYW4gYE9iamVjdGAgYW5kIGl0IHdpbGwgYmUgdXNlZCBhcyBhbiBwYXJhbWV0ZXIgZm9yIGBfLm1hdGNoZXNgIHRvIGNyZWF0ZSB0aGUgcHJlZGljYXRlLlxuICAgICAqIFBhc3MgYW4gYEFycmF5YCBvZiBwYXJhbWV0ZXJzIGZvciBgXy5tYXRjaGVzUHJvcGVydHlgIGFuZCB0aGUgcHJlZGljYXRlIHdpbGwgYmUgY3JlYXRlZCB1c2luZyB0aGVtLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3ByZWRpY2F0ZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgcHJlZGljYXRlcyB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJTb21lKFtCb29sZWFuLCBpc0Zpbml0ZV0pO1xuICAgICAqXG4gICAgICogZnVuYygnMScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGZ1bmMobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiB2YXIgbWF0Y2hlc0Z1bmMgPSBfLm92ZXJTb21lKFt7ICdhJzogMSB9LCB7ICdhJzogMiB9XSlcbiAgICAgKiB2YXIgbWF0Y2hlc1Byb3BlcnR5RnVuYyA9IF8ub3ZlclNvbWUoW1snYScsIDFdLCBbJ2EnLCAyXV0pXG4gICAgICovXG4gICAgdmFyIG92ZXJTb21lID0gY3JlYXRlT3ZlcihhcnJheVNvbWUpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogMiB9IH0sXG4gICAgICogICB7ICdhJzogeyAnYic6IDEgfSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ucHJvcGVydHkoJ2EuYicpKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKlxuICAgICAqIF8ubWFwKF8uc29ydEJ5KG9iamVjdHMsIF8ucHJvcGVydHkoWydhJywgJ2InXSkpLCAnYS5iJyk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJvcGVydHkocGF0aCkge1xuICAgICAgcmV0dXJuIGlzS2V5KHBhdGgpID8gYmFzZVByb3BlcnR5KHRvS2V5KHBhdGgpKSA6IGJhc2VQcm9wZXJ0eURlZXAocGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnByb3BlcnR5YDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJuc1xuICAgICAqIHRoZSB2YWx1ZSBhdCBhIGdpdmVuIHBhdGggb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzAsIDEsIDJdLFxuICAgICAqICAgICBvYmplY3QgPSB7ICdhJzogYXJyYXksICdiJzogYXJyYXksICdjJzogYXJyYXkgfTtcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnYVsyXScsICdjWzBdJ10sIF8ucHJvcGVydHlPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKlxuICAgICAqIF8ubWFwKFtbJ2EnLCAnMiddLCBbJ2MnLCAnMCddXSwgXy5wcm9wZXJ0eU9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHByb3BlcnR5T2Yob2JqZWN0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgbnVtYmVycyAocG9zaXRpdmUgYW5kL29yIG5lZ2F0aXZlKSBwcm9ncmVzc2luZyBmcm9tXG4gICAgICogYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLiBBIHN0ZXAgb2YgYC0xYCBpcyB1c2VkIGlmIGEgbmVnYXRpdmVcbiAgICAgKiBgc3RhcnRgIGlzIHNwZWNpZmllZCB3aXRob3V0IGFuIGBlbmRgIG9yIGBzdGVwYC4gSWYgYGVuZGAgaXMgbm90IHNwZWNpZmllZCxcbiAgICAgKiBpdCdzIHNldCB0byBgc3RhcnRgIHdpdGggYHN0YXJ0YCB0aGVuIHNldCB0byBgMGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSmF2YVNjcmlwdCBmb2xsb3dzIHRoZSBJRUVFLTc1NCBzdGFuZGFyZCBmb3IgcmVzb2x2aW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgdmFsdWVzIHdoaWNoIGNhbiBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGVwPTFdIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKiBAc2VlIF8uaW5SYW5nZSwgXy5yYW5nZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoNCk7XG4gICAgICogLy8gPT4gWzAsIDEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKC00KTtcbiAgICAgKiAvLyA9PiBbMCwgLTEsIC0yLCAtM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIDRdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDAsIDIwLCA1KTtcbiAgICAgKiAvLyA9PiBbMCwgNSwgMTAsIDE1XVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwLCAtNCwgLTEpO1xuICAgICAqIC8vID0+IFswLCAtMSwgLTIsIC0zXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgxLCA0LCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICB2YXIgcmFuZ2UgPSBjcmVhdGVSYW5nZSgpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5yYW5nZWAgZXhjZXB0IHRoYXQgaXQgcG9wdWxhdGVzIHZhbHVlcyBpblxuICAgICAqIGRlc2NlbmRpbmcgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RlcD0xXSBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICogQHNlZSBfLmluUmFuZ2UsIF8ucmFuZ2VcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDQpO1xuICAgICAqIC8vID0+IFszLCAyLCAxLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KC00KTtcbiAgICAgKiAvLyA9PiBbLTMsIC0yLCAtMSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgxLCA1KTtcbiAgICAgKiAvLyA9PiBbNCwgMywgMiwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwLCAyMCwgNSk7XG4gICAgICogLy8gPT4gWzE1LCAxMCwgNSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwLCAtNCwgLTEpO1xuICAgICAqIC8vID0+IFstMywgLTIsIC0xLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDEsIDQsIDApO1xuICAgICAqIC8vID0+IFsxLCAxLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgdmFyIHJhbmdlUmlnaHQgPSBjcmVhdGVSYW5nZSh0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5cyA9IF8udGltZXMoMiwgXy5zdHViQXJyYXkpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXlzKTtcbiAgICAgKiAvLyA9PiBbW10sIFtdXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YkFycmF5KCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICAgICAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uc3R1Yk9iamVjdCk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzKTtcbiAgICAgKiAvLyA9PiBbe30sIHt9XVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViT2JqZWN0KCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYW4gZW1wdHkgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZW1wdHkgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YlN0cmluZyk7XG4gICAgICogLy8gPT4gWycnLCAnJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViU3RyaW5nKCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYHRydWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YlRydWUpO1xuICAgICAqIC8vID0+IFt0cnVlLCB0cnVlXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJUcnVlKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgaXRlcmF0ZWUgYG5gIHRpbWVzLCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgdGhlIHJlc3VsdHMgb2ZcbiAgICAgKiBlYWNoIGludm9jYXRpb24uIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAoaW5kZXgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygzLCBTdHJpbmcpO1xuICAgICAqIC8vID0+IFsnMCcsICcxJywgJzInXVxuICAgICAqXG4gICAgICogIF8udGltZXMoNCwgXy5jb25zdGFudCgwKSk7XG4gICAgICogLy8gPT4gWzAsIDAsIDAsIDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICBpZiAobiA8IDEgfHwgbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gTUFYX0FSUkFZX0xFTkdUSCxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4obiwgTUFYX0FSUkFZX0xFTkdUSCk7XG5cbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUpO1xuICAgICAgbiAtPSBNQVhfQVJSQVlfTEVOR1RIO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZVRpbWVzKGxlbmd0aCwgaXRlcmF0ZWUpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgICAgIGl0ZXJhdGVlKGluZGV4KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1BhdGgoJ2EuYi5jJyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICpcbiAgICAgKiBfLnRvUGF0aCgnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnMCcsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvUGF0aCh2YWx1ZSkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgdG9LZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzU3ltYm9sKHZhbHVlKSA/IFt2YWx1ZV0gOiBjb3B5QXJyYXkoc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIHVuaXF1ZSBJRC4gSWYgYHByZWZpeGAgaXMgZ2l2ZW4sIHRoZSBJRCBpcyBhcHBlbmRlZCB0byBpdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtwcmVmaXg9JyddIFRoZSB2YWx1ZSB0byBwcmVmaXggdGhlIElEIHdpdGguXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5pcXVlIElELlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXF1ZUlkKCdjb250YWN0XycpO1xuICAgICAqIC8vID0+ICdjb250YWN0XzEwNCdcbiAgICAgKlxuICAgICAqIF8udW5pcXVlSWQoKTtcbiAgICAgKiAvLyA9PiAnMTA1J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXF1ZUlkKHByZWZpeCkge1xuICAgICAgdmFyIGlkID0gKytpZENvdW50ZXI7XG4gICAgICByZXR1cm4gdG9TdHJpbmcocHJlZml4KSArIGlkO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEFkZHMgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhdWdlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhbiBhZGRpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYWRkZW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGFuIGFkZGl0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRvdGFsLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmFkZCg2LCA0KTtcbiAgICAgKiAvLyA9PiAxMFxuICAgICAqL1xuICAgIHZhciBhZGQgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKGF1Z2VuZCwgYWRkZW5kKSB7XG4gICAgICByZXR1cm4gYXVnZW5kICsgYWRkZW5kO1xuICAgIH0sIDApO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCB1cCB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZCB1cC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIHVwIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgdXAgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNlaWwoNC4wMDYpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKlxuICAgICAqIF8uY2VpbCg2LjAwNCwgMik7XG4gICAgICogLy8gPT4gNi4wMVxuICAgICAqXG4gICAgICogXy5jZWlsKDYwNDAsIC0yKTtcbiAgICAgKiAvLyA9PiA2MTAwXG4gICAgICovXG4gICAgdmFyIGNlaWwgPSBjcmVhdGVSb3VuZCgnY2VpbCcpO1xuXG4gICAgLyoqXG4gICAgICogRGl2aWRlIHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGl2aWRlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhIGRpdmlzaW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkaXZpc29yIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgZGl2aXNpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcXVvdGllbnQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGl2aWRlKDYsIDQpO1xuICAgICAqIC8vID0+IDEuNVxuICAgICAqL1xuICAgIHZhciBkaXZpZGUgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKGRpdmlkZW5kLCBkaXZpc29yKSB7XG4gICAgICByZXR1cm4gZGl2aWRlbmQgLyBkaXZpc29yO1xuICAgIH0sIDEpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCBkb3duIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kIGRvd24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb249MF0gVGhlIHByZWNpc2lvbiB0byByb3VuZCBkb3duIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgZG93biBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoNC4wMDYpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoMC4wNDYsIDIpO1xuICAgICAqIC8vID0+IDAuMDRcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoNDA2MCwgLTIpO1xuICAgICAqIC8vID0+IDQwMDBcbiAgICAgKi9cbiAgICB2YXIgZmxvb3IgPSBjcmVhdGVSb3VuZCgnZmxvb3InKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtYXhpbXVtIHZhbHVlIG9mIGBhcnJheWAuIElmIGBhcnJheWAgaXMgZW1wdHkgb3IgZmFsc2V5LFxuICAgICAqIGB1bmRlZmluZWRgIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXhpbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1heChbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDhcbiAgICAgKlxuICAgICAqIF8ubWF4KFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXgoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgaWRlbnRpdHksIGJhc2VHdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tYXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB0aGUgdmFsdWUgaXMgcmFua2VkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1heGltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiAxIH0sIHsgJ24nOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5tYXhCeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IHsgJ24nOiAyIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWF4Qnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiB7ICduJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF4QnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYmFzZUd0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbWVhbiBvZiB0aGUgdmFsdWVzIGluIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbWVhbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tZWFuKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lYW4oYXJyYXkpIHtcbiAgICAgIHJldHVybiBiYXNlTWVhbihhcnJheSwgaWRlbnRpdHkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWVhbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIHZhbHVlIHRvIGJlIGF2ZXJhZ2VkLlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogNCB9LCB7ICduJzogMiB9LCB7ICduJzogOCB9LCB7ICduJzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8ubWVhbkJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tZWFuQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVhbkJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VNZWFuKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtaW5pbXVtIHZhbHVlIG9mIGBhcnJheWAuIElmIGBhcnJheWAgaXMgZW1wdHkgb3IgZmFsc2V5LFxuICAgICAqIGB1bmRlZmluZWRgIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtaW5pbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1pbihbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIF8ubWluKFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaW4oYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgaWRlbnRpdHksIGJhc2VMdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5taW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB0aGUgdmFsdWUgaXMgcmFua2VkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1pbmltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiAxIH0sIHsgJ24nOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5taW5CeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IHsgJ24nOiAxIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWluQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiB7ICduJzogMSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWluQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYmFzZUx0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNdWx0aXBseSB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG11bHRpcGxpZXIgVGhlIGZpcnN0IG51bWJlciBpbiBhIG11bHRpcGxpY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtdWx0aXBsaWNhbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBtdWx0aXBsaWNhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBwcm9kdWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm11bHRpcGx5KDYsIDQpO1xuICAgICAqIC8vID0+IDI0XG4gICAgICovXG4gICAgdmFyIG11bHRpcGx5ID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihtdWx0aXBsaWVyLCBtdWx0aXBsaWNhbmQpIHtcbiAgICAgIHJldHVybiBtdWx0aXBsaWVyICogbXVsdGlwbGljYW5kO1xuICAgIH0sIDEpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQuMDA2KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQuMDA2LCAyKTtcbiAgICAgKiAvLyA9PiA0LjAxXG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQwNjAsIC0yKTtcbiAgICAgKiAvLyA9PiA0MTAwXG4gICAgICovXG4gICAgdmFyIHJvdW5kID0gY3JlYXRlUm91bmQoJ3JvdW5kJyk7XG5cbiAgICAvKipcbiAgICAgKiBTdWJ0cmFjdCB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1pbnVlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhIHN1YnRyYWN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdWJ0cmFoZW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgc3VidHJhY3Rpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgZGlmZmVyZW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdWJ0cmFjdCg2LCA0KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgdmFyIHN1YnRyYWN0ID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihtaW51ZW5kLCBzdWJ0cmFoZW5kKSB7XG4gICAgICByZXR1cm4gbWludWVuZCAtIHN1YnRyYWhlbmQ7XG4gICAgfSwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgc3VtIG9mIHRoZSB2YWx1ZXMgaW4gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjQuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3VtKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdW0oYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTdW0oYXJyYXksIGlkZW50aXR5KVxuICAgICAgICA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zdW1gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSB2YWx1ZSB0byBiZSBzdW1tZWQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDQgfSwgeyAnbic6IDIgfSwgeyAnbic6IDggfSwgeyAnbic6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLnN1bUJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc3VtQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN1bUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVN1bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IDA7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdGhhdCByZXR1cm4gd3JhcHBlZCB2YWx1ZXMgaW4gY2hhaW4gc2VxdWVuY2VzLlxuICAgIGxvZGFzaC5hZnRlciA9IGFmdGVyO1xuICAgIGxvZGFzaC5hcnkgPSBhcnk7XG4gICAgbG9kYXNoLmFzc2lnbiA9IGFzc2lnbjtcbiAgICBsb2Rhc2guYXNzaWduSW4gPSBhc3NpZ25JbjtcbiAgICBsb2Rhc2guYXNzaWduSW5XaXRoID0gYXNzaWduSW5XaXRoO1xuICAgIGxvZGFzaC5hc3NpZ25XaXRoID0gYXNzaWduV2l0aDtcbiAgICBsb2Rhc2guYXQgPSBhdDtcbiAgICBsb2Rhc2guYmVmb3JlID0gYmVmb3JlO1xuICAgIGxvZGFzaC5iaW5kID0gYmluZDtcbiAgICBsb2Rhc2guYmluZEFsbCA9IGJpbmRBbGw7XG4gICAgbG9kYXNoLmJpbmRLZXkgPSBiaW5kS2V5O1xuICAgIGxvZGFzaC5jYXN0QXJyYXkgPSBjYXN0QXJyYXk7XG4gICAgbG9kYXNoLmNoYWluID0gY2hhaW47XG4gICAgbG9kYXNoLmNodW5rID0gY2h1bms7XG4gICAgbG9kYXNoLmNvbXBhY3QgPSBjb21wYWN0O1xuICAgIGxvZGFzaC5jb25jYXQgPSBjb25jYXQ7XG4gICAgbG9kYXNoLmNvbmQgPSBjb25kO1xuICAgIGxvZGFzaC5jb25mb3JtcyA9IGNvbmZvcm1zO1xuICAgIGxvZGFzaC5jb25zdGFudCA9IGNvbnN0YW50O1xuICAgIGxvZGFzaC5jb3VudEJ5ID0gY291bnRCeTtcbiAgICBsb2Rhc2guY3JlYXRlID0gY3JlYXRlO1xuICAgIGxvZGFzaC5jdXJyeSA9IGN1cnJ5O1xuICAgIGxvZGFzaC5jdXJyeVJpZ2h0ID0gY3VycnlSaWdodDtcbiAgICBsb2Rhc2guZGVib3VuY2UgPSBkZWJvdW5jZTtcbiAgICBsb2Rhc2guZGVmYXVsdHMgPSBkZWZhdWx0cztcbiAgICBsb2Rhc2guZGVmYXVsdHNEZWVwID0gZGVmYXVsdHNEZWVwO1xuICAgIGxvZGFzaC5kZWZlciA9IGRlZmVyO1xuICAgIGxvZGFzaC5kZWxheSA9IGRlbGF5O1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlID0gZGlmZmVyZW5jZTtcbiAgICBsb2Rhc2guZGlmZmVyZW5jZUJ5ID0gZGlmZmVyZW5jZUJ5O1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlV2l0aCA9IGRpZmZlcmVuY2VXaXRoO1xuICAgIGxvZGFzaC5kcm9wID0gZHJvcDtcbiAgICBsb2Rhc2guZHJvcFJpZ2h0ID0gZHJvcFJpZ2h0O1xuICAgIGxvZGFzaC5kcm9wUmlnaHRXaGlsZSA9IGRyb3BSaWdodFdoaWxlO1xuICAgIGxvZGFzaC5kcm9wV2hpbGUgPSBkcm9wV2hpbGU7XG4gICAgbG9kYXNoLmZpbGwgPSBmaWxsO1xuICAgIGxvZGFzaC5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgbG9kYXNoLmZsYXRNYXAgPSBmbGF0TWFwO1xuICAgIGxvZGFzaC5mbGF0TWFwRGVlcCA9IGZsYXRNYXBEZWVwO1xuICAgIGxvZGFzaC5mbGF0TWFwRGVwdGggPSBmbGF0TWFwRGVwdGg7XG4gICAgbG9kYXNoLmZsYXR0ZW4gPSBmbGF0dGVuO1xuICAgIGxvZGFzaC5mbGF0dGVuRGVlcCA9IGZsYXR0ZW5EZWVwO1xuICAgIGxvZGFzaC5mbGF0dGVuRGVwdGggPSBmbGF0dGVuRGVwdGg7XG4gICAgbG9kYXNoLmZsaXAgPSBmbGlwO1xuICAgIGxvZGFzaC5mbG93ID0gZmxvdztcbiAgICBsb2Rhc2guZmxvd1JpZ2h0ID0gZmxvd1JpZ2h0O1xuICAgIGxvZGFzaC5mcm9tUGFpcnMgPSBmcm9tUGFpcnM7XG4gICAgbG9kYXNoLmZ1bmN0aW9ucyA9IGZ1bmN0aW9ucztcbiAgICBsb2Rhc2guZnVuY3Rpb25zSW4gPSBmdW5jdGlvbnNJbjtcbiAgICBsb2Rhc2guZ3JvdXBCeSA9IGdyb3VwQnk7XG4gICAgbG9kYXNoLmluaXRpYWwgPSBpbml0aWFsO1xuICAgIGxvZGFzaC5pbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3Rpb247XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbkJ5ID0gaW50ZXJzZWN0aW9uQnk7XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbldpdGggPSBpbnRlcnNlY3Rpb25XaXRoO1xuICAgIGxvZGFzaC5pbnZlcnQgPSBpbnZlcnQ7XG4gICAgbG9kYXNoLmludmVydEJ5ID0gaW52ZXJ0Qnk7XG4gICAgbG9kYXNoLmludm9rZU1hcCA9IGludm9rZU1hcDtcbiAgICBsb2Rhc2guaXRlcmF0ZWUgPSBpdGVyYXRlZTtcbiAgICBsb2Rhc2gua2V5QnkgPSBrZXlCeTtcbiAgICBsb2Rhc2gua2V5cyA9IGtleXM7XG4gICAgbG9kYXNoLmtleXNJbiA9IGtleXNJbjtcbiAgICBsb2Rhc2gubWFwID0gbWFwO1xuICAgIGxvZGFzaC5tYXBLZXlzID0gbWFwS2V5cztcbiAgICBsb2Rhc2gubWFwVmFsdWVzID0gbWFwVmFsdWVzO1xuICAgIGxvZGFzaC5tYXRjaGVzID0gbWF0Y2hlcztcbiAgICBsb2Rhc2gubWF0Y2hlc1Byb3BlcnR5ID0gbWF0Y2hlc1Byb3BlcnR5O1xuICAgIGxvZGFzaC5tZW1vaXplID0gbWVtb2l6ZTtcbiAgICBsb2Rhc2gubWVyZ2UgPSBtZXJnZTtcbiAgICBsb2Rhc2gubWVyZ2VXaXRoID0gbWVyZ2VXaXRoO1xuICAgIGxvZGFzaC5tZXRob2QgPSBtZXRob2Q7XG4gICAgbG9kYXNoLm1ldGhvZE9mID0gbWV0aG9kT2Y7XG4gICAgbG9kYXNoLm1peGluID0gbWl4aW47XG4gICAgbG9kYXNoLm5lZ2F0ZSA9IG5lZ2F0ZTtcbiAgICBsb2Rhc2gubnRoQXJnID0gbnRoQXJnO1xuICAgIGxvZGFzaC5vbWl0ID0gb21pdDtcbiAgICBsb2Rhc2gub21pdEJ5ID0gb21pdEJ5O1xuICAgIGxvZGFzaC5vbmNlID0gb25jZTtcbiAgICBsb2Rhc2gub3JkZXJCeSA9IG9yZGVyQnk7XG4gICAgbG9kYXNoLm92ZXIgPSBvdmVyO1xuICAgIGxvZGFzaC5vdmVyQXJncyA9IG92ZXJBcmdzO1xuICAgIGxvZGFzaC5vdmVyRXZlcnkgPSBvdmVyRXZlcnk7XG4gICAgbG9kYXNoLm92ZXJTb21lID0gb3ZlclNvbWU7XG4gICAgbG9kYXNoLnBhcnRpYWwgPSBwYXJ0aWFsO1xuICAgIGxvZGFzaC5wYXJ0aWFsUmlnaHQgPSBwYXJ0aWFsUmlnaHQ7XG4gICAgbG9kYXNoLnBhcnRpdGlvbiA9IHBhcnRpdGlvbjtcbiAgICBsb2Rhc2gucGljayA9IHBpY2s7XG4gICAgbG9kYXNoLnBpY2tCeSA9IHBpY2tCeTtcbiAgICBsb2Rhc2gucHJvcGVydHkgPSBwcm9wZXJ0eTtcbiAgICBsb2Rhc2gucHJvcGVydHlPZiA9IHByb3BlcnR5T2Y7XG4gICAgbG9kYXNoLnB1bGwgPSBwdWxsO1xuICAgIGxvZGFzaC5wdWxsQWxsID0gcHVsbEFsbDtcbiAgICBsb2Rhc2gucHVsbEFsbEJ5ID0gcHVsbEFsbEJ5O1xuICAgIGxvZGFzaC5wdWxsQWxsV2l0aCA9IHB1bGxBbGxXaXRoO1xuICAgIGxvZGFzaC5wdWxsQXQgPSBwdWxsQXQ7XG4gICAgbG9kYXNoLnJhbmdlID0gcmFuZ2U7XG4gICAgbG9kYXNoLnJhbmdlUmlnaHQgPSByYW5nZVJpZ2h0O1xuICAgIGxvZGFzaC5yZWFyZyA9IHJlYXJnO1xuICAgIGxvZGFzaC5yZWplY3QgPSByZWplY3Q7XG4gICAgbG9kYXNoLnJlbW92ZSA9IHJlbW92ZTtcbiAgICBsb2Rhc2gucmVzdCA9IHJlc3Q7XG4gICAgbG9kYXNoLnJldmVyc2UgPSByZXZlcnNlO1xuICAgIGxvZGFzaC5zYW1wbGVTaXplID0gc2FtcGxlU2l6ZTtcbiAgICBsb2Rhc2guc2V0ID0gc2V0O1xuICAgIGxvZGFzaC5zZXRXaXRoID0gc2V0V2l0aDtcbiAgICBsb2Rhc2guc2h1ZmZsZSA9IHNodWZmbGU7XG4gICAgbG9kYXNoLnNsaWNlID0gc2xpY2U7XG4gICAgbG9kYXNoLnNvcnRCeSA9IHNvcnRCeTtcbiAgICBsb2Rhc2guc29ydGVkVW5pcSA9IHNvcnRlZFVuaXE7XG4gICAgbG9kYXNoLnNvcnRlZFVuaXFCeSA9IHNvcnRlZFVuaXFCeTtcbiAgICBsb2Rhc2guc3BsaXQgPSBzcGxpdDtcbiAgICBsb2Rhc2guc3ByZWFkID0gc3ByZWFkO1xuICAgIGxvZGFzaC50YWlsID0gdGFpbDtcbiAgICBsb2Rhc2gudGFrZSA9IHRha2U7XG4gICAgbG9kYXNoLnRha2VSaWdodCA9IHRha2VSaWdodDtcbiAgICBsb2Rhc2gudGFrZVJpZ2h0V2hpbGUgPSB0YWtlUmlnaHRXaGlsZTtcbiAgICBsb2Rhc2gudGFrZVdoaWxlID0gdGFrZVdoaWxlO1xuICAgIGxvZGFzaC50YXAgPSB0YXA7XG4gICAgbG9kYXNoLnRocm90dGxlID0gdGhyb3R0bGU7XG4gICAgbG9kYXNoLnRocnUgPSB0aHJ1O1xuICAgIGxvZGFzaC50b0FycmF5ID0gdG9BcnJheTtcbiAgICBsb2Rhc2gudG9QYWlycyA9IHRvUGFpcnM7XG4gICAgbG9kYXNoLnRvUGFpcnNJbiA9IHRvUGFpcnNJbjtcbiAgICBsb2Rhc2gudG9QYXRoID0gdG9QYXRoO1xuICAgIGxvZGFzaC50b1BsYWluT2JqZWN0ID0gdG9QbGFpbk9iamVjdDtcbiAgICBsb2Rhc2gudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgIGxvZGFzaC51bmFyeSA9IHVuYXJ5O1xuICAgIGxvZGFzaC51bmlvbiA9IHVuaW9uO1xuICAgIGxvZGFzaC51bmlvbkJ5ID0gdW5pb25CeTtcbiAgICBsb2Rhc2gudW5pb25XaXRoID0gdW5pb25XaXRoO1xuICAgIGxvZGFzaC51bmlxID0gdW5pcTtcbiAgICBsb2Rhc2gudW5pcUJ5ID0gdW5pcUJ5O1xuICAgIGxvZGFzaC51bmlxV2l0aCA9IHVuaXFXaXRoO1xuICAgIGxvZGFzaC51bnNldCA9IHVuc2V0O1xuICAgIGxvZGFzaC51bnppcCA9IHVuemlwO1xuICAgIGxvZGFzaC51bnppcFdpdGggPSB1bnppcFdpdGg7XG4gICAgbG9kYXNoLnVwZGF0ZSA9IHVwZGF0ZTtcbiAgICBsb2Rhc2gudXBkYXRlV2l0aCA9IHVwZGF0ZVdpdGg7XG4gICAgbG9kYXNoLnZhbHVlcyA9IHZhbHVlcztcbiAgICBsb2Rhc2gudmFsdWVzSW4gPSB2YWx1ZXNJbjtcbiAgICBsb2Rhc2gud2l0aG91dCA9IHdpdGhvdXQ7XG4gICAgbG9kYXNoLndvcmRzID0gd29yZHM7XG4gICAgbG9kYXNoLndyYXAgPSB3cmFwO1xuICAgIGxvZGFzaC54b3IgPSB4b3I7XG4gICAgbG9kYXNoLnhvckJ5ID0geG9yQnk7XG4gICAgbG9kYXNoLnhvcldpdGggPSB4b3JXaXRoO1xuICAgIGxvZGFzaC56aXAgPSB6aXA7XG4gICAgbG9kYXNoLnppcE9iamVjdCA9IHppcE9iamVjdDtcbiAgICBsb2Rhc2guemlwT2JqZWN0RGVlcCA9IHppcE9iamVjdERlZXA7XG4gICAgbG9kYXNoLnppcFdpdGggPSB6aXBXaXRoO1xuXG4gICAgLy8gQWRkIGFsaWFzZXMuXG4gICAgbG9kYXNoLmVudHJpZXMgPSB0b1BhaXJzO1xuICAgIGxvZGFzaC5lbnRyaWVzSW4gPSB0b1BhaXJzSW47XG4gICAgbG9kYXNoLmV4dGVuZCA9IGFzc2lnbkluO1xuICAgIGxvZGFzaC5leHRlbmRXaXRoID0gYXNzaWduSW5XaXRoO1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIG1peGluKGxvZGFzaCwgbG9kYXNoKTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8vIEFkZCBtZXRob2RzIHRoYXQgcmV0dXJuIHVud3JhcHBlZCB2YWx1ZXMgaW4gY2hhaW4gc2VxdWVuY2VzLlxuICAgIGxvZGFzaC5hZGQgPSBhZGQ7XG4gICAgbG9kYXNoLmF0dGVtcHQgPSBhdHRlbXB0O1xuICAgIGxvZGFzaC5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG4gICAgbG9kYXNoLmNhcGl0YWxpemUgPSBjYXBpdGFsaXplO1xuICAgIGxvZGFzaC5jZWlsID0gY2VpbDtcbiAgICBsb2Rhc2guY2xhbXAgPSBjbGFtcDtcbiAgICBsb2Rhc2guY2xvbmUgPSBjbG9uZTtcbiAgICBsb2Rhc2guY2xvbmVEZWVwID0gY2xvbmVEZWVwO1xuICAgIGxvZGFzaC5jbG9uZURlZXBXaXRoID0gY2xvbmVEZWVwV2l0aDtcbiAgICBsb2Rhc2guY2xvbmVXaXRoID0gY2xvbmVXaXRoO1xuICAgIGxvZGFzaC5jb25mb3Jtc1RvID0gY29uZm9ybXNUbztcbiAgICBsb2Rhc2guZGVidXJyID0gZGVidXJyO1xuICAgIGxvZGFzaC5kZWZhdWx0VG8gPSBkZWZhdWx0VG87XG4gICAgbG9kYXNoLmRpdmlkZSA9IGRpdmlkZTtcbiAgICBsb2Rhc2guZW5kc1dpdGggPSBlbmRzV2l0aDtcbiAgICBsb2Rhc2guZXEgPSBlcTtcbiAgICBsb2Rhc2guZXNjYXBlID0gZXNjYXBlO1xuICAgIGxvZGFzaC5lc2NhcGVSZWdFeHAgPSBlc2NhcGVSZWdFeHA7XG4gICAgbG9kYXNoLmV2ZXJ5ID0gZXZlcnk7XG4gICAgbG9kYXNoLmZpbmQgPSBmaW5kO1xuICAgIGxvZGFzaC5maW5kSW5kZXggPSBmaW5kSW5kZXg7XG4gICAgbG9kYXNoLmZpbmRLZXkgPSBmaW5kS2V5O1xuICAgIGxvZGFzaC5maW5kTGFzdCA9IGZpbmRMYXN0O1xuICAgIGxvZGFzaC5maW5kTGFzdEluZGV4ID0gZmluZExhc3RJbmRleDtcbiAgICBsb2Rhc2guZmluZExhc3RLZXkgPSBmaW5kTGFzdEtleTtcbiAgICBsb2Rhc2guZmxvb3IgPSBmbG9vcjtcbiAgICBsb2Rhc2guZm9yRWFjaCA9IGZvckVhY2g7XG4gICAgbG9kYXNoLmZvckVhY2hSaWdodCA9IGZvckVhY2hSaWdodDtcbiAgICBsb2Rhc2guZm9ySW4gPSBmb3JJbjtcbiAgICBsb2Rhc2guZm9ySW5SaWdodCA9IGZvckluUmlnaHQ7XG4gICAgbG9kYXNoLmZvck93biA9IGZvck93bjtcbiAgICBsb2Rhc2guZm9yT3duUmlnaHQgPSBmb3JPd25SaWdodDtcbiAgICBsb2Rhc2guZ2V0ID0gZ2V0O1xuICAgIGxvZGFzaC5ndCA9IGd0O1xuICAgIGxvZGFzaC5ndGUgPSBndGU7XG4gICAgbG9kYXNoLmhhcyA9IGhhcztcbiAgICBsb2Rhc2guaGFzSW4gPSBoYXNJbjtcbiAgICBsb2Rhc2guaGVhZCA9IGhlYWQ7XG4gICAgbG9kYXNoLmlkZW50aXR5ID0gaWRlbnRpdHk7XG4gICAgbG9kYXNoLmluY2x1ZGVzID0gaW5jbHVkZXM7XG4gICAgbG9kYXNoLmluZGV4T2YgPSBpbmRleE9mO1xuICAgIGxvZGFzaC5pblJhbmdlID0gaW5SYW5nZTtcbiAgICBsb2Rhc2guaW52b2tlID0gaW52b2tlO1xuICAgIGxvZGFzaC5pc0FyZ3VtZW50cyA9IGlzQXJndW1lbnRzO1xuICAgIGxvZGFzaC5pc0FycmF5ID0gaXNBcnJheTtcbiAgICBsb2Rhc2guaXNBcnJheUJ1ZmZlciA9IGlzQXJyYXlCdWZmZXI7XG4gICAgbG9kYXNoLmlzQXJyYXlMaWtlID0gaXNBcnJheUxpa2U7XG4gICAgbG9kYXNoLmlzQXJyYXlMaWtlT2JqZWN0ID0gaXNBcnJheUxpa2VPYmplY3Q7XG4gICAgbG9kYXNoLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcbiAgICBsb2Rhc2guaXNCdWZmZXIgPSBpc0J1ZmZlcjtcbiAgICBsb2Rhc2guaXNEYXRlID0gaXNEYXRlO1xuICAgIGxvZGFzaC5pc0VsZW1lbnQgPSBpc0VsZW1lbnQ7XG4gICAgbG9kYXNoLmlzRW1wdHkgPSBpc0VtcHR5O1xuICAgIGxvZGFzaC5pc0VxdWFsID0gaXNFcXVhbDtcbiAgICBsb2Rhc2guaXNFcXVhbFdpdGggPSBpc0VxdWFsV2l0aDtcbiAgICBsb2Rhc2guaXNFcnJvciA9IGlzRXJyb3I7XG4gICAgbG9kYXNoLmlzRmluaXRlID0gaXNGaW5pdGU7XG4gICAgbG9kYXNoLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuICAgIGxvZGFzaC5pc0ludGVnZXIgPSBpc0ludGVnZXI7XG4gICAgbG9kYXNoLmlzTGVuZ3RoID0gaXNMZW5ndGg7XG4gICAgbG9kYXNoLmlzTWFwID0gaXNNYXA7XG4gICAgbG9kYXNoLmlzTWF0Y2ggPSBpc01hdGNoO1xuICAgIGxvZGFzaC5pc01hdGNoV2l0aCA9IGlzTWF0Y2hXaXRoO1xuICAgIGxvZGFzaC5pc05hTiA9IGlzTmFOO1xuICAgIGxvZGFzaC5pc05hdGl2ZSA9IGlzTmF0aXZlO1xuICAgIGxvZGFzaC5pc05pbCA9IGlzTmlsO1xuICAgIGxvZGFzaC5pc051bGwgPSBpc051bGw7XG4gICAgbG9kYXNoLmlzTnVtYmVyID0gaXNOdW1iZXI7XG4gICAgbG9kYXNoLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG4gICAgbG9kYXNoLmlzT2JqZWN0TGlrZSA9IGlzT2JqZWN0TGlrZTtcbiAgICBsb2Rhc2guaXNQbGFpbk9iamVjdCA9IGlzUGxhaW5PYmplY3Q7XG4gICAgbG9kYXNoLmlzUmVnRXhwID0gaXNSZWdFeHA7XG4gICAgbG9kYXNoLmlzU2FmZUludGVnZXIgPSBpc1NhZmVJbnRlZ2VyO1xuICAgIGxvZGFzaC5pc1NldCA9IGlzU2V0O1xuICAgIGxvZGFzaC5pc1N0cmluZyA9IGlzU3RyaW5nO1xuICAgIGxvZGFzaC5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuICAgIGxvZGFzaC5pc1R5cGVkQXJyYXkgPSBpc1R5cGVkQXJyYXk7XG4gICAgbG9kYXNoLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG4gICAgbG9kYXNoLmlzV2Vha01hcCA9IGlzV2Vha01hcDtcbiAgICBsb2Rhc2guaXNXZWFrU2V0ID0gaXNXZWFrU2V0O1xuICAgIGxvZGFzaC5qb2luID0gam9pbjtcbiAgICBsb2Rhc2gua2ViYWJDYXNlID0ga2ViYWJDYXNlO1xuICAgIGxvZGFzaC5sYXN0ID0gbGFzdDtcbiAgICBsb2Rhc2gubGFzdEluZGV4T2YgPSBsYXN0SW5kZXhPZjtcbiAgICBsb2Rhc2gubG93ZXJDYXNlID0gbG93ZXJDYXNlO1xuICAgIGxvZGFzaC5sb3dlckZpcnN0ID0gbG93ZXJGaXJzdDtcbiAgICBsb2Rhc2gubHQgPSBsdDtcbiAgICBsb2Rhc2gubHRlID0gbHRlO1xuICAgIGxvZGFzaC5tYXggPSBtYXg7XG4gICAgbG9kYXNoLm1heEJ5ID0gbWF4Qnk7XG4gICAgbG9kYXNoLm1lYW4gPSBtZWFuO1xuICAgIGxvZGFzaC5tZWFuQnkgPSBtZWFuQnk7XG4gICAgbG9kYXNoLm1pbiA9IG1pbjtcbiAgICBsb2Rhc2gubWluQnkgPSBtaW5CeTtcbiAgICBsb2Rhc2guc3R1YkFycmF5ID0gc3R1YkFycmF5O1xuICAgIGxvZGFzaC5zdHViRmFsc2UgPSBzdHViRmFsc2U7XG4gICAgbG9kYXNoLnN0dWJPYmplY3QgPSBzdHViT2JqZWN0O1xuICAgIGxvZGFzaC5zdHViU3RyaW5nID0gc3R1YlN0cmluZztcbiAgICBsb2Rhc2guc3R1YlRydWUgPSBzdHViVHJ1ZTtcbiAgICBsb2Rhc2gubXVsdGlwbHkgPSBtdWx0aXBseTtcbiAgICBsb2Rhc2gubnRoID0gbnRoO1xuICAgIGxvZGFzaC5ub0NvbmZsaWN0ID0gbm9Db25mbGljdDtcbiAgICBsb2Rhc2gubm9vcCA9IG5vb3A7XG4gICAgbG9kYXNoLm5vdyA9IG5vdztcbiAgICBsb2Rhc2gucGFkID0gcGFkO1xuICAgIGxvZGFzaC5wYWRFbmQgPSBwYWRFbmQ7XG4gICAgbG9kYXNoLnBhZFN0YXJ0ID0gcGFkU3RhcnQ7XG4gICAgbG9kYXNoLnBhcnNlSW50ID0gcGFyc2VJbnQ7XG4gICAgbG9kYXNoLnJhbmRvbSA9IHJhbmRvbTtcbiAgICBsb2Rhc2gucmVkdWNlID0gcmVkdWNlO1xuICAgIGxvZGFzaC5yZWR1Y2VSaWdodCA9IHJlZHVjZVJpZ2h0O1xuICAgIGxvZGFzaC5yZXBlYXQgPSByZXBlYXQ7XG4gICAgbG9kYXNoLnJlcGxhY2UgPSByZXBsYWNlO1xuICAgIGxvZGFzaC5yZXN1bHQgPSByZXN1bHQ7XG4gICAgbG9kYXNoLnJvdW5kID0gcm91bmQ7XG4gICAgbG9kYXNoLnJ1bkluQ29udGV4dCA9IHJ1bkluQ29udGV4dDtcbiAgICBsb2Rhc2guc2FtcGxlID0gc2FtcGxlO1xuICAgIGxvZGFzaC5zaXplID0gc2l6ZTtcbiAgICBsb2Rhc2guc25ha2VDYXNlID0gc25ha2VDYXNlO1xuICAgIGxvZGFzaC5zb21lID0gc29tZTtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXggPSBzb3J0ZWRJbmRleDtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXhCeSA9IHNvcnRlZEluZGV4Qnk7XG4gICAgbG9kYXNoLnNvcnRlZEluZGV4T2YgPSBzb3J0ZWRJbmRleE9mO1xuICAgIGxvZGFzaC5zb3J0ZWRMYXN0SW5kZXggPSBzb3J0ZWRMYXN0SW5kZXg7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleEJ5ID0gc29ydGVkTGFzdEluZGV4Qnk7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleE9mID0gc29ydGVkTGFzdEluZGV4T2Y7XG4gICAgbG9kYXNoLnN0YXJ0Q2FzZSA9IHN0YXJ0Q2FzZTtcbiAgICBsb2Rhc2guc3RhcnRzV2l0aCA9IHN0YXJ0c1dpdGg7XG4gICAgbG9kYXNoLnN1YnRyYWN0ID0gc3VidHJhY3Q7XG4gICAgbG9kYXNoLnN1bSA9IHN1bTtcbiAgICBsb2Rhc2guc3VtQnkgPSBzdW1CeTtcbiAgICBsb2Rhc2gudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgICBsb2Rhc2gudGltZXMgPSB0aW1lcztcbiAgICBsb2Rhc2gudG9GaW5pdGUgPSB0b0Zpbml0ZTtcbiAgICBsb2Rhc2gudG9JbnRlZ2VyID0gdG9JbnRlZ2VyO1xuICAgIGxvZGFzaC50b0xlbmd0aCA9IHRvTGVuZ3RoO1xuICAgIGxvZGFzaC50b0xvd2VyID0gdG9Mb3dlcjtcbiAgICBsb2Rhc2gudG9OdW1iZXIgPSB0b051bWJlcjtcbiAgICBsb2Rhc2gudG9TYWZlSW50ZWdlciA9IHRvU2FmZUludGVnZXI7XG4gICAgbG9kYXNoLnRvU3RyaW5nID0gdG9TdHJpbmc7XG4gICAgbG9kYXNoLnRvVXBwZXIgPSB0b1VwcGVyO1xuICAgIGxvZGFzaC50cmltID0gdHJpbTtcbiAgICBsb2Rhc2gudHJpbUVuZCA9IHRyaW1FbmQ7XG4gICAgbG9kYXNoLnRyaW1TdGFydCA9IHRyaW1TdGFydDtcbiAgICBsb2Rhc2gudHJ1bmNhdGUgPSB0cnVuY2F0ZTtcbiAgICBsb2Rhc2gudW5lc2NhcGUgPSB1bmVzY2FwZTtcbiAgICBsb2Rhc2gudW5pcXVlSWQgPSB1bmlxdWVJZDtcbiAgICBsb2Rhc2gudXBwZXJDYXNlID0gdXBwZXJDYXNlO1xuICAgIGxvZGFzaC51cHBlckZpcnN0ID0gdXBwZXJGaXJzdDtcblxuICAgIC8vIEFkZCBhbGlhc2VzLlxuICAgIGxvZGFzaC5lYWNoID0gZm9yRWFjaDtcbiAgICBsb2Rhc2guZWFjaFJpZ2h0ID0gZm9yRWFjaFJpZ2h0O1xuICAgIGxvZGFzaC5maXJzdCA9IGhlYWQ7XG5cbiAgICBtaXhpbihsb2Rhc2gsIChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzb3VyY2UgPSB7fTtcbiAgICAgIGJhc2VGb3JPd24obG9kYXNoLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChsb2Rhc2gucHJvdG90eXBlLCBtZXRob2ROYW1lKSkge1xuICAgICAgICAgIHNvdXJjZVttZXRob2ROYW1lXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICB9KCkpLCB7ICdjaGFpbic6IGZhbHNlIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNlbWFudGljIHZlcnNpb24gbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBsb2Rhc2guVkVSU0lPTiA9IFZFUlNJT047XG5cbiAgICAvLyBBc3NpZ24gZGVmYXVsdCBwbGFjZWhvbGRlcnMuXG4gICAgYXJyYXlFYWNoKFsnYmluZCcsICdiaW5kS2V5JywgJ2N1cnJ5JywgJ2N1cnJ5UmlnaHQnLCAncGFydGlhbCcsICdwYXJ0aWFsUmlnaHQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgbG9kYXNoW21ldGhvZE5hbWVdLnBsYWNlaG9sZGVyID0gbG9kYXNoO1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uZHJvcGAgYW5kIGBfLnRha2VgIHZhcmlhbnRzLlxuICAgIGFycmF5RWFjaChbJ2Ryb3AnLCAndGFrZSddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24obikge1xuICAgICAgICBuID0gbiA9PT0gdW5kZWZpbmVkID8gMSA6IG5hdGl2ZU1heCh0b0ludGVnZXIobiksIDApO1xuXG4gICAgICAgIHZhciByZXN1bHQgPSAodGhpcy5fX2ZpbHRlcmVkX18gJiYgIWluZGV4KVxuICAgICAgICAgID8gbmV3IExhenlXcmFwcGVyKHRoaXMpXG4gICAgICAgICAgOiB0aGlzLmNsb25lKCk7XG5cbiAgICAgICAgaWYgKHJlc3VsdC5fX2ZpbHRlcmVkX18pIHtcbiAgICAgICAgICByZXN1bHQuX190YWtlQ291bnRfXyA9IG5hdGl2ZU1pbihuLCByZXN1bHQuX190YWtlQ291bnRfXyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0Ll9fdmlld3NfXy5wdXNoKHtcbiAgICAgICAgICAgICdzaXplJzogbmF0aXZlTWluKG4sIE1BWF9BUlJBWV9MRU5HVEgpLFxuICAgICAgICAgICAgJ3R5cGUnOiBtZXRob2ROYW1lICsgKHJlc3VsdC5fX2Rpcl9fIDwgMCA/ICdSaWdodCcgOiAnJylcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWUgKyAnUmlnaHQnXSA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpW21ldGhvZE5hbWVdKG4pLnJldmVyc2UoKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIHRoYXQgYWNjZXB0IGFuIGBpdGVyYXRlZWAgdmFsdWUuXG4gICAgYXJyYXlFYWNoKFsnZmlsdGVyJywgJ21hcCcsICd0YWtlV2hpbGUnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciB0eXBlID0gaW5kZXggKyAxLFxuICAgICAgICAgIGlzRmlsdGVyID0gdHlwZSA9PSBMQVpZX0ZJTFRFUl9GTEFHIHx8IHR5cGUgPT0gTEFaWV9XSElMRV9GTEFHO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICByZXN1bHQuX19pdGVyYXRlZXNfXy5wdXNoKHtcbiAgICAgICAgICAnaXRlcmF0ZWUnOiBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksXG4gICAgICAgICAgJ3R5cGUnOiB0eXBlXG4gICAgICAgIH0pO1xuICAgICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gcmVzdWx0Ll9fZmlsdGVyZWRfXyB8fCBpc0ZpbHRlcjtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5oZWFkYCBhbmQgYF8ubGFzdGAuXG4gICAgYXJyYXlFYWNoKFsnaGVhZCcsICdsYXN0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgdGFrZU5hbWUgPSAndGFrZScgKyAoaW5kZXggPyAnUmlnaHQnIDogJycpO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbdGFrZU5hbWVdKDEpLnZhbHVlKClbMF07XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uaW5pdGlhbGAgYW5kIGBfLnRhaWxgLlxuICAgIGFycmF5RWFjaChbJ2luaXRpYWwnLCAndGFpbCddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIGRyb3BOYW1lID0gJ2Ryb3AnICsgKGluZGV4ID8gJycgOiAnUmlnaHQnKTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9fZmlsdGVyZWRfXyA/IG5ldyBMYXp5V3JhcHBlcih0aGlzKSA6IHRoaXNbZHJvcE5hbWVdKDEpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jb21wYWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIoaWRlbnRpdHkpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuZmluZCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKHByZWRpY2F0ZSkuaGVhZCgpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuZmluZExhc3QgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKS5maW5kKHByZWRpY2F0ZSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5pbnZva2VNYXAgPSBiYXNlUmVzdChmdW5jdGlvbihwYXRoLCBhcmdzKSB7XG4gICAgICBpZiAodHlwZW9mIHBhdGggPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52b2tlKHZhbHVlLCBwYXRoLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnJlamVjdCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKG5lZ2F0ZShnZXRJdGVyYXRlZShwcmVkaWNhdGUpKSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHN0YXJ0ID0gdG9JbnRlZ2VyKHN0YXJ0KTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHRoaXM7XG4gICAgICBpZiAocmVzdWx0Ll9fZmlsdGVyZWRfXyAmJiAoc3RhcnQgPiAwIHx8IGVuZCA8IDApKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGF6eVdyYXBwZXIocmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnRha2VSaWdodCgtc3RhcnQpO1xuICAgICAgfSBlbHNlIGlmIChzdGFydCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQuZHJvcChzdGFydCk7XG4gICAgICB9XG4gICAgICBpZiAoZW5kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW5kID0gdG9JbnRlZ2VyKGVuZCk7XG4gICAgICAgIHJlc3VsdCA9IGVuZCA8IDAgPyByZXN1bHQuZHJvcFJpZ2h0KC1lbmQpIDogcmVzdWx0LnRha2UoZW5kIC0gc3RhcnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnRha2VSaWdodFdoaWxlID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKCkudGFrZVdoaWxlKHByZWRpY2F0ZSkucmV2ZXJzZSgpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGFrZShNQVhfQVJSQVlfTEVOR1RIKTtcbiAgICB9O1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgYmFzZUZvck93bihMYXp5V3JhcHBlci5wcm90b3R5cGUsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBjaGVja0l0ZXJhdGVlID0gL14oPzpmaWx0ZXJ8ZmluZHxtYXB8cmVqZWN0KXxXaGlsZSQvLnRlc3QobWV0aG9kTmFtZSksXG4gICAgICAgICAgaXNUYWtlciA9IC9eKD86aGVhZHxsYXN0KSQvLnRlc3QobWV0aG9kTmFtZSksXG4gICAgICAgICAgbG9kYXNoRnVuYyA9IGxvZGFzaFtpc1Rha2VyID8gKCd0YWtlJyArIChtZXRob2ROYW1lID09ICdsYXN0JyA/ICdSaWdodCcgOiAnJykpIDogbWV0aG9kTmFtZV0sXG4gICAgICAgICAgcmV0VW53cmFwcGVkID0gaXNUYWtlciB8fCAvXmZpbmQvLnRlc3QobWV0aG9kTmFtZSk7XG5cbiAgICAgIGlmICghbG9kYXNoRnVuYykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX18sXG4gICAgICAgICAgICBhcmdzID0gaXNUYWtlciA/IFsxXSA6IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGlzTGF6eSA9IHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIsXG4gICAgICAgICAgICBpdGVyYXRlZSA9IGFyZ3NbMF0sXG4gICAgICAgICAgICB1c2VMYXp5ID0gaXNMYXp5IHx8IGlzQXJyYXkodmFsdWUpO1xuXG4gICAgICAgIHZhciBpbnRlcmNlcHRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaEZ1bmMuYXBwbHkobG9kYXNoLCBhcnJheVB1c2goW3ZhbHVlXSwgYXJncykpO1xuICAgICAgICAgIHJldHVybiAoaXNUYWtlciAmJiBjaGFpbkFsbCkgPyByZXN1bHRbMF0gOiByZXN1bHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHVzZUxhenkgJiYgY2hlY2tJdGVyYXRlZSAmJiB0eXBlb2YgaXRlcmF0ZWUgPT0gJ2Z1bmN0aW9uJyAmJiBpdGVyYXRlZS5sZW5ndGggIT0gMSkge1xuICAgICAgICAgIC8vIEF2b2lkIGxhenkgdXNlIGlmIHRoZSBpdGVyYXRlZSBoYXMgYSBcImxlbmd0aFwiIHZhbHVlIG90aGVyIHRoYW4gYDFgLlxuICAgICAgICAgIGlzTGF6eSA9IHVzZUxhenkgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2hhaW5BbGwgPSB0aGlzLl9fY2hhaW5fXyxcbiAgICAgICAgICAgIGlzSHlicmlkID0gISF0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCxcbiAgICAgICAgICAgIGlzVW53cmFwcGVkID0gcmV0VW53cmFwcGVkICYmICFjaGFpbkFsbCxcbiAgICAgICAgICAgIG9ubHlMYXp5ID0gaXNMYXp5ICYmICFpc0h5YnJpZDtcblxuICAgICAgICBpZiAoIXJldFVud3JhcHBlZCAmJiB1c2VMYXp5KSB7XG4gICAgICAgICAgdmFsdWUgPSBvbmx5TGF6eSA/IHZhbHVlIDogbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHZhbHVlLCBhcmdzKTtcbiAgICAgICAgICByZXN1bHQuX19hY3Rpb25zX18ucHVzaCh7ICdmdW5jJzogdGhydSwgJ2FyZ3MnOiBbaW50ZXJjZXB0b3JdLCAndGhpc0FyZyc6IHVuZGVmaW5lZCB9KTtcbiAgICAgICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIocmVzdWx0LCBjaGFpbkFsbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW53cmFwcGVkICYmIG9ubHlMYXp5KSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gdGhpcy50aHJ1KGludGVyY2VwdG9yKTtcbiAgICAgICAgcmV0dXJuIGlzVW53cmFwcGVkID8gKGlzVGFrZXIgPyByZXN1bHQudmFsdWUoKVswXSA6IHJlc3VsdC52YWx1ZSgpKSA6IHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYEFycmF5YCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBhcnJheUVhY2goWydwb3AnLCAncHVzaCcsICdzaGlmdCcsICdzb3J0JywgJ3NwbGljZScsICd1bnNoaWZ0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gYXJyYXlQcm90b1ttZXRob2ROYW1lXSxcbiAgICAgICAgICBjaGFpbk5hbWUgPSAvXig/OnB1c2h8c29ydHx1bnNoaWZ0KSQvLnRlc3QobWV0aG9kTmFtZSkgPyAndGFwJyA6ICd0aHJ1JyxcbiAgICAgICAgICByZXRVbndyYXBwZWQgPSAvXig/OnBvcHxzaGlmdCkkLy50ZXN0KG1ldGhvZE5hbWUpO1xuXG4gICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBpZiAocmV0VW53cmFwcGVkICYmICF0aGlzLl9fY2hhaW5fXykge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmFsdWUoKTtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW10sIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzW2NoYWluTmFtZV0oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW10sIGFyZ3MpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBNYXAgbWluaWZpZWQgbWV0aG9kIG5hbWVzIHRvIHRoZWlyIHJlYWwgbmFtZXMuXG4gICAgYmFzZUZvck93bihMYXp5V3JhcHBlci5wcm90b3R5cGUsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBsb2Rhc2hGdW5jID0gbG9kYXNoW21ldGhvZE5hbWVdO1xuICAgICAgaWYgKGxvZGFzaEZ1bmMpIHtcbiAgICAgICAgdmFyIGtleSA9IGxvZGFzaEZ1bmMubmFtZSArICcnO1xuICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwocmVhbE5hbWVzLCBrZXkpKSB7XG4gICAgICAgICAgcmVhbE5hbWVzW2tleV0gPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZWFsTmFtZXNba2V5XS5wdXNoKHsgJ25hbWUnOiBtZXRob2ROYW1lLCAnZnVuYyc6IGxvZGFzaEZ1bmMgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZWFsTmFtZXNbY3JlYXRlSHlicmlkKHVuZGVmaW5lZCwgV1JBUF9CSU5EX0tFWV9GTEFHKS5uYW1lXSA9IFt7XG4gICAgICAnbmFtZSc6ICd3cmFwcGVyJyxcbiAgICAgICdmdW5jJzogdW5kZWZpbmVkXG4gICAgfV07XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgTGF6eVdyYXBwZXJgLlxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jbG9uZSA9IGxhenlDbG9uZTtcbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUucmV2ZXJzZSA9IGxhenlSZXZlcnNlO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS52YWx1ZSA9IGxhenlWYWx1ZTtcblxuICAgIC8vIEFkZCBjaGFpbiBzZXF1ZW5jZSBtZXRob2RzIHRvIHRoZSBgbG9kYXNoYCB3cmFwcGVyLlxuICAgIGxvZGFzaC5wcm90b3R5cGUuYXQgPSB3cmFwcGVyQXQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jaGFpbiA9IHdyYXBwZXJDaGFpbjtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNvbW1pdCA9IHdyYXBwZXJDb21taXQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5uZXh0ID0gd3JhcHBlck5leHQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5wbGFudCA9IHdyYXBwZXJQbGFudDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnJldmVyc2UgPSB3cmFwcGVyUmV2ZXJzZTtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnRvSlNPTiA9IGxvZGFzaC5wcm90b3R5cGUudmFsdWVPZiA9IGxvZGFzaC5wcm90b3R5cGUudmFsdWUgPSB3cmFwcGVyVmFsdWU7XG5cbiAgICAvLyBBZGQgbGF6eSBhbGlhc2VzLlxuICAgIGxvZGFzaC5wcm90b3R5cGUuZmlyc3QgPSBsb2Rhc2gucHJvdG90eXBlLmhlYWQ7XG5cbiAgICBpZiAoc3ltSXRlcmF0b3IpIHtcbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbc3ltSXRlcmF0b3JdID0gd3JhcHBlclRvSXRlcmF0b3I7XG4gICAgfVxuICAgIHJldHVybiBsb2Rhc2g7XG4gIH0pO1xuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8vIEV4cG9ydCBsb2Rhc2guXG4gIHZhciBfID0gcnVuSW5Db250ZXh0KCk7XG5cbiAgLy8gU29tZSBBTUQgYnVpbGQgb3B0aW1pemVycywgbGlrZSByLmpzLCBjaGVjayBmb3IgY29uZGl0aW9uIHBhdHRlcm5zIGxpa2U6XG4gIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIEV4cG9zZSBMb2Rhc2ggb24gdGhlIGdsb2JhbCBvYmplY3QgdG8gcHJldmVudCBlcnJvcnMgd2hlbiBMb2Rhc2ggaXNcbiAgICAvLyBsb2FkZWQgYnkgYSBzY3JpcHQgdGFnIGluIHRoZSBwcmVzZW5jZSBvZiBhbiBBTUQgbG9hZGVyLlxuICAgIC8vIFNlZSBodHRwOi8vcmVxdWlyZWpzLm9yZy9kb2NzL2Vycm9ycy5odG1sI21pc21hdGNoIGZvciBtb3JlIGRldGFpbHMuXG4gICAgLy8gVXNlIGBfLm5vQ29uZmxpY3RgIHRvIHJlbW92ZSBMb2Rhc2ggZnJvbSB0aGUgZ2xvYmFsIG9iamVjdC5cbiAgICByb290Ll8gPSBfO1xuXG4gICAgLy8gRGVmaW5lIGFzIGFuIGFub255bW91cyBtb2R1bGUgc28sIHRocm91Z2ggcGF0aCBtYXBwaW5nLCBpdCBjYW4gYmVcbiAgICAvLyByZWZlcmVuY2VkIGFzIHRoZSBcInVuZGVyc2NvcmVcIiBtb2R1bGUuXG4gICAgZGVmaW5lKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIF87XG4gICAgfSk7XG4gIH1cbiAgLy8gQ2hlY2sgZm9yIGBleHBvcnRzYCBhZnRlciBgZGVmaW5lYCBpbiBjYXNlIGEgYnVpbGQgb3B0aW1pemVyIGFkZHMgaXQuXG4gIGVsc2UgaWYgKGZyZWVNb2R1bGUpIHtcbiAgICAvLyBFeHBvcnQgZm9yIE5vZGUuanMuXG4gICAgKGZyZWVNb2R1bGUuZXhwb3J0cyA9IF8pLl8gPSBfO1xuICAgIC8vIEV4cG9ydCBmb3IgQ29tbW9uSlMgc3VwcG9ydC5cbiAgICBmcmVlRXhwb3J0cy5fID0gXztcbiAgfVxuICBlbHNlIHtcbiAgICAvLyBFeHBvcnQgdG8gdGhlIGdsb2JhbCBvYmplY3QuXG4gICAgcm9vdC5fID0gXztcbiAgfVxufS5jYWxsKHRoaXMpKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0bG9hZGVkOiBmYWxzZSxcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG5cdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5tZCA9IChtb2R1bGUpID0+IHtcblx0bW9kdWxlLnBhdGhzID0gW107XG5cdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0cmV0dXJuIG1vZHVsZTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbmV4cG9ydCBjb25zdCBlZGl0RG9tID0gKCgpID0+IHtcbiAgICBjb25zdCBhZGRQbGF5ZXJzQ291bnQgPSAoY291bnQpID0+IHtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcl9fc3RhdHMtc2VjdGlvbl9fbGlzdF9faXRlbV9fcmVzdWx0JykuaW5uZXJIVE1MID0gY291bnQ7XG4gICAgfTtcblxuICAgIGNvbnN0IGFkZEN1cnJlbnRXZWVrID0gKHdlZWspID0+IHtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcl9fc3RhdHMtc2VjdGlvbl9fdG9wLXJlc3VsdCcpLmlubmVySFRNTCA9IHdlZWs7XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGFkZFBsYXllcnNDb3VudCxcbiAgICAgICAgYWRkQ3VycmVudFdlZWtcbiAgICB9XG59KSgpO1xuXG4iLCIvKiBUYWJ1bGF0b3IgdjUuNS4yIChjKSBPbGl2ZXIgRm9sa2VyZCAyMDIzICovXG5jbGFzcyBDb3JlRmVhdHVyZXtcblxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0dGhpcy50YWJsZSA9IHRhYmxlO1xuXHR9XG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLyBEYXRhTG9hZCAvLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXHRyZWxvYWREYXRhKGRhdGEsIHNpbGVudCwgY29sdW1uc0NoYW5nZWQpe1xuXHRcdHJldHVybiB0aGlzLnRhYmxlLmRhdGFMb2FkZXIubG9hZChkYXRhLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBzaWxlbnQsIGNvbHVtbnNDaGFuZ2VkKTtcblx0fVxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vIExvY2FsaXphdGlvbiAvLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0bGFuZ1RleHQoKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5tb2R1bGVzLmxvY2FsaXplLmdldFRleHQoLi4uYXJndW1lbnRzKTtcblx0fVxuXG5cdGxhbmdCaW5kKCl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUubW9kdWxlcy5sb2NhbGl6ZS5iaW5kKC4uLmFyZ3VtZW50cyk7XG5cdH1cblxuXHRsYW5nTG9jYWxlKCl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUubW9kdWxlcy5sb2NhbGl6ZS5nZXRMb2NhbGUoLi4uYXJndW1lbnRzKTtcblx0fVxuXG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8gSW50ZXIgVGFibGUgQ29tbXMgLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXHRjb21tc0Nvbm5lY3Rpb25zKCl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUubW9kdWxlcy5jb21tcy5nZXRDb25uZWN0aW9ucyguLi5hcmd1bWVudHMpO1xuXHR9XG5cblx0Y29tbXNTZW5kKCl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUubW9kdWxlcy5jb21tcy5zZW5kKC4uLmFyZ3VtZW50cyk7XG5cdH1cblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLyBMYXlvdXQgIC8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdGxheW91dE1vZGUoKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5tb2R1bGVzLmxheW91dC5nZXRNb2RlKCk7XG5cdH1cblxuXHRsYXlvdXRSZWZyZXNoKGZvcmNlKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5tb2R1bGVzLmxheW91dC5sYXlvdXQoZm9yY2UpO1xuXHR9XG5cblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vIEV2ZW50IEJ1cyAvLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdHN1YnNjcmliZSgpe1xuXHRcdHJldHVybiB0aGlzLnRhYmxlLmV2ZW50QnVzLnN1YnNjcmliZSguLi5hcmd1bWVudHMpO1xuXHR9XG5cblx0dW5zdWJzY3JpYmUoKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5ldmVudEJ1cy51bnN1YnNjcmliZSguLi5hcmd1bWVudHMpO1xuXHR9XG5cblx0c3Vic2NyaWJlZChrZXkpe1xuXHRcdHJldHVybiB0aGlzLnRhYmxlLmV2ZW50QnVzLnN1YnNjcmliZWQoa2V5KTtcblx0fVxuXG5cdHN1YnNjcmlwdGlvbkNoYW5nZSgpe1xuXHRcdHJldHVybiB0aGlzLnRhYmxlLmV2ZW50QnVzLnN1YnNjcmlwdGlvbkNoYW5nZSguLi5hcmd1bWVudHMpO1xuXHR9XG5cblx0ZGlzcGF0Y2goKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5ldmVudEJ1cy5kaXNwYXRjaCguLi5hcmd1bWVudHMpO1xuXHR9XG5cblx0Y2hhaW4oKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5ldmVudEJ1cy5jaGFpbiguLi5hcmd1bWVudHMpO1xuXHR9XG5cblx0Y29uZmlybSgpe1xuXHRcdHJldHVybiB0aGlzLnRhYmxlLmV2ZW50QnVzLmNvbmZpcm0oLi4uYXJndW1lbnRzKTtcblx0fVxuXG5cdGRpc3BhdGNoRXh0ZXJuYWwoKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5leHRlcm5hbEV2ZW50cy5kaXNwYXRjaCguLi5hcmd1bWVudHMpO1xuXHR9XG5cblx0c3Vic2NyaWJlZEV4dGVybmFsKGtleSl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUuZXh0ZXJuYWxFdmVudHMuc3Vic2NyaWJlZChrZXkpO1xuXHR9XG5cblx0c3Vic2NyaXB0aW9uQ2hhbmdlRXh0ZXJuYWwoKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5leHRlcm5hbEV2ZW50cy5zdWJzY3JpcHRpb25DaGFuZ2UoLi4uYXJndW1lbnRzKTtcblx0fVxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vIE9wdGlvbnMgLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0b3B0aW9ucyhrZXkpe1xuXHRcdHJldHVybiB0aGlzLnRhYmxlLm9wdGlvbnNba2V5XTtcblx0fVxuXG5cdHNldE9wdGlvbihrZXksIHZhbHVlKXtcblx0XHRpZih0eXBlb2YgdmFsdWUgIT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0dGhpcy50YWJsZS5vcHRpb25zW2tleV0gPSB2YWx1ZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy50YWJsZS5vcHRpb25zW2tleV07XG5cdH1cblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8gRGVwcmVjYXRpb24gQ2hlY2tzIC8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdGRlcHJlY2F0aW9uQ2hlY2sob2xkT3B0aW9uLCBuZXdPcHRpb24pe1xuXHRcdHJldHVybiB0aGlzLnRhYmxlLmRlcHJlY2F0aW9uQWR2aXNvci5jaGVjayhvbGRPcHRpb24sIG5ld09wdGlvbik7XG5cdH1cblxuXHRkZXByZWNhdGlvbkNoZWNrTXNnKG9sZE9wdGlvbiwgbXNnKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5kZXByZWNhdGlvbkFkdmlzb3IuY2hlY2tNc2cob2xkT3B0aW9uLCBtc2cpO1xuXHR9XG5cblx0ZGVwcmVjYXRpb25Nc2cobXNnKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5kZXByZWNhdGlvbkFkdmlzb3IubXNnKG1zZyk7XG5cdH1cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8gTW9kdWxlcyAvLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXHRtb2R1bGUoa2V5KXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5tb2R1bGUoa2V5KTtcblx0fVxufVxuXG5jbGFzcyBIZWxwZXJze1xuXG5cdHN0YXRpYyBlbFZpc2libGUoZWwpe1xuXHRcdHJldHVybiAhKGVsLm9mZnNldFdpZHRoIDw9IDAgJiYgZWwub2Zmc2V0SGVpZ2h0IDw9IDApO1xuXHR9XG5cblx0c3RhdGljIGVsT2Zmc2V0KGVsKXtcblx0XHR2YXIgYm94ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBib3gudG9wICsgd2luZG93LnBhZ2VZT2Zmc2V0IC0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFRvcCxcblx0XHRcdGxlZnQ6IGJveC5sZWZ0ICsgd2luZG93LnBhZ2VYT2Zmc2V0IC0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudExlZnRcblx0XHR9O1xuXHR9XG5cblx0c3RhdGljIGRlZXBDbG9uZShvYmosIGNsb25lLCBsaXN0ID0gW10pe1xuXHRcdHZhciBvYmplY3RQcm90byA9IHt9Ll9fcHJvdG9fXyxcblx0XHRhcnJheVByb3RvID0gW10uX19wcm90b19fO1xuXG5cdFx0aWYgKCFjbG9uZSl7XG5cdFx0XHRjbG9uZSA9IE9iamVjdC5hc3NpZ24oQXJyYXkuaXNBcnJheShvYmopID8gW10gOiB7fSwgb2JqKTtcblx0XHR9XG5cblx0XHRmb3IodmFyIGkgaW4gb2JqKSB7XG5cdFx0XHRsZXQgc3ViamVjdCA9IG9ialtpXSxcblx0XHRcdG1hdGNoLCBjb3B5O1xuXG5cdFx0XHRpZihzdWJqZWN0ICE9IG51bGwgJiYgdHlwZW9mIHN1YmplY3QgPT09IFwib2JqZWN0XCIgJiYgKHN1YmplY3QuX19wcm90b19fID09PSBvYmplY3RQcm90byB8fCBzdWJqZWN0Ll9fcHJvdG9fXyA9PT0gYXJyYXlQcm90bykpe1xuXHRcdFx0XHRtYXRjaCA9IGxpc3QuZmluZEluZGV4KChpdGVtKSA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuIGl0ZW0uc3ViamVjdCA9PT0gc3ViamVjdDtcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0aWYobWF0Y2ggPiAtMSl7XG5cdFx0XHRcdFx0Y2xvbmVbaV0gPSBsaXN0W21hdGNoXS5jb3B5O1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0Y29weSA9IE9iamVjdC5hc3NpZ24oQXJyYXkuaXNBcnJheShzdWJqZWN0KSA/IFtdIDoge30sIHN1YmplY3QpO1xuXG5cdFx0XHRcdFx0bGlzdC51bnNoaWZ0KHtzdWJqZWN0LCBjb3B5fSk7XG5cblx0XHRcdFx0XHRjbG9uZVtpXSA9IHRoaXMuZGVlcENsb25lKHN1YmplY3QsIGNvcHksIGxpc3QpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9XG59XG5cbmNsYXNzIFBvcHVwIGV4dGVuZHMgQ29yZUZlYXR1cmV7XG5cdGNvbnN0cnVjdG9yKHRhYmxlLCBlbGVtZW50LCBwYXJlbnQpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblx0XHRcblx0XHR0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuXHRcdHRoaXMuY29udGFpbmVyID0gdGhpcy5fbG9va3VwQ29udGFpbmVyKCk7XG5cdFx0XG5cdFx0dGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG5cdFx0XG5cdFx0dGhpcy5yZXZlcnNlZFggPSBmYWxzZTtcblx0XHR0aGlzLmNoaWxkUG9wdXAgPSBudWxsO1xuXHRcdHRoaXMuYmx1cmFibGUgPSBmYWxzZTtcblx0XHR0aGlzLmJsdXJDYWxsYmFjayA9IG51bGw7XG5cdFx0dGhpcy5ibHVyRXZlbnRzQm91bmQgPSBmYWxzZTtcblx0XHR0aGlzLnJlbmRlcmVkQ2FsbGJhY2sgPSBudWxsO1xuXHRcdFxuXHRcdHRoaXMudmlzaWJsZSA9IGZhbHNlO1xuXHRcdHRoaXMuaGlkZWFibGUgPSB0cnVlO1xuXHRcdFxuXHRcdHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXBvcHVwLWNvbnRhaW5lclwiKTtcblx0XHRcblx0XHR0aGlzLmJsdXJFdmVudCA9IHRoaXMuaGlkZS5iaW5kKHRoaXMsIGZhbHNlKTtcblx0XHR0aGlzLmVzY0V2ZW50ID0gdGhpcy5fZXNjYXBlQ2hlY2suYmluZCh0aGlzKTtcblx0XHRcblx0XHR0aGlzLmRlc3Ryb3lCaW5kaW5nID0gdGhpcy50YWJsZURlc3Ryb3llZC5iaW5kKHRoaXMpO1xuXHRcdHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG5cdH1cblx0XG5cdHRhYmxlRGVzdHJveWVkKCl7XG5cdFx0dGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xuXHRcdHRoaXMuaGlkZSh0cnVlKTtcblx0fVxuXHRcblx0X2xvb2t1cENvbnRhaW5lcigpe1xuXHRcdHZhciBjb250YWluZXIgPSB0aGlzLnRhYmxlLm9wdGlvbnMucG9wdXBDb250YWluZXI7XG5cdFx0XG5cdFx0aWYodHlwZW9mIGNvbnRhaW5lciA9PT0gXCJzdHJpbmdcIil7XG5cdFx0XHRjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lcik7XG5cdFx0XHRcblx0XHRcdGlmKCFjb250YWluZXIpe1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJNZW51IEVycm9yIC0gbm8gY29udGFpbmVyIGVsZW1lbnQgZm91bmQgbWF0Y2hpbmcgc2VsZWN0b3I6XCIsICB0aGlzLnRhYmxlLm9wdGlvbnMucG9wdXBDb250YWluZXIgLCBcIihkZWZhdWx0aW5nIHRvIGRvY3VtZW50IGJvZHkpXCIpO1xuXHRcdFx0fVxuXHRcdH1lbHNlIGlmIChjb250YWluZXIgPT09IHRydWUpe1xuXHRcdFx0Y29udGFpbmVyID0gdGhpcy50YWJsZS5lbGVtZW50O1xuXHRcdH1cblx0XHRcblx0XHRpZihjb250YWluZXIgJiYgIXRoaXMuX2NoZWNrQ29udGFpbmVySXNQYXJlbnQoY29udGFpbmVyKSl7XG5cdFx0XHRjb250YWluZXIgPSBmYWxzZTtcblx0XHRcdGNvbnNvbGUud2FybihcIk1lbnUgRXJyb3IgLSBjb250YWluZXIgZWxlbWVudCBkb2VzIG5vdCBjb250YWluIHRoaXMgdGFibGU6XCIsICB0aGlzLnRhYmxlLm9wdGlvbnMucG9wdXBDb250YWluZXIgLCBcIihkZWZhdWx0aW5nIHRvIGRvY3VtZW50IGJvZHkpXCIpO1xuXHRcdH1cblx0XHRcblx0XHRpZighY29udGFpbmVyKXtcblx0XHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmJvZHk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBjb250YWluZXI7XG5cdH1cblx0XG5cdF9jaGVja0NvbnRhaW5lcklzUGFyZW50KGNvbnRhaW5lciwgZWxlbWVudCA9IHRoaXMudGFibGUuZWxlbWVudCl7XG5cdFx0aWYoY29udGFpbmVyID09PSBlbGVtZW50KXtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJldHVybiBlbGVtZW50LnBhcmVudE5vZGUgPyB0aGlzLl9jaGVja0NvbnRhaW5lcklzUGFyZW50KGNvbnRhaW5lciwgZWxlbWVudC5wYXJlbnROb2RlKSA6IGZhbHNlO1xuXHRcdH1cblx0fVxuXHRcblx0cmVuZGVyQ2FsbGJhY2soY2FsbGJhY2spe1xuXHRcdHRoaXMucmVuZGVyZWRDYWxsYmFjayA9IGNhbGxiYWNrO1xuXHR9XG5cdFxuXHRjb250YWluZXJFdmVudENvb3JkcyhlKXtcblx0XHR2YXIgdG91Y2ggPSAhKGUgaW5zdGFuY2VvZiBNb3VzZUV2ZW50KTtcblx0XHRcblx0XHR2YXIgeCA9IHRvdWNoID8gZS50b3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcblx0XHR2YXIgeSA9IHRvdWNoID8gZS50b3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcblx0XHRcblx0XHRpZih0aGlzLmNvbnRhaW5lciAhPT0gZG9jdW1lbnQuYm9keSl7XG5cdFx0XHRsZXQgcGFyZW50T2Zmc2V0ID0gSGVscGVycy5lbE9mZnNldCh0aGlzLmNvbnRhaW5lcik7XG5cdFx0XHRcblx0XHRcdHggLT0gcGFyZW50T2Zmc2V0LmxlZnQ7XG5cdFx0XHR5IC09IHBhcmVudE9mZnNldC50b3A7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiB7eCwgeX07XG5cdH1cblx0XG5cdGVsZW1lbnRQb3NpdGlvbkNvb3JkcyhlbGVtZW50LCBwb3NpdGlvbiA9IFwicmlnaHRcIil7XG5cdFx0dmFyIG9mZnNldCA9IEhlbHBlcnMuZWxPZmZzZXQoZWxlbWVudCksXG5cdFx0Y29udGFpbmVyT2Zmc2V0LCB4LCB5O1xuXHRcdFxuXHRcdGlmKHRoaXMuY29udGFpbmVyICE9PSBkb2N1bWVudC5ib2R5KXtcblx0XHRcdGNvbnRhaW5lck9mZnNldCA9IEhlbHBlcnMuZWxPZmZzZXQodGhpcy5jb250YWluZXIpO1xuXHRcdFx0XG5cdFx0XHRvZmZzZXQubGVmdCAtPSBjb250YWluZXJPZmZzZXQubGVmdDtcblx0XHRcdG9mZnNldC50b3AgLT0gY29udGFpbmVyT2Zmc2V0LnRvcDtcblx0XHR9XG5cdFx0XG5cdFx0c3dpdGNoKHBvc2l0aW9uKXtcblx0XHRcdGNhc2UgXCJyaWdodFwiOlxuXHRcdFx0XHR4ID0gb2Zmc2V0LmxlZnQgKyBlbGVtZW50Lm9mZnNldFdpZHRoO1xuXHRcdFx0XHR5ID0gb2Zmc2V0LnRvcCAtIDE7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRjYXNlIFwiYm90dG9tXCI6XG5cdFx0XHRcdHggPSBvZmZzZXQubGVmdDtcblx0XHRcdFx0eSA9IG9mZnNldC50b3AgKyBlbGVtZW50Lm9mZnNldEhlaWdodDtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGNhc2UgXCJsZWZ0XCI6XG5cdFx0XHRcdHggPSBvZmZzZXQubGVmdDtcblx0XHRcdFx0eSA9IG9mZnNldC50b3AgLSAxO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0Y2FzZSBcInRvcFwiOlxuXHRcdFx0XHR4ID0gb2Zmc2V0LmxlZnQ7XG5cdFx0XHRcdHkgPSBvZmZzZXQudG9wO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0Y2FzZSBcImNlbnRlclwiOlxuXHRcdFx0XHR4ID0gb2Zmc2V0LmxlZnQgKyAoZWxlbWVudC5vZmZzZXRXaWR0aCAvIDIpO1xuXHRcdFx0XHR5ID0gb2Zmc2V0LnRvcCArIChlbGVtZW50Lm9mZnNldEhlaWdodCAvIDIpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4ge3gsIHksIG9mZnNldH07XG5cdH1cblx0XG5cdHNob3cob3JpZ2luLCBwb3NpdGlvbil7XG5cdFx0dmFyIHgsIHksIHBhcmVudEVsLCBwYXJlbnRPZmZzZXQsIGNvb3Jkcztcblx0XHRcblx0XHRpZih0aGlzLmRlc3Ryb3llZCB8fCB0aGlzLnRhYmxlLmRlc3Ryb3llZCl7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0XG5cdFx0aWYob3JpZ2luIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpe1xuXHRcdFx0cGFyZW50RWwgPSBvcmlnaW47XG5cdFx0XHRjb29yZHMgPSB0aGlzLmVsZW1lbnRQb3NpdGlvbkNvb3JkcyhvcmlnaW4sIHBvc2l0aW9uKTtcblx0XHRcdFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0gY29vcmRzLm9mZnNldDtcblx0XHRcdHggPSBjb29yZHMueDtcblx0XHRcdHkgPSBjb29yZHMueTtcblx0XHRcdFxuXHRcdH1lbHNlIGlmKHR5cGVvZiBvcmlnaW4gPT09IFwibnVtYmVyXCIpe1xuXHRcdFx0cGFyZW50T2Zmc2V0ID0ge3RvcDowLCBsZWZ0OjB9O1xuXHRcdFx0eCA9IG9yaWdpbjtcblx0XHRcdHkgPSBwb3NpdGlvbjtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb29yZHMgPSB0aGlzLmNvbnRhaW5lckV2ZW50Q29vcmRzKG9yaWdpbik7XG5cdFx0XHRcblx0XHRcdHggPSBjb29yZHMueDtcblx0XHRcdHkgPSBjb29yZHMueTtcblx0XHRcdFxuXHRcdFx0dGhpcy5yZXZlcnNlZFggPSBmYWxzZTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5lbGVtZW50LnN0eWxlLnRvcCA9IHkgKyBcInB4XCI7XG5cdFx0dGhpcy5lbGVtZW50LnN0eWxlLmxlZnQgPSB4ICsgXCJweFwiO1xuXHRcdFxuXHRcdHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudCk7XG5cdFx0XG5cdFx0aWYodHlwZW9mIHRoaXMucmVuZGVyZWRDYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiKXtcblx0XHRcdHRoaXMucmVuZGVyZWRDYWxsYmFjaygpO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLl9maXRUb1NjcmVlbih4LCB5LCBwYXJlbnRFbCwgcGFyZW50T2Zmc2V0LCBwb3NpdGlvbik7XG5cdFx0XG5cdFx0dGhpcy52aXNpYmxlID0gdHJ1ZTtcblx0XHRcblx0XHR0aGlzLnN1YnNjcmliZShcInRhYmxlLWRlc3Ryb3lcIiwgdGhpcy5kZXN0cm95QmluZGluZyk7XG5cdFx0XG5cdFx0dGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgKGUpID0+IHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblx0XG5cdF9maXRUb1NjcmVlbih4LCB5LCBwYXJlbnRFbCwgcGFyZW50T2Zmc2V0LCBwb3NpdGlvbil7XG5cdFx0dmFyIHNjcm9sbFRvcCA9IHRoaXMuY29udGFpbmVyID09PSBkb2N1bWVudC5ib2R5ID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCA6IHRoaXMuY29udGFpbmVyLnNjcm9sbFRvcDtcblx0XHRcblx0XHQvL21vdmUgbWVudSB0byBzdGFydCBvbiByaWdodCBlZGdlIGlmIGl0IGlzIHRvbyBjbG9zZSB0byB0aGUgZWRnZSBvZiB0aGUgc2NyZWVuXG5cdFx0aWYoKHggKyB0aGlzLmVsZW1lbnQub2Zmc2V0V2lkdGgpID49IHRoaXMuY29udGFpbmVyLm9mZnNldFdpZHRoIHx8IHRoaXMucmV2ZXJzZWRYKXtcblx0XHRcdHRoaXMuZWxlbWVudC5zdHlsZS5sZWZ0ID0gXCJcIjtcblx0XHRcdFxuXHRcdFx0aWYocGFyZW50RWwpe1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQuc3R5bGUucmlnaHQgPSAodGhpcy5jb250YWluZXIub2Zmc2V0V2lkdGggLSBwYXJlbnRPZmZzZXQubGVmdCkgKyBcInB4XCI7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5zdHlsZS5yaWdodCA9ICh0aGlzLmNvbnRhaW5lci5vZmZzZXRXaWR0aCAtIHgpICsgXCJweFwiO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLnJldmVyc2VkWCA9IHRydWU7XG5cdFx0fVxuXHRcdFxuXHRcdC8vbW92ZSBtZW51IHRvIHN0YXJ0IG9uIGJvdHRvbSBlZGdlIGlmIGl0IGlzIHRvbyBjbG9zZSB0byB0aGUgZWRnZSBvZiB0aGUgc2NyZWVuXG5cdFx0aWYoKHkgKyB0aGlzLmVsZW1lbnQub2Zmc2V0SGVpZ2h0KSA+IE1hdGgubWF4KHRoaXMuY29udGFpbmVyLm9mZnNldEhlaWdodCwgc2Nyb2xsVG9wID8gdGhpcy5jb250YWluZXIuc2Nyb2xsSGVpZ2h0IDogMCkpIHtcblx0XHRcdGlmKHBhcmVudEVsKXtcblx0XHRcdFx0c3dpdGNoKHBvc2l0aW9uKXtcblx0XHRcdFx0XHRjYXNlIFwiYm90dG9tXCI6XG5cdFx0XHRcdFx0XHR0aGlzLmVsZW1lbnQuc3R5bGUudG9wID0gKHBhcnNlSW50KHRoaXMuZWxlbWVudC5zdHlsZS50b3ApIC0gdGhpcy5lbGVtZW50Lm9mZnNldEhlaWdodCAtIHBhcmVudEVsLm9mZnNldEhlaWdodCAtIDEpICsgXCJweFwiO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdHRoaXMuZWxlbWVudC5zdHlsZS50b3AgPSAocGFyc2VJbnQodGhpcy5lbGVtZW50LnN0eWxlLnRvcCkgLSB0aGlzLmVsZW1lbnQub2Zmc2V0SGVpZ2h0ICsgcGFyZW50RWwub2Zmc2V0SGVpZ2h0ICsgMSkgKyBcInB4XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5zdHlsZS50b3AgPSAocGFyc2VJbnQodGhpcy5lbGVtZW50LnN0eWxlLnRvcCkgLSB0aGlzLmVsZW1lbnQub2Zmc2V0SGVpZ2h0KSArIFwicHhcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdGlzVmlzaWJsZSgpe1xuXHRcdHJldHVybiB0aGlzLnZpc2libGU7XG5cdH1cblx0XG5cdGhpZGVPbkJsdXIoY2FsbGJhY2spe1xuXHRcdHRoaXMuYmx1cmFibGUgPSB0cnVlO1xuXHRcdFxuXHRcdGlmKHRoaXMudmlzaWJsZSl7XG5cdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0aWYodGhpcy52aXNpYmxlKXtcblx0XHRcdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHRoaXMuYmx1ckV2ZW50KTtcblx0XHRcdFx0XHR0aGlzLnN1YnNjcmliZShcImNlbGwtZWRpdGluZ1wiLCB0aGlzLmJsdXJFdmVudCk7XG5cdFx0XHRcdFx0ZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5ibHVyRXZlbnQpO1xuXHRcdFx0XHRcdGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcImNvbnRleHRtZW51XCIsIHRoaXMuYmx1ckV2ZW50KTtcblx0XHRcdFx0XHRkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5ibHVyRXZlbnQpO1xuXHRcdFx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMuYmx1ckV2ZW50KTtcblx0XHRcdFx0XHRkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuZXNjRXZlbnQpO1xuXG5cdFx0XHRcdFx0dGhpcy5ibHVyRXZlbnRzQm91bmQgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCAxMDApO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmJsdXJDYWxsYmFjayA9IGNhbGxiYWNrO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXHRcblx0X2VzY2FwZUNoZWNrKGUpe1xuXHRcdGlmKGUua2V5Q29kZSA9PSAyNyl7XG5cdFx0XHR0aGlzLmhpZGUoKTtcblx0XHR9XG5cdH1cblx0XG5cdGJsb2NrSGlkZSgpe1xuXHRcdHRoaXMuaGlkZWFibGUgPSBmYWxzZTtcblx0fVxuXHRcblx0cmVzdG9yZUhpZGUoKXtcblx0XHR0aGlzLmhpZGVhYmxlID0gdHJ1ZTtcblx0fVxuXHRcblx0aGlkZShzaWxlbnQgPSBmYWxzZSl7XG5cdFx0aWYodGhpcy52aXNpYmxlICYmIHRoaXMuaGlkZWFibGUpe1xuXHRcdFx0aWYodGhpcy5ibHVyYWJsZSAmJiB0aGlzLmJsdXJFdmVudHNCb3VuZCl7XG5cdFx0XHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5lc2NFdmVudCk7XG5cdFx0XHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuYmx1ckV2ZW50KTtcblx0XHRcdFx0ZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFwiY29udGV4dG1lbnVcIiwgdGhpcy5ibHVyRXZlbnQpO1xuXHRcdFx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5ibHVyRXZlbnQpO1xuXHRcdFx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLmJsdXJFdmVudCk7XG5cdFx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgdGhpcy5ibHVyRXZlbnQpO1xuXHRcdFx0XHR0aGlzLnVuc3Vic2NyaWJlKFwiY2VsbC1lZGl0aW5nXCIsIHRoaXMuYmx1ckV2ZW50KTtcblxuXHRcdFx0XHR0aGlzLmJsdXJFdmVudHNCb3VuZCA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZih0aGlzLmNoaWxkUG9wdXApe1xuXHRcdFx0XHR0aGlzLmNoaWxkUG9wdXAuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZih0aGlzLnBhcmVudCl7XG5cdFx0XHRcdHRoaXMucGFyZW50LmNoaWxkUG9wdXAgPSBudWxsO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZih0aGlzLmVsZW1lbnQucGFyZW50Tm9kZSl7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHRoaXMudmlzaWJsZSA9IGZhbHNlO1xuXHRcdFx0XG5cdFx0XHRpZih0aGlzLmJsdXJDYWxsYmFjayAmJiAhc2lsZW50KXtcblx0XHRcdFx0dGhpcy5ibHVyQ2FsbGJhY2soKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy51bnN1YnNjcmliZShcInRhYmxlLWRlc3Ryb3lcIiwgdGhpcy5kZXN0cm95QmluZGluZyk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cdFxuXHRjaGlsZChlbGVtZW50KXtcblx0XHRpZih0aGlzLmNoaWxkUG9wdXApe1xuXHRcdFx0dGhpcy5jaGlsZFBvcHVwLmhpZGUoKTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5jaGlsZFBvcHVwID0gbmV3IFBvcHVwKHRoaXMudGFibGUsIGVsZW1lbnQsIHRoaXMpO1xuXHRcdFxuXHRcdHJldHVybiB0aGlzLmNoaWxkUG9wdXA7XG5cdH1cbn1cblxuY2xhc3MgTW9kdWxlIGV4dGVuZHMgQ29yZUZlYXR1cmV7XG5cdFxuXHRjb25zdHJ1Y3Rvcih0YWJsZSwgbmFtZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXHRcdFxuXHRcdHRoaXMuX2hhbmRsZXIgPSBudWxsO1xuXHR9XG5cdFxuXHRpbml0aWFsaXplKCl7XG5cdFx0Ly8gc2V0dXAgbW9kdWxlIHdoZW4gdGFibGUgaXMgaW5pdGlhbGl6ZWQsIHRvIGJlIG92ZXJyaWRkZW4gaW4gbW9kdWxlXG5cdH1cblx0XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8gT3B0aW9ucyBSZWdpc3RyYXRpb24gLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0cmVnaXN0ZXJUYWJsZU9wdGlvbihrZXksIHZhbHVlKXtcblx0XHR0aGlzLnRhYmxlLm9wdGlvbnNMaXN0LnJlZ2lzdGVyKGtleSwgdmFsdWUpO1xuXHR9XG5cdFxuXHRyZWdpc3RlckNvbHVtbk9wdGlvbihrZXksIHZhbHVlKXtcblx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIub3B0aW9uc0xpc3QucmVnaXN0ZXIoa2V5LCB2YWx1ZSk7XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLyBQdWJsaWMgRnVuY3Rpb24gUmVnaXN0cmF0aW9uIC8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0cmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKG5hbWUsIGZ1bmMpe1xuXHRcdGlmKHR5cGVvZiB0aGlzLnRhYmxlW25hbWVdID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdHRoaXMudGFibGVbbmFtZV0gPSAoLi4uYXJncykgPT4ge1xuXHRcdFx0XHR0aGlzLnRhYmxlLmluaXRHdWFyZChuYW1lKTtcblx0XHRcdFx0XG5cdFx0XHRcdHJldHVybiBmdW5jKC4uLmFyZ3MpO1xuXHRcdFx0fTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJVbmFibGUgdG8gYmluZCB0YWJsZSBmdW5jdGlvbiwgbmFtZSBhbHJlYWR5IGluIHVzZVwiLCBuYW1lKTtcblx0XHR9XG5cdH1cblx0XG5cdHJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oY29tcG9uZW50LCBmdW5jLCBoYW5kbGVyKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5jb21wb25lbnRGdW5jdGlvbkJpbmRlci5iaW5kKGNvbXBvbmVudCwgZnVuYywgaGFuZGxlcik7XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8gRGF0YSBQaXBlbGluZSAvLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHRyZWdpc3RlckRhdGFIYW5kbGVyKGhhbmRsZXIsIHByaW9yaXR5KXtcblx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIucmVnaXN0ZXJEYXRhUGlwZWxpbmVIYW5kbGVyKGhhbmRsZXIsIHByaW9yaXR5KTtcblx0XHR0aGlzLl9oYW5kbGVyID0gaGFuZGxlcjtcblx0fVxuXHRcblx0cmVnaXN0ZXJEaXNwbGF5SGFuZGxlcihoYW5kbGVyLCBwcmlvcml0eSl7XG5cdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnJlZ2lzdGVyRGlzcGxheVBpcGVsaW5lSGFuZGxlcihoYW5kbGVyLCBwcmlvcml0eSk7XG5cdFx0dGhpcy5faGFuZGxlciA9IGhhbmRsZXI7XG5cdH1cblx0XG5cdGRpc3BsYXlSb3dzKGFkanVzdCl7XG5cdFx0dmFyIGluZGV4ID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmRpc3BsYXlSb3dzLmxlbmd0aCAtIDEsIFxuXHRcdGxvb2t1cEluZGV4O1xuXHRcdFxuXHRcdGlmKHRoaXMuX2hhbmRsZXIpe1xuXHRcdFx0bG9va3VwSW5kZXggPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZGlzcGxheVBpcGVsaW5lLmZpbmRJbmRleCgoaXRlbSkgPT4ge1xuXHRcdFx0XHRyZXR1cm4gaXRlbS5oYW5kbGVyID09PSB0aGlzLl9oYW5kbGVyO1xuXHRcdFx0fSk7XG5cblx0XHRcdGlmKGxvb2t1cEluZGV4ID4gLTEpe1xuXHRcdFx0XHRpbmRleCA9IGxvb2t1cEluZGV4O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRpZihhZGp1c3Qpe1xuXHRcdFx0aW5kZXggPSBpbmRleCArIGFkanVzdDtcblx0XHR9XG5cblx0XHRpZih0aGlzLl9oYW5kbGVyKXtcblx0XHRcdGlmKGluZGV4ID4gLTEpe1xuXHRcdFx0XHRyZXR1cm4gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldERpc3BsYXlSb3dzKGluZGV4KTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuYWN0aXZlUm93cygpO1xuXHRcdFx0fVxuXHRcdH1cdFxuXHR9XG5cdFxuXHRhY3RpdmVSb3dzKCl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUucm93TWFuYWdlci5hY3RpdmVSb3dzO1xuXHR9XG5cdFxuXHRyZWZyZXNoRGF0YShyZW5kZXJJblBvc2l0aW9uLCBoYW5kbGVyKXtcblx0XHRpZighaGFuZGxlcil7XG5cdFx0XHRoYW5kbGVyID0gdGhpcy5faGFuZGxlcjtcblx0XHR9XG5cdFx0XG5cdFx0aWYoaGFuZGxlcil7XG5cdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIucmVmcmVzaEFjdGl2ZURhdGEoaGFuZGxlciwgZmFsc2UsIHJlbmRlckluUG9zaXRpb24pO1xuXHRcdH1cblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8gRm9vdGVyIE1hbmFnZW1lbnQgLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdGZvb3RlckFwcGVuZChlbGVtZW50KXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5mb290ZXJNYW5hZ2VyLmFwcGVuZChlbGVtZW50KTtcblx0fVxuXHRcblx0Zm9vdGVyUHJlcGVuZChlbGVtZW50KXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5mb290ZXJNYW5hZ2VyLnByZXBlbmQoZWxlbWVudCk7XG5cdH1cblx0XG5cdGZvb3RlclJlbW92ZShlbGVtZW50KXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5mb290ZXJNYW5hZ2VyLnJlbW92ZShlbGVtZW50KTtcblx0fSBcblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vIFBvcHVwcyBNYW5hZ2VtZW50IC8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHRwb3B1cChtZW51RWwsIG1lbnVDb250YWluZXIpe1xuXHRcdHJldHVybiBuZXcgUG9wdXAodGhpcy50YWJsZSwgbWVudUVsLCBtZW51Q29udGFpbmVyKTtcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8gQWxlcnQgTWFuYWdlbWVudCAvLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0YWxlcnQoY29udGVudCwgdHlwZSl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUuYWxlcnRNYW5hZ2VyLmFsZXJ0KGNvbnRlbnQsIHR5cGUpO1xuXHR9XG5cdFxuXHRjbGVhckFsZXJ0KCl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUuYWxlcnRNYW5hZ2VyLmNsZWFyKCk7XG5cdH1cblx0XG59XG5cbnZhciBkZWZhdWx0QWNjZXNzb3JzID0ge307XG5cbmNsYXNzIEFjY2Vzc29yIGV4dGVuZHMgTW9kdWxle1xuXG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cblx0XHR0aGlzLmFsbG93ZWRUeXBlcyA9IFtcIlwiLCBcImRhdGFcIiwgXCJkb3dubG9hZFwiLCBcImNsaXBib2FyZFwiLCBcInByaW50XCIsIFwiaHRtbE91dHB1dFwiXTsgLy9saXN0IG9mIGFjY2Vzc29yIHR5cGVzXG5cblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiYWNjZXNzb3JcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImFjY2Vzc29yUGFyYW1zXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJhY2Nlc3NvckRhdGFcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImFjY2Vzc29yRGF0YVBhcmFtc1wiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiYWNjZXNzb3JEb3dubG9hZFwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiYWNjZXNzb3JEb3dubG9hZFBhcmFtc1wiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiYWNjZXNzb3JDbGlwYm9hcmRcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImFjY2Vzc29yQ2xpcGJvYXJkUGFyYW1zXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJhY2Nlc3NvclByaW50XCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJhY2Nlc3NvclByaW50UGFyYW1zXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJhY2Nlc3Nvckh0bWxPdXRwdXRcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImFjY2Vzc29ySHRtbE91dHB1dFBhcmFtc1wiKTtcblx0fVxuXG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1sYXlvdXRcIiwgdGhpcy5pbml0aWFsaXplQ29sdW1uLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWRhdGEtcmV0cmlldmVcIiwgdGhpcy50cmFuc2Zvcm1Sb3cuYmluZCh0aGlzKSk7XG5cdH1cblxuXHQvL2luaXRpYWxpemUgY29sdW1uIGFjY2Vzc29yXG5cdGluaXRpYWxpemVDb2x1bW4oY29sdW1uKXtcblx0XHR2YXIgbWF0Y2ggPSBmYWxzZSxcblx0XHRjb25maWcgPSB7fTtcblxuXHRcdHRoaXMuYWxsb3dlZFR5cGVzLmZvckVhY2goKHR5cGUpID0+IHtcblx0XHRcdHZhciBrZXkgPSBcImFjY2Vzc29yXCIgKyAodHlwZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHR5cGUuc2xpY2UoMSkpLFxuXHRcdFx0YWNjZXNzb3I7XG5cblx0XHRcdGlmKGNvbHVtbi5kZWZpbml0aW9uW2tleV0pe1xuXHRcdFx0XHRhY2Nlc3NvciA9IHRoaXMubG9va3VwQWNjZXNzb3IoY29sdW1uLmRlZmluaXRpb25ba2V5XSk7XG5cblx0XHRcdFx0aWYoYWNjZXNzb3Ipe1xuXHRcdFx0XHRcdG1hdGNoID0gdHJ1ZTtcblxuXHRcdFx0XHRcdGNvbmZpZ1trZXldID0ge1xuXHRcdFx0XHRcdFx0YWNjZXNzb3I6YWNjZXNzb3IsXG5cdFx0XHRcdFx0XHRwYXJhbXM6IGNvbHVtbi5kZWZpbml0aW9uW2tleSArIFwiUGFyYW1zXCJdIHx8IHt9LFxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGlmKG1hdGNoKXtcblx0XHRcdGNvbHVtbi5tb2R1bGVzLmFjY2Vzc29yID0gY29uZmlnO1xuXHRcdH1cblx0fVxuXG5cdGxvb2t1cEFjY2Vzc29yKHZhbHVlKXtcblx0XHR2YXIgYWNjZXNzb3IgPSBmYWxzZTtcblxuXHRcdC8vc2V0IGNvbHVtbiBhY2Nlc3NvclxuXHRcdHN3aXRjaCh0eXBlb2YgdmFsdWUpe1xuXHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0XHRpZihBY2Nlc3Nvci5hY2Nlc3NvcnNbdmFsdWVdKXtcblx0XHRcdFx0XHRhY2Nlc3NvciA9IEFjY2Vzc29yLmFjY2Vzc29yc1t2YWx1ZV07XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJBY2Nlc3NvciBFcnJvciAtIE5vIHN1Y2ggYWNjZXNzb3IgZm91bmQsIGlnbm9yaW5nOiBcIiwgdmFsdWUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwiZnVuY3Rpb25cIjpcblx0XHRcdFx0YWNjZXNzb3IgPSB2YWx1ZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2Vzc29yO1xuXHR9XG5cblx0Ly9hcHBseSBhY2Nlc3NvciB0byByb3dcblx0dHJhbnNmb3JtUm93KHJvdywgdHlwZSl7XG5cdFx0dmFyIGtleSA9IFwiYWNjZXNzb3JcIiArICh0eXBlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdHlwZS5zbGljZSgxKSksXG5cdFx0cm93Q29tcG9uZW50ID0gcm93LmdldENvbXBvbmVudCgpO1xuXG5cdFx0Ly9jbG9uZSBkYXRhIG9iamVjdCB3aXRoIGRlZXAgY29weSB0byBpc29sYXRlIGludGVybmFsIGRhdGEgZnJvbSByZXR1cm5lZCByZXN1bHRcblx0XHR2YXIgZGF0YSA9IEhlbHBlcnMuZGVlcENsb25lKHJvdy5kYXRhIHx8IHt9KTtcblxuXHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci50cmF2ZXJzZShmdW5jdGlvbihjb2x1bW4pe1xuXHRcdFx0dmFyIHZhbHVlLCBhY2Nlc3NvciwgcGFyYW1zLCBjb2xDb21wb25lbnQ7XG5cblx0XHRcdGlmKGNvbHVtbi5tb2R1bGVzLmFjY2Vzc29yKXtcblxuXHRcdFx0XHRhY2Nlc3NvciA9IGNvbHVtbi5tb2R1bGVzLmFjY2Vzc29yW2tleV0gfHwgY29sdW1uLm1vZHVsZXMuYWNjZXNzb3IuYWNjZXNzb3IgfHwgZmFsc2U7XG5cblx0XHRcdFx0aWYoYWNjZXNzb3Ipe1xuXHRcdFx0XHRcdHZhbHVlID0gY29sdW1uLmdldEZpZWxkVmFsdWUoZGF0YSk7XG5cblx0XHRcdFx0XHRpZih2YWx1ZSAhPSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdFx0XHRcdGNvbENvbXBvbmVudCA9IGNvbHVtbi5nZXRDb21wb25lbnQoKTtcblx0XHRcdFx0XHRcdHBhcmFtcyA9IHR5cGVvZiBhY2Nlc3Nvci5wYXJhbXMgPT09IFwiZnVuY3Rpb25cIiA/IGFjY2Vzc29yLnBhcmFtcyh2YWx1ZSwgZGF0YSwgdHlwZSwgY29sQ29tcG9uZW50LCByb3dDb21wb25lbnQpIDogYWNjZXNzb3IucGFyYW1zO1xuXHRcdFx0XHRcdFx0Y29sdW1uLnNldEZpZWxkVmFsdWUoZGF0YSwgYWNjZXNzb3IuYWNjZXNzb3IodmFsdWUsIGRhdGEsIHR5cGUsIHBhcmFtcywgY29sQ29tcG9uZW50LCByb3dDb21wb25lbnQpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHJldHVybiBkYXRhO1xuXHR9XG59XG5cbi8vbG9hZCBkZWZhdWx0c1xuQWNjZXNzb3IubW9kdWxlTmFtZSA9IFwiYWNjZXNzb3JcIjtcbkFjY2Vzc29yLmFjY2Vzc29ycyA9IGRlZmF1bHRBY2Nlc3NvcnM7XG5cbnZhciBkZWZhdWx0Q29uZmlnID0ge1xuXHRtZXRob2Q6IFwiR0VUXCIsXG59O1xuXG5mdW5jdGlvbiBnZW5lcmF0ZVBhcmFtc0xpc3QoZGF0YSwgcHJlZml4KXtcblx0dmFyIG91dHB1dCA9IFtdO1xuXG5cdHByZWZpeCA9IHByZWZpeCB8fCBcIlwiO1xuXG5cdGlmKEFycmF5LmlzQXJyYXkoZGF0YSkpe1xuXHRcdGRhdGEuZm9yRWFjaCgoaXRlbSwgaSkgPT4ge1xuXHRcdFx0b3V0cHV0ID0gb3V0cHV0LmNvbmNhdChnZW5lcmF0ZVBhcmFtc0xpc3QoaXRlbSwgcHJlZml4ID8gcHJlZml4ICsgXCJbXCIgKyBpICsgXCJdXCIgOiBpKSk7XG5cdFx0fSk7XG5cdH1lbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gXCJvYmplY3RcIil7XG5cdFx0Zm9yICh2YXIga2V5IGluIGRhdGEpe1xuXHRcdFx0b3V0cHV0ID0gb3V0cHV0LmNvbmNhdChnZW5lcmF0ZVBhcmFtc0xpc3QoZGF0YVtrZXldLCBwcmVmaXggPyBwcmVmaXggKyBcIltcIiArIGtleSArIFwiXVwiIDoga2V5KSk7XG5cdFx0fVxuXHR9ZWxzZSB7XG5cdFx0b3V0cHV0LnB1c2goe2tleTpwcmVmaXgsIHZhbHVlOmRhdGF9KTtcblx0fVxuXG5cdHJldHVybiBvdXRwdXQ7XG59XG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZVBhcmFtcyhwYXJhbXMpe1xuXHR2YXIgb3V0cHV0ID0gZ2VuZXJhdGVQYXJhbXNMaXN0KHBhcmFtcyksXG5cdGVuY29kZWQgPSBbXTtcblxuXHRvdXRwdXQuZm9yRWFjaChmdW5jdGlvbihpdGVtKXtcblx0XHRlbmNvZGVkLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGl0ZW0ua2V5KSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGl0ZW0udmFsdWUpKTtcblx0fSk7XG5cblx0cmV0dXJuIGVuY29kZWQuam9pbihcIiZcIik7XG59XG5cbmZ1bmN0aW9uIHVybEJ1aWxkZXIodXJsLCBjb25maWcsIHBhcmFtcyl7XG5cdGlmKHVybCl7XG5cdFx0aWYocGFyYW1zICYmIE9iamVjdC5rZXlzKHBhcmFtcykubGVuZ3RoKXtcblx0XHRcdGlmKCFjb25maWcubWV0aG9kIHx8IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKSA9PSBcImdldFwiKXtcblx0XHRcdFx0Y29uZmlnLm1ldGhvZCA9IFwiZ2V0XCI7XG5cblx0XHRcdFx0dXJsICs9ICh1cmwuaW5jbHVkZXMoXCI/XCIpID8gXCImXCIgOiBcIj9cIikgKyBzZXJpYWxpemVQYXJhbXMocGFyYW1zKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdXJsO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0TG9hZGVyUHJvbWlzZSh1cmwsIGNvbmZpZywgcGFyYW1zKXtcblx0dmFyIGNvbnRlbnRUeXBlO1xuXG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0Ly9zZXQgdXJsXG5cdFx0dXJsID0gdGhpcy51cmxHZW5lcmF0b3IuY2FsbCh0aGlzLnRhYmxlLCB1cmwsIGNvbmZpZywgcGFyYW1zKTtcblxuXHRcdC8vc2V0IGJvZHkgY29udGVudCBpZiBub3QgR0VUIHJlcXVlc3Rcblx0XHRpZihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCkgIT0gXCJHRVRcIil7XG5cdFx0XHRjb250ZW50VHlwZSA9IHR5cGVvZiB0aGlzLnRhYmxlLm9wdGlvbnMuYWpheENvbnRlbnRUeXBlID09PSBcIm9iamVjdFwiID8gIHRoaXMudGFibGUub3B0aW9ucy5hamF4Q29udGVudFR5cGUgOiB0aGlzLmNvbnRlbnRUeXBlRm9ybWF0dGVyc1t0aGlzLnRhYmxlLm9wdGlvbnMuYWpheENvbnRlbnRUeXBlXTtcblx0XHRcdGlmKGNvbnRlbnRUeXBlKXtcblxuXHRcdFx0XHRmb3IodmFyIGtleSBpbiBjb250ZW50VHlwZS5oZWFkZXJzKXtcblx0XHRcdFx0XHRpZighY29uZmlnLmhlYWRlcnMpe1xuXHRcdFx0XHRcdFx0Y29uZmlnLmhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZih0eXBlb2YgY29uZmlnLmhlYWRlcnNba2V5XSA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRcdFx0XHRjb25maWcuaGVhZGVyc1trZXldID0gY29udGVudFR5cGUuaGVhZGVyc1trZXldO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbmZpZy5ib2R5ID0gY29udGVudFR5cGUuYm9keS5jYWxsKHRoaXMsIHVybCwgY29uZmlnLCBwYXJhbXMpO1xuXG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIkFqYXggRXJyb3IgLSBJbnZhbGlkIGFqYXhDb250ZW50VHlwZSB2YWx1ZTpcIiwgdGhpcy50YWJsZS5vcHRpb25zLmFqYXhDb250ZW50VHlwZSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYodXJsKXtcblx0XHRcdC8vY29uZmlndXJlIGhlYWRlcnNcblx0XHRcdGlmKHR5cGVvZiBjb25maWcuaGVhZGVycyA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRcdGNvbmZpZy5oZWFkZXJzID0ge307XG5cdFx0XHR9XG5cblx0XHRcdGlmKHR5cGVvZiBjb25maWcuaGVhZGVycy5BY2NlcHQgPT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0XHRjb25maWcuaGVhZGVycy5BY2NlcHQgPSBcImFwcGxpY2F0aW9uL2pzb25cIjtcblx0XHRcdH1cblxuXHRcdFx0aWYodHlwZW9mIGNvbmZpZy5oZWFkZXJzW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXSA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRcdGNvbmZpZy5oZWFkZXJzW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdH1cblxuXHRcdFx0aWYodHlwZW9mIGNvbmZpZy5tb2RlID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdFx0Y29uZmlnLm1vZGUgPSBcImNvcnNcIjtcblx0XHRcdH1cblxuXHRcdFx0aWYoY29uZmlnLm1vZGUgPT0gXCJjb3JzXCIpe1xuXHRcdFx0XHRpZih0eXBlb2YgY29uZmlnLmhlYWRlcnNbXCJPcmlnaW5cIl0gPT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0XHRcdGNvbmZpZy5oZWFkZXJzW1wiT3JpZ2luXCJdID0gd2luZG93LmxvY2F0aW9uLm9yaWdpbjtcblx0XHRcdFx0fVxuICAgICAgICBcblx0XHRcdFx0aWYodHlwZW9mIGNvbmZpZy5jcmVkZW50aWFscyA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRcdFx0Y29uZmlnLmNyZWRlbnRpYWxzID0gJ3NhbWUtb3JpZ2luJztcblx0XHRcdFx0fVxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRpZih0eXBlb2YgY29uZmlnLmNyZWRlbnRpYWxzID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdFx0XHRjb25maWcuY3JlZGVudGlhbHMgPSAnaW5jbHVkZSc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly9zZW5kIHJlcXVlc3Rcblx0XHRcdGZldGNoKHVybCwgY29uZmlnKVxuXHRcdFx0XHQudGhlbigocmVzcG9uc2UpPT57XG5cdFx0XHRcdFx0aWYocmVzcG9uc2Uub2spIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlLmpzb24oKVxuXHRcdFx0XHRcdFx0XHQudGhlbigoZGF0YSk9Pntcblx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKGRhdGEpO1xuXHRcdFx0XHRcdFx0XHR9KS5jYXRjaCgoZXJyb3IpPT57XG5cdFx0XHRcdFx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJBamF4IExvYWQgRXJyb3IgLSBJbnZhbGlkIEpTT04gcmV0dXJuZWRcIiwgZXJyb3IpO1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKFwiQWpheCBMb2FkIEVycm9yIC0gQ29ubmVjdGlvbiBFcnJvcjogXCIgKyByZXNwb25zZS5zdGF0dXMsIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuXHRcdFx0XHRcdFx0cmVqZWN0KHJlc3BvbnNlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5jYXRjaCgoZXJyb3IpPT57XG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcihcIkFqYXggTG9hZCBFcnJvciAtIENvbm5lY3Rpb24gRXJyb3I6IFwiLCBlcnJvcik7XG5cdFx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdFx0fSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiQWpheCBMb2FkIEVycm9yIC0gTm8gVVJMIFNldFwiKTtcblx0XHRcdHJlc29sdmUoW10pO1xuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlUGFyYW1zTGlzdCQxKGRhdGEsIHByZWZpeCl7XG5cdHZhciBvdXRwdXQgPSBbXTtcblxuXHRwcmVmaXggPSBwcmVmaXggfHwgXCJcIjtcblxuXHRpZihBcnJheS5pc0FycmF5KGRhdGEpKXtcblx0XHRkYXRhLmZvckVhY2goKGl0ZW0sIGkpID0+IHtcblx0XHRcdG91dHB1dCA9IG91dHB1dC5jb25jYXQoZ2VuZXJhdGVQYXJhbXNMaXN0JDEoaXRlbSwgcHJlZml4ID8gcHJlZml4ICsgXCJbXCIgKyBpICsgXCJdXCIgOiBpKSk7XG5cdFx0fSk7XG5cdH1lbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gXCJvYmplY3RcIil7XG5cdFx0Zm9yICh2YXIga2V5IGluIGRhdGEpe1xuXHRcdFx0b3V0cHV0ID0gb3V0cHV0LmNvbmNhdChnZW5lcmF0ZVBhcmFtc0xpc3QkMShkYXRhW2tleV0sIHByZWZpeCA/IHByZWZpeCArIFwiW1wiICsga2V5ICsgXCJdXCIgOiBrZXkpKTtcblx0XHR9XG5cdH1lbHNlIHtcblx0XHRvdXRwdXQucHVzaCh7a2V5OnByZWZpeCwgdmFsdWU6ZGF0YX0pO1xuXHR9XG5cblx0cmV0dXJuIG91dHB1dDtcbn1cblxudmFyIGRlZmF1bHRDb250ZW50VHlwZUZvcm1hdHRlcnMgPSB7XG5cdFwianNvblwiOntcblx0XHRoZWFkZXJzOntcblx0XHRcdCdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG5cdFx0fSxcblx0XHRib2R5OmZ1bmN0aW9uKHVybCwgY29uZmlnLCBwYXJhbXMpe1xuXHRcdFx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KHBhcmFtcyk7XG5cdFx0fSxcblx0fSxcblx0XCJmb3JtXCI6e1xuXHRcdGhlYWRlcnM6e1xuXHRcdH0sXG5cdFx0Ym9keTpmdW5jdGlvbih1cmwsIGNvbmZpZywgcGFyYW1zKXtcblxuXHRcdFx0dmFyIG91dHB1dCA9IGdlbmVyYXRlUGFyYW1zTGlzdCQxKHBhcmFtcyksXG5cdFx0XHRmb3JtID0gbmV3IEZvcm1EYXRhKCk7XG5cblx0XHRcdG91dHB1dC5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pe1xuXHRcdFx0XHRmb3JtLmFwcGVuZChpdGVtLmtleSwgaXRlbS52YWx1ZSk7XG5cdFx0XHR9KTtcblxuXHRcdFx0cmV0dXJuIGZvcm07XG5cdFx0fSxcblx0fSxcbn07XG5cbmNsYXNzIEFqYXggZXh0ZW5kcyBNb2R1bGV7XG5cdFxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXHRcdFxuXHRcdHRoaXMuY29uZmlnID0ge307IC8vaG9sZCBjb25maWcgb2JqZWN0IGZvciBhamF4IHJlcXVlc3Rcblx0XHR0aGlzLnVybCA9IFwiXCI7IC8vcmVxdWVzdCBVUkxcblx0XHR0aGlzLnVybEdlbmVyYXRvciA9IGZhbHNlO1xuXHRcdHRoaXMucGFyYW1zID0gZmFsc2U7IC8vcmVxdWVzdCBwYXJhbWV0ZXJzXG5cdFx0XG5cdFx0dGhpcy5sb2FkZXJQcm9taXNlID0gZmFsc2U7XG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiYWpheFVSTFwiLCBmYWxzZSk7IC8vdXJsIGZvciBhamF4IGxvYWRpbmdcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJhamF4VVJMR2VuZXJhdG9yXCIsIGZhbHNlKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJhamF4UGFyYW1zXCIsIHt9KTsgIC8vcGFyYW1zIGZvciBhamF4IGxvYWRpbmdcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJhamF4Q29uZmlnXCIsIFwiZ2V0XCIpOyAvL2FqYXggcmVxdWVzdCB0eXBlXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiYWpheENvbnRlbnRUeXBlXCIsIFwiZm9ybVwiKTsgLy9hamF4IHJlcXVlc3QgdHlwZVxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImFqYXhSZXF1ZXN0RnVuY1wiLCBmYWxzZSk7IC8vcHJvbWlzZSBmdW5jdGlvblxuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImFqYXhSZXF1ZXN0aW5nXCIsIGZ1bmN0aW9uKCl7fSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiYWpheFJlc3BvbnNlXCIsIGZhbHNlKTtcblx0XHRcblx0XHR0aGlzLmNvbnRlbnRUeXBlRm9ybWF0dGVycyA9IEFqYXguY29udGVudFR5cGVGb3JtYXR0ZXJzO1xuXHR9XG5cdFxuXHQvL2luaXRpYWxpemUgc2V0dXAgb3B0aW9uc1xuXHRpbml0aWFsaXplKCl7XG5cdFx0dGhpcy5sb2FkZXJQcm9taXNlID0gdGhpcy50YWJsZS5vcHRpb25zLmFqYXhSZXF1ZXN0RnVuYyB8fCBBamF4LmRlZmF1bHRMb2FkZXJQcm9taXNlO1xuXHRcdHRoaXMudXJsR2VuZXJhdG9yID0gdGhpcy50YWJsZS5vcHRpb25zLmFqYXhVUkxHZW5lcmF0b3IgfHwgQWpheC5kZWZhdWx0VVJMR2VuZXJhdG9yO1xuXHRcdFxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5hamF4VVJMKXtcblx0XHRcdHRoaXMuc2V0VXJsKHRoaXMudGFibGUub3B0aW9ucy5hamF4VVJMKTtcblx0XHR9XG5cblxuXHRcdHRoaXMuc2V0RGVmYXVsdENvbmZpZyh0aGlzLnRhYmxlLm9wdGlvbnMuYWpheENvbmZpZyk7XG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJnZXRBamF4VXJsXCIsIHRoaXMuZ2V0VXJsLmJpbmQodGhpcykpO1xuXHRcdFxuXHRcdHRoaXMuc3Vic2NyaWJlKFwiZGF0YS1sb2FkaW5nXCIsIHRoaXMucmVxdWVzdERhdGFDaGVjay5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImRhdGEtcGFyYW1zXCIsIHRoaXMucmVxdWVzdFBhcmFtcy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImRhdGEtbG9hZFwiLCB0aGlzLnJlcXVlc3REYXRhLmJpbmQodGhpcykpO1xuXHR9XG5cdFxuXHRyZXF1ZXN0UGFyYW1zKGRhdGEsIGNvbmZpZywgc2lsZW50LCBwYXJhbXMpe1xuXHRcdHZhciBhamF4UGFyYW1zID0gdGhpcy50YWJsZS5vcHRpb25zLmFqYXhQYXJhbXM7XG5cdFx0XG5cdFx0aWYoYWpheFBhcmFtcyl7XG5cdFx0XHRpZih0eXBlb2YgYWpheFBhcmFtcyA9PT0gXCJmdW5jdGlvblwiKXtcblx0XHRcdFx0YWpheFBhcmFtcyA9IGFqYXhQYXJhbXMuY2FsbCh0aGlzLnRhYmxlKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0cGFyYW1zID0gT2JqZWN0LmFzc2lnbihwYXJhbXMsIGFqYXhQYXJhbXMpO1xuXHRcdH1cdFx0XG5cdFx0XG5cdFx0cmV0dXJuIHBhcmFtcztcblx0fVxuXHRcblx0cmVxdWVzdERhdGFDaGVjayhkYXRhLCBwYXJhbXMsIGNvbmZpZywgc2lsZW50KXtcblx0XHRyZXR1cm4gISEoKCFkYXRhICYmIHRoaXMudXJsKSB8fCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIik7XG5cdH1cblx0XG5cdHJlcXVlc3REYXRhKHVybCwgcGFyYW1zLCBjb25maWcsIHNpbGVudCwgcHJldmlvdXNEYXRhKXtcblx0XHR2YXIgYWpheENvbmZpZztcblx0XHRcblx0XHRpZighcHJldmlvdXNEYXRhICYmIHRoaXMucmVxdWVzdERhdGFDaGVjayh1cmwpKXtcblx0XHRcdGlmKHVybCl7XG5cdFx0XHRcdHRoaXMuc2V0VXJsKHVybCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGFqYXhDb25maWcgPSB0aGlzLmdlbmVyYXRlQ29uZmlnKGNvbmZpZyk7XG5cdFx0XHRcblx0XHRcdHJldHVybiB0aGlzLnNlbmRSZXF1ZXN0KHRoaXMudXJsLCBwYXJhbXMsIGFqYXhDb25maWcpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJldHVybiBwcmV2aW91c0RhdGE7XG5cdFx0fVxuXHR9XG5cdFxuXHRzZXREZWZhdWx0Q29uZmlnKGNvbmZpZyA9IHt9KXtcblx0XHR0aGlzLmNvbmZpZyA9IE9iamVjdC5hc3NpZ24oe30sIEFqYXguZGVmYXVsdENvbmZpZyk7XG5cblx0XHRpZih0eXBlb2YgY29uZmlnID09IFwic3RyaW5nXCIpe1xuXHRcdFx0dGhpcy5jb25maWcubWV0aG9kID0gY29uZmlnO1xuXHRcdH1lbHNlIHtcblx0XHRcdE9iamVjdC5hc3NpZ24odGhpcy5jb25maWcsIGNvbmZpZyk7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL2xvYWQgY29uZmlnIG9iamVjdFxuXHRnZW5lcmF0ZUNvbmZpZyhjb25maWcgPSB7fSl7XG5cdFx0dmFyIGFqYXhDb25maWcgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmNvbmZpZyk7XG5cdFx0XG5cdFx0aWYodHlwZW9mIGNvbmZpZyA9PSBcInN0cmluZ1wiKXtcblx0XHRcdGFqYXhDb25maWcubWV0aG9kID0gY29uZmlnO1xuXHRcdH1lbHNlIHtcblx0XHRcdE9iamVjdC5hc3NpZ24oYWpheENvbmZpZywgY29uZmlnKTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIGFqYXhDb25maWc7XG5cdH1cblx0XG5cdC8vc2V0IHJlcXVlc3QgdXJsXG5cdHNldFVybCh1cmwpe1xuXHRcdHRoaXMudXJsID0gdXJsO1xuXHR9XG5cdFxuXHQvL2dldCByZXF1ZXN0IHVybFxuXHRnZXRVcmwoKXtcblx0XHRyZXR1cm4gdGhpcy51cmw7XG5cdH1cblx0XG5cdC8vc2VuZCBhamF4IHJlcXVlc3Rcblx0c2VuZFJlcXVlc3QodXJsLCBwYXJhbXMsIGNvbmZpZyl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmFqYXhSZXF1ZXN0aW5nLmNhbGwodGhpcy50YWJsZSwgdXJsLCBwYXJhbXMpICE9PSBmYWxzZSl7XG5cdFx0XHRyZXR1cm4gdGhpcy5sb2FkZXJQcm9taXNlKHVybCwgY29uZmlnLCBwYXJhbXMpXG5cdFx0XHRcdC50aGVuKChkYXRhKT0+e1xuXHRcdFx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5hamF4UmVzcG9uc2Upe1xuXHRcdFx0XHRcdFx0ZGF0YSA9IHRoaXMudGFibGUub3B0aW9ucy5hamF4UmVzcG9uc2UuY2FsbCh0aGlzLnRhYmxlLCB1cmwsIHBhcmFtcywgZGF0YSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KCk7XG5cdFx0fVxuXHR9XG59XG5cbkFqYXgubW9kdWxlTmFtZSA9IFwiYWpheFwiO1xuXG4vL2xvYWQgZGVmYXVsdHNcbkFqYXguZGVmYXVsdENvbmZpZyA9IGRlZmF1bHRDb25maWc7XG5BamF4LmRlZmF1bHRVUkxHZW5lcmF0b3IgPSB1cmxCdWlsZGVyO1xuQWpheC5kZWZhdWx0TG9hZGVyUHJvbWlzZSA9IGRlZmF1bHRMb2FkZXJQcm9taXNlO1xuQWpheC5jb250ZW50VHlwZUZvcm1hdHRlcnMgPSBkZWZhdWx0Q29udGVudFR5cGVGb3JtYXR0ZXJzO1xuXG52YXIgZGVmYXVsdFBhc3RlQWN0aW9ucyA9IHtcblx0cmVwbGFjZTpmdW5jdGlvbihyb3dzKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5zZXREYXRhKHJvd3MpO1xuXHR9LFxuXHR1cGRhdGU6ZnVuY3Rpb24ocm93cyl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUudXBkYXRlT3JBZGREYXRhKHJvd3MpO1xuXHR9LFxuXHRpbnNlcnQ6ZnVuY3Rpb24ocm93cyl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUuYWRkRGF0YShyb3dzKTtcblx0fSxcbn07XG5cbnZhciBkZWZhdWx0UGFzdGVQYXJzZXJzID0ge1xuXHR0YWJsZTpmdW5jdGlvbihjbGlwYm9hcmQpe1xuXHRcdHZhciBkYXRhID0gW10sXG5cdFx0aGVhZGVyRmluZFN1Y2Nlc3MgPSB0cnVlLFxuXHRcdGNvbHVtbnMgPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuY29sdW1ucyxcblx0XHRjb2x1bW5NYXAgPSBbXSxcblx0XHRyb3dzID0gW107XG5cblx0XHQvL2dldCBkYXRhIGZyb20gY2xpcGJvYXJkIGludG8gYXJyYXkgb2YgY29sdW1ucyBhbmQgcm93cy5cblx0XHRjbGlwYm9hcmQgPSBjbGlwYm9hcmQuc3BsaXQoXCJcXG5cIik7XG5cblx0XHRjbGlwYm9hcmQuZm9yRWFjaChmdW5jdGlvbihyb3cpe1xuXHRcdFx0ZGF0YS5wdXNoKHJvdy5zcGxpdChcIlxcdFwiKSk7XG5cdFx0fSk7XG5cblx0XHRpZihkYXRhLmxlbmd0aCAmJiAhKGRhdGEubGVuZ3RoID09PSAxICYmIGRhdGFbMF0ubGVuZ3RoIDwgMikpe1xuXG5cdFx0XHQvL2NoZWNrIGlmIGhlYWRlcnMgYXJlIHByZXNlbnQgYnkgdGl0bGVcblx0XHRcdGRhdGFbMF0uZm9yRWFjaChmdW5jdGlvbih2YWx1ZSl7XG5cdFx0XHRcdHZhciBjb2x1bW4gPSBjb2x1bW5zLmZpbmQoZnVuY3Rpb24oY29sdW1uKXtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgJiYgY29sdW1uLmRlZmluaXRpb24udGl0bGUgJiYgdmFsdWUudHJpbSgpICYmIGNvbHVtbi5kZWZpbml0aW9uLnRpdGxlLnRyaW0oKSA9PT0gdmFsdWUudHJpbSgpO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRpZihjb2x1bW4pe1xuXHRcdFx0XHRcdGNvbHVtbk1hcC5wdXNoKGNvbHVtbik7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRoZWFkZXJGaW5kU3VjY2VzcyA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly9jaGVjayBpZiBjb2x1bW4gaGVhZGVycyBhcmUgcHJlc2VudCBieSBmaWVsZFxuXHRcdFx0aWYoIWhlYWRlckZpbmRTdWNjZXNzKXtcblx0XHRcdFx0aGVhZGVyRmluZFN1Y2Nlc3MgPSB0cnVlO1xuXHRcdFx0XHRjb2x1bW5NYXAgPSBbXTtcblxuXHRcdFx0XHRkYXRhWzBdLmZvckVhY2goZnVuY3Rpb24odmFsdWUpe1xuXHRcdFx0XHRcdHZhciBjb2x1bW4gPSBjb2x1bW5zLmZpbmQoZnVuY3Rpb24oY29sdW1uKXtcblx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZSAmJiBjb2x1bW4uZmllbGQgJiYgdmFsdWUudHJpbSgpICYmIGNvbHVtbi5maWVsZC50cmltKCkgPT09IHZhbHVlLnRyaW0oKTtcblx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdGlmKGNvbHVtbil7XG5cdFx0XHRcdFx0XHRjb2x1bW5NYXAucHVzaChjb2x1bW4pO1xuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdGhlYWRlckZpbmRTdWNjZXNzID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRpZighaGVhZGVyRmluZFN1Y2Nlc3Mpe1xuXHRcdFx0XHRcdGNvbHVtbk1hcCA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5jb2x1bW5zQnlJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvL3JlbW92ZSBoZWFkZXIgcm93IGlmIGZvdW5kXG5cdFx0XHRpZihoZWFkZXJGaW5kU3VjY2Vzcyl7XG5cdFx0XHRcdGRhdGEuc2hpZnQoKTtcblx0XHRcdH1cblxuXHRcdFx0ZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pe1xuXHRcdFx0XHR2YXIgcm93ID0ge307XG5cblx0XHRcdFx0aXRlbS5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBpKXtcblx0XHRcdFx0XHRpZihjb2x1bW5NYXBbaV0pe1xuXHRcdFx0XHRcdFx0cm93W2NvbHVtbk1hcFtpXS5maWVsZF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHJvd3MucHVzaChyb3cpO1xuXHRcdFx0fSk7XG5cblx0XHRcdHJldHVybiByb3dzO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cbn07XG5cbmNsYXNzIENsaXBib2FyZCBleHRlbmRzIE1vZHVsZXtcblxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXG5cdFx0dGhpcy5tb2RlID0gdHJ1ZTtcblx0XHR0aGlzLnBhc3RlUGFyc2VyID0gZnVuY3Rpb24oKXt9O1xuXHRcdHRoaXMucGFzdGVBY3Rpb24gPSBmdW5jdGlvbigpe307XG5cdFx0dGhpcy5jdXN0b21TZWxlY3Rpb24gPSBmYWxzZTtcblx0XHR0aGlzLnJvd1JhbmdlID0gZmFsc2U7XG5cdFx0dGhpcy5ibG9ja2VkID0gdHJ1ZTsgLy9ibG9jayBjb3B5IGFjdGlvbnMgbm90IG9yaWdpbmF0aW5nIGZyb20gdGhpcyBjb21tYW5kXG5cblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJjbGlwYm9hcmRcIiwgZmFsc2UpOyAvL2VuYWJsZSBjbGlwYm9hcmRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJjbGlwYm9hcmRDb3B5U3R5bGVkXCIsIHRydWUpOyAvL2Zvcm1hdHRlZCB0YWJsZSBkYXRhXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiY2xpcGJvYXJkQ29weUNvbmZpZ1wiLCBmYWxzZSk7IC8vY2xpcGJvYXJkIGNvbmZpZ1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImNsaXBib2FyZENvcHlGb3JtYXR0ZXJcIiwgZmFsc2UpOyAvL0RFUFJFQ0FURUQgLSBSRU1PVkUgaW4gNS4wXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiY2xpcGJvYXJkQ29weVJvd1JhbmdlXCIsIFwiYWN0aXZlXCIpOyAvL3Jlc3RyaWN0IGNsaXBib2FyZCB0byB2aXNpYmxlIHJvd3Mgb25seVxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImNsaXBib2FyZFBhc3RlUGFyc2VyXCIsIFwidGFibGVcIik7IC8vY29udmVydCBwYXN0ZWQgY2xpcGJvYXJkIGRhdGEgdG8gcm93c1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImNsaXBib2FyZFBhc3RlQWN0aW9uXCIsIFwiaW5zZXJ0XCIpOyAvL2hvdyB0byBpbnNlcnQgcGFzdGVkIGRhdGEgaW50byB0aGUgdGFibGVcblxuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJjbGlwYm9hcmRcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcInRpdGxlQ2xpcGJvYXJkXCIpO1xuXHR9XG5cblx0aW5pdGlhbGl6ZSgpe1xuXHRcdHRoaXMubW9kZSA9IHRoaXMudGFibGUub3B0aW9ucy5jbGlwYm9hcmQ7XG5cblx0XHR0aGlzLnJvd1JhbmdlID0gdGhpcy50YWJsZS5vcHRpb25zLmNsaXBib2FyZENvcHlSb3dSYW5nZTtcblxuXHRcdGlmKHRoaXMubW9kZSA9PT0gdHJ1ZSB8fCB0aGlzLm1vZGUgPT09IFwiY29weVwiKXtcblx0XHRcdHRoaXMudGFibGUuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY29weVwiLCAoZSkgPT4ge1xuXHRcdFx0XHR2YXIgcGxhaW4sIGh0bWwsIGxpc3Q7XG5cblx0XHRcdFx0aWYoIXRoaXMuYmxvY2tlZCl7XG5cdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHRcdFx0aWYodGhpcy5jdXN0b21TZWxlY3Rpb24pe1xuXHRcdFx0XHRcdFx0cGxhaW4gPSB0aGlzLmN1c3RvbVNlbGVjdGlvbjtcblxuXHRcdFx0XHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmNsaXBib2FyZENvcHlGb3JtYXR0ZXIpe1xuXHRcdFx0XHRcdFx0XHRwbGFpbiA9IHRoaXMudGFibGUub3B0aW9ucy5jbGlwYm9hcmRDb3B5Rm9ybWF0dGVyKFwicGxhaW5cIiwgcGxhaW4pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1lbHNlIHtcblxuXHRcdFx0XHRcdFx0bGlzdCA9IHRoaXMudGFibGUubW9kdWxlcy5leHBvcnQuZ2VuZXJhdGVFeHBvcnRMaXN0KHRoaXMudGFibGUub3B0aW9ucy5jbGlwYm9hcmRDb3B5Q29uZmlnLCB0aGlzLnRhYmxlLm9wdGlvbnMuY2xpcGJvYXJkQ29weVN0eWxlZCwgdGhpcy5yb3dSYW5nZSwgXCJjbGlwYm9hcmRcIik7XG5cblx0XHRcdFx0XHRcdGh0bWwgPSB0aGlzLnRhYmxlLm1vZHVsZXMuZXhwb3J0LmdlbmVyYXRlSFRNTFRhYmxlKGxpc3QpO1xuXHRcdFx0XHRcdFx0cGxhaW4gPSBodG1sID8gdGhpcy5nZW5lcmF0ZVBsYWluQ29udGVudChsaXN0KSA6IFwiXCI7XG5cblx0XHRcdFx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5jbGlwYm9hcmRDb3B5Rm9ybWF0dGVyKXtcblx0XHRcdFx0XHRcdFx0cGxhaW4gPSB0aGlzLnRhYmxlLm9wdGlvbnMuY2xpcGJvYXJkQ29weUZvcm1hdHRlcihcInBsYWluXCIsIHBsYWluKTtcblx0XHRcdFx0XHRcdFx0aHRtbCA9IHRoaXMudGFibGUub3B0aW9ucy5jbGlwYm9hcmRDb3B5Rm9ybWF0dGVyKFwiaHRtbFwiLCBodG1sKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAod2luZG93LmNsaXBib2FyZERhdGEgJiYgd2luZG93LmNsaXBib2FyZERhdGEuc2V0RGF0YSkge1xuXHRcdFx0XHRcdFx0d2luZG93LmNsaXBib2FyZERhdGEuc2V0RGF0YSgnVGV4dCcsIHBsYWluKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGUuY2xpcGJvYXJkRGF0YSAmJiBlLmNsaXBib2FyZERhdGEuc2V0RGF0YSkge1xuXHRcdFx0XHRcdFx0ZS5jbGlwYm9hcmREYXRhLnNldERhdGEoJ3RleHQvcGxhaW4nLCBwbGFpbik7XG5cdFx0XHRcdFx0XHRpZihodG1sKXtcblx0XHRcdFx0XHRcdFx0ZS5jbGlwYm9hcmREYXRhLnNldERhdGEoJ3RleHQvaHRtbCcsIGh0bWwpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoZS5vcmlnaW5hbEV2ZW50ICYmIGUub3JpZ2luYWxFdmVudC5jbGlwYm9hcmREYXRhLnNldERhdGEpIHtcblx0XHRcdFx0XHRcdGUub3JpZ2luYWxFdmVudC5jbGlwYm9hcmREYXRhLnNldERhdGEoJ3RleHQvcGxhaW4nLCBwbGFpbik7XG5cdFx0XHRcdFx0XHRpZihodG1sKXtcblx0XHRcdFx0XHRcdFx0ZS5vcmlnaW5hbEV2ZW50LmNsaXBib2FyZERhdGEuc2V0RGF0YSgndGV4dC9odG1sJywgaHRtbCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwiY2xpcGJvYXJkQ29waWVkXCIsIHBsYWluLCBodG1sKTtcblxuXHRcdFx0XHRcdHRoaXMucmVzZXQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYodGhpcy5tb2RlID09PSB0cnVlIHx8IHRoaXMubW9kZSA9PT0gXCJwYXN0ZVwiKXtcblx0XHRcdHRoaXMudGFibGUuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwicGFzdGVcIiwgKGUpID0+IHtcblx0XHRcdFx0dGhpcy5wYXN0ZShlKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHRoaXMuc2V0UGFzdGVQYXJzZXIodGhpcy50YWJsZS5vcHRpb25zLmNsaXBib2FyZFBhc3RlUGFyc2VyKTtcblx0XHR0aGlzLnNldFBhc3RlQWN0aW9uKHRoaXMudGFibGUub3B0aW9ucy5jbGlwYm9hcmRQYXN0ZUFjdGlvbik7XG5cblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcImNvcHlUb0NsaXBib2FyZFwiLCB0aGlzLmNvcHkuYmluZCh0aGlzKSk7XG5cdH1cblxuXHRyZXNldCgpe1xuXHRcdHRoaXMuYmxvY2tlZCA9IHRydWU7XG5cdFx0dGhpcy5jdXN0b21TZWxlY3Rpb24gPSBmYWxzZTtcblx0fVxuXG5cdGdlbmVyYXRlUGxhaW5Db250ZW50IChsaXN0KSB7XG5cdFx0dmFyIG91dHB1dCA9IFtdO1xuXG5cdFx0bGlzdC5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdHZhciByb3dEYXRhID0gW107XG5cblx0XHRcdHJvdy5jb2x1bW5zLmZvckVhY2goKGNvbCkgPT4ge1xuXHRcdFx0XHR2YXIgdmFsdWUgPSBcIlwiO1xuXG5cdFx0XHRcdGlmKGNvbCl7XG5cblx0XHRcdFx0XHRpZihyb3cudHlwZSA9PT0gXCJncm91cFwiKXtcblx0XHRcdFx0XHRcdGNvbC52YWx1ZSA9IGNvbC5jb21wb25lbnQuZ2V0S2V5KCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYoY29sLnZhbHVlID09PSBudWxsKXtcblx0XHRcdFx0XHRcdHZhbHVlID0gXCJcIjtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRzd2l0Y2godHlwZW9mIGNvbC52YWx1ZSl7XG5cdFx0XHRcdFx0XHRcdGNhc2UgXCJvYmplY3RcIjpcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KGNvbC52YWx1ZSk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0Y2FzZSBcInVuZGVmaW5lZFwiOlxuXHRcdFx0XHRcdFx0XHRcdHZhbHVlID0gXCJcIjtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRcdHZhbHVlID0gY29sLnZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJvd0RhdGEucHVzaCh2YWx1ZSk7XG5cdFx0XHR9KTtcblxuXHRcdFx0b3V0cHV0LnB1c2gocm93RGF0YS5qb2luKFwiXFx0XCIpKTtcblx0XHR9KTtcblxuXHRcdHJldHVybiBvdXRwdXQuam9pbihcIlxcblwiKTtcblx0fVxuXG5cdGNvcHkgKHJhbmdlLCBpbnRlcm5hbCkge1xuXHRcdHZhciBzZWwsIHRleHRSYW5nZTtcblx0XHR0aGlzLmJsb2NrZWQgPSBmYWxzZTtcblx0XHR0aGlzLmN1c3RvbVNlbGVjdGlvbiA9IGZhbHNlO1xuXG5cdFx0aWYgKHRoaXMubW9kZSA9PT0gdHJ1ZSB8fCB0aGlzLm1vZGUgPT09IFwiY29weVwiKSB7XG5cblx0XHRcdHRoaXMucm93UmFuZ2UgPSByYW5nZSB8fCB0aGlzLnRhYmxlLm9wdGlvbnMuY2xpcGJvYXJkQ29weVJvd1JhbmdlO1xuXG5cdFx0XHRpZiAodHlwZW9mIHdpbmRvdy5nZXRTZWxlY3Rpb24gIT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlUmFuZ2UgIT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0XHRyYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG5cdFx0XHRcdHJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyh0aGlzLnRhYmxlLmVsZW1lbnQpO1xuXHRcdFx0XHRzZWwgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG5cblx0XHRcdFx0aWYgKHNlbC50b1N0cmluZygpICYmIGludGVybmFsKSB7XG5cdFx0XHRcdFx0dGhpcy5jdXN0b21TZWxlY3Rpb24gPSBzZWwudG9TdHJpbmcoKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHNlbC5yZW1vdmVBbGxSYW5nZXMoKTtcblx0XHRcdFx0c2VsLmFkZFJhbmdlKHJhbmdlKTtcblx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIGRvY3VtZW50LnNlbGVjdGlvbiAhPSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBkb2N1bWVudC5ib2R5LmNyZWF0ZVRleHRSYW5nZSAhPSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHRcdHRleHRSYW5nZSA9IGRvY3VtZW50LmJvZHkuY3JlYXRlVGV4dFJhbmdlKCk7XG5cdFx0XHRcdHRleHRSYW5nZS5tb3ZlVG9FbGVtZW50VGV4dCh0aGlzLnRhYmxlLmVsZW1lbnQpO1xuXHRcdFx0XHR0ZXh0UmFuZ2Uuc2VsZWN0KCk7XG5cdFx0XHR9XG5cblx0XHRcdGRvY3VtZW50LmV4ZWNDb21tYW5kKCdjb3B5Jyk7XG5cblx0XHRcdGlmIChzZWwpIHtcblx0XHRcdFx0c2VsLnJlbW92ZUFsbFJhbmdlcygpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vUEFTVEUgRVZFTlQgSEFORExJTkdcblx0c2V0UGFzdGVBY3Rpb24oYWN0aW9uKXtcblxuXHRcdHN3aXRjaCh0eXBlb2YgYWN0aW9uKXtcblx0XHRcdGNhc2UgXCJzdHJpbmdcIjpcblx0XHRcdFx0dGhpcy5wYXN0ZUFjdGlvbiA9IENsaXBib2FyZC5wYXN0ZUFjdGlvbnNbYWN0aW9uXTtcblxuXHRcdFx0XHRpZighdGhpcy5wYXN0ZUFjdGlvbil7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiQ2xpcGJvYXJkIEVycm9yIC0gTm8gc3VjaCBwYXN0ZSBhY3Rpb24gZm91bmQ6XCIsIGFjdGlvbik7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgXCJmdW5jdGlvblwiOlxuXHRcdFx0XHR0aGlzLnBhc3RlQWN0aW9uID0gYWN0aW9uO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHRzZXRQYXN0ZVBhcnNlcihwYXJzZXIpe1xuXHRcdHN3aXRjaCh0eXBlb2YgcGFyc2VyKXtcblx0XHRcdGNhc2UgXCJzdHJpbmdcIjpcblx0XHRcdFx0dGhpcy5wYXN0ZVBhcnNlciA9IENsaXBib2FyZC5wYXN0ZVBhcnNlcnNbcGFyc2VyXTtcblxuXHRcdFx0XHRpZighdGhpcy5wYXN0ZVBhcnNlcil7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiQ2xpcGJvYXJkIEVycm9yIC0gTm8gc3VjaCBwYXN0ZSBwYXJzZXIgZm91bmQ6XCIsIHBhcnNlcik7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgXCJmdW5jdGlvblwiOlxuXHRcdFx0XHR0aGlzLnBhc3RlUGFyc2VyID0gcGFyc2VyO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHRwYXN0ZShlKXtcblx0XHR2YXIgZGF0YSwgcm93RGF0YSwgcm93cztcblxuXHRcdGlmKHRoaXMuY2hlY2tQYXNlT3JpZ2luKGUpKXtcblxuXHRcdFx0ZGF0YSA9IHRoaXMuZ2V0UGFzdGVEYXRhKGUpO1xuXG5cdFx0XHRyb3dEYXRhID0gdGhpcy5wYXN0ZVBhcnNlci5jYWxsKHRoaXMsIGRhdGEpO1xuXG5cdFx0XHRpZihyb3dEYXRhKXtcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHRcdGlmKHRoaXMudGFibGUubW9kRXhpc3RzKFwibXV0YXRvclwiKSl7XG5cdFx0XHRcdFx0cm93RGF0YSA9IHRoaXMubXV0YXRlRGF0YShyb3dEYXRhKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJvd3MgPSB0aGlzLnBhc3RlQWN0aW9uLmNhbGwodGhpcywgcm93RGF0YSk7XG5cblx0XHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwiY2xpcGJvYXJkUGFzdGVkXCIsIGRhdGEsIHJvd0RhdGEsIHJvd3MpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJjbGlwYm9hcmRQYXN0ZUVycm9yXCIsIGRhdGEpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdG11dGF0ZURhdGEoZGF0YSl7XG5cdFx0dmFyIG91dHB1dCA9IFtdO1xuXG5cdFx0aWYoQXJyYXkuaXNBcnJheShkYXRhKSl7XG5cdFx0XHRkYXRhLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0XHRvdXRwdXQucHVzaCh0aGlzLnRhYmxlLm1vZHVsZXMubXV0YXRvci50cmFuc2Zvcm1Sb3cocm93LCBcImNsaXBib2FyZFwiKSk7XG5cdFx0XHR9KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRvdXRwdXQgPSBkYXRhO1xuXHRcdH1cblxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblxuXG5cdGNoZWNrUGFzZU9yaWdpbihlKXtcblx0XHR2YXIgdmFsaWQgPSB0cnVlO1xuXG5cdFx0aWYoZS50YXJnZXQudGFnTmFtZSAhPSBcIkRJVlwiIHx8IHRoaXMudGFibGUubW9kdWxlcy5lZGl0LmN1cnJlbnRDZWxsKXtcblx0XHRcdHZhbGlkID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbGlkO1xuXHR9XG5cblx0Z2V0UGFzdGVEYXRhKGUpe1xuXHRcdHZhciBkYXRhO1xuXG5cdFx0aWYgKHdpbmRvdy5jbGlwYm9hcmREYXRhICYmIHdpbmRvdy5jbGlwYm9hcmREYXRhLmdldERhdGEpIHtcblx0XHRcdGRhdGEgPSB3aW5kb3cuY2xpcGJvYXJkRGF0YS5nZXREYXRhKCdUZXh0Jyk7XG5cdFx0fSBlbHNlIGlmIChlLmNsaXBib2FyZERhdGEgJiYgZS5jbGlwYm9hcmREYXRhLmdldERhdGEpIHtcblx0XHRcdGRhdGEgPSBlLmNsaXBib2FyZERhdGEuZ2V0RGF0YSgndGV4dC9wbGFpbicpO1xuXHRcdH0gZWxzZSBpZiAoZS5vcmlnaW5hbEV2ZW50ICYmIGUub3JpZ2luYWxFdmVudC5jbGlwYm9hcmREYXRhLmdldERhdGEpIHtcblx0XHRcdGRhdGEgPSBlLm9yaWdpbmFsRXZlbnQuY2xpcGJvYXJkRGF0YS5nZXREYXRhKCd0ZXh0L3BsYWluJyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cdH1cbn1cblxuQ2xpcGJvYXJkLm1vZHVsZU5hbWUgPSBcImNsaXBib2FyZFwiO1xuXG4vL2xvYWQgZGVmYXVsdHNcbkNsaXBib2FyZC5wYXN0ZUFjdGlvbnMgPSBkZWZhdWx0UGFzdGVBY3Rpb25zO1xuQ2xpcGJvYXJkLnBhc3RlUGFyc2VycyA9IGRlZmF1bHRQYXN0ZVBhcnNlcnM7XG5cbmNsYXNzIENhbGNDb21wb25lbnR7XG5cdGNvbnN0cnVjdG9yIChyb3cpe1xuXHRcdHRoaXMuX3JvdyA9IHJvdztcblxuXHRcdHJldHVybiBuZXcgUHJveHkodGhpcywge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbih0YXJnZXQsIG5hbWUsIHJlY2VpdmVyKSB7XG5cdFx0XHRcdGlmICh0eXBlb2YgdGFyZ2V0W25hbWVdICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRhcmdldFtuYW1lXTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiB0YXJnZXQuX3Jvdy50YWJsZS5jb21wb25lbnRGdW5jdGlvbkJpbmRlci5oYW5kbGUoXCJyb3dcIiwgdGFyZ2V0Ll9yb3csIG5hbWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRnZXREYXRhKHRyYW5zZm9ybSl7XG5cdFx0cmV0dXJuIHRoaXMuX3Jvdy5nZXREYXRhKHRyYW5zZm9ybSk7XG5cdH1cblxuXHRnZXRFbGVtZW50KCl7XG5cdFx0cmV0dXJuIHRoaXMuX3Jvdy5nZXRFbGVtZW50KCk7XG5cdH1cblxuXHRnZXRUYWJsZSgpe1xuXHRcdHJldHVybiB0aGlzLl9yb3cudGFibGU7XG5cdH1cblxuXHRnZXRDZWxscygpe1xuXHRcdHZhciBjZWxscyA9IFtdO1xuXG5cdFx0dGhpcy5fcm93LmdldENlbGxzKCkuZm9yRWFjaChmdW5jdGlvbihjZWxsKXtcblx0XHRcdGNlbGxzLnB1c2goY2VsbC5nZXRDb21wb25lbnQoKSk7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gY2VsbHM7XG5cdH1cblxuXHRnZXRDZWxsKGNvbHVtbil7XG5cdFx0dmFyIGNlbGwgPSB0aGlzLl9yb3cuZ2V0Q2VsbChjb2x1bW4pO1xuXHRcdHJldHVybiBjZWxsID8gY2VsbC5nZXRDb21wb25lbnQoKSA6IGZhbHNlO1xuXHR9XG5cblx0X2dldFNlbGYoKXtcblx0XHRyZXR1cm4gdGhpcy5fcm93O1xuXHR9XG59XG5cbi8vcHVibGljIGNlbGwgb2JqZWN0XG5jbGFzcyBDZWxsQ29tcG9uZW50IHtcblxuXHRjb25zdHJ1Y3RvciAoY2VsbCl7XG5cdFx0dGhpcy5fY2VsbCA9IGNlbGw7XG5cblx0XHRyZXR1cm4gbmV3IFByb3h5KHRoaXMsIHtcblx0XHRcdGdldDogZnVuY3Rpb24odGFyZ2V0LCBuYW1lLCByZWNlaXZlcikge1xuXHRcdFx0XHRpZiAodHlwZW9mIHRhcmdldFtuYW1lXSAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0XHRcdHJldHVybiB0YXJnZXRbbmFtZV07XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRyZXR1cm4gdGFyZ2V0Ll9jZWxsLnRhYmxlLmNvbXBvbmVudEZ1bmN0aW9uQmluZGVyLmhhbmRsZShcImNlbGxcIiwgdGFyZ2V0Ll9jZWxsLCBuYW1lKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0Z2V0VmFsdWUoKXtcblx0XHRyZXR1cm4gdGhpcy5fY2VsbC5nZXRWYWx1ZSgpO1xuXHR9XG5cblx0Z2V0T2xkVmFsdWUoKXtcblx0XHRyZXR1cm4gdGhpcy5fY2VsbC5nZXRPbGRWYWx1ZSgpO1xuXHR9XG5cblx0Z2V0SW5pdGlhbFZhbHVlKCl7XG5cdFx0cmV0dXJuIHRoaXMuX2NlbGwuaW5pdGlhbFZhbHVlO1xuXHR9XG5cblx0Z2V0RWxlbWVudCgpe1xuXHRcdHJldHVybiB0aGlzLl9jZWxsLmdldEVsZW1lbnQoKTtcblx0fVxuXG5cdGdldFJvdygpe1xuXHRcdHJldHVybiB0aGlzLl9jZWxsLnJvdy5nZXRDb21wb25lbnQoKTtcblx0fVxuXG5cdGdldERhdGEodHJhbnNmb3JtKXtcblx0XHRyZXR1cm4gdGhpcy5fY2VsbC5yb3cuZ2V0RGF0YSh0cmFuc2Zvcm0pO1xuXHR9XG5cdGdldFR5cGUoKXtcblx0XHRyZXR1cm4gXCJjZWxsXCI7XG5cdH1cblx0Z2V0RmllbGQoKXtcblx0XHRyZXR1cm4gdGhpcy5fY2VsbC5jb2x1bW4uZ2V0RmllbGQoKTtcblx0fVxuXG5cdGdldENvbHVtbigpe1xuXHRcdHJldHVybiB0aGlzLl9jZWxsLmNvbHVtbi5nZXRDb21wb25lbnQoKTtcblx0fVxuXG5cdHNldFZhbHVlKHZhbHVlLCBtdXRhdGUpe1xuXHRcdGlmKHR5cGVvZiBtdXRhdGUgPT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRtdXRhdGUgPSB0cnVlO1xuXHRcdH1cblxuXHRcdHRoaXMuX2NlbGwuc2V0VmFsdWUodmFsdWUsIG11dGF0ZSk7XG5cdH1cblxuXHRyZXN0b3JlT2xkVmFsdWUoKXtcblx0XHR0aGlzLl9jZWxsLnNldFZhbHVlQWN0dWFsKHRoaXMuX2NlbGwuZ2V0T2xkVmFsdWUoKSk7XG5cdH1cblxuXHRyZXN0b3JlSW5pdGlhbFZhbHVlKCl7XG5cdFx0dGhpcy5fY2VsbC5zZXRWYWx1ZUFjdHVhbCh0aGlzLl9jZWxsLmluaXRpYWxWYWx1ZSk7XG5cdH1cblxuXHRjaGVja0hlaWdodCgpe1xuXHRcdHRoaXMuX2NlbGwuY2hlY2tIZWlnaHQoKTtcblx0fVxuXG5cdGdldFRhYmxlKCl7XG5cdFx0cmV0dXJuIHRoaXMuX2NlbGwudGFibGU7XG5cdH1cblxuXHRfZ2V0U2VsZigpe1xuXHRcdHJldHVybiB0aGlzLl9jZWxsO1xuXHR9XG59XG5cbmNsYXNzIENlbGwgZXh0ZW5kcyBDb3JlRmVhdHVyZXtcblx0Y29uc3RydWN0b3IoY29sdW1uLCByb3cpe1xuXHRcdHN1cGVyKGNvbHVtbi50YWJsZSk7XG5cblx0XHR0aGlzLnRhYmxlID0gY29sdW1uLnRhYmxlO1xuXHRcdHRoaXMuY29sdW1uID0gY29sdW1uO1xuXHRcdHRoaXMucm93ID0gcm93O1xuXHRcdHRoaXMuZWxlbWVudCA9IG51bGw7XG5cdFx0dGhpcy52YWx1ZSA9IG51bGw7XG5cdFx0dGhpcy5pbml0aWFsVmFsdWU7XG5cdFx0dGhpcy5vbGRWYWx1ZSA9IG51bGw7XG5cdFx0dGhpcy5tb2R1bGVzID0ge307XG5cblx0XHR0aGlzLmhlaWdodCA9IG51bGw7XG5cdFx0dGhpcy53aWR0aCA9IG51bGw7XG5cdFx0dGhpcy5taW5XaWR0aCA9IG51bGw7XG5cblx0XHR0aGlzLmNvbXBvbmVudCA9IG51bGw7XG5cblx0XHR0aGlzLmxvYWRlZCA9IGZhbHNlOyAvL3RyYWNrIGlmIHRoZSBjZWxsIGhhcyBiZWVuIGFkZGVkIHRvIHRoZSBET00geWV0XG5cblx0XHR0aGlzLmJ1aWxkKCk7XG5cdH1cblxuXHQvLy8vLy8vLy8vLy8vLy8vIFNldHVwIEZ1bmN0aW9ucyAvLy8vLy8vLy8vLy8vLy8vL1xuXHQvL2dlbmVyYXRlIGVsZW1lbnRcblx0YnVpbGQoKXtcblx0XHR0aGlzLmdlbmVyYXRlRWxlbWVudCgpO1xuXG5cdFx0dGhpcy5zZXRXaWR0aCgpO1xuXG5cdFx0dGhpcy5fY29uZmlndXJlQ2VsbCgpO1xuXG5cdFx0dGhpcy5zZXRWYWx1ZUFjdHVhbCh0aGlzLmNvbHVtbi5nZXRGaWVsZFZhbHVlKHRoaXMucm93LmRhdGEpKTtcblxuXHRcdHRoaXMuaW5pdGlhbFZhbHVlID0gdGhpcy52YWx1ZTtcblx0fVxuXG5cdGdlbmVyYXRlRWxlbWVudCgpe1xuXHRcdHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHRcdHRoaXMuZWxlbWVudC5jbGFzc05hbWUgPSBcInRhYnVsYXRvci1jZWxsXCI7XG5cdFx0dGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJncmlkY2VsbFwiKTtcblx0fVxuXG5cdF9jb25maWd1cmVDZWxsKCl7XG5cdFx0dmFyIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQsXG5cdFx0ZmllbGQgPSB0aGlzLmNvbHVtbi5nZXRGaWVsZCgpLFxuXHRcdHZlcnRBbGlnbnMgPSB7XG5cdFx0XHR0b3A6XCJmbGV4LXN0YXJ0XCIsXG5cdFx0XHRib3R0b206XCJmbGV4LWVuZFwiLFxuXHRcdFx0bWlkZGxlOlwiY2VudGVyXCIsXG5cdFx0fSxcblx0XHRob3pBbGlnbnMgPSB7XG5cdFx0XHRsZWZ0OlwiZmxleC1zdGFydFwiLFxuXHRcdFx0cmlnaHQ6XCJmbGV4LWVuZFwiLFxuXHRcdFx0Y2VudGVyOlwiY2VudGVyXCIsXG5cdFx0fTtcblxuXHRcdC8vc2V0IHRleHQgYWxpZ25tZW50XG5cdFx0ZWxlbWVudC5zdHlsZS50ZXh0QWxpZ24gPSB0aGlzLmNvbHVtbi5ob3pBbGlnbjtcblxuXHRcdGlmKHRoaXMuY29sdW1uLnZlcnRBbGlnbil7XG5cdFx0XHRlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1mbGV4XCI7XG5cblx0XHRcdGVsZW1lbnQuc3R5bGUuYWxpZ25JdGVtcyA9IHZlcnRBbGlnbnNbdGhpcy5jb2x1bW4udmVydEFsaWduXSB8fCBcIlwiO1xuXG5cdFx0XHRpZih0aGlzLmNvbHVtbi5ob3pBbGlnbil7XG5cdFx0XHRcdGVsZW1lbnQuc3R5bGUuanVzdGlmeUNvbnRlbnQgPSBob3pBbGlnbnNbdGhpcy5jb2x1bW4uaG96QWxpZ25dIHx8IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYoZmllbGQpe1xuXHRcdFx0ZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJ0YWJ1bGF0b3ItZmllbGRcIiwgZmllbGQpO1xuXHRcdH1cblxuXHRcdC8vYWRkIGNsYXNzIHRvIGNlbGwgaWYgbmVlZGVkXG5cdFx0aWYodGhpcy5jb2x1bW4uZGVmaW5pdGlvbi5jc3NDbGFzcyl7XG5cdFx0XHR2YXIgY2xhc3NOYW1lcyA9IHRoaXMuY29sdW1uLmRlZmluaXRpb24uY3NzQ2xhc3Muc3BsaXQoXCIgXCIpO1xuXHRcdFx0Y2xhc3NOYW1lcy5mb3JFYWNoKChjbGFzc05hbWUpID0+IHtcblx0XHRcdFx0ZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHR0aGlzLmRpc3BhdGNoKFwiY2VsbC1pbml0XCIsIHRoaXMpO1xuXG5cdFx0Ly9oaWRlIGNlbGwgaWYgbm90IHZpc2libGVcblx0XHRpZighdGhpcy5jb2x1bW4udmlzaWJsZSl7XG5cdFx0XHR0aGlzLmhpZGUoKTtcblx0XHR9XG5cdH1cblxuXHQvL2dlbmVyYXRlIGNlbGwgY29udGVudHNcblx0X2dlbmVyYXRlQ29udGVudHMoKXtcblx0XHR2YXIgdmFsO1xuXG5cdFx0dmFsID0gdGhpcy5jaGFpbihcImNlbGwtZm9ybWF0XCIsIHRoaXMsIG51bGwsICgpID0+IHtcblx0XHRcdHJldHVybiB0aGlzLmVsZW1lbnQuaW5uZXJIVE1MID0gdGhpcy52YWx1ZTtcblx0XHR9KTtcblxuXHRcdHN3aXRjaCh0eXBlb2YgdmFsKXtcblx0XHRcdGNhc2UgXCJvYmplY3RcIjpcblx0XHRcdFx0aWYodmFsIGluc3RhbmNlb2YgTm9kZSl7XG5cblx0XHRcdFx0XHQvL2NsZWFyIHByZXZpb3VzIGNlbGwgY29udGVudHNcblx0XHRcdFx0XHR3aGlsZSh0aGlzLmVsZW1lbnQuZmlyc3RDaGlsZCkgdGhpcy5lbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudC5maXJzdENoaWxkKTtcblxuXHRcdFx0XHRcdHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh2YWwpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5lbGVtZW50LmlubmVySFRNTCA9IFwiXCI7XG5cblx0XHRcdFx0XHRpZih2YWwgIT0gbnVsbCl7XG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJGb3JtYXQgRXJyb3IgLSBGb3JtYXR0ZXIgaGFzIHJldHVybmVkIGEgdHlwZSBvZiBvYmplY3QsIHRoZSBvbmx5IHZhbGlkIGZvcm1hdHRlciBvYmplY3QgcmV0dXJuIGlzIGFuIGluc3RhbmNlIG9mIE5vZGUsIHRoZSBmb3JtYXR0ZXIgcmV0dXJuZWQ6XCIsIHZhbCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcInVuZGVmaW5lZFwiOlxuXHRcdFx0XHR0aGlzLmVsZW1lbnQuaW5uZXJIVE1MID0gXCJcIjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHR0aGlzLmVsZW1lbnQuaW5uZXJIVE1MID0gdmFsO1xuXHRcdH1cblx0fVxuXG5cdGNlbGxSZW5kZXJlZCgpe1xuXHRcdHRoaXMuZGlzcGF0Y2goXCJjZWxsLXJlbmRlcmVkXCIsIHRoaXMpO1xuXHR9XG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8gR2V0dGVycyAvLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRnZXRFbGVtZW50KGNvbnRhaW5lck9ubHkpe1xuXHRcdGlmKCF0aGlzLmxvYWRlZCl7XG5cdFx0XHR0aGlzLmxvYWRlZCA9IHRydWU7XG5cdFx0XHRpZighY29udGFpbmVyT25seSl7XG5cdFx0XHRcdHRoaXMubGF5b3V0RWxlbWVudCgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVsZW1lbnQ7XG5cdH1cblxuXHRnZXRWYWx1ZSgpe1xuXHRcdHJldHVybiB0aGlzLnZhbHVlO1xuXHR9XG5cblx0Z2V0T2xkVmFsdWUoKXtcblx0XHRyZXR1cm4gdGhpcy5vbGRWYWx1ZTtcblx0fVxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vIEFjdGlvbnMgLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0c2V0VmFsdWUodmFsdWUsIG11dGF0ZSwgZm9yY2Upe1xuXHRcdHZhciBjaGFuZ2VkID0gdGhpcy5zZXRWYWx1ZVByb2Nlc3NEYXRhKHZhbHVlLCBtdXRhdGUsIGZvcmNlKTtcblxuXHRcdGlmKGNoYW5nZWQpe1xuXHRcdFx0dGhpcy5kaXNwYXRjaChcImNlbGwtdmFsdWUtdXBkYXRlZFwiLCB0aGlzKTtcblxuXHRcdFx0dGhpcy5jZWxsUmVuZGVyZWQoKTtcblxuXHRcdFx0aWYodGhpcy5jb2x1bW4uZGVmaW5pdGlvbi5jZWxsRWRpdGVkKXtcblx0XHRcdFx0dGhpcy5jb2x1bW4uZGVmaW5pdGlvbi5jZWxsRWRpdGVkLmNhbGwodGhpcy50YWJsZSwgdGhpcy5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcImNlbGxFZGl0ZWRcIiwgdGhpcy5nZXRDb21wb25lbnQoKSk7XG5cblx0XHRcdGlmKHRoaXMuc3Vic2NyaWJlZEV4dGVybmFsKFwiZGF0YUNoYW5nZWRcIikpe1xuXHRcdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJkYXRhQ2hhbmdlZFwiLCB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0RGF0YSgpKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRzZXRWYWx1ZVByb2Nlc3NEYXRhKHZhbHVlLCBtdXRhdGUsIGZvcmNlKXtcblx0XHR2YXIgY2hhbmdlZCA9IGZhbHNlO1xuXG5cdFx0aWYodGhpcy52YWx1ZSAhPT0gdmFsdWUgfHwgZm9yY2Upe1xuXG5cdFx0XHRjaGFuZ2VkID0gdHJ1ZTtcblxuXHRcdFx0aWYobXV0YXRlKXtcblx0XHRcdFx0dmFsdWUgPSB0aGlzLmNoYWluKFwiY2VsbC12YWx1ZS1jaGFuZ2luZ1wiLCBbdGhpcywgdmFsdWVdLCBudWxsLCB2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy5zZXRWYWx1ZUFjdHVhbCh2YWx1ZSk7XG5cblx0XHRpZihjaGFuZ2VkKXtcblx0XHRcdHRoaXMuZGlzcGF0Y2goXCJjZWxsLXZhbHVlLWNoYW5nZWRcIiwgdGhpcyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNoYW5nZWQ7XG5cdH1cblxuXHRzZXRWYWx1ZUFjdHVhbCh2YWx1ZSl7XG5cdFx0dGhpcy5vbGRWYWx1ZSA9IHRoaXMudmFsdWU7XG5cblx0XHR0aGlzLnZhbHVlID0gdmFsdWU7XG5cblx0XHR0aGlzLmRpc3BhdGNoKFwiY2VsbC12YWx1ZS1zYXZlLWJlZm9yZVwiLCB0aGlzKTtcblxuXHRcdHRoaXMuY29sdW1uLnNldEZpZWxkVmFsdWUodGhpcy5yb3cuZGF0YSwgdmFsdWUpO1xuXG5cdFx0dGhpcy5kaXNwYXRjaChcImNlbGwtdmFsdWUtc2F2ZS1hZnRlclwiLCB0aGlzKTtcblxuXHRcdGlmKHRoaXMubG9hZGVkKXtcblx0XHRcdHRoaXMubGF5b3V0RWxlbWVudCgpO1xuXHRcdH1cblx0fVxuXG5cdGxheW91dEVsZW1lbnQoKXtcblx0XHR0aGlzLl9nZW5lcmF0ZUNvbnRlbnRzKCk7XG5cblx0XHR0aGlzLmRpc3BhdGNoKFwiY2VsbC1sYXlvdXRcIiwgdGhpcyk7XG5cdH1cblxuXHRzZXRXaWR0aCgpe1xuXHRcdHRoaXMud2lkdGggPSB0aGlzLmNvbHVtbi53aWR0aDtcblx0XHR0aGlzLmVsZW1lbnQuc3R5bGUud2lkdGggPSB0aGlzLmNvbHVtbi53aWR0aFN0eWxlZDtcblx0fVxuXG5cdGNsZWFyV2lkdGgoKXtcblx0XHR0aGlzLndpZHRoID0gXCJcIjtcblx0XHR0aGlzLmVsZW1lbnQuc3R5bGUud2lkdGggPSBcIlwiO1xuXHR9XG5cblx0Z2V0V2lkdGgoKXtcblx0XHRyZXR1cm4gdGhpcy53aWR0aCB8fCB0aGlzLmVsZW1lbnQub2Zmc2V0V2lkdGg7XG5cdH1cblxuXHRzZXRNaW5XaWR0aCgpe1xuXHRcdHRoaXMubWluV2lkdGggPSB0aGlzLmNvbHVtbi5taW5XaWR0aDtcblx0XHR0aGlzLmVsZW1lbnQuc3R5bGUubWluV2lkdGggPSB0aGlzLmNvbHVtbi5taW5XaWR0aFN0eWxlZDtcblx0fVxuXG5cdHNldE1heFdpZHRoKCl7XG5cdFx0dGhpcy5tYXhXaWR0aCA9IHRoaXMuY29sdW1uLm1heFdpZHRoO1xuXHRcdHRoaXMuZWxlbWVudC5zdHlsZS5tYXhXaWR0aCA9IHRoaXMuY29sdW1uLm1heFdpZHRoU3R5bGVkO1xuXHR9XG5cblx0Y2hlY2tIZWlnaHQoKXtcblx0XHQvLyB2YXIgaGVpZ2h0ID0gdGhpcy5lbGVtZW50LmNzcyhcImhlaWdodFwiKTtcblx0XHR0aGlzLnJvdy5yZWluaXRpYWxpemVIZWlnaHQoKTtcblx0fVxuXG5cdGNsZWFySGVpZ2h0KCl7XG5cdFx0dGhpcy5lbGVtZW50LnN0eWxlLmhlaWdodCA9IFwiXCI7XG5cdFx0dGhpcy5oZWlnaHQgPSBudWxsO1xuXG5cdFx0dGhpcy5kaXNwYXRjaChcImNlbGwtaGVpZ2h0XCIsIHRoaXMsIFwiXCIpO1xuXHR9XG5cblx0c2V0SGVpZ2h0KCl7XG5cdFx0dGhpcy5oZWlnaHQgPSB0aGlzLnJvdy5oZWlnaHQ7XG5cdFx0dGhpcy5lbGVtZW50LnN0eWxlLmhlaWdodCA9IHRoaXMucm93LmhlaWdodFN0eWxlZDtcblxuXHRcdHRoaXMuZGlzcGF0Y2goXCJjZWxsLWhlaWdodFwiLCB0aGlzLCB0aGlzLnJvdy5oZWlnaHRTdHlsZWQpO1xuXHR9XG5cblx0Z2V0SGVpZ2h0KCl7XG5cdFx0cmV0dXJuIHRoaXMuaGVpZ2h0IHx8IHRoaXMuZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG5cdH1cblxuXHRzaG93KCl7XG5cdFx0dGhpcy5lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSB0aGlzLmNvbHVtbi52ZXJ0QWxpZ24gPyBcImlubGluZS1mbGV4XCIgOiBcIlwiO1xuXHR9XG5cblx0aGlkZSgpe1xuXHRcdHRoaXMuZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG5cdH1cblxuXHRkZWxldGUoKXtcblx0XHR0aGlzLmRpc3BhdGNoKFwiY2VsbC1kZWxldGVcIiwgdGhpcyk7XG5cblx0XHRpZighdGhpcy50YWJsZS5yb3dNYW5hZ2VyLnJlZHJhd0Jsb2NrICYmIHRoaXMuZWxlbWVudC5wYXJlbnROb2RlKXtcblx0XHRcdHRoaXMuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5lbGVtZW50ID0gZmFsc2U7XG5cdFx0dGhpcy5jb2x1bW4uZGVsZXRlQ2VsbCh0aGlzKTtcblx0XHR0aGlzLnJvdy5kZWxldGVDZWxsKHRoaXMpO1xuXHRcdHRoaXMuY2FsY3MgPSB7fTtcblx0fVxuXG5cdGdldEluZGV4KCl7XG5cdFx0cmV0dXJuIHRoaXMucm93LmdldENlbGxJbmRleCh0aGlzKTtcblx0fVxuXG5cdC8vLy8vLy8vLy8vLy8vLy8gT2JqZWN0IEdlbmVyYXRpb24gLy8vLy8vLy8vLy8vLy8vLy9cblx0Z2V0Q29tcG9uZW50KCl7XG5cdFx0aWYoIXRoaXMuY29tcG9uZW50KXtcblx0XHRcdHRoaXMuY29tcG9uZW50ID0gbmV3IENlbGxDb21wb25lbnQodGhpcyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuY29tcG9uZW50O1xuXHR9XG59XG5cbi8vcHVibGljIGNvbHVtbiBvYmplY3RcbmNsYXNzIENvbHVtbkNvbXBvbmVudCB7XG5cdGNvbnN0cnVjdG9yIChjb2x1bW4pe1xuXHRcdHRoaXMuX2NvbHVtbiA9IGNvbHVtbjtcblx0XHR0aGlzLnR5cGUgPSBcIkNvbHVtbkNvbXBvbmVudFwiO1xuXG5cdFx0cmV0dXJuIG5ldyBQcm94eSh0aGlzLCB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKHRhcmdldCwgbmFtZSwgcmVjZWl2ZXIpIHtcblx0XHRcdFx0aWYgKHR5cGVvZiB0YXJnZXRbbmFtZV0gIT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdFx0XHRyZXR1cm4gdGFyZ2V0W25hbWVdO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRhcmdldC5fY29sdW1uLnRhYmxlLmNvbXBvbmVudEZ1bmN0aW9uQmluZGVyLmhhbmRsZShcImNvbHVtblwiLCB0YXJnZXQuX2NvbHVtbiwgbmFtZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdGdldEVsZW1lbnQoKXtcblx0XHRyZXR1cm4gdGhpcy5fY29sdW1uLmdldEVsZW1lbnQoKTtcblx0fVxuXG5cdGdldERlZmluaXRpb24oKXtcblx0XHRyZXR1cm4gdGhpcy5fY29sdW1uLmdldERlZmluaXRpb24oKTtcblx0fVxuXG5cdGdldEZpZWxkKCl7XG5cdFx0cmV0dXJuIHRoaXMuX2NvbHVtbi5nZXRGaWVsZCgpO1xuXHR9XG5cblx0Z2V0VGl0bGVEb3dubG9hZCgpIHtcblx0XHRyZXR1cm4gdGhpcy5fY29sdW1uLmdldFRpdGxlRG93bmxvYWQoKTtcblx0fVxuXG5cdGdldENlbGxzKCl7XG5cdFx0dmFyIGNlbGxzID0gW107XG5cblx0XHR0aGlzLl9jb2x1bW4uY2VsbHMuZm9yRWFjaChmdW5jdGlvbihjZWxsKXtcblx0XHRcdGNlbGxzLnB1c2goY2VsbC5nZXRDb21wb25lbnQoKSk7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gY2VsbHM7XG5cdH1cblxuXHRpc1Zpc2libGUoKXtcblx0XHRyZXR1cm4gdGhpcy5fY29sdW1uLnZpc2libGU7XG5cdH1cblxuXHRzaG93KCl7XG5cdFx0aWYodGhpcy5fY29sdW1uLmlzR3JvdXApe1xuXHRcdFx0dGhpcy5fY29sdW1uLmNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihjb2x1bW4pe1xuXHRcdFx0XHRjb2x1bW4uc2hvdygpO1xuXHRcdFx0fSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5fY29sdW1uLnNob3coKTtcblx0XHR9XG5cdH1cblxuXHRoaWRlKCl7XG5cdFx0aWYodGhpcy5fY29sdW1uLmlzR3JvdXApe1xuXHRcdFx0dGhpcy5fY29sdW1uLmNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihjb2x1bW4pe1xuXHRcdFx0XHRjb2x1bW4uaGlkZSgpO1xuXHRcdFx0fSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5fY29sdW1uLmhpZGUoKTtcblx0XHR9XG5cdH1cblxuXHR0b2dnbGUoKXtcblx0XHRpZih0aGlzLl9jb2x1bW4udmlzaWJsZSl7XG5cdFx0XHR0aGlzLmhpZGUoKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLnNob3coKTtcblx0XHR9XG5cdH1cblxuXHRkZWxldGUoKXtcblx0XHRyZXR1cm4gdGhpcy5fY29sdW1uLmRlbGV0ZSgpO1xuXHR9XG5cblx0Z2V0U3ViQ29sdW1ucygpe1xuXHRcdHZhciBvdXRwdXQgPSBbXTtcblxuXHRcdGlmKHRoaXMuX2NvbHVtbi5jb2x1bW5zLmxlbmd0aCl7XG5cdFx0XHR0aGlzLl9jb2x1bW4uY29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uKGNvbHVtbil7XG5cdFx0XHRcdG91dHB1dC5wdXNoKGNvbHVtbi5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cblx0Z2V0UGFyZW50Q29sdW1uKCl7XG5cdFx0cmV0dXJuIHRoaXMuX2NvbHVtbi5wYXJlbnQgaW5zdGFuY2VvZiBDb2x1bW4gPyB0aGlzLl9jb2x1bW4ucGFyZW50LmdldENvbXBvbmVudCgpIDogZmFsc2U7XG5cdH1cblxuXHRfZ2V0U2VsZigpe1xuXHRcdHJldHVybiB0aGlzLl9jb2x1bW47XG5cdH1cblxuXHRzY3JvbGxUbyhwb3NpdGlvbiwgaWZWaXNpYmxlKXtcblx0XHRyZXR1cm4gdGhpcy5fY29sdW1uLnRhYmxlLmNvbHVtbk1hbmFnZXIuc2Nyb2xsVG9Db2x1bW4odGhpcy5fY29sdW1uLCBwb3NpdGlvbiwgaWZWaXNpYmxlKTtcblx0fVxuXG5cdGdldFRhYmxlKCl7XG5cdFx0cmV0dXJuIHRoaXMuX2NvbHVtbi50YWJsZTtcblx0fVxuXG5cdG1vdmUodG8sIGFmdGVyKXtcblx0XHR2YXIgdG9Db2x1bW4gPSB0aGlzLl9jb2x1bW4udGFibGUuY29sdW1uTWFuYWdlci5maW5kQ29sdW1uKHRvKTtcblxuXHRcdGlmKHRvQ29sdW1uKXtcblx0XHRcdHRoaXMuX2NvbHVtbi50YWJsZS5jb2x1bW5NYW5hZ2VyLm1vdmVDb2x1bW4odGhpcy5fY29sdW1uLCB0b0NvbHVtbiwgYWZ0ZXIpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIk1vdmUgRXJyb3IgLSBObyBtYXRjaGluZyBjb2x1bW4gZm91bmQ6XCIsIHRvQ29sdW1uKTtcblx0XHR9XG5cdH1cblxuXHRnZXROZXh0Q29sdW1uKCl7XG5cdFx0dmFyIG5leHRDb2wgPSB0aGlzLl9jb2x1bW4ubmV4dENvbHVtbigpO1xuXG5cdFx0cmV0dXJuIG5leHRDb2wgPyBuZXh0Q29sLmdldENvbXBvbmVudCgpIDogZmFsc2U7XG5cdH1cblxuXHRnZXRQcmV2Q29sdW1uKCl7XG5cdFx0dmFyIHByZXZDb2wgPSB0aGlzLl9jb2x1bW4ucHJldkNvbHVtbigpO1xuXG5cdFx0cmV0dXJuIHByZXZDb2wgPyBwcmV2Q29sLmdldENvbXBvbmVudCgpIDogZmFsc2U7XG5cdH1cblxuXHR1cGRhdGVEZWZpbml0aW9uKHVwZGF0ZXMpe1xuXHRcdHJldHVybiB0aGlzLl9jb2x1bW4udXBkYXRlRGVmaW5pdGlvbih1cGRhdGVzKTtcblx0fVxuXG5cdGdldFdpZHRoKCl7XG5cdFx0cmV0dXJuIHRoaXMuX2NvbHVtbi5nZXRXaWR0aCgpO1xuXHR9XG5cblx0c2V0V2lkdGgod2lkdGgpe1xuXHRcdHZhciByZXN1bHQ7XG5cblx0XHRpZih3aWR0aCA9PT0gdHJ1ZSl7XG5cdFx0XHRyZXN1bHQgPSAgdGhpcy5fY29sdW1uLnJlaW5pdGlhbGl6ZVdpZHRoKHRydWUpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJlc3VsdCA9ICB0aGlzLl9jb2x1bW4uc2V0V2lkdGgod2lkdGgpO1xuXHRcdH1cblxuXHRcdHRoaXMuX2NvbHVtbi50YWJsZS5jb2x1bW5NYW5hZ2VyLnJlcmVuZGVyQ29sdW1ucyh0cnVlKTtcblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cbn1cblxudmFyIGRlZmF1bHRDb2x1bW5PcHRpb25zID0ge1xuXHRcInRpdGxlXCI6IHVuZGVmaW5lZCxcblx0XCJmaWVsZFwiOiB1bmRlZmluZWQsXG5cdFwiY29sdW1uc1wiOiB1bmRlZmluZWQsXG5cdFwidmlzaWJsZVwiOiB1bmRlZmluZWQsXG5cdFwiaG96QWxpZ25cIjogdW5kZWZpbmVkLFxuXHRcInZlcnRBbGlnblwiOiB1bmRlZmluZWQsXG5cdFwid2lkdGhcIjogdW5kZWZpbmVkLFxuXHRcIm1pbldpZHRoXCI6IDQwLFxuXHRcIm1heFdpZHRoXCI6IHVuZGVmaW5lZCxcblx0XCJtYXhJbml0aWFsV2lkdGhcIjogdW5kZWZpbmVkLFxuXHRcImNzc0NsYXNzXCI6IHVuZGVmaW5lZCxcblx0XCJ2YXJpYWJsZUhlaWdodFwiOiB1bmRlZmluZWQsXG5cdFwiaGVhZGVyVmVydGljYWxcIjogdW5kZWZpbmVkLFxuXHRcImhlYWRlckhvekFsaWduXCI6IHVuZGVmaW5lZCxcblx0XCJoZWFkZXJXb3JkV3JhcFwiOiBmYWxzZSxcblx0XCJlZGl0YWJsZVRpdGxlXCI6IHVuZGVmaW5lZCxcbn07XG5cbmNsYXNzIENvbHVtbiBleHRlbmRzIENvcmVGZWF0dXJle1xuXG5cdGNvbnN0cnVjdG9yKGRlZiwgcGFyZW50KXtcblx0XHRzdXBlcihwYXJlbnQudGFibGUpO1xuXG5cdFx0dGhpcy5kZWZpbml0aW9uID0gZGVmOyAvL2NvbHVtbiBkZWZpbml0aW9uXG5cdFx0dGhpcy5wYXJlbnQgPSBwYXJlbnQ7IC8vaG9sZCBwYXJlbnQgb2JqZWN0XG5cdFx0dGhpcy50eXBlID0gXCJjb2x1bW5cIjsgLy90eXBlIG9mIGVsZW1lbnRcblx0XHR0aGlzLmNvbHVtbnMgPSBbXTsgLy9jaGlsZCBjb2x1bW5zXG5cdFx0dGhpcy5jZWxscyA9IFtdOyAvL2NlbGxzIGJvdW5kIHRvIHRoaXMgY29sdW1uXG5cdFx0dGhpcy5lbGVtZW50ID0gdGhpcy5jcmVhdGVFbGVtZW50KCk7IC8vY29sdW1uIGhlYWRlciBlbGVtZW50XG5cdFx0dGhpcy5jb250ZW50RWxlbWVudCA9IGZhbHNlO1xuXHRcdHRoaXMudGl0bGVIb2xkZXJFbGVtZW50ID0gZmFsc2U7XG5cdFx0dGhpcy50aXRsZUVsZW1lbnQgPSBmYWxzZTtcblx0XHR0aGlzLmdyb3VwRWxlbWVudCA9IHRoaXMuY3JlYXRlR3JvdXBFbGVtZW50KCk7IC8vY29sdW1uIGdyb3VwIGhvbGRlciBlbGVtZW50XG5cdFx0dGhpcy5pc0dyb3VwID0gZmFsc2U7XG5cdFx0dGhpcy5ob3pBbGlnbiA9IFwiXCI7IC8vaG9yaXpvbnRhbCB0ZXh0IGFsaWdubWVudFxuXHRcdHRoaXMudmVydEFsaWduID0gXCJcIjsgLy92ZXJ0IHRleHQgYWxpZ25tZW50XG5cblx0XHQvL211bHRpIGRpbWVuc2lvbmFsIGZpbGVkIGhhbmRsaW5nXG5cdFx0dGhpcy5maWVsZCA9XCJcIjtcblx0XHR0aGlzLmZpZWxkU3RydWN0dXJlID0gXCJcIjtcblx0XHR0aGlzLmdldEZpZWxkVmFsdWUgPSBcIlwiO1xuXHRcdHRoaXMuc2V0RmllbGRWYWx1ZSA9IFwiXCI7XG5cblx0XHR0aGlzLnRpdGxlRG93bmxvYWQgPSBudWxsO1xuXHRcdHRoaXMudGl0bGVGb3JtYXR0ZXJSZW5kZXJlZCA9IGZhbHNlO1xuXG5cdFx0dGhpcy5tYXBEZWZpbml0aW9ucygpO1xuXG5cdFx0dGhpcy5zZXRGaWVsZCh0aGlzLmRlZmluaXRpb24uZmllbGQpO1xuXG5cdFx0dGhpcy5tb2R1bGVzID0ge307IC8vaG9sZCBtb2R1bGUgdmFyaWFibGVzO1xuXG5cdFx0dGhpcy53aWR0aCA9IG51bGw7IC8vY29sdW1uIHdpZHRoXG5cdFx0dGhpcy53aWR0aFN0eWxlZCA9IFwiXCI7IC8vY29sdW1uIHdpZHRoIHByZS1zdHlsZWQgdG8gaW1wcm92ZSByZW5kZXIgZWZmaWNpZW5jeVxuXHRcdHRoaXMubWF4V2lkdGggPSBudWxsOyAvL2NvbHVtbiBtYXhpbXVtIHdpZHRoXG5cdFx0dGhpcy5tYXhXaWR0aFN0eWxlZCA9IFwiXCI7IC8vY29sdW1uIG1heGltdW0gcHJlLXN0eWxlZCB0byBpbXByb3ZlIHJlbmRlciBlZmZpY2llbmN5XG5cdFx0dGhpcy5tYXhJbml0aWFsV2lkdGggPSBudWxsO1xuXHRcdHRoaXMubWluV2lkdGggPSBudWxsOyAvL2NvbHVtbiBtaW5pbXVtIHdpZHRoXG5cdFx0dGhpcy5taW5XaWR0aFN0eWxlZCA9IFwiXCI7IC8vY29sdW1uIG1pbmltdW0gcHJlLXN0eWxlZCB0byBpbXByb3ZlIHJlbmRlciBlZmZpY2llbmN5XG5cdFx0dGhpcy53aWR0aEZpeGVkID0gZmFsc2U7IC8vdXNlciBoYXMgc3BlY2lmaWVkIGEgd2lkdGggZm9yIHRoaXMgY29sdW1uXG5cblx0XHR0aGlzLnZpc2libGUgPSB0cnVlOyAvL2RlZmF1bHQgdmlzaWJsZSBzdGF0ZVxuXG5cdFx0dGhpcy5jb21wb25lbnQgPSBudWxsO1xuXG5cdFx0Ly9pbml0aWFsaXplIGNvbHVtblxuXHRcdGlmKHRoaXMuZGVmaW5pdGlvbi5jb2x1bW5zKXtcblxuXHRcdFx0dGhpcy5pc0dyb3VwID0gdHJ1ZTtcblxuXHRcdFx0dGhpcy5kZWZpbml0aW9uLmNvbHVtbnMuZm9yRWFjaCgoZGVmLCBpKSA9PiB7XG5cdFx0XHRcdHZhciBuZXdDb2wgPSBuZXcgQ29sdW1uKGRlZiwgdGhpcyk7XG5cdFx0XHRcdHRoaXMuYXR0YWNoQ29sdW1uKG5ld0NvbCk7XG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy5jaGVja0NvbHVtblZpc2liaWxpdHkoKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRwYXJlbnQucmVnaXN0ZXJDb2x1bW5GaWVsZCh0aGlzKTtcblx0XHR9XG5cblx0XHR0aGlzLl9pbml0aWFsaXplKCk7XG5cdH1cblxuXHRjcmVhdGVFbGVtZW50ICgpe1xuXHRcdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cblx0XHRlbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWNvbFwiKTtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwiY29sdW1uaGVhZGVyXCIpO1xuXHRcdGVsLnNldEF0dHJpYnV0ZShcImFyaWEtc29ydFwiLCBcIm5vbmVcIik7XG5cblx0XHRzd2l0Y2godGhpcy50YWJsZS5vcHRpb25zLmNvbHVtbkhlYWRlclZlcnRBbGlnbil7XG5cdFx0XHRjYXNlIFwibWlkZGxlXCI6XG5cdFx0XHRcdGVsLnN0eWxlLmp1c3RpZnlDb250ZW50ID0gXCJjZW50ZXJcIjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwiYm90dG9tXCI6XG5cdFx0XHRcdGVsLnN0eWxlLmp1c3RpZnlDb250ZW50ID0gXCJmbGV4LWVuZFwiO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cblx0XHRyZXR1cm4gZWw7XG5cdH1cblxuXHRjcmVhdGVHcm91cEVsZW1lbnQgKCl7XG5cdFx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuXHRcdGVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItY29sLWdyb3VwLWNvbHNcIik7XG5cblx0XHRyZXR1cm4gZWw7XG5cdH1cblxuXHRtYXBEZWZpbml0aW9ucygpe1xuXHRcdHZhciBkZWZhdWx0cyA9IHRoaXMudGFibGUub3B0aW9ucy5jb2x1bW5EZWZhdWx0cztcblxuXHRcdC8vbWFwIGNvbHVtbkRlZmF1bHRzIG9udG8gY29sdW1uIGRlZmluaXRpb25zXG5cdFx0aWYoZGVmYXVsdHMpe1xuXHRcdFx0Zm9yKGxldCBrZXkgaW4gZGVmYXVsdHMpe1xuXHRcdFx0XHRpZih0eXBlb2YgdGhpcy5kZWZpbml0aW9uW2tleV0gPT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0XHRcdHRoaXMuZGVmaW5pdGlvbltrZXldID0gZGVmYXVsdHNba2V5XTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMuZGVmaW5pdGlvbiA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5vcHRpb25zTGlzdC5nZW5lcmF0ZShDb2x1bW4uZGVmYXVsdE9wdGlvbkxpc3QsIHRoaXMuZGVmaW5pdGlvbik7XG5cdH1cblxuXHRjaGVja0RlZmluaXRpb24oKXtcblx0XHRPYmplY3Qua2V5cyh0aGlzLmRlZmluaXRpb24pLmZvckVhY2goKGtleSkgPT4ge1xuXHRcdFx0aWYoQ29sdW1uLmRlZmF1bHRPcHRpb25MaXN0LmluZGV4T2Yoa2V5KSA9PT0gLTEpe1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJJbnZhbGlkIGNvbHVtbiBkZWZpbml0aW9uIG9wdGlvbiBpbiAnXCIgKyAodGhpcy5maWVsZCB8fCB0aGlzLmRlZmluaXRpb24udGl0bGUpICsgXCInIGNvbHVtbjpcIiwga2V5KTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdHNldEZpZWxkKGZpZWxkKXtcblx0XHR0aGlzLmZpZWxkID0gZmllbGQ7XG5cdFx0dGhpcy5maWVsZFN0cnVjdHVyZSA9IGZpZWxkID8gKHRoaXMudGFibGUub3B0aW9ucy5uZXN0ZWRGaWVsZFNlcGFyYXRvciA/IGZpZWxkLnNwbGl0KHRoaXMudGFibGUub3B0aW9ucy5uZXN0ZWRGaWVsZFNlcGFyYXRvcikgOiBbZmllbGRdKSA6IFtdO1xuXHRcdHRoaXMuZ2V0RmllbGRWYWx1ZSA9IHRoaXMuZmllbGRTdHJ1Y3R1cmUubGVuZ3RoID4gMSA/IHRoaXMuX2dldE5lc3RlZERhdGEgOiB0aGlzLl9nZXRGbGF0RGF0YTtcblx0XHR0aGlzLnNldEZpZWxkVmFsdWUgPSB0aGlzLmZpZWxkU3RydWN0dXJlLmxlbmd0aCA+IDEgPyB0aGlzLl9zZXROZXN0ZWREYXRhIDogdGhpcy5fc2V0RmxhdERhdGE7XG5cdH1cblxuXHQvL3JlZ2lzdGVyIGNvbHVtbiBwb3NpdGlvbiB3aXRoIGNvbHVtbiBtYW5hZ2VyXG5cdHJlZ2lzdGVyQ29sdW1uUG9zaXRpb24oY29sdW1uKXtcblx0XHR0aGlzLnBhcmVudC5yZWdpc3RlckNvbHVtblBvc2l0aW9uKGNvbHVtbik7XG5cdH1cblxuXHQvL3JlZ2lzdGVyIGNvbHVtbiBwb3NpdGlvbiB3aXRoIGNvbHVtbiBtYW5hZ2VyXG5cdHJlZ2lzdGVyQ29sdW1uRmllbGQoY29sdW1uKXtcblx0XHR0aGlzLnBhcmVudC5yZWdpc3RlckNvbHVtbkZpZWxkKGNvbHVtbik7XG5cdH1cblxuXHQvL3RyaWdnZXIgcG9zaXRpb24gcmVnaXN0cmF0aW9uXG5cdHJlUmVnaXN0ZXJQb3NpdGlvbigpe1xuXHRcdGlmKHRoaXMuaXNHcm91cCl7XG5cdFx0XHR0aGlzLmNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihjb2x1bW4pe1xuXHRcdFx0XHRjb2x1bW4ucmVSZWdpc3RlclBvc2l0aW9uKCk7XG5cdFx0XHR9KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uUG9zaXRpb24odGhpcyk7XG5cdFx0fVxuXHR9XG5cblx0Ly9idWlsZCBoZWFkZXIgZWxlbWVudFxuXHRfaW5pdGlhbGl6ZSgpe1xuXHRcdHZhciBkZWYgPSB0aGlzLmRlZmluaXRpb247XG5cblx0XHR3aGlsZSh0aGlzLmVsZW1lbnQuZmlyc3RDaGlsZCkgdGhpcy5lbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudC5maXJzdENoaWxkKTtcblxuXHRcdGlmKGRlZi5oZWFkZXJWZXJ0aWNhbCl7XG5cdFx0XHR0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1jb2wtdmVydGljYWxcIik7XG5cblx0XHRcdGlmKGRlZi5oZWFkZXJWZXJ0aWNhbCA9PT0gXCJmbGlwXCIpe1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1jb2wtdmVydGljYWwtZmxpcFwiKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLmNvbnRlbnRFbGVtZW50ID0gdGhpcy5fYnVpbGRDb2x1bW5IZWFkZXJDb250ZW50KCk7XG5cblx0XHR0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5jb250ZW50RWxlbWVudCk7XG5cblx0XHRpZih0aGlzLmlzR3JvdXApe1xuXHRcdFx0dGhpcy5fYnVpbGRHcm91cEhlYWRlcigpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuX2J1aWxkQ29sdW1uSGVhZGVyKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5kaXNwYXRjaChcImNvbHVtbi1pbml0XCIsIHRoaXMpO1xuXHR9XG5cblx0Ly9idWlsZCBoZWFkZXIgZWxlbWVudCBmb3IgaGVhZGVyXG5cdF9idWlsZENvbHVtbkhlYWRlcigpe1xuXHRcdHZhciBkZWYgPSB0aGlzLmRlZmluaXRpb247XG5cblx0XHR0aGlzLmRpc3BhdGNoKFwiY29sdW1uLWxheW91dFwiLCB0aGlzKTtcblxuXHRcdC8vc2V0IGNvbHVtbiB2aXNpYmlsaXR5XG5cdFx0aWYodHlwZW9mIGRlZi52aXNpYmxlICE9IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0aWYoZGVmLnZpc2libGUpe1xuXHRcdFx0XHR0aGlzLnNob3codHJ1ZSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMuaGlkZSh0cnVlKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvL2Fzc2lnbiBhZGRpdGlvbmFsIGNzcyBjbGFzc2VzIHRvIGNvbHVtbiBoZWFkZXJcblx0XHRpZihkZWYuY3NzQ2xhc3Mpe1xuXHRcdFx0dmFyIGNsYXNzTmFtZXMgPSBkZWYuY3NzQ2xhc3Muc3BsaXQoXCIgXCIpO1xuXHRcdFx0Y2xhc3NOYW1lcy5mb3JFYWNoKChjbGFzc05hbWUpID0+IHtcblx0XHRcdFx0dGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmKGRlZi5maWVsZCl7XG5cdFx0XHR0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKFwidGFidWxhdG9yLWZpZWxkXCIsIGRlZi5maWVsZCk7XG5cdFx0fVxuXG5cdFx0Ly9zZXQgbWluIHdpZHRoIGlmIHByZXNlbnRcblx0XHR0aGlzLnNldE1pbldpZHRoKHBhcnNlSW50KGRlZi5taW5XaWR0aCkpO1xuXG5cdFx0aWYgKGRlZi5tYXhJbml0aWFsV2lkdGgpIHtcblx0XHRcdHRoaXMubWF4SW5pdGlhbFdpZHRoID0gcGFyc2VJbnQoZGVmLm1heEluaXRpYWxXaWR0aCk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGRlZi5tYXhXaWR0aCl7XG5cdFx0XHR0aGlzLnNldE1heFdpZHRoKHBhcnNlSW50KGRlZi5tYXhXaWR0aCkpO1xuXHRcdH1cblxuXHRcdHRoaXMucmVpbml0aWFsaXplV2lkdGgoKTtcblxuXHRcdC8vc2V0IGhvcml6b250YWwgdGV4dCBhbGlnbm1lbnRcblx0XHR0aGlzLmhvekFsaWduID0gdGhpcy5kZWZpbml0aW9uLmhvekFsaWduO1xuXHRcdHRoaXMudmVydEFsaWduID0gdGhpcy5kZWZpbml0aW9uLnZlcnRBbGlnbjtcblxuXHRcdHRoaXMudGl0bGVFbGVtZW50LnN0eWxlLnRleHRBbGlnbiA9IHRoaXMuZGVmaW5pdGlvbi5oZWFkZXJIb3pBbGlnbjtcblx0fVxuXG5cdF9idWlsZENvbHVtbkhlYWRlckNvbnRlbnQoKXtcblx0XHR2YXIgY29udGVudEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdGNvbnRlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItY29sLWNvbnRlbnRcIik7XG5cblx0XHR0aGlzLnRpdGxlSG9sZGVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0dGhpcy50aXRsZUhvbGRlckVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1jb2wtdGl0bGUtaG9sZGVyXCIpO1xuXG5cdFx0Y29udGVudEVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy50aXRsZUhvbGRlckVsZW1lbnQpO1xuXG5cdFx0dGhpcy50aXRsZUVsZW1lbnQgPSB0aGlzLl9idWlsZENvbHVtbkhlYWRlclRpdGxlKCk7XG5cblx0XHR0aGlzLnRpdGxlSG9sZGVyRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLnRpdGxlRWxlbWVudCk7XG5cblx0XHRyZXR1cm4gY29udGVudEVsZW1lbnQ7XG5cdH1cblxuXHQvL2J1aWxkIHRpdGxlIGVsZW1lbnQgb2YgY29sdW1uXG5cdF9idWlsZENvbHVtbkhlYWRlclRpdGxlKCl7XG5cdFx0dmFyIGRlZiA9IHRoaXMuZGVmaW5pdGlvbjtcblxuXHRcdHZhciB0aXRsZUhvbGRlckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdHRpdGxlSG9sZGVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWNvbC10aXRsZVwiKTtcblx0XHRcblx0XHRpZihkZWYuaGVhZGVyV29yZFdyYXApe1xuXHRcdFx0dGl0bGVIb2xkZXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItY29sLXRpdGxlLXdyYXBcIik7XG5cdFx0fVxuXG5cdFx0aWYoZGVmLmVkaXRhYmxlVGl0bGUpe1xuXHRcdFx0dmFyIHRpdGxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XHRcdHRpdGxlRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXRpdGxlLWVkaXRvclwiKTtcblxuXHRcdFx0dGl0bGVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuXHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR0aXRsZUVsZW1lbnQuZm9jdXMoKTtcblx0XHRcdH0pO1xuXG5cdFx0XHR0aXRsZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCAoKSA9PiB7XG5cdFx0XHRcdGRlZi50aXRsZSA9IHRpdGxlRWxlbWVudC52YWx1ZTtcblx0XHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwiY29sdW1uVGl0bGVDaGFuZ2VkXCIsIHRoaXMuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdFx0fSk7XG5cblx0XHRcdHRpdGxlSG9sZGVyRWxlbWVudC5hcHBlbmRDaGlsZCh0aXRsZUVsZW1lbnQpO1xuXG5cdFx0XHRpZihkZWYuZmllbGQpe1xuXHRcdFx0XHR0aGlzLmxhbmdCaW5kKFwiY29sdW1uc3xcIiArIGRlZi5maWVsZCwgKHRleHQpID0+IHtcblx0XHRcdFx0XHR0aXRsZUVsZW1lbnQudmFsdWUgPSB0ZXh0IHx8IChkZWYudGl0bGUgfHwgXCImbmJzcDtcIik7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aXRsZUVsZW1lbnQudmFsdWUgID0gZGVmLnRpdGxlIHx8IFwiJm5ic3A7XCI7XG5cdFx0XHR9XG5cblx0XHR9ZWxzZSB7XG5cdFx0XHRpZihkZWYuZmllbGQpe1xuXHRcdFx0XHR0aGlzLmxhbmdCaW5kKFwiY29sdW1uc3xcIiArIGRlZi5maWVsZCwgKHRleHQpID0+IHtcblx0XHRcdFx0XHR0aGlzLl9mb3JtYXRDb2x1bW5IZWFkZXJUaXRsZSh0aXRsZUhvbGRlckVsZW1lbnQsIHRleHQgfHwgKGRlZi50aXRsZSB8fCBcIiZuYnNwO1wiKSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLl9mb3JtYXRDb2x1bW5IZWFkZXJUaXRsZSh0aXRsZUhvbGRlckVsZW1lbnQsIGRlZi50aXRsZSB8fCBcIiZuYnNwO1wiKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGl0bGVIb2xkZXJFbGVtZW50O1xuXHR9XG5cblx0X2Zvcm1hdENvbHVtbkhlYWRlclRpdGxlKGVsLCB0aXRsZSl7XG5cdFx0dmFyIGNvbnRlbnRzID0gdGhpcy5jaGFpbihcImNvbHVtbi1mb3JtYXRcIiwgW3RoaXMsIHRpdGxlLCBlbF0sIG51bGwsICgpID0+IHtcblx0XHRcdHJldHVybiB0aXRsZTtcblx0XHR9KTtcblxuXHRcdHN3aXRjaCh0eXBlb2YgY29udGVudHMpe1xuXHRcdFx0Y2FzZSBcIm9iamVjdFwiOlxuXHRcdFx0XHRpZihjb250ZW50cyBpbnN0YW5jZW9mIE5vZGUpe1xuXHRcdFx0XHRcdGVsLmFwcGVuZENoaWxkKGNvbnRlbnRzKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGVsLmlubmVySFRNTCA9IFwiXCI7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiRm9ybWF0IEVycm9yIC0gVGl0bGUgZm9ybWF0dGVyIGhhcyByZXR1cm5lZCBhIHR5cGUgb2Ygb2JqZWN0LCB0aGUgb25seSB2YWxpZCBmb3JtYXR0ZXIgb2JqZWN0IHJldHVybiBpcyBhbiBpbnN0YW5jZSBvZiBOb2RlLCB0aGUgZm9ybWF0dGVyIHJldHVybmVkOlwiLCBjb250ZW50cyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwidW5kZWZpbmVkXCI6XG5cdFx0XHRcdGVsLmlubmVySFRNTCA9IFwiXCI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0ZWwuaW5uZXJIVE1MID0gY29udGVudHM7XG5cdFx0fVxuXHR9XG5cblx0Ly9idWlsZCBoZWFkZXIgZWxlbWVudCBmb3IgY29sdW1uIGdyb3VwXG5cdF9idWlsZEdyb3VwSGVhZGVyKCl7XG5cdFx0dGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItY29sLWdyb3VwXCIpO1xuXHRcdHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwiY29sdW1uZ3JvdXBcIik7XG5cdFx0dGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtdGl0bGVcIiwgdGhpcy5kZWZpbml0aW9uLnRpdGxlKTtcblxuXHRcdC8vYXNpZ24gYWRkaXRpb25hbCBjc3MgY2xhc3NlcyB0byBjb2x1bW4gaGVhZGVyXG5cdFx0aWYodGhpcy5kZWZpbml0aW9uLmNzc0NsYXNzKXtcblx0XHRcdHZhciBjbGFzc05hbWVzID0gdGhpcy5kZWZpbml0aW9uLmNzc0NsYXNzLnNwbGl0KFwiIFwiKTtcblx0XHRcdGNsYXNzTmFtZXMuZm9yRWFjaCgoY2xhc3NOYW1lKSA9PiB7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHR0aGlzLnRpdGxlRWxlbWVudC5zdHlsZS50ZXh0QWxpZ24gPSB0aGlzLmRlZmluaXRpb24uaGVhZGVySG96QWxpZ247XG5cblx0XHR0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5ncm91cEVsZW1lbnQpO1xuXHR9XG5cblx0Ly9mbGF0IGZpZWxkIGxvb2t1cFxuXHRfZ2V0RmxhdERhdGEoZGF0YSl7XG5cdFx0cmV0dXJuIGRhdGFbdGhpcy5maWVsZF07XG5cdH1cblxuXHQvL25lc3RlZCBmaWVsZCBsb29rdXBcblx0X2dldE5lc3RlZERhdGEoZGF0YSl7XG5cdFx0dmFyIGRhdGFPYmogPSBkYXRhLFxuXHRcdHN0cnVjdHVyZSA9IHRoaXMuZmllbGRTdHJ1Y3R1cmUsXG5cdFx0bGVuZ3RoID0gc3RydWN0dXJlLmxlbmd0aCxcblx0XHRvdXRwdXQ7XG5cblx0XHRmb3IobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspe1xuXG5cdFx0XHRkYXRhT2JqID0gZGF0YU9ialtzdHJ1Y3R1cmVbaV1dO1xuXG5cdFx0XHRvdXRwdXQgPSBkYXRhT2JqO1xuXG5cdFx0XHRpZighZGF0YU9iail7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblxuXHQvL2ZsYXQgZmllbGQgc2V0XG5cdF9zZXRGbGF0RGF0YShkYXRhLCB2YWx1ZSl7XG5cdFx0aWYodGhpcy5maWVsZCl7XG5cdFx0XHRkYXRhW3RoaXMuZmllbGRdID0gdmFsdWU7XG5cdFx0fVxuXHR9XG5cblx0Ly9uZXN0ZWQgZmllbGQgc2V0XG5cdF9zZXROZXN0ZWREYXRhKGRhdGEsIHZhbHVlKXtcblx0XHR2YXIgZGF0YU9iaiA9IGRhdGEsXG5cdFx0c3RydWN0dXJlID0gdGhpcy5maWVsZFN0cnVjdHVyZSxcblx0XHRsZW5ndGggPSBzdHJ1Y3R1cmUubGVuZ3RoO1xuXG5cdFx0Zm9yKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKXtcblxuXHRcdFx0aWYoaSA9PSBsZW5ndGggLTEpe1xuXHRcdFx0XHRkYXRhT2JqW3N0cnVjdHVyZVtpXV0gPSB2YWx1ZTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aWYoIWRhdGFPYmpbc3RydWN0dXJlW2ldXSl7XG5cdFx0XHRcdFx0aWYodHlwZW9mIHZhbHVlICE9PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdFx0XHRcdGRhdGFPYmpbc3RydWN0dXJlW2ldXSA9IHt9O1xuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRhdGFPYmogPSBkYXRhT2JqW3N0cnVjdHVyZVtpXV07XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly9hdHRhY2ggY29sdW1uIHRvIHRoaXMgZ3JvdXBcblx0YXR0YWNoQ29sdW1uKGNvbHVtbil7XG5cdFx0aWYodGhpcy5ncm91cEVsZW1lbnQpe1xuXHRcdFx0dGhpcy5jb2x1bW5zLnB1c2goY29sdW1uKTtcblx0XHRcdHRoaXMuZ3JvdXBFbGVtZW50LmFwcGVuZENoaWxkKGNvbHVtbi5nZXRFbGVtZW50KCkpO1xuXG5cdFx0XHRjb2x1bW4uY29sdW1uUmVuZGVyZWQoKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJDb2x1bW4gV2FybmluZyAtIENvbHVtbiBiZWluZyBhdHRhY2hlZCB0byBhbm90aGVyIGNvbHVtbiBpbnN0ZWFkIG9mIGNvbHVtbiBncm91cFwiKTtcblx0XHR9XG5cdH1cblxuXHQvL3ZlcnRpY2FsbHkgYWxpZ24gaGVhZGVyIGluIGNvbHVtblxuXHR2ZXJ0aWNhbEFsaWduKGFsaWdubWVudCwgaGVpZ2h0KXtcblxuXHRcdC8vY2FsY3VsYXRlIGhlaWdodCBvZiBjb2x1bW4gaGVhZGVyIGFuZCBncm91cCBob2xkZXIgZWxlbWVudFxuXHRcdHZhciBwYXJlbnRIZWlnaHQgPSB0aGlzLnBhcmVudC5pc0dyb3VwID8gdGhpcy5wYXJlbnQuZ2V0R3JvdXBFbGVtZW50KCkuY2xpZW50SGVpZ2h0IDogKGhlaWdodCB8fCB0aGlzLnBhcmVudC5nZXRIZWFkZXJzRWxlbWVudCgpLmNsaWVudEhlaWdodCk7XG5cdFx0Ly8gdmFyIHBhcmVudEhlaWdodCA9IHRoaXMucGFyZW50LmlzR3JvdXAgPyB0aGlzLnBhcmVudC5nZXRHcm91cEVsZW1lbnQoKS5jbGllbnRIZWlnaHQgOiB0aGlzLnBhcmVudC5nZXRIZWFkZXJzRWxlbWVudCgpLmNsaWVudEhlaWdodDtcblxuXHRcdHRoaXMuZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBwYXJlbnRIZWlnaHQgKyBcInB4XCI7XG5cblx0XHR0aGlzLmRpc3BhdGNoKFwiY29sdW1uLWhlaWdodFwiLCB0aGlzLCB0aGlzLmVsZW1lbnQuc3R5bGUuaGVpZ2h0KTtcblxuXHRcdGlmKHRoaXMuaXNHcm91cCl7XG5cdFx0XHR0aGlzLmdyb3VwRWxlbWVudC5zdHlsZS5taW5IZWlnaHQgPSAocGFyZW50SGVpZ2h0IC0gdGhpcy5jb250ZW50RWxlbWVudC5vZmZzZXRIZWlnaHQpICsgXCJweFwiO1xuXHRcdH1cblxuXHRcdC8vdmVydGljYWxseSBhbGlnbiBjZWxsIGNvbnRlbnRzXG5cdFx0Ly8gaWYoIXRoaXMuaXNHcm91cCAmJiBhbGlnbm1lbnQgIT09IFwidG9wXCIpe1xuXHRcdC8vIFx0aWYoYWxpZ25tZW50ID09PSBcImJvdHRvbVwiKXtcblx0XHQvLyBcdFx0dGhpcy5lbGVtZW50LnN0eWxlLnBhZGRpbmdUb3AgPSAodGhpcy5lbGVtZW50LmNsaWVudEhlaWdodCAtIHRoaXMuY29udGVudEVsZW1lbnQub2Zmc2V0SGVpZ2h0KSArIFwicHhcIjtcblx0XHQvLyBcdH1lbHNle1xuXHRcdC8vIFx0XHR0aGlzLmVsZW1lbnQuc3R5bGUucGFkZGluZ1RvcCA9ICgodGhpcy5lbGVtZW50LmNsaWVudEhlaWdodCAtIHRoaXMuY29udGVudEVsZW1lbnQub2Zmc2V0SGVpZ2h0KSAvIDIpICsgXCJweFwiO1xuXHRcdC8vIFx0fVxuXHRcdC8vIH1cblxuXHRcdHRoaXMuY29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uKGNvbHVtbil7XG5cdFx0XHRjb2x1bW4udmVydGljYWxBbGlnbihhbGlnbm1lbnQpO1xuXHRcdH0pO1xuXHR9XG5cblx0Ly9jbGVhciB2ZXJ0aWNhbCBhbGlnbm1lbnRcblx0Y2xlYXJWZXJ0aWNhbEFsaWduKCl7XG5cdFx0dGhpcy5lbGVtZW50LnN0eWxlLnBhZGRpbmdUb3AgPSBcIlwiO1xuXHRcdHRoaXMuZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBcIlwiO1xuXHRcdHRoaXMuZWxlbWVudC5zdHlsZS5taW5IZWlnaHQgPSBcIlwiO1xuXHRcdHRoaXMuZ3JvdXBFbGVtZW50LnN0eWxlLm1pbkhlaWdodCA9IFwiXCI7XG5cblx0XHR0aGlzLmNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihjb2x1bW4pe1xuXHRcdFx0Y29sdW1uLmNsZWFyVmVydGljYWxBbGlnbigpO1xuXHRcdH0pO1xuXG5cdFx0dGhpcy5kaXNwYXRjaChcImNvbHVtbi1oZWlnaHRcIiwgdGhpcywgXCJcIik7XG5cdH1cblxuXHQvLy8vIFJldHJpZXZlIENvbHVtbiBJbmZvcm1hdGlvbiAvLy8vXG5cdC8vcmV0dXJuIGNvbHVtbiBoZWFkZXIgZWxlbWVudFxuXHRnZXRFbGVtZW50KCl7XG5cdFx0cmV0dXJuIHRoaXMuZWxlbWVudDtcblx0fVxuXG5cdC8vcmV0dXJuIGNvbHVtbiBncm91cCBlbGVtZW50XG5cdGdldEdyb3VwRWxlbWVudCgpe1xuXHRcdHJldHVybiB0aGlzLmdyb3VwRWxlbWVudDtcblx0fVxuXG5cdC8vcmV0dXJuIGZpZWxkIG5hbWVcblx0Z2V0RmllbGQoKXtcblx0XHRyZXR1cm4gdGhpcy5maWVsZDtcblx0fVxuXG5cdGdldFRpdGxlRG93bmxvYWQoKSB7XG5cdFx0cmV0dXJuIHRoaXMudGl0bGVEb3dubG9hZDtcblx0fVxuXG5cdC8vcmV0dXJuIHRoZSBmaXJzdCBjb2x1bW4gaW4gYSBncm91cFxuXHRnZXRGaXJzdENvbHVtbigpe1xuXHRcdGlmKCF0aGlzLmlzR3JvdXApe1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYodGhpcy5jb2x1bW5zLmxlbmd0aCl7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbHVtbnNbMF0uZ2V0Rmlyc3RDb2x1bW4oKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vcmV0dXJuIHRoZSBsYXN0IGNvbHVtbiBpbiBhIGdyb3VwXG5cdGdldExhc3RDb2x1bW4oKXtcblx0XHRpZighdGhpcy5pc0dyb3VwKXtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1lbHNlIHtcblx0XHRcdGlmKHRoaXMuY29sdW1ucy5sZW5ndGgpe1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb2x1bW5zW3RoaXMuY29sdW1ucy5sZW5ndGggLTFdLmdldExhc3RDb2x1bW4oKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vcmV0dXJuIGFsbCBjb2x1bW5zIGluIGEgZ3JvdXBcblx0Z2V0Q29sdW1ucyh0cmF2ZXJzZSl7XG5cdFx0dmFyIGNvbHVtbnMgPSBbXTtcblxuXHRcdGlmKHRyYXZlcnNlKXtcblx0XHRcdHRoaXMuY29sdW1ucy5mb3JFYWNoKChjb2x1bW4pID0+IHtcblx0XHRcdFx0Y29sdW1ucy5wdXNoKGNvbHVtbik7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdGNvbHVtbnMgPSBjb2x1bW5zLmNvbmNhdChjb2x1bW4uZ2V0Q29sdW1ucyh0cnVlKSk7XG5cdFx0XHR9KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb2x1bW5zID0gdGhpcy5jb2x1bW5zO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gY29sdW1ucztcblx0fVxuXG5cdC8vcmV0dXJuIGFsbCBjb2x1bW5zIGluIGEgZ3JvdXBcblx0Z2V0Q2VsbHMoKXtcblx0XHRyZXR1cm4gdGhpcy5jZWxscztcblx0fVxuXG5cdC8vcmV0cmlldmUgdGhlIHRvcCBjb2x1bW4gaW4gYSBncm91cCBvZiBjb2x1bW5zXG5cdGdldFRvcENvbHVtbigpe1xuXHRcdGlmKHRoaXMucGFyZW50LmlzR3JvdXApe1xuXHRcdFx0cmV0dXJuIHRoaXMucGFyZW50LmdldFRvcENvbHVtbigpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0fVxuXG5cdC8vcmV0dXJuIGNvbHVtbiBkZWZpbml0aW9uIG9iamVjdFxuXHRnZXREZWZpbml0aW9uKHVwZGF0ZUJyYW5jaGVzKXtcblx0XHR2YXIgY29sRGVmcyA9IFtdO1xuXG5cdFx0aWYodGhpcy5pc0dyb3VwICYmIHVwZGF0ZUJyYW5jaGVzKXtcblx0XHRcdHRoaXMuY29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uKGNvbHVtbil7XG5cdFx0XHRcdGNvbERlZnMucHVzaChjb2x1bW4uZ2V0RGVmaW5pdGlvbih0cnVlKSk7XG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy5kZWZpbml0aW9uLmNvbHVtbnMgPSBjb2xEZWZzO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmRlZmluaXRpb247XG5cdH1cblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLyBBY3Rpb25zIC8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdGNoZWNrQ29sdW1uVmlzaWJpbGl0eSgpe1xuXHRcdHZhciB2aXNpYmxlID0gZmFsc2U7XG5cblx0XHR0aGlzLmNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihjb2x1bW4pe1xuXHRcdFx0aWYoY29sdW1uLnZpc2libGUpe1xuXHRcdFx0XHR2aXNpYmxlID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGlmKHZpc2libGUpe1xuXHRcdFx0dGhpcy5zaG93KCk7XG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJjb2x1bW5WaXNpYmlsaXR5Q2hhbmdlZFwiLCB0aGlzLmdldENvbXBvbmVudCgpLCBmYWxzZSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5oaWRlKCk7XG5cdFx0fVxuXHR9XG5cblx0Ly9zaG93IGNvbHVtblxuXHRzaG93KHNpbGVudCwgcmVzcG9uc2l2ZVRvZ2dsZSl7XG5cdFx0aWYoIXRoaXMudmlzaWJsZSl7XG5cdFx0XHR0aGlzLnZpc2libGUgPSB0cnVlO1xuXG5cdFx0XHR0aGlzLmVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cblx0XHRcdGlmKHRoaXMucGFyZW50LmlzR3JvdXApe1xuXHRcdFx0XHR0aGlzLnBhcmVudC5jaGVja0NvbHVtblZpc2liaWxpdHkoKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5jZWxscy5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwpe1xuXHRcdFx0XHRjZWxsLnNob3coKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRpZighdGhpcy5pc0dyb3VwICYmIHRoaXMud2lkdGggPT09IG51bGwpe1xuXHRcdFx0XHR0aGlzLnJlaW5pdGlhbGl6ZVdpZHRoKCk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci52ZXJ0aWNhbEFsaWduSGVhZGVycygpO1xuXG5cdFx0XHR0aGlzLmRpc3BhdGNoKFwiY29sdW1uLXNob3dcIiwgdGhpcywgcmVzcG9uc2l2ZVRvZ2dsZSk7XG5cblx0XHRcdGlmKCFzaWxlbnQpe1xuXHRcdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJjb2x1bW5WaXNpYmlsaXR5Q2hhbmdlZFwiLCB0aGlzLmdldENvbXBvbmVudCgpLCB0cnVlKTtcblx0XHRcdH1cblxuXHRcdFx0aWYodGhpcy5wYXJlbnQuaXNHcm91cCl7XG5cdFx0XHRcdHRoaXMucGFyZW50Lm1hdGNoQ2hpbGRXaWR0aHMoKTtcblx0XHRcdH1cblxuXHRcdFx0aWYoIXRoaXMuc2lsZW50KXtcblx0XHRcdFx0dGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLnJlcmVuZGVyQ29sdW1ucygpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vaGlkZSBjb2x1bW5cblx0aGlkZShzaWxlbnQsIHJlc3BvbnNpdmVUb2dnbGUpe1xuXHRcdGlmKHRoaXMudmlzaWJsZSl7XG5cdFx0XHR0aGlzLnZpc2libGUgPSBmYWxzZTtcblxuXHRcdFx0dGhpcy5lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcblxuXHRcdFx0dGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLnZlcnRpY2FsQWxpZ25IZWFkZXJzKCk7XG5cblx0XHRcdGlmKHRoaXMucGFyZW50LmlzR3JvdXApe1xuXHRcdFx0XHR0aGlzLnBhcmVudC5jaGVja0NvbHVtblZpc2liaWxpdHkoKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5jZWxscy5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwpe1xuXHRcdFx0XHRjZWxsLmhpZGUoKTtcblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLmRpc3BhdGNoKFwiY29sdW1uLWhpZGVcIiwgdGhpcywgcmVzcG9uc2l2ZVRvZ2dsZSk7XG5cblx0XHRcdGlmKCFzaWxlbnQpe1xuXHRcdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJjb2x1bW5WaXNpYmlsaXR5Q2hhbmdlZFwiLCB0aGlzLmdldENvbXBvbmVudCgpLCBmYWxzZSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmKHRoaXMucGFyZW50LmlzR3JvdXApe1xuXHRcdFx0XHR0aGlzLnBhcmVudC5tYXRjaENoaWxkV2lkdGhzKCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmKCF0aGlzLnNpbGVudCl7XG5cdFx0XHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5yZXJlbmRlckNvbHVtbnMoKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRtYXRjaENoaWxkV2lkdGhzKCl7XG5cdFx0dmFyIGNoaWxkV2lkdGggPSAwO1xuXG5cdFx0aWYodGhpcy5jb250ZW50RWxlbWVudCAmJiB0aGlzLmNvbHVtbnMubGVuZ3RoKXtcblx0XHRcdHRoaXMuY29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uKGNvbHVtbil7XG5cdFx0XHRcdGlmKGNvbHVtbi52aXNpYmxlKXtcblx0XHRcdFx0XHRjaGlsZFdpZHRoICs9IGNvbHVtbi5nZXRXaWR0aCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy5jb250ZW50RWxlbWVudC5zdHlsZS5tYXhXaWR0aCA9IChjaGlsZFdpZHRoIC0gMSkgKyBcInB4XCI7XG5cblx0XHRcdGlmKHRoaXMucGFyZW50LmlzR3JvdXApe1xuXHRcdFx0XHR0aGlzLnBhcmVudC5tYXRjaENoaWxkV2lkdGhzKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmVtb3ZlQ2hpbGQoY2hpbGQpe1xuXHRcdHZhciBpbmRleCA9IHRoaXMuY29sdW1ucy5pbmRleE9mKGNoaWxkKTtcblxuXHRcdGlmKGluZGV4ID4gLTEpe1xuXHRcdFx0dGhpcy5jb2x1bW5zLnNwbGljZShpbmRleCwgMSk7XG5cdFx0fVxuXG5cdFx0aWYoIXRoaXMuY29sdW1ucy5sZW5ndGgpe1xuXHRcdFx0dGhpcy5kZWxldGUoKTtcblx0XHR9XG5cdH1cblxuXHRzZXRXaWR0aCh3aWR0aCl7XG5cdFx0dGhpcy53aWR0aEZpeGVkID0gdHJ1ZTtcblx0XHR0aGlzLnNldFdpZHRoQWN0dWFsKHdpZHRoKTtcblx0fVxuXG5cdHNldFdpZHRoQWN0dWFsKHdpZHRoKXtcblx0XHRpZihpc05hTih3aWR0aCkpe1xuXHRcdFx0d2lkdGggPSBNYXRoLmZsb29yKCh0aGlzLnRhYmxlLmVsZW1lbnQuY2xpZW50V2lkdGgvMTAwKSAqIHBhcnNlSW50KHdpZHRoKSk7XG5cdFx0fVxuXG5cdFx0d2lkdGggPSBNYXRoLm1heCh0aGlzLm1pbldpZHRoLCB3aWR0aCk7XG5cblx0XHRpZih0aGlzLm1heFdpZHRoKXtcblx0XHRcdHdpZHRoID0gTWF0aC5taW4odGhpcy5tYXhXaWR0aCwgd2lkdGgpO1xuXHRcdH1cblxuXHRcdHRoaXMud2lkdGggPSB3aWR0aDtcblx0XHR0aGlzLndpZHRoU3R5bGVkID0gd2lkdGggPyB3aWR0aCArIFwicHhcIiA6IFwiXCI7XG5cblx0XHR0aGlzLmVsZW1lbnQuc3R5bGUud2lkdGggPSB0aGlzLndpZHRoU3R5bGVkO1xuXG5cdFx0aWYoIXRoaXMuaXNHcm91cCl7XG5cdFx0XHR0aGlzLmNlbGxzLmZvckVhY2goZnVuY3Rpb24oY2VsbCl7XG5cdFx0XHRcdGNlbGwuc2V0V2lkdGgoKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmKHRoaXMucGFyZW50LmlzR3JvdXApe1xuXHRcdFx0dGhpcy5wYXJlbnQubWF0Y2hDaGlsZFdpZHRocygpO1xuXHRcdH1cblxuXHRcdHRoaXMuZGlzcGF0Y2goXCJjb2x1bW4td2lkdGhcIiwgdGhpcyk7XG5cdH1cblxuXHRjaGVja0NlbGxIZWlnaHRzKCl7XG5cdFx0dmFyIHJvd3MgPSBbXTtcblxuXHRcdHRoaXMuY2VsbHMuZm9yRWFjaChmdW5jdGlvbihjZWxsKXtcblx0XHRcdGlmKGNlbGwucm93LmhlaWdodEluaXRpYWxpemVkKXtcblx0XHRcdFx0aWYoY2VsbC5yb3cuZ2V0RWxlbWVudCgpLm9mZnNldFBhcmVudCAhPT0gbnVsbCl7XG5cdFx0XHRcdFx0cm93cy5wdXNoKGNlbGwucm93KTtcblx0XHRcdFx0XHRjZWxsLnJvdy5jbGVhckNlbGxIZWlnaHQoKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGNlbGwucm93LmhlaWdodEluaXRpYWxpemVkID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3cpe1xuXHRcdFx0cm93LmNhbGNIZWlnaHQoKTtcblx0XHR9KTtcblxuXHRcdHJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3cpe1xuXHRcdFx0cm93LnNldENlbGxIZWlnaHQoKTtcblx0XHR9KTtcblx0fVxuXG5cdGdldFdpZHRoKCl7XG5cdFx0dmFyIHdpZHRoID0gMDtcblxuXHRcdGlmKHRoaXMuaXNHcm91cCl7XG5cdFx0XHR0aGlzLmNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihjb2x1bW4pe1xuXHRcdFx0XHRpZihjb2x1bW4udmlzaWJsZSl7XG5cdFx0XHRcdFx0d2lkdGggKz0gY29sdW1uLmdldFdpZHRoKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1lbHNlIHtcblx0XHRcdHdpZHRoID0gdGhpcy53aWR0aDtcblx0XHR9XG5cblx0XHRyZXR1cm4gd2lkdGg7XG5cdH1cblxuXHRnZXRMZWZ0T2Zmc2V0KCl7XG5cdFx0dmFyIG9mZnNldCA9IHRoaXMuZWxlbWVudC5vZmZzZXRMZWZ0O1xuXG5cdFx0aWYodGhpcy5wYXJlbnQuaXNHcm91cCl7XG5cdFx0XHRvZmZzZXQgKz0gdGhpcy5wYXJlbnQuZ2V0TGVmdE9mZnNldCgpO1xuXHRcdH1cblxuXHRcdHJldHVybiBvZmZzZXQ7XG5cdH1cblxuXHRnZXRIZWlnaHQoKXtcblx0XHRyZXR1cm4gTWF0aC5jZWlsKHRoaXMuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQpO1xuXHR9XG5cblx0c2V0TWluV2lkdGgobWluV2lkdGgpe1xuXHRcdGlmKHRoaXMubWF4V2lkdGggJiYgbWluV2lkdGggPiB0aGlzLm1heFdpZHRoKXtcblx0XHRcdG1pbldpZHRoID0gdGhpcy5tYXhXaWR0aDtcblxuXHRcdFx0Y29uc29sZS53YXJuKFwidGhlIG1pbldpZHRoIChcIisgbWluV2lkdGggKyBcInB4KSBmb3IgY29sdW1uICdcIiArIHRoaXMuZmllbGQgKyBcIicgY2Fubm90IGJlIGJpZ2dlciB0aGF0IGl0cyBtYXhXaWR0aCAoXCIrIHRoaXMubWF4V2lkdGhTdHlsZWQgKyBcIilcIik7XG5cdFx0fVxuXG5cdFx0dGhpcy5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdHRoaXMubWluV2lkdGhTdHlsZWQgPSBtaW5XaWR0aCA/IG1pbldpZHRoICsgXCJweFwiIDogXCJcIjtcblxuXHRcdHRoaXMuZWxlbWVudC5zdHlsZS5taW5XaWR0aCA9IHRoaXMubWluV2lkdGhTdHlsZWQ7XG5cblx0XHR0aGlzLmNlbGxzLmZvckVhY2goZnVuY3Rpb24oY2VsbCl7XG5cdFx0XHRjZWxsLnNldE1pbldpZHRoKCk7XG5cdFx0fSk7XG5cdH1cblxuXHRzZXRNYXhXaWR0aChtYXhXaWR0aCl7XG5cdFx0aWYodGhpcy5taW5XaWR0aCAmJiBtYXhXaWR0aCA8IHRoaXMubWluV2lkdGgpe1xuXHRcdFx0bWF4V2lkdGggPSB0aGlzLm1pbldpZHRoO1xuXG5cdFx0XHRjb25zb2xlLndhcm4oXCJ0aGUgbWF4V2lkdGggKFwiKyBtYXhXaWR0aCArIFwicHgpIGZvciBjb2x1bW4gJ1wiICsgdGhpcy5maWVsZCArIFwiJyBjYW5ub3QgYmUgc21hbGxlciB0aGF0IGl0cyBtaW5XaWR0aCAoXCIrIHRoaXMubWluV2lkdGhTdHlsZWQgKyBcIilcIik7XG5cdFx0fVxuXG5cdFx0dGhpcy5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdHRoaXMubWF4V2lkdGhTdHlsZWQgPSBtYXhXaWR0aCA/IG1heFdpZHRoICsgXCJweFwiIDogXCJcIjtcblxuXHRcdHRoaXMuZWxlbWVudC5zdHlsZS5tYXhXaWR0aCA9IHRoaXMubWF4V2lkdGhTdHlsZWQ7XG5cblx0XHR0aGlzLmNlbGxzLmZvckVhY2goZnVuY3Rpb24oY2VsbCl7XG5cdFx0XHRjZWxsLnNldE1heFdpZHRoKCk7XG5cdFx0fSk7XG5cdH1cblxuXHRkZWxldGUoKXtcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0aWYodGhpcy5pc0dyb3VwKXtcblx0XHRcdFx0dGhpcy5jb2x1bW5zLmZvckVhY2goZnVuY3Rpb24oY29sdW1uKXtcblx0XHRcdFx0XHRjb2x1bW4uZGVsZXRlKCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmRpc3BhdGNoKFwiY29sdW1uLWRlbGV0ZVwiLCB0aGlzKTtcblxuXHRcdFx0dmFyIGNlbGxDb3VudCA9IHRoaXMuY2VsbHMubGVuZ3RoO1xuXG5cdFx0XHRmb3IobGV0IGkgPSAwOyBpIDwgY2VsbENvdW50OyBpKyspe1xuXHRcdFx0XHR0aGlzLmNlbGxzWzBdLmRlbGV0ZSgpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZih0aGlzLmVsZW1lbnQucGFyZW50Tm9kZSl7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuZWxlbWVudCA9IGZhbHNlO1xuXHRcdFx0dGhpcy5jb250ZW50RWxlbWVudCA9IGZhbHNlO1xuXHRcdFx0dGhpcy50aXRsZUVsZW1lbnQgPSBmYWxzZTtcblx0XHRcdHRoaXMuZ3JvdXBFbGVtZW50ID0gZmFsc2U7XG5cblx0XHRcdGlmKHRoaXMucGFyZW50LmlzR3JvdXApe1xuXHRcdFx0XHR0aGlzLnBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmRlcmVnaXN0ZXJDb2x1bW4odGhpcyk7XG5cblx0XHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5yZXJlbmRlckNvbHVtbnModHJ1ZSk7XG5cblx0XHRcdHJlc29sdmUoKTtcblx0XHR9KTtcblx0fVxuXG5cdGNvbHVtblJlbmRlcmVkKCl7XG5cdFx0aWYodGhpcy50aXRsZUZvcm1hdHRlclJlbmRlcmVkKXtcblx0XHRcdHRoaXMudGl0bGVGb3JtYXR0ZXJSZW5kZXJlZCgpO1xuXHRcdH1cblxuXHRcdHRoaXMuZGlzcGF0Y2goXCJjb2x1bW4tcmVuZGVyZWRcIiwgdGhpcyk7XG5cdH1cblxuXHQvLy8vLy8vLy8vLy8vLy8vIENlbGwgTWFuYWdlbWVudCAvLy8vLy8vLy8vLy8vLy8vL1xuXHQvL2dlbmVyYXRlIGNlbGwgZm9yIHRoaXMgY29sdW1uXG5cdGdlbmVyYXRlQ2VsbChyb3cpe1xuXHRcdHZhciBjZWxsID0gbmV3IENlbGwodGhpcywgcm93KTtcblxuXHRcdHRoaXMuY2VsbHMucHVzaChjZWxsKTtcblxuXHRcdHJldHVybiBjZWxsO1xuXHR9XG5cblx0bmV4dENvbHVtbigpe1xuXHRcdHZhciBpbmRleCA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5maW5kQ29sdW1uSW5kZXgodGhpcyk7XG5cdFx0cmV0dXJuIGluZGV4ID4gLTEgPyB0aGlzLl9uZXh0VmlzaWJsZUNvbHVtbihpbmRleCArIDEpIDogZmFsc2U7XG5cdH1cblxuXHRfbmV4dFZpc2libGVDb2x1bW4oaW5kZXgpe1xuXHRcdHZhciBjb2x1bW4gPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0Q29sdW1uQnlJbmRleChpbmRleCk7XG5cdFx0cmV0dXJuICFjb2x1bW4gfHwgY29sdW1uLnZpc2libGUgPyBjb2x1bW4gOiB0aGlzLl9uZXh0VmlzaWJsZUNvbHVtbihpbmRleCArIDEpO1xuXHR9XG5cblx0cHJldkNvbHVtbigpe1xuXHRcdHZhciBpbmRleCA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5maW5kQ29sdW1uSW5kZXgodGhpcyk7XG5cdFx0cmV0dXJuIGluZGV4ID4gLTEgPyB0aGlzLl9wcmV2VmlzaWJsZUNvbHVtbihpbmRleCAtIDEpIDogZmFsc2U7XG5cdH1cblxuXHRfcHJldlZpc2libGVDb2x1bW4oaW5kZXgpe1xuXHRcdHZhciBjb2x1bW4gPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0Q29sdW1uQnlJbmRleChpbmRleCk7XG5cdFx0cmV0dXJuICFjb2x1bW4gfHwgY29sdW1uLnZpc2libGUgPyBjb2x1bW4gOiB0aGlzLl9wcmV2VmlzaWJsZUNvbHVtbihpbmRleCAtIDEpO1xuXHR9XG5cblx0cmVpbml0aWFsaXplV2lkdGgoZm9yY2Upe1xuXHRcdHRoaXMud2lkdGhGaXhlZCA9IGZhbHNlO1xuXG5cdFx0Ly9zZXQgd2lkdGggaWYgcHJlc2VudFxuXHRcdGlmKHR5cGVvZiB0aGlzLmRlZmluaXRpb24ud2lkdGggIT09IFwidW5kZWZpbmVkXCIgJiYgIWZvcmNlKXtcblx0XHRcdC8vIG1heEluaXRpYWxXaWR0aCBpZ25vcmVkIGhlcmUgYXMgd2lkdGggc3BlY2lmaWVkXG5cdFx0XHR0aGlzLnNldFdpZHRoKHRoaXMuZGVmaW5pdGlvbi53aWR0aCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5kaXNwYXRjaChcImNvbHVtbi13aWR0aC1maXQtYmVmb3JlXCIsIHRoaXMpO1xuXG5cdFx0dGhpcy5maXRUb0RhdGEoZm9yY2UpO1xuXG5cdFx0dGhpcy5kaXNwYXRjaChcImNvbHVtbi13aWR0aC1maXQtYWZ0ZXJcIiwgdGhpcyk7XG5cdH1cblxuXHQvL3NldCBjb2x1bW4gd2lkdGggdG8gbWF4aW11bSBjZWxsIHdpZHRoIGZvciBub24gZ3JvdXAgY29sdW1uc1xuXHRmaXRUb0RhdGEoZm9yY2Upe1xuXHRcdGlmKHRoaXMuaXNHcm91cCl7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYoIXRoaXMud2lkdGhGaXhlZCl7XG5cdFx0XHR0aGlzLmVsZW1lbnQuc3R5bGUud2lkdGggPSBcIlwiO1xuXG5cdFx0XHR0aGlzLmNlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcblx0XHRcdFx0Y2VsbC5jbGVhcldpZHRoKCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHR2YXIgbWF4V2lkdGggPSB0aGlzLmVsZW1lbnQub2Zmc2V0V2lkdGg7XG5cblx0XHRpZighdGhpcy53aWR0aCB8fCAhdGhpcy53aWR0aEZpeGVkKXtcblx0XHRcdHRoaXMuY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuXHRcdFx0XHR2YXIgd2lkdGggPSBjZWxsLmdldFdpZHRoKCk7XG5cblx0XHRcdFx0aWYod2lkdGggPiBtYXhXaWR0aCl7XG5cdFx0XHRcdFx0bWF4V2lkdGggPSB3aWR0aDtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdGlmKG1heFdpZHRoKXtcblx0XHRcdFx0dmFyIHNldFRvID0gbWF4V2lkdGggKyAxO1xuXHRcdFx0XHRpZiAodGhpcy5tYXhJbml0aWFsV2lkdGggJiYgIWZvcmNlKSB7XG5cdFx0XHRcdFx0c2V0VG8gPSBNYXRoLm1pbihzZXRUbywgdGhpcy5tYXhJbml0aWFsV2lkdGgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuc2V0V2lkdGhBY3R1YWwoc2V0VG8pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHVwZGF0ZURlZmluaXRpb24odXBkYXRlcyl7XG5cdFx0dmFyIGRlZmluaXRpb247XG5cblx0XHRpZighdGhpcy5pc0dyb3VwKXtcblx0XHRcdGlmKCF0aGlzLnBhcmVudC5pc0dyb3VwKXtcblx0XHRcdFx0ZGVmaW5pdGlvbiA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuZ2V0RGVmaW5pdGlvbigpKTtcblx0XHRcdFx0ZGVmaW5pdGlvbiA9IE9iamVjdC5hc3NpZ24oZGVmaW5pdGlvbiwgdXBkYXRlcyk7XG5cblx0XHRcdFx0cmV0dXJuIHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5hZGRDb2x1bW4oZGVmaW5pdGlvbiwgZmFsc2UsIHRoaXMpXG5cdFx0XHRcdFx0LnRoZW4oKGNvbHVtbikgPT4ge1xuXG5cdFx0XHRcdFx0XHRpZihkZWZpbml0aW9uLmZpZWxkID09IHRoaXMuZmllbGQpe1xuXHRcdFx0XHRcdFx0XHR0aGlzLmZpZWxkID0gZmFsc2U7IC8vY2xlYXIgZmllbGQgbmFtZSB0byBwcmV2ZW50IGRlbGV0aW9uIG9mIGR1cGxpY2F0ZSBjb2x1bW4gZnJvbSBhcnJheXNcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuZGVsZXRlKClcblx0XHRcdFx0XHRcdFx0LnRoZW4oKCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBjb2x1bW4uZ2V0Q29tcG9uZW50KCk7XG5cdFx0XHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJDb2x1bW4gVXBkYXRlIEVycm9yIC0gVGhlIHVwZGF0ZURlZmluaXRpb24gZnVuY3Rpb24gaXMgb25seSBhdmFpbGFibGUgb24gdW5ncm91cGVkIGNvbHVtbnNcIik7XG5cdFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChcIkNvbHVtbiBVcGRhdGUgRXJyb3IgLSBUaGUgdXBkYXRlRGVmaW5pdGlvbiBmdW5jdGlvbiBpcyBvbmx5IGF2YWlsYWJsZSBvbiBjb2x1bW5zLCBub3QgY29sdW1uIGdyb3Vwc1wiKTtcblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKFwiQ29sdW1uIFVwZGF0ZSBFcnJvciAtIFRoZSB1cGRhdGVEZWZpbml0aW9uIGZ1bmN0aW9uIGlzIG9ubHkgYXZhaWxhYmxlIG9uIHVuZ3JvdXBlZCBjb2x1bW5zXCIpO1xuXHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KFwiQ29sdW1uIFVwZGF0ZSBFcnJvciAtIFRoZSB1cGRhdGVEZWZpbml0aW9uIGZ1bmN0aW9uIGlzIG9ubHkgYXZhaWxhYmxlIG9uIGNvbHVtbnMsIG5vdCBjb2x1bW4gZ3JvdXBzXCIpO1xuXHRcdH1cblx0fVxuXG5cdGRlbGV0ZUNlbGwoY2VsbCl7XG5cdFx0dmFyIGluZGV4ID0gdGhpcy5jZWxscy5pbmRleE9mKGNlbGwpO1xuXG5cdFx0aWYoaW5kZXggPiAtMSl7XG5cdFx0XHR0aGlzLmNlbGxzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0fVxuXHR9XG5cblx0Ly8vLy8vLy8vLy8vLy8vLyBPYmplY3QgR2VuZXJhdGlvbiAvLy8vLy8vLy8vLy8vLy8vL1xuXHRnZXRDb21wb25lbnQoKXtcblx0XHRpZighdGhpcy5jb21wb25lbnQpe1xuXHRcdFx0dGhpcy5jb21wb25lbnQgPSBuZXcgQ29sdW1uQ29tcG9uZW50KHRoaXMpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmNvbXBvbmVudDtcblx0fVxufVxuXG5Db2x1bW4uZGVmYXVsdE9wdGlvbkxpc3QgPSBkZWZhdWx0Q29sdW1uT3B0aW9ucztcblxuLy9wdWJsaWMgcm93IG9iamVjdFxuY2xhc3MgUm93Q29tcG9uZW50IHtcblxuXHRjb25zdHJ1Y3RvciAocm93KXtcblx0XHR0aGlzLl9yb3cgPSByb3c7XG5cblx0XHRyZXR1cm4gbmV3IFByb3h5KHRoaXMsIHtcblx0XHRcdGdldDogZnVuY3Rpb24odGFyZ2V0LCBuYW1lLCByZWNlaXZlcikge1xuXHRcdFx0XHRpZiAodHlwZW9mIHRhcmdldFtuYW1lXSAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0XHRcdHJldHVybiB0YXJnZXRbbmFtZV07XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRyZXR1cm4gdGFyZ2V0Ll9yb3cudGFibGUuY29tcG9uZW50RnVuY3Rpb25CaW5kZXIuaGFuZGxlKFwicm93XCIsIHRhcmdldC5fcm93LCBuYW1lKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0Z2V0RGF0YSh0cmFuc2Zvcm0pe1xuXHRcdHJldHVybiB0aGlzLl9yb3cuZ2V0RGF0YSh0cmFuc2Zvcm0pO1xuXHR9XG5cblx0Z2V0RWxlbWVudCgpe1xuXHRcdHJldHVybiB0aGlzLl9yb3cuZ2V0RWxlbWVudCgpO1xuXHR9XG5cblx0Z2V0Q2VsbHMoKXtcblx0XHR2YXIgY2VsbHMgPSBbXTtcblxuXHRcdHRoaXMuX3Jvdy5nZXRDZWxscygpLmZvckVhY2goZnVuY3Rpb24oY2VsbCl7XG5cdFx0XHRjZWxscy5wdXNoKGNlbGwuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIGNlbGxzO1xuXHR9XG5cblx0Z2V0Q2VsbChjb2x1bW4pe1xuXHRcdHZhciBjZWxsID0gdGhpcy5fcm93LmdldENlbGwoY29sdW1uKTtcblx0XHRyZXR1cm4gY2VsbCA/IGNlbGwuZ2V0Q29tcG9uZW50KCkgOiBmYWxzZTtcblx0fVxuXG5cdGdldEluZGV4KCl7XG5cdFx0cmV0dXJuIHRoaXMuX3Jvdy5nZXREYXRhKFwiZGF0YVwiKVt0aGlzLl9yb3cudGFibGUub3B0aW9ucy5pbmRleF07XG5cdH1cblxuXHRnZXRQb3NpdGlvbigpe1xuXHRcdHJldHVybiB0aGlzLl9yb3cuZ2V0UG9zaXRpb24oKTtcblx0fVxuXG5cdHdhdGNoUG9zaXRpb24oY2FsbGJhY2spe1xuXHRcdHJldHVybiB0aGlzLl9yb3cud2F0Y2hQb3NpdGlvbihjYWxsYmFjayk7XG5cdH1cblxuXHRkZWxldGUoKXtcblx0XHRyZXR1cm4gdGhpcy5fcm93LmRlbGV0ZSgpO1xuXHR9XG5cblx0c2Nyb2xsVG8ocG9zaXRpb24sIGlmVmlzaWJsZSl7XG5cdFx0cmV0dXJuIHRoaXMuX3Jvdy50YWJsZS5yb3dNYW5hZ2VyLnNjcm9sbFRvUm93KHRoaXMuX3JvdywgcG9zaXRpb24sIGlmVmlzaWJsZSk7XG5cdH1cblxuXHRtb3ZlKHRvLCBhZnRlcil7XG5cdFx0dGhpcy5fcm93Lm1vdmVUb1Jvdyh0bywgYWZ0ZXIpO1xuXHR9XG5cblx0dXBkYXRlKGRhdGEpe1xuXHRcdHJldHVybiB0aGlzLl9yb3cudXBkYXRlRGF0YShkYXRhKTtcblx0fVxuXG5cdG5vcm1hbGl6ZUhlaWdodCgpe1xuXHRcdHRoaXMuX3Jvdy5ub3JtYWxpemVIZWlnaHQodHJ1ZSk7XG5cdH1cblxuXHRfZ2V0U2VsZigpe1xuXHRcdHJldHVybiB0aGlzLl9yb3c7XG5cdH1cblxuXHRyZWZvcm1hdCgpe1xuXHRcdHJldHVybiB0aGlzLl9yb3cucmVpbml0aWFsaXplKCk7XG5cdH1cblxuXHRnZXRUYWJsZSgpe1xuXHRcdHJldHVybiB0aGlzLl9yb3cudGFibGU7XG5cdH1cblxuXHRnZXROZXh0Um93KCl7XG5cdFx0dmFyIHJvdyA9IHRoaXMuX3Jvdy5uZXh0Um93KCk7XG5cdFx0cmV0dXJuIHJvdyA/IHJvdy5nZXRDb21wb25lbnQoKSA6IHJvdztcblx0fVxuXG5cdGdldFByZXZSb3coKXtcblx0XHR2YXIgcm93ID0gdGhpcy5fcm93LnByZXZSb3coKTtcblx0XHRyZXR1cm4gcm93ID8gcm93LmdldENvbXBvbmVudCgpIDogcm93O1xuXHR9XG59XG5cbmNsYXNzIFJvdyBleHRlbmRzIENvcmVGZWF0dXJle1xuXHRjb25zdHJ1Y3RvciAoZGF0YSwgcGFyZW50LCB0eXBlID0gXCJyb3dcIil7XG5cdFx0c3VwZXIocGFyZW50LnRhYmxlKTtcblx0XHRcblx0XHR0aGlzLnBhcmVudCA9IHBhcmVudDtcblx0XHR0aGlzLmRhdGEgPSB7fTtcblx0XHR0aGlzLnR5cGUgPSB0eXBlOyAvL3R5cGUgb2YgZWxlbWVudFxuXHRcdHRoaXMuZWxlbWVudCA9IGZhbHNlO1xuXHRcdHRoaXMubW9kdWxlcyA9IHt9OyAvL2hvbGQgbW9kdWxlIHZhcmlhYmxlcztcblx0XHR0aGlzLmNlbGxzID0gW107XG5cdFx0dGhpcy5oZWlnaHQgPSAwOyAvL2hvbGQgZWxlbWVudCBoZWlnaHRcblx0XHR0aGlzLmhlaWdodFN0eWxlZCA9IFwiXCI7IC8vaG9sZCBlbGVtZW50IGhlaWdodCBwcmUtc3R5bGVkIHRvIGltcHJvdmUgcmVuZGVyIGVmZmljaWVuY3lcblx0XHR0aGlzLm1hbnVhbEhlaWdodCA9IGZhbHNlOyAvL3VzZXIgaGFzIG1hbnVhbGx5IHNldCByb3cgaGVpZ2h0XG5cdFx0dGhpcy5vdXRlckhlaWdodCA9IDA7IC8vaG9sZCBlbGVtZW50cyBvdXRlciBoZWlnaHRcblx0XHR0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7IC8vZWxlbWVudCBoYXMgYmVlbiByZW5kZXJlZFxuXHRcdHRoaXMuaGVpZ2h0SW5pdGlhbGl6ZWQgPSBmYWxzZTsgLy9lbGVtZW50IGhhcyByZXNpemVkIGNlbGxzIHRvIGZpdFxuXHRcdHRoaXMucG9zaXRpb24gPSAwOyAvL3N0b3JlIHBvc2l0aW9uIG9mIGVsZW1lbnQgaW4gcm93IGxpc3Rcblx0XHR0aGlzLnBvc2l0aW9uV2F0Y2hlcnMgPSBbXTtcblx0XHRcblx0XHR0aGlzLmNvbXBvbmVudCA9IG51bGw7XG5cdFx0XG5cdFx0dGhpcy5jcmVhdGVkID0gZmFsc2U7XG5cdFx0XG5cdFx0dGhpcy5zZXREYXRhKGRhdGEpO1xuXHR9XG5cdFxuXHRjcmVhdGUoKXtcblx0XHRpZighdGhpcy5jcmVhdGVkKXtcblx0XHRcdHRoaXMuY3JlYXRlZCA9IHRydWU7XG5cdFx0XHR0aGlzLmdlbmVyYXRlRWxlbWVudCgpO1xuXHRcdH1cblx0fVxuXHRcblx0Y3JlYXRlRWxlbWVudCAoKXtcblx0XHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdFxuXHRcdGVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3Itcm93XCIpO1xuXHRcdGVsLnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJyb3dcIik7XG5cdFx0XG5cdFx0dGhpcy5lbGVtZW50ID0gZWw7XG5cdH1cblx0XG5cdGdldEVsZW1lbnQoKXtcblx0XHR0aGlzLmNyZWF0ZSgpO1xuXHRcdHJldHVybiB0aGlzLmVsZW1lbnQ7XG5cdH1cblx0XG5cdGRldGFjaEVsZW1lbnQoKXtcblx0XHRpZiAodGhpcy5lbGVtZW50ICYmIHRoaXMuZWxlbWVudC5wYXJlbnROb2RlKXtcblx0XHRcdHRoaXMuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRnZW5lcmF0ZUVsZW1lbnQoKXtcblx0XHR0aGlzLmNyZWF0ZUVsZW1lbnQoKTtcblx0XHR0aGlzLmRpc3BhdGNoKFwicm93LWluaXRcIiwgdGhpcyk7XG5cdH1cblx0XG5cdGdlbmVyYXRlQ2VsbHMoKXtcblx0XHR0aGlzLmNlbGxzID0gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmdlbmVyYXRlQ2VsbHModGhpcyk7XG5cdH1cblx0XG5cdC8vZnVuY3Rpb25zIHRvIHNldHVwIG9uIGZpcnN0IHJlbmRlclxuXHRpbml0aWFsaXplKGZvcmNlLCBpbkZyYWdtZW50KXtcblx0XHR0aGlzLmNyZWF0ZSgpO1xuXHRcdFxuXHRcdGlmKCF0aGlzLmluaXRpYWxpemVkIHx8IGZvcmNlKXtcblx0XHRcdFxuXHRcdFx0dGhpcy5kZWxldGVDZWxscygpO1xuXHRcdFx0XG5cdFx0XHR3aGlsZSh0aGlzLmVsZW1lbnQuZmlyc3RDaGlsZCkgdGhpcy5lbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudC5maXJzdENoaWxkKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5kaXNwYXRjaChcInJvdy1sYXlvdXQtYmVmb3JlXCIsIHRoaXMpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmdlbmVyYXRlQ2VsbHMoKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG5cdFx0XHRcblx0XHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5yZW5kZXJlci5yZW5kZXJSb3dDZWxscyh0aGlzLCBpbkZyYWdtZW50KTtcblx0XHRcdFxuXHRcdFx0aWYoZm9yY2Upe1xuXHRcdFx0XHR0aGlzLm5vcm1hbGl6ZUhlaWdodCgpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLmRpc3BhdGNoKFwicm93LWxheW91dFwiLCB0aGlzKTtcblx0XHRcdFxuXHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnJvd0Zvcm1hdHRlcil7XG5cdFx0XHRcdHRoaXMudGFibGUub3B0aW9ucy5yb3dGb3JtYXR0ZXIodGhpcy5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHRoaXMuZGlzcGF0Y2goXCJyb3ctbGF5b3V0LWFmdGVyXCIsIHRoaXMpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5yZW5kZXJlci5yZXJlbmRlclJvd0NlbGxzKHRoaXMsIGluRnJhZ21lbnQpO1xuXHRcdH1cblx0fVxuXG5cdHJlbmRlcmVkKCl7XG5cdFx0dGhpcy5jZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG5cdFx0XHRjZWxsLmNlbGxSZW5kZXJlZCgpO1xuXHRcdH0pO1xuXHR9XG5cdFxuXHRyZWluaXRpYWxpemVIZWlnaHQoKXtcblx0XHR0aGlzLmhlaWdodEluaXRpYWxpemVkID0gZmFsc2U7XG5cdFx0XG5cdFx0aWYodGhpcy5lbGVtZW50ICYmIHRoaXMuZWxlbWVudC5vZmZzZXRQYXJlbnQgIT09IG51bGwpe1xuXHRcdFx0dGhpcy5ub3JtYWxpemVIZWlnaHQodHJ1ZSk7XG5cdFx0fVxuXHR9XG5cblx0ZGVpbml0aWFsaXplKCl7XG5cdFx0dGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuXHR9XG5cdFxuXHRkZWluaXRpYWxpemVIZWlnaHQoKXtcblx0XHR0aGlzLmhlaWdodEluaXRpYWxpemVkID0gZmFsc2U7XG5cdH1cblx0XG5cdHJlaW5pdGlhbGl6ZShjaGlsZHJlbil7XG5cdFx0dGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuXHRcdHRoaXMuaGVpZ2h0SW5pdGlhbGl6ZWQgPSBmYWxzZTtcblx0XHRcblx0XHRpZighdGhpcy5tYW51YWxIZWlnaHQpe1xuXHRcdFx0dGhpcy5oZWlnaHQgPSAwO1xuXHRcdFx0dGhpcy5oZWlnaHRTdHlsZWQgPSBcIlwiO1xuXHRcdH1cblx0XHRcblx0XHRpZih0aGlzLmVsZW1lbnQgJiYgdGhpcy5lbGVtZW50Lm9mZnNldFBhcmVudCAhPT0gbnVsbCl7XG5cdFx0XHR0aGlzLmluaXRpYWxpemUodHJ1ZSk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuZGlzcGF0Y2goXCJyb3ctcmVsYXlvdXRcIiwgdGhpcyk7XG5cdH1cblx0XG5cdC8vZ2V0IGhlaWdodHMgd2hlbiBkb2luZyBidWxrIHJvdyBzdHlsZSBjYWxjcyBpbiB2aXJ0dWFsIERPTVxuXHRjYWxjSGVpZ2h0KGZvcmNlKXtcblx0XHR2YXIgbWF4SGVpZ2h0ID0gMCxcblx0XHRtaW5IZWlnaHQ7XG5cdFx0XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnJvd0hlaWdodCl7XG5cdFx0XHR0aGlzLmhlaWdodCA9IHRoaXMudGFibGUub3B0aW9ucy5yb3dIZWlnaHQ7XG5cdFx0fWVsc2Uge1xuXHRcdFx0bWluSGVpZ2h0ID0gdGhpcy50YWJsZS5vcHRpb25zLnJlc2l6YWJsZVJvd3MgPyB0aGlzLmVsZW1lbnQuY2xpZW50SGVpZ2h0IDogMDtcblx0XHRcdFxuXHRcdFx0dGhpcy5jZWxscy5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwpe1xuXHRcdFx0XHR2YXIgaGVpZ2h0ID0gY2VsbC5nZXRIZWlnaHQoKTtcblx0XHRcdFx0aWYoaGVpZ2h0ID4gbWF4SGVpZ2h0KXtcblx0XHRcdFx0XHRtYXhIZWlnaHQgPSBoZWlnaHQ7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHRpZihmb3JjZSl7XG5cdFx0XHRcdHRoaXMuaGVpZ2h0ID0gTWF0aC5tYXgobWF4SGVpZ2h0LCBtaW5IZWlnaHQpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmhlaWdodCA9IHRoaXMubWFudWFsSGVpZ2h0ID8gdGhpcy5oZWlnaHQgOiBNYXRoLm1heChtYXhIZWlnaHQsIG1pbkhlaWdodCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuaGVpZ2h0U3R5bGVkID0gdGhpcy5oZWlnaHQgPyB0aGlzLmhlaWdodCArIFwicHhcIiA6IFwiXCI7XG5cdFx0dGhpcy5vdXRlckhlaWdodCA9IHRoaXMuZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG5cdH1cblx0XG5cdC8vc2V0IG9mIGNlbGxzXG5cdHNldENlbGxIZWlnaHQoKXtcblx0XHR0aGlzLmNlbGxzLmZvckVhY2goZnVuY3Rpb24oY2VsbCl7XG5cdFx0XHRjZWxsLnNldEhlaWdodCgpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHRoaXMuaGVpZ2h0SW5pdGlhbGl6ZWQgPSB0cnVlO1xuXHR9XG5cdFxuXHRjbGVhckNlbGxIZWlnaHQoKXtcblx0XHR0aGlzLmNlbGxzLmZvckVhY2goZnVuY3Rpb24oY2VsbCl7XG5cdFx0XHRjZWxsLmNsZWFySGVpZ2h0KCk7XG5cdFx0fSk7XG5cdH1cblx0XG5cdC8vbm9ybWFsaXplIHRoZSBoZWlnaHQgb2YgZWxlbWVudHMgaW4gdGhlIHJvd1xuXHRub3JtYWxpemVIZWlnaHQoZm9yY2Upe1xuXHRcdGlmKGZvcmNlICYmICF0aGlzLnRhYmxlLm9wdGlvbnMucm93SGVpZ2h0KXtcblx0XHRcdHRoaXMuY2xlYXJDZWxsSGVpZ2h0KCk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuY2FsY0hlaWdodChmb3JjZSk7XG5cdFx0XG5cdFx0dGhpcy5zZXRDZWxsSGVpZ2h0KCk7XG5cdH1cblx0XG5cdC8vc2V0IGhlaWdodCBvZiByb3dzXG5cdHNldEhlaWdodChoZWlnaHQsIGZvcmNlKXtcblx0XHRpZih0aGlzLmhlaWdodCAhPSBoZWlnaHQgfHwgZm9yY2Upe1xuXHRcdFx0XG5cdFx0XHR0aGlzLm1hbnVhbEhlaWdodCA9IHRydWU7XG5cdFx0XHRcblx0XHRcdHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXHRcdFx0dGhpcy5oZWlnaHRTdHlsZWQgPSBoZWlnaHQgPyBoZWlnaHQgKyBcInB4XCIgOiBcIlwiO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnNldENlbGxIZWlnaHQoKTtcblx0XHRcdFxuXHRcdFx0Ly8gdGhpcy5vdXRlckhlaWdodCA9IHRoaXMuZWxlbWVudC5vdXRlckhlaWdodCgpO1xuXHRcdFx0dGhpcy5vdXRlckhlaWdodCA9IHRoaXMuZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL3JldHVybiByb3dzIG91dGVyIGhlaWdodFxuXHRnZXRIZWlnaHQoKXtcblx0XHRyZXR1cm4gdGhpcy5vdXRlckhlaWdodDtcblx0fVxuXHRcblx0Ly9yZXR1cm4gcm93cyBvdXRlciBXaWR0aFxuXHRnZXRXaWR0aCgpe1xuXHRcdHJldHVybiB0aGlzLmVsZW1lbnQub2Zmc2V0V2lkdGg7XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8gQ2VsbCBNYW5hZ2VtZW50IC8vLy8vLy8vLy8vLy8vLy8vXG5cdGRlbGV0ZUNlbGwoY2VsbCl7XG5cdFx0dmFyIGluZGV4ID0gdGhpcy5jZWxscy5pbmRleE9mKGNlbGwpO1xuXHRcdFxuXHRcdGlmKGluZGV4ID4gLTEpe1xuXHRcdFx0dGhpcy5jZWxscy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdH1cblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLyBEYXRhIE1hbmFnZW1lbnQgLy8vLy8vLy8vLy8vLy8vLy9cblx0c2V0RGF0YShkYXRhKXtcblx0XHR0aGlzLmRhdGEgPSB0aGlzLmNoYWluKFwicm93LWRhdGEtaW5pdC1iZWZvcmVcIiwgW3RoaXMsIGRhdGFdLCB1bmRlZmluZWQsIGRhdGEpO1xuXHRcdFxuXHRcdHRoaXMuZGlzcGF0Y2goXCJyb3ctZGF0YS1pbml0LWFmdGVyXCIsIHRoaXMpO1xuXHR9XG5cdFxuXHQvL3VwZGF0ZSB0aGUgcm93cyBkYXRhXG5cdHVwZGF0ZURhdGEodXBkYXRlZERhdGEpe1xuXHRcdHZhciB2aXNpYmxlID0gdGhpcy5lbGVtZW50ICYmIEhlbHBlcnMuZWxWaXNpYmxlKHRoaXMuZWxlbWVudCksXG5cdFx0dGVtcERhdGEgPSB7fSxcblx0XHRuZXdSb3dEYXRhO1xuXHRcdFxuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHRcblx0XHRcdGlmKHR5cGVvZiB1cGRhdGVkRGF0YSA9PT0gXCJzdHJpbmdcIil7XG5cdFx0XHRcdHVwZGF0ZWREYXRhID0gSlNPTi5wYXJzZSh1cGRhdGVkRGF0YSk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHRoaXMuZGlzcGF0Y2goXCJyb3ctZGF0YS1zYXZlLWJlZm9yZVwiLCB0aGlzKTtcblx0XHRcdFxuXHRcdFx0aWYodGhpcy5zdWJzY3JpYmVkKFwicm93LWRhdGEtY2hhbmdpbmdcIikpe1xuXHRcdFx0XHR0ZW1wRGF0YSA9IE9iamVjdC5hc3NpZ24odGVtcERhdGEsIHRoaXMuZGF0YSk7XG5cdFx0XHRcdHRlbXBEYXRhID0gT2JqZWN0LmFzc2lnbih0ZW1wRGF0YSwgdXBkYXRlZERhdGEpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRuZXdSb3dEYXRhID0gdGhpcy5jaGFpbihcInJvdy1kYXRhLWNoYW5naW5nXCIsIFt0aGlzLCB0ZW1wRGF0YSwgdXBkYXRlZERhdGFdLCBudWxsLCB1cGRhdGVkRGF0YSk7XG5cdFx0XHRcblx0XHRcdC8vc2V0IGRhdGFcblx0XHRcdGZvciAobGV0IGF0dHJuYW1lIGluIG5ld1Jvd0RhdGEpIHtcblx0XHRcdFx0dGhpcy5kYXRhW2F0dHJuYW1lXSA9IG5ld1Jvd0RhdGFbYXR0cm5hbWVdO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLmRpc3BhdGNoKFwicm93LWRhdGEtc2F2ZS1hZnRlclwiLCB0aGlzKTtcblx0XHRcdFxuXHRcdFx0Ly91cGRhdGUgYWZmZWN0ZWQgY2VsbHMgb25seVxuXHRcdFx0Zm9yIChsZXQgYXR0cm5hbWUgaW4gdXBkYXRlZERhdGEpIHtcblx0XHRcdFx0XG5cdFx0XHRcdGxldCBjb2x1bW5zID0gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmdldENvbHVtbnNCeUZpZWxkUm9vdChhdHRybmFtZSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRjb2x1bW5zLmZvckVhY2goKGNvbHVtbikgPT4ge1xuXHRcdFx0XHRcdGxldCBjZWxsID0gdGhpcy5nZXRDZWxsKGNvbHVtbi5nZXRGaWVsZCgpKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZihjZWxsKXtcblx0XHRcdFx0XHRcdGxldCB2YWx1ZSA9IGNvbHVtbi5nZXRGaWVsZFZhbHVlKG5ld1Jvd0RhdGEpO1xuXHRcdFx0XHRcdFx0aWYoY2VsbC5nZXRWYWx1ZSgpICE9PSB2YWx1ZSl7XG5cdFx0XHRcdFx0XHRcdGNlbGwuc2V0VmFsdWVQcm9jZXNzRGF0YSh2YWx1ZSk7XG5cdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRpZih2aXNpYmxlKXtcblx0XHRcdFx0XHRcdFx0XHRjZWxsLmNlbGxSZW5kZXJlZCgpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Ly9QYXJ0aWFsIHJlaW5pdGlhbGl6YXRpb24gaWYgdmlzaWJsZVxuXHRcdFx0aWYodmlzaWJsZSl7XG5cdFx0XHRcdHRoaXMubm9ybWFsaXplSGVpZ2h0KHRydWUpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnJvd0Zvcm1hdHRlcil7XG5cdFx0XHRcdFx0dGhpcy50YWJsZS5vcHRpb25zLnJvd0Zvcm1hdHRlcih0aGlzLmdldENvbXBvbmVudCgpKTtcblx0XHRcdFx0fVxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG5cdFx0XHRcdHRoaXMuaGVpZ2h0ID0gMDtcblx0XHRcdFx0dGhpcy5oZWlnaHRTdHlsZWQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLmRpc3BhdGNoKFwicm93LWRhdGEtY2hhbmdlZFwiLCB0aGlzLCB2aXNpYmxlLCB1cGRhdGVkRGF0YSk7XG5cdFx0XHRcblx0XHRcdC8vdGhpcy5yZWluaXRpYWxpemUoKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwicm93VXBkYXRlZFwiLCB0aGlzLmdldENvbXBvbmVudCgpKTtcblx0XHRcdFxuXHRcdFx0aWYodGhpcy5zdWJzY3JpYmVkRXh0ZXJuYWwoXCJkYXRhQ2hhbmdlZFwiKSl7XG5cdFx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcImRhdGFDaGFuZ2VkXCIsIHRoaXMudGFibGUucm93TWFuYWdlci5nZXREYXRhKCkpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRyZXNvbHZlKCk7XG5cdFx0fSk7XG5cdH1cblx0XG5cdGdldERhdGEodHJhbnNmb3JtKXtcblx0XHRpZih0cmFuc2Zvcm0pe1xuXHRcdFx0cmV0dXJuIHRoaXMuY2hhaW4oXCJyb3ctZGF0YS1yZXRyaWV2ZVwiLCBbdGhpcywgdHJhbnNmb3JtXSwgbnVsbCwgdGhpcy5kYXRhKTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHRoaXMuZGF0YTtcblx0fVxuXHRcblx0Z2V0Q2VsbChjb2x1bW4pe1xuXHRcdHZhciBtYXRjaCA9IGZhbHNlO1xuXHRcdFxuXHRcdGNvbHVtbiA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5maW5kQ29sdW1uKGNvbHVtbik7XG5cdFx0XG5cdFx0aWYoIXRoaXMuaW5pdGlhbGl6ZWQgJiYgdGhpcy5jZWxscy5sZW5ndGggPT09IDApe1xuXHRcdFx0dGhpcy5nZW5lcmF0ZUNlbGxzKCk7XG5cdFx0fVxuXHRcdFxuXHRcdG1hdGNoID0gdGhpcy5jZWxscy5maW5kKGZ1bmN0aW9uKGNlbGwpe1xuXHRcdFx0cmV0dXJuIGNlbGwuY29sdW1uID09PSBjb2x1bW47XG5cdFx0fSk7XG5cdFx0XG5cdFx0cmV0dXJuIG1hdGNoO1xuXHR9XG5cdFxuXHRnZXRDZWxsSW5kZXgoZmluZENlbGwpe1xuXHRcdHJldHVybiB0aGlzLmNlbGxzLmZpbmRJbmRleChmdW5jdGlvbihjZWxsKXtcblx0XHRcdHJldHVybiBjZWxsID09PSBmaW5kQ2VsbDtcblx0XHR9KTtcblx0fVxuXHRcblx0ZmluZENlbGwoc3ViamVjdCl7XG5cdFx0cmV0dXJuIHRoaXMuY2VsbHMuZmluZCgoY2VsbCkgPT4ge1xuXHRcdFx0cmV0dXJuIGNlbGwuZWxlbWVudCA9PT0gc3ViamVjdDtcblx0XHR9KTtcblx0fVxuXHRcblx0Z2V0Q2VsbHMoKXtcblx0XHRpZighdGhpcy5pbml0aWFsaXplZCAmJiB0aGlzLmNlbGxzLmxlbmd0aCA9PT0gMCl7XG5cdFx0XHR0aGlzLmdlbmVyYXRlQ2VsbHMoKTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHRoaXMuY2VsbHM7XG5cdH1cblx0XG5cdG5leHRSb3coKXtcblx0XHR2YXIgcm93ID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLm5leHREaXNwbGF5Um93KHRoaXMsIHRydWUpO1xuXHRcdHJldHVybiByb3cgfHwgZmFsc2U7XG5cdH1cblx0XG5cdHByZXZSb3coKXtcblx0XHR2YXIgcm93ID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLnByZXZEaXNwbGF5Um93KHRoaXMsIHRydWUpO1xuXHRcdHJldHVybiByb3cgfHwgZmFsc2U7XG5cdH1cblx0XG5cdG1vdmVUb1Jvdyh0bywgYmVmb3JlKXtcblx0XHR2YXIgdG9Sb3cgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZmluZFJvdyh0byk7XG5cdFx0XG5cdFx0aWYodG9Sb3cpe1xuXHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLm1vdmVSb3dBY3R1YWwodGhpcywgdG9Sb3csICFiZWZvcmUpO1xuXHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnJlZnJlc2hBY3RpdmVEYXRhKFwiZGlzcGxheVwiLCBmYWxzZSwgdHJ1ZSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiTW92ZSBFcnJvciAtIE5vIG1hdGNoaW5nIHJvdyBmb3VuZDpcIiwgdG8pO1xuXHRcdH1cblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vIEFjdGlvbnMgIC8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRkZWxldGUoKXtcblx0XHR0aGlzLmRpc3BhdGNoKFwicm93LWRlbGV0ZVwiLCB0aGlzKTtcblx0XHRcblx0XHR0aGlzLmRlbGV0ZUFjdHVhbCgpO1xuXHRcdFxuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcblx0fVxuXHRcblx0ZGVsZXRlQWN0dWFsKGJsb2NrUmVkcmF3KXtcblx0XHR0aGlzLmRldGFjaE1vZHVsZXMoKTtcblx0XHRcblx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuZGVsZXRlUm93KHRoaXMsIGJsb2NrUmVkcmF3KTtcblx0XHRcblx0XHR0aGlzLmRlbGV0ZUNlbGxzKCk7XG5cdFx0XG5cdFx0dGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuXHRcdHRoaXMuaGVpZ2h0SW5pdGlhbGl6ZWQgPSBmYWxzZTtcblx0XHR0aGlzLmVsZW1lbnQgPSBmYWxzZTtcblx0XHRcblx0XHR0aGlzLmRpc3BhdGNoKFwicm93LWRlbGV0ZWRcIiwgdGhpcyk7XG5cdH1cblx0XG5cdGRldGFjaE1vZHVsZXMoKXtcblx0XHR0aGlzLmRpc3BhdGNoKFwicm93LWRlbGV0aW5nXCIsIHRoaXMpO1xuXHR9XG5cdFxuXHRkZWxldGVDZWxscygpe1xuXHRcdHZhciBjZWxsQ291bnQgPSB0aGlzLmNlbGxzLmxlbmd0aDtcblx0XHRcblx0XHRmb3IobGV0IGkgPSAwOyBpIDwgY2VsbENvdW50OyBpKyspe1xuXHRcdFx0dGhpcy5jZWxsc1swXS5kZWxldGUoKTtcblx0XHR9XG5cdH1cblx0XG5cdHdpcGUoKXtcblx0XHR0aGlzLmRldGFjaE1vZHVsZXMoKTtcblx0XHR0aGlzLmRlbGV0ZUNlbGxzKCk7XG5cdFx0XG5cdFx0aWYodGhpcy5lbGVtZW50KXtcblx0XHRcdHdoaWxlKHRoaXMuZWxlbWVudC5maXJzdENoaWxkKSB0aGlzLmVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50LmZpcnN0Q2hpbGQpO1xuXHRcdFx0XG5cdFx0XHRpZih0aGlzLmVsZW1lbnQucGFyZW50Tm9kZSl7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuZWxlbWVudCA9IGZhbHNlO1xuXHRcdHRoaXMubW9kdWxlcyA9IHt9O1xuXHR9XG5cblx0aXNEaXNwbGF5ZWQoKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldERpc3BsYXlSb3dzKCkuaW5jbHVkZXModGhpcyk7XG5cdH1cblxuXHRnZXRQb3NpdGlvbigpe1xuXHRcdHJldHVybiB0aGlzLmlzRGlzcGxheWVkKCkgPyB0aGlzLnBvc2l0aW9uIDogZmFsc2U7XG5cdH1cblxuXHRzZXRQb3NpdGlvbihwb3NpdGlvbil7XG5cdFx0aWYocG9zaXRpb24gIT0gdGhpcy5wb3NpdGlvbil7XG5cdFx0XHR0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247XG5cblx0XHRcdHRoaXMucG9zaXRpb25XYXRjaGVycy5mb3JFYWNoKChjYWxsYmFjaykgPT4ge1xuXHRcdFx0XHRjYWxsYmFjayh0aGlzLnBvc2l0aW9uKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdHdhdGNoUG9zaXRpb24oY2FsbGJhY2spe1xuXHRcdHRoaXMucG9zaXRpb25XYXRjaGVycy5wdXNoKGNhbGxiYWNrKTtcblxuXHRcdGNhbGxiYWNrKHRoaXMucG9zaXRpb24pO1xuXHR9XG5cdFxuXHRnZXRHcm91cCgpe1xuXHRcdHJldHVybiB0aGlzLm1vZHVsZXMuZ3JvdXAgfHwgZmFsc2U7XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8gT2JqZWN0IEdlbmVyYXRpb24gLy8vLy8vLy8vLy8vLy8vLy9cblx0Z2V0Q29tcG9uZW50KCl7XG5cdFx0aWYoIXRoaXMuY29tcG9uZW50KXtcblx0XHRcdHRoaXMuY29tcG9uZW50ID0gbmV3IFJvd0NvbXBvbmVudCh0aGlzKTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHRoaXMuY29tcG9uZW50O1xuXHR9XG59XG5cbnZhciBkZWZhdWx0Q2FsY3VsYXRpb25zID0ge1xuXHRcImF2Z1wiOmZ1bmN0aW9uKHZhbHVlcywgZGF0YSwgY2FsY1BhcmFtcyl7XG5cdFx0dmFyIG91dHB1dCA9IDAsXG5cdFx0cHJlY2lzaW9uID0gdHlwZW9mIGNhbGNQYXJhbXMucHJlY2lzaW9uICE9PSBcInVuZGVmaW5lZFwiID8gY2FsY1BhcmFtcy5wcmVjaXNpb24gOiAyO1xuXG5cdFx0aWYodmFsdWVzLmxlbmd0aCl7XG5cdFx0XHRvdXRwdXQgPSB2YWx1ZXMucmVkdWNlKGZ1bmN0aW9uKHN1bSwgdmFsdWUpe1xuXHRcdFx0XHRyZXR1cm4gTnVtYmVyKHN1bSkgKyBOdW1iZXIodmFsdWUpO1xuXHRcdFx0fSk7XG5cblx0XHRcdG91dHB1dCA9IG91dHB1dCAvIHZhbHVlcy5sZW5ndGg7XG5cblx0XHRcdG91dHB1dCA9IHByZWNpc2lvbiAhPT0gZmFsc2UgPyBvdXRwdXQudG9GaXhlZChwcmVjaXNpb24pIDogb3V0cHV0O1xuXHRcdH1cblxuXHRcdHJldHVybiBwYXJzZUZsb2F0KG91dHB1dCkudG9TdHJpbmcoKTtcblx0fSxcblx0XCJtYXhcIjpmdW5jdGlvbih2YWx1ZXMsIGRhdGEsIGNhbGNQYXJhbXMpe1xuXHRcdHZhciBvdXRwdXQgPSBudWxsLFxuXHRcdHByZWNpc2lvbiA9IHR5cGVvZiBjYWxjUGFyYW1zLnByZWNpc2lvbiAhPT0gXCJ1bmRlZmluZWRcIiA/IGNhbGNQYXJhbXMucHJlY2lzaW9uIDogZmFsc2U7XG5cblx0XHR2YWx1ZXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSl7XG5cblx0XHRcdHZhbHVlID0gTnVtYmVyKHZhbHVlKTtcblxuXHRcdFx0aWYodmFsdWUgPiBvdXRwdXQgfHwgb3V0cHV0ID09PSBudWxsKXtcblx0XHRcdFx0b3V0cHV0ID0gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gb3V0cHV0ICE9PSBudWxsID8gKHByZWNpc2lvbiAhPT0gZmFsc2UgPyBvdXRwdXQudG9GaXhlZChwcmVjaXNpb24pIDogb3V0cHV0KSA6IFwiXCI7XG5cdH0sXG5cdFwibWluXCI6ZnVuY3Rpb24odmFsdWVzLCBkYXRhLCBjYWxjUGFyYW1zKXtcblx0XHR2YXIgb3V0cHV0ID0gbnVsbCxcblx0XHRwcmVjaXNpb24gPSB0eXBlb2YgY2FsY1BhcmFtcy5wcmVjaXNpb24gIT09IFwidW5kZWZpbmVkXCIgPyBjYWxjUGFyYW1zLnByZWNpc2lvbiA6IGZhbHNlO1xuXG5cdFx0dmFsdWVzLmZvckVhY2goZnVuY3Rpb24odmFsdWUpe1xuXG5cdFx0XHR2YWx1ZSA9IE51bWJlcih2YWx1ZSk7XG5cblx0XHRcdGlmKHZhbHVlIDwgb3V0cHV0IHx8IG91dHB1dCA9PT0gbnVsbCl7XG5cdFx0XHRcdG91dHB1dCA9IHZhbHVlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIG91dHB1dCAhPT0gbnVsbCA/IChwcmVjaXNpb24gIT09IGZhbHNlID8gb3V0cHV0LnRvRml4ZWQocHJlY2lzaW9uKSA6IG91dHB1dCkgOiBcIlwiO1xuXHR9LFxuXHRcInN1bVwiOmZ1bmN0aW9uKHZhbHVlcywgZGF0YSwgY2FsY1BhcmFtcyl7XG5cdFx0dmFyIG91dHB1dCA9IDAsXG5cdFx0cHJlY2lzaW9uID0gdHlwZW9mIGNhbGNQYXJhbXMucHJlY2lzaW9uICE9PSBcInVuZGVmaW5lZFwiID8gY2FsY1BhcmFtcy5wcmVjaXNpb24gOiBmYWxzZTtcblxuXHRcdGlmKHZhbHVlcy5sZW5ndGgpe1xuXHRcdFx0dmFsdWVzLmZvckVhY2goZnVuY3Rpb24odmFsdWUpe1xuXHRcdFx0XHR2YWx1ZSA9IE51bWJlcih2YWx1ZSk7XG5cblx0XHRcdFx0b3V0cHV0ICs9ICFpc05hTih2YWx1ZSkgPyBOdW1iZXIodmFsdWUpIDogMDtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBwcmVjaXNpb24gIT09IGZhbHNlID8gb3V0cHV0LnRvRml4ZWQocHJlY2lzaW9uKSA6IG91dHB1dDtcblx0fSxcblx0XCJjb25jYXRcIjpmdW5jdGlvbih2YWx1ZXMsIGRhdGEsIGNhbGNQYXJhbXMpe1xuXHRcdHZhciBvdXRwdXQgPSAwO1xuXG5cdFx0aWYodmFsdWVzLmxlbmd0aCl7XG5cdFx0XHRvdXRwdXQgPSB2YWx1ZXMucmVkdWNlKGZ1bmN0aW9uKHN1bSwgdmFsdWUpe1xuXHRcdFx0XHRyZXR1cm4gU3RyaW5nKHN1bSkgKyBTdHJpbmcodmFsdWUpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fSxcblx0XCJjb3VudFwiOmZ1bmN0aW9uKHZhbHVlcywgZGF0YSwgY2FsY1BhcmFtcyl7XG5cdFx0dmFyIG91dHB1dCA9IDA7XG5cblx0XHRpZih2YWx1ZXMubGVuZ3RoKXtcblx0XHRcdHZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKXtcblx0XHRcdFx0aWYodmFsdWUpe1xuXHRcdFx0XHRcdG91dHB1dCArKztcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fSxcblx0XCJ1bmlxdWVcIjpmdW5jdGlvbih2YWx1ZXMsIGRhdGEsIGNhbGNQYXJhbXMpe1xuXHRcdHZhciB1bmlxdWUgPSB2YWx1ZXMuZmlsdGVyKCh2YWx1ZSwgaW5kZXgpID0+IHtcblx0XHRcdHJldHVybiAodmFsdWVzIHx8IHZhbHVlID09PSAwKSAmJiB2YWx1ZXMuaW5kZXhPZih2YWx1ZSkgPT09IGluZGV4O1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIHVuaXF1ZS5sZW5ndGg7XG5cdH0sXG59O1xuXG5jbGFzcyBDb2x1bW5DYWxjcyBleHRlbmRzIE1vZHVsZXtcblx0XG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cdFx0XG5cdFx0dGhpcy50b3BDYWxjcyA9IFtdO1xuXHRcdHRoaXMuYm90Q2FsY3MgPSBbXTtcblx0XHR0aGlzLmdlbkNvbHVtbiA9IGZhbHNlO1xuXHRcdHRoaXMudG9wRWxlbWVudCA9IHRoaXMuY3JlYXRlRWxlbWVudCgpO1xuXHRcdHRoaXMuYm90RWxlbWVudCA9IHRoaXMuY3JlYXRlRWxlbWVudCgpO1xuXHRcdHRoaXMudG9wUm93ID0gZmFsc2U7XG5cdFx0dGhpcy5ib3RSb3cgPSBmYWxzZTtcblx0XHR0aGlzLnRvcEluaXRpYWxpemVkID0gZmFsc2U7XG5cdFx0dGhpcy5ib3RJbml0aWFsaXplZCA9IGZhbHNlO1xuXHRcdFxuXHRcdHRoaXMuYmxvY2tlZCA9IGZhbHNlO1xuXHRcdHRoaXMucmVjYWxjQWZ0ZXJCbG9jayA9IGZhbHNlO1xuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImNvbHVtbkNhbGNzXCIsIHRydWUpO1xuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJ0b3BDYWxjXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJ0b3BDYWxjUGFyYW1zXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJ0b3BDYWxjRm9ybWF0dGVyXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJ0b3BDYWxjRm9ybWF0dGVyUGFyYW1zXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJib3R0b21DYWxjXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJib3R0b21DYWxjUGFyYW1zXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJib3R0b21DYWxjRm9ybWF0dGVyXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJib3R0b21DYWxjRm9ybWF0dGVyUGFyYW1zXCIpO1xuXHR9XG5cdFxuXHRjcmVhdGVFbGVtZW50ICgpe1xuXHRcdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0ZWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1jYWxjcy1ob2xkZXJcIik7XG5cdFx0cmV0dXJuIGVsO1xuXHR9XG5cdFxuXHRpbml0aWFsaXplKCl7XG5cdFx0dGhpcy5nZW5Db2x1bW4gPSBuZXcgQ29sdW1uKHtmaWVsZDpcInZhbHVlXCJ9LCB0aGlzKTtcblx0XHRcblx0XHR0aGlzLnN1YnNjcmliZShcImNlbGwtdmFsdWUtY2hhbmdlZFwiLCB0aGlzLmNlbGxWYWx1ZUNoYW5nZWQuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4taW5pdFwiLCB0aGlzLmluaXRpYWxpemVDb2x1bW5DaGVjay5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1kZWxldGVkXCIsIHRoaXMucm93c1VwZGF0ZWQuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJzY3JvbGwtaG9yaXpvbnRhbFwiLCB0aGlzLnNjcm9sbEhvcml6b250YWwuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctYWRkZWRcIiwgdGhpcy5yb3dzVXBkYXRlZC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1tb3ZlZFwiLCB0aGlzLnJlY2FsY0FjdGl2ZVJvd3MuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tYWRkXCIsIHRoaXMucmVjYWxjQWN0aXZlUm93cy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImRhdGEtcmVmcmVzaGVkXCIsIHRoaXMucmVjYWxjQWN0aXZlUm93c1JlZnJlc2guYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJ0YWJsZS1yZWRyYXdcIiwgdGhpcy50YWJsZVJlZHJhdy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcInJvd3MtdmlzaWJsZVwiLCB0aGlzLnZpc2libGVSb3dzLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwic2Nyb2xsYmFyLXZlcnRpY2FsXCIsIHRoaXMuYWRqdXN0Rm9yU2Nyb2xsYmFyLmJpbmQodGhpcykpO1xuXHRcdFxuXHRcdHRoaXMuc3Vic2NyaWJlKFwicmVkcmF3LWJsb2NrZWRcIiwgdGhpcy5ibG9ja1JlZHJhdy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcInJlZHJhdy1yZXN0b3JlZFwiLCB0aGlzLnJlc3RvcmVSZWRyYXcuYmluZCh0aGlzKSk7XG5cblx0XHR0aGlzLnN1YnNjcmliZShcInRhYmxlLXJlZHJhd2luZ1wiLCB0aGlzLnJlc2l6ZUhvbGRlcldpZHRoLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLXJlc2l6ZWRcIiwgdGhpcy5yZXNpemVIb2xkZXJXaWR0aC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1zaG93XCIsIHRoaXMucmVzaXplSG9sZGVyV2lkdGguYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4taGlkZVwiLCB0aGlzLnJlc2l6ZUhvbGRlcldpZHRoLmJpbmQodGhpcykpO1xuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiZ2V0Q2FsY1Jlc3VsdHNcIiwgdGhpcy5nZXRSZXN1bHRzLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwicmVjYWxjXCIsIHRoaXMudXNlclJlY2FsYy5iaW5kKHRoaXMpKTtcblxuXG5cdFx0dGhpcy5yZXNpemVIb2xkZXJXaWR0aCgpO1xuXHR9XG5cblx0cmVzaXplSG9sZGVyV2lkdGgoKXtcblx0XHR0aGlzLnRvcEVsZW1lbnQuc3R5bGUubWluV2lkdGggPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuaGVhZGVyc0VsZW1lbnQub2Zmc2V0V2lkdGggKyBcInB4XCI7XG5cdH1cblxuXHRcblx0dGFibGVSZWRyYXcoZm9yY2Upe1xuXHRcdHRoaXMucmVjYWxjKHRoaXMudGFibGUucm93TWFuYWdlci5hY3RpdmVSb3dzKTtcblx0XHRcblx0XHRpZihmb3JjZSl7XG5cdFx0XHR0aGlzLnJlZHJhdygpO1xuXHRcdH1cblx0fVxuXHRcblx0YmxvY2tSZWRyYXcoKXtcblx0XHR0aGlzLmJsb2NrZWQgPSB0cnVlO1xuXHRcdHRoaXMucmVjYWxjQWZ0ZXJCbG9jayA9IGZhbHNlO1xuXHR9XG5cdFxuXHRcblx0cmVzdG9yZVJlZHJhdygpe1xuXHRcdHRoaXMuYmxvY2tlZCA9IGZhbHNlO1xuXHRcdFxuXHRcdGlmKHRoaXMucmVjYWxjQWZ0ZXJCbG9jayl7XG5cdFx0XHR0aGlzLnJlY2FsY0FmdGVyQmxvY2sgPSBmYWxzZTtcblx0XHRcdHRoaXMucmVjYWxjQWN0aXZlUm93c1JlZnJlc2goKTtcblx0XHR9XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLyBUYWJsZSBGdW5jdGlvbnMgLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdHVzZXJSZWNhbGMoKXtcblx0XHR0aGlzLnJlY2FsYyh0aGlzLnRhYmxlLnJvd01hbmFnZXIuYWN0aXZlUm93cyk7XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLyBJbnRlcm5hbCBMb2dpYyAvLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHRibG9ja0NoZWNrKCl7XG5cdFx0aWYodGhpcy5ibG9ja2VkKXtcblx0XHRcdHRoaXMucmVjYWxjQWZ0ZXJCbG9jayA9IHRydWU7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiB0aGlzLmJsb2NrZWQ7XG5cdH1cblx0XG5cdHZpc2libGVSb3dzKHZpZXdhYmxlLCByb3dzKXtcblx0XHRpZih0aGlzLnRvcFJvdyl7XG5cdFx0XHRyb3dzLnVuc2hpZnQodGhpcy50b3BSb3cpO1xuXHRcdH1cblx0XHRcblx0XHRpZih0aGlzLmJvdFJvdyl7XG5cdFx0XHRyb3dzLnB1c2godGhpcy5ib3RSb3cpO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gcm93cztcblx0fVxuXHRcblx0cm93c1VwZGF0ZWQocm93KXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBCeSl7XG5cdFx0XHR0aGlzLnJlY2FsY1Jvd0dyb3VwKHJvdyk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5yZWNhbGNBY3RpdmVSb3dzKCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRyZWNhbGNBY3RpdmVSb3dzUmVmcmVzaCgpe1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5ncm91cEJ5ICYmIHRoaXMudGFibGUub3B0aW9ucy5kYXRhVHJlZVN0YXJ0RXhwYW5kZWQgJiYgdGhpcy50YWJsZS5vcHRpb25zLmRhdGFUcmVlKXtcblx0XHRcdHRoaXMucmVjYWxjQWxsKCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5yZWNhbGNBY3RpdmVSb3dzKCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRyZWNhbGNBY3RpdmVSb3dzKCl7XG5cdFx0dGhpcy5yZWNhbGModGhpcy50YWJsZS5yb3dNYW5hZ2VyLmFjdGl2ZVJvd3MpO1xuXHR9XG5cdFxuXHRjZWxsVmFsdWVDaGFuZ2VkKGNlbGwpe1xuXHRcdGlmKGNlbGwuY29sdW1uLmRlZmluaXRpb24udG9wQ2FsYyB8fCBjZWxsLmNvbHVtbi5kZWZpbml0aW9uLmJvdHRvbUNhbGMpe1xuXHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQnkpe1xuXHRcdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuY29sdW1uQ2FsY3MgPT0gXCJ0YWJsZVwiIHx8IHRoaXMudGFibGUub3B0aW9ucy5jb2x1bW5DYWxjcyA9PSBcImJvdGhcIil7XG5cdFx0XHRcdFx0dGhpcy5yZWNhbGNBY3RpdmVSb3dzKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5jb2x1bW5DYWxjcyAhPSBcInRhYmxlXCIpe1xuXHRcdFx0XHRcdHRoaXMucmVjYWxjUm93R3JvdXAoY2VsbC5yb3cpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMucmVjYWxjQWN0aXZlUm93cygpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0aW5pdGlhbGl6ZUNvbHVtbkNoZWNrKGNvbHVtbil7XG5cdFx0aWYoY29sdW1uLmRlZmluaXRpb24udG9wQ2FsYyB8fCBjb2x1bW4uZGVmaW5pdGlvbi5ib3R0b21DYWxjKXtcblx0XHRcdHRoaXMuaW5pdGlhbGl6ZUNvbHVtbihjb2x1bW4pO1xuXHRcdH1cblx0fVxuXHRcblx0Ly9pbml0aWFsaXplIGNvbHVtbiBjYWxjc1xuXHRpbml0aWFsaXplQ29sdW1uKGNvbHVtbil7XG5cdFx0dmFyIGRlZiA9IGNvbHVtbi5kZWZpbml0aW9uO1xuXHRcdFxuXHRcdHZhciBjb25maWcgPSB7XG5cdFx0XHR0b3BDYWxjUGFyYW1zOmRlZi50b3BDYWxjUGFyYW1zIHx8IHt9LFxuXHRcdFx0Ym90Q2FsY1BhcmFtczpkZWYuYm90dG9tQ2FsY1BhcmFtcyB8fCB7fSxcblx0XHR9O1xuXHRcdFxuXHRcdGlmKGRlZi50b3BDYWxjKXtcblx0XHRcdFxuXHRcdFx0c3dpdGNoKHR5cGVvZiBkZWYudG9wQ2FsYyl7XG5cdFx0XHRcdGNhc2UgXCJzdHJpbmdcIjpcblx0XHRcdFx0XHRpZihDb2x1bW5DYWxjcy5jYWxjdWxhdGlvbnNbZGVmLnRvcENhbGNdKXtcblx0XHRcdFx0XHRcdGNvbmZpZy50b3BDYWxjID0gQ29sdW1uQ2FsY3MuY2FsY3VsYXRpb25zW2RlZi50b3BDYWxjXTtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJDb2x1bW4gQ2FsYyBFcnJvciAtIE5vIHN1Y2ggY2FsY3VsYXRpb24gZm91bmQsIGlnbm9yaW5nOiBcIiwgZGVmLnRvcENhbGMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XG5cdFx0XHRcdGNhc2UgXCJmdW5jdGlvblwiOlxuXHRcdFx0XHRcdGNvbmZpZy50b3BDYWxjID0gZGVmLnRvcENhbGM7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihjb25maWcudG9wQ2FsYyl7XG5cdFx0XHRcdGNvbHVtbi5tb2R1bGVzLmNvbHVtbkNhbGNzID0gY29uZmlnO1xuXHRcdFx0XHR0aGlzLnRvcENhbGNzLnB1c2goY29sdW1uKTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5jb2x1bW5DYWxjcyAhPSBcImdyb3VwXCIpe1xuXHRcdFx0XHRcdHRoaXMuaW5pdGlhbGl6ZVRvcFJvdygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblx0XHR9XG5cdFx0XG5cdFx0aWYoZGVmLmJvdHRvbUNhbGMpe1xuXHRcdFx0c3dpdGNoKHR5cGVvZiBkZWYuYm90dG9tQ2FsYyl7XG5cdFx0XHRcdGNhc2UgXCJzdHJpbmdcIjpcblx0XHRcdFx0XHRpZihDb2x1bW5DYWxjcy5jYWxjdWxhdGlvbnNbZGVmLmJvdHRvbUNhbGNdKXtcblx0XHRcdFx0XHRcdGNvbmZpZy5ib3RDYWxjID0gQ29sdW1uQ2FsY3MuY2FsY3VsYXRpb25zW2RlZi5ib3R0b21DYWxjXTtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJDb2x1bW4gQ2FsYyBFcnJvciAtIE5vIHN1Y2ggY2FsY3VsYXRpb24gZm91bmQsIGlnbm9yaW5nOiBcIiwgZGVmLmJvdHRvbUNhbGMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XG5cdFx0XHRcdGNhc2UgXCJmdW5jdGlvblwiOlxuXHRcdFx0XHRcdGNvbmZpZy5ib3RDYWxjID0gZGVmLmJvdHRvbUNhbGM7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihjb25maWcuYm90Q2FsYyl7XG5cdFx0XHRcdGNvbHVtbi5tb2R1bGVzLmNvbHVtbkNhbGNzID0gY29uZmlnO1xuXHRcdFx0XHR0aGlzLmJvdENhbGNzLnB1c2goY29sdW1uKTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5jb2x1bW5DYWxjcyAhPSBcImdyb3VwXCIpe1xuXHRcdFx0XHRcdHRoaXMuaW5pdGlhbGl6ZUJvdHRvbVJvdygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHR9XG5cdFxuXHQvL2R1bW15IGZ1bmN0aW9ucyB0byBoYW5kbGUgYmVpbmcgbW9jayBjb2x1bW4gbWFuYWdlclxuXHRyZWdpc3RlckNvbHVtbkZpZWxkKCl7fVxuXHRcblx0cmVtb3ZlQ2FsY3MoKXtcblx0XHR2YXIgY2hhbmdlZCA9IGZhbHNlO1xuXHRcdFxuXHRcdGlmKHRoaXMudG9wSW5pdGlhbGl6ZWQpe1xuXHRcdFx0dGhpcy50b3BJbml0aWFsaXplZCA9IGZhbHNlO1xuXHRcdFx0dGhpcy50b3BFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy50b3BFbGVtZW50KTtcblx0XHRcdGNoYW5nZWQgPSB0cnVlO1xuXHRcdH1cblx0XHRcblx0XHRpZih0aGlzLmJvdEluaXRpYWxpemVkKXtcblx0XHRcdHRoaXMuYm90SW5pdGlhbGl6ZWQgPSBmYWxzZTtcblx0XHRcdHRoaXMuZm9vdGVyUmVtb3ZlKHRoaXMuYm90RWxlbWVudCk7XG5cdFx0XHRjaGFuZ2VkID0gdHJ1ZTtcblx0XHR9XG5cdFx0XG5cdFx0aWYoY2hhbmdlZCl7XG5cdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuYWRqdXN0VGFibGVTaXplKCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRyZWluaXRpYWxpemVDYWxjcygpe1xuXHRcdGlmKHRoaXMudG9wQ2FsY3MubGVuZ3RoKXtcblx0XHRcdHRoaXMuaW5pdGlhbGl6ZVRvcFJvdygpO1xuXHRcdH1cblxuXHRcdGlmKHRoaXMuYm90Q2FsY3MubGVuZ3RoKXtcblx0XHRcdHRoaXMuaW5pdGlhbGl6ZUJvdHRvbVJvdygpO1xuXHRcdH1cblx0fVxuXHRcblx0aW5pdGlhbGl6ZVRvcFJvdygpe1xuXHRcdGlmKCF0aGlzLnRvcEluaXRpYWxpemVkKXtcblx0XHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5nZXRDb250ZW50c0VsZW1lbnQoKS5pbnNlcnRCZWZvcmUodGhpcy50b3BFbGVtZW50LCB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuaGVhZGVyc0VsZW1lbnQubmV4dFNpYmxpbmcpO1xuXHRcdFx0dGhpcy50b3BJbml0aWFsaXplZCA9IHRydWU7XG5cdFx0fVxuXHR9XG5cdFxuXHRpbml0aWFsaXplQm90dG9tUm93KCl7XG5cdFx0aWYoIXRoaXMuYm90SW5pdGlhbGl6ZWQpe1xuXHRcdFx0dGhpcy5mb290ZXJQcmVwZW5kKHRoaXMuYm90RWxlbWVudCk7XG5cdFx0XHR0aGlzLmJvdEluaXRpYWxpemVkID0gdHJ1ZTtcblx0XHR9XG5cdH1cblx0XG5cdHNjcm9sbEhvcml6b250YWwobGVmdCl7XG5cdFx0aWYodGhpcy5ib3RJbml0aWFsaXplZCAmJiB0aGlzLmJvdFJvdyl7XG5cdFx0XHR0aGlzLmJvdEVsZW1lbnQuc2Nyb2xsTGVmdCA9IGxlZnQ7XG5cdFx0fVxuXHR9XG5cdFxuXHRyZWNhbGMocm93cyl7XG5cdFx0dmFyIGRhdGEsIHJvdztcblx0XHRcblx0XHRpZighdGhpcy5ibG9ja0NoZWNrKCkpe1xuXHRcdFx0aWYodGhpcy50b3BJbml0aWFsaXplZCB8fCB0aGlzLmJvdEluaXRpYWxpemVkKXtcblx0XHRcdFx0ZGF0YSA9IHRoaXMucm93c1RvRGF0YShyb3dzKTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKHRoaXMudG9wSW5pdGlhbGl6ZWQpe1xuXHRcdFx0XHRcdGlmKHRoaXMudG9wUm93KXtcblx0XHRcdFx0XHRcdHRoaXMudG9wUm93LmRlbGV0ZUNlbGxzKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHJvdyA9IHRoaXMuZ2VuZXJhdGVSb3coXCJ0b3BcIiwgZGF0YSk7XG5cdFx0XHRcdFx0dGhpcy50b3BSb3cgPSByb3c7XG5cdFx0XHRcdFx0d2hpbGUodGhpcy50b3BFbGVtZW50LmZpcnN0Q2hpbGQpIHRoaXMudG9wRWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLnRvcEVsZW1lbnQuZmlyc3RDaGlsZCk7XG5cdFx0XHRcdFx0dGhpcy50b3BFbGVtZW50LmFwcGVuZENoaWxkKHJvdy5nZXRFbGVtZW50KCkpO1xuXHRcdFx0XHRcdHJvdy5pbml0aWFsaXplKHRydWUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih0aGlzLmJvdEluaXRpYWxpemVkKXtcblx0XHRcdFx0XHRpZih0aGlzLmJvdFJvdyl7XG5cdFx0XHRcdFx0XHR0aGlzLmJvdFJvdy5kZWxldGVDZWxscygpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHRyb3cgPSB0aGlzLmdlbmVyYXRlUm93KFwiYm90dG9tXCIsIGRhdGEpO1xuXHRcdFx0XHRcdHRoaXMuYm90Um93ID0gcm93O1xuXHRcdFx0XHRcdHdoaWxlKHRoaXMuYm90RWxlbWVudC5maXJzdENoaWxkKSB0aGlzLmJvdEVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5ib3RFbGVtZW50LmZpcnN0Q2hpbGQpO1xuXHRcdFx0XHRcdHRoaXMuYm90RWxlbWVudC5hcHBlbmRDaGlsZChyb3cuZ2V0RWxlbWVudCgpKTtcblx0XHRcdFx0XHRyb3cuaW5pdGlhbGl6ZSh0cnVlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLmFkanVzdFRhYmxlU2l6ZSgpO1xuXHRcdFx0XHRcblx0XHRcdFx0Ly9zZXQgcmVzaXphYmxlIGhhbmRsZXNcblx0XHRcdFx0aWYodGhpcy50YWJsZS5tb2RFeGlzdHMoXCJmcm96ZW5Db2x1bW5zXCIpKXtcblx0XHRcdFx0XHR0aGlzLnRhYmxlLm1vZHVsZXMuZnJvemVuQ29sdW1ucy5sYXlvdXQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0cmVjYWxjUm93R3JvdXAocm93KXtcblx0XHR0aGlzLnJlY2FsY0dyb3VwKHRoaXMudGFibGUubW9kdWxlcy5ncm91cFJvd3MuZ2V0Um93R3JvdXAocm93KSk7XG5cdH1cblx0XG5cdHJlY2FsY0FsbCgpe1xuXHRcdGlmKHRoaXMudG9wQ2FsY3MubGVuZ3RoIHx8IHRoaXMuYm90Q2FsY3MubGVuZ3RoKXtcblx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5jb2x1bW5DYWxjcyAhPT0gXCJncm91cFwiKXtcblx0XHRcdFx0dGhpcy5yZWNhbGNBY3RpdmVSb3dzKCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5ncm91cEJ5ICYmIHRoaXMudGFibGUub3B0aW9ucy5jb2x1bW5DYWxjcyAhPT0gXCJ0YWJsZVwiKXtcblx0XHRcdFx0XG5cdFx0XHRcdHZhciBncm91cHMgPSB0aGlzLnRhYmxlLm1vZHVsZXMuZ3JvdXBSb3dzLmdldENoaWxkR3JvdXBzKCk7XG5cdFx0XHRcdFxuXHRcdFx0XHRncm91cHMuZm9yRWFjaCgoZ3JvdXApID0+IHtcblx0XHRcdFx0XHR0aGlzLnJlY2FsY0dyb3VwKGdyb3VwKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRyZWNhbGNHcm91cChncm91cCl7XG5cdFx0dmFyIGRhdGEsIHJvd0RhdGE7XG5cdFx0XG5cdFx0aWYoIXRoaXMuYmxvY2tDaGVjaygpKXtcblx0XHRcdGlmKGdyb3VwKXtcblx0XHRcdFx0aWYoZ3JvdXAuY2FsY3Mpe1xuXHRcdFx0XHRcdGlmKGdyb3VwLmNhbGNzLmJvdHRvbSl7XG5cdFx0XHRcdFx0XHRkYXRhID0gdGhpcy5yb3dzVG9EYXRhKGdyb3VwLnJvd3MpO1xuXHRcdFx0XHRcdFx0cm93RGF0YSA9IHRoaXMuZ2VuZXJhdGVSb3dEYXRhKFwiYm90dG9tXCIsIGRhdGEpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRncm91cC5jYWxjcy5ib3R0b20udXBkYXRlRGF0YShyb3dEYXRhKTtcblx0XHRcdFx0XHRcdGdyb3VwLmNhbGNzLmJvdHRvbS5yZWluaXRpYWxpemUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYoZ3JvdXAuY2FsY3MudG9wKXtcblx0XHRcdFx0XHRcdGRhdGEgPSB0aGlzLnJvd3NUb0RhdGEoZ3JvdXAucm93cyk7XG5cdFx0XHRcdFx0XHRyb3dEYXRhID0gdGhpcy5nZW5lcmF0ZVJvd0RhdGEoXCJ0b3BcIiwgZGF0YSk7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGdyb3VwLmNhbGNzLnRvcC51cGRhdGVEYXRhKHJvd0RhdGEpO1xuXHRcdFx0XHRcdFx0Z3JvdXAuY2FsY3MudG9wLnJlaW5pdGlhbGl6ZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0Ly9nZW5lcmF0ZSB0b3Agc3RhdHMgcm93XG5cdGdlbmVyYXRlVG9wUm93KHJvd3Mpe1xuXHRcdHJldHVybiB0aGlzLmdlbmVyYXRlUm93KFwidG9wXCIsIHRoaXMucm93c1RvRGF0YShyb3dzKSk7XG5cdH1cblx0Ly9nZW5lcmF0ZSBib3R0b20gc3RhdHMgcm93XG5cdGdlbmVyYXRlQm90dG9tUm93KHJvd3Mpe1xuXHRcdHJldHVybiB0aGlzLmdlbmVyYXRlUm93KFwiYm90dG9tXCIsIHRoaXMucm93c1RvRGF0YShyb3dzKSk7XG5cdH1cblx0XG5cdHJvd3NUb0RhdGEocm93cyl7XG5cdFx0dmFyIGRhdGEgPSBbXTtcblx0XHRcblx0XHRyb3dzLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0ZGF0YS5wdXNoKHJvdy5nZXREYXRhKCkpO1xuXHRcdFx0XG5cdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZGF0YVRyZWUgJiYgdGhpcy50YWJsZS5vcHRpb25zLmRhdGFUcmVlQ2hpbGRDb2x1bW5DYWxjcyl7XG5cdFx0XHRcdGlmKHJvdy5tb2R1bGVzLmRhdGFUcmVlICYmIHJvdy5tb2R1bGVzLmRhdGFUcmVlLm9wZW4pe1xuXHRcdFx0XHRcdHZhciBjaGlsZHJlbiA9IHRoaXMucm93c1RvRGF0YSh0aGlzLnRhYmxlLm1vZHVsZXMuZGF0YVRyZWUuZ2V0RmlsdGVyZWRUcmVlQ2hpbGRyZW4ocm93KSk7XG5cdFx0XHRcdFx0ZGF0YSA9IGRhdGEuY29uY2F0KGNoaWxkcmVuKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiBkYXRhO1xuXHR9XG5cdFxuXHQvL2dlbmVyYXRlIHN0YXRzIHJvd1xuXHRnZW5lcmF0ZVJvdyhwb3MsIGRhdGEpe1xuXHRcdHZhciByb3dEYXRhID0gdGhpcy5nZW5lcmF0ZVJvd0RhdGEocG9zLCBkYXRhKSxcblx0XHRyb3c7XG5cdFx0XG5cdFx0aWYodGhpcy50YWJsZS5tb2RFeGlzdHMoXCJtdXRhdG9yXCIpKXtcblx0XHRcdHRoaXMudGFibGUubW9kdWxlcy5tdXRhdG9yLmRpc2FibGUoKTtcblx0XHR9XG5cdFx0XG5cdFx0cm93ID0gbmV3IFJvdyhyb3dEYXRhLCB0aGlzLCBcImNhbGNcIik7XG5cdFx0XG5cdFx0aWYodGhpcy50YWJsZS5tb2RFeGlzdHMoXCJtdXRhdG9yXCIpKXtcblx0XHRcdHRoaXMudGFibGUubW9kdWxlcy5tdXRhdG9yLmVuYWJsZSgpO1xuXHRcdH1cblx0XHRcblx0XHRyb3cuZ2V0RWxlbWVudCgpLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItY2FsY3NcIiwgXCJ0YWJ1bGF0b3ItY2FsY3MtXCIgKyBwb3MpO1xuXHRcdFxuXHRcdHJvdy5jb21wb25lbnQgPSBmYWxzZTtcblx0XHRcblx0XHRyb3cuZ2V0Q29tcG9uZW50ID0gKCkgPT4ge1xuXHRcdFx0aWYoIXJvdy5jb21wb25lbnQpe1xuXHRcdFx0XHRyb3cuY29tcG9uZW50ID0gbmV3IENhbGNDb21wb25lbnQocm93KTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0cmV0dXJuIHJvdy5jb21wb25lbnQ7XG5cdFx0fTtcblx0XHRcblx0XHRyb3cuZ2VuZXJhdGVDZWxscyA9ICgpID0+IHtcblx0XHRcdFxuXHRcdFx0dmFyIGNlbGxzID0gW107XG5cdFx0XHRcblx0XHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5jb2x1bW5zQnlJbmRleC5mb3JFYWNoKChjb2x1bW4pID0+IHtcblx0XHRcdFx0XG5cdFx0XHRcdC8vc2V0IGZpZWxkIG5hbWUgb2YgbW9jayBjb2x1bW5cblx0XHRcdFx0dGhpcy5nZW5Db2x1bW4uc2V0RmllbGQoY29sdW1uLmdldEZpZWxkKCkpO1xuXHRcdFx0XHR0aGlzLmdlbkNvbHVtbi5ob3pBbGlnbiA9IGNvbHVtbi5ob3pBbGlnbjtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKGNvbHVtbi5kZWZpbml0aW9uW3BvcyArIFwiQ2FsY0Zvcm1hdHRlclwiXSAmJiB0aGlzLnRhYmxlLm1vZEV4aXN0cyhcImZvcm1hdFwiKSl7XG5cdFx0XHRcdFx0dGhpcy5nZW5Db2x1bW4ubW9kdWxlcy5mb3JtYXQgPSB7XG5cdFx0XHRcdFx0XHRmb3JtYXR0ZXI6IHRoaXMudGFibGUubW9kdWxlcy5mb3JtYXQuZ2V0Rm9ybWF0dGVyKGNvbHVtbi5kZWZpbml0aW9uW3BvcyArIFwiQ2FsY0Zvcm1hdHRlclwiXSksXG5cdFx0XHRcdFx0XHRwYXJhbXM6IGNvbHVtbi5kZWZpbml0aW9uW3BvcyArIFwiQ2FsY0Zvcm1hdHRlclBhcmFtc1wiXSB8fCB7fSxcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5nZW5Db2x1bW4ubW9kdWxlcy5mb3JtYXQgPSB7XG5cdFx0XHRcdFx0XHRmb3JtYXR0ZXI6IHRoaXMudGFibGUubW9kdWxlcy5mb3JtYXQuZ2V0Rm9ybWF0dGVyKFwicGxhaW50ZXh0XCIpLFxuXHRcdFx0XHRcdFx0cGFyYW1zOnt9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0Ly9lbnN1cmUgY3NzIGNsYXNzIGRlZmluaXRpb24gaXMgcmVwbGljYXRlZCB0byBjYWxjdWxhdGlvbiBjZWxsXG5cdFx0XHRcdHRoaXMuZ2VuQ29sdW1uLmRlZmluaXRpb24uY3NzQ2xhc3MgPSBjb2x1bW4uZGVmaW5pdGlvbi5jc3NDbGFzcztcblx0XHRcdFx0XG5cdFx0XHRcdC8vZ2VuZXJhdGUgY2VsbCBhbmQgYXNzaWduIHRvIGNvcnJlY3QgY29sdW1uXG5cdFx0XHRcdHZhciBjZWxsID0gbmV3IENlbGwodGhpcy5nZW5Db2x1bW4sIHJvdyk7XG5cdFx0XHRcdGNlbGwuZ2V0RWxlbWVudCgpO1xuXHRcdFx0XHRjZWxsLmNvbHVtbiA9IGNvbHVtbjtcblx0XHRcdFx0Y2VsbC5zZXRXaWR0aCgpO1xuXHRcdFx0XHRcblx0XHRcdFx0Y29sdW1uLmNlbGxzLnB1c2goY2VsbCk7XG5cdFx0XHRcdGNlbGxzLnB1c2goY2VsbCk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZighY29sdW1uLnZpc2libGUpe1xuXHRcdFx0XHRcdGNlbGwuaGlkZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0cm93LmNlbGxzID0gY2VsbHM7XG5cdFx0fTtcblx0XHRcblx0XHRyZXR1cm4gcm93O1xuXHR9XG5cdFxuXHQvL2dlbmVyYXRlIHN0YXRzIHJvd1xuXHRnZW5lcmF0ZVJvd0RhdGEocG9zLCBkYXRhKXtcblx0XHR2YXIgcm93RGF0YSA9IHt9LFxuXHRcdGNhbGNzID0gcG9zID09IFwidG9wXCIgPyB0aGlzLnRvcENhbGNzIDogdGhpcy5ib3RDYWxjcyxcblx0XHR0eXBlID0gcG9zID09IFwidG9wXCIgPyBcInRvcENhbGNcIiA6IFwiYm90Q2FsY1wiLFxuXHRcdHBhcmFtcywgcGFyYW1LZXk7XG5cdFx0XG5cdFx0Y2FsY3MuZm9yRWFjaChmdW5jdGlvbihjb2x1bW4pe1xuXHRcdFx0dmFyIHZhbHVlcyA9IFtdO1xuXHRcdFx0XG5cdFx0XHRpZihjb2x1bW4ubW9kdWxlcy5jb2x1bW5DYWxjcyAmJiBjb2x1bW4ubW9kdWxlcy5jb2x1bW5DYWxjc1t0eXBlXSl7XG5cdFx0XHRcdGRhdGEuZm9yRWFjaChmdW5jdGlvbihpdGVtKXtcblx0XHRcdFx0XHR2YWx1ZXMucHVzaChjb2x1bW4uZ2V0RmllbGRWYWx1ZShpdGVtKSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRcblx0XHRcdFx0cGFyYW1LZXkgPSB0eXBlICsgXCJQYXJhbXNcIjtcblx0XHRcdFx0cGFyYW1zID0gdHlwZW9mIGNvbHVtbi5tb2R1bGVzLmNvbHVtbkNhbGNzW3BhcmFtS2V5XSA9PT0gXCJmdW5jdGlvblwiID8gY29sdW1uLm1vZHVsZXMuY29sdW1uQ2FsY3NbcGFyYW1LZXldKHZhbHVlcywgZGF0YSkgOiBjb2x1bW4ubW9kdWxlcy5jb2x1bW5DYWxjc1twYXJhbUtleV07XG5cdFx0XHRcdFxuXHRcdFx0XHRjb2x1bW4uc2V0RmllbGRWYWx1ZShyb3dEYXRhLCBjb2x1bW4ubW9kdWxlcy5jb2x1bW5DYWxjc1t0eXBlXSh2YWx1ZXMsIGRhdGEsIHBhcmFtcykpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiByb3dEYXRhO1xuXHR9XG5cdFxuXHRoYXNUb3BDYWxjcygpe1xuXHRcdHJldHVyblx0ISEodGhpcy50b3BDYWxjcy5sZW5ndGgpO1xuXHR9XG5cdFxuXHRoYXNCb3R0b21DYWxjcygpe1xuXHRcdHJldHVyblx0ISEodGhpcy5ib3RDYWxjcy5sZW5ndGgpO1xuXHR9XG5cdFxuXHQvL2hhbmRsZSB0YWJsZSByZWRyYXdcblx0cmVkcmF3KCl7XG5cdFx0aWYodGhpcy50b3BSb3cpe1xuXHRcdFx0dGhpcy50b3BSb3cubm9ybWFsaXplSGVpZ2h0KHRydWUpO1xuXHRcdH1cblx0XHRpZih0aGlzLmJvdFJvdyl7XG5cdFx0XHR0aGlzLmJvdFJvdy5ub3JtYWxpemVIZWlnaHQodHJ1ZSk7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL3JldHVybiB0aGUgY2FsY3VsYXRlZFxuXHRnZXRSZXN1bHRzKCl7XG5cdFx0dmFyIHJlc3VsdHMgPSB7fSxcblx0XHRncm91cHM7XG5cdFx0XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQnkgJiYgdGhpcy50YWJsZS5tb2RFeGlzdHMoXCJncm91cFJvd3NcIikpe1xuXHRcdFx0Z3JvdXBzID0gdGhpcy50YWJsZS5tb2R1bGVzLmdyb3VwUm93cy5nZXRHcm91cHModHJ1ZSk7XG5cdFx0XHRcblx0XHRcdGdyb3Vwcy5mb3JFYWNoKChncm91cCkgPT4ge1xuXHRcdFx0XHRyZXN1bHRzW2dyb3VwLmdldEtleSgpXSA9IHRoaXMuZ2V0R3JvdXBSZXN1bHRzKGdyb3VwKTtcblx0XHRcdH0pO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJlc3VsdHMgPSB7XG5cdFx0XHRcdHRvcDogdGhpcy50b3BSb3cgPyB0aGlzLnRvcFJvdy5nZXREYXRhKCkgOiB7fSxcblx0XHRcdFx0Ym90dG9tOiB0aGlzLmJvdFJvdyA/IHRoaXMuYm90Um93LmdldERhdGEoKSA6IHt9LFxuXHRcdFx0fTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblx0XG5cdC8vZ2V0IHJlc3VsdHMgZnJvbSBhIGdyb3VwXG5cdGdldEdyb3VwUmVzdWx0cyhncm91cCl7XG5cdFx0dmFyIGdyb3VwT2JqID0gZ3JvdXAuX2dldFNlbGYoKSxcblx0XHRzdWJHcm91cHMgPSBncm91cC5nZXRTdWJHcm91cHMoKSxcblx0XHRzdWJHcm91cFJlc3VsdHMgPSB7fSxcblx0XHRyZXN1bHRzID0ge307XG5cdFx0XG5cdFx0c3ViR3JvdXBzLmZvckVhY2goKHN1Ymdyb3VwKSA9PiB7XG5cdFx0XHRzdWJHcm91cFJlc3VsdHNbc3ViZ3JvdXAuZ2V0S2V5KCldID0gdGhpcy5nZXRHcm91cFJlc3VsdHMoc3ViZ3JvdXApO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHJlc3VsdHMgPSB7XG5cdFx0XHR0b3A6IGdyb3VwT2JqLmNhbGNzLnRvcCA/IGdyb3VwT2JqLmNhbGNzLnRvcC5nZXREYXRhKCkgOiB7fSxcblx0XHRcdGJvdHRvbTogZ3JvdXBPYmouY2FsY3MuYm90dG9tID8gZ3JvdXBPYmouY2FsY3MuYm90dG9tLmdldERhdGEoKSA6IHt9LFxuXHRcdFx0Z3JvdXBzOiBzdWJHcm91cFJlc3VsdHMsXG5cdFx0fTtcblx0XHRcblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXHRcblx0YWRqdXN0Rm9yU2Nyb2xsYmFyKHdpZHRoKXtcblx0XHRpZih0aGlzLmJvdFJvdyl7XG5cdFx0XHRpZih0aGlzLnRhYmxlLnJ0bCl7XG5cdFx0XHRcdHRoaXMuYm90RWxlbWVudC5zdHlsZS5wYWRkaW5nTGVmdCA9IHdpZHRoICsgXCJweFwiO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmJvdEVsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gd2lkdGggKyBcInB4XCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbkNvbHVtbkNhbGNzLm1vZHVsZU5hbWUgPSBcImNvbHVtbkNhbGNzXCI7XG5cbi8vbG9hZCBkZWZhdWx0c1xuQ29sdW1uQ2FsY3MuY2FsY3VsYXRpb25zID0gZGVmYXVsdENhbGN1bGF0aW9ucztcblxuY2xhc3MgRGF0YVRyZWUgZXh0ZW5kcyBNb2R1bGV7XG5cblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblxuXHRcdHRoaXMuaW5kZW50ID0gMTA7XG5cdFx0dGhpcy5maWVsZCA9IFwiXCI7XG5cdFx0dGhpcy5jb2xsYXBzZUVsID0gbnVsbDtcblx0XHR0aGlzLmV4cGFuZEVsID0gbnVsbDtcblx0XHR0aGlzLmJyYW5jaEVsID0gbnVsbDtcblx0XHR0aGlzLmVsZW1lbnRGaWVsZCA9IGZhbHNlO1xuXG5cdFx0dGhpcy5zdGFydE9wZW4gPSBmdW5jdGlvbigpe307XG5cblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJkYXRhVHJlZVwiLCBmYWxzZSk7IC8vZW5hYmxlIGRhdGEgdHJlZVxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImRhdGFUcmVlRmlsdGVyXCIsIHRydWUpOyAvL2ZpbHRlciBjaGlsZCByb3dzXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZGF0YVRyZWVTb3J0XCIsIHRydWUpOyAvL3NvcnQgY2hpbGQgcm93c1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImRhdGFUcmVlRWxlbWVudENvbHVtblwiLCBmYWxzZSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZGF0YVRyZWVCcmFuY2hFbGVtZW50XCIsIHRydWUpOy8vc2hvdyBkYXRhIHRyZWUgYnJhbmNoIGVsZW1lbnRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJkYXRhVHJlZUNoaWxkSW5kZW50XCIsIDkpOyAvL2RhdGEgdHJlZSBjaGlsZCBpbmRlbnQgaW4gcHhcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJkYXRhVHJlZUNoaWxkRmllbGRcIiwgXCJfY2hpbGRyZW5cIik7Ly9kYXRhIHRyZSBjb2x1bW4gZmllbGQgdG8gbG9vayBmb3IgY2hpbGQgcm93c1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImRhdGFUcmVlQ29sbGFwc2VFbGVtZW50XCIsIGZhbHNlKTsvL2RhdGEgdHJlZSByb3cgY29sbGFwc2UgZWxlbWVudFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImRhdGFUcmVlRXhwYW5kRWxlbWVudFwiLCBmYWxzZSk7Ly9kYXRhIHRyZWUgcm93IGV4cGFuZCBlbGVtZW50XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZGF0YVRyZWVTdGFydEV4cGFuZGVkXCIsIGZhbHNlKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJkYXRhVHJlZUNoaWxkQ29sdW1uQ2FsY3NcIiwgZmFsc2UpOy8vaW5jbHVkZSB2aXNpYmxlIGRhdGEgdHJlZSByb3dzIGluIGNvbHVtbiBjYWxjdWxhdGlvbnNcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJkYXRhVHJlZVNlbGVjdFByb3BhZ2F0ZVwiLCBmYWxzZSk7Ly9zZWxlY3RpbmcgYSBwYXJlbnQgcm93IHNlbGVjdHMgaXRzIGNoaWxkcmVuXG5cblx0XHQvL3JlZ2lzdGVyIGNvbXBvbmVudCBmdW5jdGlvbnNcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJyb3dcIiwgXCJ0cmVlQ29sbGFwc2VcIiwgdGhpcy5jb2xsYXBzZVJvdy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJyb3dcIiwgXCJ0cmVlRXhwYW5kXCIsIHRoaXMuZXhwYW5kUm93LmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcInJvd1wiLCBcInRyZWVUb2dnbGVcIiwgdGhpcy50b2dnbGVSb3cuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwicm93XCIsIFwiZ2V0VHJlZVBhcmVudFwiLCB0aGlzLmdldFRyZWVQYXJlbnQuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwicm93XCIsIFwiZ2V0VHJlZUNoaWxkcmVuXCIsIHRoaXMuZ2V0Um93Q2hpbGRyZW4uYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwicm93XCIsIFwiYWRkVHJlZUNoaWxkXCIsIHRoaXMuYWRkVHJlZUNoaWxkUm93LmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcInJvd1wiLCBcImlzVHJlZUV4cGFuZGVkXCIsIHRoaXMuaXNSb3dFeHBhbmRlZC5iaW5kKHRoaXMpKTtcblx0fVxuXG5cdGluaXRpYWxpemUoKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZGF0YVRyZWUpe1xuXHRcdFx0dmFyIGR1bW15RWwgPSBudWxsLFxuXHRcdFx0b3B0aW9ucyA9IHRoaXMudGFibGUub3B0aW9ucztcblxuXHRcdFx0dGhpcy5maWVsZCA9IG9wdGlvbnMuZGF0YVRyZWVDaGlsZEZpZWxkO1xuXHRcdFx0dGhpcy5pbmRlbnQgPSBvcHRpb25zLmRhdGFUcmVlQ2hpbGRJbmRlbnQ7XG5cblx0XHRcdGlmKHRoaXMub3B0aW9ucyhcIm1vdmFibGVSb3dzXCIpKXtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiVGhlIG1vdmFibGVSb3dzIG9wdGlvbiBpcyBub3QgYXZhaWxhYmxlIHdpdGggZGF0YVRyZWUgZW5hYmxlZCwgbW92aW5nIG9mIGNoaWxkIHJvd3MgY291bGQgcmVzdWx0IGluIHVucHJlZGljdGFibGUgYmVoYXZpb3JcIik7XG5cdFx0XHR9XG5cblx0XHRcdGlmKG9wdGlvbnMuZGF0YVRyZWVCcmFuY2hFbGVtZW50KXtcblxuXHRcdFx0XHRpZihvcHRpb25zLmRhdGFUcmVlQnJhbmNoRWxlbWVudCA9PT0gdHJ1ZSl7XG5cdFx0XHRcdFx0dGhpcy5icmFuY2hFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XHRcdFx0dGhpcy5icmFuY2hFbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWRhdGEtdHJlZS1icmFuY2hcIik7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRpZih0eXBlb2Ygb3B0aW9ucy5kYXRhVHJlZUJyYW5jaEVsZW1lbnQgPT09IFwic3RyaW5nXCIpe1xuXHRcdFx0XHRcdFx0ZHVtbXlFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XHRcdFx0XHRkdW1teUVsLmlubmVySFRNTCA9IG9wdGlvbnMuZGF0YVRyZWVCcmFuY2hFbGVtZW50O1xuXHRcdFx0XHRcdFx0dGhpcy5icmFuY2hFbCA9IGR1bW15RWwuZmlyc3RDaGlsZDtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHR0aGlzLmJyYW5jaEVsID0gb3B0aW9ucy5kYXRhVHJlZUJyYW5jaEVsZW1lbnQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMuYnJhbmNoRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdFx0XHR0aGlzLmJyYW5jaEVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItZGF0YS10cmVlLWJyYW5jaC1lbXB0eVwiKTtcblx0XHRcdH1cblxuXHRcdFx0aWYob3B0aW9ucy5kYXRhVHJlZUNvbGxhcHNlRWxlbWVudCl7XG5cdFx0XHRcdGlmKHR5cGVvZiBvcHRpb25zLmRhdGFUcmVlQ29sbGFwc2VFbGVtZW50ID09PSBcInN0cmluZ1wiKXtcblx0XHRcdFx0XHRkdW1teUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcdFx0XHRkdW1teUVsLmlubmVySFRNTCA9IG9wdGlvbnMuZGF0YVRyZWVDb2xsYXBzZUVsZW1lbnQ7XG5cdFx0XHRcdFx0dGhpcy5jb2xsYXBzZUVsID0gZHVtbXlFbC5maXJzdENoaWxkO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5jb2xsYXBzZUVsID0gb3B0aW9ucy5kYXRhVHJlZUNvbGxhcHNlRWxlbWVudDtcblx0XHRcdFx0fVxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmNvbGxhcHNlRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdFx0XHR0aGlzLmNvbGxhcHNlRWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbFwiKTtcblx0XHRcdFx0dGhpcy5jb2xsYXBzZUVsLnRhYkluZGV4ID0gMDtcblx0XHRcdFx0dGhpcy5jb2xsYXBzZUVsLmlubmVySFRNTCA9IFwiPGRpdiBjbGFzcz0ndGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sLWNvbGxhcHNlJz48L2Rpdj5cIjtcblx0XHRcdH1cblxuXHRcdFx0aWYob3B0aW9ucy5kYXRhVHJlZUV4cGFuZEVsZW1lbnQpe1xuXHRcdFx0XHRpZih0eXBlb2Ygb3B0aW9ucy5kYXRhVHJlZUV4cGFuZEVsZW1lbnQgPT09IFwic3RyaW5nXCIpe1xuXHRcdFx0XHRcdGR1bW15RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdFx0XHRcdGR1bW15RWwuaW5uZXJIVE1MID0gb3B0aW9ucy5kYXRhVHJlZUV4cGFuZEVsZW1lbnQ7XG5cdFx0XHRcdFx0dGhpcy5leHBhbmRFbCA9IGR1bW15RWwuZmlyc3RDaGlsZDtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuZXhwYW5kRWwgPSBvcHRpb25zLmRhdGFUcmVlRXhwYW5kRWxlbWVudDtcblx0XHRcdFx0fVxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmV4cGFuZEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcdFx0dGhpcy5leHBhbmRFbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sXCIpO1xuXHRcdFx0XHR0aGlzLmV4cGFuZEVsLnRhYkluZGV4ID0gMDtcblx0XHRcdFx0dGhpcy5leHBhbmRFbC5pbm5lckhUTUwgPSBcIjxkaXYgY2xhc3M9J3RhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbC1leHBhbmQnPjwvZGl2PlwiO1xuXHRcdFx0fVxuXG5cblx0XHRcdHN3aXRjaCh0eXBlb2Ygb3B0aW9ucy5kYXRhVHJlZVN0YXJ0RXhwYW5kZWQpe1xuXHRcdFx0XHRjYXNlIFwiYm9vbGVhblwiOlxuXHRcdFx0XHRcdHRoaXMuc3RhcnRPcGVuID0gZnVuY3Rpb24ocm93LCBpbmRleCl7XG5cdFx0XHRcdFx0XHRyZXR1cm4gb3B0aW9ucy5kYXRhVHJlZVN0YXJ0RXhwYW5kZWQ7XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIFwiZnVuY3Rpb25cIjpcblx0XHRcdFx0XHR0aGlzLnN0YXJ0T3BlbiA9IG9wdGlvbnMuZGF0YVRyZWVTdGFydEV4cGFuZGVkO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0dGhpcy5zdGFydE9wZW4gPSBmdW5jdGlvbihyb3csIGluZGV4KXtcblx0XHRcdFx0XHRcdHJldHVybiBvcHRpb25zLmRhdGFUcmVlU3RhcnRFeHBhbmRlZFtpbmRleF07XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctaW5pdFwiLCB0aGlzLmluaXRpYWxpemVSb3cuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1sYXlvdXQtYWZ0ZXJcIiwgdGhpcy5sYXlvdXRSb3cuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1kZWxldGVkXCIsIHRoaXMucm93RGVsZXRlLmJpbmQodGhpcyksMCk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1kYXRhLWNoYW5nZWRcIiwgdGhpcy5yb3dEYXRhQ2hhbmdlZC5iaW5kKHRoaXMpLCAxMCk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNlbGwtdmFsdWUtdXBkYXRlZFwiLCB0aGlzLmNlbGxWYWx1ZUNoYW5nZWQuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImVkaXQtY2FuY2VsbGVkXCIsIHRoaXMuY2VsbFZhbHVlQ2hhbmdlZC5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLW1vdmluZy1yb3dzXCIsIHRoaXMuY29sdW1uTW92aW5nLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJ0YWJsZS1idWlsdFwiLCB0aGlzLmluaXRpYWxpemVFbGVtZW50RmllbGQuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInRhYmxlLXJlZHJhd2luZ1wiLCB0aGlzLnRhYmxlUmVkcmF3aW5nLmJpbmQodGhpcykpO1xuXG5cdFx0XHR0aGlzLnJlZ2lzdGVyRGlzcGxheUhhbmRsZXIodGhpcy5nZXRSb3dzLmJpbmQodGhpcyksIDMwKTtcblx0XHR9XG5cdH1cblxuXHR0YWJsZVJlZHJhd2luZyhmb3JjZSl7XG5cdFx0dmFyIHJvd3M7XG5cblx0XHRpZihmb3JjZSl7XG5cdFx0XHRyb3dzID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldFJvd3MoKTtcblx0XHRcdFxuXHRcdFx0cm93cy5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdFx0dGhpcy5yZWluaXRpYWxpemVSb3dDaGlsZHJlbihyb3cpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0aW5pdGlhbGl6ZUVsZW1lbnRGaWVsZCgpe1xuXHRcdHZhciBmaXJzdENvbCA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5nZXRGaXJzdFZpc2libGVDb2x1bW4oKTtcblxuXHRcdHRoaXMuZWxlbWVudEZpZWxkID0gdGhpcy50YWJsZS5vcHRpb25zLmRhdGFUcmVlRWxlbWVudENvbHVtbiB8fCAoZmlyc3RDb2wgPyBmaXJzdENvbC5maWVsZCA6IGZhbHNlKTtcblx0fVxuXHRcblx0Z2V0Um93Q2hpbGRyZW4ocm93KXtcblx0XHRyZXR1cm4gdGhpcy5nZXRUcmVlQ2hpbGRyZW4ocm93LCB0cnVlKTtcblx0fVxuXG5cdGNvbHVtbk1vdmluZygpe1xuXHRcdHZhciByb3dzID0gW107XG5cblx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIucm93cy5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdHJvd3MgPSByb3dzLmNvbmNhdCh0aGlzLmdldFRyZWVDaGlsZHJlbihyb3csIGZhbHNlLCB0cnVlKSk7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gcm93cztcblx0fVxuXG5cdHJvd0RhdGFDaGFuZ2VkKHJvdywgdmlzaWJsZSwgdXBkYXRlZERhdGEpe1xuXHRcdGlmKHRoaXMucmVkcmF3TmVlZGVkKHVwZGF0ZWREYXRhKSl7XG5cdFx0XHR0aGlzLmluaXRpYWxpemVSb3cocm93KTtcblxuXHRcdFx0aWYodmlzaWJsZSl7XG5cdFx0XHRcdHRoaXMubGF5b3V0Um93KHJvdyk7XG5cdFx0XHRcdHRoaXMucmVmcmVzaERhdGEodHJ1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Y2VsbFZhbHVlQ2hhbmdlZChjZWxsKXtcblx0XHR2YXIgZmllbGQgPSBjZWxsLmNvbHVtbi5nZXRGaWVsZCgpO1xuXG5cdFx0aWYoZmllbGQgPT09IHRoaXMuZWxlbWVudEZpZWxkKXtcblx0XHRcdHRoaXMubGF5b3V0Um93KGNlbGwucm93KTtcblx0XHR9XG5cdH1cblxuXHRpbml0aWFsaXplUm93KHJvdyl7XG5cdFx0dmFyIGNoaWxkQXJyYXkgPSByb3cuZ2V0RGF0YSgpW3RoaXMuZmllbGRdO1xuXHRcdHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheShjaGlsZEFycmF5KTtcblxuXHRcdHZhciBjaGlsZHJlbiA9IGlzQXJyYXkgfHwgKCFpc0FycmF5ICYmIHR5cGVvZiBjaGlsZEFycmF5ID09PSBcIm9iamVjdFwiICYmIGNoaWxkQXJyYXkgIT09IG51bGwpO1xuXG5cdFx0aWYoIWNoaWxkcmVuICYmIHJvdy5tb2R1bGVzLmRhdGFUcmVlICYmIHJvdy5tb2R1bGVzLmRhdGFUcmVlLmJyYW5jaEVsKXtcblx0XHRcdHJvdy5tb2R1bGVzLmRhdGFUcmVlLmJyYW5jaEVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocm93Lm1vZHVsZXMuZGF0YVRyZWUuYnJhbmNoRWwpO1xuXHRcdH1cblxuXHRcdGlmKCFjaGlsZHJlbiAmJiByb3cubW9kdWxlcy5kYXRhVHJlZSAmJiByb3cubW9kdWxlcy5kYXRhVHJlZS5jb250cm9sRWwpe1xuXHRcdFx0cm93Lm1vZHVsZXMuZGF0YVRyZWUuY29udHJvbEVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocm93Lm1vZHVsZXMuZGF0YVRyZWUuY29udHJvbEVsKTtcblx0XHR9XG5cblx0XHRyb3cubW9kdWxlcy5kYXRhVHJlZSA9IHtcblx0XHRcdGluZGV4OiByb3cubW9kdWxlcy5kYXRhVHJlZSA/IHJvdy5tb2R1bGVzLmRhdGFUcmVlLmluZGV4IDogMCxcblx0XHRcdG9wZW46IGNoaWxkcmVuID8gKHJvdy5tb2R1bGVzLmRhdGFUcmVlID8gcm93Lm1vZHVsZXMuZGF0YVRyZWUub3BlbiA6IHRoaXMuc3RhcnRPcGVuKHJvdy5nZXRDb21wb25lbnQoKSwgMCkpIDogZmFsc2UsXG5cdFx0XHRjb250cm9sRWw6IHJvdy5tb2R1bGVzLmRhdGFUcmVlICYmIGNoaWxkcmVuID8gcm93Lm1vZHVsZXMuZGF0YVRyZWUuY29udHJvbEVsIDogZmFsc2UsXG5cdFx0XHRicmFuY2hFbDogcm93Lm1vZHVsZXMuZGF0YVRyZWUgJiYgY2hpbGRyZW4gPyByb3cubW9kdWxlcy5kYXRhVHJlZS5icmFuY2hFbCA6IGZhbHNlLFxuXHRcdFx0cGFyZW50OiByb3cubW9kdWxlcy5kYXRhVHJlZSA/IHJvdy5tb2R1bGVzLmRhdGFUcmVlLnBhcmVudCA6IGZhbHNlLFxuXHRcdFx0Y2hpbGRyZW46Y2hpbGRyZW4sXG5cdFx0fTtcblx0fVxuXG5cdHJlaW5pdGlhbGl6ZVJvd0NoaWxkcmVuKHJvdyl7XG5cdFx0dmFyIGNoaWxkcmVuID0gdGhpcy5nZXRUcmVlQ2hpbGRyZW4ocm93LCBmYWxzZSwgdHJ1ZSk7XG5cblx0XHRjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uKGNoaWxkKXtcblx0XHRcdGNoaWxkLnJlaW5pdGlhbGl6ZSh0cnVlKTtcblx0XHR9KTtcblx0fVxuXG5cdGxheW91dFJvdyhyb3cpe1xuXHRcdHZhciBjZWxsID0gdGhpcy5lbGVtZW50RmllbGQgPyByb3cuZ2V0Q2VsbCh0aGlzLmVsZW1lbnRGaWVsZCkgOiByb3cuZ2V0Q2VsbHMoKVswXSxcblx0XHRlbCA9IGNlbGwuZ2V0RWxlbWVudCgpLFxuXHRcdGNvbmZpZyA9IHJvdy5tb2R1bGVzLmRhdGFUcmVlO1xuXG5cdFx0aWYoY29uZmlnLmJyYW5jaEVsKXtcblx0XHRcdGlmKGNvbmZpZy5icmFuY2hFbC5wYXJlbnROb2RlKXtcblx0XHRcdFx0Y29uZmlnLmJyYW5jaEVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY29uZmlnLmJyYW5jaEVsKTtcblx0XHRcdH1cblx0XHRcdGNvbmZpZy5icmFuY2hFbCA9IGZhbHNlO1xuXHRcdH1cblxuXHRcdGlmKGNvbmZpZy5jb250cm9sRWwpe1xuXHRcdFx0aWYoY29uZmlnLmNvbnRyb2xFbC5wYXJlbnROb2RlKXtcblx0XHRcdFx0Y29uZmlnLmNvbnRyb2xFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNvbmZpZy5jb250cm9sRWwpO1xuXHRcdFx0fVxuXHRcdFx0Y29uZmlnLmNvbnRyb2xFbCA9IGZhbHNlO1xuXHRcdH1cblxuXHRcdHRoaXMuZ2VuZXJhdGVDb250cm9sRWxlbWVudChyb3csIGVsKTtcblxuXHRcdHJvdy5nZXRFbGVtZW50KCkuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci10cmVlLWxldmVsLVwiICsgY29uZmlnLmluZGV4KTtcblxuXHRcdGlmKGNvbmZpZy5pbmRleCl7XG5cdFx0XHRpZih0aGlzLmJyYW5jaEVsKXtcblx0XHRcdFx0Y29uZmlnLmJyYW5jaEVsID0gdGhpcy5icmFuY2hFbC5jbG9uZU5vZGUodHJ1ZSk7XG5cdFx0XHRcdGVsLmluc2VydEJlZm9yZShjb25maWcuYnJhbmNoRWwsIGVsLmZpcnN0Q2hpbGQpO1xuXG5cdFx0XHRcdGlmKHRoaXMudGFibGUucnRsKXtcblx0XHRcdFx0XHRjb25maWcuYnJhbmNoRWwuc3R5bGUubWFyZ2luUmlnaHQgPSAoKChjb25maWcuYnJhbmNoRWwub2Zmc2V0V2lkdGggKyBjb25maWcuYnJhbmNoRWwuc3R5bGUubWFyZ2luTGVmdCkgKiAoY29uZmlnLmluZGV4IC0gMSkpICsgKGNvbmZpZy5pbmRleCAqIHRoaXMuaW5kZW50KSkgKyBcInB4XCI7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRjb25maWcuYnJhbmNoRWwuc3R5bGUubWFyZ2luTGVmdCA9ICgoKGNvbmZpZy5icmFuY2hFbC5vZmZzZXRXaWR0aCArIGNvbmZpZy5icmFuY2hFbC5zdHlsZS5tYXJnaW5SaWdodCkgKiAoY29uZmlnLmluZGV4IC0gMSkpICsgKGNvbmZpZy5pbmRleCAqIHRoaXMuaW5kZW50KSkgKyBcInB4XCI7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblxuXHRcdFx0XHRpZih0aGlzLnRhYmxlLnJ0bCl7XG5cdFx0XHRcdFx0ZWwuc3R5bGUucGFkZGluZ1JpZ2h0ID0gcGFyc2VJbnQod2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctcmlnaHQnKSkgKyAoY29uZmlnLmluZGV4ICogdGhpcy5pbmRlbnQpICsgXCJweFwiO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0ZWwuc3R5bGUucGFkZGluZ0xlZnQgPSBwYXJzZUludCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZSgncGFkZGluZy1sZWZ0JykpICsgKGNvbmZpZy5pbmRleCAqIHRoaXMuaW5kZW50KSArIFwicHhcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGdlbmVyYXRlQ29udHJvbEVsZW1lbnQocm93LCBlbCl7XG5cdFx0dmFyIGNvbmZpZyA9IHJvdy5tb2R1bGVzLmRhdGFUcmVlLFxuXHRcdG9sZENvbnRyb2wgPSBjb25maWcuY29udHJvbEVsO1xuXG5cdFx0ZWwgPSBlbCB8fCByb3cuZ2V0Q2VsbHMoKVswXS5nZXRFbGVtZW50KCk7XG5cblx0XHRpZihjb25maWcuY2hpbGRyZW4gIT09IGZhbHNlKXtcblxuXHRcdFx0aWYoY29uZmlnLm9wZW4pe1xuXHRcdFx0XHRjb25maWcuY29udHJvbEVsID0gdGhpcy5jb2xsYXBzZUVsLmNsb25lTm9kZSh0cnVlKTtcblx0XHRcdFx0Y29uZmlnLmNvbnRyb2xFbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcblx0XHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdHRoaXMuY29sbGFwc2VSb3cocm93KTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGNvbmZpZy5jb250cm9sRWwgPSB0aGlzLmV4cGFuZEVsLmNsb25lTm9kZSh0cnVlKTtcblx0XHRcdFx0Y29uZmlnLmNvbnRyb2xFbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcblx0XHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdHRoaXMuZXhwYW5kUm93KHJvdyk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25maWcuY29udHJvbEVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgKGUpID0+IHtcblx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRpZihvbGRDb250cm9sICYmIG9sZENvbnRyb2wucGFyZW50Tm9kZSA9PT0gZWwpe1xuXHRcdFx0XHRvbGRDb250cm9sLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGNvbmZpZy5jb250cm9sRWwsb2xkQ29udHJvbCk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGVsLmluc2VydEJlZm9yZShjb25maWcuY29udHJvbEVsLCBlbC5maXJzdENoaWxkKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRnZXRSb3dzKHJvd3Mpe1xuXHRcdHZhciBvdXRwdXQgPSBbXTtcblxuXHRcdHJvd3MuZm9yRWFjaCgocm93LCBpKSA9PiB7XG5cdFx0XHR2YXIgY29uZmlnLCBjaGlsZHJlbjtcblxuXHRcdFx0b3V0cHV0LnB1c2gocm93KTtcblxuXHRcdFx0aWYocm93IGluc3RhbmNlb2YgUm93KXtcblxuXHRcdFx0XHRyb3cuY3JlYXRlKCk7XG5cblx0XHRcdFx0Y29uZmlnID0gcm93Lm1vZHVsZXMuZGF0YVRyZWU7XG5cblx0XHRcdFx0aWYoIWNvbmZpZy5pbmRleCAmJiBjb25maWcuY2hpbGRyZW4gIT09IGZhbHNlKXtcblx0XHRcdFx0XHRjaGlsZHJlbiA9IHRoaXMuZ2V0Q2hpbGRyZW4ocm93KTtcblxuXHRcdFx0XHRcdGNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiB7XG5cdFx0XHRcdFx0XHRjaGlsZC5jcmVhdGUoKTtcblx0XHRcdFx0XHRcdG91dHB1dC5wdXNoKGNoaWxkKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdGdldENoaWxkcmVuKHJvdywgYWxsQ2hpbGRyZW4pe1xuXHRcdHZhciBjb25maWcgPSByb3cubW9kdWxlcy5kYXRhVHJlZSxcblx0XHRjaGlsZHJlbiA9IFtdLFxuXHRcdG91dHB1dCA9IFtdO1xuXG5cdFx0aWYoY29uZmlnLmNoaWxkcmVuICE9PSBmYWxzZSAmJiAoY29uZmlnLm9wZW4gfHwgYWxsQ2hpbGRyZW4pKXtcblx0XHRcdGlmKCFBcnJheS5pc0FycmF5KGNvbmZpZy5jaGlsZHJlbikpe1xuXHRcdFx0XHRjb25maWcuY2hpbGRyZW4gPSB0aGlzLmdlbmVyYXRlQ2hpbGRyZW4ocm93KTtcblx0XHRcdH1cblxuXHRcdFx0aWYodGhpcy50YWJsZS5tb2RFeGlzdHMoXCJmaWx0ZXJcIikgJiYgdGhpcy50YWJsZS5vcHRpb25zLmRhdGFUcmVlRmlsdGVyKXtcblx0XHRcdFx0Y2hpbGRyZW4gPSB0aGlzLnRhYmxlLm1vZHVsZXMuZmlsdGVyLmZpbHRlcihjb25maWcuY2hpbGRyZW4pO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjaGlsZHJlbiA9IGNvbmZpZy5jaGlsZHJlbjtcblx0XHRcdH1cblxuXHRcdFx0aWYodGhpcy50YWJsZS5tb2RFeGlzdHMoXCJzb3J0XCIpICYmIHRoaXMudGFibGUub3B0aW9ucy5kYXRhVHJlZVNvcnQpe1xuXHRcdFx0XHR0aGlzLnRhYmxlLm1vZHVsZXMuc29ydC5zb3J0KGNoaWxkcmVuKTtcblx0XHRcdH1cblxuXHRcdFx0Y2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IHtcblx0XHRcdFx0b3V0cHV0LnB1c2goY2hpbGQpO1xuXG5cdFx0XHRcdHZhciBzdWJDaGlsZHJlbiA9IHRoaXMuZ2V0Q2hpbGRyZW4oY2hpbGQpO1xuXG5cdFx0XHRcdHN1YkNoaWxkcmVuLmZvckVhY2goKHN1YikgPT4ge1xuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHN1Yik7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdGdlbmVyYXRlQ2hpbGRyZW4ocm93KXtcblx0XHR2YXIgY2hpbGRyZW4gPSBbXTtcblxuXHRcdHZhciBjaGlsZEFycmF5ID0gcm93LmdldERhdGEoKVt0aGlzLmZpZWxkXTtcblxuXHRcdGlmKCFBcnJheS5pc0FycmF5KGNoaWxkQXJyYXkpKXtcblx0XHRcdGNoaWxkQXJyYXkgPSBbY2hpbGRBcnJheV07XG5cdFx0fVxuXG5cdFx0Y2hpbGRBcnJheS5mb3JFYWNoKChjaGlsZERhdGEpID0+IHtcblx0XHRcdHZhciBjaGlsZFJvdyA9IG5ldyBSb3coY2hpbGREYXRhIHx8IHt9LCB0aGlzLnRhYmxlLnJvd01hbmFnZXIpO1xuXG5cdFx0XHRjaGlsZFJvdy5jcmVhdGUoKTtcblxuXHRcdFx0Y2hpbGRSb3cubW9kdWxlcy5kYXRhVHJlZS5pbmRleCA9IHJvdy5tb2R1bGVzLmRhdGFUcmVlLmluZGV4ICsgMTtcblx0XHRcdGNoaWxkUm93Lm1vZHVsZXMuZGF0YVRyZWUucGFyZW50ID0gcm93O1xuXG5cdFx0XHRpZihjaGlsZFJvdy5tb2R1bGVzLmRhdGFUcmVlLmNoaWxkcmVuKXtcblx0XHRcdFx0Y2hpbGRSb3cubW9kdWxlcy5kYXRhVHJlZS5vcGVuID0gdGhpcy5zdGFydE9wZW4oY2hpbGRSb3cuZ2V0Q29tcG9uZW50KCksIGNoaWxkUm93Lm1vZHVsZXMuZGF0YVRyZWUuaW5kZXgpO1xuXHRcdFx0fVxuXHRcdFx0Y2hpbGRyZW4ucHVzaChjaGlsZFJvdyk7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gY2hpbGRyZW47XG5cdH1cblxuXHRleHBhbmRSb3cocm93LCBzaWxlbnQpe1xuXHRcdHZhciBjb25maWcgPSByb3cubW9kdWxlcy5kYXRhVHJlZTtcblxuXHRcdGlmKGNvbmZpZy5jaGlsZHJlbiAhPT0gZmFsc2Upe1xuXHRcdFx0Y29uZmlnLm9wZW4gPSB0cnVlO1xuXG5cdFx0XHRyb3cucmVpbml0aWFsaXplKCk7XG5cblx0XHRcdHRoaXMucmVmcmVzaERhdGEodHJ1ZSk7XG5cblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcImRhdGFUcmVlUm93RXhwYW5kZWRcIiwgcm93LmdldENvbXBvbmVudCgpLCByb3cubW9kdWxlcy5kYXRhVHJlZS5pbmRleCk7XG5cdFx0fVxuXHR9XG5cblx0Y29sbGFwc2VSb3cocm93KXtcblx0XHR2YXIgY29uZmlnID0gcm93Lm1vZHVsZXMuZGF0YVRyZWU7XG5cblx0XHRpZihjb25maWcuY2hpbGRyZW4gIT09IGZhbHNlKXtcblx0XHRcdGNvbmZpZy5vcGVuID0gZmFsc2U7XG5cblx0XHRcdHJvdy5yZWluaXRpYWxpemUoKTtcblxuXHRcdFx0dGhpcy5yZWZyZXNoRGF0YSh0cnVlKTtcblxuXHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwiZGF0YVRyZWVSb3dDb2xsYXBzZWRcIiwgcm93LmdldENvbXBvbmVudCgpLCByb3cubW9kdWxlcy5kYXRhVHJlZS5pbmRleCk7XG5cdFx0fVxuXHR9XG5cblx0dG9nZ2xlUm93KHJvdyl7XG5cdFx0dmFyIGNvbmZpZyA9IHJvdy5tb2R1bGVzLmRhdGFUcmVlO1xuXG5cdFx0aWYoY29uZmlnLmNoaWxkcmVuICE9PSBmYWxzZSl7XG5cdFx0XHRpZihjb25maWcub3Blbil7XG5cdFx0XHRcdHRoaXMuY29sbGFwc2VSb3cocm93KTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5leHBhbmRSb3cocm93KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpc1Jvd0V4cGFuZGVkKHJvdyl7XG5cdFx0cmV0dXJuIHJvdy5tb2R1bGVzLmRhdGFUcmVlLm9wZW47XG5cdH1cblxuXHRnZXRUcmVlUGFyZW50KHJvdyl7XG5cdFx0cmV0dXJuIHJvdy5tb2R1bGVzLmRhdGFUcmVlLnBhcmVudCA/IHJvdy5tb2R1bGVzLmRhdGFUcmVlLnBhcmVudC5nZXRDb21wb25lbnQoKSA6IGZhbHNlO1xuXHR9XG5cblx0Z2V0VHJlZVBhcmVudFJvb3Qocm93KXtcblx0XHRyZXR1cm4gcm93Lm1vZHVsZXMuZGF0YVRyZWUgJiYgcm93Lm1vZHVsZXMuZGF0YVRyZWUucGFyZW50ID8gdGhpcy5nZXRUcmVlUGFyZW50Um9vdChyb3cubW9kdWxlcy5kYXRhVHJlZS5wYXJlbnQpIDogcm93O1xuXHR9XG5cblx0Z2V0RmlsdGVyZWRUcmVlQ2hpbGRyZW4ocm93KXtcblx0XHR2YXIgY29uZmlnID0gcm93Lm1vZHVsZXMuZGF0YVRyZWUsXG5cdFx0b3V0cHV0ID0gW10sIGNoaWxkcmVuO1xuXG5cdFx0aWYoY29uZmlnLmNoaWxkcmVuKXtcblxuXHRcdFx0aWYoIUFycmF5LmlzQXJyYXkoY29uZmlnLmNoaWxkcmVuKSl7XG5cdFx0XHRcdGNvbmZpZy5jaGlsZHJlbiA9IHRoaXMuZ2VuZXJhdGVDaGlsZHJlbihyb3cpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZih0aGlzLnRhYmxlLm1vZEV4aXN0cyhcImZpbHRlclwiKSAmJiB0aGlzLnRhYmxlLm9wdGlvbnMuZGF0YVRyZWVGaWx0ZXIpe1xuXHRcdFx0XHRjaGlsZHJlbiA9IHRoaXMudGFibGUubW9kdWxlcy5maWx0ZXIuZmlsdGVyKGNvbmZpZy5jaGlsZHJlbik7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGNoaWxkcmVuID0gY29uZmlnLmNoaWxkcmVuO1xuXHRcdFx0fVxuXG5cdFx0XHRjaGlsZHJlbi5mb3JFYWNoKChjaGlsZFJvdykgPT4ge1xuXHRcdFx0XHRpZihjaGlsZFJvdyBpbnN0YW5jZW9mIFJvdyl7XG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goY2hpbGRSb3cpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cblx0cm93RGVsZXRlKHJvdyl7XG5cdFx0dmFyIHBhcmVudCA9IHJvdy5tb2R1bGVzLmRhdGFUcmVlLnBhcmVudCxcblx0XHRjaGlsZEluZGV4O1xuXG5cdFx0aWYocGFyZW50KXtcblx0XHRcdGNoaWxkSW5kZXggPSB0aGlzLmZpbmRDaGlsZEluZGV4KHJvdywgcGFyZW50KTtcblxuXHRcdFx0aWYoY2hpbGRJbmRleCAhPT0gZmFsc2Upe1xuXHRcdFx0XHRwYXJlbnQuZGF0YVt0aGlzLmZpZWxkXS5zcGxpY2UoY2hpbGRJbmRleCwgMSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmKCFwYXJlbnQuZGF0YVt0aGlzLmZpZWxkXS5sZW5ndGgpe1xuXHRcdFx0XHRkZWxldGUgcGFyZW50LmRhdGFbdGhpcy5maWVsZF07XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuaW5pdGlhbGl6ZVJvdyhwYXJlbnQpO1xuXHRcdFx0dGhpcy5sYXlvdXRSb3cocGFyZW50KTtcblx0XHR9XG5cblx0XHR0aGlzLnJlZnJlc2hEYXRhKHRydWUpO1xuXHR9XG5cblx0YWRkVHJlZUNoaWxkUm93KHJvdywgZGF0YSwgdG9wLCBpbmRleCl7XG5cdFx0dmFyIGNoaWxkSW5kZXggPSBmYWxzZTtcblxuXHRcdGlmKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKXtcblx0XHRcdGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuXHRcdH1cblxuXHRcdGlmKCFBcnJheS5pc0FycmF5KHJvdy5kYXRhW3RoaXMuZmllbGRdKSl7XG5cdFx0XHRyb3cuZGF0YVt0aGlzLmZpZWxkXSA9IFtdO1xuXG5cdFx0XHRyb3cubW9kdWxlcy5kYXRhVHJlZS5vcGVuID0gdGhpcy5zdGFydE9wZW4ocm93LmdldENvbXBvbmVudCgpLCByb3cubW9kdWxlcy5kYXRhVHJlZS5pbmRleCk7XG5cdFx0fVxuXG5cdFx0aWYodHlwZW9mIGluZGV4ICE9PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdGNoaWxkSW5kZXggPSB0aGlzLmZpbmRDaGlsZEluZGV4KGluZGV4LCByb3cpO1xuXG5cdFx0XHRpZihjaGlsZEluZGV4ICE9PSBmYWxzZSl7XG5cdFx0XHRcdHJvdy5kYXRhW3RoaXMuZmllbGRdLnNwbGljZSgodG9wID8gY2hpbGRJbmRleCA6IGNoaWxkSW5kZXggKyAxKSwgMCwgZGF0YSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYoY2hpbGRJbmRleCA9PT0gZmFsc2Upe1xuXHRcdFx0aWYodG9wKXtcblx0XHRcdFx0cm93LmRhdGFbdGhpcy5maWVsZF0udW5zaGlmdChkYXRhKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0cm93LmRhdGFbdGhpcy5maWVsZF0ucHVzaChkYXRhKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLmluaXRpYWxpemVSb3cocm93KTtcblx0XHR0aGlzLmxheW91dFJvdyhyb3cpO1xuXG5cdFx0dGhpcy5yZWZyZXNoRGF0YSh0cnVlKTtcblx0fVxuXG5cdGZpbmRDaGlsZEluZGV4KHN1YmplY3QsIHBhcmVudCl7XG5cdFx0dmFyIG1hdGNoID0gZmFsc2U7XG5cblx0XHRpZih0eXBlb2Ygc3ViamVjdCA9PSBcIm9iamVjdFwiKXtcblxuXHRcdFx0aWYoc3ViamVjdCBpbnN0YW5jZW9mIFJvdyl7XG5cdFx0XHRcdC8vc3ViamVjdCBpcyByb3cgZWxlbWVudFxuXHRcdFx0XHRtYXRjaCA9IHN1YmplY3QuZGF0YTtcblx0XHRcdH1lbHNlIGlmKHN1YmplY3QgaW5zdGFuY2VvZiBSb3dDb21wb25lbnQpe1xuXHRcdFx0XHQvL3N1YmplY3QgaXMgcHVibGljIHJvdyBjb21wb25lbnRcblx0XHRcdFx0bWF0Y2ggPSBzdWJqZWN0Ll9nZXRTZWxmKCkuZGF0YTtcblx0XHRcdH1lbHNlIGlmKHR5cGVvZiBIVE1MRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzdWJqZWN0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpe1xuXHRcdFx0XHRpZihwYXJlbnQubW9kdWxlcy5kYXRhVHJlZSl7XG5cdFx0XHRcdFx0bWF0Y2ggPSBwYXJlbnQubW9kdWxlcy5kYXRhVHJlZS5jaGlsZHJlbi5maW5kKChjaGlsZFJvdykgPT4ge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGNoaWxkUm93IGluc3RhbmNlb2YgUm93ID8gY2hpbGRSb3cuZWxlbWVudCA9PT0gc3ViamVjdCA6IGZhbHNlO1xuXHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0aWYobWF0Y2gpe1xuXHRcdFx0XHRcdFx0bWF0Y2ggPSBtYXRjaC5kYXRhO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fWVsc2UgaWYoc3ViamVjdCA9PT0gbnVsbCl7XG5cdFx0XHRcdG1hdGNoID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHR9ZWxzZSBpZih0eXBlb2Ygc3ViamVjdCA9PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdG1hdGNoID0gZmFsc2U7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Ly9zdWJqZWN0IHNob3VsZCBiZSB0cmVhdGVkIGFzIHRoZSBpbmRleCBvZiB0aGUgcm93XG5cdFx0XHRtYXRjaCA9IHBhcmVudC5kYXRhW3RoaXMuZmllbGRdLmZpbmQoKHJvdykgPT4ge1xuXHRcdFx0XHRyZXR1cm4gcm93LmRhdGFbdGhpcy50YWJsZS5vcHRpb25zLmluZGV4XSA9PSBzdWJqZWN0O1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYobWF0Y2gpe1xuXG5cdFx0XHRpZihBcnJheS5pc0FycmF5KHBhcmVudC5kYXRhW3RoaXMuZmllbGRdKSl7XG5cdFx0XHRcdG1hdGNoID0gcGFyZW50LmRhdGFbdGhpcy5maWVsZF0uaW5kZXhPZihtYXRjaCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmKG1hdGNoID09IC0xKXtcblx0XHRcdFx0bWF0Y2ggPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvL2NhdGNoIGFsbCBmb3IgYW55IG90aGVyIHR5cGUgb2YgaW5wdXRcblxuXHRcdHJldHVybiBtYXRjaDtcblx0fVxuXG5cdGdldFRyZWVDaGlsZHJlbihyb3csIGNvbXBvbmVudCwgcmVjdXJzZSl7XG5cdFx0dmFyIGNvbmZpZyA9IHJvdy5tb2R1bGVzLmRhdGFUcmVlLFxuXHRcdG91dHB1dCA9IFtdO1xuXG5cdFx0aWYoY29uZmlnICYmIGNvbmZpZy5jaGlsZHJlbil7XG5cblx0XHRcdGlmKCFBcnJheS5pc0FycmF5KGNvbmZpZy5jaGlsZHJlbikpe1xuXHRcdFx0XHRjb25maWcuY2hpbGRyZW4gPSB0aGlzLmdlbmVyYXRlQ2hpbGRyZW4ocm93KTtcblx0XHRcdH1cblxuXHRcdFx0Y29uZmlnLmNoaWxkcmVuLmZvckVhY2goKGNoaWxkUm93KSA9PiB7XG5cdFx0XHRcdGlmKGNoaWxkUm93IGluc3RhbmNlb2YgUm93KXtcblx0XHRcdFx0XHRvdXRwdXQucHVzaChjb21wb25lbnQgPyBjaGlsZFJvdy5nZXRDb21wb25lbnQoKSA6IGNoaWxkUm93KTtcblxuXHRcdFx0XHRcdGlmKHJlY3Vyc2Upe1xuXHRcdFx0XHRcdFx0b3V0cHV0ID0gb3V0cHV0LmNvbmNhdCh0aGlzLmdldFRyZWVDaGlsZHJlbihjaGlsZFJvdywgY29tcG9uZW50LCByZWN1cnNlKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cblx0Z2V0Q2hpbGRGaWVsZCgpe1xuXHRcdHJldHVybiB0aGlzLmZpZWxkO1xuXHR9XG5cblx0cmVkcmF3TmVlZGVkKGRhdGEpe1xuXHRcdHJldHVybiAodGhpcy5maWVsZCA/IHR5cGVvZiBkYXRhW3RoaXMuZmllbGRdICE9PSBcInVuZGVmaW5lZFwiIDogZmFsc2UpIHx8ICh0aGlzLmVsZW1lbnRGaWVsZCA/IHR5cGVvZiBkYXRhW3RoaXMuZWxlbWVudEZpZWxkXSAhPT0gXCJ1bmRlZmluZWRcIiA6IGZhbHNlKTtcblx0fVxufVxuXG5EYXRhVHJlZS5tb2R1bGVOYW1lID0gXCJkYXRhVHJlZVwiO1xuXG5mdW5jdGlvbiBjc3YobGlzdCwgb3B0aW9ucyA9IHt9LCBzZXRGaWxlQ29udGVudHMpe1xuXHR2YXIgZGVsaW1pdGVyID0gb3B0aW9ucy5kZWxpbWl0ZXIgPyBvcHRpb25zLmRlbGltaXRlciA6IFwiLFwiLFxuXHRmaWxlQ29udGVudHMgPSBbXSxcblx0aGVhZGVycyA9IFtdO1xuXG5cdGxpc3QuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0dmFyIGl0ZW0gPSBbXTtcblxuXHRcdHN3aXRjaChyb3cudHlwZSl7XG5cdFx0XHRjYXNlIFwiZ3JvdXBcIjpcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiRG93bmxvYWQgV2FybmluZyAtIENTViBkb3dubG9hZGVyIGNhbm5vdCBwcm9jZXNzIHJvdyBncm91cHNcIik7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwiY2FsY1wiOlxuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJEb3dubG9hZCBXYXJuaW5nIC0gQ1NWIGRvd25sb2FkZXIgY2Fubm90IHByb2Nlc3MgY29sdW1uIGNhbGN1bGF0aW9uc1wiKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgXCJoZWFkZXJcIjpcblx0XHRcdFx0cm93LmNvbHVtbnMuZm9yRWFjaCgoY29sLCBpKSA9PiB7XG5cdFx0XHRcdFx0aWYoY29sICYmIGNvbC5kZXB0aCA9PT0gMSl7XG5cdFx0XHRcdFx0XHRoZWFkZXJzW2ldID0gdHlwZW9mIGNvbC52YWx1ZSA9PSBcInVuZGVmaW5lZFwiICB8fCBjb2wudmFsdWUgPT09IG51bGwgPyBcIlwiIDogKCdcIicgKyBTdHJpbmcoY29sLnZhbHVlKS5zcGxpdCgnXCInKS5qb2luKCdcIlwiJykgKyAnXCInKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcInJvd1wiOlxuXHRcdFx0XHRyb3cuY29sdW1ucy5mb3JFYWNoKChjb2wpID0+IHtcblxuXHRcdFx0XHRcdGlmKGNvbCl7XG5cblx0XHRcdFx0XHRcdHN3aXRjaCh0eXBlb2YgY29sLnZhbHVlKXtcblx0XHRcdFx0XHRcdFx0Y2FzZSBcIm9iamVjdFwiOlxuXHRcdFx0XHRcdFx0XHRcdGNvbC52YWx1ZSA9IGNvbC52YWx1ZSAhPT0gbnVsbCA/IEpTT04uc3RyaW5naWZ5KGNvbC52YWx1ZSkgOiBcIlwiO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgXCJ1bmRlZmluZWRcIjpcblx0XHRcdFx0XHRcdFx0XHRjb2wudmFsdWUgPSBcIlwiO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpdGVtLnB1c2goJ1wiJyArIFN0cmluZyhjb2wudmFsdWUpLnNwbGl0KCdcIicpLmpvaW4oJ1wiXCInKSArICdcIicpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0ZmlsZUNvbnRlbnRzLnB1c2goaXRlbS5qb2luKGRlbGltaXRlcikpO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH0pO1xuXG5cdGlmKGhlYWRlcnMubGVuZ3RoKXtcblx0XHRmaWxlQ29udGVudHMudW5zaGlmdChoZWFkZXJzLmpvaW4oZGVsaW1pdGVyKSk7XG5cdH1cblxuXHRmaWxlQ29udGVudHMgPSBmaWxlQ29udGVudHMuam9pbihcIlxcblwiKTtcblxuXHRpZihvcHRpb25zLmJvbSl7XG5cdFx0ZmlsZUNvbnRlbnRzID0gXCJcXHVmZWZmXCIgKyBmaWxlQ29udGVudHM7XG5cdH1cblxuXHRzZXRGaWxlQ29udGVudHMoZmlsZUNvbnRlbnRzLCBcInRleHQvY3N2XCIpO1xufVxuXG5mdW5jdGlvbiBqc29uKGxpc3QsIG9wdGlvbnMsIHNldEZpbGVDb250ZW50cyl7XG5cdHZhciBmaWxlQ29udGVudHMgPSBbXTtcblxuXHRsaXN0LmZvckVhY2goKHJvdykgPT4ge1xuXHRcdHZhciBpdGVtID0ge307XG5cblx0XHRzd2l0Y2gocm93LnR5cGUpe1xuXHRcdFx0Y2FzZSBcImhlYWRlclwiOlxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcImdyb3VwXCI6XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIkRvd25sb2FkIFdhcm5pbmcgLSBKU09OIGRvd25sb2FkZXIgY2Fubm90IHByb2Nlc3Mgcm93IGdyb3Vwc1wiKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgXCJjYWxjXCI6XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIkRvd25sb2FkIFdhcm5pbmcgLSBKU09OIGRvd25sb2FkZXIgY2Fubm90IHByb2Nlc3MgY29sdW1uIGNhbGN1bGF0aW9uc1wiKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgXCJyb3dcIjpcblx0XHRcdFx0cm93LmNvbHVtbnMuZm9yRWFjaCgoY29sKSA9PiB7XG5cdFx0XHRcdFx0aWYoY29sKXtcblx0XHRcdFx0XHRcdGl0ZW1bY29sLmNvbXBvbmVudC5nZXRUaXRsZURvd25sb2FkKCkgfHwgY29sLmNvbXBvbmVudC5nZXRGaWVsZCgpXSA9IGNvbC52YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGZpbGVDb250ZW50cy5wdXNoKGl0ZW0pO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH0pO1xuXG5cdGZpbGVDb250ZW50cyA9IEpTT04uc3RyaW5naWZ5KGZpbGVDb250ZW50cywgbnVsbCwgJ1xcdCcpO1xuXG5cdHNldEZpbGVDb250ZW50cyhmaWxlQ29udGVudHMsIFwiYXBwbGljYXRpb24vanNvblwiKTtcbn1cblxuZnVuY3Rpb24gcGRmKGxpc3QsIG9wdGlvbnMgPSB7fSwgc2V0RmlsZUNvbnRlbnRzKXtcblx0dmFyIGhlYWRlciA9IFtdLFxuXHRib2R5ID0gW10sXG5cdGF1dG9UYWJsZVBhcmFtcyA9IHt9LFxuXHRyb3dHcm91cFN0eWxlcyA9IG9wdGlvbnMucm93R3JvdXBTdHlsZXMgfHwge1xuXHRcdGZvbnRTdHlsZTogXCJib2xkXCIsXG5cdFx0Zm9udFNpemU6IDEyLFxuXHRcdGNlbGxQYWRkaW5nOiA2LFxuXHRcdGZpbGxDb2xvcjogMjIwLFxuXHR9LFxuXHRyb3dDYWxjU3R5bGVzID0gb3B0aW9ucy5yb3dDYWxjU3R5bGVzIHx8IHtcblx0XHRmb250U3R5bGU6IFwiYm9sZFwiLFxuXHRcdGZvbnRTaXplOiAxMCxcblx0XHRjZWxsUGFkZGluZzogNCxcblx0XHRmaWxsQ29sb3I6IDIzMixcblx0fSxcblx0anNQREZQYXJhbXMgPSBvcHRpb25zLmpzUERGIHx8IHt9LFxuXHR0aXRsZSA9IG9wdGlvbnMudGl0bGUgPyBvcHRpb25zLnRpdGxlIDogXCJcIjtcblxuXHRpZighanNQREZQYXJhbXMub3JpZW50YXRpb24pe1xuXHRcdGpzUERGUGFyYW1zLm9yaWVudGF0aW9uID0gb3B0aW9ucy5vcmllbnRhdGlvbiB8fCBcImxhbmRzY2FwZVwiO1xuXHR9XG5cblx0aWYoIWpzUERGUGFyYW1zLnVuaXQpe1xuXHRcdGpzUERGUGFyYW1zLnVuaXQgPSBcInB0XCI7XG5cdH1cblxuXHQvL3BhcnNlIHJvdyBsaXN0XG5cdGxpc3QuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0c3dpdGNoKHJvdy50eXBlKXtcblx0XHRcdGNhc2UgXCJoZWFkZXJcIjpcblx0XHRcdFx0aGVhZGVyLnB1c2gocGFyc2VSb3cocm93KSk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwiZ3JvdXBcIjpcblx0XHRcdFx0Ym9keS5wdXNoKHBhcnNlUm93KHJvdywgcm93R3JvdXBTdHlsZXMpKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgXCJjYWxjXCI6XG5cdFx0XHRcdGJvZHkucHVzaChwYXJzZVJvdyhyb3csIHJvd0NhbGNTdHlsZXMpKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgXCJyb3dcIjpcblx0XHRcdFx0Ym9keS5wdXNoKHBhcnNlUm93KHJvdykpO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH0pO1xuXG5cdGZ1bmN0aW9uIHBhcnNlUm93KHJvdywgc3R5bGVzKXtcblx0XHR2YXIgcm93RGF0YSA9IFtdO1xuXG5cdFx0cm93LmNvbHVtbnMuZm9yRWFjaCgoY29sKSA9Pntcblx0XHRcdHZhciBjZWxsO1xuXG5cdFx0XHRpZihjb2wpe1xuXHRcdFx0XHRzd2l0Y2godHlwZW9mIGNvbC52YWx1ZSl7XG5cdFx0XHRcdFx0Y2FzZSBcIm9iamVjdFwiOlxuXHRcdFx0XHRcdFx0Y29sLnZhbHVlID0gY29sLnZhbHVlICE9PSBudWxsID8gSlNPTi5zdHJpbmdpZnkoY29sLnZhbHVlKSA6IFwiXCI7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgXCJ1bmRlZmluZWRcIjpcblx0XHRcdFx0XHRcdGNvbC52YWx1ZSA9IFwiXCI7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNlbGwgPSB7XG5cdFx0XHRcdFx0Y29udGVudDpjb2wudmFsdWUsXG5cdFx0XHRcdFx0Y29sU3Bhbjpjb2wud2lkdGgsXG5cdFx0XHRcdFx0cm93U3Bhbjpjb2wuaGVpZ2h0LFxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGlmKHN0eWxlcyl7XG5cdFx0XHRcdFx0Y2VsbC5zdHlsZXMgPSBzdHlsZXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyb3dEYXRhLnB1c2goY2VsbCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gcm93RGF0YTtcblx0fVxuXG5cblx0Ly9jb25maWd1cmUgUERGXG5cdHZhciBkb2MgPSBuZXcganNwZGYuanNQREYoanNQREZQYXJhbXMpOyAvL3NldCBkb2N1bWVudCB0byBsYW5kc2NhcGUsIGJldHRlciBmb3IgbW9zdCB0YWJsZXNcblxuXHRpZihvcHRpb25zLmF1dG9UYWJsZSl7XG5cdFx0aWYodHlwZW9mIG9wdGlvbnMuYXV0b1RhYmxlID09PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0YXV0b1RhYmxlUGFyYW1zID0gb3B0aW9ucy5hdXRvVGFibGUoZG9jKSB8fCB7fTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRhdXRvVGFibGVQYXJhbXMgPSBvcHRpb25zLmF1dG9UYWJsZTtcblx0XHR9XG5cdH1cblxuXHRpZih0aXRsZSl7XG5cdFx0YXV0b1RhYmxlUGFyYW1zLmRpZERyYXdQYWdlID0gZnVuY3Rpb24oZGF0YSkge1xuXHRcdFx0ZG9jLnRleHQodGl0bGUsIDQwLCAzMCk7XG5cdFx0fTtcblx0fVxuXG5cdGF1dG9UYWJsZVBhcmFtcy5oZWFkID0gaGVhZGVyO1xuXHRhdXRvVGFibGVQYXJhbXMuYm9keSA9IGJvZHk7XG5cblx0ZG9jLmF1dG9UYWJsZShhdXRvVGFibGVQYXJhbXMpO1xuXG5cdGlmKG9wdGlvbnMuZG9jdW1lbnRQcm9jZXNzaW5nKXtcblx0XHRvcHRpb25zLmRvY3VtZW50UHJvY2Vzc2luZyhkb2MpO1xuXHR9XG5cblx0c2V0RmlsZUNvbnRlbnRzKGRvYy5vdXRwdXQoXCJhcnJheWJ1ZmZlclwiKSwgXCJhcHBsaWNhdGlvbi9wZGZcIik7XG59XG5cbmZ1bmN0aW9uIHhsc3gobGlzdCwgb3B0aW9ucywgc2V0RmlsZUNvbnRlbnRzKXtcblx0dmFyIHNlbGYgPSB0aGlzLFxuXHRzaGVldE5hbWUgPSBvcHRpb25zLnNoZWV0TmFtZSB8fCBcIlNoZWV0MVwiLFxuXHR3b3JrYm9vayA9IFhMU1gudXRpbHMuYm9va19uZXcoKSxcblx0dGFibGVGZWF0dXJlcyA9IG5ldyBDb3JlRmVhdHVyZSh0aGlzKSxcblx0Y29tcHJlc3Npb24gPSAgJ2NvbXByZXNzJyBpbiBvcHRpb25zID8gb3B0aW9ucy5jb21wcmVzcyA6IHRydWUsXG5cdHdyaXRlT3B0aW9ucyA9IG9wdGlvbnMud3JpdGVPcHRpb25zIHx8IHtib29rVHlwZToneGxzeCcsIGJvb2tTU1Q6dHJ1ZSwgY29tcHJlc3Npb259LFxuXHRvdXRwdXQ7XG5cblx0d3JpdGVPcHRpb25zLnR5cGUgPSAnYmluYXJ5JztcblxuXHR3b3JrYm9vay5TaGVldE5hbWVzID0gW107XG5cdHdvcmtib29rLlNoZWV0cyA9IHt9O1xuXG5cdGZ1bmN0aW9uIGdlbmVyYXRlU2hlZXQoKXtcblx0XHR2YXIgcm93cyA9IFtdLFxuXHRcdG1lcmdlcyA9IFtdLFxuXHRcdHdvcmtzaGVldCA9IHt9LFxuXHRcdHJhbmdlID0ge3M6IHtjOjAsIHI6MH0sIGU6IHtjOihsaXN0WzBdID8gbGlzdFswXS5jb2x1bW5zLnJlZHVjZSgoYSwgYikgPT4gYSArIChiICYmIGIud2lkdGggPyBiLndpZHRoIDogMSksIDApIDogMCksIHI6bGlzdC5sZW5ndGggfX07XG5cblx0XHQvL3BhcnNlIHJvdyBsaXN0XG5cdFx0bGlzdC5mb3JFYWNoKChyb3csIGkpID0+IHtcblx0XHRcdHZhciByb3dEYXRhID0gW107XG5cblx0XHRcdHJvdy5jb2x1bW5zLmZvckVhY2goZnVuY3Rpb24oY29sLCBqKXtcblxuXHRcdFx0XHRpZihjb2wpe1xuXHRcdFx0XHRcdHJvd0RhdGEucHVzaCghKGNvbC52YWx1ZSBpbnN0YW5jZW9mIERhdGUpICYmIHR5cGVvZiBjb2wudmFsdWUgPT09IFwib2JqZWN0XCIgPyBKU09OLnN0cmluZ2lmeShjb2wudmFsdWUpIDogY29sLnZhbHVlKTtcblxuXHRcdFx0XHRcdGlmKGNvbC53aWR0aCA+IDEgfHwgY29sLmhlaWdodCA+IC0xKXtcblx0XHRcdFx0XHRcdGlmKGNvbC5oZWlnaHQgPiAxIHx8IGNvbC53aWR0aCA+IDEpe1xuXHRcdFx0XHRcdFx0XHRtZXJnZXMucHVzaCh7czp7cjppLGM6an0sZTp7cjppICsgY29sLmhlaWdodCAtIDEsYzpqICsgY29sLndpZHRoIC0gMX19KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRyb3dEYXRhLnB1c2goXCJcIik7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRyb3dzLnB1c2gocm93RGF0YSk7XG5cdFx0fSk7XG5cblx0XHQvL2NvbnZlcnQgcm93cyB0byB3b3Jrc2hlZXRcblx0XHRYTFNYLnV0aWxzLnNoZWV0X2FkZF9hb2Eod29ya3NoZWV0LCByb3dzKTtcblxuXHRcdHdvcmtzaGVldFsnIXJlZiddID0gWExTWC51dGlscy5lbmNvZGVfcmFuZ2UocmFuZ2UpO1xuXG5cdFx0aWYobWVyZ2VzLmxlbmd0aCl7XG5cdFx0XHR3b3Jrc2hlZXRbXCIhbWVyZ2VzXCJdID0gbWVyZ2VzO1xuXHRcdH1cblxuXHRcdHJldHVybiB3b3Jrc2hlZXQ7XG5cdH1cblxuXHRpZihvcHRpb25zLnNoZWV0T25seSl7XG5cdFx0c2V0RmlsZUNvbnRlbnRzKGdlbmVyYXRlU2hlZXQoKSk7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aWYob3B0aW9ucy5zaGVldHMpe1xuXHRcdGZvcih2YXIgc2hlZXQgaW4gb3B0aW9ucy5zaGVldHMpe1xuXG5cdFx0XHRpZihvcHRpb25zLnNoZWV0c1tzaGVldF0gPT09IHRydWUpe1xuXHRcdFx0XHR3b3JrYm9vay5TaGVldE5hbWVzLnB1c2goc2hlZXQpO1xuXHRcdFx0XHR3b3JrYm9vay5TaGVldHNbc2hlZXRdID0gZ2VuZXJhdGVTaGVldCgpO1xuXHRcdFx0fWVsc2Uge1xuXG5cdFx0XHRcdHdvcmtib29rLlNoZWV0TmFtZXMucHVzaChzaGVldCk7XG5cblx0XHRcdFx0dGFibGVGZWF0dXJlcy5jb21tc1NlbmQob3B0aW9ucy5zaGVldHNbc2hlZXRdLCBcImRvd25sb2FkXCIsIFwiaW50ZXJjZXB0XCIse1xuXHRcdFx0XHRcdHR5cGU6XCJ4bHN4XCIsXG5cdFx0XHRcdFx0b3B0aW9uczp7c2hlZXRPbmx5OnRydWV9LFxuXHRcdFx0XHRcdGFjdGl2ZTpzZWxmLmFjdGl2ZSxcblx0XHRcdFx0XHRpbnRlcmNlcHQ6ZnVuY3Rpb24oZGF0YSl7XG5cdFx0XHRcdFx0XHR3b3JrYm9vay5TaGVldHNbc2hlZXRdID0gZGF0YTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fWVsc2Uge1xuXHRcdHdvcmtib29rLlNoZWV0TmFtZXMucHVzaChzaGVldE5hbWUpO1xuXHRcdHdvcmtib29rLlNoZWV0c1tzaGVldE5hbWVdID0gZ2VuZXJhdGVTaGVldCgpO1xuXHR9XG5cblx0aWYob3B0aW9ucy5kb2N1bWVudFByb2Nlc3Npbmcpe1xuXHRcdHdvcmtib29rID0gb3B0aW9ucy5kb2N1bWVudFByb2Nlc3Npbmcod29ya2Jvb2spO1xuXHR9XG5cblx0Ly9jb252ZXJ0IHdvcmtib29rIHRvIGJpbmFyeSBhcnJheVxuXHRmdW5jdGlvbiBzMmFiKHMpIHtcblx0XHR2YXIgYnVmID0gbmV3IEFycmF5QnVmZmVyKHMubGVuZ3RoKTtcblx0XHR2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1Zik7XG5cdFx0Zm9yICh2YXIgaT0wOyBpIT1zLmxlbmd0aDsgKytpKSB2aWV3W2ldID0gcy5jaGFyQ29kZUF0KGkpICYgMHhGRjtcblx0XHRyZXR1cm4gYnVmO1xuXHR9XG5cblx0b3V0cHV0ID0gWExTWC53cml0ZSh3b3JrYm9vaywgd3JpdGVPcHRpb25zKTtcblxuXHRzZXRGaWxlQ29udGVudHMoczJhYihvdXRwdXQpLCBcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiKTtcbn1cblxuZnVuY3Rpb24gaHRtbChsaXN0LCBvcHRpb25zLCBzZXRGaWxlQ29udGVudHMpe1xuXHRpZih0aGlzLm1vZEV4aXN0cyhcImV4cG9ydFwiLCB0cnVlKSl7XG5cdFx0c2V0RmlsZUNvbnRlbnRzKHRoaXMubW9kdWxlcy5leHBvcnQuZ2VuZXJhdGVIVE1MVGFibGUobGlzdCksIFwidGV4dC9odG1sXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGpzb25MaW5lcyAobGlzdCwgb3B0aW9ucywgc2V0RmlsZUNvbnRlbnRzKSB7XG5cdGNvbnN0IGZpbGVDb250ZW50cyA9IFtdO1xuXG5cdGxpc3QuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0Y29uc3QgaXRlbSA9IHt9O1xuXG5cdFx0c3dpdGNoIChyb3cudHlwZSkge1xuXHRcdFx0Y2FzZSBcImhlYWRlclwiOlxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcImdyb3VwXCI6XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIkRvd25sb2FkIFdhcm5pbmcgLSBKU09OIGRvd25sb2FkZXIgY2Fubm90IHByb2Nlc3Mgcm93IGdyb3Vwc1wiKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgXCJjYWxjXCI6XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIkRvd25sb2FkIFdhcm5pbmcgLSBKU09OIGRvd25sb2FkZXIgY2Fubm90IHByb2Nlc3MgY29sdW1uIGNhbGN1bGF0aW9uc1wiKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgXCJyb3dcIjpcblx0XHRcdFx0cm93LmNvbHVtbnMuZm9yRWFjaCgoY29sKSA9PiB7XG5cdFx0XHRcdFx0aWYgKGNvbCkge1xuXHRcdFx0XHRcdFx0aXRlbVtjb2wuY29tcG9uZW50LmdldFRpdGxlRG93bmxvYWQoKSB8fCBjb2wuY29tcG9uZW50LmdldEZpZWxkKCldID0gY29sLnZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0ZmlsZUNvbnRlbnRzLnB1c2goSlNPTi5zdHJpbmdpZnkoaXRlbSkpO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH0pO1xuXG5cdHNldEZpbGVDb250ZW50cyhmaWxlQ29udGVudHMuam9pbihcIlxcblwiKSwgXCJhcHBsaWNhdGlvbi94LW5kanNvblwiKTtcbn1cblxudmFyIGRlZmF1bHREb3dubG9hZGVycyA9IHtcblx0Y3N2OmNzdixcblx0anNvbjpqc29uLFxuXHRqc29uTGluZXM6anNvbkxpbmVzLFxuXHRwZGY6cGRmLFxuXHR4bHN4Onhsc3gsXG5cdGh0bWw6aHRtbCxcbn07XG5cbmNsYXNzIERvd25sb2FkIGV4dGVuZHMgTW9kdWxle1xuXG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJkb3dubG9hZEVuY29kZXJcIiwgZnVuY3Rpb24oZGF0YSwgbWltZVR5cGUpe1xuXHRcdFx0cmV0dXJuIG5ldyBCbG9iKFtkYXRhXSx7dHlwZTptaW1lVHlwZX0pO1xuXHRcdH0pOyAvL2Z1bmN0aW9uIHRvIG1hbmlwdWxhdGUgZG93bmxvYWQgZGF0YVxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImRvd25sb2FkUmVhZHlcIiwgdW5kZWZpbmVkKTsgLy93YXJuIG9mIGZ1bmN0aW9uIGRlcHJlY2F0aW9uXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZG93bmxvYWRDb25maWdcIiwge30pOyAvL2Rvd25sb2FkIGNvbmZpZ1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImRvd25sb2FkUm93UmFuZ2VcIiwgXCJhY3RpdmVcIik7IC8vcmVzdHJpY3QgZG93bmxvYWQgdG8gYWN0aXZlIHJvd3Mgb25seVxuXG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImRvd25sb2FkXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJ0aXRsZURvd25sb2FkXCIpO1xuXHR9XG5cblx0aW5pdGlhbGl6ZSgpe1xuXHRcdHRoaXMuZGVwcmVjYXRlZE9wdGlvbnNDaGVjaygpO1xuXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJkb3dubG9hZFwiLCB0aGlzLmRvd25sb2FkLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiZG93bmxvYWRUb1RhYlwiLCB0aGlzLmRvd25sb2FkVG9UYWIuYmluZCh0aGlzKSk7XG5cdH1cblxuXHRkZXByZWNhdGVkT3B0aW9uc0NoZWNrKCl7XG5cdFx0dGhpcy5kZXByZWNhdGlvbkNoZWNrKFwiZG93bmxvYWRSZWFkeVwiLCBcImRvd25sb2FkRW5jb2RlclwiKTtcblx0fVx0XG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vIFRhYmxlIEZ1bmN0aW9ucyAvLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXHRkb3dubG9hZFRvVGFiKHR5cGUsIGZpbGVuYW1lLCBvcHRpb25zLCBhY3RpdmUpe1xuXHRcdHRoaXMuZG93bmxvYWQodHlwZSwgZmlsZW5hbWUsIG9wdGlvbnMsIGFjdGl2ZSwgdHJ1ZSk7XG5cdH1cblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8gSW50ZXJuYWwgTG9naWMgLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdC8vdHJpZ2dlciBmaWxlIGRvd25sb2FkXG5cdGRvd25sb2FkKHR5cGUsIGZpbGVuYW1lLCBvcHRpb25zLCByYW5nZSwgaW50ZXJjZXB0Q2FsbGJhY2spe1xuXHRcdHZhciBkb3dubG9hZEZ1bmMgPSBmYWxzZTtcblxuXHRcdGZ1bmN0aW9uIGJ1aWxkTGluayhkYXRhLCBtaW1lKXtcblx0XHRcdGlmKGludGVyY2VwdENhbGxiYWNrKXtcblx0XHRcdFx0aWYoaW50ZXJjZXB0Q2FsbGJhY2sgPT09IHRydWUpe1xuXHRcdFx0XHRcdHRoaXMudHJpZ2dlckRvd25sb2FkKGRhdGEsIG1pbWUsIHR5cGUsIGZpbGVuYW1lLCB0cnVlKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGludGVyY2VwdENhbGxiYWNrKGRhdGEpO1xuXHRcdFx0XHR9XG5cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy50cmlnZ2VyRG93bmxvYWQoZGF0YSwgbWltZSwgdHlwZSwgZmlsZW5hbWUpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmKHR5cGVvZiB0eXBlID09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRkb3dubG9hZEZ1bmMgPSB0eXBlO1xuXHRcdH1lbHNlIHtcblx0XHRcdGlmKERvd25sb2FkLmRvd25sb2FkZXJzW3R5cGVdKXtcblx0XHRcdFx0ZG93bmxvYWRGdW5jID0gRG93bmxvYWQuZG93bmxvYWRlcnNbdHlwZV07XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIkRvd25sb2FkIEVycm9yIC0gTm8gc3VjaCBkb3dubG9hZCB0eXBlIGZvdW5kOiBcIiwgdHlwZSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYoZG93bmxvYWRGdW5jKXtcblx0XHRcdHZhciBsaXN0ID0gdGhpcy5nZW5lcmF0ZUV4cG9ydExpc3QocmFuZ2UpO1xuXG5cdFx0XHRkb3dubG9hZEZ1bmMuY2FsbCh0aGlzLnRhYmxlLCBsaXN0ICwgb3B0aW9ucyB8fCB7fSwgYnVpbGRMaW5rLmJpbmQodGhpcykpO1xuXHRcdH1cblx0fVxuXG5cdGdlbmVyYXRlRXhwb3J0TGlzdChyYW5nZSl7XG5cdFx0dmFyIGxpc3QgPSB0aGlzLnRhYmxlLm1vZHVsZXMuZXhwb3J0LmdlbmVyYXRlRXhwb3J0TGlzdCh0aGlzLnRhYmxlLm9wdGlvbnMuZG93bmxvYWRDb25maWcsIGZhbHNlLCByYW5nZSB8fCB0aGlzLnRhYmxlLm9wdGlvbnMuZG93bmxvYWRSb3dSYW5nZSwgXCJkb3dubG9hZFwiKTtcblxuXHRcdC8vYXNzaWduIGdyb3VwIGhlYWRlciBmb3JtYXR0ZXJcblx0XHR2YXIgZ3JvdXBIZWFkZXIgPSB0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBIZWFkZXJEb3dubG9hZDtcblxuXHRcdGlmKGdyb3VwSGVhZGVyICYmICFBcnJheS5pc0FycmF5KGdyb3VwSGVhZGVyKSl7XG5cdFx0XHRncm91cEhlYWRlciA9IFtncm91cEhlYWRlcl07XG5cdFx0fVxuXG5cdFx0bGlzdC5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdHZhciBncm91cDtcblxuXHRcdFx0aWYocm93LnR5cGUgPT09IFwiZ3JvdXBcIil7XG5cdFx0XHRcdGdyb3VwID0gcm93LmNvbHVtbnNbMF07XG5cblx0XHRcdFx0aWYoZ3JvdXBIZWFkZXIgJiYgZ3JvdXBIZWFkZXJbcm93LmluZGVudF0pe1xuXHRcdFx0XHRcdGdyb3VwLnZhbHVlID0gZ3JvdXBIZWFkZXJbcm93LmluZGVudF0oZ3JvdXAudmFsdWUsIHJvdy5jb21wb25lbnQuX2dyb3VwLmdldFJvd0NvdW50KCksIHJvdy5jb21wb25lbnQuX2dyb3VwLmdldERhdGEoKSwgcm93LmNvbXBvbmVudCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHJldHVybiBsaXN0O1xuXHR9XG5cblx0dHJpZ2dlckRvd25sb2FkKGRhdGEsIG1pbWUsIHR5cGUsIGZpbGVuYW1lLCBuZXdUYWIpe1xuXHRcdHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpLFxuXHRcdGJsb2IgPSB0aGlzLnRhYmxlLm9wdGlvbnMuZG93bmxvYWRFbmNvZGVyKGRhdGEsIG1pbWUpO1xuXG5cdFx0aWYoYmxvYil7XG5cdFx0XHRpZihuZXdUYWIpe1xuXHRcdFx0XHR3aW5kb3cub3Blbih3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGZpbGVuYW1lID0gZmlsZW5hbWUgfHwgXCJUYWJ1bGF0b3IuXCIgKyAodHlwZW9mIHR5cGUgPT09IFwiZnVuY3Rpb25cIiA/IFwidHh0XCIgOiB0eXBlKTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKG5hdmlnYXRvci5tc1NhdmVPck9wZW5CbG9iKXtcblx0XHRcdFx0XHRuYXZpZ2F0b3IubXNTYXZlT3JPcGVuQmxvYihibG9iLCBmaWxlbmFtZSk7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRlbGVtZW50LnNldEF0dHJpYnV0ZSgnaHJlZicsIHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpKTtcblxuXHRcdFx0XHRcdC8vc2V0IGZpbGUgdGl0bGVcblx0XHRcdFx0XHRlbGVtZW50LnNldEF0dHJpYnV0ZSgnZG93bmxvYWQnLCBmaWxlbmFtZSk7XG5cblx0XHRcdFx0XHQvL3RyaWdnZXIgZG93bmxvYWRcblx0XHRcdFx0XHRlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cdFx0XHRcdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbGVtZW50KTtcblx0XHRcdFx0XHRlbGVtZW50LmNsaWNrKCk7XG5cblx0XHRcdFx0XHQvL3JlbW92ZSB0ZW1wb3JhcnkgbGluayBlbGVtZW50XG5cdFx0XHRcdFx0ZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChlbGVtZW50KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJkb3dubG9hZENvbXBsZXRlXCIpO1xuXHRcdH1cblx0fVxuXG5cdGNvbW1zUmVjZWl2ZWQodGFibGUsIGFjdGlvbiwgZGF0YSl7XG5cdFx0c3dpdGNoKGFjdGlvbil7XG5cdFx0XHRjYXNlIFwiaW50ZXJjZXB0XCI6XG5cdFx0XHRcdHRoaXMuZG93bmxvYWQoZGF0YS50eXBlLCBcIlwiLCBkYXRhLm9wdGlvbnMsIGRhdGEuYWN0aXZlLCBkYXRhLmludGVyY2VwdCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxufVxuXG5Eb3dubG9hZC5tb2R1bGVOYW1lID0gXCJkb3dubG9hZFwiO1xuXG4vL2xvYWQgZGVmYXVsdHNcbkRvd25sb2FkLmRvd25sb2FkZXJzID0gZGVmYXVsdERvd25sb2FkZXJzO1xuXG5mdW5jdGlvbiBtYXNrSW5wdXQoZWwsIG9wdGlvbnMpe1xuXHR2YXIgbWFzayA9IG9wdGlvbnMubWFzayxcblx0bWFza0xldHRlciA9IHR5cGVvZiBvcHRpb25zLm1hc2tMZXR0ZXJDaGFyICE9PSBcInVuZGVmaW5lZFwiID8gb3B0aW9ucy5tYXNrTGV0dGVyQ2hhciA6IFwiQVwiLFxuXHRtYXNrTnVtYmVyID0gdHlwZW9mIG9wdGlvbnMubWFza051bWJlckNoYXIgIT09IFwidW5kZWZpbmVkXCIgPyBvcHRpb25zLm1hc2tOdW1iZXJDaGFyIDogXCI5XCIsXG5cdG1hc2tXaWxkY2FyZCA9IHR5cGVvZiBvcHRpb25zLm1hc2tXaWxkY2FyZENoYXIgIT09IFwidW5kZWZpbmVkXCIgPyBvcHRpb25zLm1hc2tXaWxkY2FyZENoYXIgOiBcIipcIjtcblxuXHRmdW5jdGlvbiBmaWxsU3ltYm9scyhpbmRleCl7XG5cdFx0dmFyIHN5bWJvbCA9IG1hc2tbaW5kZXhdO1xuXHRcdGlmKHR5cGVvZiBzeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgc3ltYm9sICE9PSBtYXNrV2lsZGNhcmQgJiYgc3ltYm9sICE9PSBtYXNrTGV0dGVyICYmIHN5bWJvbCAhPT0gbWFza051bWJlcil7XG5cdFx0XHRlbC52YWx1ZSA9IGVsLnZhbHVlICsgXCJcIiArIHN5bWJvbDtcblx0XHRcdGZpbGxTeW1ib2xzKGluZGV4KzEpO1xuXHRcdH1cblx0fVxuXG5cdGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIChlKSA9PiB7XG5cdFx0dmFyIGluZGV4ID0gZWwudmFsdWUubGVuZ3RoLFxuXHRcdGNoYXIgPSBlLmtleTtcblxuXHRcdGlmKGUua2V5Q29kZSA+IDQ2ICYmICFlLmN0cmxLZXkgJiYgIWUubWV0YUtleSl7XG5cdFx0XHRpZihpbmRleCA+PSBtYXNrLmxlbmd0aCl7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRzd2l0Y2gobWFza1tpbmRleF0pe1xuXHRcdFx0XHRcdGNhc2UgbWFza0xldHRlcjpcblx0XHRcdFx0XHRcdGlmKGNoYXIudG9VcHBlckNhc2UoKSA9PSBjaGFyLnRvTG93ZXJDYXNlKCkpe1xuXHRcdFx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSBtYXNrTnVtYmVyOlxuXHRcdFx0XHRcdFx0aWYoaXNOYU4oY2hhcikpe1xuXHRcdFx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSBtYXNrV2lsZGNhcmQ6XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRpZihjaGFyICE9PSBtYXNrW2luZGV4XSl7XG5cdFx0XHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuO1xuXHR9KTtcblxuXHRlbC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgKGUpID0+IHtcblx0XHRpZihlLmtleUNvZGUgPiA0Nil7XG5cdFx0XHRpZihvcHRpb25zLm1hc2tBdXRvRmlsbCl7XG5cdFx0XHRcdGZpbGxTeW1ib2xzKGVsLnZhbHVlLmxlbmd0aCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXG5cdGlmKCFlbC5wbGFjZWhvbGRlcil7XG5cdFx0ZWwucGxhY2Vob2xkZXIgPSBtYXNrO1xuXHR9XG5cblx0aWYob3B0aW9ucy5tYXNrQXV0b0ZpbGwpe1xuXHRcdGZpbGxTeW1ib2xzKGVsLnZhbHVlLmxlbmd0aCk7XG5cdH1cbn1cblxuLy9pbnB1dCBlbGVtZW50XG5mdW5jdGlvbiBpbnB1dChjZWxsLCBvblJlbmRlcmVkLCBzdWNjZXNzLCBjYW5jZWwsIGVkaXRvclBhcmFtcyl7XG5cdC8vY3JlYXRlIGFuZCBzdHlsZSBpbnB1dFxuXHR2YXIgY2VsbFZhbHVlID0gY2VsbC5nZXRWYWx1ZSgpLFxuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIGVkaXRvclBhcmFtcy5zZWFyY2ggPyBcInNlYXJjaFwiIDogXCJ0ZXh0XCIpO1xuXG5cdGlucHV0LnN0eWxlLnBhZGRpbmcgPSBcIjRweFwiO1xuXHRpbnB1dC5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xuXHRpbnB1dC5zdHlsZS5ib3hTaXppbmcgPSBcImJvcmRlci1ib3hcIjtcblxuXHRpZihlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXMgJiYgdHlwZW9mIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlcyA9PSBcIm9iamVjdFwiKXtcblx0XHRmb3IgKGxldCBrZXkgaW4gZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzKXtcblx0XHRcdGlmKGtleS5jaGFyQXQoMCkgPT0gXCIrXCIpe1xuXHRcdFx0XHRrZXkgPSBrZXkuc2xpY2UoMSk7XG5cdFx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZShrZXksIGlucHV0LmdldEF0dHJpYnV0ZShrZXkpICsgZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzW1wiK1wiICsga2V5XSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZShrZXksIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlc1trZXldKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpbnB1dC52YWx1ZSA9IHR5cGVvZiBjZWxsVmFsdWUgIT09IFwidW5kZWZpbmVkXCIgPyBjZWxsVmFsdWUgOiBcIlwiO1xuXG5cdG9uUmVuZGVyZWQoZnVuY3Rpb24oKXtcblx0XHRpZihjZWxsLmdldFR5cGUoKSA9PT0gXCJjZWxsXCIpe1xuXHRcdFx0aW5wdXQuZm9jdXMoe3ByZXZlbnRTY3JvbGw6IHRydWV9KTtcblx0XHRcdGlucHV0LnN0eWxlLmhlaWdodCA9IFwiMTAwJVwiO1xuXG5cdFx0XHRpZihlZGl0b3JQYXJhbXMuc2VsZWN0Q29udGVudHMpe1xuXHRcdFx0XHRpbnB1dC5zZWxlY3QoKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdGZ1bmN0aW9uIG9uQ2hhbmdlKGUpe1xuXHRcdGlmKCgoY2VsbFZhbHVlID09PSBudWxsIHx8IHR5cGVvZiBjZWxsVmFsdWUgPT09IFwidW5kZWZpbmVkXCIpICYmIGlucHV0LnZhbHVlICE9PSBcIlwiKSB8fCBpbnB1dC52YWx1ZSAhPT0gY2VsbFZhbHVlKXtcblx0XHRcdGlmKHN1Y2Nlc3MoaW5wdXQudmFsdWUpKXtcblx0XHRcdFx0Y2VsbFZhbHVlID0gaW5wdXQudmFsdWU7IC8vcGVyc2lzdCB2YWx1ZSBpZiBzdWNjZXNzZnVsbHkgdmFsaWRhdGVkIGluY2FzZSBlZGl0b3IgaXMgdXNlZCBhcyBoZWFkZXIgZmlsdGVyXG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y2FuY2VsKCk7XG5cdFx0fVxuXHR9XG5cblx0Ly9zdWJtaXQgbmV3IHZhbHVlIG9uIGJsdXIgb3IgY2hhbmdlXG5cdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgb25DaGFuZ2UpO1xuXHRpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCBvbkNoYW5nZSk7XG5cblx0Ly9zdWJtaXQgbmV3IHZhbHVlIG9uIGVudGVyXG5cdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdHN3aXRjaChlLmtleUNvZGUpe1xuXHRcdFx0Ly8gY2FzZSA5OlxuXHRcdFx0Y2FzZSAxMzpcblx0XHRcdFx0b25DaGFuZ2UoKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMjc6XG5cdFx0XHRcdGNhbmNlbCgpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAzNTpcblx0XHRcdGNhc2UgMzY6XG5cdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fSk7XG5cblx0aWYoZWRpdG9yUGFyYW1zLm1hc2spe1xuXHRcdG1hc2tJbnB1dChpbnB1dCwgZWRpdG9yUGFyYW1zKTtcblx0fVxuXG5cdHJldHVybiBpbnB1dDtcbn1cblxuLy9yZXNpemFibGUgdGV4dCBhcmVhIGVsZW1lbnRcbmZ1bmN0aW9uIHRleHRhcmVhKGNlbGwsIG9uUmVuZGVyZWQsIHN1Y2Nlc3MsIGNhbmNlbCwgZWRpdG9yUGFyYW1zKXtcblx0dmFyIGNlbGxWYWx1ZSA9IGNlbGwuZ2V0VmFsdWUoKSxcblx0dmVydE5hdiA9IGVkaXRvclBhcmFtcy52ZXJ0aWNhbE5hdmlnYXRpb24gfHwgXCJoeWJyaWRcIixcblx0dmFsdWUgPSBTdHJpbmcoY2VsbFZhbHVlICE9PSBudWxsICYmIHR5cGVvZiBjZWxsVmFsdWUgIT09IFwidW5kZWZpbmVkXCIgID8gY2VsbFZhbHVlIDogXCJcIiksXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRleHRhcmVhXCIpLFxuXHRzY3JvbGxIZWlnaHQgPSAwO1xuXG5cdC8vY3JlYXRlIGFuZCBzdHlsZSBpbnB1dFxuXHRpbnB1dC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXHRpbnB1dC5zdHlsZS5wYWRkaW5nID0gXCIycHhcIjtcblx0aW5wdXQuc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XG5cdGlucHV0LnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG5cdGlucHV0LnN0eWxlLmJveFNpemluZyA9IFwiYm9yZGVyLWJveFwiO1xuXHRpbnB1dC5zdHlsZS53aGl0ZVNwYWNlID0gXCJwcmUtd3JhcFwiO1xuXHRpbnB1dC5zdHlsZS5yZXNpemUgPSBcIm5vbmVcIjtcblxuXHRpZihlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXMgJiYgdHlwZW9mIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlcyA9PSBcIm9iamVjdFwiKXtcblx0XHRmb3IgKGxldCBrZXkgaW4gZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzKXtcblx0XHRcdGlmKGtleS5jaGFyQXQoMCkgPT0gXCIrXCIpe1xuXHRcdFx0XHRrZXkgPSBrZXkuc2xpY2UoMSk7XG5cdFx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZShrZXksIGlucHV0LmdldEF0dHJpYnV0ZShrZXkpICsgZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzW1wiK1wiICsga2V5XSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZShrZXksIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlc1trZXldKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpbnB1dC52YWx1ZSA9IHZhbHVlO1xuXG5cdG9uUmVuZGVyZWQoZnVuY3Rpb24oKXtcblx0XHRpZihjZWxsLmdldFR5cGUoKSA9PT0gXCJjZWxsXCIpe1xuXHRcdFx0aW5wdXQuZm9jdXMoe3ByZXZlbnRTY3JvbGw6IHRydWV9KTtcblx0XHRcdGlucHV0LnN0eWxlLmhlaWdodCA9IFwiMTAwJVwiO1xuXG5cdFx0XHRpbnB1dC5zY3JvbGxIZWlnaHQ7XG5cdFx0XHRpbnB1dC5zdHlsZS5oZWlnaHQgPSBpbnB1dC5zY3JvbGxIZWlnaHQgKyBcInB4XCI7XG5cdFx0XHRjZWxsLmdldFJvdygpLm5vcm1hbGl6ZUhlaWdodCgpO1xuXG5cdFx0XHRpZihlZGl0b3JQYXJhbXMuc2VsZWN0Q29udGVudHMpe1xuXHRcdFx0XHRpbnB1dC5zZWxlY3QoKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdGZ1bmN0aW9uIG9uQ2hhbmdlKGUpe1xuXG5cdFx0aWYoKChjZWxsVmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIGNlbGxWYWx1ZSA9PT0gXCJ1bmRlZmluZWRcIikgJiYgaW5wdXQudmFsdWUgIT09IFwiXCIpIHx8IGlucHV0LnZhbHVlICE9PSBjZWxsVmFsdWUpe1xuXG5cdFx0XHRpZihzdWNjZXNzKGlucHV0LnZhbHVlKSl7XG5cdFx0XHRcdGNlbGxWYWx1ZSA9IGlucHV0LnZhbHVlOyAvL3BlcnNpc3QgdmFsdWUgaWYgc3VjY2Vzc2Z1bGx5IHZhbGlkYXRlZCBpbmNhc2UgZWRpdG9yIGlzIHVzZWQgYXMgaGVhZGVyIGZpbHRlclxuXHRcdFx0fVxuXG5cdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdFx0XHRcdGNlbGwuZ2V0Um93KCkubm9ybWFsaXplSGVpZ2h0KCk7XG5cdFx0XHR9LDMwMCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y2FuY2VsKCk7XG5cdFx0fVxuXHR9XG5cblx0Ly9zdWJtaXQgbmV3IHZhbHVlIG9uIGJsdXIgb3IgY2hhbmdlXG5cdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgb25DaGFuZ2UpO1xuXHRpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCBvbkNoYW5nZSk7XG5cblx0aW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIGZ1bmN0aW9uKCl7XG5cblx0XHRpbnB1dC5zdHlsZS5oZWlnaHQgPSBcIlwiO1xuXG5cdFx0dmFyIGhlaWdodE5vdyA9IGlucHV0LnNjcm9sbEhlaWdodDtcblxuXHRcdGlucHV0LnN0eWxlLmhlaWdodCA9IGhlaWdodE5vdyArIFwicHhcIjtcblxuXHRcdGlmKGhlaWdodE5vdyAhPSBzY3JvbGxIZWlnaHQpe1xuXHRcdFx0c2Nyb2xsSGVpZ2h0ID0gaGVpZ2h0Tm93O1xuXHRcdFx0Y2VsbC5nZXRSb3coKS5ub3JtYWxpemVIZWlnaHQoKTtcblx0XHR9XG5cdH0pO1xuXG5cdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGZ1bmN0aW9uKGUpe1xuXG5cdFx0c3dpdGNoKGUua2V5Q29kZSl7XG5cblx0XHRcdGNhc2UgMTM6XG5cdFx0XHRcdGlmKGUuc2hpZnRLZXkgJiYgZWRpdG9yUGFyYW1zLnNoaWZ0RW50ZXJTdWJtaXQpe1xuXHRcdFx0XHRcdG9uQ2hhbmdlKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMjc6XG5cdFx0XHRcdGNhbmNlbCgpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAzODogLy91cCBhcnJvd1xuXHRcdFx0XHRpZih2ZXJ0TmF2ID09IFwiZWRpdG9yXCIgfHwgKHZlcnROYXYgPT0gXCJoeWJyaWRcIiAmJiBpbnB1dC5zZWxlY3Rpb25TdGFydCkpe1xuXHRcdFx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDQwOiAvL2Rvd24gYXJyb3dcblx0XHRcdFx0aWYodmVydE5hdiA9PSBcImVkaXRvclwiIHx8ICh2ZXJ0TmF2ID09IFwiaHlicmlkXCIgJiYgaW5wdXQuc2VsZWN0aW9uU3RhcnQgIT09IGlucHV0LnZhbHVlLmxlbmd0aCkpe1xuXHRcdFx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAzNTpcblx0XHRcdGNhc2UgMzY6XG5cdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fSk7XG5cblx0aWYoZWRpdG9yUGFyYW1zLm1hc2spe1xuXHRcdG1hc2tJbnB1dChpbnB1dCwgZWRpdG9yUGFyYW1zKTtcblx0fVxuXG5cdHJldHVybiBpbnB1dDtcbn1cblxuLy9pbnB1dCBlbGVtZW50IHdpdGggdHlwZSBvZiBudW1iZXJcbmZ1bmN0aW9uIG51bWJlcihjZWxsLCBvblJlbmRlcmVkLCBzdWNjZXNzLCBjYW5jZWwsIGVkaXRvclBhcmFtcyl7XG5cdHZhciBjZWxsVmFsdWUgPSBjZWxsLmdldFZhbHVlKCksXG5cdHZlcnROYXYgPSBlZGl0b3JQYXJhbXMudmVydGljYWxOYXZpZ2F0aW9uIHx8IFwiZWRpdG9yXCIsXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXG5cdGlucHV0LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJudW1iZXJcIik7XG5cblx0aWYodHlwZW9mIGVkaXRvclBhcmFtcy5tYXggIT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0aW5wdXQuc2V0QXR0cmlidXRlKFwibWF4XCIsIGVkaXRvclBhcmFtcy5tYXgpO1xuXHR9XG5cblx0aWYodHlwZW9mIGVkaXRvclBhcmFtcy5taW4gIT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0aW5wdXQuc2V0QXR0cmlidXRlKFwibWluXCIsIGVkaXRvclBhcmFtcy5taW4pO1xuXHR9XG5cblx0aWYodHlwZW9mIGVkaXRvclBhcmFtcy5zdGVwICE9IFwidW5kZWZpbmVkXCIpe1xuXHRcdGlucHV0LnNldEF0dHJpYnV0ZShcInN0ZXBcIiwgZWRpdG9yUGFyYW1zLnN0ZXApO1xuXHR9XG5cblx0Ly9jcmVhdGUgYW5kIHN0eWxlIGlucHV0XG5cdGlucHV0LnN0eWxlLnBhZGRpbmcgPSBcIjRweFwiO1xuXHRpbnB1dC5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xuXHRpbnB1dC5zdHlsZS5ib3hTaXppbmcgPSBcImJvcmRlci1ib3hcIjtcblxuXHRpZihlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXMgJiYgdHlwZW9mIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlcyA9PSBcIm9iamVjdFwiKXtcblx0XHRmb3IgKGxldCBrZXkgaW4gZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzKXtcblx0XHRcdGlmKGtleS5jaGFyQXQoMCkgPT0gXCIrXCIpe1xuXHRcdFx0XHRrZXkgPSBrZXkuc2xpY2UoMSk7XG5cdFx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZShrZXksIGlucHV0LmdldEF0dHJpYnV0ZShrZXkpICsgZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzW1wiK1wiICsga2V5XSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZShrZXksIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlc1trZXldKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpbnB1dC52YWx1ZSA9IGNlbGxWYWx1ZTtcblxuXHR2YXIgYmx1ckZ1bmMgPSBmdW5jdGlvbihlKXtcblx0XHRvbkNoYW5nZSgpO1xuXHR9O1xuXG5cdG9uUmVuZGVyZWQoZnVuY3Rpb24gKCkge1xuXHRcdGlmKGNlbGwuZ2V0VHlwZSgpID09PSBcImNlbGxcIil7XG5cdFx0XHQvL3N1Ym1pdCBuZXcgdmFsdWUgb24gYmx1clxuXHRcdFx0aW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgYmx1ckZ1bmMpO1xuXG5cdFx0XHRpbnB1dC5mb2N1cyh7cHJldmVudFNjcm9sbDogdHJ1ZX0pO1xuXHRcdFx0aW5wdXQuc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XG5cblx0XHRcdC8vc3VibWl0IG5ldyB2YWx1ZSBvbiBibHVyXG5cdFx0XHRpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCBibHVyRnVuYyk7XG5cblx0XHRcdGlmKGVkaXRvclBhcmFtcy5zZWxlY3RDb250ZW50cyl7XG5cdFx0XHRcdGlucHV0LnNlbGVjdCgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0ZnVuY3Rpb24gb25DaGFuZ2UoKXtcblx0XHR2YXIgdmFsdWUgPSBpbnB1dC52YWx1ZTtcblxuXHRcdGlmKCFpc05hTih2YWx1ZSkgJiYgdmFsdWUgIT09XCJcIil7XG5cdFx0XHR2YWx1ZSA9IE51bWJlcih2YWx1ZSk7XG5cdFx0fVxuXG5cdFx0aWYodmFsdWUgIT09IGNlbGxWYWx1ZSl7XG5cdFx0XHRpZihzdWNjZXNzKHZhbHVlKSl7XG5cdFx0XHRcdGNlbGxWYWx1ZSA9IHZhbHVlOyAvL3BlcnNpc3QgdmFsdWUgaWYgc3VjY2Vzc2Z1bGx5IHZhbGlkYXRlZCBpbmNhc2UgZWRpdG9yIGlzIHVzZWQgYXMgaGVhZGVyIGZpbHRlclxuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGNhbmNlbCgpO1xuXHRcdH1cblx0fVxuXG5cdC8vc3VibWl0IG5ldyB2YWx1ZSBvbiBlbnRlclxuXHRpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBmdW5jdGlvbihlKXtcblx0XHRzd2l0Y2goZS5rZXlDb2RlKXtcblx0XHRcdGNhc2UgMTM6XG5cdFx0XHQvLyBjYXNlIDk6XG5cdFx0XHRcdG9uQ2hhbmdlKCk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDI3OlxuXHRcdFx0XHRjYW5jZWwoKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMzg6IC8vdXAgYXJyb3dcblx0XHRcdGNhc2UgNDA6IC8vZG93biBhcnJvd1xuXHRcdFx0XHRpZih2ZXJ0TmF2ID09IFwiZWRpdG9yXCIpe1xuXHRcdFx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAzNTpcblx0XHRcdGNhc2UgMzY6XG5cdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fSk7XG5cblx0aWYoZWRpdG9yUGFyYW1zLm1hc2spe1xuXHRcdG1hc2tJbnB1dChpbnB1dCwgZWRpdG9yUGFyYW1zKTtcblx0fVxuXG5cdHJldHVybiBpbnB1dDtcbn1cblxuLy9pbnB1dCBlbGVtZW50IHdpdGggdHlwZSBvZiBudW1iZXJcbmZ1bmN0aW9uIHJhbmdlKGNlbGwsIG9uUmVuZGVyZWQsIHN1Y2Nlc3MsIGNhbmNlbCwgZWRpdG9yUGFyYW1zKXtcblx0dmFyIGNlbGxWYWx1ZSA9IGNlbGwuZ2V0VmFsdWUoKSxcblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwicmFuZ2VcIik7XG5cdFxuXHRpZiAodHlwZW9mIGVkaXRvclBhcmFtcy5tYXggIT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdGlucHV0LnNldEF0dHJpYnV0ZShcIm1heFwiLCBlZGl0b3JQYXJhbXMubWF4KTtcblx0fVxuXHRcblx0aWYgKHR5cGVvZiBlZGl0b3JQYXJhbXMubWluICE9IFwidW5kZWZpbmVkXCIpIHtcblx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoXCJtaW5cIiwgZWRpdG9yUGFyYW1zLm1pbik7XG5cdH1cblx0XG5cdGlmICh0eXBlb2YgZWRpdG9yUGFyYW1zLnN0ZXAgIT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdGlucHV0LnNldEF0dHJpYnV0ZShcInN0ZXBcIiwgZWRpdG9yUGFyYW1zLnN0ZXApO1xuXHR9XG5cdFxuXHQvL2NyZWF0ZSBhbmQgc3R5bGUgaW5wdXRcblx0aW5wdXQuc3R5bGUucGFkZGluZyA9IFwiNHB4XCI7XG5cdGlucHV0LnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG5cdGlucHV0LnN0eWxlLmJveFNpemluZyA9IFwiYm9yZGVyLWJveFwiO1xuXHRcblx0aWYoZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzICYmIHR5cGVvZiBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXMgPT0gXCJvYmplY3RcIil7XG5cdFx0Zm9yIChsZXQga2V5IGluIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlcyl7XG5cdFx0XHRpZihrZXkuY2hhckF0KDApID09IFwiK1wiKXtcblx0XHRcdFx0a2V5ID0ga2V5LnNsaWNlKDEpO1xuXHRcdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoa2V5LCBpbnB1dC5nZXRBdHRyaWJ1dGUoa2V5KSArIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlc1tcIitcIiArIGtleV0pO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoa2V5LCBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXNba2V5XSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRpbnB1dC52YWx1ZSA9IGNlbGxWYWx1ZTtcblx0XG5cdG9uUmVuZGVyZWQoZnVuY3Rpb24gKCkge1xuXHRcdGlmKGNlbGwuZ2V0VHlwZSgpID09PSBcImNlbGxcIil7XG5cdFx0XHRpbnB1dC5mb2N1cyh7cHJldmVudFNjcm9sbDogdHJ1ZX0pO1xuXHRcdFx0aW5wdXQuc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XG5cdFx0fVxuXHR9KTtcblx0XG5cdGZ1bmN0aW9uIG9uQ2hhbmdlKCl7XG5cdFx0dmFyIHZhbHVlID0gaW5wdXQudmFsdWU7XG5cdFx0XG5cdFx0aWYoIWlzTmFOKHZhbHVlKSAmJiB2YWx1ZSAhPT1cIlwiKXtcblx0XHRcdHZhbHVlID0gTnVtYmVyKHZhbHVlKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodmFsdWUgIT0gY2VsbFZhbHVlKXtcblx0XHRcdGlmKHN1Y2Nlc3ModmFsdWUpKXtcblx0XHRcdFx0Y2VsbFZhbHVlID0gdmFsdWU7IC8vcGVyc2lzdCB2YWx1ZSBpZiBzdWNjZXNzZnVsbHkgdmFsaWRhdGVkIGluY2FzZSBlZGl0b3IgaXMgdXNlZCBhcyBoZWFkZXIgZmlsdGVyXG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y2FuY2VsKCk7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL3N1Ym1pdCBuZXcgdmFsdWUgb24gYmx1clxuXHRpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCBmdW5jdGlvbihlKXtcblx0XHRvbkNoYW5nZSgpO1xuXHR9KTtcblx0XG5cdC8vc3VibWl0IG5ldyB2YWx1ZSBvbiBlbnRlclxuXHRpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBmdW5jdGlvbihlKXtcblx0XHRzd2l0Y2goZS5rZXlDb2RlKXtcblx0XHRcdGNhc2UgMTM6XG5cdFx0XHQvLyBjYXNlIDk6XG5cdFx0XHRcdG9uQ2hhbmdlKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRjYXNlIDI3OlxuXHRcdFx0XHRjYW5jZWwoKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9KTtcblx0XG5cdHJldHVybiBpbnB1dDtcbn1cblxuLy9pbnB1dCBlbGVtZW50XG5mdW5jdGlvbiBkYXRlKGNlbGwsIG9uUmVuZGVyZWQsIHN1Y2Nlc3MsIGNhbmNlbCwgZWRpdG9yUGFyYW1zKXtcblx0dmFyIGlucHV0Rm9ybWF0ID0gZWRpdG9yUGFyYW1zLmZvcm1hdCxcblx0dmVydE5hdiA9IGVkaXRvclBhcmFtcy52ZXJ0aWNhbE5hdmlnYXRpb24gfHwgXCJlZGl0b3JcIixcblx0RFQgPSBpbnB1dEZvcm1hdCA/ICh3aW5kb3cuRGF0ZVRpbWUgfHwgbHV4b24uRGF0ZVRpbWUpIDogbnVsbDtcblx0XG5cdC8vY3JlYXRlIGFuZCBzdHlsZSBpbnB1dFxuXHR2YXIgY2VsbFZhbHVlID0gY2VsbC5nZXRWYWx1ZSgpLFxuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XG5cdGZ1bmN0aW9uIGNvbnZlcnREYXRlKHZhbHVlKXtcblx0XHR2YXIgbmV3RGF0ZXRpbWU7XG5cdFx0XG5cdFx0aWYoRFQuaXNEYXRlVGltZSh2YWx1ZSkpe1xuXHRcdFx0bmV3RGF0ZXRpbWUgPSB2YWx1ZTtcblx0XHR9ZWxzZSBpZihpbnB1dEZvcm1hdCA9PT0gXCJpc29cIil7XG5cdFx0XHRuZXdEYXRldGltZSA9IERULmZyb21JU08oU3RyaW5nKHZhbHVlKSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0bmV3RGF0ZXRpbWUgPSBEVC5mcm9tRm9ybWF0KFN0cmluZyh2YWx1ZSksIGlucHV0Rm9ybWF0KTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIG5ld0RhdGV0aW1lLnRvRm9ybWF0KFwieXl5eS1NTS1kZFwiKTtcblx0fVxuXHRcblx0aW5wdXQudHlwZSA9IFwiZGF0ZVwiO1xuXHRpbnB1dC5zdHlsZS5wYWRkaW5nID0gXCI0cHhcIjtcblx0aW5wdXQuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcblx0aW5wdXQuc3R5bGUuYm94U2l6aW5nID0gXCJib3JkZXItYm94XCI7XG5cblx0aWYoZWRpdG9yUGFyYW1zLm1heCl7XG5cdFx0aW5wdXQuc2V0QXR0cmlidXRlKFwibWF4XCIsIGlucHV0Rm9ybWF0ID8gY29udmVydERhdGUoZWRpdG9yUGFyYW1zLm1heCkgOiBlZGl0b3JQYXJhbXMubWF4KTtcblx0fVxuXG5cdGlmKGVkaXRvclBhcmFtcy5taW4pe1xuXHRcdGlucHV0LnNldEF0dHJpYnV0ZShcIm1pblwiLCBpbnB1dEZvcm1hdCA/IGNvbnZlcnREYXRlKGVkaXRvclBhcmFtcy5taW4pIDogZWRpdG9yUGFyYW1zLm1pbik7XG5cdH1cblx0XG5cdGlmKGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlcyAmJiB0eXBlb2YgZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzID09IFwib2JqZWN0XCIpe1xuXHRcdGZvciAobGV0IGtleSBpbiBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXMpe1xuXHRcdFx0aWYoa2V5LmNoYXJBdCgwKSA9PSBcIitcIil7XG5cdFx0XHRcdGtleSA9IGtleS5zbGljZSgxKTtcblx0XHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKGtleSwgaW5wdXQuZ2V0QXR0cmlidXRlKGtleSkgKyBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXNbXCIrXCIgKyBrZXldKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKGtleSwgZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzW2tleV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0Y2VsbFZhbHVlID0gdHlwZW9mIGNlbGxWYWx1ZSAhPT0gXCJ1bmRlZmluZWRcIiA/IGNlbGxWYWx1ZSA6IFwiXCI7XG5cdFxuXHRpZihpbnB1dEZvcm1hdCl7XG5cdFx0aWYoRFQpe1x0XHRcblx0XHRcdGNlbGxWYWx1ZSA9IGNvbnZlcnREYXRlKGNlbGxWYWx1ZSk7XHRcdFx0XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS5lcnJvcihcIkVkaXRvciBFcnJvciAtICdkYXRlJyBlZGl0b3IgJ2Zvcm1hdCcgcGFyYW0gaXMgZGVwZW5kYW50IG9uIGx1eG9uLmpzXCIpO1xuXHRcdH1cblx0fVxuXHRcblx0aW5wdXQudmFsdWUgPSBjZWxsVmFsdWU7XG5cdFxuXHRvblJlbmRlcmVkKGZ1bmN0aW9uKCl7XG5cdFx0aWYoY2VsbC5nZXRUeXBlKCkgPT09IFwiY2VsbFwiKXtcblx0XHRcdGlucHV0LmZvY3VzKHtwcmV2ZW50U2Nyb2xsOiB0cnVlfSk7XG5cdFx0XHRpbnB1dC5zdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcblx0XHRcdFxuXHRcdFx0aWYoZWRpdG9yUGFyYW1zLnNlbGVjdENvbnRlbnRzKXtcblx0XHRcdFx0aW5wdXQuc2VsZWN0KCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblx0XG5cdGZ1bmN0aW9uIG9uQ2hhbmdlKCl7XG5cdFx0dmFyIHZhbHVlID0gaW5wdXQudmFsdWUsXG5cdFx0bHV4RGF0ZTtcblx0XHRcblx0XHRpZigoKGNlbGxWYWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgY2VsbFZhbHVlID09PSBcInVuZGVmaW5lZFwiKSAmJiB2YWx1ZSAhPT0gXCJcIikgfHwgdmFsdWUgIT09IGNlbGxWYWx1ZSl7XG5cdFx0XHRcblx0XHRcdGlmKHZhbHVlICYmIGlucHV0Rm9ybWF0KXtcblx0XHRcdFx0bHV4RGF0ZSA9IERULmZyb21Gb3JtYXQoU3RyaW5nKHZhbHVlKSwgXCJ5eXl5LU1NLWRkXCIpO1xuXG5cdFx0XHRcdHN3aXRjaChpbnB1dEZvcm1hdCl7XG5cdFx0XHRcdFx0Y2FzZSB0cnVlOlxuXHRcdFx0XHRcdFx0dmFsdWUgPSBsdXhEYXRlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlIFwiaXNvXCI6XG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGx1eERhdGUudG9JU08oKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdHZhbHVlID0gbHV4RGF0ZS50b0Zvcm1hdChpbnB1dEZvcm1hdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoc3VjY2Vzcyh2YWx1ZSkpe1xuXHRcdFx0XHRjZWxsVmFsdWUgPSBpbnB1dC52YWx1ZTsgLy9wZXJzaXN0IHZhbHVlIGlmIHN1Y2Nlc3NmdWxseSB2YWxpZGF0ZWQgaW5jYXNlIGVkaXRvciBpcyB1c2VkIGFzIGhlYWRlciBmaWx0ZXJcblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRjYW5jZWwoKTtcblx0XHR9XG5cdH1cblx0XG5cdC8vc3VibWl0IG5ldyB2YWx1ZSBvbiBibHVyXG5cdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIGZ1bmN0aW9uKGUpIHtcblx0XHRpZiAoZS5yZWxhdGVkVGFyZ2V0IHx8IGUucmFuZ2VQYXJlbnQgfHwgZS5leHBsaWNpdE9yaWdpbmFsVGFyZ2V0ICE9PSBpbnB1dCkge1xuXHRcdFx0b25DaGFuZ2UoKTsgLy8gb25seSBvbiBhIFwidHJ1ZVwiIGJsdXI7IG5vdCB3aGVuIGZvY3VzaW5nIGJyb3dzZXIncyBkYXRlL3RpbWUgcGlja2VyXG5cdFx0fVxuXHR9KTtcblx0XG5cdC8vc3VibWl0IG5ldyB2YWx1ZSBvbiBlbnRlclxuXHRpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBmdW5jdGlvbihlKXtcblx0XHRzd2l0Y2goZS5rZXlDb2RlKXtcblx0XHRcdC8vIGNhc2UgOTpcblx0XHRcdGNhc2UgMTM6XG5cdFx0XHRcdG9uQ2hhbmdlKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRjYXNlIDI3OlxuXHRcdFx0XHRjYW5jZWwoKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGNhc2UgMzU6XG5cdFx0XHRjYXNlIDM2OlxuXHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0Y2FzZSAzODogLy91cCBhcnJvd1xuXHRcdFx0Y2FzZSA0MDogLy9kb3duIGFycm93XG5cdFx0XHRcdGlmKHZlcnROYXYgPT0gXCJlZGl0b3JcIil7XG5cdFx0XHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fSk7XG5cdFxuXHRyZXR1cm4gaW5wdXQ7XG59XG5cbi8vaW5wdXQgZWxlbWVudFxuZnVuY3Rpb24gdGltZShjZWxsLCBvblJlbmRlcmVkLCBzdWNjZXNzLCBjYW5jZWwsIGVkaXRvclBhcmFtcyl7XG5cdHZhciBpbnB1dEZvcm1hdCA9IGVkaXRvclBhcmFtcy5mb3JtYXQsXG5cdHZlcnROYXYgPSBlZGl0b3JQYXJhbXMudmVydGljYWxOYXZpZ2F0aW9uIHx8IFwiZWRpdG9yXCIsXG5cdERUID0gaW5wdXRGb3JtYXQgPyAod2luZG93LkRhdGVUaW1lIHx8IGx1eG9uLkRhdGVUaW1lKSA6IG51bGwsIFxuXHRuZXdEYXRldGltZTtcblx0XG5cdC8vY3JlYXRlIGFuZCBzdHlsZSBpbnB1dFxuXHR2YXIgY2VsbFZhbHVlID0gY2VsbC5nZXRWYWx1ZSgpLFxuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XG5cdGlucHV0LnR5cGUgPSBcInRpbWVcIjtcblx0aW5wdXQuc3R5bGUucGFkZGluZyA9IFwiNHB4XCI7XG5cdGlucHV0LnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG5cdGlucHV0LnN0eWxlLmJveFNpemluZyA9IFwiYm9yZGVyLWJveFwiO1xuXHRcblx0aWYoZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzICYmIHR5cGVvZiBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXMgPT0gXCJvYmplY3RcIil7XG5cdFx0Zm9yIChsZXQga2V5IGluIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlcyl7XG5cdFx0XHRpZihrZXkuY2hhckF0KDApID09IFwiK1wiKXtcblx0XHRcdFx0a2V5ID0ga2V5LnNsaWNlKDEpO1xuXHRcdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoa2V5LCBpbnB1dC5nZXRBdHRyaWJ1dGUoa2V5KSArIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlc1tcIitcIiArIGtleV0pO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoa2V5LCBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXNba2V5XSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRjZWxsVmFsdWUgPSB0eXBlb2YgY2VsbFZhbHVlICE9PSBcInVuZGVmaW5lZFwiID8gY2VsbFZhbHVlIDogXCJcIjtcblx0XG5cdGlmKGlucHV0Rm9ybWF0KXtcblx0XHRpZihEVCl7XG5cdFx0XHRpZihEVC5pc0RhdGVUaW1lKGNlbGxWYWx1ZSkpe1xuXHRcdFx0XHRuZXdEYXRldGltZSA9IGNlbGxWYWx1ZTtcblx0XHRcdH1lbHNlIGlmKGlucHV0Rm9ybWF0ID09PSBcImlzb1wiKXtcblx0XHRcdFx0bmV3RGF0ZXRpbWUgPSBEVC5mcm9tSVNPKFN0cmluZyhjZWxsVmFsdWUpKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0bmV3RGF0ZXRpbWUgPSBEVC5mcm9tRm9ybWF0KFN0cmluZyhjZWxsVmFsdWUpLCBpbnB1dEZvcm1hdCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGNlbGxWYWx1ZSA9IG5ld0RhdGV0aW1lLnRvRm9ybWF0KFwiaGg6bW1cIik7XG5cdFx0XHRcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKFwiRWRpdG9yIEVycm9yIC0gJ2RhdGUnIGVkaXRvciAnZm9ybWF0JyBwYXJhbSBpcyBkZXBlbmRhbnQgb24gbHV4b24uanNcIik7XG5cdFx0fVxuXHR9XG5cdFxuXHRpbnB1dC52YWx1ZSA9IGNlbGxWYWx1ZTtcblx0XG5cdG9uUmVuZGVyZWQoZnVuY3Rpb24oKXtcblx0XHRpZihjZWxsLmdldFR5cGUoKSA9PSBcImNlbGxcIil7XG5cdFx0XHRpbnB1dC5mb2N1cyh7cHJldmVudFNjcm9sbDogdHJ1ZX0pO1xuXHRcdFx0aW5wdXQuc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XG5cdFx0XHRcblx0XHRcdGlmKGVkaXRvclBhcmFtcy5zZWxlY3RDb250ZW50cyl7XG5cdFx0XHRcdGlucHV0LnNlbGVjdCgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cdFxuXHRmdW5jdGlvbiBvbkNoYW5nZSgpe1xuXHRcdHZhciB2YWx1ZSA9IGlucHV0LnZhbHVlLFxuXHRcdGx1eFRpbWU7XG5cdFx0XG5cdFx0aWYoKChjZWxsVmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIGNlbGxWYWx1ZSA9PT0gXCJ1bmRlZmluZWRcIikgJiYgdmFsdWUgIT09IFwiXCIpIHx8IHZhbHVlICE9PSBjZWxsVmFsdWUpe1xuXHRcdFx0XG5cdFx0XHRpZih2YWx1ZSAmJiBpbnB1dEZvcm1hdCl7XG5cdFx0XHRcdGx1eFRpbWUgPSBEVC5mcm9tRm9ybWF0KFN0cmluZyh2YWx1ZSksIFwiaGg6bW1cIik7XG5cblx0XHRcdFx0c3dpdGNoKGlucHV0Rm9ybWF0KXtcblx0XHRcdFx0XHRjYXNlIHRydWU6XG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGx1eFRpbWU7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgXCJpc29cIjpcblx0XHRcdFx0XHRcdHZhbHVlID0gbHV4VGltZS50b0lTTygpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0dmFsdWUgPSBsdXhUaW1lLnRvRm9ybWF0KGlucHV0Rm9ybWF0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihzdWNjZXNzKHZhbHVlKSl7XG5cdFx0XHRcdGNlbGxWYWx1ZSA9IGlucHV0LnZhbHVlOyAvL3BlcnNpc3QgdmFsdWUgaWYgc3VjY2Vzc2Z1bGx5IHZhbGlkYXRlZCBpbmNhc2UgZWRpdG9yIGlzIHVzZWQgYXMgaGVhZGVyIGZpbHRlclxuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGNhbmNlbCgpO1xuXHRcdH1cblx0fVxuXHRcblx0Ly9zdWJtaXQgbmV3IHZhbHVlIG9uIGJsdXJcblx0aW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgZnVuY3Rpb24oZSkge1xuXHRcdGlmIChlLnJlbGF0ZWRUYXJnZXQgfHwgZS5yYW5nZVBhcmVudCB8fCBlLmV4cGxpY2l0T3JpZ2luYWxUYXJnZXQgIT09IGlucHV0KSB7XG5cdFx0XHRvbkNoYW5nZSgpOyAvLyBvbmx5IG9uIGEgXCJ0cnVlXCIgYmx1cjsgbm90IHdoZW4gZm9jdXNpbmcgYnJvd3NlcidzIGRhdGUvdGltZSBwaWNrZXJcblx0XHR9XG5cdH0pO1xuXHRcblx0Ly9zdWJtaXQgbmV3IHZhbHVlIG9uIGVudGVyXG5cdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdHN3aXRjaChlLmtleUNvZGUpe1xuXHRcdFx0Ly8gY2FzZSA5OlxuXHRcdFx0Y2FzZSAxMzpcblx0XHRcdFx0b25DaGFuZ2UoKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGNhc2UgMjc6XG5cdFx0XHRcdGNhbmNlbCgpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0Y2FzZSAzNTpcblx0XHRcdGNhc2UgMzY6XG5cdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDM4OiAvL3VwIGFycm93XG5cdFx0XHRjYXNlIDQwOiAvL2Rvd24gYXJyb3dcblx0XHRcdFx0aWYodmVydE5hdiA9PSBcImVkaXRvclwiKXtcblx0XHRcdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9KTtcblx0XG5cdHJldHVybiBpbnB1dDtcbn1cblxuLy9pbnB1dCBlbGVtZW50XG5mdW5jdGlvbiBkYXRldGltZShjZWxsLCBvblJlbmRlcmVkLCBzdWNjZXNzLCBjYW5jZWwsIGVkaXRvclBhcmFtcyl7XG5cdHZhciBpbnB1dEZvcm1hdCA9IGVkaXRvclBhcmFtcy5mb3JtYXQsXG5cdHZlcnROYXYgPSBlZGl0b3JQYXJhbXMudmVydGljYWxOYXZpZ2F0aW9uIHx8IFwiZWRpdG9yXCIsXG5cdERUID0gaW5wdXRGb3JtYXQgPyAod2luZG93LkRhdGVUaW1lIHx8IGx1eG9uLkRhdGVUaW1lKSA6IG51bGwsIFxuXHRuZXdEYXRldGltZTtcblx0XG5cdC8vY3JlYXRlIGFuZCBzdHlsZSBpbnB1dFxuXHR2YXIgY2VsbFZhbHVlID0gY2VsbC5nZXRWYWx1ZSgpLFxuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XG5cdGlucHV0LnR5cGUgPSBcImRhdGV0aW1lLWxvY2FsXCI7XG5cdGlucHV0LnN0eWxlLnBhZGRpbmcgPSBcIjRweFwiO1xuXHRpbnB1dC5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xuXHRpbnB1dC5zdHlsZS5ib3hTaXppbmcgPSBcImJvcmRlci1ib3hcIjtcblx0XG5cdGlmKGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlcyAmJiB0eXBlb2YgZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzID09IFwib2JqZWN0XCIpe1xuXHRcdGZvciAobGV0IGtleSBpbiBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXMpe1xuXHRcdFx0aWYoa2V5LmNoYXJBdCgwKSA9PSBcIitcIil7XG5cdFx0XHRcdGtleSA9IGtleS5zbGljZSgxKTtcblx0XHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKGtleSwgaW5wdXQuZ2V0QXR0cmlidXRlKGtleSkgKyBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXNbXCIrXCIgKyBrZXldKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKGtleSwgZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzW2tleV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0Y2VsbFZhbHVlID0gdHlwZW9mIGNlbGxWYWx1ZSAhPT0gXCJ1bmRlZmluZWRcIiA/IGNlbGxWYWx1ZSA6IFwiXCI7XG5cdFxuXHRpZihpbnB1dEZvcm1hdCl7XG5cdFx0aWYoRFQpe1xuXHRcdFx0aWYoRFQuaXNEYXRlVGltZShjZWxsVmFsdWUpKXtcblx0XHRcdFx0bmV3RGF0ZXRpbWUgPSBjZWxsVmFsdWU7XG5cdFx0XHR9ZWxzZSBpZihpbnB1dEZvcm1hdCA9PT0gXCJpc29cIil7XG5cdFx0XHRcdG5ld0RhdGV0aW1lID0gRFQuZnJvbUlTTyhTdHJpbmcoY2VsbFZhbHVlKSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdG5ld0RhdGV0aW1lID0gRFQuZnJvbUZvcm1hdChTdHJpbmcoY2VsbFZhbHVlKSwgaW5wdXRGb3JtYXQpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRjZWxsVmFsdWUgPSBuZXdEYXRldGltZS50b0Zvcm1hdChcInl5eXktTU0tZGRcIikgICsgXCJUXCIgKyBuZXdEYXRldGltZS50b0Zvcm1hdChcImhoOm1tXCIpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoXCJFZGl0b3IgRXJyb3IgLSAnZGF0ZScgZWRpdG9yICdmb3JtYXQnIHBhcmFtIGlzIGRlcGVuZGFudCBvbiBsdXhvbi5qc1wiKTtcblx0XHR9XG5cdH1cblx0XG5cdGlucHV0LnZhbHVlID0gY2VsbFZhbHVlO1xuXHRcblx0b25SZW5kZXJlZChmdW5jdGlvbigpe1xuXHRcdGlmKGNlbGwuZ2V0VHlwZSgpID09PSBcImNlbGxcIil7XG5cdFx0XHRpbnB1dC5mb2N1cyh7cHJldmVudFNjcm9sbDogdHJ1ZX0pO1xuXHRcdFx0aW5wdXQuc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XG5cdFx0XHRcblx0XHRcdGlmKGVkaXRvclBhcmFtcy5zZWxlY3RDb250ZW50cyl7XG5cdFx0XHRcdGlucHV0LnNlbGVjdCgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cdFxuXHRmdW5jdGlvbiBvbkNoYW5nZSgpe1xuXHRcdHZhciB2YWx1ZSA9IGlucHV0LnZhbHVlLFxuXHRcdGx1eERhdGVUaW1lO1xuXHRcdFxuXHRcdGlmKCgoY2VsbFZhbHVlID09PSBudWxsIHx8IHR5cGVvZiBjZWxsVmFsdWUgPT09IFwidW5kZWZpbmVkXCIpICYmIHZhbHVlICE9PSBcIlwiKSB8fCB2YWx1ZSAhPT0gY2VsbFZhbHVlKXtcblxuXHRcdFx0aWYodmFsdWUgJiYgaW5wdXRGb3JtYXQpe1xuXHRcdFx0XHRsdXhEYXRlVGltZSA9IERULmZyb21JU08oU3RyaW5nKHZhbHVlKSk7XG5cblx0XHRcdFx0c3dpdGNoKGlucHV0Rm9ybWF0KXtcblx0XHRcdFx0XHRjYXNlIHRydWU6XG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGx1eERhdGVUaW1lO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlIFwiaXNvXCI6XG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGx1eERhdGVUaW1lLnRvSVNPKCk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGx1eERhdGVUaW1lLnRvRm9ybWF0KGlucHV0Rm9ybWF0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihzdWNjZXNzKHZhbHVlKSl7XG5cdFx0XHRcdGNlbGxWYWx1ZSA9IGlucHV0LnZhbHVlOyAvL3BlcnNpc3QgdmFsdWUgaWYgc3VjY2Vzc2Z1bGx5IHZhbGlkYXRlZCBpbmNhc2UgZWRpdG9yIGlzIHVzZWQgYXMgaGVhZGVyIGZpbHRlclxuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGNhbmNlbCgpO1xuXHRcdH1cblx0fVxuXHRcblx0Ly9zdWJtaXQgbmV3IHZhbHVlIG9uIGJsdXJcblx0aW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgZnVuY3Rpb24oZSkge1xuXHRcdGlmIChlLnJlbGF0ZWRUYXJnZXQgfHwgZS5yYW5nZVBhcmVudCB8fCBlLmV4cGxpY2l0T3JpZ2luYWxUYXJnZXQgIT09IGlucHV0KSB7XG5cdFx0XHRvbkNoYW5nZSgpOyAvLyBvbmx5IG9uIGEgXCJ0cnVlXCIgYmx1cjsgbm90IHdoZW4gZm9jdXNpbmcgYnJvd3NlcidzIGRhdGUvdGltZSBwaWNrZXJcblx0XHR9XG5cdH0pO1xuXHRcblx0Ly9zdWJtaXQgbmV3IHZhbHVlIG9uIGVudGVyXG5cdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdHN3aXRjaChlLmtleUNvZGUpe1xuXHRcdFx0Ly8gY2FzZSA5OlxuXHRcdFx0Y2FzZSAxMzpcblx0XHRcdFx0b25DaGFuZ2UoKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGNhc2UgMjc6XG5cdFx0XHRcdGNhbmNlbCgpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0Y2FzZSAzNTpcblx0XHRcdGNhc2UgMzY6XG5cdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDM4OiAvL3VwIGFycm93XG5cdFx0XHRjYXNlIDQwOiAvL2Rvd24gYXJyb3dcblx0XHRcdFx0aWYodmVydE5hdiA9PSBcImVkaXRvclwiKXtcblx0XHRcdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9KTtcblx0XG5cdHJldHVybiBpbnB1dDtcbn1cblxuY2xhc3MgRWRpdHtcblx0Y29uc3RydWN0b3IoZWRpdG9yLCBjZWxsLCBvblJlbmRlcmVkLCBzdWNjZXNzLCBjYW5jZWwsIGVkaXRvclBhcmFtcyl7XG5cdFx0dGhpcy5lZGl0ID0gZWRpdG9yO1xuXHRcdHRoaXMudGFibGUgPSBlZGl0b3IudGFibGU7XG5cdFx0dGhpcy5jZWxsID0gY2VsbDtcblx0XHR0aGlzLnBhcmFtcyA9IHRoaXMuX2luaXRpYWxpemVQYXJhbXMoZWRpdG9yUGFyYW1zKTtcblx0XHRcblx0XHR0aGlzLmRhdGEgPSBbXTtcblx0XHR0aGlzLmRpc3BsYXlJdGVtcyA9IFtdO1xuXHRcdHRoaXMuY3VycmVudEl0ZW1zID0gW107XG5cdFx0dGhpcy5mb2N1c2VkSXRlbSA9IG51bGw7XG5cdFx0XG5cdFx0dGhpcy5pbnB1dCA9IHRoaXMuX2NyZWF0ZUlucHV0RWxlbWVudCgpO1xuXHRcdHRoaXMubGlzdEVsID0gdGhpcy5fY3JlYXRlTGlzdEVsZW1lbnQoKTtcblx0XHRcblx0XHR0aGlzLmluaXRpYWxWYWx1ZXMgPSBudWxsOyBcblx0XHRcblx0XHR0aGlzLmlzRmlsdGVyID0gY2VsbC5nZXRUeXBlKCkgPT09IFwiaGVhZGVyXCI7XG5cdFx0XG5cdFx0dGhpcy5maWx0ZXJUaW1lb3V0ID0gbnVsbDtcblx0XHR0aGlzLmZpbHRlcmVkID0gZmFsc2U7XG5cdFx0dGhpcy50eXBpbmcgPSBmYWxzZTtcblx0XHRcblx0XHR0aGlzLnZhbHVlcyA9IFtdOyBcblx0XHR0aGlzLnBvcHVwID0gbnVsbDsgIFxuXHRcdFxuXHRcdHRoaXMubGlzdEl0ZXJhdGlvbiA9IDA7XG5cdFx0XG5cdFx0dGhpcy5sYXN0QWN0aW9uPVwiXCI7XG5cdFx0dGhpcy5maWx0ZXJUZXJtPVwiXCI7XG5cdFx0XG5cdFx0dGhpcy5ibHVyYWJsZSA9IHRydWU7XG5cdFx0XG5cdFx0dGhpcy5hY3Rpb25zID0ge1xuXHRcdFx0c3VjY2VzczpzdWNjZXNzLFxuXHRcdFx0Y2FuY2VsOmNhbmNlbFxuXHRcdH07XG5cdFx0XG5cdFx0dGhpcy5fZGVwcmVjYXRlZE9wdGlvbnNDaGVjaygpO1xuXHRcdHRoaXMuX2luaXRpYWxpemVWYWx1ZSgpO1xuXHRcdFxuXHRcdG9uUmVuZGVyZWQodGhpcy5fb25SZW5kZXJlZC5iaW5kKHRoaXMpKTtcblx0fVxuXHRcblx0X2RlcHJlY2F0ZWRPcHRpb25zQ2hlY2soKXtcblx0XHRpZih0aGlzLnBhcmFtcy5saXN0SXRlbUZvcm1hdHRlcil7XG5cdFx0XHR0aGlzLmNlbGwuZ2V0VGFibGUoKS5kZXByZWNhdGlvbkFkdmlzb3IubXNnKFwiVGhlIGxpc3RJdGVtRm9ybWF0dGVyIGVkaXRvciBwYXJhbSBoYXMgYmVlbiBkZXByZWNhdGVkLCBwbGVhc2Ugc2VlIHRoZSBsYXRlc3QgZWRpdG9yIGRvY3VtZW50YXRpb24gZm9yIHVwZGF0ZWQgb3B0aW9uc1wiKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodGhpcy5wYXJhbXMuc29ydFZhbHVlc0xpc3Qpe1xuXHRcdFx0dGhpcy5jZWxsLmdldFRhYmxlKCkuZGVwcmVjYXRpb25BZHZpc29yLm1zZyhcIlRoZSBzb3J0VmFsdWVzTGlzdCBlZGl0b3IgcGFyYW0gaGFzIGJlZW4gZGVwcmVjYXRlZCwgcGxlYXNlIHNlZSB0aGUgbGF0ZXN0IGVkaXRvciBkb2N1bWVudGF0aW9uIGZvciB1cGRhdGVkIG9wdGlvbnNcIik7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRoaXMucGFyYW1zLnNlYXJjaEZ1bmMpe1xuXHRcdFx0dGhpcy5jZWxsLmdldFRhYmxlKCkuZGVwcmVjYXRpb25BZHZpc29yLm1zZyhcIlRoZSBzZWFyY2hGdW5jIGVkaXRvciBwYXJhbSBoYXMgYmVlbiBkZXByZWNhdGVkLCBwbGVhc2Ugc2VlIHRoZSBsYXRlc3QgZWRpdG9yIGRvY3VtZW50YXRpb24gZm9yIHVwZGF0ZWQgb3B0aW9uc1wiKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodGhpcy5wYXJhbXMuc2VhcmNoaW5nUGxhY2Vob2xkZXIpe1xuXHRcdFx0dGhpcy5jZWxsLmdldFRhYmxlKCkuZGVwcmVjYXRpb25BZHZpc29yLm1zZyhcIlRoZSBzZWFyY2hpbmdQbGFjZWhvbGRlciBlZGl0b3IgcGFyYW0gaGFzIGJlZW4gZGVwcmVjYXRlZCwgcGxlYXNlIHNlZSB0aGUgbGF0ZXN0IGVkaXRvciBkb2N1bWVudGF0aW9uIGZvciB1cGRhdGVkIG9wdGlvbnNcIik7XG5cdFx0fVxuXHR9XG5cdFxuXHRfaW5pdGlhbGl6ZVZhbHVlKCl7XG5cdFx0dmFyIGluaXRpYWxWYWx1ZSA9IHRoaXMuY2VsbC5nZXRWYWx1ZSgpO1xuXHRcdFxuXHRcdGlmKHR5cGVvZiBpbml0aWFsVmFsdWUgPT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHRoaXMucGFyYW1zLmRlZmF1bHRWYWx1ZSAhPT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRpbml0aWFsVmFsdWUgPSB0aGlzLnBhcmFtcy5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuaW5pdGlhbFZhbHVlcyA9IHRoaXMucGFyYW1zLm11bHRpc2VsZWN0ID8gaW5pdGlhbFZhbHVlIDogW2luaXRpYWxWYWx1ZV07XG5cdFx0XG5cdFx0aWYodGhpcy5pc0ZpbHRlcil7XG5cdFx0XHR0aGlzLmlucHV0LnZhbHVlID0gdGhpcy5pbml0aWFsVmFsdWVzID8gdGhpcy5pbml0aWFsVmFsdWVzLmpvaW4oXCIsXCIpIDogXCJcIjtcblx0XHRcdHRoaXMuaGVhZGVyRmlsdGVySW5pdGlhbExpc3RHZW4oKTsgICAgICAgICAgICBcblx0XHR9XG5cdH1cblx0XG5cdF9vblJlbmRlcmVkKCl7XG5cdFx0dmFyIGNlbGxFbCA9IHRoaXMuY2VsbC5nZXRFbGVtZW50KCk7XG5cdFx0XG5cdFx0ZnVuY3Rpb24gY2xpY2tTdG9wKGUpe1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XHRcblx0XHRcblx0XHRpZighdGhpcy5pc0ZpbHRlcil7XG5cdFx0XHR0aGlzLmlucHV0LnN0eWxlLmhlaWdodCA9IFwiMTAwJVwiO1xuXHRcdFx0dGhpcy5pbnB1dC5mb2N1cyh7cHJldmVudFNjcm9sbDogdHJ1ZX0pO1xuXHRcdH1cblx0XHRcblx0XHRcblx0XHRjZWxsRWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGNsaWNrU3RvcCk7XG5cdFx0XG5cdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRjZWxsRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGNsaWNrU3RvcCk7XG5cdFx0fSwgMTAwMCk7XG5cdFx0XG5cdFx0dGhpcy5pbnB1dC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHRoaXMuX3ByZXZlbnRQb3B1cEJsdXIuYmluZCh0aGlzKSk7XG5cdH1cblx0XG5cdF9jcmVhdGVMaXN0RWxlbWVudCgpe1xuXHRcdHZhciBsaXN0RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdGxpc3RFbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWVkaXQtbGlzdFwiKTtcblx0XHRcblx0XHRsaXN0RWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCB0aGlzLl9wcmV2ZW50Qmx1ci5iaW5kKHRoaXMpKTtcblx0XHRsaXN0RWwuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faW5wdXRLZXlEb3duLmJpbmQodGhpcykpO1xuXHRcdFxuXHRcdHJldHVybiBsaXN0RWw7XG5cdH1cblx0XG5cdF9zZXRMaXN0V2lkdGgoKXtcblx0XHR2YXIgZWxlbWVudCA9IHRoaXMuaXNGaWx0ZXIgPyB0aGlzLmlucHV0IDogdGhpcy5jZWxsLmdldEVsZW1lbnQoKTtcblx0XHRcblx0XHR0aGlzLmxpc3RFbC5zdHlsZS5taW5XaWR0aCA9IGVsZW1lbnQub2Zmc2V0V2lkdGggKyBcInB4XCI7XG5cdFx0XG5cdFx0aWYodGhpcy5wYXJhbXMubWF4V2lkdGgpe1xuXHRcdFx0aWYodGhpcy5wYXJhbXMubWF4V2lkdGggPT09IHRydWUpe1xuXHRcdFx0XHR0aGlzLmxpc3RFbC5zdHlsZS5tYXhXaWR0aCA9IGVsZW1lbnQub2Zmc2V0V2lkdGggKyBcInB4XCI7XG5cdFx0XHR9ZWxzZSBpZih0eXBlb2YgdGhpcy5wYXJhbXMubWF4V2lkdGggPT09IFwibnVtYmVyXCIpe1xuXHRcdFx0XHR0aGlzLmxpc3RFbC5zdHlsZS5tYXhXaWR0aCA9IHRoaXMucGFyYW1zLm1heFdpZHRoICsgXCJweFwiO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmxpc3RFbC5zdHlsZS5tYXhXaWR0aCA9IHRoaXMucGFyYW1zLm1heFdpZHRoO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0fVxuXHRcblx0X2NyZWF0ZUlucHV0RWxlbWVudCgpe1xuXHRcdHZhciBhdHRyaWJzID0gdGhpcy5wYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXM7XG5cdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXHRcdFxuXHRcdGlucHV0LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgdGhpcy5wYXJhbXMuY2xlYXJhYmxlID8gXCJzZWFyY2hcIiA6IFwidGV4dFwiKTtcblx0XHRcblx0XHRpbnB1dC5zdHlsZS5wYWRkaW5nID0gXCI0cHhcIjtcblx0XHRpbnB1dC5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xuXHRcdGlucHV0LnN0eWxlLmJveFNpemluZyA9IFwiYm9yZGVyLWJveFwiO1xuXHRcdFxuXHRcdGlmKCF0aGlzLnBhcmFtcy5hdXRvY29tcGxldGUpe1xuXHRcdFx0aW5wdXQuc3R5bGUuY3Vyc29yID0gXCJkZWZhdWx0XCI7XG5cdFx0XHRpbnB1dC5zdHlsZS5jYXJldENvbG9yID0gXCJ0cmFuc3BhcmVudFwiO1xuXHRcdFx0Ly8gaW5wdXQucmVhZE9ubHkgPSAodGhpcy5lZGl0LmN1cnJlbnRDZWxsICE9IGZhbHNlKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYoYXR0cmlicyAmJiB0eXBlb2YgYXR0cmlicyA9PSBcIm9iamVjdFwiKXtcblx0XHRcdGZvciAobGV0IGtleSBpbiBhdHRyaWJzKXtcblx0XHRcdFx0aWYoa2V5LmNoYXJBdCgwKSA9PSBcIitcIil7XG5cdFx0XHRcdFx0a2V5ID0ga2V5LnNsaWNlKDEpO1xuXHRcdFx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZShrZXksIGlucHV0LmdldEF0dHJpYnV0ZShrZXkpICsgYXR0cmlic1tcIitcIiArIGtleV0pO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlic1trZXldKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRpZih0aGlzLnBhcmFtcy5tYXNrKXtcblx0XHRcdG1hc2tJbnB1dChpbnB1dCwgdGhpcy5wYXJhbXMpO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLl9iaW5kSW5wdXRFdmVudHMoaW5wdXQpO1xuXHRcdFxuXHRcdHJldHVybiBpbnB1dDtcblx0fVxuXHRcblx0X2luaXRpYWxpemVQYXJhbXMocGFyYW1zKXtcblx0XHR2YXIgdmFsdWVLZXlzID0gW1widmFsdWVzXCIsIFwidmFsdWVzVVJMXCIsIFwidmFsdWVzTG9va3VwXCJdLFxuXHRcdHZhbHVlQ2hlY2s7XG5cdFx0XG5cdFx0cGFyYW1zID0gT2JqZWN0LmFzc2lnbih7fSwgcGFyYW1zKTtcblx0XHRcblx0XHRwYXJhbXMudmVydGljYWxOYXZpZ2F0aW9uID0gcGFyYW1zLnZlcnRpY2FsTmF2aWdhdGlvbiB8fCBcImVkaXRvclwiO1xuXHRcdHBhcmFtcy5wbGFjZWhvbGRlckxvYWRpbmcgPSB0eXBlb2YgcGFyYW1zLnBsYWNlaG9sZGVyTG9hZGluZyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwiU2VhcmNoaW5nIC4uLlwiIDogcGFyYW1zLnBsYWNlaG9sZGVyTG9hZGluZztcblx0XHRwYXJhbXMucGxhY2Vob2xkZXJFbXB0eSA9IHR5cGVvZiBwYXJhbXMucGxhY2Vob2xkZXJFbXB0eSA9PT0gXCJ1bmRlZmluZWRcIiA/IFwiTm8gUmVzdWx0cyBGb3VuZFwiIDogcGFyYW1zLnBsYWNlaG9sZGVyRW1wdHk7XG5cdFx0cGFyYW1zLmZpbHRlckRlbGF5ID0gdHlwZW9mIHBhcmFtcy5maWx0ZXJEZWxheSA9PT0gXCJ1bmRlZmluZWRcIiA/IDMwMCA6IHBhcmFtcy5maWx0ZXJEZWxheTtcblx0XHRcblx0XHRwYXJhbXMuZW1wdHlWYWx1ZSA9IE9iamVjdC5rZXlzKHBhcmFtcykuaW5jbHVkZXMoXCJlbXB0eVZhbHVlXCIpID8gcGFyYW1zLmVtcHR5VmFsdWUgOiBcIlwiO1xuXHRcdFxuXHRcdHZhbHVlQ2hlY2sgPSBPYmplY3Qua2V5cyhwYXJhbXMpLmZpbHRlcihrZXkgPT4gdmFsdWVLZXlzLmluY2x1ZGVzKGtleSkpLmxlbmd0aDtcblx0XHRcblx0XHRpZighdmFsdWVDaGVjayl7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJsaXN0IGVkaXRvciBjb25maWcgZXJyb3IgLSBlaXRoZXIgdGhlIHZhbHVlcywgdmFsdWVzVVJMLCBvciB2YWx1ZXNMb29rdXAgb3B0aW9uIG11c3QgYmUgc2V0XCIpO1xuXHRcdH1lbHNlIGlmKHZhbHVlQ2hlY2sgPiAxKXtcblx0XHRcdGNvbnNvbGUud2FybihcImxpc3QgZWRpdG9yIGNvbmZpZyBlcnJvciAtIG9ubHkgb25lIG9mIHRoZSB2YWx1ZXMsIHZhbHVlc1VSTCwgb3IgdmFsdWVzTG9va3VwIG9wdGlvbnMgY2FuIGJlIHNldCBvbiB0aGUgc2FtZSBlZGl0b3JcIik7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHBhcmFtcy5hdXRvY29tcGxldGUpe1xuXHRcdFx0aWYocGFyYW1zLm11bHRpc2VsZWN0KXtcblx0XHRcdFx0cGFyYW1zLm11bHRpc2VsZWN0ID0gZmFsc2U7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcImxpc3QgZWRpdG9yIGNvbmZpZyBlcnJvciAtIG11bHRpc2VsZWN0IG9wdGlvbiBpcyBub3QgYXZhaWxhYmxlIHdoZW4gYXV0b2NvbXBsZXRlIGlzIGVuYWJsZWRcIik7XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYocGFyYW1zLmZyZWV0ZXh0KXtcblx0XHRcdFx0cGFyYW1zLmZyZWV0ZXh0ID0gZmFsc2U7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcImxpc3QgZWRpdG9yIGNvbmZpZyBlcnJvciAtIGZyZWV0ZXh0IG9wdGlvbiBpcyBvbmx5IGF2YWlsYWJsZSB3aGVuIGF1dG9jb21wbGV0ZSBpcyBlbmFibGVkXCIpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihwYXJhbXMuZmlsdGVyRnVuYyl7XG5cdFx0XHRcdHBhcmFtcy5maWx0ZXJGdW5jID0gZmFsc2U7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcImxpc3QgZWRpdG9yIGNvbmZpZyBlcnJvciAtIGZpbHRlckZ1bmMgb3B0aW9uIGlzIG9ubHkgYXZhaWxhYmxlIHdoZW4gYXV0b2NvbXBsZXRlIGlzIGVuYWJsZWRcIik7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKHBhcmFtcy5maWx0ZXJSZW1vdGUpe1xuXHRcdFx0XHRwYXJhbXMuZmlsdGVyUmVtb3RlID0gZmFsc2U7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcImxpc3QgZWRpdG9yIGNvbmZpZyBlcnJvciAtIGZpbHRlclJlbW90ZSBvcHRpb24gaXMgb25seSBhdmFpbGFibGUgd2hlbiBhdXRvY29tcGxldGUgaXMgZW5hYmxlZFwiKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYocGFyYW1zLm1hc2spe1xuXHRcdFx0XHRwYXJhbXMubWFzayA9IGZhbHNlO1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJsaXN0IGVkaXRvciBjb25maWcgZXJyb3IgLSBtYXNrIG9wdGlvbiBpcyBvbmx5IGF2YWlsYWJsZSB3aGVuIGF1dG9jb21wbGV0ZSBpcyBlbmFibGVkXCIpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihwYXJhbXMuYWxsb3dFbXB0eSl7XG5cdFx0XHRcdHBhcmFtcy5hbGxvd0VtcHR5ID0gZmFsc2U7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcImxpc3QgZWRpdG9yIGNvbmZpZyBlcnJvciAtIGFsbG93RW1wdHkgb3B0aW9uIGlzIG9ubHkgYXZhaWxhYmxlIHdoZW4gYXV0b2NvbXBsZXRlIGlzIGVuYWJsZWRcIik7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKHBhcmFtcy5saXN0T25FbXB0eSl7XG5cdFx0XHRcdHBhcmFtcy5saXN0T25FbXB0eSA9IGZhbHNlO1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJsaXN0IGVkaXRvciBjb25maWcgZXJyb3IgLSBsaXN0T25FbXB0eSBvcHRpb24gaXMgb25seSBhdmFpbGFibGUgd2hlbiBhdXRvY29tcGxldGUgaXMgZW5hYmxlZFwiKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0aWYocGFyYW1zLmZpbHRlclJlbW90ZSAmJiAhKHR5cGVvZiBwYXJhbXMudmFsdWVzTG9va3VwID09PSBcImZ1bmN0aW9uXCIgfHwgcGFyYW1zLnZhbHVlc1VSTCkpe1xuXHRcdFx0cGFyYW1zLmZpbHRlclJlbW90ZSA9IGZhbHNlO1xuXHRcdFx0Y29uc29sZS53YXJuKFwibGlzdCBlZGl0b3IgY29uZmlnIGVycm9yIC0gZmlsdGVyUmVtb3RlIG9wdGlvbiBzaG91bGQgb25seSBiZSB1c2VkIHdoZW4gdmFsdWVzIGxpc3QgaXMgcG9wdWxhdGVkIGZyb20gYSByZW1vdGUgc291cmNlXCIpO1xuXHRcdH1cblx0XHRyZXR1cm4gcGFyYW1zO1xuXHR9XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8gRXZlbnQgSGFuZGxpbmcgLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHRfYmluZElucHV0RXZlbnRzKGlucHV0KXtcblx0XHRpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgdGhpcy5faW5wdXRGb2N1cy5iaW5kKHRoaXMpKTtcblx0XHRpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5faW5wdXRDbGljay5iaW5kKHRoaXMpKTtcblx0XHRpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCB0aGlzLl9pbnB1dEJsdXIuYmluZCh0aGlzKSk7XG5cdFx0aW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faW5wdXRLZXlEb3duLmJpbmQodGhpcykpO1xuXHRcdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJzZWFyY2hcIiwgdGhpcy5faW5wdXRTZWFyY2guYmluZCh0aGlzKSk7XG5cdFx0XG5cdFx0aWYodGhpcy5wYXJhbXMuYXV0b2NvbXBsZXRlKXtcblx0XHRcdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCB0aGlzLl9pbnB1dEtleVVwLmJpbmQodGhpcykpO1xuXHRcdH1cblx0fVxuXHRcblx0XG5cdF9pbnB1dEZvY3VzKGUpe1xuXHRcdHRoaXMucmVidWlsZE9wdGlvbnNMaXN0KCk7XG5cdH1cblx0XG5cdF9maWx0ZXIoKXtcblx0XHRpZih0aGlzLnBhcmFtcy5maWx0ZXJSZW1vdGUpe1xuXHRcdFx0Y2xlYXJUaW1lb3V0KHRoaXMuZmlsdGVyVGltZW91dCk7XG5cdFx0XHRcblx0XHRcdHRoaXMuZmlsdGVyVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHR0aGlzLnJlYnVpbGRPcHRpb25zTGlzdCgpO1xuXHRcdFx0fSwgdGhpcy5wYXJhbXMuZmlsdGVyRGVsYXkpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuX2ZpbHRlckxpc3QoKTtcblx0XHR9XG5cdH1cblx0XG5cdF9pbnB1dENsaWNrKGUpe1xuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cblx0XG5cdF9pbnB1dEJsdXIoZSl7XG5cdFx0aWYodGhpcy5ibHVyYWJsZSl7XG5cdFx0XHRpZih0aGlzLnBvcHVwKXtcblx0XHRcdFx0dGhpcy5wb3B1cC5oaWRlKCk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMuX3Jlc29sdmVWYWx1ZSh0cnVlKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdF9pbnB1dFNlYXJjaCgpe1xuXHRcdHRoaXMuX2NsZWFyQ2hvaWNlcygpO1xuXHR9XG5cdFxuXHRfaW5wdXRLZXlEb3duKGUpe1xuXHRcdHN3aXRjaChlLmtleUNvZGUpe1xuXHRcdFx0XG5cdFx0XHRjYXNlIDM4OiAvL3VwIGFycm93XG5cdFx0XHRcdHRoaXMuX2tleVVwKGUpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0Y2FzZSA0MDogLy9kb3duIGFycm93XG5cdFx0XHRcdHRoaXMuX2tleURvd24oZSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRjYXNlIDM3OiAvL2xlZnQgYXJyb3dcblx0XHRcdGNhc2UgMzk6IC8vcmlnaHQgYXJyb3dcblx0XHRcdFx0dGhpcy5fa2V5U2lkZShlKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGNhc2UgMTM6IC8vZW50ZXJcblx0XHRcdFx0dGhpcy5fa2V5RW50ZXIoKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGNhc2UgMjc6IC8vZXNjYXBlXG5cdFx0XHRcdHRoaXMuX2tleUVzYygpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0Y2FzZSAzNjogLy9ob21lXG5cdFx0XHRjYXNlIDM1OiAvL2VuZFxuXHRcdFx0XHR0aGlzLl9rZXlIb21lRW5kKGUpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0Y2FzZSA5OiAvL3RhYlxuXHRcdFx0XHR0aGlzLl9rZXlUYWIoZSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHR0aGlzLl9rZXlTZWxlY3RMZXR0ZXIoZSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRfaW5wdXRLZXlVcChlKXtcblx0XHRzd2l0Y2goZS5rZXlDb2RlKXtcblx0XHRcdGNhc2UgMzg6IC8vdXAgYXJyb3dcblx0XHRcdGNhc2UgMzc6IC8vbGVmdCBhcnJvd1xuXHRcdFx0Y2FzZSAzOTogLy91cCBhcnJvd1xuXHRcdFx0Y2FzZSA0MDogLy9yaWdodCBhcnJvd1xuXHRcdFx0Y2FzZSAxMzogLy9lbnRlclxuXHRcdFx0Y2FzZSAyNzogLy9lc2NhcGVcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHRoaXMuX2tleUF1dG9Db21wTGV0dGVyKGUpO1xuXHRcdH1cblx0fVxuXHRcblx0X3ByZXZlbnRQb3B1cEJsdXIoKXtcblx0XHRpZih0aGlzLnBvcHVwKXtcblx0XHRcdHRoaXMucG9wdXAuYmxvY2tIaWRlKCk7XG5cdFx0fVxuXHRcdFxuXHRcdHNldFRpbWVvdXQoKCkgPT57XG5cdFx0XHRpZih0aGlzLnBvcHVwKXtcblx0XHRcdFx0dGhpcy5wb3B1cC5yZXN0b3JlSGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0sIDEwKTtcblx0fVxuXHRcblx0X3ByZXZlbnRCbHVyKCl7XG5cdFx0dGhpcy5ibHVyYWJsZSA9IGZhbHNlO1xuXHRcdFxuXHRcdHNldFRpbWVvdXQoKCkgPT57XG5cdFx0XHR0aGlzLmJsdXJhYmxlID0gdHJ1ZTtcblx0XHR9LCAxMCk7XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vIEtleWJvYXJkIE5hdmlnYXRpb24gLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHRfa2V5VGFiKGUpe1xuXHRcdGlmKHRoaXMucGFyYW1zLmF1dG9jb21wbGV0ZSAmJiB0aGlzLmxhc3RBY3Rpb24gPT09IFwidHlwaW5nXCIpe1xuXHRcdFx0dGhpcy5fcmVzb2x2ZVZhbHVlKHRydWUpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGlmKHRoaXMuZm9jdXNlZEl0ZW0pe1xuXHRcdFx0XHR0aGlzLl9jaG9vc2VJdGVtKHRoaXMuZm9jdXNlZEl0ZW0sIHRydWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0X2tleVVwKGUpe1xuXHRcdHZhciBpbmRleCA9IHRoaXMuZGlzcGxheUl0ZW1zLmluZGV4T2YodGhpcy5mb2N1c2VkSXRlbSk7XG5cdFx0XG5cdFx0aWYodGhpcy5wYXJhbXMudmVydGljYWxOYXZpZ2F0aW9uID09IFwiZWRpdG9yXCIgfHwgKHRoaXMucGFyYW1zLnZlcnRpY2FsTmF2aWdhdGlvbiA9PSBcImh5YnJpZFwiICYmIGluZGV4KSl7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFxuXHRcdFx0aWYoaW5kZXggPiAwKXtcblx0XHRcdFx0dGhpcy5fZm9jdXNJdGVtKHRoaXMuZGlzcGxheUl0ZW1zW2luZGV4IC0gMV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0X2tleURvd24oZSl7XG5cdFx0dmFyIGluZGV4ID0gdGhpcy5kaXNwbGF5SXRlbXMuaW5kZXhPZih0aGlzLmZvY3VzZWRJdGVtKTtcblx0XHRcblx0XHRpZih0aGlzLnBhcmFtcy52ZXJ0aWNhbE5hdmlnYXRpb24gPT0gXCJlZGl0b3JcIiB8fCAodGhpcy5wYXJhbXMudmVydGljYWxOYXZpZ2F0aW9uID09IFwiaHlicmlkXCIgJiYgaW5kZXggPCB0aGlzLmRpc3BsYXlJdGVtcy5sZW5ndGggLSAxKSl7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFxuXHRcdFx0aWYoaW5kZXggPCB0aGlzLmRpc3BsYXlJdGVtcy5sZW5ndGggLSAxKXtcblx0XHRcdFx0aWYoaW5kZXggPT0gLTEpe1xuXHRcdFx0XHRcdHRoaXMuX2ZvY3VzSXRlbSh0aGlzLmRpc3BsYXlJdGVtc1swXSk7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHR0aGlzLl9mb2N1c0l0ZW0odGhpcy5kaXNwbGF5SXRlbXNbaW5kZXggKyAxXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdF9rZXlTaWRlKGUpe1xuXHRcdGlmKCF0aGlzLnBhcmFtcy5hdXRvY29tcGxldGUpe1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRfa2V5RW50ZXIoZSl7XG5cdFx0aWYodGhpcy5wYXJhbXMuYXV0b2NvbXBsZXRlICYmIHRoaXMubGFzdEFjdGlvbiA9PT0gXCJ0eXBpbmdcIil7XG5cdFx0XHR0aGlzLl9yZXNvbHZlVmFsdWUodHJ1ZSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYodGhpcy5mb2N1c2VkSXRlbSl7XG5cdFx0XHRcdHRoaXMuX2Nob29zZUl0ZW0odGhpcy5mb2N1c2VkSXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRfa2V5RXNjKGUpe1xuXHRcdHRoaXMuX2NhbmNlbCgpO1xuXHR9XG5cdFxuXHRfa2V5SG9tZUVuZChlKXtcblx0XHRpZih0aGlzLnBhcmFtcy5hdXRvY29tcGxldGUpe1xuXHRcdFx0Ly9wcmV2ZW50IHRhYmxlIG5hdmlnYXRpb24gd2hpbGUgdXNpbmcgaW5wdXQgZWxlbWVudFxuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH1cblx0XG5cdF9rZXlTZWxlY3RMZXR0ZXIoZSl7XG5cdFx0aWYoIXRoaXMucGFyYW1zLmF1dG9jb21wbGV0ZSl7XG5cdFx0XHQvLyBpZih0aGlzLmVkaXQuY3VycmVudENlbGwgPT09IGZhbHNlKXtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdC8vIH1cblx0XHRcdFxuXHRcdFx0aWYoZS5rZXlDb2RlID49IDM4ICYmIGUua2V5Q29kZSA8PSA5MCl7XG5cdFx0XHRcdHRoaXMuX3Njcm9sbFRvVmFsdWUoZS5rZXlDb2RlKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdF9rZXlBdXRvQ29tcExldHRlcihlKXtcblx0XHR0aGlzLl9maWx0ZXIoKTtcblx0XHR0aGlzLmxhc3RBY3Rpb24gPSBcInR5cGluZ1wiO1xuXHRcdHRoaXMudHlwaW5nID0gdHJ1ZTtcblx0fVxuXHRcblx0XG5cdF9zY3JvbGxUb1ZhbHVlKGNoYXIpe1xuXHRcdGNsZWFyVGltZW91dCh0aGlzLmZpbHRlclRpbWVvdXQpO1xuXHRcdFxuXHRcdHZhciBjaGFyYWN0ZXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoYXIpLnRvTG93ZXJDYXNlKCk7XG5cdFx0dGhpcy5maWx0ZXJUZXJtICs9IGNoYXJhY3Rlci50b0xvd2VyQ2FzZSgpO1xuXHRcdFxuXHRcdHZhciBtYXRjaCA9IHRoaXMuZGlzcGxheUl0ZW1zLmZpbmQoKGl0ZW0pID0+IHtcblx0XHRcdHJldHVybiB0eXBlb2YgaXRlbS5sYWJlbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBpdGVtLmxhYmVsLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aCh0aGlzLmZpbHRlclRlcm0pO1xuXHRcdH0pO1xuXHRcdFxuXHRcdGlmKG1hdGNoKXtcblx0XHRcdHRoaXMuX2ZvY3VzSXRlbShtYXRjaCk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuZmlsdGVyVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0dGhpcy5maWx0ZXJUZXJtID0gXCJcIjtcblx0XHR9LCA4MDApO1xuXHR9XG5cdFxuXHRfZm9jdXNJdGVtKGl0ZW0pe1xuXHRcdHRoaXMubGFzdEFjdGlvbiA9IFwiZm9jdXNcIjtcblx0XHRcblx0XHRpZih0aGlzLmZvY3VzZWRJdGVtICYmIHRoaXMuZm9jdXNlZEl0ZW0uZWxlbWVudCl7XG5cdFx0XHR0aGlzLmZvY3VzZWRJdGVtLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImZvY3VzZWRcIik7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuZm9jdXNlZEl0ZW0gPSBpdGVtO1xuXHRcdFxuXHRcdGlmKGl0ZW0gJiYgaXRlbS5lbGVtZW50KXtcblx0XHRcdGl0ZW0uZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZm9jdXNlZFwiKTtcblx0XHRcdGl0ZW0uZWxlbWVudC5zY3JvbGxJbnRvVmlldyh7YmVoYXZpb3I6ICdzbW9vdGgnLCBibG9jazogJ25lYXJlc3QnLCBpbmxpbmU6ICdzdGFydCd9KTtcblx0XHR9XG5cdH1cblx0XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vIERhdGEgTGlzdCBHZW5lcmF0aW9uIC8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRoZWFkZXJGaWx0ZXJJbml0aWFsTGlzdEdlbigpe1xuXHRcdHRoaXMuX2dlbmVyYXRlT3B0aW9ucyh0cnVlKTtcblx0fVxuXHRcblx0cmVidWlsZE9wdGlvbnNMaXN0KCl7XG5cdFx0dGhpcy5fZ2VuZXJhdGVPcHRpb25zKClcblx0XHRcdC50aGVuKHRoaXMuX3NvcnRPcHRpb25zLmJpbmQodGhpcykpXG5cdFx0XHQudGhlbih0aGlzLl9idWlsZExpc3QuYmluZCh0aGlzKSlcblx0XHRcdC50aGVuKHRoaXMuX3Nob3dMaXN0LmJpbmQodGhpcykpXG5cdFx0XHQuY2F0Y2goKGUpID0+IHtcblx0XHRcdFx0aWYoIU51bWJlci5pc0ludGVnZXIoZSkpe1xuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJMaXN0IGdlbmVyYXRpb24gZXJyb3JcIiwgZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHR9XG5cdFxuXHRfZmlsdGVyTGlzdCgpe1xuXHRcdHRoaXMuX2J1aWxkTGlzdCh0aGlzLl9maWx0ZXJPcHRpb25zKCkpO1xuXHRcdHRoaXMuX3Nob3dMaXN0KCk7XG5cdH1cblx0XG5cdF9nZW5lcmF0ZU9wdGlvbnMoc2lsZW50KXtcblx0XHR2YXIgdmFsdWVzID0gW107XG5cdFx0dmFyIGl0ZXJhdGlvbiA9ICsrIHRoaXMubGlzdEl0ZXJhdGlvbjtcblx0XHRcblx0XHR0aGlzLmZpbHRlcmVkID0gZmFsc2U7XG5cdFx0XG5cdFx0aWYodGhpcy5wYXJhbXMudmFsdWVzKXtcblx0XHRcdHZhbHVlcyA9IHRoaXMucGFyYW1zLnZhbHVlcztcblx0XHR9ZWxzZSBpZiAodGhpcy5wYXJhbXMudmFsdWVzVVJMKXtcblx0XHRcdHZhbHVlcyA9IHRoaXMuX2FqYXhSZXF1ZXN0KHRoaXMucGFyYW1zLnZhbHVlc1VSTCwgdGhpcy5pbnB1dC52YWx1ZSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYodHlwZW9mIHRoaXMucGFyYW1zLnZhbHVlc0xvb2t1cCA9PT0gXCJmdW5jdGlvblwiKXtcblx0XHRcdFx0dmFsdWVzID0gdGhpcy5wYXJhbXMudmFsdWVzTG9va3VwKHRoaXMuY2VsbCwgdGhpcy5pbnB1dC52YWx1ZSk7XG5cdFx0XHR9ZWxzZSBpZih0aGlzLnBhcmFtcy52YWx1ZXNMb29rdXApe1xuXHRcdFx0XHR2YWx1ZXMgPSB0aGlzLl91bmlxdWVDb2x1bW5WYWx1ZXModGhpcy5wYXJhbXMudmFsdWVzTG9va3VwRmllbGQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRpZih2YWx1ZXMgaW5zdGFuY2VvZiBQcm9taXNlKXtcblx0XHRcdGlmKCFzaWxlbnQpe1xuXHRcdFx0XHR0aGlzLl9hZGRQbGFjZWhvbGRlcih0aGlzLnBhcmFtcy5wbGFjZWhvbGRlckxvYWRpbmcpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRyZXR1cm4gdmFsdWVzLnRoZW4oKVxuXHRcdFx0XHQudGhlbigocmVzcG9uc2VWYWx1ZXMpID0+IHtcblx0XHRcdFx0XHRpZih0aGlzLmxpc3RJdGVyYXRpb24gPT09IGl0ZXJhdGlvbil7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5fcGFyc2VMaXN0KHJlc3BvbnNlVmFsdWVzKTtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoaXRlcmF0aW9uKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fcGFyc2VMaXN0KHZhbHVlcykpO1xuXHRcdH1cblx0fVxuXHRcblx0X2FkZFBsYWNlaG9sZGVyKGNvbnRlbnRzKXtcblx0XHR2YXIgcGxhY2Vob2xkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdFxuXHRcdGlmKHR5cGVvZiBjb250ZW50cyA9PT0gXCJmdW5jdGlvblwiKXtcblx0XHRcdGNvbnRlbnRzID0gY29udGVudHModGhpcy5jZWxsLmdldENvbXBvbmVudCgpLCB0aGlzLmxpc3RFbCk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGNvbnRlbnRzKXtcblx0XHRcdHRoaXMuX2NsZWFyTGlzdCgpO1xuXHRcdFx0XG5cdFx0XHRpZihjb250ZW50cyBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KXtcblx0XHRcdFx0cGxhY2Vob2xkZXIgPSBjb250ZW50cztcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0cGxhY2Vob2xkZXIuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1lZGl0LWxpc3QtcGxhY2Vob2xkZXJcIik7XG5cdFx0XHRcdHBsYWNlaG9sZGVyLmlubmVySFRNTCA9IGNvbnRlbnRzO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLmxpc3RFbC5hcHBlbmRDaGlsZChwbGFjZWhvbGRlcik7XG5cdFx0XHRcblx0XHRcdHRoaXMuX3Nob3dMaXN0KCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRfYWpheFJlcXVlc3QodXJsLCB0ZXJtKXtcblx0XHR2YXIgcGFyYW1zID0gdGhpcy5wYXJhbXMuZmlsdGVyUmVtb3RlID8ge3Rlcm06dGVybX0gOiB7fTtcblx0XHR1cmwgPSB1cmxCdWlsZGVyKHVybCwge30sIHBhcmFtcyk7XG5cdFx0XG5cdFx0cmV0dXJuIGZldGNoKHVybClcblx0XHRcdC50aGVuKChyZXNwb25zZSk9Pntcblx0XHRcdFx0aWYocmVzcG9uc2Uub2spIHtcblx0XHRcdFx0XHRyZXR1cm4gcmVzcG9uc2UuanNvbigpXG5cdFx0XHRcdFx0XHQuY2F0Y2goKGVycm9yKT0+e1xuXHRcdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJMaXN0IEFqYXggTG9hZCBFcnJvciAtIEludmFsaWQgSlNPTiByZXR1cm5lZFwiLCBlcnJvcik7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJMaXN0IEFqYXggTG9hZCBFcnJvciAtIENvbm5lY3Rpb24gRXJyb3I6IFwiICsgcmVzcG9uc2Uuc3RhdHVzLCByZXNwb25zZS5zdGF0dXNUZXh0KTtcblx0XHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QocmVzcG9uc2UpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXHRcdFx0LmNhdGNoKChlcnJvcik9Pntcblx0XHRcdFx0Y29uc29sZS5lcnJvcihcIkxpc3QgQWpheCBMb2FkIEVycm9yIC0gQ29ubmVjdGlvbiBFcnJvcjogXCIsIGVycm9yKTtcblx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcblx0XHRcdH0pO1xuXHR9XG5cdFxuXHRfdW5pcXVlQ29sdW1uVmFsdWVzKGZpZWxkKXtcblx0XHR2YXIgb3V0cHV0ID0ge30sXG5cdFx0ZGF0YSA9IHRoaXMudGFibGUuZ2V0RGF0YSh0aGlzLnBhcmFtcy52YWx1ZXNMb29rdXApLFxuXHRcdGNvbHVtbjtcblx0XHRcblx0XHRpZihmaWVsZCl7XG5cdFx0XHRjb2x1bW4gPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0Q29sdW1uQnlGaWVsZChmaWVsZCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29sdW1uID0gdGhpcy5jZWxsLmdldENvbHVtbigpLl9nZXRTZWxmKCk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGNvbHVtbil7XG5cdFx0XHRkYXRhLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0XHR2YXIgdmFsID0gY29sdW1uLmdldEZpZWxkVmFsdWUocm93KTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsICE9PSBcInVuZGVmaW5lZFwiICYmIHZhbCAhPT0gXCJcIil7XG5cdFx0XHRcdFx0b3V0cHV0W3ZhbF0gPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJ1bmFibGUgdG8gZmluZCBtYXRjaGluZyBjb2x1bW4gdG8gY3JlYXRlIHNlbGVjdCBsb29rdXAgbGlzdDpcIiwgZmllbGQpO1xuXHRcdFx0b3V0cHV0ID0gW107XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBPYmplY3Qua2V5cyhvdXRwdXQpO1xuXHR9XG5cdFxuXHRcblx0X3BhcnNlTGlzdChpbnB1dFZhbHVlcyl7XG5cdFx0dmFyIGRhdGEgPSBbXTtcblx0XHRcblx0XHRpZighQXJyYXkuaXNBcnJheShpbnB1dFZhbHVlcykpe1xuXHRcdFx0aW5wdXRWYWx1ZXMgPSBPYmplY3QuZW50cmllcyhpbnB1dFZhbHVlcykubWFwKChba2V5LCB2YWx1ZV0pID0+IHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRsYWJlbDp2YWx1ZSxcblx0XHRcdFx0XHR2YWx1ZTprZXksXG5cdFx0XHRcdH07XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0XG5cdFx0aW5wdXRWYWx1ZXMuZm9yRWFjaCgodmFsdWUpID0+IHtcblx0XHRcdGlmKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIil7XG5cdFx0XHRcdHZhbHVlID0ge1xuXHRcdFx0XHRcdGxhYmVsOnZhbHVlLFxuXHRcdFx0XHRcdHZhbHVlOnZhbHVlLFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLl9wYXJzZUxpc3RJdGVtKHZhbHVlLCBkYXRhLCAwKTtcblx0XHR9KTtcblx0XHRcblx0XHRpZighdGhpcy5jdXJyZW50SXRlbXMubGVuZ3RoICYmIHRoaXMucGFyYW1zLmZyZWV0ZXh0KXtcblx0XHRcdHRoaXMuaW5wdXQudmFsdWUgPSB0aGlzLmluaXRpYWxWYWx1ZXM7XG5cdFx0XHR0aGlzLnR5cGluZyA9IHRydWU7XG5cdFx0XHR0aGlzLmxhc3RBY3Rpb24gPSBcInR5cGluZ1wiO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLmRhdGEgPSBkYXRhO1xuXHRcdFxuXHRcdHJldHVybiBkYXRhOyAgICBcblx0fVxuXHRcblx0X3BhcnNlTGlzdEl0ZW0ob3B0aW9uLCBkYXRhLCBsZXZlbCl7XG5cdFx0dmFyIGl0ZW0gPSB7fTtcblx0XHRcblx0XHRpZihvcHRpb24ub3B0aW9ucyl7XG5cdFx0XHRpdGVtID0gdGhpcy5fcGFyc2VMaXN0R3JvdXAob3B0aW9uLCBsZXZlbCArIDEpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGl0ZW0gPSB7XG5cdFx0XHRcdGxhYmVsOm9wdGlvbi5sYWJlbCxcblx0XHRcdFx0dmFsdWU6b3B0aW9uLnZhbHVlLFxuXHRcdFx0XHRpdGVtUGFyYW1zOm9wdGlvbi5pdGVtUGFyYW1zLFxuXHRcdFx0XHRlbGVtZW50QXR0cmlidXRlczogb3B0aW9uLmVsZW1lbnRBdHRyaWJ1dGVzLFxuXHRcdFx0XHRlbGVtZW50OmZhbHNlLFxuXHRcdFx0XHRzZWxlY3RlZDpmYWxzZSxcblx0XHRcdFx0dmlzaWJsZTp0cnVlLFxuXHRcdFx0XHRsZXZlbDpsZXZlbCxcblx0XHRcdFx0b3JpZ2luYWw6b3B0aW9uLFxuXHRcdFx0fTtcblx0XHRcdFxuXHRcdFx0aWYodGhpcy5pbml0aWFsVmFsdWVzICYmIHRoaXMuaW5pdGlhbFZhbHVlcy5pbmRleE9mKG9wdGlvbi52YWx1ZSkgPiAtMSl7XG5cdFx0XHRcdHRoaXMuX2Nob29zZUl0ZW0oaXRlbSwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdGRhdGEucHVzaChpdGVtKTtcblx0fVxuXHRcblx0X3BhcnNlTGlzdEdyb3VwKG9wdGlvbiwgbGV2ZWwpe1xuXHRcdHZhciBpdGVtID0ge1xuXHRcdFx0bGFiZWw6b3B0aW9uLmxhYmVsLFxuXHRcdFx0Z3JvdXA6dHJ1ZSxcblx0XHRcdGl0ZW1QYXJhbXM6b3B0aW9uLml0ZW1QYXJhbXMsXG5cdFx0XHRlbGVtZW50QXR0cmlidXRlczpvcHRpb24uZWxlbWVudEF0dHJpYnV0ZXMsXG5cdFx0XHRlbGVtZW50OmZhbHNlLFxuXHRcdFx0dmlzaWJsZTp0cnVlLFxuXHRcdFx0bGV2ZWw6bGV2ZWwsXG5cdFx0XHRvcHRpb25zOltdLFxuXHRcdFx0b3JpZ2luYWw6b3B0aW9uLFxuXHRcdH07XG5cdFx0XG5cdFx0b3B0aW9uLm9wdGlvbnMuZm9yRWFjaCgoY2hpbGQpID0+IHtcblx0XHRcdHRoaXMuX3BhcnNlTGlzdEl0ZW0oY2hpbGQsIGl0ZW0ub3B0aW9ucywgbGV2ZWwpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiBpdGVtO1xuXHR9XG5cdFxuXHRfc29ydE9wdGlvbnMob3B0aW9ucyl7XG5cdFx0dmFyIHNvcnRlcjtcblx0XHRcblx0XHRpZih0aGlzLnBhcmFtcy5zb3J0KXtcblx0XHRcdHNvcnRlciA9IHR5cGVvZiB0aGlzLnBhcmFtcy5zb3J0ID09PSBcImZ1bmN0aW9uXCIgPyB0aGlzLnBhcmFtcy5zb3J0IDogdGhpcy5fZGVmYXVsdFNvcnRGdW5jdGlvbi5iaW5kKHRoaXMpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLl9zb3J0R3JvdXAoc29ydGVyLCBvcHRpb25zKTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIG9wdGlvbnM7XG5cdH1cblx0XG5cdF9zb3J0R3JvdXAoc29ydGVyLCBvcHRpb25zKXtcblx0XHRvcHRpb25zLnNvcnQoKGEsYikgPT4ge1xuXHRcdFx0cmV0dXJuIHNvcnRlcihhLmxhYmVsLCBiLmxhYmVsLCBhLnZhbHVlLCBiLnZhbHVlLCBhLm9yaWdpbmFsLCBiLm9yaWdpbmFsKTtcblx0XHR9KTtcblx0XHRcblx0XHRvcHRpb25zLmZvckVhY2goKG9wdGlvbikgPT4ge1xuXHRcdFx0aWYob3B0aW9uLmdyb3VwKXtcblx0XHRcdFx0dGhpcy5fc29ydEdyb3VwKHNvcnRlciwgb3B0aW9uLm9wdGlvbnMpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cdFxuXHRfZGVmYXVsdFNvcnRGdW5jdGlvbihhcywgYnMpe1xuXHRcdHZhciBhLCBiLCBhMSwgYjEsIGk9IDAsIEwsIHJ4ID0gLyhcXGQrKXwoXFxEKykvZywgcmQgPSAvXFxkLztcblx0XHR2YXIgZW1wdHlBbGlnbiA9IDA7XG5cdFx0XG5cdFx0aWYodGhpcy5wYXJhbXMuc29ydCA9PT0gXCJkZXNjXCIpe1xuXHRcdFx0W2FzLCBic10gPSBbYnMsIGFzXTtcblx0XHR9XG5cdFx0XG5cdFx0Ly9oYW5kbGUgZW1wdHkgdmFsdWVzXG5cdFx0aWYoIWFzICYmIGFzIT09IDApe1xuXHRcdFx0ZW1wdHlBbGlnbiA9ICAhYnMgJiYgYnMhPT0gMCA/IDAgOiAtMTtcblx0XHR9ZWxzZSBpZighYnMgJiYgYnMhPT0gMCl7XG5cdFx0XHRlbXB0eUFsaWduID0gIDE7XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYoaXNGaW5pdGUoYXMpICYmIGlzRmluaXRlKGJzKSkgcmV0dXJuIGFzIC0gYnM7XG5cdFx0XHRhID0gU3RyaW5nKGFzKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0YiA9IFN0cmluZyhicykudG9Mb3dlckNhc2UoKTtcblx0XHRcdGlmKGEgPT09IGIpIHJldHVybiAwO1xuXHRcdFx0aWYoIShyZC50ZXN0KGEpICYmIHJkLnRlc3QoYikpKSByZXR1cm4gYSA+IGIgPyAxIDogLTE7XG5cdFx0XHRhID0gYS5tYXRjaChyeCk7XG5cdFx0XHRiID0gYi5tYXRjaChyeCk7XG5cdFx0XHRMID0gYS5sZW5ndGggPiBiLmxlbmd0aCA/IGIubGVuZ3RoIDogYS5sZW5ndGg7XG5cdFx0XHR3aGlsZShpIDwgTCl7XG5cdFx0XHRcdGExPSBhW2ldO1xuXHRcdFx0XHRiMT0gYltpKytdO1xuXHRcdFx0XHRpZihhMSAhPT0gYjEpe1xuXHRcdFx0XHRcdGlmKGlzRmluaXRlKGExKSAmJiBpc0Zpbml0ZShiMSkpe1xuXHRcdFx0XHRcdFx0aWYoYTEuY2hhckF0KDApID09PSBcIjBcIikgYTEgPSBcIi5cIiArIGExO1xuXHRcdFx0XHRcdFx0aWYoYjEuY2hhckF0KDApID09PSBcIjBcIikgYjEgPSBcIi5cIiArIGIxO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGExIC0gYjE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsc2UgcmV0dXJuIGExID4gYjEgPyAxIDogLTE7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0cmV0dXJuIGEubGVuZ3RoID4gYi5sZW5ndGg7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBlbXB0eUFsaWduO1xuXHR9XG5cdFxuXHRfZmlsdGVyT3B0aW9ucygpe1xuXHRcdHZhciBmaWx0ZXJGdW5jID0gdGhpcy5wYXJhbXMuZmlsdGVyRnVuYyB8fCB0aGlzLl9kZWZhdWx0RmlsdGVyRnVuYyxcblx0XHR0ZXJtID0gdGhpcy5pbnB1dC52YWx1ZTtcblx0XHRcblx0XHRpZih0ZXJtKXtcblx0XHRcdHRoaXMuZmlsdGVyZWQgPSB0cnVlO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmRhdGEuZm9yRWFjaCgoaXRlbSkgPT4ge1xuXHRcdFx0XHR0aGlzLl9maWx0ZXJJdGVtKGZpbHRlckZ1bmMsIHRlcm0sIGl0ZW0pO1xuXHRcdFx0fSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5maWx0ZXJlZCA9IGZhbHNlO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gdGhpcy5kYXRhO1xuXHR9XG5cdFxuXHRfZmlsdGVySXRlbShmdW5jLCB0ZXJtLCBpdGVtKXtcblx0XHR2YXIgbWF0Y2hlcyA9IGZhbHNlO1xuXHRcdFxuXHRcdGlmKCFpdGVtLmdyb3VwKXtcblx0XHRcdGl0ZW0udmlzaWJsZSA9IGZ1bmModGVybSwgaXRlbS5sYWJlbCwgaXRlbS52YWx1ZSwgaXRlbS5vcmlnaW5hbCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0aXRlbS5vcHRpb25zLmZvckVhY2goKG9wdGlvbikgPT4ge1xuXHRcdFx0XHRpZih0aGlzLl9maWx0ZXJJdGVtKGZ1bmMsIHRlcm0sIG9wdGlvbikpe1xuXHRcdFx0XHRcdG1hdGNoZXMgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0aXRlbS52aXNpYmxlID0gbWF0Y2hlcztcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIGl0ZW0udmlzaWJsZTtcblx0fVxuXHRcblx0X2RlZmF1bHRGaWx0ZXJGdW5jKHRlcm0sIGxhYmVsLCB2YWx1ZSwgaXRlbSl7XG5cdFx0dGVybSA9IFN0cmluZyh0ZXJtKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFxuXHRcdGlmKGxhYmVsICE9PSBudWxsICYmIHR5cGVvZiBsYWJlbCAhPT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRpZihTdHJpbmcobGFiZWwpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZih0ZXJtKSA+IC0xIHx8IFN0cmluZyh2YWx1ZSkudG9Mb3dlckNhc2UoKS5pbmRleE9mKHRlcm0pID4gLTEpe1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLyBEaXNwbGF5IExpc3QgLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0X2NsZWFyTGlzdCgpe1xuXHRcdHdoaWxlKHRoaXMubGlzdEVsLmZpcnN0Q2hpbGQpIHRoaXMubGlzdEVsLnJlbW92ZUNoaWxkKHRoaXMubGlzdEVsLmZpcnN0Q2hpbGQpO1xuXHRcdFxuXHRcdHRoaXMuZGlzcGxheUl0ZW1zID0gW107XG5cdH1cblx0XG5cdF9idWlsZExpc3QoZGF0YSl7XG5cdFx0dGhpcy5fY2xlYXJMaXN0KCk7XG5cdFx0XG5cdFx0ZGF0YS5mb3JFYWNoKChvcHRpb24pID0+IHtcblx0XHRcdHRoaXMuX2J1aWxkSXRlbShvcHRpb24pO1xuXHRcdH0pO1xuXHRcdFxuXHRcdGlmKCF0aGlzLmRpc3BsYXlJdGVtcy5sZW5ndGgpe1xuXHRcdFx0dGhpcy5fYWRkUGxhY2Vob2xkZXIodGhpcy5wYXJhbXMucGxhY2Vob2xkZXJFbXB0eSk7XG5cdFx0fSAgXG5cdH1cblx0XG5cdF9idWlsZEl0ZW0oaXRlbSl7XG5cdFx0dmFyIGVsID0gaXRlbS5lbGVtZW50LFxuXHRcdGNvbnRlbnRzO1xuXHRcdFxuXHRcdGlmKCF0aGlzLmZpbHRlcmVkIHx8IGl0ZW0udmlzaWJsZSl7XG5cdFx0XHRcblx0XHRcdGlmKCFlbCl7XG5cdFx0XHRcdGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcdFx0ZWwudGFiSW5kZXggPSAwO1xuXHRcdFx0XHRcblx0XHRcdFx0Y29udGVudHMgPSB0aGlzLnBhcmFtcy5pdGVtRm9ybWF0dGVyID8gdGhpcy5wYXJhbXMuaXRlbUZvcm1hdHRlcihpdGVtLmxhYmVsLCBpdGVtLnZhbHVlLCBpdGVtLm9yaWdpbmFsLCBlbCkgOiBpdGVtLmxhYmVsO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoY29udGVudHMgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCl7XG5cdFx0XHRcdFx0ZWwuYXBwZW5kQ2hpbGQoY29udGVudHMpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0ZWwuaW5uZXJIVE1MID0gY29udGVudHM7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGlmKGl0ZW0uZ3JvdXApe1xuXHRcdFx0XHRcdGVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItZWRpdC1saXN0LWdyb3VwXCIpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0ZWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1lZGl0LWxpc3QtaXRlbVwiKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0ZWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1lZGl0LWxpc3QtZ3JvdXAtbGV2ZWwtXCIgKyBpdGVtLmxldmVsKTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKGl0ZW0uZWxlbWVudEF0dHJpYnV0ZXMgJiYgdHlwZW9mIGl0ZW0uZWxlbWVudEF0dHJpYnV0ZXMgPT0gXCJvYmplY3RcIil7XG5cdFx0XHRcdFx0Zm9yIChsZXQga2V5IGluIGl0ZW0uZWxlbWVudEF0dHJpYnV0ZXMpe1xuXHRcdFx0XHRcdFx0aWYoa2V5LmNoYXJBdCgwKSA9PSBcIitcIil7XG5cdFx0XHRcdFx0XHRcdGtleSA9IGtleS5zbGljZSgxKTtcblx0XHRcdFx0XHRcdFx0ZWwuc2V0QXR0cmlidXRlKGtleSwgdGhpcy5pbnB1dC5nZXRBdHRyaWJ1dGUoa2V5KSArIGl0ZW0uZWxlbWVudEF0dHJpYnV0ZXNbXCIrXCIgKyBrZXldKTtcblx0XHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdFx0ZWwuc2V0QXR0cmlidXRlKGtleSwgaXRlbS5lbGVtZW50QXR0cmlidXRlc1trZXldKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGlmKGl0ZW0uZ3JvdXApe1xuXHRcdFx0XHRcdGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLl9ncm91cENsaWNrLmJpbmQodGhpcywgaXRlbSkpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0ZWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuX2l0ZW1DbGljay5iaW5kKHRoaXMsIGl0ZW0pKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0ZWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCB0aGlzLl9wcmV2ZW50Qmx1ci5iaW5kKHRoaXMpKTtcblx0XHRcdFx0XG5cdFx0XHRcdGl0ZW0uZWxlbWVudCA9IGVsO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLl9zdHlsZUl0ZW0oaXRlbSk7XG5cdFx0XHRcblx0XHRcdHRoaXMubGlzdEVsLmFwcGVuZENoaWxkKGVsKTtcblx0XHRcdFxuXHRcdFx0aWYoaXRlbS5ncm91cCl7XG5cdFx0XHRcdGl0ZW0ub3B0aW9ucy5mb3JFYWNoKChvcHRpb24pID0+IHtcblx0XHRcdFx0XHR0aGlzLl9idWlsZEl0ZW0ob3B0aW9uKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMuZGlzcGxheUl0ZW1zLnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRfc2hvd0xpc3QoKXtcblx0XHR2YXIgc3RhcnRWaXMgPSB0aGlzLnBvcHVwICYmIHRoaXMucG9wdXAuaXNWaXNpYmxlKCk7XG5cdFx0XG5cdFx0aWYodGhpcy5pbnB1dC5wYXJlbnROb2RlKXtcblx0XHRcdGlmKHRoaXMucGFyYW1zLmF1dG9jb21wbGV0ZSAmJiB0aGlzLmlucHV0LnZhbHVlID09PSBcIlwiICYmICF0aGlzLnBhcmFtcy5saXN0T25FbXB0eSl7XG5cdFx0XHRcdGlmKHRoaXMucG9wdXApe1xuXHRcdFx0XHRcdHRoaXMucG9wdXAuaGlkZSh0cnVlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHRoaXMuX3NldExpc3RXaWR0aCgpO1xuXHRcdFx0XG5cdFx0XHRpZighdGhpcy5wb3B1cCl7XG5cdFx0XHRcdHRoaXMucG9wdXAgPSB0aGlzLmVkaXQucG9wdXAodGhpcy5saXN0RWwpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLnBvcHVwLnNob3codGhpcy5jZWxsLmdldEVsZW1lbnQoKSwgXCJib3R0b21cIik7XG5cdFx0XHRcblx0XHRcdGlmKCFzdGFydFZpcyl7XG5cdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMucG9wdXAuaGlkZU9uQmx1cih0aGlzLl9yZXNvbHZlVmFsdWUuYmluZCh0aGlzLCB0cnVlKSk7XG5cdFx0XHRcdH0sIDEwKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdF9zdHlsZUl0ZW0oaXRlbSl7XG5cdFx0aWYoaXRlbSAmJiBpdGVtLmVsZW1lbnQpe1xuXHRcdFx0aWYoaXRlbS5zZWxlY3RlZCl7XG5cdFx0XHRcdGl0ZW0uZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRpdGVtLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLyBVc2VyIEludGVyYWN0aW9uIC8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHRfaXRlbUNsaWNrKGl0ZW0sIGUpe1xuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XG5cdFx0dGhpcy5fY2hvb3NlSXRlbShpdGVtKTtcblx0fVxuXHRcblx0X2dyb3VwQ2xpY2soaXRlbSwgZSl7XG5cdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxuXHRcblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLyBDdXJyZW50IEl0ZW0gTWFuYWdlbWVudCAvLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHRfY2FuY2VsKCl7XG5cdFx0dGhpcy5wb3B1cC5oaWRlKHRydWUpO1xuXHRcdHRoaXMuYWN0aW9ucy5jYW5jZWwoKTtcblx0fVxuXHRcblx0X2NsZWFyQ2hvaWNlcygpe1xuXHRcdHRoaXMudHlwaW5nID0gdHJ1ZTtcblx0XHRcblx0XHR0aGlzLmN1cnJlbnRJdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XG5cdFx0XHRpdGVtLnNlbGVjdGVkID0gZmFsc2U7XG5cdFx0XHR0aGlzLl9zdHlsZUl0ZW0oaXRlbSk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0dGhpcy5jdXJyZW50SXRlbXMgPSBbXTtcblx0XHRcblx0XHR0aGlzLmZvY3VzZWRJdGVtID0gbnVsbDtcblx0fVxuXHRcblx0X2Nob29zZUl0ZW0oaXRlbSwgc2lsZW50KXtcblx0XHR2YXIgaW5kZXg7XG5cdFx0XG5cdFx0dGhpcy50eXBpbmcgPSBmYWxzZTtcblx0XHRcblx0XHRpZih0aGlzLnBhcmFtcy5tdWx0aXNlbGVjdCl7XG5cdFx0XHRpbmRleCA9IHRoaXMuY3VycmVudEl0ZW1zLmluZGV4T2YoaXRlbSk7XG5cdFx0XHRcblx0XHRcdGlmKGluZGV4ID4gLTEpe1xuXHRcdFx0XHR0aGlzLmN1cnJlbnRJdGVtcy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0XHRpdGVtLnNlbGVjdGVkID0gZmFsc2U7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMuY3VycmVudEl0ZW1zLnB1c2goaXRlbSk7XG5cdFx0XHRcdGl0ZW0uc2VsZWN0ZWQgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLmlucHV0LnZhbHVlID0gdGhpcy5jdXJyZW50SXRlbXMubWFwKGl0ZW0gPT4gaXRlbS5sYWJlbCkuam9pbihcIixcIik7XG5cdFx0XHRcblx0XHRcdHRoaXMuX3N0eWxlSXRlbShpdGVtKTtcblx0XHRcdFxuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuY3VycmVudEl0ZW1zID0gW2l0ZW1dO1xuXHRcdFx0aXRlbS5zZWxlY3RlZCA9IHRydWU7XG5cdFx0XHRcblx0XHRcdHRoaXMuaW5wdXQudmFsdWUgPSBpdGVtLmxhYmVsO1xuXHRcdFx0XG5cdFx0XHR0aGlzLl9zdHlsZUl0ZW0oaXRlbSk7XG5cdFx0XHRcblx0XHRcdGlmKCFzaWxlbnQpe1xuXHRcdFx0XHR0aGlzLl9yZXNvbHZlVmFsdWUoKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5fZm9jdXNJdGVtKGl0ZW0pO1xuXHR9XG5cdFxuXHRfcmVzb2x2ZVZhbHVlKGJsdXIpe1xuXHRcdHZhciBvdXRwdXQsIGluaXRpYWxWYWx1ZTtcblx0XHRcblx0XHRpZih0aGlzLnBvcHVwKXtcblx0XHRcdHRoaXMucG9wdXAuaGlkZSh0cnVlKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodGhpcy5wYXJhbXMubXVsdGlzZWxlY3Qpe1xuXHRcdFx0b3V0cHV0ID0gdGhpcy5jdXJyZW50SXRlbXMubWFwKGl0ZW0gPT4gaXRlbS52YWx1ZSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYoYmx1ciAmJiB0aGlzLnBhcmFtcy5hdXRvY29tcGxldGUgJiYgdGhpcy50eXBpbmcpe1xuXHRcdFx0XHRpZih0aGlzLnBhcmFtcy5mcmVldGV4dCB8fCAodGhpcy5wYXJhbXMuYWxsb3dFbXB0eSAmJiB0aGlzLmlucHV0LnZhbHVlID09PSBcIlwiKSl7XG5cdFx0XHRcdFx0b3V0cHV0ID0gdGhpcy5pbnB1dC52YWx1ZTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuYWN0aW9ucy5jYW5jZWwoKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aWYodGhpcy5jdXJyZW50SXRlbXNbMF0pe1xuXHRcdFx0XHRcdG91dHB1dCA9IHRoaXMuY3VycmVudEl0ZW1zWzBdLnZhbHVlO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0aW5pdGlhbFZhbHVlID0gQXJyYXkuaXNBcnJheSh0aGlzLmluaXRpYWxWYWx1ZXMpID8gdGhpcy5pbml0aWFsVmFsdWVzWzBdIDogdGhpcy5pbml0aWFsVmFsdWVzO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKGluaXRpYWxWYWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgaW5pdGlhbFZhbHVlID09PSBcInVuZGVmaW5lZFwiIHx8IGluaXRpYWxWYWx1ZSA9PT0gXCJcIil7XG5cdFx0XHRcdFx0XHRvdXRwdXQgPSBpbml0aWFsVmFsdWU7XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0b3V0cHV0ID0gdGhpcy5wYXJhbXMuZW1wdHlWYWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdGlmKG91dHB1dCA9PT0gXCJcIil7XG5cdFx0XHRvdXRwdXQgPSB0aGlzLnBhcmFtcy5lbXB0eVZhbHVlO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLmFjdGlvbnMuc3VjY2VzcyhvdXRwdXQpO1xuXHRcdFxuXHRcdGlmKHRoaXMuaXNGaWx0ZXIpe1xuXHRcdFx0dGhpcy5pbml0aWFsVmFsdWVzID0gb3V0cHV0ICYmICFBcnJheS5pc0FycmF5KG91dHB1dCkgPyBbb3V0cHV0XSA6IG91dHB1dDtcblx0XHRcdHRoaXMuY3VycmVudEl0ZW1zID0gW107XG5cdFx0fVxuXHR9XG5cdFxufVxuXG5mdW5jdGlvbiBzZWxlY3QoY2VsbCwgb25SZW5kZXJlZCwgc3VjY2VzcywgY2FuY2VsLCBlZGl0b3JQYXJhbXMpe1xuXG5cdHRoaXMuZGVwcmVjYXRpb25Nc2coXCJUaGUgc2VsZWN0IGVkaXRvciBoYXMgYmVlbiBkZXByZWNhdGVkLCBwbGVhc2UgdXNlIHRoZSBuZXcgbGlzdCBlZGl0b3JcIik7XG5cblx0dmFyIGxpc3QgPSBuZXcgRWRpdCh0aGlzLCBjZWxsLCBvblJlbmRlcmVkLCBzdWNjZXNzLCBjYW5jZWwsIGVkaXRvclBhcmFtcyk7XG5cblx0cmV0dXJuIGxpc3QuaW5wdXQ7XG59XG5cbmZ1bmN0aW9uIGxpc3QoY2VsbCwgb25SZW5kZXJlZCwgc3VjY2VzcywgY2FuY2VsLCBlZGl0b3JQYXJhbXMpe1xuXHR2YXIgbGlzdCA9IG5ldyBFZGl0KHRoaXMsIGNlbGwsIG9uUmVuZGVyZWQsIHN1Y2Nlc3MsIGNhbmNlbCwgZWRpdG9yUGFyYW1zKTtcblxuXHRyZXR1cm4gbGlzdC5pbnB1dDtcbn1cblxuZnVuY3Rpb24gYXV0b2NvbXBsZXRlKGNlbGwsIG9uUmVuZGVyZWQsIHN1Y2Nlc3MsIGNhbmNlbCwgZWRpdG9yUGFyYW1zKXtcblxuXHR0aGlzLmRlcHJlY2F0aW9uTXNnKFwiVGhlIGF1dG9jb21wbGV0ZSBlZGl0b3IgaGFzIGJlZW4gZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSB0aGUgbmV3IGxpc3QgZWRpdG9yIHdpdGggdGhlICdhdXRvY29tcGxldGUnIGVkaXRvclBhcmFtXCIpO1xuXG5cdGVkaXRvclBhcmFtcy5hdXRvY29tcGxldGUgPSB0cnVlO1xuXG5cdHZhciBsaXN0ID0gbmV3IEVkaXQodGhpcywgY2VsbCwgb25SZW5kZXJlZCwgc3VjY2VzcywgY2FuY2VsLCBlZGl0b3JQYXJhbXMpO1xuXG5cdHJldHVybiBsaXN0LmlucHV0O1xufVxuXG4vL3N0YXIgcmF0aW5nXG5mdW5jdGlvbiBzdGFyKGNlbGwsIG9uUmVuZGVyZWQsIHN1Y2Nlc3MsIGNhbmNlbCwgZWRpdG9yUGFyYW1zKXtcblx0dmFyIHNlbGYgPSB0aGlzLFxuXHRlbGVtZW50ID0gY2VsbC5nZXRFbGVtZW50KCksXG5cdHZhbHVlID0gY2VsbC5nZXRWYWx1ZSgpLFxuXHRtYXhTdGFycyA9IGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzdmdcIikubGVuZ3RoIHx8IDUsXG5cdHNpemUgPSBlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic3ZnXCIpWzBdID8gZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInN2Z1wiKVswXS5nZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiKSA6IDE0LFxuXHRzdGFycyA9IFtdLFxuXHRzdGFyc0hvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksXG5cdHN0YXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgXCJzdmdcIik7XG5cblxuXHQvL2NoYW5nZSBzdGFyIHR5cGVcblx0ZnVuY3Rpb24gc3RhckNoYW5nZSh2YWwpe1xuXHRcdHN0YXJzLmZvckVhY2goZnVuY3Rpb24oc3RhciwgaSl7XG5cdFx0XHRpZihpIDwgdmFsKXtcblx0XHRcdFx0aWYoc2VsZi50YWJsZS5icm93c2VyID09IFwiaWVcIil7XG5cdFx0XHRcdFx0c3Rhci5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcInRhYnVsYXRvci1zdGFyLWFjdGl2ZVwiKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHN0YXIuY2xhc3NMaXN0LnJlcGxhY2UoXCJ0YWJ1bGF0b3Itc3Rhci1pbmFjdGl2ZVwiLCBcInRhYnVsYXRvci1zdGFyLWFjdGl2ZVwiKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHN0YXIuaW5uZXJIVE1MID0gJzxwb2x5Z29uIGZpbGw9XCIjNDg4Q0U5XCIgc3Ryb2tlPVwiIzAxNEFBRVwiIHN0cm9rZS13aWR0aD1cIjM3LjYxNTJcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBzdHJva2UtbWl0ZXJsaW1pdD1cIjEwXCIgcG9pbnRzPVwiMjU5LjIxNiwyOS45NDIgMzMwLjI3LDE3My45MTkgNDg5LjE2LDE5Ny4wMDcgMzc0LjE4NSwzMDkuMDggNDAxLjMzLDQ2Ny4zMSAyNTkuMjE2LDM5Mi42MTIgMTE3LjEwNCw0NjcuMzEgMTQ0LjI1LDMwOS4wOCAyOS4yNzQsMTk3LjAwNyAxODguMTY1LDE3My45MTkgXCIvPic7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlmKHNlbGYudGFibGUuYnJvd3NlciA9PSBcImllXCIpe1xuXHRcdFx0XHRcdHN0YXIuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJ0YWJ1bGF0b3Itc3Rhci1pbmFjdGl2ZVwiKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHN0YXIuY2xhc3NMaXN0LnJlcGxhY2UoXCJ0YWJ1bGF0b3Itc3Rhci1hY3RpdmVcIiwgXCJ0YWJ1bGF0b3Itc3Rhci1pbmFjdGl2ZVwiKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHN0YXIuaW5uZXJIVE1MID0gJzxwb2x5Z29uIGZpbGw9XCIjMDEwMTU1XCIgc3Ryb2tlPVwiIzY4Njg2OFwiIHN0cm9rZS13aWR0aD1cIjM3LjYxNTJcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBzdHJva2UtbWl0ZXJsaW1pdD1cIjEwXCIgcG9pbnRzPVwiMjU5LjIxNiwyOS45NDIgMzMwLjI3LDE3My45MTkgNDg5LjE2LDE5Ny4wMDcgMzc0LjE4NSwzMDkuMDggNDAxLjMzLDQ2Ny4zMSAyNTkuMjE2LDM5Mi42MTIgMTE3LjEwNCw0NjcuMzEgMTQ0LjI1LDMwOS4wOCAyOS4yNzQsMTk3LjAwNyAxODguMTY1LDE3My45MTkgXCIvPic7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHQvL2J1aWxkIHN0YXJzXG5cdGZ1bmN0aW9uIGJ1aWxkU3RhcihpKXtcblxuXHRcdHZhciBzdGFySG9sZGVyID0gIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuXHRcdHZhciBuZXh0U3RhciA9IHN0YXIuY2xvbmVOb2RlKHRydWUpO1xuXG5cdFx0c3RhcnMucHVzaChuZXh0U3Rhcik7XG5cblx0XHRzdGFySG9sZGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRzdGFyQ2hhbmdlKGkpO1xuXHRcdH0pO1xuXG5cdFx0c3RhckhvbGRlci5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fSk7XG5cblx0XHRzdGFySG9sZGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbihlKXtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0c3VjY2VzcyhpKTtcblx0XHRcdGVsZW1lbnQuYmx1cigpO1xuXHRcdH0pO1xuXG5cdFx0c3RhckhvbGRlci5hcHBlbmRDaGlsZChuZXh0U3Rhcik7XG5cdFx0c3RhcnNIb2xkZXIuYXBwZW5kQ2hpbGQoc3RhckhvbGRlcik7XG5cblx0fVxuXG5cdC8vaGFuZGxlIGtleWJvYXJkIG5hdmlnYXRpb24gdmFsdWUgY2hhbmdlXG5cdGZ1bmN0aW9uIGNoYW5nZVZhbHVlKHZhbCl7XG5cdFx0dmFsdWUgPSB2YWw7XG5cdFx0c3RhckNoYW5nZSh2YWwpO1xuXHR9XG5cblx0Ly9zdHlsZSBjZWxsXG5cdGVsZW1lbnQuc3R5bGUud2hpdGVTcGFjZSA9IFwibm93cmFwXCI7XG5cdGVsZW1lbnQuc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHRlbGVtZW50LnN0eWxlLnRleHRPdmVyZmxvdyA9IFwiZWxsaXBzaXNcIjtcblxuXHQvL3N0eWxlIGhvbGRpbmcgZWxlbWVudFxuXHRzdGFyc0hvbGRlci5zdHlsZS52ZXJ0aWNhbEFsaWduID0gXCJtaWRkbGVcIjtcblx0c3RhcnNIb2xkZXIuc3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdHN0YXJzSG9sZGVyLnN0eWxlLnBhZGRpbmcgPSBcIjRweFwiO1xuXG5cdC8vc3R5bGUgc3RhclxuXHRzdGFyLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIHNpemUpO1xuXHRzdGFyLnNldEF0dHJpYnV0ZShcImhlaWdodFwiLCBzaXplKTtcblx0c3Rhci5zZXRBdHRyaWJ1dGUoXCJ2aWV3Qm94XCIsIFwiMCAwIDUxMiA1MTJcIik7XG5cdHN0YXIuc2V0QXR0cmlidXRlKFwieG1sOnNwYWNlXCIsIFwicHJlc2VydmVcIik7XG5cdHN0YXIuc3R5bGUucGFkZGluZyA9IFwiMCAxcHhcIjtcblxuXHRpZihlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXMgJiYgdHlwZW9mIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlcyA9PSBcIm9iamVjdFwiKXtcblx0XHRmb3IgKGxldCBrZXkgaW4gZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzKXtcblx0XHRcdGlmKGtleS5jaGFyQXQoMCkgPT0gXCIrXCIpe1xuXHRcdFx0XHRrZXkgPSBrZXkuc2xpY2UoMSk7XG5cdFx0XHRcdHN0YXJzSG9sZGVyLnNldEF0dHJpYnV0ZShrZXksIHN0YXJzSG9sZGVyLmdldEF0dHJpYnV0ZShrZXkpICsgZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzW1wiK1wiICsga2V5XSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHN0YXJzSG9sZGVyLnNldEF0dHJpYnV0ZShrZXksIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlc1trZXldKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvL2NyZWF0ZSBjb3JyZWN0IG51bWJlciBvZiBzdGFyc1xuXHRmb3IodmFyIGk9MTtpPD0gbWF4U3RhcnM7aSsrKXtcblx0XHRidWlsZFN0YXIoaSk7XG5cdH1cblxuXHQvL2Vuc3VyZSB2YWx1ZSBkb2VzIG5vdCBleGNlZWQgbnVtYmVyIG9mIHN0YXJzXG5cdHZhbHVlID0gTWF0aC5taW4ocGFyc2VJbnQodmFsdWUpLCBtYXhTdGFycyk7XG5cblx0Ly8gc2V0IGluaXRpYWwgc3R5bGluZyBvZiBzdGFyc1xuXHRzdGFyQ2hhbmdlKHZhbHVlKTtcblxuXHRzdGFyc0hvbGRlci5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdHN0YXJDaGFuZ2UoMCk7XG5cdH0pO1xuXG5cdHN0YXJzSG9sZGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbihlKXtcblx0XHRzdWNjZXNzKDApO1xuXHR9KTtcblxuXHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdGNhbmNlbCgpO1xuXHR9KTtcblxuXHQvL2FsbG93IGtleSBiYXNlZCBuYXZpZ2F0aW9uXG5cdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZnVuY3Rpb24oZSl7XG5cdFx0c3dpdGNoKGUua2V5Q29kZSl7XG5cdFx0XHRjYXNlIDM5OiAvL3JpZ2h0IGFycm93XG5cdFx0XHRcdGNoYW5nZVZhbHVlKHZhbHVlICsgMSk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDM3OiAvL2xlZnQgYXJyb3dcblx0XHRcdFx0Y2hhbmdlVmFsdWUodmFsdWUgLSAxKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMTM6IC8vZW50ZXJcblx0XHRcdFx0c3VjY2Vzcyh2YWx1ZSk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDI3OiAvL2VzY2FwZVxuXHRcdFx0XHRjYW5jZWwoKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9KTtcblxuXHRyZXR1cm4gc3RhcnNIb2xkZXI7XG59XG5cbi8vZHJhZ2dhYmxlIHByb2dyZXNzIGJhclxuZnVuY3Rpb24gcHJvZ3Jlc3MoY2VsbCwgb25SZW5kZXJlZCwgc3VjY2VzcywgY2FuY2VsLCBlZGl0b3JQYXJhbXMpe1xuXHR2YXIgZWxlbWVudCA9IGNlbGwuZ2V0RWxlbWVudCgpLFxuXHRtYXggPSB0eXBlb2YgZWRpdG9yUGFyYW1zLm1heCA9PT0gXCJ1bmRlZmluZWRcIiA/ICgoZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImRpdlwiKVswXSAmJiBlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiZGl2XCIpWzBdLmdldEF0dHJpYnV0ZShcIm1heFwiKSkgfHwgMTAwKSA6IGVkaXRvclBhcmFtcy5tYXgsXG5cdG1pbiA9IHR5cGVvZiBlZGl0b3JQYXJhbXMubWluID09PSBcInVuZGVmaW5lZFwiID8gKChlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiZGl2XCIpWzBdICYmIGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJkaXZcIilbMF0uZ2V0QXR0cmlidXRlKFwibWluXCIpKSB8fCAwKSA6IGVkaXRvclBhcmFtcy5taW4sXG5cdHBlcmNlbnQgPSAobWF4IC0gbWluKSAvIDEwMCxcblx0dmFsdWUgPSBjZWxsLmdldFZhbHVlKCkgfHwgMCxcblx0aGFuZGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxcblx0YmFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxcblx0bW91c2VEcmFnLCBtb3VzZURyYWdXaWR0aDtcblxuXHQvL3NldCBuZXcgdmFsdWVcblx0ZnVuY3Rpb24gdXBkYXRlVmFsdWUoKXtcblx0XHR2YXIgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50LCBudWxsKTtcblxuXHRcdHZhciBjYWxjVmFsID0gKHBlcmNlbnQgKiBNYXRoLnJvdW5kKGJhci5vZmZzZXRXaWR0aCAvICgoZWxlbWVudC5jbGllbnRXaWR0aCAtIHBhcnNlSW50KHN0eWxlLmdldFByb3BlcnR5VmFsdWUoXCJwYWRkaW5nLWxlZnRcIikpIC0gcGFyc2VJbnQoc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShcInBhZGRpbmctcmlnaHRcIikpKS8xMDApKSkgKyBtaW47XG5cdFx0c3VjY2VzcyhjYWxjVmFsKTtcblx0XHRlbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtdmFsdWVub3dcIiwgY2FsY1ZhbCk7XG5cdFx0ZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIHZhbHVlKTtcblx0fVxuXG5cdC8vc3R5bGUgaGFuZGxlXG5cdGhhbmRsZS5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0aGFuZGxlLnN0eWxlLnJpZ2h0ID0gXCIwXCI7XG5cdGhhbmRsZS5zdHlsZS50b3AgPSBcIjBcIjtcblx0aGFuZGxlLnN0eWxlLmJvdHRvbSA9IFwiMFwiO1xuXHRoYW5kbGUuc3R5bGUud2lkdGggPSBcIjVweFwiO1xuXHRoYW5kbGUuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1wcm9ncmVzcy1oYW5kbGVcIik7XG5cblx0Ly9zdHlsZSBiYXJcblx0YmFyLnN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRiYXIuc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdC8vIGJhci5zdHlsZS50b3AgPSBcIjhweFwiO1xuXHQvLyBiYXIuc3R5bGUuYm90dG9tID0gXCI4cHhcIjtcblx0Ly8gYmFyLnN0eWxlLmxlZnQgPSBcIjRweFwiO1xuXHQvLyBiYXIuc3R5bGUubWFyZ2luUmlnaHQgPSBcIjRweFwiO1xuXHRiYXIuc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XG5cdGJhci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcIiM0ODhDRTlcIjtcblx0YmFyLnN0eWxlLm1heFdpZHRoID0gXCIxMDAlXCI7XG5cdGJhci5zdHlsZS5taW5XaWR0aCA9IFwiMCVcIjtcblxuXHRpZihlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXMgJiYgdHlwZW9mIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlcyA9PSBcIm9iamVjdFwiKXtcblx0XHRmb3IgKGxldCBrZXkgaW4gZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzKXtcblx0XHRcdGlmKGtleS5jaGFyQXQoMCkgPT0gXCIrXCIpe1xuXHRcdFx0XHRrZXkgPSBrZXkuc2xpY2UoMSk7XG5cdFx0XHRcdGJhci5zZXRBdHRyaWJ1dGUoa2V5LCBiYXIuZ2V0QXR0cmlidXRlKGtleSkgKyBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXNbXCIrXCIgKyBrZXldKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0YmFyLnNldEF0dHJpYnV0ZShrZXksIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlc1trZXldKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvL3N0eWxlIGNlbGxcblx0ZWxlbWVudC5zdHlsZS5wYWRkaW5nID0gXCI0cHggNHB4XCI7XG5cblx0Ly9tYWtlIHN1cmUgdmFsdWUgaXMgaW4gcmFuZ2Vcblx0dmFsdWUgPSBNYXRoLm1pbihwYXJzZUZsb2F0KHZhbHVlKSwgbWF4KTtcblx0dmFsdWUgPSBNYXRoLm1heChwYXJzZUZsb2F0KHZhbHVlKSwgbWluKTtcblxuXHQvL3dvcmtvdXQgcGVyY2VudGFnZVxuXHR2YWx1ZSA9IE1hdGgucm91bmQoKHZhbHVlIC0gbWluKSAvIHBlcmNlbnQpO1xuXHQvLyBiYXIuc3R5bGUucmlnaHQgPSB2YWx1ZSArIFwiJVwiO1xuXHRiYXIuc3R5bGUud2lkdGggPSB2YWx1ZSArIFwiJVwiO1xuXG5cdGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS12YWx1ZW1pblwiLCBtaW4pO1xuXHRlbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtdmFsdWVtYXhcIiwgbWF4KTtcblxuXHRiYXIuYXBwZW5kQ2hpbGQoaGFuZGxlKTtcblxuXHRoYW5kbGUuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBmdW5jdGlvbihlKXtcblx0XHRtb3VzZURyYWcgPSBlLnNjcmVlblg7XG5cdFx0bW91c2VEcmFnV2lkdGggPSBiYXIub2Zmc2V0V2lkdGg7XG5cdH0pO1xuXG5cdGhhbmRsZS5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKCl7XG5cdFx0aGFuZGxlLnN0eWxlLmN1cnNvciA9IFwiZXctcmVzaXplXCI7XG5cdH0pO1xuXG5cdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBmdW5jdGlvbihlKXtcblx0XHRpZihtb3VzZURyYWcpe1xuXHRcdFx0YmFyLnN0eWxlLndpZHRoID0gKG1vdXNlRHJhZ1dpZHRoICsgZS5zY3JlZW5YIC0gbW91c2VEcmFnKSArIFwicHhcIjtcblx0XHR9XG5cdH0pO1xuXG5cdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgZnVuY3Rpb24oZSl7XG5cdFx0aWYobW91c2VEcmFnKXtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXG5cdFx0XHRtb3VzZURyYWcgPSBmYWxzZTtcblx0XHRcdG1vdXNlRHJhZ1dpZHRoID0gZmFsc2U7XG5cblx0XHRcdHVwZGF0ZVZhbHVlKCk7XG5cdFx0fVxuXHR9KTtcblxuXHQvL2FsbG93IGtleSBiYXNlZCBuYXZpZ2F0aW9uXG5cdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZnVuY3Rpb24oZSl7XG5cdFx0c3dpdGNoKGUua2V5Q29kZSl7XG5cdFx0XHRjYXNlIDM5OiAvL3JpZ2h0IGFycm93XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0YmFyLnN0eWxlLndpZHRoID0gKGJhci5jbGllbnRXaWR0aCArIGVsZW1lbnQuY2xpZW50V2lkdGgvMTAwKSArIFwicHhcIjtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMzc6IC8vbGVmdCBhcnJvd1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdGJhci5zdHlsZS53aWR0aCA9IChiYXIuY2xpZW50V2lkdGggLSBlbGVtZW50LmNsaWVudFdpZHRoLzEwMCkgKyBcInB4XCI7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDk6IC8vdGFiXG5cdFx0XHRjYXNlIDEzOiAvL2VudGVyXG5cdFx0XHRcdHVwZGF0ZVZhbHVlKCk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDI3OiAvL2VzY2FwZVxuXHRcdFx0XHRjYW5jZWwoKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHR9XG5cdH0pO1xuXG5cdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgZnVuY3Rpb24oKXtcblx0XHRjYW5jZWwoKTtcblx0fSk7XG5cblx0cmV0dXJuIGJhcjtcbn1cblxuLy9jaGVja2JveFxuZnVuY3Rpb24gdGlja0Nyb3NzKGNlbGwsIG9uUmVuZGVyZWQsIHN1Y2Nlc3MsIGNhbmNlbCwgZWRpdG9yUGFyYW1zKXtcblx0dmFyIHZhbHVlID0gY2VsbC5nZXRWYWx1ZSgpLFxuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSxcblx0dHJpc3RhdGUgPSBlZGl0b3JQYXJhbXMudHJpc3RhdGUsXG5cdGluZGV0ZXJtVmFsdWUgPSB0eXBlb2YgZWRpdG9yUGFyYW1zLmluZGV0ZXJtaW5hdGVWYWx1ZSA9PT0gXCJ1bmRlZmluZWRcIiA/IG51bGwgOiBlZGl0b3JQYXJhbXMuaW5kZXRlcm1pbmF0ZVZhbHVlLFxuXHRpbmRldGVybVN0YXRlID0gZmFsc2UsXG5cdHRydWVWYWx1ZVNldCA9IE9iamVjdC5rZXlzKGVkaXRvclBhcmFtcykuaW5jbHVkZXMoXCJ0cnVlVmFsdWVcIiksXG5cdGZhbHNlVmFsdWVTZXQgPSBPYmplY3Qua2V5cyhlZGl0b3JQYXJhbXMpLmluY2x1ZGVzKFwiZmFsc2VWYWx1ZVwiKTtcblx0XG5cdGlucHV0LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJjaGVja2JveFwiKTtcblx0aW5wdXQuc3R5bGUubWFyZ2luVG9wID0gXCI1cHhcIjtcblx0aW5wdXQuc3R5bGUuYm94U2l6aW5nID0gXCJib3JkZXItYm94XCI7XG5cdFxuXHRpZihlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXMgJiYgdHlwZW9mIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlcyA9PSBcIm9iamVjdFwiKXtcblx0XHRmb3IgKGxldCBrZXkgaW4gZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzKXtcblx0XHRcdGlmKGtleS5jaGFyQXQoMCkgPT0gXCIrXCIpe1xuXHRcdFx0XHRrZXkgPSBrZXkuc2xpY2UoMSk7XG5cdFx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZShrZXksIGlucHV0LmdldEF0dHJpYnV0ZShrZXkpICsgZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzW1wiK1wiICsga2V5XSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZShrZXksIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlc1trZXldKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdGlucHV0LnZhbHVlID0gdmFsdWU7XG5cdFxuXHRpZih0cmlzdGF0ZSAmJiAodHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiIHx8IHZhbHVlID09PSBpbmRldGVybVZhbHVlIHx8IHZhbHVlID09PSBcIlwiKSl7XG5cdFx0aW5kZXRlcm1TdGF0ZSA9IHRydWU7XG5cdFx0aW5wdXQuaW5kZXRlcm1pbmF0ZSA9IHRydWU7XG5cdH1cblx0XG5cdGlmKHRoaXMudGFibGUuYnJvd3NlciAhPSBcImZpcmVmb3hcIiAmJiB0aGlzLnRhYmxlLmJyb3dzZXIgIT0gXCJzYWZhcmlcIil7IC8vcHJldmVudCBibHVyIGlzc3VlIG9uIG1hYyBmaXJlZm94XG5cdFx0b25SZW5kZXJlZChmdW5jdGlvbigpe1xuXHRcdFx0aWYoY2VsbC5nZXRUeXBlKCkgPT09IFwiY2VsbFwiKXtcblx0XHRcdFx0aW5wdXQuZm9jdXMoe3ByZXZlbnRTY3JvbGw6IHRydWV9KTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRcblx0aW5wdXQuY2hlY2tlZCA9IHRydWVWYWx1ZVNldCA/IHZhbHVlID09PSBlZGl0b3JQYXJhbXMudHJ1ZVZhbHVlIDogKHZhbHVlID09PSB0cnVlIHx8IHZhbHVlID09PSBcInRydWVcIiB8fCB2YWx1ZSA9PT0gXCJUcnVlXCIgfHwgdmFsdWUgPT09IDEpO1xuXHRcblx0ZnVuY3Rpb24gc2V0VmFsdWUoYmx1cil7XG5cdFx0dmFyIGNoZWNrZWRWYWx1ZSA9IGlucHV0LmNoZWNrZWQ7XG5cdFx0XG5cdFx0aWYodHJ1ZVZhbHVlU2V0ICYmIGNoZWNrZWRWYWx1ZSl7XG5cdFx0XHRjaGVja2VkVmFsdWUgPSBlZGl0b3JQYXJhbXMudHJ1ZVZhbHVlO1xuXHRcdH1lbHNlIGlmKGZhbHNlVmFsdWVTZXQgJiYgIWNoZWNrZWRWYWx1ZSl7XG5cdFx0XHRjaGVja2VkVmFsdWUgPSBlZGl0b3JQYXJhbXMuZmFsc2VWYWx1ZTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodHJpc3RhdGUpe1xuXHRcdFx0aWYoIWJsdXIpe1xuXHRcdFx0XHRpZihpbnB1dC5jaGVja2VkICYmICFpbmRldGVybVN0YXRlKXtcblx0XHRcdFx0XHRpbnB1dC5jaGVja2VkID0gZmFsc2U7XG5cdFx0XHRcdFx0aW5wdXQuaW5kZXRlcm1pbmF0ZSA9IHRydWU7XG5cdFx0XHRcdFx0aW5kZXRlcm1TdGF0ZSA9IHRydWU7XG5cdFx0XHRcdFx0cmV0dXJuIGluZGV0ZXJtVmFsdWU7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRpbmRldGVybVN0YXRlID0gZmFsc2U7XG5cdFx0XHRcdFx0cmV0dXJuIGNoZWNrZWRWYWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRpZihpbmRldGVybVN0YXRlKXtcblx0XHRcdFx0XHRyZXR1cm4gaW5kZXRlcm1WYWx1ZTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiBjaGVja2VkVmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRyZXR1cm4gY2hlY2tlZFZhbHVlO1xuXHRcdH1cblx0fVxuXHRcblx0Ly9zdWJtaXQgbmV3IHZhbHVlIG9uIGJsdXJcblx0aW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBmdW5jdGlvbihlKXtcblx0XHRzdWNjZXNzKHNldFZhbHVlKCkpO1xuXHR9KTtcblxuXHRpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCBmdW5jdGlvbihlKXtcblx0XHRzdWNjZXNzKHNldFZhbHVlKHRydWUpKTtcblx0fSk7XG5cdFxuXHQvL3N1Ym1pdCBuZXcgdmFsdWUgb24gZW50ZXJcblx0aW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZnVuY3Rpb24oZSl7XG5cdFx0aWYoZS5rZXlDb2RlID09IDEzKXtcblx0XHRcdHN1Y2Nlc3Moc2V0VmFsdWUoKSk7XG5cdFx0fVxuXHRcdGlmKGUua2V5Q29kZSA9PSAyNyl7XG5cdFx0XHRjYW5jZWwoKTtcblx0XHR9XG5cdH0pO1xuXHRcblx0cmV0dXJuIGlucHV0O1xufVxuXG52YXIgZGVmYXVsdEVkaXRvcnMgPSB7XG5cdGlucHV0OmlucHV0LFxuXHR0ZXh0YXJlYTp0ZXh0YXJlYSxcblx0bnVtYmVyOm51bWJlcixcblx0cmFuZ2U6cmFuZ2UsXG5cdGRhdGU6ZGF0ZSxcblx0dGltZTp0aW1lLFxuXHRkYXRldGltZTpkYXRldGltZSxcblx0c2VsZWN0OnNlbGVjdCxcblx0bGlzdDpsaXN0LFxuXHRhdXRvY29tcGxldGU6YXV0b2NvbXBsZXRlLFxuXHRzdGFyOnN0YXIsXG5cdHByb2dyZXNzOnByb2dyZXNzLFxuXHR0aWNrQ3Jvc3M6dGlja0Nyb3NzLFxufTtcblxuY2xhc3MgRWRpdCQxIGV4dGVuZHMgTW9kdWxle1xuXHRcblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblx0XHRcblx0XHR0aGlzLmN1cnJlbnRDZWxsID0gZmFsc2U7IC8vaG9sZCBjdXJyZW50bHkgZWRpdGluZyBjZWxsXG5cdFx0dGhpcy5tb3VzZUNsaWNrID0gZmFsc2U7IC8vaG9sZCBtb3VzZWRvd24gc3RhdGUgdG8gcHJldmVudCBjbGljayBiaW5kaW5nIGJlaW5nIG92ZXJyaWRkZW4gYnkgZWRpdG9yIG9wZW5pbmdcblx0XHR0aGlzLnJlY3Vyc2lvbkJsb2NrID0gZmFsc2U7IC8vcHJldmVudCBmb2N1cyByZWN1cnNpb25cblx0XHR0aGlzLmludmFsaWRFZGl0ID0gZmFsc2U7XG5cdFx0dGhpcy5lZGl0ZWRDZWxscyA9IFtdO1xuXHRcdFxuXHRcdHRoaXMuZWRpdG9ycyA9IEVkaXQkMS5lZGl0b3JzO1xuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJlZGl0YWJsZVwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiZWRpdG9yXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJlZGl0b3JQYXJhbXNcIik7XG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImNlbGxFZGl0aW5nXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJjZWxsRWRpdGVkXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJjZWxsRWRpdENhbmNlbGxlZFwiKTtcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcImdldEVkaXRlZENlbGxzXCIsIHRoaXMuZ2V0RWRpdGVkQ2VsbHMuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJjbGVhckNlbGxFZGl0ZWRcIiwgdGhpcy5jbGVhckNlbGxFZGl0ZWQuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJuYXZpZ2F0ZVByZXZcIiwgdGhpcy5uYXZpZ2F0ZVByZXYuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJuYXZpZ2F0ZU5leHRcIiwgdGhpcy5uYXZpZ2F0ZU5leHQuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJuYXZpZ2F0ZUxlZnRcIiwgdGhpcy5uYXZpZ2F0ZUxlZnQuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJuYXZpZ2F0ZVJpZ2h0XCIsIHRoaXMubmF2aWdhdGVSaWdodC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcIm5hdmlnYXRlVXBcIiwgdGhpcy5uYXZpZ2F0ZVVwLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwibmF2aWdhdGVEb3duXCIsIHRoaXMubmF2aWdhdGVEb3duLmJpbmQodGhpcykpO1xuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcImNlbGxcIiwgXCJpc0VkaXRlZFwiLCB0aGlzLmNlbGxJc0VkaXRlZC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJjZWxsXCIsIFwiY2xlYXJFZGl0ZWRcIiwgdGhpcy5jbGVhckVkaXRlZC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJjZWxsXCIsIFwiZWRpdFwiLCB0aGlzLmVkaXRDZWxsLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcImNlbGxcIiwgXCJjYW5jZWxFZGl0XCIsIHRoaXMuY2VsbENhbmNlbEVkaXQuYmluZCh0aGlzKSk7XG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwiY2VsbFwiLCBcIm5hdmlnYXRlUHJldlwiLCB0aGlzLm5hdmlnYXRlUHJldi5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJjZWxsXCIsIFwibmF2aWdhdGVOZXh0XCIsIHRoaXMubmF2aWdhdGVOZXh0LmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcImNlbGxcIiwgXCJuYXZpZ2F0ZUxlZnRcIiwgdGhpcy5uYXZpZ2F0ZUxlZnQuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwiY2VsbFwiLCBcIm5hdmlnYXRlUmlnaHRcIiwgdGhpcy5uYXZpZ2F0ZVJpZ2h0LmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcImNlbGxcIiwgXCJuYXZpZ2F0ZVVwXCIsIHRoaXMubmF2aWdhdGVVcC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJjZWxsXCIsIFwibmF2aWdhdGVEb3duXCIsIHRoaXMubmF2aWdhdGVEb3duLmJpbmQodGhpcykpO1xuXHR9XG5cdFxuXHRpbml0aWFsaXplKCl7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjZWxsLWluaXRcIiwgdGhpcy5iaW5kRWRpdG9yLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY2VsbC1kZWxldGVcIiwgdGhpcy5jbGVhckVkaXRlZC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImNlbGwtdmFsdWUtY2hhbmdlZFwiLCB0aGlzLnVwZGF0ZUNlbGxDbGFzcy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1sYXlvdXRcIiwgdGhpcy5pbml0aWFsaXplQ29sdW1uQ2hlY2suYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tZGVsZXRlXCIsIHRoaXMuY29sdW1uRGVsZXRlQ2hlY2suYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctZGVsZXRpbmdcIiwgdGhpcy5yb3dEZWxldGVDaGVjay5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1sYXlvdXRcIiwgdGhpcy5yb3dFZGl0YWJsZUNoZWNrLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiZGF0YS1yZWZyZXNoaW5nXCIsIHRoaXMuY2FuY2VsRWRpdC5iaW5kKHRoaXMpKTtcblx0XHRcblx0XHR0aGlzLnN1YnNjcmliZShcImtleWJpbmRpbmctbmF2LXByZXZcIiwgdGhpcy5uYXZpZ2F0ZVByZXYuYmluZCh0aGlzLCB1bmRlZmluZWQpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImtleWJpbmRpbmctbmF2LW5leHRcIiwgdGhpcy5rZXliaW5kaW5nTmF2aWdhdGVOZXh0LmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwia2V5YmluZGluZy1uYXYtbGVmdFwiLCB0aGlzLm5hdmlnYXRlTGVmdC5iaW5kKHRoaXMsIHVuZGVmaW5lZCkpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwia2V5YmluZGluZy1uYXYtcmlnaHRcIiwgdGhpcy5uYXZpZ2F0ZVJpZ2h0LmJpbmQodGhpcywgdW5kZWZpbmVkKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJrZXliaW5kaW5nLW5hdi11cFwiLCB0aGlzLm5hdmlnYXRlVXAuYmluZCh0aGlzLCB1bmRlZmluZWQpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImtleWJpbmRpbmctbmF2LWRvd25cIiwgdGhpcy5uYXZpZ2F0ZURvd24uYmluZCh0aGlzLCB1bmRlZmluZWQpKTtcblx0fVxuXHRcblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLyBLZXliaW5kaW5nIEZ1bmN0aW9ucyAvLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHRrZXliaW5kaW5nTmF2aWdhdGVOZXh0KGUpe1xuXHRcdHZhciBjZWxsID0gdGhpcy5jdXJyZW50Q2VsbCxcblx0XHRuZXdSb3cgPSB0aGlzLm9wdGlvbnMoXCJ0YWJFbmROZXdSb3dcIik7XG5cdFx0XG5cdFx0aWYoY2VsbCl7XG5cdFx0XHRpZighdGhpcy5uYXZpZ2F0ZU5leHQoY2VsbCwgZSkpe1xuXHRcdFx0XHRpZihuZXdSb3cpe1xuXHRcdFx0XHRcdGNlbGwuZ2V0RWxlbWVudCgpLmZpcnN0Q2hpbGQuYmx1cigpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKG5ld1JvdyA9PT0gdHJ1ZSl7XG5cdFx0XHRcdFx0XHRuZXdSb3cgPSB0aGlzLnRhYmxlLmFkZFJvdyh7fSk7XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0aWYodHlwZW9mIG5ld1JvdyA9PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0XHRcdFx0XHRuZXdSb3cgPSB0aGlzLnRhYmxlLmFkZFJvdyhuZXdSb3coY2VsbC5yb3cuZ2V0Q29tcG9uZW50KCkpKTtcblx0XHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdFx0bmV3Um93ID0gdGhpcy50YWJsZS5hZGRSb3coT2JqZWN0LmFzc2lnbih7fSwgbmV3Um93KSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdG5ld1Jvdy50aGVuKCgpID0+IHtcblx0XHRcdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRjZWxsLmdldENvbXBvbmVudCgpLm5hdmlnYXRlTmV4dCgpO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLyBDZWxsIEZ1bmN0aW9ucyAvLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHRjZWxsSXNFZGl0ZWQoY2VsbCl7XG5cdFx0cmV0dXJuICEhIGNlbGwubW9kdWxlcy5lZGl0ICYmIGNlbGwubW9kdWxlcy5lZGl0LmVkaXRlZDtcblx0fVxuXHRcblx0Y2VsbENhbmNlbEVkaXQoY2VsbCl7XG5cdFx0aWYoY2VsbCA9PT0gdGhpcy5jdXJyZW50Q2VsbCl7XG5cdFx0XHR0aGlzLnRhYmxlLm1vZHVsZXMuZWRpdC5jYW5jZWxFZGl0KCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiQ2FuY2VsIEVkaXRvciBFcnJvciAtIFRoaXMgY2VsbCBpcyBub3QgY3VycmVudGx5IGJlaW5nIGVkaXRlZCBcIik7XG5cdFx0fVxuXHR9XG5cdFxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vIFRhYmxlIEZ1bmN0aW9ucyAvLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0dXBkYXRlQ2VsbENsYXNzKGNlbGwpe1xuXHRcdGlmKHRoaXMuYWxsb3dFZGl0KGNlbGwpKSB7XG5cdFx0XHRjZWxsLmdldEVsZW1lbnQoKS5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWVkaXRhYmxlXCIpO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdGNlbGwuZ2V0RWxlbWVudCgpLmNsYXNzTGlzdC5yZW1vdmUoXCJ0YWJ1bGF0b3ItZWRpdGFibGVcIik7XG5cdFx0fVxuXHR9XG5cdFxuXHRjbGVhckNlbGxFZGl0ZWQoY2VsbHMpe1xuXHRcdGlmKCFjZWxscyl7XG5cdFx0XHRjZWxscyA9IHRoaXMudGFibGUubW9kdWxlcy5lZGl0LmdldEVkaXRlZENlbGxzKCk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKCFBcnJheS5pc0FycmF5KGNlbGxzKSl7XG5cdFx0XHRjZWxscyA9IFtjZWxsc107XG5cdFx0fVxuXHRcdFxuXHRcdGNlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcblx0XHRcdHRoaXMudGFibGUubW9kdWxlcy5lZGl0LmNsZWFyRWRpdGVkKGNlbGwuX2dldFNlbGYoKSk7XG5cdFx0fSk7XG5cdH1cblx0XG5cdG5hdmlnYXRlUHJldihjZWxsID0gdGhpcy5jdXJyZW50Q2VsbCwgZSl7XG5cdFx0dmFyIG5leHRDZWxsLCBwcmV2Um93O1xuXHRcdFxuXHRcdGlmKGNlbGwpe1xuXHRcdFx0XG5cdFx0XHRpZihlKXtcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRuZXh0Q2VsbCA9IHRoaXMubmF2aWdhdGVMZWZ0KCk7XG5cdFx0XHRcblx0XHRcdGlmKG5leHRDZWxsKXtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHByZXZSb3cgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIucHJldkRpc3BsYXlSb3coY2VsbC5yb3csIHRydWUpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYocHJldlJvdyl7XG5cdFx0XHRcdFx0bmV4dENlbGwgPSB0aGlzLmZpbmRQcmV2RWRpdGFibGVDZWxsKHByZXZSb3csIHByZXZSb3cuY2VsbHMubGVuZ3RoKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZihuZXh0Q2VsbCl7XG5cdFx0XHRcdFx0XHRuZXh0Q2VsbC5nZXRDb21wb25lbnQoKS5lZGl0KCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdFxuXHRuYXZpZ2F0ZU5leHQoY2VsbCA9IHRoaXMuY3VycmVudENlbGwsIGUpe1xuXHRcdHZhciBuZXh0Q2VsbCwgbmV4dFJvdztcblx0XHRcblx0XHRpZihjZWxsKXtcblx0XHRcdFxuXHRcdFx0aWYoZSl7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0bmV4dENlbGwgPSB0aGlzLm5hdmlnYXRlUmlnaHQoKTtcblx0XHRcdFxuXHRcdFx0aWYobmV4dENlbGwpe1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0bmV4dFJvdyA9IHRoaXMudGFibGUucm93TWFuYWdlci5uZXh0RGlzcGxheVJvdyhjZWxsLnJvdywgdHJ1ZSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihuZXh0Um93KXtcblx0XHRcdFx0XHRuZXh0Q2VsbCA9IHRoaXMuZmluZE5leHRFZGl0YWJsZUNlbGwobmV4dFJvdywgLTEpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKG5leHRDZWxsKXtcblx0XHRcdFx0XHRcdG5leHRDZWxsLmdldENvbXBvbmVudCgpLmVkaXQoKTtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0XG5cdG5hdmlnYXRlTGVmdChjZWxsID0gdGhpcy5jdXJyZW50Q2VsbCwgZSl7XG5cdFx0dmFyIGluZGV4LCBuZXh0Q2VsbDtcblx0XHRcblx0XHRpZihjZWxsKXtcblx0XHRcdFxuXHRcdFx0aWYoZSl7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aW5kZXggPSBjZWxsLmdldEluZGV4KCk7XG5cdFx0XHRuZXh0Q2VsbCA9IHRoaXMuZmluZFByZXZFZGl0YWJsZUNlbGwoY2VsbC5yb3csIGluZGV4KTtcblx0XHRcdFxuXHRcdFx0aWYobmV4dENlbGwpe1xuXHRcdFx0XHRuZXh0Q2VsbC5nZXRDb21wb25lbnQoKS5lZGl0KCk7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0XG5cdG5hdmlnYXRlUmlnaHQoY2VsbCA9IHRoaXMuY3VycmVudENlbGwsIGUpe1xuXHRcdHZhciBpbmRleCwgbmV4dENlbGw7XG5cdFx0XG5cdFx0aWYoY2VsbCl7XG5cdFx0XHRcblx0XHRcdGlmKGUpe1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGluZGV4ID0gY2VsbC5nZXRJbmRleCgpO1xuXHRcdFx0bmV4dENlbGwgPSB0aGlzLmZpbmROZXh0RWRpdGFibGVDZWxsKGNlbGwucm93LCBpbmRleCk7XG5cdFx0XHRcblx0XHRcdGlmKG5leHRDZWxsKXtcblx0XHRcdFx0bmV4dENlbGwuZ2V0Q29tcG9uZW50KCkuZWRpdCgpO1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdFxuXHRuYXZpZ2F0ZVVwKGNlbGwgPSB0aGlzLmN1cnJlbnRDZWxsLCBlKXtcblx0XHR2YXIgaW5kZXgsIG5leHRSb3c7XG5cdFx0XG5cdFx0aWYoY2VsbCl7XG5cdFx0XHRcblx0XHRcdGlmKGUpe1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGluZGV4ID0gY2VsbC5nZXRJbmRleCgpO1xuXHRcdFx0bmV4dFJvdyA9IHRoaXMudGFibGUucm93TWFuYWdlci5wcmV2RGlzcGxheVJvdyhjZWxsLnJvdywgdHJ1ZSk7XG5cdFx0XHRcblx0XHRcdGlmKG5leHRSb3cpe1xuXHRcdFx0XHRuZXh0Um93LmNlbGxzW2luZGV4XS5nZXRDb21wb25lbnQoKS5lZGl0KCk7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0XG5cdG5hdmlnYXRlRG93bihjZWxsID0gdGhpcy5jdXJyZW50Q2VsbCwgZSl7XG5cdFx0dmFyIGluZGV4LCBuZXh0Um93O1xuXHRcdFxuXHRcdGlmKGNlbGwpe1xuXHRcdFx0XG5cdFx0XHRpZihlKXtcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpbmRleCA9IGNlbGwuZ2V0SW5kZXgoKTtcblx0XHRcdG5leHRSb3cgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIubmV4dERpc3BsYXlSb3coY2VsbC5yb3csIHRydWUpO1xuXHRcdFx0XG5cdFx0XHRpZihuZXh0Um93KXtcblx0XHRcdFx0bmV4dFJvdy5jZWxsc1tpbmRleF0uZ2V0Q29tcG9uZW50KCkuZWRpdCgpO1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdFxuXHRmaW5kTmV4dEVkaXRhYmxlQ2VsbChyb3csIGluZGV4KXtcblx0XHR2YXIgbmV4dENlbGwgPSBmYWxzZTtcblx0XHRcblx0XHRpZihpbmRleCA8IHJvdy5jZWxscy5sZW5ndGgtMSl7XG5cdFx0XHRmb3IodmFyIGkgPSBpbmRleCsxOyBpIDwgcm93LmNlbGxzLmxlbmd0aDsgaSsrKXtcblx0XHRcdFx0bGV0IGNlbGwgPSByb3cuY2VsbHNbaV07XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihjZWxsLmNvbHVtbi5tb2R1bGVzLmVkaXQgJiYgSGVscGVycy5lbFZpc2libGUoY2VsbC5nZXRFbGVtZW50KCkpKXtcblx0XHRcdFx0XHRsZXQgYWxsb3dFZGl0ID0gdGhpcy5hbGxvd0VkaXQoY2VsbCk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYoYWxsb3dFZGl0KXtcblx0XHRcdFx0XHRcdG5leHRDZWxsID0gY2VsbDtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gbmV4dENlbGw7XG5cdH1cblx0XG5cdGZpbmRQcmV2RWRpdGFibGVDZWxsKHJvdywgaW5kZXgpe1xuXHRcdHZhciBwcmV2Q2VsbCA9IGZhbHNlO1xuXHRcdFxuXHRcdGlmKGluZGV4ID4gMCl7XG5cdFx0XHRmb3IodmFyIGkgPSBpbmRleC0xOyBpID49IDA7IGktLSl7XG5cdFx0XHRcdGxldCBjZWxsID0gcm93LmNlbGxzW2ldO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoY2VsbC5jb2x1bW4ubW9kdWxlcy5lZGl0ICYmIEhlbHBlcnMuZWxWaXNpYmxlKGNlbGwuZ2V0RWxlbWVudCgpKSl7XG5cdFx0XHRcdFx0bGV0IGFsbG93RWRpdCA9IHRoaXMuYWxsb3dFZGl0KGNlbGwpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKGFsbG93RWRpdCl7XG5cdFx0XHRcdFx0XHRwcmV2Q2VsbCA9IGNlbGw7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHByZXZDZWxsO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8gSW50ZXJuYWwgTG9naWMgLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0aW5pdGlhbGl6ZUNvbHVtbkNoZWNrKGNvbHVtbil7XG5cdFx0aWYodHlwZW9mIGNvbHVtbi5kZWZpbml0aW9uLmVkaXRvciAhPT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHR0aGlzLmluaXRpYWxpemVDb2x1bW4oY29sdW1uKTtcblx0XHR9XG5cdH1cblx0XG5cdGNvbHVtbkRlbGV0ZUNoZWNrKGNvbHVtbil7XG5cdFx0aWYodGhpcy5jdXJyZW50Q2VsbCAmJiB0aGlzLmN1cnJlbnRDZWxsLmNvbHVtbiA9PT0gY29sdW1uKXtcblx0XHRcdHRoaXMuY2FuY2VsRWRpdCgpO1xuXHRcdH1cblx0fVxuXHRcblx0cm93RGVsZXRlQ2hlY2socm93KXtcblx0XHRpZih0aGlzLmN1cnJlbnRDZWxsICYmIHRoaXMuY3VycmVudENlbGwucm93ID09PSByb3cpe1xuXHRcdFx0dGhpcy5jYW5jZWxFZGl0KCk7XG5cdFx0fVxuXHR9XG5cblx0cm93RWRpdGFibGVDaGVjayhyb3cpe1xuXHRcdHJvdy5nZXRDZWxscygpLmZvckVhY2goKGNlbGwpID0+IHtcblx0XHRcdGlmKGNlbGwuY29sdW1uLm1vZHVsZXMuZWRpdCAmJiB0eXBlb2YgY2VsbC5jb2x1bW4ubW9kdWxlcy5lZGl0LmNoZWNrID09PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0XHR0aGlzLnVwZGF0ZUNlbGxDbGFzcyhjZWxsKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRcblx0Ly9pbml0aWFsaXplIGNvbHVtbiBlZGl0b3Jcblx0aW5pdGlhbGl6ZUNvbHVtbihjb2x1bW4pe1xuXHRcdHZhciBjb25maWcgPSB7XG5cdFx0XHRlZGl0b3I6ZmFsc2UsXG5cdFx0XHRibG9ja2VkOmZhbHNlLFxuXHRcdFx0Y2hlY2s6Y29sdW1uLmRlZmluaXRpb24uZWRpdGFibGUsXG5cdFx0XHRwYXJhbXM6Y29sdW1uLmRlZmluaXRpb24uZWRpdG9yUGFyYW1zIHx8IHt9XG5cdFx0fTtcblx0XHRcblx0XHQvL3NldCBjb2x1bW4gZWRpdG9yXG5cdFx0c3dpdGNoKHR5cGVvZiBjb2x1bW4uZGVmaW5pdGlvbi5lZGl0b3Ipe1xuXHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0XHRpZih0aGlzLmVkaXRvcnNbY29sdW1uLmRlZmluaXRpb24uZWRpdG9yXSl7XG5cdFx0XHRcdFx0Y29uZmlnLmVkaXRvciA9IHRoaXMuZWRpdG9yc1tjb2x1bW4uZGVmaW5pdGlvbi5lZGl0b3JdO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiRWRpdG9yIEVycm9yIC0gTm8gc3VjaCBlZGl0b3IgZm91bmQ6IFwiLCBjb2x1bW4uZGVmaW5pdGlvbi5lZGl0b3IpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRjYXNlIFwiZnVuY3Rpb25cIjpcblx0XHRcdFx0Y29uZmlnLmVkaXRvciA9IGNvbHVtbi5kZWZpbml0aW9uLmVkaXRvcjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGNhc2UgXCJib29sZWFuXCI6XG5cdFx0XHRcdGlmKGNvbHVtbi5kZWZpbml0aW9uLmVkaXRvciA9PT0gdHJ1ZSl7XG5cdFx0XHRcdFx0aWYodHlwZW9mIGNvbHVtbi5kZWZpbml0aW9uLmZvcm1hdHRlciAhPT0gXCJmdW5jdGlvblwiKXtcblx0XHRcdFx0XHRcdGlmKHRoaXMuZWRpdG9yc1tjb2x1bW4uZGVmaW5pdGlvbi5mb3JtYXR0ZXJdKXtcblx0XHRcdFx0XHRcdFx0Y29uZmlnLmVkaXRvciA9IHRoaXMuZWRpdG9yc1tjb2x1bW4uZGVmaW5pdGlvbi5mb3JtYXR0ZXJdO1xuXHRcdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjb25maWcuZWRpdG9yID0gdGhpcy5lZGl0b3JzW1wiaW5wdXRcIl07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiRWRpdG9yIEVycm9yIC0gQ2Fubm90IGF1dG8gbG9va3VwIGVkaXRvciBmb3IgYSBjdXN0b20gZm9ybWF0dGVyOiBcIiwgY29sdW1uLmRlZmluaXRpb24uZm9ybWF0dGVyKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGNvbmZpZy5lZGl0b3Ipe1xuXHRcdFx0Y29sdW1uLm1vZHVsZXMuZWRpdCA9IGNvbmZpZztcblx0XHR9XG5cdH1cblx0XG5cdGdldEN1cnJlbnRDZWxsKCl7XG5cdFx0cmV0dXJuIHRoaXMuY3VycmVudENlbGwgPyB0aGlzLmN1cnJlbnRDZWxsLmdldENvbXBvbmVudCgpIDogZmFsc2U7XG5cdH1cblx0XG5cdGNsZWFyRWRpdG9yKGNhbmNlbCl7XG5cdFx0dmFyIGNlbGwgPSB0aGlzLmN1cnJlbnRDZWxsLFxuXHRcdGNlbGxFbDtcblx0XHRcblx0XHR0aGlzLmludmFsaWRFZGl0ID0gZmFsc2U7XG5cdFx0XG5cdFx0aWYoY2VsbCl7XG5cdFx0XHR0aGlzLmN1cnJlbnRDZWxsID0gZmFsc2U7XG5cdFx0XHRcblx0XHRcdGNlbGxFbCA9IGNlbGwuZ2V0RWxlbWVudCgpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmRpc3BhdGNoKFwiZWRpdC1lZGl0b3ItY2xlYXJcIiwgY2VsbCwgY2FuY2VsKTtcblx0XHRcdFxuXHRcdFx0Y2VsbEVsLmNsYXNzTGlzdC5yZW1vdmUoXCJ0YWJ1bGF0b3ItZWRpdGluZ1wiKTtcblx0XHRcdFxuXHRcdFx0d2hpbGUoY2VsbEVsLmZpcnN0Q2hpbGQpIGNlbGxFbC5yZW1vdmVDaGlsZChjZWxsRWwuZmlyc3RDaGlsZCk7XG5cdFx0XHRcblx0XHRcdGNlbGwucm93LmdldEVsZW1lbnQoKS5jbGFzc0xpc3QucmVtb3ZlKFwidGFidWxhdG9yLWVkaXRpbmdcIik7XG5cdFx0XHRcblx0XHRcdGNlbGwudGFibGUuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwidGFidWxhdG9yLWVkaXRpbmdcIik7XG5cdFx0fVxuXHR9XG5cdFxuXHRjYW5jZWxFZGl0KCl7XG5cdFx0aWYodGhpcy5jdXJyZW50Q2VsbCl7XG5cdFx0XHR2YXIgY2VsbCA9IHRoaXMuY3VycmVudENlbGw7XG5cdFx0XHR2YXIgY29tcG9uZW50ID0gdGhpcy5jdXJyZW50Q2VsbC5nZXRDb21wb25lbnQoKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5jbGVhckVkaXRvcih0cnVlKTtcblx0XHRcdGNlbGwuc2V0VmFsdWVBY3R1YWwoY2VsbC5nZXRWYWx1ZSgpKTtcblx0XHRcdGNlbGwuY2VsbFJlbmRlcmVkKCk7XG5cdFx0XHRcblx0XHRcdGlmKGNlbGwuY29sdW1uLmRlZmluaXRpb24uZWRpdG9yID09IFwidGV4dGFyZWFcIiB8fCBjZWxsLmNvbHVtbi5kZWZpbml0aW9uLnZhcmlhYmxlSGVpZ2h0KXtcblx0XHRcdFx0Y2VsbC5yb3cubm9ybWFsaXplSGVpZ2h0KHRydWUpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihjZWxsLmNvbHVtbi5kZWZpbml0aW9uLmNlbGxFZGl0Q2FuY2VsbGVkKXtcblx0XHRcdFx0Y2VsbC5jb2x1bW4uZGVmaW5pdGlvbi5jZWxsRWRpdENhbmNlbGxlZC5jYWxsKHRoaXMudGFibGUsIGNvbXBvbmVudCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHRoaXMuZGlzcGF0Y2goXCJlZGl0LWNhbmNlbGxlZFwiLCBjZWxsKTtcblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcImNlbGxFZGl0Q2FuY2VsbGVkXCIsIGNvbXBvbmVudCk7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL3JldHVybiBhIGZvcm1hdHRlZCB2YWx1ZSBmb3IgYSBjZWxsXG5cdGJpbmRFZGl0b3IoY2VsbCl7XG5cdFx0aWYoY2VsbC5jb2x1bW4ubW9kdWxlcy5lZGl0KXtcblx0XHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHRcdGVsZW1lbnQgPSBjZWxsLmdldEVsZW1lbnQodHJ1ZSk7XG5cdFx0XHRcblx0XHRcdHRoaXMudXBkYXRlQ2VsbENsYXNzKGNlbGwpO1xuXHRcdFx0ZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLCAwKTtcblx0XHRcdFxuXHRcdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSl7XG5cdFx0XHRcdGlmKCFlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcInRhYnVsYXRvci1lZGl0aW5nXCIpKXtcblx0XHRcdFx0XHRlbGVtZW50LmZvY3VzKHtwcmV2ZW50U2Nyb2xsOiB0cnVlfSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgZnVuY3Rpb24oZSl7XG5cdFx0XHRcdGlmIChlLmJ1dHRvbiA9PT0gMikge1xuXHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHNlbGYubW91c2VDbGljayA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCBmdW5jdGlvbihlKXtcblx0XHRcdFx0aWYoIXNlbGYucmVjdXJzaW9uQmxvY2spe1xuXHRcdFx0XHRcdHNlbGYuZWRpdChjZWxsLCBlLCBmYWxzZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXHRcblx0Zm9jdXNDZWxsTm9FdmVudChjZWxsLCBibG9jayl7XG5cdFx0dGhpcy5yZWN1cnNpb25CbG9jayA9IHRydWU7XG5cdFx0XG5cdFx0aWYoIShibG9jayAmJiB0aGlzLnRhYmxlLmJyb3dzZXIgPT09IFwiaWVcIikpe1xuXHRcdFx0Y2VsbC5nZXRFbGVtZW50KCkuZm9jdXMoe3ByZXZlbnRTY3JvbGw6IHRydWV9KTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5yZWN1cnNpb25CbG9jayA9IGZhbHNlO1xuXHR9XG5cdFxuXHRlZGl0Q2VsbChjZWxsLCBmb3JjZUVkaXQpe1xuXHRcdHRoaXMuZm9jdXNDZWxsTm9FdmVudChjZWxsKTtcblx0XHR0aGlzLmVkaXQoY2VsbCwgZmFsc2UsIGZvcmNlRWRpdCk7XG5cdH1cblx0XG5cdGZvY3VzU2Nyb2xsQWRqdXN0KGNlbGwpe1xuXHRcdGlmKHRoaXMudGFibGUucm93TWFuYWdlci5nZXRSZW5kZXJNb2RlKCkgPT0gXCJ2aXJ0dWFsXCIpe1xuXHRcdFx0dmFyIHRvcEVkZ2UgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5zY3JvbGxUb3AsXG5cdFx0XHRib3R0b21FZGdlID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQuY2xpZW50SGVpZ2h0ICsgdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQuc2Nyb2xsVG9wLFxuXHRcdFx0cm93RWwgPSBjZWxsLnJvdy5nZXRFbGVtZW50KCk7XG5cdFx0XHRcblx0XHRcdGlmKHJvd0VsLm9mZnNldFRvcCA8IHRvcEVkZ2Upe1xuXHRcdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5zY3JvbGxUb3AgLT0gKHRvcEVkZ2UgLSByb3dFbC5vZmZzZXRUb3ApO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRpZihyb3dFbC5vZmZzZXRUb3AgKyByb3dFbC5vZmZzZXRIZWlnaHQgID4gYm90dG9tRWRnZSl7XG5cdFx0XHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQuc2Nyb2xsVG9wICs9IChyb3dFbC5vZmZzZXRUb3AgKyByb3dFbC5vZmZzZXRIZWlnaHQgLSBib3R0b21FZGdlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR2YXIgbGVmdEVkZ2UgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5zY3JvbGxMZWZ0LFxuXHRcdFx0cmlnaHRFZGdlID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQuY2xpZW50V2lkdGggKyB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5zY3JvbGxMZWZ0LFxuXHRcdFx0Y2VsbEVsID0gY2VsbC5nZXRFbGVtZW50KCk7XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMudGFibGUubW9kRXhpc3RzKFwiZnJvemVuQ29sdW1uc1wiKSl7XG5cdFx0XHRcdGxlZnRFZGdlICs9IHBhcnNlSW50KHRoaXMudGFibGUubW9kdWxlcy5mcm96ZW5Db2x1bW5zLmxlZnRNYXJnaW4gfHwgMCk7XG5cdFx0XHRcdHJpZ2h0RWRnZSAtPSBwYXJzZUludCh0aGlzLnRhYmxlLm1vZHVsZXMuZnJvemVuQ29sdW1ucy5yaWdodE1hcmdpbiB8fCAwKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnJlbmRlckhvcml6b250YWwgPT09IFwidmlydHVhbFwiKXtcblx0XHRcdFx0bGVmdEVkZ2UgLT0gcGFyc2VJbnQodGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLnJlbmRlcmVyLnZEb21QYWRMZWZ0KTtcblx0XHRcdFx0cmlnaHRFZGdlIC09IHBhcnNlSW50KHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5yZW5kZXJlci52RG9tUGFkTGVmdCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKGNlbGxFbC5vZmZzZXRMZWZ0IDwgbGVmdEVkZ2Upe1xuXHRcdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5zY3JvbGxMZWZ0IC09IChsZWZ0RWRnZSAtIGNlbGxFbC5vZmZzZXRMZWZ0KTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aWYoY2VsbEVsLm9mZnNldExlZnQgKyBjZWxsRWwub2Zmc2V0V2lkdGggID4gcmlnaHRFZGdlKXtcblx0XHRcdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5zY3JvbGxMZWZ0ICs9IChjZWxsRWwub2Zmc2V0TGVmdCArIGNlbGxFbC5vZmZzZXRXaWR0aCAtIHJpZ2h0RWRnZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdGFsbG93RWRpdChjZWxsKSB7XG5cdFx0dmFyIGNoZWNrID0gY2VsbC5jb2x1bW4ubW9kdWxlcy5lZGl0ID8gdHJ1ZSA6IGZhbHNlO1xuXG5cdFx0aWYoY2VsbC5jb2x1bW4ubW9kdWxlcy5lZGl0KXtcblx0XHRcdHN3aXRjaCh0eXBlb2YgY2VsbC5jb2x1bW4ubW9kdWxlcy5lZGl0LmNoZWNrKXtcblx0XHRcdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHRcdFx0aWYoY2VsbC5yb3cuaW5pdGlhbGl6ZWQpe1xuXHRcdFx0XHRcdFx0Y2hlY2sgPSBjZWxsLmNvbHVtbi5tb2R1bGVzLmVkaXQuY2hlY2soY2VsbC5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgXCJzdHJpbmdcIjpcblx0XHRcdFx0XHRjaGVjayA9ICEhY2VsbC5yb3cuZGF0YVtjZWxsLmNvbHVtbi5tb2R1bGVzLmVkaXQuY2hlY2tdO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgXCJib29sZWFuXCI6XG5cdFx0XHRcdFx0Y2hlY2sgPSBjZWxsLmNvbHVtbi5tb2R1bGVzLmVkaXQuY2hlY2s7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNoZWNrO1xuXHR9XG5cdFxuXHRlZGl0KGNlbGwsIGUsIGZvcmNlRWRpdCl7XG5cdFx0dmFyIHNlbGYgPSB0aGlzLFxuXHRcdGFsbG93RWRpdCA9IHRydWUsXG5cdFx0cmVuZGVyZWQgPSBmdW5jdGlvbigpe30sXG5cdFx0ZWxlbWVudCA9IGNlbGwuZ2V0RWxlbWVudCgpLFxuXHRcdGNlbGxFZGl0b3IsIGNvbXBvbmVudCwgcGFyYW1zO1xuXHRcdFxuXHRcdC8vcHJldmVudCBlZGl0aW5nIGlmIGFub3RoZXIgY2VsbCBpcyByZWZ1c2luZyB0byBsZWF2ZSBmb2N1cyAoZWcuIHZhbGlkYXRpb24gZmFpbClcblxuXHRcdGlmKHRoaXMuY3VycmVudENlbGwpe1xuXHRcdFx0aWYoIXRoaXMuaW52YWxpZEVkaXQgJiYgdGhpcy5jdXJyZW50Q2VsbCAhPT0gY2VsbCl7XG5cdFx0XHRcdHRoaXMuY2FuY2VsRWRpdCgpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRcblx0XHQvL2hhbmRsZSBzdWNjZXNzZnVsIHZhbHVlIGNoYW5nZVxuXHRcdGZ1bmN0aW9uIHN1Y2Nlc3ModmFsdWUpe1xuXHRcdFx0aWYoc2VsZi5jdXJyZW50Q2VsbCA9PT0gY2VsbCl7XG5cdFx0XHRcdHZhciB2YWxpZCA9IHNlbGYuY2hhaW4oXCJlZGl0LXN1Y2Nlc3NcIiwgW2NlbGwsIHZhbHVlXSwgdHJ1ZSwgdHJ1ZSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih2YWxpZCA9PT0gdHJ1ZSB8fCBzZWxmLnRhYmxlLm9wdGlvbnMudmFsaWRhdGlvbk1vZGUgPT09IFwiaGlnaGxpZ2h0XCIpe1xuXHRcdFx0XHRcdHNlbGYuY2xlYXJFZGl0b3IoKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZighY2VsbC5tb2R1bGVzLmVkaXQpe1xuXHRcdFx0XHRcdFx0Y2VsbC5tb2R1bGVzLmVkaXQgPSB7fTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Y2VsbC5tb2R1bGVzLmVkaXQuZWRpdGVkID0gdHJ1ZTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZihzZWxmLmVkaXRlZENlbGxzLmluZGV4T2YoY2VsbCkgPT0gLTEpe1xuXHRcdFx0XHRcdFx0c2VsZi5lZGl0ZWRDZWxscy5wdXNoKGNlbGwpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHRjZWxsLnNldFZhbHVlKHZhbHVlLCB0cnVlKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRyZXR1cm4gdmFsaWQgPT09IHRydWU7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRzZWxmLmludmFsaWRFZGl0ID0gdHJ1ZTtcblx0XHRcdFx0XHRzZWxmLmZvY3VzQ2VsbE5vRXZlbnQoY2VsbCwgdHJ1ZSk7XG5cdFx0XHRcdFx0cmVuZGVyZWQoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0Ly9oYW5kbGUgYWJvcnRlZCBlZGl0XG5cdFx0ZnVuY3Rpb24gY2FuY2VsKCl7XG5cdFx0XHRpZihzZWxmLmN1cnJlbnRDZWxsID09PSBjZWxsKXtcblx0XHRcdFx0c2VsZi5jYW5jZWxFZGl0KCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdGZ1bmN0aW9uIG9uUmVuZGVyZWQoY2FsbGJhY2spe1xuXHRcdFx0cmVuZGVyZWQgPSBjYWxsYmFjaztcblx0XHR9XG5cdFx0XG5cdFx0aWYoIWNlbGwuY29sdW1uLm1vZHVsZXMuZWRpdC5ibG9ja2VkKXtcblx0XHRcdGlmKGUpe1xuXHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRhbGxvd0VkaXQgPSB0aGlzLmFsbG93RWRpdChjZWxsKTtcblx0XHRcdFxuXHRcdFx0aWYoYWxsb3dFZGl0IHx8IGZvcmNlRWRpdCl7XG5cdFx0XHRcdFxuXHRcdFx0XHRzZWxmLmNhbmNlbEVkaXQoKTtcblx0XHRcdFx0XG5cdFx0XHRcdHNlbGYuY3VycmVudENlbGwgPSBjZWxsO1xuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5mb2N1c1Njcm9sbEFkanVzdChjZWxsKTtcblx0XHRcdFx0XG5cdFx0XHRcdGNvbXBvbmVudCA9IGNlbGwuZ2V0Q29tcG9uZW50KCk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih0aGlzLm1vdXNlQ2xpY2spe1xuXHRcdFx0XHRcdHRoaXMubW91c2VDbGljayA9IGZhbHNlO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKGNlbGwuY29sdW1uLmRlZmluaXRpb24uY2VsbENsaWNrKXtcblx0XHRcdFx0XHRcdGNlbGwuY29sdW1uLmRlZmluaXRpb24uY2VsbENsaWNrLmNhbGwodGhpcy50YWJsZSwgZSwgY29tcG9uZW50KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGlmKGNlbGwuY29sdW1uLmRlZmluaXRpb24uY2VsbEVkaXRpbmcpe1xuXHRcdFx0XHRcdGNlbGwuY29sdW1uLmRlZmluaXRpb24uY2VsbEVkaXRpbmcuY2FsbCh0aGlzLnRhYmxlLCBjb21wb25lbnQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLmRpc3BhdGNoKFwiY2VsbC1lZGl0aW5nXCIsIGNlbGwpO1xuXHRcdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJjZWxsRWRpdGluZ1wiLCBjb21wb25lbnQpO1xuXHRcdFx0XHRcblx0XHRcdFx0cGFyYW1zID0gdHlwZW9mIGNlbGwuY29sdW1uLm1vZHVsZXMuZWRpdC5wYXJhbXMgPT09IFwiZnVuY3Rpb25cIiA/IGNlbGwuY29sdW1uLm1vZHVsZXMuZWRpdC5wYXJhbXMoY29tcG9uZW50KSA6IGNlbGwuY29sdW1uLm1vZHVsZXMuZWRpdC5wYXJhbXM7XG5cdFx0XHRcdFxuXHRcdFx0XHRjZWxsRWRpdG9yID0gY2VsbC5jb2x1bW4ubW9kdWxlcy5lZGl0LmVkaXRvci5jYWxsKHNlbGYsIGNvbXBvbmVudCwgb25SZW5kZXJlZCwgc3VjY2VzcywgY2FuY2VsLCBwYXJhbXMpO1xuXHRcdFx0XHRcblx0XHRcdFx0Ly9pZiBlZGl0b3IgcmV0dXJuZWQsIGFkZCB0byBET00sIGlmIGZhbHNlLCBhYm9ydCBlZGl0XG5cdFx0XHRcdGlmKHRoaXMuY3VycmVudENlbGwgJiYgY2VsbEVkaXRvciAhPT0gZmFsc2Upe1xuXHRcdFx0XHRcdGlmKGNlbGxFZGl0b3IgaW5zdGFuY2VvZiBOb2RlKXtcblx0XHRcdFx0XHRcdGVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1lZGl0aW5nXCIpO1xuXHRcdFx0XHRcdFx0Y2VsbC5yb3cuZ2V0RWxlbWVudCgpLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItZWRpdGluZ1wiKTtcblx0XHRcdFx0XHRcdGNlbGwudGFibGUuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWVkaXRpbmdcIik7XG5cdFx0XHRcdFx0XHR3aGlsZShlbGVtZW50LmZpcnN0Q2hpbGQpIGVsZW1lbnQucmVtb3ZlQ2hpbGQoZWxlbWVudC5maXJzdENoaWxkKTtcblx0XHRcdFx0XHRcdGVsZW1lbnQuYXBwZW5kQ2hpbGQoY2VsbEVkaXRvcik7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdC8vdHJpZ2dlciBvblJlbmRlcmVkIENhbGxiYWNrXG5cdFx0XHRcdFx0XHRyZW5kZXJlZCgpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHQvL3ByZXZlbnQgZWRpdGluZyBmcm9tIHRyaWdnZXJpbmcgcm93Q2xpY2sgZXZlbnRcblx0XHRcdFx0XHRcdHZhciBjaGlsZHJlbiA9IGVsZW1lbnQuY2hpbGRyZW47XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRcdFx0Y2hpbGRyZW5baV0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRcdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybihcIkVkaXQgRXJyb3IgLSBFZGl0b3Igc2hvdWxkIHJldHVybiBhbiBpbnN0YW5jZSBvZiBOb2RlLCB0aGUgZWRpdG9yIHJldHVybmVkOlwiLCBjZWxsRWRpdG9yKTtcblx0XHRcdFx0XHRcdGVsZW1lbnQuYmx1cigpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGVsZW1lbnQuYmx1cigpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMubW91c2VDbGljayA9IGZhbHNlO1xuXHRcdFx0XHRlbGVtZW50LmJsdXIoKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMubW91c2VDbGljayA9IGZhbHNlO1xuXHRcdFx0ZWxlbWVudC5ibHVyKCk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cdFxuXHRnZXRFZGl0ZWRDZWxscygpe1xuXHRcdHZhciBvdXRwdXQgPSBbXTtcblx0XHRcblx0XHR0aGlzLmVkaXRlZENlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcblx0XHRcdG91dHB1dC5wdXNoKGNlbGwuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblx0XG5cdGNsZWFyRWRpdGVkKGNlbGwpe1xuXHRcdHZhciBlZGl0SW5kZXg7XG5cdFx0XG5cdFx0aWYoY2VsbC5tb2R1bGVzLmVkaXQgJiYgY2VsbC5tb2R1bGVzLmVkaXQuZWRpdGVkKXtcblx0XHRcdGNlbGwubW9kdWxlcy5lZGl0LmVkaXRlZCA9IGZhbHNlO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmRpc3BhdGNoKFwiZWRpdC1lZGl0ZWQtY2xlYXJcIiwgY2VsbCk7XG5cdFx0fVxuXHRcdFxuXHRcdGVkaXRJbmRleCA9IHRoaXMuZWRpdGVkQ2VsbHMuaW5kZXhPZihjZWxsKTtcblx0XHRcblx0XHRpZihlZGl0SW5kZXggPiAtMSl7XG5cdFx0XHR0aGlzLmVkaXRlZENlbGxzLnNwbGljZShlZGl0SW5kZXgsIDEpO1xuXHRcdH1cblx0fVxufVxuXG5FZGl0JDEubW9kdWxlTmFtZSA9IFwiZWRpdFwiO1xuXG4vL2xvYWQgZGVmYXVsdHNcbkVkaXQkMS5lZGl0b3JzID0gZGVmYXVsdEVkaXRvcnM7XG5cbmNsYXNzIEV4cG9ydFJvd3tcblx0Y29uc3RydWN0b3IodHlwZSwgY29sdW1ucywgY29tcG9uZW50LCBpbmRlbnQpe1xuXHRcdHRoaXMudHlwZSA9IHR5cGU7XG5cdFx0dGhpcy5jb2x1bW5zID0gY29sdW1ucztcblx0XHR0aGlzLmNvbXBvbmVudCA9IGNvbXBvbmVudCB8fCBmYWxzZTtcblx0XHR0aGlzLmluZGVudCA9IGluZGVudCB8fCAwO1xuXHR9XG59XG5cbmNsYXNzIEV4cG9ydENvbHVtbntcblx0Y29uc3RydWN0b3IodmFsdWUsIGNvbXBvbmVudCwgd2lkdGgsIGhlaWdodCwgZGVwdGgpe1xuXHRcdHRoaXMudmFsdWUgPSB2YWx1ZTtcblx0XHR0aGlzLmNvbXBvbmVudCA9IGNvbXBvbmVudCB8fCBmYWxzZTtcblx0XHR0aGlzLndpZHRoID0gd2lkdGg7XG5cdFx0dGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG5cdFx0dGhpcy5kZXB0aCA9IGRlcHRoO1xuXHR9XG59XG5cbmNsYXNzIEV4cG9ydCBleHRlbmRzIE1vZHVsZXtcblx0XG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cdFx0XG5cdFx0dGhpcy5jb25maWcgPSB7fTtcblx0XHR0aGlzLmNsb25lVGFibGVTdHlsZSA9IHRydWU7XG5cdFx0dGhpcy5jb2xWaXNQcm9wID0gXCJcIjtcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJodG1sT3V0cHV0Q29uZmlnXCIsIGZhbHNlKTsgLy9odG1sIG91dHB1dCBjb25maWdcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiaHRtbE91dHB1dFwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwidGl0bGVIdG1sT3V0cHV0XCIpO1xuXHR9XG5cdFxuXHRpbml0aWFsaXplKCl7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJnZXRIdG1sXCIsIHRoaXMuZ2V0SHRtbC5iaW5kKHRoaXMpKTtcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vIFRhYmxlIEZ1bmN0aW9ucyAvLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8gSW50ZXJuYWwgTG9naWMgLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0Z2VuZXJhdGVFeHBvcnRMaXN0KGNvbmZpZywgc3R5bGUsIHJhbmdlLCBjb2xWaXNQcm9wKXtcblx0XHR0aGlzLmNsb25lVGFibGVTdHlsZSA9IHN0eWxlO1xuXHRcdHRoaXMuY29uZmlnID0gY29uZmlnIHx8IHt9O1xuXHRcdHRoaXMuY29sVmlzUHJvcCA9IGNvbFZpc1Byb3A7XG5cdFx0XG5cdFx0dmFyIGhlYWRlcnMgPSB0aGlzLmNvbmZpZy5jb2x1bW5IZWFkZXJzICE9PSBmYWxzZSA/IHRoaXMuaGVhZGVyc1RvRXhwb3J0Um93cyh0aGlzLmdlbmVyYXRlQ29sdW1uR3JvdXBIZWFkZXJzKCkpIDogW107XG5cdFx0dmFyIGJvZHkgPSB0aGlzLmJvZHlUb0V4cG9ydFJvd3ModGhpcy5yb3dMb29rdXAocmFuZ2UpKTtcblx0XHRcblx0XHRyZXR1cm4gaGVhZGVycy5jb25jYXQoYm9keSk7XG5cdH1cblx0XG5cdGdlbmVyYXRlVGFibGUoY29uZmlnLCBzdHlsZSwgcmFuZ2UsIGNvbFZpc1Byb3Ape1xuXHRcdHZhciBsaXN0ID0gdGhpcy5nZW5lcmF0ZUV4cG9ydExpc3QoY29uZmlnLCBzdHlsZSwgcmFuZ2UsIGNvbFZpc1Byb3ApO1xuXHRcdFxuXHRcdHJldHVybiB0aGlzLmdlbmVyYXRlVGFibGVFbGVtZW50KGxpc3QpO1xuXHR9XG5cdFxuXHRyb3dMb29rdXAocmFuZ2Upe1xuXHRcdHZhciByb3dzID0gW107XG5cdFx0XG5cdFx0aWYodHlwZW9mIHJhbmdlID09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRyYW5nZS5jYWxsKHRoaXMudGFibGUpLmZvckVhY2goKHJvdykgPT57XG5cdFx0XHRcdHJvdyA9IHRoaXMudGFibGUucm93TWFuYWdlci5maW5kUm93KHJvdyk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihyb3cpe1xuXHRcdFx0XHRcdHJvd3MucHVzaChyb3cpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRzd2l0Y2gocmFuZ2Upe1xuXHRcdFx0XHRjYXNlIHRydWU6XG5cdFx0XHRcdGNhc2UgXCJ2aXNpYmxlXCI6XG5cdFx0XHRcdFx0cm93cyA9IHRoaXMudGFibGUucm93TWFuYWdlci5nZXRWaXNpYmxlUm93cyhmYWxzZSwgdHJ1ZSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFxuXHRcdFx0XHRjYXNlIFwiYWxsXCI6XG5cdFx0XHRcdFx0cm93cyA9IHRoaXMudGFibGUucm93TWFuYWdlci5yb3dzO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcblx0XHRcdFx0Y2FzZSBcInNlbGVjdGVkXCI6XG5cdFx0XHRcdFx0cm93cyA9IHRoaXMudGFibGUubW9kdWxlcy5zZWxlY3RSb3cuc2VsZWN0ZWRSb3dzO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcblx0XHRcdFx0Y2FzZSBcImFjdGl2ZVwiOlxuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5wYWdpbmF0aW9uKXtcblx0XHRcdFx0XHRcdHJvd3MgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0RGlzcGxheVJvd3ModGhpcy50YWJsZS5yb3dNYW5hZ2VyLmRpc3BsYXlSb3dzLmxlbmd0aCAtIDIpO1xuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdHJvd3MgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0RGlzcGxheVJvd3MoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBPYmplY3QuYXNzaWduKFtdLCByb3dzKTtcblx0fVxuXHRcblx0Z2VuZXJhdGVDb2x1bW5Hcm91cEhlYWRlcnMoKXtcblx0XHR2YXIgb3V0cHV0ID0gW107XG5cdFx0XG5cdFx0dmFyIGNvbHVtbnMgPSB0aGlzLmNvbmZpZy5jb2x1bW5Hcm91cHMgIT09IGZhbHNlID8gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmNvbHVtbnMgOiB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuY29sdW1uc0J5SW5kZXg7XG5cdFx0XG5cdFx0Y29sdW1ucy5mb3JFYWNoKChjb2x1bW4pID0+IHtcblx0XHRcdHZhciBjb2xEYXRhID0gdGhpcy5wcm9jZXNzQ29sdW1uR3JvdXAoY29sdW1uKTtcblx0XHRcdFxuXHRcdFx0aWYoY29sRGF0YSl7XG5cdFx0XHRcdG91dHB1dC5wdXNoKGNvbERhdGEpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblx0XG5cdHByb2Nlc3NDb2x1bW5Hcm91cChjb2x1bW4pe1xuXHRcdHZhciBzdWJHcm91cHMgPSBjb2x1bW4uY29sdW1ucyxcblx0XHRtYXhEZXB0aCA9IDAsXG5cdFx0dGl0bGUgPSBjb2x1bW4uZGVmaW5pdGlvbltcInRpdGxlXCIgKyAodGhpcy5jb2xWaXNQcm9wLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdGhpcy5jb2xWaXNQcm9wLnNsaWNlKDEpKV0gfHwgY29sdW1uLmRlZmluaXRpb24udGl0bGU7XG5cdFx0XG5cdFx0dmFyIGdyb3VwRGF0YSA9IHtcblx0XHRcdHRpdGxlOnRpdGxlLFxuXHRcdFx0Y29sdW1uOmNvbHVtbixcblx0XHRcdGRlcHRoOjEsXG5cdFx0fTtcblx0XHRcblx0XHRpZihzdWJHcm91cHMubGVuZ3RoKXtcblx0XHRcdGdyb3VwRGF0YS5zdWJHcm91cHMgPSBbXTtcblx0XHRcdGdyb3VwRGF0YS53aWR0aCA9IDA7XG5cdFx0XHRcblx0XHRcdHN1Ykdyb3Vwcy5mb3JFYWNoKChzdWJHcm91cCkgPT4ge1xuXHRcdFx0XHR2YXIgc3ViR3JvdXBEYXRhID0gdGhpcy5wcm9jZXNzQ29sdW1uR3JvdXAoc3ViR3JvdXApO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoc3ViR3JvdXBEYXRhKXtcblx0XHRcdFx0XHRncm91cERhdGEud2lkdGggKz0gc3ViR3JvdXBEYXRhLndpZHRoO1xuXHRcdFx0XHRcdGdyb3VwRGF0YS5zdWJHcm91cHMucHVzaChzdWJHcm91cERhdGEpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKHN1Ykdyb3VwRGF0YS5kZXB0aCA+IG1heERlcHRoKXtcblx0XHRcdFx0XHRcdG1heERlcHRoID0gc3ViR3JvdXBEYXRhLmRlcHRoO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdGdyb3VwRGF0YS5kZXB0aCArPSBtYXhEZXB0aDtcblx0XHRcdFxuXHRcdFx0aWYoIWdyb3VwRGF0YS53aWR0aCl7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRpZih0aGlzLmNvbHVtblZpc0NoZWNrKGNvbHVtbikpe1xuXHRcdFx0XHRncm91cERhdGEud2lkdGggPSAxO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBncm91cERhdGE7XG5cdH1cblx0XG5cdGNvbHVtblZpc0NoZWNrKGNvbHVtbil7XG5cdFx0dmFyIHZpc1Byb3AgPSBjb2x1bW4uZGVmaW5pdGlvblt0aGlzLmNvbFZpc1Byb3BdO1xuXHRcdFxuXHRcdGlmKHR5cGVvZiB2aXNQcm9wID09PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0dmlzUHJvcCA9IHZpc1Byb3AuY2FsbCh0aGlzLnRhYmxlLCBjb2x1bW4uZ2V0Q29tcG9uZW50KCkpO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gdmlzUHJvcCAhPT0gZmFsc2UgJiYgKGNvbHVtbi52aXNpYmxlIHx8ICghY29sdW1uLnZpc2libGUgJiYgdmlzUHJvcCkpO1xuXHR9XG5cdFxuXHRoZWFkZXJzVG9FeHBvcnRSb3dzKGNvbHVtbnMpe1xuXHRcdHZhciBoZWFkZXJzID0gW10sXG5cdFx0aGVhZGVyRGVwdGggPSAwLFxuXHRcdGV4cG9ydFJvd3MgPSBbXTtcblx0XHRcblx0XHRmdW5jdGlvbiBwYXJzZUNvbHVtbkdyb3VwKGNvbHVtbiwgbGV2ZWwpe1xuXHRcdFx0XG5cdFx0XHR2YXIgZGVwdGggPSBoZWFkZXJEZXB0aCAtIGxldmVsO1xuXHRcdFx0XG5cdFx0XHRpZih0eXBlb2YgaGVhZGVyc1tsZXZlbF0gPT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0XHRoZWFkZXJzW2xldmVsXSA9IFtdO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRjb2x1bW4uaGVpZ2h0ID0gY29sdW1uLnN1Ykdyb3VwcyA/IDEgOiAoZGVwdGggLSBjb2x1bW4uZGVwdGgpICsgMTtcblx0XHRcdFxuXHRcdFx0aGVhZGVyc1tsZXZlbF0ucHVzaChjb2x1bW4pO1xuXHRcdFx0XG5cdFx0XHRpZihjb2x1bW4uaGVpZ2h0ID4gMSl7XG5cdFx0XHRcdGZvcihsZXQgaSA9IDE7IGkgPCBjb2x1bW4uaGVpZ2h0OyBpICsrKXtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZih0eXBlb2YgaGVhZGVyc1tsZXZlbCArIGldID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdFx0XHRcdGhlYWRlcnNbbGV2ZWwgKyBpXSA9IFtdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHRoZWFkZXJzW2xldmVsICsgaV0ucHVzaChmYWxzZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoY29sdW1uLndpZHRoID4gMSl7XG5cdFx0XHRcdGZvcihsZXQgaSA9IDE7IGkgPCBjb2x1bW4ud2lkdGg7IGkgKyspe1xuXHRcdFx0XHRcdGhlYWRlcnNbbGV2ZWxdLnB1c2goZmFsc2UpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKGNvbHVtbi5zdWJHcm91cHMpe1xuXHRcdFx0XHRjb2x1bW4uc3ViR3JvdXBzLmZvckVhY2goZnVuY3Rpb24oc3ViR3JvdXApe1xuXHRcdFx0XHRcdHBhcnNlQ29sdW1uR3JvdXAoc3ViR3JvdXAsIGxldmVsKzEpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0Ly9jYWxjdWxhdGUgbWF4aW11bSBoZWFkZXIgZGVwdGhcblx0XHRjb2x1bW5zLmZvckVhY2goZnVuY3Rpb24oY29sdW1uKXtcblx0XHRcdGlmKGNvbHVtbi5kZXB0aCA+IGhlYWRlckRlcHRoKXtcblx0XHRcdFx0aGVhZGVyRGVwdGggPSBjb2x1bW4uZGVwdGg7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0Y29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uKGNvbHVtbil7XG5cdFx0XHRwYXJzZUNvbHVtbkdyb3VwKGNvbHVtbiwwKTtcblx0XHR9KTtcblx0XHRcblx0XHRoZWFkZXJzLmZvckVhY2goKGhlYWRlcikgPT4ge1xuXHRcdFx0dmFyIGNvbHVtbnMgPSBbXTtcblx0XHRcdFxuXHRcdFx0aGVhZGVyLmZvckVhY2goKGNvbCkgPT4ge1xuXHRcdFx0XHRpZihjb2wpe1xuXHRcdFx0XHRcdGxldCB0aXRsZSA9IHR5cGVvZiBjb2wudGl0bGUgPT09IFwidW5kZWZpbmVkXCIgPyBcIlwiIDogY29sLnRpdGxlO1xuXHRcdFx0XHRcdGNvbHVtbnMucHVzaChuZXcgRXhwb3J0Q29sdW1uKHRpdGxlLCBjb2wuY29sdW1uLmdldENvbXBvbmVudCgpLCBjb2wud2lkdGgsIGNvbC5oZWlnaHQsIGNvbC5kZXB0aCkpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0Y29sdW1ucy5wdXNoKG51bGwpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0ZXhwb3J0Um93cy5wdXNoKG5ldyBFeHBvcnRSb3coXCJoZWFkZXJcIiwgY29sdW1ucykpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiBleHBvcnRSb3dzO1xuXHR9XG5cdFxuXHRib2R5VG9FeHBvcnRSb3dzKHJvd3Mpe1xuXHRcdFxuXHRcdHZhciBjb2x1bW5zID0gW107XG5cdFx0dmFyIGV4cG9ydFJvd3MgPSBbXTtcblx0XHRcblx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuY29sdW1uc0J5SW5kZXguZm9yRWFjaCgoY29sdW1uKSA9PiB7XG5cdFx0XHRpZiAodGhpcy5jb2x1bW5WaXNDaGVjayhjb2x1bW4pKSB7XG5cdFx0XHRcdGNvbHVtbnMucHVzaChjb2x1bW4uZ2V0Q29tcG9uZW50KCkpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdGlmKHRoaXMuY29uZmlnLmNvbHVtbkNhbGNzICE9PSBmYWxzZSAmJiB0aGlzLnRhYmxlLm1vZEV4aXN0cyhcImNvbHVtbkNhbGNzXCIpKXtcblx0XHRcdGlmKHRoaXMudGFibGUubW9kdWxlcy5jb2x1bW5DYWxjcy50b3BJbml0aWFsaXplZCl7XG5cdFx0XHRcdHJvd3MudW5zaGlmdCh0aGlzLnRhYmxlLm1vZHVsZXMuY29sdW1uQ2FsY3MudG9wUm93KTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYodGhpcy50YWJsZS5tb2R1bGVzLmNvbHVtbkNhbGNzLmJvdEluaXRpYWxpemVkKXtcblx0XHRcdFx0cm93cy5wdXNoKHRoaXMudGFibGUubW9kdWxlcy5jb2x1bW5DYWxjcy5ib3RSb3cpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRyb3dzID0gcm93cy5maWx0ZXIoKHJvdykgPT4ge1xuXHRcdFx0c3dpdGNoKHJvdy50eXBlKXtcblx0XHRcdFx0Y2FzZSBcImdyb3VwXCI6XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuY29uZmlnLnJvd0dyb3VwcyAhPT0gZmFsc2U7XG5cdFx0XHRcdFxuXHRcdFx0XHRjYXNlIFwiY2FsY1wiOlxuXHRcdFx0XHRcdHJldHVybiB0aGlzLmNvbmZpZy5jb2x1bW5DYWxjcyAhPT0gZmFsc2U7XG5cdFx0XHRcdFxuXHRcdFx0XHRjYXNlIFwicm93XCI6XG5cdFx0XHRcdFx0cmV0dXJuICEodGhpcy50YWJsZS5vcHRpb25zLmRhdGFUcmVlICYmIHRoaXMuY29uZmlnLmRhdGFUcmVlID09PSBmYWxzZSAmJiByb3cubW9kdWxlcy5kYXRhVHJlZS5wYXJlbnQpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9KTtcblx0XHRcblx0XHRyb3dzLmZvckVhY2goKHJvdywgaSkgPT4ge1xuXHRcdFx0dmFyIHJvd0RhdGEgPSByb3cuZ2V0RGF0YSh0aGlzLmNvbFZpc1Byb3ApO1xuXHRcdFx0dmFyIGV4cG9ydENvbHMgPSBbXTtcblx0XHRcdHZhciBpbmRlbnQgPSAwO1xuXHRcdFx0XG5cdFx0XHRzd2l0Y2gocm93LnR5cGUpe1xuXHRcdFx0XHRjYXNlIFwiZ3JvdXBcIjpcblx0XHRcdFx0XHRpbmRlbnQgPSByb3cubGV2ZWw7XG5cdFx0XHRcdFx0ZXhwb3J0Q29scy5wdXNoKG5ldyBFeHBvcnRDb2x1bW4ocm93LmtleSwgcm93LmdldENvbXBvbmVudCgpLCBjb2x1bW5zLmxlbmd0aCwgMSkpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcblx0XHRcdFx0Y2FzZSBcImNhbGNcIiA6XG5cdFx0XHRcdGNhc2UgXCJyb3dcIiA6XG5cdFx0XHRcdFx0Y29sdW1ucy5mb3JFYWNoKChjb2wpID0+IHtcblx0XHRcdFx0XHRcdGV4cG9ydENvbHMucHVzaChuZXcgRXhwb3J0Q29sdW1uKGNvbC5fY29sdW1uLmdldEZpZWxkVmFsdWUocm93RGF0YSksIGNvbCwgMSwgMSkpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcblx0XHRcdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZGF0YVRyZWUgJiYgdGhpcy5jb25maWcuZGF0YVRyZWUgIT09IGZhbHNlKXtcblx0XHRcdFx0XHRcdGluZGVudCA9IHJvdy5tb2R1bGVzLmRhdGFUcmVlLmluZGV4O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0ZXhwb3J0Um93cy5wdXNoKG5ldyBFeHBvcnRSb3cocm93LnR5cGUsIGV4cG9ydENvbHMsIHJvdy5nZXRDb21wb25lbnQoKSwgaW5kZW50KSk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0cmV0dXJuIGV4cG9ydFJvd3M7XG5cdH1cblx0XG5cdGdlbmVyYXRlVGFibGVFbGVtZW50KGxpc3Qpe1xuXHRcdHZhciB0YWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0YWJsZVwiKSxcblx0XHRoZWFkZXJFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0aGVhZFwiKSxcblx0XHRib2R5RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGJvZHlcIiksXG5cdFx0c3R5bGVzID0gdGhpcy5sb29rdXBUYWJsZVN0eWxlcygpLFxuXHRcdHJvd0Zvcm1hdHRlciA9IHRoaXMudGFibGUub3B0aW9uc1tcInJvd0Zvcm1hdHRlclwiICsgKHRoaXMuY29sVmlzUHJvcC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHRoaXMuY29sVmlzUHJvcC5zbGljZSgxKSldLFxuXHRcdHNldHVwID0ge307XG5cdFx0XG5cdFx0c2V0dXAucm93Rm9ybWF0dGVyID0gcm93Rm9ybWF0dGVyICE9PSBudWxsID8gcm93Rm9ybWF0dGVyIDogdGhpcy50YWJsZS5vcHRpb25zLnJvd0Zvcm1hdHRlcjtcblx0XHRcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZGF0YVRyZWUgJiZ0aGlzLmNvbmZpZy5kYXRhVHJlZSAhPT0gZmFsc2UgJiYgdGhpcy50YWJsZS5tb2RFeGlzdHMoXCJjb2x1bW5DYWxjc1wiKSl7XG5cdFx0XHRzZXR1cC50cmVlRWxlbWVudEZpZWxkID0gdGhpcy50YWJsZS5tb2R1bGVzLmRhdGFUcmVlLmVsZW1lbnRGaWVsZDtcblx0XHR9XG5cdFx0XG5cdFx0Ly9hc3NpZ24gZ3JvdXAgaGVhZGVyIGZvcm1hdHRlclxuXHRcdHNldHVwLmdyb3VwSGVhZGVyID0gdGhpcy50YWJsZS5vcHRpb25zW1wiZ3JvdXBIZWFkZXJcIiArICh0aGlzLmNvbFZpc1Byb3AuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0aGlzLmNvbFZpc1Byb3Auc2xpY2UoMSkpXTtcblx0XHRcblx0XHRpZihzZXR1cC5ncm91cEhlYWRlciAmJiAhQXJyYXkuaXNBcnJheShzZXR1cC5ncm91cEhlYWRlcikpe1xuXHRcdFx0c2V0dXAuZ3JvdXBIZWFkZXIgPSBbc2V0dXAuZ3JvdXBIZWFkZXJdO1xuXHRcdH1cblx0XHRcblx0XHR0YWJsZS5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXByaW50LXRhYmxlXCIpO1xuXHRcdFxuXHRcdHRoaXMubWFwRWxlbWVudFN0eWxlcyh0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0SGVhZGVyc0VsZW1lbnQoKSwgaGVhZGVyRWwsIFtcImJvcmRlci10b3BcIiwgXCJib3JkZXItbGVmdFwiLCBcImJvcmRlci1yaWdodFwiLCBcImJvcmRlci1ib3R0b21cIiwgXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIFwiY29sb3JcIiwgXCJmb250LXdlaWdodFwiLCBcImZvbnQtZmFtaWx5XCIsIFwiZm9udC1zaXplXCJdKTtcblx0XHRcblx0XHRcblx0XHRpZihsaXN0Lmxlbmd0aCA+IDEwMDApe1xuXHRcdFx0Y29uc29sZS53YXJuKFwiSXQgbWF5IHRha2UgYSBsb25nIHRpbWUgdG8gcmVuZGVyIGFuIEhUTUwgdGFibGUgd2l0aCBtb3JlIHRoYW4gMTAwMCByb3dzXCIpO1xuXHRcdH1cblx0XHRcblx0XHRsaXN0LmZvckVhY2goKHJvdywgaSkgPT4ge1xuXHRcdFx0bGV0IHJvd0VsO1xuXHRcdFx0XG5cdFx0XHRzd2l0Y2gocm93LnR5cGUpe1xuXHRcdFx0XHRjYXNlIFwiaGVhZGVyXCI6XG5cdFx0XHRcdFx0aGVhZGVyRWwuYXBwZW5kQ2hpbGQodGhpcy5nZW5lcmF0ZUhlYWRlckVsZW1lbnQocm93LCBzZXR1cCwgc3R5bGVzKSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFxuXHRcdFx0XHRjYXNlIFwiZ3JvdXBcIjpcblx0XHRcdFx0XHRib2R5RWwuYXBwZW5kQ2hpbGQodGhpcy5nZW5lcmF0ZUdyb3VwRWxlbWVudChyb3csIHNldHVwLCBzdHlsZXMpKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XG5cdFx0XHRcdGNhc2UgXCJjYWxjXCI6XG5cdFx0XHRcdFx0Ym9keUVsLmFwcGVuZENoaWxkKHRoaXMuZ2VuZXJhdGVDYWxjRWxlbWVudChyb3csIHNldHVwLCBzdHlsZXMpKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XG5cdFx0XHRcdGNhc2UgXCJyb3dcIjpcblx0XHRcdFx0XHRyb3dFbCA9IHRoaXMuZ2VuZXJhdGVSb3dFbGVtZW50KHJvdywgc2V0dXAsIHN0eWxlcyk7XG5cdFx0XHRcdFxuXHRcdFx0XHRcdHRoaXMubWFwRWxlbWVudFN0eWxlcygoKGkgJSAyKSAmJiBzdHlsZXMuZXZlblJvdykgPyBzdHlsZXMuZXZlblJvdyA6IHN0eWxlcy5vZGRSb3csIHJvd0VsLCBbXCJib3JkZXItdG9wXCIsIFwiYm9yZGVyLWxlZnRcIiwgXCJib3JkZXItcmlnaHRcIiwgXCJib3JkZXItYm90dG9tXCIsIFwiY29sb3JcIiwgXCJmb250LXdlaWdodFwiLCBcImZvbnQtZmFtaWx5XCIsIFwiZm9udC1zaXplXCIsIFwiYmFja2dyb3VuZC1jb2xvclwiXSk7XG5cdFx0XHRcdFx0Ym9keUVsLmFwcGVuZENoaWxkKHJvd0VsKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0XHRpZihoZWFkZXJFbC5pbm5lckhUTUwpe1xuXHRcdFx0dGFibGUuYXBwZW5kQ2hpbGQoaGVhZGVyRWwpO1xuXHRcdH1cblx0XHRcblx0XHR0YWJsZS5hcHBlbmRDaGlsZChib2R5RWwpO1xuXHRcdFxuXHRcdFxuXHRcdHRoaXMubWFwRWxlbWVudFN0eWxlcyh0aGlzLnRhYmxlLmVsZW1lbnQsIHRhYmxlLCBbXCJib3JkZXItdG9wXCIsIFwiYm9yZGVyLWxlZnRcIiwgXCJib3JkZXItcmlnaHRcIiwgXCJib3JkZXItYm90dG9tXCJdKTtcblx0XHRyZXR1cm4gdGFibGU7XG5cdH1cblx0XG5cdGxvb2t1cFRhYmxlU3R5bGVzKCl7XG5cdFx0dmFyIHN0eWxlcyA9IHt9O1xuXHRcdFxuXHRcdC8vbG9va3VwIHJvdyBzdHlsZXNcblx0XHRpZih0aGlzLmNsb25lVGFibGVTdHlsZSAmJiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSl7XG5cdFx0XHRzdHlsZXMub2RkUm93ID0gdGhpcy50YWJsZS5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudGFidWxhdG9yLXJvdy1vZGQ6bm90KC50YWJ1bGF0b3ItZ3JvdXApOm5vdCgudGFidWxhdG9yLWNhbGNzKVwiKTtcblx0XHRcdHN0eWxlcy5ldmVuUm93ID0gdGhpcy50YWJsZS5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudGFidWxhdG9yLXJvdy1ldmVuOm5vdCgudGFidWxhdG9yLWdyb3VwKTpub3QoLnRhYnVsYXRvci1jYWxjcylcIik7XG5cdFx0XHRzdHlsZXMuY2FsY1JvdyA9IHRoaXMudGFibGUuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLWNhbGNzXCIpO1xuXHRcdFx0c3R5bGVzLmZpcnN0Um93ID0gdGhpcy50YWJsZS5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudGFidWxhdG9yLXJvdzpub3QoLnRhYnVsYXRvci1ncm91cCk6bm90KC50YWJ1bGF0b3ItY2FsY3MpXCIpO1xuXHRcdFx0c3R5bGVzLmZpcnN0R3JvdXAgPSB0aGlzLnRhYmxlLmVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInRhYnVsYXRvci1ncm91cFwiKVswXTtcblx0XHRcdFxuXHRcdFx0aWYoc3R5bGVzLmZpcnN0Um93KXtcblx0XHRcdFx0c3R5bGVzLnN0eWxlQ2VsbHMgPSBzdHlsZXMuZmlyc3RSb3cuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInRhYnVsYXRvci1jZWxsXCIpO1xuXHRcdFx0XHRzdHlsZXMuZmlyc3RDZWxsID0gc3R5bGVzLnN0eWxlQ2VsbHNbMF07XG5cdFx0XHRcdHN0eWxlcy5sYXN0Q2VsbCA9IHN0eWxlcy5zdHlsZUNlbGxzW3N0eWxlcy5zdHlsZUNlbGxzLmxlbmd0aCAtIDFdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gc3R5bGVzO1xuXHR9XG5cdFxuXHRnZW5lcmF0ZUhlYWRlckVsZW1lbnQocm93LCBzZXR1cCwgc3R5bGVzKXtcblx0XHR2YXIgcm93RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidHJcIik7XG5cdFx0XG5cdFx0cm93LmNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG5cdFx0XHRpZihjb2x1bW4pe1xuXHRcdFx0XHR2YXIgY2VsbEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRoXCIpO1xuXHRcdFx0XHR2YXIgY2xhc3NOYW1lcyA9IGNvbHVtbi5jb21wb25lbnQuX2NvbHVtbi5kZWZpbml0aW9uLmNzc0NsYXNzID8gY29sdW1uLmNvbXBvbmVudC5fY29sdW1uLmRlZmluaXRpb24uY3NzQ2xhc3Muc3BsaXQoXCIgXCIpIDogW107XG5cdFx0XHRcdFxuXHRcdFx0XHRjZWxsRWwuY29sU3BhbiA9IGNvbHVtbi53aWR0aDtcblx0XHRcdFx0Y2VsbEVsLnJvd1NwYW4gPSBjb2x1bW4uaGVpZ2h0O1xuXHRcdFx0XHRcblx0XHRcdFx0Y2VsbEVsLmlubmVySFRNTCA9IGNvbHVtbi52YWx1ZTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKHRoaXMuY2xvbmVUYWJsZVN0eWxlKXtcblx0XHRcdFx0XHRjZWxsRWwuc3R5bGUuYm94U2l6aW5nID0gXCJib3JkZXItYm94XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGNsYXNzTmFtZXMuZm9yRWFjaChmdW5jdGlvbihjbGFzc05hbWUpIHtcblx0XHRcdFx0XHRjZWxsRWwuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMubWFwRWxlbWVudFN0eWxlcyhjb2x1bW4uY29tcG9uZW50LmdldEVsZW1lbnQoKSwgY2VsbEVsLCBbXCJ0ZXh0LWFsaWduXCIsIFwiYm9yZGVyLXRvcFwiLCBcImJvcmRlci1sZWZ0XCIsIFwiYm9yZGVyLXJpZ2h0XCIsIFwiYm9yZGVyLWJvdHRvbVwiLCBcImJhY2tncm91bmQtY29sb3JcIiwgXCJjb2xvclwiLCBcImZvbnQtd2VpZ2h0XCIsIFwiZm9udC1mYW1pbHlcIiwgXCJmb250LXNpemVcIl0pO1xuXHRcdFx0XHR0aGlzLm1hcEVsZW1lbnRTdHlsZXMoY29sdW1uLmNvbXBvbmVudC5fY29sdW1uLmNvbnRlbnRFbGVtZW50LCBjZWxsRWwsIFtcInBhZGRpbmctdG9wXCIsIFwicGFkZGluZy1sZWZ0XCIsIFwicGFkZGluZy1yaWdodFwiLCBcInBhZGRpbmctYm90dG9tXCJdKTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKGNvbHVtbi5jb21wb25lbnQuX2NvbHVtbi52aXNpYmxlKXtcblx0XHRcdFx0XHR0aGlzLm1hcEVsZW1lbnRTdHlsZXMoY29sdW1uLmNvbXBvbmVudC5nZXRFbGVtZW50KCksIGNlbGxFbCwgW1wid2lkdGhcIl0pO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0aWYoY29sdW1uLmNvbXBvbmVudC5fY29sdW1uLmRlZmluaXRpb24ud2lkdGgpe1xuXHRcdFx0XHRcdFx0Y2VsbEVsLnN0eWxlLndpZHRoID0gY29sdW1uLmNvbXBvbmVudC5fY29sdW1uLmRlZmluaXRpb24ud2lkdGggKyBcInB4XCI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihjb2x1bW4uY29tcG9uZW50Ll9jb2x1bW4ucGFyZW50KXtcblx0XHRcdFx0XHR0aGlzLm1hcEVsZW1lbnRTdHlsZXMoY29sdW1uLmNvbXBvbmVudC5fY29sdW1uLnBhcmVudC5ncm91cEVsZW1lbnQsIGNlbGxFbCwgW1wiYm9yZGVyLXRvcFwiXSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdHJvd0VsLmFwcGVuZENoaWxkKGNlbGxFbCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0cmV0dXJuIHJvd0VsO1xuXHR9XG5cdFxuXHRnZW5lcmF0ZUdyb3VwRWxlbWVudChyb3csIHNldHVwLCBzdHlsZXMpe1xuXHRcdFxuXHRcdHZhciByb3dFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0clwiKSxcblx0XHRjZWxsRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIiksXG5cdFx0Z3JvdXAgPSByb3cuY29sdW1uc1swXTtcblx0XHRcblx0XHRyb3dFbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXByaW50LXRhYmxlLXJvd1wiKTtcblx0XHRcblx0XHRpZihzZXR1cC5ncm91cEhlYWRlciAmJiBzZXR1cC5ncm91cEhlYWRlcltyb3cuaW5kZW50XSl7XG5cdFx0XHRncm91cC52YWx1ZSA9IHNldHVwLmdyb3VwSGVhZGVyW3Jvdy5pbmRlbnRdKGdyb3VwLnZhbHVlLCByb3cuY29tcG9uZW50Ll9ncm91cC5nZXRSb3dDb3VudCgpLCByb3cuY29tcG9uZW50Ll9ncm91cC5nZXREYXRhKCksIHJvdy5jb21wb25lbnQpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGlmKHNldHVwLmdyb3VwSGVhZGVyICE9PSBmYWxzZSl7XG5cdFx0XHRcdGdyb3VwLnZhbHVlID0gcm93LmNvbXBvbmVudC5fZ3JvdXAuZ2VuZXJhdG9yKGdyb3VwLnZhbHVlLCByb3cuY29tcG9uZW50Ll9ncm91cC5nZXRSb3dDb3VudCgpLCByb3cuY29tcG9uZW50Ll9ncm91cC5nZXREYXRhKCksIHJvdy5jb21wb25lbnQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRjZWxsRWwuY29sU3BhbiA9IGdyb3VwLndpZHRoO1xuXHRcdGNlbGxFbC5pbm5lckhUTUwgPSBncm91cC52YWx1ZTtcblx0XHRcblx0XHRyb3dFbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXByaW50LXRhYmxlLWdyb3VwXCIpO1xuXHRcdHJvd0VsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItZ3JvdXAtbGV2ZWwtXCIgKyByb3cuaW5kZW50KTtcblx0XHRcblx0XHRpZihncm91cC5jb21wb25lbnQuaXNWaXNpYmxlKCkpe1xuXHRcdFx0cm93RWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1ncm91cC12aXNpYmxlXCIpO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLm1hcEVsZW1lbnRTdHlsZXMoc3R5bGVzLmZpcnN0R3JvdXAsIHJvd0VsLCBbXCJib3JkZXItdG9wXCIsIFwiYm9yZGVyLWxlZnRcIiwgXCJib3JkZXItcmlnaHRcIiwgXCJib3JkZXItYm90dG9tXCIsIFwiY29sb3JcIiwgXCJmb250LXdlaWdodFwiLCBcImZvbnQtZmFtaWx5XCIsIFwiZm9udC1zaXplXCIsIFwiYmFja2dyb3VuZC1jb2xvclwiXSk7XG5cdFx0dGhpcy5tYXBFbGVtZW50U3R5bGVzKHN0eWxlcy5maXJzdEdyb3VwLCBjZWxsRWwsIFtcInBhZGRpbmctdG9wXCIsIFwicGFkZGluZy1sZWZ0XCIsIFwicGFkZGluZy1yaWdodFwiLCBcInBhZGRpbmctYm90dG9tXCJdKTtcblx0XHRcblx0XHRyb3dFbC5hcHBlbmRDaGlsZChjZWxsRWwpO1xuXHRcdFxuXHRcdHJldHVybiByb3dFbDtcblx0fVxuXHRcblx0Z2VuZXJhdGVDYWxjRWxlbWVudChyb3csIHNldHVwLCBzdHlsZXMpe1xuXHRcdHZhciByb3dFbCA9IHRoaXMuZ2VuZXJhdGVSb3dFbGVtZW50KHJvdywgc2V0dXAsIHN0eWxlcyk7XG5cdFx0XG5cdFx0cm93RWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1wcmludC10YWJsZS1jYWxjc1wiKTtcblx0XHR0aGlzLm1hcEVsZW1lbnRTdHlsZXMoc3R5bGVzLmNhbGNSb3csIHJvd0VsLCBbXCJib3JkZXItdG9wXCIsIFwiYm9yZGVyLWxlZnRcIiwgXCJib3JkZXItcmlnaHRcIiwgXCJib3JkZXItYm90dG9tXCIsIFwiY29sb3JcIiwgXCJmb250LXdlaWdodFwiLCBcImZvbnQtZmFtaWx5XCIsIFwiZm9udC1zaXplXCIsIFwiYmFja2dyb3VuZC1jb2xvclwiXSk7XG5cdFx0XG5cdFx0cmV0dXJuIHJvd0VsO1xuXHR9XG5cdFxuXHRnZW5lcmF0ZVJvd0VsZW1lbnQocm93LCBzZXR1cCwgc3R5bGVzKXtcblx0XHR2YXIgcm93RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidHJcIik7XG5cdFx0XG5cdFx0cm93RWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1wcmludC10YWJsZS1yb3dcIik7XG5cdFx0XG5cdFx0cm93LmNvbHVtbnMuZm9yRWFjaCgoY29sLCBpKSA9PiB7XG5cdFx0XHRpZihjb2wpe1xuXHRcdFx0XHR2YXIgY2VsbEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpLFxuXHRcdFx0XHRjb2x1bW4gPSBjb2wuY29tcG9uZW50Ll9jb2x1bW4sXG5cdFx0XHRcdGluZGV4ID0gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmZpbmRDb2x1bW5JbmRleChjb2x1bW4pLFxuXHRcdFx0XHR2YWx1ZSA9IGNvbC52YWx1ZSxcblx0XHRcdFx0Y2VsbFN0eWxlO1xuXHRcdFx0XHRcblx0XHRcdFx0dmFyIGNlbGxXcmFwcGVyID0ge1xuXHRcdFx0XHRcdG1vZHVsZXM6e30sXG5cdFx0XHRcdFx0Z2V0VmFsdWU6ZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGdldEZpZWxkOmZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRyZXR1cm4gY29sdW1uLmRlZmluaXRpb24uZmllbGQ7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRnZXRFbGVtZW50OmZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRyZXR1cm4gY2VsbEVsO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0Z2V0VHlwZTpmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0cmV0dXJuIFwiY2VsbFwiO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0Z2V0Q29sdW1uOmZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRyZXR1cm4gY29sdW1uLmdldENvbXBvbmVudCgpO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0Z2V0RGF0YTpmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJvdy5jb21wb25lbnQuZ2V0RGF0YSgpO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0Z2V0Um93OmZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcm93LmNvbXBvbmVudDtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGdldENvbXBvbmVudDpmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0cmV0dXJuIGNlbGxXcmFwcGVyO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0Y29sdW1uOmNvbHVtbixcblx0XHRcdFx0fTtcblx0XHRcdFx0XG5cdFx0XHRcdHZhciBjbGFzc05hbWVzID0gY29sdW1uLmRlZmluaXRpb24uY3NzQ2xhc3MgPyBjb2x1bW4uZGVmaW5pdGlvbi5jc3NDbGFzcy5zcGxpdChcIiBcIikgOiBbXTtcblx0XHRcdFx0XG5cdFx0XHRcdGNsYXNzTmFtZXMuZm9yRWFjaChmdW5jdGlvbihjbGFzc05hbWUpIHtcblx0XHRcdFx0XHRjZWxsRWwuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKHRoaXMudGFibGUubW9kRXhpc3RzKFwiZm9ybWF0XCIpICYmIHRoaXMuY29uZmlnLmZvcm1hdENlbGxzICE9PSBmYWxzZSl7XG5cdFx0XHRcdFx0dmFsdWUgPSB0aGlzLnRhYmxlLm1vZHVsZXMuZm9ybWF0LmZvcm1hdEV4cG9ydFZhbHVlKGNlbGxXcmFwcGVyLCB0aGlzLmNvbFZpc1Byb3ApO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0c3dpdGNoKHR5cGVvZiB2YWx1ZSl7XG5cdFx0XHRcdFx0XHRjYXNlIFwib2JqZWN0XCI6XG5cdFx0XHRcdFx0XHRcdHZhbHVlID0gdmFsdWUgIT09IG51bGwgPyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgOiBcIlwiO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0Y2FzZSBcInVuZGVmaW5lZFwiOlxuXHRcdFx0XHRcdFx0XHR2YWx1ZSA9IFwiXCI7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0aWYodmFsdWUgaW5zdGFuY2VvZiBOb2RlKXtcblx0XHRcdFx0XHRjZWxsRWwuYXBwZW5kQ2hpbGQodmFsdWUpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0Y2VsbEVsLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRjZWxsU3R5bGUgPSBzdHlsZXMuc3R5bGVDZWxscyAmJiBzdHlsZXMuc3R5bGVDZWxsc1tpbmRleF0gPyBzdHlsZXMuc3R5bGVDZWxsc1tpbmRleF0gOiBzdHlsZXMuZmlyc3RDZWxsO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoY2VsbFN0eWxlKXtcblx0XHRcdFx0XHR0aGlzLm1hcEVsZW1lbnRTdHlsZXMoY2VsbFN0eWxlLCBjZWxsRWwsIFtcInBhZGRpbmctdG9wXCIsIFwicGFkZGluZy1sZWZ0XCIsIFwicGFkZGluZy1yaWdodFwiLCBcInBhZGRpbmctYm90dG9tXCIsIFwiYm9yZGVyLXRvcFwiLCBcImJvcmRlci1sZWZ0XCIsIFwiYm9yZGVyLXJpZ2h0XCIsIFwiYm9yZGVyLWJvdHRvbVwiLCBcImNvbG9yXCIsIFwiZm9udC13ZWlnaHRcIiwgXCJmb250LWZhbWlseVwiLCBcImZvbnQtc2l6ZVwiLCBcInRleHQtYWxpZ25cIl0pO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKGNvbHVtbi5kZWZpbml0aW9uLmFsaWduKXtcblx0XHRcdFx0XHRcdGNlbGxFbC5zdHlsZS50ZXh0QWxpZ24gPSBjb2x1bW4uZGVmaW5pdGlvbi5hbGlnbjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5kYXRhVHJlZSAmJiB0aGlzLmNvbmZpZy5kYXRhVHJlZSAhPT0gZmFsc2Upe1xuXHRcdFx0XHRcdGlmKChzZXR1cC50cmVlRWxlbWVudEZpZWxkICYmIHNldHVwLnRyZWVFbGVtZW50RmllbGQgPT0gY29sdW1uLmZpZWxkKSB8fCAoIXNldHVwLnRyZWVFbGVtZW50RmllbGQgJiYgaSA9PSAwKSl7XG5cdFx0XHRcdFx0XHRpZihyb3cuY29tcG9uZW50Ll9yb3cubW9kdWxlcy5kYXRhVHJlZS5jb250cm9sRWwpe1xuXHRcdFx0XHRcdFx0XHRjZWxsRWwuaW5zZXJ0QmVmb3JlKHJvdy5jb21wb25lbnQuX3Jvdy5tb2R1bGVzLmRhdGFUcmVlLmNvbnRyb2xFbC5jbG9uZU5vZGUodHJ1ZSksIGNlbGxFbC5maXJzdENoaWxkKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmKHJvdy5jb21wb25lbnQuX3Jvdy5tb2R1bGVzLmRhdGFUcmVlLmJyYW5jaEVsKXtcblx0XHRcdFx0XHRcdFx0Y2VsbEVsLmluc2VydEJlZm9yZShyb3cuY29tcG9uZW50Ll9yb3cubW9kdWxlcy5kYXRhVHJlZS5icmFuY2hFbC5jbG9uZU5vZGUodHJ1ZSksIGNlbGxFbC5maXJzdENoaWxkKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdHJvd0VsLmFwcGVuZENoaWxkKGNlbGxFbCk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihjZWxsV3JhcHBlci5tb2R1bGVzLmZvcm1hdCAmJiBjZWxsV3JhcHBlci5tb2R1bGVzLmZvcm1hdC5yZW5kZXJlZENhbGxiYWNrKXtcblx0XHRcdFx0XHRjZWxsV3JhcHBlci5tb2R1bGVzLmZvcm1hdC5yZW5kZXJlZENhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0XHRpZihzZXR1cC5yb3dGb3JtYXR0ZXIgJiYgcm93LnR5cGUgPT09IFwicm93XCIgJiYgdGhpcy5jb25maWcuZm9ybWF0Q2VsbHMgIT09IGZhbHNlKXtcblx0XHRcdGxldCBmb3JtYXRDb21wb25lbnQgPSBPYmplY3QuYXNzaWduKHJvdy5jb21wb25lbnQpO1xuXG5cdFx0XHRmb3JtYXRDb21wb25lbnQuZ2V0RWxlbWVudCA9IGZ1bmN0aW9uKCl7cmV0dXJuIHJvd0VsO307XG5cblx0XHRcdHNldHVwLnJvd0Zvcm1hdHRlcihyb3cuY29tcG9uZW50KTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHJvd0VsO1xuXHR9XG5cdFxuXHRnZW5lcmF0ZUhUTUxUYWJsZShsaXN0KXtcblx0XHR2YXIgaG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcblx0XHRob2xkZXIuYXBwZW5kQ2hpbGQodGhpcy5nZW5lcmF0ZVRhYmxlRWxlbWVudChsaXN0KSk7XG5cdFx0XG5cdFx0cmV0dXJuIGhvbGRlci5pbm5lckhUTUw7XG5cdH1cblx0XG5cdGdldEh0bWwodmlzaWJsZSwgc3R5bGUsIGNvbmZpZywgY29sVmlzUHJvcCl7XG5cdFx0dmFyIGxpc3QgPSB0aGlzLmdlbmVyYXRlRXhwb3J0TGlzdChjb25maWcgfHwgdGhpcy50YWJsZS5vcHRpb25zLmh0bWxPdXRwdXRDb25maWcsIHN0eWxlLCB2aXNpYmxlLCBjb2xWaXNQcm9wIHx8IFwiaHRtbE91dHB1dFwiKTtcblx0XHRcblx0XHRyZXR1cm4gdGhpcy5nZW5lcmF0ZUhUTUxUYWJsZShsaXN0KTtcblx0fVxuXHRcblx0bWFwRWxlbWVudFN0eWxlcyhmcm9tLCB0bywgcHJvcHMpe1xuXHRcdGlmKHRoaXMuY2xvbmVUYWJsZVN0eWxlICYmIGZyb20gJiYgdG8pe1xuXHRcdFx0XG5cdFx0XHR2YXIgbG9va3VwID0ge1xuXHRcdFx0XHRcImJhY2tncm91bmQtY29sb3JcIiA6IFwiYmFja2dyb3VuZENvbG9yXCIsXG5cdFx0XHRcdFwiY29sb3JcIiA6IFwiZm9udENvbG9yXCIsXG5cdFx0XHRcdFwid2lkdGhcIiA6IFwid2lkdGhcIixcblx0XHRcdFx0XCJmb250LXdlaWdodFwiIDogXCJmb250V2VpZ2h0XCIsXG5cdFx0XHRcdFwiZm9udC1mYW1pbHlcIiA6IFwiZm9udEZhbWlseVwiLFxuXHRcdFx0XHRcImZvbnQtc2l6ZVwiIDogXCJmb250U2l6ZVwiLFxuXHRcdFx0XHRcInRleHQtYWxpZ25cIiA6IFwidGV4dEFsaWduXCIsXG5cdFx0XHRcdFwiYm9yZGVyLXRvcFwiIDogXCJib3JkZXJUb3BcIixcblx0XHRcdFx0XCJib3JkZXItbGVmdFwiIDogXCJib3JkZXJMZWZ0XCIsXG5cdFx0XHRcdFwiYm9yZGVyLXJpZ2h0XCIgOiBcImJvcmRlclJpZ2h0XCIsXG5cdFx0XHRcdFwiYm9yZGVyLWJvdHRvbVwiIDogXCJib3JkZXJCb3R0b21cIixcblx0XHRcdFx0XCJwYWRkaW5nLXRvcFwiIDogXCJwYWRkaW5nVG9wXCIsXG5cdFx0XHRcdFwicGFkZGluZy1sZWZ0XCIgOiBcInBhZGRpbmdMZWZ0XCIsXG5cdFx0XHRcdFwicGFkZGluZy1yaWdodFwiIDogXCJwYWRkaW5nUmlnaHRcIixcblx0XHRcdFx0XCJwYWRkaW5nLWJvdHRvbVwiIDogXCJwYWRkaW5nQm90dG9tXCIsXG5cdFx0XHR9O1xuXHRcdFx0XG5cdFx0XHRpZih3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSl7XG5cdFx0XHRcdHZhciBmcm9tU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShmcm9tKTtcblx0XHRcdFx0XG5cdFx0XHRcdHByb3BzLmZvckVhY2goZnVuY3Rpb24ocHJvcCl7XG5cdFx0XHRcdFx0aWYoIXRvLnN0eWxlW2xvb2t1cFtwcm9wXV0pe1xuXHRcdFx0XHRcdFx0dG8uc3R5bGVbbG9va3VwW3Byb3BdXSA9IGZyb21TdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKHByb3ApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbkV4cG9ydC5tb2R1bGVOYW1lID0gXCJleHBvcnRcIjtcblxudmFyIGRlZmF1bHRGaWx0ZXJzID0ge1xuXG5cdC8vZXF1YWwgdG9cblx0XCI9XCI6ZnVuY3Rpb24oZmlsdGVyVmFsLCByb3dWYWwsIHJvd0RhdGEsIGZpbHRlclBhcmFtcyl7XG5cdFx0cmV0dXJuIHJvd1ZhbCA9PSBmaWx0ZXJWYWwgPyB0cnVlIDogZmFsc2U7XG5cdH0sXG5cblx0Ly9sZXNzIHRoYW5cblx0XCI8XCI6ZnVuY3Rpb24oZmlsdGVyVmFsLCByb3dWYWwsIHJvd0RhdGEsIGZpbHRlclBhcmFtcyl7XG5cdFx0cmV0dXJuIHJvd1ZhbCA8IGZpbHRlclZhbCA/IHRydWUgOiBmYWxzZTtcblx0fSxcblxuXHQvL2xlc3MgdGhhbiBvciBlcXVhbCB0b1xuXHRcIjw9XCI6ZnVuY3Rpb24oZmlsdGVyVmFsLCByb3dWYWwsIHJvd0RhdGEsIGZpbHRlclBhcmFtcyl7XG5cdFx0cmV0dXJuIHJvd1ZhbCA8PSBmaWx0ZXJWYWwgPyB0cnVlIDogZmFsc2U7XG5cdH0sXG5cblx0Ly9ncmVhdGVyIHRoYW5cblx0XCI+XCI6ZnVuY3Rpb24oZmlsdGVyVmFsLCByb3dWYWwsIHJvd0RhdGEsIGZpbHRlclBhcmFtcyl7XG5cdFx0cmV0dXJuIHJvd1ZhbCA+IGZpbHRlclZhbCA/IHRydWUgOiBmYWxzZTtcblx0fSxcblxuXHQvL2dyZWF0ZXIgdGhhbiBvciBlcXVhbCB0b1xuXHRcIj49XCI6ZnVuY3Rpb24oZmlsdGVyVmFsLCByb3dWYWwsIHJvd0RhdGEsIGZpbHRlclBhcmFtcyl7XG5cdFx0cmV0dXJuIHJvd1ZhbCA+PSBmaWx0ZXJWYWwgPyB0cnVlIDogZmFsc2U7XG5cdH0sXG5cblx0Ly9ub3QgZXF1YWwgdG9cblx0XCIhPVwiOmZ1bmN0aW9uKGZpbHRlclZhbCwgcm93VmFsLCByb3dEYXRhLCBmaWx0ZXJQYXJhbXMpe1xuXHRcdHJldHVybiByb3dWYWwgIT0gZmlsdGVyVmFsID8gdHJ1ZSA6IGZhbHNlO1xuXHR9LFxuXG5cdFwicmVnZXhcIjpmdW5jdGlvbihmaWx0ZXJWYWwsIHJvd1ZhbCwgcm93RGF0YSwgZmlsdGVyUGFyYW1zKXtcblxuXHRcdGlmKHR5cGVvZiBmaWx0ZXJWYWwgPT0gXCJzdHJpbmdcIil7XG5cdFx0XHRmaWx0ZXJWYWwgPSBuZXcgUmVnRXhwKGZpbHRlclZhbCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZpbHRlclZhbC50ZXN0KHJvd1ZhbCk7XG5cdH0sXG5cblx0Ly9jb250YWlucyB0aGUgc3RyaW5nXG5cdFwibGlrZVwiOmZ1bmN0aW9uKGZpbHRlclZhbCwgcm93VmFsLCByb3dEYXRhLCBmaWx0ZXJQYXJhbXMpe1xuXHRcdGlmKGZpbHRlclZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgZmlsdGVyVmFsID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdHJldHVybiByb3dWYWwgPT09IGZpbHRlclZhbCA/IHRydWUgOiBmYWxzZTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRpZih0eXBlb2Ygcm93VmFsICE9PSAndW5kZWZpbmVkJyAmJiByb3dWYWwgIT09IG51bGwpe1xuXHRcdFx0XHRyZXR1cm4gU3RyaW5nKHJvd1ZhbCkudG9Mb3dlckNhc2UoKS5pbmRleE9mKGZpbHRlclZhbC50b0xvd2VyQ2FzZSgpKSA+IC0xO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly9jb250YWlucyB0aGUga2V5d29yZHNcblx0XCJrZXl3b3Jkc1wiOmZ1bmN0aW9uKGZpbHRlclZhbCwgcm93VmFsLCByb3dEYXRhLCBmaWx0ZXJQYXJhbXMpe1xuXHRcdHZhciBrZXl3b3JkcyA9IGZpbHRlclZhbC50b0xvd2VyQ2FzZSgpLnNwbGl0KHR5cGVvZiBmaWx0ZXJQYXJhbXMuc2VwYXJhdG9yID09PSBcInVuZGVmaW5lZFwiID8gXCIgXCIgOiBmaWx0ZXJQYXJhbXMuc2VwYXJhdG9yKSxcblx0XHR2YWx1ZSA9IFN0cmluZyhyb3dWYWwgPT09IG51bGwgfHwgdHlwZW9mIHJvd1ZhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwiXCIgOiByb3dWYWwpLnRvTG93ZXJDYXNlKCksXG5cdFx0bWF0Y2hlcyA9IFtdO1xuXG5cdFx0a2V5d29yZHMuZm9yRWFjaCgoa2V5d29yZCkgPT57XG5cdFx0XHRpZih2YWx1ZS5pbmNsdWRlcyhrZXl3b3JkKSl7XG5cdFx0XHRcdG1hdGNoZXMucHVzaCh0cnVlKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHJldHVybiBmaWx0ZXJQYXJhbXMubWF0Y2hBbGwgPyBtYXRjaGVzLmxlbmd0aCA9PT0ga2V5d29yZHMubGVuZ3RoIDogISFtYXRjaGVzLmxlbmd0aDtcblx0fSxcblxuXHQvL3N0YXJ0cyB3aXRoIHRoZSBzdHJpbmdcblx0XCJzdGFydHNcIjpmdW5jdGlvbihmaWx0ZXJWYWwsIHJvd1ZhbCwgcm93RGF0YSwgZmlsdGVyUGFyYW1zKXtcblx0XHRpZihmaWx0ZXJWYWwgPT09IG51bGwgfHwgdHlwZW9mIGZpbHRlclZhbCA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRyZXR1cm4gcm93VmFsID09PSBmaWx0ZXJWYWwgPyB0cnVlIDogZmFsc2U7XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYodHlwZW9mIHJvd1ZhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgcm93VmFsICE9PSBudWxsKXtcblx0XHRcdFx0cmV0dXJuIFN0cmluZyhyb3dWYWwpLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChmaWx0ZXJWYWwudG9Mb3dlckNhc2UoKSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvL2VuZHMgd2l0aCB0aGUgc3RyaW5nXG5cdFwiZW5kc1wiOmZ1bmN0aW9uKGZpbHRlclZhbCwgcm93VmFsLCByb3dEYXRhLCBmaWx0ZXJQYXJhbXMpe1xuXHRcdGlmKGZpbHRlclZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgZmlsdGVyVmFsID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdHJldHVybiByb3dWYWwgPT09IGZpbHRlclZhbCA/IHRydWUgOiBmYWxzZTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRpZih0eXBlb2Ygcm93VmFsICE9PSAndW5kZWZpbmVkJyAmJiByb3dWYWwgIT09IG51bGwpe1xuXHRcdFx0XHRyZXR1cm4gU3RyaW5nKHJvd1ZhbCkudG9Mb3dlckNhc2UoKS5lbmRzV2l0aChmaWx0ZXJWYWwudG9Mb3dlckNhc2UoKSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvL2luIGFycmF5XG5cdFwiaW5cIjpmdW5jdGlvbihmaWx0ZXJWYWwsIHJvd1ZhbCwgcm93RGF0YSwgZmlsdGVyUGFyYW1zKXtcblx0XHRpZihBcnJheS5pc0FycmF5KGZpbHRlclZhbCkpe1xuXHRcdFx0cmV0dXJuIGZpbHRlclZhbC5sZW5ndGggPyBmaWx0ZXJWYWwuaW5kZXhPZihyb3dWYWwpID4gLTEgOiB0cnVlO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkZpbHRlciBFcnJvciAtIGZpbHRlciB2YWx1ZSBpcyBub3QgYW4gYXJyYXk6XCIsIGZpbHRlclZhbCk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9LFxufTtcblxuY2xhc3MgRmlsdGVyIGV4dGVuZHMgTW9kdWxle1xuXG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cblx0XHR0aGlzLmZpbHRlckxpc3QgPSBbXTsgLy9ob2xkIGZpbHRlciBsaXN0XG5cdFx0dGhpcy5oZWFkZXJGaWx0ZXJzID0ge307IC8vaG9sZCBjb2x1bW4gZmlsdGVyc1xuXHRcdHRoaXMuaGVhZGVyRmlsdGVyQ29sdW1ucyA9IFtdOyAvL2hvbGQgY29sdW1ucyB0aGF0IHVzZSBoZWFkZXIgZmlsdGVyc1xuXG5cdFx0dGhpcy5wcmV2SGVhZGVyRmlsdGVyQ2hhbmdlQ2hlY2sgPSBcIlwiO1xuXHRcdHRoaXMucHJldkhlYWRlckZpbHRlckNoYW5nZUNoZWNrID0gXCJ7fVwiO1xuXG5cdFx0dGhpcy5jaGFuZ2VkID0gZmFsc2U7IC8vaGFzIGZpbHRlcmluZyBjaGFuZ2VkIHNpbmNlIGxhc3QgcmVuZGVyXG5cdFx0dGhpcy50YWJsZUluaXRpYWxpemVkID0gZmFsc2U7XG5cblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJmaWx0ZXJNb2RlXCIsIFwibG9jYWxcIik7IC8vbG9jYWwgb3IgcmVtb3RlIGZpbHRlcmluZ1xuXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiaW5pdGlhbEZpbHRlclwiLCBmYWxzZSk7IC8vaW5pdGlhbCBmaWx0ZXJpbmcgY3JpdGVyaWFcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJpbml0aWFsSGVhZGVyRmlsdGVyXCIsIGZhbHNlKTsgLy9pbml0aWFsIGhlYWRlciBmaWx0ZXJpbmcgY3JpdGVyaWFcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJoZWFkZXJGaWx0ZXJMaXZlRmlsdGVyRGVsYXlcIiwgMzAwKTsgLy9kZWxheSBiZWZvcmUgdXBkYXRpbmcgY29sdW1uIGFmdGVyIHVzZXIgdHlwZXMgaW4gaGVhZGVyIGZpbHRlclxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInBsYWNlaG9sZGVySGVhZGVyRmlsdGVyXCIsIGZhbHNlKTsgLy9wbGFjZWhvbGRlciB3aGVuIGhlYWRlciBmaWx0ZXIgaXMgZW1wdHlcblxuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJGaWx0ZXJcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImhlYWRlckZpbHRlclBsYWNlaG9sZGVyXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJGaWx0ZXJQYXJhbXNcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImhlYWRlckZpbHRlckVtcHR5Q2hlY2tcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImhlYWRlckZpbHRlckZ1bmNcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImhlYWRlckZpbHRlckZ1bmNQYXJhbXNcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImhlYWRlckZpbHRlckxpdmVGaWx0ZXJcIik7XG5cblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcInNlYXJjaFJvd3NcIiwgdGhpcy5zZWFyY2hSb3dzLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwic2VhcmNoRGF0YVwiLCB0aGlzLnNlYXJjaERhdGEuYmluZCh0aGlzKSk7XG5cblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcInNldEZpbHRlclwiLCB0aGlzLnVzZXJTZXRGaWx0ZXIuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJyZWZyZXNoRmlsdGVyXCIsIHRoaXMudXNlclJlZnJlc2hGaWx0ZXIuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJhZGRGaWx0ZXJcIiwgdGhpcy51c2VyQWRkRmlsdGVyLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiZ2V0RmlsdGVyc1wiLCB0aGlzLmdldEZpbHRlcnMuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJzZXRIZWFkZXJGaWx0ZXJGb2N1c1wiLCB0aGlzLnVzZXJTZXRIZWFkZXJGaWx0ZXJGb2N1cy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcImdldEhlYWRlckZpbHRlclZhbHVlXCIsIHRoaXMudXNlckdldEhlYWRlckZpbHRlclZhbHVlLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwic2V0SGVhZGVyRmlsdGVyVmFsdWVcIiwgdGhpcy51c2VyU2V0SGVhZGVyRmlsdGVyVmFsdWUuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJnZXRIZWFkZXJGaWx0ZXJzXCIsIHRoaXMuZ2V0SGVhZGVyRmlsdGVycy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcInJlbW92ZUZpbHRlclwiLCB0aGlzLnVzZXJSZW1vdmVGaWx0ZXIuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJjbGVhckZpbHRlclwiLCB0aGlzLnVzZXJDbGVhckZpbHRlci5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcImNsZWFySGVhZGVyRmlsdGVyXCIsIHRoaXMudXNlckNsZWFySGVhZGVyRmlsdGVyLmJpbmQodGhpcykpO1xuXG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwiY29sdW1uXCIsIFwiaGVhZGVyRmlsdGVyRm9jdXNcIiwgdGhpcy5zZXRIZWFkZXJGaWx0ZXJGb2N1cy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJjb2x1bW5cIiwgXCJyZWxvYWRIZWFkZXJGaWx0ZXJcIiwgdGhpcy5yZWxvYWRIZWFkZXJGaWx0ZXIuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwiY29sdW1uXCIsIFwiZ2V0SGVhZGVyRmlsdGVyVmFsdWVcIiwgdGhpcy5nZXRIZWFkZXJGaWx0ZXJWYWx1ZS5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJjb2x1bW5cIiwgXCJzZXRIZWFkZXJGaWx0ZXJWYWx1ZVwiLCB0aGlzLnNldEhlYWRlckZpbHRlclZhbHVlLmJpbmQodGhpcykpO1xuXHR9XG5cblx0aW5pdGlhbGl6ZSgpe1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWluaXRcIiwgdGhpcy5pbml0aWFsaXplQ29sdW1uSGVhZGVyRmlsdGVyLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLXdpZHRoLWZpdC1iZWZvcmVcIiwgdGhpcy5oaWRlSGVhZGVyRmlsdGVyRWxlbWVudHMuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4td2lkdGgtZml0LWFmdGVyXCIsIHRoaXMuc2hvd0hlYWRlckZpbHRlckVsZW1lbnRzLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwidGFibGUtYnVpbHRcIiwgdGhpcy50YWJsZUJ1aWx0LmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwicGxhY2Vob2xkZXJcIiwgdGhpcy5nZW5lcmF0ZVBsYWNlaG9sZGVyLmJpbmQodGhpcykpO1xuXG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmZpbHRlck1vZGUgPT09IFwicmVtb3RlXCIpe1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJkYXRhLXBhcmFtc1wiLCB0aGlzLnJlbW90ZUZpbHRlclBhcmFtcy5iaW5kKHRoaXMpKTtcblx0XHR9XG5cblx0XHR0aGlzLnJlZ2lzdGVyRGF0YUhhbmRsZXIodGhpcy5maWx0ZXIuYmluZCh0aGlzKSwgMTApO1xuXHR9XG5cblx0dGFibGVCdWlsdCgpe1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5pbml0aWFsRmlsdGVyKXtcblx0XHRcdHRoaXMuc2V0RmlsdGVyKHRoaXMudGFibGUub3B0aW9ucy5pbml0aWFsRmlsdGVyKTtcblx0XHR9XG5cblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuaW5pdGlhbEhlYWRlckZpbHRlcil7XG5cdFx0XHR0aGlzLnRhYmxlLm9wdGlvbnMuaW5pdGlhbEhlYWRlckZpbHRlci5mb3JFYWNoKChpdGVtKSA9PiB7XG5cblx0XHRcdFx0dmFyIGNvbHVtbiA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5maW5kQ29sdW1uKGl0ZW0uZmllbGQpO1xuXG5cdFx0XHRcdGlmKGNvbHVtbil7XG5cdFx0XHRcdFx0dGhpcy5zZXRIZWFkZXJGaWx0ZXJWYWx1ZShjb2x1bW4sIGl0ZW0udmFsdWUpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiQ29sdW1uIEZpbHRlciBFcnJvciAtIE5vIG1hdGNoaW5nIGNvbHVtbiBmb3VuZDpcIiwgaXRlbS5maWVsZCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHR0aGlzLnRhYmxlSW5pdGlhbGl6ZWQgPSB0cnVlO1xuXHR9XG5cblx0cmVtb3RlRmlsdGVyUGFyYW1zKGRhdGEsIGNvbmZpZywgc2lsZW50LCBwYXJhbXMpe1xuXHRcdHBhcmFtcy5maWx0ZXIgPSB0aGlzLmdldEZpbHRlcnModHJ1ZSwgdHJ1ZSk7XG5cdFx0cmV0dXJuIHBhcmFtcztcblx0fVxuXG5cdGdlbmVyYXRlUGxhY2Vob2xkZXIodGV4dCl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnBsYWNlaG9sZGVySGVhZGVyRmlsdGVyICYmIE9iamVjdC5rZXlzKHRoaXMuaGVhZGVyRmlsdGVycykubGVuZ3RoKXtcblx0XHRcdHJldHVybiB0aGlzLnRhYmxlLm9wdGlvbnMucGxhY2Vob2xkZXJIZWFkZXJGaWx0ZXI7XG5cdFx0fVxuXHR9XG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vIFRhYmxlIEZ1bmN0aW9ucyAvLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXHQvL3NldCBzdGFuZGFyZCBmaWx0ZXJzXG5cdHVzZXJTZXRGaWx0ZXIoZmllbGQsIHR5cGUsIHZhbHVlLCBwYXJhbXMpe1xuXHRcdHRoaXMuc2V0RmlsdGVyKGZpZWxkLCB0eXBlLCB2YWx1ZSwgcGFyYW1zKTtcblx0XHR0aGlzLnJlZnJlc2hGaWx0ZXIoKTtcblx0fVxuXG5cdC8vc2V0IHN0YW5kYXJkIGZpbHRlcnNcblx0dXNlclJlZnJlc2hGaWx0ZXIoKXtcblx0XHR0aGlzLnJlZnJlc2hGaWx0ZXIoKTtcblx0fVxuXG5cdC8vYWRkIGZpbHRlciB0byBhcnJheVxuXHR1c2VyQWRkRmlsdGVyKGZpZWxkLCB0eXBlLCB2YWx1ZSwgcGFyYW1zKXtcblx0XHR0aGlzLmFkZEZpbHRlcihmaWVsZCwgdHlwZSwgdmFsdWUsIHBhcmFtcyk7XG5cdFx0dGhpcy5yZWZyZXNoRmlsdGVyKCk7XG5cdH1cblxuXHR1c2VyU2V0SGVhZGVyRmlsdGVyRm9jdXMoZmllbGQpe1xuXHRcdHZhciBjb2x1bW4gPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZmluZENvbHVtbihmaWVsZCk7XG5cblx0XHRpZihjb2x1bW4pe1xuXHRcdFx0dGhpcy5zZXRIZWFkZXJGaWx0ZXJGb2N1cyhjb2x1bW4pO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkNvbHVtbiBGaWx0ZXIgRm9jdXMgRXJyb3IgLSBObyBtYXRjaGluZyBjb2x1bW4gZm91bmQ6XCIsIGZpZWxkKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblxuXHR1c2VyR2V0SGVhZGVyRmlsdGVyVmFsdWUoZmllbGQpIHtcblx0XHR2YXIgY29sdW1uID0gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmZpbmRDb2x1bW4oZmllbGQpO1xuXG5cdFx0aWYoY29sdW1uKXtcblx0XHRcdHJldHVybiB0aGlzLmdldEhlYWRlckZpbHRlclZhbHVlKGNvbHVtbik7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiQ29sdW1uIEZpbHRlciBFcnJvciAtIE5vIG1hdGNoaW5nIGNvbHVtbiBmb3VuZDpcIiwgZmllbGQpO1xuXHRcdH1cblx0fVxuXG5cdHVzZXJTZXRIZWFkZXJGaWx0ZXJWYWx1ZShmaWVsZCwgdmFsdWUpe1xuXHRcdHZhciBjb2x1bW4gPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZmluZENvbHVtbihmaWVsZCk7XG5cblx0XHRpZihjb2x1bW4pe1xuXHRcdFx0dGhpcy5zZXRIZWFkZXJGaWx0ZXJWYWx1ZShjb2x1bW4sIHZhbHVlKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJDb2x1bW4gRmlsdGVyIEVycm9yIC0gTm8gbWF0Y2hpbmcgY29sdW1uIGZvdW5kOlwiLCBmaWVsZCk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0Ly9yZW1vdmUgZmlsdGVyIGZyb20gYXJyYXlcblx0dXNlclJlbW92ZUZpbHRlcihmaWVsZCwgdHlwZSwgdmFsdWUpe1xuXHRcdHRoaXMucmVtb3ZlRmlsdGVyKGZpZWxkLCB0eXBlLCB2YWx1ZSk7XG5cdFx0dGhpcy5yZWZyZXNoRmlsdGVyKCk7XG5cdH1cblxuXHQvL2NsZWFyIGZpbHRlcnNcblx0dXNlckNsZWFyRmlsdGVyKGFsbCl7XG5cdFx0dGhpcy5jbGVhckZpbHRlcihhbGwpO1xuXHRcdHRoaXMucmVmcmVzaEZpbHRlcigpO1xuXHR9XG5cblx0Ly9jbGVhciBoZWFkZXIgZmlsdGVyc1xuXHR1c2VyQ2xlYXJIZWFkZXJGaWx0ZXIoKXtcblx0XHR0aGlzLmNsZWFySGVhZGVyRmlsdGVyKCk7XG5cdFx0dGhpcy5yZWZyZXNoRmlsdGVyKCk7XG5cdH1cblxuXG5cdC8vc2VhcmNoIGZvciBzcGVjaWZpYyByb3cgY29tcG9uZW50c1xuXHRzZWFyY2hSb3dzKGZpZWxkLCB0eXBlLCB2YWx1ZSl7XG5cdFx0cmV0dXJuIHRoaXMuc2VhcmNoKFwicm93c1wiLCBmaWVsZCwgdHlwZSwgdmFsdWUpO1xuXHR9XG5cblx0Ly9zZWFyY2ggZm9yIHNwZWNpZmljIGRhdGFcblx0c2VhcmNoRGF0YShmaWVsZCwgdHlwZSwgdmFsdWUpe1xuXHRcdHJldHVybiB0aGlzLnNlYXJjaChcImRhdGFcIiwgZmllbGQsIHR5cGUsIHZhbHVlKTtcblx0fVxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLyBJbnRlcm5hbCBMb2dpYyAvLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0aW5pdGlhbGl6ZUNvbHVtbkhlYWRlckZpbHRlcihjb2x1bW4pe1xuXHRcdHZhciBkZWYgPSBjb2x1bW4uZGVmaW5pdGlvbjtcblxuXHRcdGlmKGRlZi5oZWFkZXJGaWx0ZXIpe1xuXHRcdFx0dGhpcy5pbml0aWFsaXplQ29sdW1uKGNvbHVtbik7XG5cdFx0fVxuXHR9XG5cblx0Ly9pbml0aWFsaXplIGNvbHVtbiBoZWFkZXIgZmlsdGVyXG5cdGluaXRpYWxpemVDb2x1bW4oY29sdW1uLCB2YWx1ZSl7XG5cdFx0dmFyIHNlbGYgPSB0aGlzLFxuXHRcdGZpZWxkID0gY29sdW1uLmdldEZpZWxkKCk7XG5cblx0XHQvL2hhbmRsZSBzdWNjZXNzZnVsbHkgdmFsdWUgY2hhbmdlXG5cdFx0ZnVuY3Rpb24gc3VjY2Vzcyh2YWx1ZSl7XG5cdFx0XHR2YXIgZmlsdGVyVHlwZSA9IChjb2x1bW4ubW9kdWxlcy5maWx0ZXIudGFnVHlwZSA9PSBcImlucHV0XCIgJiYgY29sdW1uLm1vZHVsZXMuZmlsdGVyLmF0dHJUeXBlID09IFwidGV4dFwiKSB8fCBjb2x1bW4ubW9kdWxlcy5maWx0ZXIudGFnVHlwZSA9PSBcInRleHRhcmVhXCIgPyBcInBhcnRpYWxcIiA6IFwibWF0Y2hcIixcblx0XHRcdHR5cGUgPSBcIlwiLFxuXHRcdFx0ZmlsdGVyQ2hhbmdlQ2hlY2sgPSBcIlwiLFxuXHRcdFx0ZmlsdGVyRnVuYztcblxuXHRcdFx0aWYodHlwZW9mIGNvbHVtbi5tb2R1bGVzLmZpbHRlci5wcmV2U3VjY2VzcyA9PT0gXCJ1bmRlZmluZWRcIiB8fCBjb2x1bW4ubW9kdWxlcy5maWx0ZXIucHJldlN1Y2Nlc3MgIT09IHZhbHVlKXtcblxuXHRcdFx0XHRjb2x1bW4ubW9kdWxlcy5maWx0ZXIucHJldlN1Y2Nlc3MgPSB2YWx1ZTtcblxuXHRcdFx0XHRpZighY29sdW1uLm1vZHVsZXMuZmlsdGVyLmVtcHR5RnVuYyh2YWx1ZSkpe1xuXHRcdFx0XHRcdGNvbHVtbi5tb2R1bGVzLmZpbHRlci52YWx1ZSA9IHZhbHVlO1xuXG5cdFx0XHRcdFx0c3dpdGNoKHR5cGVvZiBjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJGaWx0ZXJGdW5jKXtcblx0XHRcdFx0XHRcdGNhc2UgXCJzdHJpbmdcIjpcblx0XHRcdFx0XHRcdFx0aWYoRmlsdGVyLmZpbHRlcnNbY29sdW1uLmRlZmluaXRpb24uaGVhZGVyRmlsdGVyRnVuY10pe1xuXHRcdFx0XHRcdFx0XHRcdHR5cGUgPSBjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJGaWx0ZXJGdW5jO1xuXHRcdFx0XHRcdFx0XHRcdGZpbHRlckZ1bmMgPSBmdW5jdGlvbihkYXRhKXtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciBwYXJhbXMgPSBjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJGaWx0ZXJGdW5jUGFyYW1zIHx8IHt9O1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIGZpZWxkVmFsID0gY29sdW1uLmdldEZpZWxkVmFsdWUoZGF0YSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdHBhcmFtcyA9IHR5cGVvZiBwYXJhbXMgPT09IFwiZnVuY3Rpb25cIiA/IHBhcmFtcyh2YWx1ZSwgZmllbGRWYWwsIGRhdGEpIDogcGFyYW1zO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gRmlsdGVyLmZpbHRlcnNbY29sdW1uLmRlZmluaXRpb24uaGVhZGVyRmlsdGVyRnVuY10odmFsdWUsIGZpZWxkVmFsLCBkYXRhLCBwYXJhbXMpO1xuXHRcdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJIZWFkZXIgRmlsdGVyIEVycm9yIC0gTWF0Y2hpbmcgZmlsdGVyIGZ1bmN0aW9uIG5vdCBmb3VuZDogXCIsIGNvbHVtbi5kZWZpbml0aW9uLmhlYWRlckZpbHRlckZ1bmMpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIFwiZnVuY3Rpb25cIjpcblx0XHRcdFx0XHRcdFx0ZmlsdGVyRnVuYyA9IGZ1bmN0aW9uKGRhdGEpe1xuXHRcdFx0XHRcdFx0XHRcdHZhciBwYXJhbXMgPSBjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJGaWx0ZXJGdW5jUGFyYW1zIHx8IHt9O1xuXHRcdFx0XHRcdFx0XHRcdHZhciBmaWVsZFZhbCA9IGNvbHVtbi5nZXRGaWVsZFZhbHVlKGRhdGEpO1xuXG5cdFx0XHRcdFx0XHRcdFx0cGFyYW1zID0gdHlwZW9mIHBhcmFtcyA9PT0gXCJmdW5jdGlvblwiID8gcGFyYW1zKHZhbHVlLCBmaWVsZFZhbCwgZGF0YSkgOiBwYXJhbXM7XG5cblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gY29sdW1uLmRlZmluaXRpb24uaGVhZGVyRmlsdGVyRnVuYyh2YWx1ZSwgZmllbGRWYWwsIGRhdGEsIHBhcmFtcyk7XG5cdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0dHlwZSA9IGZpbHRlckZ1bmM7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmKCFmaWx0ZXJGdW5jKXtcblx0XHRcdFx0XHRcdHN3aXRjaChmaWx0ZXJUeXBlKXtcblx0XHRcdFx0XHRcdFx0Y2FzZSBcInBhcnRpYWxcIjpcblx0XHRcdFx0XHRcdFx0XHRmaWx0ZXJGdW5jID0gZnVuY3Rpb24oZGF0YSl7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgY29sVmFsID0gY29sdW1uLmdldEZpZWxkVmFsdWUoZGF0YSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmKHR5cGVvZiBjb2xWYWwgIT09ICd1bmRlZmluZWQnICYmIGNvbFZhbCAhPT0gbnVsbCl7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBTdHJpbmcoY29sVmFsKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoU3RyaW5nKHZhbHVlKS50b0xvd2VyQ2FzZSgpKSA+IC0xO1xuXHRcdFx0XHRcdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdFx0XHR0eXBlID0gXCJsaWtlXCI7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0XHRmaWx0ZXJGdW5jID0gZnVuY3Rpb24oZGF0YSl7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gY29sdW1uLmdldEZpZWxkVmFsdWUoZGF0YSkgPT0gdmFsdWU7XG5cdFx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdFx0XHR0eXBlID0gXCI9XCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0c2VsZi5oZWFkZXJGaWx0ZXJzW2ZpZWxkXSA9IHt2YWx1ZTp2YWx1ZSwgZnVuYzpmaWx0ZXJGdW5jLCB0eXBlOnR5cGV9O1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0ZGVsZXRlIHNlbGYuaGVhZGVyRmlsdGVyc1tmaWVsZF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb2x1bW4ubW9kdWxlcy5maWx0ZXIudmFsdWUgPSB2YWx1ZTtcblxuXHRcdFx0XHRmaWx0ZXJDaGFuZ2VDaGVjayA9IEpTT04uc3RyaW5naWZ5KHNlbGYuaGVhZGVyRmlsdGVycyk7XG5cblx0XHRcdFx0aWYoc2VsZi5wcmV2SGVhZGVyRmlsdGVyQ2hhbmdlQ2hlY2sgIT09IGZpbHRlckNoYW5nZUNoZWNrKXtcblx0XHRcdFx0XHRzZWxmLnByZXZIZWFkZXJGaWx0ZXJDaGFuZ2VDaGVjayA9IGZpbHRlckNoYW5nZUNoZWNrO1xuXG5cdFx0XHRcdFx0c2VsZi50cmFja0NoYW5nZXMoKTtcblx0XHRcdFx0XHRzZWxmLnJlZnJlc2hGaWx0ZXIoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHRjb2x1bW4ubW9kdWxlcy5maWx0ZXIgPSB7XG5cdFx0XHRzdWNjZXNzOnN1Y2Nlc3MsXG5cdFx0XHRhdHRyVHlwZTpmYWxzZSxcblx0XHRcdHRhZ1R5cGU6ZmFsc2UsXG5cdFx0XHRlbXB0eUZ1bmM6ZmFsc2UsXG5cdFx0fTtcblxuXHRcdHRoaXMuZ2VuZXJhdGVIZWFkZXJGaWx0ZXJFbGVtZW50KGNvbHVtbik7XG5cdH1cblxuXHRnZW5lcmF0ZUhlYWRlckZpbHRlckVsZW1lbnQoY29sdW1uLCBpbml0aWFsVmFsdWUsIHJlaW5pdGlhbGl6ZSl7XG5cdFx0dmFyIHNlbGYgPSB0aGlzLFxuXHRcdHN1Y2Nlc3MgPSBjb2x1bW4ubW9kdWxlcy5maWx0ZXIuc3VjY2Vzcyxcblx0XHRmaWVsZCA9IGNvbHVtbi5nZXRGaWVsZCgpLFxuXHRcdGZpbHRlckVsZW1lbnQsIGVkaXRvciwgZWRpdG9yRWxlbWVudCwgY2VsbFdyYXBwZXIsIHR5cGluZ1RpbWVyLCBzZWFyY2hUcmlnZ2VyLCBwYXJhbXMsIG9uUmVuZGVyZWRDYWxsYmFjaztcblxuXHRcdGNvbHVtbi5tb2R1bGVzLmZpbHRlci52YWx1ZSA9IGluaXRpYWxWYWx1ZTtcblxuXHRcdC8vaGFuZGxlIGFib3J0ZWQgZWRpdFxuXHRcdGZ1bmN0aW9uIGNhbmNlbCgpe31cblxuXHRcdGZ1bmN0aW9uIG9uUmVuZGVyZWQoY2FsbGJhY2spe1xuXHRcdFx0b25SZW5kZXJlZENhbGxiYWNrID0gY2FsbGJhY2s7XG5cdFx0fVxuXG5cdFx0aWYoY29sdW1uLm1vZHVsZXMuZmlsdGVyLmhlYWRlckVsZW1lbnQgJiYgY29sdW1uLm1vZHVsZXMuZmlsdGVyLmhlYWRlckVsZW1lbnQucGFyZW50Tm9kZSl7XG5cdFx0XHRjb2x1bW4uY29udGVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoY29sdW1uLm1vZHVsZXMuZmlsdGVyLmhlYWRlckVsZW1lbnQucGFyZW50Tm9kZSk7XG5cdFx0fVxuXG5cdFx0aWYoZmllbGQpe1xuXG5cdFx0XHQvL3NldCBlbXB0eSB2YWx1ZSBmdW5jdGlvblxuXHRcdFx0Y29sdW1uLm1vZHVsZXMuZmlsdGVyLmVtcHR5RnVuYyA9IGNvbHVtbi5kZWZpbml0aW9uLmhlYWRlckZpbHRlckVtcHR5Q2hlY2sgfHwgZnVuY3Rpb24odmFsdWUpe1xuXHRcdFx0XHRyZXR1cm4gIXZhbHVlICYmIHZhbHVlICE9PSAwO1xuXHRcdFx0fTtcblxuXHRcdFx0ZmlsdGVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XHRmaWx0ZXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItaGVhZGVyLWZpbHRlclwiKTtcblxuXHRcdFx0Ly9zZXQgY29sdW1uIGVkaXRvclxuXHRcdFx0c3dpdGNoKHR5cGVvZiBjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJGaWx0ZXIpe1xuXHRcdFx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRcdFx0aWYoc2VsZi50YWJsZS5tb2R1bGVzLmVkaXQuZWRpdG9yc1tjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJGaWx0ZXJdKXtcblx0XHRcdFx0XHRcdGVkaXRvciA9IHNlbGYudGFibGUubW9kdWxlcy5lZGl0LmVkaXRvcnNbY29sdW1uLmRlZmluaXRpb24uaGVhZGVyRmlsdGVyXTtcblxuXHRcdFx0XHRcdFx0aWYoKGNvbHVtbi5kZWZpbml0aW9uLmhlYWRlckZpbHRlciA9PT0gXCJ0aWNrXCIgfHwgY29sdW1uLmRlZmluaXRpb24uaGVhZGVyRmlsdGVyID09PSBcInRpY2tDcm9zc1wiKSAmJiAhY29sdW1uLmRlZmluaXRpb24uaGVhZGVyRmlsdGVyRW1wdHlDaGVjayl7XG5cdFx0XHRcdFx0XHRcdGNvbHVtbi5tb2R1bGVzLmZpbHRlci5lbXB0eUZ1bmMgPSBmdW5jdGlvbih2YWx1ZSl7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlICE9PSB0cnVlICYmIHZhbHVlICE9PSBmYWxzZTtcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJGaWx0ZXIgRXJyb3IgLSBDYW5ub3QgYnVpbGQgaGVhZGVyIGZpbHRlciwgTm8gc3VjaCBlZGl0b3IgZm91bmQ6IFwiLCBjb2x1bW4uZGVmaW5pdGlvbi5lZGl0b3IpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIFwiZnVuY3Rpb25cIjpcblx0XHRcdFx0XHRlZGl0b3IgPSBjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJGaWx0ZXI7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBcImJvb2xlYW5cIjpcblx0XHRcdFx0XHRpZihjb2x1bW4ubW9kdWxlcy5lZGl0ICYmIGNvbHVtbi5tb2R1bGVzLmVkaXQuZWRpdG9yKXtcblx0XHRcdFx0XHRcdGVkaXRvciA9IGNvbHVtbi5tb2R1bGVzLmVkaXQuZWRpdG9yO1xuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdGlmKGNvbHVtbi5kZWZpbml0aW9uLmZvcm1hdHRlciAmJiBzZWxmLnRhYmxlLm1vZHVsZXMuZWRpdC5lZGl0b3JzW2NvbHVtbi5kZWZpbml0aW9uLmZvcm1hdHRlcl0pe1xuXHRcdFx0XHRcdFx0XHRlZGl0b3IgPSBzZWxmLnRhYmxlLm1vZHVsZXMuZWRpdC5lZGl0b3JzW2NvbHVtbi5kZWZpbml0aW9uLmZvcm1hdHRlcl07XG5cblx0XHRcdFx0XHRcdFx0aWYoKGNvbHVtbi5kZWZpbml0aW9uLmZvcm1hdHRlciA9PT0gXCJ0aWNrXCIgfHwgY29sdW1uLmRlZmluaXRpb24uZm9ybWF0dGVyID09PSBcInRpY2tDcm9zc1wiKSAmJiAhY29sdW1uLmRlZmluaXRpb24uaGVhZGVyRmlsdGVyRW1wdHlDaGVjayl7XG5cdFx0XHRcdFx0XHRcdFx0Y29sdW1uLm1vZHVsZXMuZmlsdGVyLmVtcHR5RnVuYyA9IGZ1bmN0aW9uKHZhbHVlKXtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdHJ1ZSAmJiB2YWx1ZSAhPT0gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0XHRlZGl0b3IgPSBzZWxmLnRhYmxlLm1vZHVsZXMuZWRpdC5lZGl0b3JzW1wiaW5wdXRcIl07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXG5cdFx0XHRpZihlZGl0b3Ipe1xuXG5cdFx0XHRcdGNlbGxXcmFwcGVyID0ge1xuXHRcdFx0XHRcdGdldFZhbHVlOmZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHlwZW9mIGluaXRpYWxWYWx1ZSAhPT0gXCJ1bmRlZmluZWRcIiA/IGluaXRpYWxWYWx1ZSA6IFwiXCI7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRnZXRGaWVsZDpmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0cmV0dXJuIGNvbHVtbi5kZWZpbml0aW9uLmZpZWxkO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0Z2V0RWxlbWVudDpmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZpbHRlckVsZW1lbnQ7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRnZXRDb2x1bW46ZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdHJldHVybiBjb2x1bW4uZ2V0Q29tcG9uZW50KCk7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRnZXRUYWJsZTooKSA9PiB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy50YWJsZTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGdldFR5cGU6KCkgPT4ge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFwiaGVhZGVyXCI7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRnZXRSb3c6ZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdG5vcm1hbGl6ZUhlaWdodDpmdW5jdGlvbigpe1xuXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdHBhcmFtcyA9IGNvbHVtbi5kZWZpbml0aW9uLmhlYWRlckZpbHRlclBhcmFtcyB8fCB7fTtcblxuXHRcdFx0XHRwYXJhbXMgPSB0eXBlb2YgcGFyYW1zID09PSBcImZ1bmN0aW9uXCIgPyBwYXJhbXMuY2FsbChzZWxmLnRhYmxlLCBjZWxsV3JhcHBlcikgOiBwYXJhbXM7XG5cblx0XHRcdFx0ZWRpdG9yRWxlbWVudCA9IGVkaXRvci5jYWxsKHRoaXMudGFibGUubW9kdWxlcy5lZGl0LCBjZWxsV3JhcHBlciwgb25SZW5kZXJlZCwgc3VjY2VzcywgY2FuY2VsLCBwYXJhbXMpO1xuXG5cdFx0XHRcdGlmKCFlZGl0b3JFbGVtZW50KXtcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJGaWx0ZXIgRXJyb3IgLSBDYW5ub3QgYWRkIGZpbHRlciB0byBcIiArIGZpZWxkICsgXCIgY29sdW1uLCBlZGl0b3IgcmV0dXJuZWQgYSB2YWx1ZSBvZiBmYWxzZVwiKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZighKGVkaXRvckVsZW1lbnQgaW5zdGFuY2VvZiBOb2RlKSl7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiRmlsdGVyIEVycm9yIC0gQ2Fubm90IGFkZCBmaWx0ZXIgdG8gXCIgKyBmaWVsZCArIFwiIGNvbHVtbiwgZWRpdG9yIHNob3VsZCByZXR1cm4gYW4gaW5zdGFuY2Ugb2YgTm9kZSwgdGhlIGVkaXRvciByZXR1cm5lZDpcIiwgZWRpdG9yRWxlbWVudCk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly9zZXQgUGxhY2Vob2xkZXIgVGV4dFxuXHRcdFx0XHRzZWxmLmxhbmdCaW5kKFwiaGVhZGVyRmlsdGVyc3xjb2x1bW5zfFwiICsgY29sdW1uLmRlZmluaXRpb24uZmllbGQsIGZ1bmN0aW9uKHZhbHVlKXtcblx0XHRcdFx0XHRlZGl0b3JFbGVtZW50LnNldEF0dHJpYnV0ZShcInBsYWNlaG9sZGVyXCIsIHR5cGVvZiB2YWx1ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiB2YWx1ZSA/IHZhbHVlIDogKGNvbHVtbi5kZWZpbml0aW9uLmhlYWRlckZpbHRlclBsYWNlaG9sZGVyIHx8IHNlbGYubGFuZ1RleHQoXCJoZWFkZXJGaWx0ZXJzfGRlZmF1bHRcIikpKTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0Ly9mb2N1cyBvbiBlbGVtZW50IG9uIGNsaWNrXG5cdFx0XHRcdGVkaXRvckVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0ZWRpdG9yRWxlbWVudC5mb2N1cygpO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRlZGl0b3JFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCAoZSkgPT4ge1xuXHRcdFx0XHRcdHZhciBsZWZ0ID0gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmNvbnRlbnRzRWxlbWVudC5zY3JvbGxMZWZ0O1xuXG5cdFx0XHRcdFx0dmFyIGhlYWRlclBvcyA9IHRoaXMudGFibGUucm93TWFuYWdlci5lbGVtZW50LnNjcm9sbExlZnQ7XG5cblx0XHRcdFx0XHRpZihsZWZ0ICE9PSBoZWFkZXJQb3Mpe1xuXHRcdFx0XHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnNjcm9sbEhvcml6b250YWwobGVmdCk7XG5cdFx0XHRcdFx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuc2Nyb2xsSG9yaXpvbnRhbChsZWZ0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdC8vbGl2ZSB1cGRhdGUgZmlsdGVycyBhcyB1c2VyIHR5cGVzXG5cdFx0XHRcdHR5cGluZ1RpbWVyID0gZmFsc2U7XG5cblx0XHRcdFx0c2VhcmNoVHJpZ2dlciA9IGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRcdGlmKHR5cGluZ1RpbWVyKXtcblx0XHRcdFx0XHRcdGNsZWFyVGltZW91dCh0eXBpbmdUaW1lcik7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dHlwaW5nVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRzdWNjZXNzKGVkaXRvckVsZW1lbnQudmFsdWUpO1xuXHRcdFx0XHRcdH0sc2VsZi50YWJsZS5vcHRpb25zLmhlYWRlckZpbHRlckxpdmVGaWx0ZXJEZWxheSk7XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Y29sdW1uLm1vZHVsZXMuZmlsdGVyLmhlYWRlckVsZW1lbnQgPSBlZGl0b3JFbGVtZW50O1xuXHRcdFx0XHRjb2x1bW4ubW9kdWxlcy5maWx0ZXIuYXR0clR5cGUgPSBlZGl0b3JFbGVtZW50Lmhhc0F0dHJpYnV0ZShcInR5cGVcIikgPyBlZGl0b3JFbGVtZW50LmdldEF0dHJpYnV0ZShcInR5cGVcIikudG9Mb3dlckNhc2UoKSA6IFwiXCIgO1xuXHRcdFx0XHRjb2x1bW4ubW9kdWxlcy5maWx0ZXIudGFnVHlwZSA9IGVkaXRvckVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRcdGlmKGNvbHVtbi5kZWZpbml0aW9uLmhlYWRlckZpbHRlckxpdmVGaWx0ZXIgIT09IGZhbHNlKXtcblxuXHRcdFx0XHRcdGlmIChcblx0XHRcdFx0XHRcdCEoXG5cdFx0XHRcdFx0XHRcdGNvbHVtbi5kZWZpbml0aW9uLmhlYWRlckZpbHRlciA9PT0gJ2F1dG9jb21wbGV0ZScgfHxcblx0XHRcdFx0XHRcdFx0Y29sdW1uLmRlZmluaXRpb24uaGVhZGVyRmlsdGVyID09PSAndGlja0Nyb3NzJyB8fFxuXHRcdFx0XHRcdFx0XHQoKGNvbHVtbi5kZWZpbml0aW9uLmVkaXRvciA9PT0gJ2F1dG9jb21wbGV0ZScgfHxcblx0XHRcdFx0XHRcdFx0XHRjb2x1bW4uZGVmaW5pdGlvbi5lZGl0b3IgPT09ICd0aWNrQ3Jvc3MnKSAmJlxuXHRcdFx0XHRcdFx0XHRjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJGaWx0ZXIgPT09IHRydWUpXG5cdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRlZGl0b3JFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCBzZWFyY2hUcmlnZ2VyKTtcblx0XHRcdFx0XHRcdGVkaXRvckVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInNlYXJjaFwiLCBzZWFyY2hUcmlnZ2VyKTtcblxuXG5cdFx0XHRcdFx0XHQvL3VwZGF0ZSBudW1iZXIgZmlsdGVyZWQgY29sdW1ucyBvbiBjaGFuZ2Vcblx0XHRcdFx0XHRcdGlmKGNvbHVtbi5tb2R1bGVzLmZpbHRlci5hdHRyVHlwZSA9PSBcIm51bWJlclwiKXtcblx0XHRcdFx0XHRcdFx0ZWRpdG9yRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRcdFx0XHRcdHN1Y2Nlc3MoZWRpdG9yRWxlbWVudC52YWx1ZSk7XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvL2NoYW5nZSB0ZXh0IGlucHV0cyB0byBzZWFyY2ggaW5wdXRzIHRvIGFsbG93IGZvciBjbGVhcmluZyBvZiBmaWVsZFxuXHRcdFx0XHRcdFx0aWYoY29sdW1uLm1vZHVsZXMuZmlsdGVyLmF0dHJUeXBlID09IFwidGV4dFwiICYmIHRoaXMudGFibGUuYnJvd3NlciAhPT0gXCJpZVwiKXtcblx0XHRcdFx0XHRcdFx0ZWRpdG9yRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwic2VhcmNoXCIpO1xuXHRcdFx0XHRcdFx0Ly8gZWRpdG9yRWxlbWVudC5vZmYoXCJjaGFuZ2UgYmx1clwiKTsgLy9wcmV2ZW50IGJsdXIgZnJvbSB0cmlnZ2VyaW5nIGZpbHRlciBhbmQgcHJldmVudGluZyBzZWxlY3Rpb24gY2xpY2tcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vcHJldmVudCBpbnB1dCBhbmQgc2VsZWN0IGVsZW1lbnRzIGZyb20gcHJvcGFnYXRpbmcgY2xpY2sgdG8gY29sdW1uIHNvcnRlcnMgZXRjXG5cdFx0XHRcdFx0aWYoY29sdW1uLm1vZHVsZXMuZmlsdGVyLnRhZ1R5cGUgPT0gXCJpbnB1dFwiIHx8IGNvbHVtbi5tb2R1bGVzLmZpbHRlci50YWdUeXBlID09IFwic2VsZWN0XCIgfHwgY29sdW1uLm1vZHVsZXMuZmlsdGVyLnRhZ1R5cGUgPT0gXCJ0ZXh0YXJlYVwiKXtcblx0XHRcdFx0XHRcdGVkaXRvckVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZmlsdGVyRWxlbWVudC5hcHBlbmRDaGlsZChlZGl0b3JFbGVtZW50KTtcblxuXHRcdFx0XHRjb2x1bW4uY29udGVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoZmlsdGVyRWxlbWVudCk7XG5cblx0XHRcdFx0aWYoIXJlaW5pdGlhbGl6ZSl7XG5cdFx0XHRcdFx0c2VsZi5oZWFkZXJGaWx0ZXJDb2x1bW5zLnB1c2goY29sdW1uKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmKG9uUmVuZGVyZWRDYWxsYmFjayl7XG5cdFx0XHRcdFx0b25SZW5kZXJlZENhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJGaWx0ZXIgRXJyb3IgLSBDYW5ub3QgYWRkIGhlYWRlciBmaWx0ZXIsIGNvbHVtbiBoYXMgbm8gZmllbGQgc2V0OlwiLCBjb2x1bW4uZGVmaW5pdGlvbi50aXRsZSk7XG5cdFx0fVxuXHR9XG5cblx0Ly9oaWRlIGFsbCBoZWFkZXIgZmlsdGVyIGVsZW1lbnRzICh1c2VkIHRvIGVuc3VyZSBjb3JyZWN0IGNvbHVtbiB3aWR0aHMgaW4gXCJmaXREYXRhXCIgbGF5b3V0IG1vZGUpXG5cdGhpZGVIZWFkZXJGaWx0ZXJFbGVtZW50cygpe1xuXHRcdHRoaXMuaGVhZGVyRmlsdGVyQ29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uKGNvbHVtbil7XG5cdFx0XHRpZihjb2x1bW4ubW9kdWxlcy5maWx0ZXIgJiYgY29sdW1uLm1vZHVsZXMuZmlsdGVyLmhlYWRlckVsZW1lbnQpe1xuXHRcdFx0XHRjb2x1bW4ubW9kdWxlcy5maWx0ZXIuaGVhZGVyRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0Ly9zaG93IGFsbCBoZWFkZXIgZmlsdGVyIGVsZW1lbnRzICh1c2VkIHRvIGVuc3VyZSBjb3JyZWN0IGNvbHVtbiB3aWR0aHMgaW4gXCJmaXREYXRhXCIgbGF5b3V0IG1vZGUpXG5cdHNob3dIZWFkZXJGaWx0ZXJFbGVtZW50cygpe1xuXHRcdHRoaXMuaGVhZGVyRmlsdGVyQ29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uKGNvbHVtbil7XG5cdFx0XHRpZihjb2x1bW4ubW9kdWxlcy5maWx0ZXIgJiYgY29sdW1uLm1vZHVsZXMuZmlsdGVyLmhlYWRlckVsZW1lbnQpe1xuXHRcdFx0XHRjb2x1bW4ubW9kdWxlcy5maWx0ZXIuaGVhZGVyRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJyc7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHQvL3Byb2dyYW1tYXRpY2FsbHkgc2V0IGZvY3VzIG9mIGhlYWRlciBmaWx0ZXJcblx0c2V0SGVhZGVyRmlsdGVyRm9jdXMoY29sdW1uKXtcblx0XHRpZihjb2x1bW4ubW9kdWxlcy5maWx0ZXIgJiYgY29sdW1uLm1vZHVsZXMuZmlsdGVyLmhlYWRlckVsZW1lbnQpe1xuXHRcdFx0Y29sdW1uLm1vZHVsZXMuZmlsdGVyLmhlYWRlckVsZW1lbnQuZm9jdXMoKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJDb2x1bW4gRmlsdGVyIEZvY3VzIEVycm9yIC0gTm8gaGVhZGVyIGZpbHRlciBzZXQgb24gY29sdW1uOlwiLCBjb2x1bW4uZ2V0RmllbGQoKSk7XG5cdFx0fVxuXHR9XG5cblx0Ly9wcm9ncmFtbWF0aWNhbGx5IGdldCB2YWx1ZSBvZiBoZWFkZXIgZmlsdGVyXG5cdGdldEhlYWRlckZpbHRlclZhbHVlKGNvbHVtbil7XG5cdFx0aWYoY29sdW1uLm1vZHVsZXMuZmlsdGVyICYmIGNvbHVtbi5tb2R1bGVzLmZpbHRlci5oZWFkZXJFbGVtZW50KXtcblx0XHRcdHJldHVybiBjb2x1bW4ubW9kdWxlcy5maWx0ZXIudmFsdWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkNvbHVtbiBGaWx0ZXIgRXJyb3IgLSBObyBoZWFkZXIgZmlsdGVyIHNldCBvbiBjb2x1bW46XCIsIGNvbHVtbi5nZXRGaWVsZCgpKTtcblx0XHR9XG5cdH1cblxuXHQvL3Byb2dyYW1tYXRpY2FsbHkgc2V0IHZhbHVlIG9mIGhlYWRlciBmaWx0ZXJcblx0c2V0SGVhZGVyRmlsdGVyVmFsdWUoY29sdW1uLCB2YWx1ZSl7XG5cdFx0aWYgKGNvbHVtbil7XG5cdFx0XHRpZihjb2x1bW4ubW9kdWxlcy5maWx0ZXIgJiYgY29sdW1uLm1vZHVsZXMuZmlsdGVyLmhlYWRlckVsZW1lbnQpe1xuXHRcdFx0XHR0aGlzLmdlbmVyYXRlSGVhZGVyRmlsdGVyRWxlbWVudChjb2x1bW4sIHZhbHVlLCB0cnVlKTtcblx0XHRcdFx0Y29sdW1uLm1vZHVsZXMuZmlsdGVyLnN1Y2Nlc3ModmFsdWUpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJDb2x1bW4gRmlsdGVyIEVycm9yIC0gTm8gaGVhZGVyIGZpbHRlciBzZXQgb24gY29sdW1uOlwiLCBjb2x1bW4uZ2V0RmllbGQoKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmVsb2FkSGVhZGVyRmlsdGVyKGNvbHVtbil7XG5cdFx0aWYgKGNvbHVtbil7XG5cdFx0XHRpZihjb2x1bW4ubW9kdWxlcy5maWx0ZXIgJiYgY29sdW1uLm1vZHVsZXMuZmlsdGVyLmhlYWRlckVsZW1lbnQpe1xuXHRcdFx0XHR0aGlzLmdlbmVyYXRlSGVhZGVyRmlsdGVyRWxlbWVudChjb2x1bW4sIGNvbHVtbi5tb2R1bGVzLmZpbHRlci52YWx1ZSwgdHJ1ZSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIkNvbHVtbiBGaWx0ZXIgRXJyb3IgLSBObyBoZWFkZXIgZmlsdGVyIHNldCBvbiBjb2x1bW46XCIsIGNvbHVtbi5nZXRGaWVsZCgpKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZWZyZXNoRmlsdGVyKCl7XG5cdFx0aWYodGhpcy50YWJsZUluaXRpYWxpemVkKXtcblx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5maWx0ZXJNb2RlID09PSBcInJlbW90ZVwiKXtcblx0XHRcdFx0dGhpcy5yZWxvYWREYXRhKG51bGwsIGZhbHNlLCBmYWxzZSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMucmVmcmVzaERhdGEodHJ1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly9UT0RPIC0gUGVyc2lzdCBsZWZ0IHBvc2l0aW9uIG9mIHJvdyBtYW5hZ2VyXG5cdFx0Ly8gbGVmdCA9IHRoaXMuc2Nyb2xsTGVmdDtcblx0XHQvLyB0aGlzLnNjcm9sbEhvcml6b250YWwobGVmdCk7XG5cdH1cblxuXHQvL2NoZWNrIGlmIHRoZSBmaWx0ZXJzIGhhcyBjaGFuZ2VkIHNpbmNlIGxhc3QgdXNlXG5cdHRyYWNrQ2hhbmdlcygpe1xuXHRcdHRoaXMuY2hhbmdlZCA9IHRydWU7XG5cdFx0dGhpcy5kaXNwYXRjaChcImZpbHRlci1jaGFuZ2VkXCIpO1xuXHR9XG5cblx0Ly9jaGVjayBpZiB0aGUgZmlsdGVycyBoYXMgY2hhbmdlZCBzaW5jZSBsYXN0IHVzZVxuXHRoYXNDaGFuZ2VkKCl7XG5cdFx0dmFyIGNoYW5nZWQgPSB0aGlzLmNoYW5nZWQ7XG5cdFx0dGhpcy5jaGFuZ2VkID0gZmFsc2U7XG5cdFx0cmV0dXJuIGNoYW5nZWQ7XG5cdH1cblxuXHQvL3NldCBzdGFuZGFyZCBmaWx0ZXJzXG5cdHNldEZpbHRlcihmaWVsZCwgdHlwZSwgdmFsdWUsIHBhcmFtcyl7XG5cdFx0dGhpcy5maWx0ZXJMaXN0ID0gW107XG5cblx0XHRpZighQXJyYXkuaXNBcnJheShmaWVsZCkpe1xuXHRcdFx0ZmllbGQgPSBbe2ZpZWxkOmZpZWxkLCB0eXBlOnR5cGUsIHZhbHVlOnZhbHVlLCBwYXJhbXM6cGFyYW1zfV07XG5cdFx0fVxuXG5cdFx0dGhpcy5hZGRGaWx0ZXIoZmllbGQpO1xuXHR9XG5cblx0Ly9hZGQgZmlsdGVyIHRvIGFycmF5XG5cdGFkZEZpbHRlcihmaWVsZCwgdHlwZSwgdmFsdWUsIHBhcmFtcyl7XG5cdFx0dmFyIGNoYW5nZWQgPSBmYWxzZTtcblxuXHRcdGlmKCFBcnJheS5pc0FycmF5KGZpZWxkKSl7XG5cdFx0XHRmaWVsZCA9IFt7ZmllbGQ6ZmllbGQsIHR5cGU6dHlwZSwgdmFsdWU6dmFsdWUsIHBhcmFtczpwYXJhbXN9XTtcblx0XHR9XG5cblx0XHRmaWVsZC5mb3JFYWNoKChmaWx0ZXIpID0+IHtcblx0XHRcdGZpbHRlciA9IHRoaXMuZmluZEZpbHRlcihmaWx0ZXIpO1xuXG5cdFx0XHRpZihmaWx0ZXIpe1xuXHRcdFx0XHR0aGlzLmZpbHRlckxpc3QucHVzaChmaWx0ZXIpO1xuXHRcdFx0XHRjaGFuZ2VkID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGlmKGNoYW5nZWQpe1xuXHRcdFx0dGhpcy50cmFja0NoYW5nZXMoKTtcblx0XHR9XG5cdH1cblxuXHRmaW5kRmlsdGVyKGZpbHRlcil7XG5cdFx0dmFyIGNvbHVtbjtcblxuXHRcdGlmKEFycmF5LmlzQXJyYXkoZmlsdGVyKSl7XG5cdFx0XHRyZXR1cm4gdGhpcy5maW5kU3ViRmlsdGVycyhmaWx0ZXIpO1xuXHRcdH1cblxuXHRcdHZhciBmaWx0ZXJGdW5jID0gZmFsc2U7XG5cblx0XHRpZih0eXBlb2YgZmlsdGVyLmZpZWxkID09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRmaWx0ZXJGdW5jID0gZnVuY3Rpb24oZGF0YSl7XG5cdFx0XHRcdHJldHVybiBmaWx0ZXIuZmllbGQoZGF0YSwgZmlsdGVyLnR5cGUgfHwge30pOy8vIHBhc3MgcGFyYW1zIHRvIGN1c3RvbSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdH07XG5cdFx0fWVsc2Uge1xuXG5cdFx0XHRpZihGaWx0ZXIuZmlsdGVyc1tmaWx0ZXIudHlwZV0pe1xuXG5cdFx0XHRcdGNvbHVtbiA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5nZXRDb2x1bW5CeUZpZWxkKGZpbHRlci5maWVsZCk7XG5cblx0XHRcdFx0aWYoY29sdW1uKXtcblx0XHRcdFx0XHRmaWx0ZXJGdW5jID0gZnVuY3Rpb24oZGF0YSl7XG5cdFx0XHRcdFx0XHRyZXR1cm4gRmlsdGVyLmZpbHRlcnNbZmlsdGVyLnR5cGVdKGZpbHRlci52YWx1ZSwgY29sdW1uLmdldEZpZWxkVmFsdWUoZGF0YSksIGRhdGEsIGZpbHRlci5wYXJhbXMgfHwge30pO1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRmaWx0ZXJGdW5jID0gZnVuY3Rpb24oZGF0YSl7XG5cdFx0XHRcdFx0XHRyZXR1cm4gRmlsdGVyLmZpbHRlcnNbZmlsdGVyLnR5cGVdKGZpbHRlci52YWx1ZSwgZGF0YVtmaWx0ZXIuZmllbGRdLCBkYXRhLCBmaWx0ZXIucGFyYW1zIHx8IHt9KTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cblxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJGaWx0ZXIgRXJyb3IgLSBObyBzdWNoIGZpbHRlciB0eXBlIGZvdW5kLCBpZ25vcmluZzogXCIsIGZpbHRlci50eXBlKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmaWx0ZXIuZnVuYyA9IGZpbHRlckZ1bmM7XG5cblx0XHRyZXR1cm4gZmlsdGVyLmZ1bmMgPyBmaWx0ZXIgOiBmYWxzZTtcblx0fVxuXG5cdGZpbmRTdWJGaWx0ZXJzKGZpbHRlcnMpe1xuXHRcdHZhciBvdXRwdXQgPSBbXTtcblxuXHRcdGZpbHRlcnMuZm9yRWFjaCgoZmlsdGVyKSA9PiB7XG5cdFx0XHRmaWx0ZXIgPSB0aGlzLmZpbmRGaWx0ZXIoZmlsdGVyKTtcblxuXHRcdFx0aWYoZmlsdGVyKXtcblx0XHRcdFx0b3V0cHV0LnB1c2goZmlsdGVyKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHJldHVybiBvdXRwdXQubGVuZ3RoID8gb3V0cHV0IDogZmFsc2U7XG5cdH1cblxuXHQvL2dldCBhbGwgZmlsdGVyc1xuXHRnZXRGaWx0ZXJzKGFsbCwgYWpheCl7XG5cdFx0dmFyIG91dHB1dCA9IFtdO1xuXG5cdFx0aWYoYWxsKXtcblx0XHRcdG91dHB1dCA9IHRoaXMuZ2V0SGVhZGVyRmlsdGVycygpO1xuXHRcdH1cblxuXHRcdGlmKGFqYXgpe1xuXHRcdFx0b3V0cHV0LmZvckVhY2goZnVuY3Rpb24oaXRlbSl7XG5cdFx0XHRcdGlmKHR5cGVvZiBpdGVtLnR5cGUgPT0gXCJmdW5jdGlvblwiKXtcblx0XHRcdFx0XHRpdGVtLnR5cGUgPSBcImZ1bmN0aW9uXCI7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdG91dHB1dCA9IG91dHB1dC5jb25jYXQodGhpcy5maWx0ZXJzVG9BcnJheSh0aGlzLmZpbHRlckxpc3QsIGFqYXgpKTtcblxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblxuXHQvL2ZpbHRlciB0byBPYmplY3Rcblx0ZmlsdGVyc1RvQXJyYXkoZmlsdGVyTGlzdCwgYWpheCl7XG5cdFx0dmFyIG91dHB1dCA9IFtdO1xuXG5cdFx0ZmlsdGVyTGlzdC5mb3JFYWNoKChmaWx0ZXIpID0+IHtcblx0XHRcdHZhciBpdGVtO1xuXG5cdFx0XHRpZihBcnJheS5pc0FycmF5KGZpbHRlcikpe1xuXHRcdFx0XHRvdXRwdXQucHVzaCh0aGlzLmZpbHRlcnNUb0FycmF5KGZpbHRlciwgYWpheCkpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRpdGVtID0ge2ZpZWxkOmZpbHRlci5maWVsZCwgdHlwZTpmaWx0ZXIudHlwZSwgdmFsdWU6ZmlsdGVyLnZhbHVlfTtcblxuXHRcdFx0XHRpZihhamF4KXtcblx0XHRcdFx0XHRpZih0eXBlb2YgaXRlbS50eXBlID09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRcdFx0XHRpdGVtLnR5cGUgPSBcImZ1bmN0aW9uXCI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0b3V0cHV0LnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cblx0Ly9nZXQgYWxsIGZpbHRlcnNcblx0Z2V0SGVhZGVyRmlsdGVycygpe1xuXHRcdHZhciBvdXRwdXQgPSBbXTtcblxuXHRcdGZvcih2YXIga2V5IGluIHRoaXMuaGVhZGVyRmlsdGVycyl7XG5cdFx0XHRvdXRwdXQucHVzaCh7ZmllbGQ6a2V5LCB0eXBlOnRoaXMuaGVhZGVyRmlsdGVyc1trZXldLnR5cGUsIHZhbHVlOnRoaXMuaGVhZGVyRmlsdGVyc1trZXldLnZhbHVlfSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdC8vcmVtb3ZlIGZpbHRlciBmcm9tIGFycmF5XG5cdHJlbW92ZUZpbHRlcihmaWVsZCwgdHlwZSwgdmFsdWUpe1xuXHRcdGlmKCFBcnJheS5pc0FycmF5KGZpZWxkKSl7XG5cdFx0XHRmaWVsZCA9IFt7ZmllbGQ6ZmllbGQsIHR5cGU6dHlwZSwgdmFsdWU6dmFsdWV9XTtcblx0XHR9XG5cblx0XHRmaWVsZC5mb3JFYWNoKChmaWx0ZXIpID0+IHtcblx0XHRcdHZhciBpbmRleCA9IC0xO1xuXG5cdFx0XHRpZih0eXBlb2YgZmlsdGVyLmZpZWxkID09IFwib2JqZWN0XCIpe1xuXHRcdFx0XHRpbmRleCA9IHRoaXMuZmlsdGVyTGlzdC5maW5kSW5kZXgoKGVsZW1lbnQpID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gZmlsdGVyID09PSBlbGVtZW50O1xuXHRcdFx0XHR9KTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aW5kZXggPSB0aGlzLmZpbHRlckxpc3QuZmluZEluZGV4KChlbGVtZW50KSA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuIGZpbHRlci5maWVsZCA9PT0gZWxlbWVudC5maWVsZCAmJiBmaWx0ZXIudHlwZSA9PT0gZWxlbWVudC50eXBlICAmJiBmaWx0ZXIudmFsdWUgPT09IGVsZW1lbnQudmFsdWU7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRpZihpbmRleCA+IC0xKXtcblx0XHRcdFx0dGhpcy5maWx0ZXJMaXN0LnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIkZpbHRlciBFcnJvciAtIE5vIG1hdGNoaW5nIGZpbHRlciB0eXBlIGZvdW5kLCBpZ25vcmluZzogXCIsIGZpbHRlci50eXBlKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHRoaXMudHJhY2tDaGFuZ2VzKCk7XG5cdH1cblxuXHQvL2NsZWFyIGZpbHRlcnNcblx0Y2xlYXJGaWx0ZXIoYWxsKXtcblx0XHR0aGlzLmZpbHRlckxpc3QgPSBbXTtcblxuXHRcdGlmKGFsbCl7XG5cdFx0XHR0aGlzLmNsZWFySGVhZGVyRmlsdGVyKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy50cmFja0NoYW5nZXMoKTtcblx0fVxuXG5cdC8vY2xlYXIgaGVhZGVyIGZpbHRlcnNcblx0Y2xlYXJIZWFkZXJGaWx0ZXIoKXtcblx0XHR0aGlzLmhlYWRlckZpbHRlcnMgPSB7fTtcblx0XHR0aGlzLnByZXZIZWFkZXJGaWx0ZXJDaGFuZ2VDaGVjayA9IFwie31cIjtcblxuXHRcdHRoaXMuaGVhZGVyRmlsdGVyQ29sdW1ucy5mb3JFYWNoKChjb2x1bW4pID0+IHtcblx0XHRcdGlmKHR5cGVvZiBjb2x1bW4ubW9kdWxlcy5maWx0ZXIudmFsdWUgIT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0XHRkZWxldGUgY29sdW1uLm1vZHVsZXMuZmlsdGVyLnZhbHVlO1xuXHRcdFx0fVxuXHRcdFx0Y29sdW1uLm1vZHVsZXMuZmlsdGVyLnByZXZTdWNjZXNzID0gdW5kZWZpbmVkO1xuXHRcdFx0dGhpcy5yZWxvYWRIZWFkZXJGaWx0ZXIoY29sdW1uKTtcblx0XHR9KTtcblxuXHRcdHRoaXMudHJhY2tDaGFuZ2VzKCk7XG5cdH1cblxuXHQvL3NlYXJjaCBkYXRhIGFuZCByZXR1cm4gbWF0Y2hpbmcgcm93c1xuXHRzZWFyY2ggKHNlYXJjaFR5cGUsIGZpZWxkLCB0eXBlLCB2YWx1ZSl7XG5cdFx0dmFyIGFjdGl2ZVJvd3MgPSBbXSxcblx0XHRmaWx0ZXJMaXN0ID0gW107XG5cblx0XHRpZighQXJyYXkuaXNBcnJheShmaWVsZCkpe1xuXHRcdFx0ZmllbGQgPSBbe2ZpZWxkOmZpZWxkLCB0eXBlOnR5cGUsIHZhbHVlOnZhbHVlfV07XG5cdFx0fVxuXG5cdFx0ZmllbGQuZm9yRWFjaCgoZmlsdGVyKSA9PiB7XG5cdFx0XHRmaWx0ZXIgPSB0aGlzLmZpbmRGaWx0ZXIoZmlsdGVyKTtcblxuXHRcdFx0aWYoZmlsdGVyKXtcblx0XHRcdFx0ZmlsdGVyTGlzdC5wdXNoKGZpbHRlcik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIucm93cy5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdHZhciBtYXRjaCA9IHRydWU7XG5cblx0XHRcdGZpbHRlckxpc3QuZm9yRWFjaCgoZmlsdGVyKSA9PiB7XG5cdFx0XHRcdGlmKCF0aGlzLmZpbHRlclJlY3Vyc2UoZmlsdGVyLCByb3cuZ2V0RGF0YSgpKSl7XG5cdFx0XHRcdFx0bWF0Y2ggPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdGlmKG1hdGNoKXtcblx0XHRcdFx0YWN0aXZlUm93cy5wdXNoKHNlYXJjaFR5cGUgPT09IFwiZGF0YVwiID8gcm93LmdldERhdGEoXCJkYXRhXCIpIDogcm93LmdldENvbXBvbmVudCgpKTtcblx0XHRcdH1cblxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIGFjdGl2ZVJvd3M7XG5cdH1cblxuXHQvL2ZpbHRlciByb3cgYXJyYXlcblx0ZmlsdGVyKHJvd0xpc3QsIGZpbHRlcnMpe1xuXHRcdHZhciBhY3RpdmVSb3dzID0gW10sXG5cdFx0YWN0aXZlUm93Q29tcG9uZW50cyA9IFtdO1xuXG5cdFx0aWYodGhpcy5zdWJzY3JpYmVkRXh0ZXJuYWwoXCJkYXRhRmlsdGVyaW5nXCIpKXtcblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcImRhdGFGaWx0ZXJpbmdcIiwgdGhpcy5nZXRGaWx0ZXJzKHRydWUpKTtcblx0XHR9XG5cblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZmlsdGVyTW9kZSAhPT0gXCJyZW1vdGVcIiAmJiAodGhpcy5maWx0ZXJMaXN0Lmxlbmd0aCB8fCBPYmplY3Qua2V5cyh0aGlzLmhlYWRlckZpbHRlcnMpLmxlbmd0aCkpe1xuXG5cdFx0XHRyb3dMaXN0LmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0XHRpZih0aGlzLmZpbHRlclJvdyhyb3cpKXtcblx0XHRcdFx0XHRhY3RpdmVSb3dzLnB1c2gocm93KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHR9ZWxzZSB7XG5cdFx0XHRhY3RpdmVSb3dzID0gcm93TGlzdC5zbGljZSgwKTtcblx0XHR9XG5cblx0XHRpZih0aGlzLnN1YnNjcmliZWRFeHRlcm5hbChcImRhdGFGaWx0ZXJlZFwiKSl7XG5cblx0XHRcdGFjdGl2ZVJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRcdGFjdGl2ZVJvd0NvbXBvbmVudHMucHVzaChyb3cuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcImRhdGFGaWx0ZXJlZFwiLCB0aGlzLmdldEZpbHRlcnModHJ1ZSksIGFjdGl2ZVJvd0NvbXBvbmVudHMpO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY3RpdmVSb3dzO1xuXHR9XG5cblx0Ly9maWx0ZXIgaW5kaXZpZHVhbCByb3dcblx0ZmlsdGVyUm93KHJvdywgZmlsdGVycyl7XG5cdFx0dmFyIG1hdGNoID0gdHJ1ZSxcblx0XHRkYXRhID0gcm93LmdldERhdGEoKTtcblxuXHRcdHRoaXMuZmlsdGVyTGlzdC5mb3JFYWNoKChmaWx0ZXIpID0+IHtcblx0XHRcdGlmKCF0aGlzLmZpbHRlclJlY3Vyc2UoZmlsdGVyLCBkYXRhKSl7XG5cdFx0XHRcdG1hdGNoID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblxuXHRcdGZvcih2YXIgZmllbGQgaW4gdGhpcy5oZWFkZXJGaWx0ZXJzKXtcblx0XHRcdGlmKCF0aGlzLmhlYWRlckZpbHRlcnNbZmllbGRdLmZ1bmMoZGF0YSkpe1xuXHRcdFx0XHRtYXRjaCA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaDtcblx0fVxuXG5cdGZpbHRlclJlY3Vyc2UoZmlsdGVyLCBkYXRhKXtcblx0XHR2YXIgbWF0Y2ggPSBmYWxzZTtcblxuXHRcdGlmKEFycmF5LmlzQXJyYXkoZmlsdGVyKSl7XG5cdFx0XHRmaWx0ZXIuZm9yRWFjaCgoc3ViRmlsdGVyKSA9PiB7XG5cdFx0XHRcdGlmKHRoaXMuZmlsdGVyUmVjdXJzZShzdWJGaWx0ZXIsIGRhdGEpKXtcblx0XHRcdFx0XHRtYXRjaCA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1lbHNlIHtcblx0XHRcdG1hdGNoID0gZmlsdGVyLmZ1bmMoZGF0YSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoO1xuXHR9XG59XG5cbkZpbHRlci5tb2R1bGVOYW1lID0gXCJmaWx0ZXJcIjtcblxuLy9sb2FkIGRlZmF1bHRzXG5GaWx0ZXIuZmlsdGVycyA9IGRlZmF1bHRGaWx0ZXJzO1xuXG5mdW5jdGlvbiBwbGFpbnRleHQoY2VsbCwgZm9ybWF0dGVyUGFyYW1zLCBvblJlbmRlcmVkKXtcblx0cmV0dXJuIHRoaXMuZW1wdHlUb1NwYWNlKHRoaXMuc2FuaXRpemVIVE1MKGNlbGwuZ2V0VmFsdWUoKSkpO1xufVxuXG5mdW5jdGlvbiBodG1sJDEoY2VsbCwgZm9ybWF0dGVyUGFyYW1zLCBvblJlbmRlcmVkKXtcblx0cmV0dXJuIGNlbGwuZ2V0VmFsdWUoKTtcbn1cblxuZnVuY3Rpb24gdGV4dGFyZWEkMShjZWxsLCBmb3JtYXR0ZXJQYXJhbXMsIG9uUmVuZGVyZWQpe1xuXHRjZWxsLmdldEVsZW1lbnQoKS5zdHlsZS53aGl0ZVNwYWNlID0gXCJwcmUtd3JhcFwiO1xuXHRyZXR1cm4gdGhpcy5lbXB0eVRvU3BhY2UodGhpcy5zYW5pdGl6ZUhUTUwoY2VsbC5nZXRWYWx1ZSgpKSk7XG59XG5cbmZ1bmN0aW9uIG1vbmV5KGNlbGwsIGZvcm1hdHRlclBhcmFtcywgb25SZW5kZXJlZCl7XG5cdHZhciBmbG9hdFZhbCA9IHBhcnNlRmxvYXQoY2VsbC5nZXRWYWx1ZSgpKSxcblx0c2lnbiA9IFwiXCIsXG5cdG51bWJlciwgaW50ZWdlciwgZGVjaW1hbCwgcmd4LCB2YWx1ZTtcblxuXHR2YXIgZGVjaW1hbFN5bSA9IGZvcm1hdHRlclBhcmFtcy5kZWNpbWFsIHx8IFwiLlwiO1xuXHR2YXIgdGhvdXNhbmRTeW0gPSBmb3JtYXR0ZXJQYXJhbXMudGhvdXNhbmQgfHwgXCIsXCI7XG5cdHZhciBuZWdhdGl2ZVNpZ24gPSBmb3JtYXR0ZXJQYXJhbXMubmVnYXRpdmVTaWduIHx8IFwiLVwiO1xuXHR2YXIgc3ltYm9sID0gZm9ybWF0dGVyUGFyYW1zLnN5bWJvbCB8fCBcIlwiO1xuXHR2YXIgYWZ0ZXIgPSAhIWZvcm1hdHRlclBhcmFtcy5zeW1ib2xBZnRlcjtcblx0dmFyIHByZWNpc2lvbiA9IHR5cGVvZiBmb3JtYXR0ZXJQYXJhbXMucHJlY2lzaW9uICE9PSBcInVuZGVmaW5lZFwiID8gZm9ybWF0dGVyUGFyYW1zLnByZWNpc2lvbiA6IDI7XG5cblx0aWYoaXNOYU4oZmxvYXRWYWwpKXtcblx0XHRyZXR1cm4gdGhpcy5lbXB0eVRvU3BhY2UodGhpcy5zYW5pdGl6ZUhUTUwoY2VsbC5nZXRWYWx1ZSgpKSk7XG5cdH1cblxuXHRpZihmbG9hdFZhbCA8IDApe1xuXHRcdGZsb2F0VmFsID0gTWF0aC5hYnMoZmxvYXRWYWwpO1xuXHRcdHNpZ24gPSBuZWdhdGl2ZVNpZ247XG5cdH1cblxuXHRudW1iZXIgPSBwcmVjaXNpb24gIT09IGZhbHNlID8gZmxvYXRWYWwudG9GaXhlZChwcmVjaXNpb24pIDogZmxvYXRWYWw7XG5cdG51bWJlciA9IFN0cmluZyhudW1iZXIpLnNwbGl0KFwiLlwiKTtcblxuXHRpbnRlZ2VyID0gbnVtYmVyWzBdO1xuXHRkZWNpbWFsID0gbnVtYmVyLmxlbmd0aCA+IDEgPyBkZWNpbWFsU3ltICsgbnVtYmVyWzFdIDogXCJcIjtcblxuXHRpZiAoZm9ybWF0dGVyUGFyYW1zLnRob3VzYW5kICE9PSBmYWxzZSkge1xuXHRcdHJneCA9IC8oXFxkKykoXFxkezN9KS87XG5cblx0XHR3aGlsZSAocmd4LnRlc3QoaW50ZWdlcikpe1xuXHRcdFx0aW50ZWdlciA9IGludGVnZXIucmVwbGFjZShyZ3gsIFwiJDFcIiArIHRob3VzYW5kU3ltICsgXCIkMlwiKTtcblx0XHR9XG5cdH1cblxuXHR2YWx1ZSA9IGludGVnZXIgKyBkZWNpbWFsO1xuXHRcblx0aWYoc2lnbiA9PT0gdHJ1ZSl7XG5cdFx0dmFsdWUgPSBcIihcIiArIHZhbHVlICArIFwiKVwiO1xuXHRcdHJldHVybiBhZnRlciA/IHZhbHVlICsgc3ltYm9sIDogc3ltYm9sICsgdmFsdWU7XG5cdH1lbHNlIHtcblx0XHRyZXR1cm4gYWZ0ZXIgPyBzaWduICsgdmFsdWUgKyBzeW1ib2wgOiBzaWduICsgc3ltYm9sICsgdmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gbGluayhjZWxsLCBmb3JtYXR0ZXJQYXJhbXMsIG9uUmVuZGVyZWQpe1xuXHR2YXIgdmFsdWUgPSBjZWxsLmdldFZhbHVlKCksXG5cdHVybFByZWZpeCA9IGZvcm1hdHRlclBhcmFtcy51cmxQcmVmaXggfHwgXCJcIixcblx0ZG93bmxvYWQgPSBmb3JtYXR0ZXJQYXJhbXMuZG93bmxvYWQsXG5cdGxhYmVsID0gdmFsdWUsXG5cdGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIiksXG5cdGRhdGE7XG5cblx0ZnVuY3Rpb24gbGFiZWxUcmF2ZXJzZShwYXRoLCBkYXRhKXtcblx0XHR2YXIgaXRlbSA9IHBhdGguc2hpZnQoKSxcblx0XHR2YWx1ZSA9IGRhdGFbaXRlbV07XG5cdFx0XG5cdFx0aWYocGF0aC5sZW5ndGggJiYgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiKXtcblx0XHRcdHJldHVybiBsYWJlbFRyYXZlcnNlKHBhdGgsIHZhbHVlKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblxuXHRpZihmb3JtYXR0ZXJQYXJhbXMubGFiZWxGaWVsZCl7XG5cdFx0ZGF0YSA9IGNlbGwuZ2V0RGF0YSgpO1xuXHRcdGxhYmVsID0gbGFiZWxUcmF2ZXJzZShmb3JtYXR0ZXJQYXJhbXMubGFiZWxGaWVsZC5zcGxpdCh0aGlzLnRhYmxlLm9wdGlvbnMubmVzdGVkRmllbGRTZXBhcmF0b3IpLCBkYXRhKTtcblx0fVxuXG5cdGlmKGZvcm1hdHRlclBhcmFtcy5sYWJlbCl7XG5cdFx0c3dpdGNoKHR5cGVvZiBmb3JtYXR0ZXJQYXJhbXMubGFiZWwpe1xuXHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0XHRsYWJlbCA9IGZvcm1hdHRlclBhcmFtcy5sYWJlbDtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgXCJmdW5jdGlvblwiOlxuXHRcdFx0XHRsYWJlbCA9IGZvcm1hdHRlclBhcmFtcy5sYWJlbChjZWxsKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0aWYobGFiZWwpe1xuXHRcdGlmKGZvcm1hdHRlclBhcmFtcy51cmxGaWVsZCl7XG5cdFx0XHRkYXRhID0gY2VsbC5nZXREYXRhKCk7XG5cdFx0XHR2YWx1ZSA9IGRhdGFbZm9ybWF0dGVyUGFyYW1zLnVybEZpZWxkXTtcblx0XHR9XG5cblx0XHRpZihmb3JtYXR0ZXJQYXJhbXMudXJsKXtcblx0XHRcdHN3aXRjaCh0eXBlb2YgZm9ybWF0dGVyUGFyYW1zLnVybCl7XG5cdFx0XHRcdGNhc2UgXCJzdHJpbmdcIjpcblx0XHRcdFx0XHR2YWx1ZSA9IGZvcm1hdHRlclBhcmFtcy51cmw7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHRcdFx0dmFsdWUgPSBmb3JtYXR0ZXJQYXJhbXMudXJsKGNlbGwpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGVsLnNldEF0dHJpYnV0ZShcImhyZWZcIiwgdXJsUHJlZml4ICsgdmFsdWUpO1xuXG5cdFx0aWYoZm9ybWF0dGVyUGFyYW1zLnRhcmdldCl7XG5cdFx0XHRlbC5zZXRBdHRyaWJ1dGUoXCJ0YXJnZXRcIiwgZm9ybWF0dGVyUGFyYW1zLnRhcmdldCk7XG5cdFx0fVxuXG5cdFx0aWYoZm9ybWF0dGVyUGFyYW1zLmRvd25sb2FkKXtcblxuXHRcdFx0aWYodHlwZW9mIGRvd25sb2FkID09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRcdGRvd25sb2FkID0gZG93bmxvYWQoY2VsbCk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGRvd25sb2FkID0gZG93bmxvYWQgPT09IHRydWUgPyBcIlwiIDogZG93bmxvYWQ7XG5cdFx0XHR9XG5cblx0XHRcdGVsLnNldEF0dHJpYnV0ZShcImRvd25sb2FkXCIsIGRvd25sb2FkKTtcblx0XHR9XG5cblx0XHRlbC5pbm5lckhUTUwgPSB0aGlzLmVtcHR5VG9TcGFjZSh0aGlzLnNhbml0aXplSFRNTChsYWJlbCkpO1xuXG5cdFx0cmV0dXJuIGVsO1xuXHR9ZWxzZSB7XG5cdFx0cmV0dXJuIFwiJm5ic3A7XCI7XG5cdH1cbn1cblxuZnVuY3Rpb24gaW1hZ2UoY2VsbCwgZm9ybWF0dGVyUGFyYW1zLCBvblJlbmRlcmVkKXtcblx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKSxcblx0c3JjID0gY2VsbC5nZXRWYWx1ZSgpO1xuXG5cdGlmKGZvcm1hdHRlclBhcmFtcy51cmxQcmVmaXgpe1xuXHRcdHNyYyA9IGZvcm1hdHRlclBhcmFtcy51cmxQcmVmaXggKyBjZWxsLmdldFZhbHVlKCk7XG5cdH1cblxuXHRpZihmb3JtYXR0ZXJQYXJhbXMudXJsU3VmZml4KXtcblx0XHRzcmMgPSBzcmMgKyBmb3JtYXR0ZXJQYXJhbXMudXJsU3VmZml4O1xuXHR9XG5cblx0ZWwuc2V0QXR0cmlidXRlKFwic3JjXCIsIHNyYyk7XG5cblx0c3dpdGNoKHR5cGVvZiBmb3JtYXR0ZXJQYXJhbXMuaGVpZ2h0KXtcblx0XHRjYXNlIFwibnVtYmVyXCI6XG5cdFx0XHRlbC5zdHlsZS5oZWlnaHQgPSBmb3JtYXR0ZXJQYXJhbXMuaGVpZ2h0ICsgXCJweFwiO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRlbC5zdHlsZS5oZWlnaHQgPSBmb3JtYXR0ZXJQYXJhbXMuaGVpZ2h0O1xuXHRcdFx0YnJlYWs7XG5cdH1cblxuXHRzd2l0Y2godHlwZW9mIGZvcm1hdHRlclBhcmFtcy53aWR0aCl7XG5cdFx0Y2FzZSBcIm51bWJlclwiOlxuXHRcdFx0ZWwuc3R5bGUud2lkdGggPSBmb3JtYXR0ZXJQYXJhbXMud2lkdGggKyBcInB4XCI7XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgXCJzdHJpbmdcIjpcblx0XHRcdGVsLnN0eWxlLndpZHRoID0gZm9ybWF0dGVyUGFyYW1zLndpZHRoO1xuXHRcdFx0YnJlYWs7XG5cdH1cblxuXHRlbC5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBmdW5jdGlvbigpe1xuXHRcdGNlbGwuZ2V0Um93KCkubm9ybWFsaXplSGVpZ2h0KCk7XG5cdH0pO1xuXG5cdHJldHVybiBlbDtcbn1cblxuZnVuY3Rpb24gdGlja0Nyb3NzJDEoY2VsbCwgZm9ybWF0dGVyUGFyYW1zLCBvblJlbmRlcmVkKXtcblx0dmFyIHZhbHVlID0gY2VsbC5nZXRWYWx1ZSgpLFxuXHRlbGVtZW50ID0gY2VsbC5nZXRFbGVtZW50KCksXG5cdGVtcHR5ID0gZm9ybWF0dGVyUGFyYW1zLmFsbG93RW1wdHksXG5cdHRydXRoeSA9IGZvcm1hdHRlclBhcmFtcy5hbGxvd1RydXRoeSxcblx0dHJ1ZVZhbHVlU2V0ID0gT2JqZWN0LmtleXMoZm9ybWF0dGVyUGFyYW1zKS5pbmNsdWRlcyhcInRydWVWYWx1ZVwiKSxcblx0dGljayA9IHR5cGVvZiBmb3JtYXR0ZXJQYXJhbXMudGlja0VsZW1lbnQgIT09IFwidW5kZWZpbmVkXCIgPyBmb3JtYXR0ZXJQYXJhbXMudGlja0VsZW1lbnQgOiAnPHN2ZyBlbmFibGUtYmFja2dyb3VuZD1cIm5ldyAwIDAgMjQgMjRcIiBoZWlnaHQ9XCIxNFwiIHdpZHRoPVwiMTRcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIiA+PHBhdGggZmlsbD1cIiMyREMyMTRcIiBjbGlwLXJ1bGU9XCJldmVub2RkXCIgZD1cIk0yMS42NTIsMy4yMTFjLTAuMjkzLTAuMjk1LTAuNzctMC4yOTUtMS4wNjEsMEw5LjQxLDE0LjM0ICBjLTAuMjkzLDAuMjk3LTAuNzcxLDAuMjk3LTEuMDYyLDBMMy40NDksOS4zNTFDMy4zMDQsOS4yMDMsMy4xMTQsOS4xMywyLjkyMyw5LjEyOUMyLjczLDkuMTI4LDIuNTM0LDkuMjAxLDIuMzg3LDkuMzUxICBsLTIuMTY1LDEuOTQ2QzAuMDc4LDExLjQ0NSwwLDExLjYzLDAsMTEuODIzYzAsMC4xOTQsMC4wNzgsMC4zOTcsMC4yMjMsMC41NDRsNC45NCw1LjE4NGMwLjI5MiwwLjI5NiwwLjc3MSwwLjc3NiwxLjA2MiwxLjA3ICBsMi4xMjQsMi4xNDFjMC4yOTIsMC4yOTMsMC43NjksMC4yOTMsMS4wNjIsMGwxNC4zNjYtMTQuMzRjMC4yOTMtMC4yOTQsMC4yOTMtMC43NzcsMC0xLjA3MUwyMS42NTIsMy4yMTF6XCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiLz48L3N2Zz4nLFxuXHRjcm9zcyA9IHR5cGVvZiBmb3JtYXR0ZXJQYXJhbXMuY3Jvc3NFbGVtZW50ICE9PSBcInVuZGVmaW5lZFwiID8gZm9ybWF0dGVyUGFyYW1zLmNyb3NzRWxlbWVudCA6ICc8c3ZnIGVuYWJsZS1iYWNrZ3JvdW5kPVwibmV3IDAgMCAyNCAyNFwiIGhlaWdodD1cIjE0XCIgd2lkdGg9XCIxNFwiICB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIiA+PHBhdGggZmlsbD1cIiNDRTE1MTVcIiBkPVwiTTIyLjI0NSw0LjAxNWMwLjMxMywwLjMxMywwLjMxMywwLjgyNiwwLDEuMTM5bC02LjI3Niw2LjI3Yy0wLjMxMywwLjMxMi0wLjMxMywwLjgyNiwwLDEuMTRsNi4yNzMsNi4yNzIgIGMwLjMxMywwLjMxMywwLjMxMywwLjgyNiwwLDEuMTRsLTIuMjg1LDIuMjc3Yy0wLjMxNCwwLjMxMi0wLjgyOCwwLjMxMi0xLjE0MiwwbC02LjI3MS02LjI3MWMtMC4zMTMtMC4zMTMtMC44MjgtMC4zMTMtMS4xNDEsMCAgbC02LjI3Niw2LjI2N2MtMC4zMTMsMC4zMTMtMC44MjgsMC4zMTMtMS4xNDEsMGwtMi4yODItMi4yOGMtMC4zMTMtMC4zMTMtMC4zMTMtMC44MjYsMC0xLjE0bDYuMjc4LTYuMjY5ICBjMC4zMTMtMC4zMTIsMC4zMTMtMC44MjYsMC0xLjE0TDEuNzA5LDUuMTQ3Yy0wLjMxNC0wLjMxMy0wLjMxNC0wLjgyNywwLTEuMTRsMi4yODQtMi4yNzhDNC4zMDgsMS40MTcsNC44MjEsMS40MTcsNS4xMzUsMS43MyAgTDExLjQwNSw4YzAuMzE0LDAuMzE0LDAuODI4LDAuMzE0LDEuMTQxLDAuMDAxbDYuMjc2LTYuMjY3YzAuMzEyLTAuMzEyLDAuODI2LTAuMzEyLDEuMTQxLDBMMjIuMjQ1LDQuMDE1elwiLz48L3N2Zz4nO1xuXG5cdGlmKCh0cnVlVmFsdWVTZXQgJiYgdmFsdWUgPT09IGZvcm1hdHRlclBhcmFtcy50cnVlVmFsdWUpIHx8ICghdHJ1ZVZhbHVlU2V0ICYmICgodHJ1dGh5ICYmIHZhbHVlKSB8fCAodmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09IFwidHJ1ZVwiIHx8IHZhbHVlID09PSBcIlRydWVcIiB8fCB2YWx1ZSA9PT0gMSB8fCB2YWx1ZSA9PT0gXCIxXCIpKSkpe1xuXHRcdGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1jaGVja2VkXCIsIHRydWUpO1xuXHRcdHJldHVybiB0aWNrIHx8IFwiXCI7XG5cdH1lbHNlIHtcblx0XHRpZihlbXB0eSAmJiAodmFsdWUgPT09IFwibnVsbFwiIHx8IHZhbHVlID09PSBcIlwiIHx8IHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIikpe1xuXHRcdFx0ZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWNoZWNrZWRcIiwgXCJtaXhlZFwiKTtcblx0XHRcdHJldHVybiBcIlwiO1xuXHRcdH1lbHNlIHtcblx0XHRcdGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1jaGVja2VkXCIsIGZhbHNlKTtcblx0XHRcdHJldHVybiBjcm9zcyB8fCBcIlwiO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkYXRldGltZSQxKGNlbGwsIGZvcm1hdHRlclBhcmFtcywgb25SZW5kZXJlZCl7XG5cdHZhciBEVCA9IHdpbmRvdy5EYXRlVGltZSB8fCBsdXhvbi5EYXRlVGltZTtcblx0dmFyIGlucHV0Rm9ybWF0ID0gZm9ybWF0dGVyUGFyYW1zLmlucHV0Rm9ybWF0IHx8IFwieXl5eS1NTS1kZCBISDptbTpzc1wiO1xuXHR2YXJcdG91dHB1dEZvcm1hdCA9IGZvcm1hdHRlclBhcmFtcy5vdXRwdXRGb3JtYXQgfHwgXCJkZC9NTS95eXl5IEhIOm1tOnNzXCI7XG5cdHZhclx0aW52YWxpZCA9IHR5cGVvZiBmb3JtYXR0ZXJQYXJhbXMuaW52YWxpZFBsYWNlaG9sZGVyICE9PSBcInVuZGVmaW5lZFwiID8gZm9ybWF0dGVyUGFyYW1zLmludmFsaWRQbGFjZWhvbGRlciA6IFwiXCI7XG5cdHZhciB2YWx1ZSA9IGNlbGwuZ2V0VmFsdWUoKTtcblxuXHRpZih0eXBlb2YgRFQgIT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0dmFyIG5ld0RhdGV0aW1lO1xuXG5cdFx0aWYoRFQuaXNEYXRlVGltZSh2YWx1ZSkpe1xuXHRcdFx0bmV3RGF0ZXRpbWUgPSB2YWx1ZTtcblx0XHR9ZWxzZSBpZihpbnB1dEZvcm1hdCA9PT0gXCJpc29cIil7XG5cdFx0XHRuZXdEYXRldGltZSA9IERULmZyb21JU08oU3RyaW5nKHZhbHVlKSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0bmV3RGF0ZXRpbWUgPSBEVC5mcm9tRm9ybWF0KFN0cmluZyh2YWx1ZSksIGlucHV0Rm9ybWF0KTtcblx0XHR9XG5cblx0XHRpZihuZXdEYXRldGltZS5pc1ZhbGlkKXtcblx0XHRcdGlmKGZvcm1hdHRlclBhcmFtcy50aW1lem9uZSl7XG5cdFx0XHRcdG5ld0RhdGV0aW1lID0gbmV3RGF0ZXRpbWUuc2V0Wm9uZShmb3JtYXR0ZXJQYXJhbXMudGltZXpvbmUpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbmV3RGF0ZXRpbWUudG9Gb3JtYXQob3V0cHV0Rm9ybWF0KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRpZihpbnZhbGlkID09PSB0cnVlIHx8ICF2YWx1ZSl7XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdH1lbHNlIGlmKHR5cGVvZiBpbnZhbGlkID09PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0XHRyZXR1cm4gaW52YWxpZCh2YWx1ZSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHJldHVybiBpbnZhbGlkO1xuXHRcdFx0fVxuXHRcdH1cblx0fWVsc2Uge1xuXHRcdGNvbnNvbGUuZXJyb3IoXCJGb3JtYXQgRXJyb3IgLSAnZGF0ZXRpbWUnIGZvcm1hdHRlciBpcyBkZXBlbmRhbnQgb24gbHV4b24uanNcIik7XG5cdH1cbn1cblxuZnVuY3Rpb24gZGF0ZXRpbWVkaWZmIChjZWxsLCBmb3JtYXR0ZXJQYXJhbXMsIG9uUmVuZGVyZWQpIHtcblx0dmFyIERUID0gd2luZG93LkRhdGVUaW1lIHx8IGx1eG9uLkRhdGVUaW1lO1xuXHR2YXIgaW5wdXRGb3JtYXQgPSBmb3JtYXR0ZXJQYXJhbXMuaW5wdXRGb3JtYXQgfHwgXCJ5eXl5LU1NLWRkIEhIOm1tOnNzXCI7XG5cdHZhciBpbnZhbGlkID0gdHlwZW9mIGZvcm1hdHRlclBhcmFtcy5pbnZhbGlkUGxhY2Vob2xkZXIgIT09IFwidW5kZWZpbmVkXCIgPyBmb3JtYXR0ZXJQYXJhbXMuaW52YWxpZFBsYWNlaG9sZGVyIDogXCJcIjtcblx0dmFyIHN1ZmZpeCA9IHR5cGVvZiBmb3JtYXR0ZXJQYXJhbXMuc3VmZml4ICE9PSBcInVuZGVmaW5lZFwiID8gZm9ybWF0dGVyUGFyYW1zLnN1ZmZpeCA6IGZhbHNlO1xuXHR2YXIgdW5pdCA9IHR5cGVvZiBmb3JtYXR0ZXJQYXJhbXMudW5pdCAhPT0gXCJ1bmRlZmluZWRcIiA/IGZvcm1hdHRlclBhcmFtcy51bml0IDogXCJkYXlzXCI7XG5cdHZhciBodW1hbml6ZSA9IHR5cGVvZiBmb3JtYXR0ZXJQYXJhbXMuaHVtYW5pemUgIT09IFwidW5kZWZpbmVkXCIgPyBmb3JtYXR0ZXJQYXJhbXMuaHVtYW5pemUgOiBmYWxzZTtcblx0dmFyIGRhdGUgPSB0eXBlb2YgZm9ybWF0dGVyUGFyYW1zLmRhdGUgIT09IFwidW5kZWZpbmVkXCIgPyBmb3JtYXR0ZXJQYXJhbXMuZGF0ZSA6IERULm5vdygpO1xuXHR2YXIgdmFsdWUgPSBjZWxsLmdldFZhbHVlKCk7XG5cblx0aWYodHlwZW9mIERUICE9IFwidW5kZWZpbmVkXCIpe1xuXHRcdHZhciBuZXdEYXRldGltZTtcblxuXHRcdGlmKERULmlzRGF0ZVRpbWUodmFsdWUpKXtcblx0XHRcdG5ld0RhdGV0aW1lID0gdmFsdWU7XG5cdFx0fWVsc2UgaWYoaW5wdXRGb3JtYXQgPT09IFwiaXNvXCIpe1xuXHRcdFx0bmV3RGF0ZXRpbWUgPSBEVC5mcm9tSVNPKFN0cmluZyh2YWx1ZSkpO1xuXHRcdH1lbHNlIHtcblx0XHRcdG5ld0RhdGV0aW1lID0gRFQuZnJvbUZvcm1hdChTdHJpbmcodmFsdWUpLCBpbnB1dEZvcm1hdCk7XG5cdFx0fVxuXG5cdFx0aWYgKG5ld0RhdGV0aW1lLmlzVmFsaWQpe1xuXHRcdFx0aWYoaHVtYW5pemUpe1xuXHRcdFx0XHRyZXR1cm4gbmV3RGF0ZXRpbWUuZGlmZihkYXRlLCB1bml0KS50b0h1bWFuKCkgICsgKHN1ZmZpeCA/IFwiIFwiICsgc3VmZml4IDogXCJcIik7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHJldHVybiBwYXJzZUludChuZXdEYXRldGltZS5kaWZmKGRhdGUsIHVuaXQpW3VuaXRdKSArIChzdWZmaXggPyBcIiBcIiArIHN1ZmZpeCA6IFwiXCIpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmIChpbnZhbGlkID09PSB0cnVlKSB7XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIGludmFsaWQgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRyZXR1cm4gaW52YWxpZCh2YWx1ZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gaW52YWxpZDtcblx0XHRcdH1cblx0XHR9XG5cdH1lbHNlIHtcblx0XHRjb25zb2xlLmVycm9yKFwiRm9ybWF0IEVycm9yIC0gJ2RhdGV0aW1lZGlmZicgZm9ybWF0dGVyIGlzIGRlcGVuZGFudCBvbiBsdXhvbi5qc1wiKTtcblx0fVxufVxuXG5mdW5jdGlvbiBsb29rdXAgKGNlbGwsIGZvcm1hdHRlclBhcmFtcywgb25SZW5kZXJlZCkge1xuXHR2YXIgdmFsdWUgPSBjZWxsLmdldFZhbHVlKCk7XG5cblx0aWYgKHR5cGVvZiBmb3JtYXR0ZXJQYXJhbXNbdmFsdWVdID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0Y29uc29sZS53YXJuKCdNaXNzaW5nIGRpc3BsYXkgdmFsdWUgZm9yICcgKyB2YWx1ZSk7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cblx0cmV0dXJuIGZvcm1hdHRlclBhcmFtc1t2YWx1ZV07XG59XG5cbmZ1bmN0aW9uIHN0YXIkMShjZWxsLCBmb3JtYXR0ZXJQYXJhbXMsIG9uUmVuZGVyZWQpe1xuXHR2YXIgdmFsdWUgPSBjZWxsLmdldFZhbHVlKCksXG5cdGVsZW1lbnQgPSBjZWxsLmdldEVsZW1lbnQoKSxcblx0bWF4U3RhcnMgPSBmb3JtYXR0ZXJQYXJhbXMgJiYgZm9ybWF0dGVyUGFyYW1zLnN0YXJzID8gZm9ybWF0dGVyUGFyYW1zLnN0YXJzIDogNSxcblx0c3RhcnMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKSxcblx0c3RhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCBcInN2Z1wiKSxcblx0c3RhckFjdGl2ZSA9ICc8cG9seWdvbiBmaWxsPVwiI0ZGRUEwMFwiIHN0cm9rZT1cIiNDMUFCNjBcIiBzdHJva2Utd2lkdGg9XCIzNy42MTUyXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgc3Ryb2tlLW1pdGVybGltaXQ9XCIxMFwiIHBvaW50cz1cIjI1OS4yMTYsMjkuOTQyIDMzMC4yNywxNzMuOTE5IDQ4OS4xNiwxOTcuMDA3IDM3NC4xODUsMzA5LjA4IDQwMS4zMyw0NjcuMzEgMjU5LjIxNiwzOTIuNjEyIDExNy4xMDQsNDY3LjMxIDE0NC4yNSwzMDkuMDggMjkuMjc0LDE5Ny4wMDcgMTg4LjE2NSwxNzMuOTE5IFwiLz4nLFxuXHRzdGFySW5hY3RpdmUgPSAnPHBvbHlnb24gZmlsbD1cIiNEMkQyRDJcIiBzdHJva2U9XCIjNjg2ODY4XCIgc3Ryb2tlLXdpZHRoPVwiMzcuNjE1MlwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS1taXRlcmxpbWl0PVwiMTBcIiBwb2ludHM9XCIyNTkuMjE2LDI5Ljk0MiAzMzAuMjcsMTczLjkxOSA0ODkuMTYsMTk3LjAwNyAzNzQuMTg1LDMwOS4wOCA0MDEuMzMsNDY3LjMxIDI1OS4yMTYsMzkyLjYxMiAxMTcuMTA0LDQ2Ny4zMSAxNDQuMjUsMzA5LjA4IDI5LjI3NCwxOTcuMDA3IDE4OC4xNjUsMTczLjkxOSBcIi8+JztcblxuXHQvL3N0eWxlIHN0YXJzIGhvbGRlclxuXHRzdGFycy5zdHlsZS52ZXJ0aWNhbEFsaWduID0gXCJtaWRkbGVcIjtcblxuXHQvL3N0eWxlIHN0YXJcblx0c3Rhci5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCBcIjE0XCIpO1xuXHRzdGFyLnNldEF0dHJpYnV0ZShcImhlaWdodFwiLCBcIjE0XCIpO1xuXHRzdGFyLnNldEF0dHJpYnV0ZShcInZpZXdCb3hcIiwgXCIwIDAgNTEyIDUxMlwiKTtcblx0c3Rhci5zZXRBdHRyaWJ1dGUoXCJ4bWw6c3BhY2VcIiwgXCJwcmVzZXJ2ZVwiKTtcblx0c3Rhci5zdHlsZS5wYWRkaW5nID0gXCIwIDFweFwiO1xuXG5cdHZhbHVlID0gdmFsdWUgJiYgIWlzTmFOKHZhbHVlKSA/IHBhcnNlSW50KHZhbHVlKSA6IDA7XG5cblx0dmFsdWUgPSBNYXRoLm1heCgwLCBNYXRoLm1pbih2YWx1ZSwgbWF4U3RhcnMpKTtcblxuXHRmb3IodmFyIGk9MTtpPD0gbWF4U3RhcnM7aSsrKXtcblx0XHR2YXIgbmV4dFN0YXIgPSBzdGFyLmNsb25lTm9kZSh0cnVlKTtcblx0XHRuZXh0U3Rhci5pbm5lckhUTUwgPSBpIDw9IHZhbHVlID8gc3RhckFjdGl2ZSA6IHN0YXJJbmFjdGl2ZTtcblxuXHRcdHN0YXJzLmFwcGVuZENoaWxkKG5leHRTdGFyKTtcblx0fVxuXG5cdGVsZW1lbnQuc3R5bGUud2hpdGVTcGFjZSA9IFwibm93cmFwXCI7XG5cdGVsZW1lbnQuc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHRlbGVtZW50LnN0eWxlLnRleHRPdmVyZmxvdyA9IFwiZWxsaXBzaXNcIjtcblxuXHRlbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgdmFsdWUpO1xuXG5cdHJldHVybiBzdGFycztcbn1cblxuZnVuY3Rpb24gdHJhZmZpYyhjZWxsLCBmb3JtYXR0ZXJQYXJhbXMsIG9uUmVuZGVyZWQpe1xuXHR2YXIgdmFsdWUgPSB0aGlzLnNhbml0aXplSFRNTChjZWxsLmdldFZhbHVlKCkpIHx8IDAsXG5cdGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIiksXG5cdG1heCA9IGZvcm1hdHRlclBhcmFtcyAmJiBmb3JtYXR0ZXJQYXJhbXMubWF4ID8gZm9ybWF0dGVyUGFyYW1zLm1heCA6IDEwMCxcblx0bWluID0gZm9ybWF0dGVyUGFyYW1zICYmIGZvcm1hdHRlclBhcmFtcy5taW4gPyBmb3JtYXR0ZXJQYXJhbXMubWluIDogMCxcblx0Y29sb3JzID0gZm9ybWF0dGVyUGFyYW1zICYmIHR5cGVvZiBmb3JtYXR0ZXJQYXJhbXMuY29sb3IgIT09IFwidW5kZWZpbmVkXCIgPyBmb3JtYXR0ZXJQYXJhbXMuY29sb3IgOiBbXCJyZWRcIiwgXCJvcmFuZ2VcIiwgXCJncmVlblwiXSxcblx0Y29sb3IgPSBcIiM2NjY2NjZcIixcblx0cGVyY2VudCwgcGVyY2VudFZhbHVlO1xuXG5cdGlmKGlzTmFOKHZhbHVlKSB8fCB0eXBlb2YgY2VsbC5nZXRWYWx1ZSgpID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRlbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXRyYWZmaWMtbGlnaHRcIik7XG5cblx0Ly9tYWtlIHN1cmUgdmFsdWUgaXMgaW4gcmFuZ2Vcblx0cGVyY2VudFZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSkgPD0gbWF4ID8gcGFyc2VGbG9hdCh2YWx1ZSkgOiBtYXg7XG5cdHBlcmNlbnRWYWx1ZSA9IHBhcnNlRmxvYXQocGVyY2VudFZhbHVlKSA+PSBtaW4gPyBwYXJzZUZsb2F0KHBlcmNlbnRWYWx1ZSkgOiBtaW47XG5cblx0Ly93b3Jrb3V0IHBlcmNlbnRhZ2Vcblx0cGVyY2VudCA9IChtYXggLSBtaW4pIC8gMTAwO1xuXHRwZXJjZW50VmFsdWUgPSBNYXRoLnJvdW5kKChwZXJjZW50VmFsdWUgLSBtaW4pIC8gcGVyY2VudCk7XG5cblx0Ly9zZXQgY29sb3Jcblx0c3dpdGNoKHR5cGVvZiBjb2xvcnMpe1xuXHRcdGNhc2UgXCJzdHJpbmdcIjpcblx0XHRcdGNvbG9yID0gY29sb3JzO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHRjb2xvciA9IGNvbG9ycyh2YWx1ZSk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIFwib2JqZWN0XCI6XG5cdFx0XHRpZihBcnJheS5pc0FycmF5KGNvbG9ycykpe1xuXHRcdFx0XHR2YXIgdW5pdCA9IDEwMCAvIGNvbG9ycy5sZW5ndGg7XG5cdFx0XHRcdHZhciBpbmRleCA9IE1hdGguZmxvb3IocGVyY2VudFZhbHVlIC8gdW5pdCk7XG5cblx0XHRcdFx0aW5kZXggPSBNYXRoLm1pbihpbmRleCwgY29sb3JzLmxlbmd0aCAtIDEpO1xuXHRcdFx0XHRpbmRleCA9IE1hdGgubWF4KGluZGV4LCAwKTtcblx0XHRcdFx0Y29sb3IgPSBjb2xvcnNbaW5kZXhdO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0fVxuXG5cdGVsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNvbG9yO1xuXG5cdHJldHVybiBlbDtcbn1cblxuZnVuY3Rpb24gcHJvZ3Jlc3MkMShjZWxsLCBmb3JtYXR0ZXJQYXJhbXMgPSB7fSwgb25SZW5kZXJlZCl7IC8vcHJvZ3Jlc3MgYmFyXG5cdHZhciB2YWx1ZSA9IHRoaXMuc2FuaXRpemVIVE1MKGNlbGwuZ2V0VmFsdWUoKSkgfHwgMCxcblx0ZWxlbWVudCA9IGNlbGwuZ2V0RWxlbWVudCgpLFxuXHRtYXggPSBmb3JtYXR0ZXJQYXJhbXMubWF4ID8gZm9ybWF0dGVyUGFyYW1zLm1heCA6IDEwMCxcblx0bWluID0gZm9ybWF0dGVyUGFyYW1zLm1pbiA/IGZvcm1hdHRlclBhcmFtcy5taW4gOiAwLFxuXHRsZWdlbmRBbGlnbiA9IGZvcm1hdHRlclBhcmFtcy5sZWdlbmRBbGlnbiA/IGZvcm1hdHRlclBhcmFtcy5sZWdlbmRBbGlnbiA6IFwiY2VudGVyXCIsXG5cdHBlcmNlbnQsIHBlcmNlbnRWYWx1ZSwgY29sb3IsIGxlZ2VuZCwgbGVnZW5kQ29sb3I7XG5cblx0Ly9tYWtlIHN1cmUgdmFsdWUgaXMgaW4gcmFuZ2Vcblx0cGVyY2VudFZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSkgPD0gbWF4ID8gcGFyc2VGbG9hdCh2YWx1ZSkgOiBtYXg7XG5cdHBlcmNlbnRWYWx1ZSA9IHBhcnNlRmxvYXQocGVyY2VudFZhbHVlKSA+PSBtaW4gPyBwYXJzZUZsb2F0KHBlcmNlbnRWYWx1ZSkgOiBtaW47XG5cblx0Ly93b3Jrb3V0IHBlcmNlbnRhZ2Vcblx0cGVyY2VudCA9IChtYXggLSBtaW4pIC8gMTAwO1xuXHRwZXJjZW50VmFsdWUgPSBNYXRoLnJvdW5kKChwZXJjZW50VmFsdWUgLSBtaW4pIC8gcGVyY2VudCk7XG5cblx0Ly9zZXQgYmFyIGNvbG9yXG5cdHN3aXRjaCh0eXBlb2YgZm9ybWF0dGVyUGFyYW1zLmNvbG9yKXtcblx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRjb2xvciA9IGZvcm1hdHRlclBhcmFtcy5jb2xvcjtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgXCJmdW5jdGlvblwiOlxuXHRcdFx0Y29sb3IgPSBmb3JtYXR0ZXJQYXJhbXMuY29sb3IodmFsdWUpO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBcIm9iamVjdFwiOlxuXHRcdFx0aWYoQXJyYXkuaXNBcnJheShmb3JtYXR0ZXJQYXJhbXMuY29sb3IpKXtcblx0XHRcdFx0bGV0IHVuaXQgPSAxMDAgLyBmb3JtYXR0ZXJQYXJhbXMuY29sb3IubGVuZ3RoO1xuXHRcdFx0XHRsZXQgaW5kZXggPSBNYXRoLmZsb29yKHBlcmNlbnRWYWx1ZSAvIHVuaXQpO1xuXG5cdFx0XHRcdGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIGZvcm1hdHRlclBhcmFtcy5jb2xvci5sZW5ndGggLSAxKTtcblx0XHRcdFx0aW5kZXggPSBNYXRoLm1heChpbmRleCwgMCk7XG5cdFx0XHRcdGNvbG9yID0gZm9ybWF0dGVyUGFyYW1zLmNvbG9yW2luZGV4XTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0ZGVmYXVsdDpcblx0XHRcdGNvbG9yID0gXCIjMkRDMjE0XCI7XG5cdH1cblxuXHQvL2dlbmVyYXRlIGxlZ2VuZFxuXHRzd2l0Y2godHlwZW9mIGZvcm1hdHRlclBhcmFtcy5sZWdlbmQpe1xuXHRcdGNhc2UgXCJzdHJpbmdcIjpcblx0XHRcdGxlZ2VuZCA9IGZvcm1hdHRlclBhcmFtcy5sZWdlbmQ7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIFwiZnVuY3Rpb25cIjpcblx0XHRcdGxlZ2VuZCA9IGZvcm1hdHRlclBhcmFtcy5sZWdlbmQodmFsdWUpO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBcImJvb2xlYW5cIjpcblx0XHRcdGxlZ2VuZCA9IHZhbHVlO1xuXHRcdFx0YnJlYWs7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdGxlZ2VuZCA9IGZhbHNlO1xuXHR9XG5cblx0Ly9zZXQgbGVnZW5kIGNvbG9yXG5cdHN3aXRjaCh0eXBlb2YgZm9ybWF0dGVyUGFyYW1zLmxlZ2VuZENvbG9yKXtcblx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRsZWdlbmRDb2xvciA9IGZvcm1hdHRlclBhcmFtcy5sZWdlbmRDb2xvcjtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgXCJmdW5jdGlvblwiOlxuXHRcdFx0bGVnZW5kQ29sb3IgPSBmb3JtYXR0ZXJQYXJhbXMubGVnZW5kQ29sb3IodmFsdWUpO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBcIm9iamVjdFwiOlxuXHRcdFx0aWYoQXJyYXkuaXNBcnJheShmb3JtYXR0ZXJQYXJhbXMubGVnZW5kQ29sb3IpKXtcblx0XHRcdFx0bGV0IHVuaXQgPSAxMDAgLyBmb3JtYXR0ZXJQYXJhbXMubGVnZW5kQ29sb3IubGVuZ3RoO1xuXHRcdFx0XHRsZXQgaW5kZXggPSBNYXRoLmZsb29yKHBlcmNlbnRWYWx1ZSAvIHVuaXQpO1xuXG5cdFx0XHRcdGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIGZvcm1hdHRlclBhcmFtcy5sZWdlbmRDb2xvci5sZW5ndGggLSAxKTtcblx0XHRcdFx0aW5kZXggPSBNYXRoLm1heChpbmRleCwgMCk7XG5cdFx0XHRcdGxlZ2VuZENvbG9yID0gZm9ybWF0dGVyUGFyYW1zLmxlZ2VuZENvbG9yW2luZGV4XTtcblx0XHRcdH1cblx0XHRcdGJyZWFrO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRsZWdlbmRDb2xvciA9IFwiIzAwMFwiO1xuXHR9XG5cblx0ZWxlbWVudC5zdHlsZS5taW5XaWR0aCA9IFwiMzBweFwiO1xuXHRlbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXG5cdGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCBwZXJjZW50VmFsdWUpO1xuXG5cdHZhciBiYXJFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdGJhckVsLnN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRiYXJFbC5zdHlsZS53aWR0aCA9IHBlcmNlbnRWYWx1ZSArIFwiJVwiO1xuXHRiYXJFbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvcjtcblx0YmFyRWwuc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XG5cblx0YmFyRWwuc2V0QXR0cmlidXRlKCdkYXRhLW1heCcsIG1heCk7XG5cdGJhckVsLnNldEF0dHJpYnV0ZSgnZGF0YS1taW4nLCBtaW4pO1xuXG5cdHZhciBiYXJDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRiYXJDb250YWluZXIuc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdGJhckNvbnRhaW5lci5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xuXHRiYXJDb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XG5cblx0aWYobGVnZW5kKXtcblx0XHR2YXIgbGVnZW5kRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdGxlZ2VuZEVsLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXHRcdGxlZ2VuZEVsLnN0eWxlLnRvcCA9IDA7XG5cdFx0bGVnZW5kRWwuc3R5bGUubGVmdCA9IDA7XG5cdFx0bGVnZW5kRWwuc3R5bGUudGV4dEFsaWduID0gbGVnZW5kQWxpZ247XG5cdFx0bGVnZW5kRWwuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcblx0XHRsZWdlbmRFbC5zdHlsZS5jb2xvciA9IGxlZ2VuZENvbG9yO1xuXHRcdGxlZ2VuZEVsLmlubmVySFRNTCA9IGxlZ2VuZDtcblx0fVxuXG5cdG9uUmVuZGVyZWQoZnVuY3Rpb24oKXtcblxuXHRcdC8vaGFuZGxlIGN1c3RvbSBlbGVtZW50IG5lZWRlZCBpZiBmb3JtYXR0ZXIgaXMgdG8gYmUgaW5jbHVkZWQgaW4gcHJpbnRlZC9kb3dubG9hZGVkIG91dHB1dFxuXHRcdGlmKCEoY2VsbCBpbnN0YW5jZW9mIENlbGxDb21wb25lbnQpKXtcblx0XHRcdHZhciBob2xkZXJFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XHRob2xkZXJFbC5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRcdGhvbGRlckVsLnN0eWxlLnRvcCA9IFwiNHB4XCI7XG5cdFx0XHRob2xkZXJFbC5zdHlsZS5ib3R0b20gPSBcIjRweFwiO1xuXHRcdFx0aG9sZGVyRWwuc3R5bGUubGVmdCA9IFwiNHB4XCI7XG5cdFx0XHRob2xkZXJFbC5zdHlsZS5yaWdodCA9IFwiNHB4XCI7XG5cblx0XHRcdGVsZW1lbnQuYXBwZW5kQ2hpbGQoaG9sZGVyRWwpO1xuXG5cdFx0XHRlbGVtZW50ID0gaG9sZGVyRWw7XG5cdFx0fVxuXG5cdFx0ZWxlbWVudC5hcHBlbmRDaGlsZChiYXJDb250YWluZXIpO1xuXHRcdGJhckNvbnRhaW5lci5hcHBlbmRDaGlsZChiYXJFbCk7XG5cblx0XHRpZihsZWdlbmQpe1xuXHRcdFx0YmFyQ29udGFpbmVyLmFwcGVuZENoaWxkKGxlZ2VuZEVsKTtcblx0XHR9XG5cdH0pO1xuXG5cdHJldHVybiBcIlwiO1xufVxuXG5mdW5jdGlvbiBjb2xvcihjZWxsLCBmb3JtYXR0ZXJQYXJhbXMsIG9uUmVuZGVyZWQpe1xuXHRjZWxsLmdldEVsZW1lbnQoKS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSB0aGlzLnNhbml0aXplSFRNTChjZWxsLmdldFZhbHVlKCkpO1xuXHRyZXR1cm4gXCJcIjtcbn1cblxuZnVuY3Rpb24gYnV0dG9uVGljayhjZWxsLCBmb3JtYXR0ZXJQYXJhbXMsIG9uUmVuZGVyZWQpe1xuXHRyZXR1cm4gJzxzdmcgZW5hYmxlLWJhY2tncm91bmQ9XCJuZXcgMCAwIDI0IDI0XCIgaGVpZ2h0PVwiMTRcIiB3aWR0aD1cIjE0XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIHhtbDpzcGFjZT1cInByZXNlcnZlXCIgPjxwYXRoIGZpbGw9XCIjMkRDMjE0XCIgY2xpcC1ydWxlPVwiZXZlbm9kZFwiIGQ9XCJNMjEuNjUyLDMuMjExYy0wLjI5My0wLjI5NS0wLjc3LTAuMjk1LTEuMDYxLDBMOS40MSwxNC4zNCAgYy0wLjI5MywwLjI5Ny0wLjc3MSwwLjI5Ny0xLjA2MiwwTDMuNDQ5LDkuMzUxQzMuMzA0LDkuMjAzLDMuMTE0LDkuMTMsMi45MjMsOS4xMjlDMi43Myw5LjEyOCwyLjUzNCw5LjIwMSwyLjM4Nyw5LjM1MSAgbC0yLjE2NSwxLjk0NkMwLjA3OCwxMS40NDUsMCwxMS42MywwLDExLjgyM2MwLDAuMTk0LDAuMDc4LDAuMzk3LDAuMjIzLDAuNTQ0bDQuOTQsNS4xODRjMC4yOTIsMC4yOTYsMC43NzEsMC43NzYsMS4wNjIsMS4wNyAgbDIuMTI0LDIuMTQxYzAuMjkyLDAuMjkzLDAuNzY5LDAuMjkzLDEuMDYyLDBsMTQuMzY2LTE0LjM0YzAuMjkzLTAuMjk0LDAuMjkzLTAuNzc3LDAtMS4wNzFMMjEuNjUyLDMuMjExelwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIi8+PC9zdmc+Jztcbn1cblxuZnVuY3Rpb24gYnV0dG9uQ3Jvc3MoY2VsbCwgZm9ybWF0dGVyUGFyYW1zLCBvblJlbmRlcmVkKXtcblx0cmV0dXJuICc8c3ZnIGVuYWJsZS1iYWNrZ3JvdW5kPVwibmV3IDAgMCAyNCAyNFwiIGhlaWdodD1cIjE0XCIgd2lkdGg9XCIxNFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiID48cGF0aCBmaWxsPVwiI0NFMTUxNVwiIGQ9XCJNMjIuMjQ1LDQuMDE1YzAuMzEzLDAuMzEzLDAuMzEzLDAuODI2LDAsMS4xMzlsLTYuMjc2LDYuMjdjLTAuMzEzLDAuMzEyLTAuMzEzLDAuODI2LDAsMS4xNGw2LjI3Myw2LjI3MiAgYzAuMzEzLDAuMzEzLDAuMzEzLDAuODI2LDAsMS4xNGwtMi4yODUsMi4yNzdjLTAuMzE0LDAuMzEyLTAuODI4LDAuMzEyLTEuMTQyLDBsLTYuMjcxLTYuMjcxYy0wLjMxMy0wLjMxMy0wLjgyOC0wLjMxMy0xLjE0MSwwICBsLTYuMjc2LDYuMjY3Yy0wLjMxMywwLjMxMy0wLjgyOCwwLjMxMy0xLjE0MSwwbC0yLjI4Mi0yLjI4Yy0wLjMxMy0wLjMxMy0wLjMxMy0wLjgyNiwwLTEuMTRsNi4yNzgtNi4yNjkgIGMwLjMxMy0wLjMxMiwwLjMxMy0wLjgyNiwwLTEuMTRMMS43MDksNS4xNDdjLTAuMzE0LTAuMzEzLTAuMzE0LTAuODI3LDAtMS4xNGwyLjI4NC0yLjI3OEM0LjMwOCwxLjQxNyw0LjgyMSwxLjQxNyw1LjEzNSwxLjczICBMMTEuNDA1LDhjMC4zMTQsMC4zMTQsMC44MjgsMC4zMTQsMS4xNDEsMC4wMDFsNi4yNzYtNi4yNjdjMC4zMTItMC4zMTIsMC44MjYtMC4zMTIsMS4xNDEsMEwyMi4yNDUsNC4wMTV6XCIvPjwvc3ZnPic7XG59XG5cbmZ1bmN0aW9uIHJvd251bShjZWxsLCBmb3JtYXR0ZXJQYXJhbXMsIG9uUmVuZGVyZWQpe1xuXHR2YXIgY29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuXHR2YXIgcm93ID0gY2VsbC5nZXRSb3coKTtcblxuXHRyb3cud2F0Y2hQb3NpdGlvbigocG9zaXRpb24pID0+IHtcblx0XHRjb250ZW50LmlubmVyVGV4dCA9IHBvc2l0aW9uO1xuXHR9KTtcblx0XG5cdHJldHVybiBjb250ZW50O1xufVxuXG5mdW5jdGlvbiBoYW5kbGUoY2VsbCwgZm9ybWF0dGVyUGFyYW1zLCBvblJlbmRlcmVkKXtcblx0Y2VsbC5nZXRFbGVtZW50KCkuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1yb3ctaGFuZGxlXCIpO1xuXHRyZXR1cm4gXCI8ZGl2IGNsYXNzPSd0YWJ1bGF0b3Itcm93LWhhbmRsZS1ib3gnPjxkaXYgY2xhc3M9J3RhYnVsYXRvci1yb3ctaGFuZGxlLWJhcic+PC9kaXY+PGRpdiBjbGFzcz0ndGFidWxhdG9yLXJvdy1oYW5kbGUtYmFyJz48L2Rpdj48ZGl2IGNsYXNzPSd0YWJ1bGF0b3Itcm93LWhhbmRsZS1iYXInPjwvZGl2PjwvZGl2PlwiO1xufVxuXG5mdW5jdGlvbiByZXNwb25zaXZlQ29sbGFwc2UoY2VsbCwgZm9ybWF0dGVyUGFyYW1zLCBvblJlbmRlcmVkKXtcblx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxcblx0Y29uZmlnID0gY2VsbC5nZXRSb3coKS5fcm93Lm1vZHVsZXMucmVzcG9uc2l2ZUxheW91dDtcblxuXHRlbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2UtdG9nZ2xlXCIpO1xuXHRcblx0ZWwuaW5uZXJIVE1MID0gYDxzdmcgY2xhc3M9J3RhYnVsYXRvci1yZXNwb25zaXZlLWNvbGxhcHNlLXRvZ2dsZS1vcGVuJyB2aWV3Ym94PVwiMCAwIDI0IDI0XCI+XG4gIDxsaW5lIHgxPVwiN1wiIHkxPVwiMTJcIiB4Mj1cIjE3XCIgeTI9XCIxMlwiIGZpbGw9XCJub25lXCIgc3Ryb2tlLXdpZHRoPVwiM1wiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiAvPlxuICA8bGluZSB5MT1cIjdcIiB4MT1cIjEyXCIgeTI9XCIxN1wiIHgyPVwiMTJcIiBmaWxsPVwibm9uZVwiIHN0cm9rZS13aWR0aD1cIjNcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgLz5cbjwvc3ZnPlxuXG48c3ZnIGNsYXNzPSd0YWJ1bGF0b3ItcmVzcG9uc2l2ZS1jb2xsYXBzZS10b2dnbGUtY2xvc2UnIHZpZXdib3g9XCIwIDAgMjQgMjRcIj5cbiAgPGxpbmUgeDE9XCI3XCIgeTE9XCIxMlwiIHgyPVwiMTdcIiB5Mj1cIjEyXCIgIGZpbGw9XCJub25lXCIgc3Ryb2tlLXdpZHRoPVwiM1wiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiAvPlxuPC9zdmc+YDtcblxuXHRjZWxsLmdldEVsZW1lbnQoKS5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXJvdy1oYW5kbGVcIik7XG5cblx0ZnVuY3Rpb24gdG9nZ2xlTGlzdChpc09wZW4pe1xuXHRcdHZhciBjb2xsYXBzZUVsID0gY29uZmlnLmVsZW1lbnQ7XG5cblx0XHRjb25maWcub3BlbiA9IGlzT3BlbjtcblxuXHRcdGlmKGNvbGxhcHNlRWwpe1xuXG5cdFx0XHRpZihjb25maWcub3Blbil7XG5cdFx0XHRcdGVsLmNsYXNzTGlzdC5hZGQoXCJvcGVuXCIpO1xuXHRcdFx0XHRjb2xsYXBzZUVsLnN0eWxlLmRpc3BsYXkgPSAnJztcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0ZWwuY2xhc3NMaXN0LnJlbW92ZShcIm9wZW5cIik7XG5cdFx0XHRcdGNvbGxhcHNlRWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRlbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSl7XG5cdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHR0b2dnbGVMaXN0KCFjb25maWcub3Blbik7XG5cdFx0Y2VsbC5nZXRUYWJsZSgpLnJvd01hbmFnZXIuYWRqdXN0VGFibGVTaXplKCk7XG5cdH0pO1xuXG5cdHRvZ2dsZUxpc3QoY29uZmlnLm9wZW4pO1xuXG5cdHJldHVybiBlbDtcbn1cblxuZnVuY3Rpb24gcm93U2VsZWN0aW9uKGNlbGwsIGZvcm1hdHRlclBhcmFtcywgb25SZW5kZXJlZCl7XG5cdHZhciBjaGVja2JveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0dmFyIGJsb2NrZWQgPSBmYWxzZTtcblxuXHRjaGVja2JveC50eXBlID0gJ2NoZWNrYm94JztcblxuXHRjaGVja2JveC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIFwiU2VsZWN0IFJvd1wiKTtcblx0XG5cdGlmKHRoaXMudGFibGUubW9kRXhpc3RzKFwic2VsZWN0Um93XCIsIHRydWUpKXtcblxuXHRcdGNoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9KTtcblxuXHRcdGlmKHR5cGVvZiBjZWxsLmdldFJvdyA9PSAnZnVuY3Rpb24nKXtcblx0XHRcdHZhciByb3cgPSBjZWxsLmdldFJvdygpO1xuXG5cdFx0XHRpZihyb3cgaW5zdGFuY2VvZiBSb3dDb21wb25lbnQpe1xuXG5cdFx0XHRcdGNoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgKGUpID0+IHtcblx0XHRcdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuc2VsZWN0YWJsZVJhbmdlTW9kZSA9PT0gXCJjbGlja1wiKXtcblx0XHRcdFx0XHRcdGlmKCFibG9ja2VkKXtcblx0XHRcdFx0XHRcdFx0cm93LnRvZ2dsZVNlbGVjdCgpO1xuXHRcdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0XHRibG9ja2VkID0gZmFsc2U7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0cm93LnRvZ2dsZVNlbGVjdCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnNlbGVjdGFibGVSYW5nZU1vZGUgPT09IFwiY2xpY2tcIil7XG5cdFx0XHRcdFx0Y2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG5cdFx0XHRcdFx0XHRibG9ja2VkID0gdHJ1ZTtcblx0XHRcdFx0XHRcdHRoaXMudGFibGUubW9kdWxlcy5zZWxlY3RSb3cuaGFuZGxlQ29tcGxleFJvd0NsaWNrKHJvdy5fcm93LCBlKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNoZWNrYm94LmNoZWNrZWQgPSByb3cuaXNTZWxlY3RlZCAmJiByb3cuaXNTZWxlY3RlZCgpO1xuXHRcdFx0XHR0aGlzLnRhYmxlLm1vZHVsZXMuc2VsZWN0Um93LnJlZ2lzdGVyUm93U2VsZWN0Q2hlY2tib3gocm93LCBjaGVja2JveCk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGNoZWNrYm94ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRjaGVja2JveC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIChlKSA9PiB7XG5cdFx0XHRcdGlmKHRoaXMudGFibGUubW9kdWxlcy5zZWxlY3RSb3cuc2VsZWN0ZWRSb3dzLmxlbmd0aCl7XG5cdFx0XHRcdFx0dGhpcy50YWJsZS5kZXNlbGVjdFJvdygpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy50YWJsZS5zZWxlY3RSb3coZm9ybWF0dGVyUGFyYW1zLnJvd1JhbmdlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMudGFibGUubW9kdWxlcy5zZWxlY3RSb3cucmVnaXN0ZXJIZWFkZXJTZWxlY3RDaGVja2JveChjaGVja2JveCk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNoZWNrYm94O1xufVxuXG52YXIgZGVmYXVsdEZvcm1hdHRlcnMgPSB7XG5cdHBsYWludGV4dDpwbGFpbnRleHQsXG5cdGh0bWw6aHRtbCQxLFxuXHR0ZXh0YXJlYTp0ZXh0YXJlYSQxLFxuXHRtb25leTptb25leSxcblx0bGluazpsaW5rLFxuXHRpbWFnZTppbWFnZSxcblx0dGlja0Nyb3NzOnRpY2tDcm9zcyQxLFxuXHRkYXRldGltZTpkYXRldGltZSQxLFxuXHRkYXRldGltZWRpZmY6ZGF0ZXRpbWVkaWZmLFxuXHRsb29rdXA6bG9va3VwLFxuXHRzdGFyOnN0YXIkMSxcblx0dHJhZmZpYzp0cmFmZmljLFxuXHRwcm9ncmVzczpwcm9ncmVzcyQxLFxuXHRjb2xvcjpjb2xvcixcblx0YnV0dG9uVGljazpidXR0b25UaWNrLFxuXHRidXR0b25Dcm9zczpidXR0b25Dcm9zcyxcblx0cm93bnVtOnJvd251bSxcblx0aGFuZGxlOmhhbmRsZSxcblx0cmVzcG9uc2l2ZUNvbGxhcHNlOnJlc3BvbnNpdmVDb2xsYXBzZSxcblx0cm93U2VsZWN0aW9uOnJvd1NlbGVjdGlvbixcbn07XG5cbmNsYXNzIEZvcm1hdCBleHRlbmRzIE1vZHVsZXtcblx0XG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImZvcm1hdHRlclwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiZm9ybWF0dGVyUGFyYW1zXCIpO1xuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJmb3JtYXR0ZXJQcmludFwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiZm9ybWF0dGVyUHJpbnRQYXJhbXNcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImZvcm1hdHRlckNsaXBib2FyZFwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiZm9ybWF0dGVyQ2xpcGJvYXJkUGFyYW1zXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJmb3JtYXR0ZXJIdG1sT3V0cHV0XCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJmb3JtYXR0ZXJIdG1sT3V0cHV0UGFyYW1zXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJ0aXRsZUZvcm1hdHRlclwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwidGl0bGVGb3JtYXR0ZXJQYXJhbXNcIik7XG5cdH1cblx0XG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLnN1YnNjcmliZShcImNlbGwtZm9ybWF0XCIsIHRoaXMuZm9ybWF0VmFsdWUuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjZWxsLXJlbmRlcmVkXCIsIHRoaXMuY2VsbFJlbmRlcmVkLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWxheW91dFwiLCB0aGlzLmluaXRpYWxpemVDb2x1bW4uYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tZm9ybWF0XCIsIHRoaXMuZm9ybWF0SGVhZGVyLmJpbmQodGhpcykpO1xuXHR9XG5cdFxuXHQvL2luaXRpYWxpemUgY29sdW1uIGZvcm1hdHRlclxuXHRpbml0aWFsaXplQ29sdW1uKGNvbHVtbil7XG5cdFx0Y29sdW1uLm1vZHVsZXMuZm9ybWF0ID0gdGhpcy5sb29rdXBGb3JtYXR0ZXIoY29sdW1uLCBcIlwiKTtcblx0XHRcblx0XHRpZih0eXBlb2YgY29sdW1uLmRlZmluaXRpb24uZm9ybWF0dGVyUHJpbnQgIT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0Y29sdW1uLm1vZHVsZXMuZm9ybWF0LnByaW50ID0gdGhpcy5sb29rdXBGb3JtYXR0ZXIoY29sdW1uLCBcIlByaW50XCIpO1xuXHRcdH1cblx0XHRcblx0XHRpZih0eXBlb2YgY29sdW1uLmRlZmluaXRpb24uZm9ybWF0dGVyQ2xpcGJvYXJkICE9PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdGNvbHVtbi5tb2R1bGVzLmZvcm1hdC5jbGlwYm9hcmQgPSB0aGlzLmxvb2t1cEZvcm1hdHRlcihjb2x1bW4sIFwiQ2xpcGJvYXJkXCIpO1xuXHRcdH1cblx0XHRcblx0XHRpZih0eXBlb2YgY29sdW1uLmRlZmluaXRpb24uZm9ybWF0dGVySHRtbE91dHB1dCAhPT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRjb2x1bW4ubW9kdWxlcy5mb3JtYXQuaHRtbE91dHB1dCA9IHRoaXMubG9va3VwRm9ybWF0dGVyKGNvbHVtbiwgXCJIdG1sT3V0cHV0XCIpO1xuXHRcdH1cblx0fVxuXHRcblx0bG9va3VwRm9ybWF0dGVyKGNvbHVtbiwgdHlwZSl7XG5cdFx0dmFyIGNvbmZpZyA9IHtwYXJhbXM6Y29sdW1uLmRlZmluaXRpb25bXCJmb3JtYXR0ZXJcIiArIHR5cGUgKyBcIlBhcmFtc1wiXSB8fCB7fX0sXG5cdFx0Zm9ybWF0dGVyID0gY29sdW1uLmRlZmluaXRpb25bXCJmb3JtYXR0ZXJcIiArIHR5cGVdO1xuXHRcdFxuXHRcdC8vc2V0IGNvbHVtbiBmb3JtYXR0ZXJcblx0XHRzd2l0Y2godHlwZW9mIGZvcm1hdHRlcil7XG5cdFx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRcdGlmKEZvcm1hdC5mb3JtYXR0ZXJzW2Zvcm1hdHRlcl0pe1xuXHRcdFx0XHRcdGNvbmZpZy5mb3JtYXR0ZXIgPSBGb3JtYXQuZm9ybWF0dGVyc1tmb3JtYXR0ZXJdO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiRm9ybWF0dGVyIEVycm9yIC0gTm8gc3VjaCBmb3JtYXR0ZXIgZm91bmQ6IFwiLCBmb3JtYXR0ZXIpO1xuXHRcdFx0XHRcdGNvbmZpZy5mb3JtYXR0ZXIgPSBGb3JtYXQuZm9ybWF0dGVycy5wbGFpbnRleHQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGNhc2UgXCJmdW5jdGlvblwiOlxuXHRcdFx0XHRjb25maWcuZm9ybWF0dGVyID0gZm9ybWF0dGVyO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0Y29uZmlnLmZvcm1hdHRlciA9IEZvcm1hdC5mb3JtYXR0ZXJzLnBsYWludGV4dDtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBjb25maWc7XG5cdH1cblx0XG5cdGNlbGxSZW5kZXJlZChjZWxsKXtcblx0XHRpZihjZWxsLm1vZHVsZXMuZm9ybWF0ICYmIGNlbGwubW9kdWxlcy5mb3JtYXQucmVuZGVyZWRDYWxsYmFjayAmJiAhY2VsbC5tb2R1bGVzLmZvcm1hdC5yZW5kZXJlZCl7XG5cdFx0XHRjZWxsLm1vZHVsZXMuZm9ybWF0LnJlbmRlcmVkQ2FsbGJhY2soKTtcblx0XHRcdGNlbGwubW9kdWxlcy5mb3JtYXQucmVuZGVyZWQgPSB0cnVlO1xuXHRcdH1cblx0fVxuXHRcblx0Ly9yZXR1cm4gYSBmb3JtYXR0ZWQgdmFsdWUgZm9yIGEgY29sdW1uIGhlYWRlclxuXHRmb3JtYXRIZWFkZXIoY29sdW1uLCB0aXRsZSwgZWwpe1xuXHRcdHZhciBmb3JtYXR0ZXIsIHBhcmFtcywgb25SZW5kZXJlZCwgbW9ja0NlbGw7XG5cdFx0XG5cdFx0aWYoY29sdW1uLmRlZmluaXRpb24udGl0bGVGb3JtYXR0ZXIpe1xuXHRcdFx0Zm9ybWF0dGVyID0gdGhpcy5nZXRGb3JtYXR0ZXIoY29sdW1uLmRlZmluaXRpb24udGl0bGVGb3JtYXR0ZXIpO1xuXHRcdFx0XG5cdFx0XHRvblJlbmRlcmVkID0gKGNhbGxiYWNrKSA9PiB7XG5cdFx0XHRcdGNvbHVtbi50aXRsZUZvcm1hdHRlclJlbmRlcmVkID0gY2FsbGJhY2s7XG5cdFx0XHR9O1xuXHRcdFx0XG5cdFx0XHRtb2NrQ2VsbCA9IHtcblx0XHRcdFx0Z2V0VmFsdWU6ZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRyZXR1cm4gdGl0bGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGdldEVsZW1lbnQ6ZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRyZXR1cm4gZWw7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGdldFR5cGU6ZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRyZXR1cm4gXCJoZWFkZXJcIjtcblx0XHRcdFx0fSxcblx0XHRcdFx0Z2V0Q29sdW1uOmZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbHVtbi5nZXRDb21wb25lbnQoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0Z2V0VGFibGU6KCkgPT4ge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzLnRhYmxlO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0XG5cdFx0XHRwYXJhbXMgPSBjb2x1bW4uZGVmaW5pdGlvbi50aXRsZUZvcm1hdHRlclBhcmFtcyB8fCB7fTtcblx0XHRcdFxuXHRcdFx0cGFyYW1zID0gdHlwZW9mIHBhcmFtcyA9PT0gXCJmdW5jdGlvblwiID8gcGFyYW1zKCkgOiBwYXJhbXM7XG5cdFx0XHRcblx0XHRcdHJldHVybiBmb3JtYXR0ZXIuY2FsbCh0aGlzLCBtb2NrQ2VsbCwgcGFyYW1zLCBvblJlbmRlcmVkKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRyZXR1cm4gdGl0bGU7XG5cdFx0fVxuXHR9XG5cdFxuXHRcblx0Ly9yZXR1cm4gYSBmb3JtYXR0ZWQgdmFsdWUgZm9yIGEgY2VsbFxuXHRmb3JtYXRWYWx1ZShjZWxsKXtcblx0XHR2YXIgY29tcG9uZW50ID0gY2VsbC5nZXRDb21wb25lbnQoKSxcblx0XHRwYXJhbXMgPSB0eXBlb2YgY2VsbC5jb2x1bW4ubW9kdWxlcy5mb3JtYXQucGFyYW1zID09PSBcImZ1bmN0aW9uXCIgPyBjZWxsLmNvbHVtbi5tb2R1bGVzLmZvcm1hdC5wYXJhbXMoY29tcG9uZW50KSA6IGNlbGwuY29sdW1uLm1vZHVsZXMuZm9ybWF0LnBhcmFtcztcblx0XHRcblx0XHRmdW5jdGlvbiBvblJlbmRlcmVkKGNhbGxiYWNrKXtcblx0XHRcdGlmKCFjZWxsLm1vZHVsZXMuZm9ybWF0KXtcblx0XHRcdFx0Y2VsbC5tb2R1bGVzLmZvcm1hdCA9IHt9O1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRjZWxsLm1vZHVsZXMuZm9ybWF0LnJlbmRlcmVkQ2FsbGJhY2sgPSBjYWxsYmFjaztcblx0XHRcdGNlbGwubW9kdWxlcy5mb3JtYXQucmVuZGVyZWQgPSBmYWxzZTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIGNlbGwuY29sdW1uLm1vZHVsZXMuZm9ybWF0LmZvcm1hdHRlci5jYWxsKHRoaXMsIGNvbXBvbmVudCwgcGFyYW1zLCBvblJlbmRlcmVkKTtcblx0fVxuXHRcblx0Zm9ybWF0RXhwb3J0VmFsdWUoY2VsbCwgdHlwZSl7XG5cdFx0dmFyIGZvcm1hdHRlciA9IGNlbGwuY29sdW1uLm1vZHVsZXMuZm9ybWF0W3R5cGVdLFxuXHRcdHBhcmFtcztcblx0XHRcblx0XHRpZihmb3JtYXR0ZXIpe1xuXHRcdFx0cGFyYW1zID0gdHlwZW9mIGZvcm1hdHRlci5wYXJhbXMgPT09IFwiZnVuY3Rpb25cIiA/IGZvcm1hdHRlci5wYXJhbXMoY2VsbC5nZXRDb21wb25lbnQoKSkgOiBmb3JtYXR0ZXIucGFyYW1zO1xuXHRcdFx0XG5cdFx0XHRmdW5jdGlvbiBvblJlbmRlcmVkKGNhbGxiYWNrKXtcblx0XHRcdFx0aWYoIWNlbGwubW9kdWxlcy5mb3JtYXQpe1xuXHRcdFx0XHRcdGNlbGwubW9kdWxlcy5mb3JtYXQgPSB7fTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0Y2VsbC5tb2R1bGVzLmZvcm1hdC5yZW5kZXJlZENhbGxiYWNrID0gY2FsbGJhY2s7XG5cdFx0XHRcdGNlbGwubW9kdWxlcy5mb3JtYXQucmVuZGVyZWQgPSBmYWxzZTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0cmV0dXJuIGZvcm1hdHRlci5mb3JtYXR0ZXIuY2FsbCh0aGlzLCBjZWxsLmdldENvbXBvbmVudCgpLCBwYXJhbXMsIG9uUmVuZGVyZWQpO1xuXHRcdFx0XG5cdFx0fWVsc2Uge1xuXHRcdFx0cmV0dXJuIHRoaXMuZm9ybWF0VmFsdWUoY2VsbCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRzYW5pdGl6ZUhUTUwodmFsdWUpe1xuXHRcdGlmKHZhbHVlKXtcblx0XHRcdHZhciBlbnRpdHlNYXAgPSB7XG5cdFx0XHRcdCcmJzogJyZhbXA7Jyxcblx0XHRcdFx0JzwnOiAnJmx0OycsXG5cdFx0XHRcdCc+JzogJyZndDsnLFxuXHRcdFx0XHQnXCInOiAnJnF1b3Q7Jyxcblx0XHRcdFx0XCInXCI6ICcmIzM5OycsXG5cdFx0XHRcdCcvJzogJyYjeDJGOycsXG5cdFx0XHRcdCdgJzogJyYjeDYwOycsXG5cdFx0XHRcdCc9JzogJyYjeDNEOydcblx0XHRcdH07XG5cdFx0XHRcblx0XHRcdHJldHVybiBTdHJpbmcodmFsdWUpLnJlcGxhY2UoL1smPD5cIidgPS9dL2csIGZ1bmN0aW9uIChzKSB7XG5cdFx0XHRcdHJldHVybiBlbnRpdHlNYXBbc107XG5cdFx0XHR9KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXHR9XG5cdFxuXHRlbXB0eVRvU3BhY2UodmFsdWUpe1xuXHRcdHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIgfHwgdmFsdWUgPT09IFwiXCIgPyBcIiZuYnNwO1wiIDogdmFsdWU7XG5cdH1cblx0XG5cdC8vZ2V0IGZvcm1hdHRlciBmb3IgY2VsbFxuXHRnZXRGb3JtYXR0ZXIoZm9ybWF0dGVyKXtcblx0XHRzd2l0Y2godHlwZW9mIGZvcm1hdHRlcil7XG5cdFx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRcdGlmKEZvcm1hdC5mb3JtYXR0ZXJzW2Zvcm1hdHRlcl0pe1xuXHRcdFx0XHRcdGZvcm1hdHRlciA9IEZvcm1hdC5mb3JtYXR0ZXJzW2Zvcm1hdHRlcl07XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJGb3JtYXR0ZXIgRXJyb3IgLSBObyBzdWNoIGZvcm1hdHRlciBmb3VuZDogXCIsIGZvcm1hdHRlcik7XG5cdFx0XHRcdFx0Zm9ybWF0dGVyID0gRm9ybWF0LmZvcm1hdHRlcnMucGxhaW50ZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRjYXNlIFwiZnVuY3Rpb25cIjpcblx0XHRcdC8vQ3VzdG9tIGZvcm1hdHRlciBGdW5jdGlvbiwgZG8gbm90aGluZ1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0Zm9ybWF0dGVyID0gRm9ybWF0LmZvcm1hdHRlcnMucGxhaW50ZXh0O1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIGZvcm1hdHRlcjtcblx0fVxufVxuXG5Gb3JtYXQubW9kdWxlTmFtZSA9IFwiZm9ybWF0XCI7XG5cbi8vbG9hZCBkZWZhdWx0c1xuRm9ybWF0LmZvcm1hdHRlcnMgPSBkZWZhdWx0Rm9ybWF0dGVycztcblxuY2xhc3MgRnJvemVuQ29sdW1ucyBleHRlbmRzIE1vZHVsZXtcblx0XG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cdFx0XG5cdFx0dGhpcy5sZWZ0Q29sdW1ucyA9IFtdO1xuXHRcdHRoaXMucmlnaHRDb2x1bW5zID0gW107XG5cdFx0dGhpcy5pbml0aWFsaXphdGlvbk1vZGUgPSBcImxlZnRcIjtcblx0XHR0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuXHRcdHRoaXMuYmxvY2tlZCA9IHRydWU7XG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImZyb3plblwiKTtcblx0fVxuXHRcblx0Ly9yZXNldCBpbml0aWFsIHN0YXRlXG5cdHJlc2V0KCl7XG5cdFx0dGhpcy5pbml0aWFsaXphdGlvbk1vZGUgPSBcImxlZnRcIjtcblx0XHR0aGlzLmxlZnRDb2x1bW5zID0gW107XG5cdFx0dGhpcy5yaWdodENvbHVtbnMgPSBbXTtcblx0XHR0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuXHR9XG5cdFxuXHRpbml0aWFsaXplKCl7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjZWxsLWxheW91dFwiLCB0aGlzLmxheW91dENlbGwuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4taW5pdFwiLCB0aGlzLmluaXRpYWxpemVDb2x1bW4uYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4td2lkdGhcIiwgdGhpcy5sYXlvdXQuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctbGF5b3V0LWFmdGVyXCIsIHRoaXMubGF5b3V0Um93LmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwidGFibGUtbGF5b3V0XCIsIHRoaXMubGF5b3V0LmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1ucy1sb2FkaW5nXCIsIHRoaXMucmVzZXQuYmluZCh0aGlzKSk7XG5cdFx0XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tYWRkXCIsIHRoaXMucmVpbml0aWFsaXplQ29sdW1ucy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1kZWxldGVcIiwgdGhpcy5yZWluaXRpYWxpemVDb2x1bW5zLmJpbmQodGhpcykpO1xuXHRcdFxuXHRcdHRoaXMuc3Vic2NyaWJlKFwidGFibGUtcmVkcmF3XCIsIHRoaXMubGF5b3V0LmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwibGF5b3V0LXJlZnJlc2hpbmdcIiwgdGhpcy5ibG9ja0xheW91dC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImxheW91dC1yZWZyZXNoZWRcIiwgdGhpcy51bmJsb2NrTGF5b3V0LmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwic2Nyb2xsYmFyLXZlcnRpY2FsXCIsIHRoaXMuYWRqdXN0Rm9yU2Nyb2xsYmFyLmJpbmQodGhpcykpO1xuXHR9XG5cdFxuXHRibG9ja0xheW91dCgpe1xuXHRcdHRoaXMuYmxvY2tlZCA9IHRydWU7XG5cdH1cblx0XG5cdHVuYmxvY2tMYXlvdXQoKXtcblx0XHR0aGlzLmJsb2NrZWQgPSBmYWxzZTtcblx0fVxuXHRcblx0bGF5b3V0Q2VsbChjZWxsKXtcblx0XHR0aGlzLmxheW91dEVsZW1lbnQoY2VsbC5lbGVtZW50LCBjZWxsLmNvbHVtbik7XG5cdH1cblx0XG5cdHJlaW5pdGlhbGl6ZUNvbHVtbnMoKXtcblx0XHR0aGlzLnJlc2V0KCk7XG5cdFx0XG5cdFx0dGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmNvbHVtbnNCeUluZGV4LmZvckVhY2goKGNvbHVtbikgPT4ge1xuXHRcdFx0dGhpcy5pbml0aWFsaXplQ29sdW1uKGNvbHVtbik7XG5cdFx0fSk7XG5cdH1cblx0XG5cdC8vaW5pdGlhbGl6ZSBzcGVjaWZpYyBjb2x1bW5cblx0aW5pdGlhbGl6ZUNvbHVtbihjb2x1bW4pe1xuXHRcdHZhciBjb25maWcgPSB7bWFyZ2luOjAsIGVkZ2U6ZmFsc2V9O1xuXHRcdFxuXHRcdGlmKCFjb2x1bW4uaXNHcm91cCl7XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMuZnJvemVuQ2hlY2soY29sdW1uKSl7XG5cdFx0XHRcdFxuXHRcdFx0XHRjb25maWcucG9zaXRpb24gPSB0aGlzLmluaXRpYWxpemF0aW9uTW9kZTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKHRoaXMuaW5pdGlhbGl6YXRpb25Nb2RlID09IFwibGVmdFwiKXtcblx0XHRcdFx0XHR0aGlzLmxlZnRDb2x1bW5zLnB1c2goY29sdW1uKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHRoaXMucmlnaHRDb2x1bW5zLnVuc2hpZnQoY29sdW1uKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5hY3RpdmUgPSB0cnVlO1xuXHRcdFx0XHRcblx0XHRcdFx0Y29sdW1uLm1vZHVsZXMuZnJvemVuID0gY29uZmlnO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmluaXRpYWxpemF0aW9uTW9kZSA9IFwicmlnaHRcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdGZyb3plbkNoZWNrKGNvbHVtbil7XG5cdFx0aWYoY29sdW1uLnBhcmVudC5pc0dyb3VwICYmIGNvbHVtbi5kZWZpbml0aW9uLmZyb3plbil7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJGcm96ZW4gQ29sdW1uIEVycm9yIC0gUGFyZW50IGNvbHVtbiBncm91cCBtdXN0IGJlIGZyb3plbiwgbm90IGluZGl2aWR1YWwgY29sdW1ucyBvciBzdWIgY29sdW1uIGdyb3Vwc1wiKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYoY29sdW1uLnBhcmVudC5pc0dyb3VwKXtcblx0XHRcdHJldHVybiB0aGlzLmZyb3plbkNoZWNrKGNvbHVtbi5wYXJlbnQpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJldHVybiBjb2x1bW4uZGVmaW5pdGlvbi5mcm96ZW47XG5cdFx0fVxuXHR9XG5cdFxuXHQvL2xheW91dCBjYWxjdWxhdGlvbiByb3dzXG5cdGxheW91dENhbGNSb3dzKCl7XG5cdFx0aWYodGhpcy50YWJsZS5tb2RFeGlzdHMoXCJjb2x1bW5DYWxjc1wiKSl7XG5cdFx0XHRpZih0aGlzLnRhYmxlLm1vZHVsZXMuY29sdW1uQ2FsY3MudG9wSW5pdGlhbGl6ZWQgJiYgdGhpcy50YWJsZS5tb2R1bGVzLmNvbHVtbkNhbGNzLnRvcFJvdyl7XG5cdFx0XHRcdHRoaXMubGF5b3V0Um93KHRoaXMudGFibGUubW9kdWxlcy5jb2x1bW5DYWxjcy50b3BSb3cpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZih0aGlzLnRhYmxlLm1vZHVsZXMuY29sdW1uQ2FsY3MuYm90SW5pdGlhbGl6ZWQgJiYgdGhpcy50YWJsZS5tb2R1bGVzLmNvbHVtbkNhbGNzLmJvdFJvdyl7XG5cdFx0XHRcdHRoaXMubGF5b3V0Um93KHRoaXMudGFibGUubW9kdWxlcy5jb2x1bW5DYWxjcy5ib3RSb3cpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZih0aGlzLnRhYmxlLm1vZEV4aXN0cyhcImdyb3VwUm93c1wiKSl7XG5cdFx0XHRcdHRoaXMubGF5b3V0R3JvdXBDYWxjcyh0aGlzLnRhYmxlLm1vZHVsZXMuZ3JvdXBSb3dzLmdldEdyb3VwcygpKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdGxheW91dEdyb3VwQ2FsY3MoZ3JvdXBzKXtcblx0XHRncm91cHMuZm9yRWFjaCgoZ3JvdXApID0+IHtcblx0XHRcdGlmKGdyb3VwLmNhbGNzLnRvcCl7XG5cdFx0XHRcdHRoaXMubGF5b3V0Um93KGdyb3VwLmNhbGNzLnRvcCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKGdyb3VwLmNhbGNzLmJvdHRvbSl7XG5cdFx0XHRcdHRoaXMubGF5b3V0Um93KGdyb3VwLmNhbGNzLmJvdHRvbSk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKGdyb3VwLmdyb3VwTGlzdCAmJiBncm91cC5ncm91cExpc3QubGVuZ3RoKXtcblx0XHRcdFx0dGhpcy5sYXlvdXRHcm91cENhbGNzKGdyb3VwLmdyb3VwTGlzdCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0XG5cdC8vY2FsY3VsYXRlIGNvbHVtbiBwb3NpdGlvbnMgYW5kIGxheW91dCBoZWFkZXJzXG5cdGxheW91dENvbHVtblBvc2l0aW9uKGFsbENlbGxzKXtcblx0XHR2YXIgbGVmdFBhcmVudHMgPSBbXTtcblx0XHRcblx0XHR2YXIgbGVmdE1hcmdpbiA9IDA7XG5cdFx0dmFyIHJpZ2h0TWFyZ2luID0gMDtcblx0XHRcblx0XHR0aGlzLmxlZnRDb2x1bW5zLmZvckVhY2goKGNvbHVtbiwgaSkgPT4ge1x0XG5cdFx0XHRjb2x1bW4ubW9kdWxlcy5mcm96ZW4ubWFyZ2luVmFsdWUgPSBsZWZ0TWFyZ2luO1xuXHRcdFx0Y29sdW1uLm1vZHVsZXMuZnJvemVuLm1hcmdpbiA9IGNvbHVtbi5tb2R1bGVzLmZyb3plbi5tYXJnaW5WYWx1ZSArIFwicHhcIjtcblx0XHRcdFxuXHRcdFx0aWYoY29sdW1uLnZpc2libGUpe1xuXHRcdFx0XHRsZWZ0TWFyZ2luICs9IGNvbHVtbi5nZXRXaWR0aCgpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihpID09IHRoaXMubGVmdENvbHVtbnMubGVuZ3RoIC0gMSl7XG5cdFx0XHRcdGNvbHVtbi5tb2R1bGVzLmZyb3plbi5lZGdlID0gdHJ1ZTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0Y29sdW1uLm1vZHVsZXMuZnJvemVuLmVkZ2UgPSBmYWxzZTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoY29sdW1uLnBhcmVudC5pc0dyb3VwKXtcblx0XHRcdFx0dmFyIHBhcmVudEVsID0gdGhpcy5nZXRDb2xHcm91cFBhcmVudEVsZW1lbnQoY29sdW1uKTtcblx0XHRcdFx0aWYoIWxlZnRQYXJlbnRzLmluY2x1ZGVzKHBhcmVudEVsKSl7XG5cdFx0XHRcdFx0dGhpcy5sYXlvdXRFbGVtZW50KHBhcmVudEVsLCBjb2x1bW4pO1xuXHRcdFx0XHRcdGxlZnRQYXJlbnRzLnB1c2gocGFyZW50RWwpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihjb2x1bW4ubW9kdWxlcy5mcm96ZW4uZWRnZSl7XG5cdFx0XHRcdFx0cGFyZW50RWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1mcm96ZW4tXCIgKyBjb2x1bW4ubW9kdWxlcy5mcm96ZW4ucG9zaXRpb24pO1xuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMubGF5b3V0RWxlbWVudChjb2x1bW4uZ2V0RWxlbWVudCgpLCBjb2x1bW4pO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihhbGxDZWxscyl7XG5cdFx0XHRcdGNvbHVtbi5jZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5sYXlvdXRFbGVtZW50KGNlbGwuZ2V0RWxlbWVudCh0cnVlKSwgY29sdW1uKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0dGhpcy5yaWdodENvbHVtbnMuZm9yRWFjaCgoY29sdW1uLCBpKSA9PiB7XG5cdFx0XHRcblx0XHRcdGNvbHVtbi5tb2R1bGVzLmZyb3plbi5tYXJnaW5WYWx1ZSA9IHJpZ2h0TWFyZ2luO1xuXHRcdFx0Y29sdW1uLm1vZHVsZXMuZnJvemVuLm1hcmdpbiA9IGNvbHVtbi5tb2R1bGVzLmZyb3plbi5tYXJnaW5WYWx1ZSArIFwicHhcIjtcblx0XHRcdFxuXHRcdFx0aWYoY29sdW1uLnZpc2libGUpe1xuXHRcdFx0XHRyaWdodE1hcmdpbiArPSBjb2x1bW4uZ2V0V2lkdGgoKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoaSA9PSB0aGlzLnJpZ2h0Q29sdW1ucy5sZW5ndGggLSAxKXtcblx0XHRcdFx0Y29sdW1uLm1vZHVsZXMuZnJvemVuLmVkZ2UgPSB0cnVlO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb2x1bW4ubW9kdWxlcy5mcm96ZW4uZWRnZSA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihjb2x1bW4ucGFyZW50LmlzR3JvdXApe1xuXHRcdFx0XHR0aGlzLmxheW91dEVsZW1lbnQodGhpcy5nZXRDb2xHcm91cFBhcmVudEVsZW1lbnQoY29sdW1uKSwgY29sdW1uKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5sYXlvdXRFbGVtZW50KGNvbHVtbi5nZXRFbGVtZW50KCksIGNvbHVtbik7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKGFsbENlbGxzKXtcblx0XHRcdFx0Y29sdW1uLmNlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcblx0XHRcdFx0XHR0aGlzLmxheW91dEVsZW1lbnQoY2VsbC5nZXRFbGVtZW50KHRydWUpLCBjb2x1bW4pO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRcblx0Z2V0Q29sR3JvdXBQYXJlbnRFbGVtZW50KGNvbHVtbil7XG5cdFx0cmV0dXJuIGNvbHVtbi5wYXJlbnQuaXNHcm91cCA/IHRoaXMuZ2V0Q29sR3JvdXBQYXJlbnRFbGVtZW50KGNvbHVtbi5wYXJlbnQpIDogY29sdW1uLmdldEVsZW1lbnQoKTtcblx0fVxuXHRcblx0Ly9sYXlvdXQgY29sdW1ucyBhcHByb3ByaWF0ZWx5XG5cdGxheW91dCgpe1x0XG5cdFx0aWYodGhpcy5hY3RpdmUgJiYgIXRoaXMuYmxvY2tlZCl7XG5cdFx0XG5cdFx0XHQvL2NhbGN1bGF0ZSBsZWZ0IGNvbHVtbnNcblx0XHRcdHRoaXMubGF5b3V0Q29sdW1uUG9zaXRpb24oKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5yZWluaXRpYWxpemVSb3dzKCk7XG5cdFx0XHRcblx0XHRcdHRoaXMubGF5b3V0Q2FsY1Jvd3MoKTtcblx0XHR9XG5cdH1cblx0XG5cdHJlaW5pdGlhbGl6ZVJvd3MoKXtcblx0XHR2YXIgdmlzaWJsZVJvd3MgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0VmlzaWJsZVJvd3ModHJ1ZSk7XG5cdFx0dmFyIG90aGVyUm93cyA9IHRoaXMudGFibGUucm93TWFuYWdlci5nZXRSb3dzKCkuZmlsdGVyKHJvdyA9PiAhdmlzaWJsZVJvd3MuaW5jbHVkZXMocm93KSk7XG5cdFx0XG5cdFx0b3RoZXJSb3dzLmZvckVhY2goKHJvdykgPT57XG5cdFx0XHRyb3cuZGVpbml0aWFsaXplKCk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0dmlzaWJsZVJvd3MuZm9yRWFjaCgocm93KSA9Pntcblx0XHRcdGlmKHJvdy50eXBlID09PSBcInJvd1wiKXtcblx0XHRcdFx0dGhpcy5sYXlvdXRSb3cocm93KTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRcblx0bGF5b3V0Um93KHJvdyl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmxheW91dCA9PT0gXCJmaXREYXRhRmlsbFwiICYmIHRoaXMucmlnaHRDb2x1bW5zLmxlbmd0aCl7XG5cdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0VGFibGVFbGVtZW50KCkuc3R5bGUubWluV2lkdGggPSBcImNhbGMoMTAwJSAtIFwiICsgdGhpcy5yaWdodE1hcmdpbiArIFwiKVwiO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLmxlZnRDb2x1bW5zLmZvckVhY2goKGNvbHVtbikgPT4ge1xuXHRcdFx0dmFyIGNlbGwgPSByb3cuZ2V0Q2VsbChjb2x1bW4pO1xuXHRcdFx0XG5cdFx0XHRpZihjZWxsKXtcblx0XHRcdFx0dGhpcy5sYXlvdXRFbGVtZW50KGNlbGwuZ2V0RWxlbWVudCh0cnVlKSwgY29sdW1uKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0XHR0aGlzLnJpZ2h0Q29sdW1ucy5mb3JFYWNoKChjb2x1bW4pID0+IHtcblx0XHRcdHZhciBjZWxsID0gcm93LmdldENlbGwoY29sdW1uKTtcblx0XHRcdFxuXHRcdFx0aWYoY2VsbCl7XG5cdFx0XHRcdHRoaXMubGF5b3V0RWxlbWVudChjZWxsLmdldEVsZW1lbnQodHJ1ZSksIGNvbHVtbik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0XG5cdGxheW91dEVsZW1lbnQoZWxlbWVudCwgY29sdW1uKXtcblx0XHR2YXIgcG9zaXRpb247XG5cdFx0XG5cdFx0aWYoY29sdW1uLm1vZHVsZXMuZnJvemVuICYmIGVsZW1lbnQpe1xuXHRcdFx0ZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9IFwic3RpY2t5XCI7XG5cblx0XHRcdGlmKHRoaXMudGFibGUucnRsKXtcblx0XHRcdFx0cG9zaXRpb24gPSBjb2x1bW4ubW9kdWxlcy5mcm96ZW4ucG9zaXRpb24gPT09IFwibGVmdFwiID8gXCJyaWdodFwiIDogXCJsZWZ0XCI7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHBvc2l0aW9uID0gY29sdW1uLm1vZHVsZXMuZnJvemVuLnBvc2l0aW9uO1xuXHRcdFx0fVxuXHRcdFxuXHRcdFx0ZWxlbWVudC5zdHlsZVtwb3NpdGlvbl0gPSBjb2x1bW4ubW9kdWxlcy5mcm96ZW4ubWFyZ2luO1xuXG5cdFx0XHRlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItZnJvemVuXCIpO1xuXHRcdFx0XG5cdFx0XHRpZihjb2x1bW4ubW9kdWxlcy5mcm96ZW4uZWRnZSl7XG5cdFx0XHRcdGVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1mcm96ZW4tXCIgKyBjb2x1bW4ubW9kdWxlcy5mcm96ZW4ucG9zaXRpb24pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGFkanVzdEZvclNjcm9sbGJhcih3aWR0aCl7XG5cdFx0aWYodGhpcy5yaWdodENvbHVtbnMubGVuZ3RoKXtcblx0XHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5nZXRDb250ZW50c0VsZW1lbnQoKS5zdHlsZS53aWR0aCA9IFwiY2FsYygxMDAlIC0gXCIgKyB3aWR0aCArIFwicHgpXCI7XG5cdFx0fVxuXHR9XG5cdFxuXHRfY2FsY1NwYWNlKGNvbHVtbnMsIGluZGV4KXtcblx0XHR2YXIgd2lkdGggPSAwO1xuXHRcdFxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgaW5kZXg7IGkrKyl7XG5cdFx0XHRpZihjb2x1bW5zW2ldLnZpc2libGUpe1xuXHRcdFx0XHR3aWR0aCArPSBjb2x1bW5zW2ldLmdldFdpZHRoKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiB3aWR0aDtcblx0fVxufVxuXG5Gcm96ZW5Db2x1bW5zLm1vZHVsZU5hbWUgPSBcImZyb3plbkNvbHVtbnNcIjtcblxuY2xhc3MgRnJvemVuUm93cyBleHRlbmRzIE1vZHVsZXtcblxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXG5cdFx0dGhpcy50b3BFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHR0aGlzLnJvd3MgPSBbXTtcblxuXHRcdC8vcmVnaXN0ZXIgY29tcG9uZW50IGZ1bmN0aW9uc1xuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcInJvd1wiLCBcImZyZWV6ZVwiLCB0aGlzLmZyZWV6ZVJvdy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJyb3dcIiwgXCJ1bmZyZWV6ZVwiLCB0aGlzLnVuZnJlZXplUm93LmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcInJvd1wiLCBcImlzRnJvemVuXCIsIHRoaXMuaXNSb3dGcm96ZW4uYmluZCh0aGlzKSk7XG5cblx0XHQvL3JlZ2lzdGVyIHRhYmxlIG9wdGlvbnNcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJmcm96ZW5Sb3dzRmllbGRcIiwgXCJpZFwiKTsgLy9maWVsZCB0byBjaG9vc2UgZnJvemVuIHJvd3MgYnlcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJmcm96ZW5Sb3dzXCIsIGZhbHNlKTsgLy9ob2xkZXIgZm9yIGZyb3plbiByb3cgaWRlbnRpZmllcnNcblx0fVxuXG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLnJvd3MgPSBbXTtcblxuXHRcdHRoaXMudG9wRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWZyb3plbi1yb3dzLWhvbGRlclwiKTtcblxuXHRcdC8vIHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5lbGVtZW50LmFwcGVuZCh0aGlzLnRvcEVsZW1lbnQpO1xuXHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5nZXRDb250ZW50c0VsZW1lbnQoKS5pbnNlcnRCZWZvcmUodGhpcy50b3BFbGVtZW50LCB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuaGVhZGVyc0VsZW1lbnQubmV4dFNpYmxpbmcpO1xuXG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctZGVsZXRpbmdcIiwgdGhpcy5kZXRhY2hSb3cuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3dzLXZpc2libGVcIiwgdGhpcy52aXNpYmxlUm93cy5iaW5kKHRoaXMpKTtcblxuXHRcdHRoaXMucmVnaXN0ZXJEaXNwbGF5SGFuZGxlcih0aGlzLmdldFJvd3MuYmluZCh0aGlzKSwgMTApO1xuXG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmZyb3plblJvd3Mpe1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJkYXRhLXByb2Nlc3NlZFwiLCB0aGlzLmluaXRpYWxpemVSb3dzLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctYWRkZWRcIiwgdGhpcy5pbml0aWFsaXplUm93LmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJ0YWJsZS1yZWRyYXdpbmdcIiwgdGhpcy5yZXNpemVIb2xkZXJXaWR0aC5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLXJlc2l6ZWRcIiwgdGhpcy5yZXNpemVIb2xkZXJXaWR0aC5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLXNob3dcIiwgdGhpcy5yZXNpemVIb2xkZXJXaWR0aC5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWhpZGVcIiwgdGhpcy5yZXNpemVIb2xkZXJXaWR0aC5iaW5kKHRoaXMpKTtcblx0XHR9XG5cblx0XHR0aGlzLnJlc2l6ZUhvbGRlcldpZHRoKCk7XG5cdH1cblxuXHRyZXNpemVIb2xkZXJXaWR0aCgpe1xuXHRcdHRoaXMudG9wRWxlbWVudC5zdHlsZS5taW5XaWR0aCA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5oZWFkZXJzRWxlbWVudC5vZmZzZXRXaWR0aCArIFwicHhcIjtcblx0fVxuXG5cdGluaXRpYWxpemVSb3dzKCl7XG5cdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldFJvd3MoKS5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdHRoaXMuaW5pdGlhbGl6ZVJvdyhyb3cpO1xuXHRcdH0pO1xuXHR9XG5cblx0aW5pdGlhbGl6ZVJvdyhyb3cpe1xuXHRcdHZhciBmcm96ZW5Sb3dzID0gdGhpcy50YWJsZS5vcHRpb25zLmZyb3plblJvd3MsXG5cdFx0cm93VHlwZSA9IHR5cGVvZiBmcm96ZW5Sb3dzO1xuXG5cdFx0aWYocm93VHlwZSA9PT0gXCJudW1iZXJcIil7XG5cdFx0XHRpZihyb3cuZ2V0UG9zaXRpb24oKSAmJiAocm93LmdldFBvc2l0aW9uKCkgKyB0aGlzLnJvd3MubGVuZ3RoKSA8PSBmcm96ZW5Sb3dzKXtcblx0XHRcdFx0dGhpcy5mcmVlemVSb3cocm93KTtcblx0XHRcdH1cblx0XHR9ZWxzZSBpZihyb3dUeXBlID09PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0aWYoZnJvemVuUm93cy5jYWxsKHRoaXMudGFibGUsIHJvdy5nZXRDb21wb25lbnQoKSkpe1xuXHRcdFx0XHR0aGlzLmZyZWV6ZVJvdyhyb3cpO1xuXHRcdFx0fVxuXHRcdH1lbHNlIGlmKEFycmF5LmlzQXJyYXkoZnJvemVuUm93cykpe1xuXHRcdFx0aWYoZnJvemVuUm93cy5pbmNsdWRlcyhyb3cuZGF0YVt0aGlzLm9wdGlvbnMoXCJmcm96ZW5Sb3dzRmllbGRcIildKSl7XG5cdFx0XHRcdHRoaXMuZnJlZXplUm93KHJvdyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aXNSb3dGcm96ZW4ocm93KXtcblx0XHR2YXIgaW5kZXggPSB0aGlzLnJvd3MuaW5kZXhPZihyb3cpO1xuXHRcdHJldHVybiBpbmRleCA+IC0xO1xuXHR9XG5cblx0aXNGcm96ZW4oKXtcblx0XHRyZXR1cm4gISF0aGlzLnJvd3MubGVuZ3RoO1xuXHR9XG5cblx0dmlzaWJsZVJvd3Modmlld2FibGUsIHJvd3Mpe1xuXHRcdHRoaXMucm93cy5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdHJvd3MucHVzaChyb3cpO1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIHJvd3M7XG5cdH1cblxuXHQvL2ZpbHRlciBmcm96ZW4gcm93cyBvdXQgb2YgZGlzcGxheSBkYXRhXG5cdGdldFJvd3Mocm93cyl7XG5cdFx0dmFyIG91dHB1dCA9IHJvd3Muc2xpY2UoMCk7XG5cblx0XHR0aGlzLnJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3cpe1xuXHRcdFx0dmFyIGluZGV4ID0gb3V0cHV0LmluZGV4T2Yocm93KTtcblxuXHRcdFx0aWYoaW5kZXggPiAtMSl7XG5cdFx0XHRcdG91dHB1dC5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdGZyZWV6ZVJvdyhyb3cpe1xuXHRcdGlmKCFyb3cubW9kdWxlcy5mcm96ZW4pe1xuXHRcdFx0cm93Lm1vZHVsZXMuZnJvemVuID0gdHJ1ZTtcblx0XHRcdHRoaXMudG9wRWxlbWVudC5hcHBlbmRDaGlsZChyb3cuZ2V0RWxlbWVudCgpKTtcblx0XHRcdHJvdy5pbml0aWFsaXplKCk7XG5cdFx0XHRyb3cubm9ybWFsaXplSGVpZ2h0KCk7XG5cdFx0XG5cdFx0XHR0aGlzLnJvd3MucHVzaChyb3cpO1xuXG5cdFx0XHR0aGlzLnJlZnJlc2hEYXRhKGZhbHNlLCBcImRpc3BsYXlcIik7XG5cblx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5hZGp1c3RUYWJsZVNpemUoKTtcblxuXHRcdFx0dGhpcy5zdHlsZVJvd3MoKTtcblxuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkZyZWV6ZSBFcnJvciAtIFJvdyBpcyBhbHJlYWR5IGZyb3plblwiKTtcblx0XHR9XG5cdH1cblxuXHR1bmZyZWV6ZVJvdyhyb3cpe1xuXHRcdGlmKHJvdy5tb2R1bGVzLmZyb3plbil7XG5cblx0XHRcdHJvdy5tb2R1bGVzLmZyb3plbiA9IGZhbHNlO1xuXG5cdFx0XHR0aGlzLmRldGFjaFJvdyhyb3cpO1xuXG5cdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuYWRqdXN0VGFibGVTaXplKCk7XG5cblx0XHRcdHRoaXMucmVmcmVzaERhdGEoZmFsc2UsIFwiZGlzcGxheVwiKTtcblxuXHRcdFx0aWYodGhpcy5yb3dzLmxlbmd0aCl7XG5cdFx0XHRcdHRoaXMuc3R5bGVSb3dzKCk7XG5cdFx0XHR9XG5cblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJGcmVlemUgRXJyb3IgLSBSb3cgaXMgYWxyZWFkeSB1bmZyb3plblwiKTtcblx0XHR9XG5cdH1cblxuXHRkZXRhY2hSb3cocm93KXtcblx0XHR2YXIgaW5kZXggPSB0aGlzLnJvd3MuaW5kZXhPZihyb3cpO1xuXG5cdFx0aWYoaW5kZXggPiAtMSl7XG5cdFx0XHR2YXIgcm93RWwgPSByb3cuZ2V0RWxlbWVudCgpO1xuXG5cdFx0XHRpZihyb3dFbC5wYXJlbnROb2RlKXtcblx0XHRcdFx0cm93RWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChyb3dFbCk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMucm93cy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdH1cblx0fVxuXG5cdHN0eWxlUm93cyhyb3cpe1xuXHRcdHRoaXMucm93cy5mb3JFYWNoKChyb3csIGkpID0+IHtcblx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5zdHlsZVJvdyhyb3csIGkpO1xuXHRcdH0pO1xuXHR9XG59XG5cbkZyb3plblJvd3MubW9kdWxlTmFtZSA9IFwiZnJvemVuUm93c1wiO1xuXG4vL3B1YmxpYyBncm91cCBvYmplY3RcbmNsYXNzIEdyb3VwQ29tcG9uZW50IHtcblx0Y29uc3RydWN0b3IgKGdyb3VwKXtcblx0XHR0aGlzLl9ncm91cCA9IGdyb3VwO1xuXHRcdHRoaXMudHlwZSA9IFwiR3JvdXBDb21wb25lbnRcIjtcblxuXHRcdHJldHVybiBuZXcgUHJveHkodGhpcywge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbih0YXJnZXQsIG5hbWUsIHJlY2VpdmVyKSB7XG5cdFx0XHRcdGlmICh0eXBlb2YgdGFyZ2V0W25hbWVdICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRhcmdldFtuYW1lXTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiB0YXJnZXQuX2dyb3VwLmdyb3VwTWFuYWdlci50YWJsZS5jb21wb25lbnRGdW5jdGlvbkJpbmRlci5oYW5kbGUoXCJncm91cFwiLCB0YXJnZXQuX2dyb3VwLCBuYW1lKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0Z2V0S2V5KCl7XG5cdFx0cmV0dXJuIHRoaXMuX2dyb3VwLmtleTtcblx0fVxuXG5cdGdldEZpZWxkKCl7XG5cdFx0cmV0dXJuIHRoaXMuX2dyb3VwLmZpZWxkO1xuXHR9XG5cblx0Z2V0RWxlbWVudCgpe1xuXHRcdHJldHVybiB0aGlzLl9ncm91cC5lbGVtZW50O1xuXHR9XG5cblx0Z2V0Um93cygpe1xuXHRcdHJldHVybiB0aGlzLl9ncm91cC5nZXRSb3dzKHRydWUpO1xuXHR9XG5cblx0Z2V0U3ViR3JvdXBzKCl7XG5cdFx0cmV0dXJuIHRoaXMuX2dyb3VwLmdldFN1Ykdyb3Vwcyh0cnVlKTtcblx0fVxuXG5cdGdldFBhcmVudEdyb3VwKCl7XG5cdFx0cmV0dXJuIHRoaXMuX2dyb3VwLnBhcmVudCA/IHRoaXMuX2dyb3VwLnBhcmVudC5nZXRDb21wb25lbnQoKSA6IGZhbHNlO1xuXHR9XG5cblx0aXNWaXNpYmxlKCl7XG5cdFx0cmV0dXJuIHRoaXMuX2dyb3VwLnZpc2libGU7XG5cdH1cblxuXHRzaG93KCl7XG5cdFx0dGhpcy5fZ3JvdXAuc2hvdygpO1xuXHR9XG5cblx0aGlkZSgpe1xuXHRcdHRoaXMuX2dyb3VwLmhpZGUoKTtcblx0fVxuXG5cdHRvZ2dsZSgpe1xuXHRcdHRoaXMuX2dyb3VwLnRvZ2dsZVZpc2liaWxpdHkoKTtcblx0fVxuXG5cdHNjcm9sbFRvKHBvc2l0aW9uLCBpZlZpc2libGUpe1xuXHRcdHJldHVybiB0aGlzLl9ncm91cC5ncm91cE1hbmFnZXIudGFibGUucm93TWFuYWdlci5zY3JvbGxUb1Jvdyh0aGlzLl9ncm91cCwgcG9zaXRpb24sIGlmVmlzaWJsZSk7XG5cdH1cblxuXHRfZ2V0U2VsZigpe1xuXHRcdHJldHVybiB0aGlzLl9ncm91cDtcblx0fVxuXG5cdGdldFRhYmxlKCl7XG5cdFx0cmV0dXJuIHRoaXMuX2dyb3VwLmdyb3VwTWFuYWdlci50YWJsZTtcblx0fVxufVxuXG4vL0dyb3VwIGZ1bmN0aW9uc1xuY2xhc3MgR3JvdXB7XG5cdFxuXHRjb25zdHJ1Y3Rvcihncm91cE1hbmFnZXIsIHBhcmVudCwgbGV2ZWwsIGtleSwgZmllbGQsIGdlbmVyYXRvciwgb2xkR3JvdXApe1xuXHRcdHRoaXMuZ3JvdXBNYW5hZ2VyID0gZ3JvdXBNYW5hZ2VyO1xuXHRcdHRoaXMucGFyZW50ID0gcGFyZW50O1xuXHRcdHRoaXMua2V5ID0ga2V5O1xuXHRcdHRoaXMubGV2ZWwgPSBsZXZlbDtcblx0XHR0aGlzLmZpZWxkID0gZmllbGQ7XG5cdFx0dGhpcy5oYXNTdWJHcm91cHMgPSBsZXZlbCA8IChncm91cE1hbmFnZXIuZ3JvdXBJRExvb2t1cHMubGVuZ3RoIC0gMSk7XG5cdFx0dGhpcy5hZGRSb3cgPSB0aGlzLmhhc1N1Ykdyb3VwcyA/IHRoaXMuX2FkZFJvd1RvR3JvdXAgOiB0aGlzLl9hZGRSb3c7XG5cdFx0dGhpcy50eXBlID0gXCJncm91cFwiOyAvL3R5cGUgb2YgZWxlbWVudFxuXHRcdHRoaXMub2xkID0gb2xkR3JvdXA7XG5cdFx0dGhpcy5yb3dzID0gW107XG5cdFx0dGhpcy5ncm91cHMgPSBbXTtcblx0XHR0aGlzLmdyb3VwTGlzdCA9IFtdO1xuXHRcdHRoaXMuZ2VuZXJhdG9yID0gZ2VuZXJhdG9yO1xuXHRcdHRoaXMuZWxlbWVudCA9IGZhbHNlO1xuXHRcdHRoaXMuZWxlbWVudENvbnRlbnRzID0gZmFsc2U7XG5cdFx0dGhpcy5oZWlnaHQgPSAwO1xuXHRcdHRoaXMub3V0ZXJIZWlnaHQgPSAwO1xuXHRcdHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblx0XHR0aGlzLmNhbGNzID0ge307XG5cdFx0dGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuXHRcdHRoaXMubW9kdWxlcyA9IHt9O1xuXHRcdHRoaXMuYXJyb3dFbGVtZW50ID0gZmFsc2U7XG5cdFx0XG5cdFx0dGhpcy52aXNpYmxlID0gb2xkR3JvdXAgPyBvbGRHcm91cC52aXNpYmxlIDogKHR5cGVvZiBncm91cE1hbmFnZXIuc3RhcnRPcGVuW2xldmVsXSAhPT0gXCJ1bmRlZmluZWRcIiA/IGdyb3VwTWFuYWdlci5zdGFydE9wZW5bbGV2ZWxdIDogZ3JvdXBNYW5hZ2VyLnN0YXJ0T3BlblswXSk7XG5cdFx0XG5cdFx0dGhpcy5jb21wb25lbnQgPSBudWxsO1xuXHRcdFxuXHRcdHRoaXMuY3JlYXRlRWxlbWVudHMoKTtcblx0XHR0aGlzLmFkZEJpbmRpbmdzKCk7XG5cdFx0XG5cdFx0dGhpcy5jcmVhdGVWYWx1ZUdyb3VwcygpO1xuXHR9XG5cdFxuXHR3aXBlKGVsZW1lbnRzT25seSl7XG5cdFx0aWYoIWVsZW1lbnRzT25seSl7XG5cdFx0XHRpZih0aGlzLmdyb3VwTGlzdC5sZW5ndGgpe1xuXHRcdFx0XHR0aGlzLmdyb3VwTGlzdC5mb3JFYWNoKGZ1bmN0aW9uKGdyb3VwKXtcblx0XHRcdFx0XHRncm91cC53aXBlKCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLnJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRcdFx0aWYocm93Lm1vZHVsZXMpe1xuXHRcdFx0XHRcdFx0ZGVsZXRlIHJvdy5tb2R1bGVzLmdyb3VwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuZWxlbWVudCA9IGZhbHNlO1xuXHRcdHRoaXMuYXJyb3dFbGVtZW50ID0gZmFsc2U7XG5cdFx0dGhpcy5lbGVtZW50Q29udGVudHMgPSBmYWxzZTtcblx0fVxuXHRcblx0Y3JlYXRlRWxlbWVudHMoKXtcblx0XHR2YXIgYXJyb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdGFycm93LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItYXJyb3dcIik7XG5cdFx0XG5cdFx0dGhpcy5lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHR0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1yb3dcIik7XG5cdFx0dGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItZ3JvdXBcIik7XG5cdFx0dGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItZ3JvdXAtbGV2ZWwtXCIgKyB0aGlzLmxldmVsKTtcblx0XHR0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcInJvd2dyb3VwXCIpO1xuXHRcdFxuXHRcdHRoaXMuYXJyb3dFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHR0aGlzLmFycm93RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWdyb3VwLXRvZ2dsZVwiKTtcblx0XHR0aGlzLmFycm93RWxlbWVudC5hcHBlbmRDaGlsZChhcnJvdyk7XG5cdFx0XG5cdFx0Ly9zZXR1cCBtb3ZhYmxlIHJvd3Ncblx0XHRpZih0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5vcHRpb25zLm1vdmFibGVSb3dzICE9PSBmYWxzZSAmJiB0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5tb2RFeGlzdHMoXCJtb3ZlUm93XCIpKXtcblx0XHRcdHRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLm1vZHVsZXMubW92ZVJvdy5pbml0aWFsaXplR3JvdXBIZWFkZXIodGhpcyk7XG5cdFx0fVxuXHR9XG5cdFxuXHRjcmVhdGVWYWx1ZUdyb3Vwcygpe1xuXHRcdHZhciBsZXZlbCA9IHRoaXMubGV2ZWwgKyAxO1xuXHRcdGlmKHRoaXMuZ3JvdXBNYW5hZ2VyLmFsbG93ZWRWYWx1ZXMgJiYgdGhpcy5ncm91cE1hbmFnZXIuYWxsb3dlZFZhbHVlc1tsZXZlbF0pe1xuXHRcdFx0dGhpcy5ncm91cE1hbmFnZXIuYWxsb3dlZFZhbHVlc1tsZXZlbF0uZm9yRWFjaCgodmFsdWUpID0+IHtcblx0XHRcdFx0dGhpcy5fY3JlYXRlR3JvdXAodmFsdWUsIGxldmVsKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXHRcblx0YWRkQmluZGluZ3MoKXtcblx0XHR2YXIgdG9nZ2xlRWxlbWVudDtcblx0XHRcblx0XHRpZih0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5vcHRpb25zLmdyb3VwVG9nZ2xlRWxlbWVudCl7XG5cdFx0XHR0b2dnbGVFbGVtZW50ID0gdGhpcy5ncm91cE1hbmFnZXIudGFibGUub3B0aW9ucy5ncm91cFRvZ2dsZUVsZW1lbnQgPT0gXCJhcnJvd1wiID8gdGhpcy5hcnJvd0VsZW1lbnQgOiB0aGlzLmVsZW1lbnQ7XG5cdFx0XHRcblx0XHRcdHRvZ2dsZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG5cdFx0XHRcdGlmKHRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLm9wdGlvbnMuZ3JvdXBUb2dnbGVFbGVtZW50ID09PSBcImFycm93XCIpe1xuXHRcdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vYWxsb3cgY2xpY2sgZXZlbnQgdG8gcHJvcGFnYXRlIGJlZm9yZSB0b2dnbGluZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMudG9nZ2xlVmlzaWJpbGl0eSgpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXHRcblx0X2NyZWF0ZUdyb3VwKGdyb3VwSUQsIGxldmVsKXtcblx0XHR2YXIgZ3JvdXBLZXkgPSBsZXZlbCArIFwiX1wiICsgZ3JvdXBJRDtcblx0XHR2YXIgZ3JvdXAgPSBuZXcgR3JvdXAodGhpcy5ncm91cE1hbmFnZXIsIHRoaXMsIGxldmVsLCBncm91cElELCAgdGhpcy5ncm91cE1hbmFnZXIuZ3JvdXBJRExvb2t1cHNbbGV2ZWxdLmZpZWxkLCB0aGlzLmdyb3VwTWFuYWdlci5oZWFkZXJHZW5lcmF0b3JbbGV2ZWxdIHx8IHRoaXMuZ3JvdXBNYW5hZ2VyLmhlYWRlckdlbmVyYXRvclswXSwgdGhpcy5vbGQgPyB0aGlzLm9sZC5ncm91cHNbZ3JvdXBLZXldIDogZmFsc2UpO1xuXHRcdFxuXHRcdHRoaXMuZ3JvdXBzW2dyb3VwS2V5XSA9IGdyb3VwO1xuXHRcdHRoaXMuZ3JvdXBMaXN0LnB1c2goZ3JvdXApO1xuXHR9XG5cdFxuXHRfYWRkUm93VG9Hcm91cChyb3cpe1xuXHRcdFxuXHRcdHZhciBsZXZlbCA9IHRoaXMubGV2ZWwgKyAxO1xuXHRcdFxuXHRcdGlmKHRoaXMuaGFzU3ViR3JvdXBzKXtcblx0XHRcdHZhciBncm91cElEID0gdGhpcy5ncm91cE1hbmFnZXIuZ3JvdXBJRExvb2t1cHNbbGV2ZWxdLmZ1bmMocm93LmdldERhdGEoKSksXG5cdFx0XHRncm91cEtleSA9IGxldmVsICsgXCJfXCIgKyBncm91cElEO1xuXHRcdFx0XG5cdFx0XHRpZih0aGlzLmdyb3VwTWFuYWdlci5hbGxvd2VkVmFsdWVzICYmIHRoaXMuZ3JvdXBNYW5hZ2VyLmFsbG93ZWRWYWx1ZXNbbGV2ZWxdKXtcblx0XHRcdFx0aWYodGhpcy5ncm91cHNbZ3JvdXBLZXldKXtcblx0XHRcdFx0XHR0aGlzLmdyb3Vwc1tncm91cEtleV0uYWRkUm93KHJvdyk7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aWYoIXRoaXMuZ3JvdXBzW2dyb3VwS2V5XSl7XG5cdFx0XHRcdFx0dGhpcy5fY3JlYXRlR3JvdXAoZ3JvdXBJRCwgbGV2ZWwpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLmdyb3Vwc1tncm91cEtleV0uYWRkUm93KHJvdyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRfYWRkUm93KHJvdyl7XG5cdFx0dGhpcy5yb3dzLnB1c2gocm93KTtcblx0XHRyb3cubW9kdWxlcy5ncm91cCA9IHRoaXM7XG5cdH1cblx0XG5cdGluc2VydFJvdyhyb3csIHRvLCBhZnRlcil7XG5cdFx0dmFyIGRhdGEgPSB0aGlzLmNvbmZvcm1Sb3dEYXRhKHt9KTtcblx0XHRcblx0XHRyb3cudXBkYXRlRGF0YShkYXRhKTtcblx0XHRcblx0XHR2YXIgdG9JbmRleCA9IHRoaXMucm93cy5pbmRleE9mKHRvKTtcblx0XHRcblx0XHRpZih0b0luZGV4ID4gLTEpe1xuXHRcdFx0aWYoYWZ0ZXIpe1xuXHRcdFx0XHR0aGlzLnJvd3Muc3BsaWNlKHRvSW5kZXgrMSwgMCwgcm93KTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5yb3dzLnNwbGljZSh0b0luZGV4LCAwLCByb3cpO1xuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGlmKGFmdGVyKXtcblx0XHRcdFx0dGhpcy5yb3dzLnB1c2gocm93KTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5yb3dzLnVuc2hpZnQocm93KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0cm93Lm1vZHVsZXMuZ3JvdXAgPSB0aGlzO1xuXHRcdFxuXHRcdC8vIHRoaXMuZ2VuZXJhdGVHcm91cEhlYWRlckNvbnRlbnRzKCk7XG5cdFx0XG5cdFx0aWYodGhpcy5ncm91cE1hbmFnZXIudGFibGUubW9kRXhpc3RzKFwiY29sdW1uQ2FsY3NcIikgJiYgdGhpcy5ncm91cE1hbmFnZXIudGFibGUub3B0aW9ucy5jb2x1bW5DYWxjcyAhPSBcInRhYmxlXCIpe1xuXHRcdFx0dGhpcy5ncm91cE1hbmFnZXIudGFibGUubW9kdWxlcy5jb2x1bW5DYWxjcy5yZWNhbGNHcm91cCh0aGlzKTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5ncm91cE1hbmFnZXIudXBkYXRlR3JvdXBSb3dzKHRydWUpO1xuXHR9XG5cdFxuXHRzY3JvbGxIZWFkZXIobGVmdCl7XG5cdFx0aWYodGhpcy5hcnJvd0VsZW1lbnQpe1xuXHRcdFx0dGhpcy5hcnJvd0VsZW1lbnQuc3R5bGUubWFyZ2luTGVmdCA9IGxlZnQ7XG5cdFx0XHRcblx0XHRcdHRoaXMuZ3JvdXBMaXN0LmZvckVhY2goZnVuY3Rpb24oY2hpbGQpe1xuXHRcdFx0XHRjaGlsZC5zY3JvbGxIZWFkZXIobGVmdCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblx0XG5cdGdldFJvd0luZGV4KHJvdyl7fVxuXHRcblx0Ly91cGRhdGUgcm93IGRhdGEgdG8gbWF0Y2ggZ3JvdXBpbmcgY29uc3RyYWludHNcblx0Y29uZm9ybVJvd0RhdGEoZGF0YSl7XG5cdFx0aWYodGhpcy5maWVsZCl7XG5cdFx0XHRkYXRhW3RoaXMuZmllbGRdID0gdGhpcy5rZXk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiRGF0YSBDb25mb3JtaW5nIEVycm9yIC0gQ2Fubm90IGNvbmZvcm0gcm93IGRhdGEgdG8gbWF0Y2ggbmV3IGdyb3VwIGFzIGdyb3VwQnkgaXMgYSBmdW5jdGlvblwiKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodGhpcy5wYXJlbnQpe1xuXHRcdFx0ZGF0YSA9IHRoaXMucGFyZW50LmNvbmZvcm1Sb3dEYXRhKGRhdGEpO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gZGF0YTtcblx0fVxuXHRcblx0cmVtb3ZlUm93KHJvdyl7XG5cdFx0dmFyIGluZGV4ID0gdGhpcy5yb3dzLmluZGV4T2Yocm93KTtcblx0XHR2YXIgZWwgPSByb3cuZ2V0RWxlbWVudCgpO1xuXHRcdFxuXHRcdGlmKGluZGV4ID4gLTEpe1xuXHRcdFx0dGhpcy5yb3dzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKCF0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5vcHRpb25zLmdyb3VwVmFsdWVzICYmICF0aGlzLnJvd3MubGVuZ3RoKXtcblx0XHRcdGlmKHRoaXMucGFyZW50KXtcblx0XHRcdFx0dGhpcy5wYXJlbnQucmVtb3ZlR3JvdXAodGhpcyk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMuZ3JvdXBNYW5hZ2VyLnJlbW92ZUdyb3VwKHRoaXMpO1xuXHRcdFx0fVx0XHRcblx0XHRcdFxuXHRcdFx0dGhpcy5ncm91cE1hbmFnZXIudXBkYXRlR3JvdXBSb3dzKHRydWUpO1xuXHRcdFx0XG5cdFx0fWVsc2Uge1xuXHRcdFx0XG5cdFx0XHRpZihlbC5wYXJlbnROb2RlKXtcblx0XHRcdFx0ZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKCF0aGlzLmdyb3VwTWFuYWdlci5ibG9ja1JlZHJhdyl7XG5cdFx0XHRcdHRoaXMuZ2VuZXJhdGVHcm91cEhlYWRlckNvbnRlbnRzKCk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5tb2RFeGlzdHMoXCJjb2x1bW5DYWxjc1wiKSAmJiB0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5vcHRpb25zLmNvbHVtbkNhbGNzICE9IFwidGFibGVcIil7XG5cdFx0XHRcdFx0dGhpcy5ncm91cE1hbmFnZXIudGFibGUubW9kdWxlcy5jb2x1bW5DYWxjcy5yZWNhbGNHcm91cCh0aGlzKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0fVxuXHR9XG5cdFxuXHRyZW1vdmVHcm91cChncm91cCl7XG5cdFx0dmFyIGdyb3VwS2V5ID0gZ3JvdXAubGV2ZWwgKyBcIl9cIiArIGdyb3VwLmtleSxcblx0XHRpbmRleDtcblx0XHRcblx0XHRpZih0aGlzLmdyb3Vwc1tncm91cEtleV0pe1xuXHRcdFx0ZGVsZXRlIHRoaXMuZ3JvdXBzW2dyb3VwS2V5XTtcblx0XHRcdFxuXHRcdFx0aW5kZXggPSB0aGlzLmdyb3VwTGlzdC5pbmRleE9mKGdyb3VwKTtcblx0XHRcdFxuXHRcdFx0aWYoaW5kZXggPiAtMSl7XG5cdFx0XHRcdHRoaXMuZ3JvdXBMaXN0LnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKCF0aGlzLmdyb3VwTGlzdC5sZW5ndGgpe1xuXHRcdFx0XHRpZih0aGlzLnBhcmVudCl7XG5cdFx0XHRcdFx0dGhpcy5wYXJlbnQucmVtb3ZlR3JvdXAodGhpcyk7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHR0aGlzLmdyb3VwTWFuYWdlci5yZW1vdmVHcm91cCh0aGlzKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0Z2V0SGVhZGVyc0FuZFJvd3MoKXtcblx0XHR2YXIgb3V0cHV0ID0gW107XG5cdFx0XG5cdFx0b3V0cHV0LnB1c2godGhpcyk7XG5cdFx0XG5cdFx0dGhpcy5fdmlzU2V0KCk7XG5cdFx0XG5cdFx0XG5cdFx0aWYodGhpcy5jYWxjcy50b3Ape1xuXHRcdFx0dGhpcy5jYWxjcy50b3AuZGV0YWNoRWxlbWVudCgpO1xuXHRcdFx0dGhpcy5jYWxjcy50b3AuZGVsZXRlQ2VsbHMoKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodGhpcy5jYWxjcy5ib3R0b20pe1xuXHRcdFx0dGhpcy5jYWxjcy5ib3R0b20uZGV0YWNoRWxlbWVudCgpO1xuXHRcdFx0dGhpcy5jYWxjcy5ib3R0b20uZGVsZXRlQ2VsbHMoKTtcblx0XHR9XG5cdFx0XG5cdFx0XG5cdFx0XG5cdFx0aWYodGhpcy52aXNpYmxlKXtcblx0XHRcdGlmKHRoaXMuZ3JvdXBMaXN0Lmxlbmd0aCl7XG5cdFx0XHRcdHRoaXMuZ3JvdXBMaXN0LmZvckVhY2goZnVuY3Rpb24oZ3JvdXApe1xuXHRcdFx0XHRcdG91dHB1dCA9IG91dHB1dC5jb25jYXQoZ3JvdXAuZ2V0SGVhZGVyc0FuZFJvd3MoKSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aWYodGhpcy5ncm91cE1hbmFnZXIudGFibGUub3B0aW9ucy5jb2x1bW5DYWxjcyAhPSBcInRhYmxlXCIgJiYgdGhpcy5ncm91cE1hbmFnZXIudGFibGUubW9kRXhpc3RzKFwiY29sdW1uQ2FsY3NcIikgJiYgdGhpcy5ncm91cE1hbmFnZXIudGFibGUubW9kdWxlcy5jb2x1bW5DYWxjcy5oYXNUb3BDYWxjcygpKXtcblx0XHRcdFx0XHR0aGlzLmNhbGNzLnRvcCA9IHRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLm1vZHVsZXMuY29sdW1uQ2FsY3MuZ2VuZXJhdGVUb3BSb3codGhpcy5yb3dzKTtcblx0XHRcdFx0XHRvdXRwdXQucHVzaCh0aGlzLmNhbGNzLnRvcCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdG91dHB1dCA9IG91dHB1dC5jb25jYXQodGhpcy5yb3dzKTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKHRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLm9wdGlvbnMuY29sdW1uQ2FsY3MgIT0gXCJ0YWJsZVwiICYmICB0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5tb2RFeGlzdHMoXCJjb2x1bW5DYWxjc1wiKSAmJiB0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5tb2R1bGVzLmNvbHVtbkNhbGNzLmhhc0JvdHRvbUNhbGNzKCkpe1xuXHRcdFx0XHRcdHRoaXMuY2FsY3MuYm90dG9tID0gdGhpcy5ncm91cE1hbmFnZXIudGFibGUubW9kdWxlcy5jb2x1bW5DYWxjcy5nZW5lcmF0ZUJvdHRvbVJvdyh0aGlzLnJvd3MpO1xuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHRoaXMuY2FsY3MuYm90dG9tKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGlmKCF0aGlzLmdyb3VwTGlzdC5sZW5ndGggJiYgdGhpcy5ncm91cE1hbmFnZXIudGFibGUub3B0aW9ucy5jb2x1bW5DYWxjcyAhPSBcInRhYmxlXCIpe1xuXHRcdFx0XHRcblx0XHRcdFx0aWYodGhpcy5ncm91cE1hbmFnZXIudGFibGUubW9kRXhpc3RzKFwiY29sdW1uQ2FsY3NcIikpe1xuXHRcdFx0XHRcdGlmKHRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLm1vZHVsZXMuY29sdW1uQ2FsY3MuaGFzVG9wQ2FsY3MoKSl7XG5cdFx0XHRcdFx0XHRpZih0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5vcHRpb25zLmdyb3VwQ2xvc2VkU2hvd0NhbGNzKXtcblx0XHRcdFx0XHRcdFx0dGhpcy5jYWxjcy50b3AgPSB0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5tb2R1bGVzLmNvbHVtbkNhbGNzLmdlbmVyYXRlVG9wUm93KHRoaXMucm93cyk7XG5cdFx0XHRcdFx0XHRcdG91dHB1dC5wdXNoKHRoaXMuY2FsY3MudG9wKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYodGhpcy5ncm91cE1hbmFnZXIudGFibGUubW9kdWxlcy5jb2x1bW5DYWxjcy5oYXNCb3R0b21DYWxjcygpKXtcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGlmKHRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLm9wdGlvbnMuZ3JvdXBDbG9zZWRTaG93Q2FsY3Mpe1xuXHRcdFx0XHRcdFx0XHR0aGlzLmNhbGNzLmJvdHRvbSA9IHRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLm1vZHVsZXMuY29sdW1uQ2FsY3MuZ2VuZXJhdGVCb3R0b21Sb3codGhpcy5yb3dzKTtcblx0XHRcdFx0XHRcdFx0b3V0cHV0LnB1c2godGhpcy5jYWxjcy5ib3R0b20pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblx0XG5cdGdldERhdGEodmlzaWJsZSwgdHJhbnNmb3JtKXtcblx0XHR2YXIgb3V0cHV0ID0gW107XG5cdFx0XG5cdFx0dGhpcy5fdmlzU2V0KCk7XG5cdFx0XG5cdFx0aWYoIXZpc2libGUgfHwgKHZpc2libGUgJiYgdGhpcy52aXNpYmxlKSl7XG5cdFx0XHR0aGlzLnJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRcdG91dHB1dC5wdXNoKHJvdy5nZXREYXRhKHRyYW5zZm9ybSB8fCBcImRhdGFcIikpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblx0XG5cdGdldFJvd0NvdW50KCl7XG5cdFx0dmFyIGNvdW50ID0gMDtcblx0XHRcblx0XHRpZih0aGlzLmdyb3VwTGlzdC5sZW5ndGgpe1xuXHRcdFx0dGhpcy5ncm91cExpc3QuZm9yRWFjaCgoZ3JvdXApID0+IHtcblx0XHRcdFx0Y291bnQgKz0gZ3JvdXAuZ2V0Um93Q291bnQoKTtcblx0XHRcdH0pO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvdW50ID0gdGhpcy5yb3dzLmxlbmd0aDtcblx0XHR9XG5cdFx0cmV0dXJuIGNvdW50O1xuXHR9XG5cblx0XG5cdHRvZ2dsZVZpc2liaWxpdHkoKXtcblx0XHRpZih0aGlzLnZpc2libGUpe1xuXHRcdFx0dGhpcy5oaWRlKCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5zaG93KCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRoaWRlKCl7XG5cdFx0dGhpcy52aXNpYmxlID0gZmFsc2U7XG5cdFx0XG5cdFx0aWYodGhpcy5ncm91cE1hbmFnZXIudGFibGUucm93TWFuYWdlci5nZXRSZW5kZXJNb2RlKCkgPT0gXCJiYXNpY1wiICYmICF0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5vcHRpb25zLnBhZ2luYXRpb24pe1xuXHRcdFx0XG5cdFx0XHR0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcInRhYnVsYXRvci1ncm91cC12aXNpYmxlXCIpO1xuXHRcdFx0XG5cdFx0XHRpZih0aGlzLmdyb3VwTGlzdC5sZW5ndGgpe1xuXHRcdFx0XHR0aGlzLmdyb3VwTGlzdC5mb3JFYWNoKChncm91cCkgPT4ge1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHZhciByb3dzID0gZ3JvdXAuZ2V0SGVhZGVyc0FuZFJvd3MoKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRyb3dzLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0XHRcdFx0cm93LmRldGFjaEVsZW1lbnQoKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdFxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLnJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRcdFx0dmFyIHJvd0VsID0gcm93LmdldEVsZW1lbnQoKTtcblx0XHRcdFx0XHRyb3dFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHJvd0VsKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHRoaXMuZ3JvdXBNYW5hZ2VyLnVwZGF0ZUdyb3VwUm93cyh0cnVlKTtcblx0XHRcdFxuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuZ3JvdXBNYW5hZ2VyLnVwZGF0ZUdyb3VwUm93cyh0cnVlKTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5ncm91cE1hbmFnZXIudGFibGUuZXh0ZXJuYWxFdmVudHMuZGlzcGF0Y2goXCJncm91cFZpc2liaWxpdHlDaGFuZ2VkXCIsIHRoaXMuZ2V0Q29tcG9uZW50KCksIGZhbHNlKTtcblx0fVxuXHRcblx0c2hvdygpe1xuXHRcdHRoaXMudmlzaWJsZSA9IHRydWU7XG5cdFx0XG5cdFx0aWYodGhpcy5ncm91cE1hbmFnZXIudGFibGUucm93TWFuYWdlci5nZXRSZW5kZXJNb2RlKCkgPT0gXCJiYXNpY1wiICYmICF0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5vcHRpb25zLnBhZ2luYXRpb24pe1xuXHRcdFx0XG5cdFx0XHR0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1ncm91cC12aXNpYmxlXCIpO1xuXHRcdFx0XG5cdFx0XHR2YXIgcHJldiA9IHRoaXMuZ2VuZXJhdGVFbGVtZW50KCk7XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMuZ3JvdXBMaXN0Lmxlbmd0aCl7XG5cdFx0XHRcdHRoaXMuZ3JvdXBMaXN0LmZvckVhY2goKGdyb3VwKSA9PiB7XG5cdFx0XHRcdFx0dmFyIHJvd3MgPSBncm91cC5nZXRIZWFkZXJzQW5kUm93cygpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRcdFx0XHR2YXIgcm93RWwgPSByb3cuZ2V0RWxlbWVudCgpO1xuXHRcdFx0XHRcdFx0cHJldi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShyb3dFbCwgcHJldi5uZXh0U2libGluZyk7XG5cdFx0XHRcdFx0XHRyb3cuaW5pdGlhbGl6ZSgpO1xuXHRcdFx0XHRcdFx0cHJldiA9IHJvd0VsO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMucm93cy5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdFx0XHR2YXIgcm93RWwgPSByb3cuZ2V0RWxlbWVudCgpO1xuXHRcdFx0XHRcdHByZXYucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUocm93RWwsIHByZXYubmV4dFNpYmxpbmcpO1xuXHRcdFx0XHRcdHJvdy5pbml0aWFsaXplKCk7XG5cdFx0XHRcdFx0cHJldiA9IHJvd0VsO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5ncm91cE1hbmFnZXIudXBkYXRlR3JvdXBSb3dzKHRydWUpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuZ3JvdXBNYW5hZ2VyLnVwZGF0ZUdyb3VwUm93cyh0cnVlKTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5ncm91cE1hbmFnZXIudGFibGUuZXh0ZXJuYWxFdmVudHMuZGlzcGF0Y2goXCJncm91cFZpc2liaWxpdHlDaGFuZ2VkXCIsIHRoaXMuZ2V0Q29tcG9uZW50KCksIHRydWUpO1xuXHR9XG5cdFxuXHRfdmlzU2V0KCl7XG5cdFx0dmFyIGRhdGEgPSBbXTtcblx0XHRcblx0XHRpZih0eXBlb2YgdGhpcy52aXNpYmxlID09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRcblx0XHRcdHRoaXMucm93cy5mb3JFYWNoKGZ1bmN0aW9uKHJvdyl7XG5cdFx0XHRcdGRhdGEucHVzaChyb3cuZ2V0RGF0YSgpKTtcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnZpc2libGUgPSB0aGlzLnZpc2libGUodGhpcy5rZXksIHRoaXMuZ2V0Um93Q291bnQoKSwgZGF0YSwgdGhpcy5nZXRDb21wb25lbnQoKSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRnZXRSb3dHcm91cChyb3cpe1xuXHRcdHZhciBtYXRjaCA9IGZhbHNlO1xuXHRcdGlmKHRoaXMuZ3JvdXBMaXN0Lmxlbmd0aCl7XG5cdFx0XHR0aGlzLmdyb3VwTGlzdC5mb3JFYWNoKGZ1bmN0aW9uKGdyb3VwKXtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IGdyb3VwLmdldFJvd0dyb3VwKHJvdyk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihyZXN1bHQpe1xuXHRcdFx0XHRcdG1hdGNoID0gcmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRpZih0aGlzLnJvd3MuZmluZChmdW5jdGlvbihpdGVtKXtcblx0XHRcdFx0cmV0dXJuIGl0ZW0gPT09IHJvdztcblx0XHRcdH0pKXtcblx0XHRcdFx0bWF0Y2ggPSB0aGlzO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gbWF0Y2g7XG5cdH1cblx0XG5cdGdldFN1Ykdyb3Vwcyhjb21wb25lbnQpe1xuXHRcdHZhciBvdXRwdXQgPSBbXTtcblx0XHRcblx0XHR0aGlzLmdyb3VwTGlzdC5mb3JFYWNoKGZ1bmN0aW9uKGNoaWxkKXtcblx0XHRcdG91dHB1dC5wdXNoKGNvbXBvbmVudCA/IGNoaWxkLmdldENvbXBvbmVudCgpIDogY2hpbGQpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblx0XG5cdGdldFJvd3MoY29tcG9uZW50LCBpbmNsdWRlQ2hpbGRyZW4pe1xuXHRcdHZhciBvdXRwdXQgPSBbXTtcblx0XHRcblx0XHRpZihpbmNsdWRlQ2hpbGRyZW4gJiYgdGhpcy5ncm91cExpc3QubGVuZ3RoKXtcblx0XHRcdHRoaXMuZ3JvdXBMaXN0LmZvckVhY2goKGdyb3VwKSA9PiB7XG5cdFx0XHRcdG91dHB1dCA9IG91dHB1dC5jb25jYXQoZ3JvdXAuZ2V0Um93cyhjb21wb25lbnQsIGluY2x1ZGVDaGlsZHJlbikpO1xuXHRcdFx0fSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5yb3dzLmZvckVhY2goZnVuY3Rpb24ocm93KXtcblx0XHRcdFx0b3V0cHV0LnB1c2goY29tcG9uZW50ID8gcm93LmdldENvbXBvbmVudCgpIDogcm93KTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cdFxuXHRnZW5lcmF0ZUdyb3VwSGVhZGVyQ29udGVudHMoKXtcblx0XHR2YXIgZGF0YSA9IFtdO1xuXHRcdFxuXHRcdHZhciByb3dzID0gdGhpcy5nZXRSb3dzKGZhbHNlLCB0cnVlKTtcblx0XHRcblx0XHRyb3dzLmZvckVhY2goZnVuY3Rpb24ocm93KXtcblx0XHRcdGRhdGEucHVzaChyb3cuZ2V0RGF0YSgpKTtcblx0XHR9KTtcblx0XHRcblx0XHR0aGlzLmVsZW1lbnRDb250ZW50cyA9IHRoaXMuZ2VuZXJhdG9yKHRoaXMua2V5LCB0aGlzLmdldFJvd0NvdW50KCksIGRhdGEsIHRoaXMuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdFxuXHRcdHdoaWxlKHRoaXMuZWxlbWVudC5maXJzdENoaWxkKSB0aGlzLmVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50LmZpcnN0Q2hpbGQpO1xuXHRcdFxuXHRcdGlmKHR5cGVvZiB0aGlzLmVsZW1lbnRDb250ZW50cyA9PT0gXCJzdHJpbmdcIil7XG5cdFx0XHR0aGlzLmVsZW1lbnQuaW5uZXJIVE1MID0gdGhpcy5lbGVtZW50Q29udGVudHM7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudENvbnRlbnRzKTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5lbGVtZW50Lmluc2VydEJlZm9yZSh0aGlzLmFycm93RWxlbWVudCwgdGhpcy5lbGVtZW50LmZpcnN0Q2hpbGQpO1xuXHR9XG5cdFxuXHRnZXRQYXRoKHBhdGggPSBbXSkge1xuXHRcdHBhdGgudW5zaGlmdCh0aGlzLmtleSk7XG5cdFx0aWYodGhpcy5wYXJlbnQpIHtcblx0XHRcdHRoaXMucGFyZW50LmdldFBhdGgocGF0aCk7XG5cdFx0fVxuXHRcdHJldHVybiBwYXRoO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLyBTdGFuZGFyZCBSb3cgRnVuY3Rpb25zIC8vLy8vLy8vLy8vLy8vXG5cdFxuXHRnZXRFbGVtZW50KCl7XG5cdFx0cmV0dXJuIHRoaXMuZWxlbWVudENvbnRlbnRzID8gdGhpcy5lbGVtZW50IDogdGhpcy5nZW5lcmF0ZUVsZW1lbnQoKTtcblx0fVxuXHRcblx0Z2VuZXJhdGVFbGVtZW50KCl7XG5cdFx0dGhpcy5hZGRCaW5kaW5ncyA9IGZhbHNlO1xuXHRcdFxuXHRcdHRoaXMuX3Zpc1NldCgpO1xuXHRcdFxuXHRcdGlmKHRoaXMudmlzaWJsZSl7XG5cdFx0XHR0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1ncm91cC12aXNpYmxlXCIpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwidGFidWxhdG9yLWdyb3VwLXZpc2libGVcIik7XG5cdFx0fVxuXHRcdFxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmVsZW1lbnQuY2hpbGROb2Rlcy5sZW5ndGg7ICsraSl7XG5cdFx0XHR0aGlzLmVsZW1lbnQuY2hpbGROb2Rlc1tpXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudC5jaGlsZE5vZGVzW2ldKTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5nZW5lcmF0ZUdyb3VwSGVhZGVyQ29udGVudHMoKTtcblx0XHRcblx0XHQvLyB0aGlzLmFkZEJpbmRpbmdzKCk7XG5cdFx0XG5cdFx0cmV0dXJuIHRoaXMuZWxlbWVudDtcblx0fVxuXHRcblx0ZGV0YWNoRWxlbWVudCgpe1xuXHRcdGlmICh0aGlzLmVsZW1lbnQgJiYgdGhpcy5lbGVtZW50LnBhcmVudE5vZGUpe1xuXHRcdFx0dGhpcy5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50KTtcblx0XHR9XG5cdH1cblx0XG5cdC8vbm9ybWFsaXplIHRoZSBoZWlnaHQgb2YgZWxlbWVudHMgaW4gdGhlIHJvd1xuXHRub3JtYWxpemVIZWlnaHQoKXtcblx0XHR0aGlzLnNldEhlaWdodCh0aGlzLmVsZW1lbnQuY2xpZW50SGVpZ2h0KTtcblx0fVxuXHRcblx0aW5pdGlhbGl6ZShmb3JjZSl7XG5cdFx0aWYoIXRoaXMuaW5pdGlhbGl6ZWQgfHwgZm9yY2Upe1xuXHRcdFx0dGhpcy5ub3JtYWxpemVIZWlnaHQoKTtcblx0XHRcdHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuXHRcdH1cblx0fVxuXHRcblx0cmVpbml0aWFsaXplKCl7XG5cdFx0dGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuXHRcdHRoaXMuaGVpZ2h0ID0gMDtcblx0XHRcblx0XHRpZihIZWxwZXJzLmVsVmlzaWJsZSh0aGlzLmVsZW1lbnQpKXtcblx0XHRcdHRoaXMuaW5pdGlhbGl6ZSh0cnVlKTtcblx0XHR9XG5cdH1cblx0XG5cdHNldEhlaWdodChoZWlnaHQpe1xuXHRcdGlmKHRoaXMuaGVpZ2h0ICE9IGhlaWdodCl7XG5cdFx0XHR0aGlzLmhlaWdodCA9IGhlaWdodDtcblx0XHRcdHRoaXMub3V0ZXJIZWlnaHQgPSB0aGlzLmVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuXHRcdH1cblx0fVxuXHRcblx0Ly9yZXR1cm4gcm93cyBvdXRlciBoZWlnaHRcblx0Z2V0SGVpZ2h0KCl7XG5cdFx0cmV0dXJuIHRoaXMub3V0ZXJIZWlnaHQ7XG5cdH1cblx0XG5cdGdldEdyb3VwKCl7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblx0XG5cdHJlaW5pdGlhbGl6ZUhlaWdodCgpe31cblx0XG5cdGNhbGNIZWlnaHQoKXt9XG5cdFxuXHRzZXRDZWxsSGVpZ2h0KCl7fVxuXHRcblx0Y2xlYXJDZWxsSGVpZ2h0KCl7fVxuXHRcblx0ZGVpbml0aWFsaXplSGVpZ2h0KCl7fVxuXG5cdHJlbmRlcmVkKCl7fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLyBPYmplY3QgR2VuZXJhdGlvbiAvLy8vLy8vLy8vLy8vLy8vL1xuXHRnZXRDb21wb25lbnQoKXtcblx0XHRpZighdGhpcy5jb21wb25lbnQpe1xuXHRcdFx0dGhpcy5jb21wb25lbnQgPSBuZXcgR3JvdXBDb21wb25lbnQodGhpcyk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiB0aGlzLmNvbXBvbmVudDtcblx0fVxufVxuXG5jbGFzcyBHcm91cFJvd3MgZXh0ZW5kcyBNb2R1bGV7XG5cdFxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXHRcdFxuXHRcdHRoaXMuZ3JvdXBJRExvb2t1cHMgPSBmYWxzZTsgLy9lbmFibGUgdGFibGUgZ3JvdXBpbmcgYW5kIHNldCBmaWVsZCB0byBncm91cCBieVxuXHRcdHRoaXMuc3RhcnRPcGVuID0gW2Z1bmN0aW9uKCl7cmV0dXJuIGZhbHNlO31dOyAvL3N0YXJ0aW5nIHN0YXRlIG9mIGdyb3VwXG5cdFx0dGhpcy5oZWFkZXJHZW5lcmF0b3IgPSBbZnVuY3Rpb24oKXtyZXR1cm4gXCJcIjt9XTtcblx0XHR0aGlzLmdyb3VwTGlzdCA9IFtdOyAvL29yZGVyZWQgbGlzdCBvZiBncm91cHNcblx0XHR0aGlzLmFsbG93ZWRWYWx1ZXMgPSBmYWxzZTtcblx0XHR0aGlzLmdyb3VwcyA9IHt9OyAvL2hvbGQgcm93IGdyb3Vwc1xuXHRcdFxuXHRcdHRoaXMuZGlzcGxheUhhbmRsZXIgPSB0aGlzLmdldFJvd3MuYmluZCh0aGlzKTtcblxuXHRcdHRoaXMuYmxvY2tSZWRyYXcgPSBmYWxzZTtcblx0XHRcblx0XHQvL3JlZ2lzdGVyIHRhYmxlIG9wdGlvbnNcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJncm91cEJ5XCIsIGZhbHNlKTsgLy9lbmFibGUgdGFibGUgZ3JvdXBpbmcgYW5kIHNldCBmaWVsZCB0byBncm91cCBieVxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImdyb3VwU3RhcnRPcGVuXCIsIHRydWUpOyAvL3N0YXJ0aW5nIHN0YXRlIG9mIGdyb3VwXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZ3JvdXBWYWx1ZXNcIiwgZmFsc2UpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImdyb3VwVXBkYXRlT25DZWxsRWRpdFwiLCBmYWxzZSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZ3JvdXBIZWFkZXJcIiwgZmFsc2UpOyAvL2hlYWRlciBnZW5lcmF0aW9uIGZ1bmN0aW9uXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZ3JvdXBIZWFkZXJQcmludFwiLCBudWxsKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJncm91cEhlYWRlckNsaXBib2FyZFwiLCBudWxsKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJncm91cEhlYWRlckh0bWxPdXRwdXRcIiwgbnVsbCk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZ3JvdXBIZWFkZXJEb3dubG9hZFwiLCBudWxsKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJncm91cFRvZ2dsZUVsZW1lbnRcIiwgXCJhcnJvd1wiKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJncm91cENsb3NlZFNob3dDYWxjc1wiLCBmYWxzZSk7XG5cdFx0XG5cdFx0Ly9yZWdpc3RlciB0YWJsZSBmdW5jdGlvbnNcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcInNldEdyb3VwQnlcIiwgdGhpcy5zZXRHcm91cEJ5LmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwic2V0R3JvdXBWYWx1ZXNcIiwgdGhpcy5zZXRHcm91cFZhbHVlcy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcInNldEdyb3VwU3RhcnRPcGVuXCIsIHRoaXMuc2V0R3JvdXBTdGFydE9wZW4uYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJzZXRHcm91cEhlYWRlclwiLCB0aGlzLnNldEdyb3VwSGVhZGVyLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiZ2V0R3JvdXBzXCIsIHRoaXMudXNlckdldEdyb3Vwcy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcImdldEdyb3VwZWREYXRhXCIsIHRoaXMudXNlckdldEdyb3VwZWREYXRhLmJpbmQodGhpcykpO1xuXHRcdFxuXHRcdC8vcmVnaXN0ZXIgY29tcG9uZW50IGZ1bmN0aW9uc1xuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcInJvd1wiLCBcImdldEdyb3VwXCIsIHRoaXMucm93R2V0R3JvdXAuYmluZCh0aGlzKSk7XG5cdH1cblx0XG5cdC8vaW5pdGlhbGl6ZSBncm91cCBjb25maWd1cmF0aW9uXG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLnN1YnNjcmliZShcInRhYmxlLWRlc3Ryb3lcIiwgdGhpcy5fYmxvY2tSZWRyYXdpbmcuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3dzLXdpcGVcIiwgdGhpcy5fYmxvY2tSZWRyYXdpbmcuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3dzLXdpcGVkXCIsIHRoaXMuX3Jlc3RvcmVfcmVkcmF3aW5nLmJpbmQodGhpcykpO1xuXG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQnkpe1xuXHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwVXBkYXRlT25DZWxsRWRpdCl7XG5cdFx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY2VsbC12YWx1ZS11cGRhdGVkXCIsIHRoaXMuY2VsbFVwZGF0ZWQuYmluZCh0aGlzKSk7XG5cdFx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWRhdGEtY2hhbmdlZFwiLCB0aGlzLnJlYXNzaWduUm93VG9Hcm91cC5iaW5kKHRoaXMpLCAwKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJ0YWJsZS1idWlsdFwiLCB0aGlzLmNvbmZpZ3VyZUdyb3VwU2V0dXAuYmluZCh0aGlzKSk7XG5cdFx0XHRcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWRlbGV0aW5nXCIsIHRoaXMucm93RGVsZXRpbmcuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1kZWxldGVkXCIsIHRoaXMucm93c1VwZGF0ZWQuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInNjcm9sbC1ob3Jpem9udGFsXCIsIHRoaXMuc2Nyb2xsSGVhZGVycy5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93cy13aXBlXCIsIHRoaXMud2lwZS5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93cy1hZGRlZFwiLCB0aGlzLnJvd3NVcGRhdGVkLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctbW92aW5nXCIsIHRoaXMucm93TW92aW5nLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctYWRkaW5nLWluZGV4XCIsIHRoaXMucm93QWRkaW5nSW5kZXguYmluZCh0aGlzKSk7XG5cdFx0XHRcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93cy1zYW1wbGVcIiwgdGhpcy5yb3dTYW1wbGUuYmluZCh0aGlzKSk7XG5cdFx0XHRcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicmVuZGVyLXZpcnR1YWwtZmlsbFwiLCB0aGlzLnZpcnR1YWxSZW5kZXJGaWxsLmJpbmQodGhpcykpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnJlZ2lzdGVyRGlzcGxheUhhbmRsZXIodGhpcy5kaXNwbGF5SGFuZGxlciwgMjApO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcblx0XHR9XG5cdH1cblx0XG5cdF9ibG9ja1JlZHJhd2luZygpe1xuXHRcdHRoaXMuYmxvY2tSZWRyYXcgPSB0cnVlO1xuXHR9XG5cblx0X3Jlc3RvcmVfcmVkcmF3aW5nKCl7XG5cdFx0dGhpcy5ibG9ja1JlZHJhdyA9IGZhbHNlO1xuXHR9XG5cblx0Y29uZmlndXJlR3JvdXBTZXR1cCgpe1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5ncm91cEJ5KXtcblx0XHRcdHZhciBncm91cEJ5ID0gdGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQnksXG5cdFx0XHRzdGFydE9wZW4gPSB0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBTdGFydE9wZW4sXG5cdFx0XHRncm91cEhlYWRlciA9IHRoaXMudGFibGUub3B0aW9ucy5ncm91cEhlYWRlcjtcblx0XHRcdFxuXHRcdFx0dGhpcy5hbGxvd2VkVmFsdWVzID0gdGhpcy50YWJsZS5vcHRpb25zLmdyb3VwVmFsdWVzO1xuXHRcdFx0XG5cdFx0XHRpZihBcnJheS5pc0FycmF5KGdyb3VwQnkpICYmIEFycmF5LmlzQXJyYXkoZ3JvdXBIZWFkZXIpICYmIGdyb3VwQnkubGVuZ3RoID4gZ3JvdXBIZWFkZXIubGVuZ3RoKXtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiRXJyb3IgY3JlYXRpbmcgZ3JvdXAgaGVhZGVycywgZ3JvdXBIZWFkZXIgYXJyYXkgaXMgc2hvcnRlciB0aGFuIGdyb3VwQnkgYXJyYXlcIik7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHRoaXMuaGVhZGVyR2VuZXJhdG9yID0gW2Z1bmN0aW9uKCl7cmV0dXJuIFwiXCI7fV07XG5cdFx0XHR0aGlzLnN0YXJ0T3BlbiA9IFtmdW5jdGlvbigpe3JldHVybiBmYWxzZTt9XTsgLy9zdGFydGluZyBzdGF0ZSBvZiBncm91cFxuXHRcdFx0XG5cdFx0XHR0aGlzLmxhbmdCaW5kKFwiZ3JvdXBzfGl0ZW1cIiwgKGxhbmdWYWx1ZSwgbGFuZykgPT4ge1xuXHRcdFx0XHR0aGlzLmhlYWRlckdlbmVyYXRvclswXSA9ICh2YWx1ZSwgY291bnQsIGRhdGEpID0+IHsgLy9oZWFkZXIgbGF5b3V0IGZ1bmN0aW9uXG5cdFx0XHRcdFx0cmV0dXJuICh0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIgPyBcIlwiIDogdmFsdWUpICsgXCI8c3Bhbj4oXCIgKyBjb3VudCArIFwiIFwiICsgKChjb3VudCA9PT0gMSkgPyBsYW5nVmFsdWUgOiBsYW5nLmdyb3Vwcy5pdGVtcykgKyBcIik8L3NwYW4+XCI7XG5cdFx0XHRcdH07XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0dGhpcy5ncm91cElETG9va3VwcyA9IFtdO1xuXHRcdFx0XG5cdFx0XHRpZihncm91cEJ5KXtcblx0XHRcdFx0aWYodGhpcy50YWJsZS5tb2RFeGlzdHMoXCJjb2x1bW5DYWxjc1wiKSAmJiB0aGlzLnRhYmxlLm9wdGlvbnMuY29sdW1uQ2FsY3MgIT0gXCJ0YWJsZVwiICYmIHRoaXMudGFibGUub3B0aW9ucy5jb2x1bW5DYWxjcyAhPSBcImJvdGhcIil7XG5cdFx0XHRcdFx0dGhpcy50YWJsZS5tb2R1bGVzLmNvbHVtbkNhbGNzLnJlbW92ZUNhbGNzKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aWYodGhpcy50YWJsZS5tb2RFeGlzdHMoXCJjb2x1bW5DYWxjc1wiKSAmJiB0aGlzLnRhYmxlLm9wdGlvbnMuY29sdW1uQ2FsY3MgIT0gXCJncm91cFwiKXtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHR2YXIgY29scyA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5nZXRSZWFsQ29sdW1ucygpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGNvbHMuZm9yRWFjaCgoY29sKSA9PiB7XG5cdFx0XHRcdFx0XHRpZihjb2wuZGVmaW5pdGlvbi50b3BDYWxjKXtcblx0XHRcdFx0XHRcdFx0dGhpcy50YWJsZS5tb2R1bGVzLmNvbHVtbkNhbGNzLmluaXRpYWxpemVUb3BSb3coKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0aWYoY29sLmRlZmluaXRpb24uYm90dG9tQ2FsYyl7XG5cdFx0XHRcdFx0XHRcdHRoaXMudGFibGUubW9kdWxlcy5jb2x1bW5DYWxjcy5pbml0aWFsaXplQm90dG9tUm93KCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoIUFycmF5LmlzQXJyYXkoZ3JvdXBCeSkpe1xuXHRcdFx0XHRncm91cEJ5ID0gW2dyb3VwQnldO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRncm91cEJ5LmZvckVhY2goKGdyb3VwLCBpKSA9PiB7XG5cdFx0XHRcdHZhciBsb29rdXBGdW5jLCBjb2x1bW47XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih0eXBlb2YgZ3JvdXAgPT0gXCJmdW5jdGlvblwiKXtcblx0XHRcdFx0XHRsb29rdXBGdW5jID0gZ3JvdXA7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRjb2x1bW4gPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0Q29sdW1uQnlGaWVsZChncm91cCk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYoY29sdW1uKXtcblx0XHRcdFx0XHRcdGxvb2t1cEZ1bmMgPSBmdW5jdGlvbihkYXRhKXtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGNvbHVtbi5nZXRGaWVsZFZhbHVlKGRhdGEpO1xuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRsb29rdXBGdW5jID0gZnVuY3Rpb24oZGF0YSl7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBkYXRhW2dyb3VwXTtcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLmdyb3VwSURMb29rdXBzLnB1c2goe1xuXHRcdFx0XHRcdGZpZWxkOiB0eXBlb2YgZ3JvdXAgPT09IFwiZnVuY3Rpb25cIiA/IGZhbHNlIDogZ3JvdXAsXG5cdFx0XHRcdFx0ZnVuYzpsb29rdXBGdW5jLFxuXHRcdFx0XHRcdHZhbHVlczp0aGlzLmFsbG93ZWRWYWx1ZXMgPyB0aGlzLmFsbG93ZWRWYWx1ZXNbaV0gOiBmYWxzZSxcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0aWYoc3RhcnRPcGVuKXtcblx0XHRcdFx0aWYoIUFycmF5LmlzQXJyYXkoc3RhcnRPcGVuKSl7XG5cdFx0XHRcdFx0c3RhcnRPcGVuID0gW3N0YXJ0T3Blbl07XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdHN0YXJ0T3Blbi5mb3JFYWNoKChsZXZlbCkgPT4ge1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMuc3RhcnRPcGVuID0gc3RhcnRPcGVuO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihncm91cEhlYWRlcil7XG5cdFx0XHRcdHRoaXMuaGVhZGVyR2VuZXJhdG9yID0gQXJyYXkuaXNBcnJheShncm91cEhlYWRlcikgPyBncm91cEhlYWRlciA6IFtncm91cEhlYWRlcl07XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5ncm91cExpc3QgPSBbXTtcblx0XHRcdHRoaXMuZ3JvdXBzID0ge307XG5cdFx0fVxuXHR9XG5cdFxuXHRyb3dTYW1wbGUocm93cywgcHJldlZhbHVlKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBCeSl7XG5cdFx0XHR2YXIgZ3JvdXAgPSB0aGlzLmdldEdyb3VwcyhmYWxzZSlbMF07XG5cdFx0XHRcblx0XHRcdHByZXZWYWx1ZS5wdXNoKGdyb3VwLmdldFJvd3MoZmFsc2UpWzBdKTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHByZXZWYWx1ZTtcblx0fVxuXHRcblx0dmlydHVhbFJlbmRlckZpbGwoKXtcblx0XHR2YXIgZWwgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIudGFibGVFbGVtZW50O1xuXHRcdHZhciByb3dzID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldFZpc2libGVSb3dzKCk7XG5cdFx0XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQnkpe1xuXHRcdFx0cm93cyA9IHJvd3MuZmlsdGVyKChyb3cpID0+IHtcblx0XHRcdFx0cmV0dXJuIHJvdy50eXBlICE9PSBcImdyb3VwXCI7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0ZWwuc3R5bGUubWluV2lkdGggPSAhcm93cy5sZW5ndGggPyB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0V2lkdGgoKSArIFwicHhcIiA6IFwiXCI7XG5cdFx0fWVsc2Uge1xuXHRcdFx0cmV0dXJuIHJvd3M7XG5cdFx0fVxuXHR9XG5cdFxuXHRyb3dBZGRpbmdJbmRleChyb3csIGluZGV4LCB0b3Ape1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5ncm91cEJ5KXtcblx0XHRcdHRoaXMuYXNzaWduUm93VG9Hcm91cChyb3cpO1xuXHRcdFx0XG5cdFx0XHR2YXIgZ3JvdXBSb3dzID0gcm93Lm1vZHVsZXMuZ3JvdXAucm93cztcblx0XHRcdFxuXHRcdFx0aWYoZ3JvdXBSb3dzLmxlbmd0aCA+IDEpe1xuXHRcdFx0XHRpZighaW5kZXggfHwgKGluZGV4ICYmIGdyb3VwUm93cy5pbmRleE9mKGluZGV4KSA9PSAtMSkpe1xuXHRcdFx0XHRcdGlmKHRvcCl7XG5cdFx0XHRcdFx0XHRpZihncm91cFJvd3NbMF0gIT09IHJvdyl7XG5cdFx0XHRcdFx0XHRcdGluZGV4ID0gZ3JvdXBSb3dzWzBdO1xuXHRcdFx0XHRcdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIubW92ZVJvd0luQXJyYXkocm93Lm1vZHVsZXMuZ3JvdXAucm93cywgcm93LCBpbmRleCwgIXRvcCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0aWYoZ3JvdXBSb3dzW2dyb3VwUm93cy5sZW5ndGggLTFdICE9PSByb3cpe1xuXHRcdFx0XHRcdFx0XHRpbmRleCA9IGdyb3VwUm93c1tncm91cFJvd3MubGVuZ3RoIC0xXTtcblx0XHRcdFx0XHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLm1vdmVSb3dJbkFycmF5KHJvdy5tb2R1bGVzLmdyb3VwLnJvd3MsIHJvdywgaW5kZXgsICF0b3ApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5tb3ZlUm93SW5BcnJheShyb3cubW9kdWxlcy5ncm91cC5yb3dzLCByb3csIGluZGV4LCAhdG9wKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRyZXR1cm4gaW5kZXg7XG5cdFx0fVxuXHR9XG5cdFxuXHR0cmFja0NoYW5nZXMoKXtcblx0XHR0aGlzLmRpc3BhdGNoKFwiZ3JvdXAtY2hhbmdlZFwiKTtcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vIFRhYmxlIEZ1bmN0aW9ucyAvLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdHNldEdyb3VwQnkoZ3JvdXBzKXtcblx0XHR0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBCeSA9IGdyb3Vwcztcblx0XHRcblx0XHRpZighdGhpcy5pbml0aWFsaXplZCl7XG5cdFx0XHR0aGlzLmluaXRpYWxpemUoKTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5jb25maWd1cmVHcm91cFNldHVwKCk7XG5cblx0XHRpZighZ3JvdXBzICYmIHRoaXMudGFibGUubW9kRXhpc3RzKFwiY29sdW1uQ2FsY3NcIikgJiYgdGhpcy50YWJsZS5vcHRpb25zLmNvbHVtbkNhbGNzID09PSB0cnVlKXtcblx0XHRcdHRoaXMudGFibGUubW9kdWxlcy5jb2x1bW5DYWxjcy5yZWluaXRpYWxpemVDYWxjcygpO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLnJlZnJlc2hEYXRhKCk7XG5cdFx0XG5cdFx0dGhpcy50cmFja0NoYW5nZXMoKTtcblx0fVxuXHRcblx0c2V0R3JvdXBWYWx1ZXMoZ3JvdXBWYWx1ZXMpe1xuXHRcdHRoaXMudGFibGUub3B0aW9ucy5ncm91cFZhbHVlcyA9IGdyb3VwVmFsdWVzO1xuXHRcdHRoaXMuY29uZmlndXJlR3JvdXBTZXR1cCgpO1xuXHRcdHRoaXMucmVmcmVzaERhdGEoKTtcblx0XHRcblx0XHR0aGlzLnRyYWNrQ2hhbmdlcygpO1xuXHR9XG5cdFxuXHRzZXRHcm91cFN0YXJ0T3Blbih2YWx1ZXMpe1xuXHRcdHRoaXMudGFibGUub3B0aW9ucy5ncm91cFN0YXJ0T3BlbiA9IHZhbHVlcztcblx0XHR0aGlzLmNvbmZpZ3VyZUdyb3VwU2V0dXAoKTtcblx0XHRcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBCeSl7XG5cdFx0XHR0aGlzLnJlZnJlc2hEYXRhKCk7XG5cdFx0XHRcblx0XHRcdHRoaXMudHJhY2tDaGFuZ2VzKCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiR3JvdXBpbmcgVXBkYXRlIC0gY2FudCByZWZyZXNoIHZpZXcsIG5vIGdyb3VwcyBoYXZlIGJlZW4gc2V0XCIpO1xuXHRcdH1cblx0fVxuXHRcblx0c2V0R3JvdXBIZWFkZXIodmFsdWVzKXtcblx0XHR0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBIZWFkZXIgPSB2YWx1ZXM7XG5cdFx0dGhpcy5jb25maWd1cmVHcm91cFNldHVwKCk7XG5cdFx0XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQnkpe1xuXHRcdFx0dGhpcy5yZWZyZXNoRGF0YSgpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnRyYWNrQ2hhbmdlcygpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkdyb3VwaW5nIFVwZGF0ZSAtIGNhbnQgcmVmcmVzaCB2aWV3LCBubyBncm91cHMgaGF2ZSBiZWVuIHNldFwiKTtcblx0XHR9XG5cdH1cblx0XG5cdHVzZXJHZXRHcm91cHModmFsdWVzKXtcblx0XHRyZXR1cm4gdGhpcy5nZXRHcm91cHModHJ1ZSk7XG5cdH1cblx0XG5cdC8vIGdldCBncm91cGVkIHRhYmxlIGRhdGEgaW4gdGhlIHNhbWUgZm9ybWF0IGFzIGdldERhdGEoKVxuXHR1c2VyR2V0R3JvdXBlZERhdGEoKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQnkgPyB0aGlzLmdldEdyb3VwZWREYXRhKCkgOiB0aGlzLmdldERhdGEoKTtcblx0fVxuXHRcblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8gQ29tcG9uZW50IEZ1bmN0aW9ucyAvLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHRyb3dHZXRHcm91cChyb3cpe1xuXHRcdHJldHVybiByb3cubW9kdWxlcy5ncm91cCA/IHJvdy5tb2R1bGVzLmdyb3VwLmdldENvbXBvbmVudCgpIDogZmFsc2U7XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLyBJbnRlcm5hbCBMb2dpYyAvLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHRyb3dNb3ZpbmcoZnJvbSwgdG8sIGFmdGVyKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBCeSl7XG5cdFx0XHRpZighYWZ0ZXIgJiYgdG8gaW5zdGFuY2VvZiBHcm91cCl7XG5cdFx0XHRcdHRvID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLnByZXZEaXNwbGF5Um93KGZyb20pIHx8IHRvO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR2YXIgdG9Hcm91cCA9IHRvIGluc3RhbmNlb2YgR3JvdXAgPyB0byA6IHRvLm1vZHVsZXMuZ3JvdXA7XG5cdFx0XHR2YXIgZnJvbUdyb3VwID0gZnJvbSBpbnN0YW5jZW9mIEdyb3VwID8gZnJvbSA6IGZyb20ubW9kdWxlcy5ncm91cDtcblx0XHRcdFxuXHRcdFx0aWYodG9Hcm91cCA9PT0gZnJvbUdyb3VwKXtcblx0XHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLm1vdmVSb3dJbkFycmF5KHRvR3JvdXAucm93cywgZnJvbSwgdG8sIGFmdGVyKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aWYoZnJvbUdyb3VwKXtcblx0XHRcdFx0XHRmcm9tR3JvdXAucmVtb3ZlUm93KGZyb20pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHR0b0dyb3VwLmluc2VydFJvdyhmcm9tLCB0bywgYWZ0ZXIpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0XG5cdHJvd0RlbGV0aW5nKHJvdyl7XG5cdFx0Ly9yZW1vdmUgZnJvbSBncm91cFxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5ncm91cEJ5ICYmIHJvdy5tb2R1bGVzLmdyb3VwKXtcblx0XHRcdHJvdy5tb2R1bGVzLmdyb3VwLnJlbW92ZVJvdyhyb3cpO1xuXHRcdH1cblx0fVxuXHRcblx0cm93c1VwZGF0ZWQocm93KXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBCeSl7XG5cdFx0XHR0aGlzLnVwZGF0ZUdyb3VwUm93cyh0cnVlKTtcblx0XHR9XHRcblx0fVxuXHRcblx0Y2VsbFVwZGF0ZWQoY2VsbCl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQnkpe1xuXHRcdFx0dGhpcy5yZWFzc2lnblJvd1RvR3JvdXAoY2VsbC5yb3cpO1xuXHRcdH1cblx0fVxuXHRcblx0Ly9yZXR1cm4gYXBwcm9wcmlhdGUgcm93cyB3aXRoIGdyb3VwIGhlYWRlcnNcblx0Z2V0Um93cyhyb3dzKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBCeSAmJiB0aGlzLmdyb3VwSURMb29rdXBzLmxlbmd0aCl7XG5cdFx0XHRcblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcImRhdGFHcm91cGluZ1wiKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5nZW5lcmF0ZUdyb3Vwcyhyb3dzKTtcblx0XHRcdFxuXHRcdFx0aWYodGhpcy5zdWJzY3JpYmVkRXh0ZXJuYWwoXCJkYXRhR3JvdXBlZFwiKSl7XG5cdFx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcImRhdGFHcm91cGVkXCIsIHRoaXMuZ2V0R3JvdXBzKHRydWUpKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0cmV0dXJuIHRoaXMudXBkYXRlR3JvdXBSb3dzKCk7XG5cdFx0XHRcblx0XHR9ZWxzZSB7XG5cdFx0XHRyZXR1cm4gcm93cy5zbGljZSgwKTtcblx0XHR9XG5cdH1cblx0XG5cdGdldEdyb3Vwcyhjb21wb25lbnQpe1xuXHRcdHZhciBncm91cENvbXBvbmVudHMgPSBbXTtcblx0XHRcblx0XHR0aGlzLmdyb3VwTGlzdC5mb3JFYWNoKGZ1bmN0aW9uKGdyb3VwKXtcblx0XHRcdGdyb3VwQ29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCA/IGdyb3VwLmdldENvbXBvbmVudCgpIDogZ3JvdXApO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiBncm91cENvbXBvbmVudHM7XG5cdH1cblx0XG5cdGdldENoaWxkR3JvdXBzKGdyb3VwKXtcblx0XHR2YXIgZ3JvdXBDb21wb25lbnRzID0gW107XG5cdFx0XG5cdFx0aWYoIWdyb3VwKXtcblx0XHRcdGdyb3VwID0gdGhpcztcblx0XHR9XG5cdFx0XG5cdFx0Z3JvdXAuZ3JvdXBMaXN0LmZvckVhY2goKGNoaWxkKSA9PiB7XG5cdFx0XHRpZihjaGlsZC5ncm91cExpc3QubGVuZ3RoKXtcblx0XHRcdFx0Z3JvdXBDb21wb25lbnRzID0gZ3JvdXBDb21wb25lbnRzLmNvbmNhdCh0aGlzLmdldENoaWxkR3JvdXBzKGNoaWxkKSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGdyb3VwQ29tcG9uZW50cy5wdXNoKGNoaWxkKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gZ3JvdXBDb21wb25lbnRzO1xuXHR9XG5cdFxuXHR3aXBlKCl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQnkpe1xuXHRcdFx0dGhpcy5ncm91cExpc3QuZm9yRWFjaChmdW5jdGlvbihncm91cCl7XG5cdFx0XHRcdGdyb3VwLndpcGUoKTtcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmdyb3VwTGlzdCA9IFtdO1xuXHRcdFx0dGhpcy5ncm91cHMgPSB7fTtcblx0XHR9XG5cdH1cblx0XG5cdHB1bGxHcm91cExpc3REYXRhKGdyb3VwTGlzdCkge1xuXHRcdHZhciBncm91cExpc3REYXRhID0gW107XG5cdFx0XG5cdFx0Z3JvdXBMaXN0LmZvckVhY2goKGdyb3VwKSA9PiB7XG5cdFx0XHR2YXIgZ3JvdXBIZWFkZXIgPSB7fTtcblx0XHRcdGdyb3VwSGVhZGVyLmxldmVsID0gMDtcblx0XHRcdGdyb3VwSGVhZGVyLnJvd0NvdW50ID0gMDtcblx0XHRcdGdyb3VwSGVhZGVyLmhlYWRlckNvbnRlbnQgPSBcIlwiO1xuXHRcdFx0dmFyIGNoaWxkRGF0YSA9IFtdO1xuXHRcdFx0XG5cdFx0XHRpZiAoZ3JvdXAuaGFzU3ViR3JvdXBzKSB7XG5cdFx0XHRcdGNoaWxkRGF0YSA9IHRoaXMucHVsbEdyb3VwTGlzdERhdGEoZ3JvdXAuZ3JvdXBMaXN0KTtcblx0XHRcdFx0XG5cdFx0XHRcdGdyb3VwSGVhZGVyLmxldmVsID0gZ3JvdXAubGV2ZWw7XG5cdFx0XHRcdGdyb3VwSGVhZGVyLnJvd0NvdW50ID0gY2hpbGREYXRhLmxlbmd0aCAtIGdyb3VwLmdyb3VwTGlzdC5sZW5ndGg7IC8vIGRhdGEgbGVuZ3RoIG1pbnVzIG51bWJlciBvZiBzdWItaGVhZGVyc1xuXHRcdFx0XHRncm91cEhlYWRlci5oZWFkZXJDb250ZW50ID0gZ3JvdXAuZ2VuZXJhdG9yKGdyb3VwLmtleSwgZ3JvdXBIZWFkZXIucm93Q291bnQsIGdyb3VwLnJvd3MsIGdyb3VwKTtcblx0XHRcdFx0XG5cdFx0XHRcdGdyb3VwTGlzdERhdGEucHVzaChncm91cEhlYWRlcik7XG5cdFx0XHRcdGdyb3VwTGlzdERhdGEgPSBncm91cExpc3REYXRhLmNvbmNhdChjaGlsZERhdGEpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0Z3JvdXBIZWFkZXIubGV2ZWwgPSBncm91cC5sZXZlbDtcblx0XHRcdFx0Z3JvdXBIZWFkZXIuaGVhZGVyQ29udGVudCA9IGdyb3VwLmdlbmVyYXRvcihncm91cC5rZXksIGdyb3VwLnJvd3MubGVuZ3RoLCBncm91cC5yb3dzLCBncm91cCk7XG5cdFx0XHRcdGdyb3VwSGVhZGVyLnJvd0NvdW50ID0gZ3JvdXAuZ2V0Um93cygpLmxlbmd0aDtcblx0XHRcdFx0XG5cdFx0XHRcdGdyb3VwTGlzdERhdGEucHVzaChncm91cEhlYWRlcik7XG5cdFx0XHRcdFxuXHRcdFx0XHRncm91cC5nZXRSb3dzKCkuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRcdFx0Z3JvdXBMaXN0RGF0YS5wdXNoKHJvdy5nZXREYXRhKFwiZGF0YVwiKSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiBncm91cExpc3REYXRhO1xuXHR9XG5cdFxuXHRnZXRHcm91cGVkRGF0YSgpe1xuXHRcdFxuXHRcdHJldHVybiB0aGlzLnB1bGxHcm91cExpc3REYXRhKHRoaXMuZ3JvdXBMaXN0KTtcblx0fVxuXHRcblx0Z2V0Um93R3JvdXAocm93KXtcblx0XHR2YXIgbWF0Y2ggPSBmYWxzZTtcblx0XHRcblx0XHRpZih0aGlzLm9wdGlvbnMoXCJkYXRhVHJlZVwiKSl7XG5cdFx0XHRyb3cgPSB0aGlzLnRhYmxlLm1vZHVsZXMuZGF0YVRyZWUuZ2V0VHJlZVBhcmVudFJvb3Qocm93KTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5ncm91cExpc3QuZm9yRWFjaCgoZ3JvdXApID0+IHtcblx0XHRcdHZhciByZXN1bHQgPSBncm91cC5nZXRSb3dHcm91cChyb3cpO1xuXHRcdFx0XG5cdFx0XHRpZihyZXN1bHQpe1xuXHRcdFx0XHRtYXRjaCA9IHJlc3VsdDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gbWF0Y2g7XG5cdH1cblx0XG5cdGNvdW50R3JvdXBzKCl7XG5cdFx0cmV0dXJuIHRoaXMuZ3JvdXBMaXN0Lmxlbmd0aDtcblx0fVxuXHRcblx0Z2VuZXJhdGVHcm91cHMocm93cyl7XG5cdFx0dmFyIG9sZEdyb3VwcyA9IHRoaXMuZ3JvdXBzO1xuXHRcdFxuXHRcdHRoaXMuZ3JvdXBzID0ge307XG5cdFx0dGhpcy5ncm91cExpc3QgPSBbXTtcblx0XHRcblx0XHRpZih0aGlzLmFsbG93ZWRWYWx1ZXMgJiYgdGhpcy5hbGxvd2VkVmFsdWVzWzBdKXtcblx0XHRcdHRoaXMuYWxsb3dlZFZhbHVlc1swXS5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuXHRcdFx0XHR0aGlzLmNyZWF0ZUdyb3VwKHZhbHVlLCAwLCBvbGRHcm91cHMpO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdHJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRcdHRoaXMuYXNzaWduUm93VG9FeGlzdGluZ0dyb3VwKHJvdywgb2xkR3JvdXBzKTtcblx0XHRcdH0pO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRcdHRoaXMuYXNzaWduUm93VG9Hcm91cChyb3csIG9sZEdyb3Vwcyk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0XG5cdFx0T2JqZWN0LnZhbHVlcyhvbGRHcm91cHMpLmZvckVhY2goKGdyb3VwKSA9PiB7XG5cdFx0XHRncm91cC53aXBlKHRydWUpO1xuXHRcdH0pO1x0XG5cdH1cblx0XG5cdFxuXHRjcmVhdGVHcm91cChncm91cElELCBsZXZlbCwgb2xkR3JvdXBzKXtcblx0XHR2YXIgZ3JvdXBLZXkgPSBsZXZlbCArIFwiX1wiICsgZ3JvdXBJRCxcblx0XHRncm91cDtcblx0XHRcblx0XHRvbGRHcm91cHMgPSBvbGRHcm91cHMgfHwgW107XG5cdFx0XG5cdFx0Z3JvdXAgPSBuZXcgR3JvdXAodGhpcywgZmFsc2UsIGxldmVsLCBncm91cElELCB0aGlzLmdyb3VwSURMb29rdXBzWzBdLmZpZWxkLCB0aGlzLmhlYWRlckdlbmVyYXRvclswXSwgb2xkR3JvdXBzW2dyb3VwS2V5XSk7XG5cdFx0XG5cdFx0dGhpcy5ncm91cHNbZ3JvdXBLZXldID0gZ3JvdXA7XG5cdFx0dGhpcy5ncm91cExpc3QucHVzaChncm91cCk7XG5cdH1cblx0XG5cdGFzc2lnblJvd1RvRXhpc3RpbmdHcm91cChyb3csIG9sZEdyb3Vwcyl7XG5cdFx0dmFyIGdyb3VwSUQgPSB0aGlzLmdyb3VwSURMb29rdXBzWzBdLmZ1bmMocm93LmdldERhdGEoKSksXG5cdFx0Z3JvdXBLZXkgPSBcIjBfXCIgKyBncm91cElEO1xuXHRcdFxuXHRcdGlmKHRoaXMuZ3JvdXBzW2dyb3VwS2V5XSl7XG5cdFx0XHR0aGlzLmdyb3Vwc1tncm91cEtleV0uYWRkUm93KHJvdyk7XG5cdFx0fVxuXHR9XG5cdFxuXHRhc3NpZ25Sb3dUb0dyb3VwKHJvdywgb2xkR3JvdXBzKXtcblx0XHR2YXIgZ3JvdXBJRCA9IHRoaXMuZ3JvdXBJRExvb2t1cHNbMF0uZnVuYyhyb3cuZ2V0RGF0YSgpKSxcblx0XHRuZXdHcm91cE5lZWRlZCA9ICF0aGlzLmdyb3Vwc1tcIjBfXCIgKyBncm91cElEXTtcblx0XHRcblx0XHRpZihuZXdHcm91cE5lZWRlZCl7XG5cdFx0XHR0aGlzLmNyZWF0ZUdyb3VwKGdyb3VwSUQsIDAsIG9sZEdyb3Vwcyk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuZ3JvdXBzW1wiMF9cIiArIGdyb3VwSURdLmFkZFJvdyhyb3cpO1xuXHRcdFxuXHRcdHJldHVybiAhbmV3R3JvdXBOZWVkZWQ7XG5cdH1cblx0XG5cdHJlYXNzaWduUm93VG9Hcm91cChyb3cpe1xuXHRcdGlmKHJvdy50eXBlID09PSBcInJvd1wiKXtcblx0XHRcdHZhciBvbGRSb3dHcm91cCA9IHJvdy5tb2R1bGVzLmdyb3VwLFxuXHRcdFx0b2xkR3JvdXBQYXRoID0gb2xkUm93R3JvdXAuZ2V0UGF0aCgpLFxuXHRcdFx0bmV3R3JvdXBQYXRoID0gdGhpcy5nZXRFeHBlY3RlZFBhdGgocm93KSxcblx0XHRcdHNhbWVQYXRoO1xuXHRcdFx0XG5cdFx0XHQvLyBmaWd1cmUgb3V0IGlmIG5ldyBncm91cCBwYXRoIGlzIHRoZSBzYW1lIGFzIG9sZCBncm91cCBwYXRoXG5cdFx0XHRzYW1lUGF0aCA9IChvbGRHcm91cFBhdGgubGVuZ3RoID09IG5ld0dyb3VwUGF0aC5sZW5ndGgpICYmIG9sZEdyb3VwUGF0aC5ldmVyeSgoZWxlbWVudCwgaW5kZXgpID0+IHtcblx0XHRcdFx0cmV0dXJuIGVsZW1lbnQgPT09IG5ld0dyb3VwUGF0aFtpbmRleF07XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0Ly8gcmVmcmVzaCBpZiB0aGV5IG5ldyBwYXRoIGFuZCBvbGQgcGF0aCBhcmVuJ3QgdGhlIHNhbWUgKGFrYSB0aGUgcm93J3MgZ3JvdXBpbmdzIGhhdmUgY2hhbmdlZClcblx0XHRcdGlmKCFzYW1lUGF0aCkge1xuXHRcdFx0XHRvbGRSb3dHcm91cC5yZW1vdmVSb3cocm93KTtcblx0XHRcdFx0dGhpcy5hc3NpZ25Sb3dUb0dyb3VwKHJvdywgdGhpcy5ncm91cHMpO1xuXHRcdFx0XHR0aGlzLnJlZnJlc2hEYXRhKHRydWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0Z2V0RXhwZWN0ZWRQYXRoKHJvdykge1xuXHRcdHZhciBncm91cFBhdGggPSBbXSwgcm93RGF0YSA9IHJvdy5nZXREYXRhKCk7XG5cdFx0XG5cdFx0dGhpcy5ncm91cElETG9va3Vwcy5mb3JFYWNoKChncm91cElkKSA9PiB7XG5cdFx0XHRncm91cFBhdGgucHVzaChncm91cElkLmZ1bmMocm93RGF0YSkpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiBncm91cFBhdGg7XG5cdH1cblx0XG5cdHVwZGF0ZUdyb3VwUm93cyhmb3JjZSl7XG5cdFx0dmFyIG91dHB1dCA9IFtdO1xuXG5cdFx0aWYoIXRoaXMuYmxvY2tSZWRyYXcpe1xuXHRcdFx0dGhpcy5ncm91cExpc3QuZm9yRWFjaCgoZ3JvdXApID0+IHtcblx0XHRcdFx0b3V0cHV0ID0gb3V0cHV0LmNvbmNhdChncm91cC5nZXRIZWFkZXJzQW5kUm93cygpKTtcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHRpZihmb3JjZSl7XG5cdFx0XHRcdHRoaXMucmVmcmVzaERhdGEodHJ1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblx0XG5cdHNjcm9sbEhlYWRlcnMobGVmdCl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQnkpe1xuXHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnJlbmRlckhvcml6b250YWwgPT09IFwidmlydHVhbFwiKXtcblx0XHRcdFx0bGVmdCAtPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIucmVuZGVyZXIudkRvbVBhZExlZnQ7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGxlZnQgPSBsZWZ0ICsgXCJweFwiO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmdyb3VwTGlzdC5mb3JFYWNoKChncm91cCkgPT4ge1xuXHRcdFx0XHRncm91cC5zY3JvbGxIZWFkZXIobGVmdCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblx0XG5cdHJlbW92ZUdyb3VwKGdyb3VwKXtcblx0XHR2YXIgZ3JvdXBLZXkgPSBncm91cC5sZXZlbCArIFwiX1wiICsgZ3JvdXAua2V5LFxuXHRcdGluZGV4O1xuXHRcdFxuXHRcdGlmKHRoaXMuZ3JvdXBzW2dyb3VwS2V5XSl7XG5cdFx0XHRkZWxldGUgdGhpcy5ncm91cHNbZ3JvdXBLZXldO1xuXHRcdFx0XG5cdFx0XHRpbmRleCA9IHRoaXMuZ3JvdXBMaXN0LmluZGV4T2YoZ3JvdXApO1xuXHRcdFx0XG5cdFx0XHRpZihpbmRleCA+IC0xKXtcblx0XHRcdFx0dGhpcy5ncm91cExpc3Quc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdGNoZWNrQmFzaWNNb2RlR3JvdXBIZWFkZXJXaWR0aCgpe1xuXHRcdHZhciBlbGVtZW50ID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLnRhYmxlRWxlbWVudCxcblx0XHRvbmx5R3JvdXBIZWFkZXJzID0gdHJ1ZTtcblx0XHRcblx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0RGlzcGxheVJvd3MoKS5mb3JFYWNoKChyb3csIGluZGV4KSA9Pntcblx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5zdHlsZVJvdyhyb3csIGluZGV4KTtcblx0XHRcdGVsZW1lbnQuYXBwZW5kQ2hpbGQocm93LmdldEVsZW1lbnQoKSk7XG5cdFx0XHRyb3cuaW5pdGlhbGl6ZSh0cnVlKTtcblx0XHRcdFxuXHRcdFx0aWYocm93LnR5cGUgIT09IFwiZ3JvdXBcIil7XG5cdFx0XHRcdG9ubHlHcm91cEhlYWRlcnMgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0XHRpZihvbmx5R3JvdXBIZWFkZXJzKXtcblx0XHRcdGVsZW1lbnQuc3R5bGUubWluV2lkdGggPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0V2lkdGgoKSArIFwicHhcIjtcblx0XHR9ZWxzZSB7XG5cdFx0XHRlbGVtZW50LnN0eWxlLm1pbldpZHRoID0gXCJcIjtcblx0XHR9XG5cdH1cblx0XG59XG5cbkdyb3VwUm93cy5tb2R1bGVOYW1lID0gXCJncm91cFJvd3NcIjtcblxudmFyIGRlZmF1bHRVbmRvZXJzID0ge1xuXHRjZWxsRWRpdDogZnVuY3Rpb24oYWN0aW9uKXtcblx0XHRhY3Rpb24uY29tcG9uZW50LnNldFZhbHVlUHJvY2Vzc0RhdGEoYWN0aW9uLmRhdGEub2xkVmFsdWUpO1xuXHRcdGFjdGlvbi5jb21wb25lbnQuY2VsbFJlbmRlcmVkKCk7XG5cdH0sXG5cblx0cm93QWRkOiBmdW5jdGlvbihhY3Rpb24pe1xuXHRcdGFjdGlvbi5jb21wb25lbnQuZGVsZXRlQWN0dWFsKCk7XG5cdH0sXG5cblx0cm93RGVsZXRlOiBmdW5jdGlvbihhY3Rpb24pe1xuXHRcdHZhciBuZXdSb3cgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuYWRkUm93QWN0dWFsKGFjdGlvbi5kYXRhLmRhdGEsIGFjdGlvbi5kYXRhLnBvcywgYWN0aW9uLmRhdGEuaW5kZXgpO1xuXG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQnkgJiYgdGhpcy50YWJsZS5tb2RFeGlzdHMoXCJncm91cFJvd3NcIikpe1xuXHRcdFx0dGhpcy50YWJsZS5tb2R1bGVzLmdyb3VwUm93cy51cGRhdGVHcm91cFJvd3ModHJ1ZSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fcmViaW5kUm93KGFjdGlvbi5jb21wb25lbnQsIG5ld1Jvdyk7XG5cdH0sXG5cblx0cm93TW92ZTogZnVuY3Rpb24oYWN0aW9uKXtcblx0XHR2YXIgYWZ0ZXIgPSAoYWN0aW9uLmRhdGEucG9zRnJvbSAgLSBhY3Rpb24uZGF0YS5wb3NUbykgPiAwO1xuXG5cdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLm1vdmVSb3dBY3R1YWwoYWN0aW9uLmNvbXBvbmVudCwgdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldFJvd0Zyb21Qb3NpdGlvbihhY3Rpb24uZGF0YS5wb3NGcm9tKSwgYWZ0ZXIpO1xuXG5cdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnJlZ2VuZXJhdGVSb3dQb3NpdGlvbnMoKTtcblx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIucmVSZW5kZXJJblBvc2l0aW9uKCk7XG5cdH0sXG59O1xuXG52YXIgZGVmYXVsdFJlZG9lcnMgPSB7XG5cdGNlbGxFZGl0OiBmdW5jdGlvbihhY3Rpb24pe1xuXHRcdGFjdGlvbi5jb21wb25lbnQuc2V0VmFsdWVQcm9jZXNzRGF0YShhY3Rpb24uZGF0YS5uZXdWYWx1ZSk7XG5cdFx0YWN0aW9uLmNvbXBvbmVudC5jZWxsUmVuZGVyZWQoKTtcblx0fSxcblxuXHRyb3dBZGQ6IGZ1bmN0aW9uKGFjdGlvbil7XG5cdFx0dmFyIG5ld1JvdyA9IHRoaXMudGFibGUucm93TWFuYWdlci5hZGRSb3dBY3R1YWwoYWN0aW9uLmRhdGEuZGF0YSwgYWN0aW9uLmRhdGEucG9zLCBhY3Rpb24uZGF0YS5pbmRleCk7XG5cblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBCeSAmJiB0aGlzLnRhYmxlLm1vZEV4aXN0cyhcImdyb3VwUm93c1wiKSl7XG5cdFx0XHR0aGlzLnRhYmxlLm1vZHVsZXMuZ3JvdXBSb3dzLnVwZGF0ZUdyb3VwUm93cyh0cnVlKTtcblx0XHR9XG5cblx0XHR0aGlzLl9yZWJpbmRSb3coYWN0aW9uLmNvbXBvbmVudCwgbmV3Um93KTtcblx0fSxcblxuXHRyb3dEZWxldGU6ZnVuY3Rpb24oYWN0aW9uKXtcblx0XHRhY3Rpb24uY29tcG9uZW50LmRlbGV0ZUFjdHVhbCgpO1xuXHR9LFxuXG5cdHJvd01vdmU6IGZ1bmN0aW9uKGFjdGlvbil7XG5cdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLm1vdmVSb3dBY3R1YWwoYWN0aW9uLmNvbXBvbmVudCwgdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldFJvd0Zyb21Qb3NpdGlvbihhY3Rpb24uZGF0YS5wb3NUbyksIGFjdGlvbi5kYXRhLmFmdGVyKTtcblx0XHRcblx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIucmVnZW5lcmF0ZVJvd1Bvc2l0aW9ucygpO1xuXHRcdHRoaXMudGFibGUucm93TWFuYWdlci5yZVJlbmRlckluUG9zaXRpb24oKTtcblx0fSxcbn07XG5cbmNsYXNzIEhpc3RvcnkgZXh0ZW5kcyBNb2R1bGV7XG5cblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblxuXHRcdHRoaXMuaGlzdG9yeSA9IFtdO1xuXHRcdHRoaXMuaW5kZXggPSAtMTtcblxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImhpc3RvcnlcIiwgZmFsc2UpOyAvL2VuYWJsZSBlZGl0IGhpc3Rvcnlcblx0fVxuXG5cdGluaXRpYWxpemUoKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuaGlzdG9yeSl7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNlbGwtdmFsdWUtdXBkYXRlZFwiLCB0aGlzLmNlbGxVcGRhdGVkLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjZWxsLWRlbGV0ZVwiLCB0aGlzLmNsZWFyQ29tcG9uZW50SGlzdG9yeS5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWRlbGV0ZVwiLCB0aGlzLnJvd0RlbGV0ZWQuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInJvd3Mtd2lwZVwiLCB0aGlzLmNsZWFyLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctYWRkZWRcIiwgdGhpcy5yb3dBZGRlZC5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LW1vdmVcIiwgdGhpcy5yb3dNb3ZlZC5iaW5kKHRoaXMpKTtcblx0XHR9XG5cblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcInVuZG9cIiwgdGhpcy51bmRvLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwicmVkb1wiLCB0aGlzLnJlZG8uYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJnZXRIaXN0b3J5VW5kb1NpemVcIiwgdGhpcy5nZXRIaXN0b3J5VW5kb1NpemUuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJnZXRIaXN0b3J5UmVkb1NpemVcIiwgdGhpcy5nZXRIaXN0b3J5UmVkb1NpemUuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJjbGVhckhpc3RvcnlcIiwgdGhpcy5jbGVhci5iaW5kKHRoaXMpKTtcblx0fVxuXG5cdHJvd01vdmVkKGZyb20sIHRvLCBhZnRlcil7XG5cdFx0dGhpcy5hY3Rpb24oXCJyb3dNb3ZlXCIsIGZyb20sIHtwb3NGcm9tOmZyb20uZ2V0UG9zaXRpb24oKSwgcG9zVG86dG8uZ2V0UG9zaXRpb24oKSwgdG86dG8sIGFmdGVyOmFmdGVyfSk7XG5cdH1cblxuXHRyb3dBZGRlZChyb3csIGRhdGEsIHBvcywgaW5kZXgpe1xuXHRcdHRoaXMuYWN0aW9uKFwicm93QWRkXCIsIHJvdywge2RhdGE6ZGF0YSwgcG9zOnBvcywgaW5kZXg6aW5kZXh9KTtcblx0fVxuXG5cdHJvd0RlbGV0ZWQocm93KXtcblx0XHR2YXIgaW5kZXgsIHJvd3M7XG5cblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBCeSl7XG5cblx0XHRcdHJvd3MgPSByb3cuZ2V0Q29tcG9uZW50KCkuZ2V0R3JvdXAoKS5fZ2V0U2VsZigpLnJvd3M7XG5cdFx0XHRpbmRleCA9IHJvd3MuaW5kZXhPZihyb3cpO1xuXG5cdFx0XHRpZihpbmRleCl7XG5cdFx0XHRcdGluZGV4ID0gcm93c1tpbmRleC0xXTtcblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRpbmRleCA9IHJvdy50YWJsZS5yb3dNYW5hZ2VyLmdldFJvd0luZGV4KHJvdyk7XG5cblx0XHRcdGlmKGluZGV4KXtcblx0XHRcdFx0aW5kZXggPSByb3cudGFibGUucm93TWFuYWdlci5yb3dzW2luZGV4LTFdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMuYWN0aW9uKFwicm93RGVsZXRlXCIsIHJvdywge2RhdGE6cm93LmdldERhdGEoKSwgcG9zOiFpbmRleCwgaW5kZXg6aW5kZXh9KTtcblx0fVxuXG5cdGNlbGxVcGRhdGVkKGNlbGwpe1xuXHRcdHRoaXMuYWN0aW9uKFwiY2VsbEVkaXRcIiwgY2VsbCwge29sZFZhbHVlOmNlbGwub2xkVmFsdWUsIG5ld1ZhbHVlOmNlbGwudmFsdWV9KTtcblx0fVxuXG5cdGNsZWFyKCl7XG5cdFx0dGhpcy5oaXN0b3J5ID0gW107XG5cdFx0dGhpcy5pbmRleCA9IC0xO1xuXHR9XG5cblx0YWN0aW9uKHR5cGUsIGNvbXBvbmVudCwgZGF0YSl7XG5cdFx0dGhpcy5oaXN0b3J5ID0gdGhpcy5oaXN0b3J5LnNsaWNlKDAsIHRoaXMuaW5kZXggKyAxKTtcblxuXHRcdHRoaXMuaGlzdG9yeS5wdXNoKHtcblx0XHRcdHR5cGU6dHlwZSxcblx0XHRcdGNvbXBvbmVudDpjb21wb25lbnQsXG5cdFx0XHRkYXRhOmRhdGEsXG5cdFx0fSk7XG5cblx0XHR0aGlzLmluZGV4ICsrO1xuXHR9XG5cblx0Z2V0SGlzdG9yeVVuZG9TaXplKCl7XG5cdFx0cmV0dXJuIHRoaXMuaW5kZXggKyAxO1xuXHR9XG5cblx0Z2V0SGlzdG9yeVJlZG9TaXplKCl7XG5cdFx0cmV0dXJuIHRoaXMuaGlzdG9yeS5sZW5ndGggLSAodGhpcy5pbmRleCArIDEpO1xuXHR9XG5cblx0Y2xlYXJDb21wb25lbnRIaXN0b3J5KGNvbXBvbmVudCl7XG5cdFx0dmFyIGluZGV4ID0gdGhpcy5oaXN0b3J5LmZpbmRJbmRleChmdW5jdGlvbihpdGVtKXtcblx0XHRcdHJldHVybiBpdGVtLmNvbXBvbmVudCA9PT0gY29tcG9uZW50O1xuXHRcdH0pO1xuXG5cdFx0aWYoaW5kZXggPiAtMSl7XG5cdFx0XHR0aGlzLmhpc3Rvcnkuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdGlmKGluZGV4IDw9IHRoaXMuaW5kZXgpe1xuXHRcdFx0XHR0aGlzLmluZGV4LS07XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuY2xlYXJDb21wb25lbnRIaXN0b3J5KGNvbXBvbmVudCk7XG5cdFx0fVxuXHR9XG5cblx0dW5kbygpe1xuXHRcdGlmKHRoaXMuaW5kZXggPiAtMSl7XG5cdFx0XHRsZXQgYWN0aW9uID0gdGhpcy5oaXN0b3J5W3RoaXMuaW5kZXhdO1xuXG5cdFx0XHRIaXN0b3J5LnVuZG9lcnNbYWN0aW9uLnR5cGVdLmNhbGwodGhpcywgYWN0aW9uKTtcblxuXHRcdFx0dGhpcy5pbmRleC0tO1xuXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJoaXN0b3J5VW5kb1wiLCBhY3Rpb24udHlwZSwgYWN0aW9uLmNvbXBvbmVudC5nZXRDb21wb25lbnQoKSwgYWN0aW9uLmRhdGEpO1xuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJIaXN0b3J5IFVuZG8gRXJyb3IgLSBObyBtb3JlIGhpc3RvcnkgdG8gdW5kb1wiKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblxuXHRyZWRvKCl7XG5cdFx0aWYodGhpcy5oaXN0b3J5Lmxlbmd0aC0xID4gdGhpcy5pbmRleCl7XG5cblx0XHRcdHRoaXMuaW5kZXgrKztcblxuXHRcdFx0bGV0IGFjdGlvbiA9IHRoaXMuaGlzdG9yeVt0aGlzLmluZGV4XTtcblxuXHRcdFx0SGlzdG9yeS5yZWRvZXJzW2FjdGlvbi50eXBlXS5jYWxsKHRoaXMsIGFjdGlvbik7XG5cblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcImhpc3RvcnlSZWRvXCIsIGFjdGlvbi50eXBlLCBhY3Rpb24uY29tcG9uZW50LmdldENvbXBvbmVudCgpLCBhY3Rpb24uZGF0YSk7XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkhpc3RvcnkgUmVkbyBFcnJvciAtIE5vIG1vcmUgaGlzdG9yeSB0byByZWRvXCIpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXG5cdC8vcmViaW5kIHJvd3MgdG8gbmV3IGVsZW1lbnQgYWZ0ZXIgZGVsZXRpb25cblx0X3JlYmluZFJvdyhvbGRSb3csIG5ld1Jvdyl7XG5cdFx0dGhpcy5oaXN0b3J5LmZvckVhY2goZnVuY3Rpb24oYWN0aW9uKXtcblx0XHRcdGlmKGFjdGlvbi5jb21wb25lbnQgaW5zdGFuY2VvZiBSb3cpe1xuXHRcdFx0XHRpZihhY3Rpb24uY29tcG9uZW50ID09PSBvbGRSb3cpe1xuXHRcdFx0XHRcdGFjdGlvbi5jb21wb25lbnQgPSBuZXdSb3c7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIGlmKGFjdGlvbi5jb21wb25lbnQgaW5zdGFuY2VvZiBDZWxsKXtcblx0XHRcdFx0aWYoYWN0aW9uLmNvbXBvbmVudC5yb3cgPT09IG9sZFJvdyl7XG5cdFx0XHRcdFx0dmFyIGZpZWxkID0gYWN0aW9uLmNvbXBvbmVudC5jb2x1bW4uZ2V0RmllbGQoKTtcblxuXHRcdFx0XHRcdGlmKGZpZWxkKXtcblx0XHRcdFx0XHRcdGFjdGlvbi5jb21wb25lbnQgPSBuZXdSb3cuZ2V0Q2VsbChmaWVsZCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fVxufVxuXG5IaXN0b3J5Lm1vZHVsZU5hbWUgPSBcImhpc3RvcnlcIjtcblxuLy9sb2FkIGRlZmF1bHRzXG5IaXN0b3J5LnVuZG9lcnMgPSBkZWZhdWx0VW5kb2Vycztcbkhpc3RvcnkucmVkb2VycyA9IGRlZmF1bHRSZWRvZXJzO1xuXG5jbGFzcyBIdG1sVGFibGVJbXBvcnQgZXh0ZW5kcyBNb2R1bGV7XG5cblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblxuXHRcdHRoaXMuZmllbGRJbmRleCA9IFtdO1xuXHRcdHRoaXMuaGFzSW5kZXggPSBmYWxzZTtcblx0fVxuXG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLnRhYmxlRWxlbWVudENoZWNrKCk7XG5cdH1cblxuXHR0YWJsZUVsZW1lbnRDaGVjaygpe1xuXHRcdGlmKHRoaXMudGFibGUub3JpZ2luYWxFbGVtZW50ICYmIHRoaXMudGFibGUub3JpZ2luYWxFbGVtZW50LnRhZ05hbWUgPT09IFwiVEFCTEVcIil7XG5cdFx0XHRpZih0aGlzLnRhYmxlLm9yaWdpbmFsRWxlbWVudC5jaGlsZE5vZGVzLmxlbmd0aCl7XG5cdFx0XHRcdHRoaXMucGFyc2VUYWJsZSgpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJVbmFibGUgdG8gcGFyc2UgZGF0YSBmcm9tIGVtcHR5IHRhYmxlIHRhZywgVGFidWxhdG9yIHNob3VsZCBiZSBpbml0aWFsaXplZCBvbiBhIGRpdiB0YWcgdW5sZXNzIGltcG9ydGluZyBkYXRhIGZyb20gYSB0YWJsZSBlbGVtZW50LlwiKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRwYXJzZVRhYmxlKCl7XG5cdFx0dmFyIGVsZW1lbnQgPSB0aGlzLnRhYmxlLm9yaWdpbmFsRWxlbWVudCxcblx0XHRvcHRpb25zID0gdGhpcy50YWJsZS5vcHRpb25zLFxuXHRcdGhlYWRlcnMgPSBlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidGhcIiksXG5cdFx0cm93cyA9IGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ0Ym9keVwiKVswXSxcblx0XHRkYXRhID0gW107XG5cblx0XHR0aGlzLmhhc0luZGV4ID0gZmFsc2U7XG5cblx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJodG1sSW1wb3J0aW5nXCIpO1xuXG5cdFx0cm93cyA9IHJvd3MgPyByb3dzLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidHJcIikgOiBbXTtcblxuXHRcdC8vY2hlY2sgZm9yIFRhYnVsYXRvciBpbmxpbmUgb3B0aW9uc1xuXHRcdHRoaXMuX2V4dHJhY3RPcHRpb25zKGVsZW1lbnQsIG9wdGlvbnMpO1xuXG5cdFx0aWYoaGVhZGVycy5sZW5ndGgpe1xuXHRcdFx0dGhpcy5fZXh0cmFjdEhlYWRlcnMoaGVhZGVycywgcm93cyk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5fZ2VuZXJhdGVCbGFua0hlYWRlcnMoaGVhZGVycywgcm93cyk7XG5cdFx0fVxuXG5cdFx0Ly9pdGVyYXRlIHRocm91Z2ggdGFibGUgcm93cyBhbmQgYnVpbGQgZGF0YSBzZXRcblx0XHRmb3IodmFyIGluZGV4ID0gMDsgaW5kZXggPCByb3dzLmxlbmd0aDsgaW5kZXgrKyl7XG5cdFx0XHR2YXIgcm93ID0gcm93c1tpbmRleF0sXG5cdFx0XHRjZWxscyA9IHJvdy5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRkXCIpLFxuXHRcdFx0aXRlbSA9IHt9O1xuXG5cdFx0XHQvL2NyZWF0ZSBpbmRleCBpZiB0aGUgZG9uJ3QgZXhpc3QgaW4gdGFibGVcblx0XHRcdGlmKCF0aGlzLmhhc0luZGV4KXtcblx0XHRcdFx0aXRlbVtvcHRpb25zLmluZGV4XSA9IGluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgY2VsbHMubGVuZ3RoOyBpKyspe1xuXHRcdFx0XHR2YXIgY2VsbCA9IGNlbGxzW2ldO1xuXHRcdFx0XHRpZih0eXBlb2YgdGhpcy5maWVsZEluZGV4W2ldICE9PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdFx0XHRpdGVtW3RoaXMuZmllbGRJbmRleFtpXV0gPSBjZWxsLmlubmVySFRNTDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvL2FkZCByb3cgZGF0YSB0byBpdGVtXG5cdFx0XHRkYXRhLnB1c2goaXRlbSk7XG5cdFx0fVxuXG5cdFx0b3B0aW9ucy5kYXRhID0gZGF0YTtcblxuXHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcImh0bWxJbXBvcnRlZFwiKTtcblx0fVxuXG5cdC8vZXh0cmFjdCB0YWJ1bGF0b3IgYXR0cmlidXRlIG9wdGlvbnNcblx0X2V4dHJhY3RPcHRpb25zKGVsZW1lbnQsIG9wdGlvbnMsIGRlZmF1bHRPcHRpb25zKXtcblx0XHR2YXIgYXR0cmlidXRlcyA9IGVsZW1lbnQuYXR0cmlidXRlcztcblx0XHR2YXIgb3B0aW9uc0FyciA9IGRlZmF1bHRPcHRpb25zID8gT2JqZWN0LmtleXMoZGVmYXVsdE9wdGlvbnMpIDogT2JqZWN0LmtleXMob3B0aW9ucyk7XG5cdFx0dmFyIG9wdGlvbnNMaXN0ID0ge307XG5cblx0XHRvcHRpb25zQXJyLmZvckVhY2goKGl0ZW0pID0+IHtcblx0XHRcdG9wdGlvbnNMaXN0W2l0ZW0udG9Mb3dlckNhc2UoKV0gPSBpdGVtO1xuXHRcdH0pO1xuXG5cdFx0Zm9yKHZhciBpbmRleCBpbiBhdHRyaWJ1dGVzKXtcblx0XHRcdHZhciBhdHRyaWIgPSBhdHRyaWJ1dGVzW2luZGV4XTtcblx0XHRcdHZhciBuYW1lO1xuXG5cdFx0XHRpZihhdHRyaWIgJiYgdHlwZW9mIGF0dHJpYiA9PSBcIm9iamVjdFwiICYmIGF0dHJpYi5uYW1lICYmIGF0dHJpYi5uYW1lLmluZGV4T2YoXCJ0YWJ1bGF0b3ItXCIpID09PSAwKXtcblx0XHRcdFx0bmFtZSA9IGF0dHJpYi5uYW1lLnJlcGxhY2UoXCJ0YWJ1bGF0b3ItXCIsIFwiXCIpO1xuXG5cdFx0XHRcdGlmKHR5cGVvZiBvcHRpb25zTGlzdFtuYW1lXSAhPT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRcdFx0b3B0aW9uc1tvcHRpb25zTGlzdFtuYW1lXV0gPSB0aGlzLl9hdHRyaWJWYWx1ZShhdHRyaWIudmFsdWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly9nZXQgdmFsdWUgb2YgYXR0cmlidXRlXG5cdF9hdHRyaWJWYWx1ZSh2YWx1ZSl7XG5cdFx0aWYodmFsdWUgPT09IFwidHJ1ZVwiKXtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdGlmKHZhbHVlID09PSBcImZhbHNlXCIpe1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXG5cdC8vZmluZCBjb2x1bW4gaWYgaXQgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkXG5cdF9maW5kQ29sKHRpdGxlKXtcblx0XHR2YXIgbWF0Y2ggPSB0aGlzLnRhYmxlLm9wdGlvbnMuY29sdW1ucy5maW5kKChjb2x1bW4pID0+IHtcblx0XHRcdHJldHVybiBjb2x1bW4udGl0bGUgPT09IHRpdGxlO1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIG1hdGNoIHx8IGZhbHNlO1xuXHR9XG5cblx0Ly9leHRyYWN0IGNvbHVtbiBmcm9tIGhlYWRlcnNcblx0X2V4dHJhY3RIZWFkZXJzKGhlYWRlcnMsIHJvd3Mpe1xuXHRcdGZvcih2YXIgaW5kZXggPSAwOyBpbmRleCA8IGhlYWRlcnMubGVuZ3RoOyBpbmRleCsrKXtcblx0XHRcdHZhciBoZWFkZXIgPSBoZWFkZXJzW2luZGV4XSxcblx0XHRcdGV4aXN0cyA9IGZhbHNlLFxuXHRcdFx0Y29sID0gdGhpcy5fZmluZENvbChoZWFkZXIudGV4dENvbnRlbnQpLFxuXHRcdFx0d2lkdGg7XG5cblx0XHRcdGlmKGNvbCl7XG5cdFx0XHRcdGV4aXN0cyA9IHRydWU7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGNvbCA9IHt0aXRsZTpoZWFkZXIudGV4dENvbnRlbnQudHJpbSgpfTtcblx0XHRcdH1cblxuXHRcdFx0aWYoIWNvbC5maWVsZCkge1xuXHRcdFx0XHRjb2wuZmllbGQgPSBoZWFkZXIudGV4dENvbnRlbnQudHJpbSgpLnRvTG93ZXJDYXNlKCkucmVwbGFjZUFsbChcIiBcIiwgXCJfXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHR3aWR0aCA9IGhlYWRlci5nZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiKTtcblxuXHRcdFx0aWYod2lkdGggJiYgIWNvbC53aWR0aClcdHtcblx0XHRcdFx0Y29sLndpZHRoID0gd2lkdGg7XG5cdFx0XHR9XG5cblx0XHRcdC8vY2hlY2sgZm9yIFRhYnVsYXRvciBpbmxpbmUgb3B0aW9uc1xuXHRcdFx0dGhpcy5fZXh0cmFjdE9wdGlvbnMoaGVhZGVyLCBjb2wsIHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5vcHRpb25zTGlzdC5yZWdpc3RlcmVkRGVmYXVsdHMpO1xuXG5cdFx0XHR0aGlzLmZpZWxkSW5kZXhbaW5kZXhdID0gY29sLmZpZWxkO1xuXG5cdFx0XHRpZihjb2wuZmllbGQgPT0gdGhpcy50YWJsZS5vcHRpb25zLmluZGV4KXtcblx0XHRcdFx0dGhpcy5oYXNJbmRleCA9IHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdGlmKCFleGlzdHMpe1xuXHRcdFx0XHR0aGlzLnRhYmxlLm9wdGlvbnMuY29sdW1ucy5wdXNoKGNvbCk7XG5cdFx0XHR9XG5cblx0XHR9XG5cdH1cblxuXHQvL2dlbmVyYXRlIGJsYW5rIGhlYWRlcnNcblx0X2dlbmVyYXRlQmxhbmtIZWFkZXJzKGhlYWRlcnMsIHJvd3Mpe1xuXHRcdGZvcih2YXIgaW5kZXggPSAwOyBpbmRleCA8IGhlYWRlcnMubGVuZ3RoOyBpbmRleCsrKXtcblx0XHRcdHZhciBoZWFkZXIgPSBoZWFkZXJzW2luZGV4XSxcblx0XHRcdGNvbCA9IHt0aXRsZTpcIlwiLCBmaWVsZDpcImNvbFwiICsgaW5kZXh9O1xuXG5cdFx0XHR0aGlzLmZpZWxkSW5kZXhbaW5kZXhdID0gY29sLmZpZWxkO1xuXG5cdFx0XHR2YXIgd2lkdGggPSBoZWFkZXIuZ2V0QXR0cmlidXRlKFwid2lkdGhcIik7XG5cblx0XHRcdGlmKHdpZHRoKXtcblx0XHRcdFx0Y29sLndpZHRoID0gd2lkdGg7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMudGFibGUub3B0aW9ucy5jb2x1bW5zLnB1c2goY29sKTtcblx0XHR9XG5cdH1cbn1cblxuSHRtbFRhYmxlSW1wb3J0Lm1vZHVsZU5hbWUgPSBcImh0bWxUYWJsZUltcG9ydFwiO1xuXG5mdW5jdGlvbiBjc3ZJbXBvcnRlcihpbnB1dCl7XG5cdHZhciBkYXRhID0gW10sXG5cdHJvdyA9IDAsIFxuXHRjb2wgPSAwLFxuXHRpblF1b3RlID0gZmFsc2U7XG4gICAgXG5cdC8vSXRlcmF0ZSBvdmVyIGVhY2ggY2hhcmFjdGVyXG5cdGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBpbnB1dC5sZW5ndGg7IGluZGV4KyspIHtcblx0XHRsZXQgY2hhciA9IGlucHV0W2luZGV4XSwgXG5cdFx0bmV4dENoYXIgPSBpbnB1dFtpbmRleCsxXTsgICAgICBcbiAgICAgICAgXG5cdFx0Ly9Jbml0aWFsaXplIGVtcHR5IHJvd1xuXHRcdGlmKCFkYXRhW3Jvd10pe1xuXHRcdFx0ZGF0YVtyb3ddID0gW107XG5cdFx0fVxuXG5cdFx0Ly9Jbml0aWFsaXplIGVtcHR5IGNvbHVtblxuXHRcdGlmKCFkYXRhW3Jvd11bY29sXSl7XG5cdFx0XHRkYXRhW3Jvd11bY29sXSA9IFwiXCI7XG5cdFx0fVxuICAgICAgICBcblx0XHQvL0hhbmRsZSBxdW90YXRpb24gbWFyayBpbnNpZGUgc3RyaW5nXG5cdFx0aWYgKGNoYXIgPT0gJ1wiJyAmJiBpblF1b3RlICYmIG5leHRDaGFyID09ICdcIicpIHsgXG5cdFx0XHRkYXRhW3Jvd11bY29sXSArPSBjaGFyOyBcblx0XHRcdGluZGV4Kys7XG5cdFx0XHRjb250aW51ZTsgXG5cdFx0fVxuICAgICAgICBcblx0XHQvL0JlZ2luIC8gRW5kIFF1b3RlXG5cdFx0aWYgKGNoYXIgPT0gJ1wiJykgeyBcblx0XHRcdGluUXVvdGUgPSAhaW5RdW90ZTtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cbiAgICAgICAgXG5cdFx0Ly9OZXh0IGNvbHVtbiAoaWYgbm90IGluIHF1b3RlKVxuXHRcdGlmIChjaGFyID09ICcsJyAmJiAhaW5RdW90ZSkgeyBcblx0XHRcdGNvbCsrO1xuXHRcdFx0Y29udGludWU7IFxuXHRcdH1cbiAgICAgICAgXG5cdFx0Ly9OZXcgcm93IGlmIG5ldyBsaW5lIGFuZCBub3QgaW4gcXVvdGUgKENSTEYpIFxuXHRcdGlmIChjaGFyID09ICdcXHInICYmIG5leHRDaGFyID09ICdcXG4nICYmICFpblF1b3RlKSB7IFxuXHRcdFx0Y29sID0gMDsgXG5cdFx0XHRyb3crKzsgXG5cdFx0XHRpbmRleCsrOyBcblx0XHRcdGNvbnRpbnVlOyBcblx0XHR9XG4gICAgICAgIFxuXHRcdC8vTmV3IHJvdyBpZiBuZXcgbGluZSBhbmQgbm90IGluIHF1b3RlIChDUiBvciBMRikgXG5cdFx0aWYgKChjaGFyID09ICdcXHInIHx8IGNoYXIgPT0gJ1xcbicpICYmICFpblF1b3RlKSB7IFxuXHRcdFx0Y29sID0gMDtcblx0XHRcdHJvdysrO1xuXHRcdFx0Y29udGludWU7IFxuXHRcdH1cblxuXHRcdC8vTm9ybWFsIENoYXJhY3RlciwgYXBwZW5kIHRvIGNvbHVtblxuXHRcdGRhdGFbcm93XVtjb2xdICs9IGNoYXI7XG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24ganNvbiQxKGlucHV0KXtcblx0dHJ5IHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZShpbnB1dCk7XG5cdH0gY2F0Y2goZSkge1xuXHRcdGNvbnNvbGUud2FybihcIkpTT04gSW1wb3J0IEVycm9yIC0gRmlsZSBjb250ZW50cyBpcyBpbnZhbGlkIEpTT05cIiwgZSk7XG5cdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KCk7XG5cdH1cbn1cblxuZnVuY3Rpb24gYXJyYXlJbXBvcnRlcihpbnB1dCl7XG5cdHJldHVybiBpbnB1dDtcbn1cblxudmFyIGRlZmF1bHRJbXBvcnRlcnMgPSB7XG5cdGNzdjpjc3ZJbXBvcnRlcixcblx0anNvbjpqc29uJDEsXG5cdGFycmF5OmFycmF5SW1wb3J0ZXIsXG59O1xuXG5jbGFzcyBJbXBvcnQgZXh0ZW5kcyBNb2R1bGV7XG4gICAgXG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG4gICAgICAgIFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImltcG9ydEZvcm1hdFwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJpbXBvcnRSZWFkZXJcIiwgXCJ0ZXh0XCIpO1xuXHR9XG4gICAgXG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcImltcG9ydFwiLCB0aGlzLmltcG9ydEZyb21GaWxlLmJpbmQodGhpcykpO1xuXG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmltcG9ydEZvcm1hdCl7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImRhdGEtbG9hZGluZ1wiLCB0aGlzLmxvYWREYXRhQ2hlY2suYmluZCh0aGlzKSwgMTApO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJkYXRhLWxvYWRcIiwgdGhpcy5sb2FkRGF0YS5iaW5kKHRoaXMpLCAxMCk7XG5cdFx0fVxuXHR9XG5cblx0bG9hZERhdGFDaGVjayhkYXRhKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5vcHRpb25zLmltcG9ydEZvcm1hdCAmJiAodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgfHwgKEFycmF5LmlzQXJyYXkoZGF0YSkgJiYgZGF0YS5sZW5ndGggJiYgQXJyYXkuaXNBcnJheShkYXRhKSkpO1xuXHR9XG5cblx0bG9hZERhdGEoZGF0YSwgcGFyYW1zLCBjb25maWcsIHNpbGVudCwgcHJldmlvdXNEYXRhKXtcblx0XHRyZXR1cm4gdGhpcy5pbXBvcnREYXRhKHRoaXMubG9va3VwSW1wb3J0ZXIoKSwgZGF0YSlcblx0XHRcdC50aGVuKHRoaXMuc3RydWN0dXJlRGF0YS5iaW5kKHRoaXMpKVxuXHRcdFx0LmNhdGNoKChlcnIpID0+IHtcblx0XHRcdFx0Y29uc29sZS5lcnJvcihcIkltcG9ydCBFcnJvcjpcIiwgZXJyIHx8IFwiVW5hYmxlIHRvIGltcG9ydCBkYXRhXCIpO1xuXHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcblx0XHRcdH0pO1xuXHR9XG5cblx0bG9va3VwSW1wb3J0ZXIoaW1wb3J0Rm9ybWF0KXtcblx0XHR2YXIgaW1wb3J0ZXI7XG4gICAgICAgIFxuXHRcdGlmKCFpbXBvcnRGb3JtYXQpe1xuXHRcdFx0aW1wb3J0Rm9ybWF0ID0gdGhpcy50YWJsZS5vcHRpb25zLmltcG9ydEZvcm1hdDtcblx0XHR9XG4gICAgICAgIFxuXHRcdGlmKHR5cGVvZiBpbXBvcnRGb3JtYXQgPT09IFwic3RyaW5nXCIpe1xuXHRcdFx0aW1wb3J0ZXIgPSBJbXBvcnQuaW1wb3J0ZXJzW2ltcG9ydEZvcm1hdF07XG5cdFx0fWVsc2Uge1xuXHRcdFx0aW1wb3J0ZXIgPSBpbXBvcnRGb3JtYXQ7XG5cdFx0fVxuXG5cdFx0aWYoIWltcG9ydGVyKXtcblx0XHRcdGNvbnNvbGUuZXJyb3IoXCJJbXBvcnQgRXJyb3IgLSBJbXBvcnRlciBub3QgZm91bmQ6XCIsIGltcG9ydEZvcm1hdCk7XG5cdFx0fVxuICAgICAgICBcblx0XHRyZXR1cm4gaW1wb3J0ZXI7XG5cdH1cbiAgICBcblx0aW1wb3J0RnJvbUZpbGUoaW1wb3J0Rm9ybWF0LCBleHRlbnNpb24pe1xuXHRcdHZhciBpbXBvcnRlciA9IHRoaXMubG9va3VwSW1wb3J0ZXIoaW1wb3J0Rm9ybWF0KTtcbiAgICAgICAgXG5cdFx0aWYoaW1wb3J0ZXIpe1xuXHRcdFx0cmV0dXJuIHRoaXMucGlja0ZpbGUoZXh0ZW5zaW9uKVxuXHRcdFx0XHQudGhlbih0aGlzLmltcG9ydERhdGEuYmluZCh0aGlzLCBpbXBvcnRlcikpXG5cdFx0XHRcdC50aGVuKHRoaXMuc3RydWN0dXJlRGF0YS5iaW5kKHRoaXMpKVxuXHRcdFx0XHQudGhlbih0aGlzLnNldERhdGEuYmluZCh0aGlzKSlcblx0XHRcdFx0LmNhdGNoKChlcnIpID0+IHtcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKFwiSW1wb3J0IEVycm9yOlwiLCBlcnIgfHwgXCJVbmFibGUgdG8gaW1wb3J0IGZpbGVcIik7XG5cdFx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG5cdFx0XHRcdH0pO1xuXHRcdH1cblx0fVxuICAgIFxuXHRwaWNrRmlsZShleHRlbnNpb25zKXtcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXHRcdFx0aW5wdXQudHlwZSA9IFwiZmlsZVwiO1xuXHRcdFx0aW5wdXQuYWNjZXB0ID0gZXh0ZW5zaW9ucztcbiAgICAgICAgICAgIFxuXHRcdFx0aW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCAoZSkgPT4ge1xuXHRcdFx0XHR2YXIgZmlsZSA9IGlucHV0LmZpbGVzWzBdLFxuXHRcdFx0XHRyZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgICAgICAgICAgIFxuXHRcdFx0XHRzd2l0Y2godGhpcy50YWJsZS5vcHRpb25zLmltcG9ydFJlYWRlcil7XG5cdFx0XHRcdFx0Y2FzZSBcImJ1ZmZlclwiOlxuXHRcdFx0XHRcdFx0cmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlIFwiYmluYXJ5XCI6XG5cdFx0XHRcdFx0XHRyZWFkZXIucmVhZEFzQmluYXJ5U3RyaW5nKGZpbGUpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlIFwidXJsXCI6XG5cdFx0XHRcdFx0XHRyZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSBcInRleHRcIjpcblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0cmVhZGVyLnJlYWRBc1RleHQoZmlsZSk7XG5cdFx0XHRcdH1cbiAgICAgICAgICAgICAgICAgIFxuXHRcdFx0XHRyZWFkZXIub25sb2FkID0gKGUpID0+IHtcblx0XHRcdFx0XHRyZXNvbHZlKHJlYWRlci5yZXN1bHQpO1xuXHRcdFx0XHR9O1xuICAgICAgICAgICAgICAgIFxuXHRcdFx0XHRyZWFkZXIub25lcnJvciA9IChlKSA9PiB7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiRmlsZSBMb2FkIEVycm9yIC0gVW5hYmxlIHRvIHJlYWQgZmlsZVwiKTtcblx0XHRcdFx0XHRyZWplY3QoKTtcblx0XHRcdFx0fTtcblx0XHRcdH0pO1xuICAgICAgICAgICAgXG5cdFx0XHRpbnB1dC5jbGljaygpO1xuXHRcdH0pO1xuXHR9XG4gICAgXG5cdGltcG9ydERhdGEoaW1wb3J0ZXIsIGZpbGVDb250ZW50cyl7XG5cdFx0dmFyIGRhdGEgPSBpbXBvcnRlci5jYWxsKHRoaXMudGFibGUsIGZpbGVDb250ZW50cyk7XG4gICAgICAgIFxuXHRcdGlmKGRhdGEgaW5zdGFuY2VvZiBQcm9taXNlKXtcblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJldHVybiBkYXRhID8gUHJvbWlzZS5yZXNvbHZlKGRhdGEpIDogUHJvbWlzZS5yZWplY3QoKTtcblx0XHR9XG5cdH1cblxuXHRzdHJ1Y3R1cmVEYXRhKHBhcnNlZERhdGEpe1xuXHRcdHZhciBkYXRhID0gW107XG4gICAgICAgIFxuXHRcdGlmKEFycmF5LmlzQXJyYXkocGFyc2VkRGF0YSkgJiYgcGFyc2VkRGF0YS5sZW5ndGggJiYgQXJyYXkuaXNBcnJheShwYXJzZWREYXRhWzBdKSl7XG5cdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuYXV0b0NvbHVtbnMpe1xuXHRcdFx0XHRkYXRhID0gdGhpcy5zdHJ1Y3R1cmVBcnJheVRvT2JqZWN0KHBhcnNlZERhdGEpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRkYXRhID0gdGhpcy5zdHJ1Y3R1cmVBcnJheVRvQ29sdW1ucyhwYXJzZWREYXRhKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fWVsc2Uge1xuXHRcdFx0cmV0dXJuIHBhcnNlZERhdGE7XG5cdFx0fVxuXHR9XG5cblx0c3RydWN0dXJlQXJyYXlUb09iamVjdChwYXJzZWREYXRhKXtcblx0XHR2YXIgY29sdW1ucyA9IHBhcnNlZERhdGEuc2hpZnQoKTtcblxuXHRcdHZhciBkYXRhID0gcGFyc2VkRGF0YS5tYXAoKHZhbHVlcykgPT4ge1xuXHRcdFx0dmFyIHJvdyA9IHt9O1xuXG5cdFx0XHRjb2x1bW5zLmZvckVhY2goKGtleSwgaSkgPT4ge1xuXHRcdFx0XHRyb3dba2V5XSA9IHZhbHVlc1tpXTtcblx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm4gcm93O1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cdH1cblxuXHRzdHJ1Y3R1cmVBcnJheVRvQ29sdW1ucyhwYXJzZWREYXRhKXtcblx0XHR2YXIgZGF0YSA9IFtdLFxuXHRcdGNvbHVtbnMgPSB0aGlzLnRhYmxlLmdldENvbHVtbnMoKTtcblxuXHRcdC8vcmVtb3ZlIGZpcnN0IHJvdyBpZiBpdCBpcyB0aGUgY29sdW1uIG5hbWVzXG5cdFx0aWYoY29sdW1uc1swXSAmJiBwYXJzZWREYXRhWzBdWzBdKXtcblx0XHRcdGlmKGNvbHVtbnNbMF0uZ2V0RGVmaW5pdGlvbigpLnRpdGxlID09PSBwYXJzZWREYXRhWzBdWzBdKXtcblx0XHRcdFx0cGFyc2VkRGF0YS5zaGlmdCgpO1xuXHRcdFx0fVxuXHRcdH1cbiAgICAgICAgXG5cdFx0Ly9jb252ZXJ0IHJvdyBhcnJheXMgdG8gb2JqZWN0c1xuXHRcdHBhcnNlZERhdGEuZm9yRWFjaCgocm93RGF0YSkgPT4ge1xuXHRcdFx0dmFyIHJvdyA9IHt9O1xuXG5cdFx0XHRyb3dEYXRhLmZvckVhY2goKHZhbHVlLCBpbmRleCkgPT4ge1xuXHRcdFx0XHR2YXIgY29sdW1uID0gY29sdW1uc1tpbmRleF07XG5cblx0XHRcdFx0aWYoY29sdW1uKXtcblx0XHRcdFx0XHRyb3dbY29sdW1uLmdldEZpZWxkKCldID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRkYXRhLnB1c2gocm93KTtcblx0XHR9KTtcblxuXHRcdHJldHVybiBkYXRhO1xuXHR9XG4gICAgXG5cdHNldERhdGEoZGF0YSl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUuc2V0RGF0YShkYXRhKTtcblx0fVxufVxuXG5JbXBvcnQubW9kdWxlTmFtZSA9IFwiaW1wb3J0XCI7XG5cbi8vbG9hZCBkZWZhdWx0c1xuSW1wb3J0LmltcG9ydGVycyA9IGRlZmF1bHRJbXBvcnRlcnM7XG5cbmNsYXNzIEludGVyYWN0aW9uIGV4dGVuZHMgTW9kdWxle1xuXG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cblx0XHR0aGlzLmV2ZW50TWFwID0ge1xuXHRcdFx0Ly9yb3cgZXZlbnRzXG5cdFx0XHRyb3dDbGljazpcInJvdy1jbGlja1wiLFxuXHRcdFx0cm93RGJsQ2xpY2s6XCJyb3ctZGJsY2xpY2tcIixcblx0XHRcdHJvd0NvbnRleHQ6XCJyb3ctY29udGV4dG1lbnVcIixcblx0XHRcdHJvd01vdXNlRW50ZXI6XCJyb3ctbW91c2VlbnRlclwiLFxuXHRcdFx0cm93TW91c2VMZWF2ZTpcInJvdy1tb3VzZWxlYXZlXCIsXG5cdFx0XHRyb3dNb3VzZU92ZXI6XCJyb3ctbW91c2VvdmVyXCIsXG5cdFx0XHRyb3dNb3VzZU91dDpcInJvdy1tb3VzZW91dFwiLFxuXHRcdFx0cm93TW91c2VNb3ZlOlwicm93LW1vdXNlbW92ZVwiLFxuXHRcdFx0cm93TW91c2VEb3duOlwicm93LW1vdXNlZG93blwiLFxuXHRcdFx0cm93TW91c2VVcDpcInJvdy1tb3VzZXVwXCIsXG5cdFx0XHRyb3dUYXA6XCJyb3dcIixcblx0XHRcdHJvd0RibFRhcDpcInJvd1wiLFxuXHRcdFx0cm93VGFwSG9sZDpcInJvd1wiLFxuXG5cdFx0XHQvL2NlbGwgZXZlbnRzXG5cdFx0XHRjZWxsQ2xpY2s6XCJjZWxsLWNsaWNrXCIsXG5cdFx0XHRjZWxsRGJsQ2xpY2s6XCJjZWxsLWRibGNsaWNrXCIsXG5cdFx0XHRjZWxsQ29udGV4dDpcImNlbGwtY29udGV4dG1lbnVcIixcblx0XHRcdGNlbGxNb3VzZUVudGVyOlwiY2VsbC1tb3VzZWVudGVyXCIsXG5cdFx0XHRjZWxsTW91c2VMZWF2ZTpcImNlbGwtbW91c2VsZWF2ZVwiLFxuXHRcdFx0Y2VsbE1vdXNlT3ZlcjpcImNlbGwtbW91c2VvdmVyXCIsXG5cdFx0XHRjZWxsTW91c2VPdXQ6XCJjZWxsLW1vdXNlb3V0XCIsXG5cdFx0XHRjZWxsTW91c2VNb3ZlOlwiY2VsbC1tb3VzZW1vdmVcIixcblx0XHRcdGNlbGxNb3VzZURvd246XCJjZWxsLW1vdXNlZG93blwiLFxuXHRcdFx0Y2VsbE1vdXNlVXA6XCJjZWxsLW1vdXNldXBcIixcblx0XHRcdGNlbGxUYXA6XCJjZWxsXCIsXG5cdFx0XHRjZWxsRGJsVGFwOlwiY2VsbFwiLFxuXHRcdFx0Y2VsbFRhcEhvbGQ6XCJjZWxsXCIsXG5cblx0XHRcdC8vY29sdW1uIGhlYWRlciBldmVudHNcblx0XHRcdGhlYWRlckNsaWNrOlwiY29sdW1uLWNsaWNrXCIsXG5cdFx0XHRoZWFkZXJEYmxDbGljazpcImNvbHVtbi1kYmxjbGlja1wiLFxuXHRcdFx0aGVhZGVyQ29udGV4dDpcImNvbHVtbi1jb250ZXh0bWVudVwiLFxuXHRcdFx0aGVhZGVyTW91c2VFbnRlcjpcImNvbHVtbi1tb3VzZWVudGVyXCIsXG5cdFx0XHRoZWFkZXJNb3VzZUxlYXZlOlwiY29sdW1uLW1vdXNlbGVhdmVcIixcblx0XHRcdGhlYWRlck1vdXNlT3ZlcjpcImNvbHVtbi1tb3VzZW92ZXJcIixcblx0XHRcdGhlYWRlck1vdXNlT3V0OlwiY29sdW1uLW1vdXNlb3V0XCIsXG5cdFx0XHRoZWFkZXJNb3VzZU1vdmU6XCJjb2x1bW4tbW91c2Vtb3ZlXCIsXG5cdFx0XHRoZWFkZXJNb3VzZURvd246XCJjb2x1bW4tbW91c2Vkb3duXCIsXG5cdFx0XHRoZWFkZXJNb3VzZVVwOlwiY29sdW1uLW1vdXNldXBcIixcblx0XHRcdGhlYWRlclRhcDpcImNvbHVtblwiLFxuXHRcdFx0aGVhZGVyRGJsVGFwOlwiY29sdW1uXCIsXG5cdFx0XHRoZWFkZXJUYXBIb2xkOlwiY29sdW1uXCIsXG5cblx0XHRcdC8vZ3JvdXAgaGVhZGVyXG5cdFx0XHRncm91cENsaWNrOlwiZ3JvdXAtY2xpY2tcIixcblx0XHRcdGdyb3VwRGJsQ2xpY2s6XCJncm91cC1kYmxjbGlja1wiLFxuXHRcdFx0Z3JvdXBDb250ZXh0OlwiZ3JvdXAtY29udGV4dG1lbnVcIixcblx0XHRcdGdyb3VwTW91c2VFbnRlcjpcImdyb3VwLW1vdXNlZW50ZXJcIixcblx0XHRcdGdyb3VwTW91c2VMZWF2ZTpcImdyb3VwLW1vdXNlbGVhdmVcIixcblx0XHRcdGdyb3VwTW91c2VPdmVyOlwiZ3JvdXAtbW91c2VvdmVyXCIsXG5cdFx0XHRncm91cE1vdXNlT3V0OlwiZ3JvdXAtbW91c2VvdXRcIixcblx0XHRcdGdyb3VwTW91c2VNb3ZlOlwiZ3JvdXAtbW91c2Vtb3ZlXCIsXG5cdFx0XHRncm91cE1vdXNlRG93bjpcImdyb3VwLW1vdXNlZG93blwiLFxuXHRcdFx0Z3JvdXBNb3VzZVVwOlwiZ3JvdXAtbW91c2V1cFwiLFxuXHRcdFx0Z3JvdXBUYXA6XCJncm91cFwiLFxuXHRcdFx0Z3JvdXBEYmxUYXA6XCJncm91cFwiLFxuXHRcdFx0Z3JvdXBUYXBIb2xkOlwiZ3JvdXBcIixcblx0XHR9O1xuXG5cdFx0dGhpcy5zdWJzY3JpYmVycyA9IHt9O1xuXG5cdFx0dGhpcy50b3VjaFN1YnNjcmliZXJzID0ge307XG5cblx0XHR0aGlzLmNvbHVtblN1YnNjcmliZXJzID0ge307XG5cblx0XHR0aGlzLnRvdWNoV2F0Y2hlcnMgPSB7XG5cdFx0XHRyb3c6e1xuXHRcdFx0XHR0YXA6bnVsbCxcblx0XHRcdFx0dGFwRGJsOm51bGwsXG5cdFx0XHRcdHRhcEhvbGQ6bnVsbCxcblx0XHRcdH0sXG5cdFx0XHRjZWxsOntcblx0XHRcdFx0dGFwOm51bGwsXG5cdFx0XHRcdHRhcERibDpudWxsLFxuXHRcdFx0XHR0YXBIb2xkOm51bGwsXG5cdFx0XHR9LFxuXHRcdFx0Y29sdW1uOntcblx0XHRcdFx0dGFwOm51bGwsXG5cdFx0XHRcdHRhcERibDpudWxsLFxuXHRcdFx0XHR0YXBIb2xkOm51bGwsXG5cdFx0XHR9LFxuXHRcdFx0Z3JvdXA6e1xuXHRcdFx0XHR0YXA6bnVsbCxcblx0XHRcdFx0dGFwRGJsOm51bGwsXG5cdFx0XHRcdHRhcEhvbGQ6bnVsbCxcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImhlYWRlckNsaWNrXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJEYmxDbGlja1wiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiaGVhZGVyQ29udGV4dFwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiaGVhZGVyTW91c2VFbnRlclwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiaGVhZGVyTW91c2VMZWF2ZVwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiaGVhZGVyTW91c2VPdmVyXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJNb3VzZU91dFwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiaGVhZGVyTW91c2VNb3ZlXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJNb3VzZURvd25cIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImhlYWRlck1vdXNlVXBcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImhlYWRlclRhcFwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiaGVhZGVyRGJsVGFwXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJUYXBIb2xkXCIpO1xuXG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImNlbGxDbGlja1wiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiY2VsbERibENsaWNrXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJjZWxsQ29udGV4dFwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiY2VsbE1vdXNlRW50ZXJcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImNlbGxNb3VzZUxlYXZlXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJjZWxsTW91c2VPdmVyXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJjZWxsTW91c2VPdXRcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImNlbGxNb3VzZU1vdmVcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImNlbGxNb3VzZURvd25cIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImNlbGxNb3VzZVVwXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJjZWxsVGFwXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJjZWxsRGJsVGFwXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJjZWxsVGFwSG9sZFwiKTtcblxuXHR9XG5cblx0aW5pdGlhbGl6ZSgpe1xuXHRcdHRoaXMuaW5pdGlhbGl6ZUV4dGVybmFsRXZlbnRzKCk7XG5cblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1pbml0XCIsIHRoaXMuaW5pdGlhbGl6ZUNvbHVtbi5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImNlbGwtZGJsY2xpY2tcIiwgdGhpcy5jZWxsQ29udGVudHNTZWxlY3Rpb25GaXhlci5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcInNjcm9sbC1ob3Jpem9udGFsXCIsIHRoaXMuY2xlYXJUb3VjaFdhdGNoZXJzLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwic2Nyb2xsLXZlcnRpY2FsXCIsIHRoaXMuY2xlYXJUb3VjaFdhdGNoZXJzLmJpbmQodGhpcykpO1xuXHR9XG5cblx0Y2xlYXJUb3VjaFdhdGNoZXJzKCl7XG5cdFx0dmFyIHR5cGVzID0gT2JqZWN0LnZhbHVlcyh0aGlzLnRvdWNoV2F0Y2hlcnMpO1xuXG5cdFx0dHlwZXMuZm9yRWFjaCgodHlwZSkgPT4ge1xuXHRcdFx0Zm9yKGxldCBrZXkgaW4gdHlwZSl7XG5cdFx0XHRcdHR5cGVba2V5XSA9IG51bGw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0XHRcblx0Y2VsbENvbnRlbnRzU2VsZWN0aW9uRml4ZXIoZSwgY2VsbCl7XG5cdFx0dmFyIHJhbmdlO1xuXG5cdFx0aWYodGhpcy50YWJsZS5tb2RFeGlzdHMoXCJlZGl0XCIpKXtcblx0XHRcdGlmICh0aGlzLnRhYmxlLm1vZHVsZXMuZWRpdC5jdXJyZW50Q2VsbCA9PT0gY2VsbCl7XG5cdFx0XHRcdHJldHVybjsgLy9wcmV2ZW50IGluc3RhbnQgc2VsZWN0aW9uIG9mIGVkaXRvciBjb250ZW50XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0dHJ5e1xuXHRcdFx0aWYgKGRvY3VtZW50LnNlbGVjdGlvbikgeyAvLyBJRVxuXHRcdFx0XHRyYW5nZSA9IGRvY3VtZW50LmJvZHkuY3JlYXRlVGV4dFJhbmdlKCk7XG5cdFx0XHRcdHJhbmdlLm1vdmVUb0VsZW1lbnRUZXh0KGNlbGwuZ2V0RWxlbWVudCgpKTtcblx0XHRcdFx0cmFuZ2Uuc2VsZWN0KCk7XG5cdFx0XHR9IGVsc2UgaWYgKHdpbmRvdy5nZXRTZWxlY3Rpb24pIHtcblx0XHRcdFx0cmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuXHRcdFx0XHRyYW5nZS5zZWxlY3ROb2RlKGNlbGwuZ2V0RWxlbWVudCgpKTtcblx0XHRcdFx0d2luZG93LmdldFNlbGVjdGlvbigpLnJlbW92ZUFsbFJhbmdlcygpO1xuXHRcdFx0XHR3aW5kb3cuZ2V0U2VsZWN0aW9uKCkuYWRkUmFuZ2UocmFuZ2UpO1xuXHRcdFx0fVxuXHRcdH1jYXRjaChlKXt9XG5cdH1cblxuXHRpbml0aWFsaXplRXh0ZXJuYWxFdmVudHMoKXtcblx0XHRmb3IobGV0IGtleSBpbiB0aGlzLmV2ZW50TWFwKXtcblx0XHRcdHRoaXMuc3Vic2NyaXB0aW9uQ2hhbmdlRXh0ZXJuYWwoa2V5LCB0aGlzLnN1YnNjcmlwdGlvbkNoYW5nZWQuYmluZCh0aGlzLCBrZXkpKTtcblx0XHR9XG5cdH1cblxuXHRzdWJzY3JpcHRpb25DaGFuZ2VkKGtleSwgYWRkZWQpe1xuXHRcdGlmKGFkZGVkKXtcblx0XHRcdGlmKCF0aGlzLnN1YnNjcmliZXJzW2tleV0pe1xuXHRcdFx0XHRpZih0aGlzLmV2ZW50TWFwW2tleV0uaW5jbHVkZXMoXCItXCIpKXtcblx0XHRcdFx0XHR0aGlzLnN1YnNjcmliZXJzW2tleV0gPSB0aGlzLmhhbmRsZS5iaW5kKHRoaXMsIGtleSk7XG5cdFx0XHRcdFx0dGhpcy5zdWJzY3JpYmUodGhpcy5ldmVudE1hcFtrZXldLCB0aGlzLnN1YnNjcmliZXJzW2tleV0pO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5zdWJzY3JpYmVUb3VjaEV2ZW50cyhrZXkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYodGhpcy5ldmVudE1hcFtrZXldLmluY2x1ZGVzKFwiLVwiKSl7XG5cdFx0XHRcdGlmKHRoaXMuc3Vic2NyaWJlcnNba2V5XSAmJiAhdGhpcy5jb2x1bW5TdWJzY3JpYmVyc1trZXldICAmJiAhdGhpcy5zdWJzY3JpYmVkRXh0ZXJuYWwoa2V5KSl7XG5cdFx0XHRcdFx0dGhpcy51bnN1YnNjcmliZSh0aGlzLmV2ZW50TWFwW2tleV0sIHRoaXMuc3Vic2NyaWJlcnNba2V5XSk7XG5cdFx0XHRcdFx0ZGVsZXRlIHRoaXMuc3Vic2NyaWJlcnNba2V5XTtcblx0XHRcdFx0fVxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLnVuc3Vic2NyaWJlVG91Y2hFdmVudHMoa2V5KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXG5cdHN1YnNjcmliZVRvdWNoRXZlbnRzKGtleSl7XG5cdFx0dmFyIHR5cGUgPSB0aGlzLmV2ZW50TWFwW2tleV07XG5cblx0XHRpZighdGhpcy50b3VjaFN1YnNjcmliZXJzW3R5cGUgKyBcIi10b3VjaHN0YXJ0XCJdKXtcblx0XHRcdHRoaXMudG91Y2hTdWJzY3JpYmVyc1t0eXBlICsgXCItdG91Y2hzdGFydFwiXSA9IHRoaXMuaGFuZGxlVG91Y2guYmluZCh0aGlzLCB0eXBlLCBcInN0YXJ0XCIpO1xuXHRcdFx0dGhpcy50b3VjaFN1YnNjcmliZXJzW3R5cGUgKyBcIi10b3VjaGVuZFwiXSA9IHRoaXMuaGFuZGxlVG91Y2guYmluZCh0aGlzLCB0eXBlLCBcImVuZFwiKTtcblxuXHRcdFx0dGhpcy5zdWJzY3JpYmUodHlwZSArIFwiLXRvdWNoc3RhcnRcIiwgdGhpcy50b3VjaFN1YnNjcmliZXJzW3R5cGUgKyBcIi10b3VjaHN0YXJ0XCJdKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKHR5cGUgKyBcIi10b3VjaGVuZFwiLCB0aGlzLnRvdWNoU3Vic2NyaWJlcnNbdHlwZSArIFwiLXRvdWNoZW5kXCJdKTtcblx0XHR9XG5cblx0XHR0aGlzLnN1YnNjcmliZXJzW2tleV0gPSB0cnVlO1xuXHR9XG5cblx0dW5zdWJzY3JpYmVUb3VjaEV2ZW50cyhrZXkpe1xuXHRcdHZhciBub1RvdWNoID0gdHJ1ZSxcblx0XHR0eXBlID0gdGhpcy5ldmVudE1hcFtrZXldO1xuXG5cdFx0aWYodGhpcy5zdWJzY3JpYmVyc1trZXldICYmICF0aGlzLnN1YnNjcmliZWRFeHRlcm5hbChrZXkpKXtcblx0XHRcdGRlbGV0ZSB0aGlzLnN1YnNjcmliZXJzW2tleV07XG5cblx0XHRcdGZvcihsZXQgaSBpbiB0aGlzLmV2ZW50TWFwKXtcblx0XHRcdFx0aWYodGhpcy5ldmVudE1hcFtpXSA9PT0gdHlwZSl7XG5cdFx0XHRcdFx0aWYodGhpcy5zdWJzY3JpYmVyc1tpXSl7XG5cdFx0XHRcdFx0XHRub1RvdWNoID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmKG5vVG91Y2gpe1xuXHRcdFx0XHR0aGlzLnVuc3Vic2NyaWJlKHR5cGUgKyBcIi10b3VjaHN0YXJ0XCIsIHRoaXMudG91Y2hTdWJzY3JpYmVyc1t0eXBlICsgXCItdG91Y2hzdGFydFwiXSk7XG5cdFx0XHRcdHRoaXMudW5zdWJzY3JpYmUodHlwZSArIFwiLXRvdWNoZW5kXCIsIHRoaXMudG91Y2hTdWJzY3JpYmVyc1t0eXBlICsgXCItdG91Y2hlbmRcIl0pO1xuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLnRvdWNoU3Vic2NyaWJlcnNbdHlwZSArIFwiLXRvdWNoc3RhcnRcIl07XG5cdFx0XHRcdGRlbGV0ZSB0aGlzLnRvdWNoU3Vic2NyaWJlcnNbdHlwZSArIFwiLXRvdWNoZW5kXCJdO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGluaXRpYWxpemVDb2x1bW4oY29sdW1uKXtcblx0XHR2YXIgZGVmID0gY29sdW1uLmRlZmluaXRpb247XG5cblx0XHRmb3IobGV0IGtleSBpbiB0aGlzLmV2ZW50TWFwKXtcblx0XHRcdGlmKGRlZltrZXldKXtcblx0XHRcdFx0dGhpcy5zdWJzY3JpcHRpb25DaGFuZ2VkKGtleSwgdHJ1ZSk7XG5cblx0XHRcdFx0aWYoIXRoaXMuY29sdW1uU3Vic2NyaWJlcnNba2V5XSl7XG5cdFx0XHRcdFx0dGhpcy5jb2x1bW5TdWJzY3JpYmVyc1trZXldID0gW107XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLmNvbHVtblN1YnNjcmliZXJzW2tleV0ucHVzaChjb2x1bW4pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGhhbmRsZShhY3Rpb24sIGUsIGNvbXBvbmVudCl7XG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KGFjdGlvbiwgZSwgY29tcG9uZW50KTtcblx0fVxuXG5cdGhhbmRsZVRvdWNoKHR5cGUsIGFjdGlvbiwgZSwgY29tcG9uZW50KXtcblx0XHR2YXIgd2F0Y2hlcnMgPSB0aGlzLnRvdWNoV2F0Y2hlcnNbdHlwZV07XG5cblx0XHRpZih0eXBlID09PSBcImNvbHVtblwiKXtcblx0XHRcdHR5cGUgPSBcImhlYWRlclwiO1xuXHRcdH1cblxuXHRcdHN3aXRjaChhY3Rpb24pe1xuXHRcdFx0Y2FzZSBcInN0YXJ0XCI6XG5cdFx0XHRcdHdhdGNoZXJzLnRhcCA9IHRydWU7XG5cblx0XHRcdFx0Y2xlYXJUaW1lb3V0KHdhdGNoZXJzLnRhcEhvbGQpO1xuXG5cdFx0XHRcdHdhdGNoZXJzLnRhcEhvbGQgPSBzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0XHRjbGVhclRpbWVvdXQod2F0Y2hlcnMudGFwSG9sZCk7XG5cdFx0XHRcdFx0d2F0Y2hlcnMudGFwSG9sZCA9IG51bGw7XG5cblx0XHRcdFx0XHR3YXRjaGVycy50YXAgPSBudWxsO1xuXHRcdFx0XHRcdGNsZWFyVGltZW91dCh3YXRjaGVycy50YXBEYmwpO1xuXHRcdFx0XHRcdHdhdGNoZXJzLnRhcERibCA9IG51bGw7XG5cblx0XHRcdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQodHlwZSArIFwiVGFwSG9sZFwiLCBlLCAgY29tcG9uZW50KTtcblx0XHRcdFx0fSwgMTAwMCk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwiZW5kXCI6XG5cdFx0XHRcdGlmKHdhdGNoZXJzLnRhcCl7XG5cblx0XHRcdFx0XHR3YXRjaGVycy50YXAgPSBudWxsO1xuXHRcdFx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudCh0eXBlICsgXCJUYXBcIiwgZSwgIGNvbXBvbmVudCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZih3YXRjaGVycy50YXBEYmwpe1xuXHRcdFx0XHRcdGNsZWFyVGltZW91dCh3YXRjaGVycy50YXBEYmwpO1xuXHRcdFx0XHRcdHdhdGNoZXJzLnRhcERibCA9IG51bGw7XG5cblx0XHRcdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQodHlwZSArIFwiRGJsVGFwXCIsIGUsICBjb21wb25lbnQpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0d2F0Y2hlcnMudGFwRGJsID0gc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdFx0XHRjbGVhclRpbWVvdXQod2F0Y2hlcnMudGFwRGJsKTtcblx0XHRcdFx0XHRcdHdhdGNoZXJzLnRhcERibCA9IG51bGw7XG5cdFx0XHRcdFx0fSwgMzAwKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNsZWFyVGltZW91dCh3YXRjaGVycy50YXBIb2xkKTtcblx0XHRcdFx0d2F0Y2hlcnMudGFwSG9sZCA9IG51bGw7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdGRpc3BhdGNoRXZlbnQoYWN0aW9uLCBlLCBjb21wb25lbnQpe1xuXHRcdHZhciBjb21wb25lbnRPYmogPSBjb21wb25lbnQuZ2V0Q29tcG9uZW50KCksXG5cdFx0Y2FsbGJhY2s7XG5cblx0XHRpZih0aGlzLmNvbHVtblN1YnNjcmliZXJzW2FjdGlvbl0pe1xuXG5cdFx0XHRpZihjb21wb25lbnQgaW5zdGFuY2VvZiBDZWxsKXtcblx0XHRcdFx0Y2FsbGJhY2sgPSBjb21wb25lbnQuY29sdW1uLmRlZmluaXRpb25bYWN0aW9uXTtcblx0XHRcdH1lbHNlIGlmKGNvbXBvbmVudCBpbnN0YW5jZW9mIENvbHVtbil7XG5cdFx0XHRcdGNhbGxiYWNrID0gY29tcG9uZW50LmRlZmluaXRpb25bYWN0aW9uXTtcblx0XHRcdH1cblxuXHRcdFx0aWYoY2FsbGJhY2spe1xuXHRcdFx0XHRjYWxsYmFjayhlLCBjb21wb25lbnRPYmopO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChhY3Rpb24sIGUsIGNvbXBvbmVudE9iaik7XG5cdH1cbn1cblxuSW50ZXJhY3Rpb24ubW9kdWxlTmFtZSA9IFwiaW50ZXJhY3Rpb25cIjtcblxudmFyIGRlZmF1bHRCaW5kaW5ncyA9IHtcblx0bmF2UHJldjpcInNoaWZ0ICsgOVwiLFxuXHRuYXZOZXh0OjksXG5cdG5hdlVwOjM4LFxuXHRuYXZEb3duOjQwLFxuXHRzY3JvbGxQYWdlVXA6MzMsXG5cdHNjcm9sbFBhZ2VEb3duOjM0LFxuXHRzY3JvbGxUb1N0YXJ0OjM2LFxuXHRzY3JvbGxUb0VuZDozNSxcblx0dW5kbzpbXCJjdHJsICsgOTBcIiwgXCJtZXRhICsgOTBcIl0sXG5cdHJlZG86W1wiY3RybCArIDg5XCIsIFwibWV0YSArIDg5XCJdLFxuXHRjb3B5VG9DbGlwYm9hcmQ6W1wiY3RybCArIDY3XCIsIFwibWV0YSArIDY3XCJdLFxufTtcblxudmFyIGRlZmF1bHRBY3Rpb25zID0ge1xuXHRrZXlCbG9jazpmdW5jdGlvbihlKXtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0fSxcblx0c2Nyb2xsUGFnZVVwOmZ1bmN0aW9uKGUpe1xuXHRcdHZhciByb3dNYW5hZ2VyID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLFxuXHRcdG5ld1BvcyA9IHJvd01hbmFnZXIuc2Nyb2xsVG9wIC0gcm93TWFuYWdlci5lbGVtZW50LmNsaWVudEhlaWdodDtcblxuXHRcdGUucHJldmVudERlZmF1bHQoKTtcblxuXHRcdGlmKHJvd01hbmFnZXIuZGlzcGxheVJvd3NDb3VudCl7XG5cdFx0XHRpZihuZXdQb3MgPj0gMCl7XG5cdFx0XHRcdHJvd01hbmFnZXIuZWxlbWVudC5zY3JvbGxUb3AgPSBuZXdQb3M7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHJvd01hbmFnZXIuc2Nyb2xsVG9Sb3cocm93TWFuYWdlci5nZXREaXNwbGF5Um93cygpWzBdKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLnRhYmxlLmVsZW1lbnQuZm9jdXMoKTtcblx0fSxcblx0c2Nyb2xsUGFnZURvd246ZnVuY3Rpb24oZSl7XG5cdFx0dmFyIHJvd01hbmFnZXIgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIsXG5cdFx0bmV3UG9zID0gcm93TWFuYWdlci5zY3JvbGxUb3AgKyByb3dNYW5hZ2VyLmVsZW1lbnQuY2xpZW50SGVpZ2h0LFxuXHRcdHNjcm9sbE1heCA9IHJvd01hbmFnZXIuZWxlbWVudC5zY3JvbGxIZWlnaHQ7XG5cblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRpZihyb3dNYW5hZ2VyLmRpc3BsYXlSb3dzQ291bnQpe1xuXHRcdFx0aWYobmV3UG9zIDw9IHNjcm9sbE1heCl7XG5cdFx0XHRcdHJvd01hbmFnZXIuZWxlbWVudC5zY3JvbGxUb3AgPSBuZXdQb3M7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHJvd01hbmFnZXIuc2Nyb2xsVG9Sb3cocm93TWFuYWdlci5nZXREaXNwbGF5Um93cygpW3Jvd01hbmFnZXIuZGlzcGxheVJvd3NDb3VudCAtIDFdKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLnRhYmxlLmVsZW1lbnQuZm9jdXMoKTtcblxuXHR9LFxuXHRzY3JvbGxUb1N0YXJ0OmZ1bmN0aW9uKGUpe1xuXHRcdHZhciByb3dNYW5hZ2VyID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyO1xuXG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0aWYocm93TWFuYWdlci5kaXNwbGF5Um93c0NvdW50KXtcblx0XHRcdHJvd01hbmFnZXIuc2Nyb2xsVG9Sb3cocm93TWFuYWdlci5nZXREaXNwbGF5Um93cygpWzBdKTtcblx0XHR9XG5cblx0XHR0aGlzLnRhYmxlLmVsZW1lbnQuZm9jdXMoKTtcblx0fSxcblx0c2Nyb2xsVG9FbmQ6ZnVuY3Rpb24oZSl7XG5cdFx0dmFyIHJvd01hbmFnZXIgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXI7XG5cblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRpZihyb3dNYW5hZ2VyLmRpc3BsYXlSb3dzQ291bnQpe1xuXHRcdFx0cm93TWFuYWdlci5zY3JvbGxUb1Jvdyhyb3dNYW5hZ2VyLmdldERpc3BsYXlSb3dzKClbcm93TWFuYWdlci5kaXNwbGF5Um93c0NvdW50IC0gMV0pO1xuXHRcdH1cblxuXHRcdHRoaXMudGFibGUuZWxlbWVudC5mb2N1cygpO1xuXHR9LFxuXHRuYXZQcmV2OmZ1bmN0aW9uKGUpe1xuXHRcdHRoaXMuZGlzcGF0Y2goXCJrZXliaW5kaW5nLW5hdi1wcmV2XCIsIGUpO1xuXHR9LFxuXG5cdG5hdk5leHQ6ZnVuY3Rpb24oZSl7XG5cdFx0dGhpcy5kaXNwYXRjaChcImtleWJpbmRpbmctbmF2LW5leHRcIiwgZSk7XG5cdH0sXG5cblx0bmF2TGVmdDpmdW5jdGlvbihlKXtcblx0XHR0aGlzLmRpc3BhdGNoKFwia2V5YmluZGluZy1uYXYtbGVmdFwiLCBlKTtcblx0fSxcblxuXHRuYXZSaWdodDpmdW5jdGlvbihlKXtcblx0XHR0aGlzLmRpc3BhdGNoKFwia2V5YmluZGluZy1uYXYtcmlnaHRcIiwgZSk7XG5cdH0sXG5cblx0bmF2VXA6ZnVuY3Rpb24oZSl7XG5cdFx0dGhpcy5kaXNwYXRjaChcImtleWJpbmRpbmctbmF2LXVwXCIsIGUpO1xuXHR9LFxuXG5cdG5hdkRvd246ZnVuY3Rpb24oZSl7XG5cdFx0dGhpcy5kaXNwYXRjaChcImtleWJpbmRpbmctbmF2LWRvd25cIiwgZSk7XG5cdH0sXG5cblx0dW5kbzpmdW5jdGlvbihlKXtcblx0XHR2YXIgY2VsbCA9IGZhbHNlO1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5oaXN0b3J5ICYmIHRoaXMudGFibGUubW9kRXhpc3RzKFwiaGlzdG9yeVwiKSAmJiB0aGlzLnRhYmxlLm1vZEV4aXN0cyhcImVkaXRcIikpe1xuXG5cdFx0XHRjZWxsID0gdGhpcy50YWJsZS5tb2R1bGVzLmVkaXQuY3VycmVudENlbGw7XG5cblx0XHRcdGlmKCFjZWxsKXtcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR0aGlzLnRhYmxlLm1vZHVsZXMuaGlzdG9yeS51bmRvKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlZG86ZnVuY3Rpb24oZSl7XG5cdFx0dmFyIGNlbGwgPSBmYWxzZTtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuaGlzdG9yeSAmJiB0aGlzLnRhYmxlLm1vZEV4aXN0cyhcImhpc3RvcnlcIikgJiYgdGhpcy50YWJsZS5tb2RFeGlzdHMoXCJlZGl0XCIpKXtcblxuXHRcdFx0Y2VsbCA9IHRoaXMudGFibGUubW9kdWxlcy5lZGl0LmN1cnJlbnRDZWxsO1xuXG5cdFx0XHRpZighY2VsbCl7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0dGhpcy50YWJsZS5tb2R1bGVzLmhpc3RvcnkucmVkbygpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRjb3B5VG9DbGlwYm9hcmQ6ZnVuY3Rpb24oZSl7XG5cdFx0aWYoIXRoaXMudGFibGUubW9kdWxlcy5lZGl0LmN1cnJlbnRDZWxsKXtcblx0XHRcdGlmKHRoaXMudGFibGUubW9kRXhpc3RzKFwiY2xpcGJvYXJkXCIsIHRydWUpKXtcblx0XHRcdFx0dGhpcy50YWJsZS5tb2R1bGVzLmNsaXBib2FyZC5jb3B5KGZhbHNlLCB0cnVlKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG59O1xuXG5jbGFzcyBLZXliaW5kaW5ncyBleHRlbmRzIE1vZHVsZXtcblxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXG5cdFx0dGhpcy53YXRjaEtleXMgPSBudWxsO1xuXHRcdHRoaXMucHJlc3NlZEtleXMgPSBudWxsO1xuXHRcdHRoaXMua2V5dXBCaW5kaW5nID0gZmFsc2U7XG5cdFx0dGhpcy5rZXlkb3duQmluZGluZyA9IGZhbHNlO1xuXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwia2V5YmluZGluZ3NcIiwge30pOyAvL2FycmF5IGZvciBrZXliaW5kaW5nc1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInRhYkVuZE5ld1Jvd1wiLCBmYWxzZSk7IC8vY3JlYXRlIG5ldyByb3cgd2hlbiB0YWIgdG8gZW5kIG9mIHRhYmxlXG5cdH1cblxuXHRpbml0aWFsaXplKCl7XG5cdFx0dmFyIGJpbmRpbmdzID0gdGhpcy50YWJsZS5vcHRpb25zLmtleWJpbmRpbmdzLFxuXHRcdG1lcmdlZEJpbmRpbmdzID0ge307XG5cblx0XHR0aGlzLndhdGNoS2V5cyA9IHt9O1xuXHRcdHRoaXMucHJlc3NlZEtleXMgPSBbXTtcblxuXHRcdGlmKGJpbmRpbmdzICE9PSBmYWxzZSl7XG5cdFx0XHRPYmplY3QuYXNzaWduKG1lcmdlZEJpbmRpbmdzLCBLZXliaW5kaW5ncy5iaW5kaW5ncyk7XG5cdFx0XHRPYmplY3QuYXNzaWduKG1lcmdlZEJpbmRpbmdzLCBiaW5kaW5ncyk7XG5cblx0XHRcdHRoaXMubWFwQmluZGluZ3MobWVyZ2VkQmluZGluZ3MpO1xuXHRcdFx0dGhpcy5iaW5kRXZlbnRzKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJ0YWJsZS1kZXN0cm95XCIsIHRoaXMuY2xlYXJCaW5kaW5ncy5iaW5kKHRoaXMpKTtcblx0fVxuXG5cdG1hcEJpbmRpbmdzKGJpbmRpbmdzKXtcblx0XHRmb3IobGV0IGtleSBpbiBiaW5kaW5ncyl7XG5cdFx0XHRpZihLZXliaW5kaW5ncy5hY3Rpb25zW2tleV0pe1xuXHRcdFx0XHRpZihiaW5kaW5nc1trZXldKXtcblx0XHRcdFx0XHRpZih0eXBlb2YgYmluZGluZ3Nba2V5XSAhPT0gXCJvYmplY3RcIil7XG5cdFx0XHRcdFx0XHRiaW5kaW5nc1trZXldID0gW2JpbmRpbmdzW2tleV1dO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJpbmRpbmdzW2tleV0uZm9yRWFjaCgoYmluZGluZykgPT4ge1xuXHRcdFx0XHRcdFx0dmFyIGJpbmRpbmdMaXN0ID0gQXJyYXkuaXNBcnJheShiaW5kaW5nKSA/ICBiaW5kaW5nIDogW2JpbmRpbmddO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRiaW5kaW5nTGlzdC5mb3JFYWNoKChpdGVtKSA9PiB7XG5cdFx0XHRcdFx0XHRcdHRoaXMubWFwQmluZGluZyhrZXksIGl0ZW0pO1xuXHRcdFx0XHRcdFx0fSk7XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiS2V5IEJpbmRpbmcgRXJyb3IgLSBubyBzdWNoIGFjdGlvbjpcIiwga2V5KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRtYXBCaW5kaW5nKGFjdGlvbiwgc3ltYm9sc0xpc3Qpe1xuXHRcdHZhciBiaW5kaW5nID0ge1xuXHRcdFx0YWN0aW9uOiBLZXliaW5kaW5ncy5hY3Rpb25zW2FjdGlvbl0sXG5cdFx0XHRrZXlzOiBbXSxcblx0XHRcdGN0cmw6IGZhbHNlLFxuXHRcdFx0c2hpZnQ6IGZhbHNlLFxuXHRcdFx0bWV0YTogZmFsc2UsXG5cdFx0fTtcblxuXHRcdHZhciBzeW1ib2xzID0gc3ltYm9sc0xpc3QudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpLnNwbGl0KFwiIFwiKS5qb2luKFwiXCIpLnNwbGl0KFwiK1wiKTtcblxuXHRcdHN5bWJvbHMuZm9yRWFjaCgoc3ltYm9sKSA9PiB7XG5cdFx0XHRzd2l0Y2goc3ltYm9sKXtcblx0XHRcdFx0Y2FzZSBcImN0cmxcIjpcblx0XHRcdFx0XHRiaW5kaW5nLmN0cmwgPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgXCJzaGlmdFwiOlxuXHRcdFx0XHRcdGJpbmRpbmcuc2hpZnQgPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgXCJtZXRhXCI6XG5cdFx0XHRcdFx0YmluZGluZy5tZXRhID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHN5bWJvbCA9IGlzTmFOKHN5bWJvbCkgPyBzeW1ib2wudG9VcHBlckNhc2UoKS5jaGFyQ29kZUF0KDApIDogcGFyc2VJbnQoc3ltYm9sKTtcblx0XHRcdFx0XHRiaW5kaW5nLmtleXMucHVzaChzeW1ib2wpO1xuXG5cdFx0XHRcdFx0aWYoIXRoaXMud2F0Y2hLZXlzW3N5bWJvbF0pe1xuXHRcdFx0XHRcdFx0dGhpcy53YXRjaEtleXNbc3ltYm9sXSA9IFtdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRoaXMud2F0Y2hLZXlzW3N5bWJvbF0ucHVzaChiaW5kaW5nKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdGJpbmRFdmVudHMoKXtcblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0XHR0aGlzLmtleXVwQmluZGluZyA9IGZ1bmN0aW9uKGUpe1xuXHRcdFx0dmFyIGNvZGUgPSBlLmtleUNvZGU7XG5cdFx0XHR2YXIgYmluZGluZ3MgPSBzZWxmLndhdGNoS2V5c1tjb2RlXTtcblxuXHRcdFx0aWYoYmluZGluZ3Mpe1xuXG5cdFx0XHRcdHNlbGYucHJlc3NlZEtleXMucHVzaChjb2RlKTtcblxuXHRcdFx0XHRiaW5kaW5ncy5mb3JFYWNoKGZ1bmN0aW9uKGJpbmRpbmcpe1xuXHRcdFx0XHRcdHNlbGYuY2hlY2tCaW5kaW5nKGUsIGJpbmRpbmcpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dGhpcy5rZXlkb3duQmluZGluZyA9IGZ1bmN0aW9uKGUpe1xuXHRcdFx0dmFyIGNvZGUgPSBlLmtleUNvZGU7XG5cdFx0XHR2YXIgYmluZGluZ3MgPSBzZWxmLndhdGNoS2V5c1tjb2RlXTtcblxuXHRcdFx0aWYoYmluZGluZ3Mpe1xuXG5cdFx0XHRcdHZhciBpbmRleCA9IHNlbGYucHJlc3NlZEtleXMuaW5kZXhPZihjb2RlKTtcblxuXHRcdFx0XHRpZihpbmRleCA+IC0xKXtcblx0XHRcdFx0XHRzZWxmLnByZXNzZWRLZXlzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dGhpcy50YWJsZS5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMua2V5dXBCaW5kaW5nKTtcblxuXHRcdHRoaXMudGFibGUuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgdGhpcy5rZXlkb3duQmluZGluZyk7XG5cdH1cblxuXHRjbGVhckJpbmRpbmdzKCl7XG5cdFx0aWYodGhpcy5rZXl1cEJpbmRpbmcpe1xuXHRcdFx0dGhpcy50YWJsZS5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMua2V5dXBCaW5kaW5nKTtcblx0XHR9XG5cblx0XHRpZih0aGlzLmtleWRvd25CaW5kaW5nKXtcblx0XHRcdHRoaXMudGFibGUuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgdGhpcy5rZXlkb3duQmluZGluZyk7XG5cdFx0fVxuXHR9XG5cblx0Y2hlY2tCaW5kaW5nKGUsIGJpbmRpbmcpe1xuXHRcdHZhciBtYXRjaCA9IHRydWU7XG5cblx0XHRpZihlLmN0cmxLZXkgPT0gYmluZGluZy5jdHJsICYmIGUuc2hpZnRLZXkgPT0gYmluZGluZy5zaGlmdCAmJiBlLm1ldGFLZXkgPT0gYmluZGluZy5tZXRhKXtcblx0XHRcdGJpbmRpbmcua2V5cy5mb3JFYWNoKChrZXkpID0+IHtcblx0XHRcdFx0dmFyIGluZGV4ID0gdGhpcy5wcmVzc2VkS2V5cy5pbmRleE9mKGtleSk7XG5cblx0XHRcdFx0aWYoaW5kZXggPT0gLTEpe1xuXHRcdFx0XHRcdG1hdGNoID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRpZihtYXRjaCl7XG5cdFx0XHRcdGJpbmRpbmcuYWN0aW9uLmNhbGwodGhpcywgZSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5LZXliaW5kaW5ncy5tb2R1bGVOYW1lID0gXCJrZXliaW5kaW5nc1wiO1xuXG4vL2xvYWQgZGVmYXVsdHNcbktleWJpbmRpbmdzLmJpbmRpbmdzID0gZGVmYXVsdEJpbmRpbmdzO1xuS2V5YmluZGluZ3MuYWN0aW9ucyA9IGRlZmF1bHRBY3Rpb25zO1xuXG5jbGFzcyBNZW51IGV4dGVuZHMgTW9kdWxle1xuXHRcblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblx0XHRcblx0XHR0aGlzLm1lbnVDb250YWluZXIgPSBudWxsO1xuXHRcdHRoaXMubmVzdGVkTWVudUJsb2NrID0gZmFsc2U7XG5cdFx0XG5cdFx0dGhpcy5jdXJyZW50Q29tcG9uZW50ID0gbnVsbDtcblx0XHR0aGlzLnJvb3RQb3B1cCA9IG51bGw7XG5cdFx0XG5cdFx0dGhpcy5jb2x1bW5TdWJzY3JpYmVycyA9IHt9O1xuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcIm1lbnVDb250YWluZXJcIiwgdW5kZWZpbmVkKTsgLy9kZXByZWNhdGVkXG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicm93Q29udGV4dE1lbnVcIiwgZmFsc2UpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInJvd0NsaWNrTWVudVwiLCBmYWxzZSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicm93RGJsQ2xpY2tNZW51XCIsIGZhbHNlKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJncm91cENvbnRleHRNZW51XCIsIGZhbHNlKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJncm91cENsaWNrTWVudVwiLCBmYWxzZSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZ3JvdXBEYmxDbGlja01lbnVcIiwgZmFsc2UpO1xuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJDb250ZXh0TWVudVwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiaGVhZGVyQ2xpY2tNZW51XCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJEYmxDbGlja01lbnVcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImhlYWRlck1lbnVcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImhlYWRlck1lbnVJY29uXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJjb250ZXh0TWVudVwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiY2xpY2tNZW51XCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJkYmxDbGlja01lbnVcIik7XG5cdFx0XG5cdH1cblx0XG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLmRlcHJlY2F0ZWRPcHRpb25zQ2hlY2soKTtcblx0XHR0aGlzLmluaXRpYWxpemVSb3dXYXRjaGVycygpO1xuXHRcdHRoaXMuaW5pdGlhbGl6ZUdyb3VwV2F0Y2hlcnMoKTtcblx0XHRcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1pbml0XCIsIHRoaXMuaW5pdGlhbGl6ZUNvbHVtbi5iaW5kKHRoaXMpKTtcblx0fVxuXHRcblx0ZGVwcmVjYXRlZE9wdGlvbnNDaGVjaygpe1xuXHRcdGlmKCF0aGlzLmRlcHJlY2F0aW9uQ2hlY2soXCJtZW51Q29udGFpbmVyXCIsIFwicG9wdXBDb250YWluZXJcIikpe1xuXHRcdFx0dGhpcy50YWJsZS5vcHRpb25zLnBvcHVwQ29udGFpbmVyID0gdGhpcy50YWJsZS5vcHRpb25zLm1lbnVDb250YWluZXI7XG5cdFx0fVxuXHR9XHRcblx0XG5cdGluaXRpYWxpemVSb3dXYXRjaGVycygpe1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5yb3dDb250ZXh0TWVudSl7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1jb250ZXh0bWVudVwiLCB0aGlzLmxvYWRNZW51RXZlbnQuYmluZCh0aGlzLCB0aGlzLnRhYmxlLm9wdGlvbnMucm93Q29udGV4dE1lbnUpKTtcblx0XHRcdHRoaXMudGFibGUub24oXCJyb3dUYXBIb2xkXCIsIHRoaXMubG9hZE1lbnVFdmVudC5iaW5kKHRoaXMsIHRoaXMudGFibGUub3B0aW9ucy5yb3dDb250ZXh0TWVudSkpO1xuXHRcdH1cblx0XHRcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucm93Q2xpY2tNZW51KXtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWNsaWNrXCIsIHRoaXMubG9hZE1lbnVFdmVudC5iaW5kKHRoaXMsIHRoaXMudGFibGUub3B0aW9ucy5yb3dDbGlja01lbnUpKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnJvd0RibENsaWNrTWVudSl7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1kYmxjbGlja1wiLCB0aGlzLmxvYWRNZW51RXZlbnQuYmluZCh0aGlzLCB0aGlzLnRhYmxlLm9wdGlvbnMucm93RGJsQ2xpY2tNZW51KSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRpbml0aWFsaXplR3JvdXBXYXRjaGVycygpe1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5ncm91cENvbnRleHRNZW51KXtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiZ3JvdXAtY29udGV4dG1lbnVcIiwgdGhpcy5sb2FkTWVudUV2ZW50LmJpbmQodGhpcywgdGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQ29udGV4dE1lbnUpKTtcblx0XHRcdHRoaXMudGFibGUub24oXCJncm91cFRhcEhvbGRcIiwgdGhpcy5sb2FkTWVudUV2ZW50LmJpbmQodGhpcywgdGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQ29udGV4dE1lbnUpKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQ2xpY2tNZW51KXtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiZ3JvdXAtY2xpY2tcIiwgdGhpcy5sb2FkTWVudUV2ZW50LmJpbmQodGhpcywgdGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQ2xpY2tNZW51KSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5ncm91cERibENsaWNrTWVudSl7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImdyb3VwLWRibGNsaWNrXCIsIHRoaXMubG9hZE1lbnVFdmVudC5iaW5kKHRoaXMsIHRoaXMudGFibGUub3B0aW9ucy5ncm91cERibENsaWNrTWVudSkpO1xuXHRcdH1cblx0fVxuXHRcblx0aW5pdGlhbGl6ZUNvbHVtbihjb2x1bW4pe1xuXHRcdHZhclx0ZGVmID0gY29sdW1uLmRlZmluaXRpb247XG5cdFx0XG5cdFx0Ly9oYW5kbGUgY29sdW1uIGV2ZW50c1xuXHRcdGlmKGRlZi5oZWFkZXJDb250ZXh0TWVudSAmJiAhdGhpcy5jb2x1bW5TdWJzY3JpYmVycy5oZWFkZXJDb250ZXh0TWVudSl7XG5cdFx0XHR0aGlzLmNvbHVtblN1YnNjcmliZXJzLmhlYWRlckNvbnRleHRNZW51ID0gdGhpcy5sb2FkTWVudVRhYmxlQ29sdW1uRXZlbnQuYmluZCh0aGlzLCBcImhlYWRlckNvbnRleHRNZW51XCIpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tY29udGV4dG1lbnVcIiwgdGhpcy5jb2x1bW5TdWJzY3JpYmVycy5oZWFkZXJDb250ZXh0TWVudSk7XG5cdFx0XHR0aGlzLnRhYmxlLm9uKFwiaGVhZGVyVGFwSG9sZFwiLCB0aGlzLmxvYWRNZW51VGFibGVDb2x1bW5FdmVudC5iaW5kKHRoaXMsIFwiaGVhZGVyQ29udGV4dE1lbnVcIikpO1xuXHRcdH1cblx0XHRcblx0XHRpZihkZWYuaGVhZGVyQ2xpY2tNZW51ICYmICF0aGlzLmNvbHVtblN1YnNjcmliZXJzLmhlYWRlckNsaWNrTWVudSl7XG5cdFx0XHR0aGlzLmNvbHVtblN1YnNjcmliZXJzLmhlYWRlckNsaWNrTWVudSA9IHRoaXMubG9hZE1lbnVUYWJsZUNvbHVtbkV2ZW50LmJpbmQodGhpcywgXCJoZWFkZXJDbGlja01lbnVcIik7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1jbGlja1wiLCB0aGlzLmNvbHVtblN1YnNjcmliZXJzLmhlYWRlckNsaWNrTWVudSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGRlZi5oZWFkZXJEYmxDbGlja01lbnUgJiYgIXRoaXMuY29sdW1uU3Vic2NyaWJlcnMuaGVhZGVyRGJsQ2xpY2tNZW51KXtcblx0XHRcdHRoaXMuY29sdW1uU3Vic2NyaWJlcnMuaGVhZGVyRGJsQ2xpY2tNZW51ID0gdGhpcy5sb2FkTWVudVRhYmxlQ29sdW1uRXZlbnQuYmluZCh0aGlzLCBcImhlYWRlckRibENsaWNrTWVudVwiKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWRibGNsaWNrXCIsIHRoaXMuY29sdW1uU3Vic2NyaWJlcnMuaGVhZGVyRGJsQ2xpY2tNZW51KTtcblx0XHR9XG5cdFx0XG5cdFx0aWYoZGVmLmhlYWRlck1lbnUpe1xuXHRcdFx0dGhpcy5pbml0aWFsaXplQ29sdW1uSGVhZGVyTWVudShjb2x1bW4pO1xuXHRcdH1cblx0XHRcblx0XHQvL2hhbmRsZSBjZWxsIGV2ZW50c1xuXHRcdGlmKGRlZi5jb250ZXh0TWVudSAmJiAhdGhpcy5jb2x1bW5TdWJzY3JpYmVycy5jb250ZXh0TWVudSl7XG5cdFx0XHR0aGlzLmNvbHVtblN1YnNjcmliZXJzLmNvbnRleHRNZW51ID0gdGhpcy5sb2FkTWVudVRhYmxlQ2VsbEV2ZW50LmJpbmQodGhpcywgXCJjb250ZXh0TWVudVwiKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY2VsbC1jb250ZXh0bWVudVwiLCB0aGlzLmNvbHVtblN1YnNjcmliZXJzLmNvbnRleHRNZW51KTtcblx0XHRcdHRoaXMudGFibGUub24oXCJjZWxsVGFwSG9sZFwiLCB0aGlzLmxvYWRNZW51VGFibGVDZWxsRXZlbnQuYmluZCh0aGlzLCBcImNvbnRleHRNZW51XCIpKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYoZGVmLmNsaWNrTWVudSAmJiAhdGhpcy5jb2x1bW5TdWJzY3JpYmVycy5jbGlja01lbnUpe1xuXHRcdFx0dGhpcy5jb2x1bW5TdWJzY3JpYmVycy5jbGlja01lbnUgPSB0aGlzLmxvYWRNZW51VGFibGVDZWxsRXZlbnQuYmluZCh0aGlzLCBcImNsaWNrTWVudVwiKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY2VsbC1jbGlja1wiLCB0aGlzLmNvbHVtblN1YnNjcmliZXJzLmNsaWNrTWVudSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGRlZi5kYmxDbGlja01lbnUgJiYgIXRoaXMuY29sdW1uU3Vic2NyaWJlcnMuZGJsQ2xpY2tNZW51KXtcblx0XHRcdHRoaXMuY29sdW1uU3Vic2NyaWJlcnMuZGJsQ2xpY2tNZW51ID0gdGhpcy5sb2FkTWVudVRhYmxlQ2VsbEV2ZW50LmJpbmQodGhpcywgXCJkYmxDbGlja01lbnVcIik7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNlbGwtZGJsY2xpY2tcIiwgdGhpcy5jb2x1bW5TdWJzY3JpYmVycy5kYmxDbGlja01lbnUpO1xuXHRcdH1cblx0fVxuXHRcblx0aW5pdGlhbGl6ZUNvbHVtbkhlYWRlck1lbnUoY29sdW1uKXtcblx0XHR2YXIgaWNvbiA9IGNvbHVtbi5kZWZpbml0aW9uLmhlYWRlck1lbnVJY29uLFxuXHRcdGhlYWRlck1lbnVFbDtcblx0XHRcblx0XHRoZWFkZXJNZW51RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcblx0XHRoZWFkZXJNZW51RWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1oZWFkZXItcG9wdXAtYnV0dG9uXCIpO1xuXHRcdFxuXHRcdGlmKGljb24pe1xuXHRcdFx0aWYodHlwZW9mIGljb24gPT09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRcdGljb24gPSBpY29uKGNvbHVtbi5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKGljb24gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCl7XG5cdFx0XHRcdGhlYWRlck1lbnVFbC5hcHBlbmRDaGlsZChpY29uKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aGVhZGVyTWVudUVsLmlubmVySFRNTCA9IGljb247XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0aGVhZGVyTWVudUVsLmlubmVySFRNTCA9IFwiJnZlbGxpcDtcIjtcblx0XHR9XG5cdFx0XG5cdFx0aGVhZGVyTWVudUVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5sb2FkTWVudUV2ZW50KGNvbHVtbi5kZWZpbml0aW9uLmhlYWRlck1lbnUsIGUsIGNvbHVtbik7XG5cdFx0fSk7XG5cdFx0XG5cdFx0Y29sdW1uLnRpdGxlRWxlbWVudC5pbnNlcnRCZWZvcmUoaGVhZGVyTWVudUVsLCBjb2x1bW4udGl0bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuXHR9XG5cdFxuXHRsb2FkTWVudVRhYmxlQ2VsbEV2ZW50KG9wdGlvbiwgZSwgY2VsbCl7XG5cdFx0aWYoY2VsbC5fY2VsbCl7XG5cdFx0XHRjZWxsID0gY2VsbC5fY2VsbDtcblx0XHR9XG5cdFx0XG5cdFx0aWYoY2VsbC5jb2x1bW4uZGVmaW5pdGlvbltvcHRpb25dKXtcblx0XHRcdHRoaXMubG9hZE1lbnVFdmVudChjZWxsLmNvbHVtbi5kZWZpbml0aW9uW29wdGlvbl0sIGUsIGNlbGwpO1xuXHRcdH1cblx0fVxuXHRcblx0bG9hZE1lbnVUYWJsZUNvbHVtbkV2ZW50KG9wdGlvbiwgZSwgY29sdW1uKXtcblx0XHRpZihjb2x1bW4uX2NvbHVtbil7XG5cdFx0XHRjb2x1bW4gPSBjb2x1bW4uX2NvbHVtbjtcblx0XHR9XG5cdFx0XG5cdFx0aWYoY29sdW1uLmRlZmluaXRpb25bb3B0aW9uXSl7XG5cdFx0XHR0aGlzLmxvYWRNZW51RXZlbnQoY29sdW1uLmRlZmluaXRpb25bb3B0aW9uXSwgZSwgY29sdW1uKTtcblx0XHR9XG5cdH1cblx0XG5cdGxvYWRNZW51RXZlbnQobWVudSwgZSwgY29tcG9uZW50KXtcblx0XHRpZihjb21wb25lbnQuX2dyb3VwKXtcblx0XHRcdGNvbXBvbmVudCA9IGNvbXBvbmVudC5fZ3JvdXA7XG5cdFx0fWVsc2UgaWYoY29tcG9uZW50Ll9yb3cpe1xuXHRcdFx0Y29tcG9uZW50ID0gY29tcG9uZW50Ll9yb3c7XG5cdFx0fVxuXHRcdFxuXHRcdG1lbnUgPSB0eXBlb2YgbWVudSA9PSBcImZ1bmN0aW9uXCIgPyBtZW51LmNhbGwodGhpcy50YWJsZSwgZSwgY29tcG9uZW50LmdldENvbXBvbmVudCgpKSA6IG1lbnU7XG5cdFx0XG5cdFx0dGhpcy5sb2FkTWVudShlLCBjb21wb25lbnQsIG1lbnUpO1xuXHR9XG5cdFxuXHRsb2FkTWVudShlLCBjb21wb25lbnQsIG1lbnUsIHBhcmVudEVsLCBwYXJlbnRQb3B1cCl7XG5cdFx0dmFyIHRvdWNoID0gIShlIGluc3RhbmNlb2YgTW91c2VFdmVudCksXHRcdFxuXHRcdG1lbnVFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksXG5cdFx0cG9wdXA7XG5cdFx0XG5cdFx0bWVudUVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItbWVudVwiKTtcblx0XHRcblx0XHRpZighdG91Y2gpe1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0XHRcblx0XHQvL2Fib3J0IGlmIG5vIG1lbnUgc2V0XG5cdFx0aWYoIW1lbnUgfHwgIW1lbnUubGVuZ3RoKXtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0XG5cdFx0aWYoIXBhcmVudEVsKXtcblx0XHRcdGlmKHRoaXMubmVzdGVkTWVudUJsb2NrKXtcblx0XHRcdFx0Ly9hYm9ydCBpZiBjaGlsZCBtZW51IGFscmVhZHkgb3BlblxuXHRcdFx0XHRpZih0aGlzLnJvb3RQb3B1cCl7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMubmVzdGVkTWVudUJsb2NrID0gc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5uZXN0ZWRNZW51QmxvY2sgPSBmYWxzZTtcblx0XHRcdFx0fSwgMTAwKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYodGhpcy5yb290UG9wdXApe1xuXHRcdFx0XHR0aGlzLnJvb3RQb3B1cC5oaWRlKCk7XHRcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5yb290UG9wdXAgPSBwb3B1cCA9IHRoaXMucG9wdXAobWVudUVsKTtcblx0XHRcdFxuXHRcdH1lbHNlIHtcblx0XHRcdHBvcHVwID0gcGFyZW50UG9wdXAuY2hpbGQobWVudUVsKTtcblx0XHR9XG5cdFx0XG5cdFx0bWVudS5mb3JFYWNoKChpdGVtKSA9PiB7XG5cdFx0XHR2YXIgaXRlbUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxcblx0XHRcdGxhYmVsID0gaXRlbS5sYWJlbCxcblx0XHRcdGRpc2FibGVkID0gaXRlbS5kaXNhYmxlZDtcblx0XHRcdFxuXHRcdFx0aWYoaXRlbS5zZXBhcmF0b3Ipe1xuXHRcdFx0XHRpdGVtRWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1tZW51LXNlcGFyYXRvclwiKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aXRlbUVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItbWVudS1pdGVtXCIpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYodHlwZW9mIGxhYmVsID09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRcdFx0bGFiZWwgPSBsYWJlbC5jYWxsKHRoaXMudGFibGUsIGNvbXBvbmVudC5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGlmKGxhYmVsIGluc3RhbmNlb2YgTm9kZSl7XG5cdFx0XHRcdFx0aXRlbUVsLmFwcGVuZENoaWxkKGxhYmVsKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGl0ZW1FbC5pbm5lckhUTUwgPSBsYWJlbDtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0aWYodHlwZW9mIGRpc2FibGVkID09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRcdFx0ZGlzYWJsZWQgPSBkaXNhYmxlZC5jYWxsKHRoaXMudGFibGUsIGNvbXBvbmVudC5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGlmKGRpc2FibGVkKXtcblx0XHRcdFx0XHRpdGVtRWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1tZW51LWl0ZW0tZGlzYWJsZWRcIik7XG5cdFx0XHRcdFx0aXRlbUVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuXHRcdFx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGlmKGl0ZW0ubWVudSAmJiBpdGVtLm1lbnUubGVuZ3RoKXtcblx0XHRcdFx0XHRcdGl0ZW1FbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcblx0XHRcdFx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdFx0dGhpcy5sb2FkTWVudShlLCBjb21wb25lbnQsIGl0ZW0ubWVudSwgaXRlbUVsLCBwb3B1cCk7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRpZihpdGVtLmFjdGlvbil7XG5cdFx0XHRcdFx0XHRcdGl0ZW1FbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRpdGVtLmFjdGlvbihlLCBjb21wb25lbnQuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGlmKGl0ZW0ubWVudSAmJiBpdGVtLm1lbnUubGVuZ3RoKXtcblx0XHRcdFx0XHRpdGVtRWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1tZW51LWl0ZW0tc3VibWVudVwiKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRtZW51RWwuYXBwZW5kQ2hpbGQoaXRlbUVsKTtcblx0XHR9KTtcblx0XHRcblx0XHRtZW51RWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG5cdFx0XHRpZih0aGlzLnJvb3RQb3B1cCl7XG5cdFx0XHRcdHRoaXMucm9vdFBvcHVwLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0XHRwb3B1cC5zaG93KHBhcmVudEVsIHx8IGUpO1xuXHRcdFxuXHRcdGlmKHBvcHVwID09PSB0aGlzLnJvb3RQb3B1cCl7XG5cdFx0XHR0aGlzLnJvb3RQb3B1cC5oaWRlT25CbHVyKCgpID0+IHtcblx0XHRcdFx0dGhpcy5yb290UG9wdXAgPSBudWxsO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYodGhpcy5jdXJyZW50Q29tcG9uZW50KXtcblx0XHRcdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJtZW51Q2xvc2VkXCIsIHRoaXMuY3VycmVudENvbXBvbmVudC5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHRcdFx0dGhpcy5jdXJyZW50Q29tcG9uZW50ID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdHRoaXMuY3VycmVudENvbXBvbmVudCA9IGNvbXBvbmVudDtcblx0XHRcdFxuXHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwibWVudU9wZW5lZFwiLCBjb21wb25lbnQuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdH1cblx0fVxufVxuXG5NZW51Lm1vZHVsZU5hbWUgPSBcIm1lbnVcIjtcblxuY2xhc3MgTW92ZUNvbHVtbnMgZXh0ZW5kcyBNb2R1bGV7XG5cdFxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXHRcdFxuXHRcdHRoaXMucGxhY2Vob2xkZXJFbGVtZW50ID0gdGhpcy5jcmVhdGVQbGFjZWhvbGRlckVsZW1lbnQoKTtcblx0XHR0aGlzLmhvdmVyRWxlbWVudCA9IGZhbHNlOyAvL2Zsb2F0aW5nIGNvbHVtbiBoZWFkZXIgZWxlbWVudFxuXHRcdHRoaXMuY2hlY2tUaW1lb3V0ID0gZmFsc2U7IC8vY2xpY2sgY2hlY2sgdGltZW91dCBob2xkZXJcblx0XHR0aGlzLmNoZWNrUGVyaW9kID0gMjUwOyAvL3BlcmlvZCB0byB3YWl0IG9uIG1vdXNlZG93biB0byBjb25zaWRlciB0aGlzIGEgbW92ZSBhbmQgbm90IGEgY2xpY2tcblx0XHR0aGlzLm1vdmluZyA9IGZhbHNlOyAvL2N1cnJlbnRseSBtb3ZpbmcgY29sdW1uXG5cdFx0dGhpcy50b0NvbCA9IGZhbHNlOyAvL2Rlc3RpbmF0aW9uIGNvbHVtblxuXHRcdHRoaXMudG9Db2xBZnRlciA9IGZhbHNlOyAvL3Bvc2l0aW9uIG9mIG1vdmluZyBjb2x1bW4gcmVsYXRpdmUgdG8gdGhlIGRlc3RpbmF0aW9uIGNvbHVtblxuXHRcdHRoaXMuc3RhcnRYID0gMDsgLy9zdGFydGluZyBwb3NpdGlvbiB3aXRoaW4gaGVhZGVyIGVsZW1lbnRcblx0XHR0aGlzLmF1dG9TY3JvbGxNYXJnaW4gPSA0MDsgLy9hdXRvIHNjcm9sbCBvbiBlZGdlIHdoZW4gd2l0aGluIG1hcmdpblxuXHRcdHRoaXMuYXV0b1Njcm9sbFN0ZXAgPSA1OyAvL2F1dG8gc2Nyb2xsIGRpc3RhbmNlIGluIHBpeGVsc1xuXHRcdHRoaXMuYXV0b1Njcm9sbFRpbWVvdXQgPSBmYWxzZTsgLy9hdXRvIHNjcm9sbCB0aW1lb3V0XG5cdFx0dGhpcy50b3VjaE1vdmUgPSBmYWxzZTtcblx0XHRcblx0XHR0aGlzLm1vdmVIb3ZlciA9IHRoaXMubW92ZUhvdmVyLmJpbmQodGhpcyk7XG5cdFx0dGhpcy5lbmRNb3ZlID0gdGhpcy5lbmRNb3ZlLmJpbmQodGhpcyk7XG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwibW92YWJsZUNvbHVtbnNcIiwgZmFsc2UpOyAvL2VuYWJsZSBtb3ZhYmxlIGNvbHVtbnNcblx0fVxuXHRcblx0Y3JlYXRlUGxhY2Vob2xkZXJFbGVtZW50KCl7XG5cdFx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcblx0XHRlbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWNvbFwiKTtcblx0XHRlbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWNvbC1wbGFjZWhvbGRlclwiKTtcblx0XHRcblx0XHRyZXR1cm4gZWw7XG5cdH1cblx0XG5cdGluaXRpYWxpemUoKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMubW92YWJsZUNvbHVtbnMpe1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4taW5pdFwiLCB0aGlzLmluaXRpYWxpemVDb2x1bW4uYmluZCh0aGlzKSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRpbml0aWFsaXplQ29sdW1uKGNvbHVtbil7XG5cdFx0dmFyIHNlbGYgPSB0aGlzLFxuXHRcdGNvbmZpZyA9IHt9LFxuXHRcdGNvbEVsO1xuXHRcdFxuXHRcdGlmKCFjb2x1bW4ubW9kdWxlcy5mcm96ZW4gJiYgIWNvbHVtbi5pc0dyb3VwKXtcblx0XHRcdGNvbEVsID0gY29sdW1uLmdldEVsZW1lbnQoKTtcblx0XHRcdFxuXHRcdFx0Y29uZmlnLm1vdXNlbW92ZSA9IGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRpZihjb2x1bW4ucGFyZW50ID09PSBzZWxmLm1vdmluZy5wYXJlbnQpe1xuXHRcdFx0XHRcdGlmKCgoKHNlbGYudG91Y2hNb3ZlID8gZS50b3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWCkgLSBIZWxwZXJzLmVsT2Zmc2V0KGNvbEVsKS5sZWZ0KSArIHNlbGYudGFibGUuY29sdW1uTWFuYWdlci5jb250ZW50c0VsZW1lbnQuc2Nyb2xsTGVmdCkgPiAoY29sdW1uLmdldFdpZHRoKCkgLyAyKSl7XG5cdFx0XHRcdFx0XHRpZihzZWxmLnRvQ29sICE9PSBjb2x1bW4gfHwgIXNlbGYudG9Db2xBZnRlcil7XG5cdFx0XHRcdFx0XHRcdGNvbEVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHNlbGYucGxhY2Vob2xkZXJFbGVtZW50LCBjb2xFbC5uZXh0U2libGluZyk7XG5cdFx0XHRcdFx0XHRcdHNlbGYubW92ZUNvbHVtbihjb2x1bW4sIHRydWUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdGlmKHNlbGYudG9Db2wgIT09IGNvbHVtbiB8fCBzZWxmLnRvQ29sQWZ0ZXIpe1xuXHRcdFx0XHRcdFx0XHRjb2xFbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzZWxmLnBsYWNlaG9sZGVyRWxlbWVudCwgY29sRWwpO1xuXHRcdFx0XHRcdFx0XHRzZWxmLm1vdmVDb2x1bW4oY29sdW1uLCBmYWxzZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LmJpbmQoc2VsZik7XG5cdFx0XHRcblx0XHRcdGNvbEVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgZnVuY3Rpb24oZSl7XG5cdFx0XHRcdHNlbGYudG91Y2hNb3ZlID0gZmFsc2U7XG5cdFx0XHRcdGlmKGUud2hpY2ggPT09IDEpe1xuXHRcdFx0XHRcdHNlbGYuY2hlY2tUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0c2VsZi5zdGFydE1vdmUoZSwgY29sdW1uKTtcblx0XHRcdFx0XHR9LCBzZWxmLmNoZWNrUGVyaW9kKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdGNvbEVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRpZihlLndoaWNoID09PSAxKXtcblx0XHRcdFx0XHRpZihzZWxmLmNoZWNrVGltZW91dCl7XG5cdFx0XHRcdFx0XHRjbGVhclRpbWVvdXQoc2VsZi5jaGVja1RpbWVvdXQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdHNlbGYuYmluZFRvdWNoRXZlbnRzKGNvbHVtbik7XG5cdFx0fVxuXHRcdFxuXHRcdGNvbHVtbi5tb2R1bGVzLm1vdmVDb2x1bW4gPSBjb25maWc7XG5cdH1cblx0XG5cdGJpbmRUb3VjaEV2ZW50cyhjb2x1bW4pe1xuXHRcdHZhciBjb2xFbCA9IGNvbHVtbi5nZXRFbGVtZW50KCksXG5cdFx0c3RhcnRYTW92ZSA9IGZhbHNlLCAvL3NoaWZ0aW5nIGNlbnRlciBwb3NpdGlvbiBvZiB0aGUgY2VsbFxuXHRcdG5leHRDb2wsIHByZXZDb2wsIG5leHRDb2xXaWR0aCwgcHJldkNvbFdpZHRoLCBuZXh0Q29sV2lkdGhMYXN0LCBwcmV2Q29sV2lkdGhMYXN0O1xuXHRcdFxuXHRcdGNvbEVsLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIChlKSA9PiB7XG5cdFx0XHR0aGlzLmNoZWNrVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHR0aGlzLnRvdWNoTW92ZSA9IHRydWU7XG5cdFx0XHRcdG5leHRDb2wgPSBjb2x1bW4ubmV4dENvbHVtbigpO1xuXHRcdFx0XHRuZXh0Q29sV2lkdGggPSBuZXh0Q29sID8gbmV4dENvbC5nZXRXaWR0aCgpLzIgOiAwO1xuXHRcdFx0XHRwcmV2Q29sID0gY29sdW1uLnByZXZDb2x1bW4oKTtcblx0XHRcdFx0cHJldkNvbFdpZHRoID0gcHJldkNvbCA/IHByZXZDb2wuZ2V0V2lkdGgoKS8yIDogMDtcblx0XHRcdFx0bmV4dENvbFdpZHRoTGFzdCA9IDA7XG5cdFx0XHRcdHByZXZDb2xXaWR0aExhc3QgPSAwO1xuXHRcdFx0XHRzdGFydFhNb3ZlID0gZmFsc2U7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLnN0YXJ0TW92ZShlLCBjb2x1bW4pO1xuXHRcdFx0fSwgdGhpcy5jaGVja1BlcmlvZCk7XG5cdFx0fSwge3Bhc3NpdmU6IHRydWV9KTtcblx0XHRcblx0XHRjb2xFbC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIChlKSA9PiB7XG5cdFx0XHR2YXIgZGlmZiwgbW92ZVRvQ29sO1xuXHRcdFx0XG5cdFx0XHRpZih0aGlzLm1vdmluZyl7XG5cdFx0XHRcdHRoaXMubW92ZUhvdmVyKGUpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoIXN0YXJ0WE1vdmUpe1xuXHRcdFx0XHRcdHN0YXJ0WE1vdmUgPSBlLnRvdWNoZXNbMF0ucGFnZVg7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGRpZmYgPSBlLnRvdWNoZXNbMF0ucGFnZVggLSBzdGFydFhNb3ZlO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoZGlmZiA+IDApe1xuXHRcdFx0XHRcdGlmKG5leHRDb2wgJiYgZGlmZiAtIG5leHRDb2xXaWR0aExhc3QgPiBuZXh0Q29sV2lkdGgpe1xuXHRcdFx0XHRcdFx0bW92ZVRvQ29sID0gbmV4dENvbDtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0aWYobW92ZVRvQ29sICE9PSBjb2x1bW4pe1xuXHRcdFx0XHRcdFx0XHRzdGFydFhNb3ZlID0gZS50b3VjaGVzWzBdLnBhZ2VYO1xuXHRcdFx0XHRcdFx0XHRtb3ZlVG9Db2wuZ2V0RWxlbWVudCgpLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMucGxhY2Vob2xkZXJFbGVtZW50LCBtb3ZlVG9Db2wuZ2V0RWxlbWVudCgpLm5leHRTaWJsaW5nKTtcblx0XHRcdFx0XHRcdFx0dGhpcy5tb3ZlQ29sdW1uKG1vdmVUb0NvbCwgdHJ1ZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0aWYocHJldkNvbCAmJiAtZGlmZiAtIHByZXZDb2xXaWR0aExhc3QgPiAgcHJldkNvbFdpZHRoKXtcblx0XHRcdFx0XHRcdG1vdmVUb0NvbCA9IHByZXZDb2w7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGlmKG1vdmVUb0NvbCAhPT0gY29sdW1uKXtcblx0XHRcdFx0XHRcdFx0c3RhcnRYTW92ZSA9IGUudG91Y2hlc1swXS5wYWdlWDtcblx0XHRcdFx0XHRcdFx0bW92ZVRvQ29sLmdldEVsZW1lbnQoKS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLnBsYWNlaG9sZGVyRWxlbWVudCwgbW92ZVRvQ29sLmdldEVsZW1lbnQoKSk7XG5cdFx0XHRcdFx0XHRcdHRoaXMubW92ZUNvbHVtbihtb3ZlVG9Db2wsIGZhbHNlKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGlmKG1vdmVUb0NvbCl7XG5cdFx0XHRcdFx0bmV4dENvbCA9IG1vdmVUb0NvbC5uZXh0Q29sdW1uKCk7XG5cdFx0XHRcdFx0bmV4dENvbFdpZHRoTGFzdCA9IG5leHRDb2xXaWR0aDtcblx0XHRcdFx0XHRuZXh0Q29sV2lkdGggPSBuZXh0Q29sID8gbmV4dENvbC5nZXRXaWR0aCgpIC8gMiA6IDA7XG5cdFx0XHRcdFx0cHJldkNvbCA9IG1vdmVUb0NvbC5wcmV2Q29sdW1uKCk7XG5cdFx0XHRcdFx0cHJldkNvbFdpZHRoTGFzdCA9IHByZXZDb2xXaWR0aDtcblx0XHRcdFx0XHRwcmV2Q29sV2lkdGggPSBwcmV2Q29sID8gcHJldkNvbC5nZXRXaWR0aCgpIC8gMiA6IDA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LCB7cGFzc2l2ZTogdHJ1ZX0pO1xuXHRcdFxuXHRcdGNvbEVsLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCAoZSkgPT4ge1xuXHRcdFx0aWYodGhpcy5jaGVja1RpbWVvdXQpe1xuXHRcdFx0XHRjbGVhclRpbWVvdXQodGhpcy5jaGVja1RpbWVvdXQpO1xuXHRcdFx0fVxuXHRcdFx0aWYodGhpcy5tb3Zpbmcpe1xuXHRcdFx0XHR0aGlzLmVuZE1vdmUoZSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0XG5cdHN0YXJ0TW92ZShlLCBjb2x1bW4pe1xuXHRcdHZhciBlbGVtZW50ID0gY29sdW1uLmdldEVsZW1lbnQoKSxcblx0XHRoZWFkZXJFbGVtZW50ID0gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmdldENvbnRlbnRzRWxlbWVudCgpLFxuXHRcdGhlYWRlcnNFbGVtZW50ID0gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmdldEhlYWRlcnNFbGVtZW50KCk7XG5cdFx0XG5cdFx0dGhpcy5tb3ZpbmcgPSBjb2x1bW47XG5cdFx0dGhpcy5zdGFydFggPSAodGhpcy50b3VjaE1vdmUgPyBlLnRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYKSAtIEhlbHBlcnMuZWxPZmZzZXQoZWxlbWVudCkubGVmdDtcblx0XHRcblx0XHR0aGlzLnRhYmxlLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1ibG9jay1zZWxlY3RcIik7XG5cdFx0XG5cdFx0Ly9jcmVhdGUgcGxhY2Vob2xkZXJcblx0XHR0aGlzLnBsYWNlaG9sZGVyRWxlbWVudC5zdHlsZS53aWR0aCA9IGNvbHVtbi5nZXRXaWR0aCgpICsgXCJweFwiO1xuXHRcdHRoaXMucGxhY2Vob2xkZXJFbGVtZW50LnN0eWxlLmhlaWdodCA9IGNvbHVtbi5nZXRIZWlnaHQoKSArIFwicHhcIjtcblx0XHRcblx0XHRlbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMucGxhY2Vob2xkZXJFbGVtZW50LCBlbGVtZW50KTtcblx0XHRlbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG5cdFx0XG5cdFx0Ly9jcmVhdGUgaG92ZXIgZWxlbWVudFxuXHRcdHRoaXMuaG92ZXJFbGVtZW50ID0gZWxlbWVudC5jbG9uZU5vZGUodHJ1ZSk7XG5cdFx0dGhpcy5ob3ZlckVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1tb3ZpbmdcIik7XG5cdFx0XG5cdFx0aGVhZGVyRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmhvdmVyRWxlbWVudCk7XG5cdFx0XG5cdFx0dGhpcy5ob3ZlckVsZW1lbnQuc3R5bGUubGVmdCA9IFwiMFwiO1xuXHRcdHRoaXMuaG92ZXJFbGVtZW50LnN0eWxlLmJvdHRvbSA9IChoZWFkZXJFbGVtZW50LmNsaWVudEhlaWdodCAtIGhlYWRlcnNFbGVtZW50Lm9mZnNldEhlaWdodCkgKyBcInB4XCI7XG5cdFx0XG5cdFx0aWYoIXRoaXMudG91Y2hNb3ZlKXtcblx0XHRcdHRoaXMuX2JpbmRNb3VzZU1vdmUoKTtcblx0XHRcdFxuXHRcdFx0ZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMubW92ZUhvdmVyKTtcblx0XHRcdGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy5lbmRNb3ZlKTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5tb3ZlSG92ZXIoZSk7XG5cdH1cblx0XG5cdF9iaW5kTW91c2VNb3ZlKCl7XG5cdFx0dGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmNvbHVtbnNCeUluZGV4LmZvckVhY2goZnVuY3Rpb24oY29sdW1uKXtcblx0XHRcdGlmKGNvbHVtbi5tb2R1bGVzLm1vdmVDb2x1bW4ubW91c2Vtb3ZlKXtcblx0XHRcdFx0Y29sdW1uLmdldEVsZW1lbnQoKS5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIGNvbHVtbi5tb2R1bGVzLm1vdmVDb2x1bW4ubW91c2Vtb3ZlKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRcblx0X3VuYmluZE1vdXNlTW92ZSgpe1xuXHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5jb2x1bW5zQnlJbmRleC5mb3JFYWNoKGZ1bmN0aW9uKGNvbHVtbil7XG5cdFx0XHRpZihjb2x1bW4ubW9kdWxlcy5tb3ZlQ29sdW1uLm1vdXNlbW92ZSl7XG5cdFx0XHRcdGNvbHVtbi5nZXRFbGVtZW50KCkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBjb2x1bW4ubW9kdWxlcy5tb3ZlQ29sdW1uLm1vdXNlbW92ZSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0XG5cdG1vdmVDb2x1bW4oY29sdW1uLCBhZnRlcil7XG5cdFx0dmFyIG1vdmluZ0NlbGxzID0gdGhpcy5tb3ZpbmcuZ2V0Q2VsbHMoKTtcblx0XHRcblx0XHR0aGlzLnRvQ29sID0gY29sdW1uO1xuXHRcdHRoaXMudG9Db2xBZnRlciA9IGFmdGVyO1xuXHRcdFxuXHRcdGlmKGFmdGVyKXtcblx0XHRcdGNvbHVtbi5nZXRDZWxscygpLmZvckVhY2goZnVuY3Rpb24oY2VsbCwgaSl7XG5cdFx0XHRcdHZhciBjZWxsRWwgPSBjZWxsLmdldEVsZW1lbnQodHJ1ZSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihjZWxsRWwucGFyZW50Tm9kZSAmJiBtb3ZpbmdDZWxsc1tpXSl7XG5cdFx0XHRcdFx0Y2VsbEVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG1vdmluZ0NlbGxzW2ldLmdldEVsZW1lbnQoKSwgY2VsbEVsLm5leHRTaWJsaW5nKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29sdW1uLmdldENlbGxzKCkuZm9yRWFjaChmdW5jdGlvbihjZWxsLCBpKXtcblx0XHRcdFx0dmFyIGNlbGxFbCA9IGNlbGwuZ2V0RWxlbWVudCh0cnVlKTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKGNlbGxFbC5wYXJlbnROb2RlICYmIG1vdmluZ0NlbGxzW2ldKXtcblx0XHRcdFx0XHRjZWxsRWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobW92aW5nQ2VsbHNbaV0uZ2V0RWxlbWVudCgpLCBjZWxsRWwpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblx0XG5cdGVuZE1vdmUoZSl7XG5cdFx0aWYoZS53aGljaCA9PT0gMSB8fCB0aGlzLnRvdWNoTW92ZSl7XG5cdFx0XHR0aGlzLl91bmJpbmRNb3VzZU1vdmUoKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5wbGFjZWhvbGRlckVsZW1lbnQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5tb3ZpbmcuZ2V0RWxlbWVudCgpLCB0aGlzLnBsYWNlaG9sZGVyRWxlbWVudC5uZXh0U2libGluZyk7XG5cdFx0XHR0aGlzLnBsYWNlaG9sZGVyRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMucGxhY2Vob2xkZXJFbGVtZW50KTtcblx0XHRcdHRoaXMuaG92ZXJFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5ob3ZlckVsZW1lbnQpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnRhYmxlLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcInRhYnVsYXRvci1ibG9jay1zZWxlY3RcIik7XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMudG9Db2wpe1xuXHRcdFx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIubW92ZUNvbHVtbkFjdHVhbCh0aGlzLm1vdmluZywgdGhpcy50b0NvbCwgdGhpcy50b0NvbEFmdGVyKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5tb3ZpbmcgPSBmYWxzZTtcblx0XHRcdHRoaXMudG9Db2wgPSBmYWxzZTtcblx0XHRcdHRoaXMudG9Db2xBZnRlciA9IGZhbHNlO1xuXHRcdFx0XG5cdFx0XHRpZighdGhpcy50b3VjaE1vdmUpe1xuXHRcdFx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5tb3ZlSG92ZXIpO1xuXHRcdFx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMuZW5kTW92ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRtb3ZlSG92ZXIoZSl7XG5cdFx0dmFyIGNvbHVtbkhvbGRlciA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5nZXRDb250ZW50c0VsZW1lbnQoKSxcblx0XHRzY3JvbGxMZWZ0ID0gY29sdW1uSG9sZGVyLnNjcm9sbExlZnQsXG5cdFx0eFBvcyA9ICgodGhpcy50b3VjaE1vdmUgPyBlLnRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYKSAtIEhlbHBlcnMuZWxPZmZzZXQoY29sdW1uSG9sZGVyKS5sZWZ0KSArIHNjcm9sbExlZnQsXG5cdFx0c2Nyb2xsUG9zO1xuXHRcdFxuXHRcdHRoaXMuaG92ZXJFbGVtZW50LnN0eWxlLmxlZnQgPSAoeFBvcyAtIHRoaXMuc3RhcnRYKSArIFwicHhcIjtcblx0XHRcblx0XHRpZih4UG9zIC0gc2Nyb2xsTGVmdCA8IHRoaXMuYXV0b1Njcm9sbE1hcmdpbil7XG5cdFx0XHRpZighdGhpcy5hdXRvU2Nyb2xsVGltZW91dCl7XG5cdFx0XHRcdHRoaXMuYXV0b1Njcm9sbFRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0XHRzY3JvbGxQb3MgPSBNYXRoLm1heCgwLHNjcm9sbExlZnQtNSk7XG5cdFx0XHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldEVsZW1lbnQoKS5zY3JvbGxMZWZ0ID0gc2Nyb2xsUG9zO1xuXHRcdFx0XHRcdHRoaXMuYXV0b1Njcm9sbFRpbWVvdXQgPSBmYWxzZTtcblx0XHRcdFx0fSwgMSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHNjcm9sbExlZnQgKyBjb2x1bW5Ib2xkZXIuY2xpZW50V2lkdGggLSB4UG9zIDwgdGhpcy5hdXRvU2Nyb2xsTWFyZ2luKXtcblx0XHRcdGlmKCF0aGlzLmF1dG9TY3JvbGxUaW1lb3V0KXtcblx0XHRcdFx0dGhpcy5hdXRvU2Nyb2xsVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRcdHNjcm9sbFBvcyA9IE1hdGgubWluKGNvbHVtbkhvbGRlci5jbGllbnRXaWR0aCwgc2Nyb2xsTGVmdCs1KTtcblx0XHRcdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0RWxlbWVudCgpLnNjcm9sbExlZnQgPSBzY3JvbGxQb3M7XG5cdFx0XHRcdFx0dGhpcy5hdXRvU2Nyb2xsVGltZW91dCA9IGZhbHNlO1xuXHRcdFx0XHR9LCAxKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuTW92ZUNvbHVtbnMubW9kdWxlTmFtZSA9IFwibW92ZUNvbHVtblwiO1xuXG5jbGFzcyBNb3ZlUm93cyBleHRlbmRzIE1vZHVsZXtcblxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXG5cdFx0dGhpcy5wbGFjZWhvbGRlckVsZW1lbnQgPSB0aGlzLmNyZWF0ZVBsYWNlaG9sZGVyRWxlbWVudCgpO1xuXHRcdHRoaXMuaG92ZXJFbGVtZW50ID0gZmFsc2U7IC8vZmxvYXRpbmcgcm93IGhlYWRlciBlbGVtZW50XG5cdFx0dGhpcy5jaGVja1RpbWVvdXQgPSBmYWxzZTsgLy9jbGljayBjaGVjayB0aW1lb3V0IGhvbGRlclxuXHRcdHRoaXMuY2hlY2tQZXJpb2QgPSAxNTA7IC8vcGVyaW9kIHRvIHdhaXQgb24gbW91c2Vkb3duIHRvIGNvbnNpZGVyIHRoaXMgYSBtb3ZlIGFuZCBub3QgYSBjbGlja1xuXHRcdHRoaXMubW92aW5nID0gZmFsc2U7IC8vY3VycmVudGx5IG1vdmluZyByb3dcblx0XHR0aGlzLnRvUm93ID0gZmFsc2U7IC8vZGVzdGluYXRpb24gcm93XG5cdFx0dGhpcy50b1Jvd0FmdGVyID0gZmFsc2U7IC8vcG9zaXRpb24gb2YgbW92aW5nIHJvdyByZWxhdGl2ZSB0byB0aGUgZGVzdGluYXRpb24gcm93XG5cdFx0dGhpcy5oYXNIYW5kbGUgPSBmYWxzZTsgLy9yb3cgaGFzIGhhbmRsZSBpbnN0ZWFkIG9mIGZ1bGx5IG1vdmFibGUgcm93XG5cdFx0dGhpcy5zdGFydFkgPSAwOyAvL3N0YXJ0aW5nIFkgcG9zaXRpb24gd2l0aGluIGhlYWRlciBlbGVtZW50XG5cdFx0dGhpcy5zdGFydFggPSAwOyAvL3N0YXJ0aW5nIFggcG9zaXRpb24gd2l0aGluIGhlYWRlciBlbGVtZW50XG5cblx0XHR0aGlzLm1vdmVIb3ZlciA9IHRoaXMubW92ZUhvdmVyLmJpbmQodGhpcyk7XG5cdFx0dGhpcy5lbmRNb3ZlID0gdGhpcy5lbmRNb3ZlLmJpbmQodGhpcyk7XG5cdFx0dGhpcy50YWJsZVJvd0Ryb3BFdmVudCA9IGZhbHNlO1xuXG5cdFx0dGhpcy50b3VjaE1vdmUgPSBmYWxzZTtcblxuXHRcdHRoaXMuY29ubmVjdGlvbiA9IGZhbHNlO1xuXHRcdHRoaXMuY29ubmVjdGlvblNlbGVjdG9yc1RhYmxlcyA9IGZhbHNlO1xuXHRcdHRoaXMuY29ubmVjdGlvblNlbGVjdG9yc0VsZW1lbnRzID0gZmFsc2U7XG5cdFx0dGhpcy5jb25uZWN0aW9uRWxlbWVudHMgPSBbXTtcblx0XHR0aGlzLmNvbm5lY3Rpb25zID0gW107XG5cblx0XHR0aGlzLmNvbm5lY3RlZFRhYmxlID0gZmFsc2U7XG5cdFx0dGhpcy5jb25uZWN0ZWRSb3cgPSBmYWxzZTtcblxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcIm1vdmFibGVSb3dzXCIsIGZhbHNlKTsgLy9lbmFibGUgbW92YWJsZSByb3dzXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwibW92YWJsZVJvd3NDb25uZWN0ZWRUYWJsZXNcIiwgZmFsc2UpOyAvL3RhYmxlcyBmb3IgbW92YWJsZSByb3dzIHRvIGJlIGNvbm5lY3RlZCB0b1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcIm1vdmFibGVSb3dzQ29ubmVjdGVkRWxlbWVudHNcIiwgZmFsc2UpOyAvL290aGVyIGVsZW1lbnRzIGZvciBtb3ZhYmxlIHJvd3MgdG8gYmUgY29ubmVjdGVkIHRvXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwibW92YWJsZVJvd3NTZW5kZXJcIiwgZmFsc2UpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcIm1vdmFibGVSb3dzUmVjZWl2ZXJcIiwgXCJpbnNlcnRcIik7XG5cblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwicm93SGFuZGxlXCIpO1xuXHR9XG5cblx0Y3JlYXRlUGxhY2Vob2xkZXJFbGVtZW50KCl7XG5cdFx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuXHRcdGVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3Itcm93XCIpO1xuXHRcdGVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3Itcm93LXBsYWNlaG9sZGVyXCIpO1xuXG5cdFx0cmV0dXJuIGVsO1xuXHR9XG5cblx0aW5pdGlhbGl6ZSgpe1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5tb3ZhYmxlUm93cyl7XG5cdFx0XHR0aGlzLmNvbm5lY3Rpb25TZWxlY3RvcnNUYWJsZXMgPSB0aGlzLnRhYmxlLm9wdGlvbnMubW92YWJsZVJvd3NDb25uZWN0ZWRUYWJsZXM7XG5cdFx0XHR0aGlzLmNvbm5lY3Rpb25TZWxlY3RvcnNFbGVtZW50cyA9IHRoaXMudGFibGUub3B0aW9ucy5tb3ZhYmxlUm93c0Nvbm5lY3RlZEVsZW1lbnRzO1xuXG5cdFx0XHR0aGlzLmNvbm5lY3Rpb24gPSB0aGlzLmNvbm5lY3Rpb25TZWxlY3RvcnNUYWJsZXMgfHwgdGhpcy5jb25uZWN0aW9uU2VsZWN0b3JzRWxlbWVudHM7XG5cblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY2VsbC1pbml0XCIsIHRoaXMuaW5pdGlhbGl6ZUNlbGwuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1pbml0XCIsIHRoaXMuaW5pdGlhbGl6ZUNvbHVtbi5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWluaXRcIiwgdGhpcy5pbml0aWFsaXplUm93LmJpbmQodGhpcykpO1xuXHRcdH1cblx0fVxuXG5cdGluaXRpYWxpemVHcm91cEhlYWRlcihncm91cCl7XG5cdFx0dmFyIHNlbGYgPSB0aGlzLFxuXHRcdGNvbmZpZyA9IHt9O1xuXG5cdFx0Ly9pbnRlciB0YWJsZSBkcmFnIGRyb3Bcblx0XHRjb25maWcubW91c2V1cCA9IGZ1bmN0aW9uKGUpe1xuXHRcdFx0c2VsZi50YWJsZVJvd0Ryb3AoZSwgZ3JvdXApO1xuXHRcdH0uYmluZChzZWxmKTtcblxuXHRcdC8vc2FtZSB0YWJsZSBkcmFnIGRyb3Bcblx0XHRjb25maWcubW91c2Vtb3ZlID0gZnVuY3Rpb24oZSl7XG5cdFx0XHR2YXIgcm93RWw7XG5cblx0XHRcdGlmKCgoZS5wYWdlWSAtIEhlbHBlcnMuZWxPZmZzZXQoZ3JvdXAuZWxlbWVudCkudG9wKSArIHNlbGYudGFibGUucm93TWFuYWdlci5lbGVtZW50LnNjcm9sbFRvcCkgPiAoZ3JvdXAuZ2V0SGVpZ2h0KCkgLyAyKSl7XG5cdFx0XHRcdGlmKHNlbGYudG9Sb3cgIT09IGdyb3VwIHx8ICFzZWxmLnRvUm93QWZ0ZXIpe1xuXHRcdFx0XHRcdHJvd0VsID0gZ3JvdXAuZ2V0RWxlbWVudCgpO1xuXHRcdFx0XHRcdHJvd0VsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHNlbGYucGxhY2Vob2xkZXJFbGVtZW50LCByb3dFbC5uZXh0U2libGluZyk7XG5cdFx0XHRcdFx0c2VsZi5tb3ZlUm93KGdyb3VwLCB0cnVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRpZihzZWxmLnRvUm93ICE9PSBncm91cCB8fCBzZWxmLnRvUm93QWZ0ZXIpe1xuXHRcdFx0XHRcdHJvd0VsID0gZ3JvdXAuZ2V0RWxlbWVudCgpO1xuXHRcdFx0XHRcdGlmKHJvd0VsLnByZXZpb3VzU2libGluZyl7XG5cdFx0XHRcdFx0XHRyb3dFbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzZWxmLnBsYWNlaG9sZGVyRWxlbWVudCwgcm93RWwpO1xuXHRcdFx0XHRcdFx0c2VsZi5tb3ZlUm93KGdyb3VwLCBmYWxzZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fS5iaW5kKHNlbGYpO1xuXG5cdFx0Z3JvdXAubW9kdWxlcy5tb3ZlUm93ID0gY29uZmlnO1xuXHR9XG5cblx0aW5pdGlhbGl6ZVJvdyhyb3cpe1xuXHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHRjb25maWcgPSB7fSxcblx0XHRyb3dFbDtcblxuXHRcdC8vaW50ZXIgdGFibGUgZHJhZyBkcm9wXG5cdFx0Y29uZmlnLm1vdXNldXAgPSBmdW5jdGlvbihlKXtcblx0XHRcdHNlbGYudGFibGVSb3dEcm9wKGUsIHJvdyk7XG5cdFx0fS5iaW5kKHNlbGYpO1xuXG5cdFx0Ly9zYW1lIHRhYmxlIGRyYWcgZHJvcFxuXHRcdGNvbmZpZy5tb3VzZW1vdmUgPSBmdW5jdGlvbihlKXtcblx0XHRcdHZhciByb3dFbCA9IHJvdy5nZXRFbGVtZW50KCk7XG5cblx0XHRcdGlmKCgoZS5wYWdlWSAtIEhlbHBlcnMuZWxPZmZzZXQocm93RWwpLnRvcCkgKyBzZWxmLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5zY3JvbGxUb3ApID4gKHJvdy5nZXRIZWlnaHQoKSAvIDIpKXtcblx0XHRcdFx0aWYoc2VsZi50b1JvdyAhPT0gcm93IHx8ICFzZWxmLnRvUm93QWZ0ZXIpe1xuXHRcdFx0XHRcdHJvd0VsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHNlbGYucGxhY2Vob2xkZXJFbGVtZW50LCByb3dFbC5uZXh0U2libGluZyk7XG5cdFx0XHRcdFx0c2VsZi5tb3ZlUm93KHJvdywgdHJ1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aWYoc2VsZi50b1JvdyAhPT0gcm93IHx8IHNlbGYudG9Sb3dBZnRlcil7XG5cdFx0XHRcdFx0cm93RWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc2VsZi5wbGFjZWhvbGRlckVsZW1lbnQsIHJvd0VsKTtcblx0XHRcdFx0XHRzZWxmLm1vdmVSb3cocm93LCBmYWxzZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LmJpbmQoc2VsZik7XG5cblxuXHRcdGlmKCF0aGlzLmhhc0hhbmRsZSl7XG5cblx0XHRcdHJvd0VsID0gcm93LmdldEVsZW1lbnQoKTtcblxuXHRcdFx0cm93RWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBmdW5jdGlvbihlKXtcblx0XHRcdFx0aWYoZS53aGljaCA9PT0gMSl7XG5cdFx0XHRcdFx0c2VsZi5jaGVja1RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRzZWxmLnN0YXJ0TW92ZShlLCByb3cpO1xuXHRcdFx0XHRcdH0sIHNlbGYuY2hlY2tQZXJpb2QpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0cm93RWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgZnVuY3Rpb24oZSl7XG5cdFx0XHRcdGlmKGUud2hpY2ggPT09IDEpe1xuXHRcdFx0XHRcdGlmKHNlbGYuY2hlY2tUaW1lb3V0KXtcblx0XHRcdFx0XHRcdGNsZWFyVGltZW91dChzZWxmLmNoZWNrVGltZW91dCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy5iaW5kVG91Y2hFdmVudHMocm93LCByb3cuZ2V0RWxlbWVudCgpKTtcblx0XHR9XG5cblx0XHRyb3cubW9kdWxlcy5tb3ZlUm93ID0gY29uZmlnO1xuXHR9XG5cblx0aW5pdGlhbGl6ZUNvbHVtbihjb2x1bW4pe1xuXHRcdGlmKGNvbHVtbi5kZWZpbml0aW9uLnJvd0hhbmRsZSAmJiB0aGlzLnRhYmxlLm9wdGlvbnMubW92YWJsZVJvd3MgIT09IGZhbHNlKXtcblx0XHRcdHRoaXMuaGFzSGFuZGxlID0gdHJ1ZTtcblx0XHR9XG5cdH1cblxuXHRpbml0aWFsaXplQ2VsbChjZWxsKXtcblx0XHRpZihjZWxsLmNvbHVtbi5kZWZpbml0aW9uLnJvd0hhbmRsZSAmJiB0aGlzLnRhYmxlLm9wdGlvbnMubW92YWJsZVJvd3MgIT09IGZhbHNlKXtcblx0XHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHRcdGNlbGxFbCA9IGNlbGwuZ2V0RWxlbWVudCh0cnVlKTtcblxuXHRcdFx0Y2VsbEVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgZnVuY3Rpb24oZSl7XG5cdFx0XHRcdGlmKGUud2hpY2ggPT09IDEpe1xuXHRcdFx0XHRcdHNlbGYuY2hlY2tUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0c2VsZi5zdGFydE1vdmUoZSwgY2VsbC5yb3cpO1xuXHRcdFx0XHRcdH0sIHNlbGYuY2hlY2tQZXJpb2QpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0Y2VsbEVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRpZihlLndoaWNoID09PSAxKXtcblx0XHRcdFx0XHRpZihzZWxmLmNoZWNrVGltZW91dCl7XG5cdFx0XHRcdFx0XHRjbGVhclRpbWVvdXQoc2VsZi5jaGVja1RpbWVvdXQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMuYmluZFRvdWNoRXZlbnRzKGNlbGwucm93LCBjZWxsRWwpO1xuXHRcdH1cblx0fVxuXG5cdGJpbmRUb3VjaEV2ZW50cyhyb3csIGVsZW1lbnQpe1xuXHRcdHZhciBzdGFydFlNb3ZlID0gZmFsc2UsIC8vc2hpZnRpbmcgY2VudGVyIHBvc2l0aW9uIG9mIHRoZSBjZWxsXG5cdFx0bmV4dFJvdywgcHJldlJvdywgbmV4dFJvd0hlaWdodCwgcHJldlJvd0hlaWdodCwgbmV4dFJvd0hlaWdodExhc3QsIHByZXZSb3dIZWlnaHRMYXN0O1xuXG5cdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCAoZSkgPT4ge1xuXHRcdFx0dGhpcy5jaGVja1RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0dGhpcy50b3VjaE1vdmUgPSB0cnVlO1xuXHRcdFx0XHRuZXh0Um93ID0gcm93Lm5leHRSb3coKTtcblx0XHRcdFx0bmV4dFJvd0hlaWdodCA9IG5leHRSb3cgPyBuZXh0Um93LmdldEhlaWdodCgpLzIgOiAwO1xuXHRcdFx0XHRwcmV2Um93ID0gcm93LnByZXZSb3coKTtcblx0XHRcdFx0cHJldlJvd0hlaWdodCA9IHByZXZSb3cgPyBwcmV2Um93LmdldEhlaWdodCgpLzIgOiAwO1xuXHRcdFx0XHRuZXh0Um93SGVpZ2h0TGFzdCA9IDA7XG5cdFx0XHRcdHByZXZSb3dIZWlnaHRMYXN0ID0gMDtcblx0XHRcdFx0c3RhcnRZTW92ZSA9IGZhbHNlO1xuXG5cdFx0XHRcdHRoaXMuc3RhcnRNb3ZlKGUsIHJvdyk7XG5cdFx0XHR9LCB0aGlzLmNoZWNrUGVyaW9kKTtcblx0XHR9LCB7cGFzc2l2ZTogdHJ1ZX0pO1xuXHRcdHRoaXMubW92aW5nLCB0aGlzLnRvUm93LCB0aGlzLnRvUm93QWZ0ZXI7XG5cdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIChlKSA9PiB7XG5cblx0XHRcdHZhciBkaWZmLCBtb3ZlVG9Sb3c7XG5cblx0XHRcdGlmKHRoaXMubW92aW5nKXtcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHRcdHRoaXMubW92ZUhvdmVyKGUpO1xuXG5cdFx0XHRcdGlmKCFzdGFydFlNb3ZlKXtcblx0XHRcdFx0XHRzdGFydFlNb3ZlID0gZS50b3VjaGVzWzBdLnBhZ2VZO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGlmZiA9IGUudG91Y2hlc1swXS5wYWdlWSAtIHN0YXJ0WU1vdmU7XG5cblx0XHRcdFx0aWYoZGlmZiA+IDApe1xuXHRcdFx0XHRcdGlmKG5leHRSb3cgJiYgZGlmZiAtIG5leHRSb3dIZWlnaHRMYXN0ID4gbmV4dFJvd0hlaWdodCl7XG5cdFx0XHRcdFx0XHRtb3ZlVG9Sb3cgPSBuZXh0Um93O1xuXG5cdFx0XHRcdFx0XHRpZihtb3ZlVG9Sb3cgIT09IHJvdyl7XG5cdFx0XHRcdFx0XHRcdHN0YXJ0WU1vdmUgPSBlLnRvdWNoZXNbMF0ucGFnZVk7XG5cdFx0XHRcdFx0XHRcdG1vdmVUb1Jvdy5nZXRFbGVtZW50KCkucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5wbGFjZWhvbGRlckVsZW1lbnQsIG1vdmVUb1Jvdy5nZXRFbGVtZW50KCkubmV4dFNpYmxpbmcpO1xuXHRcdFx0XHRcdFx0XHR0aGlzLm1vdmVSb3cobW92ZVRvUm93LCB0cnVlKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRpZihwcmV2Um93ICYmIC1kaWZmIC0gcHJldlJvd0hlaWdodExhc3QgPiAgcHJldlJvd0hlaWdodCl7XG5cdFx0XHRcdFx0XHRtb3ZlVG9Sb3cgPSBwcmV2Um93O1xuXG5cdFx0XHRcdFx0XHRpZihtb3ZlVG9Sb3cgIT09IHJvdyl7XG5cdFx0XHRcdFx0XHRcdHN0YXJ0WU1vdmUgPSBlLnRvdWNoZXNbMF0ucGFnZVk7XG5cdFx0XHRcdFx0XHRcdG1vdmVUb1Jvdy5nZXRFbGVtZW50KCkucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5wbGFjZWhvbGRlckVsZW1lbnQsIG1vdmVUb1Jvdy5nZXRFbGVtZW50KCkpO1xuXHRcdFx0XHRcdFx0XHR0aGlzLm1vdmVSb3cobW92ZVRvUm93LCBmYWxzZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYobW92ZVRvUm93KXtcblx0XHRcdFx0XHRuZXh0Um93ID0gbW92ZVRvUm93Lm5leHRSb3coKTtcblx0XHRcdFx0XHRuZXh0Um93SGVpZ2h0TGFzdCA9IG5leHRSb3dIZWlnaHQ7XG5cdFx0XHRcdFx0bmV4dFJvd0hlaWdodCA9IG5leHRSb3cgPyBuZXh0Um93LmdldEhlaWdodCgpIC8gMiA6IDA7XG5cdFx0XHRcdFx0cHJldlJvdyA9IG1vdmVUb1Jvdy5wcmV2Um93KCk7XG5cdFx0XHRcdFx0cHJldlJvd0hlaWdodExhc3QgPSBwcmV2Um93SGVpZ2h0O1xuXHRcdFx0XHRcdHByZXZSb3dIZWlnaHQgPSBwcmV2Um93ID8gcHJldlJvdy5nZXRIZWlnaHQoKSAvIDIgOiAwO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCAoZSkgPT4ge1xuXHRcdFx0aWYodGhpcy5jaGVja1RpbWVvdXQpe1xuXHRcdFx0XHRjbGVhclRpbWVvdXQodGhpcy5jaGVja1RpbWVvdXQpO1xuXHRcdFx0fVxuXHRcdFx0aWYodGhpcy5tb3Zpbmcpe1xuXHRcdFx0XHR0aGlzLmVuZE1vdmUoZSk7XG5cdFx0XHRcdHRoaXMudG91Y2hNb3ZlID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRfYmluZE1vdXNlTW92ZSgpe1xuXHRcdHRoaXMudGFibGUucm93TWFuYWdlci5nZXREaXNwbGF5Um93cygpLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0aWYoKHJvdy50eXBlID09PSBcInJvd1wiIHx8IHJvdy50eXBlID09PSBcImdyb3VwXCIpICYmIHJvdy5tb2R1bGVzLm1vdmVSb3cgJiYgcm93Lm1vZHVsZXMubW92ZVJvdy5tb3VzZW1vdmUpe1xuXHRcdFx0XHRyb3cuZ2V0RWxlbWVudCgpLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgcm93Lm1vZHVsZXMubW92ZVJvdy5tb3VzZW1vdmUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0X3VuYmluZE1vdXNlTW92ZSgpe1xuXHRcdHRoaXMudGFibGUucm93TWFuYWdlci5nZXREaXNwbGF5Um93cygpLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0aWYoKHJvdy50eXBlID09PSBcInJvd1wiIHx8IHJvdy50eXBlID09PSBcImdyb3VwXCIpICYmIHJvdy5tb2R1bGVzLm1vdmVSb3cgJiYgcm93Lm1vZHVsZXMubW92ZVJvdy5tb3VzZW1vdmUpe1xuXHRcdFx0XHRyb3cuZ2V0RWxlbWVudCgpLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgcm93Lm1vZHVsZXMubW92ZVJvdy5tb3VzZW1vdmUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0c3RhcnRNb3ZlKGUsIHJvdyl7XG5cdFx0dmFyIGVsZW1lbnQgPSByb3cuZ2V0RWxlbWVudCgpO1xuXG5cdFx0dGhpcy5zZXRTdGFydFBvc2l0aW9uKGUsIHJvdyk7XG5cblx0XHR0aGlzLm1vdmluZyA9IHJvdztcblxuXHRcdHRoaXMudGFibGUuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWJsb2NrLXNlbGVjdFwiKTtcblxuXHRcdC8vY3JlYXRlIHBsYWNlaG9sZGVyXG5cdFx0dGhpcy5wbGFjZWhvbGRlckVsZW1lbnQuc3R5bGUud2lkdGggPSByb3cuZ2V0V2lkdGgoKSArIFwicHhcIjtcblx0XHR0aGlzLnBsYWNlaG9sZGVyRWxlbWVudC5zdHlsZS5oZWlnaHQgPSByb3cuZ2V0SGVpZ2h0KCkgKyBcInB4XCI7XG5cblx0XHRpZighdGhpcy5jb25uZWN0aW9uKXtcblx0XHRcdGVsZW1lbnQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5wbGFjZWhvbGRlckVsZW1lbnQsIGVsZW1lbnQpO1xuXHRcdFx0ZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsZW1lbnQpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMudGFibGUuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLW1vdmluZ3Jvdy1zZW5kaW5nXCIpO1xuXHRcdFx0dGhpcy5jb25uZWN0VG9UYWJsZXMocm93KTtcblx0XHR9XG5cblx0XHQvL2NyZWF0ZSBob3ZlciBlbGVtZW50XG5cdFx0dGhpcy5ob3ZlckVsZW1lbnQgPSBlbGVtZW50LmNsb25lTm9kZSh0cnVlKTtcblx0XHR0aGlzLmhvdmVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLW1vdmluZ1wiKTtcblxuXHRcdGlmKHRoaXMuY29ubmVjdGlvbil7XG5cdFx0XHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuaG92ZXJFbGVtZW50KTtcblx0XHRcdHRoaXMuaG92ZXJFbGVtZW50LnN0eWxlLmxlZnQgPSBcIjBcIjtcblx0XHRcdHRoaXMuaG92ZXJFbGVtZW50LnN0eWxlLnRvcCA9IFwiMFwiO1xuXHRcdFx0dGhpcy5ob3ZlckVsZW1lbnQuc3R5bGUud2lkdGggPSB0aGlzLnRhYmxlLmVsZW1lbnQuY2xpZW50V2lkdGggKyBcInB4XCI7XG5cdFx0XHR0aGlzLmhvdmVyRWxlbWVudC5zdHlsZS53aGl0ZVNwYWNlID0gXCJub3dyYXBcIjtcblx0XHRcdHRoaXMuaG92ZXJFbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRcdHRoaXMuaG92ZXJFbGVtZW50LnN0eWxlLnBvaW50ZXJFdmVudHMgPSBcIm5vbmVcIjtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0VGFibGVFbGVtZW50KCkuYXBwZW5kQ2hpbGQodGhpcy5ob3ZlckVsZW1lbnQpO1xuXG5cdFx0XHR0aGlzLmhvdmVyRWxlbWVudC5zdHlsZS5sZWZ0ID0gXCIwXCI7XG5cdFx0XHR0aGlzLmhvdmVyRWxlbWVudC5zdHlsZS50b3AgPSBcIjBcIjtcblxuXHRcdFx0dGhpcy5fYmluZE1vdXNlTW92ZSgpO1xuXHRcdH1cblxuXHRcdGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLm1vdmVIb3Zlcik7XG5cdFx0ZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLmVuZE1vdmUpO1xuXG5cdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwicm93TW92aW5nXCIsIHJvdy5nZXRDb21wb25lbnQoKSk7XG5cblx0XHR0aGlzLm1vdmVIb3ZlcihlKTtcblx0fVxuXG5cdHNldFN0YXJ0UG9zaXRpb24oZSwgcm93KXtcblx0XHR2YXIgcGFnZVggPSB0aGlzLnRvdWNoTW92ZSA/IGUudG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVgsXG5cdFx0cGFnZVkgPSB0aGlzLnRvdWNoTW92ZSA/IGUudG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVksXG5cdFx0ZWxlbWVudCwgcG9zaXRpb247XG5cblx0XHRlbGVtZW50ID0gcm93LmdldEVsZW1lbnQoKTtcblx0XHRpZih0aGlzLmNvbm5lY3Rpb24pe1xuXHRcdFx0cG9zaXRpb24gPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0XHR0aGlzLnN0YXJ0WCA9IHBvc2l0aW9uLmxlZnQgLSBwYWdlWCArIHdpbmRvdy5wYWdlWE9mZnNldDtcblx0XHRcdHRoaXMuc3RhcnRZID0gcG9zaXRpb24udG9wIC0gcGFnZVkgKyB3aW5kb3cucGFnZVlPZmZzZXQ7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5zdGFydFkgPSAocGFnZVkgLSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCk7XG5cdFx0fVxuXHR9XG5cblx0ZW5kTW92ZShlKXtcblx0XHRpZighZSB8fCBlLndoaWNoID09PSAxIHx8IHRoaXMudG91Y2hNb3ZlKXtcblx0XHRcdHRoaXMuX3VuYmluZE1vdXNlTW92ZSgpO1xuXG5cdFx0XHRpZighdGhpcy5jb25uZWN0aW9uKXtcblx0XHRcdFx0dGhpcy5wbGFjZWhvbGRlckVsZW1lbnQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5tb3ZpbmcuZ2V0RWxlbWVudCgpLCB0aGlzLnBsYWNlaG9sZGVyRWxlbWVudC5uZXh0U2libGluZyk7XG5cdFx0XHRcdHRoaXMucGxhY2Vob2xkZXJFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5wbGFjZWhvbGRlckVsZW1lbnQpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmhvdmVyRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuaG92ZXJFbGVtZW50KTtcblxuXHRcdFx0dGhpcy50YWJsZS5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJ0YWJ1bGF0b3ItYmxvY2stc2VsZWN0XCIpO1xuXG5cdFx0XHRpZih0aGlzLnRvUm93KXtcblx0XHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLm1vdmVSb3codGhpcy5tb3ZpbmcsIHRoaXMudG9Sb3csIHRoaXMudG9Sb3dBZnRlcik7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInJvd01vdmVDYW5jZWxsZWRcIiwgdGhpcy5tb3ZpbmcuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLm1vdmluZyA9IGZhbHNlO1xuXHRcdFx0dGhpcy50b1JvdyA9IGZhbHNlO1xuXHRcdFx0dGhpcy50b1Jvd0FmdGVyID0gZmFsc2U7XG5cblx0XHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLm1vdmVIb3Zlcik7XG5cdFx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMuZW5kTW92ZSk7XG5cblx0XHRcdGlmKHRoaXMuY29ubmVjdGlvbil7XG5cdFx0XHRcdHRoaXMudGFibGUuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwidGFidWxhdG9yLW1vdmluZ3Jvdy1zZW5kaW5nXCIpO1xuXHRcdFx0XHR0aGlzLmRpc2Nvbm5lY3RGcm9tVGFibGVzKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0bW92ZVJvdyhyb3csIGFmdGVyKXtcblx0XHR0aGlzLnRvUm93ID0gcm93O1xuXHRcdHRoaXMudG9Sb3dBZnRlciA9IGFmdGVyO1xuXHR9XG5cblx0bW92ZUhvdmVyKGUpe1xuXHRcdGlmKHRoaXMuY29ubmVjdGlvbil7XG5cdFx0XHR0aGlzLm1vdmVIb3ZlckNvbm5lY3Rpb25zLmNhbGwodGhpcywgZSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5tb3ZlSG92ZXJUYWJsZS5jYWxsKHRoaXMsIGUpO1xuXHRcdH1cblx0fVxuXG5cdG1vdmVIb3ZlclRhYmxlKGUpe1xuXHRcdHZhciByb3dIb2xkZXIgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0RWxlbWVudCgpLFxuXHRcdHNjcm9sbFRvcCA9IHJvd0hvbGRlci5zY3JvbGxUb3AsXG5cdFx0eVBvcyA9ICgodGhpcy50b3VjaE1vdmUgPyBlLnRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZKSAtIHJvd0hvbGRlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3ApICsgc2Nyb2xsVG9wO1xuXHRcdFxuXHRcdHRoaXMuaG92ZXJFbGVtZW50LnN0eWxlLnRvcCA9IE1hdGgubWluKHlQb3MgLSB0aGlzLnN0YXJ0WSwgdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQuc2Nyb2xsSGVpZ2h0IC0gdGhpcy5ob3ZlckVsZW1lbnQub2Zmc2V0SGVpZ2h0KSArIFwicHhcIjtcblx0fVxuXG5cdG1vdmVIb3ZlckNvbm5lY3Rpb25zKGUpe1xuXHRcdHRoaXMuaG92ZXJFbGVtZW50LnN0eWxlLmxlZnQgPSAodGhpcy5zdGFydFggKyAodGhpcy50b3VjaE1vdmUgPyBlLnRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYKSkgKyBcInB4XCI7XG5cdFx0dGhpcy5ob3ZlckVsZW1lbnQuc3R5bGUudG9wID0gKHRoaXMuc3RhcnRZICsgKHRoaXMudG91Y2hNb3ZlID8gZS50b3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWSkpICsgXCJweFwiO1xuXHR9XG5cblx0ZWxlbWVudFJvd0Ryb3AoZSwgZWxlbWVudCwgcm93KXtcblx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJtb3ZhYmxlUm93c0VsZW1lbnREcm9wXCIsIGUsIGVsZW1lbnQsIHJvdyA/IHJvdy5nZXRDb21wb25lbnQoKSA6IGZhbHNlKTtcblx0fVxuXG5cdC8vZXN0YWJsaXNoIGNvbm5lY3Rpb24gd2l0aCBvdGhlciB0YWJsZXNcblx0Y29ubmVjdFRvVGFibGVzKHJvdyl7XG5cdFx0dmFyIGNvbm5lY3Rpb25UYWJsZXM7XG5cblx0XHRpZih0aGlzLmNvbm5lY3Rpb25TZWxlY3RvcnNUYWJsZXMpe1xuXHRcdFx0Y29ubmVjdGlvblRhYmxlcyA9IHRoaXMuY29tbXNDb25uZWN0aW9ucyh0aGlzLmNvbm5lY3Rpb25TZWxlY3RvcnNUYWJsZXMpO1xuXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJtb3ZhYmxlUm93c1NlbmRpbmdTdGFydFwiLCBjb25uZWN0aW9uVGFibGVzKTtcblxuXHRcdFx0dGhpcy5jb21tc1NlbmQodGhpcy5jb25uZWN0aW9uU2VsZWN0b3JzVGFibGVzLCBcIm1vdmVSb3dcIiwgXCJjb25uZWN0XCIsIHtcblx0XHRcdFx0cm93OnJvdyxcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmKHRoaXMuY29ubmVjdGlvblNlbGVjdG9yc0VsZW1lbnRzKXtcblxuXHRcdFx0dGhpcy5jb25uZWN0aW9uRWxlbWVudHMgPSBbXTtcblxuXHRcdFx0aWYoIUFycmF5LmlzQXJyYXkodGhpcy5jb25uZWN0aW9uU2VsZWN0b3JzRWxlbWVudHMpKXtcblx0XHRcdFx0dGhpcy5jb25uZWN0aW9uU2VsZWN0b3JzRWxlbWVudHMgPSBbdGhpcy5jb25uZWN0aW9uU2VsZWN0b3JzRWxlbWVudHNdO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmNvbm5lY3Rpb25TZWxlY3RvcnNFbGVtZW50cy5mb3JFYWNoKChxdWVyeSkgPT4ge1xuXHRcdFx0XHRpZih0eXBlb2YgcXVlcnkgPT09IFwic3RyaW5nXCIpe1xuXHRcdFx0XHRcdHRoaXMuY29ubmVjdGlvbkVsZW1lbnRzID0gdGhpcy5jb25uZWN0aW9uRWxlbWVudHMuY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocXVlcnkpKSk7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHR0aGlzLmNvbm5lY3Rpb25FbGVtZW50cy5wdXNoKHF1ZXJ5KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMuY29ubmVjdGlvbkVsZW1lbnRzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcblx0XHRcdFx0dmFyIGRyb3BFdmVudCA9IChlKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5lbGVtZW50Um93RHJvcChlLCBlbGVtZW50LCB0aGlzLm1vdmluZyk7XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBkcm9wRXZlbnQpO1xuXHRcdFx0XHRlbGVtZW50LnRhYnVsYXRvckVsZW1lbnREcm9wRXZlbnQgPSBkcm9wRXZlbnQ7XG5cblx0XHRcdFx0ZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLW1vdmluZ3Jvdy1yZWNlaXZpbmdcIik7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHQvL2Rpc2Nvbm5lY3QgZnJvbSBvdGhlciB0YWJsZXNcblx0ZGlzY29ubmVjdEZyb21UYWJsZXMoKXtcblx0XHR2YXIgY29ubmVjdGlvblRhYmxlcztcblxuXHRcdGlmKHRoaXMuY29ubmVjdGlvblNlbGVjdG9yc1RhYmxlcyl7XG5cdFx0XHRjb25uZWN0aW9uVGFibGVzID0gdGhpcy5jb21tc0Nvbm5lY3Rpb25zKHRoaXMuY29ubmVjdGlvblNlbGVjdG9yc1RhYmxlcyk7XG5cblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcIm1vdmFibGVSb3dzU2VuZGluZ1N0b3BcIiwgY29ubmVjdGlvblRhYmxlcyk7XG5cblx0XHRcdHRoaXMuY29tbXNTZW5kKHRoaXMuY29ubmVjdGlvblNlbGVjdG9yc1RhYmxlcywgXCJtb3ZlUm93XCIsIFwiZGlzY29ubmVjdFwiKTtcblx0XHR9XG5cblx0XHR0aGlzLmNvbm5lY3Rpb25FbGVtZW50cy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG5cdFx0XHRlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJ0YWJ1bGF0b3ItbW92aW5ncm93LXJlY2VpdmluZ1wiKTtcblx0XHRcdGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgZWxlbWVudC50YWJ1bGF0b3JFbGVtZW50RHJvcEV2ZW50KTtcblx0XHRcdGRlbGV0ZSBlbGVtZW50LnRhYnVsYXRvckVsZW1lbnREcm9wRXZlbnQ7XG5cdFx0fSk7XG5cdH1cblxuXHQvL2FjY2VwdCBpbmNvbW1pbmcgY29ubmVjdGlvblxuXHRjb25uZWN0KHRhYmxlLCByb3cpe1xuXHRcdGlmKCF0aGlzLmNvbm5lY3RlZFRhYmxlKXtcblx0XHRcdHRoaXMuY29ubmVjdGVkVGFibGUgPSB0YWJsZTtcblx0XHRcdHRoaXMuY29ubmVjdGVkUm93ID0gcm93O1xuXG5cdFx0XHR0aGlzLnRhYmxlLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1tb3Zpbmdyb3ctcmVjZWl2aW5nXCIpO1xuXG5cdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0RGlzcGxheVJvd3MoKS5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdFx0aWYocm93LnR5cGUgPT09IFwicm93XCIgJiYgcm93Lm1vZHVsZXMubW92ZVJvdyAmJiByb3cubW9kdWxlcy5tb3ZlUm93Lm1vdXNldXApe1xuXHRcdFx0XHRcdHJvdy5nZXRFbGVtZW50KCkuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgcm93Lm1vZHVsZXMubW92ZVJvdy5tb3VzZXVwKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMudGFibGVSb3dEcm9wRXZlbnQgPSB0aGlzLnRhYmxlUm93RHJvcC5iaW5kKHRoaXMpO1xuXG5cdFx0XHR0aGlzLnRhYmxlLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy50YWJsZVJvd0Ryb3BFdmVudCk7XG5cblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcIm1vdmFibGVSb3dzUmVjZWl2aW5nU3RhcnRcIiwgcm93LCB0YWJsZSk7XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIk1vdmUgUm93IEVycm9yIC0gVGFibGUgY2Fubm90IGFjY2VwdCBjb25uZWN0aW9uLCBhbHJlYWR5IGNvbm5lY3RlZCB0byB0YWJsZTpcIiwgdGhpcy5jb25uZWN0ZWRUYWJsZSk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0Ly9jbG9zZSBpbmNvbWluZyBjb25uZWN0aW9uXG5cdGRpc2Nvbm5lY3QodGFibGUpe1xuXHRcdGlmKHRhYmxlID09PSB0aGlzLmNvbm5lY3RlZFRhYmxlKXtcblx0XHRcdHRoaXMuY29ubmVjdGVkVGFibGUgPSBmYWxzZTtcblx0XHRcdHRoaXMuY29ubmVjdGVkUm93ID0gZmFsc2U7XG5cblx0XHRcdHRoaXMudGFibGUuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwidGFidWxhdG9yLW1vdmluZ3Jvdy1yZWNlaXZpbmdcIik7XG5cblx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5nZXREaXNwbGF5Um93cygpLmZvckVhY2goKHJvdykgPT57XG5cdFx0XHRcdGlmKHJvdy50eXBlID09PSBcInJvd1wiICYmIHJvdy5tb2R1bGVzLm1vdmVSb3cgJiYgcm93Lm1vZHVsZXMubW92ZVJvdy5tb3VzZXVwKXtcblx0XHRcdFx0XHRyb3cuZ2V0RWxlbWVudCgpLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHJvdy5tb2R1bGVzLm1vdmVSb3cubW91c2V1cCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLnRhYmxlLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy50YWJsZVJvd0Ryb3BFdmVudCk7XG5cblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcIm1vdmFibGVSb3dzUmVjZWl2aW5nU3RvcFwiLCB0YWJsZSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiTW92ZSBSb3cgRXJyb3IgLSB0cnlpbmcgdG8gZGlzY29ubmVjdCBmcm9tIG5vbiBjb25uZWN0ZWQgdGFibGVcIik7XG5cdFx0fVxuXHR9XG5cblx0ZHJvcENvbXBsZXRlKHRhYmxlLCByb3csIHN1Y2Nlc3Mpe1xuXHRcdHZhciBzZW5kZXIgPSBmYWxzZTtcblxuXHRcdGlmKHN1Y2Nlc3Mpe1xuXG5cdFx0XHRzd2l0Y2godHlwZW9mIHRoaXMudGFibGUub3B0aW9ucy5tb3ZhYmxlUm93c1NlbmRlcil7XG5cdFx0XHRcdGNhc2UgXCJzdHJpbmdcIjpcblx0XHRcdFx0XHRzZW5kZXIgPSB0aGlzLnNlbmRlcnNbdGhpcy50YWJsZS5vcHRpb25zLm1vdmFibGVSb3dzU2VuZGVyXTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIFwiZnVuY3Rpb25cIjpcblx0XHRcdFx0XHRzZW5kZXIgPSB0aGlzLnRhYmxlLm9wdGlvbnMubW92YWJsZVJvd3NTZW5kZXI7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cblx0XHRcdGlmKHNlbmRlcil7XG5cdFx0XHRcdHNlbmRlci5jYWxsKHRoaXMsIHRoaXMubW92aW5nID8gdGhpcy5tb3ZpbmcuZ2V0Q29tcG9uZW50KCkgOiB1bmRlZmluZWQsIHJvdyA/IHJvdy5nZXRDb21wb25lbnQoKSA6IHVuZGVmaW5lZCwgdGFibGUpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMubW92YWJsZVJvd3NTZW5kZXIpe1xuXHRcdFx0XHRcdGNvbnNvbGUud2FybihcIk1vdmVyIFJvdyBFcnJvciAtIG5vIG1hdGNoaW5nIHNlbmRlciBmb3VuZDpcIiwgdGhpcy50YWJsZS5vcHRpb25zLm1vdmFibGVSb3dzU2VuZGVyKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJtb3ZhYmxlUm93c1NlbnRcIiwgdGhpcy5tb3ZpbmcuZ2V0Q29tcG9uZW50KCksIHJvdyA/IHJvdy5nZXRDb21wb25lbnQoKSA6IHVuZGVmaW5lZCwgdGFibGUpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcIm1vdmFibGVSb3dzU2VudEZhaWxlZFwiLCB0aGlzLm1vdmluZy5nZXRDb21wb25lbnQoKSwgcm93ID8gcm93LmdldENvbXBvbmVudCgpIDogdW5kZWZpbmVkLCB0YWJsZSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5lbmRNb3ZlKCk7XG5cdH1cblxuXHR0YWJsZVJvd0Ryb3AoZSwgcm93KXtcblx0XHR2YXIgcmVjZWl2ZXIgPSBmYWxzZSxcblx0XHRzdWNjZXNzID0gZmFsc2U7XG5cblx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXG5cdFx0c3dpdGNoKHR5cGVvZiB0aGlzLnRhYmxlLm9wdGlvbnMubW92YWJsZVJvd3NSZWNlaXZlcil7XG5cdFx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRcdHJlY2VpdmVyID0gdGhpcy5yZWNlaXZlcnNbdGhpcy50YWJsZS5vcHRpb25zLm1vdmFibGVSb3dzUmVjZWl2ZXJdO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHRcdHJlY2VpdmVyID0gdGhpcy50YWJsZS5vcHRpb25zLm1vdmFibGVSb3dzUmVjZWl2ZXI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblxuXHRcdGlmKHJlY2VpdmVyKXtcblx0XHRcdHN1Y2Nlc3MgPSByZWNlaXZlci5jYWxsKHRoaXMsIHRoaXMuY29ubmVjdGVkUm93LmdldENvbXBvbmVudCgpLCByb3cgPyByb3cuZ2V0Q29tcG9uZW50KCkgOiB1bmRlZmluZWQsIHRoaXMuY29ubmVjdGVkVGFibGUpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIk1vdmVyIFJvdyBFcnJvciAtIG5vIG1hdGNoaW5nIHJlY2VpdmVyIGZvdW5kOlwiLCB0aGlzLnRhYmxlLm9wdGlvbnMubW92YWJsZVJvd3NSZWNlaXZlcik7XG5cdFx0fVxuXG5cdFx0aWYoc3VjY2Vzcyl7XG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJtb3ZhYmxlUm93c1JlY2VpdmVkXCIsIHRoaXMuY29ubmVjdGVkUm93LmdldENvbXBvbmVudCgpLCByb3cgPyByb3cuZ2V0Q29tcG9uZW50KCkgOiB1bmRlZmluZWQsIHRoaXMuY29ubmVjdGVkVGFibGUpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcIm1vdmFibGVSb3dzUmVjZWl2ZWRGYWlsZWRcIiwgdGhpcy5jb25uZWN0ZWRSb3cuZ2V0Q29tcG9uZW50KCksIHJvdyA/IHJvdy5nZXRDb21wb25lbnQoKSA6IHVuZGVmaW5lZCwgdGhpcy5jb25uZWN0ZWRUYWJsZSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5jb21tc1NlbmQodGhpcy5jb25uZWN0ZWRUYWJsZSwgXCJtb3ZlUm93XCIsIFwiZHJvcGNvbXBsZXRlXCIsIHtcblx0XHRcdHJvdzpyb3csXG5cdFx0XHRzdWNjZXNzOnN1Y2Nlc3MsXG5cdFx0fSk7XG5cdH1cblxuXHRjb21tc1JlY2VpdmVkKHRhYmxlLCBhY3Rpb24sIGRhdGEpe1xuXHRcdHN3aXRjaChhY3Rpb24pe1xuXHRcdFx0Y2FzZSBcImNvbm5lY3RcIjpcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29ubmVjdCh0YWJsZSwgZGF0YS5yb3cpO1xuXG5cdFx0XHRjYXNlIFwiZGlzY29ubmVjdFwiOlxuXHRcdFx0XHRyZXR1cm4gdGhpcy5kaXNjb25uZWN0KHRhYmxlKTtcblxuXHRcdFx0Y2FzZSBcImRyb3Bjb21wbGV0ZVwiOlxuXHRcdFx0XHRyZXR1cm4gdGhpcy5kcm9wQ29tcGxldGUodGFibGUsIGRhdGEucm93LCBkYXRhLnN1Y2Nlc3MpO1xuXHRcdH1cblx0fVxufVxuXG5Nb3ZlUm93cy5wcm90b3R5cGUucmVjZWl2ZXJzID0ge1xuXHRpbnNlcnQ6ZnVuY3Rpb24oZnJvbVJvdywgdG9Sb3csIGZyb21UYWJsZSl7XG5cdFx0dGhpcy50YWJsZS5hZGRSb3coZnJvbVJvdy5nZXREYXRhKCksIHVuZGVmaW5lZCwgdG9Sb3cpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdGFkZDpmdW5jdGlvbihmcm9tUm93LCB0b1JvdywgZnJvbVRhYmxlKXtcblx0XHR0aGlzLnRhYmxlLmFkZFJvdyhmcm9tUm93LmdldERhdGEoKSk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0dXBkYXRlOmZ1bmN0aW9uKGZyb21Sb3csIHRvUm93LCBmcm9tVGFibGUpe1xuXHRcdGlmKHRvUm93KXtcblx0XHRcdHRvUm93LnVwZGF0ZShmcm9tUm93LmdldERhdGEoKSk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0sXG5cblx0cmVwbGFjZTpmdW5jdGlvbihmcm9tUm93LCB0b1JvdywgZnJvbVRhYmxlKXtcblx0XHRpZih0b1Jvdyl7XG5cdFx0XHR0aGlzLnRhYmxlLmFkZFJvdyhmcm9tUm93LmdldERhdGEoKSwgdW5kZWZpbmVkLCB0b1Jvdyk7XG5cdFx0XHR0b1Jvdy5kZWxldGUoKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcbn07XG5cbk1vdmVSb3dzLnByb3RvdHlwZS5zZW5kZXJzID0ge1xuXHRkZWxldGU6ZnVuY3Rpb24oZnJvbVJvdywgdG9Sb3csIHRvVGFibGUpe1xuXHRcdGZyb21Sb3cuZGVsZXRlKCk7XG5cdH1cbn07XG5cbk1vdmVSb3dzLm1vZHVsZU5hbWUgPSBcIm1vdmVSb3dcIjtcblxudmFyIGRlZmF1bHRNdXRhdG9ycyA9IHt9O1xuXG5jbGFzcyBNdXRhdG9yIGV4dGVuZHMgTW9kdWxle1xuXG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cblx0XHR0aGlzLmFsbG93ZWRUeXBlcyA9IFtcIlwiLCBcImRhdGFcIiwgXCJlZGl0XCIsIFwiY2xpcGJvYXJkXCJdOyAvL2xpc3Qgb2YgbXV0YXRpb24gdHlwZXNcblx0XHR0aGlzLmVuYWJsZWQgPSB0cnVlO1xuXG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcIm11dGF0b3JcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcIm11dGF0b3JQYXJhbXNcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcIm11dGF0b3JEYXRhXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJtdXRhdG9yRGF0YVBhcmFtc1wiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwibXV0YXRvckVkaXRcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcIm11dGF0b3JFZGl0UGFyYW1zXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJtdXRhdG9yQ2xpcGJvYXJkXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJtdXRhdG9yQ2xpcGJvYXJkUGFyYW1zXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJtdXRhdGVMaW5rXCIpO1xuXHR9XG5cblx0aW5pdGlhbGl6ZSgpe1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY2VsbC12YWx1ZS1jaGFuZ2luZ1wiLCB0aGlzLnRyYW5zZm9ybUNlbGwuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjZWxsLXZhbHVlLWNoYW5nZWRcIiwgdGhpcy5tdXRhdGVMaW5rLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWxheW91dFwiLCB0aGlzLmluaXRpYWxpemVDb2x1bW4uYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctZGF0YS1pbml0LWJlZm9yZVwiLCB0aGlzLnJvd0RhdGFDaGFuZ2VkLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWRhdGEtY2hhbmdpbmdcIiwgdGhpcy5yb3dEYXRhQ2hhbmdlZC5iaW5kKHRoaXMpKTtcblx0fVxuXG5cdHJvd0RhdGFDaGFuZ2VkKHJvdywgdGVtcERhdGEsIHVwZGF0ZWREYXRhKXtcblx0XHRyZXR1cm4gdGhpcy50cmFuc2Zvcm1Sb3codGVtcERhdGEsIFwiZGF0YVwiLCB1cGRhdGVkRGF0YSk7XG5cdH1cblxuXHQvL2luaXRpYWxpemUgY29sdW1uIG11dGF0b3Jcblx0aW5pdGlhbGl6ZUNvbHVtbihjb2x1bW4pe1xuXHRcdHZhciBtYXRjaCA9IGZhbHNlLFxuXHRcdGNvbmZpZyA9IHt9O1xuXG5cdFx0dGhpcy5hbGxvd2VkVHlwZXMuZm9yRWFjaCgodHlwZSkgPT4ge1xuXHRcdFx0dmFyIGtleSA9IFwibXV0YXRvclwiICsgKHR5cGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0eXBlLnNsaWNlKDEpKSxcblx0XHRcdG11dGF0b3I7XG5cblx0XHRcdGlmKGNvbHVtbi5kZWZpbml0aW9uW2tleV0pe1xuXHRcdFx0XHRtdXRhdG9yID0gdGhpcy5sb29rdXBNdXRhdG9yKGNvbHVtbi5kZWZpbml0aW9uW2tleV0pO1xuXG5cdFx0XHRcdGlmKG11dGF0b3Ipe1xuXHRcdFx0XHRcdG1hdGNoID0gdHJ1ZTtcblxuXHRcdFx0XHRcdGNvbmZpZ1trZXldID0ge1xuXHRcdFx0XHRcdFx0bXV0YXRvcjptdXRhdG9yLFxuXHRcdFx0XHRcdFx0cGFyYW1zOiBjb2x1bW4uZGVmaW5pdGlvbltrZXkgKyBcIlBhcmFtc1wiXSB8fCB7fSxcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRpZihtYXRjaCl7XG5cdFx0XHRjb2x1bW4ubW9kdWxlcy5tdXRhdGUgPSBjb25maWc7XG5cdFx0fVxuXHR9XG5cblx0bG9va3VwTXV0YXRvcih2YWx1ZSl7XG5cdFx0dmFyIG11dGF0b3IgPSBmYWxzZTtcblxuXHRcdC8vc2V0IGNvbHVtbiBtdXRhdG9yXG5cdFx0c3dpdGNoKHR5cGVvZiB2YWx1ZSl7XG5cdFx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRcdGlmKE11dGF0b3IubXV0YXRvcnNbdmFsdWVdKXtcblx0XHRcdFx0XHRtdXRhdG9yID0gTXV0YXRvci5tdXRhdG9yc1t2YWx1ZV07XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJNdXRhdG9yIEVycm9yIC0gTm8gc3VjaCBtdXRhdG9yIGZvdW5kLCBpZ25vcmluZzogXCIsIHZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHRcdG11dGF0b3IgPSB2YWx1ZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG11dGF0b3I7XG5cdH1cblxuXHQvL2FwcGx5IG11dGF0b3IgdG8gcm93XG5cdHRyYW5zZm9ybVJvdyhkYXRhLCB0eXBlLCB1cGRhdGVkRGF0YSl7XG5cdFx0dmFyIGtleSA9IFwibXV0YXRvclwiICsgKHR5cGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0eXBlLnNsaWNlKDEpKSxcblx0XHR2YWx1ZTtcblxuXHRcdGlmKHRoaXMuZW5hYmxlZCl7XG5cblx0XHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci50cmF2ZXJzZSgoY29sdW1uKSA9PiB7XG5cdFx0XHRcdHZhciBtdXRhdG9yLCBwYXJhbXMsIGNvbXBvbmVudDtcblxuXHRcdFx0XHRpZihjb2x1bW4ubW9kdWxlcy5tdXRhdGUpe1xuXHRcdFx0XHRcdG11dGF0b3IgPSBjb2x1bW4ubW9kdWxlcy5tdXRhdGVba2V5XSB8fCBjb2x1bW4ubW9kdWxlcy5tdXRhdGUubXV0YXRvciB8fCBmYWxzZTtcblxuXHRcdFx0XHRcdGlmKG11dGF0b3Ipe1xuXHRcdFx0XHRcdFx0dmFsdWUgPSBjb2x1bW4uZ2V0RmllbGRWYWx1ZSh0eXBlb2YgdXBkYXRlZERhdGEgIT09IFwidW5kZWZpbmVkXCIgPyB1cGRhdGVkRGF0YSA6IGRhdGEpO1xuXG5cdFx0XHRcdFx0XHRpZigodHlwZSA9PSBcImRhdGFcIiAmJiAhdXBkYXRlZERhdGEpfHwgdHlwZW9mIHZhbHVlICE9PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdFx0XHRcdFx0Y29tcG9uZW50ID0gY29sdW1uLmdldENvbXBvbmVudCgpO1xuXHRcdFx0XHRcdFx0XHRwYXJhbXMgPSB0eXBlb2YgbXV0YXRvci5wYXJhbXMgPT09IFwiZnVuY3Rpb25cIiA/IG11dGF0b3IucGFyYW1zKHZhbHVlLCBkYXRhLCB0eXBlLCBjb21wb25lbnQpIDogbXV0YXRvci5wYXJhbXM7XG5cdFx0XHRcdFx0XHRcdGNvbHVtbi5zZXRGaWVsZFZhbHVlKGRhdGEsIG11dGF0b3IubXV0YXRvcih2YWx1ZSwgZGF0YSwgdHlwZSwgcGFyYW1zLCBjb21wb25lbnQpKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXHR9XG5cblx0Ly9hcHBseSBtdXRhdG9yIHRvIG5ldyBjZWxsIHZhbHVlXG5cdHRyYW5zZm9ybUNlbGwoY2VsbCwgdmFsdWUpe1xuXHRcdGlmKGNlbGwuY29sdW1uLm1vZHVsZXMubXV0YXRlKXtcblx0XHRcdHZhciBtdXRhdG9yID0gY2VsbC5jb2x1bW4ubW9kdWxlcy5tdXRhdGUubXV0YXRvckVkaXQgfHwgY2VsbC5jb2x1bW4ubW9kdWxlcy5tdXRhdGUubXV0YXRvciB8fCBmYWxzZSxcblx0XHRcdHRlbXBEYXRhID0ge307XG5cblx0XHRcdGlmKG11dGF0b3Ipe1xuXHRcdFx0XHR0ZW1wRGF0YSA9IE9iamVjdC5hc3NpZ24odGVtcERhdGEsIGNlbGwucm93LmdldERhdGEoKSk7XG5cdFx0XHRcdGNlbGwuY29sdW1uLnNldEZpZWxkVmFsdWUodGVtcERhdGEsIHZhbHVlKTtcblx0XHRcdFx0cmV0dXJuIG11dGF0b3IubXV0YXRvcih2YWx1ZSwgdGVtcERhdGEsIFwiZWRpdFwiLCBtdXRhdG9yLnBhcmFtcywgY2VsbC5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cblx0bXV0YXRlTGluayhjZWxsKXtcblx0XHR2YXIgbGlua3MgPSBjZWxsLmNvbHVtbi5kZWZpbml0aW9uLm11dGF0ZUxpbms7XG5cblx0XHRpZihsaW5rcyl7XG5cdFx0XHRpZighQXJyYXkuaXNBcnJheShsaW5rcykpe1xuXHRcdFx0XHRsaW5rcyA9IFtsaW5rc107XG5cdFx0XHR9XG5cblx0XHRcdGxpbmtzLmZvckVhY2goKGxpbmspID0+IHtcblx0XHRcdFx0dmFyIGxpbmtDZWxsID0gY2VsbC5yb3cuZ2V0Q2VsbChsaW5rKTtcblxuXHRcdFx0XHRpZihsaW5rQ2VsbCl7XG5cdFx0XHRcdFx0bGlua0NlbGwuc2V0VmFsdWUobGlua0NlbGwuZ2V0VmFsdWUoKSwgdHJ1ZSwgdHJ1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdGVuYWJsZSgpe1xuXHRcdHRoaXMuZW5hYmxlZCA9IHRydWU7XG5cdH1cblxuXHRkaXNhYmxlKCl7XG5cdFx0dGhpcy5lbmFibGVkID0gZmFsc2U7XG5cdH1cbn1cblxuTXV0YXRvci5tb2R1bGVOYW1lID0gXCJtdXRhdG9yXCI7XG5cbi8vbG9hZCBkZWZhdWx0c1xuTXV0YXRvci5tdXRhdG9ycyA9IGRlZmF1bHRNdXRhdG9ycztcblxuZnVuY3Rpb24gcm93cyhwYWdlU2l6ZSwgY3VycmVudFJvdywgY3VycmVudFBhZ2UsIHRvdGFsUm93cywgdG90YWxQYWdlcyl7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpLFxuXHRzaG93aW5nRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKSxcblx0dmFsdWVFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpLFxuXHRvZkVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIiksXG5cdHRvdGFsRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKSxcblx0cm93c0VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG5cblx0dGhpcy50YWJsZS5tb2R1bGVzLmxvY2FsaXplLmxhbmdCaW5kKFwicGFnaW5hdGlvbnxjb3VudGVyfHNob3dpbmdcIiwgKHZhbHVlKSA9PiB7XG5cdFx0c2hvd2luZ0VsLmlubmVySFRNTCA9IHZhbHVlO1xuXHR9KTtcblxuXHR0aGlzLnRhYmxlLm1vZHVsZXMubG9jYWxpemUubGFuZ0JpbmQoXCJwYWdpbmF0aW9ufGNvdW50ZXJ8b2ZcIiwgKHZhbHVlKSA9PiB7XG5cdFx0b2ZFbC5pbm5lckhUTUwgPSB2YWx1ZTtcblx0fSk7XG5cblx0dGhpcy50YWJsZS5tb2R1bGVzLmxvY2FsaXplLmxhbmdCaW5kKFwicGFnaW5hdGlvbnxjb3VudGVyfHJvd3NcIiwgKHZhbHVlKSA9PiB7XG5cdFx0cm93c0VsLmlubmVySFRNTCA9IHZhbHVlO1xuXHR9KTtcblxuXHRpZih0b3RhbFJvd3Mpe1xuXHRcdHZhbHVlRWwuaW5uZXJIVE1MID0gXCIgXCIgKyBjdXJyZW50Um93ICsgXCItXCIgKyBNYXRoLm1pbigoY3VycmVudFJvdyArIHBhZ2VTaXplIC0gMSksIHRvdGFsUm93cykgKyBcIiBcIjtcblx0XHRcblx0XHR0b3RhbEVsLmlubmVySFRNTCA9IFwiIFwiICsgdG90YWxSb3dzICsgXCIgXCI7XG5cdFx0XG5cdFx0ZWwuYXBwZW5kQ2hpbGQoc2hvd2luZ0VsKTtcblx0XHRlbC5hcHBlbmRDaGlsZCh2YWx1ZUVsKTtcblx0XHRlbC5hcHBlbmRDaGlsZChvZkVsKTtcblx0XHRlbC5hcHBlbmRDaGlsZCh0b3RhbEVsKTtcblx0XHRlbC5hcHBlbmRDaGlsZChyb3dzRWwpO1xuXHR9ZWxzZSB7XG5cdFx0dmFsdWVFbC5pbm5lckhUTUwgPSBcIiAwIFwiO1xuXG5cdFx0ZWwuYXBwZW5kQ2hpbGQoc2hvd2luZ0VsKTtcblx0XHRlbC5hcHBlbmRDaGlsZCh2YWx1ZUVsKTtcblx0XHRlbC5hcHBlbmRDaGlsZChyb3dzRWwpO1xuXHR9XG5cdFxuXHRyZXR1cm4gZWw7XG59XG5cbmZ1bmN0aW9uIHBhZ2VzKHBhZ2VTaXplLCBjdXJyZW50Um93LCBjdXJyZW50UGFnZSwgdG90YWxSb3dzLCB0b3RhbFBhZ2VzKXtcblxuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKSxcblx0c2hvd2luZ0VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIiksXG5cdHZhbHVlRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKSxcblx0b2ZFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpLFxuXHR0b3RhbEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIiksXG5cdHJvd3NFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuXHRcblx0dGhpcy50YWJsZS5tb2R1bGVzLmxvY2FsaXplLmxhbmdCaW5kKFwicGFnaW5hdGlvbnxjb3VudGVyfHNob3dpbmdcIiwgKHZhbHVlKSA9PiB7XG5cdFx0c2hvd2luZ0VsLmlubmVySFRNTCA9IHZhbHVlO1xuXHR9KTtcblx0XG5cdHZhbHVlRWwuaW5uZXJIVE1MID0gXCIgXCIgKyBjdXJyZW50UGFnZSArIFwiIFwiO1xuXHRcblx0dGhpcy50YWJsZS5tb2R1bGVzLmxvY2FsaXplLmxhbmdCaW5kKFwicGFnaW5hdGlvbnxjb3VudGVyfG9mXCIsICh2YWx1ZSkgPT4ge1xuXHRcdG9mRWwuaW5uZXJIVE1MID0gdmFsdWU7XG5cdH0pO1xuXHRcblx0dG90YWxFbC5pbm5lckhUTUwgPSBcIiBcIiArIHRvdGFsUGFnZXMgKyBcIiBcIjtcblx0XG5cdHRoaXMudGFibGUubW9kdWxlcy5sb2NhbGl6ZS5sYW5nQmluZChcInBhZ2luYXRpb258Y291bnRlcnxwYWdlc1wiLCAodmFsdWUpID0+IHtcblx0XHRyb3dzRWwuaW5uZXJIVE1MID0gdmFsdWU7XG5cdH0pO1xuXHRcblx0ZWwuYXBwZW5kQ2hpbGQoc2hvd2luZ0VsKTtcblx0ZWwuYXBwZW5kQ2hpbGQodmFsdWVFbCk7XG5cdGVsLmFwcGVuZENoaWxkKG9mRWwpO1xuXHRlbC5hcHBlbmRDaGlsZCh0b3RhbEVsKTtcblx0ZWwuYXBwZW5kQ2hpbGQocm93c0VsKTtcblx0XG5cdHJldHVybiBlbDtcbn1cblxudmFyIGRlZmF1bHRQYWdlQ291bnRlcnMgPSB7XG5cdHJvd3M6cm93cyxcblx0cGFnZXM6cGFnZXMsXG59O1xuXG5jbGFzcyBQYWdlIGV4dGVuZHMgTW9kdWxle1xuXHRcblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblx0XHRcblx0XHR0aGlzLm1vZGUgPSBcImxvY2FsXCI7XG5cdFx0dGhpcy5wcm9ncmVzc2l2ZUxvYWQgPSBmYWxzZTtcblx0XHRcblx0XHR0aGlzLmVsZW1lbnQgPSBudWxsO1xuXHRcdHRoaXMucGFnZUNvdW50ZXJFbGVtZW50ID0gbnVsbDtcblx0XHR0aGlzLnBhZ2VDb3VudGVyID0gbnVsbDtcblx0XHRcblx0XHR0aGlzLnNpemUgPSAwO1xuXHRcdHRoaXMucGFnZSA9IDE7XG5cdFx0dGhpcy5jb3VudCA9IDU7XG5cdFx0dGhpcy5tYXggPSAxO1xuXG5cdFx0dGhpcy5yZW1vdGVSb3dDb3VudEVzdGltYXRlID0gbnVsbDtcblx0XHRcblx0XHR0aGlzLmluaXRpYWxMb2FkID0gdHJ1ZTtcblx0XHR0aGlzLmRhdGFDaGFuZ2luZyA9IGZhbHNlOyAvL2ZsYWcgdG8gY2hlY2sgaWYgZGF0YSBpcyBiZWluZyBjaGFuZ2VkIGJ5IHRoaXMgbW9kdWxlXG5cdFx0XG5cdFx0dGhpcy5wYWdlU2l6ZXMgPSBbXTtcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJwYWdpbmF0aW9uXCIsIGZhbHNlKTsgLy9zZXQgcGFnaW5hdGlvbiB0eXBlXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicGFnaW5hdGlvbk1vZGVcIiwgXCJsb2NhbFwiKTsgLy9sb2NhbCBvciByZW1vdGUgcGFnaW5hdGlvblxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInBhZ2luYXRpb25TaXplXCIsIGZhbHNlKTsgLy9zZXQgbnVtYmVyIG9mIHJvd3MgdG8gYSBwYWdlXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicGFnaW5hdGlvbkluaXRpYWxQYWdlXCIsIDEpOyAvL2luaXRpYWwgcGFnZSB0byBzaG93IG9uIGxvYWRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJwYWdpbmF0aW9uQ291bnRlclwiLCBmYWxzZSk7ICAvLyBzZXQgcGFnaW5hdGlvbiBjb3VudGVyXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicGFnaW5hdGlvbkNvdW50ZXJFbGVtZW50XCIsIGZhbHNlKTsgIC8vIHNldCBwYWdpbmF0aW9uIGNvdW50ZXJcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJwYWdpbmF0aW9uQnV0dG9uQ291bnRcIiwgNSk7ICAvLyBzZXQgY291bnQgb2YgcGFnZSBidXR0b25cblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJwYWdpbmF0aW9uU2l6ZVNlbGVjdG9yXCIsIGZhbHNlKTsgLy9hZGQgcGFnaW5hdGlvbiBzaXplIHNlbGVjdG9yIGVsZW1lbnRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJwYWdpbmF0aW9uRWxlbWVudFwiLCBmYWxzZSk7IC8vZWxlbWVudCB0byBob2xkIHBhZ2luYXRpb24gbnVtYmVyc1xuXHRcdC8vIHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInBhZ2luYXRpb25EYXRhU2VudFwiLCB7fSk7IC8vcGFnaW5hdGlvbiBkYXRhIHNlbnQgdG8gdGhlIHNlcnZlclxuXHRcdC8vIHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInBhZ2luYXRpb25EYXRhUmVjZWl2ZWRcIiwge30pOyAvL3BhZ2luYXRpb24gZGF0YSByZWNlaXZlZCBmcm9tIHRoZSBzZXJ2ZXJcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJwYWdpbmF0aW9uQWRkUm93XCIsIFwicGFnZVwiKTsgLy9hZGQgcm93cyBvbiB0YWJsZSBvciBwYWdlXG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicHJvZ3Jlc3NpdmVMb2FkXCIsIGZhbHNlKTsgLy9wcm9ncmVzc2l2ZSBsb2FkaW5nXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicHJvZ3Jlc3NpdmVMb2FkRGVsYXlcIiwgMCk7IC8vZGVsYXkgYmV0d2VlbiByZXF1ZXN0c1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInByb2dyZXNzaXZlTG9hZFNjcm9sbE1hcmdpblwiLCAwKTsgLy9tYXJnaW4gYmVmb3JlIHNjcm9sbCBiZWdpbnNcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcInNldE1heFBhZ2VcIiwgdGhpcy5zZXRNYXhQYWdlLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwic2V0UGFnZVwiLCB0aGlzLnNldFBhZ2UuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJzZXRQYWdlVG9Sb3dcIiwgdGhpcy51c2VyU2V0UGFnZVRvUm93LmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwic2V0UGFnZVNpemVcIiwgdGhpcy51c2VyU2V0UGFnZVNpemUuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJnZXRQYWdlU2l6ZVwiLCB0aGlzLmdldFBhZ2VTaXplLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwicHJldmlvdXNQYWdlXCIsIHRoaXMucHJldmlvdXNQYWdlLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwibmV4dFBhZ2VcIiwgdGhpcy5uZXh0UGFnZS5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcImdldFBhZ2VcIiwgdGhpcy5nZXRQYWdlLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiZ2V0UGFnZU1heFwiLCB0aGlzLmdldFBhZ2VNYXguYmluZCh0aGlzKSk7XG5cdFx0XG5cdFx0Ly9yZWdpc3RlciBjb21wb25lbnQgZnVuY3Rpb25zXG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwicm93XCIsIFwicGFnZVRvXCIsIHRoaXMuc2V0UGFnZVRvUm93LmJpbmQodGhpcykpO1xuXHR9XG5cdFxuXHRpbml0aWFsaXplKCl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnBhZ2luYXRpb24pe1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctZGVsZXRlZFwiLCB0aGlzLnJvd3NVcGRhdGVkLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctYWRkZWRcIiwgdGhpcy5yb3dzVXBkYXRlZC5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiZGF0YS1wcm9jZXNzZWRcIiwgdGhpcy5pbml0aWFsTG9hZENvbXBsZXRlLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJ0YWJsZS1idWlsdFwiLCB0aGlzLmNhbGN1bGF0ZVBhZ2VTaXplcy5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiZm9vdGVyLXJlZHJhd1wiLCB0aGlzLmZvb3RlclJlZHJhdy5iaW5kKHRoaXMpKTtcblxuXHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnBhZ2luYXRpb25BZGRSb3cgPT0gXCJwYWdlXCIpe1xuXHRcdFx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1hZGRpbmctcG9zaXRpb25cIiwgdGhpcy5yb3dBZGRpbmdQb3NpdGlvbi5iaW5kKHRoaXMpKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnBhZ2luYXRpb25Nb2RlID09PSBcInJlbW90ZVwiKXtcblx0XHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJkYXRhLXBhcmFtc1wiLCB0aGlzLnJlbW90ZVBhZ2VQYXJhbXMuYmluZCh0aGlzKSk7XG5cdFx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiZGF0YS1sb2FkZWRcIiwgdGhpcy5fcGFyc2VSZW1vdGVEYXRhLmJpbmQodGhpcykpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucHJvZ3Jlc3NpdmVMb2FkKXtcblx0XHRcdFx0Y29uc29sZS5lcnJvcihcIlByb2dyZXNzaXZlIExvYWQgRXJyb3IgLSBQYWdpbmF0aW9uIGFuZCBwcm9ncmVzc2l2ZSBsb2FkIGNhbm5vdCBiZSB1c2VkIGF0IHRoZSBzYW1lIHRpbWVcIik7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHRoaXMucmVnaXN0ZXJEaXNwbGF5SGFuZGxlcih0aGlzLnJlc3RPblJlbmRlckJlZm9yZS5iaW5kKHRoaXMpLCA0MCk7XG5cdFx0XHR0aGlzLnJlZ2lzdGVyRGlzcGxheUhhbmRsZXIodGhpcy5nZXRSb3dzLmJpbmQodGhpcyksIDUwKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5jcmVhdGVFbGVtZW50cygpO1xuXHRcdFx0dGhpcy5pbml0aWFsaXplUGFnZUNvdW50ZXIoKTtcblx0XHRcdHRoaXMuaW5pdGlhbGl6ZVBhZ2luYXRvcigpO1xuXHRcdH1lbHNlIGlmKHRoaXMudGFibGUub3B0aW9ucy5wcm9ncmVzc2l2ZUxvYWQpe1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJkYXRhLXBhcmFtc1wiLCB0aGlzLnJlbW90ZVBhZ2VQYXJhbXMuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImRhdGEtbG9hZGVkXCIsIHRoaXMuX3BhcnNlUmVtb3RlRGF0YS5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwidGFibGUtYnVpbHRcIiwgdGhpcy5jYWxjdWxhdGVQYWdlU2l6ZXMuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImRhdGEtcHJvY2Vzc2VkXCIsIHRoaXMuaW5pdGlhbExvYWRDb21wbGV0ZS5iaW5kKHRoaXMpKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5pbml0aWFsaXplUHJvZ3Jlc3NpdmUodGhpcy50YWJsZS5vcHRpb25zLnByb2dyZXNzaXZlTG9hZCk7XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5wcm9ncmVzc2l2ZUxvYWQgPT09IFwic2Nyb2xsXCIpe1xuXHRcdFx0XHR0aGlzLnN1YnNjcmliZShcInNjcm9sbC12ZXJ0aWNhbFwiLCB0aGlzLnNjcm9sbFZlcnRpY2FsLmJpbmQodGhpcykpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0cm93QWRkaW5nUG9zaXRpb24ocm93LCB0b3Ape1xuXHRcdHZhciByb3dNYW5hZ2VyID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLFxuXHRcdGRpc3BsYXlSb3dzID0gcm93TWFuYWdlci5nZXREaXNwbGF5Um93cygpLFxuXHRcdGluZGV4O1xuXHRcdFxuXHRcdGlmKHRvcCl7XG5cdFx0XHRpZihkaXNwbGF5Um93cy5sZW5ndGgpe1xuXHRcdFx0XHRpbmRleCA9IGRpc3BsYXlSb3dzWzBdO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRpZihyb3dNYW5hZ2VyLmFjdGl2ZVJvd3MubGVuZ3RoKXtcblx0XHRcdFx0XHRpbmRleCA9IHJvd01hbmFnZXIuYWN0aXZlUm93c1tyb3dNYW5hZ2VyLmFjdGl2ZVJvd3MubGVuZ3RoLTFdO1xuXHRcdFx0XHRcdHRvcCA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYoZGlzcGxheVJvd3MubGVuZ3RoKXtcblx0XHRcdFx0aW5kZXggPSBkaXNwbGF5Um93c1tkaXNwbGF5Um93cy5sZW5ndGggLSAxXTtcblx0XHRcdFx0dG9wID0gZGlzcGxheVJvd3MubGVuZ3RoIDwgdGhpcy5zaXplID8gZmFsc2UgOiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4ge2luZGV4LCB0b3B9O1xuXHR9XG5cdFxuXHRjYWxjdWxhdGVQYWdlU2l6ZXMoKXtcblx0XHR2YXIgdGVzdEVsUm93LCB0ZXN0RWxDZWxsO1xuXHRcdFxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5wYWdpbmF0aW9uU2l6ZSl7XG5cdFx0XHR0aGlzLnNpemUgPSB0aGlzLnRhYmxlLm9wdGlvbnMucGFnaW5hdGlvblNpemU7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGVzdEVsUm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcdHRlc3RFbFJvdy5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXJvd1wiKTtcblx0XHRcdHRlc3RFbFJvdy5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcblx0XHRcdFxuXHRcdFx0dGVzdEVsQ2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XHR0ZXN0RWxDZWxsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItY2VsbFwiKTtcblx0XHRcdHRlc3RFbENlbGwuaW5uZXJIVE1MID0gXCJQYWdlIFJvdyBUZXN0XCI7XG5cdFx0XHRcblx0XHRcdHRlc3RFbFJvdy5hcHBlbmRDaGlsZCh0ZXN0RWxDZWxsKTtcblx0XHRcdFxuXHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldFRhYmxlRWxlbWVudCgpLmFwcGVuZENoaWxkKHRlc3RFbFJvdyk7XG5cdFx0XHRcblx0XHRcdHRoaXMuc2l6ZSA9IE1hdGguZmxvb3IodGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldEVsZW1lbnQoKS5jbGllbnRIZWlnaHQgLyB0ZXN0RWxSb3cub2Zmc2V0SGVpZ2h0KTtcblx0XHRcdFxuXHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldFRhYmxlRWxlbWVudCgpLnJlbW92ZUNoaWxkKHRlc3RFbFJvdyk7XG5cdFx0fVxuXG5cdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwicGFnZVNpemVDaGFuZ2VkXCIsIHRoaXMuc2l6ZSk7XG5cdFx0XG5cdFx0dGhpcy5nZW5lcmF0ZVBhZ2VTaXplU2VsZWN0TGlzdCgpO1xuXHR9XG5cdFxuXHRpbml0aWFsTG9hZENvbXBsZXRlKCl7XG5cdFx0dGhpcy5pbml0aWFsTG9hZCA9IGZhbHNlO1xuXHR9XG5cdFxuXHRyZW1vdGVQYWdlUGFyYW1zKGRhdGEsIGNvbmZpZywgc2lsZW50LCBwYXJhbXMpe1xuXHRcdGlmKCF0aGlzLmluaXRpYWxMb2FkKXtcblx0XHRcdGlmKCh0aGlzLnByb2dyZXNzaXZlTG9hZCAmJiAhc2lsZW50KSB8fCAoIXRoaXMucHJvZ3Jlc3NpdmVMb2FkICYmICF0aGlzLmRhdGFDaGFuZ2luZykpe1xuXHRcdFx0XHR0aGlzLnJlc2V0KHRydWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHQvL2NvbmZpZ3VyZSByZXF1ZXN0IHBhcmFtc1xuXHRcdHBhcmFtcy5wYWdlID0gdGhpcy5wYWdlO1xuXHRcdFxuXHRcdC8vc2V0IHBhZ2Ugc2l6ZSBpZiBkZWZpbmVkXG5cdFx0aWYodGhpcy5zaXplKXtcblx0XHRcdHBhcmFtcy5zaXplID0gdGhpcy5zaXplO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gcGFyYW1zO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8gVGFibGUgRnVuY3Rpb25zIC8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0dXNlclNldFBhZ2VUb1Jvdyhyb3cpe1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5wYWdpbmF0aW9uKXtcblx0XHRcdHJvdyA9IHRoaXMucm93TWFuYWdlci5maW5kUm93KHJvdyk7XG5cdFx0XHRcblx0XHRcdGlmKHJvdyl7XG5cdFx0XHRcdHJldHVybiB0aGlzLnNldFBhZ2VUb1Jvdyhyb3cpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoKTtcblx0fVxuXHRcblx0dXNlclNldFBhZ2VTaXplKHNpemUpe1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5wYWdpbmF0aW9uKXtcblx0XHRcdHRoaXMuc2V0UGFnZVNpemUoc2l6ZSk7XG5cdFx0XHRyZXR1cm4gdGhpcy5zZXRQYWdlKDEpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vIEludGVybmFsIExvZ2ljIC8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdHNjcm9sbFZlcnRpY2FsKHRvcCwgZGlyKXtcblx0XHR2YXIgZWxlbWVudCwgZGlmZiwgbWFyZ2luO1xuXHRcdGlmKCFkaXIgJiYgIXRoaXMudGFibGUuZGF0YUxvYWRlci5sb2FkaW5nKXtcblx0XHRcdGVsZW1lbnQgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0RWxlbWVudCgpO1xuXHRcdFx0ZGlmZiA9IGVsZW1lbnQuc2Nyb2xsSGVpZ2h0IC0gZWxlbWVudC5jbGllbnRIZWlnaHQgLSB0b3A7XG5cdFx0XHRtYXJnaW4gPSB0aGlzLnRhYmxlLm9wdGlvbnMucHJvZ3Jlc3NpdmVMb2FkU2Nyb2xsTWFyZ2luIHx8IChlbGVtZW50LmNsaWVudEhlaWdodCAqIDIpO1xuXHRcdFx0XG5cdFx0XHRpZihkaWZmIDwgbWFyZ2luKXtcblx0XHRcdFx0dGhpcy5uZXh0UGFnZSgpXG5cdFx0XHRcdFx0LmNhdGNoKCgpID0+IHt9KTsgLy9jb25zdW1lIHRoZSBleGNlcHRpb24gdGhyb3duIHdoZW4gb24gdGhlIGxhc3QgcGFnZVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0cmVzdE9uUmVuZGVyQmVmb3JlKHJvd3MsIHJlbmRlckluUG9zaXRpb24pe1xuXHRcdGlmKCFyZW5kZXJJblBvc2l0aW9uKXtcblx0XHRcdGlmKHRoaXMubW9kZSA9PT0gXCJsb2NhbFwiKXtcblx0XHRcdFx0dGhpcy5yZXNldCgpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gcm93cztcblx0fVxuXHRcblx0cm93c1VwZGF0ZWQoKXtcblx0XHR0aGlzLnJlZnJlc2hEYXRhKHRydWUsIFwiYWxsXCIpO1xuXHR9XG5cdFxuXHRjcmVhdGVFbGVtZW50cygpe1xuXHRcdHZhciBidXR0b247XG5cdFx0XG5cdFx0dGhpcy5lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG5cdFx0dGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItcGFnaW5hdG9yXCIpO1xuXHRcdFxuXHRcdHRoaXMucGFnZXNFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG5cdFx0dGhpcy5wYWdlc0VsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1wYWdlc1wiKTtcblx0XHRcblx0XHRidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuXHRcdGJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXBhZ2VcIik7XG5cdFx0YnV0dG9uLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJidXR0b25cIik7XG5cdFx0YnV0dG9uLnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJidXR0b25cIik7XG5cdFx0YnV0dG9uLnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgXCJcIik7XG5cdFx0YnV0dG9uLnNldEF0dHJpYnV0ZShcInRpdGxlXCIsIFwiXCIpO1xuXHRcdFxuXHRcdHRoaXMuZmlyc3RCdXQgPSBidXR0b24uY2xvbmVOb2RlKHRydWUpO1xuXHRcdHRoaXMuZmlyc3RCdXQuc2V0QXR0cmlidXRlKFwiZGF0YS1wYWdlXCIsIFwiZmlyc3RcIik7XG5cdFx0XG5cdFx0dGhpcy5wcmV2QnV0ID0gYnV0dG9uLmNsb25lTm9kZSh0cnVlKTtcblx0XHR0aGlzLnByZXZCdXQuc2V0QXR0cmlidXRlKFwiZGF0YS1wYWdlXCIsIFwicHJldlwiKTtcblx0XHRcblx0XHR0aGlzLm5leHRCdXQgPSBidXR0b24uY2xvbmVOb2RlKHRydWUpO1xuXHRcdHRoaXMubmV4dEJ1dC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXBhZ2VcIiwgXCJuZXh0XCIpO1xuXHRcdFxuXHRcdHRoaXMubGFzdEJ1dCA9IGJ1dHRvbi5jbG9uZU5vZGUodHJ1ZSk7XG5cdFx0dGhpcy5sYXN0QnV0LnNldEF0dHJpYnV0ZShcImRhdGEtcGFnZVwiLCBcImxhc3RcIik7XG5cdFx0XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnBhZ2luYXRpb25TaXplU2VsZWN0b3Ipe1xuXHRcdFx0dGhpcy5wYWdlU2l6ZVNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIik7XG5cdFx0XHR0aGlzLnBhZ2VTaXplU2VsZWN0LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItcGFnZS1zaXplXCIpO1xuXHRcdH1cblx0fVxuXHRcblx0Z2VuZXJhdGVQYWdlU2l6ZVNlbGVjdExpc3QoKXtcblx0XHR2YXIgcGFnZVNpemVzID0gW107XG5cdFx0XG5cdFx0aWYodGhpcy5wYWdlU2l6ZVNlbGVjdCl7XG5cdFx0XHRcblx0XHRcdGlmKEFycmF5LmlzQXJyYXkodGhpcy50YWJsZS5vcHRpb25zLnBhZ2luYXRpb25TaXplU2VsZWN0b3IpKXtcblx0XHRcdFx0cGFnZVNpemVzID0gdGhpcy50YWJsZS5vcHRpb25zLnBhZ2luYXRpb25TaXplU2VsZWN0b3I7XG5cdFx0XHRcdHRoaXMucGFnZVNpemVzID0gcGFnZVNpemVzO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYodGhpcy5wYWdlU2l6ZXMuaW5kZXhPZih0aGlzLnNpemUpID09IC0xKXtcblx0XHRcdFx0XHRwYWdlU2l6ZXMudW5zaGlmdCh0aGlzLnNpemUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih0aGlzLnBhZ2VTaXplcy5pbmRleE9mKHRoaXMuc2l6ZSkgPT0gLTEpe1xuXHRcdFx0XHRcdHBhZ2VTaXplcyA9IFtdO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGZvciAobGV0IGkgPSAxOyBpIDwgNTsgaSsrKXtcblx0XHRcdFx0XHRcdHBhZ2VTaXplcy5wdXNoKHRoaXMuc2l6ZSAqIGkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHR0aGlzLnBhZ2VTaXplcyA9IHBhZ2VTaXplcztcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHBhZ2VTaXplcyA9IHRoaXMucGFnZVNpemVzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHdoaWxlKHRoaXMucGFnZVNpemVTZWxlY3QuZmlyc3RDaGlsZCkgdGhpcy5wYWdlU2l6ZVNlbGVjdC5yZW1vdmVDaGlsZCh0aGlzLnBhZ2VTaXplU2VsZWN0LmZpcnN0Q2hpbGQpO1xuXHRcdFx0XG5cdFx0XHRwYWdlU2l6ZXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuXHRcdFx0XHR2YXIgaXRlbUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcblx0XHRcdFx0aXRlbUVsLnZhbHVlID0gaXRlbTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKGl0ZW0gPT09IHRydWUpe1xuXHRcdFx0XHRcdHRoaXMubGFuZ0JpbmQoXCJwYWdpbmF0aW9ufGFsbFwiLCBmdW5jdGlvbih2YWx1ZSl7XG5cdFx0XHRcdFx0XHRpdGVtRWwuaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRpdGVtRWwuaW5uZXJIVE1MID0gaXRlbTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLnBhZ2VTaXplU2VsZWN0LmFwcGVuZENoaWxkKGl0ZW1FbCk7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0dGhpcy5wYWdlU2l6ZVNlbGVjdC52YWx1ZSA9IHRoaXMuc2l6ZTtcblx0XHR9XG5cdH1cblx0XG5cdGluaXRpYWxpemVQYWdlQ291bnRlcigpe1xuXHRcdHZhciBjb3VudGVyID0gdGhpcy50YWJsZS5vcHRpb25zLnBhZ2luYXRpb25Db3VudGVyLFxuXHRcdHBhZ2VDb3VudGVyID0gbnVsbDtcblx0XHRcblx0XHRpZihjb3VudGVyKXtcblx0XHRcdGlmKHR5cGVvZiBjb3VudGVyID09PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0XHRwYWdlQ291bnRlciA9IGNvdW50ZXI7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHBhZ2VDb3VudGVyID0gUGFnZS5wYWdlQ291bnRlcnNbY291bnRlcl07XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKHBhZ2VDb3VudGVyKXtcblx0XHRcdFx0dGhpcy5wYWdlQ291bnRlciA9IHBhZ2VDb3VudGVyO1xuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5wYWdlQ291bnRlckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcblx0XHRcdFx0dGhpcy5wYWdlQ291bnRlckVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1wYWdlLWNvdW50ZXJcIik7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIlBhZ2luYXRpb24gRXJyb3IgLSBObyBzdWNoIHBhZ2UgY291bnRlciBmb3VuZDogXCIsIGNvdW50ZXIpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0Ly9zZXR1cCBwYWdpbmF0aW9uXG5cdGluaXRpYWxpemVQYWdpbmF0b3IoaGlkZGVuKXtcblx0XHR2YXIgcGFnZVNlbGVjdExhYmVsLCBwYWdpbmF0aW9uQ291bnRlckhvbGRlcjtcblx0XHRcblx0XHRpZighaGlkZGVuKXtcblx0XHRcdC8vYnVpbGQgcGFnaW5hdGlvbiBlbGVtZW50XG5cdFx0XHRcblx0XHRcdC8vYmluZCBsb2NhbGl6YXRpb25zXG5cdFx0XHR0aGlzLmxhbmdCaW5kKFwicGFnaW5hdGlvbnxmaXJzdFwiLCAodmFsdWUpID0+IHtcblx0XHRcdFx0dGhpcy5maXJzdEJ1dC5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmxhbmdCaW5kKFwicGFnaW5hdGlvbnxmaXJzdF90aXRsZVwiLCAodmFsdWUpID0+IHtcblx0XHRcdFx0dGhpcy5maXJzdEJ1dC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIHZhbHVlKTtcblx0XHRcdFx0dGhpcy5maXJzdEJ1dC5zZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiLCB2YWx1ZSk7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0dGhpcy5sYW5nQmluZChcInBhZ2luYXRpb258cHJldlwiLCAodmFsdWUpID0+IHtcblx0XHRcdFx0dGhpcy5wcmV2QnV0LmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdHRoaXMubGFuZ0JpbmQoXCJwYWdpbmF0aW9ufHByZXZfdGl0bGVcIiwgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdHRoaXMucHJldkJ1dC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIHZhbHVlKTtcblx0XHRcdFx0dGhpcy5wcmV2QnV0LnNldEF0dHJpYnV0ZShcInRpdGxlXCIsIHZhbHVlKTtcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmxhbmdCaW5kKFwicGFnaW5hdGlvbnxuZXh0XCIsICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHR0aGlzLm5leHRCdXQuaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0dGhpcy5sYW5nQmluZChcInBhZ2luYXRpb258bmV4dF90aXRsZVwiLCAodmFsdWUpID0+IHtcblx0XHRcdFx0dGhpcy5uZXh0QnV0LnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgdmFsdWUpO1xuXHRcdFx0XHR0aGlzLm5leHRCdXQuc2V0QXR0cmlidXRlKFwidGl0bGVcIiwgdmFsdWUpO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdHRoaXMubGFuZ0JpbmQoXCJwYWdpbmF0aW9ufGxhc3RcIiwgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdHRoaXMubGFzdEJ1dC5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmxhbmdCaW5kKFwicGFnaW5hdGlvbnxsYXN0X3RpdGxlXCIsICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHR0aGlzLmxhc3RCdXQuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCB2YWx1ZSk7XG5cdFx0XHRcdHRoaXMubGFzdEJ1dC5zZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiLCB2YWx1ZSk7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0Ly9jbGljayBiaW5kaW5nc1xuXHRcdFx0dGhpcy5maXJzdEJ1dC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuXHRcdFx0XHR0aGlzLnNldFBhZ2UoMSk7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0dGhpcy5wcmV2QnV0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG5cdFx0XHRcdHRoaXMucHJldmlvdXNQYWdlKCk7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0dGhpcy5uZXh0QnV0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG5cdFx0XHRcdHRoaXMubmV4dFBhZ2UoKTtcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmxhc3RCdXQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcblx0XHRcdFx0dGhpcy5zZXRQYWdlKHRoaXMubWF4KTtcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucGFnaW5hdGlvbkVsZW1lbnQpe1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQgPSB0aGlzLnRhYmxlLm9wdGlvbnMucGFnaW5hdGlvbkVsZW1lbnQ7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMucGFnZVNpemVTZWxlY3Qpe1xuXHRcdFx0XHRwYWdlU2VsZWN0TGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLmxhbmdCaW5kKFwicGFnaW5hdGlvbnxwYWdlX3NpemVcIiwgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5wYWdlU2l6ZVNlbGVjdC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIHZhbHVlKTtcblx0XHRcdFx0XHR0aGlzLnBhZ2VTaXplU2VsZWN0LnNldEF0dHJpYnV0ZShcInRpdGxlXCIsIHZhbHVlKTtcblx0XHRcdFx0XHRwYWdlU2VsZWN0TGFiZWwuaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHBhZ2VTZWxlY3RMYWJlbCk7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLnBhZ2VTaXplU2VsZWN0KTtcblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMucGFnZVNpemVTZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCAoZSkgPT4ge1xuXHRcdFx0XHRcdHRoaXMuc2V0UGFnZVNpemUodGhpcy5wYWdlU2l6ZVNlbGVjdC52YWx1ZSA9PSBcInRydWVcIiA/IHRydWUgOiB0aGlzLnBhZ2VTaXplU2VsZWN0LnZhbHVlKTtcblx0XHRcdFx0XHR0aGlzLnNldFBhZ2UoMSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHQvL2FwcGVuZCB0byBET01cblx0XHRcdHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmZpcnN0QnV0KTtcblx0XHRcdHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLnByZXZCdXQpO1xuXHRcdFx0dGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMucGFnZXNFbGVtZW50KTtcblx0XHRcdHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLm5leHRCdXQpO1xuXHRcdFx0dGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMubGFzdEJ1dCk7XG5cdFx0XHRcblx0XHRcdGlmKCF0aGlzLnRhYmxlLm9wdGlvbnMucGFnaW5hdGlvbkVsZW1lbnQpe1xuXHRcdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucGFnaW5hdGlvbkNvdW50ZXIpe1xuXG5cdFx0XHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnBhZ2luYXRpb25Db3VudGVyRWxlbWVudCl7XG5cdFx0XHRcdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucGFnaW5hdGlvbkNvdW50ZXJFbGVtZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpe1xuXHRcdFx0XHRcdFx0XHR0aGlzLnRhYmxlLm9wdGlvbnMucGFnaW5hdGlvbkNvdW50ZXJFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMucGFnZUNvdW50ZXJFbGVtZW50KTtcblx0XHRcdFx0XHRcdH1lbHNlIGlmKHR5cGVvZiB0aGlzLnRhYmxlLm9wdGlvbnMucGFnaW5hdGlvbkNvdW50ZXJFbGVtZW50ID09PSBcInN0cmluZ1wiKXtcblx0XHRcdFx0XHRcdFx0cGFnaW5hdGlvbkNvdW50ZXJIb2xkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMudGFibGUub3B0aW9ucy5wYWdpbmF0aW9uQ291bnRlckVsZW1lbnQpO1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0aWYocGFnaW5hdGlvbkNvdW50ZXJIb2xkZXIpe1xuXHRcdFx0XHRcdFx0XHRcdHBhZ2luYXRpb25Db3VudGVySG9sZGVyLmFwcGVuZENoaWxkKHRoaXMucGFnZUNvdW50ZXJFbGVtZW50KTtcblx0XHRcdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUud2FybihcIlBhZ2luYXRpb24gRXJyb3IgLSBVbmFibGUgdG8gZmluZCBlbGVtZW50IG1hdGNoaW5nIHBhZ2luYXRpb25Db3VudGVyRWxlbWVudCBzZWxlY3RvcjpcIiwgdGhpcy50YWJsZS5vcHRpb25zLnBhZ2luYXRpb25Db3VudGVyRWxlbWVudCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHR0aGlzLmZvb3RlckFwcGVuZCh0aGlzLnBhZ2VDb3VudGVyRWxlbWVudCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLmZvb3RlckFwcGVuZCh0aGlzLmVsZW1lbnQpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLnBhZ2UgPSB0aGlzLnRhYmxlLm9wdGlvbnMucGFnaW5hdGlvbkluaXRpYWxQYWdlO1xuXHRcdFx0dGhpcy5jb3VudCA9IHRoaXMudGFibGUub3B0aW9ucy5wYWdpbmF0aW9uQnV0dG9uQ291bnQ7XG5cdFx0fVxuXHRcdFxuXHRcdC8vc2V0IGRlZmF1bHQgdmFsdWVzXG5cdFx0dGhpcy5tb2RlID0gdGhpcy50YWJsZS5vcHRpb25zLnBhZ2luYXRpb25Nb2RlO1xuXHR9XG5cdFxuXHRpbml0aWFsaXplUHJvZ3Jlc3NpdmUobW9kZSl7XG5cdFx0dGhpcy5pbml0aWFsaXplUGFnaW5hdG9yKHRydWUpO1xuXHRcdHRoaXMubW9kZSA9IFwicHJvZ3Jlc3NpdmVfXCIgKyBtb2RlO1xuXHRcdHRoaXMucHJvZ3Jlc3NpdmVMb2FkID0gdHJ1ZTtcblx0fVxuXHRcblx0dHJhY2tDaGFuZ2VzKCl7XG5cdFx0dGhpcy5kaXNwYXRjaChcInBhZ2UtY2hhbmdlZFwiKTtcblx0fVxuXHRcblx0Ly9jYWxjdWxhdGUgbWF4aW11bSBwYWdlIGZyb20gbnVtYmVyIG9mIHJvd3Ncblx0c2V0TWF4Um93cyhyb3dDb3VudCl7XG5cdFx0aWYoIXJvd0NvdW50KXtcblx0XHRcdHRoaXMubWF4ID0gMTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLm1heCA9IHRoaXMuc2l6ZSA9PT0gdHJ1ZSA/ICAxIDogTWF0aC5jZWlsKHJvd0NvdW50L3RoaXMuc2l6ZSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRoaXMucGFnZSA+IHRoaXMubWF4KXtcblx0XHRcdHRoaXMucGFnZSA9IHRoaXMubWF4O1xuXHRcdH1cblx0fVxuXHRcblx0Ly9yZXNldCB0byBmaXJzdCBwYWdlIHdpdGhvdXQgdHJpZ2dlcmluZyBhY3Rpb25cblx0cmVzZXQoZm9yY2Upe1xuXHRcdGlmKCF0aGlzLmluaXRpYWxMb2FkKXtcblx0XHRcdGlmKHRoaXMubW9kZSA9PSBcImxvY2FsXCIgfHwgZm9yY2Upe1xuXHRcdFx0XHR0aGlzLnBhZ2UgPSAxO1xuXHRcdFx0XHR0aGlzLnRyYWNrQ2hhbmdlcygpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0Ly9zZXQgdGhlIG1heGltdW0gcGFnZVxuXHRzZXRNYXhQYWdlKG1heCl7XG5cdFx0XG5cdFx0bWF4ID0gcGFyc2VJbnQobWF4KTtcblx0XHRcblx0XHR0aGlzLm1heCA9IG1heCB8fCAxO1xuXHRcdFxuXHRcdGlmKHRoaXMucGFnZSA+IHRoaXMubWF4KXtcblx0XHRcdHRoaXMucGFnZSA9IHRoaXMubWF4O1xuXHRcdFx0dGhpcy50cmlnZ2VyKCk7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL3NldCBjdXJyZW50IHBhZ2UgbnVtYmVyXG5cdHNldFBhZ2UocGFnZSl7XG5cdFx0c3dpdGNoKHBhZ2Upe1xuXHRcdFx0Y2FzZSBcImZpcnN0XCI6XG5cdFx0XHRcdHJldHVybiB0aGlzLnNldFBhZ2UoMSk7XG5cdFxuXHRcdFx0Y2FzZSBcInByZXZcIjpcblx0XHRcdFx0cmV0dXJuIHRoaXMucHJldmlvdXNQYWdlKCk7XG5cdFx0XHRcblx0XHRcdGNhc2UgXCJuZXh0XCI6XG5cdFx0XHRcdHJldHVybiB0aGlzLm5leHRQYWdlKCk7XG5cdFx0XHRcblx0XHRcdGNhc2UgXCJsYXN0XCI6XG5cdFx0XHRcdHJldHVybiB0aGlzLnNldFBhZ2UodGhpcy5tYXgpO1xuXHRcdH1cblx0XHRcblx0XHRwYWdlID0gcGFyc2VJbnQocGFnZSk7XG5cdFx0XG5cdFx0aWYoKHBhZ2UgPiAwICYmIHBhZ2UgPD0gdGhpcy5tYXgpIHx8IHRoaXMubW9kZSAhPT0gXCJsb2NhbFwiKXtcblx0XHRcdHRoaXMucGFnZSA9IHBhZ2U7XG5cdFx0XHRcblx0XHRcdHRoaXMudHJhY2tDaGFuZ2VzKCk7XG5cdFx0XHRcblx0XHRcdHJldHVybiB0aGlzLnRyaWdnZXIoKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJQYWdpbmF0aW9uIEVycm9yIC0gUmVxdWVzdGVkIHBhZ2UgaXMgb3V0IG9mIHJhbmdlIG9mIDEgLSBcIiArIHRoaXMubWF4ICsgXCI6XCIsIHBhZ2UpO1xuXHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRzZXRQYWdlVG9Sb3cocm93KXtcblx0XHR2YXIgcm93cyA9IHRoaXMuZGlzcGxheVJvd3MoLTEpO1xuXHRcdHZhciBpbmRleCA9IHJvd3MuaW5kZXhPZihyb3cpO1xuXHRcblx0XHRpZihpbmRleCA+IC0xKXtcblx0XHRcdHZhciBwYWdlID0gdGhpcy5zaXplID09PSB0cnVlID8gMSA6IE1hdGguY2VpbCgoaW5kZXggKyAxKSAvIHRoaXMuc2l6ZSk7XG5cdFx0XHRcblx0XHRcdHJldHVybiB0aGlzLnNldFBhZ2UocGFnZSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiUGFnaW5hdGlvbiBFcnJvciAtIFJlcXVlc3RlZCByb3cgaXMgbm90IHZpc2libGVcIik7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoKTtcblx0XHR9XG5cdH1cblx0XG5cdHNldFBhZ2VTaXplKHNpemUpe1xuXHRcdGlmKHNpemUgIT09IHRydWUpe1xuXHRcdFx0c2l6ZSA9IHBhcnNlSW50KHNpemUpO1xuXHRcdH1cblxuXHRcdGlmKHNpemUgPiAwKXtcblx0XHRcdHRoaXMuc2l6ZSA9IHNpemU7XG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJwYWdlU2l6ZUNoYW5nZWRcIiwgc2l6ZSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRoaXMucGFnZVNpemVTZWxlY3Qpe1xuXHRcdFx0Ly8gdGhpcy5wYWdlU2l6ZVNlbGVjdC52YWx1ZSA9IHNpemU7XG5cdFx0XHR0aGlzLmdlbmVyYXRlUGFnZVNpemVTZWxlY3RMaXN0KCk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMudHJhY2tDaGFuZ2VzKCk7XG5cdH1cblx0XG5cdF9zZXRQYWdlQ291bnRlcih0b3RhbFJvd3MsIHNpemUsIGN1cnJlbnRSb3cpe1xuXHRcdHZhciBjb250ZW50O1xuXHRcdFxuXHRcdGlmKHRoaXMucGFnZUNvdW50ZXIpe1xuXG5cdFx0XHRpZih0aGlzLm1vZGUgPT09IFwicmVtb3RlXCIpe1xuXHRcdFx0XHRzaXplID0gdGhpcy5zaXplO1xuXHRcdFx0XHRjdXJyZW50Um93ID0gKCh0aGlzLnBhZ2UgLSAxKSAqIHRoaXMuc2l6ZSkgKyAxO1xuXHRcdFx0XHR0b3RhbFJvd3MgPSB0aGlzLnJlbW90ZVJvd0NvdW50RXN0aW1hdGU7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnRlbnQgPSB0aGlzLnBhZ2VDb3VudGVyLmNhbGwodGhpcywgc2l6ZSwgY3VycmVudFJvdywgdGhpcy5wYWdlLCB0b3RhbFJvd3MsIHRoaXMubWF4KTtcblx0XHRcdFxuXHRcdFx0c3dpdGNoKHR5cGVvZiBjb250ZW50KXtcblx0XHRcdFx0Y2FzZSBcIm9iamVjdFwiOlxuXHRcdFx0XHRcdGlmKGNvbnRlbnQgaW5zdGFuY2VvZiBOb2RlKXtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdC8vY2xlYXIgcHJldmlvdXMgY2VsbCBjb250ZW50c1xuXHRcdFx0XHRcdFx0d2hpbGUodGhpcy5wYWdlQ291bnRlckVsZW1lbnQuZmlyc3RDaGlsZCkgdGhpcy5wYWdlQ291bnRlckVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5wYWdlQ291bnRlckVsZW1lbnQuZmlyc3RDaGlsZCk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHR0aGlzLnBhZ2VDb3VudGVyRWxlbWVudC5hcHBlbmRDaGlsZChjb250ZW50KTtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHR0aGlzLnBhZ2VDb3VudGVyRWxlbWVudC5pbm5lckhUTUwgPSBcIlwiO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0aWYoY29udGVudCAhPSBudWxsKXtcblx0XHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiUGFnZSBDb3VudGVyIEVycm9yIC0gUGFnZSBDb3VudGVyIGhhcyByZXR1cm5lZCBhIHR5cGUgb2Ygb2JqZWN0LCB0aGUgb25seSB2YWxpZCBwYWdlIGNvdW50ZXIgb2JqZWN0IHJldHVybiBpcyBhbiBpbnN0YW5jZSBvZiBOb2RlLCB0aGUgcGFnZSBjb3VudGVyIHJldHVybmVkOlwiLCBjb250ZW50KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJ1bmRlZmluZWRcIjpcblx0XHRcdFx0XHR0aGlzLnBhZ2VDb3VudGVyRWxlbWVudC5pbm5lckhUTUwgPSBcIlwiO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHRoaXMucGFnZUNvdW50ZXJFbGVtZW50LmlubmVySFRNTCA9IGNvbnRlbnQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHQvL3NldHVwIHRoZSBwYWdpbmF0aW9uIGJ1dHRvbnNcblx0X3NldFBhZ2VCdXR0b25zKCl7XG5cdFx0bGV0IGxlZnRTaXplID0gTWF0aC5mbG9vcigodGhpcy5jb3VudC0xKSAvIDIpO1xuXHRcdGxldCByaWdodFNpemUgPSBNYXRoLmNlaWwoKHRoaXMuY291bnQtMSkgLyAyKTtcblx0XHRsZXQgbWluID0gdGhpcy5tYXggLSB0aGlzLnBhZ2UgKyBsZWZ0U2l6ZSArIDEgPCB0aGlzLmNvdW50ID8gdGhpcy5tYXgtdGhpcy5jb3VudCsxOiBNYXRoLm1heCh0aGlzLnBhZ2UtbGVmdFNpemUsMSk7XG5cdFx0bGV0IG1heCA9IHRoaXMucGFnZSA8PSByaWdodFNpemU/IE1hdGgubWluKHRoaXMuY291bnQsIHRoaXMubWF4KSA6TWF0aC5taW4odGhpcy5wYWdlK3JpZ2h0U2l6ZSwgdGhpcy5tYXgpO1xuXHRcdFxuXHRcdHdoaWxlKHRoaXMucGFnZXNFbGVtZW50LmZpcnN0Q2hpbGQpIHRoaXMucGFnZXNFbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMucGFnZXNFbGVtZW50LmZpcnN0Q2hpbGQpO1xuXHRcdFxuXHRcdGlmKHRoaXMucGFnZSA9PSAxKXtcblx0XHRcdHRoaXMuZmlyc3RCdXQuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdFx0dGhpcy5wcmV2QnV0LmRpc2FibGVkID0gdHJ1ZTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLmZpcnN0QnV0LmRpc2FibGVkID0gZmFsc2U7XG5cdFx0XHR0aGlzLnByZXZCdXQuZGlzYWJsZWQgPSBmYWxzZTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodGhpcy5wYWdlID09IHRoaXMubWF4KXtcblx0XHRcdHRoaXMubGFzdEJ1dC5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHR0aGlzLm5leHRCdXQuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMubGFzdEJ1dC5kaXNhYmxlZCA9IGZhbHNlO1xuXHRcdFx0dGhpcy5uZXh0QnV0LmRpc2FibGVkID0gZmFsc2U7XG5cdFx0fVxuXHRcdFxuXHRcdGZvcihsZXQgaSA9IG1pbjsgaSA8PSBtYXg7IGkrKyl7XG5cdFx0XHRpZihpPjAgJiYgaSA8PSB0aGlzLm1heCl7XG5cdFx0XHRcdHRoaXMucGFnZXNFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuX2dlbmVyYXRlUGFnZUJ1dHRvbihpKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuZm9vdGVyUmVkcmF3KCk7XG5cdH1cblx0XG5cdF9nZW5lcmF0ZVBhZ2VCdXR0b24ocGFnZSl7XG5cdFx0dmFyIGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG5cdFx0XG5cdFx0YnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItcGFnZVwiKTtcblx0XHRpZihwYWdlID09IHRoaXMucGFnZSl7XG5cdFx0XHRidXR0b24uY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcblx0XHR9XG5cdFx0XG5cdFx0YnV0dG9uLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJidXR0b25cIik7XG5cdFx0YnV0dG9uLnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJidXR0b25cIik7XG5cdFx0XG5cdFx0dGhpcy5sYW5nQmluZChcInBhZ2luYXRpb258cGFnZV90aXRsZVwiLCAodmFsdWUpID0+IHtcblx0XHRcdGJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIHZhbHVlICsgXCIgXCIgKyBwYWdlKTtcblx0XHRcdGJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiLCB2YWx1ZSArIFwiIFwiICsgcGFnZSk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0YnV0dG9uLnNldEF0dHJpYnV0ZShcImRhdGEtcGFnZVwiLCBwYWdlKTtcblx0XHRidXR0b24udGV4dENvbnRlbnQgPSBwYWdlO1xuXHRcdFxuXHRcdGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcblx0XHRcdHRoaXMuc2V0UGFnZShwYWdlKTtcblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gYnV0dG9uO1xuXHR9XG5cdFxuXHQvL3ByZXZpb3VzIHBhZ2Vcblx0cHJldmlvdXNQYWdlKCl7XG5cdFx0aWYodGhpcy5wYWdlID4gMSl7XG5cdFx0XHR0aGlzLnBhZ2UtLTtcblx0XHRcdFxuXHRcdFx0dGhpcy50cmFja0NoYW5nZXMoKTtcblx0XHRcdFxuXHRcdFx0cmV0dXJuIHRoaXMudHJpZ2dlcigpO1xuXHRcdFx0XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiUGFnaW5hdGlvbiBFcnJvciAtIFByZXZpb3VzIHBhZ2Ugd291bGQgYmUgbGVzcyB0aGFuIHBhZ2UgMTpcIiwgMCk7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoKTtcblx0XHR9XG5cdH1cblx0XG5cdC8vbmV4dCBwYWdlXG5cdG5leHRQYWdlKCl7XG5cdFx0aWYodGhpcy5wYWdlIDwgdGhpcy5tYXgpe1xuXHRcdFx0dGhpcy5wYWdlKys7XG5cdFx0XHRcblx0XHRcdHRoaXMudHJhY2tDaGFuZ2VzKCk7XG5cdFx0XHRcblx0XHRcdHJldHVybiB0aGlzLnRyaWdnZXIoKTtcblx0XHRcdFxuXHRcdH1lbHNlIHtcblx0XHRcdGlmKCF0aGlzLnByb2dyZXNzaXZlTG9hZCl7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIlBhZ2luYXRpb24gRXJyb3IgLSBOZXh0IHBhZ2Ugd291bGQgYmUgZ3JlYXRlciB0aGFuIG1heGltdW0gcGFnZSBvZiBcIiArIHRoaXMubWF4ICsgXCI6XCIsIHRoaXMubWF4ICsgMSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoKTtcblx0XHR9XG5cdH1cblx0XG5cdC8vcmV0dXJuIGN1cnJlbnQgcGFnZSBudW1iZXJcblx0Z2V0UGFnZSgpe1xuXHRcdHJldHVybiB0aGlzLnBhZ2U7XG5cdH1cblx0XG5cdC8vcmV0dXJuIG1heCBwYWdlIG51bWJlclxuXHRnZXRQYWdlTWF4KCl7XG5cdFx0cmV0dXJuIHRoaXMubWF4O1xuXHR9XG5cdFxuXHRnZXRQYWdlU2l6ZShzaXplKXtcblx0XHRyZXR1cm4gdGhpcy5zaXplO1xuXHR9XG5cdFxuXHRnZXRNb2RlKCl7XG5cdFx0cmV0dXJuIHRoaXMubW9kZTtcblx0fVxuXHRcblx0Ly9yZXR1cm4gYXBwcm9wcmlhdGUgcm93cyBmb3IgY3VycmVudCBwYWdlXG5cdGdldFJvd3MoZGF0YSl7XG5cdFx0dmFyIGFjdHVhbFJvd1BhZ2VTaXplID0gMCxcblx0XHRvdXRwdXQsIHN0YXJ0LCBlbmQsIGFjdHVhbFN0YXJ0Um93O1xuXG5cdFx0dmFyIGFjdHVhbFJvd3MgPSBkYXRhLmZpbHRlcigocm93KSA9PiB7XG5cdFx0XHRyZXR1cm4gcm93LnR5cGUgPT09IFwicm93XCI7XG5cdFx0fSk7XG5cdFx0XG5cdFx0aWYodGhpcy5tb2RlID09IFwibG9jYWxcIil7XG5cdFx0XHRvdXRwdXQgPSBbXTtcblx0XHRcdFxuXHRcdFx0dGhpcy5zZXRNYXhSb3dzKGRhdGEubGVuZ3RoKTtcblx0XHRcdFxuXHRcdFx0aWYodGhpcy5zaXplID09PSB0cnVlKXtcblx0XHRcdFx0c3RhcnQgPSAwO1xuXHRcdFx0XHRlbmQgPSBkYXRhLmxlbmd0aDtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0c3RhcnQgPSB0aGlzLnNpemUgKiAodGhpcy5wYWdlIC0gMSk7XG5cdFx0XHRcdGVuZCA9IHN0YXJ0ICsgcGFyc2VJbnQodGhpcy5zaXplKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5fc2V0UGFnZUJ1dHRvbnMoKTtcblx0XHRcdFxuXHRcdFx0Zm9yKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKyl7XG5cdFx0XHRcdGxldCByb3cgPSBkYXRhW2ldO1xuXG5cdFx0XHRcdGlmKHJvdyl7XG5cdFx0XHRcdFx0b3V0cHV0LnB1c2gocm93KTtcblxuXHRcdFx0XHRcdGlmKHJvdy50eXBlID09PSBcInJvd1wiKXtcblx0XHRcdFx0XHRcdGlmKCFhY3R1YWxTdGFydFJvdyl7XG5cdFx0XHRcdFx0XHRcdGFjdHVhbFN0YXJ0Um93ID0gcm93O1xuXHRcdFx0XHRcdFx0fVx0XG5cblx0XHRcdFx0XHRcdGFjdHVhbFJvd1BhZ2VTaXplKys7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHRoaXMuX3NldFBhZ2VDb3VudGVyKGFjdHVhbFJvd3MubGVuZ3RoLCBhY3R1YWxSb3dQYWdlU2l6ZSwgYWN0dWFsU3RhcnRSb3cgPyAoYWN0dWFsUm93cy5pbmRleE9mKGFjdHVhbFN0YXJ0Um93KSArIDEpIDogMCk7XG5cdFx0XHRcblx0XHRcdHJldHVybiBvdXRwdXQ7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5fc2V0UGFnZUJ1dHRvbnMoKTtcblx0XHRcdHRoaXMuX3NldFBhZ2VDb3VudGVyKGFjdHVhbFJvd3MubGVuZ3RoKTtcblx0XHRcdFxuXHRcdFx0cmV0dXJuIGRhdGEuc2xpY2UoMCk7XG5cdFx0fVxuXHR9XG5cdFxuXHR0cmlnZ2VyKCl7XG5cdFx0dmFyIGxlZnQ7XG5cdFx0XG5cdFx0c3dpdGNoKHRoaXMubW9kZSl7XG5cdFx0XHRjYXNlIFwibG9jYWxcIjpcblx0XHRcdFx0bGVmdCA9IHRoaXMudGFibGUucm93TWFuYWdlci5zY3JvbGxMZWZ0O1xuXHRcdFx0XG5cdFx0XHRcdHRoaXMucmVmcmVzaERhdGEoKTtcblx0XHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnNjcm9sbEhvcml6b250YWwobGVmdCk7XG5cdFx0XHRcblx0XHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwicGFnZUxvYWRlZFwiLCB0aGlzLmdldFBhZ2UoKSk7XG5cdFx0XHRcblx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuXHRcdFx0XG5cdFx0XHRjYXNlIFwicmVtb3RlXCI6XG5cdFx0XHRcdHRoaXMuZGF0YUNoYW5naW5nID0gdHJ1ZTtcblx0XHRcdFx0cmV0dXJuIHRoaXMucmVsb2FkRGF0YShudWxsKVxuXHRcdFx0XHRcdC5maW5hbGx5KCgpID0+IHtcblx0XHRcdFx0XHRcdHRoaXMuZGF0YUNoYW5naW5nID0gZmFsc2U7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdGNhc2UgXCJwcm9ncmVzc2l2ZV9sb2FkXCI6XG5cdFx0XHRjYXNlIFwicHJvZ3Jlc3NpdmVfc2Nyb2xsXCI6XG5cdFx0XHRcdHJldHVybiB0aGlzLnJlbG9hZERhdGEobnVsbCwgdHJ1ZSk7XG5cdFx0XHRcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIlBhZ2luYXRpb24gRXJyb3IgLSBubyBzdWNoIHBhZ2luYXRpb24gbW9kZTpcIiwgdGhpcy5tb2RlKTtcblx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRfcGFyc2VSZW1vdGVEYXRhKGRhdGEpe1xuXHRcdHZhciBtYXJnaW47XG5cdFx0XG5cdFx0aWYodHlwZW9mIGRhdGEubGFzdF9wYWdlID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdGNvbnNvbGUud2FybihcIlJlbW90ZSBQYWdpbmF0aW9uIEVycm9yIC0gU2VydmVyIHJlc3BvbnNlIG1pc3NpbmcgJ1wiICsgKHRoaXMub3B0aW9ucyhcImRhdGFSZWNlaXZlUGFyYW1zXCIpLmxhc3RfcGFnZSB8fCBcImxhc3RfcGFnZVwiKSArIFwiJyBwcm9wZXJ0eVwiKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYoZGF0YS5kYXRhKXtcblx0XHRcdHRoaXMubWF4ID0gcGFyc2VJbnQoZGF0YS5sYXN0X3BhZ2UpIHx8IDE7XG5cblx0XHRcdHRoaXMucmVtb3RlUm93Q291bnRFc3RpbWF0ZSA9IHR5cGVvZiBkYXRhLmxhc3Rfcm93ICE9PSBcInVuZGVmaW5lZFwiID8gZGF0YS5sYXN0X3JvdyA6IChkYXRhLmxhc3RfcGFnZSAqIHRoaXMuc2l6ZSAtICh0aGlzLnBhZ2UgPT0gZGF0YS5sYXN0X3BhZ2UgPyAodGhpcy5zaXplIC0gZGF0YS5kYXRhLmxlbmd0aCkgOiAwKSk7XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMucHJvZ3Jlc3NpdmVMb2FkKXtcblx0XHRcdFx0c3dpdGNoKHRoaXMubW9kZSl7XG5cdFx0XHRcdFx0Y2FzZSBcInByb2dyZXNzaXZlX2xvYWRcIjpcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGlmKHRoaXMucGFnZSA9PSAxKXtcblx0XHRcdFx0XHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnNldERhdGEoZGF0YS5kYXRhLCBmYWxzZSwgdGhpcy5wYWdlID09IDEpO1xuXHRcdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuYWRkUm93cyhkYXRhLmRhdGEpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0aWYodGhpcy5wYWdlIDwgdGhpcy5tYXgpe1xuXHRcdFx0XHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLm5leHRQYWdlKCk7XG5cdFx0XHRcdFx0XHRcdH0sIHRoaXMudGFibGUub3B0aW9ucy5wcm9ncmVzc2l2ZUxvYWREZWxheSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRjYXNlIFwicHJvZ3Jlc3NpdmVfc2Nyb2xsXCI6XG5cdFx0XHRcdFx0XHRkYXRhID0gdGhpcy5wYWdlID09PSAxID8gZGF0YS5kYXRhIDogdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldERhdGEoKS5jb25jYXQoZGF0YS5kYXRhKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5zZXREYXRhKGRhdGEsIHRoaXMucGFnZSAhPT0gMSwgdGhpcy5wYWdlID09IDEpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0bWFyZ2luID0gdGhpcy50YWJsZS5vcHRpb25zLnByb2dyZXNzaXZlTG9hZFNjcm9sbE1hcmdpbiB8fCAodGhpcy50YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQuY2xpZW50SGVpZ2h0ICogMik7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRpZih0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5zY3JvbGxIZWlnaHQgPD0gKHRoaXMudGFibGUucm93TWFuYWdlci5lbGVtZW50LmNsaWVudEhlaWdodCArIG1hcmdpbikpe1xuXHRcdFx0XHRcdFx0XHRpZih0aGlzLnBhZ2UgPCB0aGlzLm1heCl7XG5cdFx0XHRcdFx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0XHR0aGlzLm5leHRQYWdlKCk7XG5cdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdC8vIGxlZnQgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuc2Nyb2xsTGVmdDtcblx0XHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwicGFnZUxvYWRlZFwiLCAgdGhpcy5nZXRQYWdlKCkpO1xuXHRcdFx0XHQvLyB0aGlzLnRhYmxlLnJvd01hbmFnZXIuc2Nyb2xsSG9yaXpvbnRhbChsZWZ0KTtcblx0XHRcdFx0Ly8gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLnNjcm9sbEhvcml6b250YWwobGVmdCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJSZW1vdGUgUGFnaW5hdGlvbiBFcnJvciAtIFNlcnZlciByZXNwb25zZSBtaXNzaW5nICdcIiArICh0aGlzLm9wdGlvbnMoXCJkYXRhUmVjZWl2ZVBhcmFtc1wiKS5kYXRhIHx8IFwiZGF0YVwiKSArIFwiJyBwcm9wZXJ0eVwiKTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIGRhdGEuZGF0YTtcblx0fVxuXHRcblx0Ly9oYW5kbGUgdGhlIGZvb3RlciBlbGVtZW50IGJlaW5nIHJlZHJhd25cblx0Zm9vdGVyUmVkcmF3KCl7XG5cdFx0dmFyIGZvb3RlciA9IHRoaXMudGFibGUuZm9vdGVyTWFuYWdlci5jb250YWluZXJFbGVtZW50O1xuXG5cdFx0aWYoKE1hdGguY2VpbChmb290ZXIuY2xpZW50V2lkdGgpIC0gZm9vdGVyLnNjcm9sbFdpZHRoKSA8IDApe1xuXHRcdFx0dGhpcy5wYWdlc0VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLnBhZ2VzRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJyc7XG5cdFx0XHRcblx0XHRcdGlmKChNYXRoLmNlaWwoZm9vdGVyLmNsaWVudFdpZHRoKSAtIGZvb3Rlci5zY3JvbGxXaWR0aCkgPCAwKXtcblx0XHRcdFx0dGhpcy5wYWdlc0VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuUGFnZS5tb2R1bGVOYW1lID0gXCJwYWdlXCI7XG5cbi8vbG9hZCBkZWZhdWx0c1xuUGFnZS5wYWdlQ291bnRlcnMgPSBkZWZhdWx0UGFnZUNvdW50ZXJzO1xuXG4vLyByZWFkIHBlcnNpc3RhbmNlIGluZm9ybWF0aW9uIGZyb20gc3RvcmFnZVxudmFyIGRlZmF1bHRSZWFkZXJzID0ge1xuXHRsb2NhbDpmdW5jdGlvbihpZCwgdHlwZSl7XG5cdFx0dmFyIGRhdGEgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShpZCArIFwiLVwiICsgdHlwZSk7XG5cblx0XHRyZXR1cm4gZGF0YSA/IEpTT04ucGFyc2UoZGF0YSkgOiBmYWxzZTtcblx0fSxcblx0Y29va2llOmZ1bmN0aW9uKGlkLCB0eXBlKXtcblx0XHR2YXIgY29va2llID0gZG9jdW1lbnQuY29va2llLFxuXHRcdGtleSA9IGlkICsgXCItXCIgKyB0eXBlLFxuXHRcdGNvb2tpZVBvcyA9IGNvb2tpZS5pbmRleE9mKGtleSArIFwiPVwiKSxcblx0XHRlbmQsIGRhdGE7XG5cblx0XHQvL2lmIGNvb2tpZSBleGlzdHMsIGRlY29kZSBhbmQgbG9hZCBjb2x1bW4gZGF0YSBpbnRvIHRhYnVsYXRvclxuXHRcdGlmKGNvb2tpZVBvcyA+IC0xKXtcblx0XHRcdGNvb2tpZSA9IGNvb2tpZS5zbGljZShjb29raWVQb3MpO1xuXG5cdFx0XHRlbmQgPSBjb29raWUuaW5kZXhPZihcIjtcIik7XG5cblx0XHRcdGlmKGVuZCA+IC0xKXtcblx0XHRcdFx0Y29va2llID0gY29va2llLnNsaWNlKDAsIGVuZCk7XG5cdFx0XHR9XG5cblx0XHRcdGRhdGEgPSBjb29raWUucmVwbGFjZShrZXkgKyBcIj1cIiwgXCJcIik7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEgPyBKU09OLnBhcnNlKGRhdGEpIDogZmFsc2U7XG5cdH1cbn07XG5cbi8vd3JpdGUgcGVyc2lzdGVuY2UgaW5mb3JtYXRpb24gdG8gc3RvcmFnZVxudmFyIGRlZmF1bHRXcml0ZXJzID0ge1xuXHRsb2NhbDpmdW5jdGlvbihpZCwgdHlwZSwgZGF0YSl7XG5cdFx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oaWQgKyBcIi1cIiArIHR5cGUsIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcblx0fSxcblx0Y29va2llOmZ1bmN0aW9uKGlkLCB0eXBlLCBkYXRhKXtcblx0XHR2YXIgZXhwaXJlRGF0ZSA9IG5ldyBEYXRlKCk7XG5cblx0XHRleHBpcmVEYXRlLnNldERhdGUoZXhwaXJlRGF0ZS5nZXREYXRlKCkgKyAxMDAwMCk7XG5cblx0XHRkb2N1bWVudC5jb29raWUgPSBpZCArIFwiLVwiICsgdHlwZSArIFwiPVwiICsgSlNPTi5zdHJpbmdpZnkoZGF0YSkgKyBcIjsgZXhwaXJlcz1cIiArIGV4cGlyZURhdGUudG9VVENTdHJpbmcoKTtcblx0fVxufTtcblxuY2xhc3MgUGVyc2lzdGVuY2UgZXh0ZW5kcyBNb2R1bGV7XG5cblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblxuXHRcdHRoaXMubW9kZSA9IFwiXCI7XG5cdFx0dGhpcy5pZCA9IFwiXCI7XG5cdFx0Ly8gdGhpcy5wZXJzaXN0UHJvcHMgPSBbXCJmaWVsZFwiLCBcIndpZHRoXCIsIFwidmlzaWJsZVwiXTtcblx0XHR0aGlzLmRlZldhdGNoZXJCbG9jayA9IGZhbHNlO1xuXHRcdHRoaXMuY29uZmlnID0ge307XG5cdFx0dGhpcy5yZWFkRnVuYyA9IGZhbHNlO1xuXHRcdHRoaXMud3JpdGVGdW5jID0gZmFsc2U7XG5cblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJwZXJzaXN0ZW5jZVwiLCBmYWxzZSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicGVyc2lzdGVuY2VJRFwiLCBcIlwiKTsgLy9rZXkgZm9yIHBlcnNpc3RlbnQgc3RvcmFnZVxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInBlcnNpc3RlbmNlTW9kZVwiLCB0cnVlKTsgLy9tb2RlIGZvciBzdG9yaW5nIHBlcnNpc3RlbmNlIGluZm9ybWF0aW9uXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicGVyc2lzdGVuY2VSZWFkZXJGdW5jXCIsIGZhbHNlKTsgLy9mdW5jdGlvbiBmb3IgaGFuZGxpbmcgcGVyc2lzdGVuY2UgZGF0YSByZWFkaW5nXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicGVyc2lzdGVuY2VXcml0ZXJGdW5jXCIsIGZhbHNlKTsgLy9mdW5jdGlvbiBmb3IgaGFuZGxpbmcgcGVyc2lzdGVuY2UgZGF0YSB3cml0aW5nXG5cdH1cblxuXHQvLyBUZXN0IGZvciB3aGV0aGVyIGxvY2FsU3RvcmFnZSBpcyBhdmFpbGFibGUgZm9yIHVzZS5cblx0bG9jYWxTdG9yYWdlVGVzdCgpIHtcblx0XHR2YXIgIHRlc3RLZXkgPSAgXCJfdGFidWxhdG9yX3Rlc3RcIjtcblxuXHRcdHRyeSB7XG5cdFx0XHR3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oIHRlc3RLZXksIHRlc3RLZXkpO1xuXHRcdFx0d2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCB0ZXN0S2V5ICk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblxuXHQvL3NldHVwIHBhcmFtZXRlcnNcblx0aW5pdGlhbGl6ZSgpe1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5wZXJzaXN0ZW5jZSl7XG5cdFx0XHQvL2RldGVybWluZSBwZXJzaXN0ZW50IGxheW91dCBzdG9yYWdlIHR5cGVcblx0XHRcdHZhciBtb2RlID0gdGhpcy50YWJsZS5vcHRpb25zLnBlcnNpc3RlbmNlTW9kZSxcblx0XHRcdGlkID0gdGhpcy50YWJsZS5vcHRpb25zLnBlcnNpc3RlbmNlSUQsXG5cdFx0XHRyZXRyaWV2ZWREYXRhO1xuXG5cdFx0XHR0aGlzLm1vZGUgPSBtb2RlICE9PSB0cnVlID8gIG1vZGUgOiAodGhpcy5sb2NhbFN0b3JhZ2VUZXN0KCkgPyBcImxvY2FsXCIgOiBcImNvb2tpZVwiKTtcblxuXHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnBlcnNpc3RlbmNlUmVhZGVyRnVuYyl7XG5cdFx0XHRcdGlmKHR5cGVvZiB0aGlzLnRhYmxlLm9wdGlvbnMucGVyc2lzdGVuY2VSZWFkZXJGdW5jID09PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0XHRcdHRoaXMucmVhZEZ1bmMgPSB0aGlzLnRhYmxlLm9wdGlvbnMucGVyc2lzdGVuY2VSZWFkZXJGdW5jO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0aWYoUGVyc2lzdGVuY2UucmVhZGVyc1t0aGlzLnRhYmxlLm9wdGlvbnMucGVyc2lzdGVuY2VSZWFkZXJGdW5jXSl7XG5cdFx0XHRcdFx0XHR0aGlzLnJlYWRGdW5jID0gUGVyc2lzdGVuY2UucmVhZGVyc1t0aGlzLnRhYmxlLm9wdGlvbnMucGVyc2lzdGVuY2VSZWFkZXJGdW5jXTtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJQZXJzaXN0ZW5jZSBSZWFkIEVycm9yIC0gaW52YWxpZCByZWFkZXIgc2V0XCIsIHRoaXMudGFibGUub3B0aW9ucy5wZXJzaXN0ZW5jZVJlYWRlckZ1bmMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRpZihQZXJzaXN0ZW5jZS5yZWFkZXJzW3RoaXMubW9kZV0pe1xuXHRcdFx0XHRcdHRoaXMucmVhZEZ1bmMgPSBQZXJzaXN0ZW5jZS5yZWFkZXJzW3RoaXMubW9kZV07XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJQZXJzaXN0ZW5jZSBSZWFkIEVycm9yIC0gaW52YWxpZCByZWFkZXIgc2V0XCIsIHRoaXMubW9kZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnBlcnNpc3RlbmNlV3JpdGVyRnVuYyl7XG5cdFx0XHRcdGlmKHR5cGVvZiB0aGlzLnRhYmxlLm9wdGlvbnMucGVyc2lzdGVuY2VXcml0ZXJGdW5jID09PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0XHRcdHRoaXMud3JpdGVGdW5jID0gdGhpcy50YWJsZS5vcHRpb25zLnBlcnNpc3RlbmNlV3JpdGVyRnVuYztcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGlmKFBlcnNpc3RlbmNlLndyaXRlcnNbdGhpcy50YWJsZS5vcHRpb25zLnBlcnNpc3RlbmNlV3JpdGVyRnVuY10pe1xuXHRcdFx0XHRcdFx0dGhpcy53cml0ZUZ1bmMgPSBQZXJzaXN0ZW5jZS53cml0ZXJzW3RoaXMudGFibGUub3B0aW9ucy5wZXJzaXN0ZW5jZVdyaXRlckZ1bmNdO1xuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybihcIlBlcnNpc3RlbmNlIFdyaXRlIEVycm9yIC0gaW52YWxpZCByZWFkZXIgc2V0XCIsIHRoaXMudGFibGUub3B0aW9ucy5wZXJzaXN0ZW5jZVdyaXRlckZ1bmMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRpZihQZXJzaXN0ZW5jZS53cml0ZXJzW3RoaXMubW9kZV0pe1xuXHRcdFx0XHRcdHRoaXMud3JpdGVGdW5jID0gUGVyc2lzdGVuY2Uud3JpdGVyc1t0aGlzLm1vZGVdO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiUGVyc2lzdGVuY2UgV3JpdGUgRXJyb3IgLSBpbnZhbGlkIHdyaXRlciBzZXRcIiwgdGhpcy5tb2RlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvL3NldCBzdG9yYWdlIHRhZ1xuXHRcdFx0dGhpcy5pZCA9IFwidGFidWxhdG9yLVwiICsgKGlkIHx8ICh0aGlzLnRhYmxlLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiaWRcIikgfHwgXCJcIikpO1xuXG5cdFx0XHR0aGlzLmNvbmZpZyA9IHtcblx0XHRcdFx0c29ydDp0aGlzLnRhYmxlLm9wdGlvbnMucGVyc2lzdGVuY2UgPT09IHRydWUgfHwgdGhpcy50YWJsZS5vcHRpb25zLnBlcnNpc3RlbmNlLnNvcnQsXG5cdFx0XHRcdGZpbHRlcjp0aGlzLnRhYmxlLm9wdGlvbnMucGVyc2lzdGVuY2UgPT09IHRydWUgfHwgdGhpcy50YWJsZS5vcHRpb25zLnBlcnNpc3RlbmNlLmZpbHRlcixcblx0XHRcdFx0aGVhZGVyRmlsdGVyOnRoaXMudGFibGUub3B0aW9ucy5wZXJzaXN0ZW5jZSA9PT0gdHJ1ZSB8fCB0aGlzLnRhYmxlLm9wdGlvbnMucGVyc2lzdGVuY2UuaGVhZGVyRmlsdGVyLFxuXHRcdFx0XHRncm91cDp0aGlzLnRhYmxlLm9wdGlvbnMucGVyc2lzdGVuY2UgPT09IHRydWUgfHwgdGhpcy50YWJsZS5vcHRpb25zLnBlcnNpc3RlbmNlLmdyb3VwLFxuXHRcdFx0XHRwYWdlOnRoaXMudGFibGUub3B0aW9ucy5wZXJzaXN0ZW5jZSA9PT0gdHJ1ZSB8fCB0aGlzLnRhYmxlLm9wdGlvbnMucGVyc2lzdGVuY2UucGFnZSxcblx0XHRcdFx0Y29sdW1uczp0aGlzLnRhYmxlLm9wdGlvbnMucGVyc2lzdGVuY2UgPT09IHRydWUgPyBbXCJ0aXRsZVwiLCBcIndpZHRoXCIsIFwidmlzaWJsZVwiXSA6IHRoaXMudGFibGUub3B0aW9ucy5wZXJzaXN0ZW5jZS5jb2x1bW5zLFxuXHRcdFx0fTtcblxuXHRcdFx0Ly9sb2FkIHBhZ2luYXRpb24gZGF0YSBpZiBuZWVkZWRcblx0XHRcdGlmKHRoaXMuY29uZmlnLnBhZ2Upe1xuXHRcdFx0XHRyZXRyaWV2ZWREYXRhID0gdGhpcy5yZXRyaWV2ZURhdGEoXCJwYWdlXCIpO1xuXG5cdFx0XHRcdGlmKHJldHJpZXZlZERhdGEpe1xuXHRcdFx0XHRcdGlmKHR5cGVvZiByZXRyaWV2ZWREYXRhLnBhZ2luYXRpb25TaXplICE9PSBcInVuZGVmaW5lZFwiICYmICh0aGlzLmNvbmZpZy5wYWdlID09PSB0cnVlIHx8IHRoaXMuY29uZmlnLnBhZ2Uuc2l6ZSkpe1xuXHRcdFx0XHRcdFx0dGhpcy50YWJsZS5vcHRpb25zLnBhZ2luYXRpb25TaXplID0gcmV0cmlldmVkRGF0YS5wYWdpbmF0aW9uU2l6ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZih0eXBlb2YgcmV0cmlldmVkRGF0YS5wYWdpbmF0aW9uSW5pdGlhbFBhZ2UgIT09IFwidW5kZWZpbmVkXCIgJiYgKHRoaXMuY29uZmlnLnBhZ2UgPT09IHRydWUgfHwgdGhpcy5jb25maWcucGFnZS5wYWdlKSl7XG5cdFx0XHRcdFx0XHR0aGlzLnRhYmxlLm9wdGlvbnMucGFnaW5hdGlvbkluaXRpYWxQYWdlID0gcmV0cmlldmVkRGF0YS5wYWdpbmF0aW9uSW5pdGlhbFBhZ2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vbG9hZCBncm91cCBkYXRhIGlmIG5lZWRlZFxuXHRcdFx0aWYodGhpcy5jb25maWcuZ3JvdXApe1xuXHRcdFx0XHRyZXRyaWV2ZWREYXRhID0gdGhpcy5yZXRyaWV2ZURhdGEoXCJncm91cFwiKTtcblxuXHRcdFx0XHRpZihyZXRyaWV2ZWREYXRhKXtcblx0XHRcdFx0XHRpZih0eXBlb2YgcmV0cmlldmVkRGF0YS5ncm91cEJ5ICE9PSBcInVuZGVmaW5lZFwiICYmICh0aGlzLmNvbmZpZy5ncm91cCA9PT0gdHJ1ZSB8fCB0aGlzLmNvbmZpZy5ncm91cC5ncm91cEJ5KSl7XG5cdFx0XHRcdFx0XHR0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBCeSA9IHJldHJpZXZlZERhdGEuZ3JvdXBCeTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYodHlwZW9mIHJldHJpZXZlZERhdGEuZ3JvdXBTdGFydE9wZW4gIT09IFwidW5kZWZpbmVkXCIgJiYgKHRoaXMuY29uZmlnLmdyb3VwID09PSB0cnVlIHx8IHRoaXMuY29uZmlnLmdyb3VwLmdyb3VwU3RhcnRPcGVuKSl7XG5cdFx0XHRcdFx0XHR0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBTdGFydE9wZW4gPSByZXRyaWV2ZWREYXRhLmdyb3VwU3RhcnRPcGVuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZih0eXBlb2YgcmV0cmlldmVkRGF0YS5ncm91cEhlYWRlciAhPT0gXCJ1bmRlZmluZWRcIiAmJiAodGhpcy5jb25maWcuZ3JvdXAgPT09IHRydWUgfHwgdGhpcy5jb25maWcuZ3JvdXAuZ3JvdXBIZWFkZXIpKXtcblx0XHRcdFx0XHRcdHRoaXMudGFibGUub3B0aW9ucy5ncm91cEhlYWRlciA9IHJldHJpZXZlZERhdGEuZ3JvdXBIZWFkZXI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmKHRoaXMuY29uZmlnLmNvbHVtbnMpe1xuXHRcdFx0XHR0aGlzLnRhYmxlLm9wdGlvbnMuY29sdW1ucyA9IHRoaXMubG9hZChcImNvbHVtbnNcIiwgdGhpcy50YWJsZS5vcHRpb25zLmNvbHVtbnMpO1xuXHRcdFx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1pbml0XCIsIHRoaXMuaW5pdGlhbGl6ZUNvbHVtbi5iaW5kKHRoaXMpKTtcblx0XHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tc2hvd1wiLCB0aGlzLnNhdmUuYmluZCh0aGlzLCBcImNvbHVtbnNcIikpO1xuXHRcdFx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1oaWRlXCIsIHRoaXMuc2F2ZS5iaW5kKHRoaXMsIFwiY29sdW1uc1wiKSk7XG5cdFx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLW1vdmVkXCIsIHRoaXMuc2F2ZS5iaW5kKHRoaXMsIFwiY29sdW1uc1wiKSk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwidGFibGUtYnVpbHRcIiwgdGhpcy50YWJsZUJ1aWx0LmJpbmQodGhpcyksIDApO1xuXG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInRhYmxlLXJlZHJhd1wiLCB0aGlzLnRhYmxlUmVkcmF3LmJpbmQodGhpcykpO1xuXG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImZpbHRlci1jaGFuZ2VkXCIsIHRoaXMuZXZlbnRTYXZlLmJpbmQodGhpcywgXCJmaWx0ZXJcIikpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJmaWx0ZXItY2hhbmdlZFwiLCB0aGlzLmV2ZW50U2F2ZS5iaW5kKHRoaXMsIFwiaGVhZGVyRmlsdGVyXCIpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwic29ydC1jaGFuZ2VkXCIsIHRoaXMuZXZlbnRTYXZlLmJpbmQodGhpcywgXCJzb3J0XCIpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiZ3JvdXAtY2hhbmdlZFwiLCB0aGlzLmV2ZW50U2F2ZS5iaW5kKHRoaXMsIFwiZ3JvdXBcIikpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJwYWdlLWNoYW5nZWRcIiwgdGhpcy5ldmVudFNhdmUuYmluZCh0aGlzLCBcInBhZ2VcIikpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tcmVzaXplZFwiLCB0aGlzLmV2ZW50U2F2ZS5iaW5kKHRoaXMsIFwiY29sdW1uc1wiKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi13aWR0aFwiLCB0aGlzLmV2ZW50U2F2ZS5iaW5kKHRoaXMsIFwiY29sdW1uc1wiKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImxheW91dC1yZWZyZXNoZWRcIiwgdGhpcy5ldmVudFNhdmUuYmluZCh0aGlzLCBcImNvbHVtbnNcIikpO1xuXHRcdH1cblxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiZ2V0Q29sdW1uTGF5b3V0XCIsIHRoaXMuZ2V0Q29sdW1uTGF5b3V0LmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwic2V0Q29sdW1uTGF5b3V0XCIsIHRoaXMuc2V0Q29sdW1uTGF5b3V0LmJpbmQodGhpcykpO1xuXHR9XG5cblx0ZXZlbnRTYXZlKHR5cGUpe1xuXHRcdGlmKHRoaXMuY29uZmlnW3R5cGVdKXtcblx0XHRcdHRoaXMuc2F2ZSh0eXBlKTtcblx0XHR9XG5cdH1cblxuXHR0YWJsZUJ1aWx0KCl7XG5cdFx0dmFyIHNvcnRlcnMsIGZpbHRlcnMsIGhlYWRlckZpbHRlcnM7XG5cblx0XHRpZih0aGlzLmNvbmZpZy5zb3J0KXtcblx0XHRcdHNvcnRlcnMgPSB0aGlzLmxvYWQoXCJzb3J0XCIpO1xuXG5cdFx0XHRpZighc29ydGVycyA9PT0gZmFsc2Upe1xuXHRcdFx0XHR0aGlzLnRhYmxlLm9wdGlvbnMuaW5pdGlhbFNvcnQgPSBzb3J0ZXJzO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmKHRoaXMuY29uZmlnLmZpbHRlcil7XG5cdFx0XHRmaWx0ZXJzID0gdGhpcy5sb2FkKFwiZmlsdGVyXCIpO1xuXG5cdFx0XHRpZighZmlsdGVycyA9PT0gZmFsc2Upe1xuXHRcdFx0XHR0aGlzLnRhYmxlLm9wdGlvbnMuaW5pdGlhbEZpbHRlciA9IGZpbHRlcnM7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmKHRoaXMuY29uZmlnLmhlYWRlckZpbHRlcil7XG5cdFx0XHRoZWFkZXJGaWx0ZXJzID0gdGhpcy5sb2FkKFwiaGVhZGVyRmlsdGVyXCIpO1xuXG5cdFx0XHRpZighaGVhZGVyRmlsdGVycyA9PT0gZmFsc2Upe1xuXHRcdFx0XHR0aGlzLnRhYmxlLm9wdGlvbnMuaW5pdGlhbEhlYWRlckZpbHRlciA9IGhlYWRlckZpbHRlcnM7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHR9XG5cblx0dGFibGVSZWRyYXcoZm9yY2Upe1xuXHRcdGlmKGZvcmNlICYmIHRoaXMuY29uZmlnLmNvbHVtbnMpe1xuXHRcdFx0dGhpcy5zYXZlKFwiY29sdW1uc1wiKTtcblx0XHR9XG5cdH1cblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8gVGFibGUgRnVuY3Rpb25zIC8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdGdldENvbHVtbkxheW91dCgpe1xuXHRcdHJldHVybiB0aGlzLnBhcnNlQ29sdW1ucyh0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0Q29sdW1ucygpKTtcblx0fVxuXG5cdHNldENvbHVtbkxheW91dChsYXlvdXQpe1xuXHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5zZXRDb2x1bW5zKHRoaXMubWVyZ2VEZWZpbml0aW9uKHRoaXMudGFibGUub3B0aW9ucy5jb2x1bW5zLCBsYXlvdXQpKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLyBJbnRlcm5hbCBMb2dpYyAvLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0aW5pdGlhbGl6ZUNvbHVtbihjb2x1bW4pe1xuXHRcdHZhciBkZWYsIGtleXM7XG5cblx0XHRpZih0aGlzLmNvbmZpZy5jb2x1bW5zKXtcblx0XHRcdHRoaXMuZGVmV2F0Y2hlckJsb2NrID0gdHJ1ZTtcblxuXHRcdFx0ZGVmID0gY29sdW1uLmdldERlZmluaXRpb24oKTtcblxuXHRcdFx0a2V5cyA9IHRoaXMuY29uZmlnLmNvbHVtbnMgPT09IHRydWUgPyBPYmplY3Qua2V5cyhkZWYpIDogdGhpcy5jb25maWcuY29sdW1ucztcblxuXHRcdFx0a2V5cy5mb3JFYWNoKChrZXkpPT57XG5cdFx0XHRcdHZhciBwcm9wcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZGVmLCBrZXkpO1xuXHRcdFx0XHR2YXIgdmFsdWUgPSBkZWZba2V5XTtcblxuXHRcdFx0XHRpZihwcm9wcyl7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGRlZiwga2V5LCB7XG5cdFx0XHRcdFx0XHRzZXQ6IChuZXdWYWx1ZSkgPT4ge1xuXHRcdFx0XHRcdFx0XHR2YWx1ZSA9IG5ld1ZhbHVlO1xuXG5cdFx0XHRcdFx0XHRcdGlmKCF0aGlzLmRlZldhdGNoZXJCbG9jayl7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5zYXZlKFwiY29sdW1uc1wiKTtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdGlmKHByb3BzLnNldCl7XG5cdFx0XHRcdFx0XHRcdFx0cHJvcHMuc2V0KG5ld1ZhbHVlKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdGdldDooKSA9PiB7XG5cdFx0XHRcdFx0XHRcdGlmKHByb3BzLmdldCl7XG5cdFx0XHRcdFx0XHRcdFx0cHJvcHMuZ2V0KCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy5kZWZXYXRjaGVyQmxvY2sgPSBmYWxzZTtcblx0XHR9XG5cdH1cblxuXHQvL2xvYWQgc2F2ZWQgZGVmaW5pdGlvbnNcblx0bG9hZCh0eXBlLCBjdXJyZW50KXtcblx0XHR2YXIgZGF0YSA9IHRoaXMucmV0cmlldmVEYXRhKHR5cGUpO1xuXG5cdFx0aWYoY3VycmVudCl7XG5cdFx0XHRkYXRhID0gZGF0YSA/IHRoaXMubWVyZ2VEZWZpbml0aW9uKGN1cnJlbnQsIGRhdGEpIDogY3VycmVudDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YTtcblx0fVxuXG5cdC8vcmV0cmlldmUgZGF0YSBmcm9tIG1lbW9yeVxuXHRyZXRyaWV2ZURhdGEodHlwZSl7XG5cdFx0cmV0dXJuIHRoaXMucmVhZEZ1bmMgPyB0aGlzLnJlYWRGdW5jKHRoaXMuaWQsIHR5cGUpIDogZmFsc2U7XG5cdH1cblxuXHQvL21lcmdlIG9sZCBhbmQgbmV3IGNvbHVtbiBkZWZpbml0aW9uc1xuXHRtZXJnZURlZmluaXRpb24ob2xkQ29scywgbmV3Q29scyl7XG5cdFx0dmFyIG91dHB1dCA9IFtdO1xuXG5cdFx0bmV3Q29scyA9IG5ld0NvbHMgfHwgW107XG5cblx0XHRuZXdDb2xzLmZvckVhY2goKGNvbHVtbiwgdG8pID0+IHtcblx0XHRcdHZhciBmcm9tID0gdGhpcy5fZmluZENvbHVtbihvbGRDb2xzLCBjb2x1bW4pLFxuXHRcdFx0a2V5cztcblxuXHRcdFx0aWYoZnJvbSl7XG5cdFx0XHRcdGlmKHRoaXMuY29uZmlnLmNvbHVtbnMgPT09IHRydWUgfHwgdGhpcy5jb25maWcuY29sdW1ucyA9PSB1bmRlZmluZWQpe1xuXHRcdFx0XHRcdGtleXMgPSAgT2JqZWN0LmtleXMoZnJvbSk7XG5cdFx0XHRcdFx0a2V5cy5wdXNoKFwid2lkdGhcIik7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRrZXlzID0gdGhpcy5jb25maWcuY29sdW1ucztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGtleXMuZm9yRWFjaCgoa2V5KT0+e1xuXHRcdFx0XHRcdGlmKGtleSAhPT0gXCJjb2x1bW5zXCIgJiYgdHlwZW9mIGNvbHVtbltrZXldICE9PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdFx0XHRcdGZyb21ba2V5XSA9IGNvbHVtbltrZXldO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0aWYoZnJvbS5jb2x1bW5zKXtcblx0XHRcdFx0XHRmcm9tLmNvbHVtbnMgPSB0aGlzLm1lcmdlRGVmaW5pdGlvbihmcm9tLmNvbHVtbnMsIGNvbHVtbi5jb2x1bW5zKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdG91dHB1dC5wdXNoKGZyb20pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0b2xkQ29scy5mb3JFYWNoKChjb2x1bW4sIGkpID0+IHtcblx0XHRcdHZhciBmcm9tID0gdGhpcy5fZmluZENvbHVtbihuZXdDb2xzLCBjb2x1bW4pO1xuXG5cdFx0XHRpZiAoIWZyb20pIHtcblx0XHRcdFx0aWYob3V0cHV0Lmxlbmd0aD5pKXtcblx0XHRcdFx0XHRvdXRwdXQuc3BsaWNlKGksIDAsIGNvbHVtbik7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRvdXRwdXQucHVzaChjb2x1bW4pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cblx0Ly9maW5kIG1hdGNoaW5nIGNvbHVtbnNcblx0X2ZpbmRDb2x1bW4oY29sdW1ucywgc3ViamVjdCl7XG5cdFx0dmFyIHR5cGUgPSBzdWJqZWN0LmNvbHVtbnMgPyBcImdyb3VwXCIgOiAoc3ViamVjdC5maWVsZCA/IFwiZmllbGRcIiA6IFwib2JqZWN0XCIpO1xuXG5cdFx0cmV0dXJuIGNvbHVtbnMuZmluZChmdW5jdGlvbihjb2wpe1xuXHRcdFx0c3dpdGNoKHR5cGUpe1xuXHRcdFx0XHRjYXNlIFwiZ3JvdXBcIjpcblx0XHRcdFx0XHRyZXR1cm4gY29sLnRpdGxlID09PSBzdWJqZWN0LnRpdGxlICYmIGNvbC5jb2x1bW5zLmxlbmd0aCA9PT0gc3ViamVjdC5jb2x1bW5zLmxlbmd0aDtcblxuXHRcdFx0XHRjYXNlIFwiZmllbGRcIjpcblx0XHRcdFx0XHRyZXR1cm4gY29sLmZpZWxkID09PSBzdWJqZWN0LmZpZWxkO1xuXG5cdFx0XHRcdGNhc2UgXCJvYmplY3RcIjpcblx0XHRcdFx0XHRyZXR1cm4gY29sID09PSBzdWJqZWN0O1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0Ly9zYXZlIGRhdGFcblx0c2F2ZSh0eXBlKXtcblx0XHR2YXIgZGF0YSA9IHt9O1xuXG5cdFx0c3dpdGNoKHR5cGUpe1xuXHRcdFx0Y2FzZSBcImNvbHVtbnNcIjpcblx0XHRcdFx0ZGF0YSA9IHRoaXMucGFyc2VDb2x1bW5zKHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5nZXRDb2x1bW5zKCkpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcImZpbHRlclwiOlxuXHRcdFx0XHRkYXRhID0gdGhpcy50YWJsZS5tb2R1bGVzLmZpbHRlci5nZXRGaWx0ZXJzKCk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwiaGVhZGVyRmlsdGVyXCI6XG5cdFx0XHRcdGRhdGEgPSB0aGlzLnRhYmxlLm1vZHVsZXMuZmlsdGVyLmdldEhlYWRlckZpbHRlcnMoKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgXCJzb3J0XCI6XG5cdFx0XHRcdGRhdGEgPSB0aGlzLnZhbGlkYXRlU29ydGVycyh0aGlzLnRhYmxlLm1vZHVsZXMuc29ydC5nZXRTb3J0KCkpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcImdyb3VwXCI6XG5cdFx0XHRcdGRhdGEgPSB0aGlzLmdldEdyb3VwQ29uZmlnKCk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwicGFnZVwiOlxuXHRcdFx0XHRkYXRhID0gdGhpcy5nZXRQYWdlQ29uZmlnKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblxuXHRcdGlmKHRoaXMud3JpdGVGdW5jKXtcblx0XHRcdHRoaXMud3JpdGVGdW5jKHRoaXMuaWQsIHR5cGUsIGRhdGEpO1xuXHRcdH1cblxuXHR9XG5cblx0Ly9lbnN1cmUgc29ydGVycyBjb250YWluIG5vIGZ1bmN0aW9uIGRhdGFcblx0dmFsaWRhdGVTb3J0ZXJzKGRhdGEpe1xuXHRcdGRhdGEuZm9yRWFjaChmdW5jdGlvbihpdGVtKXtcblx0XHRcdGl0ZW0uY29sdW1uID0gaXRlbS5maWVsZDtcblx0XHRcdGRlbGV0ZSBpdGVtLmZpZWxkO1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cdH1cblxuXHRnZXRHcm91cENvbmZpZygpe1xuXHRcdHZhciBkYXRhID0ge307XG5cblx0XHRpZih0aGlzLmNvbmZpZy5ncm91cCl7XG5cdFx0XHRpZih0aGlzLmNvbmZpZy5ncm91cCA9PT0gdHJ1ZSB8fCB0aGlzLmNvbmZpZy5ncm91cC5ncm91cEJ5KXtcblx0XHRcdFx0ZGF0YS5ncm91cEJ5ID0gdGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQnk7XG5cdFx0XHR9XG5cblx0XHRcdGlmKHRoaXMuY29uZmlnLmdyb3VwID09PSB0cnVlIHx8IHRoaXMuY29uZmlnLmdyb3VwLmdyb3VwU3RhcnRPcGVuKXtcblx0XHRcdFx0ZGF0YS5ncm91cFN0YXJ0T3BlbiA9IHRoaXMudGFibGUub3B0aW9ucy5ncm91cFN0YXJ0T3Blbjtcblx0XHRcdH1cblxuXHRcdFx0aWYodGhpcy5jb25maWcuZ3JvdXAgPT09IHRydWUgfHwgdGhpcy5jb25maWcuZ3JvdXAuZ3JvdXBIZWFkZXIpe1xuXHRcdFx0XHRkYXRhLmdyb3VwSGVhZGVyID0gdGhpcy50YWJsZS5vcHRpb25zLmdyb3VwSGVhZGVyO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXHR9XG5cblx0Z2V0UGFnZUNvbmZpZygpe1xuXHRcdHZhciBkYXRhID0ge307XG5cblx0XHRpZih0aGlzLmNvbmZpZy5wYWdlKXtcblx0XHRcdGlmKHRoaXMuY29uZmlnLnBhZ2UgPT09IHRydWUgfHwgdGhpcy5jb25maWcucGFnZS5zaXplKXtcblx0XHRcdFx0ZGF0YS5wYWdpbmF0aW9uU2l6ZSA9IHRoaXMudGFibGUubW9kdWxlcy5wYWdlLmdldFBhZ2VTaXplKCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmKHRoaXMuY29uZmlnLnBhZ2UgPT09IHRydWUgfHwgdGhpcy5jb25maWcucGFnZS5wYWdlKXtcblx0XHRcdFx0ZGF0YS5wYWdpbmF0aW9uSW5pdGlhbFBhZ2UgPSB0aGlzLnRhYmxlLm1vZHVsZXMucGFnZS5nZXRQYWdlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cdH1cblxuXG5cdC8vcGFyc2UgY29sdW1ucyBmb3IgZGF0YSB0byBzdG9yZVxuXHRwYXJzZUNvbHVtbnMoY29sdW1ucyl7XG5cdFx0dmFyIGRlZmluaXRpb25zID0gW10sXG5cdFx0ZXhjbHVkZWRLZXlzID0gW1wiaGVhZGVyQ29udGV4dE1lbnVcIiwgXCJoZWFkZXJNZW51XCIsIFwiY29udGV4dE1lbnVcIiwgXCJjbGlja01lbnVcIl07XG5cblx0XHRjb2x1bW5zLmZvckVhY2goKGNvbHVtbikgPT4ge1xuXHRcdFx0dmFyIGRlZlN0b3JlID0ge30sXG5cdFx0XHRjb2xEZWYgPSBjb2x1bW4uZ2V0RGVmaW5pdGlvbigpLFxuXHRcdFx0a2V5cztcblxuXHRcdFx0aWYoY29sdW1uLmlzR3JvdXApe1xuXHRcdFx0XHRkZWZTdG9yZS50aXRsZSA9IGNvbERlZi50aXRsZTtcblx0XHRcdFx0ZGVmU3RvcmUuY29sdW1ucyA9IHRoaXMucGFyc2VDb2x1bW5zKGNvbHVtbi5nZXRDb2x1bW5zKCkpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRkZWZTdG9yZS5maWVsZCA9IGNvbHVtbi5nZXRGaWVsZCgpO1xuXG5cdFx0XHRcdGlmKHRoaXMuY29uZmlnLmNvbHVtbnMgPT09IHRydWUgfHwgdGhpcy5jb25maWcuY29sdW1ucyA9PSB1bmRlZmluZWQpe1xuXHRcdFx0XHRcdGtleXMgPSAgT2JqZWN0LmtleXMoY29sRGVmKTtcblx0XHRcdFx0XHRrZXlzLnB1c2goXCJ3aWR0aFwiKTtcblx0XHRcdFx0XHRrZXlzLnB1c2goXCJ2aXNpYmxlXCIpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0a2V5cyA9IHRoaXMuY29uZmlnLmNvbHVtbnM7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRrZXlzLmZvckVhY2goKGtleSk9Pntcblx0XHRcdFx0XHRzd2l0Y2goa2V5KXtcblx0XHRcdFx0XHRcdGNhc2UgXCJ3aWR0aFwiOlxuXHRcdFx0XHRcdFx0XHRkZWZTdG9yZS53aWR0aCA9IGNvbHVtbi5nZXRXaWR0aCgpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgXCJ2aXNpYmxlXCI6XG5cdFx0XHRcdFx0XHRcdGRlZlN0b3JlLnZpc2libGUgPSBjb2x1bW4udmlzaWJsZTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdGlmKHR5cGVvZiBjb2xEZWZba2V5XSAhPT0gXCJmdW5jdGlvblwiICYmIGV4Y2x1ZGVkS2V5cy5pbmRleE9mKGtleSkgPT09IC0xKXtcblx0XHRcdFx0XHRcdFx0XHRkZWZTdG9yZVtrZXldID0gY29sRGVmW2tleV07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZpbml0aW9ucy5wdXNoKGRlZlN0b3JlKTtcblx0XHR9KTtcblxuXHRcdHJldHVybiBkZWZpbml0aW9ucztcblx0fVxufVxuXG5QZXJzaXN0ZW5jZS5tb2R1bGVOYW1lID0gXCJwZXJzaXN0ZW5jZVwiO1xuXG5QZXJzaXN0ZW5jZS5tb2R1bGVJbml0T3JkZXIgPSAtMTA7XG5cbi8vbG9hZCBkZWZhdWx0c1xuUGVyc2lzdGVuY2UucmVhZGVycyA9IGRlZmF1bHRSZWFkZXJzO1xuUGVyc2lzdGVuY2Uud3JpdGVycyA9IGRlZmF1bHRXcml0ZXJzO1xuXG5jbGFzcyBQb3B1cCQxIGV4dGVuZHMgTW9kdWxle1xuXHRcblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblx0XHRcblx0XHR0aGlzLmNvbHVtblN1YnNjcmliZXJzID0ge307XG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicm93Q29udGV4dFBvcHVwXCIsIGZhbHNlKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJyb3dDbGlja1BvcHVwXCIsIGZhbHNlKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJyb3dEYmxDbGlja1BvcHVwXCIsIGZhbHNlKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJncm91cENvbnRleHRQb3B1cFwiLCBmYWxzZSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZ3JvdXBDbGlja1BvcHVwXCIsIGZhbHNlKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJncm91cERibENsaWNrUG9wdXBcIiwgZmFsc2UpO1xuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJDb250ZXh0UG9wdXBcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImhlYWRlckNsaWNrUG9wdXBcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImhlYWRlckRibENsaWNrUG9wdXBcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImhlYWRlclBvcHVwXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJQb3B1cEljb25cIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImNvbnRleHRQb3B1cFwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiY2xpY2tQb3B1cFwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiZGJsQ2xpY2tQb3B1cFwiKTtcblxuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcImNlbGxcIiwgXCJwb3B1cFwiLCB0aGlzLl9jb21wb25lbnRQb3B1cENhbGwuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwiY29sdW1uXCIsIFwicG9wdXBcIiwgdGhpcy5fY29tcG9uZW50UG9wdXBDYWxsLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcInJvd1wiLCBcInBvcHVwXCIsIHRoaXMuX2NvbXBvbmVudFBvcHVwQ2FsbC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJncm91cFwiLCBcInBvcHVwXCIsIHRoaXMuX2NvbXBvbmVudFBvcHVwQ2FsbC5iaW5kKHRoaXMpKTtcblx0XHRcblx0fVxuXHRcblx0aW5pdGlhbGl6ZSgpe1xuXHRcdHRoaXMuaW5pdGlhbGl6ZVJvd1dhdGNoZXJzKCk7XG5cdFx0dGhpcy5pbml0aWFsaXplR3JvdXBXYXRjaGVycygpO1xuXHRcdFxuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWluaXRcIiwgdGhpcy5pbml0aWFsaXplQ29sdW1uLmJpbmQodGhpcykpO1xuXHR9XG5cblx0X2NvbXBvbmVudFBvcHVwQ2FsbChjb21wb25lbnQsIGNvbnRlbnRzLCBwb3NpdGlvbil7XG5cdFx0dGhpcy5sb2FkUG9wdXBFdmVudChjb250ZW50cywgbnVsbCwgY29tcG9uZW50LCBwb3NpdGlvbik7XG5cdH1cblx0XG5cdGluaXRpYWxpemVSb3dXYXRjaGVycygpe1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5yb3dDb250ZXh0UG9wdXApe1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctY29udGV4dG1lbnVcIiwgdGhpcy5sb2FkUG9wdXBFdmVudC5iaW5kKHRoaXMsIHRoaXMudGFibGUub3B0aW9ucy5yb3dDb250ZXh0UG9wdXApKTtcblx0XHRcdHRoaXMudGFibGUub24oXCJyb3dUYXBIb2xkXCIsIHRoaXMubG9hZFBvcHVwRXZlbnQuYmluZCh0aGlzLCB0aGlzLnRhYmxlLm9wdGlvbnMucm93Q29udGV4dFBvcHVwKSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5yb3dDbGlja1BvcHVwKXtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWNsaWNrXCIsIHRoaXMubG9hZFBvcHVwRXZlbnQuYmluZCh0aGlzLCB0aGlzLnRhYmxlLm9wdGlvbnMucm93Q2xpY2tQb3B1cCkpO1xuXHRcdH1cblxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5yb3dEYmxDbGlja1BvcHVwKXtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWRibGNsaWNrXCIsIHRoaXMubG9hZFBvcHVwRXZlbnQuYmluZCh0aGlzLCB0aGlzLnRhYmxlLm9wdGlvbnMucm93RGJsQ2xpY2tQb3B1cCkpO1xuXHRcdH1cblx0fVxuXHRcblx0aW5pdGlhbGl6ZUdyb3VwV2F0Y2hlcnMoKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBDb250ZXh0UG9wdXApe1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJncm91cC1jb250ZXh0bWVudVwiLCB0aGlzLmxvYWRQb3B1cEV2ZW50LmJpbmQodGhpcywgdGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQ29udGV4dFBvcHVwKSk7XG5cdFx0XHR0aGlzLnRhYmxlLm9uKFwiZ3JvdXBUYXBIb2xkXCIsIHRoaXMubG9hZFBvcHVwRXZlbnQuYmluZCh0aGlzLCB0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBDb250ZXh0UG9wdXApKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQ2xpY2tQb3B1cCl7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImdyb3VwLWNsaWNrXCIsIHRoaXMubG9hZFBvcHVwRXZlbnQuYmluZCh0aGlzLCB0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBDbGlja1BvcHVwKSk7XG5cdFx0fVxuXG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwRGJsQ2xpY2tQb3B1cCl7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImdyb3VwLWRibGNsaWNrXCIsIHRoaXMubG9hZFBvcHVwRXZlbnQuYmluZCh0aGlzLCB0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBEYmxDbGlja1BvcHVwKSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRpbml0aWFsaXplQ29sdW1uKGNvbHVtbil7XG5cdFx0dmFyIGRlZiA9IGNvbHVtbi5kZWZpbml0aW9uO1xuXHRcdFxuXHRcdC8vaGFuZGxlIGNvbHVtbiBldmVudHNcblx0XHRpZihkZWYuaGVhZGVyQ29udGV4dFBvcHVwICYmICF0aGlzLmNvbHVtblN1YnNjcmliZXJzLmhlYWRlckNvbnRleHRQb3B1cCl7XG5cdFx0XHR0aGlzLmNvbHVtblN1YnNjcmliZXJzLmhlYWRlckNvbnRleHRQb3B1cCA9IHRoaXMubG9hZFBvcHVwVGFibGVDb2x1bW5FdmVudC5iaW5kKHRoaXMsIFwiaGVhZGVyQ29udGV4dFBvcHVwXCIpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tY29udGV4dG1lbnVcIiwgdGhpcy5jb2x1bW5TdWJzY3JpYmVycy5oZWFkZXJDb250ZXh0UG9wdXApO1xuXHRcdFx0dGhpcy50YWJsZS5vbihcImhlYWRlclRhcEhvbGRcIiwgdGhpcy5sb2FkUG9wdXBUYWJsZUNvbHVtbkV2ZW50LmJpbmQodGhpcywgXCJoZWFkZXJDb250ZXh0UG9wdXBcIikpO1xuXHRcdH1cblx0XHRcblx0XHRpZihkZWYuaGVhZGVyQ2xpY2tQb3B1cCAmJiAhdGhpcy5jb2x1bW5TdWJzY3JpYmVycy5oZWFkZXJDbGlja1BvcHVwKXtcblx0XHRcdHRoaXMuY29sdW1uU3Vic2NyaWJlcnMuaGVhZGVyQ2xpY2tQb3B1cCA9IHRoaXMubG9hZFBvcHVwVGFibGVDb2x1bW5FdmVudC5iaW5kKHRoaXMsIFwiaGVhZGVyQ2xpY2tQb3B1cFwiKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWNsaWNrXCIsIHRoaXMuY29sdW1uU3Vic2NyaWJlcnMuaGVhZGVyQ2xpY2tQb3B1cCk7XG5cdFx0XG5cdFx0XG5cdFx0fWlmKGRlZi5oZWFkZXJEYmxDbGlja1BvcHVwICYmICF0aGlzLmNvbHVtblN1YnNjcmliZXJzLmhlYWRlckRibENsaWNrUG9wdXApe1xuXHRcdFx0dGhpcy5jb2x1bW5TdWJzY3JpYmVycy5oZWFkZXJEYmxDbGlja1BvcHVwID0gdGhpcy5sb2FkUG9wdXBUYWJsZUNvbHVtbkV2ZW50LmJpbmQodGhpcywgXCJoZWFkZXJEYmxDbGlja1BvcHVwXCIpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tZGJsY2xpY2tcIiwgdGhpcy5jb2x1bW5TdWJzY3JpYmVycy5oZWFkZXJEYmxDbGlja1BvcHVwKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYoZGVmLmhlYWRlclBvcHVwKXtcblx0XHRcdHRoaXMuaW5pdGlhbGl6ZUNvbHVtbkhlYWRlclBvcHVwKGNvbHVtbik7XG5cdFx0fVxuXHRcdFxuXHRcdC8vaGFuZGxlIGNlbGwgZXZlbnRzXG5cdFx0aWYoZGVmLmNvbnRleHRQb3B1cCAmJiAhdGhpcy5jb2x1bW5TdWJzY3JpYmVycy5jb250ZXh0UG9wdXApe1xuXHRcdFx0dGhpcy5jb2x1bW5TdWJzY3JpYmVycy5jb250ZXh0UG9wdXAgPSB0aGlzLmxvYWRQb3B1cFRhYmxlQ2VsbEV2ZW50LmJpbmQodGhpcywgXCJjb250ZXh0UG9wdXBcIik7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNlbGwtY29udGV4dG1lbnVcIiwgdGhpcy5jb2x1bW5TdWJzY3JpYmVycy5jb250ZXh0UG9wdXApO1xuXHRcdFx0dGhpcy50YWJsZS5vbihcImNlbGxUYXBIb2xkXCIsIHRoaXMubG9hZFBvcHVwVGFibGVDZWxsRXZlbnQuYmluZCh0aGlzLCBcImNvbnRleHRQb3B1cFwiKSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGRlZi5jbGlja1BvcHVwICYmICF0aGlzLmNvbHVtblN1YnNjcmliZXJzLmNsaWNrUG9wdXApe1xuXHRcdFx0dGhpcy5jb2x1bW5TdWJzY3JpYmVycy5jbGlja1BvcHVwID0gdGhpcy5sb2FkUG9wdXBUYWJsZUNlbGxFdmVudC5iaW5kKHRoaXMsIFwiY2xpY2tQb3B1cFwiKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY2VsbC1jbGlja1wiLCB0aGlzLmNvbHVtblN1YnNjcmliZXJzLmNsaWNrUG9wdXApO1xuXHRcdH1cblxuXHRcdGlmKGRlZi5kYmxDbGlja1BvcHVwICYmICF0aGlzLmNvbHVtblN1YnNjcmliZXJzLmRibENsaWNrUG9wdXApe1xuXHRcdFx0dGhpcy5jb2x1bW5TdWJzY3JpYmVycy5kYmxDbGlja1BvcHVwID0gdGhpcy5sb2FkUG9wdXBUYWJsZUNlbGxFdmVudC5iaW5kKHRoaXMsIFwiZGJsQ2xpY2tQb3B1cFwiKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY2VsbC1jbGlja1wiLCB0aGlzLmNvbHVtblN1YnNjcmliZXJzLmRibENsaWNrUG9wdXApO1xuXHRcdH1cblx0fVxuXHRcblx0aW5pdGlhbGl6ZUNvbHVtbkhlYWRlclBvcHVwKGNvbHVtbil7XG5cdFx0dmFyIGljb24gPSBjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJQb3B1cEljb24sXG5cdFx0aGVhZGVyUG9wdXBFbDtcblx0XHRcblx0XHRoZWFkZXJQb3B1cEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG5cdFx0aGVhZGVyUG9wdXBFbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWhlYWRlci1wb3B1cC1idXR0b25cIik7XG5cblx0XHRpZihpY29uKXtcblx0XHRcdGlmKHR5cGVvZiBpY29uID09PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0XHRpY29uID0gaWNvbihjb2x1bW4uZ2V0Q29tcG9uZW50KCkpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZihpY29uIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpe1xuXHRcdFx0XHRoZWFkZXJQb3B1cEVsLmFwcGVuZENoaWxkKGljb24pO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRoZWFkZXJQb3B1cEVsLmlubmVySFRNTCA9IGljb247XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0aGVhZGVyUG9wdXBFbC5pbm5lckhUTUwgPSBcIiZ2ZWxsaXA7XCI7XG5cdFx0fVxuXHRcdFxuXHRcdGhlYWRlclBvcHVwRWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmxvYWRQb3B1cEV2ZW50KGNvbHVtbi5kZWZpbml0aW9uLmhlYWRlclBvcHVwLCBlLCBjb2x1bW4pO1xuXHRcdH0pO1xuXHRcdFxuXHRcdGNvbHVtbi50aXRsZUVsZW1lbnQuaW5zZXJ0QmVmb3JlKGhlYWRlclBvcHVwRWwsIGNvbHVtbi50aXRsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG5cdH1cblx0XG5cdGxvYWRQb3B1cFRhYmxlQ2VsbEV2ZW50KG9wdGlvbiwgZSwgY2VsbCl7XG5cdFx0aWYoY2VsbC5fY2VsbCl7XG5cdFx0XHRjZWxsID0gY2VsbC5fY2VsbDtcblx0XHR9XG5cdFx0XG5cdFx0aWYoY2VsbC5jb2x1bW4uZGVmaW5pdGlvbltvcHRpb25dKXtcblx0XHRcdHRoaXMubG9hZFBvcHVwRXZlbnQoY2VsbC5jb2x1bW4uZGVmaW5pdGlvbltvcHRpb25dLCBlLCBjZWxsKTtcblx0XHR9XG5cdH1cblx0XG5cdGxvYWRQb3B1cFRhYmxlQ29sdW1uRXZlbnQob3B0aW9uLCBlLCBjb2x1bW4pe1xuXHRcdGlmKGNvbHVtbi5fY29sdW1uKXtcblx0XHRcdGNvbHVtbiA9IGNvbHVtbi5fY29sdW1uO1xuXHRcdH1cblx0XHRcblx0XHRpZihjb2x1bW4uZGVmaW5pdGlvbltvcHRpb25dKXtcblx0XHRcdHRoaXMubG9hZFBvcHVwRXZlbnQoY29sdW1uLmRlZmluaXRpb25bb3B0aW9uXSwgZSwgY29sdW1uKTtcblx0XHR9XG5cdH1cblx0XG5cdGxvYWRQb3B1cEV2ZW50KGNvbnRlbnRzLCBlLCBjb21wb25lbnQsIHBvc2l0aW9uKXtcblx0XHR2YXIgcmVuZGVyZWRDYWxsYmFjaztcblxuXHRcdGZ1bmN0aW9uIG9uUmVuZGVyZWQoY2FsbGJhY2spe1xuXHRcdFx0cmVuZGVyZWRDYWxsYmFjayA9IGNhbGxiYWNrO1xuXHRcdH1cblx0XHRcblx0XHRpZihjb21wb25lbnQuX2dyb3VwKXtcblx0XHRcdGNvbXBvbmVudCA9IGNvbXBvbmVudC5fZ3JvdXA7XG5cdFx0fWVsc2UgaWYoY29tcG9uZW50Ll9yb3cpe1xuXHRcdFx0Y29tcG9uZW50ID0gY29tcG9uZW50Ll9yb3c7XG5cdFx0fVxuXHRcdFxuXHRcdGNvbnRlbnRzID0gdHlwZW9mIGNvbnRlbnRzID09IFwiZnVuY3Rpb25cIiA/IGNvbnRlbnRzLmNhbGwodGhpcy50YWJsZSwgZSwgY29tcG9uZW50LmdldENvbXBvbmVudCgpLCAgb25SZW5kZXJlZCkgOiBjb250ZW50cztcblx0XHRcblx0XHR0aGlzLmxvYWRQb3B1cChlLCBjb21wb25lbnQsIGNvbnRlbnRzLCByZW5kZXJlZENhbGxiYWNrLCBwb3NpdGlvbik7XG5cdH1cblx0XG5cdGxvYWRQb3B1cChlLCBjb21wb25lbnQsIGNvbnRlbnRzLCByZW5kZXJlZENhbGxiYWNrLCBwb3NpdGlvbil7XG5cdFx0dmFyIHRvdWNoID0gIShlIGluc3RhbmNlb2YgTW91c2VFdmVudCksXG5cdFx0Y29udGVudHNFbCwgcG9wdXA7XG5cdFx0XG5cdFx0aWYoY29udGVudHMgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCl7XG5cdFx0XHRjb250ZW50c0VsID0gY29udGVudHM7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29udGVudHNFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XHRjb250ZW50c0VsLmlubmVySFRNTCA9IGNvbnRlbnRzO1xuXHRcdH1cblx0XHRcblx0XHRjb250ZW50c0VsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItcG9wdXBcIik7XG5cblx0XHRjb250ZW50c0VsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT57XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH0pO1xuXG5cdFx0aWYoIXRvdWNoKXtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdFx0XG5cdFx0cG9wdXAgPSB0aGlzLnBvcHVwKGNvbnRlbnRzRWwpO1xuXG5cdFx0aWYodHlwZW9mIHJlbmRlcmVkQ2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRwb3B1cC5yZW5kZXJDYWxsYmFjayhyZW5kZXJlZENhbGxiYWNrKTtcblx0XHR9XG5cblx0XHRpZihlKXtcblx0XHRcdHBvcHVwLnNob3coZSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0cG9wdXAuc2hvdyhjb21wb25lbnQuZ2V0RWxlbWVudCgpLCBwb3NpdGlvbiB8fCBcImNlbnRlclwiKTtcblx0XHR9XG5cblx0XHRcblx0XHRwb3B1cC5oaWRlT25CbHVyKCgpID0+IHtcblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInBvcHVwQ2xvc2VkXCIsIGNvbXBvbmVudC5nZXRDb21wb25lbnQoKSk7XG5cdFx0fSk7XG5cblxuXG5cdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwicG9wdXBPcGVuZWRcIiwgY29tcG9uZW50LmdldENvbXBvbmVudCgpKTtcblx0fVxufVxuXG5Qb3B1cCQxLm1vZHVsZU5hbWUgPSBcInBvcHVwXCI7XG5cbmNsYXNzIFByaW50IGV4dGVuZHMgTW9kdWxle1xuXG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cblx0XHR0aGlzLmVsZW1lbnQgPSBmYWxzZTtcblx0XHR0aGlzLm1hbnVhbEJsb2NrID0gZmFsc2U7XG5cdFx0dGhpcy5iZWZvcmVwcmludEV2ZW50SGFuZGxlciA9IG51bGw7XG5cdFx0dGhpcy5hZnRlcnByaW50RXZlbnRIYW5kbGVyID0gbnVsbDtcblxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInByaW50QXNIdG1sXCIsIGZhbHNlKTsgLy9lbmFibGUgcHJpbnQgYXMgaHRtbFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInByaW50Rm9ybWF0dGVyXCIsIGZhbHNlKTsgLy9wcmludGluZyBwYWdlIGZvcm1hdHRlclxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInByaW50SGVhZGVyXCIsIGZhbHNlKTsgLy9wYWdlIGhlYWRlciBjb250ZW50c1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInByaW50Rm9vdGVyXCIsIGZhbHNlKTsgLy9wYWdlIGZvb3RlciBjb250ZW50c1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInByaW50U3R5bGVkXCIsIHRydWUpOyAvL2VuYWJsZSBwcmludCBhcyBodG1sIHN0eWxpbmdcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJwcmludFJvd1JhbmdlXCIsIFwidmlzaWJsZVwiKTsgLy9yZXN0cmljdCBwcmludCB0byB2aXNpYmxlIHJvd3Mgb25seVxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInByaW50Q29uZmlnXCIsIHt9KTsgLy9wcmludCBjb25maWcgb3B0aW9uc1xuXG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcInByaW50XCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJ0aXRsZVByaW50XCIpO1xuXHR9XG5cblx0aW5pdGlhbGl6ZSgpe1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5wcmludEFzSHRtbCl7XG5cdFx0XHR0aGlzLmJlZm9yZXByaW50RXZlbnRIYW5kbGVyID0gdGhpcy5yZXBsYWNlVGFibGUuYmluZCh0aGlzKTtcblx0XHRcdHRoaXMuYWZ0ZXJwcmludEV2ZW50SGFuZGxlciA9IHRoaXMuY2xlYW51cC5iaW5kKHRoaXMpO1xuXG5cdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImJlZm9yZXByaW50XCIsIHRoaXMuYmVmb3JlcHJpbnRFdmVudEhhbmRsZXIgKTtcblx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiYWZ0ZXJwcmludFwiLCB0aGlzLmFmdGVycHJpbnRFdmVudEhhbmRsZXIpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJ0YWJsZS1kZXN0cm95XCIsIHRoaXMuZGVzdHJveS5iaW5kKHRoaXMpKTtcblx0XHR9XG5cblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcInByaW50XCIsIHRoaXMucHJpbnRGdWxsc2NyZWVuLmJpbmQodGhpcykpO1xuXHR9XG5cblx0ZGVzdHJveSgpe1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5wcmludEFzSHRtbCl7XG5cdFx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJiZWZvcmVwcmludFwiLCB0aGlzLmJlZm9yZXByaW50RXZlbnRIYW5kbGVyICk7XG5cdFx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJhZnRlcnByaW50XCIsIHRoaXMuYWZ0ZXJwcmludEV2ZW50SGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLyBUYWJsZSBGdW5jdGlvbnMgLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vIEludGVybmFsIExvZ2ljIC8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXHRyZXBsYWNlVGFibGUoKXtcblx0XHRpZighdGhpcy5tYW51YWxCbG9jayl7XG5cdFx0XHR0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdFx0dGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItcHJpbnQtdGFibGVcIik7XG5cblx0XHRcdHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLnRhYmxlLm1vZHVsZXMuZXhwb3J0LmdlbmVyYXRlVGFibGUodGhpcy50YWJsZS5vcHRpb25zLnByaW50Q29uZmlnLCB0aGlzLnRhYmxlLm9wdGlvbnMucHJpbnRTdHlsZWQsIHRoaXMudGFibGUub3B0aW9ucy5wcmludFJvd1JhbmdlLCBcInByaW50XCIpKTtcblxuXHRcdFx0dGhpcy50YWJsZS5lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcblxuXHRcdFx0dGhpcy50YWJsZS5lbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMuZWxlbWVudCwgdGhpcy50YWJsZS5lbGVtZW50KTtcblx0XHR9XG5cdH1cblxuXHRjbGVhbnVwKCl7XG5cdFx0ZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKFwidGFidWxhdG9yLXByaW50LWZ1bGxzY3JlZW4taGlkZVwiKTtcblxuXHRcdGlmKHRoaXMuZWxlbWVudCAmJiB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZSl7XG5cdFx0XHR0aGlzLmVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQpO1xuXHRcdFx0dGhpcy50YWJsZS5lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdH1cblx0fVxuXG5cdHByaW50RnVsbHNjcmVlbih2aXNpYmxlLCBzdHlsZSwgY29uZmlnKXtcblx0XHR2YXIgc2Nyb2xsWCA9IHdpbmRvdy5zY3JvbGxYLFxuXHRcdHNjcm9sbFkgPSB3aW5kb3cuc2Nyb2xsWSxcblx0XHRoZWFkZXJFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksXG5cdFx0Zm9vdGVyRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFxuXHRcdHRhYmxlRWwgPSB0aGlzLnRhYmxlLm1vZHVsZXMuZXhwb3J0LmdlbmVyYXRlVGFibGUodHlwZW9mIGNvbmZpZyAhPSBcInVuZGVmaW5lZFwiID8gY29uZmlnIDogdGhpcy50YWJsZS5vcHRpb25zLnByaW50Q29uZmlnLCB0eXBlb2Ygc3R5bGUgIT0gXCJ1bmRlZmluZWRcIiA/IHN0eWxlIDogdGhpcy50YWJsZS5vcHRpb25zLnByaW50U3R5bGVkLCB2aXNpYmxlIHx8IHRoaXMudGFibGUub3B0aW9ucy5wcmludFJvd1JhbmdlLCBcInByaW50XCIpLFxuXHRcdGhlYWRlckNvbnRlbnQsIGZvb3RlckNvbnRlbnQ7XG5cblx0XHR0aGlzLm1hbnVhbEJsb2NrID0gdHJ1ZTtcblxuXHRcdHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0dGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItcHJpbnQtZnVsbHNjcmVlblwiKTtcblxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5wcmludEhlYWRlcil7XG5cdFx0XHRoZWFkZXJFbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXByaW50LWhlYWRlclwiKTtcblxuXHRcdFx0aGVhZGVyQ29udGVudCA9IHR5cGVvZiB0aGlzLnRhYmxlLm9wdGlvbnMucHJpbnRIZWFkZXIgPT0gXCJmdW5jdGlvblwiID8gdGhpcy50YWJsZS5vcHRpb25zLnByaW50SGVhZGVyLmNhbGwodGhpcy50YWJsZSkgOiB0aGlzLnRhYmxlLm9wdGlvbnMucHJpbnRIZWFkZXI7XG5cblx0XHRcdGlmKHR5cGVvZiBoZWFkZXJDb250ZW50ID09IFwic3RyaW5nXCIpe1xuXHRcdFx0XHRoZWFkZXJFbC5pbm5lckhUTUwgPSBoZWFkZXJDb250ZW50O1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRoZWFkZXJFbC5hcHBlbmRDaGlsZChoZWFkZXJDb250ZW50KTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKGhlYWRlckVsKTtcblx0XHR9XG5cblx0XHR0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGFibGVFbCk7XG5cblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucHJpbnRGb290ZXIpe1xuXHRcdFx0Zm9vdGVyRWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1wcmludC1mb290ZXJcIik7XG5cblx0XHRcdGZvb3RlckNvbnRlbnQgPSB0eXBlb2YgdGhpcy50YWJsZS5vcHRpb25zLnByaW50Rm9vdGVyID09IFwiZnVuY3Rpb25cIiA/IHRoaXMudGFibGUub3B0aW9ucy5wcmludEZvb3Rlci5jYWxsKHRoaXMudGFibGUpIDogdGhpcy50YWJsZS5vcHRpb25zLnByaW50Rm9vdGVyO1xuXG5cblx0XHRcdGlmKHR5cGVvZiBmb290ZXJDb250ZW50ID09IFwic3RyaW5nXCIpe1xuXHRcdFx0XHRmb290ZXJFbC5pbm5lckhUTUwgPSBmb290ZXJDb250ZW50O1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRmb290ZXJFbC5hcHBlbmRDaGlsZChmb290ZXJDb250ZW50KTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKGZvb3RlckVsKTtcblx0XHR9XG5cblx0XHRkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItcHJpbnQtZnVsbHNjcmVlbi1oaWRlXCIpO1xuXHRcdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5lbGVtZW50KTtcblxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5wcmludEZvcm1hdHRlcil7XG5cdFx0XHR0aGlzLnRhYmxlLm9wdGlvbnMucHJpbnRGb3JtYXR0ZXIodGhpcy5lbGVtZW50LCB0YWJsZUVsKTtcblx0XHR9XG5cblx0XHR3aW5kb3cucHJpbnQoKTtcblxuXHRcdHRoaXMuY2xlYW51cCgpO1xuXG5cdFx0d2luZG93LnNjcm9sbFRvKHNjcm9sbFgsIHNjcm9sbFkpO1xuXG5cdFx0dGhpcy5tYW51YWxCbG9jayA9IGZhbHNlO1xuXHR9XG59XG5cblByaW50Lm1vZHVsZU5hbWUgPSBcInByaW50XCI7XG5cbmNsYXNzIFJlYWN0aXZlRGF0YSBleHRlbmRzIE1vZHVsZXtcblx0XG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cdFx0XG5cdFx0dGhpcy5kYXRhID0gZmFsc2U7XG5cdFx0dGhpcy5ibG9ja2VkID0gZmFsc2U7IC8vYmxvY2sgcmVhY3Rpdml0eSB3aGlsZSBwZXJmb3JtaW5nIHVwZGF0ZVxuXHRcdHRoaXMub3JpZ0Z1bmNzID0ge307IC8vIGhvbGQgb3JpZ2luYWwgZGF0YSBhcnJheSBmdW5jdGlvbnMgdG8gYWxsb3cgcmVwbGFjZW1lbnQgYWZ0ZXIgZGF0YSBpcyBkb25lIHdpdGhcblx0XHR0aGlzLmN1cnJlbnRWZXJzaW9uID0gMDtcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJyZWFjdGl2ZURhdGFcIiwgZmFsc2UpOyAvL2VuYWJsZSBkYXRhIHJlYWN0aXZpdHlcblx0fVxuXHRcblx0aW5pdGlhbGl6ZSgpe1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5yZWFjdGl2ZURhdGEpe1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjZWxsLXZhbHVlLXNhdmUtYmVmb3JlXCIsIHRoaXMuYmxvY2suYmluZCh0aGlzLCBcImNlbGxzYXZlXCIpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY2VsbC12YWx1ZS1zYXZlLWFmdGVyXCIsIHRoaXMudW5ibG9jay5iaW5kKHRoaXMsIFwiY2VsbHNhdmVcIikpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctZGF0YS1zYXZlLWJlZm9yZVwiLCB0aGlzLmJsb2NrLmJpbmQodGhpcywgXCJyb3dzYXZlXCIpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWRhdGEtc2F2ZS1hZnRlclwiLCB0aGlzLnVuYmxvY2suYmluZCh0aGlzLCBcInJvd3NhdmVcIikpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctZGF0YS1pbml0LWFmdGVyXCIsIHRoaXMud2F0Y2hSb3cuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImRhdGEtcHJvY2Vzc2luZ1wiLCB0aGlzLndhdGNoRGF0YS5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwidGFibGUtZGVzdHJveVwiLCB0aGlzLnVud2F0Y2hEYXRhLmJpbmQodGhpcykpO1xuXHRcdH1cblx0fVxuXHRcblx0d2F0Y2hEYXRhKGRhdGEpe1xuXHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHR2ZXJzaW9uO1xuXHRcdFxuXHRcdHRoaXMuY3VycmVudFZlcnNpb24gKys7XG5cdFx0XG5cdFx0dmVyc2lvbiA9IHRoaXMuY3VycmVudFZlcnNpb247XG5cdFx0XG5cdFx0dGhpcy51bndhdGNoRGF0YSgpO1xuXHRcdFxuXHRcdHRoaXMuZGF0YSA9IGRhdGE7XG5cdFx0XG5cdFx0Ly9vdmVycmlkZSBhcnJheSBwdXNoIGZ1bmN0aW9uXG5cdFx0dGhpcy5vcmlnRnVuY3MucHVzaCA9IGRhdGEucHVzaDtcblx0XHRcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5kYXRhLCBcInB1c2hcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24oKXtcblx0XHRcdFx0dmFyIGFyZ3MgPSBBcnJheS5mcm9tKGFyZ3VtZW50cyksXG5cdFx0XHRcdHJlc3VsdDtcblxuXHRcdFx0XHRpZighc2VsZi5ibG9ja2VkICYmIHZlcnNpb24gPT09IHNlbGYuY3VycmVudFZlcnNpb24pe1x0XG5cdFx0XHRcdFx0c2VsZi5ibG9jayhcImRhdGEtcHVzaFwiKTtcblxuXHRcdFx0XHRcdGFyZ3MuZm9yRWFjaCgoYXJnKSA9PiB7XG5cdFx0XHRcdFx0XHRzZWxmLnRhYmxlLnJvd01hbmFnZXIuYWRkUm93QWN0dWFsKGFyZywgZmFsc2UpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHJlc3VsdCA9IHNlbGYub3JpZ0Z1bmNzLnB1c2guYXBwbHkoZGF0YSwgYXJndW1lbnRzKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRzZWxmLnVuYmxvY2soXCJkYXRhLXB1c2hcIik7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0Ly9vdmVycmlkZSBhcnJheSB1bnNoaWZ0IGZ1bmN0aW9uXG5cdFx0dGhpcy5vcmlnRnVuY3MudW5zaGlmdCA9IGRhdGEudW5zaGlmdDtcblx0XHRcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5kYXRhLCBcInVuc2hpZnRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24oKXtcblx0XHRcdFx0dmFyIGFyZ3MgPSBBcnJheS5mcm9tKGFyZ3VtZW50cyksXG5cdFx0XHRcdHJlc3VsdDtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKCFzZWxmLmJsb2NrZWQgJiYgdmVyc2lvbiA9PT0gc2VsZi5jdXJyZW50VmVyc2lvbil7XG5cdFx0XHRcdFx0c2VsZi5ibG9jayhcImRhdGEtdW5zaGlmdFwiKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRhcmdzLmZvckVhY2goKGFyZykgPT4ge1xuXHRcdFx0XHRcdFx0c2VsZi50YWJsZS5yb3dNYW5hZ2VyLmFkZFJvd0FjdHVhbChhcmcsIHRydWUpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHJlc3VsdCA9IHNlbGYub3JpZ0Z1bmNzLnVuc2hpZnQuYXBwbHkoZGF0YSwgYXJndW1lbnRzKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRzZWxmLnVuYmxvY2soXCJkYXRhLXVuc2hpZnRcIik7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0XG5cdFx0Ly9vdmVycmlkZSBhcnJheSBzaGlmdCBmdW5jdGlvblxuXHRcdHRoaXMub3JpZ0Z1bmNzLnNoaWZ0ID0gZGF0YS5zaGlmdDtcblx0XHRcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5kYXRhLCBcInNoaWZ0XCIsIHtcblx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uKCl7XG5cdFx0XHRcdHZhciByb3csIHJlc3VsdDtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKCFzZWxmLmJsb2NrZWQgJiYgdmVyc2lvbiA9PT0gc2VsZi5jdXJyZW50VmVyc2lvbil7XG5cdFx0XHRcdFx0c2VsZi5ibG9jayhcImRhdGEtc2hpZnRcIik7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYoc2VsZi5kYXRhLmxlbmd0aCl7XG5cdFx0XHRcdFx0XHRyb3cgPSBzZWxmLnRhYmxlLnJvd01hbmFnZXIuZ2V0Um93RnJvbURhdGFPYmplY3Qoc2VsZi5kYXRhWzBdKTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0aWYocm93KXtcblx0XHRcdFx0XHRcdFx0cm93LmRlbGV0ZUFjdHVhbCgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJlc3VsdCA9IHNlbGYub3JpZ0Z1bmNzLnNoaWZ0LmNhbGwoZGF0YSk7XG5cblx0XHRcdFx0XHRzZWxmLnVuYmxvY2soXCJkYXRhLXNoaWZ0XCIpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdC8vb3ZlcnJpZGUgYXJyYXkgcG9wIGZ1bmN0aW9uXG5cdFx0dGhpcy5vcmlnRnVuY3MucG9wID0gZGF0YS5wb3A7XG5cdFx0XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMuZGF0YSwgXCJwb3BcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24oKXtcblx0XHRcdFx0dmFyIHJvdywgcmVzdWx0O1xuXHRcdFx0XG5cdFx0XHRcdGlmKCFzZWxmLmJsb2NrZWQgJiYgdmVyc2lvbiA9PT0gc2VsZi5jdXJyZW50VmVyc2lvbil7XG5cdFx0XHRcdFx0c2VsZi5ibG9jayhcImRhdGEtcG9wXCIpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKHNlbGYuZGF0YS5sZW5ndGgpe1xuXHRcdFx0XHRcdFx0cm93ID0gc2VsZi50YWJsZS5yb3dNYW5hZ2VyLmdldFJvd0Zyb21EYXRhT2JqZWN0KHNlbGYuZGF0YVtzZWxmLmRhdGEubGVuZ3RoIC0gMV0pO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRpZihyb3cpe1xuXHRcdFx0XHRcdFx0XHRyb3cuZGVsZXRlQWN0dWFsKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmVzdWx0ID0gc2VsZi5vcmlnRnVuY3MucG9wLmNhbGwoZGF0YSk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0c2VsZi51bmJsb2NrKFwiZGF0YS1wb3BcIik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdFxuXHRcdC8vb3ZlcnJpZGUgYXJyYXkgc3BsaWNlIGZ1bmN0aW9uXG5cdFx0dGhpcy5vcmlnRnVuY3Muc3BsaWNlID0gZGF0YS5zcGxpY2U7XG5cdFx0XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMuZGF0YSwgXCJzcGxpY2VcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHR2YWx1ZTogZnVuY3Rpb24oKXtcblx0XHRcdFx0dmFyIGFyZ3MgPSBBcnJheS5mcm9tKGFyZ3VtZW50cyksXG5cdFx0XHRcdHN0YXJ0ID0gYXJnc1swXSA8IDAgPyBkYXRhLmxlbmd0aCArIGFyZ3NbMF0gOiBhcmdzWzBdLFxuXHRcdFx0XHRlbmQgPSBhcmdzWzFdLFxuXHRcdFx0XHRuZXdSb3dzID0gYXJnc1syXSA/IGFyZ3Muc2xpY2UoMikgOiBmYWxzZSxcblx0XHRcdFx0c3RhcnRSb3csIHJlc3VsdDtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKCFzZWxmLmJsb2NrZWQgJiYgdmVyc2lvbiA9PT0gc2VsZi5jdXJyZW50VmVyc2lvbil7XG5cdFx0XHRcdFx0c2VsZi5ibG9jayhcImRhdGEtc3BsaWNlXCIpO1xuXHRcdFx0XHRcdC8vYWRkIG5ldyByb3dzXG5cdFx0XHRcdFx0aWYobmV3Um93cyl7XG5cdFx0XHRcdFx0XHRzdGFydFJvdyA9IGRhdGFbc3RhcnRdID8gc2VsZi50YWJsZS5yb3dNYW5hZ2VyLmdldFJvd0Zyb21EYXRhT2JqZWN0KGRhdGFbc3RhcnRdKSA6IGZhbHNlO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRpZihzdGFydFJvdyl7XG5cdFx0XHRcdFx0XHRcdG5ld1Jvd3MuZm9yRWFjaCgocm93RGF0YSkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdHNlbGYudGFibGUucm93TWFuYWdlci5hZGRSb3dBY3R1YWwocm93RGF0YSwgdHJ1ZSwgc3RhcnRSb3csIHRydWUpO1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdFx0bmV3Um93cyA9IG5ld1Jvd3Muc2xpY2UoKS5yZXZlcnNlKCk7XG5cdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRuZXdSb3dzLmZvckVhY2goKHJvd0RhdGEpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRzZWxmLnRhYmxlLnJvd01hbmFnZXIuYWRkUm93QWN0dWFsKHJvd0RhdGEsIHRydWUsIGZhbHNlLCB0cnVlKTtcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vZGVsZXRlIHJlbW92ZWQgcm93c1xuXHRcdFx0XHRcdGlmKGVuZCAhPT0gMCl7XG5cdFx0XHRcdFx0XHR2YXIgb2xkUm93cyA9IGRhdGEuc2xpY2Uoc3RhcnQsIHR5cGVvZiBhcmdzWzFdID09PSBcInVuZGVmaW5lZFwiID8gYXJnc1sxXSA6IHN0YXJ0ICsgZW5kKTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0b2xkUm93cy5mb3JFYWNoKChyb3dEYXRhLCBpKSA9PiB7XG5cdFx0XHRcdFx0XHRcdHZhciByb3cgPSBzZWxmLnRhYmxlLnJvd01hbmFnZXIuZ2V0Um93RnJvbURhdGFPYmplY3Qocm93RGF0YSk7XG5cdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRpZihyb3cpe1xuXHRcdFx0XHRcdFx0XHRcdHJvdy5kZWxldGVBY3R1YWwoaSAhPT0gb2xkUm93cy5sZW5ndGggLSAxKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKG5ld1Jvd3MgfHwgZW5kICE9PSAwKXtcblx0XHRcdFx0XHRcdHNlbGYudGFibGUucm93TWFuYWdlci5yZVJlbmRlckluUG9zaXRpb24oKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXN1bHQgPSBzZWxmLm9yaWdGdW5jcy5zcGxpY2UuYXBwbHkoZGF0YSwgYXJndW1lbnRzKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRzZWxmLnVuYmxvY2soXCJkYXRhLXNwbGljZVwiKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0cmV0dXJuIHJlc3VsdCA7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0XG5cdHVud2F0Y2hEYXRhKCl7XG5cdFx0aWYodGhpcy5kYXRhICE9PSBmYWxzZSl7XG5cdFx0XHRmb3IodmFyIGtleSBpbiB0aGlzLm9yaWdGdW5jcyl7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLmRhdGEsIGtleSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOnRydWUsXG5cdFx0XHRcdFx0d3JpdGFibGU6dHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdGhpcy5vcmlnRnVuY3Mua2V5LFxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdHdhdGNoUm93KHJvdyl7XG5cdFx0dmFyIGRhdGEgPSByb3cuZ2V0RGF0YSgpO1xuXHRcdFxuXHRcdGZvcih2YXIga2V5IGluIGRhdGEpe1xuXHRcdFx0dGhpcy53YXRjaEtleShyb3csIGRhdGEsIGtleSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5kYXRhVHJlZSl7XG5cdFx0XHR0aGlzLndhdGNoVHJlZUNoaWxkcmVuKHJvdyk7XG5cdFx0fVxuXHR9XG5cdFxuXHR3YXRjaFRyZWVDaGlsZHJlbiAocm93KXtcblx0XHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0Y2hpbGRGaWVsZCA9IHJvdy5nZXREYXRhKClbdGhpcy50YWJsZS5vcHRpb25zLmRhdGFUcmVlQ2hpbGRGaWVsZF0sXG5cdFx0b3JpZ0Z1bmNzID0ge307XG5cdFx0XG5cdFx0aWYoY2hpbGRGaWVsZCl7XG5cdFx0XHRcblx0XHRcdG9yaWdGdW5jcy5wdXNoID0gY2hpbGRGaWVsZC5wdXNoO1xuXHRcdFx0XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoY2hpbGRGaWVsZCwgXCJwdXNoXCIsIHtcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6ICgpID0+IHtcblx0XHRcdFx0XHRpZighc2VsZi5ibG9ja2VkKXtcblx0XHRcdFx0XHRcdHNlbGYuYmxvY2soXCJ0cmVlLXB1c2hcIik7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdHZhciByZXN1bHQgPSBvcmlnRnVuY3MucHVzaC5hcHBseShjaGlsZEZpZWxkLCBhcmd1bWVudHMpO1xuXHRcdFx0XHRcdFx0dGhpcy5yZWJ1aWxkVHJlZShyb3cpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRzZWxmLnVuYmxvY2soXCJ0cmVlLXB1c2hcIik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHRvcmlnRnVuY3MudW5zaGlmdCA9IGNoaWxkRmllbGQudW5zaGlmdDtcblx0XHRcdFxuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGNoaWxkRmllbGQsIFwidW5zaGlmdFwiLCB7XG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiAoKSA9PiB7XG5cdFx0XHRcdFx0aWYoIXNlbGYuYmxvY2tlZCl7XG5cdFx0XHRcdFx0XHRzZWxmLmJsb2NrKFwidHJlZS11bnNoaWZ0XCIpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHR2YXIgcmVzdWx0ID0gIG9yaWdGdW5jcy51bnNoaWZ0LmFwcGx5KGNoaWxkRmllbGQsIGFyZ3VtZW50cyk7XG5cdFx0XHRcdFx0XHR0aGlzLnJlYnVpbGRUcmVlKHJvdyk7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdHNlbGYudW5ibG9jayhcInRyZWUtdW5zaGlmdFwiKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdG9yaWdGdW5jcy5zaGlmdCA9IGNoaWxkRmllbGQuc2hpZnQ7XG5cdFx0XHRcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjaGlsZEZpZWxkLCBcInNoaWZ0XCIsIHtcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6ICgpID0+IHtcblx0XHRcdFx0XHRpZighc2VsZi5ibG9ja2VkKXtcblx0XHRcdFx0XHRcdHNlbGYuYmxvY2soXCJ0cmVlLXNoaWZ0XCIpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHR2YXIgcmVzdWx0ID0gIG9yaWdGdW5jcy5zaGlmdC5jYWxsKGNoaWxkRmllbGQpO1xuXHRcdFx0XHRcdFx0dGhpcy5yZWJ1aWxkVHJlZShyb3cpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRzZWxmLnVuYmxvY2soXCJ0cmVlLXNoaWZ0XCIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0b3JpZ0Z1bmNzLnBvcCA9IGNoaWxkRmllbGQucG9wO1xuXHRcdFx0XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoY2hpbGRGaWVsZCwgXCJwb3BcIiwge1xuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogKCkgPT4ge1xuXHRcdFx0XHRcdGlmKCFzZWxmLmJsb2NrZWQpe1xuXHRcdFx0XHRcdFx0c2VsZi5ibG9jayhcInRyZWUtcG9wXCIpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHR2YXIgcmVzdWx0ID0gIG9yaWdGdW5jcy5wb3AuY2FsbChjaGlsZEZpZWxkKTtcblx0XHRcdFx0XHRcdHRoaXMucmVidWlsZFRyZWUocm93KTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0c2VsZi51bmJsb2NrKFwidHJlZS1wb3BcIik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHRvcmlnRnVuY3Muc3BsaWNlID0gY2hpbGRGaWVsZC5zcGxpY2U7XG5cdFx0XHRcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjaGlsZEZpZWxkLCBcInNwbGljZVwiLCB7XG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiAoKSA9PiB7XG5cdFx0XHRcdFx0aWYoIXNlbGYuYmxvY2tlZCl7XG5cdFx0XHRcdFx0XHRzZWxmLmJsb2NrKFwidHJlZS1zcGxpY2VcIik7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdHZhciByZXN1bHQgPSAgb3JpZ0Z1bmNzLnNwbGljZS5hcHBseShjaGlsZEZpZWxkLCBhcmd1bWVudHMpO1xuXHRcdFx0XHRcdFx0dGhpcy5yZWJ1aWxkVHJlZShyb3cpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRzZWxmLnVuYmxvY2soXCJ0cmVlLXNwbGljZVwiKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRyZWJ1aWxkVHJlZShyb3cpe1xuXHRcdHRoaXMudGFibGUubW9kdWxlcy5kYXRhVHJlZS5pbml0aWFsaXplUm93KHJvdyk7XG5cdFx0dGhpcy50YWJsZS5tb2R1bGVzLmRhdGFUcmVlLmxheW91dFJvdyhyb3cpO1xuXHRcdHRoaXMudGFibGUucm93TWFuYWdlci5yZWZyZXNoQWN0aXZlRGF0YShcInRyZWVcIiwgZmFsc2UsIHRydWUpO1xuXHR9XG5cdFxuXHR3YXRjaEtleShyb3csIGRhdGEsIGtleSl7XG5cdFx0dmFyIHNlbGYgPSB0aGlzLFxuXHRcdHByb3BzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihkYXRhLCBrZXkpLFxuXHRcdHZhbHVlID0gZGF0YVtrZXldLFxuXHRcdHZlcnNpb24gPSB0aGlzLmN1cnJlbnRWZXJzaW9uO1xuXHRcdFxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkYXRhLCBrZXksIHtcblx0XHRcdHNldDogKG5ld1ZhbHVlKSA9PiB7XG5cdFx0XHRcdHZhbHVlID0gbmV3VmFsdWU7XG5cdFx0XHRcdGlmKCFzZWxmLmJsb2NrZWQgJiYgdmVyc2lvbiA9PT0gc2VsZi5jdXJyZW50VmVyc2lvbil7XG5cdFx0XHRcdFx0c2VsZi5ibG9jayhcImtleVwiKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHR2YXIgdXBkYXRlID0ge307XG5cdFx0XHRcdFx0dXBkYXRlW2tleV0gPSBuZXdWYWx1ZTtcblx0XHRcdFx0XHRyb3cudXBkYXRlRGF0YSh1cGRhdGUpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHNlbGYudW5ibG9jayhcImtleVwiKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0aWYocHJvcHMuc2V0KXtcblx0XHRcdFx0XHRwcm9wcy5zZXQobmV3VmFsdWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0Z2V0OigpID0+IHtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKHByb3BzLmdldCl7XG5cdFx0XHRcdFx0cHJvcHMuZ2V0KCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRcblx0dW53YXRjaFJvdyhyb3cpe1xuXHRcdHZhciBkYXRhID0gcm93LmdldERhdGEoKTtcblx0XHRcblx0XHRmb3IodmFyIGtleSBpbiBkYXRhKXtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkYXRhLCBrZXksIHtcblx0XHRcdFx0dmFsdWU6ZGF0YVtrZXldLFxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRibG9jayhrZXkpe1xuXHRcdGlmKCF0aGlzLmJsb2NrZWQpe1xuXHRcdFx0dGhpcy5ibG9ja2VkID0ga2V5O1xuXHRcdH1cblx0fVxuXHRcblx0dW5ibG9jayhrZXkpe1xuXHRcdGlmKHRoaXMuYmxvY2tlZCA9PT0ga2V5KXtcblx0XHRcdHRoaXMuYmxvY2tlZCA9IGZhbHNlO1xuXHRcdH1cblx0fVxufVxuXG5SZWFjdGl2ZURhdGEubW9kdWxlTmFtZSA9IFwicmVhY3RpdmVEYXRhXCI7XG5cbmNsYXNzIFJlc2l6ZUNvbHVtbnMgZXh0ZW5kcyBNb2R1bGV7XG5cdFxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXHRcdFxuXHRcdHRoaXMuc3RhcnRDb2x1bW4gPSBmYWxzZTtcblx0XHR0aGlzLnN0YXJ0WCA9IGZhbHNlO1xuXHRcdHRoaXMuc3RhcnRXaWR0aCA9IGZhbHNlO1xuXHRcdHRoaXMubGF0ZXN0WCA9IGZhbHNlO1xuXHRcdHRoaXMuaGFuZGxlID0gbnVsbDtcblx0XHR0aGlzLmluaXRpYWxOZXh0Q29sdW1uID0gbnVsbDtcblx0XHR0aGlzLm5leHRDb2x1bW4gPSBudWxsO1xuXHRcdFxuXHRcdHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwicmVzaXphYmxlXCIsIHRydWUpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInJlc2l6YWJsZUNvbHVtbkZpdFwiLCBmYWxzZSk7XG5cdH1cblx0XG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1yZW5kZXJlZFwiLCB0aGlzLmxheW91dENvbHVtbkhlYWRlci5iaW5kKHRoaXMpKTtcblx0fVxuXHRcblx0aW5pdGlhbGl6ZUV2ZW50V2F0Y2hlcnMoKXtcblx0XHRpZighdGhpcy5pbml0aWFsaXplZCl7XG5cdFx0XHRcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY2VsbC1yZW5kZXJlZFwiLCB0aGlzLmxheW91dENlbGxIYW5kbGVzLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjZWxsLWRlbGV0ZVwiLCB0aGlzLmRlSW5pdGlhbGl6ZUNvbXBvbmVudC5iaW5kKHRoaXMpKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjZWxsLWhlaWdodFwiLCB0aGlzLnJlc2l6ZUhhbmRsZS5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLW1vdmVkXCIsIHRoaXMuY29sdW1uTGF5b3V0VXBkYXRlZC5iaW5kKHRoaXMpKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4taGlkZVwiLCB0aGlzLmRlSW5pdGlhbGl6ZUNvbHVtbi5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLXNob3dcIiwgdGhpcy5jb2x1bW5MYXlvdXRVcGRhdGVkLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4td2lkdGhcIiwgdGhpcy5jb2x1bW5XaWR0aFVwZGF0ZWQuYmluZCh0aGlzKSk7XG5cdFx0XHRcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWRlbGV0ZVwiLCB0aGlzLmRlSW5pdGlhbGl6ZUNvbXBvbmVudC5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWhlaWdodFwiLCB0aGlzLnJlc2l6ZUhhbmRsZS5iaW5kKHRoaXMpKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG5cdFx0fVxuXHR9XG5cdFxuXHRcblx0bGF5b3V0Q2VsbEhhbmRsZXMoY2VsbCl7XG5cdFx0aWYoY2VsbC5yb3cudHlwZSA9PT0gXCJyb3dcIil7XG5cdFx0XHR0aGlzLmRlSW5pdGlhbGl6ZUNvbXBvbmVudChjZWxsKTtcblx0XHRcdHRoaXMuaW5pdGlhbGl6ZUNvbHVtbihcImNlbGxcIiwgY2VsbCwgY2VsbC5jb2x1bW4sIGNlbGwuZWxlbWVudCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRsYXlvdXRDb2x1bW5IZWFkZXIoY29sdW1uKXtcblx0XHRpZihjb2x1bW4uZGVmaW5pdGlvbi5yZXNpemFibGUpe1xuXHRcdFx0dGhpcy5pbml0aWFsaXplRXZlbnRXYXRjaGVycygpO1xuXHRcdFx0dGhpcy5kZUluaXRpYWxpemVDb21wb25lbnQoY29sdW1uKTtcblx0XHRcdHRoaXMuaW5pdGlhbGl6ZUNvbHVtbihcImhlYWRlclwiLCBjb2x1bW4sIGNvbHVtbiwgY29sdW1uLmVsZW1lbnQpO1xuXHRcdH1cblx0fVxuXHRcblx0Y29sdW1uTGF5b3V0VXBkYXRlZChjb2x1bW4pe1xuXHRcdHZhciBwcmV2ID0gY29sdW1uLnByZXZDb2x1bW4oKTtcblx0XHRcblx0XHR0aGlzLnJlaW5pdGlhbGl6ZUNvbHVtbihjb2x1bW4pO1xuXHRcdFxuXHRcdGlmKHByZXYpe1xuXHRcdFx0dGhpcy5yZWluaXRpYWxpemVDb2x1bW4ocHJldik7XG5cdFx0fVxuXHR9XG5cdFxuXHRjb2x1bW5XaWR0aFVwZGF0ZWQoY29sdW1uKXtcblx0XHRpZihjb2x1bW4ubW9kdWxlcy5mcm96ZW4pe1xuXHRcdFx0aWYodGhpcy50YWJsZS5tb2R1bGVzLmZyb3plbkNvbHVtbnMubGVmdENvbHVtbnMuaW5jbHVkZXMoY29sdW1uKSl7XG5cdFx0XHRcdHRoaXMudGFibGUubW9kdWxlcy5mcm96ZW5Db2x1bW5zLmxlZnRDb2x1bW5zLmZvckVhY2goKGNvbCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMucmVpbml0aWFsaXplQ29sdW1uKGNvbCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fWVsc2UgaWYodGhpcy50YWJsZS5tb2R1bGVzLmZyb3plbkNvbHVtbnMucmlnaHRDb2x1bW5zLmluY2x1ZGVzKGNvbHVtbikpe1xuXHRcdFx0XHR0aGlzLnRhYmxlLm1vZHVsZXMuZnJvemVuQ29sdW1ucy5yaWdodENvbHVtbnMuZm9yRWFjaCgoY29sKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5yZWluaXRpYWxpemVDb2x1bW4oY29sKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0ZnJvemVuQ29sdW1uT2Zmc2V0KGNvbHVtbil7XG5cdFx0dmFyIG9mZnNldCA9IGZhbHNlO1xuXG5cdFx0aWYoY29sdW1uLm1vZHVsZXMuZnJvemVuKXtcblx0XHRcdG9mZnNldCA9IGNvbHVtbi5tb2R1bGVzLmZyb3plbi5tYXJnaW5WYWx1ZTsgXG5cblx0XHRcdGlmKGNvbHVtbi5tb2R1bGVzLmZyb3plbi5wb3NpdGlvbiA9PT0gXCJsZWZ0XCIpe1xuXHRcdFx0XHRvZmZzZXQgKz0gY29sdW1uLmdldFdpZHRoKCkgLSAzO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRpZihvZmZzZXQpe1xuXHRcdFx0XHRcdG9mZnNldCAtPSAzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9mZnNldCAhPT0gZmFsc2UgPyBvZmZzZXQgKyBcInB4XCIgOiBmYWxzZTtcblx0fVxuXHRcblx0cmVpbml0aWFsaXplQ29sdW1uKGNvbHVtbil7XG5cdFx0dmFyIGZyb3plbk9mZnNldCA9IHRoaXMuZnJvemVuQ29sdW1uT2Zmc2V0KGNvbHVtbik7XG5cdFx0XG5cdFx0Y29sdW1uLmNlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcblx0XHRcdGlmKGNlbGwubW9kdWxlcy5yZXNpemUgJiYgY2VsbC5tb2R1bGVzLnJlc2l6ZS5oYW5kbGVFbCl7XG5cdFx0XHRcdGlmKGZyb3plbk9mZnNldCl7XG5cdFx0XHRcdFx0Y2VsbC5tb2R1bGVzLnJlc2l6ZS5oYW5kbGVFbC5zdHlsZVtjb2x1bW4ubW9kdWxlcy5mcm96ZW4ucG9zaXRpb25dID0gZnJvemVuT2Zmc2V0O1xuXHRcdFx0XHRcdGNlbGwubW9kdWxlcy5yZXNpemUuaGFuZGxlRWwuc3R5bGVbXCJ6LWluZGV4XCJdID0gMTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGNlbGwuZWxlbWVudC5hZnRlcihjZWxsLm1vZHVsZXMucmVzaXplLmhhbmRsZUVsKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0XHRpZihjb2x1bW4ubW9kdWxlcy5yZXNpemUgJiYgY29sdW1uLm1vZHVsZXMucmVzaXplLmhhbmRsZUVsKXtcblx0XHRcdGlmKGZyb3plbk9mZnNldCl7XG5cdFx0XHRcdGNvbHVtbi5tb2R1bGVzLnJlc2l6ZS5oYW5kbGVFbC5zdHlsZVtjb2x1bW4ubW9kdWxlcy5mcm96ZW4ucG9zaXRpb25dID0gZnJvemVuT2Zmc2V0O1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRjb2x1bW4uZWxlbWVudC5hZnRlcihjb2x1bW4ubW9kdWxlcy5yZXNpemUuaGFuZGxlRWwpO1xuXHRcdH1cblx0fVxuXHRcblx0aW5pdGlhbGl6ZUNvbHVtbih0eXBlLCBjb21wb25lbnQsIGNvbHVtbiwgZWxlbWVudCl7XG5cdFx0dmFyIHNlbGYgPSB0aGlzLFxuXHRcdHZhcmlhYmxlSGVpZ2h0ID0gZmFsc2UsXG5cdFx0bW9kZSA9IGNvbHVtbi5kZWZpbml0aW9uLnJlc2l6YWJsZSxcblx0XHRjb25maWcgPSB7fSxcblx0XHRuZWFyZXN0Q29sdW1uID0gY29sdW1uLmdldExhc3RDb2x1bW4oKTtcblx0XHRcblx0XHQvL3NldCBjb2x1bW4gcmVzaXplIG1vZGVcblx0XHRpZih0eXBlID09PSBcImhlYWRlclwiKXtcblx0XHRcdHZhcmlhYmxlSGVpZ2h0ID0gY29sdW1uLmRlZmluaXRpb24uZm9ybWF0dGVyID09IFwidGV4dGFyZWFcIiB8fCBjb2x1bW4uZGVmaW5pdGlvbi52YXJpYWJsZUhlaWdodDtcblx0XHRcdGNvbmZpZyA9IHt2YXJpYWJsZUhlaWdodDp2YXJpYWJsZUhlaWdodH07XG5cdFx0fVxuXHRcdFxuXHRcdGlmKChtb2RlID09PSB0cnVlIHx8IG1vZGUgPT0gdHlwZSkgJiYgdGhpcy5fY2hlY2tSZXNpemFiaWxpdHkobmVhcmVzdENvbHVtbikpe1xuXHRcdFx0XG5cdFx0XHR2YXIgaGFuZGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuXHRcdFx0aGFuZGxlLmNsYXNzTmFtZSA9IFwidGFidWxhdG9yLWNvbC1yZXNpemUtaGFuZGxlXCI7XG5cdFx0XHRcblx0XHRcdGhhbmRsZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSl7XG5cdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0dmFyIGhhbmRsZURvd24gPSBmdW5jdGlvbihlKXtcblx0XHRcdFx0c2VsZi5zdGFydENvbHVtbiA9IGNvbHVtbjtcblx0XHRcdFx0c2VsZi5pbml0aWFsTmV4dENvbHVtbiA9IHNlbGYubmV4dENvbHVtbiA9IG5lYXJlc3RDb2x1bW4ubmV4dENvbHVtbigpO1xuXHRcdFx0XHRzZWxmLl9tb3VzZURvd24oZSwgbmVhcmVzdENvbHVtbiwgaGFuZGxlKTtcblx0XHRcdH07XG5cdFx0XHRcblx0XHRcdGhhbmRsZS5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGhhbmRsZURvd24pO1xuXHRcdFx0aGFuZGxlLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIGhhbmRsZURvd24sIHtwYXNzaXZlOiB0cnVlfSk7XG5cdFx0XHRcblx0XHRcdC8vcmVzaXplIGNvbHVtbiBvbiAgZG91YmxlIGNsaWNrXG5cdFx0XHRoYW5kbGUuYWRkRXZlbnRMaXN0ZW5lcihcImRibGNsaWNrXCIsIChlKSA9PiB7XG5cdFx0XHRcdHZhciBvbGRXaWR0aCA9IG5lYXJlc3RDb2x1bW4uZ2V0V2lkdGgoKTtcblx0XHRcdFx0XG5cdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdG5lYXJlc3RDb2x1bW4ucmVpbml0aWFsaXplV2lkdGgodHJ1ZSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihvbGRXaWR0aCAhPT0gbmVhcmVzdENvbHVtbi5nZXRXaWR0aCgpKXtcblx0XHRcdFx0XHRzZWxmLmRpc3BhdGNoKFwiY29sdW1uLXJlc2l6ZWRcIiwgbmVhcmVzdENvbHVtbik7XG5cdFx0XHRcdFx0c2VsZi50YWJsZS5leHRlcm5hbEV2ZW50cy5kaXNwYXRjaChcImNvbHVtblJlc2l6ZWRcIiwgbmVhcmVzdENvbHVtbi5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHRpZihjb2x1bW4ubW9kdWxlcy5mcm96ZW4pe1xuXHRcdFx0XHRoYW5kbGUuc3R5bGUucG9zaXRpb24gPSBcInN0aWNreVwiO1xuXHRcdFx0XHRoYW5kbGUuc3R5bGVbY29sdW1uLm1vZHVsZXMuZnJvemVuLnBvc2l0aW9uXSA9IHRoaXMuZnJvemVuQ29sdW1uT2Zmc2V0KGNvbHVtbik7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGNvbmZpZy5oYW5kbGVFbCA9IGhhbmRsZTtcblx0XHRcdFxuXHRcdFx0aWYoZWxlbWVudC5wYXJlbnROb2RlICYmIGNvbHVtbi52aXNpYmxlKXtcblx0XHRcdFx0ZWxlbWVudC5hZnRlcihoYW5kbGUpO1x0XHRcdFxuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRjb21wb25lbnQubW9kdWxlcy5yZXNpemUgPSBjb25maWc7XG5cdH1cblx0XG5cdGRlSW5pdGlhbGl6ZUNvbHVtbihjb2x1bW4pe1xuXHRcdHRoaXMuZGVJbml0aWFsaXplQ29tcG9uZW50KGNvbHVtbik7XG5cdFx0XG5cdFx0Y29sdW1uLmNlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcblx0XHRcdHRoaXMuZGVJbml0aWFsaXplQ29tcG9uZW50KGNlbGwpO1xuXHRcdH0pO1xuXHR9XG5cdFxuXHRkZUluaXRpYWxpemVDb21wb25lbnQoY29tcG9uZW50KXtcblx0XHR2YXIgaGFuZGxlRWw7XG5cdFx0XG5cdFx0aWYoY29tcG9uZW50Lm1vZHVsZXMucmVzaXplKXtcblx0XHRcdGhhbmRsZUVsID0gY29tcG9uZW50Lm1vZHVsZXMucmVzaXplLmhhbmRsZUVsO1xuXHRcdFx0XG5cdFx0XHRpZihoYW5kbGVFbCAmJiBoYW5kbGVFbC5wYXJlbnRFbGVtZW50KXtcblx0XHRcdFx0aGFuZGxlRWwucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChoYW5kbGVFbCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRyZXNpemVIYW5kbGUoY29tcG9uZW50LCBoZWlnaHQpe1xuXHRcdGlmKGNvbXBvbmVudC5tb2R1bGVzLnJlc2l6ZSAmJiBjb21wb25lbnQubW9kdWxlcy5yZXNpemUuaGFuZGxlRWwpe1xuXHRcdFx0Y29tcG9uZW50Lm1vZHVsZXMucmVzaXplLmhhbmRsZUVsLnN0eWxlLmhlaWdodCA9IGhlaWdodDtcblx0XHR9XG5cdH1cblx0XG5cdF9jaGVja1Jlc2l6YWJpbGl0eShjb2x1bW4pe1xuXHRcdHJldHVybiBjb2x1bW4uZGVmaW5pdGlvbi5yZXNpemFibGU7XG5cdH1cblx0XG5cdF9tb3VzZURvd24oZSwgY29sdW1uLCBoYW5kbGUpe1xuXHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRcblx0XHRzZWxmLnRhYmxlLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1ibG9jay1zZWxlY3RcIik7XG5cdFx0XG5cdFx0ZnVuY3Rpb24gbW91c2VNb3ZlKGUpe1xuXHRcdFx0dmFyIHggPSB0eXBlb2YgZS5zY3JlZW5YID09PSBcInVuZGVmaW5lZFwiID8gZS50b3VjaGVzWzBdLnNjcmVlblggOiBlLnNjcmVlblgsXG5cdFx0XHRzdGFydERpZmYgPSB4IC0gc2VsZi5zdGFydFgsXG5cdFx0XHRtb3ZlRGlmZiA9IHggLSBzZWxmLmxhdGVzdFgsXG5cdFx0XHRibG9ja2VkQmVmb3JlLCBibG9ja2VkQWZ0ZXI7XG5cdFx0XHRcblx0XHRcdHNlbGYubGF0ZXN0WCA9IHg7XG5cdFx0XHRcblx0XHRcdGlmKHNlbGYudGFibGUucnRsKXtcblx0XHRcdFx0c3RhcnREaWZmID0gLXN0YXJ0RGlmZjtcblx0XHRcdFx0bW92ZURpZmYgPSAtbW92ZURpZmY7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGJsb2NrZWRCZWZvcmUgPSBjb2x1bW4ud2lkdGggPT0gY29sdW1uLm1pbldpZHRoIHx8IGNvbHVtbi53aWR0aCA9PSBjb2x1bW4ubWF4V2lkdGg7XG5cdFx0XHRcblx0XHRcdGNvbHVtbi5zZXRXaWR0aChzZWxmLnN0YXJ0V2lkdGggKyBzdGFydERpZmYpO1xuXHRcdFx0XG5cdFx0XHRibG9ja2VkQWZ0ZXIgPSBjb2x1bW4ud2lkdGggPT0gY29sdW1uLm1pbldpZHRoIHx8IGNvbHVtbi53aWR0aCA9PSBjb2x1bW4ubWF4V2lkdGg7XG5cdFx0XHRcblx0XHRcdGlmKG1vdmVEaWZmIDwgMCl7XG5cdFx0XHRcdHNlbGYubmV4dENvbHVtbiA9IHNlbGYuaW5pdGlhbE5leHRDb2x1bW47XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKHNlbGYudGFibGUub3B0aW9ucy5yZXNpemFibGVDb2x1bW5GaXQgJiYgc2VsZi5uZXh0Q29sdW1uICYmICEoYmxvY2tlZEJlZm9yZSAmJiBibG9ja2VkQWZ0ZXIpKXtcblx0XHRcdFx0bGV0IGNvbFdpZHRoID0gc2VsZi5uZXh0Q29sdW1uLmdldFdpZHRoKCk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihtb3ZlRGlmZiA+IDApe1xuXHRcdFx0XHRcdGlmKGNvbFdpZHRoIDw9IHNlbGYubmV4dENvbHVtbi5taW5XaWR0aCl7XG5cdFx0XHRcdFx0XHRzZWxmLm5leHRDb2x1bW4gPSBzZWxmLm5leHRDb2x1bW4ubmV4dENvbHVtbigpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0aWYoc2VsZi5uZXh0Q29sdW1uKXtcblx0XHRcdFx0XHRzZWxmLm5leHRDb2x1bW4uc2V0V2lkdGgoc2VsZi5uZXh0Q29sdW1uLmdldFdpZHRoKCkgLSBtb3ZlRGlmZik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0c2VsZi50YWJsZS5jb2x1bW5NYW5hZ2VyLnJlcmVuZGVyQ29sdW1ucyh0cnVlKTtcblx0XHRcdFxuXHRcdFx0aWYoIXNlbGYudGFibGUuYnJvd3NlclNsb3cgJiYgY29sdW1uLm1vZHVsZXMucmVzaXplICYmIGNvbHVtbi5tb2R1bGVzLnJlc2l6ZS52YXJpYWJsZUhlaWdodCl7XG5cdFx0XHRcdGNvbHVtbi5jaGVja0NlbGxIZWlnaHRzKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdGZ1bmN0aW9uIG1vdXNlVXAoZSl7XG5cdFx0XHRcblx0XHRcdC8vYmxvY2sgZWRpdG9yIGZyb20gdGFraW5nIGFjdGlvbiB3aGlsZSByZXNpemluZyBpcyB0YWtpbmcgcGxhY2Vcblx0XHRcdGlmKHNlbGYuc3RhcnRDb2x1bW4ubW9kdWxlcy5lZGl0KXtcblx0XHRcdFx0c2VsZi5zdGFydENvbHVtbi5tb2R1bGVzLmVkaXQuYmxvY2tlZCA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihzZWxmLnRhYmxlLmJyb3dzZXJTbG93ICYmIGNvbHVtbi5tb2R1bGVzLnJlc2l6ZSAmJiBjb2x1bW4ubW9kdWxlcy5yZXNpemUudmFyaWFibGVIZWlnaHQpe1xuXHRcdFx0XHRjb2x1bW4uY2hlY2tDZWxsSGVpZ2h0cygpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIG1vdXNlVXApO1xuXHRcdFx0ZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIG1vdXNlTW92ZSk7XG5cdFx0XHRcblx0XHRcdGhhbmRsZS5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIG1vdXNlTW92ZSk7XG5cdFx0XHRoYW5kbGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIG1vdXNlVXApO1xuXHRcdFx0XG5cdFx0XHRzZWxmLnRhYmxlLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcInRhYnVsYXRvci1ibG9jay1zZWxlY3RcIik7XG5cdFx0XHRcblx0XHRcdGlmKHNlbGYuc3RhcnRXaWR0aCAhPT0gY29sdW1uLmdldFdpZHRoKCkpe1xuXHRcdFx0XHRzZWxmLnRhYmxlLmNvbHVtbk1hbmFnZXIudmVydGljYWxBbGlnbkhlYWRlcnMoKTtcblxuXHRcdFx0XHRzZWxmLmRpc3BhdGNoKFwiY29sdW1uLXJlc2l6ZWRcIiwgY29sdW1uKTtcblx0XHRcdFx0c2VsZi50YWJsZS5leHRlcm5hbEV2ZW50cy5kaXNwYXRjaChcImNvbHVtblJlc2l6ZWRcIiwgY29sdW1uLmdldENvbXBvbmVudCgpKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTsgLy9wcmV2ZW50IHJlc2l6ZSBmcm9tIGludGVyZmVyaW5nIHdpdGggbW92YWJsZSBjb2x1bW5zXG5cdFx0XG5cdFx0Ly9ibG9jayBlZGl0b3IgZnJvbSB0YWtpbmcgYWN0aW9uIHdoaWxlIHJlc2l6aW5nIGlzIHRha2luZyBwbGFjZVxuXHRcdGlmKHNlbGYuc3RhcnRDb2x1bW4ubW9kdWxlcy5lZGl0KXtcblx0XHRcdHNlbGYuc3RhcnRDb2x1bW4ubW9kdWxlcy5lZGl0LmJsb2NrZWQgPSB0cnVlO1xuXHRcdH1cblx0XHRcblx0XHRzZWxmLnN0YXJ0WCA9IHR5cGVvZiBlLnNjcmVlblggPT09IFwidW5kZWZpbmVkXCIgPyBlLnRvdWNoZXNbMF0uc2NyZWVuWCA6IGUuc2NyZWVuWDtcblx0XHRzZWxmLmxhdGVzdFggPSBzZWxmLnN0YXJ0WDtcblx0XHRzZWxmLnN0YXJ0V2lkdGggPSBjb2x1bW4uZ2V0V2lkdGgoKTtcblx0XHRcblx0XHRkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgbW91c2VNb3ZlKTtcblx0XHRkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIG1vdXNlVXApO1xuXHRcdGhhbmRsZS5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIG1vdXNlTW92ZSwge3Bhc3NpdmU6IHRydWV9KTtcblx0XHRoYW5kbGUuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIG1vdXNlVXApO1xuXHR9XG59XG5cblJlc2l6ZUNvbHVtbnMubW9kdWxlTmFtZSA9IFwicmVzaXplQ29sdW1uc1wiO1xuXG5jbGFzcyBSZXNpemVSb3dzIGV4dGVuZHMgTW9kdWxle1xuXG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cblx0XHR0aGlzLnN0YXJ0Q29sdW1uID0gZmFsc2U7XG5cdFx0dGhpcy5zdGFydFkgPSBmYWxzZTtcblx0XHR0aGlzLnN0YXJ0SGVpZ2h0ID0gZmFsc2U7XG5cdFx0dGhpcy5oYW5kbGUgPSBudWxsO1xuXHRcdHRoaXMucHJldkhhbmRsZSA9IG51bGw7XG5cblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJyZXNpemFibGVSb3dzXCIsIGZhbHNlKTsgLy9yZXNpemFibGUgcm93c1xuXHR9XG5cblx0aW5pdGlhbGl6ZSgpe1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5yZXNpemFibGVSb3dzKXtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWxheW91dC1hZnRlclwiLCB0aGlzLmluaXRpYWxpemVSb3cuYmluZCh0aGlzKSk7XG5cdFx0fVxuXHR9XG5cblx0aW5pdGlhbGl6ZVJvdyhyb3cpe1xuXHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHRyb3dFbCA9IHJvdy5nZXRFbGVtZW50KCk7XG5cblx0XHR2YXIgaGFuZGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdFx0aGFuZGxlLmNsYXNzTmFtZSA9IFwidGFidWxhdG9yLXJvdy1yZXNpemUtaGFuZGxlXCI7XG5cblx0XHR2YXIgcHJldkhhbmRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHRcdHByZXZIYW5kbGUuY2xhc3NOYW1lID0gXCJ0YWJ1bGF0b3Itcm93LXJlc2l6ZS1oYW5kbGUgcHJldlwiO1xuXG5cdFx0aGFuZGxlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbihlKXtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fSk7XG5cblx0XHR2YXIgaGFuZGxlRG93biA9IGZ1bmN0aW9uKGUpe1xuXHRcdFx0c2VsZi5zdGFydFJvdyA9IHJvdztcblx0XHRcdHNlbGYuX21vdXNlRG93bihlLCByb3csIGhhbmRsZSk7XG5cdFx0fTtcblxuXHRcdGhhbmRsZS5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGhhbmRsZURvd24pO1xuXHRcdGhhbmRsZS5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCBoYW5kbGVEb3duLCB7cGFzc2l2ZTogdHJ1ZX0pO1xuXG5cdFx0cHJldkhhbmRsZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSl7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH0pO1xuXG5cdFx0dmFyIHByZXZIYW5kbGVEb3duID0gIGZ1bmN0aW9uKGUpe1xuXHRcdFx0dmFyIHByZXZSb3cgPSBzZWxmLnRhYmxlLnJvd01hbmFnZXIucHJldkRpc3BsYXlSb3cocm93KTtcblxuXHRcdFx0aWYocHJldlJvdyl7XG5cdFx0XHRcdHNlbGYuc3RhcnRSb3cgPSBwcmV2Um93O1xuXHRcdFx0XHRzZWxmLl9tb3VzZURvd24oZSwgcHJldlJvdywgcHJldkhhbmRsZSk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHByZXZIYW5kbGUuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLHByZXZIYW5kbGVEb3duKTtcblx0XHRwcmV2SGFuZGxlLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIscHJldkhhbmRsZURvd24sIHtwYXNzaXZlOiB0cnVlfSk7XG5cblx0XHRyb3dFbC5hcHBlbmRDaGlsZChoYW5kbGUpO1xuXHRcdHJvd0VsLmFwcGVuZENoaWxkKHByZXZIYW5kbGUpO1xuXHR9XG5cblx0X21vdXNlRG93bihlLCByb3csIGhhbmRsZSl7XG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0c2VsZi50YWJsZS5lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItYmxvY2stc2VsZWN0XCIpO1xuXG5cdFx0ZnVuY3Rpb24gbW91c2VNb3ZlKGUpe1xuXHRcdFx0cm93LnNldEhlaWdodChzZWxmLnN0YXJ0SGVpZ2h0ICsgKCh0eXBlb2YgZS5zY3JlZW5ZID09PSBcInVuZGVmaW5lZFwiID8gZS50b3VjaGVzWzBdLnNjcmVlblkgOiBlLnNjcmVlblkpIC0gc2VsZi5zdGFydFkpKTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBtb3VzZVVwKGUpe1xuXG5cdFx0XHQvLyAvL2Jsb2NrIGVkaXRvciBmcm9tIHRha2luZyBhY3Rpb24gd2hpbGUgcmVzaXppbmcgaXMgdGFraW5nIHBsYWNlXG5cdFx0XHQvLyBpZihzZWxmLnN0YXJ0Q29sdW1uLm1vZHVsZXMuZWRpdCl7XG5cdFx0XHQvLyBcdHNlbGYuc3RhcnRDb2x1bW4ubW9kdWxlcy5lZGl0LmJsb2NrZWQgPSBmYWxzZTtcblx0XHRcdC8vIH1cblxuXHRcdFx0ZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBtb3VzZU1vdmUpO1xuXHRcdFx0ZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIG1vdXNlTW92ZSk7XG5cblx0XHRcdGhhbmRsZS5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIG1vdXNlTW92ZSk7XG5cdFx0XHRoYW5kbGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIG1vdXNlVXApO1xuXG5cdFx0XHRzZWxmLnRhYmxlLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcInRhYnVsYXRvci1ibG9jay1zZWxlY3RcIik7XG5cblx0XHRcdHNlbGYuZGlzcGF0Y2hFeHRlcm5hbChcInJvd1Jlc2l6ZWRcIiwgcm93LmdldENvbXBvbmVudCgpKTtcblx0XHR9XG5cblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpOyAvL3ByZXZlbnQgcmVzaXplIGZyb20gaW50ZXJmZXJpbmcgd2l0aCBtb3ZhYmxlIGNvbHVtbnNcblxuXHRcdC8vYmxvY2sgZWRpdG9yIGZyb20gdGFraW5nIGFjdGlvbiB3aGlsZSByZXNpemluZyBpcyB0YWtpbmcgcGxhY2Vcblx0XHQvLyBpZihzZWxmLnN0YXJ0Q29sdW1uLm1vZHVsZXMuZWRpdCl7XG5cdFx0Ly8gXHRzZWxmLnN0YXJ0Q29sdW1uLm1vZHVsZXMuZWRpdC5ibG9ja2VkID0gdHJ1ZTtcblx0XHQvLyB9XG5cblx0XHRzZWxmLnN0YXJ0WSA9IHR5cGVvZiBlLnNjcmVlblkgPT09IFwidW5kZWZpbmVkXCIgPyBlLnRvdWNoZXNbMF0uc2NyZWVuWSA6IGUuc2NyZWVuWTtcblx0XHRzZWxmLnN0YXJ0SGVpZ2h0ID0gcm93LmdldEhlaWdodCgpO1xuXG5cdFx0ZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIG1vdXNlTW92ZSk7XG5cdFx0ZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBtb3VzZVVwKTtcblxuXHRcdGhhbmRsZS5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIG1vdXNlTW92ZSwge3Bhc3NpdmU6IHRydWV9KTtcblx0XHRoYW5kbGUuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIG1vdXNlVXApO1xuXHR9XG59XG5cblJlc2l6ZVJvd3MubW9kdWxlTmFtZSA9IFwicmVzaXplUm93c1wiO1xuXG5jbGFzcyBSZXNpemVUYWJsZSBleHRlbmRzIE1vZHVsZXtcblx0XG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cdFx0XG5cdFx0dGhpcy5iaW5kaW5nID0gZmFsc2U7XG5cdFx0dGhpcy52aXNpYmlsaXR5T2JzZXJ2ZXIgPSBmYWxzZTtcblx0XHR0aGlzLnJlc2l6ZU9ic2VydmVyID0gZmFsc2U7XG5cdFx0dGhpcy5jb250YWluZXJPYnNlcnZlciA9IGZhbHNlO1xuXHRcdFxuXHRcdHRoaXMudGFibGVIZWlnaHQgPSAwO1xuXHRcdHRoaXMudGFibGVXaWR0aCA9IDA7XG5cdFx0dGhpcy5jb250YWluZXJIZWlnaHQgPSAwO1xuXHRcdHRoaXMuY29udGFpbmVyV2lkdGggPSAwO1xuXHRcdFxuXHRcdHRoaXMuYXV0b1Jlc2l6ZSA9IGZhbHNlO1xuXHRcdFxuXHRcdHRoaXMudmlzaWJsZSA9IGZhbHNlO1xuXHRcdFxuXHRcdHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblx0XHR0aGlzLmluaXRpYWxSZWRyYXcgPSBmYWxzZTtcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJhdXRvUmVzaXplXCIsIHRydWUpOyAvL2F1dG8gcmVzaXplIHRhYmxlXG5cdH1cblx0XG5cdGluaXRpYWxpemUoKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuYXV0b1Jlc2l6ZSl7XG5cdFx0XHR2YXIgdGFibGUgPSB0aGlzLnRhYmxlLFxuXHRcdFx0dGFibGVTdHlsZTtcblx0XHRcdFxuXHRcdFx0dGhpcy50YWJsZUhlaWdodCA9IHRhYmxlLmVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuXHRcdFx0dGhpcy50YWJsZVdpZHRoID0gdGFibGUuZWxlbWVudC5jbGllbnRXaWR0aDtcblx0XHRcdFxuXHRcdFx0aWYodGFibGUuZWxlbWVudC5wYXJlbnROb2RlKXtcblx0XHRcdFx0dGhpcy5jb250YWluZXJIZWlnaHQgPSB0YWJsZS5lbGVtZW50LnBhcmVudE5vZGUuY2xpZW50SGVpZ2h0O1xuXHRcdFx0XHR0aGlzLmNvbnRhaW5lcldpZHRoID0gdGFibGUuZWxlbWVudC5wYXJlbnROb2RlLmNsaWVudFdpZHRoO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZih0eXBlb2YgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIFJlc2l6ZU9ic2VydmVyICE9PSBcInVuZGVmaW5lZFwiICYmIHRhYmxlLnJvd01hbmFnZXIuZ2V0UmVuZGVyTW9kZSgpID09PSBcInZpcnR1YWxcIil7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLmluaXRpYWxpemVWaXNpYmlsaXR5T2JzZXJ2ZXIoKTtcblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMuYXV0b1Jlc2l6ZSA9IHRydWU7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLnJlc2l6ZU9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKChlbnRyeSkgPT4ge1xuXHRcdFx0XHRcdGlmKCF0YWJsZS5icm93c2VyTW9iaWxlIHx8ICh0YWJsZS5icm93c2VyTW9iaWxlICYmIXRhYmxlLm1vZHVsZXMuZWRpdC5jdXJyZW50Q2VsbCkpe1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHR2YXIgbm9kZUhlaWdodCA9IE1hdGguZmxvb3IoZW50cnlbMF0uY29udGVudFJlY3QuaGVpZ2h0KTtcblx0XHRcdFx0XHRcdHZhciBub2RlV2lkdGggPSBNYXRoLmZsb29yKGVudHJ5WzBdLmNvbnRlbnRSZWN0LndpZHRoKTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0aWYodGhpcy50YWJsZUhlaWdodCAhPSBub2RlSGVpZ2h0IHx8IHRoaXMudGFibGVXaWR0aCAhPSBub2RlV2lkdGgpe1xuXHRcdFx0XHRcdFx0XHR0aGlzLnRhYmxlSGVpZ2h0ID0gbm9kZUhlaWdodDtcblx0XHRcdFx0XHRcdFx0dGhpcy50YWJsZVdpZHRoID0gbm9kZVdpZHRoO1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0aWYodGFibGUuZWxlbWVudC5wYXJlbnROb2RlKXtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmNvbnRhaW5lckhlaWdodCA9IHRhYmxlLmVsZW1lbnQucGFyZW50Tm9kZS5jbGllbnRIZWlnaHQ7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5jb250YWluZXJXaWR0aCA9IHRhYmxlLmVsZW1lbnQucGFyZW50Tm9kZS5jbGllbnRXaWR0aDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0dGhpcy5yZWRyYXdUYWJsZSgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLnJlc2l6ZU9ic2VydmVyLm9ic2VydmUodGFibGUuZWxlbWVudCk7XG5cdFx0XHRcdFxuXHRcdFx0XHR0YWJsZVN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGFibGUuZWxlbWVudCk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih0aGlzLnRhYmxlLmVsZW1lbnQucGFyZW50Tm9kZSAmJiAhdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmZpeGVkSGVpZ2h0ICYmICh0YWJsZVN0eWxlLmdldFByb3BlcnR5VmFsdWUoXCJtYXgtaGVpZ2h0XCIpIHx8IHRhYmxlU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShcIm1pbi1oZWlnaHRcIikpKXtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHR0aGlzLmNvbnRhaW5lck9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKChlbnRyeSkgPT4ge1xuXHRcdFx0XHRcdFx0aWYoIXRhYmxlLmJyb3dzZXJNb2JpbGUgfHwgKHRhYmxlLmJyb3dzZXJNb2JpbGUgJiYhdGFibGUubW9kdWxlcy5lZGl0LmN1cnJlbnRDZWxsKSl7XG5cdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHR2YXIgbm9kZUhlaWdodCA9IE1hdGguZmxvb3IoZW50cnlbMF0uY29udGVudFJlY3QuaGVpZ2h0KTtcblx0XHRcdFx0XHRcdFx0dmFyIG5vZGVXaWR0aCA9IE1hdGguZmxvb3IoZW50cnlbMF0uY29udGVudFJlY3Qud2lkdGgpO1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0aWYodGhpcy5jb250YWluZXJIZWlnaHQgIT0gbm9kZUhlaWdodCB8fCB0aGlzLmNvbnRhaW5lcldpZHRoICE9IG5vZGVXaWR0aCl7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5jb250YWluZXJIZWlnaHQgPSBub2RlSGVpZ2h0O1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuY29udGFpbmVyV2lkdGggPSBub2RlV2lkdGg7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy50YWJsZUhlaWdodCA9IHRhYmxlLmVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMudGFibGVXaWR0aCA9IHRhYmxlLmVsZW1lbnQuY2xpZW50V2lkdGg7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdHRoaXMucmVkcmF3VGFibGUoKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHR0aGlzLmNvbnRhaW5lck9ic2VydmVyLm9ic2VydmUodGhpcy50YWJsZS5lbGVtZW50LnBhcmVudE5vZGUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLnN1YnNjcmliZShcInRhYmxlLXJlc2l6ZVwiLCB0aGlzLnRhYmxlUmVzaXplZC5iaW5kKHRoaXMpKTtcblx0XHRcdFx0XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMuYmluZGluZyA9IGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0aWYoIXRhYmxlLmJyb3dzZXJNb2JpbGUgfHwgKHRhYmxlLmJyb3dzZXJNb2JpbGUgJiYgIXRhYmxlLm1vZHVsZXMuZWRpdC5jdXJyZW50Q2VsbCkpe1xuXHRcdFx0XHRcdFx0dGFibGUuY29sdW1uTWFuYWdlci5yZXJlbmRlckNvbHVtbnModHJ1ZSk7XG5cdFx0XHRcdFx0XHR0YWJsZS5yZWRyYXcoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHRcdFxuXHRcdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLmJpbmRpbmcpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInRhYmxlLWRlc3Ryb3lcIiwgdGhpcy5jbGVhckJpbmRpbmdzLmJpbmQodGhpcykpO1xuXHRcdH1cblx0fVxuXHRcblx0aW5pdGlhbGl6ZVZpc2liaWxpdHlPYnNlcnZlcigpe1xuXHRcdHRoaXMudmlzaWJpbGl0eU9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKChlbnRyaWVzKSA9PiB7XG5cdFx0XHR0aGlzLnZpc2libGUgPSBlbnRyaWVzWzBdLmlzSW50ZXJzZWN0aW5nO1xuXHRcdFx0XG5cdFx0XHRpZighdGhpcy5pbml0aWFsaXplZCl7XG5cdFx0XHRcdHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuXHRcdFx0XHR0aGlzLmluaXRpYWxSZWRyYXcgPSAhdGhpcy52aXNpYmxlO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRpZih0aGlzLnZpc2libGUpe1xuXHRcdFx0XHRcdHRoaXMucmVkcmF3VGFibGUodGhpcy5pbml0aWFsUmVkcmF3KTtcblx0XHRcdFx0XHR0aGlzLmluaXRpYWxSZWRyYXcgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdHRoaXMudmlzaWJpbGl0eU9ic2VydmVyLm9ic2VydmUodGhpcy50YWJsZS5lbGVtZW50KTtcblx0fVxuXHRcblx0cmVkcmF3VGFibGUoZm9yY2Upe1xuXHRcdGlmKHRoaXMuaW5pdGlhbGl6ZWQgJiYgdGhpcy52aXNpYmxlKXtcblx0XHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5yZXJlbmRlckNvbHVtbnModHJ1ZSk7XG5cdFx0XHR0aGlzLnRhYmxlLnJlZHJhdyhmb3JjZSk7XG5cdFx0fVxuXHR9XG5cdFxuXHR0YWJsZVJlc2l6ZWQoKXtcblx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIucmVkcmF3KCk7XG5cdH1cblx0XG5cdGNsZWFyQmluZGluZ3MoKXtcblx0XHRpZih0aGlzLmJpbmRpbmcpe1xuXHRcdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5iaW5kaW5nKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodGhpcy5yZXNpemVPYnNlcnZlcil7XG5cdFx0XHR0aGlzLnJlc2l6ZU9ic2VydmVyLnVub2JzZXJ2ZSh0aGlzLnRhYmxlLmVsZW1lbnQpO1xuXHRcdH1cblx0XHRcblx0XHRpZih0aGlzLnZpc2liaWxpdHlPYnNlcnZlcil7XG5cdFx0XHR0aGlzLnZpc2liaWxpdHlPYnNlcnZlci51bm9ic2VydmUodGhpcy50YWJsZS5lbGVtZW50KTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodGhpcy5jb250YWluZXJPYnNlcnZlcil7XG5cdFx0XHR0aGlzLmNvbnRhaW5lck9ic2VydmVyLnVub2JzZXJ2ZSh0aGlzLnRhYmxlLmVsZW1lbnQucGFyZW50Tm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cblJlc2l6ZVRhYmxlLm1vZHVsZU5hbWUgPSBcInJlc2l6ZVRhYmxlXCI7XG5cbmNsYXNzIFJlc3BvbnNpdmVMYXlvdXQgZXh0ZW5kcyBNb2R1bGV7XG5cblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblxuXHRcdHRoaXMuY29sdW1ucyA9IFtdO1xuXHRcdHRoaXMuaGlkZGVuQ29sdW1ucyA9IFtdO1xuXHRcdHRoaXMubW9kZSA9IFwiXCI7XG5cdFx0dGhpcy5pbmRleCA9IDA7XG5cdFx0dGhpcy5jb2xsYXBzZUZvcm1hdHRlciA9IFtdO1xuXHRcdHRoaXMuY29sbGFwc2VTdGFydE9wZW4gPSB0cnVlO1xuXHRcdHRoaXMuY29sbGFwc2VIYW5kbGVDb2x1bW4gPSBmYWxzZTtcblxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInJlc3BvbnNpdmVMYXlvdXRcIiwgZmFsc2UpOyAvL3Jlc3BvbnNpdmUgbGF5b3V0IGZsYWdzXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicmVzcG9uc2l2ZUxheW91dENvbGxhcHNlU3RhcnRPcGVuXCIsIHRydWUpOyAvL3N0YXJ0IHNob3dpbmcgY29sbGFwc2VkIGRhdGFcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJyZXNwb25zaXZlTGF5b3V0Q29sbGFwc2VVc2VGb3JtYXR0ZXJzXCIsIHRydWUpOyAvL3Jlc3BvbnNpdmUgbGF5b3V0IGNvbGxhcHNlIGZvcm1hdHRlclxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInJlc3BvbnNpdmVMYXlvdXRDb2xsYXBzZUZvcm1hdHRlclwiLCBmYWxzZSk7IC8vcmVzcG9uc2l2ZSBsYXlvdXQgY29sbGFwc2UgZm9ybWF0dGVyXG5cblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwicmVzcG9uc2l2ZVwiKTtcblx0fVxuXG5cdC8vZ2VuZXJhdGUgcmVzcG9uc2l2ZSBjb2x1bW5zIGxpc3Rcblx0aW5pdGlhbGl6ZSgpe1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5yZXNwb25zaXZlTGF5b3V0KXtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWxheW91dFwiLCB0aGlzLmluaXRpYWxpemVDb2x1bW4uYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1zaG93XCIsIHRoaXMudXBkYXRlQ29sdW1uVmlzaWJpbGl0eS5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWhpZGVcIiwgdGhpcy51cGRhdGVDb2x1bW5WaXNpYmlsaXR5LmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW5zLWxvYWRlZFwiLCB0aGlzLmluaXRpYWxpemVSZXNwb25zaXZpdHkuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1tb3ZlZFwiLCB0aGlzLmluaXRpYWxpemVSZXNwb25zaXZpdHkuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1hZGRcIiwgdGhpcy5pbml0aWFsaXplUmVzcG9uc2l2aXR5LmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tZGVsZXRlXCIsIHRoaXMuaW5pdGlhbGl6ZVJlc3BvbnNpdml0eS5iaW5kKHRoaXMpKTtcblxuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJ0YWJsZS1yZWRyYXdpbmdcIiwgdGhpcy50YWJsZVJlZHJhdy5iaW5kKHRoaXMpKTtcblx0XHRcdFxuXHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnJlc3BvbnNpdmVMYXlvdXQgPT09IFwiY29sbGFwc2VcIil7XG5cdFx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWRhdGEtY2hhbmdlZFwiLCB0aGlzLmdlbmVyYXRlQ29sbGFwc2VkUm93Q29udGVudC5iaW5kKHRoaXMpKTtcblx0XHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctaW5pdFwiLCB0aGlzLmluaXRpYWxpemVSb3cuYmluZCh0aGlzKSk7XG5cdFx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWxheW91dFwiLCB0aGlzLmxheW91dFJvdy5iaW5kKHRoaXMpKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHR0YWJsZVJlZHJhdyhmb3JjZSl7XG5cdFx0aWYoW1wiZml0Q29sdW1uc1wiLCBcImZpdERhdGFTdHJldGNoXCJdLmluZGV4T2YodGhpcy5sYXlvdXRNb2RlKCkpID09PSAtMSl7XG5cdFx0XHRpZighZm9yY2Upe1xuXHRcdFx0XHR0aGlzLnVwZGF0ZSgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGluaXRpYWxpemVSZXNwb25zaXZpdHkoKXtcblx0XHR2YXIgY29sdW1ucyA9IFtdO1xuXG5cdFx0dGhpcy5tb2RlID0gdGhpcy50YWJsZS5vcHRpb25zLnJlc3BvbnNpdmVMYXlvdXQ7XG5cdFx0dGhpcy5jb2xsYXBzZUZvcm1hdHRlciA9IHRoaXMudGFibGUub3B0aW9ucy5yZXNwb25zaXZlTGF5b3V0Q29sbGFwc2VGb3JtYXR0ZXIgfHwgdGhpcy5mb3JtYXRDb2xsYXBzZWREYXRhO1xuXHRcdHRoaXMuY29sbGFwc2VTdGFydE9wZW4gPSB0aGlzLnRhYmxlLm9wdGlvbnMucmVzcG9uc2l2ZUxheW91dENvbGxhcHNlU3RhcnRPcGVuO1xuXHRcdHRoaXMuaGlkZGVuQ29sdW1ucyA9IFtdO1xuXG5cdFx0Ly9kZXRlcm1pbmUgbGV2ZWwgb2YgcmVzcG9uc2l2aXR5IGZvciBlYWNoIGNvbHVtblxuXHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5jb2x1bW5zQnlJbmRleC5mb3JFYWNoKChjb2x1bW4sIGkpID0+IHtcblx0XHRcdGlmKGNvbHVtbi5tb2R1bGVzLnJlc3BvbnNpdmUpe1xuXHRcdFx0XHRpZihjb2x1bW4ubW9kdWxlcy5yZXNwb25zaXZlLm9yZGVyICYmIGNvbHVtbi5tb2R1bGVzLnJlc3BvbnNpdmUudmlzaWJsZSl7XG5cdFx0XHRcdFx0Y29sdW1uLm1vZHVsZXMucmVzcG9uc2l2ZS5pbmRleCA9IGk7XG5cdFx0XHRcdFx0Y29sdW1ucy5wdXNoKGNvbHVtbik7XG5cblx0XHRcdFx0XHRpZighY29sdW1uLnZpc2libGUgJiYgdGhpcy5tb2RlID09PSBcImNvbGxhcHNlXCIpe1xuXHRcdFx0XHRcdFx0dGhpcy5oaWRkZW5Db2x1bW5zLnB1c2goY29sdW1uKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdC8vc29ydCBsaXN0IGJ5IHJlc3BvbnNpdml0eVxuXHRcdGNvbHVtbnMgPSBjb2x1bW5zLnJldmVyc2UoKTtcblx0XHRjb2x1bW5zID0gY29sdW1ucy5zb3J0KChhLCBiKSA9PiB7XG5cdFx0XHR2YXIgZGlmZiA9IGIubW9kdWxlcy5yZXNwb25zaXZlLm9yZGVyIC0gYS5tb2R1bGVzLnJlc3BvbnNpdmUub3JkZXI7XG5cdFx0XHRyZXR1cm4gZGlmZiB8fCAoYi5tb2R1bGVzLnJlc3BvbnNpdmUuaW5kZXggLSBhLm1vZHVsZXMucmVzcG9uc2l2ZS5pbmRleCk7XG5cdFx0fSk7XG5cblx0XHR0aGlzLmNvbHVtbnMgPSBjb2x1bW5zO1xuXG5cdFx0aWYodGhpcy5tb2RlID09PSBcImNvbGxhcHNlXCIpe1xuXHRcdFx0dGhpcy5nZW5lcmF0ZUNvbGxhcHNlZENvbnRlbnQoKTtcblx0XHR9XG5cblx0XHQvL2Fzc2lnbiBjb2xsYXBzZSBjb2x1bW5cblx0XHRmb3IgKGxldCBjb2wgb2YgdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmNvbHVtbnNCeUluZGV4KXtcblx0XHRcdGlmKGNvbC5kZWZpbml0aW9uLmZvcm1hdHRlciA9PSBcInJlc3BvbnNpdmVDb2xsYXBzZVwiKXtcblx0XHRcdFx0dGhpcy5jb2xsYXBzZUhhbmRsZUNvbHVtbiA9IGNvbDtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYodGhpcy5jb2xsYXBzZUhhbmRsZUNvbHVtbil7XG5cdFx0XHRpZih0aGlzLmhpZGRlbkNvbHVtbnMubGVuZ3RoKXtcblx0XHRcdFx0dGhpcy5jb2xsYXBzZUhhbmRsZUNvbHVtbi5zaG93KCk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMuY29sbGFwc2VIYW5kbGVDb2x1bW4uaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vZGVmaW5lIGxheW91dCBpbmZvcm1hdGlvblxuXHRpbml0aWFsaXplQ29sdW1uKGNvbHVtbil7XG5cdFx0dmFyIGRlZiA9IGNvbHVtbi5nZXREZWZpbml0aW9uKCk7XG5cblx0XHRjb2x1bW4ubW9kdWxlcy5yZXNwb25zaXZlID0ge29yZGVyOiB0eXBlb2YgZGVmLnJlc3BvbnNpdmUgPT09IFwidW5kZWZpbmVkXCIgPyAxIDogZGVmLnJlc3BvbnNpdmUsIHZpc2libGU6ZGVmLnZpc2libGUgPT09IGZhbHNlID8gZmFsc2UgOiB0cnVlfTtcblx0fVxuXG5cdGluaXRpYWxpemVSb3cocm93KXtcblx0XHR2YXIgZWw7XG5cblx0XHRpZihyb3cudHlwZSAhPT0gXCJjYWxjXCIpe1xuXHRcdFx0ZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdFx0ZWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1yZXNwb25zaXZlLWNvbGxhcHNlXCIpO1xuXG5cdFx0XHRyb3cubW9kdWxlcy5yZXNwb25zaXZlTGF5b3V0ID0ge1xuXHRcdFx0XHRlbGVtZW50OmVsLFxuXHRcdFx0XHRvcGVuOnRoaXMuY29sbGFwc2VTdGFydE9wZW4sXG5cdFx0XHR9O1xuXG5cdFx0XHRpZighdGhpcy5jb2xsYXBzZVN0YXJ0T3Blbil7XG5cdFx0XHRcdGVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0bGF5b3V0Um93KHJvdyl7XG5cdFx0dmFyIHJvd0VsID0gcm93LmdldEVsZW1lbnQoKTtcblxuXHRcdGlmKHJvdy5tb2R1bGVzLnJlc3BvbnNpdmVMYXlvdXQpe1xuXHRcdFx0cm93RWwuYXBwZW5kQ2hpbGQocm93Lm1vZHVsZXMucmVzcG9uc2l2ZUxheW91dC5lbGVtZW50KTtcblx0XHRcdHRoaXMuZ2VuZXJhdGVDb2xsYXBzZWRSb3dDb250ZW50KHJvdyk7XG5cdFx0fVxuXHR9XG5cblx0Ly91cGRhdGUgY29sdW1uIHZpc2liaWxpdHlcblx0dXBkYXRlQ29sdW1uVmlzaWJpbGl0eShjb2x1bW4sIHJlc3BvbnNpdmVUb2dnbGUpe1xuXHRcdGlmKCFyZXNwb25zaXZlVG9nZ2xlICYmIGNvbHVtbi5tb2R1bGVzLnJlc3BvbnNpdmUpe1xuXHRcdFx0Y29sdW1uLm1vZHVsZXMucmVzcG9uc2l2ZS52aXNpYmxlID0gY29sdW1uLnZpc2libGU7XG5cdFx0XHR0aGlzLmluaXRpYWxpemVSZXNwb25zaXZpdHkoKTtcblx0XHR9XG5cdH1cblxuXHRoaWRlQ29sdW1uKGNvbHVtbil7XG5cdFx0dmFyIGNvbENvdW50ID0gdGhpcy5oaWRkZW5Db2x1bW5zLmxlbmd0aDtcblxuXHRcdGNvbHVtbi5oaWRlKGZhbHNlLCB0cnVlKTtcblxuXHRcdGlmKHRoaXMubW9kZSA9PT0gXCJjb2xsYXBzZVwiKXtcblx0XHRcdHRoaXMuaGlkZGVuQ29sdW1ucy51bnNoaWZ0KGNvbHVtbik7XG5cdFx0XHR0aGlzLmdlbmVyYXRlQ29sbGFwc2VkQ29udGVudCgpO1xuXG5cdFx0XHRpZih0aGlzLmNvbGxhcHNlSGFuZGxlQ29sdW1uICYmICFjb2xDb3VudCl7XG5cdFx0XHRcdHRoaXMuY29sbGFwc2VIYW5kbGVDb2x1bW4uc2hvdygpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHNob3dDb2x1bW4oY29sdW1uKXtcblx0XHR2YXIgaW5kZXg7XG5cblx0XHRjb2x1bW4uc2hvdyhmYWxzZSwgdHJ1ZSk7XG5cdFx0Ly9zZXQgY29sdW1uIHdpZHRoIHRvIHByZXZlbnQgY2FsY3VsYXRpb24gbG9vcHMgb24gdW5pbml0aWFsaXplZCBjb2x1bW5zXG5cdFx0Y29sdW1uLnNldFdpZHRoKGNvbHVtbi5nZXRXaWR0aCgpKTtcblxuXHRcdGlmKHRoaXMubW9kZSA9PT0gXCJjb2xsYXBzZVwiKXtcblx0XHRcdGluZGV4ID0gdGhpcy5oaWRkZW5Db2x1bW5zLmluZGV4T2YoY29sdW1uKTtcblxuXHRcdFx0aWYoaW5kZXggPiAtMSl7XG5cdFx0XHRcdHRoaXMuaGlkZGVuQ29sdW1ucy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmdlbmVyYXRlQ29sbGFwc2VkQ29udGVudCgpO1xuXG5cdFx0XHRpZih0aGlzLmNvbGxhcHNlSGFuZGxlQ29sdW1uICYmICF0aGlzLmhpZGRlbkNvbHVtbnMubGVuZ3RoKXtcblx0XHRcdFx0dGhpcy5jb2xsYXBzZUhhbmRsZUNvbHVtbi5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly9yZWRyYXcgY29sdW1ucyB0byBmaXQgc3BhY2Vcblx0dXBkYXRlKCl7XG5cdFx0dmFyIHdvcmtpbmcgPSB0cnVlO1xuXG5cdFx0d2hpbGUod29ya2luZyl7XG5cblx0XHRcdGxldCB3aWR0aCA9IHRoaXMudGFibGUubW9kdWxlcy5sYXlvdXQuZ2V0TW9kZSgpID09IFwiZml0Q29sdW1uc1wiID8gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmdldEZsZXhCYXNlV2lkdGgoKSA6IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5nZXRXaWR0aCgpO1xuXG5cdFx0XHRsZXQgZGlmZiA9ICh0aGlzLnRhYmxlLm9wdGlvbnMuaGVhZGVyVmlzaWJsZSA/IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5lbGVtZW50LmNsaWVudFdpZHRoIDogdGhpcy50YWJsZS5lbGVtZW50LmNsaWVudFdpZHRoKSAtIHdpZHRoO1xuXG5cdFx0XHRpZihkaWZmIDwgMCl7XG5cdFx0XHRcdC8vdGFibGUgaXMgdG9vIHdpZGVcblx0XHRcdFx0bGV0IGNvbHVtbiA9IHRoaXMuY29sdW1uc1t0aGlzLmluZGV4XTtcblxuXHRcdFx0XHRpZihjb2x1bW4pe1xuXHRcdFx0XHRcdHRoaXMuaGlkZUNvbHVtbihjb2x1bW4pO1xuXHRcdFx0XHRcdHRoaXMuaW5kZXggKys7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHR3b3JraW5nID0gZmFsc2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0fWVsc2Uge1xuXG5cdFx0XHRcdC8vdGFibGUgaGFzIHNwYXJlIHNwYWNlXG5cdFx0XHRcdGxldCBjb2x1bW4gPSB0aGlzLmNvbHVtbnNbdGhpcy5pbmRleCAtMV07XG5cblx0XHRcdFx0aWYoY29sdW1uKXtcblx0XHRcdFx0XHRpZihkaWZmID4gMCl7XG5cdFx0XHRcdFx0XHRpZihkaWZmID49IGNvbHVtbi5nZXRXaWR0aCgpKXtcblx0XHRcdFx0XHRcdFx0dGhpcy5zaG93Q29sdW1uKGNvbHVtbik7XG5cdFx0XHRcdFx0XHRcdHRoaXMuaW5kZXggLS07XG5cdFx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHdvcmtpbmcgPSBmYWxzZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHR3b3JraW5nID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0d29ya2luZyA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmKCF0aGlzLnRhYmxlLnJvd01hbmFnZXIuYWN0aXZlUm93c0NvdW50KXtcblx0XHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnJlbmRlckVtcHR5U2Nyb2xsKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Z2VuZXJhdGVDb2xsYXBzZWRDb250ZW50KCl7XG5cdFx0dmFyIHJvd3MgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0RGlzcGxheVJvd3MoKTtcblxuXHRcdHJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHR0aGlzLmdlbmVyYXRlQ29sbGFwc2VkUm93Q29udGVudChyb3cpO1xuXHRcdH0pO1xuXHR9XG5cblx0Z2VuZXJhdGVDb2xsYXBzZWRSb3dDb250ZW50KHJvdyl7XG5cdFx0dmFyIGVsLCBjb250ZW50cztcblxuXHRcdGlmKHJvdy5tb2R1bGVzLnJlc3BvbnNpdmVMYXlvdXQpe1xuXHRcdFx0ZWwgPSByb3cubW9kdWxlcy5yZXNwb25zaXZlTGF5b3V0LmVsZW1lbnQ7XG5cblx0XHRcdHdoaWxlKGVsLmZpcnN0Q2hpbGQpIGVsLnJlbW92ZUNoaWxkKGVsLmZpcnN0Q2hpbGQpO1xuXG5cdFx0XHRjb250ZW50cyA9IHRoaXMuY29sbGFwc2VGb3JtYXR0ZXIodGhpcy5nZW5lcmF0ZUNvbGxhcHNlZFJvd0RhdGEocm93KSk7XG5cdFx0XHRpZihjb250ZW50cyl7XG5cdFx0XHRcdGVsLmFwcGVuZENoaWxkKGNvbnRlbnRzKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRnZW5lcmF0ZUNvbGxhcHNlZFJvd0RhdGEocm93KXtcblx0XHR2YXIgZGF0YSA9IHJvdy5nZXREYXRhKCksXG5cdFx0b3V0cHV0ID0gW10sXG5cdFx0bW9ja0NlbGxDb21wb25lbnQ7XG5cblx0XHR0aGlzLmhpZGRlbkNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG5cdFx0XHR2YXIgdmFsdWUgPSBjb2x1bW4uZ2V0RmllbGRWYWx1ZShkYXRhKTtcblxuXHRcdFx0aWYoY29sdW1uLmRlZmluaXRpb24udGl0bGUgJiYgY29sdW1uLmZpZWxkKXtcblx0XHRcdFx0aWYoY29sdW1uLm1vZHVsZXMuZm9ybWF0ICYmIHRoaXMudGFibGUub3B0aW9ucy5yZXNwb25zaXZlTGF5b3V0Q29sbGFwc2VVc2VGb3JtYXR0ZXJzKXtcblxuXHRcdFx0XHRcdG1vY2tDZWxsQ29tcG9uZW50ID0ge1xuXHRcdFx0XHRcdFx0dmFsdWU6ZmFsc2UsXG5cdFx0XHRcdFx0XHRkYXRhOnt9LFxuXHRcdFx0XHRcdFx0Z2V0VmFsdWU6ZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdGdldERhdGE6ZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0Z2V0VHlwZTpmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gXCJjZWxsXCI7XG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0Z2V0RWxlbWVudDpmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRnZXRSb3c6ZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJvdy5nZXRDb21wb25lbnQoKTtcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRnZXRDb2x1bW46ZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGNvbHVtbi5nZXRDb21wb25lbnQoKTtcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRnZXRUYWJsZTooKSA9PiB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLnRhYmxlO1xuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0ZnVuY3Rpb24gb25SZW5kZXJlZChjYWxsYmFjayl7XG5cdFx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHtcblx0XHRcdFx0XHRcdGZpZWxkOiBjb2x1bW4uZmllbGQsXG5cdFx0XHRcdFx0XHR0aXRsZTogY29sdW1uLmRlZmluaXRpb24udGl0bGUsXG5cdFx0XHRcdFx0XHR2YWx1ZTogY29sdW1uLm1vZHVsZXMuZm9ybWF0LmZvcm1hdHRlci5jYWxsKHRoaXMudGFibGUubW9kdWxlcy5mb3JtYXQsIG1vY2tDZWxsQ29tcG9uZW50LCBjb2x1bW4ubW9kdWxlcy5mb3JtYXQucGFyYW1zLCBvblJlbmRlcmVkKVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goe1xuXHRcdFx0XHRcdFx0ZmllbGQ6IGNvbHVtbi5maWVsZCxcblx0XHRcdFx0XHRcdHRpdGxlOiBjb2x1bW4uZGVmaW5pdGlvbi50aXRsZSxcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cblx0Zm9ybWF0Q29sbGFwc2VkRGF0YShkYXRhKXtcblx0XHR2YXIgbGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0YWJsZVwiKTtcblxuXHRcdGRhdGEuZm9yRWFjaChmdW5jdGlvbihpdGVtKXtcblx0XHRcdHZhciByb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidHJcIik7XG5cdFx0XHR2YXIgdGl0bGVEYXRhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpO1xuXHRcdFx0dmFyIHZhbHVlRGF0YSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcblx0XHRcdHZhciBub2RlX2NvbnRlbnQ7XG5cblx0XHRcdHZhciB0aXRsZUhpZ2hsaWdodCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHJvbmdcIik7XG5cdFx0XHR0aXRsZURhdGEuYXBwZW5kQ2hpbGQodGl0bGVIaWdobGlnaHQpO1xuXHRcdFx0dGhpcy5sYW5nQmluZChcImNvbHVtbnN8XCIgKyBpdGVtLmZpZWxkLCBmdW5jdGlvbih0ZXh0KXtcblx0XHRcdFx0dGl0bGVIaWdobGlnaHQuaW5uZXJIVE1MID0gdGV4dCB8fCBpdGVtLnRpdGxlO1xuXHRcdFx0fSk7XG5cblx0XHRcdGlmKGl0ZW0udmFsdWUgaW5zdGFuY2VvZiBOb2RlKXtcblx0XHRcdFx0bm9kZV9jb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcdFx0bm9kZV9jb250ZW50LmFwcGVuZENoaWxkKGl0ZW0udmFsdWUpO1xuXHRcdFx0XHR2YWx1ZURhdGEuYXBwZW5kQ2hpbGQobm9kZV9jb250ZW50KTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dmFsdWVEYXRhLmlubmVySFRNTCA9IGl0ZW0udmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdHJvdy5hcHBlbmRDaGlsZCh0aXRsZURhdGEpO1xuXHRcdFx0cm93LmFwcGVuZENoaWxkKHZhbHVlRGF0YSk7XG5cdFx0XHRsaXN0LmFwcGVuZENoaWxkKHJvdyk7XG5cdFx0fSwgdGhpcyk7XG5cblx0XHRyZXR1cm4gT2JqZWN0LmtleXMoZGF0YSkubGVuZ3RoID8gbGlzdCA6IFwiXCI7XG5cdH1cbn1cblxuUmVzcG9uc2l2ZUxheW91dC5tb2R1bGVOYW1lID0gXCJyZXNwb25zaXZlTGF5b3V0XCI7XG5cbmNsYXNzIFNlbGVjdFJvdyBleHRlbmRzIE1vZHVsZXtcblx0XG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cdFx0XG5cdFx0dGhpcy5zZWxlY3RpbmcgPSBmYWxzZTsgLy9mbGFnIHNlbGVjdGluZyBpbiBwcm9ncmVzc1xuXHRcdHRoaXMubGFzdENsaWNrZWRSb3cgPSBmYWxzZTsgLy9sYXN0IGNsaWNrZWQgcm93XG5cdFx0dGhpcy5zZWxlY3RQcmV2ID0gW107IC8vaG9sZCBwcmV2aW91c2x5IHNlbGVjdGVkIGVsZW1lbnQgZm9yIGRyYWcgZHJvcCBzZWxlY3Rpb25cblx0XHR0aGlzLnNlbGVjdGVkUm93cyA9IFtdOyAvL2hvbGQgc2VsZWN0ZWQgcm93c1xuXHRcdHRoaXMuaGVhZGVyQ2hlY2tib3hFbGVtZW50ID0gbnVsbDsgLy8gaG9sZCBoZWFkZXIgc2VsZWN0IGVsZW1lbnRcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJzZWxlY3RhYmxlXCIsIFwiaGlnaGxpZ2h0XCIpOyAvL2hpZ2hsaWdodCByb3dzIG9uIGhvdmVyXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwic2VsZWN0YWJsZVJhbmdlTW9kZVwiLCBcImRyYWdcIik7ICAvL2hpZ2hsaWdodCByb3dzIG9uIGhvdmVyXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwic2VsZWN0YWJsZVJvbGxpbmdTZWxlY3Rpb25cIiwgdHJ1ZSk7IC8vcm9sbCBzZWxlY3Rpb24gb25jZSBtYXhpbXVtIG51bWJlciBvZiBzZWxlY3RhYmxlIHJvd3MgaXMgcmVhY2hlZFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInNlbGVjdGFibGVQZXJzaXN0ZW5jZVwiLCB0cnVlKTsgLy8gbWFpbnRhaW4gc2VsZWN0aW9uIHdoZW4gdGFibGUgdmlldyBpcyB1cGRhdGVkXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwic2VsZWN0YWJsZUNoZWNrXCIsIGZ1bmN0aW9uKGRhdGEsIHJvdyl7cmV0dXJuIHRydWU7fSk7IC8vY2hlY2sgd2hldGhlciByb3cgaXMgc2VsZWN0YWJsZVxuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwic2VsZWN0Um93XCIsIHRoaXMuc2VsZWN0Um93cy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcImRlc2VsZWN0Um93XCIsIHRoaXMuZGVzZWxlY3RSb3dzLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwidG9nZ2xlU2VsZWN0Um93XCIsIHRoaXMudG9nZ2xlUm93LmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiZ2V0U2VsZWN0ZWRSb3dzXCIsIHRoaXMuZ2V0U2VsZWN0ZWRSb3dzLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiZ2V0U2VsZWN0ZWREYXRhXCIsIHRoaXMuZ2V0U2VsZWN0ZWREYXRhLmJpbmQodGhpcykpO1xuXHRcdFxuXHRcdC8vcmVnaXN0ZXIgY29tcG9uZW50IGZ1bmN0aW9uc1xuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcInJvd1wiLCBcInNlbGVjdFwiLCB0aGlzLnNlbGVjdFJvd3MuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwicm93XCIsIFwiZGVzZWxlY3RcIiwgdGhpcy5kZXNlbGVjdFJvd3MuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwicm93XCIsIFwidG9nZ2xlU2VsZWN0XCIsIHRoaXMudG9nZ2xlUm93LmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcInJvd1wiLCBcImlzU2VsZWN0ZWRcIiwgdGhpcy5pc1Jvd1NlbGVjdGVkLmJpbmQodGhpcykpO1xuXHR9XG5cdFxuXHRpbml0aWFsaXplKCl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnNlbGVjdGFibGUgIT09IGZhbHNlKXtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWluaXRcIiwgdGhpcy5pbml0aWFsaXplUm93LmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctZGVsZXRpbmdcIiwgdGhpcy5yb3dEZWxldGVkLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3dzLXdpcGVcIiwgdGhpcy5jbGVhclNlbGVjdGlvbkRhdGEuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInJvd3MtcmV0cmlldmVcIiwgdGhpcy5yb3dSZXRyaWV2ZS5iaW5kKHRoaXMpKTtcblx0XHRcdFxuXHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnNlbGVjdGFibGUgJiYgIXRoaXMudGFibGUub3B0aW9ucy5zZWxlY3RhYmxlUGVyc2lzdGVuY2Upe1xuXHRcdFx0XHR0aGlzLnN1YnNjcmliZShcImRhdGEtcmVmcmVzaGluZ1wiLCB0aGlzLmRlc2VsZWN0Um93cy5iaW5kKHRoaXMpKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdHJvd1JldHJpZXZlKHR5cGUsIHByZXZWYWx1ZSl7XG5cdFx0cmV0dXJuIHR5cGUgPT09IFwic2VsZWN0ZWRcIiA/IHRoaXMuc2VsZWN0ZWRSb3dzIDogcHJldlZhbHVlO1xuXHR9XG5cdFxuXHRyb3dEZWxldGVkKHJvdyl7XG5cdFx0dGhpcy5fZGVzZWxlY3RSb3cocm93LCB0cnVlKTtcblx0fVxuXHRcblx0Y2xlYXJTZWxlY3Rpb25EYXRhKHNpbGVudCl7XG5cdFx0dmFyIHByZXZTZWxlY3RlZCA9IHRoaXMuc2VsZWN0ZWRSb3dzLmxlbmd0aDtcblxuXHRcdHRoaXMuc2VsZWN0aW5nID0gZmFsc2U7XG5cdFx0dGhpcy5sYXN0Q2xpY2tlZFJvdyA9IGZhbHNlO1xuXHRcdHRoaXMuc2VsZWN0UHJldiA9IFtdO1xuXHRcdHRoaXMuc2VsZWN0ZWRSb3dzID0gW107XG5cdFx0XG5cdFx0aWYocHJldlNlbGVjdGVkICYmIHNpbGVudCAhPT0gdHJ1ZSl7XG5cdFx0XHR0aGlzLl9yb3dTZWxlY3Rpb25DaGFuZ2VkKCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRpbml0aWFsaXplUm93KHJvdyl7XG5cdFx0dmFyIHNlbGYgPSB0aGlzLFxuXHRcdGVsZW1lbnQgPSByb3cuZ2V0RWxlbWVudCgpO1xuXHRcdFxuXHRcdC8vIHRyaWdnZXIgZW5kIG9mIHJvdyBzZWxlY3Rpb25cblx0XHR2YXIgZW5kU2VsZWN0ID0gZnVuY3Rpb24oKXtcblx0XHRcdFxuXHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpe1xuXHRcdFx0XHRzZWxmLnNlbGVjdGluZyA9IGZhbHNlO1xuXHRcdFx0fSwgNTApO1xuXHRcdFx0XG5cdFx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIGVuZFNlbGVjdCk7XG5cdFx0fTtcblx0XHRcblx0XHRyb3cubW9kdWxlcy5zZWxlY3QgPSB7c2VsZWN0ZWQ6ZmFsc2V9O1xuXHRcdFxuXHRcdC8vc2V0IHJvdyBzZWxlY3Rpb24gY2xhc3Ncblx0XHRpZihzZWxmLmNoZWNrUm93U2VsZWN0YWJpbGl0eShyb3cpKXtcblx0XHRcdGVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1zZWxlY3RhYmxlXCIpO1xuXHRcdFx0ZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwidGFidWxhdG9yLXVuc2VsZWN0YWJsZVwiKTtcblx0XHRcdFxuXHRcdFx0aWYoc2VsZi50YWJsZS5vcHRpb25zLnNlbGVjdGFibGUgJiYgc2VsZi50YWJsZS5vcHRpb25zLnNlbGVjdGFibGUgIT0gXCJoaWdobGlnaHRcIil7XG5cdFx0XHRcdGlmKHNlbGYudGFibGUub3B0aW9ucy5zZWxlY3RhYmxlUmFuZ2VNb2RlID09PSBcImNsaWNrXCIpe1xuXHRcdFx0XHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuaGFuZGxlQ29tcGxleFJvd0NsaWNrLmJpbmQodGhpcywgcm93KSk7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbihlKXtcblx0XHRcdFx0XHRcdGlmKCFzZWxmLnRhYmxlLm1vZEV4aXN0cyhcImVkaXRcIikgfHwgIXNlbGYudGFibGUubW9kdWxlcy5lZGl0LmdldEN1cnJlbnRDZWxsKCkpe1xuXHRcdFx0XHRcdFx0XHRzZWxmLnRhYmxlLl9jbGVhclNlbGVjdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRpZighc2VsZi5zZWxlY3Rpbmcpe1xuXHRcdFx0XHRcdFx0XHRzZWxmLnRvZ2dsZVJvdyhyb3cpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBmdW5jdGlvbihlKXtcblx0XHRcdFx0XHRcdGlmKGUuc2hpZnRLZXkpe1xuXHRcdFx0XHRcdFx0XHRzZWxmLnRhYmxlLl9jbGVhclNlbGVjdGlvbigpO1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0c2VsZi5zZWxlY3RpbmcgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0c2VsZi5zZWxlY3RQcmV2ID0gW107XG5cdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIGVuZFNlbGVjdCk7XG5cdFx0XHRcdFx0XHRcdGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIGVuZFNlbGVjdCk7XG5cdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRzZWxmLnRvZ2dsZVJvdyhyb3cpO1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwgZnVuY3Rpb24oZSl7XG5cdFx0XHRcdFx0XHRpZihzZWxmLnNlbGVjdGluZyl7XG5cdFx0XHRcdFx0XHRcdHNlbGYudGFibGUuX2NsZWFyU2VsZWN0aW9uKCk7XG5cdFx0XHRcdFx0XHRcdHNlbGYudG9nZ2xlUm93KHJvdyk7XG5cdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRpZihzZWxmLnNlbGVjdFByZXZbMV0gPT0gcm93KXtcblx0XHRcdFx0XHRcdFx0XHRzZWxmLnRvZ2dsZVJvdyhzZWxmLnNlbGVjdFByZXZbMF0pO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdXRcIiwgZnVuY3Rpb24oZSl7XG5cdFx0XHRcdFx0XHRpZihzZWxmLnNlbGVjdGluZyl7XG5cdFx0XHRcdFx0XHRcdHNlbGYudGFibGUuX2NsZWFyU2VsZWN0aW9uKCk7XG5cdFx0XHRcdFx0XHRcdHNlbGYuc2VsZWN0UHJldi51bnNoaWZ0KHJvdyk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdH1lbHNlIHtcblx0XHRcdGVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci11bnNlbGVjdGFibGVcIik7XG5cdFx0XHRlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJ0YWJ1bGF0b3Itc2VsZWN0YWJsZVwiKTtcblx0XHR9XG5cdH1cblx0XG5cdGhhbmRsZUNvbXBsZXhSb3dDbGljayhyb3csIGUpe1xuXHRcdGlmKGUuc2hpZnRLZXkpe1xuXHRcdFx0dGhpcy50YWJsZS5fY2xlYXJTZWxlY3Rpb24oKTtcblx0XHRcdHRoaXMubGFzdENsaWNrZWRSb3cgPSB0aGlzLmxhc3RDbGlja2VkUm93IHx8IHJvdztcblx0XHRcdFxuXHRcdFx0dmFyIGxhc3RDbGlja2VkUm93SWR4ID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldERpc3BsYXlSb3dJbmRleCh0aGlzLmxhc3RDbGlja2VkUm93KTtcblx0XHRcdHZhciByb3dJZHggPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0RGlzcGxheVJvd0luZGV4KHJvdyk7XG5cdFx0XHRcblx0XHRcdHZhciBmcm9tUm93SWR4ID0gbGFzdENsaWNrZWRSb3dJZHggPD0gcm93SWR4ID8gbGFzdENsaWNrZWRSb3dJZHggOiByb3dJZHg7XG5cdFx0XHR2YXIgdG9Sb3dJZHggPSBsYXN0Q2xpY2tlZFJvd0lkeCA+PSByb3dJZHggPyBsYXN0Q2xpY2tlZFJvd0lkeCA6IHJvd0lkeDtcblx0XHRcdFxuXHRcdFx0dmFyIHJvd3MgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0RGlzcGxheVJvd3MoKS5zbGljZSgwKTtcblx0XHRcdHZhciB0b2dnbGVkUm93cyA9IHJvd3Muc3BsaWNlKGZyb21Sb3dJZHgsIHRvUm93SWR4IC0gZnJvbVJvd0lkeCArIDEpO1xuXHRcdFx0XG5cdFx0XHRpZihlLmN0cmxLZXkgfHwgZS5tZXRhS2V5KXtcblx0XHRcdFx0dG9nZ2xlZFJvd3MuZm9yRWFjaCgodG9nZ2xlZFJvdyk9Pntcblx0XHRcdFx0XHRpZih0b2dnbGVkUm93ICE9PSB0aGlzLmxhc3RDbGlja2VkUm93KXtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnNlbGVjdGFibGUgIT09IHRydWUgJiYgIXRoaXMuaXNSb3dTZWxlY3RlZChyb3cpKXtcblx0XHRcdFx0XHRcdFx0aWYodGhpcy5zZWxlY3RlZFJvd3MubGVuZ3RoIDwgdGhpcy50YWJsZS5vcHRpb25zLnNlbGVjdGFibGUpe1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMudG9nZ2xlUm93KHRvZ2dsZWRSb3cpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMudG9nZ2xlUm93KHRvZ2dsZWRSb3cpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHRcdHRoaXMubGFzdENsaWNrZWRSb3cgPSByb3c7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMuZGVzZWxlY3RSb3dzKHVuZGVmaW5lZCwgdHJ1ZSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuc2VsZWN0YWJsZSAhPT0gdHJ1ZSl7XG5cdFx0XHRcdFx0aWYodG9nZ2xlZFJvd3MubGVuZ3RoID4gdGhpcy50YWJsZS5vcHRpb25zLnNlbGVjdGFibGUpe1xuXHRcdFx0XHRcdFx0dG9nZ2xlZFJvd3MgPSB0b2dnbGVkUm93cy5zbGljZSgwLCB0aGlzLnRhYmxlLm9wdGlvbnMuc2VsZWN0YWJsZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLnNlbGVjdFJvd3ModG9nZ2xlZFJvd3MpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy50YWJsZS5fY2xlYXJTZWxlY3Rpb24oKTtcblx0XHR9XG5cdFx0ZWxzZSBpZihlLmN0cmxLZXkgfHwgZS5tZXRhS2V5KXtcblx0XHRcdHRoaXMudG9nZ2xlUm93KHJvdyk7XG5cdFx0XHR0aGlzLmxhc3RDbGlja2VkUm93ID0gcm93O1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuZGVzZWxlY3RSb3dzKHVuZGVmaW5lZCwgdHJ1ZSk7XG5cdFx0XHR0aGlzLnNlbGVjdFJvd3Mocm93KTtcblx0XHRcdHRoaXMubGFzdENsaWNrZWRSb3cgPSByb3c7XG5cdFx0fVxuXHR9XG5cblx0Y2hlY2tSb3dTZWxlY3RhYmlsaXR5KHJvdyl7XG5cdFx0aWYocm93ICYmIHJvdy50eXBlID09PSBcInJvd1wiKXtcblx0XHRcdHJldHVybiB0aGlzLnRhYmxlLm9wdGlvbnMuc2VsZWN0YWJsZUNoZWNrLmNhbGwodGhpcy50YWJsZSwgcm93LmdldENvbXBvbmVudCgpKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0XG5cdC8vdG9nZ2xlIHJvdyBzZWxlY3Rpb25cblx0dG9nZ2xlUm93KHJvdyl7XG5cdFx0aWYodGhpcy5jaGVja1Jvd1NlbGVjdGFiaWxpdHkocm93KSl7XG5cdFx0XHRpZihyb3cubW9kdWxlcy5zZWxlY3QgJiYgcm93Lm1vZHVsZXMuc2VsZWN0LnNlbGVjdGVkKXtcblx0XHRcdFx0dGhpcy5fZGVzZWxlY3RSb3cocm93KTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5fc2VsZWN0Um93KHJvdyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHQvL3NlbGVjdCBhIG51bWJlciBvZiByb3dzXG5cdHNlbGVjdFJvd3Mocm93cyl7XG5cdFx0dmFyIGNoYW5nZXMgPSBbXSwgXG5cdFx0cm93TWF0Y2gsIGNoYW5nZTtcblx0XHRcblx0XHRzd2l0Y2godHlwZW9mIHJvd3Mpe1xuXHRcdFx0Y2FzZSBcInVuZGVmaW5lZFwiOlxuXHRcdFx0XHRyb3dNYXRjaCA9IHRoaXMudGFibGUucm93TWFuYWdlci5yb3dzO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0XHRyb3dNYXRjaCA9IHRoaXMudGFibGUucm93TWFuYWdlci5maW5kUm93KHJvd3MpO1xuXHRcdFx0XG5cdFx0XHRcdGlmKCFyb3dNYXRjaCl7XG5cdFx0XHRcdFx0cm93TWF0Y2ggPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0Um93cyhyb3dzKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0cm93TWF0Y2ggPSByb3dzO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cblx0XHRpZihBcnJheS5pc0FycmF5KHJvd01hdGNoKSl7XG5cdFx0XHRpZihyb3dNYXRjaC5sZW5ndGgpe1xuXHRcdFx0XHRyb3dNYXRjaC5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdFx0XHRjaGFuZ2UgPSB0aGlzLl9zZWxlY3RSb3cocm93LCB0cnVlLCB0cnVlKTtcblxuXHRcdFx0XHRcdGlmKGNoYW5nZSl7XG5cdFx0XHRcdFx0XHRjaGFuZ2VzLnB1c2goY2hhbmdlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHRoaXMuX3Jvd1NlbGVjdGlvbkNoYW5nZWQoZmFsc2UsIGNoYW5nZXMpO1xuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGlmKHJvd01hdGNoKXtcblx0XHRcdFx0dGhpcy5fc2VsZWN0Um93KHJvd01hdGNoLCBmYWxzZSwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0fVx0XG5cdH1cblx0XG5cdC8vc2VsZWN0IGFuIGluZGl2aWR1YWwgcm93XG5cdF9zZWxlY3RSb3cocm93SW5mbywgc2lsZW50LCBmb3JjZSl7XG5cdFx0Ly9oYW5kbGUgbWF4IHJvdyBjb3VudFxuXHRcdGlmKCFpc05hTih0aGlzLnRhYmxlLm9wdGlvbnMuc2VsZWN0YWJsZSkgJiYgdGhpcy50YWJsZS5vcHRpb25zLnNlbGVjdGFibGUgIT09IHRydWUgJiYgIWZvcmNlKXtcblx0XHRcdGlmKHRoaXMuc2VsZWN0ZWRSb3dzLmxlbmd0aCA+PSB0aGlzLnRhYmxlLm9wdGlvbnMuc2VsZWN0YWJsZSl7XG5cdFx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5zZWxlY3RhYmxlUm9sbGluZ1NlbGVjdGlvbil7XG5cdFx0XHRcdFx0dGhpcy5fZGVzZWxlY3RSb3codGhpcy5zZWxlY3RlZFJvd3NbMF0pO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHZhciByb3cgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZmluZFJvdyhyb3dJbmZvKTtcblx0XHRcblx0XHRpZihyb3cpe1xuXHRcdFx0aWYodGhpcy5zZWxlY3RlZFJvd3MuaW5kZXhPZihyb3cpID09IC0xKXtcblx0XHRcdFx0cm93LmdldEVsZW1lbnQoKS5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXNlbGVjdGVkXCIpO1xuXHRcdFx0XHRpZighcm93Lm1vZHVsZXMuc2VsZWN0KXtcblx0XHRcdFx0XHRyb3cubW9kdWxlcy5zZWxlY3QgPSB7fTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0cm93Lm1vZHVsZXMuc2VsZWN0LnNlbGVjdGVkID0gdHJ1ZTtcblx0XHRcdFx0aWYocm93Lm1vZHVsZXMuc2VsZWN0LmNoZWNrYm94RWwpe1xuXHRcdFx0XHRcdHJvdy5tb2R1bGVzLnNlbGVjdC5jaGVja2JveEVsLmNoZWNrZWQgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLnNlbGVjdGVkUm93cy5wdXNoKHJvdyk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZGF0YVRyZWVTZWxlY3RQcm9wYWdhdGUpe1xuXHRcdFx0XHRcdHRoaXMuY2hpbGRSb3dTZWxlY3Rpb24ocm93LCB0cnVlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwicm93U2VsZWN0ZWRcIiwgcm93LmdldENvbXBvbmVudCgpKTtcblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMuX3Jvd1NlbGVjdGlvbkNoYW5nZWQoc2lsZW50LCByb3cpO1xuXG5cdFx0XHRcdHJldHVybiByb3c7XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYoIXNpbGVudCl7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIlNlbGVjdGlvbiBFcnJvciAtIE5vIHN1Y2ggcm93IGZvdW5kLCBpZ25vcmluZyBzZWxlY3Rpb246XCIgKyByb3dJbmZvKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdGlzUm93U2VsZWN0ZWQocm93KXtcblx0XHRyZXR1cm4gdGhpcy5zZWxlY3RlZFJvd3MuaW5kZXhPZihyb3cpICE9PSAtMTtcblx0fVxuXHRcblx0Ly9kZXNlbGVjdCBhIG51bWJlciBvZiByb3dzXG5cdGRlc2VsZWN0Um93cyhyb3dzLCBzaWxlbnQpe1xuXHRcdHZhciBjaGFuZ2VzID0gW10sIFxuXHRcdHJvd01hdGNoLCBjaGFuZ2U7XG5cdFx0XG5cdFx0c3dpdGNoKHR5cGVvZiByb3dzKXtcblx0XHRcdGNhc2UgXCJ1bmRlZmluZWRcIjpcblx0XHRcdFx0cm93TWF0Y2ggPSBPYmplY3QuYXNzaWduKFtdLCB0aGlzLnNlbGVjdGVkUm93cyk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRcdHJvd01hdGNoID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmZpbmRSb3cocm93cyk7XG5cdFx0XHRcblx0XHRcdFx0aWYoIXJvd01hdGNoKXtcblx0XHRcdFx0XHRyb3dNYXRjaCA9IHRoaXMudGFibGUucm93TWFuYWdlci5nZXRSb3dzKHJvd3MpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRyb3dNYXRjaCA9IHJvd3M7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblxuXHRcdGlmKEFycmF5LmlzQXJyYXkocm93TWF0Y2gpKXtcblx0XHRcdGlmKHJvd01hdGNoLmxlbmd0aCl7XG5cdFx0XHRcdHJvd01hdGNoLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0XHRcdGNoYW5nZSA9IHRoaXMuX2Rlc2VsZWN0Um93KHJvdywgdHJ1ZSwgdHJ1ZSk7XG5cblx0XHRcdFx0XHRpZihjaGFuZ2Upe1xuXHRcdFx0XHRcdFx0Y2hhbmdlcy5wdXNoKGNoYW5nZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHR0aGlzLl9yb3dTZWxlY3Rpb25DaGFuZ2VkKHNpbGVudCwgW10sIGNoYW5nZXMpO1xuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGlmKHJvd01hdGNoKXtcblx0XHRcdFx0dGhpcy5fZGVzZWxlY3RSb3cocm93TWF0Y2gsIHNpbGVudCwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0fVx0XG5cdH1cblx0XG5cdC8vZGVzZWxlY3QgYW4gaW5kaXZpZHVhbCByb3dcblx0X2Rlc2VsZWN0Um93KHJvd0luZm8sIHNpbGVudCl7XG5cdFx0dmFyIHNlbGYgPSB0aGlzLFxuXHRcdHJvdyA9IHNlbGYudGFibGUucm93TWFuYWdlci5maW5kUm93KHJvd0luZm8pLFxuXHRcdGluZGV4LCBlbGVtZW50O1xuXHRcdFxuXHRcdGlmKHJvdyl7XG5cdFx0XHRpbmRleCA9IHNlbGYuc2VsZWN0ZWRSb3dzLmZpbmRJbmRleChmdW5jdGlvbihzZWxlY3RlZFJvdyl7XG5cdFx0XHRcdHJldHVybiBzZWxlY3RlZFJvdyA9PSByb3c7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0aWYoaW5kZXggPiAtMSl7XG5cblx0XHRcdFx0ZWxlbWVudCA9IHJvdy5nZXRFbGVtZW50KCk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihlbGVtZW50KXtcblx0XHRcdFx0XHRlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJ0YWJ1bGF0b3Itc2VsZWN0ZWRcIik7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGlmKCFyb3cubW9kdWxlcy5zZWxlY3Qpe1xuXHRcdFx0XHRcdHJvdy5tb2R1bGVzLnNlbGVjdCA9IHt9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRyb3cubW9kdWxlcy5zZWxlY3Quc2VsZWN0ZWQgPSBmYWxzZTtcblx0XHRcdFx0aWYocm93Lm1vZHVsZXMuc2VsZWN0LmNoZWNrYm94RWwpe1xuXHRcdFx0XHRcdHJvdy5tb2R1bGVzLnNlbGVjdC5jaGVja2JveEVsLmNoZWNrZWQgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRzZWxmLnNlbGVjdGVkUm93cy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmRhdGFUcmVlU2VsZWN0UHJvcGFnYXRlKXtcblx0XHRcdFx0XHR0aGlzLmNoaWxkUm93U2VsZWN0aW9uKHJvdywgZmFsc2UpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJyb3dEZXNlbGVjdGVkXCIsIHJvdy5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRzZWxmLl9yb3dTZWxlY3Rpb25DaGFuZ2VkKHNpbGVudCwgdW5kZWZpbmVkLCByb3cpO1xuXG5cdFx0XHRcdHJldHVybiByb3c7XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYoIXNpbGVudCl7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIkRlc2VsZWN0aW9uIEVycm9yIC0gTm8gc3VjaCByb3cgZm91bmQsIGlnbm9yaW5nIHNlbGVjdGlvbjpcIiArIHJvd0luZm8pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0Z2V0U2VsZWN0ZWREYXRhKCl7XG5cdFx0dmFyIGRhdGEgPSBbXTtcblx0XHRcblx0XHR0aGlzLnNlbGVjdGVkUm93cy5mb3JFYWNoKGZ1bmN0aW9uKHJvdyl7XG5cdFx0XHRkYXRhLnB1c2gocm93LmdldERhdGEoKSk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0cmV0dXJuIGRhdGE7XG5cdH1cblx0XG5cdGdldFNlbGVjdGVkUm93cygpe1xuXHRcdHZhciByb3dzID0gW107XG5cdFx0XG5cdFx0dGhpcy5zZWxlY3RlZFJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3cpe1xuXHRcdFx0cm93cy5wdXNoKHJvdy5nZXRDb21wb25lbnQoKSk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0cmV0dXJuIHJvd3M7XG5cdH1cblx0XG5cdF9yb3dTZWxlY3Rpb25DaGFuZ2VkKHNpbGVudCwgc2VsZWN0ZWQgPSBbXSwgZGVzZWxlY3RlZCA9IFtdKXtcblx0XHRpZih0aGlzLmhlYWRlckNoZWNrYm94RWxlbWVudCl7XG5cdFx0XHRpZih0aGlzLnNlbGVjdGVkUm93cy5sZW5ndGggPT09IDApe1xuXHRcdFx0XHR0aGlzLmhlYWRlckNoZWNrYm94RWxlbWVudC5jaGVja2VkID0gZmFsc2U7XG5cdFx0XHRcdHRoaXMuaGVhZGVyQ2hlY2tib3hFbGVtZW50LmluZGV0ZXJtaW5hdGUgPSBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZih0aGlzLnRhYmxlLnJvd01hbmFnZXIucm93cy5sZW5ndGggPT09IHRoaXMuc2VsZWN0ZWRSb3dzLmxlbmd0aCl7XG5cdFx0XHRcdHRoaXMuaGVhZGVyQ2hlY2tib3hFbGVtZW50LmNoZWNrZWQgPSB0cnVlO1xuXHRcdFx0XHR0aGlzLmhlYWRlckNoZWNrYm94RWxlbWVudC5pbmRldGVybWluYXRlID0gZmFsc2U7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLmhlYWRlckNoZWNrYm94RWxlbWVudC5pbmRldGVybWluYXRlID0gdHJ1ZTtcblx0XHRcdFx0dGhpcy5oZWFkZXJDaGVja2JveEVsZW1lbnQuY2hlY2tlZCA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRpZighc2lsZW50KXtcblx0XHRcdGlmKCFBcnJheS5pc0FycmF5KHNlbGVjdGVkKSl7XG5cdFx0XHRcdHNlbGVjdGVkID0gW3NlbGVjdGVkXTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0ZWQgPSBzZWxlY3RlZC5tYXAocm93ID0+IHJvdy5nZXRDb21wb25lbnQoKSk7XG5cblx0XHRcdGlmKCFBcnJheS5pc0FycmF5KGRlc2VsZWN0ZWQpKXtcblx0XHRcdFx0ZGVzZWxlY3RlZCA9IFtkZXNlbGVjdGVkXTtcblx0XHRcdH1cblxuXHRcdFx0ZGVzZWxlY3RlZCA9IGRlc2VsZWN0ZWQubWFwKHJvdyA9PiByb3cuZ2V0Q29tcG9uZW50KCkpO1xuXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJyb3dTZWxlY3Rpb25DaGFuZ2VkXCIsIHRoaXMuZ2V0U2VsZWN0ZWREYXRhKCksIHRoaXMuZ2V0U2VsZWN0ZWRSb3dzKCksIHNlbGVjdGVkLCBkZXNlbGVjdGVkKTtcblx0XHR9XG5cdH1cblx0XG5cdHJlZ2lzdGVyUm93U2VsZWN0Q2hlY2tib3ggKHJvdywgZWxlbWVudCkge1xuXHRcdGlmKCFyb3cuX3Jvdy5tb2R1bGVzLnNlbGVjdCl7XG5cdFx0XHRyb3cuX3Jvdy5tb2R1bGVzLnNlbGVjdCA9IHt9O1xuXHRcdH1cblx0XHRcblx0XHRyb3cuX3Jvdy5tb2R1bGVzLnNlbGVjdC5jaGVja2JveEVsID0gZWxlbWVudDtcblx0fVxuXHRcblx0cmVnaXN0ZXJIZWFkZXJTZWxlY3RDaGVja2JveCAoZWxlbWVudCkge1xuXHRcdHRoaXMuaGVhZGVyQ2hlY2tib3hFbGVtZW50ID0gZWxlbWVudDtcblx0fVxuXHRcblx0Y2hpbGRSb3dTZWxlY3Rpb24ocm93LCBzZWxlY3Qpe1xuXHRcdHZhciBjaGlsZHJlbiA9IHRoaXMudGFibGUubW9kdWxlcy5kYXRhVHJlZS5nZXRDaGlsZHJlbihyb3csIHRydWUpO1xuXHRcdFxuXHRcdGlmKHNlbGVjdCl7XG5cdFx0XHRmb3IobGV0IGNoaWxkIG9mIGNoaWxkcmVuKXtcblx0XHRcdFx0dGhpcy5fc2VsZWN0Um93KGNoaWxkLCB0cnVlKTtcblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRmb3IobGV0IGNoaWxkIG9mIGNoaWxkcmVuKXtcblx0XHRcdFx0dGhpcy5fZGVzZWxlY3RSb3coY2hpbGQsIHRydWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5TZWxlY3RSb3cubW9kdWxlTmFtZSA9IFwic2VsZWN0Um93XCI7XG5cbi8vc29ydCBudW1iZXJzXG5mdW5jdGlvbiBudW1iZXIkMShhLCBiLCBhUm93LCBiUm93LCBjb2x1bW4sIGRpciwgcGFyYW1zKXtcblx0dmFyIGFsaWduRW1wdHlWYWx1ZXMgPSBwYXJhbXMuYWxpZ25FbXB0eVZhbHVlcztcblx0dmFyIGRlY2ltYWwgPSBwYXJhbXMuZGVjaW1hbFNlcGFyYXRvcjtcblx0dmFyIHRob3VzYW5kID0gcGFyYW1zLnRob3VzYW5kU2VwYXJhdG9yO1xuXHR2YXIgZW1wdHlBbGlnbiA9IDA7XG5cblx0YSA9IFN0cmluZyhhKTtcblx0YiA9IFN0cmluZyhiKTtcblxuXHRpZih0aG91c2FuZCl7XG5cdFx0YSA9IGEuc3BsaXQodGhvdXNhbmQpLmpvaW4oXCJcIik7XG5cdFx0YiA9IGIuc3BsaXQodGhvdXNhbmQpLmpvaW4oXCJcIik7XG5cdH1cblxuXHRpZihkZWNpbWFsKXtcblx0XHRhID0gYS5zcGxpdChkZWNpbWFsKS5qb2luKFwiLlwiKTtcblx0XHRiID0gYi5zcGxpdChkZWNpbWFsKS5qb2luKFwiLlwiKTtcblx0fVxuXG5cdGEgPSBwYXJzZUZsb2F0KGEpO1xuXHRiID0gcGFyc2VGbG9hdChiKTtcblxuXHQvL2hhbmRsZSBub24gbnVtZXJpYyB2YWx1ZXNcblx0aWYoaXNOYU4oYSkpe1xuXHRcdGVtcHR5QWxpZ24gPSAgaXNOYU4oYikgPyAwIDogLTE7XG5cdH1lbHNlIGlmKGlzTmFOKGIpKXtcblx0XHRlbXB0eUFsaWduID0gIDE7XG5cdH1lbHNlIHtcblx0XHQvL2NvbXBhcmUgdmFsaWQgdmFsdWVzXG5cdFx0cmV0dXJuIGEgLSBiO1xuXHR9XG5cblx0Ly9maXggZW1wdHkgdmFsdWVzIGluIHBvc2l0aW9uXG5cdGlmKChhbGlnbkVtcHR5VmFsdWVzID09PSBcInRvcFwiICYmIGRpciA9PT0gXCJkZXNjXCIpIHx8IChhbGlnbkVtcHR5VmFsdWVzID09PSBcImJvdHRvbVwiICYmIGRpciA9PT0gXCJhc2NcIikpe1xuXHRcdGVtcHR5QWxpZ24gKj0gLTE7XG5cdH1cblxuXHRyZXR1cm4gZW1wdHlBbGlnbjtcbn1cblxuLy9zb3J0IHN0cmluZ3NcbmZ1bmN0aW9uIHN0cmluZyhhLCBiLCBhUm93LCBiUm93LCBjb2x1bW4sIGRpciwgcGFyYW1zKXtcblx0dmFyIGFsaWduRW1wdHlWYWx1ZXMgPSBwYXJhbXMuYWxpZ25FbXB0eVZhbHVlcztcblx0dmFyIGVtcHR5QWxpZ24gPSAwO1xuXHR2YXIgbG9jYWxlO1xuXG5cdC8vaGFuZGxlIGVtcHR5IHZhbHVlc1xuXHRpZighYSl7XG5cdFx0ZW1wdHlBbGlnbiA9ICAhYiA/IDAgOiAtMTtcblx0fWVsc2UgaWYoIWIpe1xuXHRcdGVtcHR5QWxpZ24gPSAgMTtcblx0fWVsc2Uge1xuXHRcdC8vY29tcGFyZSB2YWxpZCB2YWx1ZXNcblx0XHRzd2l0Y2godHlwZW9mIHBhcmFtcy5sb2NhbGUpe1xuXHRcdFx0Y2FzZSBcImJvb2xlYW5cIjpcblx0XHRcdFx0aWYocGFyYW1zLmxvY2FsZSl7XG5cdFx0XHRcdFx0bG9jYWxlID0gdGhpcy5sYW5nTG9jYWxlKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRcdGxvY2FsZSA9IHBhcmFtcy5sb2NhbGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblxuXHRcdHJldHVybiBTdHJpbmcoYSkudG9Mb3dlckNhc2UoKS5sb2NhbGVDb21wYXJlKFN0cmluZyhiKS50b0xvd2VyQ2FzZSgpLCBsb2NhbGUpO1xuXHR9XG5cblx0Ly9maXggZW1wdHkgdmFsdWVzIGluIHBvc2l0aW9uXG5cdGlmKChhbGlnbkVtcHR5VmFsdWVzID09PSBcInRvcFwiICYmIGRpciA9PT0gXCJkZXNjXCIpIHx8IChhbGlnbkVtcHR5VmFsdWVzID09PSBcImJvdHRvbVwiICYmIGRpciA9PT0gXCJhc2NcIikpe1xuXHRcdGVtcHR5QWxpZ24gKj0gLTE7XG5cdH1cblxuXHRyZXR1cm4gZW1wdHlBbGlnbjtcbn1cblxuLy9zb3J0IGRhdGV0aW1lXG5mdW5jdGlvbiBkYXRldGltZSQyKGEsIGIsIGFSb3csIGJSb3csIGNvbHVtbiwgZGlyLCBwYXJhbXMpe1xuXHR2YXIgRFQgPSB3aW5kb3cuRGF0ZVRpbWUgfHwgbHV4b24uRGF0ZVRpbWU7XG5cdHZhciBmb3JtYXQgPSBwYXJhbXMuZm9ybWF0IHx8IFwiZGQvTU0veXl5eSBISDptbTpzc1wiLFxuXHRhbGlnbkVtcHR5VmFsdWVzID0gcGFyYW1zLmFsaWduRW1wdHlWYWx1ZXMsXG5cdGVtcHR5QWxpZ24gPSAwO1xuXG5cdGlmKHR5cGVvZiBEVCAhPSBcInVuZGVmaW5lZFwiKXtcblx0XHRpZighRFQuaXNEYXRlVGltZShhKSl7XG5cdFx0XHRpZihmb3JtYXQgPT09IFwiaXNvXCIpe1xuXHRcdFx0XHRhID0gRFQuZnJvbUlTTyhTdHJpbmcoYSkpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRhID0gRFQuZnJvbUZvcm1hdChTdHJpbmcoYSksIGZvcm1hdCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYoIURULmlzRGF0ZVRpbWUoYikpe1xuXHRcdFx0aWYoZm9ybWF0ID09PSBcImlzb1wiKXtcblx0XHRcdFx0YiA9IERULmZyb21JU08oU3RyaW5nKGIpKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0YiA9IERULmZyb21Gb3JtYXQoU3RyaW5nKGIpLCBmb3JtYXQpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmKCFhLmlzVmFsaWQpe1xuXHRcdFx0ZW1wdHlBbGlnbiA9ICFiLmlzVmFsaWQgPyAwIDogLTE7XG5cdFx0fWVsc2UgaWYoIWIuaXNWYWxpZCl7XG5cdFx0XHRlbXB0eUFsaWduID0gIDE7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Ly9jb21wYXJlIHZhbGlkIHZhbHVlc1xuXHRcdFx0cmV0dXJuIGEgLSBiO1xuXHRcdH1cblxuXHRcdC8vZml4IGVtcHR5IHZhbHVlcyBpbiBwb3NpdGlvblxuXHRcdGlmKChhbGlnbkVtcHR5VmFsdWVzID09PSBcInRvcFwiICYmIGRpciA9PT0gXCJkZXNjXCIpIHx8IChhbGlnbkVtcHR5VmFsdWVzID09PSBcImJvdHRvbVwiICYmIGRpciA9PT0gXCJhc2NcIikpe1xuXHRcdFx0ZW1wdHlBbGlnbiAqPSAtMTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZW1wdHlBbGlnbjtcblxuXHR9ZWxzZSB7XG5cdFx0Y29uc29sZS5lcnJvcihcIlNvcnQgRXJyb3IgLSAnZGF0ZXRpbWUnIHNvcnRlciBpcyBkZXBlbmRhbnQgb24gbHV4b24uanNcIik7XG5cdH1cbn1cblxuLy9zb3J0IGRhdGVcbmZ1bmN0aW9uIGRhdGUkMShhLCBiLCBhUm93LCBiUm93LCBjb2x1bW4sIGRpciwgcGFyYW1zKXtcblx0aWYoIXBhcmFtcy5mb3JtYXQpe1xuXHRcdHBhcmFtcy5mb3JtYXQgPSBcImRkL01NL3l5eXlcIjtcblx0fVxuXG5cdHJldHVybiBkYXRldGltZSQyLmNhbGwodGhpcywgYSwgYiwgYVJvdywgYlJvdywgY29sdW1uLCBkaXIsIHBhcmFtcyk7XG59XG5cbi8vc29ydCB0aW1lc1xuZnVuY3Rpb24gdGltZSQxKGEsIGIsIGFSb3csIGJSb3csIGNvbHVtbiwgZGlyLCBwYXJhbXMpe1xuXHRpZighcGFyYW1zLmZvcm1hdCl7XG5cdFx0cGFyYW1zLmZvcm1hdCA9IFwiSEg6bW1cIjtcblx0fVxuXG5cdHJldHVybiBkYXRldGltZSQyLmNhbGwodGhpcywgYSwgYiwgYVJvdywgYlJvdywgY29sdW1uLCBkaXIsIHBhcmFtcyk7XG59XG5cbi8vc29ydCBib29sZWFuc1xuZnVuY3Rpb24gYm9vbGVhbihhLCBiLCBhUm93LCBiUm93LCBjb2x1bW4sIGRpciwgcGFyYW1zKXtcblx0dmFyIGVsMSA9IGEgPT09IHRydWUgfHwgYSA9PT0gXCJ0cnVlXCIgfHwgYSA9PT0gXCJUcnVlXCIgfHwgYSA9PT0gMSA/IDEgOiAwO1xuXHR2YXIgZWwyID0gYiA9PT0gdHJ1ZSB8fCBiID09PSBcInRydWVcIiB8fCBiID09PSBcIlRydWVcIiB8fCBiID09PSAxID8gMSA6IDA7XG5cblx0cmV0dXJuIGVsMSAtIGVsMjtcbn1cblxuLy9zb3J0IGlmIGVsZW1lbnQgY29udGFpbnMgYW55IGRhdGFcbmZ1bmN0aW9uIGFycmF5KGEsIGIsIGFSb3csIGJSb3csIGNvbHVtbiwgZGlyLCBwYXJhbXMpe1xuXHR2YXIgdHlwZSA9IHBhcmFtcy50eXBlIHx8IFwibGVuZ3RoXCIsXG5cdGFsaWduRW1wdHlWYWx1ZXMgPSBwYXJhbXMuYWxpZ25FbXB0eVZhbHVlcyxcblx0ZW1wdHlBbGlnbiA9IDA7XG5cblx0ZnVuY3Rpb24gY2FsYyh2YWx1ZSl7XG5cdFx0dmFyIHJlc3VsdDtcblxuXHRcdHN3aXRjaCh0eXBlKXtcblx0XHRcdGNhc2UgXCJsZW5ndGhcIjpcblx0XHRcdFx0cmVzdWx0ID0gdmFsdWUubGVuZ3RoO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcInN1bVwiOlxuXHRcdFx0XHRyZXN1bHQgPSB2YWx1ZS5yZWR1Y2UoZnVuY3Rpb24oYywgZCl7XG5cdFx0XHRcdFx0cmV0dXJuIGMgKyBkO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgXCJtYXhcIjpcblx0XHRcdFx0cmVzdWx0ID0gTWF0aC5tYXguYXBwbHkobnVsbCwgdmFsdWUpIDtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgXCJtaW5cIjpcblx0XHRcdFx0cmVzdWx0ID0gTWF0aC5taW4uYXBwbHkobnVsbCwgdmFsdWUpIDtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgXCJhdmdcIjpcblx0XHRcdFx0cmVzdWx0ID0gdmFsdWUucmVkdWNlKGZ1bmN0aW9uKGMsIGQpe1xuXHRcdFx0XHRcdHJldHVybiBjICsgZDtcblx0XHRcdFx0fSkgLyB2YWx1ZS5sZW5ndGg7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHQvL2hhbmRsZSBub24gYXJyYXkgdmFsdWVzXG5cdGlmKCFBcnJheS5pc0FycmF5KGEpKXtcblx0XHRlbXB0eUFsaWduID0gIUFycmF5LmlzQXJyYXkoYikgPyAwIDogLTE7XG5cdH1lbHNlIGlmKCFBcnJheS5pc0FycmF5KGIpKXtcblx0XHRlbXB0eUFsaWduID0gMTtcblx0fWVsc2Uge1xuXHRcdHJldHVybiBjYWxjKGIpIC0gY2FsYyhhKTtcblx0fVxuXG5cdC8vZml4IGVtcHR5IHZhbHVlcyBpbiBwb3NpdGlvblxuXHRpZigoYWxpZ25FbXB0eVZhbHVlcyA9PT0gXCJ0b3BcIiAmJiBkaXIgPT09IFwiZGVzY1wiKSB8fCAoYWxpZ25FbXB0eVZhbHVlcyA9PT0gXCJib3R0b21cIiAmJiBkaXIgPT09IFwiYXNjXCIpKXtcblx0XHRlbXB0eUFsaWduICo9IC0xO1xuXHR9XG5cblx0cmV0dXJuIGVtcHR5QWxpZ247XG59XG5cbi8vc29ydCBpZiBlbGVtZW50IGNvbnRhaW5zIGFueSBkYXRhXG5mdW5jdGlvbiBleGlzdHMoYSwgYiwgYVJvdywgYlJvdywgY29sdW1uLCBkaXIsIHBhcmFtcyl7XG5cdHZhciBlbDEgPSB0eXBlb2YgYSA9PSBcInVuZGVmaW5lZFwiID8gMCA6IDE7XG5cdHZhciBlbDIgPSB0eXBlb2YgYiA9PSBcInVuZGVmaW5lZFwiID8gMCA6IDE7XG5cblx0cmV0dXJuIGVsMSAtIGVsMjtcbn1cblxuLy9zb3J0IGFscGhhIG51bWVyaWMgc3RyaW5nc1xuZnVuY3Rpb24gYWxwaGFudW0oYXMsIGJzLCBhUm93LCBiUm93LCBjb2x1bW4sIGRpciwgcGFyYW1zKXtcblx0dmFyIGEsIGIsIGExLCBiMSwgaT0gMCwgTCwgcnggPSAvKFxcZCspfChcXEQrKS9nLCByZCA9IC9cXGQvO1xuXHR2YXIgYWxpZ25FbXB0eVZhbHVlcyA9IHBhcmFtcy5hbGlnbkVtcHR5VmFsdWVzO1xuXHR2YXIgZW1wdHlBbGlnbiA9IDA7XG5cblx0Ly9oYW5kbGUgZW1wdHkgdmFsdWVzXG5cdGlmKCFhcyAmJiBhcyE9PSAwKXtcblx0XHRlbXB0eUFsaWduID0gICFicyAmJiBicyE9PSAwID8gMCA6IC0xO1xuXHR9ZWxzZSBpZighYnMgJiYgYnMhPT0gMCl7XG5cdFx0ZW1wdHlBbGlnbiA9ICAxO1xuXHR9ZWxzZSB7XG5cblx0XHRpZihpc0Zpbml0ZShhcykgJiYgaXNGaW5pdGUoYnMpKSByZXR1cm4gYXMgLSBicztcblx0XHRhID0gU3RyaW5nKGFzKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGIgPSBTdHJpbmcoYnMpLnRvTG93ZXJDYXNlKCk7XG5cdFx0aWYoYSA9PT0gYikgcmV0dXJuIDA7XG5cdFx0aWYoIShyZC50ZXN0KGEpICYmIHJkLnRlc3QoYikpKSByZXR1cm4gYSA+IGIgPyAxIDogLTE7XG5cdFx0YSA9IGEubWF0Y2gocngpO1xuXHRcdGIgPSBiLm1hdGNoKHJ4KTtcblx0XHRMID0gYS5sZW5ndGggPiBiLmxlbmd0aCA/IGIubGVuZ3RoIDogYS5sZW5ndGg7XG5cdFx0d2hpbGUoaSA8IEwpe1xuXHRcdFx0YTE9IGFbaV07XG5cdFx0XHRiMT0gYltpKytdO1xuXHRcdFx0aWYoYTEgIT09IGIxKXtcblx0XHRcdFx0aWYoaXNGaW5pdGUoYTEpICYmIGlzRmluaXRlKGIxKSl7XG5cdFx0XHRcdFx0aWYoYTEuY2hhckF0KDApID09PSBcIjBcIikgYTEgPSBcIi5cIiArIGExO1xuXHRcdFx0XHRcdGlmKGIxLmNoYXJBdCgwKSA9PT0gXCIwXCIpIGIxID0gXCIuXCIgKyBiMTtcblx0XHRcdFx0XHRyZXR1cm4gYTEgLSBiMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIHJldHVybiBhMSA+IGIxID8gMSA6IC0xO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBhLmxlbmd0aCA+IGIubGVuZ3RoO1xuXHR9XG5cblx0Ly9maXggZW1wdHkgdmFsdWVzIGluIHBvc2l0aW9uXG5cdGlmKChhbGlnbkVtcHR5VmFsdWVzID09PSBcInRvcFwiICYmIGRpciA9PT0gXCJkZXNjXCIpIHx8IChhbGlnbkVtcHR5VmFsdWVzID09PSBcImJvdHRvbVwiICYmIGRpciA9PT0gXCJhc2NcIikpe1xuXHRcdGVtcHR5QWxpZ24gKj0gLTE7XG5cdH1cblxuXHRyZXR1cm4gZW1wdHlBbGlnbjtcbn1cblxudmFyIGRlZmF1bHRTb3J0ZXJzID0ge1xuXHRudW1iZXI6bnVtYmVyJDEsXG5cdHN0cmluZzpzdHJpbmcsXG5cdGRhdGU6ZGF0ZSQxLFxuXHR0aW1lOnRpbWUkMSxcblx0ZGF0ZXRpbWU6ZGF0ZXRpbWUkMixcblx0Ym9vbGVhbjpib29sZWFuLFxuXHRhcnJheTphcnJheSxcblx0ZXhpc3RzOmV4aXN0cyxcblx0YWxwaGFudW06YWxwaGFudW1cbn07XG5cbmNsYXNzIFNvcnQgZXh0ZW5kcyBNb2R1bGV7XG5cblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblxuXHRcdHRoaXMuc29ydExpc3QgPSBbXTsgLy9ob2xkZXIgY3VycmVudCBzb3J0XG5cdFx0dGhpcy5jaGFuZ2VkID0gZmFsc2U7IC8vaGFzIHRoZSBzb3J0IGNoYW5nZWQgc2luY2UgbGFzdCByZW5kZXJcblxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInNvcnRNb2RlXCIsIFwibG9jYWxcIik7IC8vbG9jYWwgb3IgcmVtb3RlIHNvcnRpbmdcblxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImluaXRpYWxTb3J0XCIsIGZhbHNlKTsgLy9pbml0aWFsIHNvcnRpbmcgY3JpdGVyaWFcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJjb2x1bW5IZWFkZXJTb3J0TXVsdGlcIiwgdHJ1ZSk7IC8vbXVsdGlwbGUgb3Igc2luZ2xlIGNvbHVtbiBzb3J0aW5nXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwic29ydE9yZGVyUmV2ZXJzZVwiLCBmYWxzZSk7IC8vcmV2ZXJzZSBpbnRlcm5hbCBzb3J0IG9yZGVyaW5nXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiaGVhZGVyU29ydEVsZW1lbnRcIiwgXCI8ZGl2IGNsYXNzPSd0YWJ1bGF0b3ItYXJyb3cnPjwvZGl2PlwiKTsgLy9oZWFkZXIgc29ydCBlbGVtZW50XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiaGVhZGVyU29ydENsaWNrRWxlbWVudFwiLCBcImhlYWRlclwiKTsgLy9lbGVtZW50IHdoaWNoIHRyaWdnZXJzIHNvcnQgd2hlbiBjbGlja2VkXG5cblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwic29ydGVyXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJzb3J0ZXJQYXJhbXNcIik7XG5cblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiaGVhZGVyU29ydFwiLCB0cnVlKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiaGVhZGVyU29ydFN0YXJ0aW5nRGlyXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJTb3J0VHJpc3RhdGVcIik7XG5cblx0fVxuXG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1sYXlvdXRcIiwgdGhpcy5pbml0aWFsaXplQ29sdW1uLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwidGFibGUtYnVpbHRcIiwgdGhpcy50YWJsZUJ1aWx0LmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJEYXRhSGFuZGxlcih0aGlzLnNvcnQuYmluZCh0aGlzKSwgMjApO1xuXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJzZXRTb3J0XCIsIHRoaXMudXNlclNldFNvcnQuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJnZXRTb3J0ZXJzXCIsIHRoaXMuZ2V0U29ydC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcImNsZWFyU29ydFwiLCB0aGlzLmNsZWFyU29ydC5iaW5kKHRoaXMpKTtcblxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5zb3J0TW9kZSA9PT0gXCJyZW1vdGVcIil7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImRhdGEtcGFyYW1zXCIsIHRoaXMucmVtb3RlU29ydFBhcmFtcy5iaW5kKHRoaXMpKTtcblx0XHR9XG5cdH1cblxuXHR0YWJsZUJ1aWx0KCl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmluaXRpYWxTb3J0KXtcblx0XHRcdHRoaXMuc2V0U29ydCh0aGlzLnRhYmxlLm9wdGlvbnMuaW5pdGlhbFNvcnQpO1xuXHRcdH1cblx0fVxuXG5cdHJlbW90ZVNvcnRQYXJhbXMoZGF0YSwgY29uZmlnLCBzaWxlbnQsIHBhcmFtcyl7XG5cdFx0dmFyIHNvcnRlcnMgPSB0aGlzLmdldFNvcnQoKTtcblxuXHRcdHNvcnRlcnMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuXHRcdFx0ZGVsZXRlIGl0ZW0uY29sdW1uO1xuXHRcdH0pO1xuXG5cdFx0cGFyYW1zLnNvcnQgPSBzb3J0ZXJzO1xuXG5cdFx0cmV0dXJuIHBhcmFtcztcblx0fVxuXG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vIFRhYmxlIEZ1bmN0aW9ucyAvLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXHR1c2VyU2V0U29ydChzb3J0TGlzdCwgZGlyKXtcblx0XHR0aGlzLnNldFNvcnQoc29ydExpc3QsIGRpcik7XG5cdFx0Ly8gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLnNvcnRlclJlZnJlc2goKTtcblx0XHR0aGlzLnJlZnJlc2hTb3J0KCk7XG5cdH1cblxuXHRjbGVhclNvcnQoKXtcblx0XHR0aGlzLmNsZWFyKCk7XG5cdFx0Ly8gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLnNvcnRlclJlZnJlc2goKTtcblx0XHR0aGlzLnJlZnJlc2hTb3J0KCk7XG5cdH1cblxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLyBJbnRlcm5hbCBMb2dpYyAvLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0Ly9pbml0aWFsaXplIGNvbHVtbiBoZWFkZXIgZm9yIHNvcnRpbmdcblx0aW5pdGlhbGl6ZUNvbHVtbihjb2x1bW4pe1xuXHRcdHZhciBzb3J0ZXIgPSBmYWxzZSxcblx0XHRjb2xFbCxcblx0XHRhcnJvd0VsO1xuXG5cdFx0c3dpdGNoKHR5cGVvZiBjb2x1bW4uZGVmaW5pdGlvbi5zb3J0ZXIpe1xuXHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0XHRpZihTb3J0LnNvcnRlcnNbY29sdW1uLmRlZmluaXRpb24uc29ydGVyXSl7XG5cdFx0XHRcdFx0c29ydGVyID0gU29ydC5zb3J0ZXJzW2NvbHVtbi5kZWZpbml0aW9uLnNvcnRlcl07XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJTb3J0IEVycm9yIC0gTm8gc3VjaCBzb3J0ZXIgZm91bmQ6IFwiLCBjb2x1bW4uZGVmaW5pdGlvbi5zb3J0ZXIpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwiZnVuY3Rpb25cIjpcblx0XHRcdFx0c29ydGVyID0gY29sdW1uLmRlZmluaXRpb24uc29ydGVyO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cblx0XHRjb2x1bW4ubW9kdWxlcy5zb3J0ID0ge1xuXHRcdFx0c29ydGVyOnNvcnRlciwgZGlyOlwibm9uZVwiLFxuXHRcdFx0cGFyYW1zOmNvbHVtbi5kZWZpbml0aW9uLnNvcnRlclBhcmFtcyB8fCB7fSxcblx0XHRcdHN0YXJ0aW5nRGlyOmNvbHVtbi5kZWZpbml0aW9uLmhlYWRlclNvcnRTdGFydGluZ0RpciB8fCBcImFzY1wiLFxuXHRcdFx0dHJpc3RhdGU6IGNvbHVtbi5kZWZpbml0aW9uLmhlYWRlclNvcnRUcmlzdGF0ZSxcblx0XHR9O1xuXG5cdFx0aWYoY29sdW1uLmRlZmluaXRpb24uaGVhZGVyU29ydCAhPT0gZmFsc2Upe1xuXG5cdFx0XHRjb2xFbCA9IGNvbHVtbi5nZXRFbGVtZW50KCk7XG5cblx0XHRcdGNvbEVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3Itc29ydGFibGVcIik7XG5cblx0XHRcdGFycm93RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdFx0YXJyb3dFbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWNvbC1zb3J0ZXJcIik7XG5cblx0XHRcdHN3aXRjaCh0aGlzLnRhYmxlLm9wdGlvbnMuaGVhZGVyU29ydENsaWNrRWxlbWVudCl7XG5cdFx0XHRcdGNhc2UgXCJpY29uXCI6XG5cdFx0XHRcdFx0YXJyb3dFbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWNvbC1zb3J0ZXItZWxlbWVudFwiKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImhlYWRlclwiOlxuXHRcdFx0XHRcdGNvbEVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItY29sLXNvcnRlci1lbGVtZW50XCIpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdGNvbEVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItY29sLXNvcnRlci1lbGVtZW50XCIpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXG5cdFx0XHRzd2l0Y2godGhpcy50YWJsZS5vcHRpb25zLmhlYWRlclNvcnRFbGVtZW50KXtcblx0XHRcdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHRcdFx0Ly9kbyBub3RoaW5nXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBcIm9iamVjdFwiOlxuXHRcdFx0XHRcdGFycm93RWwuYXBwZW5kQ2hpbGQodGhpcy50YWJsZS5vcHRpb25zLmhlYWRlclNvcnRFbGVtZW50KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRhcnJvd0VsLmlubmVySFRNTCA9IHRoaXMudGFibGUub3B0aW9ucy5oZWFkZXJTb3J0RWxlbWVudDtcblx0XHRcdH1cblxuXHRcdFx0Ly9jcmVhdGUgc29ydGVyIGFycm93XG5cdFx0XHRjb2x1bW4udGl0bGVIb2xkZXJFbGVtZW50LmFwcGVuZENoaWxkKGFycm93RWwpO1xuXG5cdFx0XHRjb2x1bW4ubW9kdWxlcy5zb3J0LmVsZW1lbnQgPSBhcnJvd0VsO1xuXG5cdFx0XHR0aGlzLnNldENvbHVtbkhlYWRlclNvcnRJY29uKGNvbHVtbiwgXCJub25lXCIpO1xuXG5cdFx0XHQvL3NvcnQgb24gY2xpY2tcblx0XHRcdCh0aGlzLnRhYmxlLm9wdGlvbnMuaGVhZGVyU29ydENsaWNrRWxlbWVudCA9PT0gXCJpY29uXCIgPyBhcnJvd0VsIDogY29sRWwpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuXHRcdFx0XHR2YXIgZGlyID0gXCJcIixcblx0XHRcdFx0c29ydGVycz1bXSxcblx0XHRcdFx0bWF0Y2ggPSBmYWxzZTtcblxuXHRcdFx0XHRpZihjb2x1bW4ubW9kdWxlcy5zb3J0KXtcblx0XHRcdFx0XHRpZihjb2x1bW4ubW9kdWxlcy5zb3J0LnRyaXN0YXRlKXtcblx0XHRcdFx0XHRcdGlmKGNvbHVtbi5tb2R1bGVzLnNvcnQuZGlyID09IFwibm9uZVwiKXtcblx0XHRcdFx0XHRcdFx0ZGlyID0gY29sdW1uLm1vZHVsZXMuc29ydC5zdGFydGluZ0Rpcjtcblx0XHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdFx0aWYoY29sdW1uLm1vZHVsZXMuc29ydC5kaXIgPT0gY29sdW1uLm1vZHVsZXMuc29ydC5zdGFydGluZ0Rpcil7XG5cdFx0XHRcdFx0XHRcdFx0ZGlyID0gY29sdW1uLm1vZHVsZXMuc29ydC5kaXIgPT0gXCJhc2NcIiA/IFwiZGVzY1wiIDogXCJhc2NcIjtcblx0XHRcdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGRpciA9IFwibm9uZVwiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0c3dpdGNoKGNvbHVtbi5tb2R1bGVzLnNvcnQuZGlyKXtcblx0XHRcdFx0XHRcdFx0Y2FzZSBcImFzY1wiOlxuXHRcdFx0XHRcdFx0XHRcdGRpciA9IFwiZGVzY1wiO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgXCJkZXNjXCI6XG5cdFx0XHRcdFx0XHRcdFx0ZGlyID0gXCJhc2NcIjtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRcdGRpciA9IGNvbHVtbi5tb2R1bGVzLnNvcnQuc3RhcnRpbmdEaXI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKHRoaXMudGFibGUub3B0aW9ucy5jb2x1bW5IZWFkZXJTb3J0TXVsdGkgJiYgKGUuc2hpZnRLZXkgfHwgZS5jdHJsS2V5KSkge1xuXHRcdFx0XHRcdFx0c29ydGVycyA9IHRoaXMuZ2V0U29ydCgpO1xuXG5cdFx0XHRcdFx0XHRtYXRjaCA9IHNvcnRlcnMuZmluZEluZGV4KChzb3J0ZXIpID0+IHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHNvcnRlci5maWVsZCA9PT0gY29sdW1uLmdldEZpZWxkKCk7XG5cdFx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdFx0aWYobWF0Y2ggPiAtMSl7XG5cdFx0XHRcdFx0XHRcdHNvcnRlcnNbbWF0Y2hdLmRpciA9IGRpcjtcblxuXHRcdFx0XHRcdFx0XHRtYXRjaCA9IHNvcnRlcnMuc3BsaWNlKG1hdGNoLCAxKVswXTtcblx0XHRcdFx0XHRcdFx0aWYoZGlyICE9IFwibm9uZVwiKXtcblx0XHRcdFx0XHRcdFx0XHRzb3J0ZXJzLnB1c2gobWF0Y2gpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGlmKGRpciAhPSBcIm5vbmVcIil7XG5cdFx0XHRcdFx0XHRcdFx0c29ydGVycy5wdXNoKHtjb2x1bW46Y29sdW1uLCBkaXI6ZGlyfSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly9hZGQgdG8gZXhpc3Rpbmcgc29ydFxuXHRcdFx0XHRcdFx0dGhpcy5zZXRTb3J0KHNvcnRlcnMpO1xuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdGlmKGRpciA9PSBcIm5vbmVcIil7XG5cdFx0XHRcdFx0XHRcdHRoaXMuY2xlYXIoKTtcblx0XHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly9zb3J0IGJ5IGNvbHVtbiBvbmx5XG5cdFx0XHRcdFx0XHRcdHRoaXMuc2V0U29ydChjb2x1bW4sIGRpcik7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyB0aGlzLnRhYmxlLnJvd01hbmFnZXIuc29ydGVyUmVmcmVzaCghdGhpcy5zb3J0TGlzdC5sZW5ndGgpO1xuXHRcdFx0XHRcdHRoaXMucmVmcmVzaFNvcnQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0cmVmcmVzaFNvcnQoKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuc29ydE1vZGUgPT09IFwicmVtb3RlXCIpe1xuXHRcdFx0dGhpcy5yZWxvYWREYXRhKG51bGwsIGZhbHNlLCBmYWxzZSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5yZWZyZXNoRGF0YSh0cnVlKTtcblx0XHR9XG5cblx0XHQvL1RPRE8gLSBQZXJzaXN0IGxlZnQgcG9zaXRpb24gb2Ygcm93IG1hbmFnZXJcblx0XHQvLyBsZWZ0ID0gdGhpcy5zY3JvbGxMZWZ0O1xuXHRcdC8vIHRoaXMuc2Nyb2xsSG9yaXpvbnRhbChsZWZ0KTtcblx0fVxuXG5cdC8vY2hlY2sgaWYgdGhlIHNvcnRlcnMgaGF2ZSBjaGFuZ2VkIHNpbmNlIGxhc3QgdXNlXG5cdGhhc0NoYW5nZWQoKXtcblx0XHR2YXIgY2hhbmdlZCA9IHRoaXMuY2hhbmdlZDtcblx0XHR0aGlzLmNoYW5nZWQgPSBmYWxzZTtcblx0XHRyZXR1cm4gY2hhbmdlZDtcblx0fVxuXG5cdC8vcmV0dXJuIGN1cnJlbnQgc29ydGVyc1xuXHRnZXRTb3J0KCl7XG5cdFx0dmFyIHNlbGYgPSB0aGlzLFxuXHRcdHNvcnRlcnMgPSBbXTtcblxuXHRcdHNlbGYuc29ydExpc3QuZm9yRWFjaChmdW5jdGlvbihpdGVtKXtcblx0XHRcdGlmKGl0ZW0uY29sdW1uKXtcblx0XHRcdFx0c29ydGVycy5wdXNoKHtjb2x1bW46aXRlbS5jb2x1bW4uZ2V0Q29tcG9uZW50KCksIGZpZWxkOml0ZW0uY29sdW1uLmdldEZpZWxkKCksIGRpcjppdGVtLmRpcn0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIHNvcnRlcnM7XG5cdH1cblxuXHQvL2NoYW5nZSBzb3J0IGxpc3QgYW5kIHRyaWdnZXIgc29ydFxuXHRzZXRTb3J0KHNvcnRMaXN0LCBkaXIpe1xuXHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHRuZXdTb3J0TGlzdCA9IFtdO1xuXG5cdFx0aWYoIUFycmF5LmlzQXJyYXkoc29ydExpc3QpKXtcblx0XHRcdHNvcnRMaXN0ID0gW3tjb2x1bW46IHNvcnRMaXN0LCBkaXI6ZGlyfV07XG5cdFx0fVxuXG5cdFx0c29ydExpc3QuZm9yRWFjaChmdW5jdGlvbihpdGVtKXtcblx0XHRcdHZhciBjb2x1bW47XG5cblx0XHRcdGNvbHVtbiA9IHNlbGYudGFibGUuY29sdW1uTWFuYWdlci5maW5kQ29sdW1uKGl0ZW0uY29sdW1uKTtcblxuXHRcdFx0aWYoY29sdW1uKXtcblx0XHRcdFx0aXRlbS5jb2x1bW4gPSBjb2x1bW47XG5cdFx0XHRcdG5ld1NvcnRMaXN0LnB1c2goaXRlbSk7XG5cdFx0XHRcdHNlbGYuY2hhbmdlZCA9IHRydWU7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIlNvcnQgV2FybmluZyAtIFNvcnQgZmllbGQgZG9lcyBub3QgZXhpc3QgYW5kIGlzIGJlaW5nIGlnbm9yZWQ6IFwiLCBpdGVtLmNvbHVtbik7XG5cdFx0XHR9XG5cblx0XHR9KTtcblxuXHRcdHNlbGYuc29ydExpc3QgPSBuZXdTb3J0TGlzdDtcblxuXHRcdHRoaXMuZGlzcGF0Y2goXCJzb3J0LWNoYW5nZWRcIik7XG5cdH1cblxuXHQvL2NsZWFyIHNvcnRlcnNcblx0Y2xlYXIoKXtcblx0XHR0aGlzLnNldFNvcnQoW10pO1xuXHR9XG5cblx0Ly9maW5kIGFwcHJvcHJpYXRlIHNvcnRlciBmb3IgY29sdW1uXG5cdGZpbmRTb3J0ZXIoY29sdW1uKXtcblx0XHR2YXIgcm93ID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmFjdGl2ZVJvd3NbMF0sXG5cdFx0c29ydGVyID0gXCJzdHJpbmdcIixcblx0XHRmaWVsZCwgdmFsdWU7XG5cblx0XHRpZihyb3cpe1xuXHRcdFx0cm93ID0gcm93LmdldERhdGEoKTtcblx0XHRcdGZpZWxkID0gY29sdW1uLmdldEZpZWxkKCk7XG5cblx0XHRcdGlmKGZpZWxkKXtcblxuXHRcdFx0XHR2YWx1ZSA9IGNvbHVtbi5nZXRGaWVsZFZhbHVlKHJvdyk7XG5cblx0XHRcdFx0c3dpdGNoKHR5cGVvZiB2YWx1ZSl7XG5cdFx0XHRcdFx0Y2FzZSBcInVuZGVmaW5lZFwiOlxuXHRcdFx0XHRcdFx0c29ydGVyID0gXCJzdHJpbmdcIjtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSBcImJvb2xlYW5cIjpcblx0XHRcdFx0XHRcdHNvcnRlciA9IFwiYm9vbGVhblwiO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0aWYoIWlzTmFOKHZhbHVlKSAmJiB2YWx1ZSAhPT0gXCJcIil7XG5cdFx0XHRcdFx0XHRcdHNvcnRlciA9IFwibnVtYmVyXCI7XG5cdFx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGlmKHZhbHVlLm1hdGNoKC8oKF5bMC05XStbYS16XSspfCheW2Etel0rWzAtOV0rKSkrJC9pKSl7XG5cdFx0XHRcdFx0XHRcdFx0c29ydGVyID0gXCJhbHBoYW51bVwiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBTb3J0LnNvcnRlcnNbc29ydGVyXTtcblx0fVxuXG5cdC8vd29yayB0aHJvdWdoIHNvcnQgbGlzdCBzb3J0aW5nIGRhdGFcblx0c29ydChkYXRhKXtcblx0XHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0c29ydExpc3QgPSB0aGlzLnRhYmxlLm9wdGlvbnMuc29ydE9yZGVyUmV2ZXJzZSA/IHNlbGYuc29ydExpc3Quc2xpY2UoKS5yZXZlcnNlKCkgOiBzZWxmLnNvcnRMaXN0LFxuXHRcdHNvcnRMaXN0QWN0dWFsID0gW10sXG5cdFx0cm93Q29tcG9uZW50cyA9IFtdO1xuXG5cdFx0aWYodGhpcy5zdWJzY3JpYmVkRXh0ZXJuYWwoXCJkYXRhU29ydGluZ1wiKSl7XG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJkYXRhU29ydGluZ1wiLCBzZWxmLmdldFNvcnQoKSk7XG5cdFx0fVxuXG5cdFx0c2VsZi5jbGVhckNvbHVtbkhlYWRlcnMoKTtcblxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5zb3J0TW9kZSAhPT0gXCJyZW1vdGVcIil7XG5cblx0XHRcdC8vYnVpbGQgbGlzdCBvZiB2YWxpZCBzb3J0ZXJzIGFuZCB0cmlnZ2VyIGNvbHVtbiBzcGVjaWZpYyBjYWxsYmFja3MgYmVmb3JlIHNvcnQgYmVnaW5zXG5cdFx0XHRzb3J0TGlzdC5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGkpe1xuXHRcdFx0XHR2YXIgc29ydE9iajtcblxuXHRcdFx0XHRpZihpdGVtLmNvbHVtbil7XG5cdFx0XHRcdFx0c29ydE9iaiA9IGl0ZW0uY29sdW1uLm1vZHVsZXMuc29ydDtcblxuXHRcdFx0XHRcdGlmKHNvcnRPYmope1xuXG5cdFx0XHRcdFx0XHQvL2lmIG5vIHNvcnRlciBoYXMgYmVlbiBkZWZpbmVkLCB0YWtlIGEgZ3Vlc3Ncblx0XHRcdFx0XHRcdGlmKCFzb3J0T2JqLnNvcnRlcil7XG5cdFx0XHRcdFx0XHRcdHNvcnRPYmouc29ydGVyID0gc2VsZi5maW5kU29ydGVyKGl0ZW0uY29sdW1uKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aXRlbS5wYXJhbXMgPSB0eXBlb2Ygc29ydE9iai5wYXJhbXMgPT09IFwiZnVuY3Rpb25cIiA/IHNvcnRPYmoucGFyYW1zKGl0ZW0uY29sdW1uLmdldENvbXBvbmVudCgpLCBpdGVtLmRpcikgOiBzb3J0T2JqLnBhcmFtcztcblxuXHRcdFx0XHRcdFx0c29ydExpc3RBY3R1YWwucHVzaChpdGVtKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRzZWxmLnNldENvbHVtbkhlYWRlcihpdGVtLmNvbHVtbiwgaXRlbS5kaXIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly9zb3J0IGRhdGFcblx0XHRcdGlmIChzb3J0TGlzdEFjdHVhbC5sZW5ndGgpIHtcblx0XHRcdFx0c2VsZi5fc29ydEl0ZW1zKGRhdGEsIHNvcnRMaXN0QWN0dWFsKTtcblx0XHRcdH1cblxuXHRcdH1lbHNlIHtcblx0XHRcdHNvcnRMaXN0LmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaSl7XG5cdFx0XHRcdHNlbGYuc2V0Q29sdW1uSGVhZGVyKGl0ZW0uY29sdW1uLCBpdGVtLmRpcik7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZih0aGlzLnN1YnNjcmliZWRFeHRlcm5hbChcImRhdGFTb3J0ZWRcIikpe1xuXHRcdFx0ZGF0YS5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdFx0cm93Q29tcG9uZW50cy5wdXNoKHJvdy5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwiZGF0YVNvcnRlZFwiLCBzZWxmLmdldFNvcnQoKSwgcm93Q29tcG9uZW50cyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cdH1cblxuXHQvL2NsZWFyIHNvcnQgYXJyb3dzIG9uIGNvbHVtbnNcblx0Y2xlYXJDb2x1bW5IZWFkZXJzKCl7XG5cdFx0dGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmdldFJlYWxDb2x1bW5zKCkuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG5cdFx0XHRpZihjb2x1bW4ubW9kdWxlcy5zb3J0KXtcblx0XHRcdFx0Y29sdW1uLm1vZHVsZXMuc29ydC5kaXIgPSBcIm5vbmVcIjtcblx0XHRcdFx0Y29sdW1uLmdldEVsZW1lbnQoKS5zZXRBdHRyaWJ1dGUoXCJhcmlhLXNvcnRcIiwgXCJub25lXCIpO1xuXHRcdFx0XHR0aGlzLnNldENvbHVtbkhlYWRlclNvcnRJY29uKGNvbHVtbiwgXCJub25lXCIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0Ly9zZXQgdGhlIGNvbHVtbiBoZWFkZXIgc29ydCBkaXJlY3Rpb25cblx0c2V0Q29sdW1uSGVhZGVyKGNvbHVtbiwgZGlyKXtcblx0XHRjb2x1bW4ubW9kdWxlcy5zb3J0LmRpciA9IGRpcjtcblx0XHRjb2x1bW4uZ2V0RWxlbWVudCgpLnNldEF0dHJpYnV0ZShcImFyaWEtc29ydFwiLCBkaXIgPT09IFwiYXNjXCIgPyBcImFzY2VuZGluZ1wiIDogXCJkZXNjZW5kaW5nXCIpO1xuXHRcdHRoaXMuc2V0Q29sdW1uSGVhZGVyU29ydEljb24oY29sdW1uLCBkaXIpO1xuXHR9XG5cblx0c2V0Q29sdW1uSGVhZGVyU29ydEljb24oY29sdW1uLCBkaXIpe1xuXHRcdHZhciBzb3J0RWwgPSBjb2x1bW4ubW9kdWxlcy5zb3J0LmVsZW1lbnQsXG5cdFx0YXJyb3dFbDtcblxuXHRcdGlmKGNvbHVtbi5kZWZpbml0aW9uLmhlYWRlclNvcnQgJiYgdHlwZW9mIHRoaXMudGFibGUub3B0aW9ucy5oZWFkZXJTb3J0RWxlbWVudCA9PT0gXCJmdW5jdGlvblwiKXtcblx0XHRcdHdoaWxlKHNvcnRFbC5maXJzdENoaWxkKSBzb3J0RWwucmVtb3ZlQ2hpbGQoc29ydEVsLmZpcnN0Q2hpbGQpO1xuXG5cdFx0XHRhcnJvd0VsID0gdGhpcy50YWJsZS5vcHRpb25zLmhlYWRlclNvcnRFbGVtZW50LmNhbGwodGhpcy50YWJsZSwgY29sdW1uLmdldENvbXBvbmVudCgpLCBkaXIpO1xuXHRcdFx0XG5cdFx0XHRpZih0eXBlb2YgYXJyb3dFbCA9PT0gXCJvYmplY3RcIil7XG5cdFx0XHRcdHNvcnRFbC5hcHBlbmRDaGlsZChhcnJvd0VsKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0c29ydEVsLmlubmVySFRNTCA9IGFycm93RWw7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly9zb3J0IGVhY2ggaXRlbSBpbiBzb3J0IGxpc3Rcblx0X3NvcnRJdGVtcyhkYXRhLCBzb3J0TGlzdCl7XG5cdFx0dmFyIHNvcnRlckNvdW50ID0gc29ydExpc3QubGVuZ3RoIC0gMTtcblxuXHRcdGRhdGEuc29ydCgoYSwgYikgPT4ge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0Zm9yKHZhciBpID0gc29ydGVyQ291bnQ7IGk+PSAwOyBpLS0pe1xuXHRcdFx0XHRsZXQgc29ydEl0ZW0gPSBzb3J0TGlzdFtpXTtcblxuXHRcdFx0XHRyZXN1bHQgPSB0aGlzLl9zb3J0Um93KGEsIGIsIHNvcnRJdGVtLmNvbHVtbiwgc29ydEl0ZW0uZGlyLCBzb3J0SXRlbS5wYXJhbXMpO1xuXG5cdFx0XHRcdGlmKHJlc3VsdCAhPT0gMCl7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9KTtcblx0fVxuXG5cdC8vcHJvY2VzcyBpbmRpdmlkdWFsIHJvd3MgZm9yIGEgc29ydCBmdW5jdGlvbiBvbiBhY3RpdmUgZGF0YVxuXHRfc29ydFJvdyhhLCBiLCBjb2x1bW4sIGRpciwgcGFyYW1zKXtcblx0XHR2YXIgZWwxQ29tcCwgZWwyQ29tcDtcblxuXHRcdC8vc3dpdGNoIGVsZW1lbnRzIGRlcGVuZGluZyBvbiBzZWFyY2ggZGlyZWN0aW9uXG5cdFx0dmFyIGVsMSA9IGRpciA9PSBcImFzY1wiID8gYSA6IGI7XG5cdFx0dmFyIGVsMiA9IGRpciA9PSBcImFzY1wiID8gYiA6IGE7XG5cblx0XHRhID0gY29sdW1uLmdldEZpZWxkVmFsdWUoZWwxLmdldERhdGEoKSk7XG5cdFx0YiA9IGNvbHVtbi5nZXRGaWVsZFZhbHVlKGVsMi5nZXREYXRhKCkpO1xuXG5cdFx0YSA9IHR5cGVvZiBhICE9PSBcInVuZGVmaW5lZFwiID8gYSA6IFwiXCI7XG5cdFx0YiA9IHR5cGVvZiBiICE9PSBcInVuZGVmaW5lZFwiID8gYiA6IFwiXCI7XG5cblx0XHRlbDFDb21wID0gZWwxLmdldENvbXBvbmVudCgpO1xuXHRcdGVsMkNvbXAgPSBlbDIuZ2V0Q29tcG9uZW50KCk7XG5cblx0XHRyZXR1cm4gY29sdW1uLm1vZHVsZXMuc29ydC5zb3J0ZXIuY2FsbCh0aGlzLCBhLCBiLCBlbDFDb21wLCBlbDJDb21wLCBjb2x1bW4uZ2V0Q29tcG9uZW50KCksIGRpciwgcGFyYW1zKTtcblx0fVxufVxuXG5Tb3J0Lm1vZHVsZU5hbWUgPSBcInNvcnRcIjtcblxuLy9sb2FkIGRlZmF1bHRzXG5Tb3J0LnNvcnRlcnMgPSBkZWZhdWx0U29ydGVycztcblxuY2xhc3MgVG9vbHRpcCBleHRlbmRzIE1vZHVsZXtcblx0XG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cdFx0XG5cdFx0dGhpcy50b29sdGlwU3Vic2NyaWJlciA9IG51bGwsXG5cdFx0dGhpcy5oZWFkZXJTdWJzY3JpYmVyID0gbnVsbCxcblx0XHRcblx0XHR0aGlzLnRpbWVvdXQgPSBudWxsO1xuXHRcdHRoaXMucG9wdXBJbnN0YW5jZSA9IG51bGw7XG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwidG9vbHRpcEdlbmVyYXRpb25Nb2RlXCIsIHVuZGVmaW5lZCk7ICAvL2RlcHJlY2F0ZWRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJ0b29sdGlwRGVsYXlcIiwgMzAwKTsgXG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcInRvb2x0aXBcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImhlYWRlclRvb2x0aXBcIik7XG5cdH1cblx0XG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLmRlcHJlY2F0ZWRPcHRpb25zQ2hlY2soKTtcblx0XHRcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1pbml0XCIsIHRoaXMuaW5pdGlhbGl6ZUNvbHVtbi5iaW5kKHRoaXMpKTtcblx0fVxuXHRcblx0ZGVwcmVjYXRlZE9wdGlvbnNDaGVjaygpe1xuXHRcdHRoaXMuZGVwcmVjYXRpb25DaGVja01zZyhcInRvb2x0aXBHZW5lcmF0aW9uTW9kZVwiLCBcIlRoaXMgb3B0aW9uIGlzIG5vIGxvbmdlciBuZWVkZWQgYXMgdG9vbHRpcHMgYXJlIGFsd2F5cyBnZW5lcmF0ZWQgb24gaG92ZXIgbm93XCIpO1xuXHR9XHRcblx0XG5cdGluaXRpYWxpemVDb2x1bW4oY29sdW1uKXtcblx0XHRpZihjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJUb29sdGlwICYmICF0aGlzLmhlYWRlclN1YnNjcmliZXIpe1xuXHRcdFx0dGhpcy5oZWFkZXJTdWJzY3JpYmVyID0gdHJ1ZTtcblx0XHRcdFxuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tbW91c2Vtb3ZlXCIsIHRoaXMubW91c2Vtb3ZlQ2hlY2suYmluZCh0aGlzLCBcImhlYWRlclRvb2x0aXBcIikpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tbW91c2VvdXRcIiwgdGhpcy5tb3VzZW91dENoZWNrLmJpbmQodGhpcywgXCJoZWFkZXJUb29sdGlwXCIpKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYoY29sdW1uLmRlZmluaXRpb24udG9vbHRpcCAmJiAhdGhpcy50b29sdGlwU3Vic2NyaWJlcil7XG5cdFx0XHR0aGlzLnRvb2x0aXBTdWJzY3JpYmVyID0gdHJ1ZTtcblx0XHRcdFxuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjZWxsLW1vdXNlbW92ZVwiLCB0aGlzLm1vdXNlbW92ZUNoZWNrLmJpbmQodGhpcywgXCJ0b29sdGlwXCIpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY2VsbC1tb3VzZW91dFwiLCB0aGlzLm1vdXNlb3V0Q2hlY2suYmluZCh0aGlzLCBcInRvb2x0aXBcIikpO1xuXHRcdH1cblx0fVxuXHRcblx0bW91c2Vtb3ZlQ2hlY2soYWN0aW9uLCBlLCBjb21wb25lbnQpe1xuXHRcdHZhciB0b29sdGlwID0gYWN0aW9uID09PSBcInRvb2x0aXBcIiA/IGNvbXBvbmVudC5jb2x1bW4uZGVmaW5pdGlvbi50b29sdGlwIDogY29tcG9uZW50LmRlZmluaXRpb24uaGVhZGVyVG9vbHRpcDtcblx0XHRcblx0XHRpZih0b29sdGlwKXtcblx0XHRcdHRoaXMuY2xlYXJQb3B1cCgpO1xuXHRcdFx0dGhpcy50aW1lb3V0ID0gc2V0VGltZW91dCh0aGlzLmxvYWRUb29sdGlwLmJpbmQodGhpcywgZSwgY29tcG9uZW50LCB0b29sdGlwKSwgdGhpcy50YWJsZS5vcHRpb25zLnRvb2x0aXBEZWxheSk7XG5cdFx0fVxuXHR9XG5cblx0bW91c2VvdXRDaGVjayhhY3Rpb24sIGUsIGNvbXBvbmVudCl7XG5cdFx0aWYoIXRoaXMucG9wdXBJbnN0YW5jZSl7XG5cdFx0XHR0aGlzLmNsZWFyUG9wdXAoKTtcblx0XHR9XG5cdH1cblx0XG5cdGNsZWFyUG9wdXAoYWN0aW9uLCBlLCBjb21wb25lbnQpe1xuXHRcdGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xuXHRcdHRoaXMudGltZW91dCA9IG51bGw7XG5cdFx0XG5cdFx0aWYodGhpcy5wb3B1cEluc3RhbmNlKXtcblx0XHRcdHRoaXMucG9wdXBJbnN0YW5jZS5oaWRlKCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRsb2FkVG9vbHRpcChlLCBjb21wb25lbnQsIHRvb2x0aXApe1xuXHRcdHZhciBjb250ZW50c0VsLCByZW5kZXJlZENhbGxiYWNrLCBjb29yZHM7XG5cblx0XHRmdW5jdGlvbiBvblJlbmRlcmVkKGNhbGxiYWNrKXtcblx0XHRcdHJlbmRlcmVkQ2FsbGJhY2sgPSBjYWxsYmFjaztcblx0XHR9XG5cdFx0XG5cdFx0aWYodHlwZW9mIHRvb2x0aXAgPT09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHR0b29sdGlwID0gdG9vbHRpcChlLCBjb21wb25lbnQuZ2V0Q29tcG9uZW50KCksIG9uUmVuZGVyZWQpO1xuXHRcdH1cblx0XHRcblx0XHRpZih0b29sdGlwIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpe1xuXHRcdFx0Y29udGVudHNFbCA9IHRvb2x0aXA7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29udGVudHNFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XHRcblx0XHRcdGlmKHRvb2x0aXAgPT09IHRydWUpe1xuXHRcdFx0XHRpZihjb21wb25lbnQgaW5zdGFuY2VvZiBDZWxsKXtcblx0XHRcdFx0XHR0b29sdGlwID0gY29tcG9uZW50LnZhbHVlO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0aWYoY29tcG9uZW50LmRlZmluaXRpb24uZmllbGQpe1xuXHRcdFx0XHRcdFx0dGhpcy5sYW5nQmluZChcImNvbHVtbnN8XCIgKyBjb21wb25lbnQuZGVmaW5pdGlvbi5maWVsZCwgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0XHRcdGNvbnRlbnRzRWwuaW5uZXJIVE1MID0gdG9vbHRpcCA9IHZhbHVlIHx8IGNvbXBvbmVudC5kZWZpbml0aW9uLnRpdGxlO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0dG9vbHRpcCA9IGNvbXBvbmVudC5kZWZpbml0aW9uLnRpdGxlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRjb250ZW50c0VsLmlubmVySFRNTCA9IHRvb2x0aXA7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRvb2x0aXAgfHwgdG9vbHRpcCA9PT0gMCB8fCB0b29sdGlwID09PSBmYWxzZSl7XG5cdFx0XHRjb250ZW50c0VsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItdG9vbHRpcFwiKTtcblxuXHRcdFx0Y29udGVudHNFbC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIGUgPT4gZS5wcmV2ZW50RGVmYXVsdCgpKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5wb3B1cEluc3RhbmNlID0gdGhpcy5wb3B1cChjb250ZW50c0VsKTtcblx0XHRcdFxuXHRcdFx0aWYodHlwZW9mIHJlbmRlcmVkQ2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRcdHRoaXMucG9wdXBJbnN0YW5jZS5yZW5kZXJDYWxsYmFjayhyZW5kZXJlZENhbGxiYWNrKTtcblx0XHRcdH1cblxuXHRcdFx0Y29vcmRzID0gdGhpcy5wb3B1cEluc3RhbmNlLmNvbnRhaW5lckV2ZW50Q29vcmRzKGUpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnBvcHVwSW5zdGFuY2Uuc2hvdyhjb29yZHMueCArIDE1LCBjb29yZHMueSArIDE1KS5oaWRlT25CbHVyKCgpID0+IHtcblx0XHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwiVG9vbHRpcENsb3NlZFwiLCBjb21wb25lbnQuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdFx0XHR0aGlzLnBvcHVwSW5zdGFuY2UgPSBudWxsO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcIlRvb2x0aXBPcGVuZWRcIiwgY29tcG9uZW50LmdldENvbXBvbmVudCgpKTtcblx0XHR9XG5cdH1cbn1cblxuVG9vbHRpcC5tb2R1bGVOYW1lID0gXCJ0b29sdGlwXCI7XG5cbnZhciBkZWZhdWx0VmFsaWRhdG9ycyA9IHtcblx0Ly9pcyBpbnRlZ2VyXG5cdGludGVnZXI6IGZ1bmN0aW9uKGNlbGwsIHZhbHVlLCBwYXJhbWV0ZXJzKXtcblx0XHRpZih2YWx1ZSA9PT0gXCJcIiB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0dmFsdWUgPSBOdW1iZXIodmFsdWUpO1xuXG5cdFx0cmV0dXJuICFpc05hTih2YWx1ZSkgJiYgaXNGaW5pdGUodmFsdWUpICYmIE1hdGguZmxvb3IodmFsdWUpID09PSB2YWx1ZTtcblx0fSxcblxuXHQvL2lzIGZsb2F0XG5cdGZsb2F0OiBmdW5jdGlvbihjZWxsLCB2YWx1ZSwgcGFyYW1ldGVycyl7XG5cdFx0aWYodmFsdWUgPT09IFwiXCIgfHwgdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRcblx0XHR2YWx1ZSA9IE51bWJlcih2YWx1ZSk7XG5cblx0XHRyZXR1cm4gIWlzTmFOKHZhbHVlKSAmJiBpc0Zpbml0ZSh2YWx1ZSkgJiYgdmFsdWUgJSAxICE9PSAwO1xuXHR9LFxuXG5cdC8vbXVzdCBiZSBhIG51bWJlclxuXHRudW1lcmljOiBmdW5jdGlvbihjZWxsLCB2YWx1ZSwgcGFyYW1ldGVycyl7XG5cdFx0aWYodmFsdWUgPT09IFwiXCIgfHwgdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gIWlzTmFOKHZhbHVlKTtcblx0fSxcblxuXHQvL211c3QgYmUgYSBzdHJpbmdcblx0c3RyaW5nOiBmdW5jdGlvbihjZWxsLCB2YWx1ZSwgcGFyYW1ldGVycyl7XG5cdFx0aWYodmFsdWUgPT09IFwiXCIgfHwgdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gaXNOYU4odmFsdWUpO1xuXHR9LFxuXG5cdC8vbWF4aW11bSB2YWx1ZVxuXHRtYXg6IGZ1bmN0aW9uKGNlbGwsIHZhbHVlLCBwYXJhbWV0ZXJzKXtcblx0XHRpZih2YWx1ZSA9PT0gXCJcIiB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKSA8PSBwYXJhbWV0ZXJzO1xuXHR9LFxuXG5cdC8vbWluaW11bSB2YWx1ZVxuXHRtaW46IGZ1bmN0aW9uKGNlbGwsIHZhbHVlLCBwYXJhbWV0ZXJzKXtcblx0XHRpZih2YWx1ZSA9PT0gXCJcIiB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKSA+PSBwYXJhbWV0ZXJzO1xuXHR9LFxuXG5cdC8vc3RhcnRzIHdpdGggIHZhbHVlXG5cdHN0YXJ0czogZnVuY3Rpb24oY2VsbCwgdmFsdWUsIHBhcmFtZXRlcnMpe1xuXHRcdGlmKHZhbHVlID09PSBcIlwiIHx8IHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIFN0cmluZyh2YWx1ZSkudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKFN0cmluZyhwYXJhbWV0ZXJzKS50b0xvd2VyQ2FzZSgpKTtcblx0fSxcblxuXHQvL2VuZHMgd2l0aCAgdmFsdWVcblx0ZW5kczogZnVuY3Rpb24oY2VsbCwgdmFsdWUsIHBhcmFtZXRlcnMpe1xuXHRcdGlmKHZhbHVlID09PSBcIlwiIHx8IHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIFN0cmluZyh2YWx1ZSkudG9Mb3dlckNhc2UoKS5lbmRzV2l0aChTdHJpbmcocGFyYW1ldGVycykudG9Mb3dlckNhc2UoKSk7XG5cdH0sXG5cblxuXHQvL21pbmltdW0gc3RyaW5nIGxlbmd0aFxuXHRtaW5MZW5ndGg6IGZ1bmN0aW9uKGNlbGwsIHZhbHVlLCBwYXJhbWV0ZXJzKXtcblx0XHRpZih2YWx1ZSA9PT0gXCJcIiB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiBTdHJpbmcodmFsdWUpLmxlbmd0aCA+PSBwYXJhbWV0ZXJzO1xuXHR9LFxuXG5cdC8vbWF4aW11bSBzdHJpbmcgbGVuZ3RoXG5cdG1heExlbmd0aDogZnVuY3Rpb24oY2VsbCwgdmFsdWUsIHBhcmFtZXRlcnMpe1xuXHRcdGlmKHZhbHVlID09PSBcIlwiIHx8IHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIFN0cmluZyh2YWx1ZSkubGVuZ3RoIDw9IHBhcmFtZXRlcnM7XG5cdH0sXG5cblx0Ly9pbiBwcm92aWRlZCB2YWx1ZSBsaXN0XG5cdGluOiBmdW5jdGlvbihjZWxsLCB2YWx1ZSwgcGFyYW1ldGVycyl7XG5cdFx0aWYodmFsdWUgPT09IFwiXCIgfHwgdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdGlmKHR5cGVvZiBwYXJhbWV0ZXJzID09IFwic3RyaW5nXCIpe1xuXHRcdFx0cGFyYW1ldGVycyA9IHBhcmFtZXRlcnMuc3BsaXQoXCJ8XCIpO1xuXHRcdH1cblxuXHRcdHJldHVybiBwYXJhbWV0ZXJzLmluZGV4T2YodmFsdWUpID4gLTE7XG5cdH0sXG5cblx0Ly9tdXN0IG1hdGNoIHByb3ZpZGVkIHJlZ2V4XG5cdHJlZ2V4OiBmdW5jdGlvbihjZWxsLCB2YWx1ZSwgcGFyYW1ldGVycyl7XG5cdFx0aWYodmFsdWUgPT09IFwiXCIgfHwgdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHR2YXIgcmVnID0gbmV3IFJlZ0V4cChwYXJhbWV0ZXJzKTtcblxuXHRcdHJldHVybiByZWcudGVzdCh2YWx1ZSk7XG5cdH0sXG5cblx0Ly92YWx1ZSBtdXN0IGJlIHVuaXF1ZSBpbiB0aGlzIGNvbHVtblxuXHR1bmlxdWU6IGZ1bmN0aW9uKGNlbGwsIHZhbHVlLCBwYXJhbWV0ZXJzKXtcblx0XHRpZih2YWx1ZSA9PT0gXCJcIiB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHZhciB1bmlxdWUgPSB0cnVlO1xuXG5cdFx0dmFyIGNlbGxEYXRhID0gY2VsbC5nZXREYXRhKCk7XG5cdFx0dmFyIGNvbHVtbiA9IGNlbGwuZ2V0Q29sdW1uKCkuX2dldFNlbGYoKTtcblxuXHRcdHRoaXMudGFibGUucm93TWFuYWdlci5yb3dzLmZvckVhY2goZnVuY3Rpb24ocm93KXtcblx0XHRcdHZhciBkYXRhID0gcm93LmdldERhdGEoKTtcblxuXHRcdFx0aWYoZGF0YSAhPT0gY2VsbERhdGEpe1xuXHRcdFx0XHRpZih2YWx1ZSA9PSBjb2x1bW4uZ2V0RmllbGRWYWx1ZShkYXRhKSl7XG5cdFx0XHRcdFx0dW5pcXVlID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHJldHVybiB1bmlxdWU7XG5cdH0sXG5cblx0Ly9tdXN0IGhhdmUgYSB2YWx1ZVxuXHRyZXF1aXJlZDpmdW5jdGlvbihjZWxsLCB2YWx1ZSwgcGFyYW1ldGVycyl7XG5cdFx0cmV0dXJuIHZhbHVlICE9PSBcIlwiICYmIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSAhPT0gXCJ1bmRlZmluZWRcIjtcblx0fSxcbn07XG5cbmNsYXNzIFZhbGlkYXRlIGV4dGVuZHMgTW9kdWxle1xuXHRcblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblx0XHRcblx0XHR0aGlzLmludmFsaWRDZWxscyA9IFtdO1xuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInZhbGlkYXRpb25Nb2RlXCIsIFwiYmxvY2tpbmdcIik7XG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcInZhbGlkYXRvclwiKTtcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcImdldEludmFsaWRDZWxsc1wiLCB0aGlzLmdldEludmFsaWRDZWxscy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcImNsZWFyQ2VsbFZhbGlkYXRpb25cIiwgdGhpcy51c2VyQ2xlYXJDZWxsVmFsaWRhdGlvbi5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcInZhbGlkYXRlXCIsIHRoaXMudXNlclZhbGlkYXRlLmJpbmQodGhpcykpO1xuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcImNlbGxcIiwgXCJpc1ZhbGlkXCIsIHRoaXMuY2VsbElzVmFsaWQuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwiY2VsbFwiLCBcImNsZWFyVmFsaWRhdGlvblwiLCB0aGlzLmNsZWFyVmFsaWRhdGlvbi5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJjZWxsXCIsIFwidmFsaWRhdGVcIiwgdGhpcy5jZWxsVmFsaWRhdGUuYmluZCh0aGlzKSk7XG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwiY29sdW1uXCIsIFwidmFsaWRhdGVcIiwgdGhpcy5jb2x1bW5WYWxpZGF0ZS5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJyb3dcIiwgXCJ2YWxpZGF0ZVwiLCB0aGlzLnJvd1ZhbGlkYXRlLmJpbmQodGhpcykpO1xuXHR9XG5cdFxuXHRcblx0aW5pdGlhbGl6ZSgpe1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY2VsbC1kZWxldGVcIiwgdGhpcy5jbGVhclZhbGlkYXRpb24uYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tbGF5b3V0XCIsIHRoaXMuaW5pdGlhbGl6ZUNvbHVtbkNoZWNrLmJpbmQodGhpcykpO1xuXHRcdFxuXHRcdHRoaXMuc3Vic2NyaWJlKFwiZWRpdC1zdWNjZXNzXCIsIHRoaXMuZWRpdFZhbGlkYXRlLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiZWRpdC1lZGl0b3ItY2xlYXJcIiwgdGhpcy5lZGl0b3JDbGVhci5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImVkaXQtZWRpdGVkLWNsZWFyXCIsIHRoaXMuZWRpdGVkQ2xlYXIuYmluZCh0aGlzKSk7XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLyBFdmVudCBIYW5kbGluZyAvLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHRlZGl0VmFsaWRhdGUoY2VsbCwgdmFsdWUsIHByZXZpb3VzVmFsdWUpe1xuXHRcdHZhciB2YWxpZCA9IHRoaXMudGFibGUub3B0aW9ucy52YWxpZGF0aW9uTW9kZSAhPT0gXCJtYW51YWxcIiA/IHRoaXMudmFsaWRhdGUoY2VsbC5jb2x1bW4ubW9kdWxlcy52YWxpZGF0ZSwgY2VsbCwgdmFsdWUpIDogdHJ1ZTtcblx0XHRcblx0XHQvLyBhbGxvdyB0aW1lIGZvciBlZGl0b3IgdG8gbWFrZSByZW5kZXIgY2hhbmdlcyB0aGVuIHN0eWxlIGNlbGxcblx0XHRpZih2YWxpZCAhPT0gdHJ1ZSl7XG5cdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0Y2VsbC5nZXRFbGVtZW50KCkuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci12YWxpZGF0aW9uLWZhaWxcIik7XG5cdFx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInZhbGlkYXRpb25GYWlsZWRcIiwgY2VsbC5nZXRDb21wb25lbnQoKSwgdmFsdWUsIHZhbGlkKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gdmFsaWQ7XG5cdH1cblx0XG5cdGVkaXRvckNsZWFyKGNlbGwsIGNhbmNlbGxlZCl7XG5cdFx0aWYoY2FuY2VsbGVkKXtcblx0XHRcdGlmKGNlbGwuY29sdW1uLm1vZHVsZXMudmFsaWRhdGUpe1xuXHRcdFx0XHR0aGlzLmNlbGxWYWxpZGF0ZShjZWxsKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRjZWxsLmdldEVsZW1lbnQoKS5jbGFzc0xpc3QucmVtb3ZlKFwidGFidWxhdG9yLXZhbGlkYXRpb24tZmFpbFwiKTtcblx0fVxuXHRcblx0ZWRpdGVkQ2xlYXIoY2VsbCl7XG5cdFx0aWYoY2VsbC5tb2R1bGVzLnZhbGlkYXRlKXtcblx0XHRcdGNlbGwubW9kdWxlcy52YWxpZGF0ZS5pbnZhbGlkID0gZmFsc2U7XG5cdFx0fVxuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vIENlbGwgRnVuY3Rpb25zIC8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0Y2VsbElzVmFsaWQoY2VsbCl7XG5cdFx0cmV0dXJuIGNlbGwubW9kdWxlcy52YWxpZGF0ZSA/IChjZWxsLm1vZHVsZXMudmFsaWRhdGUuaW52YWxpZCB8fCB0cnVlKSA6IHRydWU7XG5cdH1cblx0XG5cdGNlbGxWYWxpZGF0ZShjZWxsKXtcblx0XHRyZXR1cm4gdGhpcy52YWxpZGF0ZShjZWxsLmNvbHVtbi5tb2R1bGVzLnZhbGlkYXRlLCBjZWxsLCBjZWxsLmdldFZhbHVlKCkpO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8gQ29sdW1uIEZ1bmN0aW9ucyAvLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0Y29sdW1uVmFsaWRhdGUoY29sdW1uKXtcblx0XHR2YXIgaW52YWxpZCA9IFtdO1xuXHRcdFxuXHRcdGNvbHVtbi5jZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG5cdFx0XHRpZih0aGlzLmNlbGxWYWxpZGF0ZShjZWxsKSAhPT0gdHJ1ZSl7XG5cdFx0XHRcdGludmFsaWQucHVzaChjZWxsLmdldENvbXBvbmVudCgpKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gaW52YWxpZC5sZW5ndGggPyBpbnZhbGlkIDogdHJ1ZTtcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLyBSb3cgRnVuY3Rpb25zIC8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdHJvd1ZhbGlkYXRlKHJvdyl7XG5cdFx0dmFyIGludmFsaWQgPSBbXTtcblx0XHRcblx0XHRyb3cuY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuXHRcdFx0aWYodGhpcy5jZWxsVmFsaWRhdGUoY2VsbCkgIT09IHRydWUpe1xuXHRcdFx0XHRpbnZhbGlkLnB1c2goY2VsbC5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0cmV0dXJuIGludmFsaWQubGVuZ3RoID8gaW52YWxpZCA6IHRydWU7XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLyBUYWJsZSBGdW5jdGlvbnMgLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHRcblx0dXNlckNsZWFyQ2VsbFZhbGlkYXRpb24oY2VsbHMpe1xuXHRcdGlmKCFjZWxscyl7XG5cdFx0XHRjZWxscyA9IHRoaXMuZ2V0SW52YWxpZENlbGxzKCk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKCFBcnJheS5pc0FycmF5KGNlbGxzKSl7XG5cdFx0XHRjZWxscyA9IFtjZWxsc107XG5cdFx0fVxuXHRcdFxuXHRcdGNlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcblx0XHRcdHRoaXMuY2xlYXJWYWxpZGF0aW9uKGNlbGwuX2dldFNlbGYoKSk7XG5cdFx0fSk7XG5cdH1cblx0XG5cdHVzZXJWYWxpZGF0ZShjZWxscyl7XG5cdFx0dmFyIG91dHB1dCA9IFtdO1xuXHRcdFxuXHRcdC8vY2xlYXIgcm93IGRhdGFcblx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIucm93cy5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdHJvdyA9IHJvdy5nZXRDb21wb25lbnQoKTtcblx0XHRcdFxuXHRcdFx0dmFyIHZhbGlkID0gcm93LnZhbGlkYXRlKCk7XG5cdFx0XHRcblx0XHRcdGlmKHZhbGlkICE9PSB0cnVlKXtcblx0XHRcdFx0b3V0cHV0ID0gb3V0cHV0LmNvbmNhdCh2YWxpZCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0cmV0dXJuIG91dHB1dC5sZW5ndGggPyBvdXRwdXQgOiB0cnVlO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8gSW50ZXJuYWwgTG9naWMgLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0aW5pdGlhbGl6ZUNvbHVtbkNoZWNrKGNvbHVtbil7XG5cdFx0aWYodHlwZW9mIGNvbHVtbi5kZWZpbml0aW9uLnZhbGlkYXRvciAhPT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHR0aGlzLmluaXRpYWxpemVDb2x1bW4oY29sdW1uKTtcblx0XHR9XG5cdH1cblx0XG5cdC8vdmFsaWRhdGVcblx0aW5pdGlhbGl6ZUNvbHVtbihjb2x1bW4pe1xuXHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHRjb25maWcgPSBbXSxcblx0XHR2YWxpZGF0b3I7XG5cdFx0XG5cdFx0aWYoY29sdW1uLmRlZmluaXRpb24udmFsaWRhdG9yKXtcblx0XHRcdFxuXHRcdFx0aWYoQXJyYXkuaXNBcnJheShjb2x1bW4uZGVmaW5pdGlvbi52YWxpZGF0b3IpKXtcblx0XHRcdFx0Y29sdW1uLmRlZmluaXRpb24udmFsaWRhdG9yLmZvckVhY2goKGl0ZW0pID0+IHtcblx0XHRcdFx0XHR2YWxpZGF0b3IgPSBzZWxmLl9leHRyYWN0VmFsaWRhdG9yKGl0ZW0pO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKHZhbGlkYXRvcil7XG5cdFx0XHRcdFx0XHRjb25maWcucHVzaCh2YWxpZGF0b3IpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHRcdFxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR2YWxpZGF0b3IgPSB0aGlzLl9leHRyYWN0VmFsaWRhdG9yKGNvbHVtbi5kZWZpbml0aW9uLnZhbGlkYXRvcik7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih2YWxpZGF0b3Ipe1xuXHRcdFx0XHRcdGNvbmZpZy5wdXNoKHZhbGlkYXRvcik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Y29sdW1uLm1vZHVsZXMudmFsaWRhdGUgPSBjb25maWcubGVuZ3RoID8gY29uZmlnIDogZmFsc2U7XG5cdFx0fVxuXHR9XG5cdFxuXHRfZXh0cmFjdFZhbGlkYXRvcih2YWx1ZSl7XG5cdFx0dmFyIHR5cGUsIHBhcmFtcywgcG9zO1xuXHRcdFxuXHRcdHN3aXRjaCh0eXBlb2YgdmFsdWUpe1xuXHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0XHRwb3MgPSB2YWx1ZS5pbmRleE9mKCc6Jyk7XG5cdFx0XHRcblx0XHRcdFx0aWYocG9zID4gLTEpe1xuXHRcdFx0XHRcdHR5cGUgPSB2YWx1ZS5zdWJzdHJpbmcoMCxwb3MpO1xuXHRcdFx0XHRcdHBhcmFtcyA9IHZhbHVlLnN1YnN0cmluZyhwb3MrMSk7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHR0eXBlID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdFxuXHRcdFx0XHRyZXR1cm4gdGhpcy5fYnVpbGRWYWxpZGF0b3IodHlwZSwgcGFyYW1zKTtcblx0XHRcdFxuXHRcdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHRcdHJldHVybiB0aGlzLl9idWlsZFZhbGlkYXRvcih2YWx1ZSk7XG5cdFx0XHRcblx0XHRcdGNhc2UgXCJvYmplY3RcIjpcblx0XHRcdFx0cmV0dXJuIHRoaXMuX2J1aWxkVmFsaWRhdG9yKHZhbHVlLnR5cGUsIHZhbHVlLnBhcmFtZXRlcnMpO1xuXHRcdH1cblx0fVxuXHRcblx0X2J1aWxkVmFsaWRhdG9yKHR5cGUsIHBhcmFtcyl7XG5cdFx0XG5cdFx0dmFyIGZ1bmMgPSB0eXBlb2YgdHlwZSA9PSBcImZ1bmN0aW9uXCIgPyB0eXBlIDogVmFsaWRhdGUudmFsaWRhdG9yc1t0eXBlXTtcblx0XHRcblx0XHRpZighZnVuYyl7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJWYWxpZGF0b3IgU2V0dXAgRXJyb3IgLSBObyBtYXRjaGluZyB2YWxpZGF0b3IgZm91bmQ6XCIsIHR5cGUpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHR5cGU6dHlwZW9mIHR5cGUgPT0gXCJmdW5jdGlvblwiID8gXCJmdW5jdGlvblwiIDogdHlwZSxcblx0XHRcdFx0ZnVuYzpmdW5jLFxuXHRcdFx0XHRwYXJhbXM6cGFyYW1zLFxuXHRcdFx0fTtcblx0XHR9XG5cdH1cblx0XG5cdHZhbGlkYXRlKHZhbGlkYXRvcnMsIGNlbGwsIHZhbHVlKXtcblx0XHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0ZmFpbGVkVmFsaWRhdG9ycyA9IFtdLFxuXHRcdGludmFsaWRJbmRleCA9IHRoaXMuaW52YWxpZENlbGxzLmluZGV4T2YoY2VsbCk7XG5cdFx0XG5cdFx0aWYodmFsaWRhdG9ycyl7XG5cdFx0XHR2YWxpZGF0b3JzLmZvckVhY2goKGl0ZW0pID0+IHtcblx0XHRcdFx0aWYoIWl0ZW0uZnVuYy5jYWxsKHNlbGYsIGNlbGwuZ2V0Q29tcG9uZW50KCksIHZhbHVlLCBpdGVtLnBhcmFtcykpe1xuXHRcdFx0XHRcdGZhaWxlZFZhbGlkYXRvcnMucHVzaCh7XG5cdFx0XHRcdFx0XHR0eXBlOml0ZW0udHlwZSxcblx0XHRcdFx0XHRcdHBhcmFtZXRlcnM6aXRlbS5wYXJhbXNcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKCFjZWxsLm1vZHVsZXMudmFsaWRhdGUpe1xuXHRcdFx0Y2VsbC5tb2R1bGVzLnZhbGlkYXRlID0ge307XG5cdFx0fVxuXHRcdFxuXHRcdGlmKCFmYWlsZWRWYWxpZGF0b3JzLmxlbmd0aCl7XG5cdFx0XHRjZWxsLm1vZHVsZXMudmFsaWRhdGUuaW52YWxpZCA9IGZhbHNlO1xuXHRcdFx0Y2VsbC5nZXRFbGVtZW50KCkuY2xhc3NMaXN0LnJlbW92ZShcInRhYnVsYXRvci12YWxpZGF0aW9uLWZhaWxcIik7XG5cdFx0XHRcblx0XHRcdGlmKGludmFsaWRJbmRleCA+IC0xKXtcblx0XHRcdFx0dGhpcy5pbnZhbGlkQ2VsbHMuc3BsaWNlKGludmFsaWRJbmRleCwgMSk7XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y2VsbC5tb2R1bGVzLnZhbGlkYXRlLmludmFsaWQgPSBmYWlsZWRWYWxpZGF0b3JzO1xuXHRcdFx0XG5cdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMudmFsaWRhdGlvbk1vZGUgIT09IFwibWFudWFsXCIpe1xuXHRcdFx0XHRjZWxsLmdldEVsZW1lbnQoKS5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXZhbGlkYXRpb24tZmFpbFwiKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoaW52YWxpZEluZGV4ID09IC0xKXtcblx0XHRcdFx0dGhpcy5pbnZhbGlkQ2VsbHMucHVzaChjZWxsKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIGZhaWxlZFZhbGlkYXRvcnMubGVuZ3RoID8gZmFpbGVkVmFsaWRhdG9ycyA6IHRydWU7XG5cdH1cblx0XG5cdGdldEludmFsaWRDZWxscygpe1xuXHRcdHZhciBvdXRwdXQgPSBbXTtcblx0XHRcblx0XHR0aGlzLmludmFsaWRDZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG5cdFx0XHRvdXRwdXQucHVzaChjZWxsLmdldENvbXBvbmVudCgpKTtcblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cdFxuXHRjbGVhclZhbGlkYXRpb24oY2VsbCl7XG5cdFx0dmFyIGludmFsaWRJbmRleDtcblx0XHRcblx0XHRpZihjZWxsLm1vZHVsZXMudmFsaWRhdGUgJiYgY2VsbC5tb2R1bGVzLnZhbGlkYXRlLmludmFsaWQpe1xuXHRcdFx0XG5cdFx0XHRjZWxsLmdldEVsZW1lbnQoKS5jbGFzc0xpc3QucmVtb3ZlKFwidGFidWxhdG9yLXZhbGlkYXRpb24tZmFpbFwiKTtcblx0XHRcdGNlbGwubW9kdWxlcy52YWxpZGF0ZS5pbnZhbGlkID0gZmFsc2U7XG5cdFx0XHRcblx0XHRcdGludmFsaWRJbmRleCA9IHRoaXMuaW52YWxpZENlbGxzLmluZGV4T2YoY2VsbCk7XG5cdFx0XHRcblx0XHRcdGlmKGludmFsaWRJbmRleCA+IC0xKXtcblx0XHRcdFx0dGhpcy5pbnZhbGlkQ2VsbHMuc3BsaWNlKGludmFsaWRJbmRleCwgMSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cblZhbGlkYXRlLm1vZHVsZU5hbWUgPSBcInZhbGlkYXRlXCI7XG5cbi8vbG9hZCBkZWZhdWx0c1xuVmFsaWRhdGUudmFsaWRhdG9ycyA9IGRlZmF1bHRWYWxpZGF0b3JzO1xuXG52YXIgbW9kdWxlcyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcblx0X19wcm90b19fOiBudWxsLFxuXHRBY2Nlc3Nvck1vZHVsZTogQWNjZXNzb3IsXG5cdEFqYXhNb2R1bGU6IEFqYXgsXG5cdENsaXBib2FyZE1vZHVsZTogQ2xpcGJvYXJkLFxuXHRDb2x1bW5DYWxjc01vZHVsZTogQ29sdW1uQ2FsY3MsXG5cdERhdGFUcmVlTW9kdWxlOiBEYXRhVHJlZSxcblx0RG93bmxvYWRNb2R1bGU6IERvd25sb2FkLFxuXHRFZGl0TW9kdWxlOiBFZGl0JDEsXG5cdEV4cG9ydE1vZHVsZTogRXhwb3J0LFxuXHRGaWx0ZXJNb2R1bGU6IEZpbHRlcixcblx0Rm9ybWF0TW9kdWxlOiBGb3JtYXQsXG5cdEZyb3plbkNvbHVtbnNNb2R1bGU6IEZyb3plbkNvbHVtbnMsXG5cdEZyb3plblJvd3NNb2R1bGU6IEZyb3plblJvd3MsXG5cdEdyb3VwUm93c01vZHVsZTogR3JvdXBSb3dzLFxuXHRIaXN0b3J5TW9kdWxlOiBIaXN0b3J5LFxuXHRIdG1sVGFibGVJbXBvcnRNb2R1bGU6IEh0bWxUYWJsZUltcG9ydCxcblx0SW1wb3J0TW9kdWxlOiBJbXBvcnQsXG5cdEludGVyYWN0aW9uTW9kdWxlOiBJbnRlcmFjdGlvbixcblx0S2V5YmluZGluZ3NNb2R1bGU6IEtleWJpbmRpbmdzLFxuXHRNZW51TW9kdWxlOiBNZW51LFxuXHRNb3ZlQ29sdW1uc01vZHVsZTogTW92ZUNvbHVtbnMsXG5cdE1vdmVSb3dzTW9kdWxlOiBNb3ZlUm93cyxcblx0TXV0YXRvck1vZHVsZTogTXV0YXRvcixcblx0UGFnZU1vZHVsZTogUGFnZSxcblx0UGVyc2lzdGVuY2VNb2R1bGU6IFBlcnNpc3RlbmNlLFxuXHRQb3B1cE1vZHVsZTogUG9wdXAkMSxcblx0UHJpbnRNb2R1bGU6IFByaW50LFxuXHRSZWFjdGl2ZURhdGFNb2R1bGU6IFJlYWN0aXZlRGF0YSxcblx0UmVzaXplQ29sdW1uc01vZHVsZTogUmVzaXplQ29sdW1ucyxcblx0UmVzaXplUm93c01vZHVsZTogUmVzaXplUm93cyxcblx0UmVzaXplVGFibGVNb2R1bGU6IFJlc2l6ZVRhYmxlLFxuXHRSZXNwb25zaXZlTGF5b3V0TW9kdWxlOiBSZXNwb25zaXZlTGF5b3V0LFxuXHRTZWxlY3RSb3dNb2R1bGU6IFNlbGVjdFJvdyxcblx0U29ydE1vZHVsZTogU29ydCxcblx0VG9vbHRpcE1vZHVsZTogVG9vbHRpcCxcblx0VmFsaWRhdGVNb2R1bGU6IFZhbGlkYXRlXG59KTtcblxudmFyIGRlZmF1bHRPcHRpb25zID0ge1xuXG5cdGRlYnVnRXZlbnRzRXh0ZXJuYWw6ZmFsc2UsIC8vZmxhZyB0byBjb25zb2xlIGxvZyBldmVudHNcblx0ZGVidWdFdmVudHNJbnRlcm5hbDpmYWxzZSwgLy9mbGFnIHRvIGNvbnNvbGUgbG9nIGV2ZW50c1xuXHRkZWJ1Z0ludmFsaWRPcHRpb25zOnRydWUsIC8vYWxsb3cgdG9nZ2xpbmcgb2YgaW52YWxpZCBvcHRpb24gd2FybmluZ3Ncblx0ZGVidWdJbnZhbGlkQ29tcG9uZW50RnVuY3M6dHJ1ZSwgLy9hbGxvdyB0b2dnbGluZyBvZiBpbnZhbGlkIGNvbXBvbmVudCB3YXJuaW5nc1xuXHRkZWJ1Z0luaXRpYWxpemF0aW9uOnRydWUsIC8vYWxsb3cgdG9nZ2xpbmcgb2YgcHJlIGluaXRpYWxpemF0aW9uIGZ1bmN0aW9uIGNhbGwgd2FybmluZ3Ncblx0ZGVidWdEZXByZWNhdGlvbjp0cnVlLCAvL2FsbG93IHRvZ2dsaW5nIG9mIGRlcHJlY2F0aW9uIHdhcm5pbmdzXG5cblx0aGVpZ2h0OmZhbHNlLCAvL2hlaWdodCBvZiB0YWJ1bGF0b3Jcblx0bWluSGVpZ2h0OmZhbHNlLCAvL21pbmltdW0gaGVpZ2h0IG9mIHRhYnVsYXRvclxuXHRtYXhIZWlnaHQ6ZmFsc2UsIC8vbWF4aW11bSBoZWlnaHQgb2YgdGFidWxhdG9yXG5cblx0Y29sdW1uSGVhZGVyVmVydEFsaWduOlwidG9wXCIsIC8vdmVydGljYWwgYWxpZ25tZW50IG9mIGNvbHVtbiBoZWFkZXJzXG5cblx0cG9wdXBDb250YWluZXI6ZmFsc2UsXG5cblx0Y29sdW1uczpbXSwvL3N0b3JlIGZvciBjb2x1bSBoZWFkZXIgaW5mb1xuXHRjb2x1bW5EZWZhdWx0czp7fSwgLy9zdG9yZSBjb2x1bW4gZGVmYXVsdCBwcm9wc1xuXG5cdGRhdGE6ZmFsc2UsIC8vZGVmYXVsdCBzdGFydGluZyBkYXRhXG5cblx0YXV0b0NvbHVtbnM6ZmFsc2UsIC8vYnVpbGQgY29sdW1ucyBmcm9tIGRhdGEgcm93IHN0cnVjdHVyZVxuXHRhdXRvQ29sdW1uc0RlZmluaXRpb25zOmZhbHNlLFxuXG5cdG5lc3RlZEZpZWxkU2VwYXJhdG9yOlwiLlwiLCAvL3NlcGFyYXRvciBmb3IgbmVzdGVkIGRhdGFcblxuXHRmb290ZXJFbGVtZW50OmZhbHNlLCAvL2hvbGQgZm9vdGVyIGVsZW1lbnRcblxuXHRpbmRleDpcImlkXCIsIC8vZmlsZWQgZm9yIHJvdyBpbmRleFxuXG5cdHRleHREaXJlY3Rpb246XCJhdXRvXCIsXG5cblx0YWRkUm93UG9zOlwiYm90dG9tXCIsIC8vcG9zaXRpb24gdG8gaW5zZXJ0IGJsYW5rIHJvd3MsIHRvcHxib3R0b21cblxuXHRoZWFkZXJWaXNpYmxlOnRydWUsIC8vaGlkZSBoZWFkZXJcblxuXHRyZW5kZXJWZXJ0aWNhbDpcInZpcnR1YWxcIixcblx0cmVuZGVySG9yaXpvbnRhbDpcImJhc2ljXCIsXG5cdHJlbmRlclZlcnRpY2FsQnVmZmVyOjAsIC8vIHNldCB2aXJ0dWFsIERPTSBidWZmZXIgc2l6ZVxuXG5cdHNjcm9sbFRvUm93UG9zaXRpb246XCJ0b3BcIixcblx0c2Nyb2xsVG9Sb3dJZlZpc2libGU6dHJ1ZSxcblxuXHRzY3JvbGxUb0NvbHVtblBvc2l0aW9uOlwibGVmdFwiLFxuXHRzY3JvbGxUb0NvbHVtbklmVmlzaWJsZTp0cnVlLFxuXG5cdHJvd0Zvcm1hdHRlcjpmYWxzZSxcblx0cm93Rm9ybWF0dGVyUHJpbnQ6bnVsbCxcblx0cm93Rm9ybWF0dGVyQ2xpcGJvYXJkOm51bGwsXG5cdHJvd0Zvcm1hdHRlckh0bWxPdXRwdXQ6bnVsbCxcblxuXHRyb3dIZWlnaHQ6bnVsbCxcblxuXHRwbGFjZWhvbGRlcjpmYWxzZSxcblxuXHRkYXRhTG9hZGVyOnRydWUsXG5cdGRhdGFMb2FkZXJMb2FkaW5nOmZhbHNlLFxuXHRkYXRhTG9hZGVyRXJyb3I6ZmFsc2UsXG5cdGRhdGFMb2FkZXJFcnJvclRpbWVvdXQ6MzAwMCxcblxuXHRkYXRhU2VuZFBhcmFtczp7fSxcblxuXHRkYXRhUmVjZWl2ZVBhcmFtczp7fSxcbn07XG5cbmNsYXNzIE9wdGlvbnNMaXN0IHtcblx0Y29uc3RydWN0b3IodGFibGUsIG1zZ1R5cGUsIGRlZmF1bHRzID0ge30pe1xuXHRcdHRoaXMudGFibGUgPSB0YWJsZTtcblx0XHR0aGlzLm1zZ1R5cGUgPSBtc2dUeXBlO1xuXHRcdHRoaXMucmVnaXN0ZXJlZERlZmF1bHRzID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdHMpO1xuXHR9XG5cdFxuXHRyZWdpc3RlcihvcHRpb24sIHZhbHVlKXtcblx0XHR0aGlzLnJlZ2lzdGVyZWREZWZhdWx0c1tvcHRpb25dID0gdmFsdWU7XG5cdH1cblx0XG5cdGdlbmVyYXRlKGRlZmF1bHRPcHRpb25zLCB1c2VyT3B0aW9ucyA9IHt9KXtcblx0XHR2YXIgb3V0cHV0ID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5yZWdpc3RlcmVkRGVmYXVsdHMpLFxuXHRcdHdhcm4gPSB0aGlzLnRhYmxlLm9wdGlvbnMuZGVidWdJbnZhbGlkT3B0aW9ucyB8fCB1c2VyT3B0aW9ucy5kZWJ1Z0ludmFsaWRPcHRpb25zID09PSB0cnVlO1xuXHRcdFxuXHRcdE9iamVjdC5hc3NpZ24ob3V0cHV0LCBkZWZhdWx0T3B0aW9ucyk7XG5cdFx0XG5cdFx0Zm9yIChsZXQga2V5IGluIHVzZXJPcHRpb25zKXtcblx0XHRcdGlmKCFvdXRwdXQuaGFzT3duUHJvcGVydHkoa2V5KSl7XG5cdFx0XHRcdGlmKHdhcm4pe1xuXHRcdFx0XHRcdGNvbnNvbGUud2FybihcIkludmFsaWQgXCIgKyB0aGlzLm1zZ1R5cGUgKyBcIiBvcHRpb246XCIsIGtleSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRvdXRwdXRba2V5XSA9IHVzZXJPcHRpb25zLmtleTtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdFxuXHRcdGZvciAobGV0IGtleSBpbiBvdXRwdXQpe1xuXHRcdFx0aWYoa2V5IGluIHVzZXJPcHRpb25zKXtcblx0XHRcdFx0b3V0cHV0W2tleV0gPSB1c2VyT3B0aW9uc1trZXldO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRpZihBcnJheS5pc0FycmF5KG91dHB1dFtrZXldKSl7XG5cdFx0XHRcdFx0b3V0cHV0W2tleV0gPSBPYmplY3QuYXNzaWduKFtdLCBvdXRwdXRba2V5XSk7XG5cdFx0XHRcdH1lbHNlIGlmKHR5cGVvZiBvdXRwdXRba2V5XSA9PT0gXCJvYmplY3RcIiAmJiBvdXRwdXRba2V5XSAhPT0gbnVsbCl7XG5cdFx0XHRcdFx0b3V0cHV0W2tleV0gPSBPYmplY3QuYXNzaWduKHt9LCBvdXRwdXRba2V5XSk7XG5cdFx0XHRcdH1lbHNlIGlmICh0eXBlb2Ygb3V0cHV0W2tleV0gPT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0XHRcdGRlbGV0ZSBvdXRwdXRba2V5XTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG59XG5cbmNsYXNzIFJlbmRlcmVyIGV4dGVuZHMgQ29yZUZlYXR1cmV7XG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cblx0XHR0aGlzLmVsZW1lbnRWZXJ0aWNhbCA9IHRhYmxlLnJvd01hbmFnZXIuZWxlbWVudDtcblx0XHR0aGlzLmVsZW1lbnRIb3Jpem9udGFsID0gdGFibGUuY29sdW1uTWFuYWdlci5lbGVtZW50O1xuXHRcdHRoaXMudGFibGVFbGVtZW50ID0gIHRhYmxlLnJvd01hbmFnZXIudGFibGVFbGVtZW50O1xuXG5cdFx0dGhpcy52ZXJ0aWNhbEZpbGxNb2RlID0gXCJmaXRcIjsgLy8gdXNlZCBieSByb3cgbWFuYWdlciB0byBkZXRlcm1pbmUgaG93IHRvIHNpemUgdGhlIHJlbmRlciBhcmVhIChcImZpdFwiIC0gZml0cyBjb250YWluZXIgdG8gdGhlIGNvbnRlbnRzLCBcImZpbGxcIiAtIGZpbGxzIHRoZSBjb250YWluZXIgd2l0aG91dCByZXNpemluZyBpdClcblx0fVxuXG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLyBJbnRlcm5hbCBCaW5kaW5ncyAvLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXHRpbml0aWFsaXplKCl7XG5cdFx0Ly9pbml0aWFsaXplIGNvcmUgZnVuY3Rpb25hbGl0eVxuXHR9XG5cblx0Y2xlYXJSb3dzKCl7XG5cdFx0Ly9jbGVhciBkb3duIGV4aXN0aW5nIHJvd3MgbGF5b3V0XG5cdH1cblxuXHRjbGVhckNvbHVtbnMoKXtcblx0XHQvL2NsZWFyIGRvd24gZXhpc3RpbmcgY29sdW1ucyBsYXlvdXRcblx0fVxuXG5cblx0cmVpbml0aWFsaXplQ29sdW1uV2lkdGhzKGNvbHVtbnMpe1xuXHRcdC8vcmVzaXplIGNvbHVtbnMgdG8gZml0IGRhdGFcblx0fVxuXG5cblx0cmVuZGVyUm93cygpe1xuXHRcdC8vcmVuZGVyIHJvd3MgZnJvbSBhIGNsZWFuIHNsYXRlXG5cdH1cblxuXHRyZW5kZXJDb2x1bW5zKCl7XG5cdFx0Ly9yZW5kZXIgY29sdW1ucyBmcm9tIGEgY2xlYW4gc2xhdGVcblx0fVxuXG5cdHJlcmVuZGVyUm93cyhjYWxsYmFjayl7XG5cdFx0Ly8gcmVyZW5kZXIgcm93cyBhbmQga2VlcCBwb3NpdGlvblxuXHRcdGlmKGNhbGxiYWNrKXtcblx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0fVxuXHR9XG5cblx0cmVyZW5kZXJDb2x1bW5zKHVwZGF0ZSwgYmxvY2tSZWRyYXcpe1xuXHRcdC8vcmVyZW5kZXIgY29sdW1uc1xuXHR9XG5cblx0cmVuZGVyUm93Q2VsbHMocm93KXtcblx0XHQvL3JlbmRlciB0aGUgY2VsbHMgaW4gYSByb3dcblx0fVxuXG5cdHJlcmVuZGVyUm93Q2VsbHMocm93LCBmb3JjZSl7XG5cdFx0Ly9yZXJlbmRlciB0aGUgY2VsbHMgaW4gYSByb3dcblx0fVxuXG5cdHNjcm9sbENvbHVtbnMobGVmdCwgZGlyKXtcblx0XHQvL2hhbmRsZSBob3Jpem9udGFsIHNjcm9sbGluZ1xuXHR9XG5cblx0c2Nyb2xsUm93cyh0b3AsIGRpcil7XG5cdFx0Ly9oYW5kbGUgdmVydGljYWwgc2Nyb2xsaW5nXG5cdH1cblxuXHRyZXNpemUoKXtcblx0XHQvL2NvbnRhaW5lciBoYXMgcmVzaXplZCwgY2Fycnkgb3V0IGFueSBuZWVkZWQgcmVjYWxjdWxhdGlvbnMgKERPIE5PVCBSRVJFTkRFUiBJTiBUSElTIEZVTkNUSU9OKVxuXHR9XG5cblx0c2Nyb2xsVG9Sb3cocm93KXtcblx0XHQvL3Njcm9sbCB0byBhIHNwZWNpZmljIHJvd1xuXHR9XG5cblx0c2Nyb2xsVG9Sb3dOZWFyZXN0VG9wKHJvdyl7XG5cdFx0Ly9kZXRlcm1pbmUgd2VhdGhlciB0aGUgcm93IGlzIG5lYXJlc3QgdGhlIHRvcCBvciBib3R0b20gb2YgdGhlIHRhYmxlLCByZXR1cm4gdHJ1ZSBmb3IgdG9wIG9yIGZhbHNlIGZvciBib3R0b21cblx0fVxuXG5cdHZpc2libGVSb3dzKGluY2x1ZGluZ0J1ZmZlcil7XG5cdFx0Ly9yZXR1cm4gdGhlIHZpc2libGUgcm93c1xuXHRcdHJldHVybiBbXTtcblx0fVxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vIEhlbHBlciBGdW5jdGlvbnMgLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0cm93cygpe1xuXHRcdHJldHVybiB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0RGlzcGxheVJvd3MoKTtcblx0fVxuXG5cdHN0eWxlUm93KHJvdywgaW5kZXgpe1xuXHRcdHZhciByb3dFbCA9IHJvdy5nZXRFbGVtZW50KCk7XG5cblx0XHRpZihpbmRleCAlIDIpe1xuXHRcdFx0cm93RWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1yb3ctZXZlblwiKTtcblx0XHRcdHJvd0VsLmNsYXNzTGlzdC5yZW1vdmUoXCJ0YWJ1bGF0b3Itcm93LW9kZFwiKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRyb3dFbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXJvdy1vZGRcIik7XG5cdFx0XHRyb3dFbC5jbGFzc0xpc3QucmVtb3ZlKFwidGFidWxhdG9yLXJvdy1ldmVuXCIpO1xuXHRcdH1cblx0fVxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8gRXh0ZXJuYWwgVHJpZ2dlcnMgLy8vLy8vLy8vXG5cdC8vLy8vLy8gKERPIE5PVCBPVkVSUklERSkgLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0Y2xlYXIoKXtcblx0XHQvL2NsZWFyIGRvd24gZXhpc3RpbmcgbGF5b3V0XG5cdFx0dGhpcy5jbGVhclJvd3MoKTtcblx0XHR0aGlzLmNsZWFyQ29sdW1ucygpO1xuXHR9XG5cblx0cmVuZGVyKCl7XG5cdFx0Ly9yZW5kZXIgZnJvbSBhIGNsZWFuIHNsYXRlXG5cdFx0dGhpcy5yZW5kZXJSb3dzKCk7XG5cdFx0dGhpcy5yZW5kZXJDb2x1bW5zKCk7XG5cdH1cblxuXHRyZXJlbmRlcihjYWxsYmFjayl7XG5cdFx0Ly8gcmVyZW5kZXIgYW5kIGtlZXAgcG9zaXRpb25cblx0XHR0aGlzLnJlcmVuZGVyUm93cygpO1xuXHRcdHRoaXMucmVyZW5kZXJDb2x1bW5zKCk7XG5cdH1cblxuXHRzY3JvbGxUb1Jvd1Bvc2l0aW9uKHJvdywgcG9zaXRpb24sIGlmVmlzaWJsZSl7XG5cdFx0dmFyIHJvd0luZGV4ID0gdGhpcy5yb3dzKCkuaW5kZXhPZihyb3cpLFxuXHRcdHJvd0VsID0gcm93LmdldEVsZW1lbnQoKSxcblx0XHRvZmZzZXQgPSAwO1xuXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdGlmKHJvd0luZGV4ID4gLTEpe1xuXG5cdFx0XHRcdGlmKHR5cGVvZiBpZlZpc2libGUgPT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0XHRcdGlmVmlzaWJsZSA9IHRoaXMudGFibGUub3B0aW9ucy5zY3JvbGxUb1Jvd0lmVmlzaWJsZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vY2hlY2sgcm93IHZpc2liaWxpdHlcblx0XHRcdFx0aWYoIWlmVmlzaWJsZSl7XG5cdFx0XHRcdFx0aWYoSGVscGVycy5lbFZpc2libGUocm93RWwpKXtcblx0XHRcdFx0XHRcdG9mZnNldCA9IEhlbHBlcnMuZWxPZmZzZXQocm93RWwpLnRvcCAtIEhlbHBlcnMuZWxPZmZzZXQodGhpcy5lbGVtZW50VmVydGljYWwpLnRvcDtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0aWYob2Zmc2V0ID4gMCAmJiBvZmZzZXQgPCB0aGlzLmVsZW1lbnRWZXJ0aWNhbC5jbGllbnRIZWlnaHQgLSByb3dFbC5vZmZzZXRIZWlnaHQpe1xuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKCk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZih0eXBlb2YgcG9zaXRpb24gPT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0XHRcdHBvc2l0aW9uID0gdGhpcy50YWJsZS5vcHRpb25zLnNjcm9sbFRvUm93UG9zaXRpb247XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZihwb3NpdGlvbiA9PT0gXCJuZWFyZXN0XCIpe1xuXHRcdFx0XHRcdHBvc2l0aW9uID0gdGhpcy5zY3JvbGxUb1Jvd05lYXJlc3RUb3Aocm93KSA/IFwidG9wXCIgOiBcImJvdHRvbVwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly9zY3JvbGwgdG8gcm93XG5cdFx0XHRcdHRoaXMuc2Nyb2xsVG9Sb3cocm93KTtcblxuXHRcdFx0XHQvL2FsaWduIHRvIGNvcnJlY3QgcG9zaXRpb25cblx0XHRcdFx0c3dpdGNoKHBvc2l0aW9uKXtcblx0XHRcdFx0XHRjYXNlIFwibWlkZGxlXCI6XG5cdFx0XHRcdFx0Y2FzZSBcImNlbnRlclwiOlxuXG5cdFx0XHRcdFx0XHRpZih0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxIZWlnaHQgLSB0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxUb3AgPT0gdGhpcy5lbGVtZW50VmVydGljYWwuY2xpZW50SGVpZ2h0KXtcblx0XHRcdFx0XHRcdFx0dGhpcy5lbGVtZW50VmVydGljYWwuc2Nyb2xsVG9wID0gdGhpcy5lbGVtZW50VmVydGljYWwuc2Nyb2xsVG9wICsgKHJvd0VsLm9mZnNldFRvcCAtIHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbFRvcCkgLSAoKHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbEhlaWdodCAtIHJvd0VsLm9mZnNldFRvcCkgLyAyKTtcblx0XHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5lbGVtZW50VmVydGljYWwuc2Nyb2xsVG9wID0gdGhpcy5lbGVtZW50VmVydGljYWwuc2Nyb2xsVG9wIC0gKHRoaXMuZWxlbWVudFZlcnRpY2FsLmNsaWVudEhlaWdodCAvIDIpO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgXCJib3R0b21cIjpcblxuXHRcdFx0XHRcdFx0aWYodGhpcy5lbGVtZW50VmVydGljYWwuc2Nyb2xsSGVpZ2h0IC0gdGhpcy5lbGVtZW50VmVydGljYWwuc2Nyb2xsVG9wID09IHRoaXMuZWxlbWVudFZlcnRpY2FsLmNsaWVudEhlaWdodCl7XG5cdFx0XHRcdFx0XHRcdHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbFRvcCA9IHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbFRvcCAtICh0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxIZWlnaHQgLSByb3dFbC5vZmZzZXRUb3ApICsgcm93RWwub2Zmc2V0SGVpZ2h0O1xuXHRcdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0XHR0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxUb3AgPSB0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxUb3AgLSB0aGlzLmVsZW1lbnRWZXJ0aWNhbC5jbGllbnRIZWlnaHQgKyByb3dFbC5vZmZzZXRIZWlnaHQ7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSBcInRvcFwiOlxuXHRcdFx0XHRcdFx0dGhpcy5lbGVtZW50VmVydGljYWwuc2Nyb2xsVG9wID0gcm93RWwub2Zmc2V0VG9wO1x0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzb2x2ZSgpO1xuXG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIlNjcm9sbCBFcnJvciAtIFJvdyBub3QgdmlzaWJsZVwiKTtcblx0XHRcdFx0cmVqZWN0KFwiU2Nyb2xsIEVycm9yIC0gUm93IG5vdCB2aXNpYmxlXCIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG59XG5cbmNsYXNzIEJhc2ljSG9yaXpvbnRhbCBleHRlbmRzIFJlbmRlcmVye1xuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXHR9XG5cdFxuXHRyZW5kZXJSb3dDZWxscyhyb3csIGluRnJhZ21lbnQpIHtcblx0XHRjb25zdCByb3dGcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuXHRcdHJvdy5jZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG5cdFx0XHRyb3dGcmFnLmFwcGVuZENoaWxkKGNlbGwuZ2V0RWxlbWVudCgpKTtcblx0XHR9KTtcblx0XHRyb3cuZWxlbWVudC5hcHBlbmRDaGlsZChyb3dGcmFnKTtcblx0XHRcblx0XHRpZighaW5GcmFnbWVudCl7XG5cdFx0XHRyb3cuY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuXHRcdFx0XHRjZWxsLmNlbGxSZW5kZXJlZCgpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRyZWluaXRpYWxpemVDb2x1bW5XaWR0aHMoY29sdW1ucyl7XG5cdFx0Y29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uKGNvbHVtbil7XG5cdFx0XHRjb2x1bW4ucmVpbml0aWFsaXplV2lkdGgoKTtcblx0XHR9KTtcblx0fVxufVxuXG5jbGFzcyBWaXJ0dWFsRG9tSG9yaXpvbnRhbCBleHRlbmRzIFJlbmRlcmVye1xuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXHRcdFxuXHRcdHRoaXMubGVmdENvbCA9IDA7XG5cdFx0dGhpcy5yaWdodENvbCA9IDA7XG5cdFx0dGhpcy5zY3JvbGxMZWZ0ID0gMDtcblx0XHRcblx0XHR0aGlzLnZEb21TY3JvbGxQb3NMZWZ0ID0gMDtcblx0XHR0aGlzLnZEb21TY3JvbGxQb3NSaWdodCA9IDA7XG5cdFx0XG5cdFx0dGhpcy52RG9tUGFkTGVmdCA9IDA7XG5cdFx0dGhpcy52RG9tUGFkUmlnaHQgPSAwO1xuXHRcdFxuXHRcdHRoaXMuZml0RGF0YUNvbEF2ZyA9IDA7XG5cdFx0XG5cdFx0dGhpcy53aW5kb3dCdWZmZXIgPSAyMDA7IC8vcGl4ZWwgbWFyZ2luIHRvIG1ha2UgY29sdW1uIHZpc2libGUgYmVmb3JlIGl0IGlzIHNob3duIG9uIHNjcmVlblxuXHRcdFxuXHRcdHRoaXMudmlzaWJsZVJvd3MgPSBudWxsO1xuXHRcdFxuXHRcdHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblx0XHR0aGlzLmlzRml0RGF0YSA9IGZhbHNlO1xuXHRcdFxuXHRcdHRoaXMuY29sdW1ucyA9IFtdO1xuXHR9XG5cdFxuXHRpbml0aWFsaXplKCl7XG5cdFx0dGhpcy5jb21wYXRpYmlsaXR5Q2hlY2soKTtcblx0XHR0aGlzLmxheW91dENoZWNrKCk7XG5cdFx0dGhpcy52ZXJ0U2Nyb2xsTGlzdGVuKCk7XG5cdH1cblx0XG5cdGNvbXBhdGliaWxpdHlDaGVjaygpe1x0XHRcblx0XHRpZih0aGlzLm9wdGlvbnMoXCJsYXlvdXRcIikgPT0gXCJmaXREYXRhVGFibGVcIil7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJIb3Jpem9udGFsIFZpcnR1YWwgRE9NIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggZml0RGF0YVRhYmxlIGxheW91dCBtb2RlXCIpO1xuXHRcdH1cblx0XHRcblx0XHRpZih0aGlzLm9wdGlvbnMoXCJyZXNwb25zaXZlTGF5b3V0XCIpKXtcblx0XHRcdGNvbnNvbGUud2FybihcIkhvcml6b250YWwgVmlydHVhbCBET00gaXMgbm90IGNvbXBhdGlibGUgd2l0aCByZXNwb25zaXZlIGNvbHVtbnNcIik7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRoaXMub3B0aW9ucyhcInJ0bFwiKSl7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJIb3Jpem9udGFsIFZpcnR1YWwgRE9NIGlzIG5vdCBjdXJyZW50bHkgY29tcGF0aWJsZSB3aXRoIFJUTCB0ZXh0IGRpcmVjdGlvblwiKTtcblx0XHR9XG5cdH1cblx0XG5cdGxheW91dENoZWNrKCl7XG5cdFx0dGhpcy5pc0ZpdERhdGEgPSB0aGlzLm9wdGlvbnMoXCJsYXlvdXRcIikuc3RhcnRzV2l0aCgnZml0RGF0YScpO1xuXHR9XG5cdFxuXHR2ZXJ0U2Nyb2xsTGlzdGVuKCl7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJzY3JvbGwtdmVydGljYWxcIiwgdGhpcy5jbGVhclZpc1Jvd0NhY2hlLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiZGF0YS1yZWZyZXNoZWRcIiwgdGhpcy5jbGVhclZpc1Jvd0NhY2hlLmJpbmQodGhpcykpO1xuXHR9XG5cdFxuXHRjbGVhclZpc1Jvd0NhY2hlKCl7XG5cdFx0dGhpcy52aXNpYmxlUm93cyA9IG51bGw7XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLyBQdWJsaWMgRnVuY3Rpb25zIC8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHRyZW5kZXJDb2x1bW5zKHJvdywgZm9yY2Upe1xuXHRcdHRoaXMuZGF0YUNoYW5nZSgpO1xuXHR9XG5cdFxuXHRcblx0c2Nyb2xsQ29sdW1ucyhsZWZ0LCBkaXIpe1xuXHRcdGlmKHRoaXMuc2Nyb2xsTGVmdCAhPSBsZWZ0KXtcblx0XHRcdHRoaXMuc2Nyb2xsTGVmdCA9IGxlZnQ7XG5cdFx0XHRcblx0XHRcdHRoaXMuc2Nyb2xsKGxlZnQgLSAodGhpcy52RG9tU2Nyb2xsUG9zTGVmdCArIHRoaXMud2luZG93QnVmZmVyKSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRjYWxjV2luZG93QnVmZmVyKCl7XG5cdFx0dmFyIGJ1ZmZlciA9IHRoaXMuZWxlbWVudFZlcnRpY2FsLmNsaWVudFdpZHRoO1xuXHRcdFxuXHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5jb2x1bW5zQnlJbmRleC5mb3JFYWNoKChjb2x1bW4pID0+IHtcblx0XHRcdGlmKGNvbHVtbi52aXNpYmxlKXtcblx0XHRcdFx0dmFyIHdpZHRoID0gY29sdW1uLmdldFdpZHRoKCk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih3aWR0aCA+IGJ1ZmZlcil7XG5cdFx0XHRcdFx0YnVmZmVyID0gd2lkdGg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0XHR0aGlzLndpbmRvd0J1ZmZlciA9IGJ1ZmZlciAqIDI7XG5cdH1cblx0XG5cdHJlcmVuZGVyQ29sdW1ucyh1cGRhdGUsIGJsb2NrUmVkcmF3KXtcdFx0XG5cdFx0dmFyIG9sZCA9IHtcblx0XHRcdGNvbHM6dGhpcy5jb2x1bW5zLFxuXHRcdFx0bGVmdENvbDp0aGlzLmxlZnRDb2wsXG5cdFx0XHRyaWdodENvbDp0aGlzLnJpZ2h0Q29sLFxuXHRcdH0sXG5cdFx0Y29sUG9zID0gMDtcblx0XHRcblx0XHRpZih1cGRhdGUgJiYgIXRoaXMuaW5pdGlhbGl6ZWQpe1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLmNsZWFyKCk7XG5cdFx0XG5cdFx0dGhpcy5jYWxjV2luZG93QnVmZmVyKCk7XG5cdFx0XG5cdFx0dGhpcy5zY3JvbGxMZWZ0ID0gdGhpcy5lbGVtZW50VmVydGljYWwuc2Nyb2xsTGVmdDtcblx0XHRcblx0XHR0aGlzLnZEb21TY3JvbGxQb3NMZWZ0ID0gdGhpcy5zY3JvbGxMZWZ0IC0gdGhpcy53aW5kb3dCdWZmZXI7XG5cdFx0dGhpcy52RG9tU2Nyb2xsUG9zUmlnaHQgPSB0aGlzLnNjcm9sbExlZnQgKyB0aGlzLmVsZW1lbnRWZXJ0aWNhbC5jbGllbnRXaWR0aCArIHRoaXMud2luZG93QnVmZmVyO1xuXHRcdFxuXHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5jb2x1bW5zQnlJbmRleC5mb3JFYWNoKChjb2x1bW4pID0+IHtcblx0XHRcdHZhciBjb25maWcgPSB7fSxcblx0XHRcdHdpZHRoO1xuXHRcdFx0XG5cdFx0XHRpZihjb2x1bW4udmlzaWJsZSl7XG5cdFx0XHRcdGlmKCFjb2x1bW4ubW9kdWxlcy5mcm96ZW4pe1x0XHRcdFxuXHRcdFx0XHRcdHdpZHRoID0gY29sdW1uLmdldFdpZHRoKCk7XG5cblx0XHRcdFx0XHRjb25maWcubGVmdFBvcyA9IGNvbFBvcztcblx0XHRcdFx0XHRjb25maWcucmlnaHRQb3MgPSBjb2xQb3MgKyB3aWR0aDtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRjb25maWcud2lkdGggPSB3aWR0aDtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZiAodGhpcy5pc0ZpdERhdGEpIHtcblx0XHRcdFx0XHRcdGNvbmZpZy5maXREYXRhQ2hlY2sgPSBjb2x1bW4ubW9kdWxlcy52ZG9tSG96ID8gY29sdW1uLm1vZHVsZXMudmRvbUhvei5maXREYXRhQ2hlY2sgOiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZigoY29sUG9zICsgd2lkdGggPiB0aGlzLnZEb21TY3JvbGxQb3NMZWZ0KSAmJiAoY29sUG9zIDwgdGhpcy52RG9tU2Nyb2xsUG9zUmlnaHQpKXtcblx0XHRcdFx0XHRcdC8vY29sdW1uIGlzIHZpc2libGVcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0aWYodGhpcy5sZWZ0Q29sID09IC0xKXtcblx0XHRcdFx0XHRcdFx0dGhpcy5sZWZ0Q29sID0gdGhpcy5jb2x1bW5zLmxlbmd0aDtcblx0XHRcdFx0XHRcdFx0dGhpcy52RG9tUGFkTGVmdCA9IGNvbFBvcztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0dGhpcy5yaWdodENvbCA9IHRoaXMuY29sdW1ucy5sZW5ndGg7XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0Ly8gY29sdW1uIGlzIGhpZGRlblxuXHRcdFx0XHRcdFx0aWYodGhpcy5sZWZ0Q29sICE9PSAtMSl7XG5cdFx0XHRcdFx0XHRcdHRoaXMudkRvbVBhZFJpZ2h0ICs9IHdpZHRoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHR0aGlzLmNvbHVtbnMucHVzaChjb2x1bW4pO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGNvbHVtbi5tb2R1bGVzLnZkb21Ib3ogPSBjb25maWc7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Y29sUG9zICs9IHdpZHRoO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0dGhpcy50YWJsZUVsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQgPSB0aGlzLnZEb21QYWRMZWZ0ICsgXCJweFwiO1xuXHRcdHRoaXMudGFibGVFbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9IHRoaXMudkRvbVBhZFJpZ2h0ICsgXCJweFwiO1xuXHRcdFxuXHRcdHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuXHRcdFxuXHRcdGlmKCFibG9ja1JlZHJhdyl7XG5cdFx0XHRpZighdXBkYXRlIHx8IHRoaXMucmVpbml0Q2hhbmdlZChvbGQpKXtcblx0XHRcdFx0dGhpcy5yZWluaXRpYWxpemVSb3dzKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbExlZnQgPSB0aGlzLnNjcm9sbExlZnQ7XG5cdH1cblx0XG5cdHJlbmRlclJvd0NlbGxzKHJvdyl7XG5cdFx0aWYodGhpcy5pbml0aWFsaXplZCl7XG5cdFx0XHR0aGlzLmluaXRpYWxpemVSb3cocm93KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zdCByb3dGcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuXHRcdFx0cm93LmNlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcblx0XHRcdFx0cm93RnJhZy5hcHBlbmRDaGlsZChjZWxsLmdldEVsZW1lbnQoKSk7XG5cdFx0XHR9KTtcblx0XHRcdHJvdy5lbGVtZW50LmFwcGVuZENoaWxkKHJvd0ZyYWcpO1xuXG5cdFx0XHRyb3cuY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuXHRcdFx0XHRjZWxsLmNlbGxSZW5kZXJlZCgpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRyZXJlbmRlclJvd0NlbGxzKHJvdywgZm9yY2Upe1xuXHRcdHRoaXMucmVpbml0aWFsaXplUm93KHJvdywgZm9yY2UpO1xuXHR9XG5cdFxuXHRyZWluaXRpYWxpemVDb2x1bW5XaWR0aHMoY29sdW1ucyl7XG5cdFx0Zm9yKGxldCBpID0gdGhpcy5sZWZ0Q29sOyBpIDw9IHRoaXMucmlnaHRDb2w7IGkrKyl7XG5cdFx0XHR0aGlzLmNvbHVtbnNbaV0ucmVpbml0aWFsaXplV2lkdGgoKTtcblx0XHR9XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vIEludGVybmFsIFJlbmRlcmluZyAvLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHRkZWluaXRpYWxpemUoKXtcblx0XHR0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG5cdH1cblx0XG5cdGNsZWFyKCl7XG5cdFx0dGhpcy5jb2x1bW5zID0gW107XG5cdFx0XG5cdFx0dGhpcy5sZWZ0Q29sID0gLTE7XG5cdFx0dGhpcy5yaWdodENvbCA9IDA7XG5cdFx0XG5cdFx0dGhpcy52RG9tU2Nyb2xsUG9zTGVmdCA9IDA7XG5cdFx0dGhpcy52RG9tU2Nyb2xsUG9zUmlnaHQgPSAwO1xuXHRcdHRoaXMudkRvbVBhZExlZnQgPSAwO1xuXHRcdHRoaXMudkRvbVBhZFJpZ2h0ID0gMDtcblx0fVxuXHRcblx0ZGF0YUNoYW5nZSgpe1xuXHRcdHZhciBjaGFuZ2UgPSBmYWxzZSxcblx0XHRyb3csIHJvd0VsO1xuXHRcdFxuXHRcdGlmKHRoaXMuaXNGaXREYXRhKXtcblx0XHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5jb2x1bW5zQnlJbmRleC5mb3JFYWNoKChjb2x1bW4pID0+IHtcblx0XHRcdFx0aWYoIWNvbHVtbi5kZWZpbml0aW9uLndpZHRoICYmIGNvbHVtbi52aXNpYmxlKXtcblx0XHRcdFx0XHRjaGFuZ2UgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0aWYoY2hhbmdlICYmIHRoaXMudGFibGUucm93TWFuYWdlci5nZXREaXNwbGF5Um93cygpLmxlbmd0aCl7XG5cdFx0XHRcdHRoaXMudkRvbVNjcm9sbFBvc1JpZ2h0ID0gdGhpcy5zY3JvbGxMZWZ0ICsgdGhpcy5lbGVtZW50VmVydGljYWwuY2xpZW50V2lkdGggKyB0aGlzLndpbmRvd0J1ZmZlcjtcblx0XHRcdFx0XG5cdFx0XHRcdHJvdyA9IHRoaXMuY2hhaW4oXCJyb3dzLXNhbXBsZVwiLCBbMV0sIFtdLCAoKSA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMudGFibGUucm93TWFuYWdlci5nZXREaXNwbGF5Um93cygpO1xuXHRcdFx0XHR9KVswXTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKHJvdyl7XG5cdFx0XHRcdFx0cm93RWwgPSByb3cuZ2V0RWxlbWVudCgpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHJvdy5nZW5lcmF0ZUNlbGxzKCk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0dGhpcy50YWJsZUVsZW1lbnQuYXBwZW5kQ2hpbGQocm93RWwpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGZvcihsZXQgY29sRW5kID0gMDsgY29sRW5kIDwgcm93LmNlbGxzLmxlbmd0aDsgY29sRW5kKyspe1xuXHRcdFx0XHRcdFx0bGV0IGNlbGwgPSByb3cuY2VsbHNbY29sRW5kXTtcblx0XHRcdFx0XHRcdHJvd0VsLmFwcGVuZENoaWxkKGNlbGwuZ2V0RWxlbWVudCgpKTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0Y2VsbC5jb2x1bW4ucmVpbml0aWFsaXplV2lkdGgoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0cm93RWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChyb3dFbCk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0dGhpcy5yZXJlbmRlckNvbHVtbnMoZmFsc2UsIHRydWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYodGhpcy5vcHRpb25zKFwibGF5b3V0XCIpID09PSBcImZpdENvbHVtbnNcIil7XG5cdFx0XHRcdHRoaXMubGF5b3V0UmVmcmVzaCgpO1xuXHRcdFx0XHR0aGlzLnJlcmVuZGVyQ29sdW1ucyhmYWxzZSwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRyZWluaXRDaGFuZ2VkKG9sZCl7XG5cdFx0dmFyIG1hdGNoID0gdHJ1ZTtcblx0XHRcblx0XHRpZihvbGQuY29scy5sZW5ndGggIT09IHRoaXMuY29sdW1ucy5sZW5ndGggfHwgb2xkLmxlZnRDb2wgIT09IHRoaXMubGVmdENvbCB8fCBvbGQucmlnaHRDb2wgIT09IHRoaXMucmlnaHRDb2wpe1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdFxuXHRcdG9sZC5jb2xzLmZvckVhY2goKGNvbCwgaSkgPT4ge1xuXHRcdFx0aWYoY29sICE9PSB0aGlzLmNvbHVtbnNbaV0pe1xuXHRcdFx0XHRtYXRjaCA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiAhbWF0Y2g7XG5cdH1cblx0XG5cdHJlaW5pdGlhbGl6ZVJvd3MoKXtcblx0XHR2YXIgdmlzaWJsZVJvd3MgPSB0aGlzLmdldFZpc2libGVSb3dzKCksXG5cdFx0b3RoZXJSb3dzID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldFJvd3MoKS5maWx0ZXIocm93ID0+ICF2aXNpYmxlUm93cy5pbmNsdWRlcyhyb3cpKTtcblxuXHRcdHZpc2libGVSb3dzLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0dGhpcy5yZWluaXRpYWxpemVSb3cocm93LCB0cnVlKTtcblx0XHR9KTtcblxuXHRcdG90aGVyUm93cy5mb3JFYWNoKChyb3cpID0+e1xuXHRcdFx0cm93LmRlaW5pdGlhbGl6ZSgpO1xuXHRcdH0pO1xuXHR9XG5cdFxuXHRnZXRWaXNpYmxlUm93cygpe1xuXHRcdGlmICghdGhpcy52aXNpYmxlUm93cyl7XG5cdFx0XHR0aGlzLnZpc2libGVSb3dzID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldFZpc2libGVSb3dzKCk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiB0aGlzLnZpc2libGVSb3dzO1x0XG5cdH1cblx0XG5cdHNjcm9sbChkaWZmKXtcblx0XHR0aGlzLnZEb21TY3JvbGxQb3NMZWZ0ICs9IGRpZmY7XG5cdFx0dGhpcy52RG9tU2Nyb2xsUG9zUmlnaHQgKz0gZGlmZjtcblx0XHRcblx0XHRpZihNYXRoLmFicyhkaWZmKSA+ICh0aGlzLndpbmRvd0J1ZmZlciAvIDIpKXtcblx0XHRcdHRoaXMucmVyZW5kZXJDb2x1bW5zKCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYoZGlmZiA+IDApe1xuXHRcdFx0XHQvL3Njcm9sbCByaWdodFxuXHRcdFx0XHR0aGlzLmFkZENvbFJpZ2h0KCk7XG5cdFx0XHRcdHRoaXMucmVtb3ZlQ29sTGVmdCgpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHQvL3Njcm9sbCBsZWZ0XG5cdFx0XHRcdHRoaXMuYWRkQ29sTGVmdCgpO1xuXHRcdFx0XHR0aGlzLnJlbW92ZUNvbFJpZ2h0KCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRjb2xQb3NpdGlvbkFkanVzdCAoc3RhcnQsIGVuZCwgZGlmZil7XG5cdFx0Zm9yKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKyl7XG5cdFx0XHRsZXQgY29sdW1uID0gdGhpcy5jb2x1bW5zW2ldO1xuXHRcdFx0XG5cdFx0XHRjb2x1bW4ubW9kdWxlcy52ZG9tSG96LmxlZnRQb3MgKz0gZGlmZjtcblx0XHRcdGNvbHVtbi5tb2R1bGVzLnZkb21Ib3oucmlnaHRQb3MgKz0gZGlmZjtcblx0XHR9XG5cdH1cblx0XG5cdGFkZENvbFJpZ2h0KCl7XG5cdFx0dmFyIGNoYW5nZXMgPSBmYWxzZSxcblx0XHR3b3JraW5nID0gdHJ1ZTtcblx0XHRcblx0XHR3aGlsZSh3b3JraW5nKXtcblxuXHRcdFx0bGV0IGNvbHVtbiA9IHRoaXMuY29sdW1uc1t0aGlzLnJpZ2h0Q29sICsgMV07XG5cdFx0XHRcblx0XHRcdGlmKGNvbHVtbil7XG5cdFx0XHRcdGlmKGNvbHVtbi5tb2R1bGVzLnZkb21Ib3oubGVmdFBvcyA8PSB0aGlzLnZEb21TY3JvbGxQb3NSaWdodCl7XG5cdFx0XHRcdFx0Y2hhbmdlcyA9IHRydWU7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0dGhpcy5nZXRWaXNpYmxlUm93cygpLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0XHRcdFx0aWYocm93LnR5cGUgIT09IFwiZ3JvdXBcIil7XG5cdFx0XHRcdFx0XHRcdHZhciBjZWxsID0gcm93LmdldENlbGwoY29sdW1uKTtcblx0XHRcdFx0XHRcdFx0cm93LmdldEVsZW1lbnQoKS5pbnNlcnRCZWZvcmUoY2VsbC5nZXRFbGVtZW50KCksIHJvdy5nZXRDZWxsKHRoaXMuY29sdW1uc1t0aGlzLnJpZ2h0Q29sXSkuZ2V0RWxlbWVudCgpLm5leHRTaWJsaW5nKTtcblx0XHRcdFx0XHRcdFx0Y2VsbC5jZWxsUmVuZGVyZWQoKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHR0aGlzLmZpdERhdGFDb2xBY3R1YWxXaWR0aENoZWNrKGNvbHVtbik7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0dGhpcy5yaWdodENvbCsrOyAvLyBEb24ndCBtb3ZlIHRoaXMgYmVsb3cgdGhlID49IGNoZWNrIGJlbG93XG5cblx0XHRcdFx0XHR0aGlzLmdldFZpc2libGVSb3dzKCkuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRcdFx0XHRpZihyb3cudHlwZSAhPT0gXCJncm91cFwiKXtcblx0XHRcdFx0XHRcdFx0cm93Lm1vZHVsZXMudmRvbUhvei5yaWdodENvbCA9IHRoaXMucmlnaHRDb2w7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYodGhpcy5yaWdodENvbCA+PSAodGhpcy5jb2x1bW5zLmxlbmd0aCAtIDEpKXtcblx0XHRcdFx0XHRcdHRoaXMudkRvbVBhZFJpZ2h0ID0gMDtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHR0aGlzLnZEb21QYWRSaWdodCAtPSBjb2x1bW4uZ2V0V2lkdGgoKTtcblx0XHRcdFx0XHR9XHRcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHdvcmtpbmcgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR3b3JraW5nID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGNoYW5nZXMpe1xuXHRcdFx0dGhpcy50YWJsZUVsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gdGhpcy52RG9tUGFkUmlnaHQgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG5cdFxuXHRhZGRDb2xMZWZ0KCl7XG5cdFx0dmFyIGNoYW5nZXMgPSBmYWxzZSxcblx0XHR3b3JraW5nID0gdHJ1ZTtcblx0XHRcblx0XHR3aGlsZSh3b3JraW5nKXtcblx0XHRcdGxldCBjb2x1bW4gPSB0aGlzLmNvbHVtbnNbdGhpcy5sZWZ0Q29sIC0gMV07XG5cdFx0XHRcblx0XHRcdGlmKGNvbHVtbil7XG5cdFx0XHRcdGlmKGNvbHVtbi5tb2R1bGVzLnZkb21Ib3oucmlnaHRQb3MgPj0gdGhpcy52RG9tU2Nyb2xsUG9zTGVmdCl7XG5cdFx0XHRcdFx0Y2hhbmdlcyA9IHRydWU7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0dGhpcy5nZXRWaXNpYmxlUm93cygpLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0XHRcdFx0aWYocm93LnR5cGUgIT09IFwiZ3JvdXBcIil7XG5cdFx0XHRcdFx0XHRcdHZhciBjZWxsID0gcm93LmdldENlbGwoY29sdW1uKTtcblx0XHRcdFx0XHRcdFx0cm93LmdldEVsZW1lbnQoKS5pbnNlcnRCZWZvcmUoY2VsbC5nZXRFbGVtZW50KCksIHJvdy5nZXRDZWxsKHRoaXMuY29sdW1uc1t0aGlzLmxlZnRDb2xdKS5nZXRFbGVtZW50KCkpO1xuXHRcdFx0XHRcdFx0XHRjZWxsLmNlbGxSZW5kZXJlZCgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHRoaXMubGVmdENvbC0tOyAvLyBkb24ndCBtb3ZlIHRoaXMgYmVsb3cgdGhlIDw9IGNoZWNrIGJlbG93XG5cblx0XHRcdFx0XHR0aGlzLmdldFZpc2libGVSb3dzKCkuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRcdFx0XHRpZihyb3cudHlwZSAhPT0gXCJncm91cFwiKXtcblx0XHRcdFx0XHRcdFx0cm93Lm1vZHVsZXMudmRvbUhvei5sZWZ0Q29sID0gdGhpcy5sZWZ0Q29sO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKHRoaXMubGVmdENvbCA8PSAwKXsgLy8gcmVwbGljYXRpbmcgbG9naWMgaW4gYWRkQ29sUmlnaHRcblx0XHRcdFx0XHRcdHRoaXMudkRvbVBhZExlZnQgPSAwO1xuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdHRoaXMudkRvbVBhZExlZnQgLT0gY29sdW1uLmdldFdpZHRoKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGxldCBkaWZmID0gdGhpcy5maXREYXRhQ29sQWN0dWFsV2lkdGhDaGVjayhjb2x1bW4pO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKGRpZmYpe1xuXHRcdFx0XHRcdFx0dGhpcy5zY3JvbGxMZWZ0ID0gdGhpcy5lbGVtZW50VmVydGljYWwuc2Nyb2xsTGVmdCA9IHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbExlZnQgKyBkaWZmO1xuXHRcdFx0XHRcdFx0dGhpcy52RG9tUGFkUmlnaHQgLT0gZGlmZjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHR3b3JraW5nID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0d29ya2luZyA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRpZihjaGFuZ2VzKXtcblx0XHRcdHRoaXMudGFibGVFbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0ID0gdGhpcy52RG9tUGFkTGVmdCArIFwicHhcIjtcblx0XHR9XG5cdH1cblx0XG5cdHJlbW92ZUNvbFJpZ2h0KCl7XG5cdFx0dmFyIGNoYW5nZXMgPSBmYWxzZSxcblx0XHR3b3JraW5nID0gdHJ1ZTtcblx0XHRcblx0XHR3aGlsZSh3b3JraW5nKXtcblx0XHRcdGxldCBjb2x1bW4gPSB0aGlzLmNvbHVtbnNbdGhpcy5yaWdodENvbF07XG5cdFx0XHRcblx0XHRcdGlmKGNvbHVtbil7XG5cdFx0XHRcdGlmKGNvbHVtbi5tb2R1bGVzLnZkb21Ib3oubGVmdFBvcyA+IHRoaXMudkRvbVNjcm9sbFBvc1JpZ2h0KXtcblx0XHRcdFx0XHRjaGFuZ2VzID0gdHJ1ZTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHR0aGlzLmdldFZpc2libGVSb3dzKCkuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRcdFx0XHRpZihyb3cudHlwZSAhPT0gXCJncm91cFwiKXtcblx0XHRcdFx0XHRcdFx0dmFyIGNlbGwgPSByb3cuZ2V0Q2VsbChjb2x1bW4pO1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRyb3cuZ2V0RWxlbWVudCgpLnJlbW92ZUNoaWxkKGNlbGwuZ2V0RWxlbWVudCgpKTtcblx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoZXgpIHtcblx0XHRcdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJDb3VsZCBub3QgcmVtb3ZlQ29sUmlnaHRcIiwgZXgubWVzc2FnZSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHR0aGlzLnZEb21QYWRSaWdodCArPSBjb2x1bW4uZ2V0V2lkdGgoKTtcblx0XHRcdFx0XHR0aGlzLnJpZ2h0Q29sIC0tO1xuXG5cdFx0XHRcdFx0dGhpcy5nZXRWaXNpYmxlUm93cygpLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0XHRcdFx0aWYocm93LnR5cGUgIT09IFwiZ3JvdXBcIil7XG5cdFx0XHRcdFx0XHRcdHJvdy5tb2R1bGVzLnZkb21Ib3oucmlnaHRDb2wgPSB0aGlzLnJpZ2h0Q29sO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0d29ya2luZyA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHdvcmtpbmcgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0aWYoY2hhbmdlcyl7XG5cdFx0XHR0aGlzLnRhYmxlRWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSB0aGlzLnZEb21QYWRSaWdodCArIFwicHhcIjtcblx0XHR9XG5cdH1cblx0XG5cdHJlbW92ZUNvbExlZnQoKXtcblx0XHR2YXIgY2hhbmdlcyA9IGZhbHNlLFxuXHRcdHdvcmtpbmcgPSB0cnVlO1xuXG5cdFx0d2hpbGUod29ya2luZyl7XG5cdFx0XHRsZXQgY29sdW1uID0gdGhpcy5jb2x1bW5zW3RoaXMubGVmdENvbF07XG5cdFx0XHRcblx0XHRcdGlmKGNvbHVtbil7XG5cdFx0XHRcdGlmKGNvbHVtbi5tb2R1bGVzLnZkb21Ib3oucmlnaHRQb3MgPCB0aGlzLnZEb21TY3JvbGxQb3NMZWZ0KXtcblx0XHRcdFx0XHRjaGFuZ2VzID0gdHJ1ZTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHR0aGlzLmdldFZpc2libGVSb3dzKCkuZm9yRWFjaCgocm93KSA9PiB7XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0aWYocm93LnR5cGUgIT09IFwiZ3JvdXBcIil7XG5cdFx0XHRcdFx0XHRcdHZhciBjZWxsID0gcm93LmdldENlbGwoY29sdW1uKTtcblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0cm93LmdldEVsZW1lbnQoKS5yZW1vdmVDaGlsZChjZWxsLmdldEVsZW1lbnQoKSk7XG5cdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKGV4KSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiQ291bGQgbm90IHJlbW92ZUNvbExlZnRcIiwgZXgubWVzc2FnZSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHR0aGlzLnZEb21QYWRMZWZ0ICs9IGNvbHVtbi5nZXRXaWR0aCgpO1xuXHRcdFx0XHRcdHRoaXMubGVmdENvbCArKztcblxuXHRcdFx0XHRcdHRoaXMuZ2V0VmlzaWJsZVJvd3MoKS5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdFx0XHRcdGlmKHJvdy50eXBlICE9PSBcImdyb3VwXCIpe1xuXHRcdFx0XHRcdFx0XHRyb3cubW9kdWxlcy52ZG9tSG96LmxlZnRDb2wgPSB0aGlzLmxlZnRDb2w7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHR3b3JraW5nID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0d29ya2luZyA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRpZihjaGFuZ2VzKXtcblx0XHRcdHRoaXMudGFibGVFbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0ID0gdGhpcy52RG9tUGFkTGVmdCArIFwicHhcIjtcblx0XHR9XG5cdH1cblx0XG5cdGZpdERhdGFDb2xBY3R1YWxXaWR0aENoZWNrKGNvbHVtbil7XG5cdFx0dmFyIG5ld1dpZHRoLCB3aWR0aERpZmY7XG5cdFx0XG5cdFx0aWYoY29sdW1uLm1vZHVsZXMudmRvbUhvei5maXREYXRhQ2hlY2spe1xuXHRcdFx0Y29sdW1uLnJlaW5pdGlhbGl6ZVdpZHRoKCk7XG5cdFx0XHRcblx0XHRcdG5ld1dpZHRoID0gY29sdW1uLmdldFdpZHRoKCk7XG5cdFx0XHR3aWR0aERpZmYgPSBuZXdXaWR0aCAtIGNvbHVtbi5tb2R1bGVzLnZkb21Ib3oud2lkdGg7XG5cdFx0XHRcblx0XHRcdGlmKHdpZHRoRGlmZil7XG5cdFx0XHRcdGNvbHVtbi5tb2R1bGVzLnZkb21Ib3oucmlnaHRQb3MgKz0gd2lkdGhEaWZmO1xuXHRcdFx0XHRjb2x1bW4ubW9kdWxlcy52ZG9tSG96LndpZHRoID0gbmV3V2lkdGg7XG5cdFx0XHRcdHRoaXMuY29sUG9zaXRpb25BZGp1c3QodGhpcy5jb2x1bW5zLmluZGV4T2YoY29sdW1uKSArIDEsIHRoaXMuY29sdW1ucy5sZW5ndGgsIHdpZHRoRGlmZik7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGNvbHVtbi5tb2R1bGVzLnZkb21Ib3ouZml0RGF0YUNoZWNrID0gZmFsc2U7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiB3aWR0aERpZmY7XG5cdH1cblx0XG5cdGluaXRpYWxpemVSb3cocm93KXtcblx0XHRpZihyb3cudHlwZSAhPT0gXCJncm91cFwiKXtcblx0XHRcdHJvdy5tb2R1bGVzLnZkb21Ib3ogPSB7XG5cdFx0XHRcdGxlZnRDb2w6dGhpcy5sZWZ0Q29sLFxuXHRcdFx0XHRyaWdodENvbDp0aGlzLnJpZ2h0Q29sLFxuXHRcdFx0fTtcblxuXHRcdFx0aWYodGhpcy50YWJsZS5tb2R1bGVzLmZyb3plbkNvbHVtbnMpe1xuXHRcdFx0XHR0aGlzLnRhYmxlLm1vZHVsZXMuZnJvemVuQ29sdW1ucy5sZWZ0Q29sdW1ucy5mb3JFYWNoKChjb2x1bW4pID0+IHtcblx0XHRcdFx0XHR0aGlzLmFwcGVuZENlbGwocm93LCBjb2x1bW4pO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGxldCBpID0gdGhpcy5sZWZ0Q29sOyBpIDw9IHRoaXMucmlnaHRDb2w7IGkrKyl7XG5cdFx0XHRcdHRoaXMuYXBwZW5kQ2VsbChyb3csIHRoaXMuY29sdW1uc1tpXSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmKHRoaXMudGFibGUubW9kdWxlcy5mcm96ZW5Db2x1bW5zKXtcblx0XHRcdFx0dGhpcy50YWJsZS5tb2R1bGVzLmZyb3plbkNvbHVtbnMucmlnaHRDb2x1bW5zLmZvckVhY2goKGNvbHVtbikgPT4ge1xuXHRcdFx0XHRcdHRoaXMuYXBwZW5kQ2VsbChyb3csIGNvbHVtbik7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0YXBwZW5kQ2VsbChyb3csIGNvbHVtbil7XG5cdFx0aWYoY29sdW1uICYmIGNvbHVtbi52aXNpYmxlKXtcblx0XHRcdGxldCBjZWxsID0gcm93LmdldENlbGwoY29sdW1uKTtcblx0XHRcdFxuXHRcdFx0cm93LmdldEVsZW1lbnQoKS5hcHBlbmRDaGlsZChjZWxsLmdldEVsZW1lbnQoKSk7XG5cdFx0XHRjZWxsLmNlbGxSZW5kZXJlZCgpO1xuXHRcdH1cblx0fVxuXHRcblx0cmVpbml0aWFsaXplUm93KHJvdywgZm9yY2Upe1xuXHRcdGlmKHJvdy50eXBlICE9PSBcImdyb3VwXCIpe1xuXHRcdFx0aWYoZm9yY2UgfHwgIXJvdy5tb2R1bGVzLnZkb21Ib3ogfHwgcm93Lm1vZHVsZXMudmRvbUhvei5sZWZ0Q29sICE9PSB0aGlzLmxlZnRDb2wgfHwgcm93Lm1vZHVsZXMudmRvbUhvei5yaWdodENvbCAhPT0gdGhpcy5yaWdodENvbCl7XG5cdFx0XHRcdFxuXHRcdFx0XHR2YXIgcm93RWwgPSByb3cuZ2V0RWxlbWVudCgpO1xuXHRcdFx0XHR3aGlsZShyb3dFbC5maXJzdENoaWxkKSByb3dFbC5yZW1vdmVDaGlsZChyb3dFbC5maXJzdENoaWxkKTtcblxuXHRcdFx0XHR0aGlzLmluaXRpYWxpemVSb3cocm93KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuY2xhc3MgQ29sdW1uTWFuYWdlciBleHRlbmRzIENvcmVGZWF0dXJlIHtcblx0XG5cdGNvbnN0cnVjdG9yICh0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXHRcdFxuXHRcdHRoaXMuYmxvY2tIb3pTY3JvbGxFdmVudCA9IGZhbHNlO1xuXHRcdHRoaXMuaGVhZGVyc0VsZW1lbnQgPSBudWxsO1xuXHRcdHRoaXMuY29udGVudHNFbGVtZW50ID0gbnVsbDtcblx0XHR0aGlzLmVsZW1lbnQgPSBudWxsIDsgLy9jb250YWluaW5nIGVsZW1lbnRcblx0XHR0aGlzLmNvbHVtbnMgPSBbXTsgLy8gY29sdW1uIGRlZmluaXRpb24gb2JqZWN0XG5cdFx0dGhpcy5jb2x1bW5zQnlJbmRleCA9IFtdOyAvL2NvbHVtbnMgYnkgaW5kZXhcblx0XHR0aGlzLmNvbHVtbnNCeUZpZWxkID0ge307IC8vY29sdW1ucyBieSBmaWVsZFxuXHRcdHRoaXMuc2Nyb2xsTGVmdCA9IDA7XG5cdFx0dGhpcy5vcHRpb25zTGlzdCA9IG5ldyBPcHRpb25zTGlzdCh0aGlzLnRhYmxlLCBcImNvbHVtbiBkZWZpbml0aW9uXCIsIGRlZmF1bHRDb2x1bW5PcHRpb25zKTtcblx0XHRcblx0XHR0aGlzLnJlZHJhd0Jsb2NrID0gZmFsc2U7IC8vcHJldmVudCByZWRyYXdzIHRvIGFsbG93IG11bHRpcGxlIGRhdGEgbWFuaXB1bGF0aW9ucyBiZWZvcmUgY29udGludWluZ1xuXHRcdHRoaXMucmVkcmF3QmxvY2tVcGRhdGUgPSBudWxsOyAvL3N0b3JlIGxhdGVzdCByZWRyYXcgdXBkYXRlIG9ubHkgc3RhdHVzXG5cdFx0XG5cdFx0dGhpcy5yZW5kZXJlciA9IG51bGw7XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vIFNldHVwIEZ1bmN0aW9ucyAvLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0aW5pdGlhbGl6ZSgpe1xuXHRcdHRoaXMuaW5pdGlhbGl6ZVJlbmRlcmVyKCk7XG5cdFx0XG5cdFx0dGhpcy5oZWFkZXJzRWxlbWVudCA9IHRoaXMuY3JlYXRlSGVhZGVyc0VsZW1lbnQoKTtcblx0XHR0aGlzLmNvbnRlbnRzRWxlbWVudCA9IHRoaXMuY3JlYXRlSGVhZGVyQ29udGVudHNFbGVtZW50KCk7XG5cdFx0dGhpcy5lbGVtZW50ID0gdGhpcy5jcmVhdGVIZWFkZXJFbGVtZW50KCk7XG5cdFx0XG5cdFx0dGhpcy5jb250ZW50c0VsZW1lbnQuaW5zZXJ0QmVmb3JlKHRoaXMuaGVhZGVyc0VsZW1lbnQsIHRoaXMuY29udGVudHNFbGVtZW50LmZpcnN0Q2hpbGQpO1xuXHRcdHRoaXMuZWxlbWVudC5pbnNlcnRCZWZvcmUodGhpcy5jb250ZW50c0VsZW1lbnQsIHRoaXMuZWxlbWVudC5maXJzdENoaWxkKTtcblxuXHRcdHRoaXMuaW5pdGlhbGl6ZVNjcm9sbFdoZWVsV2F0Y2hlcigpO1xuXHRcdFxuXHRcdHRoaXMuc3Vic2NyaWJlKFwic2Nyb2xsLWhvcml6b250YWxcIiwgdGhpcy5zY3JvbGxIb3Jpem9udGFsLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwic2Nyb2xsYmFyLXZlcnRpY2FsXCIsIHRoaXMucGFkVmVydGljYWxTY3JvbGxiYXIuYmluZCh0aGlzKSk7XG5cdH1cblxuXHRwYWRWZXJ0aWNhbFNjcm9sbGJhcih3aWR0aCl7XG5cdFx0aWYodGhpcy50YWJsZS5ydGwpe1xuXHRcdFx0dGhpcy5oZWFkZXJzRWxlbWVudC5zdHlsZS5tYXJnaW5MZWZ0ID0gd2lkdGggKyBcInB4XCI7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5oZWFkZXJzRWxlbWVudC5zdHlsZS5tYXJnaW5SaWdodCA9IHdpZHRoICsgXCJweFwiO1xuXHRcdH1cblx0fVxuXHRcblx0aW5pdGlhbGl6ZVJlbmRlcmVyKCl7XG5cdFx0dmFyIHJlbmRlckNsYXNzO1xuXHRcdFxuXHRcdHZhciByZW5kZXJlcnMgPSB7XG5cdFx0XHRcInZpcnR1YWxcIjogVmlydHVhbERvbUhvcml6b250YWwsXG5cdFx0XHRcImJhc2ljXCI6IEJhc2ljSG9yaXpvbnRhbCxcblx0XHR9O1xuXHRcdFxuXHRcdGlmKHR5cGVvZiB0aGlzLnRhYmxlLm9wdGlvbnMucmVuZGVySG9yaXpvbnRhbCA9PT0gXCJzdHJpbmdcIil7XG5cdFx0XHRyZW5kZXJDbGFzcyA9IHJlbmRlcmVyc1t0aGlzLnRhYmxlLm9wdGlvbnMucmVuZGVySG9yaXpvbnRhbF07XG5cdFx0fWVsc2Uge1xuXHRcdFx0cmVuZGVyQ2xhc3MgPSB0aGlzLnRhYmxlLm9wdGlvbnMucmVuZGVySG9yaXpvbnRhbDtcblx0XHR9XG5cdFx0XG5cdFx0aWYocmVuZGVyQ2xhc3Mpe1xuXHRcdFx0dGhpcy5yZW5kZXJlciA9IG5ldyByZW5kZXJDbGFzcyh0aGlzLnRhYmxlLCB0aGlzLmVsZW1lbnQsIHRoaXMudGFibGVFbGVtZW50KTtcblx0XHRcdHRoaXMucmVuZGVyZXIuaW5pdGlhbGl6ZSgpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoXCJVbmFibGUgdG8gZmluZCBtYXRjaGluZyByZW5kZXJlcjpcIiwgdGhpcy50YWJsZS5vcHRpb25zLnJlbmRlckhvcml6b250YWwpO1xuXHRcdH1cblx0fVxuXHRcblx0XG5cdGNyZWF0ZUhlYWRlcnNFbGVtZW50ICgpe1xuXHRcdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XG5cdFx0ZWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1oZWFkZXJzXCIpO1xuXHRcdGVsLnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJyb3dcIik7XG5cdFx0XG5cdFx0cmV0dXJuIGVsO1xuXHR9XG5cblx0Y3JlYXRlSGVhZGVyQ29udGVudHNFbGVtZW50ICgpe1xuXHRcdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XG5cdFx0ZWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1oZWFkZXItY29udGVudHNcIik7XG5cdFx0ZWwuc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcInJvd2dyb3VwXCIpO1xuXHRcdFxuXHRcdHJldHVybiBlbDtcblx0fVxuXHRcblx0Y3JlYXRlSGVhZGVyRWxlbWVudCAoKXtcblx0XHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdFxuXHRcdGVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItaGVhZGVyXCIpO1xuXHRcdGVsLnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJyb3dncm91cFwiKTtcblx0XHRcblx0XHRpZighdGhpcy50YWJsZS5vcHRpb25zLmhlYWRlclZpc2libGUpe1xuXHRcdFx0ZWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1oZWFkZXItaGlkZGVuXCIpO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gZWw7XG5cdH1cblx0XG5cdC8vcmV0dXJuIGNvbnRhaW5pbmcgZWxlbWVudFxuXHRnZXRFbGVtZW50KCl7XG5cdFx0cmV0dXJuIHRoaXMuZWxlbWVudDtcblx0fVxuXG5cdC8vcmV0dXJuIGNvbnRhaW5pbmcgY29udGVudHMgZWxlbWVudFxuXHRnZXRDb250ZW50c0VsZW1lbnQoKXtcblx0XHRyZXR1cm4gdGhpcy5jb250ZW50c0VsZW1lbnQ7XG5cdH1cblx0XG5cdFxuXHQvL3JldHVybiBoZWFkZXIgY29udGFpbmluZyBlbGVtZW50XG5cdGdldEhlYWRlcnNFbGVtZW50KCl7XG5cdFx0cmV0dXJuIHRoaXMuaGVhZGVyc0VsZW1lbnQ7XG5cdH1cblx0XG5cdC8vc2Nyb2xsIGhvcml6b250YWxseSB0byBtYXRjaCB0YWJsZSBib2R5XG5cdHNjcm9sbEhvcml6b250YWwobGVmdCl7XG5cdFx0dGhpcy5jb250ZW50c0VsZW1lbnQuc2Nyb2xsTGVmdCA9IGxlZnQ7XG5cblx0XHR0aGlzLnNjcm9sbExlZnQgPSBsZWZ0O1xuXHRcdFxuXHRcdHRoaXMucmVuZGVyZXIuc2Nyb2xsQ29sdW1ucyhsZWZ0KTtcblx0fVxuXG5cdGluaXRpYWxpemVTY3JvbGxXaGVlbFdhdGNoZXIoKXtcblx0XHR0aGlzLmNvbnRlbnRzRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwid2hlZWxcIiwgKGUpID0+IHtcblx0XHRcdHZhciBsZWZ0O1xuXG5cdFx0XHRpZihlLmRlbHRhWCl7XG5cdFx0XHRcdGxlZnQgPSB0aGlzLmNvbnRlbnRzRWxlbWVudC5zY3JvbGxMZWZ0ICsgZS5kZWx0YVg7XG5cblx0XHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnNjcm9sbEhvcml6b250YWwobGVmdCk7XG5cdFx0XHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5zY3JvbGxIb3Jpem9udGFsKGxlZnQpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vIENvbHVtbiBTZXR1cCBGdW5jdGlvbnMgLy8vLy8vLy8vLy8vL1xuXHRnZW5lcmF0ZUNvbHVtbnNGcm9tUm93RGF0YShkYXRhKXtcblx0XHR2YXIgY29scyA9IFtdLFxuXHRcdGRlZmluaXRpb25zID0gdGhpcy50YWJsZS5vcHRpb25zLmF1dG9Db2x1bW5zRGVmaW5pdGlvbnMsXG5cdFx0cm93LCBzb3J0ZXI7XG5cdFx0XG5cdFx0aWYoZGF0YSAmJiBkYXRhLmxlbmd0aCl7XG5cdFx0XHRcblx0XHRcdHJvdyA9IGRhdGFbMF07XG5cdFx0XHRcblx0XHRcdGZvcih2YXIga2V5IGluIHJvdyl7XG5cdFx0XHRcdGxldCBjb2wgPSB7XG5cdFx0XHRcdFx0ZmllbGQ6a2V5LFxuXHRcdFx0XHRcdHRpdGxlOmtleSxcblx0XHRcdFx0fTtcblx0XHRcdFx0XG5cdFx0XHRcdGxldCB2YWx1ZSA9IHJvd1trZXldO1xuXHRcdFx0XHRcblx0XHRcdFx0c3dpdGNoKHR5cGVvZiB2YWx1ZSl7XG5cdFx0XHRcdFx0Y2FzZSBcInVuZGVmaW5lZFwiOlxuXHRcdFx0XHRcdFx0c29ydGVyID0gXCJzdHJpbmdcIjtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGNhc2UgXCJib29sZWFuXCI6XG5cdFx0XHRcdFx0XHRzb3J0ZXIgPSBcImJvb2xlYW5cIjtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGNhc2UgXCJvYmplY3RcIjpcblx0XHRcdFx0XHRcdGlmKEFycmF5LmlzQXJyYXkodmFsdWUpKXtcblx0XHRcdFx0XHRcdFx0c29ydGVyID0gXCJhcnJheVwiO1xuXHRcdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0XHRzb3J0ZXIgPSBcInN0cmluZ1wiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdGlmKCFpc05hTih2YWx1ZSkgJiYgdmFsdWUgIT09IFwiXCIpe1xuXHRcdFx0XHRcdFx0XHRzb3J0ZXIgPSBcIm51bWJlclwiO1xuXHRcdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0XHRpZih2YWx1ZS5tYXRjaCgvKCheWzAtOV0rW2Etel0rKXwoXlthLXpdK1swLTldKykpKyQvaSkpe1xuXHRcdFx0XHRcdFx0XHRcdHNvcnRlciA9IFwiYWxwaGFudW1cIjtcblx0XHRcdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHNvcnRlciA9IFwic3RyaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRjb2wuc29ydGVyID0gc29ydGVyO1xuXHRcdFx0XHRcblx0XHRcdFx0Y29scy5wdXNoKGNvbCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKGRlZmluaXRpb25zKXtcblx0XHRcdFx0XG5cdFx0XHRcdHN3aXRjaCh0eXBlb2YgZGVmaW5pdGlvbnMpe1xuXHRcdFx0XHRcdGNhc2UgXCJmdW5jdGlvblwiOlxuXHRcdFx0XHRcdFx0dGhpcy50YWJsZS5vcHRpb25zLmNvbHVtbnMgPSBkZWZpbml0aW9ucy5jYWxsKHRoaXMudGFibGUsIGNvbHMpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Y2FzZSBcIm9iamVjdFwiOlxuXHRcdFx0XHRcdFx0aWYoQXJyYXkuaXNBcnJheShkZWZpbml0aW9ucykpe1xuXHRcdFx0XHRcdFx0XHRjb2xzLmZvckVhY2goKGNvbCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdHZhciBtYXRjaCA9IGRlZmluaXRpb25zLmZpbmQoKGRlZikgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGRlZi5maWVsZCA9PT0gY29sLmZpZWxkO1xuXHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRcdGlmKG1hdGNoKXtcblx0XHRcdFx0XHRcdFx0XHRcdE9iamVjdC5hc3NpZ24oY29sLCBtYXRjaCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGNvbHMuZm9yRWFjaCgoY29sKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0aWYoZGVmaW5pdGlvbnNbY29sLmZpZWxkXSl7XG5cdFx0XHRcdFx0XHRcdFx0XHRPYmplY3QuYXNzaWduKGNvbCwgZGVmaW5pdGlvbnNbY29sLmZpZWxkXSk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0dGhpcy50YWJsZS5vcHRpb25zLmNvbHVtbnMgPSBjb2xzO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy50YWJsZS5vcHRpb25zLmNvbHVtbnMgPSBjb2xzO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLnNldENvbHVtbnModGhpcy50YWJsZS5vcHRpb25zLmNvbHVtbnMpO1xuXHRcdH1cblx0fVxuXHRcblx0c2V0Q29sdW1ucyhjb2xzLCByb3cpe1xuXHRcdHdoaWxlKHRoaXMuaGVhZGVyc0VsZW1lbnQuZmlyc3RDaGlsZCkgdGhpcy5oZWFkZXJzRWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLmhlYWRlcnNFbGVtZW50LmZpcnN0Q2hpbGQpO1xuXHRcdFxuXHRcdHRoaXMuY29sdW1ucyA9IFtdO1xuXHRcdHRoaXMuY29sdW1uc0J5SW5kZXggPSBbXTtcblx0XHR0aGlzLmNvbHVtbnNCeUZpZWxkID0ge307XG5cdFx0XG5cdFx0dGhpcy5kaXNwYXRjaChcImNvbHVtbnMtbG9hZGluZ1wiKTtcblx0XHRcblx0XHRjb2xzLmZvckVhY2goKGRlZiwgaSkgPT4ge1xuXHRcdFx0dGhpcy5fYWRkQ29sdW1uKGRlZik7XG5cdFx0fSk7XG5cdFx0XG5cdFx0dGhpcy5fcmVJbmRleENvbHVtbnMoKTtcblx0XHRcblx0XHR0aGlzLmRpc3BhdGNoKFwiY29sdW1ucy1sb2FkZWRcIik7XG5cdFx0XG5cdFx0dGhpcy5yZXJlbmRlckNvbHVtbnMoZmFsc2UsIHRydWUpO1xuXHRcdFxuXHRcdHRoaXMucmVkcmF3KHRydWUpO1xuXHR9XG5cdFxuXHRfYWRkQ29sdW1uKGRlZmluaXRpb24sIGJlZm9yZSwgbmV4dFRvQ29sdW1uKXtcblx0XHR2YXIgY29sdW1uID0gbmV3IENvbHVtbihkZWZpbml0aW9uLCB0aGlzKSxcblx0XHRjb2xFbCA9IGNvbHVtbi5nZXRFbGVtZW50KCksXG5cdFx0aW5kZXggPSBuZXh0VG9Db2x1bW4gPyB0aGlzLmZpbmRDb2x1bW5JbmRleChuZXh0VG9Db2x1bW4pIDogbmV4dFRvQ29sdW1uO1xuXHRcdFxuXHRcdGlmKG5leHRUb0NvbHVtbiAmJiBpbmRleCA+IC0xKXtcblx0XHRcdHZhciB0b3BDb2x1bW4gPSBuZXh0VG9Db2x1bW4uZ2V0VG9wQ29sdW1uKCk7XG5cdFx0XHR2YXIgcGFyZW50SW5kZXggPSB0aGlzLmNvbHVtbnMuaW5kZXhPZih0b3BDb2x1bW4pO1xuXHRcdFx0dmFyIG5leHRFbCA9IHRvcENvbHVtbi5nZXRFbGVtZW50KCk7XG5cdFx0XHRcblx0XHRcdGlmKGJlZm9yZSl7XG5cdFx0XHRcdHRoaXMuY29sdW1ucy5zcGxpY2UocGFyZW50SW5kZXgsIDAsIGNvbHVtbik7XG5cdFx0XHRcdG5leHRFbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShjb2xFbCwgbmV4dEVsKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5jb2x1bW5zLnNwbGljZShwYXJlbnRJbmRleCArIDEsIDAsIGNvbHVtbik7XG5cdFx0XHRcdG5leHRFbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShjb2xFbCwgbmV4dEVsLm5leHRTaWJsaW5nKTtcblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRpZihiZWZvcmUpe1xuXHRcdFx0XHR0aGlzLmNvbHVtbnMudW5zaGlmdChjb2x1bW4pO1xuXHRcdFx0XHR0aGlzLmhlYWRlcnNFbGVtZW50Lmluc2VydEJlZm9yZShjb2x1bW4uZ2V0RWxlbWVudCgpLCB0aGlzLmhlYWRlcnNFbGVtZW50LmZpcnN0Q2hpbGQpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmNvbHVtbnMucHVzaChjb2x1bW4pO1xuXHRcdFx0XHR0aGlzLmhlYWRlcnNFbGVtZW50LmFwcGVuZENoaWxkKGNvbHVtbi5nZXRFbGVtZW50KCkpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRjb2x1bW4uY29sdW1uUmVuZGVyZWQoKTtcblx0XHRcblx0XHRyZXR1cm4gY29sdW1uO1xuXHR9XG5cdFxuXHRyZWdpc3RlckNvbHVtbkZpZWxkKGNvbCl7XG5cdFx0aWYoY29sLmRlZmluaXRpb24uZmllbGQpe1xuXHRcdFx0dGhpcy5jb2x1bW5zQnlGaWVsZFtjb2wuZGVmaW5pdGlvbi5maWVsZF0gPSBjb2w7XG5cdFx0fVxuXHR9XG5cdFxuXHRyZWdpc3RlckNvbHVtblBvc2l0aW9uKGNvbCl7XG5cdFx0dGhpcy5jb2x1bW5zQnlJbmRleC5wdXNoKGNvbCk7XG5cdH1cblx0XG5cdF9yZUluZGV4Q29sdW1ucygpe1xuXHRcdHRoaXMuY29sdW1uc0J5SW5kZXggPSBbXTtcblx0XHRcblx0XHR0aGlzLmNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihjb2x1bW4pe1xuXHRcdFx0Y29sdW1uLnJlUmVnaXN0ZXJQb3NpdGlvbigpO1xuXHRcdH0pO1xuXHR9XG5cdFxuXHQvL2Vuc3VyZSBjb2x1bW4gaGVhZGVycyB0YWtlIHVwIHRoZSBjb3JyZWN0IGFtb3VudCBvZiBzcGFjZSBpbiBjb2x1bW4gZ3JvdXBzXG5cdHZlcnRpY2FsQWxpZ25IZWFkZXJzKCl7XG5cdFx0dmFyIG1pbkhlaWdodCA9IDA7XG5cdFx0XG5cdFx0aWYoIXRoaXMucmVkcmF3QmxvY2spe1xuXG5cdFx0XHR0aGlzLmhlYWRlcnNFbGVtZW50LnN0eWxlLmhlaWdodD1cIlwiO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG5cdFx0XHRcdGNvbHVtbi5jbGVhclZlcnRpY2FsQWxpZ24oKTtcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG5cdFx0XHRcdHZhciBoZWlnaHQgPSBjb2x1bW4uZ2V0SGVpZ2h0KCk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihoZWlnaHQgPiBtaW5IZWlnaHQpe1xuXHRcdFx0XHRcdG1pbkhlaWdodCA9IGhlaWdodDtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMuaGVhZGVyc0VsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gbWluSGVpZ2h0ICsgXCJweFwiO1xuXG5cdFx0XHR0aGlzLmNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG5cdFx0XHRcdGNvbHVtbi52ZXJ0aWNhbEFsaWduKHRoaXMudGFibGUub3B0aW9ucy5jb2x1bW5IZWFkZXJWZXJ0QWxpZ24sIG1pbkhlaWdodCk7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLmFkanVzdFRhYmxlU2l6ZSgpO1xuXHRcdH1cblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLyBDb2x1bW4gRGV0YWlscyAvLy8vLy8vLy8vLy8vLy8vL1xuXHRmaW5kQ29sdW1uKHN1YmplY3Qpe1xuXHRcdHZhciBjb2x1bW5zO1xuXG5cdFx0aWYodHlwZW9mIHN1YmplY3QgPT0gXCJvYmplY3RcIil7XG5cdFx0XHRcblx0XHRcdGlmKHN1YmplY3QgaW5zdGFuY2VvZiBDb2x1bW4pe1xuXHRcdFx0XHQvL3N1YmplY3QgaXMgY29sdW1uIGVsZW1lbnRcblx0XHRcdFx0cmV0dXJuIHN1YmplY3Q7XG5cdFx0XHR9ZWxzZSBpZihzdWJqZWN0IGluc3RhbmNlb2YgQ29sdW1uQ29tcG9uZW50KXtcblx0XHRcdFx0Ly9zdWJqZWN0IGlzIHB1YmxpYyBjb2x1bW4gY29tcG9uZW50XG5cdFx0XHRcdHJldHVybiBzdWJqZWN0Ll9nZXRTZWxmKCkgfHwgZmFsc2U7XG5cdFx0XHR9ZWxzZSBpZih0eXBlb2YgSFRNTEVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgc3ViamVjdCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KXtcblxuXHRcdFx0XHRjb2x1bW5zID0gW107XG5cblx0XHRcdFx0dGhpcy5jb2x1bW5zLmZvckVhY2goKGNvbHVtbikgPT4ge1xuXHRcdFx0XHRcdGNvbHVtbnMucHVzaChjb2x1bW4pO1xuXHRcdFx0XHRcdGNvbHVtbnMgPSBjb2x1bW5zLmNvbmNhdChjb2x1bW4uZ2V0Q29sdW1ucyh0cnVlKSk7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdC8vc3ViamVjdCBpcyBhIEhUTUwgZWxlbWVudCBvZiB0aGUgY29sdW1uIGhlYWRlclxuXHRcdFx0XHRsZXQgbWF0Y2ggPSBjb2x1bW5zLmZpbmQoKGNvbHVtbikgPT4ge1xuXHRcdFx0XHRcdHJldHVybiBjb2x1bW4uZWxlbWVudCA9PT0gc3ViamVjdDtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRyZXR1cm4gbWF0Y2ggfHwgZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHR9ZWxzZSB7XG5cdFx0XHQvL3N1YmplY3Qgc2hvdWxkIGJlIHRyZWF0ZWQgYXMgdGhlIGZpZWxkIG5hbWUgb2YgdGhlIGNvbHVtblxuXHRcdFx0cmV0dXJuIHRoaXMuY29sdW1uc0J5RmllbGRbc3ViamVjdF0gfHwgZmFsc2U7XG5cdFx0fVxuXHRcdFxuXHRcdC8vY2F0Y2ggYWxsIGZvciBhbnkgb3RoZXIgdHlwZSBvZiBpbnB1dFxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRcblx0Z2V0Q29sdW1uQnlGaWVsZChmaWVsZCl7XG5cdFx0cmV0dXJuIHRoaXMuY29sdW1uc0J5RmllbGRbZmllbGRdO1xuXHR9XG5cdFxuXHRnZXRDb2x1bW5zQnlGaWVsZFJvb3Qocm9vdCl7XG5cdFx0dmFyIG1hdGNoZXMgPSBbXTtcblx0XHRcblx0XHRPYmplY3Qua2V5cyh0aGlzLmNvbHVtbnNCeUZpZWxkKS5mb3JFYWNoKChmaWVsZCkgPT4ge1xuXHRcdFx0dmFyIGZpZWxkUm9vdCA9IGZpZWxkLnNwbGl0KFwiLlwiKVswXTtcblx0XHRcdGlmKGZpZWxkUm9vdCA9PT0gcm9vdCl7XG5cdFx0XHRcdG1hdGNoZXMucHVzaCh0aGlzLmNvbHVtbnNCeUZpZWxkW2ZpZWxkXSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH1cblx0XG5cdGdldENvbHVtbkJ5SW5kZXgoaW5kZXgpe1xuXHRcdHJldHVybiB0aGlzLmNvbHVtbnNCeUluZGV4W2luZGV4XTtcblx0fVxuXHRcblx0Z2V0Rmlyc3RWaXNpYmxlQ29sdW1uKCl7XG5cdFx0dmFyIGluZGV4ID0gdGhpcy5jb2x1bW5zQnlJbmRleC5maW5kSW5kZXgoKGNvbCkgPT4ge1xuXHRcdFx0cmV0dXJuIGNvbC52aXNpYmxlO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiBpbmRleCA+IC0xID8gdGhpcy5jb2x1bW5zQnlJbmRleFtpbmRleF0gOiBmYWxzZTtcblx0fVxuXHRcblx0Z2V0Q29sdW1ucygpe1xuXHRcdHJldHVybiB0aGlzLmNvbHVtbnM7XG5cdH1cblx0XG5cdGZpbmRDb2x1bW5JbmRleChjb2x1bW4pe1xuXHRcdHJldHVybiB0aGlzLmNvbHVtbnNCeUluZGV4LmZpbmRJbmRleCgoY29sKSA9PiB7XG5cdFx0XHRyZXR1cm4gY29sdW1uID09PSBjb2w7XG5cdFx0fSk7XG5cdH1cblx0XG5cdC8vcmV0dXJuIGFsbCBjb2x1bW5zIHRoYXQgYXJlIG5vdCBncm91cHNcblx0Z2V0UmVhbENvbHVtbnMoKXtcblx0XHRyZXR1cm4gdGhpcy5jb2x1bW5zQnlJbmRleDtcblx0fVxuXHRcblx0Ly90cmF2ZXJzZSBhY3Jvc3MgY29sdW1ucyBhbmQgY2FsbCBhY3Rpb25cblx0dHJhdmVyc2UoY2FsbGJhY2spe1xuXHRcdHRoaXMuY29sdW1uc0J5SW5kZXguZm9yRWFjaCgoY29sdW1uLGkpID0+e1xuXHRcdFx0Y2FsbGJhY2soY29sdW1uLCBpKTtcblx0XHR9KTtcblx0fVxuXHRcblx0Ly9nZXQgZGVmaW5pdGlvbnMgb2YgYWN0dWFsIGNvbHVtbnNcblx0Z2V0RGVmaW5pdGlvbnMoYWN0aXZlKXtcblx0XHR2YXIgb3V0cHV0ID0gW107XG5cdFx0XG5cdFx0dGhpcy5jb2x1bW5zQnlJbmRleC5mb3JFYWNoKChjb2x1bW4pID0+IHtcblx0XHRcdGlmKCFhY3RpdmUgfHwgKGFjdGl2ZSAmJiBjb2x1bW4udmlzaWJsZSkpe1xuXHRcdFx0XHRvdXRwdXQucHVzaChjb2x1bW4uZ2V0RGVmaW5pdGlvbigpKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cdFxuXHQvL2dldCBmdWxsIG5lc3RlZCBkZWZpbml0aW9uIHRyZWVcblx0Z2V0RGVmaW5pdGlvblRyZWUoKXtcblx0XHR2YXIgb3V0cHV0ID0gW107XG5cdFx0XG5cdFx0dGhpcy5jb2x1bW5zLmZvckVhY2goKGNvbHVtbikgPT4ge1xuXHRcdFx0b3V0cHV0LnB1c2goY29sdW1uLmdldERlZmluaXRpb24odHJ1ZSkpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblx0XG5cdGdldENvbXBvbmVudHMoc3RydWN0dXJlZCl7XG5cdFx0dmFyIG91dHB1dCA9IFtdLFxuXHRcdGNvbHVtbnMgPSBzdHJ1Y3R1cmVkID8gdGhpcy5jb2x1bW5zIDogdGhpcy5jb2x1bW5zQnlJbmRleDtcblx0XHRcblx0XHRjb2x1bW5zLmZvckVhY2goKGNvbHVtbikgPT4ge1xuXHRcdFx0b3V0cHV0LnB1c2goY29sdW1uLmdldENvbXBvbmVudCgpKTtcblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cdFxuXHRnZXRXaWR0aCgpe1xuXHRcdHZhciB3aWR0aCA9IDA7XG5cdFx0XG5cdFx0dGhpcy5jb2x1bW5zQnlJbmRleC5mb3JFYWNoKChjb2x1bW4pID0+IHtcblx0XHRcdGlmKGNvbHVtbi52aXNpYmxlKXtcblx0XHRcdFx0d2lkdGggKz0gY29sdW1uLmdldFdpZHRoKCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0cmV0dXJuIHdpZHRoO1xuXHR9XG5cdFxuXHRtb3ZlQ29sdW1uKGZyb20sIHRvLCBhZnRlcil7XG5cdFx0dG8uZWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShmcm9tLmVsZW1lbnQsIHRvLmVsZW1lbnQpO1xuXHRcdFxuXHRcdGlmKGFmdGVyKXtcblx0XHRcdHRvLmVsZW1lbnQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodG8uZWxlbWVudCwgZnJvbS5lbGVtZW50KTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5tb3ZlQ29sdW1uQWN0dWFsKGZyb20sIHRvLCBhZnRlcik7XG5cblx0XHR0aGlzLnZlcnRpY2FsQWxpZ25IZWFkZXJzKCk7XG5cdFx0XG5cdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnJlaW5pdGlhbGl6ZSgpO1xuXHR9XG5cdFxuXHRtb3ZlQ29sdW1uQWN0dWFsKGZyb20sIHRvLCBhZnRlcil7XG5cdFx0aWYoZnJvbS5wYXJlbnQuaXNHcm91cCl7XG5cdFx0XHR0aGlzLl9tb3ZlQ29sdW1uSW5BcnJheShmcm9tLnBhcmVudC5jb2x1bW5zLCBmcm9tLCB0bywgYWZ0ZXIpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuX21vdmVDb2x1bW5JbkFycmF5KHRoaXMuY29sdW1ucywgZnJvbSwgdG8sIGFmdGVyKTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5fbW92ZUNvbHVtbkluQXJyYXkodGhpcy5jb2x1bW5zQnlJbmRleCwgZnJvbSwgdG8sIGFmdGVyLCB0cnVlKTtcblx0XHRcblx0XHR0aGlzLnJlcmVuZGVyQ29sdW1ucyh0cnVlKTtcblx0XHRcblx0XHR0aGlzLmRpc3BhdGNoKFwiY29sdW1uLW1vdmVkXCIsIGZyb20sIHRvLCBhZnRlcik7XG5cdFx0XG5cdFx0aWYodGhpcy5zdWJzY3JpYmVkRXh0ZXJuYWwoXCJjb2x1bW5Nb3ZlZFwiKSl7XG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJjb2x1bW5Nb3ZlZFwiLCBmcm9tLmdldENvbXBvbmVudCgpLCB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0Q29tcG9uZW50cygpKTtcblx0XHR9XG5cdH1cblx0XG5cdF9tb3ZlQ29sdW1uSW5BcnJheShjb2x1bW5zLCBmcm9tLCB0bywgYWZ0ZXIsIHVwZGF0ZVJvd3Mpe1xuXHRcdHZhclx0ZnJvbUluZGV4ID0gY29sdW1ucy5pbmRleE9mKGZyb20pLFxuXHRcdHRvSW5kZXgsIHJvd3MgPSBbXTtcblx0XHRcblx0XHRpZiAoZnJvbUluZGV4ID4gLTEpIHtcblx0XHRcdFxuXHRcdFx0Y29sdW1ucy5zcGxpY2UoZnJvbUluZGV4LCAxKTtcblx0XHRcdFxuXHRcdFx0dG9JbmRleCA9IGNvbHVtbnMuaW5kZXhPZih0byk7XG5cdFx0XHRcblx0XHRcdGlmICh0b0luZGV4ID4gLTEpIHtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKGFmdGVyKXtcblx0XHRcdFx0XHR0b0luZGV4ID0gdG9JbmRleCsxO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0b0luZGV4ID0gZnJvbUluZGV4O1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRjb2x1bW5zLnNwbGljZSh0b0luZGV4LCAwLCBmcm9tKTtcblx0XHRcdFxuXHRcdFx0aWYodXBkYXRlUm93cyl7XG5cdFx0XHRcdFxuXHRcdFx0XHRyb3dzID0gdGhpcy5jaGFpbihcImNvbHVtbi1tb3Zpbmctcm93c1wiLCBbZnJvbSwgdG8sIGFmdGVyXSwgbnVsbCwgW10pIHx8IFtdO1xuXHRcdFx0XHRcblx0XHRcdFx0cm93cyA9IHJvd3MuY29uY2F0KHRoaXMudGFibGUucm93TWFuYWdlci5yb3dzKTtcblx0XHRcdFx0XG5cdFx0XHRcdHJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3cpe1xuXHRcdFx0XHRcdGlmKHJvdy5jZWxscy5sZW5ndGgpe1xuXHRcdFx0XHRcdFx0dmFyIGNlbGwgPSByb3cuY2VsbHMuc3BsaWNlKGZyb21JbmRleCwgMSlbMF07XG5cdFx0XHRcdFx0XHRyb3cuY2VsbHMuc3BsaWNlKHRvSW5kZXgsIDAsIGNlbGwpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHRcdFxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0c2Nyb2xsVG9Db2x1bW4oY29sdW1uLCBwb3NpdGlvbiwgaWZWaXNpYmxlKXtcblx0XHR2YXIgbGVmdCA9IDAsXG5cdFx0b2Zmc2V0ID0gY29sdW1uLmdldExlZnRPZmZzZXQoKSxcblx0XHRhZGp1c3QgPSAwLFxuXHRcdGNvbEVsID0gY29sdW1uLmdldEVsZW1lbnQoKTtcblx0XHRcblx0XHRcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0XG5cdFx0XHRpZih0eXBlb2YgcG9zaXRpb24gPT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0XHRwb3NpdGlvbiA9IHRoaXMudGFibGUub3B0aW9ucy5zY3JvbGxUb0NvbHVtblBvc2l0aW9uO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZih0eXBlb2YgaWZWaXNpYmxlID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdFx0aWZWaXNpYmxlID0gdGhpcy50YWJsZS5vcHRpb25zLnNjcm9sbFRvQ29sdW1uSWZWaXNpYmxlO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihjb2x1bW4udmlzaWJsZSl7XG5cdFx0XHRcdFxuXHRcdFx0XHQvL2FsaWduIHRvIGNvcnJlY3QgcG9zaXRpb25cblx0XHRcdFx0c3dpdGNoKHBvc2l0aW9uKXtcblx0XHRcdFx0XHRjYXNlIFwibWlkZGxlXCI6XG5cdFx0XHRcdFx0Y2FzZSBcImNlbnRlclwiOlxuXHRcdFx0XHRcdFx0YWRqdXN0ID0gLXRoaXMuZWxlbWVudC5jbGllbnRXaWR0aCAvIDI7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRjYXNlIFwicmlnaHRcIjpcblx0XHRcdFx0XHRcdGFkanVzdCA9IGNvbEVsLmNsaWVudFdpZHRoIC0gdGhpcy5oZWFkZXJzRWxlbWVudC5jbGllbnRXaWR0aDtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHQvL2NoZWNrIGNvbHVtbiB2aXNpYmlsaXR5XG5cdFx0XHRcdGlmKCFpZlZpc2libGUpe1xuXHRcdFx0XHRcdGlmKG9mZnNldCA+IDAgJiYgb2Zmc2V0ICsgY29sRWwub2Zmc2V0V2lkdGggPCB0aGlzLmVsZW1lbnQuY2xpZW50V2lkdGgpe1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0Ly9jYWxjdWxhdGUgc2Nyb2xsIHBvc2l0aW9uXG5cdFx0XHRcdGxlZnQgPSBvZmZzZXQgKyBhZGp1c3Q7XG5cdFx0XHRcdFxuXHRcdFx0XHRsZWZ0ID0gTWF0aC5tYXgoTWF0aC5taW4obGVmdCwgdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQuc2Nyb2xsV2lkdGggLSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5jbGllbnRXaWR0aCksMCk7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuc2Nyb2xsSG9yaXpvbnRhbChsZWZ0KTtcblx0XHRcdFx0dGhpcy5zY3JvbGxIb3Jpem9udGFsKGxlZnQpO1xuXHRcdFx0XHRcblx0XHRcdFx0cmVzb2x2ZSgpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJTY3JvbGwgRXJyb3IgLSBDb2x1bW4gbm90IHZpc2libGVcIik7XG5cdFx0XHRcdHJlamVjdChcIlNjcm9sbCBFcnJvciAtIENvbHVtbiBub3QgdmlzaWJsZVwiKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdH0pO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vIENlbGwgTWFuYWdlbWVudCAvLy8vLy8vLy8vLy8vLy8vL1xuXHRnZW5lcmF0ZUNlbGxzKHJvdyl7XG5cdFx0dmFyIGNlbGxzID0gW107XG5cdFx0XG5cdFx0dGhpcy5jb2x1bW5zQnlJbmRleC5mb3JFYWNoKChjb2x1bW4pID0+IHtcblx0XHRcdGNlbGxzLnB1c2goY29sdW1uLmdlbmVyYXRlQ2VsbChyb3cpKTtcblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gY2VsbHM7XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8gQ29sdW1uIE1hbmFnZW1lbnQgLy8vLy8vLy8vLy8vLy8vLy9cblx0Z2V0RmxleEJhc2VXaWR0aCgpe1xuXHRcdHZhciB0b3RhbFdpZHRoID0gdGhpcy50YWJsZS5lbGVtZW50LmNsaWVudFdpZHRoLCAvL3RhYmxlIGVsZW1lbnQgd2lkdGhcblx0XHRmaXhlZFdpZHRoID0gMDtcblx0XHRcblx0XHQvL2FkanVzdCBmb3IgdmVydGljYWwgc2Nyb2xsYmFyIGlmIHByZXNlbnRcblx0XHRpZih0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5zY3JvbGxIZWlnaHQgPiB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5jbGllbnRIZWlnaHQpe1xuXHRcdFx0dG90YWxXaWR0aCAtPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5vZmZzZXRXaWR0aCAtIHRoaXMudGFibGUucm93TWFuYWdlci5lbGVtZW50LmNsaWVudFdpZHRoO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLmNvbHVtbnNCeUluZGV4LmZvckVhY2goZnVuY3Rpb24oY29sdW1uKXtcblx0XHRcdHZhciB3aWR0aCwgbWluV2lkdGgsIGNvbFdpZHRoO1xuXHRcdFx0XG5cdFx0XHRpZihjb2x1bW4udmlzaWJsZSl7XG5cdFx0XHRcdFxuXHRcdFx0XHR3aWR0aCA9IGNvbHVtbi5kZWZpbml0aW9uLndpZHRoIHx8IDA7XG5cdFx0XHRcdFxuXHRcdFx0XHRtaW5XaWR0aCA9IHBhcnNlSW50KGNvbHVtbi5taW5XaWR0aCk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih0eXBlb2Yod2lkdGgpID09IFwic3RyaW5nXCIpe1xuXHRcdFx0XHRcdGlmKHdpZHRoLmluZGV4T2YoXCIlXCIpID4gLTEpe1xuXHRcdFx0XHRcdFx0Y29sV2lkdGggPSAodG90YWxXaWR0aCAvIDEwMCkgKiBwYXJzZUludCh3aWR0aCkgO1xuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdGNvbFdpZHRoID0gcGFyc2VJbnQod2lkdGgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGNvbFdpZHRoID0gd2lkdGg7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGZpeGVkV2lkdGggKz0gY29sV2lkdGggPiBtaW5XaWR0aCA/IGNvbFdpZHRoIDogbWluV2lkdGg7XG5cdFx0XHRcdFxuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiBmaXhlZFdpZHRoO1xuXHR9XG5cdFxuXHRhZGRDb2x1bW4oZGVmaW5pdGlvbiwgYmVmb3JlLCBuZXh0VG9Db2x1bW4pe1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHR2YXIgY29sdW1uID0gdGhpcy5fYWRkQ29sdW1uKGRlZmluaXRpb24sIGJlZm9yZSwgbmV4dFRvQ29sdW1uKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5fcmVJbmRleENvbHVtbnMoKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5kaXNwYXRjaChcImNvbHVtbi1hZGRcIiwgZGVmaW5pdGlvbiwgYmVmb3JlLCBuZXh0VG9Db2x1bW4pO1xuXHRcdFx0XG5cdFx0XHRpZih0aGlzLmxheW91dE1vZGUoKSAhPSBcImZpdENvbHVtbnNcIil7XG5cdFx0XHRcdGNvbHVtbi5yZWluaXRpYWxpemVXaWR0aCgpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLnJlZHJhdyh0cnVlKTtcblx0XHRcdFxuXHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnJlaW5pdGlhbGl6ZSgpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnJlcmVuZGVyQ29sdW1ucygpO1xuXHRcdFx0XG5cdFx0XHRyZXNvbHZlKGNvbHVtbik7XG5cdFx0fSk7XG5cdH1cblx0XG5cdC8vcmVtb3ZlIGNvbHVtbiBmcm9tIHN5c3RlbVxuXHRkZXJlZ2lzdGVyQ29sdW1uKGNvbHVtbil7XG5cdFx0dmFyIGZpZWxkID0gY29sdW1uLmdldEZpZWxkKCksXG5cdFx0aW5kZXg7XG5cdFx0XG5cdFx0Ly9yZW1vdmUgZnJvbSBmaWVsZCBsaXN0XG5cdFx0aWYoZmllbGQpe1xuXHRcdFx0ZGVsZXRlIHRoaXMuY29sdW1uc0J5RmllbGRbZmllbGRdO1xuXHRcdH1cblx0XHRcblx0XHQvL3JlbW92ZSBmcm9tIGluZGV4IGxpc3Rcblx0XHRpbmRleCA9IHRoaXMuY29sdW1uc0J5SW5kZXguaW5kZXhPZihjb2x1bW4pO1xuXHRcdFxuXHRcdGlmKGluZGV4ID4gLTEpe1xuXHRcdFx0dGhpcy5jb2x1bW5zQnlJbmRleC5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdH1cblx0XHRcblx0XHQvL3JlbW92ZSBmcm9tIGNvbHVtbiBsaXN0XG5cdFx0aW5kZXggPSB0aGlzLmNvbHVtbnMuaW5kZXhPZihjb2x1bW4pO1xuXHRcdFxuXHRcdGlmKGluZGV4ID4gLTEpe1xuXHRcdFx0dGhpcy5jb2x1bW5zLnNwbGljZShpbmRleCwgMSk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMudmVydGljYWxBbGlnbkhlYWRlcnMoKTtcblx0XHRcblx0XHR0aGlzLnJlZHJhdygpO1xuXHR9XG5cdFxuXHRyZXJlbmRlckNvbHVtbnModXBkYXRlLCBzaWxlbnQpe1xuXHRcdGlmKCF0aGlzLnJlZHJhd0Jsb2NrKXtcblx0XHRcdHRoaXMucmVuZGVyZXIucmVyZW5kZXJDb2x1bW5zKHVwZGF0ZSwgc2lsZW50KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRpZih1cGRhdGUgPT09IGZhbHNlIHx8ICh1cGRhdGUgPT09IHRydWUgJiYgdGhpcy5yZWRyYXdCbG9ja1VwZGF0ZSA9PT0gbnVsbCkpe1xuXHRcdFx0XHR0aGlzLnJlZHJhd0Jsb2NrVXBkYXRlID0gdXBkYXRlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0YmxvY2tSZWRyYXcoKXtcblx0XHR0aGlzLnJlZHJhd0Jsb2NrID0gdHJ1ZTtcblx0XHR0aGlzLnJlZHJhd0Jsb2NrVXBkYXRlID0gbnVsbDtcblx0fVxuXHRcblx0cmVzdG9yZVJlZHJhdygpe1xuXHRcdHRoaXMucmVkcmF3QmxvY2sgPSBmYWxzZTtcblx0XHR0aGlzLnZlcnRpY2FsQWxpZ25IZWFkZXJzKCk7XG5cdFx0dGhpcy5yZW5kZXJlci5yZXJlbmRlckNvbHVtbnModGhpcy5yZWRyYXdCbG9ja1VwZGF0ZSk7XG5cdFx0XG5cdH1cblx0XG5cdC8vcmVkcmF3IGNvbHVtbnNcblx0cmVkcmF3KGZvcmNlKXtcblx0XHRpZihIZWxwZXJzLmVsVmlzaWJsZSh0aGlzLmVsZW1lbnQpKXtcblx0XHRcdHRoaXMudmVydGljYWxBbGlnbkhlYWRlcnMoKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYoZm9yY2Upe1xuXHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnJlc2V0U2Nyb2xsKCk7XG5cdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIucmVpbml0aWFsaXplKCk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKCF0aGlzLmNvbmZpcm0oXCJ0YWJsZS1yZWRyYXdpbmdcIiwgZm9yY2UpKXtcblx0XHRcdHRoaXMubGF5b3V0UmVmcmVzaChmb3JjZSk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuZGlzcGF0Y2goXCJ0YWJsZS1yZWRyYXdcIiwgZm9yY2UpO1xuXHRcdFxuXHRcdHRoaXMudGFibGUuZm9vdGVyTWFuYWdlci5yZWRyYXcoKTtcblx0fVxufVxuXG5jbGFzcyBCYXNpY1ZlcnRpY2FsIGV4dGVuZHMgUmVuZGVyZXJ7XG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cdFx0XG5cdFx0dGhpcy52ZXJ0aWNhbEZpbGxNb2RlID0gXCJmaWxsXCI7XG5cdFx0XG5cdFx0dGhpcy5zY3JvbGxUb3AgPSAwO1xuXHRcdHRoaXMuc2Nyb2xsTGVmdCA9IDA7XG5cdFx0XG5cdFx0dGhpcy5zY3JvbGxUb3AgPSAwO1xuXHRcdHRoaXMuc2Nyb2xsTGVmdCA9IDA7XG5cdH1cblx0XG5cdGNsZWFyUm93cygpe1xuXHRcdHZhciBlbGVtZW50ID0gdGhpcy50YWJsZUVsZW1lbnQ7XG5cdFx0XG5cdFx0Ly8gZWxlbWVudC5jaGlsZHJlbi5kZXRhY2goKTtcblx0XHR3aGlsZShlbGVtZW50LmZpcnN0Q2hpbGQpIGVsZW1lbnQucmVtb3ZlQ2hpbGQoZWxlbWVudC5maXJzdENoaWxkKTtcblx0XHRcblx0XHRlbGVtZW50LnNjcm9sbFRvcCA9IDA7XG5cdFx0ZWxlbWVudC5zY3JvbGxMZWZ0ID0gMDtcblx0XHRcblx0XHRlbGVtZW50LnN0eWxlLm1pbldpZHRoID0gXCJcIjtcblx0XHRlbGVtZW50LnN0eWxlLm1pbkhlaWdodCA9IFwiXCI7XG5cdFx0ZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRlbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSBcIlwiO1xuXHR9XG5cdFxuXHRyZW5kZXJSb3dzKCkge1xuXHRcdHZhciBlbGVtZW50ID0gdGhpcy50YWJsZUVsZW1lbnQsXG5cdFx0b25seUdyb3VwSGVhZGVycyA9IHRydWUsXG5cdFx0dGFibGVGcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdHJvd3MgPSB0aGlzLnJvd3MoKTtcblx0XHRcblx0XHRyb3dzLmZvckVhY2goKHJvdywgaW5kZXgpID0+IHtcblx0XHRcdHRoaXMuc3R5bGVSb3cocm93LCBpbmRleCk7XG5cdFx0XHRyb3cuaW5pdGlhbGl6ZShmYWxzZSwgdHJ1ZSk7XG5cdFx0XHRcblx0XHRcdGlmIChyb3cudHlwZSAhPT0gXCJncm91cFwiKSB7XG5cdFx0XHRcdG9ubHlHcm91cEhlYWRlcnMgPSBmYWxzZTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGFibGVGcmFnLmFwcGVuZENoaWxkKHJvdy5nZXRFbGVtZW50KCkpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdGVsZW1lbnQuYXBwZW5kQ2hpbGQodGFibGVGcmFnKTtcblx0XHRcblx0XHRyb3dzLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0cm93LnJlbmRlcmVkKCk7XG5cdFx0XHRcblx0XHRcdGlmKCFyb3cuaGVpZ2h0SW5pdGlhbGl6ZWQpIHtcblx0XHRcdFx0cm93LmNhbGNIZWlnaHQodHJ1ZSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0cm93cy5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdGlmKCFyb3cuaGVpZ2h0SW5pdGlhbGl6ZWQpIHtcblx0XHRcdFx0cm93LnNldENlbGxIZWlnaHQoKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0XHRcblx0XHRcblx0XHRpZihvbmx5R3JvdXBIZWFkZXJzKXtcblx0XHRcdGVsZW1lbnQuc3R5bGUubWluV2lkdGggPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0V2lkdGgoKSArIFwicHhcIjtcblx0XHR9ZWxzZSB7XG5cdFx0XHRlbGVtZW50LnN0eWxlLm1pbldpZHRoID0gXCJcIjtcblx0XHR9XG5cdH1cblx0XG5cdFxuXHRyZXJlbmRlclJvd3MoY2FsbGJhY2spe1x0XG5cdFx0dGhpcy5jbGVhclJvd3MoKTtcblx0XHRcblx0XHRpZihjYWxsYmFjayl7XG5cdFx0XHRjYWxsYmFjaygpO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLnJlbmRlclJvd3MoKTtcblx0fVxuXHRcblx0c2Nyb2xsVG9Sb3dOZWFyZXN0VG9wKHJvdyl7XG5cdFx0dmFyIHJvd1RvcCA9IEhlbHBlcnMuZWxPZmZzZXQocm93LmdldEVsZW1lbnQoKSkudG9wO1xuXHRcdFxuXHRcdHJldHVybiAhKE1hdGguYWJzKHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbFRvcCAtIHJvd1RvcCkgPiBNYXRoLmFicyh0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxUb3AgKyB0aGlzLmVsZW1lbnRWZXJ0aWNhbC5jbGllbnRIZWlnaHQgLSByb3dUb3ApKTtcblx0fVxuXHRcblx0c2Nyb2xsVG9Sb3cocm93KXtcblx0XHR2YXIgcm93RWwgPSByb3cuZ2V0RWxlbWVudCgpO1xuXHRcdFxuXHRcdHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbFRvcCA9IEhlbHBlcnMuZWxPZmZzZXQocm93RWwpLnRvcCAtIEhlbHBlcnMuZWxPZmZzZXQodGhpcy5lbGVtZW50VmVydGljYWwpLnRvcCArIHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbFRvcDtcblx0fVxuXHRcblx0dmlzaWJsZVJvd3MoaW5jbHVkaW5nQnVmZmVyKXtcblx0XHRyZXR1cm4gdGhpcy5yb3dzKCk7XG5cdH1cblx0XG59XG5cbmNsYXNzIFZpcnR1YWxEb21WZXJ0aWNhbCBleHRlbmRzIFJlbmRlcmVye1xuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXG5cdFx0dGhpcy52ZXJ0aWNhbEZpbGxNb2RlID0gXCJmaWxsXCI7XG5cblx0XHR0aGlzLnNjcm9sbFRvcCA9IDA7XG5cdFx0dGhpcy5zY3JvbGxMZWZ0ID0gMDtcblxuXHRcdHRoaXMudkRvbVJvd0hlaWdodCA9IDIwOyAvL2FwcHJveGltYXRpb24gb2Ygcm93IGhlaWdodHMgZm9yIHBhZGRpbmdcblxuXHRcdHRoaXMudkRvbVRvcCA9IDA7IC8vaG9sZCBwb3NpdGlvbiBmb3IgZmlyc3QgcmVuZGVyZWQgcm93IGluIHRoZSB2aXJ0dWFsIERPTVxuXHRcdHRoaXMudkRvbUJvdHRvbSA9IDA7IC8vaG9sZCBwb3NpdGlvbiBmb3IgbGFzdCByZW5kZXJlZCByb3cgaW4gdGhlIHZpcnR1YWwgRE9NXG5cblx0XHR0aGlzLnZEb21TY3JvbGxQb3NUb3AgPSAwOyAvL2xhc3Qgc2Nyb2xsIHBvc2l0aW9uIG9mIHRoZSB2RG9tIHRvcDtcblx0XHR0aGlzLnZEb21TY3JvbGxQb3NCb3R0b20gPSAwOyAvL2xhc3Qgc2Nyb2xsIHBvc2l0aW9uIG9mIHRoZSB2RG9tIGJvdHRvbTtcblxuXHRcdHRoaXMudkRvbVRvcFBhZCA9IDA7IC8vaG9sZCB2YWx1ZSBvZiBwYWRkaW5nIGZvciB0b3Agb2YgdmlydHVhbCBET01cblx0XHR0aGlzLnZEb21Cb3R0b21QYWQgPSAwOyAvL2hvbGQgdmFsdWUgb2YgcGFkZGluZyBmb3IgYm90dG9tIG9mIHZpcnR1YWwgRE9NXG5cblx0XHR0aGlzLnZEb21NYXhSZW5kZXJDaGFpbiA9IDkwOyAvL3RoZSBtYXhpbXVtIG51bWJlciBvZiBkb20gZWxlbWVudHMgdGhhdCBjYW4gYmUgcmVuZGVyZWQgaW4gMSBnb1xuXG5cdFx0dGhpcy52RG9tV2luZG93QnVmZmVyID0gMDsgLy93aW5kb3cgcm93IGJ1ZmZlciBiZWZvcmUgcmVtb3ZpbmcgZWxlbWVudHMsIHRvIHNtb290aCBzY3JvbGxpbmdcblxuXHRcdHRoaXMudkRvbVdpbmRvd01pblRvdGFsUm93cyA9IDIwOyAvL21pbmltdW0gbnVtYmVyIG9mIHJvd3MgdG8gYmUgZ2VuZXJhdGVkIGluIHZpcnR1YWwgZG9tIChwcmV2ZW50IGJ1ZmZlcmluZyBpc3N1ZXMgb24gdGFibGVzIHdpdGggdGFsbCByb3dzKVxuXHRcdHRoaXMudkRvbVdpbmRvd01pbk1hcmdpblJvd3MgPSA1OyAvL21pbmltdW0gbnVtYmVyIG9mIHJvd3MgdG8gYmUgZ2VuZXJhdGVkIGluIHZpcnR1YWwgZG9tIG1hcmdpblxuXG5cdFx0dGhpcy52RG9tVG9wTmV3Um93cyA9IFtdOyAvL3Jvd3MgdG8gbm9ybWFsaXplIGFmdGVyIGFwcGVuZGluZyB0byBvcHRpbWl6ZSByZW5kZXIgc3BlZWRcblx0XHR0aGlzLnZEb21Cb3R0b21OZXdSb3dzID0gW107IC8vcm93cyB0byBub3JtYWxpemUgYWZ0ZXIgYXBwZW5kaW5nIHRvIG9wdGltaXplIHJlbmRlciBzcGVlZFxuXHR9XG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vIFB1YmxpYyBGdW5jdGlvbnMgLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXHRjbGVhclJvd3MoKXtcblx0XHR2YXIgZWxlbWVudCA9IHRoaXMudGFibGVFbGVtZW50O1xuXG5cdFx0Ly8gZWxlbWVudC5jaGlsZHJlbi5kZXRhY2goKTtcblx0XHR3aGlsZShlbGVtZW50LmZpcnN0Q2hpbGQpIGVsZW1lbnQucmVtb3ZlQ2hpbGQoZWxlbWVudC5maXJzdENoaWxkKTtcblxuXHRcdGVsZW1lbnQuc3R5bGUucGFkZGluZ1RvcCA9IFwiXCI7XG5cdFx0ZWxlbWVudC5zdHlsZS5wYWRkaW5nQm90dG9tID0gXCJcIjtcblx0XHRlbGVtZW50LnN0eWxlLm1pbkhlaWdodCA9IFwiXCI7XG5cdFx0ZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRlbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSBcIlwiO1xuXG5cdFx0dGhpcy5lbGVtZW50VmVydGljYWwuc2Nyb2xsVG9wID0gMDtcblx0XHR0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxMZWZ0ID0gMDtcblxuXHRcdHRoaXMuc2Nyb2xsVG9wID0gMDtcblx0XHR0aGlzLnNjcm9sbExlZnQgPSAwO1xuXG5cdFx0dGhpcy52RG9tVG9wID0gMDtcblx0XHR0aGlzLnZEb21Cb3R0b20gPSAwO1xuXHRcdHRoaXMudkRvbVRvcFBhZCA9IDA7XG5cdFx0dGhpcy52RG9tQm90dG9tUGFkID0gMDtcblx0XHR0aGlzLnZEb21TY3JvbGxQb3NUb3AgPSAwO1xuXHRcdHRoaXMudkRvbVNjcm9sbFBvc0JvdHRvbSA9IDA7XG5cdH1cblxuXHRyZW5kZXJSb3dzKCl7XG5cdFx0dGhpcy5fdmlydHVhbFJlbmRlckZpbGwoKTtcblx0fVxuXG5cdHJlcmVuZGVyUm93cyhjYWxsYmFjayl7XG5cdFx0dmFyIHNjcm9sbFRvcCA9IHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbFRvcDtcblx0XHR2YXIgdG9wUm93ID0gZmFsc2U7XG5cdFx0dmFyIHRvcE9mZnNldCA9IGZhbHNlO1xuXG5cdFx0dmFyIGxlZnQgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuc2Nyb2xsTGVmdDtcblxuXHRcdHZhciByb3dzID0gdGhpcy5yb3dzKCk7XG5cblx0XHRmb3IodmFyIGkgPSB0aGlzLnZEb21Ub3A7IGkgPD0gdGhpcy52RG9tQm90dG9tOyBpKyspe1xuXG5cdFx0XHRpZihyb3dzW2ldKXtcblx0XHRcdFx0dmFyIGRpZmYgPSBzY3JvbGxUb3AgLSByb3dzW2ldLmdldEVsZW1lbnQoKS5vZmZzZXRUb3A7XG5cblx0XHRcdFx0aWYodG9wT2Zmc2V0ID09PSBmYWxzZSB8fCBNYXRoLmFicyhkaWZmKSA8IHRvcE9mZnNldCl7XG5cdFx0XHRcdFx0dG9wT2Zmc2V0ID0gZGlmZjtcblx0XHRcdFx0XHR0b3BSb3cgPSBpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyb3dzLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0cm93LmRlaW5pdGlhbGl6ZUhlaWdodCgpO1xuXHRcdH0pO1xuXG5cdFx0aWYoY2FsbGJhY2spe1xuXHRcdFx0Y2FsbGJhY2soKTtcblx0XHR9XG5cblx0XHRpZih0aGlzLnJvd3MoKS5sZW5ndGgpe1xuXHRcdFx0dGhpcy5fdmlydHVhbFJlbmRlckZpbGwoKHRvcFJvdyA9PT0gZmFsc2UgPyB0aGlzLnJvd3MubGVuZ3RoIC0gMSA6IHRvcFJvdyksIHRydWUsIHRvcE9mZnNldCB8fCAwKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLmNsZWFyKCk7XG5cdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIudGFibGVFbXB0eSgpO1xuXHRcdH1cblxuXHRcdHRoaXMuc2Nyb2xsQ29sdW1ucyhsZWZ0KTtcblx0fVxuXG5cdHNjcm9sbENvbHVtbnMobGVmdCl7XG5cdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnNjcm9sbEhvcml6b250YWwobGVmdCk7XG5cdH1cblxuXHRzY3JvbGxSb3dzKHRvcCwgZGlyKXtcblx0XHR2YXIgdG9wRGlmZiA9IHRvcCAtIHRoaXMudkRvbVNjcm9sbFBvc1RvcDtcblx0XHR2YXIgYm90dG9tRGlmZiA9IHRvcCAtIHRoaXMudkRvbVNjcm9sbFBvc0JvdHRvbTtcblx0XHR2YXIgbWFyZ2luID0gdGhpcy52RG9tV2luZG93QnVmZmVyICogMjtcblx0XHR2YXIgcm93cyA9IHRoaXMucm93cygpO1xuXG5cdFx0dGhpcy5zY3JvbGxUb3AgPSB0b3A7XG5cblx0XHRpZigtdG9wRGlmZiA+IG1hcmdpbiB8fCBib3R0b21EaWZmID4gbWFyZ2luKXtcblx0XHRcdC8vaWYgYmlnIHNjcm9sbCByZWRyYXcgdGFibGU7XG5cdFx0XHR2YXIgbGVmdCA9IHRoaXMudGFibGUucm93TWFuYWdlci5zY3JvbGxMZWZ0O1xuXHRcdFx0dGhpcy5fdmlydHVhbFJlbmRlckZpbGwoTWF0aC5mbG9vcigodGhpcy5lbGVtZW50VmVydGljYWwuc2Nyb2xsVG9wIC8gdGhpcy5lbGVtZW50VmVydGljYWwuc2Nyb2xsSGVpZ2h0KSAqIHJvd3MubGVuZ3RoKSk7XG5cdFx0XHR0aGlzLnNjcm9sbENvbHVtbnMobGVmdCk7XG5cdFx0fWVsc2Uge1xuXG5cdFx0XHRpZihkaXIpe1xuXHRcdFx0XHQvL3Njcm9sbGluZyB1cFxuXHRcdFx0XHRpZih0b3BEaWZmIDwgMCl7XG5cdFx0XHRcdFx0dGhpcy5fYWRkVG9wUm93KHJvd3MsIC10b3BEaWZmKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmKGJvdHRvbURpZmYgPCAwKXtcblx0XHRcdFx0XHQvL2hpZGUgYm90dG9tIHJvdyBpZiBuZWVkZWRcblx0XHRcdFx0XHRpZih0aGlzLnZEb21TY3JvbGxIZWlnaHQgLSB0aGlzLnNjcm9sbFRvcCA+IHRoaXMudkRvbVdpbmRvd0J1ZmZlcil7XG5cdFx0XHRcdFx0XHR0aGlzLl9yZW1vdmVCb3R0b21Sb3cocm93cywgLWJvdHRvbURpZmYpO1xuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdHRoaXMudkRvbVNjcm9sbFBvc0JvdHRvbSA9IHRoaXMuc2Nyb2xsVG9wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fWVsc2Uge1xuXG5cdFx0XHRcdGlmKGJvdHRvbURpZmYgPj0gMCl7XG5cdFx0XHRcdFx0dGhpcy5fYWRkQm90dG9tUm93KHJvd3MsIGJvdHRvbURpZmYpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly9zY3JvbGxpbmcgZG93blxuXHRcdFx0XHRpZih0b3BEaWZmID49IDApe1xuXHRcdFx0XHRcdC8vaGlkZSB0b3Agcm93IGlmIG5lZWRlZFxuXHRcdFx0XHRcdGlmKHRoaXMuc2Nyb2xsVG9wID4gdGhpcy52RG9tV2luZG93QnVmZmVyKXtcblx0XHRcdFx0XHRcdHRoaXMuX3JlbW92ZVRvcFJvdyhyb3dzLCB0b3BEaWZmKTtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHR0aGlzLnZEb21TY3JvbGxQb3NUb3AgPSB0aGlzLnNjcm9sbFRvcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXNpemUoKXtcblx0XHR0aGlzLnZEb21XaW5kb3dCdWZmZXIgPSB0aGlzLnRhYmxlLm9wdGlvbnMucmVuZGVyVmVydGljYWxCdWZmZXIgfHwgdGhpcy5lbGVtZW50VmVydGljYWwuY2xpZW50SGVpZ2h0O1xuXHR9XG5cblx0c2Nyb2xsVG9Sb3dOZWFyZXN0VG9wKHJvdyl7XG5cdFx0dmFyIHJvd0luZGV4ID0gdGhpcy5yb3dzKCkuaW5kZXhPZihyb3cpO1xuXG5cdFx0cmV0dXJuICEoTWF0aC5hYnModGhpcy52RG9tVG9wIC0gcm93SW5kZXgpID4gTWF0aC5hYnModGhpcy52RG9tQm90dG9tIC0gcm93SW5kZXgpKTtcblx0fVxuXG5cdHNjcm9sbFRvUm93KHJvdyl7XG5cdFx0dmFyIGluZGV4ID0gdGhpcy5yb3dzKCkuaW5kZXhPZihyb3cpO1xuXG5cdFx0aWYoaW5kZXggPiAtMSl7XG5cdFx0XHR0aGlzLl92aXJ0dWFsUmVuZGVyRmlsbChpbmRleCwgdHJ1ZSk7XG5cdFx0fVxuXHR9XG5cblx0dmlzaWJsZVJvd3MoaW5jbHVkaW5nQnVmZmVyKXtcblx0XHR2YXIgdG9wRWRnZSA9IHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbFRvcCxcblx0XHRib3R0b21FZGdlID0gdGhpcy5lbGVtZW50VmVydGljYWwuY2xpZW50SGVpZ2h0ICsgdG9wRWRnZSxcblx0XHR0b3BGb3VuZCA9IGZhbHNlLFxuXHRcdHRvcFJvdyA9IDAsXG5cdFx0Ym90dG9tUm93ID0gMCxcblx0XHRyb3dzID0gdGhpcy5yb3dzKCk7XG5cblx0XHRpZihpbmNsdWRpbmdCdWZmZXIpe1xuXHRcdFx0dG9wUm93ID0gdGhpcy52RG9tVG9wO1xuXHRcdFx0Ym90dG9tUm93ID0gdGhpcy52RG9tQm90dG9tO1xuXHRcdH1lbHNlIHtcblx0XHRcdGZvcih2YXIgaSA9IHRoaXMudkRvbVRvcDsgaSA8PSB0aGlzLnZEb21Cb3R0b207IGkrKyl7XG5cdFx0XHRcdGlmKHJvd3NbaV0pe1xuXHRcdFx0XHRcdGlmKCF0b3BGb3VuZCl7XG5cdFx0XHRcdFx0XHRpZigodG9wRWRnZSAtIHJvd3NbaV0uZ2V0RWxlbWVudCgpLm9mZnNldFRvcCkgPj0gMCl7XG5cdFx0XHRcdFx0XHRcdHRvcFJvdyA9IGk7XG5cdFx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHRvcEZvdW5kID0gdHJ1ZTtcblxuXHRcdFx0XHRcdFx0XHRpZihib3R0b21FZGdlIC0gcm93c1tpXS5nZXRFbGVtZW50KCkub2Zmc2V0VG9wID49IDApe1xuXHRcdFx0XHRcdFx0XHRcdGJvdHRvbVJvdyA9IGk7XG5cdFx0XHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdGlmKGJvdHRvbUVkZ2UgLSByb3dzW2ldLmdldEVsZW1lbnQoKS5vZmZzZXRUb3AgPj0gMCl7XG5cdFx0XHRcdFx0XHRcdGJvdHRvbVJvdyA9IGk7XG5cdFx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByb3dzLnNsaWNlKHRvcFJvdywgYm90dG9tUm93ICsgMSk7XG5cdH1cblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLyBJbnRlcm5hbCBSZW5kZXJpbmcgLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdC8vZnVsbCB2aXJ0dWFsIHJlbmRlclxuXHRfdmlydHVhbFJlbmRlckZpbGwocG9zaXRpb24sIGZvcmNlTW92ZSwgb2Zmc2V0KSB7XG5cdFx0dmFyXHRlbGVtZW50ID0gdGhpcy50YWJsZUVsZW1lbnQsXG5cdFx0aG9sZGVyID0gdGhpcy5lbGVtZW50VmVydGljYWwsXG5cdFx0dG9wUGFkID0gMCxcblx0XHRyb3dzSGVpZ2h0ID0gMCxcblx0XHRyb3dIZWlnaHQgPSAwLFxuXHRcdGhlaWdodE9jY3VwaWVkID0gMCxcblx0XHR0b3BQYWRIZWlnaHQgPSAwLFxuXHRcdGkgPSAwLFxuXHRcdHJvd3MgPSB0aGlzLnJvd3MoKSxcblx0XHRyb3dzQ291bnQgPSByb3dzLmxlbmd0aCxcblx0XHRpbmRleCA9IDAsXG5cdFx0cm93LFxuXHRcdHJvd0ZyYWdtZW50LFxuXHRcdHJlbmRlcmVkUm93cyA9IFtdLFxuXHRcdHRvdGFsUm93c1JlbmRlcmVkID0gMCxcblx0XHRyb3dzVG9SZW5kZXIgPSAwLFxuXHRcdGZpeGVkSGVpZ2h0ID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmZpeGVkSGVpZ2h0LFxuXHRcdGNvbnRhaW5lckhlaWdodCA9IHRoaXMuZWxlbWVudFZlcnRpY2FsLmNsaWVudEhlaWdodCwgXG5cdFx0YXZnUm93SGVpZ2h0ID0gdGhpcy50YWJsZS5vcHRpb25zLnJvd0hlaWdodCwgXG5cdFx0cmVzaXplZCA9IHRydWU7XG5cblx0XHRwb3NpdGlvbiA9IHBvc2l0aW9uIHx8IDA7XG5cblx0XHRvZmZzZXQgPSBvZmZzZXQgfHwgMDtcblxuXHRcdGlmKCFwb3NpdGlvbil7XG5cdFx0XHR0aGlzLmNsZWFyKCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0d2hpbGUoZWxlbWVudC5maXJzdENoaWxkKSBlbGVtZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQuZmlyc3RDaGlsZCk7XG5cblx0XHRcdC8vY2hlY2sgaWYgcG9zaXRpb24gaXMgdG9vIGNsb3NlIHRvIGJvdHRvbSBvZiB0YWJsZVxuXHRcdFx0aGVpZ2h0T2NjdXBpZWQgPSAocm93c0NvdW50IC0gcG9zaXRpb24gKyAxKSAqIHRoaXMudkRvbVJvd0hlaWdodDtcblxuXHRcdFx0aWYoaGVpZ2h0T2NjdXBpZWQgPCBjb250YWluZXJIZWlnaHQpe1xuXHRcdFx0XHRwb3NpdGlvbiAtPSBNYXRoLmNlaWwoKGNvbnRhaW5lckhlaWdodCAtIGhlaWdodE9jY3VwaWVkKSAvIHRoaXMudkRvbVJvd0hlaWdodCk7XG5cdFx0XHRcdGlmKHBvc2l0aW9uIDwgMCl7XG5cdFx0XHRcdFx0cG9zaXRpb24gPSAwO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vY2FsY3VsYXRlIGluaXRpYWwgcGFkXG5cdFx0XHR0b3BQYWQgPSBNYXRoLm1pbihNYXRoLm1heChNYXRoLmZsb29yKHRoaXMudkRvbVdpbmRvd0J1ZmZlciAvIHRoaXMudkRvbVJvd0hlaWdodCksICB0aGlzLnZEb21XaW5kb3dNaW5NYXJnaW5Sb3dzKSwgcG9zaXRpb24pO1xuXHRcdFx0cG9zaXRpb24gLT0gdG9wUGFkO1xuXHRcdH1cblxuXHRcdGlmKHJvd3NDb3VudCAmJiBIZWxwZXJzLmVsVmlzaWJsZSh0aGlzLmVsZW1lbnRWZXJ0aWNhbCkpe1xuXHRcdFx0dGhpcy52RG9tVG9wID0gcG9zaXRpb247XG5cdFx0XHR0aGlzLnZEb21Cb3R0b20gPSBwb3NpdGlvbiAtMTtcblxuXHRcdFx0aWYoZml4ZWRIZWlnaHQgfHwgdGhpcy50YWJsZS5vcHRpb25zLm1heEhlaWdodCkge1xuXHRcdFx0XHRpZihhdmdSb3dIZWlnaHQpIHtcblx0XHRcdFx0XHRyb3dzVG9SZW5kZXIgPSAoY29udGFpbmVySGVpZ2h0IC8gYXZnUm93SGVpZ2h0KSArICh0aGlzLnZEb21XaW5kb3dCdWZmZXIgLyBhdmdSb3dIZWlnaHQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJvd3NUb1JlbmRlciA9IE1hdGgubWF4KHRoaXMudkRvbVdpbmRvd01pblRvdGFsUm93cywgTWF0aC5jZWlsKHJvd3NUb1JlbmRlcikpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdHJvd3NUb1JlbmRlciA9IHJvd3NDb3VudDtcblx0XHRcdH1cblxuXHRcdFx0d2hpbGUoKChyb3dzVG9SZW5kZXIgPT0gcm93c0NvdW50IHx8IHJvd3NIZWlnaHQgPD0gY29udGFpbmVySGVpZ2h0ICsgdGhpcy52RG9tV2luZG93QnVmZmVyKSB8fCB0b3RhbFJvd3NSZW5kZXJlZCA8IHRoaXMudkRvbVdpbmRvd01pblRvdGFsUm93cykgJiYgdGhpcy52RG9tQm90dG9tIDwgcm93c0NvdW50IC0xKSB7XG5cdFx0XHRcdHJlbmRlcmVkUm93cyA9IFtdO1xuXHRcdFx0XHRyb3dGcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0XHR3aGlsZSAoKGkgPCByb3dzVG9SZW5kZXIpICYmIHRoaXMudkRvbUJvdHRvbSA8IHJvd3NDb3VudCAtMSkge1x0XG5cdFx0XHRcdFx0aW5kZXggPSB0aGlzLnZEb21Cb3R0b20gKyAxLFxuXHRcdFx0XHRcdHJvdyA9IHJvd3NbaW5kZXhdO1xuXG5cdFx0XHRcdFx0dGhpcy5zdHlsZVJvdyhyb3csIGluZGV4KTtcblxuXHRcdFx0XHRcdHJvdy5pbml0aWFsaXplKGZhbHNlLCB0cnVlKTtcblx0XHRcdFx0XHRpZighcm93LmhlaWdodEluaXRpYWxpemVkICYmICF0aGlzLnRhYmxlLm9wdGlvbnMucm93SGVpZ2h0KXtcblx0XHRcdFx0XHRcdHJvdy5jbGVhckNlbGxIZWlnaHQoKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyb3dGcmFnbWVudC5hcHBlbmRDaGlsZChyb3cuZ2V0RWxlbWVudCgpKTtcblx0XHRcdFx0XHRyZW5kZXJlZFJvd3MucHVzaChyb3cpO1xuXHRcdFx0XHRcdHRoaXMudkRvbUJvdHRvbSArKztcblx0XHRcdFx0XHRpKys7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZighcmVuZGVyZWRSb3dzLmxlbmd0aCl7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRlbGVtZW50LmFwcGVuZENoaWxkKHJvd0ZyYWdtZW50KTtcblx0XHRcdFx0XG5cdFx0XHRcdC8vIE5PVEU6IFRoZSBuZXh0IDMgbG9vcHMgYXJlIHNlcGFyYXRlIG9uIHB1cnBvc2Vcblx0XHRcdFx0Ly8gVGhpcyBpcyB0byBiYXRjaCB1cCB0aGUgZG9tIHdyaXRlcyBhbmQgcmVhZHMgd2hpY2ggZHJhc3RpY2FsbHkgaW1wcm92ZXMgcGVyZm9ybWFuY2UgXG5cblx0XHRcdFx0cmVuZGVyZWRSb3dzLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0XHRcdHJvdy5yZW5kZXJlZCgpO1xuXG5cdFx0XHRcdFx0aWYoIXJvdy5oZWlnaHRJbml0aWFsaXplZCkge1xuXHRcdFx0XHRcdFx0cm93LmNhbGNIZWlnaHQodHJ1ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRyZW5kZXJlZFJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRcdFx0aWYoIXJvdy5oZWlnaHRJbml0aWFsaXplZCkge1xuXHRcdFx0XHRcdFx0cm93LnNldENlbGxIZWlnaHQoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHJlbmRlcmVkUm93cy5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdFx0XHRyb3dIZWlnaHQgPSByb3cuZ2V0SGVpZ2h0KCk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYodG90YWxSb3dzUmVuZGVyZWQgPCB0b3BQYWQpe1xuXHRcdFx0XHRcdFx0dG9wUGFkSGVpZ2h0ICs9IHJvd0hlaWdodDtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRyb3dzSGVpZ2h0ICs9IHJvd0hlaWdodDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZihyb3dIZWlnaHQgPiB0aGlzLnZEb21XaW5kb3dCdWZmZXIpe1xuXHRcdFx0XHRcdFx0dGhpcy52RG9tV2luZG93QnVmZmVyID0gcm93SGVpZ2h0ICogMjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dG90YWxSb3dzUmVuZGVyZWQrKztcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0cmVzaXplZCA9IHRoaXMudGFibGUucm93TWFuYWdlci5hZGp1c3RUYWJsZVNpemUoKTtcblx0XHRcdFx0Y29udGFpbmVySGVpZ2h0ID0gdGhpcy5lbGVtZW50VmVydGljYWwuY2xpZW50SGVpZ2h0O1xuXHRcdFx0XHRpZihyZXNpemVkICYmIChmaXhlZEhlaWdodCB8fCB0aGlzLnRhYmxlLm9wdGlvbnMubWF4SGVpZ2h0KSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGF2Z1Jvd0hlaWdodCA9IHJvd3NIZWlnaHQgLyB0b3RhbFJvd3NSZW5kZXJlZDtcblx0XHRcdFx0XHRyb3dzVG9SZW5kZXIgPSBNYXRoLm1heCh0aGlzLnZEb21XaW5kb3dNaW5Ub3RhbFJvd3MsIE1hdGguY2VpbCgoY29udGFpbmVySGVpZ2h0IC8gYXZnUm93SGVpZ2h0KSArICh0aGlzLnZEb21XaW5kb3dCdWZmZXIgLyBhdmdSb3dIZWlnaHQpKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYoIXBvc2l0aW9uKXtcblx0XHRcdFx0dGhpcy52RG9tVG9wUGFkID0gMDtcblx0XHRcdFx0Ly9hZGp1c3Qgcm93IGhlaWdodCB0byBtYXRjaCBhdmVyYWdlIG9mIHJlbmRlcmVkIGVsZW1lbnRzXG5cdFx0XHRcdHRoaXMudkRvbVJvd0hlaWdodCA9IE1hdGguZmxvb3IoKHJvd3NIZWlnaHQgKyB0b3BQYWRIZWlnaHQpIC8gdG90YWxSb3dzUmVuZGVyZWQpO1xuXHRcdFx0XHR0aGlzLnZEb21Cb3R0b21QYWQgPSB0aGlzLnZEb21Sb3dIZWlnaHQgKiAocm93c0NvdW50IC0gdGhpcy52RG9tQm90dG9tIC0xKTtcblxuXHRcdFx0XHR0aGlzLnZEb21TY3JvbGxIZWlnaHQgPSB0b3BQYWRIZWlnaHQgKyByb3dzSGVpZ2h0ICsgdGhpcy52RG9tQm90dG9tUGFkIC0gY29udGFpbmVySGVpZ2h0O1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLnZEb21Ub3BQYWQgPSAhZm9yY2VNb3ZlID8gdGhpcy5zY3JvbGxUb3AgLSB0b3BQYWRIZWlnaHQgOiAodGhpcy52RG9tUm93SGVpZ2h0ICogdGhpcy52RG9tVG9wKSArIG9mZnNldDtcblx0XHRcdFx0dGhpcy52RG9tQm90dG9tUGFkID0gdGhpcy52RG9tQm90dG9tID09IHJvd3NDb3VudC0xID8gMCA6IE1hdGgubWF4KHRoaXMudkRvbVNjcm9sbEhlaWdodCAtIHRoaXMudkRvbVRvcFBhZCAtIHJvd3NIZWlnaHQgLSB0b3BQYWRIZWlnaHQsIDApO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRlbGVtZW50LnN0eWxlLnBhZGRpbmdUb3AgPSB0aGlzLnZEb21Ub3BQYWQrXCJweFwiO1xuXHRcdFx0ZWxlbWVudC5zdHlsZS5wYWRkaW5nQm90dG9tID0gdGhpcy52RG9tQm90dG9tUGFkK1wicHhcIjtcblxuXHRcdFx0aWYoZm9yY2VNb3ZlKXtcblx0XHRcdFx0dGhpcy5zY3JvbGxUb3AgPSB0aGlzLnZEb21Ub3BQYWQgKyAodG9wUGFkSGVpZ2h0KSArIG9mZnNldCAtICh0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxXaWR0aCA+IHRoaXMuZWxlbWVudFZlcnRpY2FsLmNsaWVudFdpZHRoID8gdGhpcy5lbGVtZW50VmVydGljYWwub2Zmc2V0SGVpZ2h0IC0gY29udGFpbmVySGVpZ2h0IDogMCk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuc2Nyb2xsVG9wID0gTWF0aC5taW4odGhpcy5zY3JvbGxUb3AsIHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbEhlaWdodCAtIGNvbnRhaW5lckhlaWdodCk7XG5cblx0XHRcdC8vYWRqdXN0IGZvciBob3Jpem9udGFsIHNjcm9sbGJhciBpZiBwcmVzZW50IChhbmQgbm90IGF0IHRvcCBvZiB0YWJsZSlcblx0XHRcdGlmKHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbFdpZHRoID4gdGhpcy5lbGVtZW50VmVydGljYWwuY2xpZW50V2lkdGggJiYgZm9yY2VNb3ZlKXtcblx0XHRcdFx0dGhpcy5zY3JvbGxUb3AgKz0gdGhpcy5lbGVtZW50VmVydGljYWwub2Zmc2V0SGVpZ2h0IC0gY29udGFpbmVySGVpZ2h0O1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnZEb21TY3JvbGxQb3NUb3AgPSB0aGlzLnNjcm9sbFRvcDtcblx0XHRcdHRoaXMudkRvbVNjcm9sbFBvc0JvdHRvbSA9IHRoaXMuc2Nyb2xsVG9wO1xuXG5cdFx0XHRob2xkZXIuc2Nyb2xsVG9wID0gdGhpcy5zY3JvbGxUb3A7XG5cblx0XHRcdHRoaXMuZGlzcGF0Y2goXCJyZW5kZXItdmlydHVhbC1maWxsXCIpO1xuXHRcdH1cblx0fVxuXG5cdF9hZGRUb3BSb3cocm93cywgZmlsbGFibGVTcGFjZSl7XG5cdFx0dmFyIHRhYmxlID0gdGhpcy50YWJsZUVsZW1lbnQsXG5cdFx0YWRkZWRSb3dzID0gW10sXG5cdFx0cGFkZGluZ0FkanVzdCA9IDAsXG5cdFx0aW5kZXggPSB0aGlzLnZEb21Ub3AgLTEsXG5cdFx0aSA9IDAsXG5cdFx0d29ya2luZyA9IHRydWU7XG5cblx0XHR3aGlsZSh3b3JraW5nKXtcblx0XHRcdGlmKHRoaXMudkRvbVRvcCl7XG5cdFx0XHRcdGxldCByb3cgPSByb3dzW2luZGV4XSxcblx0XHRcdFx0cm93SGVpZ2h0LCBpbml0aWFsaXplZDtcblxuXHRcdFx0XHRpZihyb3cgJiYgaSA8IHRoaXMudkRvbU1heFJlbmRlckNoYWluKXtcblx0XHRcdFx0XHRyb3dIZWlnaHQgPSByb3cuZ2V0SGVpZ2h0KCkgfHwgdGhpcy52RG9tUm93SGVpZ2h0O1xuXHRcdFx0XHRcdGluaXRpYWxpemVkID0gcm93LmluaXRpYWxpemVkO1xuXG5cdFx0XHRcdFx0aWYoZmlsbGFibGVTcGFjZSA+PSByb3dIZWlnaHQpe1xuXG5cdFx0XHRcdFx0XHR0aGlzLnN0eWxlUm93KHJvdywgaW5kZXgpO1xuXHRcdFx0XHRcdFx0dGFibGUuaW5zZXJ0QmVmb3JlKHJvdy5nZXRFbGVtZW50KCksIHRhYmxlLmZpcnN0Q2hpbGQpO1xuXG5cdFx0XHRcdFx0XHRpZighcm93LmluaXRpYWxpemVkIHx8ICFyb3cuaGVpZ2h0SW5pdGlhbGl6ZWQpe1xuXHRcdFx0XHRcdFx0XHRhZGRlZFJvd3MucHVzaChyb3cpO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRyb3cuaW5pdGlhbGl6ZSgpO1xuXG5cdFx0XHRcdFx0XHRpZighaW5pdGlhbGl6ZWQpe1xuXHRcdFx0XHRcdFx0XHRyb3dIZWlnaHQgPSByb3cuZ2V0RWxlbWVudCgpLm9mZnNldEhlaWdodDtcblxuXHRcdFx0XHRcdFx0XHRpZihyb3dIZWlnaHQgPiB0aGlzLnZEb21XaW5kb3dCdWZmZXIpe1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMudkRvbVdpbmRvd0J1ZmZlciA9IHJvd0hlaWdodCAqIDI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0ZmlsbGFibGVTcGFjZSAtPSByb3dIZWlnaHQ7XG5cdFx0XHRcdFx0XHRwYWRkaW5nQWRqdXN0ICs9IHJvd0hlaWdodDtcblxuXHRcdFx0XHRcdFx0dGhpcy52RG9tVG9wLS07XG5cdFx0XHRcdFx0XHRpbmRleC0tO1xuXHRcdFx0XHRcdFx0aSsrO1xuXG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0d29ya2luZyA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0d29ya2luZyA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0d29ya2luZyA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZvciAobGV0IHJvdyBvZiBhZGRlZFJvd3Mpe1xuXHRcdFx0cm93LmNsZWFyQ2VsbEhlaWdodCgpO1xuXHRcdH1cblxuXHRcdHRoaXMuX3F1aWNrTm9ybWFsaXplUm93SGVpZ2h0KGFkZGVkUm93cyk7XG5cblx0XHRpZihwYWRkaW5nQWRqdXN0KXtcblx0XHRcdHRoaXMudkRvbVRvcFBhZCAtPSBwYWRkaW5nQWRqdXN0O1xuXG5cdFx0XHRpZih0aGlzLnZEb21Ub3BQYWQgPCAwKXtcblx0XHRcdFx0dGhpcy52RG9tVG9wUGFkID0gaW5kZXggKiB0aGlzLnZEb21Sb3dIZWlnaHQ7XG5cdFx0XHR9XG5cblx0XHRcdGlmKGluZGV4IDwgMSl7XG5cdFx0XHRcdHRoaXMudkRvbVRvcFBhZCA9IDA7XG5cdFx0XHR9XG5cblx0XHRcdHRhYmxlLnN0eWxlLnBhZGRpbmdUb3AgPSB0aGlzLnZEb21Ub3BQYWQgKyBcInB4XCI7XG5cdFx0XHR0aGlzLnZEb21TY3JvbGxQb3NUb3AgLT0gcGFkZGluZ0FkanVzdDtcblx0XHR9XG5cdH1cblxuXHRfcmVtb3ZlVG9wUm93KHJvd3MsIGZpbGxhYmxlU3BhY2Upe1xuXHRcdHZhciByZW1vdmFibGVSb3dzID0gW10sXG5cdFx0cGFkZGluZ0FkanVzdCA9IDAsXG5cdFx0aSA9IDAsXG5cdFx0d29ya2luZyA9IHRydWU7XG5cblx0XHR3aGlsZSh3b3JraW5nKXtcblx0XHRcdGxldCByb3cgPSByb3dzW3RoaXMudkRvbVRvcF0sXG5cdFx0XHRyb3dIZWlnaHQ7XG5cblx0XHRcdGlmKHJvdyAmJiBpIDwgdGhpcy52RG9tTWF4UmVuZGVyQ2hhaW4pe1xuXHRcdFx0XHRyb3dIZWlnaHQgPSByb3cuZ2V0SGVpZ2h0KCkgfHwgdGhpcy52RG9tUm93SGVpZ2h0O1xuXG5cdFx0XHRcdGlmKGZpbGxhYmxlU3BhY2UgPj0gcm93SGVpZ2h0KXtcblx0XHRcdFx0XHR0aGlzLnZEb21Ub3ArKztcblxuXHRcdFx0XHRcdGZpbGxhYmxlU3BhY2UgLT0gcm93SGVpZ2h0O1xuXHRcdFx0XHRcdHBhZGRpbmdBZGp1c3QgKz0gcm93SGVpZ2h0O1xuXG5cdFx0XHRcdFx0cmVtb3ZhYmxlUm93cy5wdXNoKHJvdyk7XG5cdFx0XHRcdFx0aSsrO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0d29ya2luZyA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHdvcmtpbmcgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmb3IgKGxldCByb3cgb2YgcmVtb3ZhYmxlUm93cyl7XG5cdFx0XHRsZXQgcm93RWwgPSByb3cuZ2V0RWxlbWVudCgpO1xuXG5cdFx0XHRpZihyb3dFbC5wYXJlbnROb2RlKXtcblx0XHRcdFx0cm93RWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChyb3dFbCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYocGFkZGluZ0FkanVzdCl7XG5cdFx0XHR0aGlzLnZEb21Ub3BQYWQgKz0gcGFkZGluZ0FkanVzdDtcblx0XHRcdHRoaXMudGFibGVFbGVtZW50LnN0eWxlLnBhZGRpbmdUb3AgPSB0aGlzLnZEb21Ub3BQYWQgKyBcInB4XCI7XG5cdFx0XHR0aGlzLnZEb21TY3JvbGxQb3NUb3AgKz0gdGhpcy52RG9tVG9wID8gcGFkZGluZ0FkanVzdCA6IHBhZGRpbmdBZGp1c3QgKyB0aGlzLnZEb21XaW5kb3dCdWZmZXI7XG5cdFx0fVxuXHR9XG5cblx0X2FkZEJvdHRvbVJvdyhyb3dzLCBmaWxsYWJsZVNwYWNlKXtcblx0XHR2YXIgdGFibGUgPSB0aGlzLnRhYmxlRWxlbWVudCxcblx0XHRhZGRlZFJvd3MgPSBbXSxcblx0XHRwYWRkaW5nQWRqdXN0ID0gMCxcblx0XHRpbmRleCA9IHRoaXMudkRvbUJvdHRvbSArIDEsXG5cdFx0aSA9IDAsXG5cdFx0d29ya2luZyA9IHRydWU7XG5cblx0XHR3aGlsZSh3b3JraW5nKXtcblx0XHRcdGxldCByb3cgPSByb3dzW2luZGV4XSxcblx0XHRcdHJvd0hlaWdodCwgaW5pdGlhbGl6ZWQ7XG5cblx0XHRcdGlmKHJvdyAmJiBpIDwgdGhpcy52RG9tTWF4UmVuZGVyQ2hhaW4pe1xuXHRcdFx0XHRyb3dIZWlnaHQgPSByb3cuZ2V0SGVpZ2h0KCkgfHwgdGhpcy52RG9tUm93SGVpZ2h0O1xuXHRcdFx0XHRpbml0aWFsaXplZCA9IHJvdy5pbml0aWFsaXplZDtcblxuXHRcdFx0XHRpZihmaWxsYWJsZVNwYWNlID49IHJvd0hlaWdodCl7XG5cblx0XHRcdFx0XHR0aGlzLnN0eWxlUm93KHJvdywgaW5kZXgpO1xuXHRcdFx0XHRcdHRhYmxlLmFwcGVuZENoaWxkKHJvdy5nZXRFbGVtZW50KCkpO1xuXG5cdFx0XHRcdFx0aWYoIXJvdy5pbml0aWFsaXplZCB8fCAhcm93LmhlaWdodEluaXRpYWxpemVkKXtcblx0XHRcdFx0XHRcdGFkZGVkUm93cy5wdXNoKHJvdyk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cm93LmluaXRpYWxpemUoKTtcblxuXHRcdFx0XHRcdGlmKCFpbml0aWFsaXplZCl7XG5cdFx0XHRcdFx0XHRyb3dIZWlnaHQgPSByb3cuZ2V0RWxlbWVudCgpLm9mZnNldEhlaWdodDtcblxuXHRcdFx0XHRcdFx0aWYocm93SGVpZ2h0ID4gdGhpcy52RG9tV2luZG93QnVmZmVyKXtcblx0XHRcdFx0XHRcdFx0dGhpcy52RG9tV2luZG93QnVmZmVyID0gcm93SGVpZ2h0ICogMjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRmaWxsYWJsZVNwYWNlIC09IHJvd0hlaWdodDtcblx0XHRcdFx0XHRwYWRkaW5nQWRqdXN0ICs9IHJvd0hlaWdodDtcblxuXHRcdFx0XHRcdHRoaXMudkRvbUJvdHRvbSsrO1xuXHRcdFx0XHRcdGluZGV4Kys7XG5cdFx0XHRcdFx0aSsrO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0d29ya2luZyA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHdvcmtpbmcgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmb3IgKGxldCByb3cgb2YgYWRkZWRSb3dzKXtcblx0XHRcdHJvdy5jbGVhckNlbGxIZWlnaHQoKTtcblx0XHR9XG5cblx0XHR0aGlzLl9xdWlja05vcm1hbGl6ZVJvd0hlaWdodChhZGRlZFJvd3MpO1xuXG5cdFx0aWYocGFkZGluZ0FkanVzdCl7XG5cdFx0XHR0aGlzLnZEb21Cb3R0b21QYWQgLT0gcGFkZGluZ0FkanVzdDtcblxuXHRcdFx0aWYodGhpcy52RG9tQm90dG9tUGFkIDwgMCB8fCBpbmRleCA9PSByb3dzLmxlbmd0aCAtMSl7XG5cdFx0XHRcdHRoaXMudkRvbUJvdHRvbVBhZCA9IDA7XG5cdFx0XHR9XG5cblx0XHRcdHRhYmxlLnN0eWxlLnBhZGRpbmdCb3R0b20gPSB0aGlzLnZEb21Cb3R0b21QYWQgKyBcInB4XCI7XG5cdFx0XHR0aGlzLnZEb21TY3JvbGxQb3NCb3R0b20gKz0gcGFkZGluZ0FkanVzdDtcblx0XHR9XG5cdH1cblxuXHRfcmVtb3ZlQm90dG9tUm93KHJvd3MsIGZpbGxhYmxlU3BhY2Upe1xuXHRcdHZhciByZW1vdmFibGVSb3dzID0gW10sXG5cdFx0cGFkZGluZ0FkanVzdCA9IDAsXG5cdFx0aSA9IDAsXG5cdFx0d29ya2luZyA9IHRydWU7XG5cblx0XHR3aGlsZSh3b3JraW5nKXtcblx0XHRcdGxldCByb3cgPSByb3dzW3RoaXMudkRvbUJvdHRvbV0sXG5cdFx0XHRyb3dIZWlnaHQ7XG5cblx0XHRcdGlmKHJvdyAmJiBpIDwgdGhpcy52RG9tTWF4UmVuZGVyQ2hhaW4pe1xuXHRcdFx0XHRyb3dIZWlnaHQgPSByb3cuZ2V0SGVpZ2h0KCkgfHwgdGhpcy52RG9tUm93SGVpZ2h0O1xuXG5cdFx0XHRcdGlmKGZpbGxhYmxlU3BhY2UgPj0gcm93SGVpZ2h0KXtcblx0XHRcdFx0XHR0aGlzLnZEb21Cb3R0b20gLS07XG5cblx0XHRcdFx0XHRmaWxsYWJsZVNwYWNlIC09IHJvd0hlaWdodDtcblx0XHRcdFx0XHRwYWRkaW5nQWRqdXN0ICs9IHJvd0hlaWdodDtcblxuXHRcdFx0XHRcdHJlbW92YWJsZVJvd3MucHVzaChyb3cpO1xuXHRcdFx0XHRcdGkrKztcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHdvcmtpbmcgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR3b3JraW5nID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yIChsZXQgcm93IG9mIHJlbW92YWJsZVJvd3Mpe1xuXHRcdFx0bGV0IHJvd0VsID0gcm93LmdldEVsZW1lbnQoKTtcblxuXHRcdFx0aWYocm93RWwucGFyZW50Tm9kZSl7XG5cdFx0XHRcdHJvd0VsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocm93RWwpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmKHBhZGRpbmdBZGp1c3Qpe1xuXHRcdFx0dGhpcy52RG9tQm90dG9tUGFkICs9IHBhZGRpbmdBZGp1c3Q7XG5cblx0XHRcdGlmKHRoaXMudkRvbUJvdHRvbVBhZCA8IDApe1xuXHRcdFx0XHR0aGlzLnZEb21Cb3R0b21QYWQgPSAwO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnRhYmxlRWxlbWVudC5zdHlsZS5wYWRkaW5nQm90dG9tID0gdGhpcy52RG9tQm90dG9tUGFkICsgXCJweFwiO1xuXHRcdFx0dGhpcy52RG9tU2Nyb2xsUG9zQm90dG9tIC09IHBhZGRpbmdBZGp1c3Q7XG5cdFx0fVxuXHR9XG5cblx0X3F1aWNrTm9ybWFsaXplUm93SGVpZ2h0KHJvd3Mpe1xuXHRcdGZvcihsZXQgcm93IG9mIHJvd3Mpe1xuXHRcdFx0cm93LmNhbGNIZWlnaHQoKTtcblx0XHR9XG5cblx0XHRmb3IobGV0IHJvdyBvZiByb3dzKXtcblx0XHRcdHJvdy5zZXRDZWxsSGVpZ2h0KCk7XG5cdFx0fVxuXHR9XG59XG5cbmNsYXNzIFJvd01hbmFnZXIgZXh0ZW5kcyBDb3JlRmVhdHVyZXtcblx0XG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cdFx0XG5cdFx0dGhpcy5lbGVtZW50ID0gdGhpcy5jcmVhdGVIb2xkZXJFbGVtZW50KCk7IC8vY29udGFpbmluZyBlbGVtZW50XG5cdFx0dGhpcy50YWJsZUVsZW1lbnQgPSB0aGlzLmNyZWF0ZVRhYmxlRWxlbWVudCgpOyAvL3RhYmxlIGVsZW1lbnRcblx0XHR0aGlzLmhlaWdodEZpeGVyID0gdGhpcy5jcmVhdGVUYWJsZUVsZW1lbnQoKTsgLy90YWJsZSBlbGVtZW50XG5cdFx0dGhpcy5wbGFjZWhvbGRlciA9IG51bGw7IC8vcGxhY2Vob2xkZXIgZWxlbWVudFxuXHRcdHRoaXMucGxhY2Vob2xkZXJDb250ZW50cyA9IG51bGw7IC8vcGxhY2Vob2xkZXIgZWxlbWVudFxuXHRcdFxuXHRcdHRoaXMuZmlyc3RSZW5kZXIgPSBmYWxzZTsgLy9oYW5kbGUgZmlyc3QgcmVuZGVyXG5cdFx0dGhpcy5yZW5kZXJNb2RlID0gXCJ2aXJ0dWFsXCI7IC8vY3VycmVudCByZW5kZXJpbmcgbW9kZVxuXHRcdHRoaXMuZml4ZWRIZWlnaHQgPSBmYWxzZTsgLy9jdXJyZW50IHJlbmRlcmluZyBtb2RlXG5cdFx0XG5cdFx0dGhpcy5yb3dzID0gW107IC8vaG9sZCByb3cgZGF0YSBvYmplY3RzXG5cdFx0dGhpcy5hY3RpdmVSb3dzUGlwZWxpbmUgPSBbXTsgLy9ob2xkIGNhbGN1bGF0aW9uIG9mIGFjdGl2ZSByb3dzXG5cdFx0dGhpcy5hY3RpdmVSb3dzID0gW107IC8vcm93cyBjdXJyZW50bHkgYXZhaWxhYmxlIHRvIG9uIGRpc3BsYXkgaW4gdGhlIHRhYmxlXG5cdFx0dGhpcy5hY3RpdmVSb3dzQ291bnQgPSAwOyAvL2NvdW50IG9mIGFjdGl2ZSByb3dzXG5cdFx0XG5cdFx0dGhpcy5kaXNwbGF5Um93cyA9IFtdOyAvL3Jvd3MgY3VycmVudGx5IG9uIGRpc3BsYXkgaW4gdGhlIHRhYmxlXG5cdFx0dGhpcy5kaXNwbGF5Um93c0NvdW50ID0gMDsgLy9jb3VudCBvZiBkaXNwbGF5IHJvd3Ncblx0XHRcblx0XHR0aGlzLnNjcm9sbFRvcCA9IDA7XG5cdFx0dGhpcy5zY3JvbGxMZWZ0ID0gMDtcblx0XHRcblx0XHR0aGlzLnJlZHJhd0Jsb2NrID0gZmFsc2U7IC8vcHJldmVudCByZWRyYXdzIHRvIGFsbG93IG11bHRpcGxlIGRhdGEgbWFuaXB1bGF0aW9ucyBiZWZvcmUgY29udGludWluZ1xuXHRcdHRoaXMucmVkcmF3QmxvY2tSZXN0b3JlQ29uZmlnID0gZmFsc2U7IC8vc3RvcmUgbGF0ZXN0IHJlZHJhdyBmdW5jdGlvbiBjYWxscyBmb3Igd2hlbiByZWRyYXcgaXMgbmVlZGVkXG5cdFx0dGhpcy5yZWRyYXdCbG9ja1JlbmRlckluUG9zaXRpb24gPSBmYWxzZTsgLy9zdG9yZSBsYXRlc3QgcmVkcmF3IGZ1bmN0aW9uIGNhbGxzIGZvciB3aGVuIHJlZHJhdyBpcyBuZWVkZWRcblx0XHRcblx0XHR0aGlzLmRhdGFQaXBlbGluZSA9IFtdOyAvL2hvbGQgZGF0YSBwaXBlbGluZSB0YXNrc1xuXHRcdHRoaXMuZGlzcGxheVBpcGVsaW5lID0gW107IC8vaG9sZCBkYXRhIGRpc3BsYXkgcGlwZWxpbmUgdGFza3Ncblx0XHRcblx0XHR0aGlzLnNjcm9sbGJhcldpZHRoID0gMDtcblx0XHRcblx0XHR0aGlzLnJlbmRlcmVyID0gbnVsbDtcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLyBTZXR1cCBGdW5jdGlvbnMgLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdGNyZWF0ZUhvbGRlckVsZW1lbnQgKCl7XG5cdFx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcblx0XHRlbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXRhYmxlaG9sZGVyXCIpO1xuXHRcdGVsLnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsIDApO1xuXHRcdC8vIGVsLnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJyb3dncm91cFwiKTtcblx0XHRcblx0XHRyZXR1cm4gZWw7XG5cdH1cblx0XG5cdGNyZWF0ZVRhYmxlRWxlbWVudCAoKXtcblx0XHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdFxuXHRcdGVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItdGFibGVcIik7XG5cdFx0ZWwuc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcInJvd2dyb3VwXCIpO1xuXHRcdFxuXHRcdHJldHVybiBlbDtcblx0fVxuXHRcblx0aW5pdGlhbGl6ZVBsYWNlaG9sZGVyKCl7XG5cdFx0dmFyIHBsYWNlaG9sZGVyID0gdGhpcy50YWJsZS5vcHRpb25zLnBsYWNlaG9sZGVyO1xuXHRcdFxuXHRcdGlmKHR5cGVvZiBwbGFjZWhvbGRlciA9PT0gXCJmdW5jdGlvblwiKXtcblx0XHRcdHBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXIuY2FsbCh0aGlzLnRhYmxlKTtcblx0XHR9XG5cdFx0XG5cdFx0cGxhY2Vob2xkZXIgPSB0aGlzLmNoYWluKFwicGxhY2Vob2xkZXJcIiwgW3BsYWNlaG9sZGVyXSwgcGxhY2Vob2xkZXIsIHBsYWNlaG9sZGVyKSB8fCBwbGFjZWhvbGRlcjtcblx0XHRcblx0XHQvL2NvbmZpZ3VyZSBwbGFjZWhvbGRlciBlbGVtZW50XG5cdFx0aWYocGxhY2Vob2xkZXIpe1x0XG5cdFx0XHRsZXQgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdFx0ZWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1wbGFjZWhvbGRlclwiKTtcblx0XHRcdFxuXHRcdFx0aWYodHlwZW9mIHBsYWNlaG9sZGVyID09IFwic3RyaW5nXCIpe1xuXHRcdFx0XHRsZXQgY29udGVudHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdFx0XHRjb250ZW50cy5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXBsYWNlaG9sZGVyLWNvbnRlbnRzXCIpO1xuXHRcdFx0XHRjb250ZW50cy5pbm5lckhUTUwgPSBwbGFjZWhvbGRlcjtcblx0XHRcdFx0XG5cdFx0XHRcdGVsLmFwcGVuZENoaWxkKGNvbnRlbnRzKTtcblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMucGxhY2Vob2xkZXJDb250ZW50cyA9IGNvbnRlbnRzO1xuXHRcdFx0XHRcblx0XHRcdH1lbHNlIGlmKHR5cGVvZiBIVE1MRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBwbGFjZWhvbGRlciBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KXtcblx0XHRcdFx0XG5cdFx0XHRcdGVsLmFwcGVuZENoaWxkKHBsYWNlaG9sZGVyKTtcblx0XHRcdFx0dGhpcy5wbGFjZWhvbGRlckNvbnRlbnRzID0gcGxhY2Vob2xkZXI7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIkludmFsaWQgcGxhY2Vob2xkZXIgcHJvdmlkZWQsIG11c3QgYmUgc3RyaW5nIG9yIEhUTUwgRWxlbWVudFwiLCBwbGFjZWhvbGRlcik7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLmVsID0gbnVsbDtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5wbGFjZWhvbGRlciA9IGVsO1xuXHRcdH1cblx0fVxuXHRcblx0Ly9yZXR1cm4gY29udGFpbmluZyBlbGVtZW50XG5cdGdldEVsZW1lbnQoKXtcblx0XHRyZXR1cm4gdGhpcy5lbGVtZW50O1xuXHR9XG5cdFxuXHQvL3JldHVybiB0YWJsZSBlbGVtZW50XG5cdGdldFRhYmxlRWxlbWVudCgpe1xuXHRcdHJldHVybiB0aGlzLnRhYmxlRWxlbWVudDtcblx0fVxuXHRcblx0aW5pdGlhbGl6ZSgpe1xuXHRcdHRoaXMuaW5pdGlhbGl6ZVBsYWNlaG9sZGVyKCk7XG5cdFx0dGhpcy5pbml0aWFsaXplUmVuZGVyZXIoKTtcblx0XHRcblx0XHQvL2luaXRpYWxpemUgbWFuYWdlclxuXHRcdHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLnRhYmxlRWxlbWVudCk7XG5cdFx0XG5cdFx0dGhpcy5maXJzdFJlbmRlciA9IHRydWU7XG5cdFx0XG5cdFx0Ly9zY3JvbGwgaGVhZGVyIGFsb25nIHdpdGggdGFibGUgYm9keVxuXHRcdHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsICgpID0+IHtcblx0XHRcdHZhciBsZWZ0ID0gdGhpcy5lbGVtZW50LnNjcm9sbExlZnQsXG5cdFx0XHRsZWZ0RGlyID0gdGhpcy5zY3JvbGxMZWZ0ID4gbGVmdCxcblx0XHRcdHRvcCA9IHRoaXMuZWxlbWVudC5zY3JvbGxUb3AsXG5cdFx0XHR0b3BEaXIgPSB0aGlzLnNjcm9sbFRvcCA+IHRvcDtcblx0XHRcdFxuXHRcdFx0Ly9oYW5kbGUgaG9yaXpvbnRhbCBzY3JvbGxpbmdcblx0XHRcdGlmKHRoaXMuc2Nyb2xsTGVmdCAhPSBsZWZ0KXtcblx0XHRcdFx0dGhpcy5zY3JvbGxMZWZ0ID0gbGVmdDtcblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMuZGlzcGF0Y2goXCJzY3JvbGwtaG9yaXpvbnRhbFwiLCBsZWZ0LCBsZWZ0RGlyKTtcblx0XHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwic2Nyb2xsSG9yaXpvbnRhbFwiLCBsZWZ0LCBsZWZ0RGlyKTtcblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMuX3Bvc2l0aW9uUGxhY2Vob2xkZXIoKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Ly9oYW5kbGUgdmVydGljYWwgc2Nyb2xsaW5nXG5cdFx0XHRpZih0aGlzLnNjcm9sbFRvcCAhPSB0b3Ape1xuXHRcdFx0XHR0aGlzLnNjcm9sbFRvcCA9IHRvcDtcblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMucmVuZGVyZXIuc2Nyb2xsUm93cyh0b3AsIHRvcERpcik7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLmRpc3BhdGNoKFwic2Nyb2xsLXZlcnRpY2FsXCIsIHRvcCwgdG9wRGlyKTtcblx0XHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwic2Nyb2xsVmVydGljYWxcIiwgdG9wLCB0b3BEaXIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8gUm93IE1hbmlwdWxhdGlvbiAvLy8vLy8vLy8vLy8vLy8vLy9cblx0ZmluZFJvdyhzdWJqZWN0KXtcblx0XHRpZih0eXBlb2Ygc3ViamVjdCA9PSBcIm9iamVjdFwiKXtcblx0XHRcdGlmKHN1YmplY3QgaW5zdGFuY2VvZiBSb3cpe1xuXHRcdFx0XHQvL3N1YmplY3QgaXMgcm93IGVsZW1lbnRcblx0XHRcdFx0cmV0dXJuIHN1YmplY3Q7XG5cdFx0XHR9ZWxzZSBpZihzdWJqZWN0IGluc3RhbmNlb2YgUm93Q29tcG9uZW50KXtcblx0XHRcdFx0Ly9zdWJqZWN0IGlzIHB1YmxpYyByb3cgY29tcG9uZW50XG5cdFx0XHRcdHJldHVybiBzdWJqZWN0Ll9nZXRTZWxmKCkgfHwgZmFsc2U7XG5cdFx0XHR9ZWxzZSBpZih0eXBlb2YgSFRNTEVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgc3ViamVjdCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KXtcblx0XHRcdFx0Ly9zdWJqZWN0IGlzIGEgSFRNTCBlbGVtZW50IG9mIHRoZSByb3dcblx0XHRcdFx0bGV0IG1hdGNoID0gdGhpcy5yb3dzLmZpbmQoKHJvdykgPT4ge1xuXHRcdFx0XHRcdHJldHVybiByb3cuZ2V0RWxlbWVudCgpID09PSBzdWJqZWN0O1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0XG5cdFx0XHRcdHJldHVybiBtYXRjaCB8fCBmYWxzZTtcblx0XHRcdH1lbHNlIGlmKHN1YmplY3QgPT09IG51bGwpe1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fWVsc2UgaWYodHlwZW9mIHN1YmplY3QgPT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Ly9zdWJqZWN0IHNob3VsZCBiZSB0cmVhdGVkIGFzIHRoZSBpbmRleCBvZiB0aGUgcm93XG5cdFx0XHRsZXQgbWF0Y2ggPSB0aGlzLnJvd3MuZmluZCgocm93KSA9PiB7XG5cdFx0XHRcdHJldHVybiByb3cuZGF0YVt0aGlzLnRhYmxlLm9wdGlvbnMuaW5kZXhdID09IHN1YmplY3Q7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0cmV0dXJuIG1hdGNoIHx8IGZhbHNlO1xuXHRcdH1cblx0XHRcblx0XHQvL2NhdGNoIGFsbCBmb3IgYW55IG90aGVyIHR5cGUgb2YgaW5wdXRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0XG5cdGdldFJvd0Zyb21EYXRhT2JqZWN0KGRhdGEpe1xuXHRcdHZhciBtYXRjaCA9IHRoaXMucm93cy5maW5kKChyb3cpID0+IHtcblx0XHRcdHJldHVybiByb3cuZGF0YSA9PT0gZGF0YTtcblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gbWF0Y2ggfHwgZmFsc2U7XG5cdH1cblx0XG5cdGdldFJvd0Zyb21Qb3NpdGlvbihwb3NpdGlvbil7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0RGlzcGxheVJvd3MoKS5maW5kKChyb3cpID0+IHtcblx0XHRcdHJldHVybiByb3cuZ2V0UG9zaXRpb24oKSA9PT0gcG9zaXRpb24gJiYgcm93LmlzRGlzcGxheWVkKCk7XG5cdFx0fSk7XG5cdH1cblx0XG5cdHNjcm9sbFRvUm93KHJvdywgcG9zaXRpb24sIGlmVmlzaWJsZSl7XG5cdFx0cmV0dXJuIHRoaXMucmVuZGVyZXIuc2Nyb2xsVG9Sb3dQb3NpdGlvbihyb3csIHBvc2l0aW9uLCBpZlZpc2libGUpO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8gRGF0YSBIYW5kbGluZyAvLy8vLy8vLy8vLy8vLy8vLy9cblx0c2V0RGF0YShkYXRhLCByZW5kZXJJblBvc2l0aW9uLCBjb2x1bW5zQ2hhbmdlZCl7XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpPT57XG5cdFx0XHRpZihyZW5kZXJJblBvc2l0aW9uICYmIHRoaXMuZ2V0RGlzcGxheVJvd3MoKS5sZW5ndGgpe1xuXHRcdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucGFnaW5hdGlvbil7XG5cdFx0XHRcdFx0dGhpcy5fc2V0RGF0YUFjdHVhbChkYXRhLCB0cnVlKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHRoaXMucmVSZW5kZXJJblBvc2l0aW9uKCgpID0+IHtcblx0XHRcdFx0XHRcdHRoaXMuX3NldERhdGFBY3R1YWwoZGF0YSk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmF1dG9Db2x1bW5zICYmIGNvbHVtbnNDaGFuZ2VkICYmIHRoaXMudGFibGUuaW5pdGlhbGl6ZWQpe1xuXHRcdFx0XHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5nZW5lcmF0ZUNvbHVtbnNGcm9tUm93RGF0YShkYXRhKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLnJlc2V0U2Nyb2xsKCk7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLl9zZXREYXRhQWN0dWFsKGRhdGEpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRyZXNvbHZlKCk7XG5cdFx0fSk7XG5cdH1cblx0XG5cdF9zZXREYXRhQWN0dWFsKGRhdGEsIHJlbmRlckluUG9zaXRpb24pe1xuXHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcImRhdGFQcm9jZXNzaW5nXCIsIGRhdGEpO1xuXHRcdFxuXHRcdHRoaXMuX3dpcGVFbGVtZW50cygpO1xuXHRcdFxuXHRcdGlmKEFycmF5LmlzQXJyYXkoZGF0YSkpe1xuXHRcdFx0dGhpcy5kaXNwYXRjaChcImRhdGEtcHJvY2Vzc2luZ1wiLCBkYXRhKTtcblx0XHRcdFxuXHRcdFx0ZGF0YS5mb3JFYWNoKChkZWYsIGkpID0+IHtcblx0XHRcdFx0aWYoZGVmICYmIHR5cGVvZiBkZWYgPT09IFwib2JqZWN0XCIpe1xuXHRcdFx0XHRcdHZhciByb3cgPSBuZXcgUm93KGRlZiwgdGhpcyk7XG5cdFx0XHRcdFx0dGhpcy5yb3dzLnB1c2gocm93KTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGNvbnNvbGUud2FybihcIkRhdGEgTG9hZGluZyBXYXJuaW5nIC0gSW52YWxpZCByb3cgZGF0YSBkZXRlY3RlZCBhbmQgaWdub3JlZCwgZXhwZWN0aW5nIG9iamVjdCBidXQgcmVjZWl2ZWQ6XCIsIGRlZik7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnJlZnJlc2hBY3RpdmVEYXRhKGZhbHNlLCBmYWxzZSwgcmVuZGVySW5Qb3NpdGlvbik7XG5cdFx0XHRcblx0XHRcdHRoaXMuZGlzcGF0Y2goXCJkYXRhLXByb2Nlc3NlZFwiLCBkYXRhKTtcblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcImRhdGFQcm9jZXNzZWRcIiwgZGF0YSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS5lcnJvcihcIkRhdGEgTG9hZGluZyBFcnJvciAtIFVuYWJsZSB0byBwcm9jZXNzIGRhdGEgZHVlIHRvIGludmFsaWQgZGF0YSB0eXBlIFxcbkV4cGVjdGluZzogYXJyYXkgXFxuUmVjZWl2ZWQ6IFwiLCB0eXBlb2YgZGF0YSwgXCJcXG5EYXRhOiAgICAgXCIsIGRhdGEpO1xuXHRcdH1cblx0fVxuXHRcblx0X3dpcGVFbGVtZW50cygpe1xuXHRcdHRoaXMuZGlzcGF0Y2goXCJyb3dzLXdpcGVcIik7XG5cdFx0XG5cdFx0dGhpcy5kZXN0cm95KCk7XG5cdFx0XG5cdFx0dGhpcy5hZGp1c3RUYWJsZVNpemUoKTtcblx0XHRcblx0XHR0aGlzLmRpc3BhdGNoKFwicm93cy13aXBlZFwiKTtcblx0fVxuXHRcblx0ZGVzdHJveSgpe1xuXHRcdHRoaXMucm93cy5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdHJvdy53aXBlKCk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0dGhpcy5yb3dzID0gW107XG5cdFx0dGhpcy5hY3RpdmVSb3dzID0gW107XG5cdFx0dGhpcy5hY3RpdmVSb3dzUGlwZWxpbmUgPSBbXTtcblx0XHR0aGlzLmFjdGl2ZVJvd3NDb3VudCA9IDA7XG5cdFx0dGhpcy5kaXNwbGF5Um93cyA9IFtdO1xuXHRcdHRoaXMuZGlzcGxheVJvd3NDb3VudCA9IDA7XG5cdH1cblx0XG5cdGRlbGV0ZVJvdyhyb3csIGJsb2NrUmVkcmF3KXtcblx0XHR2YXIgYWxsSW5kZXggPSB0aGlzLnJvd3MuaW5kZXhPZihyb3cpLFxuXHRcdGFjdGl2ZUluZGV4ID0gdGhpcy5hY3RpdmVSb3dzLmluZGV4T2Yocm93KTtcblx0XHRcblx0XHRpZihhY3RpdmVJbmRleCA+IC0xKXtcblx0XHRcdHRoaXMuYWN0aXZlUm93cy5zcGxpY2UoYWN0aXZlSW5kZXgsIDEpO1xuXHRcdH1cblx0XHRcblx0XHRpZihhbGxJbmRleCA+IC0xKXtcblx0XHRcdHRoaXMucm93cy5zcGxpY2UoYWxsSW5kZXgsIDEpO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLnNldEFjdGl2ZVJvd3ModGhpcy5hY3RpdmVSb3dzKTtcblx0XHRcblx0XHR0aGlzLmRpc3BsYXlSb3dJdGVyYXRvcigocm93cykgPT4ge1xuXHRcdFx0dmFyIGRpc3BsYXlJbmRleCA9IHJvd3MuaW5kZXhPZihyb3cpO1xuXHRcdFx0XG5cdFx0XHRpZihkaXNwbGF5SW5kZXggPiAtMSl7XG5cdFx0XHRcdHJvd3Muc3BsaWNlKGRpc3BsYXlJbmRleCwgMSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0aWYoIWJsb2NrUmVkcmF3KXtcblx0XHRcdHRoaXMucmVSZW5kZXJJblBvc2l0aW9uKCk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMucmVnZW5lcmF0ZVJvd1Bvc2l0aW9ucygpO1xuXHRcdFxuXHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInJvd0RlbGV0ZWRcIiwgcm93LmdldENvbXBvbmVudCgpKTtcblx0XHRcblx0XHRpZighdGhpcy5kaXNwbGF5Um93c0NvdW50KXtcblx0XHRcdHRoaXMudGFibGVFbXB0eSgpO1xuXHRcdH1cblx0XHRcblx0XHRpZih0aGlzLnN1YnNjcmliZWRFeHRlcm5hbChcImRhdGFDaGFuZ2VkXCIpKXtcblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcImRhdGFDaGFuZ2VkXCIsIHRoaXMuZ2V0RGF0YSgpKTtcblx0XHR9XG5cdH1cblx0XG5cdGFkZFJvdyhkYXRhLCBwb3MsIGluZGV4LCBibG9ja1JlZHJhdyl7XG5cdFx0dmFyIHJvdyA9IHRoaXMuYWRkUm93QWN0dWFsKGRhdGEsIHBvcywgaW5kZXgsIGJsb2NrUmVkcmF3KTtcblx0XHRyZXR1cm4gcm93O1xuXHR9XG5cdFxuXHQvL2FkZCBtdWx0aXBsZSByb3dzXG5cdGFkZFJvd3MoZGF0YSwgcG9zLCBpbmRleCwgcmVmcmVzaERpc3BsYXlPbmx5KXtcblx0XHR2YXIgcm93cyA9IFtdO1xuXHRcdFxuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHRwb3MgPSB0aGlzLmZpbmRBZGRSb3dQb3MocG9zKTtcblx0XHRcdFxuXHRcdFx0aWYoIUFycmF5LmlzQXJyYXkoZGF0YSkpe1xuXHRcdFx0XHRkYXRhID0gW2RhdGFdO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZigodHlwZW9mIGluZGV4ID09IFwidW5kZWZpbmVkXCIgJiYgcG9zKSB8fCAodHlwZW9mIGluZGV4ICE9PSBcInVuZGVmaW5lZFwiICYmICFwb3MpKXtcblx0XHRcdFx0ZGF0YS5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGRhdGEuZm9yRWFjaCgoaXRlbSwgaSkgPT4ge1xuXHRcdFx0XHR2YXIgcm93ID0gdGhpcy5hZGRSb3coaXRlbSwgcG9zLCBpbmRleCwgdHJ1ZSk7XG5cdFx0XHRcdHJvd3MucHVzaChyb3cpO1xuXHRcdFx0XHR0aGlzLmRpc3BhdGNoKFwicm93LWFkZGVkXCIsIHJvdywgaXRlbSwgcG9zLCBpbmRleCk7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0dGhpcy5yZWZyZXNoQWN0aXZlRGF0YShyZWZyZXNoRGlzcGxheU9ubHkgPyBcImRpc3BsYXlQaXBlbGluZVwiIDogZmFsc2UsIGZhbHNlLCB0cnVlKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5yZWdlbmVyYXRlUm93UG9zaXRpb25zKCk7XG5cdFx0XHRcblx0XHRcdGlmKHJvd3MubGVuZ3RoKXtcblx0XHRcdFx0dGhpcy5fY2xlYXJQbGFjZWhvbGRlcigpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRyZXNvbHZlKHJvd3MpO1xuXHRcdH0pO1xuXHR9XG5cdFxuXHRmaW5kQWRkUm93UG9zKHBvcyl7XG5cdFx0aWYodHlwZW9mIHBvcyA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRwb3MgPSB0aGlzLnRhYmxlLm9wdGlvbnMuYWRkUm93UG9zO1xuXHRcdH1cblx0XHRcblx0XHRpZihwb3MgPT09IFwicG9zXCIpe1xuXHRcdFx0cG9zID0gdHJ1ZTtcblx0XHR9XG5cdFx0XG5cdFx0aWYocG9zID09PSBcImJvdHRvbVwiKXtcblx0XHRcdHBvcyA9IGZhbHNlO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gcG9zO1xuXHR9XG5cdFxuXHRhZGRSb3dBY3R1YWwoZGF0YSwgcG9zLCBpbmRleCwgYmxvY2tSZWRyYXcpe1xuXHRcdHZhciByb3cgPSBkYXRhIGluc3RhbmNlb2YgUm93ID8gZGF0YSA6IG5ldyBSb3coZGF0YSB8fCB7fSwgdGhpcyksXG5cdFx0dG9wID0gdGhpcy5maW5kQWRkUm93UG9zKHBvcyksXG5cdFx0YWxsSW5kZXggPSAtMSxcblx0XHRhY3RpdmVJbmRleCwgY2hhaW5SZXN1bHQ7XG5cdFx0XG5cdFx0aWYoIWluZGV4KXtcblx0XHRcdGNoYWluUmVzdWx0ID0gdGhpcy5jaGFpbihcInJvdy1hZGRpbmctcG9zaXRpb25cIiwgW3JvdywgdG9wXSwgbnVsbCwge2luZGV4LCB0b3B9KTtcblx0XHRcdFxuXHRcdFx0aW5kZXggPSBjaGFpblJlc3VsdC5pbmRleDtcblx0XHRcdHRvcCA9IGNoYWluUmVzdWx0LnRvcDtcblx0XHR9XG5cdFx0XG5cdFx0aWYodHlwZW9mIGluZGV4ICE9PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdGluZGV4ID0gdGhpcy5maW5kUm93KGluZGV4KTtcblx0XHR9XG5cdFx0XG5cdFx0aW5kZXggPSB0aGlzLmNoYWluKFwicm93LWFkZGluZy1pbmRleFwiLCBbcm93LCBpbmRleCwgdG9wXSwgbnVsbCwgaW5kZXgpO1xuXHRcdFxuXHRcdGlmKGluZGV4KXtcblx0XHRcdGFsbEluZGV4ID0gdGhpcy5yb3dzLmluZGV4T2YoaW5kZXgpO1xuXHRcdH1cblx0XHRcblx0XHRpZihpbmRleCAmJiBhbGxJbmRleCA+IC0xKXtcblx0XHRcdGFjdGl2ZUluZGV4ID0gdGhpcy5hY3RpdmVSb3dzLmluZGV4T2YoaW5kZXgpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmRpc3BsYXlSb3dJdGVyYXRvcihmdW5jdGlvbihyb3dzKXtcblx0XHRcdFx0dmFyIGRpc3BsYXlJbmRleCA9IHJvd3MuaW5kZXhPZihpbmRleCk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihkaXNwbGF5SW5kZXggPiAtMSl7XG5cdFx0XHRcdFx0cm93cy5zcGxpY2UoKHRvcCA/IGRpc3BsYXlJbmRleCA6IGRpc3BsYXlJbmRleCArIDEpLCAwLCByb3cpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0aWYoYWN0aXZlSW5kZXggPiAtMSl7XG5cdFx0XHRcdHRoaXMuYWN0aXZlUm93cy5zcGxpY2UoKHRvcCA/IGFjdGl2ZUluZGV4IDogYWN0aXZlSW5kZXggKyAxKSwgMCwgcm93KTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5yb3dzLnNwbGljZSgodG9wID8gYWxsSW5kZXggOiBhbGxJbmRleCArIDEpLCAwLCByb3cpO1xuXHRcdFx0XG5cdFx0fWVsc2Uge1xuXHRcdFx0XG5cdFx0XHRpZih0b3Ape1xuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5kaXNwbGF5Um93SXRlcmF0b3IoZnVuY3Rpb24ocm93cyl7XG5cdFx0XHRcdFx0cm93cy51bnNoaWZ0KHJvdyk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5hY3RpdmVSb3dzLnVuc2hpZnQocm93KTtcblx0XHRcdFx0dGhpcy5yb3dzLnVuc2hpZnQocm93KTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5kaXNwbGF5Um93SXRlcmF0b3IoZnVuY3Rpb24ocm93cyl7XG5cdFx0XHRcdFx0cm93cy5wdXNoKHJvdyk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5hY3RpdmVSb3dzLnB1c2gocm93KTtcblx0XHRcdFx0dGhpcy5yb3dzLnB1c2gocm93KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5zZXRBY3RpdmVSb3dzKHRoaXMuYWN0aXZlUm93cyk7XG5cdFx0XG5cdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwicm93QWRkZWRcIiwgcm93LmdldENvbXBvbmVudCgpKTtcblx0XHRcblx0XHRpZih0aGlzLnN1YnNjcmliZWRFeHRlcm5hbChcImRhdGFDaGFuZ2VkXCIpKXtcblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcImRhdGFDaGFuZ2VkXCIsIHRoaXMudGFibGUucm93TWFuYWdlci5nZXREYXRhKCkpO1xuXHRcdH1cblx0XHRcblx0XHRpZighYmxvY2tSZWRyYXcpe1xuXHRcdFx0dGhpcy5yZVJlbmRlckluUG9zaXRpb24oKTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHJvdztcblx0fVxuXHRcblx0bW92ZVJvdyhmcm9tLCB0bywgYWZ0ZXIpe1xuXHRcdHRoaXMuZGlzcGF0Y2goXCJyb3ctbW92ZVwiLCBmcm9tLCB0bywgYWZ0ZXIpO1xuXHRcdFxuXHRcdHRoaXMubW92ZVJvd0FjdHVhbChmcm9tLCB0bywgYWZ0ZXIpO1xuXHRcdFxuXHRcdHRoaXMucmVnZW5lcmF0ZVJvd1Bvc2l0aW9ucygpO1xuXHRcdFxuXHRcdHRoaXMuZGlzcGF0Y2goXCJyb3ctbW92ZWRcIiwgZnJvbSwgdG8sIGFmdGVyKTtcblx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJyb3dNb3ZlZFwiLCBmcm9tLmdldENvbXBvbmVudCgpKTtcblx0fVxuXHRcblx0bW92ZVJvd0FjdHVhbChmcm9tLCB0bywgYWZ0ZXIpe1xuXHRcdHRoaXMubW92ZVJvd0luQXJyYXkodGhpcy5yb3dzLCBmcm9tLCB0bywgYWZ0ZXIpO1xuXHRcdHRoaXMubW92ZVJvd0luQXJyYXkodGhpcy5hY3RpdmVSb3dzLCBmcm9tLCB0bywgYWZ0ZXIpO1xuXHRcdFxuXHRcdHRoaXMuZGlzcGxheVJvd0l0ZXJhdG9yKChyb3dzKSA9PiB7XG5cdFx0XHR0aGlzLm1vdmVSb3dJbkFycmF5KHJvd3MsIGZyb20sIHRvLCBhZnRlcik7XG5cdFx0fSk7XG5cdFx0XG5cdFx0dGhpcy5kaXNwYXRjaChcInJvdy1tb3ZpbmdcIiwgZnJvbSwgdG8sIGFmdGVyKTtcblx0fVxuXHRcblx0bW92ZVJvd0luQXJyYXkocm93cywgZnJvbSwgdG8sIGFmdGVyKXtcblx0XHR2YXJcdGZyb21JbmRleCwgdG9JbmRleCwgc3RhcnQsIGVuZDtcblx0XHRcblx0XHRpZihmcm9tICE9PSB0byl7XG5cdFx0XHRcblx0XHRcdGZyb21JbmRleCA9IHJvd3MuaW5kZXhPZihmcm9tKTtcblx0XHRcdFxuXHRcdFx0aWYgKGZyb21JbmRleCA+IC0xKSB7XG5cdFx0XHRcdFxuXHRcdFx0XHRyb3dzLnNwbGljZShmcm9tSW5kZXgsIDEpO1xuXHRcdFx0XHRcblx0XHRcdFx0dG9JbmRleCA9IHJvd3MuaW5kZXhPZih0byk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZiAodG9JbmRleCA+IC0xKSB7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYoYWZ0ZXIpe1xuXHRcdFx0XHRcdFx0cm93cy5zcGxpY2UodG9JbmRleCsxLCAwLCBmcm9tKTtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRyb3dzLnNwbGljZSh0b0luZGV4LCAwLCBmcm9tKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRyb3dzLnNwbGljZShmcm9tSW5kZXgsIDAsIGZyb20pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdC8vcmVzdHlsZSByb3dzXG5cdFx0XHRpZihyb3dzID09PSB0aGlzLmdldERpc3BsYXlSb3dzKCkpe1xuXHRcdFx0XHRcblx0XHRcdFx0c3RhcnQgPSBmcm9tSW5kZXggPCB0b0luZGV4ID8gZnJvbUluZGV4IDogdG9JbmRleDtcblx0XHRcdFx0ZW5kID0gdG9JbmRleCA+IGZyb21JbmRleCA/IHRvSW5kZXggOiBmcm9tSW5kZXggKzE7XG5cdFx0XHRcdFxuXHRcdFx0XHRmb3IobGV0IGkgPSBzdGFydDsgaSA8PSBlbmQ7IGkrKyl7XG5cdFx0XHRcdFx0aWYocm93c1tpXSl7XG5cdFx0XHRcdFx0XHR0aGlzLnN0eWxlUm93KHJvd3NbaV0sIGkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0Y2xlYXJEYXRhKCl7XG5cdFx0dGhpcy5zZXREYXRhKFtdKTtcblx0fVxuXHRcblx0Z2V0Um93SW5kZXgocm93KXtcblx0XHRyZXR1cm4gdGhpcy5maW5kUm93SW5kZXgocm93LCB0aGlzLnJvd3MpO1xuXHR9XG5cdFxuXHRnZXREaXNwbGF5Um93SW5kZXgocm93KXtcblx0XHR2YXIgaW5kZXggPSB0aGlzLmdldERpc3BsYXlSb3dzKCkuaW5kZXhPZihyb3cpO1xuXHRcdHJldHVybiBpbmRleCA+IC0xID8gaW5kZXggOiBmYWxzZTtcblx0fVxuXHRcblx0bmV4dERpc3BsYXlSb3cocm93LCByb3dPbmx5KXtcblx0XHR2YXIgaW5kZXggPSB0aGlzLmdldERpc3BsYXlSb3dJbmRleChyb3cpLFxuXHRcdG5leHRSb3cgPSBmYWxzZTtcblx0XHRcblx0XHRcblx0XHRpZihpbmRleCAhPT0gZmFsc2UgJiYgaW5kZXggPCB0aGlzLmRpc3BsYXlSb3dzQ291bnQgLTEpe1xuXHRcdFx0bmV4dFJvdyA9IHRoaXMuZ2V0RGlzcGxheVJvd3MoKVtpbmRleCsxXTtcblx0XHR9XG5cdFx0XG5cdFx0aWYobmV4dFJvdyAmJiAoIShuZXh0Um93IGluc3RhbmNlb2YgUm93KSB8fCBuZXh0Um93LnR5cGUgIT0gXCJyb3dcIikpe1xuXHRcdFx0cmV0dXJuIHRoaXMubmV4dERpc3BsYXlSb3cobmV4dFJvdywgcm93T25seSk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBuZXh0Um93O1xuXHR9XG5cdFxuXHRwcmV2RGlzcGxheVJvdyhyb3csIHJvd09ubHkpe1xuXHRcdHZhciBpbmRleCA9IHRoaXMuZ2V0RGlzcGxheVJvd0luZGV4KHJvdyksXG5cdFx0cHJldlJvdyA9IGZhbHNlO1xuXHRcdFxuXHRcdGlmKGluZGV4KXtcblx0XHRcdHByZXZSb3cgPSB0aGlzLmdldERpc3BsYXlSb3dzKClbaW5kZXgtMV07XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHJvd09ubHkgJiYgcHJldlJvdyAmJiAoIShwcmV2Um93IGluc3RhbmNlb2YgUm93KSB8fCBwcmV2Um93LnR5cGUgIT0gXCJyb3dcIikpe1xuXHRcdFx0cmV0dXJuIHRoaXMucHJldkRpc3BsYXlSb3cocHJldlJvdywgcm93T25seSk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBwcmV2Um93O1xuXHR9XG5cdFxuXHRmaW5kUm93SW5kZXgocm93LCBsaXN0KXtcblx0XHR2YXIgcm93SW5kZXg7XG5cdFx0XG5cdFx0cm93ID0gdGhpcy5maW5kUm93KHJvdyk7XG5cdFx0XG5cdFx0aWYocm93KXtcblx0XHRcdHJvd0luZGV4ID0gbGlzdC5pbmRleE9mKHJvdyk7XG5cdFx0XHRcblx0XHRcdGlmKHJvd0luZGV4ID4gLTEpe1xuXHRcdFx0XHRyZXR1cm4gcm93SW5kZXg7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRcblx0Z2V0RGF0YShhY3RpdmUsIHRyYW5zZm9ybSl7XG5cdFx0dmFyIG91dHB1dCA9IFtdLFxuXHRcdHJvd3MgPSB0aGlzLmdldFJvd3MoYWN0aXZlKTtcblx0XHRcblx0XHRyb3dzLmZvckVhY2goZnVuY3Rpb24ocm93KXtcblx0XHRcdGlmKHJvdy50eXBlID09IFwicm93XCIpe1xuXHRcdFx0XHRvdXRwdXQucHVzaChyb3cuZ2V0RGF0YSh0cmFuc2Zvcm0gfHwgXCJkYXRhXCIpKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cdFxuXHRnZXRDb21wb25lbnRzKGFjdGl2ZSl7XG5cdFx0dmFyXHRvdXRwdXQgPSBbXSxcblx0XHRyb3dzID0gdGhpcy5nZXRSb3dzKGFjdGl2ZSk7XG5cdFx0XG5cdFx0cm93cy5mb3JFYWNoKGZ1bmN0aW9uKHJvdyl7XG5cdFx0XHRvdXRwdXQucHVzaChyb3cuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblx0XG5cdGdldERhdGFDb3VudChhY3RpdmUpe1xuXHRcdHZhciByb3dzID0gdGhpcy5nZXRSb3dzKGFjdGl2ZSk7XG5cdFx0XG5cdFx0cmV0dXJuIHJvd3MubGVuZ3RoO1xuXHR9XG5cdFxuXHRzY3JvbGxIb3Jpem9udGFsKGxlZnQpe1xuXHRcdHRoaXMuc2Nyb2xsTGVmdCA9IGxlZnQ7XG5cdFx0dGhpcy5lbGVtZW50LnNjcm9sbExlZnQgPSBsZWZ0O1xuXHRcdFxuXHRcdHRoaXMuZGlzcGF0Y2goXCJzY3JvbGwtaG9yaXpvbnRhbFwiLCBsZWZ0KTtcblx0fVxuXHRcblx0cmVnaXN0ZXJEYXRhUGlwZWxpbmVIYW5kbGVyKGhhbmRsZXIsIHByaW9yaXR5KXtcblx0XHRpZih0eXBlb2YgcHJpb3JpdHkgIT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0dGhpcy5kYXRhUGlwZWxpbmUucHVzaCh7aGFuZGxlciwgcHJpb3JpdHl9KTtcblx0XHRcdHRoaXMuZGF0YVBpcGVsaW5lLnNvcnQoKGEsIGIpID0+IHtcblx0XHRcdFx0cmV0dXJuIGEucHJpb3JpdHkgLSBiLnByaW9yaXR5O1xuXHRcdFx0fSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS5lcnJvcihcIkRhdGEgcGlwZWxpbmUgaGFuZGxlcnMgbXVzdCBoYXZlIGEgcHJpb3JpdHkgaW4gb3JkZXIgdG8gYmUgcmVnaXN0ZXJlZFwiKTtcblx0XHR9XG5cdH1cblx0XG5cdHJlZ2lzdGVyRGlzcGxheVBpcGVsaW5lSGFuZGxlcihoYW5kbGVyLCBwcmlvcml0eSl7XG5cdFx0aWYodHlwZW9mIHByaW9yaXR5ICE9PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdHRoaXMuZGlzcGxheVBpcGVsaW5lLnB1c2goe2hhbmRsZXIsIHByaW9yaXR5fSk7XG5cdFx0XHR0aGlzLmRpc3BsYXlQaXBlbGluZS5zb3J0KChhLCBiKSA9PiB7XG5cdFx0XHRcdHJldHVybiBhLnByaW9yaXR5IC0gYi5wcmlvcml0eTtcblx0XHRcdH0pO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoXCJEaXNwbGF5IHBpcGVsaW5lIGhhbmRsZXJzIG11c3QgaGF2ZSBhIHByaW9yaXR5IGluIG9yZGVyIHRvIGJlIHJlZ2lzdGVyZWRcIik7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL3NldCBhY3RpdmUgZGF0YSBzZXRcblx0cmVmcmVzaEFjdGl2ZURhdGEoaGFuZGxlciwgc2tpcFN0YWdlLCByZW5kZXJJblBvc2l0aW9uKXtcblx0XHR2YXIgdGFibGUgPSB0aGlzLnRhYmxlLFxuXHRcdHN0YWdlID0gXCJcIixcblx0XHRpbmRleCA9IDAsXG5cdFx0Y2FzY2FkZU9yZGVyID0gW1wiYWxsXCIsIFwiZGF0YVBpcGVsaW5lXCIsIFwiZGlzcGxheVwiLCBcImRpc3BsYXlQaXBlbGluZVwiLCBcImVuZFwiXTtcblx0XHRcblx0XHRpZighdGhpcy50YWJsZS5kZXN0cm95ZWQpe1xuXHRcdFx0aWYodHlwZW9mIGhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRcdGluZGV4ID0gdGhpcy5kYXRhUGlwZWxpbmUuZmluZEluZGV4KChpdGVtKSA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuIGl0ZW0uaGFuZGxlciA9PT0gaGFuZGxlcjtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihpbmRleCA+IC0xKXtcblx0XHRcdFx0XHRzdGFnZSA9IFwiZGF0YVBpcGVsaW5lXCI7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYoc2tpcFN0YWdlKXtcblx0XHRcdFx0XHRcdGlmKGluZGV4ID09IHRoaXMuZGF0YVBpcGVsaW5lLmxlbmd0aCAtIDEpe1xuXHRcdFx0XHRcdFx0XHRzdGFnZSA9IFwiZGlzcGxheVwiO1xuXHRcdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0XHRpbmRleCsrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGluZGV4ID0gdGhpcy5kaXNwbGF5UGlwZWxpbmUuZmluZEluZGV4KChpdGVtKSA9PiB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gaXRlbS5oYW5kbGVyID09PSBoYW5kbGVyO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKGluZGV4ID4gLTEpe1xuXHRcdFx0XHRcdFx0c3RhZ2UgPSBcImRpc3BsYXlQaXBlbGluZVwiO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRpZihza2lwU3RhZ2Upe1xuXHRcdFx0XHRcdFx0XHRpZihpbmRleCA9PSB0aGlzLmRpc3BsYXlQaXBlbGluZS5sZW5ndGggLSAxKXtcblx0XHRcdFx0XHRcdFx0XHRzdGFnZSA9IFwiZW5kXCI7XG5cdFx0XHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRpbmRleCsrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvcihcIlVuYWJsZSB0byByZWZyZXNoIGRhdGEsIGludmFsaWQgaGFuZGxlciBwcm92aWRlZFwiLCBoYW5kbGVyKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0c3RhZ2UgPSBoYW5kbGVyIHx8IFwiYWxsXCI7XG5cdFx0XHRcdGluZGV4ID0gMDtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYodGhpcy5yZWRyYXdCbG9jayl7XG5cdFx0XHRcdGlmKCF0aGlzLnJlZHJhd0Jsb2NrUmVzdG9yZUNvbmZpZyB8fCAodGhpcy5yZWRyYXdCbG9ja1Jlc3RvcmVDb25maWcgJiYgKCh0aGlzLnJlZHJhd0Jsb2NrUmVzdG9yZUNvbmZpZy5zdGFnZSA9PT0gc3RhZ2UgJiYgaW5kZXggPCB0aGlzLnJlZHJhd0Jsb2NrUmVzdG9yZUNvbmZpZy5pbmRleCkgfHwgKGNhc2NhZGVPcmRlci5pbmRleE9mKHN0YWdlKSA8IGNhc2NhZGVPcmRlci5pbmRleE9mKHRoaXMucmVkcmF3QmxvY2tSZXN0b3JlQ29uZmlnLnN0YWdlKSkpKSl7XG5cdFx0XHRcdFx0dGhpcy5yZWRyYXdCbG9ja1Jlc3RvcmVDb25maWcgPSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRcdFx0c2tpcFN0YWdlOiBza2lwU3RhZ2UsXG5cdFx0XHRcdFx0XHRyZW5kZXJJblBvc2l0aW9uOiByZW5kZXJJblBvc2l0aW9uLFxuXHRcdFx0XHRcdFx0c3RhZ2U6c3RhZ2UsXG5cdFx0XHRcdFx0XHRpbmRleDppbmRleCxcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlmKEhlbHBlcnMuZWxWaXNpYmxlKHRoaXMuZWxlbWVudCkpe1xuXHRcdFx0XHRcdGlmKHJlbmRlckluUG9zaXRpb24pe1xuXHRcdFx0XHRcdFx0dGhpcy5yZVJlbmRlckluUG9zaXRpb24odGhpcy5yZWZyZXNoUGlwZWxpbmVzLmJpbmQodGhpcywgaGFuZGxlciwgc3RhZ2UsIGluZGV4LCByZW5kZXJJblBvc2l0aW9uKSk7XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0dGhpcy5yZWZyZXNoUGlwZWxpbmVzKGhhbmRsZXIsIHN0YWdlLCBpbmRleCwgcmVuZGVySW5Qb3NpdGlvbik7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGlmKCFoYW5kbGVyKXtcblx0XHRcdFx0XHRcdFx0dGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLnJlbmRlcmVyLnJlbmRlckNvbHVtbnMoKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0dGhpcy5yZW5kZXJUYWJsZSgpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRpZih0YWJsZS5vcHRpb25zLmxheW91dENvbHVtbnNPbk5ld0RhdGEpe1xuXHRcdFx0XHRcdFx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIucmVkcmF3KHRydWUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHRoaXMucmVmcmVzaFBpcGVsaW5lcyhoYW5kbGVyLCBzdGFnZSwgaW5kZXgsIHJlbmRlckluUG9zaXRpb24pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLmRpc3BhdGNoKFwiZGF0YS1yZWZyZXNoZWRcIik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRyZWZyZXNoUGlwZWxpbmVzKGhhbmRsZXIsIHN0YWdlLCBpbmRleCwgcmVuZGVySW5Qb3NpdGlvbil7XG5cdFx0dGhpcy5kaXNwYXRjaChcImRhdGEtcmVmcmVzaGluZ1wiKTtcblx0XHRcblx0XHRpZighaGFuZGxlcil7XG5cdFx0XHR0aGlzLmFjdGl2ZVJvd3NQaXBlbGluZVswXSA9IHRoaXMucm93cy5zbGljZSgwKTtcblx0XHR9XG5cdFx0XG5cdFx0Ly9jYXNjYWRlIHRocm91Z2ggZGF0YSByZWZyZXNoIHN0YWdlc1xuXHRcdHN3aXRjaChzdGFnZSl7XG5cdFx0XHRjYXNlIFwiYWxsXCI6XG5cdFx0XHQvL2hhbmRsZSBjYXNlIHdoZXJlIGFsbCBkYXRhIG5lZWRzIHJlZnJlc2hpbmdcblx0XHRcdFxuXHRcdFx0Y2FzZSBcImRhdGFQaXBlbGluZVwiOlxuXHRcdFx0XG5cdFx0XHRcdGZvcihsZXQgaSA9IGluZGV4OyBpIDwgdGhpcy5kYXRhUGlwZWxpbmUubGVuZ3RoOyBpKyspe1xuXHRcdFx0XHRcdGxldCByZXN1bHQgPSB0aGlzLmRhdGFQaXBlbGluZVtpXS5oYW5kbGVyKHRoaXMuYWN0aXZlUm93c1BpcGVsaW5lW2ldLnNsaWNlKDApKTtcblx0XHRcdFx0XG5cdFx0XHRcdFx0dGhpcy5hY3RpdmVSb3dzUGlwZWxpbmVbaSArIDFdID0gcmVzdWx0IHx8IHRoaXMuYWN0aXZlUm93c1BpcGVsaW5lW2ldLnNsaWNlKDApO1xuXHRcdFx0XHR9XG5cdFx0XHRcblx0XHRcdFx0dGhpcy5zZXRBY3RpdmVSb3dzKHRoaXMuYWN0aXZlUm93c1BpcGVsaW5lW3RoaXMuZGF0YVBpcGVsaW5lLmxlbmd0aF0pO1xuXHRcdFx0XG5cdFx0XHRjYXNlIFwiZGlzcGxheVwiOlxuXHRcdFx0XHRpbmRleCA9IDA7XG5cdFx0XHRcdHRoaXMucmVzZXREaXNwbGF5Um93cygpO1xuXHRcdFx0XG5cdFx0XHRjYXNlIFwiZGlzcGxheVBpcGVsaW5lXCI6XG5cdFx0XHRcdGZvcihsZXQgaSA9IGluZGV4OyBpIDwgdGhpcy5kaXNwbGF5UGlwZWxpbmUubGVuZ3RoOyBpKyspe1xuXHRcdFx0XHRcdGxldCByZXN1bHQgPSB0aGlzLmRpc3BsYXlQaXBlbGluZVtpXS5oYW5kbGVyKChpID8gdGhpcy5nZXREaXNwbGF5Um93cyhpIC0gMSkgOiB0aGlzLmFjdGl2ZVJvd3MpLnNsaWNlKDApLCByZW5kZXJJblBvc2l0aW9uKTtcblx0XHRcdFx0XG5cdFx0XHRcdFx0dGhpcy5zZXREaXNwbGF5Um93cyhyZXN1bHQgfHwgdGhpcy5nZXREaXNwbGF5Um93cyhpIC0gMSkuc2xpY2UoMCksIGkpO1xuXHRcdFx0XHR9XG5cdFx0XHRcblx0XHRcdGNhc2UgXCJlbmRcIjpcblx0XHRcdC8vY2FzZSB0byBoYW5kbGUgc2NlbmFyaW8gd2hlbiB0cnlpbmcgdG8gc2tpcCBwYXN0IGVuZCBzdGFnZVxuXHRcdFx0XHR0aGlzLnJlZ2VuZXJhdGVSb3dQb3NpdGlvbnMoKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodGhpcy5nZXREaXNwbGF5Um93cygpLmxlbmd0aCl7XG5cdFx0XHR0aGlzLl9jbGVhclBsYWNlaG9sZGVyKCk7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL3JlZ2VuZXJhdGUgcm93IHBvc2l0aW9uc1xuXHRyZWdlbmVyYXRlUm93UG9zaXRpb25zKCl7XG5cdFx0dmFyIHJvd3MgPSB0aGlzLmdldERpc3BsYXlSb3dzKCk7XG5cdFx0dmFyIGluZGV4ID0gMTtcblx0XHRcblx0XHRyb3dzLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0aWYgKHJvdy50eXBlID09PSBcInJvd1wiKXtcblx0XHRcdFx0cm93LnNldFBvc2l0aW9uKGluZGV4KTtcblx0XHRcdFx0aW5kZXgrKztcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRcblx0c2V0QWN0aXZlUm93cyhhY3RpdmVSb3dzKXtcblx0XHR0aGlzLmFjdGl2ZVJvd3MgPSB0aGlzLmFjdGl2ZVJvd3MgPSBPYmplY3QuYXNzaWduKFtdLCBhY3RpdmVSb3dzKTtcblx0XHR0aGlzLmFjdGl2ZVJvd3NDb3VudCA9IHRoaXMuYWN0aXZlUm93cy5sZW5ndGg7XG5cdH1cblx0XG5cdC8vcmVzZXQgZGlzcGxheSByb3dzIGFycmF5XG5cdHJlc2V0RGlzcGxheVJvd3MoKXtcblx0XHR0aGlzLmRpc3BsYXlSb3dzID0gW107XG5cdFx0XG5cdFx0dGhpcy5kaXNwbGF5Um93cy5wdXNoKHRoaXMuYWN0aXZlUm93cy5zbGljZSgwKSk7XG5cdFx0XG5cdFx0dGhpcy5kaXNwbGF5Um93c0NvdW50ID0gdGhpcy5kaXNwbGF5Um93c1swXS5sZW5ndGg7XG5cdH1cblx0XG5cdC8vc2V0IGRpc3BsYXkgcm93IHBpcGVsaW5lIGRhdGFcblx0c2V0RGlzcGxheVJvd3MoZGlzcGxheVJvd3MsIGluZGV4KXtcblx0XHR0aGlzLmRpc3BsYXlSb3dzW2luZGV4XSA9IGRpc3BsYXlSb3dzO1xuXHRcdFxuXHRcdGlmKGluZGV4ID09IHRoaXMuZGlzcGxheVJvd3MubGVuZ3RoIC0xKXtcblx0XHRcdHRoaXMuZGlzcGxheVJvd3NDb3VudCA9IHRoaXMuZGlzcGxheVJvd3NbdGhpcy5kaXNwbGF5Um93cy5sZW5ndGggLTFdLmxlbmd0aDtcblx0XHR9XG5cdH1cblx0XG5cdGdldERpc3BsYXlSb3dzKGluZGV4KXtcblx0XHRpZih0eXBlb2YgaW5kZXggPT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRyZXR1cm4gdGhpcy5kaXNwbGF5Um93cy5sZW5ndGggPyB0aGlzLmRpc3BsYXlSb3dzW3RoaXMuZGlzcGxheVJvd3MubGVuZ3RoIC0xXSA6IFtdO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJldHVybiB0aGlzLmRpc3BsYXlSb3dzW2luZGV4XSB8fCBbXTtcblx0XHR9XG5cdH1cblx0XG5cdGdldFZpc2libGVSb3dzKGNoYWluLCB2aWV3YWJsZSl7XG5cdFx0dmFyIHJvd3MgPSAgT2JqZWN0LmFzc2lnbihbXSwgdGhpcy5yZW5kZXJlci52aXNpYmxlUm93cyghdmlld2FibGUpKTtcblx0XHRcblx0XHRpZihjaGFpbil7XG5cdFx0XHRyb3dzID0gdGhpcy5jaGFpbihcInJvd3MtdmlzaWJsZVwiLCBbdmlld2FibGVdLCByb3dzLCByb3dzKTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHJvd3M7XG5cdH1cblx0XG5cdC8vcmVwZWF0IGFjdGlvbiBhY3Jvc3MgZGlzcGxheSByb3dzXG5cdGRpc3BsYXlSb3dJdGVyYXRvcihjYWxsYmFjayl7XG5cdFx0dGhpcy5hY3RpdmVSb3dzUGlwZWxpbmUuZm9yRWFjaChjYWxsYmFjayk7XG5cdFx0dGhpcy5kaXNwbGF5Um93cy5mb3JFYWNoKGNhbGxiYWNrKTtcblx0XHRcblx0XHR0aGlzLmRpc3BsYXlSb3dzQ291bnQgPSB0aGlzLmRpc3BsYXlSb3dzW3RoaXMuZGlzcGxheVJvd3MubGVuZ3RoIC0xXS5sZW5ndGg7XG5cdH1cblx0XG5cdC8vcmV0dXJuIG9ubHkgYWN0dWFsIHJvd3MgKG5vdCBncm91cCBoZWFkZXJzIGV0Yylcblx0Z2V0Um93cyh0eXBlKXtcblx0XHR2YXIgcm93cyA9IFtdO1xuXHRcdFxuXHRcdHN3aXRjaCh0eXBlKXtcblx0XHRcdGNhc2UgXCJhY3RpdmVcIjpcblx0XHRcdFx0cm93cyA9IHRoaXMuYWN0aXZlUm93cztcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGNhc2UgXCJkaXNwbGF5XCI6XG5cdFx0XHRcdHJvd3MgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0RGlzcGxheVJvd3MoKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGNhc2UgXCJ2aXNpYmxlXCI6XG5cdFx0XHRcdHJvd3MgPSB0aGlzLmdldFZpc2libGVSb3dzKGZhbHNlLCB0cnVlKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJvd3MgPSB0aGlzLmNoYWluKFwicm93cy1yZXRyaWV2ZVwiLCB0eXBlLCBudWxsLCB0aGlzLnJvd3MpIHx8IHRoaXMucm93cztcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHJvd3M7XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vIFRhYmxlIFJlbmRlcmluZyAvLy8vLy8vLy8vLy8vLy8vL1xuXHQvL3RyaWdnZXIgcmVyZW5kZXIgb2YgdGFibGUgaW4gY3VycmVudCBwb3NpdGlvblxuXHRyZVJlbmRlckluUG9zaXRpb24oY2FsbGJhY2spe1xuXHRcdGlmKHRoaXMucmVkcmF3QmxvY2spe1xuXHRcdFx0aWYoY2FsbGJhY2spe1xuXHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLnJlZHJhd0Jsb2NrUmVuZGVySW5Qb3NpdGlvbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwicmVuZGVyU3RhcnRlZFwiKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5yZW5kZXJlci5yZXJlbmRlclJvd3MoY2FsbGJhY2spO1xuXHRcdFx0XG5cdFx0XHRpZighdGhpcy5maXhlZEhlaWdodCl7XG5cdFx0XHRcdHRoaXMuYWRqdXN0VGFibGVTaXplKCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHRoaXMuc2Nyb2xsQmFyQ2hlY2soKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwicmVuZGVyQ29tcGxldGVcIik7XG5cdFx0fVxuXHR9XG5cdFxuXHRzY3JvbGxCYXJDaGVjaygpe1xuXHRcdHZhciBzY3JvbGxiYXJXaWR0aCA9IDA7XG5cdFx0XG5cdFx0Ly9hZGp1c3QgZm9yIHZlcnRpY2FsIHNjcm9sbGJhciBtb3ZpbmcgdGFibGUgd2hlbiBwcmVzZW50XG5cdFx0aWYodGhpcy5lbGVtZW50LnNjcm9sbEhlaWdodCA+IHRoaXMuZWxlbWVudC5jbGllbnRIZWlnaHQpe1xuXHRcdFx0c2Nyb2xsYmFyV2lkdGggPSB0aGlzLmVsZW1lbnQub2Zmc2V0V2lkdGggLSB0aGlzLmVsZW1lbnQuY2xpZW50V2lkdGg7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHNjcm9sbGJhcldpZHRoICE9PSB0aGlzLnNjcm9sbGJhcldpZHRoKXtcblx0XHRcdHRoaXMuc2Nyb2xsYmFyV2lkdGggPSBzY3JvbGxiYXJXaWR0aDtcblx0XHRcdHRoaXMuZGlzcGF0Y2goXCJzY3JvbGxiYXItdmVydGljYWxcIiwgc2Nyb2xsYmFyV2lkdGgpO1xuXHRcdH1cblx0fVxuXHRcblx0aW5pdGlhbGl6ZVJlbmRlcmVyKCl7XG5cdFx0dmFyIHJlbmRlckNsYXNzO1xuXHRcdFxuXHRcdHZhciByZW5kZXJlcnMgPSB7XG5cdFx0XHRcInZpcnR1YWxcIjogVmlydHVhbERvbVZlcnRpY2FsLFxuXHRcdFx0XCJiYXNpY1wiOiBCYXNpY1ZlcnRpY2FsLFxuXHRcdH07XG5cdFx0XG5cdFx0aWYodHlwZW9mIHRoaXMudGFibGUub3B0aW9ucy5yZW5kZXJWZXJ0aWNhbCA9PT0gXCJzdHJpbmdcIil7XG5cdFx0XHRyZW5kZXJDbGFzcyA9IHJlbmRlcmVyc1t0aGlzLnRhYmxlLm9wdGlvbnMucmVuZGVyVmVydGljYWxdO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJlbmRlckNsYXNzID0gdGhpcy50YWJsZS5vcHRpb25zLnJlbmRlclZlcnRpY2FsO1xuXHRcdH1cblx0XHRcblx0XHRpZihyZW5kZXJDbGFzcyl7XG5cdFx0XHR0aGlzLnJlbmRlck1vZGUgPSB0aGlzLnRhYmxlLm9wdGlvbnMucmVuZGVyVmVydGljYWw7XG5cdFx0XHRcblx0XHRcdHRoaXMucmVuZGVyZXIgPSBuZXcgcmVuZGVyQ2xhc3ModGhpcy50YWJsZSwgdGhpcy5lbGVtZW50LCB0aGlzLnRhYmxlRWxlbWVudCk7XG5cdFx0XHR0aGlzLnJlbmRlcmVyLmluaXRpYWxpemUoKTtcblx0XHRcdFxuXHRcdFx0aWYoKHRoaXMudGFibGUuZWxlbWVudC5jbGllbnRIZWlnaHQgfHwgdGhpcy50YWJsZS5vcHRpb25zLmhlaWdodCkgJiYgISh0aGlzLnRhYmxlLm9wdGlvbnMubWluSGVpZ2h0ICYmIHRoaXMudGFibGUub3B0aW9ucy5tYXhIZWlnaHQpKXtcblx0XHRcdFx0dGhpcy5maXhlZEhlaWdodCA9IHRydWU7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMuZml4ZWRIZWlnaHQgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKFwiVW5hYmxlIHRvIGZpbmQgbWF0Y2hpbmcgcmVuZGVyZXI6XCIsIHRoaXMudGFibGUub3B0aW9ucy5yZW5kZXJWZXJ0aWNhbCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRnZXRSZW5kZXJNb2RlKCl7XG5cdFx0cmV0dXJuIHRoaXMucmVuZGVyTW9kZTtcblx0fVxuXHRcblx0cmVuZGVyVGFibGUoKXtcblx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJyZW5kZXJTdGFydGVkXCIpO1xuXHRcdFxuXHRcdHRoaXMuZWxlbWVudC5zY3JvbGxUb3AgPSAwO1xuXHRcdFxuXHRcdHRoaXMuX2NsZWFyVGFibGUoKTtcblx0XHRcblx0XHRpZih0aGlzLmRpc3BsYXlSb3dzQ291bnQpe1xuXHRcdFx0dGhpcy5yZW5kZXJlci5yZW5kZXJSb3dzKCk7XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMuZmlyc3RSZW5kZXIpe1xuXHRcdFx0XHR0aGlzLmZpcnN0UmVuZGVyID0gZmFsc2U7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZighdGhpcy5maXhlZEhlaWdodCl7XG5cdFx0XHRcdFx0dGhpcy5hZGp1c3RUYWJsZVNpemUoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5sYXlvdXRSZWZyZXNoKHRydWUpO1xuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMucmVuZGVyRW1wdHlTY3JvbGwoKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYoIXRoaXMuZml4ZWRIZWlnaHQpe1xuXHRcdFx0dGhpcy5hZGp1c3RUYWJsZVNpemUoKTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5kaXNwYXRjaChcInRhYmxlLWxheW91dFwiKTtcblx0XHRcblx0XHRpZighdGhpcy5kaXNwbGF5Um93c0NvdW50KXtcblx0XHRcdHRoaXMuX3Nob3dQbGFjZWhvbGRlcigpO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLnNjcm9sbEJhckNoZWNrKCk7XG5cdFx0XG5cdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwicmVuZGVyQ29tcGxldGVcIik7XG5cdH1cblx0XG5cdC8vc2hvdyBzY3JvbGxiYXJzIG9uIGVtcHR5IHRhYmxlIGRpdlxuXHRyZW5kZXJFbXB0eVNjcm9sbCgpe1xuXHRcdGlmKHRoaXMucGxhY2Vob2xkZXIpe1xuXHRcdFx0dGhpcy50YWJsZUVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMudGFibGVFbGVtZW50LnN0eWxlLm1pbldpZHRoID0gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmdldFdpZHRoKCkgKyBcInB4XCI7XG5cdFx0XHQvLyB0aGlzLnRhYmxlRWxlbWVudC5zdHlsZS5taW5IZWlnaHQgPSBcIjFweFwiO1xuXHRcdFx0Ly8gdGhpcy50YWJsZUVsZW1lbnQuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG5cdFx0fVxuXHR9XG5cdFxuXHRfY2xlYXJUYWJsZSgpe1x0XG5cdFx0dGhpcy5fY2xlYXJQbGFjZWhvbGRlcigpO1xuXHRcdFxuXHRcdHRoaXMuc2Nyb2xsVG9wID0gMDtcblx0XHR0aGlzLnNjcm9sbExlZnQgPSAwO1xuXHRcdFxuXHRcdHRoaXMucmVuZGVyZXIuY2xlYXJSb3dzKCk7XG5cdH1cblx0XG5cdHRhYmxlRW1wdHkoKXtcblx0XHR0aGlzLnJlbmRlckVtcHR5U2Nyb2xsKCk7XG5cdFx0dGhpcy5fc2hvd1BsYWNlaG9sZGVyKCk7XG5cdH1cblx0XG5cdF9zaG93UGxhY2Vob2xkZXIoKXtcblx0XHRpZih0aGlzLnBsYWNlaG9sZGVyKXtcblx0XHRcdGlmKHRoaXMucGxhY2Vob2xkZXIgJiYgdGhpcy5wbGFjZWhvbGRlci5wYXJlbnROb2RlKXtcblx0XHRcdFx0dGhpcy5wbGFjZWhvbGRlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMucGxhY2Vob2xkZXIpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLmluaXRpYWxpemVQbGFjZWhvbGRlcigpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnBsYWNlaG9sZGVyLnNldEF0dHJpYnV0ZShcInRhYnVsYXRvci1yZW5kZXItbW9kZVwiLCB0aGlzLnJlbmRlck1vZGUpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmdldEVsZW1lbnQoKS5hcHBlbmRDaGlsZCh0aGlzLnBsYWNlaG9sZGVyKTtcblx0XHRcdHRoaXMuX3Bvc2l0aW9uUGxhY2Vob2xkZXIoKTtcblxuXHRcdFx0dGhpcy5hZGp1c3RUYWJsZVNpemUoKTtcblx0XHR9XG5cdH1cblx0XG5cdF9jbGVhclBsYWNlaG9sZGVyKCl7XG5cdFx0aWYodGhpcy5wbGFjZWhvbGRlciAmJiB0aGlzLnBsYWNlaG9sZGVyLnBhcmVudE5vZGUpe1xuXHRcdFx0dGhpcy5wbGFjZWhvbGRlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMucGxhY2Vob2xkZXIpO1xuXHRcdH1cblx0XHRcblx0XHQvLyBjbGVhciBlbXB0eSB0YWJsZSBwbGFjZWhvbGRlciBtaW5cblx0XHR0aGlzLnRhYmxlRWxlbWVudC5zdHlsZS5taW5XaWR0aCA9IFwiXCI7XG5cdFx0dGhpcy50YWJsZUVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdH1cblx0XG5cdF9wb3NpdGlvblBsYWNlaG9sZGVyKCl7XG5cdFx0aWYodGhpcy5wbGFjZWhvbGRlciAmJiB0aGlzLnBsYWNlaG9sZGVyLnBhcmVudE5vZGUpe1xuXHRcdFx0dGhpcy5wbGFjZWhvbGRlci5zdHlsZS53aWR0aCA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5nZXRXaWR0aCgpICsgXCJweFwiO1xuXHRcdFx0dGhpcy5wbGFjZWhvbGRlckNvbnRlbnRzLnN0eWxlLndpZHRoID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQuY2xpZW50V2lkdGggKyBcInB4XCI7XG5cdFx0XHR0aGlzLnBsYWNlaG9sZGVyQ29udGVudHMuc3R5bGUubWFyZ2luTGVmdCA9IHRoaXMuc2Nyb2xsTGVmdCArIFwicHhcIjtcblx0XHR9XG5cdH1cblx0XG5cdHN0eWxlUm93KHJvdywgaW5kZXgpe1xuXHRcdHZhciByb3dFbCA9IHJvdy5nZXRFbGVtZW50KCk7XG5cdFx0XG5cdFx0aWYoaW5kZXggJSAyKXtcblx0XHRcdHJvd0VsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3Itcm93LWV2ZW5cIik7XG5cdFx0XHRyb3dFbC5jbGFzc0xpc3QucmVtb3ZlKFwidGFidWxhdG9yLXJvdy1vZGRcIik7XG5cdFx0fWVsc2Uge1xuXHRcdFx0cm93RWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1yb3ctb2RkXCIpO1xuXHRcdFx0cm93RWwuY2xhc3NMaXN0LnJlbW92ZShcInRhYnVsYXRvci1yb3ctZXZlblwiKTtcblx0XHR9XG5cdH1cblx0XG5cdC8vbm9ybWFsaXplIGhlaWdodCBvZiBhY3RpdmUgcm93c1xuXHRub3JtYWxpemVIZWlnaHQoKXtcblx0XHR0aGlzLmFjdGl2ZVJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3cpe1xuXHRcdFx0cm93Lm5vcm1hbGl6ZUhlaWdodCgpO1xuXHRcdH0pO1xuXHR9XG5cdFxuXHQvL2FkanVzdCB0aGUgaGVpZ2h0IG9mIHRoZSB0YWJsZSBob2xkZXIgdG8gZml0IGluIHRoZSBUYWJ1bGF0b3IgZWxlbWVudFxuXHRhZGp1c3RUYWJsZVNpemUoKXtcblx0XHRsZXQgaW5pdGlhbEhlaWdodCA9IHRoaXMuZWxlbWVudC5jbGllbnRIZWlnaHQsIG1pbkhlaWdodDtcblx0XHRsZXQgcmVzaXplZCA9IGZhbHNlO1xuXHRcdFxuXHRcdGlmKHRoaXMucmVuZGVyZXIudmVydGljYWxGaWxsTW9kZSA9PT0gXCJmaWxsXCIpe1xuXHRcdFx0bGV0IG90aGVySGVpZ2h0ID0gIE1hdGguZmxvb3IodGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmdldEVsZW1lbnQoKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQgKyAodGhpcy50YWJsZS5mb290ZXJNYW5hZ2VyICYmIHRoaXMudGFibGUuZm9vdGVyTWFuYWdlci5hY3RpdmUgJiYgIXRoaXMudGFibGUuZm9vdGVyTWFuYWdlci5leHRlcm5hbCA/IHRoaXMudGFibGUuZm9vdGVyTWFuYWdlci5nZXRFbGVtZW50KCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0IDogMCkpO1xuXHRcdFx0XG5cdFx0XHRpZih0aGlzLmZpeGVkSGVpZ2h0KXtcblx0XHRcdFx0bWluSGVpZ2h0ID0gaXNOYU4odGhpcy50YWJsZS5vcHRpb25zLm1pbkhlaWdodCkgPyB0aGlzLnRhYmxlLm9wdGlvbnMubWluSGVpZ2h0IDogdGhpcy50YWJsZS5vcHRpb25zLm1pbkhlaWdodCArIFwicHhcIjtcblx0XHRcdFx0XG5cdFx0XHRcdGNvbnN0IGhlaWdodCA9IFwiY2FsYygxMDAlIC0gXCIgKyBvdGhlckhlaWdodCArIFwicHgpXCI7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5zdHlsZS5taW5IZWlnaHQgPSBtaW5IZWlnaHQgfHwgXCJjYWxjKDEwMCUgLSBcIiArIG90aGVySGVpZ2h0ICsgXCJweClcIjtcblx0XHRcdFx0dGhpcy5lbGVtZW50LnN0eWxlLmhlaWdodCA9IGhlaWdodDtcblx0XHRcdFx0dGhpcy5lbGVtZW50LnN0eWxlLm1heEhlaWdodCA9IGhlaWdodDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBcIlwiO1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQuc3R5bGUuaGVpZ2h0ID1cblx0XHRcdFx0dGhpcy50YWJsZS5lbGVtZW50LmNsaWVudEhlaWdodCAtIG90aGVySGVpZ2h0ICsgXCJweFwiO1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQuc2Nyb2xsVG9wID0gdGhpcy5zY3JvbGxUb3A7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHRoaXMucmVuZGVyZXIucmVzaXplKCk7XG5cdFx0XHRcblx0XHRcdC8vY2hlY2sgaWYgdGhlIHRhYmxlIGhhcyBjaGFuZ2VkIHNpemUgd2hlbiBkZWFsaW5nIHdpdGggdmFyaWFibGUgaGVpZ2h0IHRhYmxlc1xuXHRcdFx0aWYoIXRoaXMuZml4ZWRIZWlnaHQgJiYgaW5pdGlhbEhlaWdodCAhPSB0aGlzLmVsZW1lbnQuY2xpZW50SGVpZ2h0KXtcblx0XHRcdFx0cmVzaXplZCA9IHRydWU7XG5cdFx0XHRcdGlmKHRoaXMuc3Vic2NyaWJlZChcInRhYmxlLXJlc2l6ZVwiKSl7XG5cdFx0XHRcdFx0dGhpcy5kaXNwYXRjaChcInRhYmxlLXJlc2l6ZVwiKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHRoaXMucmVkcmF3KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5zY3JvbGxCYXJDaGVjaygpO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLl9wb3NpdGlvblBsYWNlaG9sZGVyKCk7XG5cdFx0cmV0dXJuIHJlc2l6ZWQ7XG5cdH1cblx0XG5cdC8vcmVpbml0aWFsaXplIGFsbCByb3dzXG5cdHJlaW5pdGlhbGl6ZSgpe1xuXHRcdHRoaXMucm93cy5mb3JFYWNoKGZ1bmN0aW9uKHJvdyl7XG5cdFx0XHRyb3cucmVpbml0aWFsaXplKHRydWUpO1xuXHRcdH0pO1xuXHR9XG5cdFxuXHQvL3ByZXZlbnQgdGFibGUgZnJvbSBiZWluZyByZWRyYXduXG5cdGJsb2NrUmVkcmF3ICgpe1xuXHRcdHRoaXMucmVkcmF3QmxvY2sgPSB0cnVlO1xuXHRcdHRoaXMucmVkcmF3QmxvY2tSZXN0b3JlQ29uZmlnID0gZmFsc2U7XG5cdH1cblx0XG5cdC8vcmVzdG9yZSB0YWJsZSByZWRyYXdpbmdcblx0cmVzdG9yZVJlZHJhdyAoKXtcblx0XHR0aGlzLnJlZHJhd0Jsb2NrID0gZmFsc2U7XG5cdFx0XG5cdFx0aWYodGhpcy5yZWRyYXdCbG9ja1Jlc3RvcmVDb25maWcpe1xuXHRcdFx0dGhpcy5yZWZyZXNoQWN0aXZlRGF0YSh0aGlzLnJlZHJhd0Jsb2NrUmVzdG9yZUNvbmZpZy5oYW5kbGVyLCB0aGlzLnJlZHJhd0Jsb2NrUmVzdG9yZUNvbmZpZy5za2lwU3RhZ2UsIHRoaXMucmVkcmF3QmxvY2tSZXN0b3JlQ29uZmlnLnJlbmRlckluUG9zaXRpb24pO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnJlZHJhd0Jsb2NrUmVzdG9yZUNvbmZpZyA9IGZhbHNlO1xuXHRcdH1lbHNlIHtcblx0XHRcdGlmKHRoaXMucmVkcmF3QmxvY2tSZW5kZXJJblBvc2l0aW9uKXtcblx0XHRcdFx0dGhpcy5yZVJlbmRlckluUG9zaXRpb24oKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5yZWRyYXdCbG9ja1JlbmRlckluUG9zaXRpb24gPSBmYWxzZTtcblx0fVxuXHRcblx0Ly9yZWRyYXcgdGFibGVcblx0cmVkcmF3IChmb3JjZSl7XG5cdFx0Y29uc3QgcmVzaXplZCA9IHRoaXMuYWRqdXN0VGFibGVTaXplKCk7XG5cdFx0dGhpcy50YWJsZS50YWJsZVdpZHRoID0gdGhpcy50YWJsZS5lbGVtZW50LmNsaWVudFdpZHRoO1xuXHRcdFxuXHRcdGlmKCFmb3JjZSl7XG5cdFx0XHRpZihyZXNpemVkKSB7XG5cdFx0XHRcdHRoaXMucmVSZW5kZXJJblBvc2l0aW9uKCk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnNjcm9sbEhvcml6b250YWwodGhpcy5zY3JvbGxMZWZ0KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLnJlbmRlclRhYmxlKCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRyZXNldFNjcm9sbCgpe1xuXHRcdHRoaXMuZWxlbWVudC5zY3JvbGxMZWZ0ID0gMDtcblx0XHR0aGlzLmVsZW1lbnQuc2Nyb2xsVG9wID0gMDtcblx0XHRcblx0XHRpZih0aGlzLnRhYmxlLmJyb3dzZXIgPT09IFwiaWVcIil7XG5cdFx0XHR2YXIgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpO1xuXHRcdFx0ZXZlbnQuaW5pdEV2ZW50KFwic2Nyb2xsXCIsIGZhbHNlLCB0cnVlKTtcblx0XHRcdHRoaXMuZWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLmVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ3Njcm9sbCcpKTtcblx0XHR9XG5cdH1cbn1cblxuY2xhc3MgRm9vdGVyTWFuYWdlciBleHRlbmRzIENvcmVGZWF0dXJle1xuXG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cblx0XHR0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuXHRcdHRoaXMuZWxlbWVudCA9IHRoaXMuY3JlYXRlRWxlbWVudCgpOyAvL2NvbnRhaW5pbmcgZWxlbWVudFxuXHRcdHRoaXMuY29udGFpbmVyRWxlbWVudCA9IHRoaXMuY3JlYXRlQ29udGFpbmVyRWxlbWVudCgpOyAvL2NvbnRhaW5pbmcgZWxlbWVudFxuXHRcdHRoaXMuZXh0ZXJuYWwgPSBmYWxzZTtcblx0fVxuXG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLmluaXRpYWxpemVFbGVtZW50KCk7XG5cdH1cblxuXHRjcmVhdGVFbGVtZW50KCl7XG5cdFx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuXHRcdGVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItZm9vdGVyXCIpO1xuXG5cdFx0cmV0dXJuIGVsO1xuXHR9XG5cblx0XG5cdGNyZWF0ZUNvbnRhaW5lckVsZW1lbnQoKXtcblx0XHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXG5cdFx0ZWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1mb290ZXItY29udGVudHNcIik7XG5cblx0XHR0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoZWwpO1xuXG5cdFx0cmV0dXJuIGVsO1xuXHR9XG5cblx0aW5pdGlhbGl6ZUVsZW1lbnQoKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZm9vdGVyRWxlbWVudCl7XG5cblx0XHRcdHN3aXRjaCh0eXBlb2YgdGhpcy50YWJsZS5vcHRpb25zLmZvb3RlckVsZW1lbnQpe1xuXHRcdFx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmZvb3RlckVsZW1lbnRbMF0gPT09IFwiPFwiKXtcblx0XHRcdFx0XHRcdHRoaXMuY29udGFpbmVyRWxlbWVudC5pbm5lckhUTUwgPSB0aGlzLnRhYmxlLm9wdGlvbnMuZm9vdGVyRWxlbWVudDtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHR0aGlzLmV4dGVybmFsID0gdHJ1ZTtcblx0XHRcdFx0XHRcdHRoaXMuY29udGFpbmVyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy50YWJsZS5vcHRpb25zLmZvb3RlckVsZW1lbnQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHRoaXMuZWxlbWVudCA9IHRoaXMudGFibGUub3B0aW9ucy5mb290ZXJFbGVtZW50O1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGdldEVsZW1lbnQoKXtcblx0XHRyZXR1cm4gdGhpcy5lbGVtZW50O1xuXHR9XG5cblx0YXBwZW5kKGVsZW1lbnQpe1xuXHRcdHRoaXMuYWN0aXZhdGUoKTtcblxuXHRcdHRoaXMuY29udGFpbmVyRWxlbWVudC5hcHBlbmRDaGlsZChlbGVtZW50KTtcblx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuYWRqdXN0VGFibGVTaXplKCk7XG5cdH1cblxuXHRwcmVwZW5kKGVsZW1lbnQpe1xuXHRcdHRoaXMuYWN0aXZhdGUoKTtcblxuXHRcdHRoaXMuZWxlbWVudC5pbnNlcnRCZWZvcmUoZWxlbWVudCwgdGhpcy5lbGVtZW50LmZpcnN0Q2hpbGQpO1xuXHRcdHRoaXMudGFibGUucm93TWFuYWdlci5hZGp1c3RUYWJsZVNpemUoKTtcblx0fVxuXG5cdHJlbW92ZShlbGVtZW50KXtcblx0XHRlbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG5cdFx0dGhpcy5kZWFjdGl2YXRlKCk7XG5cdH1cblxuXHRkZWFjdGl2YXRlKGZvcmNlKXtcblx0XHRpZighdGhpcy5lbGVtZW50LmZpcnN0Q2hpbGQgfHwgZm9yY2Upe1xuXHRcdFx0aWYoIXRoaXMuZXh0ZXJuYWwpe1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5hY3RpdmUgPSBmYWxzZTtcblx0XHR9XG5cdH1cblxuXHRhY3RpdmF0ZSgpe1xuXHRcdGlmKCF0aGlzLmFjdGl2ZSl7XG5cdFx0XHR0aGlzLmFjdGl2ZSA9IHRydWU7XG5cdFx0XHRpZighdGhpcy5leHRlcm5hbCl7XG5cdFx0XHRcdHRoaXMudGFibGUuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmdldEVsZW1lbnQoKSk7XG5cdFx0XHRcdHRoaXMudGFibGUuZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJyc7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmVkcmF3KCl7XG5cdFx0dGhpcy5kaXNwYXRjaChcImZvb3Rlci1yZWRyYXdcIik7XG5cdH1cbn1cblxuY2xhc3MgSW50ZXJhY3Rpb25NYW5hZ2VyIGV4dGVuZHMgQ29yZUZlYXR1cmUge1xuXHRcblx0Y29uc3RydWN0b3IgKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cdFx0XG5cdFx0dGhpcy5lbCA9IG51bGw7XG5cdFx0XG5cdFx0dGhpcy5hYm9ydENsYXNzZXMgPSBbXCJ0YWJ1bGF0b3ItaGVhZGVyc1wiLCBcInRhYnVsYXRvci10YWJsZVwiXTtcblx0XHRcblx0XHR0aGlzLnByZXZpb3VzVGFyZ2V0cyA9IHt9O1xuXHRcdFxuXHRcdHRoaXMubGlzdGVuZXJzID0gW1xuXHRcdFx0XCJjbGlja1wiLFxuXHRcdFx0XCJkYmxjbGlja1wiLFxuXHRcdFx0XCJjb250ZXh0bWVudVwiLFxuXHRcdFx0XCJtb3VzZWVudGVyXCIsXG5cdFx0XHRcIm1vdXNlbGVhdmVcIixcblx0XHRcdFwibW91c2VvdmVyXCIsXG5cdFx0XHRcIm1vdXNlb3V0XCIsXG5cdFx0XHRcIm1vdXNlbW92ZVwiLFxuXHRcdFx0XCJtb3VzZXVwXCIsXG5cdFx0XHRcIm1vdXNlZG93blwiLFxuXHRcdFx0XCJ0b3VjaHN0YXJ0XCIsXG5cdFx0XHRcInRvdWNoZW5kXCIsXG5cdFx0XTtcblx0XHRcblx0XHR0aGlzLmNvbXBvbmVudE1hcCA9IHtcblx0XHRcdFwidGFidWxhdG9yLWNlbGxcIjpcImNlbGxcIixcblx0XHRcdFwidGFidWxhdG9yLXJvd1wiOlwicm93XCIsXG5cdFx0XHRcInRhYnVsYXRvci1ncm91cFwiOlwiZ3JvdXBcIixcblx0XHRcdFwidGFidWxhdG9yLWNvbFwiOlwiY29sdW1uXCIsXG5cdFx0fTtcblx0XHRcblx0XHR0aGlzLnBzZXVkb1RyYWNrZXJzID0ge1xuXHRcdFx0XCJyb3dcIjp7XG5cdFx0XHRcdHN1YnNjcmliZXI6bnVsbCxcblx0XHRcdFx0dGFyZ2V0Om51bGwsXG5cdFx0XHR9LFxuXHRcdFx0XCJjZWxsXCI6e1xuXHRcdFx0XHRzdWJzY3JpYmVyOm51bGwsXG5cdFx0XHRcdHRhcmdldDpudWxsLFxuXHRcdFx0fSxcblx0XHRcdFwiZ3JvdXBcIjp7XG5cdFx0XHRcdHN1YnNjcmliZXI6bnVsbCxcblx0XHRcdFx0dGFyZ2V0Om51bGwsXG5cdFx0XHR9LFxuXHRcdFx0XCJjb2x1bW5cIjp7XG5cdFx0XHRcdHN1YnNjcmliZXI6bnVsbCxcblx0XHRcdFx0dGFyZ2V0Om51bGwsXG5cdFx0XHR9LFxuXHRcdH07XG5cdFx0XG5cdFx0dGhpcy5wc2V1ZG9UcmFja2luZyA9IGZhbHNlO1xuXHR9XG5cdFxuXHRpbml0aWFsaXplKCl7XG5cdFx0dGhpcy5lbCA9IHRoaXMudGFibGUuZWxlbWVudDtcblx0XHRcblx0XHR0aGlzLmJ1aWxkTGlzdGVuZXJNYXAoKTtcblx0XHR0aGlzLmJpbmRTdWJzY3JpcHRpb25XYXRjaGVycygpO1xuXHR9XG5cdFxuXHRidWlsZExpc3RlbmVyTWFwKCl7XG5cdFx0dmFyIGxpc3RlbmVyTWFwID0ge307XG5cdFx0XG5cdFx0dGhpcy5saXN0ZW5lcnMuZm9yRWFjaCgobGlzdGVuZXIpID0+IHtcblx0XHRcdGxpc3RlbmVyTWFwW2xpc3RlbmVyXSA9IHtcblx0XHRcdFx0aGFuZGxlcjpudWxsLFxuXHRcdFx0XHRjb21wb25lbnRzOltdLFxuXHRcdFx0fTtcblx0XHR9KTtcblx0XHRcblx0XHR0aGlzLmxpc3RlbmVycyA9IGxpc3RlbmVyTWFwO1xuXHR9XG5cdFxuXHRiaW5kUHNldWRvRXZlbnRzKCl7XG5cdFx0T2JqZWN0LmtleXModGhpcy5wc2V1ZG9UcmFja2VycykuZm9yRWFjaCgoa2V5KSA9PiB7XG5cdFx0XHR0aGlzLnBzZXVkb1RyYWNrZXJzW2tleV0uc3Vic2NyaWJlciA9IHRoaXMucHNldWRvTW91c2VFbnRlci5iaW5kKHRoaXMsIGtleSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShrZXkgKyBcIi1tb3VzZW92ZXJcIiwgdGhpcy5wc2V1ZG9UcmFja2Vyc1trZXldLnN1YnNjcmliZXIpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHRoaXMucHNldWRvVHJhY2tpbmcgPSB0cnVlO1xuXHR9XG5cdFxuXHRwc2V1ZG9Nb3VzZUVudGVyKGtleSwgZSwgdGFyZ2V0KXtcblx0XHRpZih0aGlzLnBzZXVkb1RyYWNrZXJzW2tleV0udGFyZ2V0ICE9PSB0YXJnZXQpe1xuXHRcdFx0XG5cdFx0XHRpZih0aGlzLnBzZXVkb1RyYWNrZXJzW2tleV0udGFyZ2V0KXtcblx0XHRcdFx0dGhpcy5kaXNwYXRjaChrZXkgKyBcIi1tb3VzZWxlYXZlXCIsIGUsIHRoaXMucHNldWRvVHJhY2tlcnNba2V5XS50YXJnZXQpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLnBzZXVkb01vdXNlTGVhdmUoa2V5LCBlKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5wc2V1ZG9UcmFja2Vyc1trZXldLnRhcmdldCA9IHRhcmdldDtcblx0XHRcdFxuXHRcdFx0dGhpcy5kaXNwYXRjaChrZXkgKyBcIi1tb3VzZWVudGVyXCIsIGUsIHRhcmdldCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRwc2V1ZG9Nb3VzZUxlYXZlKGtleSwgZSl7XG5cdFx0dmFyIGxlYXZlTGlzdCA9IE9iamVjdC5rZXlzKHRoaXMucHNldWRvVHJhY2tlcnMpLFxuXHRcdGxpbmtlZEtleXMgPSB7XG5cdFx0XHRcInJvd1wiOltcImNlbGxcIl0sXG5cdFx0XHRcImNlbGxcIjpbXCJyb3dcIl0sXG5cdFx0fTtcblx0XHRcblx0XHRsZWF2ZUxpc3QgPSBsZWF2ZUxpc3QuZmlsdGVyKChpdGVtKSA9PiB7XG5cdFx0XHR2YXIgbGlua3MgPSBsaW5rZWRLZXlzW2tleV07XG5cdFx0XHRyZXR1cm4gaXRlbSAhPT0ga2V5ICYmICghbGlua3MgfHwgKGxpbmtzICYmICFsaW5rcy5pbmNsdWRlcyhpdGVtKSkpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdFxuXHRcdGxlYXZlTGlzdC5mb3JFYWNoKChrZXkpID0+IHtcblx0XHRcdHZhciB0YXJnZXQgPSB0aGlzLnBzZXVkb1RyYWNrZXJzW2tleV0udGFyZ2V0O1xuXHRcdFx0XG5cdFx0XHRpZih0aGlzLnBzZXVkb1RyYWNrZXJzW2tleV0udGFyZ2V0KXtcblx0XHRcdFx0dGhpcy5kaXNwYXRjaChrZXkgKyBcIi1tb3VzZWxlYXZlXCIsIGUsIHRhcmdldCk7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLnBzZXVkb1RyYWNrZXJzW2tleV0udGFyZ2V0ID0gbnVsbDtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRcblx0XG5cdGJpbmRTdWJzY3JpcHRpb25XYXRjaGVycygpe1xuXHRcdHZhciBsaXN0ZW5lcnMgPSBPYmplY3Qua2V5cyh0aGlzLmxpc3RlbmVycyksXG5cdFx0Y29tcG9uZW50cyA9IE9iamVjdC52YWx1ZXModGhpcy5jb21wb25lbnRNYXApO1xuXHRcdFxuXHRcdGZvcihsZXQgY29tcCBvZiBjb21wb25lbnRzKXtcblx0XHRcdGZvcihsZXQgbGlzdGVuZXIgb2YgbGlzdGVuZXJzKXtcblx0XHRcdFx0bGV0IGtleSA9IGNvbXAgKyBcIi1cIiArIGxpc3RlbmVyO1xuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5zdWJzY3JpcHRpb25DaGFuZ2Uoa2V5LCB0aGlzLnN1YnNjcmlwdGlvbkNoYW5nZWQuYmluZCh0aGlzLCBjb21wLCBsaXN0ZW5lcikpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHR0aGlzLnN1YnNjcmliZShcInRhYmxlLWRlc3Ryb3lcIiwgdGhpcy5jbGVhcldhdGNoZXJzLmJpbmQodGhpcykpO1xuXHR9XG5cdFxuXHRzdWJzY3JpcHRpb25DaGFuZ2VkKGNvbXBvbmVudCwga2V5LCBhZGRlZCl7XG5cdFx0dmFyIGxpc3RlbmVyID0gdGhpcy5saXN0ZW5lcnNba2V5XS5jb21wb25lbnRzLFxuXHRcdGluZGV4ID0gbGlzdGVuZXIuaW5kZXhPZihjb21wb25lbnQpLFxuXHRcdGNoYW5nZWQgPSBmYWxzZTtcblx0XHRcblx0XHRpZihhZGRlZCl7XG5cdFx0XHRpZihpbmRleCA9PT0gLTEpe1xuXHRcdFx0XHRsaXN0ZW5lci5wdXNoKGNvbXBvbmVudCk7XG5cdFx0XHRcdGNoYW5nZWQgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGlmKCF0aGlzLnN1YnNjcmliZWQoY29tcG9uZW50ICsgXCItXCIgKyBrZXkpKXtcblx0XHRcdFx0aWYoaW5kZXggPiAtMSl7XG5cdFx0XHRcdFx0bGlzdGVuZXIuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdFx0XHRjaGFuZ2VkID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRpZigoa2V5ID09PSBcIm1vdXNlZW50ZXJcIiB8fCBrZXkgPT09IFwibW91c2VsZWF2ZVwiKSAmJiAhdGhpcy5wc2V1ZG9UcmFja2luZyl7XG5cdFx0XHR0aGlzLmJpbmRQc2V1ZG9FdmVudHMoKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYoY2hhbmdlZCl7XG5cdFx0XHR0aGlzLnVwZGF0ZUV2ZW50TGlzdGVuZXJzKCk7XG5cdFx0fVxuXHR9XG5cdFxuXHR1cGRhdGVFdmVudExpc3RlbmVycygpe1xuXHRcdGZvcihsZXQga2V5IGluIHRoaXMubGlzdGVuZXJzKXtcblx0XHRcdGxldCBsaXN0ZW5lciA9IHRoaXMubGlzdGVuZXJzW2tleV07XG5cdFx0XHRcblx0XHRcdGlmKGxpc3RlbmVyLmNvbXBvbmVudHMubGVuZ3RoKXtcblx0XHRcdFx0aWYoIWxpc3RlbmVyLmhhbmRsZXIpe1xuXHRcdFx0XHRcdGxpc3RlbmVyLmhhbmRsZXIgPSB0aGlzLnRyYWNrLmJpbmQodGhpcywga2V5KTtcblx0XHRcdFx0XHR0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoa2V5LCBsaXN0ZW5lci5oYW5kbGVyKTtcblx0XHRcdFx0XHQvLyB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoa2V5LCBsaXN0ZW5lci5oYW5kbGVyLCB7cGFzc2l2ZTogdHJ1ZX0pXG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aWYobGlzdGVuZXIuaGFuZGxlcil7XG5cdFx0XHRcdFx0dGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKGtleSwgbGlzdGVuZXIuaGFuZGxlcik7XG5cdFx0XHRcdFx0bGlzdGVuZXIuaGFuZGxlciA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdHRyYWNrKHR5cGUsIGUpe1xuXHRcdHZhciBwYXRoID0gKGUuY29tcG9zZWRQYXRoICYmIGUuY29tcG9zZWRQYXRoKCkpIHx8IGUucGF0aDtcblx0XHRcblx0XHR2YXIgdGFyZ2V0cyA9IHRoaXMuZmluZFRhcmdldHMocGF0aCk7XG5cdFx0dGFyZ2V0cyA9IHRoaXMuYmluZENvbXBvbmVudHModHlwZSwgdGFyZ2V0cyk7XG5cdFx0XG5cdFx0dGhpcy50cmlnZ2VyRXZlbnRzKHR5cGUsIGUsIHRhcmdldHMpO1xuXHRcdFxuXHRcdGlmKHRoaXMucHNldWRvVHJhY2tpbmcgJiYgKHR5cGUgPT0gXCJtb3VzZW92ZXJcIiB8fCB0eXBlID09IFwibW91c2VsZWF2ZVwiKSAmJiAhT2JqZWN0LmtleXModGFyZ2V0cykubGVuZ3RoKXtcblx0XHRcdHRoaXMucHNldWRvTW91c2VMZWF2ZShcIm5vbmVcIiwgZSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRmaW5kVGFyZ2V0cyhwYXRoKXtcblx0XHR2YXIgdGFyZ2V0cyA9IHt9O1xuXHRcdFxuXHRcdGxldCBjb21wb25lbnRNYXAgPSBPYmplY3Qua2V5cyh0aGlzLmNvbXBvbmVudE1hcCk7XG5cdFx0XG5cdFx0Zm9yIChsZXQgZWwgb2YgcGF0aCkge1xuXHRcdFx0bGV0IGNsYXNzTGlzdCA9IGVsLmNsYXNzTGlzdCA/IFsuLi5lbC5jbGFzc0xpc3RdIDogW107XG5cdFx0XHRcblx0XHRcdGxldCBhYm9ydCA9IGNsYXNzTGlzdC5maWx0ZXIoKGl0ZW0pID0+IHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuYWJvcnRDbGFzc2VzLmluY2x1ZGVzKGl0ZW0pO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdGlmKGFib3J0Lmxlbmd0aCl7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRsZXQgZWxUYXJnZXRzID0gY2xhc3NMaXN0LmZpbHRlcigoaXRlbSkgPT4ge1xuXHRcdFx0XHRyZXR1cm4gY29tcG9uZW50TWFwLmluY2x1ZGVzKGl0ZW0pO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdGZvciAobGV0IHRhcmdldCBvZiBlbFRhcmdldHMpIHtcblx0XHRcdFx0aWYoIXRhcmdldHNbdGhpcy5jb21wb25lbnRNYXBbdGFyZ2V0XV0pe1xuXHRcdFx0XHRcdHRhcmdldHNbdGhpcy5jb21wb25lbnRNYXBbdGFyZ2V0XV0gPSBlbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRpZih0YXJnZXRzLmdyb3VwICYmIHRhcmdldHMuZ3JvdXAgPT09IHRhcmdldHMucm93KXtcblx0XHRcdGRlbGV0ZSB0YXJnZXRzLnJvdztcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHRhcmdldHM7XG5cdH1cblx0XG5cdGJpbmRDb21wb25lbnRzKHR5cGUsIHRhcmdldHMpe1xuXHRcdC8vZW5zdXJlIHJvdyBjb21wb25lbnQgaXMgbG9va2VkIHVwIGJlZm9yZSBjZWxsXG5cdFx0dmFyIGtleXMgPSBPYmplY3Qua2V5cyh0YXJnZXRzKS5yZXZlcnNlKCksXG5cdFx0bGlzdGVuZXIgPSB0aGlzLmxpc3RlbmVyc1t0eXBlXSxcblx0XHRtYXRjaGVzID0ge30sXG5cdFx0dGFyZ2V0TWF0Y2hlcyA9IHt9O1xuXHRcdFxuXHRcdGZvcihsZXQga2V5IG9mIGtleXMpe1xuXHRcdFx0bGV0IGNvbXBvbmVudCxcblx0XHRcdHRhcmdldCA9IHRhcmdldHNba2V5XSxcblx0XHRcdHByZXZpb3VzVGFyZ2V0ID0gdGhpcy5wcmV2aW91c1RhcmdldHNba2V5XTtcblx0XHRcdFxuXHRcdFx0aWYocHJldmlvdXNUYXJnZXQgJiYgcHJldmlvdXNUYXJnZXQudGFyZ2V0ID09PSB0YXJnZXQpe1xuXHRcdFx0XHRjb21wb25lbnQgPSBwcmV2aW91c1RhcmdldC5jb21wb25lbnQ7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHN3aXRjaChrZXkpe1xuXHRcdFx0XHRcdGNhc2UgXCJyb3dcIjpcblx0XHRcdFx0XHRjYXNlIFwiZ3JvdXBcIjpcblx0XHRcdFx0XHRcdGlmKGxpc3RlbmVyLmNvbXBvbmVudHMuaW5jbHVkZXMoXCJyb3dcIikgfHwgbGlzdGVuZXIuY29tcG9uZW50cy5pbmNsdWRlcyhcImNlbGxcIikgfHwgbGlzdGVuZXIuY29tcG9uZW50cy5pbmNsdWRlcyhcImdyb3VwXCIpKXtcblx0XHRcdFx0XHRcdFx0bGV0IHJvd3MgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0VmlzaWJsZVJvd3ModHJ1ZSk7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0Y29tcG9uZW50ID0gcm93cy5maW5kKChyb3cpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcm93LmdldEVsZW1lbnQoKSA9PT0gdGFyZ2V0O1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRpZih0YXJnZXRzW1wicm93XCJdICYmIHRhcmdldHNbXCJyb3dcIl0ucGFyZW50Tm9kZSAmJiB0YXJnZXRzW1wicm93XCJdLnBhcmVudE5vZGUuY2xvc2VzdChcIi50YWJ1bGF0b3Itcm93XCIpKXtcblx0XHRcdFx0XHRcdFx0XHR0YXJnZXRzW2tleV0gPSBmYWxzZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Y2FzZSBcImNvbHVtblwiOlxuXHRcdFx0XHRcdFx0aWYobGlzdGVuZXIuY29tcG9uZW50cy5pbmNsdWRlcyhcImNvbHVtblwiKSl7XG5cdFx0XHRcdFx0XHRcdGNvbXBvbmVudCA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5maW5kQ29sdW1uKHRhcmdldCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRjYXNlIFwiY2VsbFwiOlxuXHRcdFx0XHRcdFx0aWYobGlzdGVuZXIuY29tcG9uZW50cy5pbmNsdWRlcyhcImNlbGxcIikpe1xuXHRcdFx0XHRcdFx0XHRpZihtYXRjaGVzW1wicm93XCJdIGluc3RhbmNlb2YgUm93KXtcblx0XHRcdFx0XHRcdFx0XHRjb21wb25lbnQgPSBtYXRjaGVzW1wicm93XCJdLmZpbmRDZWxsKHRhcmdldCk7XG5cdFx0XHRcdFx0XHRcdH1lbHNlIHtcdFxuXHRcdFx0XHRcdFx0XHRcdGlmKHRhcmdldHNbXCJyb3dcIl0pe1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiRXZlbnQgVGFyZ2V0IExvb2t1cCBFcnJvciAtIFRoZSByb3cgdGhpcyBjZWxsIGlzIGF0dGFjaGVkIHRvIGNhbm5vdCBiZSBmb3VuZCwgaGFzIHRoZSB0YWJsZSBiZWVuIHJlaW5pdGlhbGl6ZWQgd2l0aG91dCBiZWluZyBkZXN0cm95ZWQgZmlyc3Q/XCIpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoY29tcG9uZW50KXtcblx0XHRcdFx0bWF0Y2hlc1trZXldID0gY29tcG9uZW50O1xuXHRcdFx0XHR0YXJnZXRNYXRjaGVzW2tleV0gPSB7XG5cdFx0XHRcdFx0dGFyZ2V0OnRhcmdldCxcblx0XHRcdFx0XHRjb21wb25lbnQ6Y29tcG9uZW50LFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHR0aGlzLnByZXZpb3VzVGFyZ2V0cyA9IHRhcmdldE1hdGNoZXM7XG5cdFx0XG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH1cblx0XG5cdHRyaWdnZXJFdmVudHModHlwZSwgZSwgdGFyZ2V0cyl7XG5cdFx0dmFyIGxpc3RlbmVyID0gdGhpcy5saXN0ZW5lcnNbdHlwZV07XG5cblx0XHRmb3IobGV0IGtleSBpbiB0YXJnZXRzKXtcblx0XHRcdGlmKHRhcmdldHNba2V5XSAmJiBsaXN0ZW5lci5jb21wb25lbnRzLmluY2x1ZGVzKGtleSkpe1xuXHRcdFx0XHR0aGlzLmRpc3BhdGNoKGtleSArIFwiLVwiICsgdHlwZSwgZSwgdGFyZ2V0c1trZXldKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdGNsZWFyV2F0Y2hlcnMoKXtcblx0XHRmb3IobGV0IGtleSBpbiB0aGlzLmxpc3RlbmVycyl7XG5cdFx0XHRsZXQgbGlzdGVuZXIgPSB0aGlzLmxpc3RlbmVyc1trZXldO1xuXHRcdFx0XG5cdFx0XHRpZihsaXN0ZW5lci5oYW5kbGVyKXtcblx0XHRcdFx0dGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKGtleSwgbGlzdGVuZXIuaGFuZGxlcik7XG5cdFx0XHRcdGxpc3RlbmVyLmhhbmRsZXIgPSBudWxsO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5jbGFzcyBDb21wb25lbnRGdW5jdGlvbkJpbmRlcntcblxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0dGhpcy50YWJsZSA9IHRhYmxlO1xuXG5cdFx0dGhpcy5iaW5kaW5ncyA9IHt9O1xuXHR9XG5cblx0YmluZCh0eXBlLCBmdW5jTmFtZSwgaGFuZGxlcil7XG5cdFx0aWYoIXRoaXMuYmluZGluZ3NbdHlwZV0pe1xuXHRcdFx0dGhpcy5iaW5kaW5nc1t0eXBlXSA9IHt9O1xuXHRcdH1cblxuXHRcdGlmKHRoaXMuYmluZGluZ3NbdHlwZV1bZnVuY05hbWVdKXtcblx0XHRcdGNvbnNvbGUud2FybihcIlVuYWJsZSB0byBiaW5kIGNvbXBvbmVudCBoYW5kbGVyLCBhIG1hdGNoaW5nIGZ1bmN0aW9uIG5hbWUgaXMgYWxyZWFkeSBib3VuZFwiLCB0eXBlLCBmdW5jTmFtZSwgaGFuZGxlcik7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5iaW5kaW5nc1t0eXBlXVtmdW5jTmFtZV0gPSBoYW5kbGVyO1xuXHRcdH1cblx0fVxuXG5cdGhhbmRsZSh0eXBlLCBjb21wb25lbnQsIG5hbWUpe1xuXHRcdGlmKHRoaXMuYmluZGluZ3NbdHlwZV0gJiYgdGhpcy5iaW5kaW5nc1t0eXBlXVtuYW1lXSAmJiB0eXBlb2YgdGhpcy5iaW5kaW5nc1t0eXBlXVtuYW1lXS5iaW5kID09PSAnZnVuY3Rpb24nKXtcblx0XHRcdHJldHVybiB0aGlzLmJpbmRpbmdzW3R5cGVdW25hbWVdLmJpbmQobnVsbCwgY29tcG9uZW50KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRpZihuYW1lICE9PSBcInRoZW5cIiAmJiB0eXBlb2YgbmFtZSA9PT0gXCJzdHJpbmdcIiAmJiAhbmFtZS5zdGFydHNXaXRoKFwiX1wiKSl7XG5cdFx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5kZWJ1Z0ludmFsaWRDb21wb25lbnRGdW5jcyl7XG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcihcIlRoZSBcIiArIHR5cGUgKyBcIiBjb21wb25lbnQgZG9lcyBub3QgaGF2ZSBhIFwiICsgbmFtZSArIFwiIGZ1bmN0aW9uLCBoYXZlIHlvdSBjaGVja2VkIHRoYXQgeW91IGhhdmUgdGhlIGNvcnJlY3QgVGFidWxhdG9yIG1vZHVsZSBpbnN0YWxsZWQ/XCIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmNsYXNzIERhdGFMb2FkZXIgZXh0ZW5kcyBDb3JlRmVhdHVyZXtcblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblx0XHRcblx0XHR0aGlzLnJlcXVlc3RPcmRlciA9IDA7IC8vcHJldmVudCByZXF1ZXN0cyBjb21pbmcgb3V0IG9mIHNlcXVlbmNlIGlmIG92ZXJyaWRkZW4gYnkgYW5vdGhlciBsb2FkIHJlcXVlc3Rcblx0XHR0aGlzLmxvYWRpbmcgPSBmYWxzZTtcblx0fVxuXHRcblx0aW5pdGlhbGl6ZSgpe31cblx0XG5cdGxvYWQoZGF0YSwgcGFyYW1zLCBjb25maWcsIHJlcGxhY2UsIHNpbGVudCwgY29sdW1uc0NoYW5nZWQpe1xuXHRcdHZhciByZXF1ZXN0Tm8gPSArK3RoaXMucmVxdWVzdE9yZGVyO1xuXG5cdFx0aWYodGhpcy50YWJsZS5kZXN0cm95ZWQpe1xuXHRcdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJkYXRhTG9hZGluZ1wiLCBkYXRhKTtcblx0XHRcblx0XHQvL3BhcnNlIGpzb24gZGF0YSB0byBhcnJheVxuXHRcdGlmIChkYXRhICYmIChkYXRhLmluZGV4T2YoXCJ7XCIpID09IDAgfHwgZGF0YS5pbmRleE9mKFwiW1wiKSA9PSAwKSl7XG5cdFx0XHRkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodGhpcy5jb25maXJtKFwiZGF0YS1sb2FkaW5nXCIsIFtkYXRhLCBwYXJhbXMsIGNvbmZpZywgc2lsZW50XSkpe1xuXHRcdFx0dGhpcy5sb2FkaW5nID0gdHJ1ZTtcblx0XHRcdFxuXHRcdFx0aWYoIXNpbGVudCl7XG5cdFx0XHRcdHRoaXMuYWxlcnRMb2FkZXIoKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Ly9nZXQgcGFyYW1zIGZvciByZXF1ZXN0XG5cdFx0XHRwYXJhbXMgPSB0aGlzLmNoYWluKFwiZGF0YS1wYXJhbXNcIiwgW2RhdGEsIGNvbmZpZywgc2lsZW50XSwgcGFyYW1zIHx8IHt9LCBwYXJhbXMgfHwge30pO1xuXHRcdFx0XG5cdFx0XHRwYXJhbXMgPSB0aGlzLm1hcFBhcmFtcyhwYXJhbXMsIHRoaXMudGFibGUub3B0aW9ucy5kYXRhU2VuZFBhcmFtcyk7XG5cdFx0XHRcblx0XHRcdHZhciByZXN1bHQgPSB0aGlzLmNoYWluKFwiZGF0YS1sb2FkXCIsIFtkYXRhLCBwYXJhbXMsIGNvbmZpZywgc2lsZW50XSwgZmFsc2UsIFByb21pc2UucmVzb2x2ZShbXSkpO1xuXHRcdFx0XG5cdFx0XHRyZXR1cm4gcmVzdWx0LnRoZW4oKHJlc3BvbnNlKSA9PiB7XG5cdFx0XHRcdGlmKCF0aGlzLnRhYmxlLmRlc3Ryb3llZCl7XG5cdFx0XHRcdFx0aWYoIUFycmF5LmlzQXJyYXkocmVzcG9uc2UpICYmIHR5cGVvZiByZXNwb25zZSA9PSBcIm9iamVjdFwiKXtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gdGhpcy5tYXBQYXJhbXMocmVzcG9uc2UsIHRoaXMub2JqZWN0SW52ZXJ0KHRoaXMudGFibGUub3B0aW9ucy5kYXRhUmVjZWl2ZVBhcmFtcykpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHR2YXIgcm93RGF0YSA9IHRoaXMuY2hhaW4oXCJkYXRhLWxvYWRlZFwiLCByZXNwb25zZSwgbnVsbCwgcmVzcG9uc2UpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKHJlcXVlc3RObyA9PSB0aGlzLnJlcXVlc3RPcmRlcil7XG5cdFx0XHRcdFx0XHR0aGlzLmNsZWFyQWxlcnQoKTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0aWYocm93RGF0YSAhPT0gZmFsc2Upe1xuXHRcdFx0XHRcdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJkYXRhTG9hZGVkXCIsIHJvd0RhdGEpO1xuXHRcdFx0XHRcdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuc2V0RGF0YShyb3dEYXRhLCAgcmVwbGFjZSwgdHlwZW9mIGNvbHVtbnNDaGFuZ2VkID09PSBcInVuZGVmaW5lZFwiID8gIXJlcGxhY2UgOiBjb2x1bW5zQ2hhbmdlZCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiRGF0YSBMb2FkIFJlc3BvbnNlIEJsb2NrZWQgLSBBbiBhY3RpdmUgZGF0YSBsb2FkIHJlcXVlc3Qgd2FzIGJsb2NrZWQgYnkgYW4gYXR0ZW1wdCB0byBjaGFuZ2UgdGFibGUgZGF0YSB3aGlsZSB0aGUgcmVxdWVzdCB3YXMgYmVpbmcgbWFkZVwiKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJEYXRhIExvYWQgUmVzcG9uc2UgQmxvY2tlZCAtIFRhYmxlIGhhcyBiZWVuIGRlc3Ryb3llZFwiKTtcblx0XHRcdFx0fVxuXHRcdFx0fSkuY2F0Y2goKGVycm9yKSA9PiB7XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJEYXRhIExvYWQgRXJyb3I6IFwiLCBlcnJvcik7XG5cdFx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcImRhdGFMb2FkRXJyb3JcIiwgZXJyb3IpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoIXNpbGVudCl7XG5cdFx0XHRcdFx0dGhpcy5hbGVydEVycm9yKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMuY2xlYXJBbGVydCgpO1xuXHRcdFx0XHR9LCB0aGlzLnRhYmxlLm9wdGlvbnMuZGF0YUxvYWRlckVycm9yVGltZW91dCk7XG5cdFx0XHR9KVxuXHRcdFx0XHQuZmluYWxseSgoKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5sb2FkaW5nID0gZmFsc2U7XG5cdFx0XHRcdH0pO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcImRhdGFMb2FkZWRcIiwgZGF0YSk7XG5cdFx0XHRcblx0XHRcdGlmKCFkYXRhKXtcblx0XHRcdFx0ZGF0YSA9IFtdO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuc2V0RGF0YShkYXRhLCByZXBsYWNlLCB0eXBlb2YgY29sdW1uc0NoYW5nZWQgPT09IFwidW5kZWZpbmVkXCIgPyAhcmVwbGFjZSA6IGNvbHVtbnNDaGFuZ2VkKTtcblx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcblx0XHR9XG5cdH1cblx0XG5cdG1hcFBhcmFtcyhwYXJhbXMsIG1hcCl7XG5cdFx0dmFyIG91dHB1dCA9IHt9O1xuXHRcdFxuXHRcdGZvcihsZXQga2V5IGluIHBhcmFtcyl7XG5cdFx0XHRvdXRwdXRbbWFwLmhhc093blByb3BlcnR5KGtleSkgPyBtYXBba2V5XSA6IGtleV0gPSBwYXJhbXNba2V5XTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXHRcblx0b2JqZWN0SW52ZXJ0KG9iail7XG5cdFx0dmFyIG91dHB1dCA9IHt9O1xuXHRcdFxuXHRcdGZvcihsZXQga2V5IGluIG9iail7XG5cdFx0XHRvdXRwdXRbb2JqW2tleV1dID0ga2V5O1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cdFxuXHRibG9ja0FjdGl2ZUxvYWQoKXtcblx0XHR0aGlzLnJlcXVlc3RPcmRlcisrO1xuXHR9XG5cdFxuXHRhbGVydExvYWRlcigpe1xuXHRcdHZhciBzaG91bGRMb2FkID0gdHlwZW9mIHRoaXMudGFibGUub3B0aW9ucy5kYXRhTG9hZGVyID09PSBcImZ1bmN0aW9uXCIgPyB0aGlzLnRhYmxlLm9wdGlvbnMuZGF0YUxvYWRlcigpIDogdGhpcy50YWJsZS5vcHRpb25zLmRhdGFMb2FkZXI7XG5cdFx0XG5cdFx0aWYoc2hvdWxkTG9hZCl7XG5cdFx0XHR0aGlzLnRhYmxlLmFsZXJ0TWFuYWdlci5hbGVydCh0aGlzLnRhYmxlLm9wdGlvbnMuZGF0YUxvYWRlckxvYWRpbmcgfHwgdGhpcy5sYW5nVGV4dChcImRhdGF8bG9hZGluZ1wiKSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRhbGVydEVycm9yKCl7XG5cdFx0dGhpcy50YWJsZS5hbGVydE1hbmFnZXIuYWxlcnQodGhpcy50YWJsZS5vcHRpb25zLmRhdGFMb2FkZXJFcnJvciB8fCB0aGlzLmxhbmdUZXh0KFwiZGF0YXxlcnJvclwiKSwgXCJlcnJvclwiKTtcblx0fVxuXHRcblx0Y2xlYXJBbGVydCgpe1xuXHRcdHRoaXMudGFibGUuYWxlcnRNYW5hZ2VyLmNsZWFyKCk7XG5cdH1cbn1cblxuY2xhc3MgRXh0ZXJuYWxFdmVudEJ1cyB7XG5cblx0Y29uc3RydWN0b3IodGFibGUsIG9wdGlvbnNMaXN0LCBkZWJ1Zyl7XG5cdFx0dGhpcy50YWJsZSA9IHRhYmxlO1xuXHRcdHRoaXMuZXZlbnRzID0ge307XG5cdFx0dGhpcy5vcHRpb25zTGlzdCA9IG9wdGlvbnNMaXN0IHx8IHt9O1xuXHRcdHRoaXMuc3Vic2NyaXB0aW9uTm90aWZpZXJzID0ge307XG5cblx0XHR0aGlzLmRpc3BhdGNoID0gZGVidWcgPyB0aGlzLl9kZWJ1Z0Rpc3BhdGNoLmJpbmQodGhpcykgOiB0aGlzLl9kaXNwYXRjaC5iaW5kKHRoaXMpO1xuXHRcdHRoaXMuZGVidWcgPSBkZWJ1Zztcblx0fVxuXG5cdHN1YnNjcmlwdGlvbkNoYW5nZShrZXksIGNhbGxiYWNrKXtcblx0XHRpZighdGhpcy5zdWJzY3JpcHRpb25Ob3RpZmllcnNba2V5XSl7XG5cdFx0XHR0aGlzLnN1YnNjcmlwdGlvbk5vdGlmaWVyc1trZXldID0gW107XG5cdFx0fVxuXG5cdFx0dGhpcy5zdWJzY3JpcHRpb25Ob3RpZmllcnNba2V5XS5wdXNoKGNhbGxiYWNrKTtcblxuXHRcdGlmKHRoaXMuc3Vic2NyaWJlZChrZXkpKXtcblx0XHRcdHRoaXMuX25vdGlmeVN1YnNjcmlwdGlvbkNoYW5nZShrZXksIHRydWUpO1xuXHRcdH1cblx0fVxuXG5cdHN1YnNjcmliZShrZXksIGNhbGxiYWNrKXtcblx0XHRpZighdGhpcy5ldmVudHNba2V5XSl7XG5cdFx0XHR0aGlzLmV2ZW50c1trZXldID0gW107XG5cdFx0fVxuXG5cdFx0dGhpcy5ldmVudHNba2V5XS5wdXNoKGNhbGxiYWNrKTtcblxuXHRcdHRoaXMuX25vdGlmeVN1YnNjcmlwdGlvbkNoYW5nZShrZXksIHRydWUpO1xuXHR9XG5cblx0dW5zdWJzY3JpYmUoa2V5LCBjYWxsYmFjayl7XG5cdFx0dmFyIGluZGV4O1xuXG5cdFx0aWYodGhpcy5ldmVudHNba2V5XSl7XG5cdFx0XHRpZihjYWxsYmFjayl7XG5cdFx0XHRcdGluZGV4ID0gdGhpcy5ldmVudHNba2V5XS5maW5kSW5kZXgoKGl0ZW0pID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gaXRlbSA9PT0gY2FsbGJhY2s7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGlmKGluZGV4ID4gLTEpe1xuXHRcdFx0XHRcdHRoaXMuZXZlbnRzW2tleV0uc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGNvbnNvbGUud2FybihcIkNhbm5vdCByZW1vdmUgZXZlbnQsIG5vIG1hdGNoaW5nIGV2ZW50IGZvdW5kOlwiLCBrZXksIGNhbGxiYWNrKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0ZGVsZXRlIHRoaXMuZXZlbnRzW2tleV07XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiQ2Fubm90IHJlbW92ZSBldmVudCwgbm8gZXZlbnRzIHNldCBvbjpcIiwga2V5KTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLl9ub3RpZnlTdWJzY3JpcHRpb25DaGFuZ2Uoa2V5LCBmYWxzZSk7XG5cdH1cblxuXHRzdWJzY3JpYmVkKGtleSl7XG5cdFx0cmV0dXJuIHRoaXMuZXZlbnRzW2tleV0gJiYgdGhpcy5ldmVudHNba2V5XS5sZW5ndGg7XG5cdH1cblxuXHRfbm90aWZ5U3Vic2NyaXB0aW9uQ2hhbmdlKGtleSwgc3Vic2NyaWJlZCl7XG5cdFx0dmFyIG5vdGlmaWVycyA9IHRoaXMuc3Vic2NyaXB0aW9uTm90aWZpZXJzW2tleV07XG5cblx0XHRpZihub3RpZmllcnMpe1xuXHRcdFx0bm90aWZpZXJzLmZvckVhY2goKGNhbGxiYWNrKT0+e1xuXHRcdFx0XHRjYWxsYmFjayhzdWJzY3JpYmVkKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdF9kaXNwYXRjaCgpe1xuXHRcdHZhciBhcmdzID0gQXJyYXkuZnJvbShhcmd1bWVudHMpLFxuXHRcdGtleSA9IGFyZ3Muc2hpZnQoKSxcblx0XHRyZXN1bHQ7XG5cblx0XHRpZih0aGlzLmV2ZW50c1trZXldKXtcblx0XHRcdHRoaXMuZXZlbnRzW2tleV0uZm9yRWFjaCgoY2FsbGJhY2ssIGkpID0+IHtcblx0XHRcdFx0bGV0IGNhbGxSZXN1bHQgPSBjYWxsYmFjay5hcHBseSh0aGlzLnRhYmxlLCBhcmdzKTtcblxuXHRcdFx0XHRpZighaSl7XG5cdFx0XHRcdFx0cmVzdWx0ID0gY2FsbFJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdF9kZWJ1Z0Rpc3BhdGNoKCl7XG5cdFx0dmFyIGFyZ3MgPSBBcnJheS5mcm9tKGFyZ3VtZW50cyksXG5cdFx0a2V5ID0gYXJnc1swXTtcblxuXHRcdGFyZ3NbMF0gPSBcIkV4dGVybmFsRXZlbnQ6XCIgKyBhcmdzWzBdO1xuXG5cdFx0aWYodGhpcy5kZWJ1ZyA9PT0gdHJ1ZSB8fCB0aGlzLmRlYnVnLmluY2x1ZGVzKGtleSkpe1xuXHRcdFx0Y29uc29sZS5sb2coLi4uYXJncyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuX2Rpc3BhdGNoKC4uLmFyZ3VtZW50cyk7XG5cdH1cbn1cblxuY2xhc3MgSW50ZXJuYWxFdmVudEJ1cyB7XG5cblx0Y29uc3RydWN0b3IoZGVidWcpe1xuXHRcdHRoaXMuZXZlbnRzID0ge307XG5cdFx0dGhpcy5zdWJzY3JpcHRpb25Ob3RpZmllcnMgPSB7fTtcblxuXHRcdHRoaXMuZGlzcGF0Y2ggPSBkZWJ1ZyA/IHRoaXMuX2RlYnVnRGlzcGF0Y2guYmluZCh0aGlzKSA6IHRoaXMuX2Rpc3BhdGNoLmJpbmQodGhpcyk7XG5cdFx0dGhpcy5jaGFpbiA9IGRlYnVnID8gdGhpcy5fZGVidWdDaGFpbi5iaW5kKHRoaXMpIDogdGhpcy5fY2hhaW4uYmluZCh0aGlzKTtcblx0XHR0aGlzLmNvbmZpcm0gPSBkZWJ1ZyA/IHRoaXMuX2RlYnVnQ29uZmlybS5iaW5kKHRoaXMpIDogdGhpcy5fY29uZmlybS5iaW5kKHRoaXMpO1xuXHRcdHRoaXMuZGVidWcgPSBkZWJ1Zztcblx0fVxuXG5cdHN1YnNjcmlwdGlvbkNoYW5nZShrZXksIGNhbGxiYWNrKXtcblx0XHRpZighdGhpcy5zdWJzY3JpcHRpb25Ob3RpZmllcnNba2V5XSl7XG5cdFx0XHR0aGlzLnN1YnNjcmlwdGlvbk5vdGlmaWVyc1trZXldID0gW107XG5cdFx0fVxuXG5cdFx0dGhpcy5zdWJzY3JpcHRpb25Ob3RpZmllcnNba2V5XS5wdXNoKGNhbGxiYWNrKTtcblxuXHRcdGlmKHRoaXMuc3Vic2NyaWJlZChrZXkpKXtcblx0XHRcdHRoaXMuX25vdGlmeVN1YnNjcmlwdGlvbkNoYW5nZShrZXksIHRydWUpO1xuXHRcdH1cblx0fVxuXG5cdHN1YnNjcmliZShrZXksIGNhbGxiYWNrLCBwcmlvcml0eSA9IDEwMDAwKXtcblx0XHRpZighdGhpcy5ldmVudHNba2V5XSl7XG5cdFx0XHR0aGlzLmV2ZW50c1trZXldID0gW107XG5cdFx0fVxuXG5cdFx0dGhpcy5ldmVudHNba2V5XS5wdXNoKHtjYWxsYmFjaywgcHJpb3JpdHl9KTtcblxuXHRcdHRoaXMuZXZlbnRzW2tleV0uc29ydCgoYSwgYikgPT4ge1xuXHRcdFx0cmV0dXJuIGEucHJpb3JpdHkgLSBiLnByaW9yaXR5O1xuXHRcdH0pO1xuXG5cdFx0dGhpcy5fbm90aWZ5U3Vic2NyaXB0aW9uQ2hhbmdlKGtleSwgdHJ1ZSk7XG5cdH1cblxuXHR1bnN1YnNjcmliZShrZXksIGNhbGxiYWNrKXtcblx0XHR2YXIgaW5kZXg7XG5cblx0XHRpZih0aGlzLmV2ZW50c1trZXldKXtcblx0XHRcdGlmKGNhbGxiYWNrKXtcblx0XHRcdFx0aW5kZXggPSB0aGlzLmV2ZW50c1trZXldLmZpbmRJbmRleCgoaXRlbSkgPT4ge1xuXHRcdFx0XHRcdHJldHVybiBpdGVtLmNhbGxiYWNrID09PSBjYWxsYmFjaztcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0aWYoaW5kZXggPiAtMSl7XG5cdFx0XHRcdFx0dGhpcy5ldmVudHNba2V5XS5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiQ2Fubm90IHJlbW92ZSBldmVudCwgbm8gbWF0Y2hpbmcgZXZlbnQgZm91bmQ6XCIsIGtleSwgY2FsbGJhY2spO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkNhbm5vdCByZW1vdmUgZXZlbnQsIG5vIGV2ZW50cyBzZXQgb246XCIsIGtleSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5fbm90aWZ5U3Vic2NyaXB0aW9uQ2hhbmdlKGtleSwgZmFsc2UpO1xuXHR9XG5cblx0c3Vic2NyaWJlZChrZXkpe1xuXHRcdHJldHVybiB0aGlzLmV2ZW50c1trZXldICYmIHRoaXMuZXZlbnRzW2tleV0ubGVuZ3RoO1xuXHR9XG5cblx0X2NoYWluKGtleSwgYXJncywgaW5pdGlhbFZhbHVlLCBmYWxsYmFjayl7XG5cdFx0dmFyIHZhbHVlID0gaW5pdGlhbFZhbHVlO1xuXG5cdFx0aWYoIUFycmF5LmlzQXJyYXkoYXJncykpe1xuXHRcdFx0YXJncyA9IFthcmdzXTtcblx0XHR9XG5cblx0XHRpZih0aGlzLnN1YnNjcmliZWQoa2V5KSl7XG5cdFx0XHR0aGlzLmV2ZW50c1trZXldLmZvckVhY2goKHN1YnNjcmliZXIsIGkpID0+IHtcblx0XHRcdFx0dmFsdWUgPSBzdWJzY3JpYmVyLmNhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3MuY29uY2F0KFt2YWx1ZV0pKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fWVsc2Uge1xuXHRcdFx0cmV0dXJuIHR5cGVvZiBmYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiID8gZmFsbGJhY2soKSA6IGZhbGxiYWNrO1xuXHRcdH1cblx0fVxuXG5cdF9jb25maXJtKGtleSwgYXJncyl7XG5cdFx0dmFyIGNvbmZpcm1lZCA9IGZhbHNlO1xuXG5cdFx0aWYoIUFycmF5LmlzQXJyYXkoYXJncykpe1xuXHRcdFx0YXJncyA9IFthcmdzXTtcblx0XHR9XG5cblx0XHRpZih0aGlzLnN1YnNjcmliZWQoa2V5KSl7XG5cdFx0XHR0aGlzLmV2ZW50c1trZXldLmZvckVhY2goKHN1YnNjcmliZXIsIGkpID0+IHtcblx0XHRcdFx0aWYoc3Vic2NyaWJlci5jYWxsYmFjay5hcHBseSh0aGlzLCBhcmdzKSl7XG5cdFx0XHRcdFx0Y29uZmlybWVkID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbmZpcm1lZDtcblx0fVxuXG5cdF9ub3RpZnlTdWJzY3JpcHRpb25DaGFuZ2Uoa2V5LCBzdWJzY3JpYmVkKXtcblx0XHR2YXIgbm90aWZpZXJzID0gdGhpcy5zdWJzY3JpcHRpb25Ob3RpZmllcnNba2V5XTtcblxuXHRcdGlmKG5vdGlmaWVycyl7XG5cdFx0XHRub3RpZmllcnMuZm9yRWFjaCgoY2FsbGJhY2spPT57XG5cdFx0XHRcdGNhbGxiYWNrKHN1YnNjcmliZWQpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0X2Rpc3BhdGNoKCl7XG5cdFx0dmFyIGFyZ3MgPSBBcnJheS5mcm9tKGFyZ3VtZW50cyksXG5cdFx0a2V5ID0gYXJncy5zaGlmdCgpO1xuXG5cdFx0aWYodGhpcy5ldmVudHNba2V5XSl7XG5cdFx0XHR0aGlzLmV2ZW50c1trZXldLmZvckVhY2goKHN1YnNjcmliZXIpID0+IHtcblx0XHRcdFx0c3Vic2NyaWJlci5jYWxsYmFjay5hcHBseSh0aGlzLCBhcmdzKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdF9kZWJ1Z0Rpc3BhdGNoKCl7XG5cdFx0dmFyIGFyZ3MgPSBBcnJheS5mcm9tKGFyZ3VtZW50cyksXG5cdFx0a2V5ID0gYXJnc1swXTtcblxuXHRcdGFyZ3NbMF0gPSBcIkludGVybmFsRXZlbnQ6XCIgKyBrZXk7XG5cblx0XHRpZih0aGlzLmRlYnVnID09PSB0cnVlIHx8IHRoaXMuZGVidWcuaW5jbHVkZXMoa2V5KSl7XG5cdFx0XHRjb25zb2xlLmxvZyguLi5hcmdzKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5fZGlzcGF0Y2goLi4uYXJndW1lbnRzKTtcblx0fVxuXG5cdF9kZWJ1Z0NoYWluKCl7XG5cdFx0dmFyIGFyZ3MgPSBBcnJheS5mcm9tKGFyZ3VtZW50cyksXG5cdFx0a2V5ID0gYXJnc1swXTtcblxuXHRcdGFyZ3NbMF0gPSBcIkludGVybmFsRXZlbnQ6XCIgKyBrZXk7XG5cblx0XHRpZih0aGlzLmRlYnVnID09PSB0cnVlIHx8IHRoaXMuZGVidWcuaW5jbHVkZXMoa2V5KSl7XG5cdFx0XHRjb25zb2xlLmxvZyguLi5hcmdzKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5fY2hhaW4oLi4uYXJndW1lbnRzKTtcblx0fVxuXG5cdF9kZWJ1Z0NvbmZpcm0oKXtcblx0XHR2YXIgYXJncyA9IEFycmF5LmZyb20oYXJndW1lbnRzKSxcblx0XHRrZXkgPSBhcmdzWzBdO1xuXG5cdFx0YXJnc1swXSA9IFwiSW50ZXJuYWxFdmVudDpcIiArIGtleTtcblxuXHRcdGlmKHRoaXMuZGVidWcgPT09IHRydWUgfHwgdGhpcy5kZWJ1Zy5pbmNsdWRlcyhrZXkpKXtcblx0XHRcdGNvbnNvbGUubG9nKC4uLmFyZ3MpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLl9jb25maXJtKC4uLmFyZ3VtZW50cyk7XG5cdH1cbn1cblxuY2xhc3MgRGVwcmVjYXRpb25BZHZpc29yIGV4dGVuZHMgQ29yZUZlYXR1cmV7XG5cdFxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXHR9XG5cdFxuXHRfd2FyblVzZXIoKXtcblx0XHRpZih0aGlzLm9wdGlvbnMoXCJkZWJ1Z0RlcHJlY2F0aW9uXCIpKXtcblx0XHRcdGNvbnNvbGUud2FybiguLi5hcmd1bWVudHMpO1xuXHRcdH1cblx0fVxuXHRcblx0Y2hlY2sob2xkT3B0aW9uLCBuZXdPcHRpb24pe1xuXHRcdHZhciBtc2cgPSBcIlwiO1xuXHRcdFxuXHRcdGlmKHR5cGVvZiB0aGlzLm9wdGlvbnMob2xkT3B0aW9uKSAhPT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRtc2cgPSBcIkRlcHJlY2F0ZWQgU2V0dXAgT3B0aW9uIC0gVXNlIG9mIHRoZSAlY1wiICsgb2xkT3B0aW9uICsgXCIlYyBvcHRpb24gaXMgbm93IGRlcHJlY2F0ZWRcIjtcblx0XHRcdFxuXHRcdFx0aWYobmV3T3B0aW9uKXtcblx0XHRcdFx0bXNnID0gbXNnICsgXCIsIFBsZWFzZSB1c2UgdGhlICVjXCIgKyBuZXdPcHRpb24gKyBcIiVjIG9wdGlvbiBpbnN0ZWFkXCI7XG5cdFx0XHRcdHRoaXMuX3dhcm5Vc2VyKG1zZywgJ2ZvbnQtd2VpZ2h0OiBib2xkOycsICdmb250LXdlaWdodDogbm9ybWFsOycsICdmb250LXdlaWdodDogYm9sZDsnLCAnZm9udC13ZWlnaHQ6IG5vcm1hbDsnKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5fd2FyblVzZXIobXNnLCAnZm9udC13ZWlnaHQ6IGJvbGQ7JywgJ2ZvbnQtd2VpZ2h0OiBub3JtYWw7Jyk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdH1cblx0XG5cdGNoZWNrTXNnKG9sZE9wdGlvbiwgbXNnKXtcblx0XHRpZih0eXBlb2YgdGhpcy5vcHRpb25zKG9sZE9wdGlvbikgIT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0dGhpcy5fd2FyblVzZXIoXCIlY0RlcHJlY2F0ZWQgU2V0dXAgT3B0aW9uIC0gVXNlIG9mIHRoZSAlY1wiICsgb2xkT3B0aW9uICsgXCIgJWMgb3B0aW9uIGlzIG5vdyBkZXByZWNhdGVkLCBcIiArIG1zZywgJ2ZvbnQtd2VpZ2h0OiBub3JtYWw7JywgJ2ZvbnQtd2VpZ2h0OiBib2xkOycsICdmb250LXdlaWdodDogbm9ybWFsOycpO1xuXHRcdFx0XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fWVsc2Uge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHR9XG5cdFxuXHRtc2cobXNnKXtcblx0XHR0aGlzLl93YXJuVXNlcihtc2cpO1xuXHR9XG59XG5cbmNsYXNzIFRhYmxlUmVnaXN0cnkge1xuXG5cdHN0YXRpYyByZWdpc3Rlcih0YWJsZSl7XG5cdFx0VGFibGVSZWdpc3RyeS50YWJsZXMucHVzaCh0YWJsZSk7XG5cdH1cblxuXHRzdGF0aWMgZGVyZWdpc3Rlcih0YWJsZSl7XG5cdFx0dmFyIGluZGV4ID0gVGFibGVSZWdpc3RyeS50YWJsZXMuaW5kZXhPZih0YWJsZSk7XG5cblx0XHRpZihpbmRleCA+IC0xKXtcblx0XHRcdFRhYmxlUmVnaXN0cnkudGFibGVzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0fVxuXHR9XG5cblx0c3RhdGljIGxvb2t1cFRhYmxlKHF1ZXJ5LCBzaWxlbnQpe1xuXHRcdHZhciByZXN1bHRzID0gW10sXG5cdFx0bWF0Y2hlcywgbWF0Y2g7XG5cblx0XHRpZih0eXBlb2YgcXVlcnkgPT09IFwic3RyaW5nXCIpe1xuXHRcdFx0bWF0Y2hlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocXVlcnkpO1xuXG5cdFx0XHRpZihtYXRjaGVzLmxlbmd0aCl7XG5cdFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBtYXRjaGVzLmxlbmd0aDsgaSsrKXtcblx0XHRcdFx0XHRtYXRjaCA9IFRhYmxlUmVnaXN0cnkubWF0Y2hFbGVtZW50KG1hdGNoZXNbaV0pO1xuXG5cdFx0XHRcdFx0aWYobWF0Y2gpe1xuXHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKG1hdGNoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH1lbHNlIGlmKCh0eXBlb2YgSFRNTEVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgcXVlcnkgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkgfHwgcXVlcnkgaW5zdGFuY2VvZiBUYWJ1bGF0b3Ipe1xuXHRcdFx0bWF0Y2ggPSBUYWJsZVJlZ2lzdHJ5Lm1hdGNoRWxlbWVudChxdWVyeSk7XG5cblx0XHRcdGlmKG1hdGNoKXtcblx0XHRcdFx0cmVzdWx0cy5wdXNoKG1hdGNoKTtcblx0XHRcdH1cblx0XHR9ZWxzZSBpZihBcnJheS5pc0FycmF5KHF1ZXJ5KSl7XG5cdFx0XHRxdWVyeS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pe1xuXHRcdFx0XHRyZXN1bHRzID0gcmVzdWx0cy5jb25jYXQoVGFibGVSZWdpc3RyeS5sb29rdXBUYWJsZShpdGVtKSk7XG5cdFx0XHR9KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRpZighc2lsZW50KXtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiVGFibGUgQ29ubmVjdGlvbiBFcnJvciAtIEludmFsaWQgU2VsZWN0b3JcIiwgcXVlcnkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0c3RhdGljIG1hdGNoRWxlbWVudChlbGVtZW50KXtcblx0XHRyZXR1cm4gVGFibGVSZWdpc3RyeS50YWJsZXMuZmluZChmdW5jdGlvbih0YWJsZSl7XG5cdFx0XHRyZXR1cm4gZWxlbWVudCBpbnN0YW5jZW9mIFRhYnVsYXRvciA/IHRhYmxlID09PSBlbGVtZW50IDogdGFibGUuZWxlbWVudCA9PT0gZWxlbWVudDtcblx0XHR9KTtcblx0fVxufVxuXG5UYWJsZVJlZ2lzdHJ5LnRhYmxlcyA9IFtdO1xuXG4vL3Jlc2l6ZSBjb2x1bW5zIHRvIGZpdCBkYXRhIHRoZXkgY29udGFpblxuZnVuY3Rpb24gZml0RGF0YShjb2x1bW5zLCBmb3JjZWQpe1xuXHRpZihmb3JjZWQpe1xuXHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5yZW5kZXJlci5yZWluaXRpYWxpemVDb2x1bW5XaWR0aHMoY29sdW1ucyk7XG5cdH1cblx0XG5cdGlmKHRoaXMudGFibGUub3B0aW9ucy5yZXNwb25zaXZlTGF5b3V0ICYmIHRoaXMudGFibGUubW9kRXhpc3RzKFwicmVzcG9uc2l2ZUxheW91dFwiLCB0cnVlKSl7XG5cdFx0dGhpcy50YWJsZS5tb2R1bGVzLnJlc3BvbnNpdmVMYXlvdXQudXBkYXRlKCk7XG5cdH1cbn1cblxuLy9yZXNpemUgY29sdW1ucyB0byBmaXQgZGF0YSB0aGV5IGNvbnRhaW4gYW5kIHN0cmV0Y2ggcm93IHRvIGZpbGwgdGFibGUsIGFsc28gdXNlZCBmb3IgZml0RGF0YVRhYmxlXG5mdW5jdGlvbiBmaXREYXRhR2VuZXJhbChjb2x1bW5zLCBmb3JjZWQpe1xuXHRjb2x1bW5zLmZvckVhY2goZnVuY3Rpb24oY29sdW1uKXtcblx0XHRjb2x1bW4ucmVpbml0aWFsaXplV2lkdGgoKTtcblx0fSk7XG5cblx0aWYodGhpcy50YWJsZS5vcHRpb25zLnJlc3BvbnNpdmVMYXlvdXQgJiYgdGhpcy50YWJsZS5tb2RFeGlzdHMoXCJyZXNwb25zaXZlTGF5b3V0XCIsIHRydWUpKXtcblx0XHR0aGlzLnRhYmxlLm1vZHVsZXMucmVzcG9uc2l2ZUxheW91dC51cGRhdGUoKTtcblx0fVxufVxuXG4vL3Jlc2l6ZSBjb2x1bW5zIHRvIGZpdCBkYXRhIHRoZSBjb250YWluIGFuZCBzdHJldGNoIGxhc3QgY29sdW1uIHRvIGZpbGwgdGFibGVcbmZ1bmN0aW9uIGZpdERhdGFTdHJldGNoKGNvbHVtbnMsIGZvcmNlZCl7XG5cdHZhciBjb2xzV2lkdGggPSAwLFxuXHR0YWJsZVdpZHRoID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQuY2xpZW50V2lkdGgsXG5cdGdhcCA9IDAsXG5cdGxhc3RDb2wgPSBmYWxzZTtcblxuXHRjb2x1bW5zLmZvckVhY2goKGNvbHVtbiwgaSkgPT4ge1xuXHRcdGlmKCFjb2x1bW4ud2lkdGhGaXhlZCl7XG5cdFx0XHRjb2x1bW4ucmVpbml0aWFsaXplV2lkdGgoKTtcblx0XHR9XG5cblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucmVzcG9uc2l2ZUxheW91dCA/IGNvbHVtbi5tb2R1bGVzLnJlc3BvbnNpdmUudmlzaWJsZSA6IGNvbHVtbi52aXNpYmxlKXtcblx0XHRcdGxhc3RDb2wgPSBjb2x1bW47XG5cdFx0fVxuXG5cdFx0aWYoY29sdW1uLnZpc2libGUpe1xuXHRcdFx0Y29sc1dpZHRoICs9IGNvbHVtbi5nZXRXaWR0aCgpO1xuXHRcdH1cblx0fSk7XG5cblx0aWYobGFzdENvbCl7XG5cdFx0Z2FwID0gdGFibGVXaWR0aCAtIGNvbHNXaWR0aCArIGxhc3RDb2wuZ2V0V2lkdGgoKTtcblxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5yZXNwb25zaXZlTGF5b3V0ICYmIHRoaXMudGFibGUubW9kRXhpc3RzKFwicmVzcG9uc2l2ZUxheW91dFwiLCB0cnVlKSl7XG5cdFx0XHRsYXN0Q29sLnNldFdpZHRoKDApO1xuXHRcdFx0dGhpcy50YWJsZS5tb2R1bGVzLnJlc3BvbnNpdmVMYXlvdXQudXBkYXRlKCk7XG5cdFx0fVxuXG5cdFx0aWYoZ2FwID4gMCl7XG5cdFx0XHRsYXN0Q29sLnNldFdpZHRoKGdhcCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0bGFzdENvbC5yZWluaXRpYWxpemVXaWR0aCgpO1xuXHRcdH1cblx0fWVsc2Uge1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5yZXNwb25zaXZlTGF5b3V0ICYmIHRoaXMudGFibGUubW9kRXhpc3RzKFwicmVzcG9uc2l2ZUxheW91dFwiLCB0cnVlKSl7XG5cdFx0XHR0aGlzLnRhYmxlLm1vZHVsZXMucmVzcG9uc2l2ZUxheW91dC51cGRhdGUoKTtcblx0XHR9XG5cdH1cbn1cblxuLy9yZXNpemUgY29sdW1ucyB0byBmaXRcbmZ1bmN0aW9uIGZpdENvbHVtbnMoY29sdW1ucywgZm9yY2VkKXtcblx0dmFyIHRvdGFsV2lkdGggPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDsgLy90YWJsZSBlbGVtZW50IHdpZHRoXG5cdHZhciBmaXhlZFdpZHRoID0gMDsgLy90b3RhbCB3aWR0aCBvZiBjb2x1bW5zIHdpdGggYSBkZWZpbmVkIHdpZHRoXG5cdHZhciBmbGV4V2lkdGggPSAwOyAvL3RvdGFsIHdpZHRoIGF2YWlsYWJsZSB0byBmbGV4aWJsZSBjb2x1bW5zXG5cdHZhciBmbGV4R3Jvd1VuaXRzID0gMDsgLy90b3RhbCBudW1iZXIgb2Ygd2lkdGhHcm93IGJsb2NrcyBhY3Jvc3MgYWxsIGNvbHVtbnNcblx0dmFyIGZsZXhDb2xXaWR0aCA9IDA7IC8vZGVzaXJlZCB3aWR0aCBvZiBmbGV4aWJsZSBjb2x1bW5zXG5cdHZhciBmbGV4Q29sdW1ucyA9IFtdOyAvL2FycmF5IG9mIGZsZXhpYmxlIHdpZHRoIGNvbHVtbnNcblx0dmFyIGZpeGVkU2hyaW5rQ29sdW1ucyA9IFtdOyAvL2FycmF5IG9mIGZpeGVkIHdpZHRoIGNvbHVtbnMgdGhhdCBjYW4gc2hyaW5rXG5cdHZhciBmbGV4U2hyaW5rVW5pdHMgPSAwOyAvL3RvdGFsIG51bWJlciBvZiB3aWR0aFNocmluayBibG9ja3MgYWNyb3NzIGFsbCBjb2x1bW5zXG5cdHZhciBvdmVyZmxvd1dpZHRoID0gMDsgLy9ob3Jpem9udGFsIG92ZXJmbG93IHdpZHRoXG5cdHZhciBnYXBGaWxsID0gMDsgLy9udW1iZXIgb2YgcGl4ZWxzIHRvIGJlIGFkZGVkIHRvIGZpbmFsIGNvbHVtbiB0byBjbG9zZSBhbmQgaGFsZiBwaXhlbCBnYXBzXG5cblx0ZnVuY3Rpb24gY2FsY1dpZHRoKHdpZHRoKXtcblx0XHR2YXIgY29sV2lkdGg7XG5cblx0XHRpZih0eXBlb2Yod2lkdGgpID09IFwic3RyaW5nXCIpe1xuXHRcdFx0aWYod2lkdGguaW5kZXhPZihcIiVcIikgPiAtMSl7XG5cdFx0XHRcdGNvbFdpZHRoID0gKHRvdGFsV2lkdGggLyAxMDApICogcGFyc2VJbnQod2lkdGgpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb2xXaWR0aCA9IHBhcnNlSW50KHdpZHRoKTtcblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRjb2xXaWR0aCA9IHdpZHRoO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb2xXaWR0aDtcblx0fVxuXG5cdC8vZW5zdXJlIGNvbHVtbnMgcmVzaXplIHRvIHRha2UgdXAgdGhlIGNvcnJlY3QgYW1vdW50IG9mIHNwYWNlXG5cdGZ1bmN0aW9uIHNjYWxlQ29sdW1ucyhjb2x1bW5zLCBmcmVlU3BhY2UsIGNvbFdpZHRoLCBzaHJpbmtDb2xzKXtcblx0XHR2YXIgb3ZlcnNpemVDb2xzID0gW10sXG5cdFx0b3ZlcnNpemVTcGFjZSA9IDAsXG5cdFx0cmVtYWluaW5nU3BhY2UgPSAwLFxuXHRcdG5leHRDb2xXaWR0aCA9IDAsXG5cdFx0cmVtYWluaW5nRmxleEdyb3dVbml0cyA9IGZsZXhHcm93VW5pdHMsXG5cdFx0Z2FwID0gMCxcblx0XHRjaGFuZ2VVbml0cyA9IDAsXG5cdFx0dW5kZXJzaXplQ29scyA9IFtdO1xuXG5cdFx0ZnVuY3Rpb24gY2FsY0dyb3coY29sKXtcblx0XHRcdHJldHVybiAoY29sV2lkdGggKiAoY29sLmNvbHVtbi5kZWZpbml0aW9uLndpZHRoR3JvdyB8fCAxKSk7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gY2FsY1Nocmluayhjb2wpe1xuXHRcdFx0cmV0dXJuICAoY2FsY1dpZHRoKGNvbC53aWR0aCkgLSAoY29sV2lkdGggKiAoY29sLmNvbHVtbi5kZWZpbml0aW9uLndpZHRoU2hyaW5rIHx8IDApKSk7XG5cdFx0fVxuXG5cdFx0Y29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uKGNvbCwgaSl7XG5cdFx0XHR2YXIgd2lkdGggPSBzaHJpbmtDb2xzID8gY2FsY1Nocmluayhjb2wpIDogY2FsY0dyb3coY29sKTtcblx0XHRcdGlmKGNvbC5jb2x1bW4ubWluV2lkdGggPj0gd2lkdGgpe1xuXHRcdFx0XHRvdmVyc2l6ZUNvbHMucHVzaChjb2wpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRpZihjb2wuY29sdW1uLm1heFdpZHRoICYmIGNvbC5jb2x1bW4ubWF4V2lkdGggPCB3aWR0aCl7XG5cdFx0XHRcdFx0Y29sLndpZHRoID0gY29sLmNvbHVtbi5tYXhXaWR0aDtcblx0XHRcdFx0XHRmcmVlU3BhY2UgLT0gY29sLmNvbHVtbi5tYXhXaWR0aDtcblxuXHRcdFx0XHRcdHJlbWFpbmluZ0ZsZXhHcm93VW5pdHMgLT0gc2hyaW5rQ29scyA/IChjb2wuY29sdW1uLmRlZmluaXRpb24ud2lkdGhTaHJpbmsgfHwgMSkgOiAoY29sLmNvbHVtbi5kZWZpbml0aW9uLndpZHRoR3JvdyB8fCAxKTtcblxuXHRcdFx0XHRcdGlmKHJlbWFpbmluZ0ZsZXhHcm93VW5pdHMpe1xuXHRcdFx0XHRcdFx0Y29sV2lkdGggPSBNYXRoLmZsb29yKGZyZWVTcGFjZS9yZW1haW5pbmdGbGV4R3Jvd1VuaXRzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHR1bmRlcnNpemVDb2xzLnB1c2goY29sKTtcblx0XHRcdFx0XHRjaGFuZ2VVbml0cyArPSBzaHJpbmtDb2xzID8gKGNvbC5jb2x1bW4uZGVmaW5pdGlvbi53aWR0aFNocmluayB8fCAxKSA6IChjb2wuY29sdW1uLmRlZmluaXRpb24ud2lkdGhHcm93IHx8IDEpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRpZihvdmVyc2l6ZUNvbHMubGVuZ3RoKXtcblx0XHRcdG92ZXJzaXplQ29scy5mb3JFYWNoKGZ1bmN0aW9uKGNvbCl7XG5cdFx0XHRcdG92ZXJzaXplU3BhY2UgKz0gc2hyaW5rQ29scyA/ICBjb2wud2lkdGggLSBjb2wuY29sdW1uLm1pbldpZHRoIDogY29sLmNvbHVtbi5taW5XaWR0aDtcblx0XHRcdFx0Y29sLndpZHRoID0gY29sLmNvbHVtbi5taW5XaWR0aDtcblx0XHRcdH0pO1xuXG5cdFx0XHRyZW1haW5pbmdTcGFjZSA9IGZyZWVTcGFjZSAtIG92ZXJzaXplU3BhY2U7XG5cblx0XHRcdG5leHRDb2xXaWR0aCA9IGNoYW5nZVVuaXRzID8gTWF0aC5mbG9vcihyZW1haW5pbmdTcGFjZS9jaGFuZ2VVbml0cykgOiByZW1haW5pbmdTcGFjZTtcblxuXHRcdFx0Z2FwID0gc2NhbGVDb2x1bW5zKHVuZGVyc2l6ZUNvbHMsIHJlbWFpbmluZ1NwYWNlLCBuZXh0Q29sV2lkdGgsIHNocmlua0NvbHMpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGdhcCA9IGNoYW5nZVVuaXRzID8gZnJlZVNwYWNlIC0gKE1hdGguZmxvb3IoZnJlZVNwYWNlL2NoYW5nZVVuaXRzKSAqIGNoYW5nZVVuaXRzKSA6IGZyZWVTcGFjZTtcblxuXHRcdFx0dW5kZXJzaXplQ29scy5mb3JFYWNoKGZ1bmN0aW9uKGNvbHVtbil7XG5cdFx0XHRcdGNvbHVtbi53aWR0aCA9IHNocmlua0NvbHMgPyBjYWxjU2hyaW5rKGNvbHVtbikgOiBjYWxjR3Jvdyhjb2x1bW4pO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGdhcDtcblx0fVxuXG5cdGlmKHRoaXMudGFibGUub3B0aW9ucy5yZXNwb25zaXZlTGF5b3V0ICYmIHRoaXMudGFibGUubW9kRXhpc3RzKFwicmVzcG9uc2l2ZUxheW91dFwiLCB0cnVlKSl7XG5cdFx0dGhpcy50YWJsZS5tb2R1bGVzLnJlc3BvbnNpdmVMYXlvdXQudXBkYXRlKCk7XG5cdH1cblxuXHQvL2FkanVzdCBmb3IgdmVydGljYWwgc2Nyb2xsYmFyIGlmIHByZXNlbnRcblx0aWYodGhpcy50YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQuc2Nyb2xsSGVpZ2h0ID4gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQuY2xpZW50SGVpZ2h0KXtcblx0XHR0b3RhbFdpZHRoIC09IHRoaXMudGFibGUucm93TWFuYWdlci5lbGVtZW50Lm9mZnNldFdpZHRoIC0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQuY2xpZW50V2lkdGg7XG5cdH1cblxuXHRjb2x1bW5zLmZvckVhY2goZnVuY3Rpb24oY29sdW1uKXtcblx0XHR2YXIgd2lkdGgsIG1pbldpZHRoLCBjb2xXaWR0aDtcblxuXHRcdGlmKGNvbHVtbi52aXNpYmxlKXtcblxuXHRcdFx0d2lkdGggPSBjb2x1bW4uZGVmaW5pdGlvbi53aWR0aDtcblx0XHRcdG1pbldpZHRoID0gIHBhcnNlSW50KGNvbHVtbi5taW5XaWR0aCk7XG5cblx0XHRcdGlmKHdpZHRoKXtcblxuXHRcdFx0XHRjb2xXaWR0aCA9IGNhbGNXaWR0aCh3aWR0aCk7XG5cblx0XHRcdFx0Zml4ZWRXaWR0aCArPSBjb2xXaWR0aCA+IG1pbldpZHRoID8gY29sV2lkdGggOiBtaW5XaWR0aDtcblxuXHRcdFx0XHRpZihjb2x1bW4uZGVmaW5pdGlvbi53aWR0aFNocmluayl7XG5cdFx0XHRcdFx0Zml4ZWRTaHJpbmtDb2x1bW5zLnB1c2goe1xuXHRcdFx0XHRcdFx0Y29sdW1uOmNvbHVtbixcblx0XHRcdFx0XHRcdHdpZHRoOmNvbFdpZHRoID4gbWluV2lkdGggPyBjb2xXaWR0aCA6IG1pbldpZHRoXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0ZmxleFNocmlua1VuaXRzICs9IGNvbHVtbi5kZWZpbml0aW9uLndpZHRoU2hyaW5rO1xuXHRcdFx0XHR9XG5cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0ZmxleENvbHVtbnMucHVzaCh7XG5cdFx0XHRcdFx0Y29sdW1uOmNvbHVtbixcblx0XHRcdFx0XHR3aWR0aDowLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0ZmxleEdyb3dVbml0cyArPSBjb2x1bW4uZGVmaW5pdGlvbi53aWR0aEdyb3cgfHwgMTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdC8vY2FsY3VsYXRlIGF2YWlsYWJsZSBzcGFjZVxuXHRmbGV4V2lkdGggPSB0b3RhbFdpZHRoIC0gZml4ZWRXaWR0aDtcblxuXHQvL2NhbGN1bGF0ZSBjb3JyZWN0IGNvbHVtbiBzaXplXG5cdGZsZXhDb2xXaWR0aCA9IE1hdGguZmxvb3IoZmxleFdpZHRoIC8gZmxleEdyb3dVbml0cyk7XG5cblx0Ly9nZW5lcmF0ZSBjb2x1bW4gd2lkdGhzXG5cdGdhcEZpbGwgPSBzY2FsZUNvbHVtbnMoZmxleENvbHVtbnMsIGZsZXhXaWR0aCwgZmxleENvbFdpZHRoLCBmYWxzZSk7XG5cblx0Ly9pbmNyZWFzZSB3aWR0aCBvZiBsYXN0IGNvbHVtbiB0byBhY2NvdW50IGZvciByb3VuZGluZyBlcnJvcnNcblx0aWYoZmxleENvbHVtbnMubGVuZ3RoICYmIGdhcEZpbGwgPiAwKXtcblx0XHRmbGV4Q29sdW1uc1tmbGV4Q29sdW1ucy5sZW5ndGgtMV0ud2lkdGggKz0gZ2FwRmlsbDtcblx0fVxuXG5cdC8vY2FsY3VsYXRlIHNwYWNlIGZvciBjb2x1bW5zIHRvIGJlIHNocnVuayBpbnRvXG5cdGZsZXhDb2x1bW5zLmZvckVhY2goZnVuY3Rpb24oY29sKXtcblx0XHRmbGV4V2lkdGggLT0gY29sLndpZHRoO1xuXHR9KTtcblxuXHRvdmVyZmxvd1dpZHRoID0gTWF0aC5hYnMoZ2FwRmlsbCkgKyBmbGV4V2lkdGg7XG5cblx0Ly9zaHJpbmsgb3ZlcnNpemUgY29sdW1ucyBpZiB0aGVyZSBpcyBubyBhdmFpbGFibGUgc3BhY2Vcblx0aWYob3ZlcmZsb3dXaWR0aCA+IDAgJiYgZmxleFNocmlua1VuaXRzKXtcblx0XHRnYXBGaWxsID0gc2NhbGVDb2x1bW5zKGZpeGVkU2hyaW5rQ29sdW1ucywgb3ZlcmZsb3dXaWR0aCwgTWF0aC5mbG9vcihvdmVyZmxvd1dpZHRoIC8gZmxleFNocmlua1VuaXRzKSwgdHJ1ZSk7XG5cdH1cblxuXHQvL2RlY3JlYXNlIHdpZHRoIG9mIGxhc3QgY29sdW1uIHRvIGFjY291bnQgZm9yIHJvdW5kaW5nIGVycm9yc1xuXHRpZihnYXBGaWxsICYmIGZpeGVkU2hyaW5rQ29sdW1ucy5sZW5ndGgpe1xuXHRcdGZpeGVkU2hyaW5rQ29sdW1uc1tmaXhlZFNocmlua0NvbHVtbnMubGVuZ3RoLTFdLndpZHRoIC09IGdhcEZpbGw7XG5cdH1cblxuXHRmbGV4Q29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uKGNvbCl7XG5cdFx0Y29sLmNvbHVtbi5zZXRXaWR0aChjb2wud2lkdGgpO1xuXHR9KTtcblxuXHRmaXhlZFNocmlua0NvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihjb2wpe1xuXHRcdGNvbC5jb2x1bW4uc2V0V2lkdGgoY29sLndpZHRoKTtcblx0fSk7XG59XG5cbnZhciBkZWZhdWx0TW9kZXMgPSB7XG5cdGZpdERhdGE6Zml0RGF0YSxcblx0Zml0RGF0YUZpbGw6Zml0RGF0YUdlbmVyYWwsXG5cdGZpdERhdGFUYWJsZTpmaXREYXRhR2VuZXJhbCxcblx0Zml0RGF0YVN0cmV0Y2g6Zml0RGF0YVN0cmV0Y2gsXG5cdGZpdENvbHVtbnM6Zml0Q29sdW1ucyAsXG59O1xuXG5jbGFzcyBMYXlvdXQgZXh0ZW5kcyBNb2R1bGV7XG5cblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlLCBcImxheW91dFwiKTtcblxuXHRcdHRoaXMubW9kZSA9IG51bGw7XG5cblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJsYXlvdXRcIiwgXCJmaXREYXRhXCIpOyAvL2xheW91dCB0eXBlXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwibGF5b3V0Q29sdW1uc09uTmV3RGF0YVwiLCBmYWxzZSk7IC8vdXBkYXRlIGNvbHVtbiB3aWR0aHMgb24gc2V0RGF0YVxuXG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcIndpZHRoR3Jvd1wiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwid2lkdGhTaHJpbmtcIik7XG5cdH1cblxuXHQvL2luaXRpYWxpemUgbGF5b3V0IHN5c3RlbVxuXHRpbml0aWFsaXplKCl7XG5cdFx0dmFyIGxheW91dCA9IHRoaXMudGFibGUub3B0aW9ucy5sYXlvdXQ7XG5cblx0XHRpZihMYXlvdXQubW9kZXNbbGF5b3V0XSl7XG5cdFx0XHR0aGlzLm1vZGUgPSBsYXlvdXQ7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiTGF5b3V0IEVycm9yIC0gaW52YWxpZCBtb2RlIHNldCwgZGVmYXVsdGluZyB0byAnZml0RGF0YScgOiBcIiArIGxheW91dCk7XG5cdFx0XHR0aGlzLm1vZGUgPSAnZml0RGF0YSc7XG5cdFx0fVxuXG5cdFx0dGhpcy50YWJsZS5lbGVtZW50LnNldEF0dHJpYnV0ZShcInRhYnVsYXRvci1sYXlvdXRcIiwgdGhpcy5tb2RlKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1pbml0XCIsIHRoaXMuaW5pdGlhbGl6ZUNvbHVtbi5iaW5kKHRoaXMpKTtcblx0fVxuXG5cdGluaXRpYWxpemVDb2x1bW4oY29sdW1uKXtcblx0XHRpZihjb2x1bW4uZGVmaW5pdGlvbi53aWR0aEdyb3cpe1xuXHRcdFx0Y29sdW1uLmRlZmluaXRpb24ud2lkdGhHcm93ID0gTnVtYmVyKGNvbHVtbi5kZWZpbml0aW9uLndpZHRoR3Jvdyk7XG5cdFx0fVxuXHRcdGlmKGNvbHVtbi5kZWZpbml0aW9uLndpZHRoU2hyaW5rKXtcblx0XHRcdGNvbHVtbi5kZWZpbml0aW9uLndpZHRoU2hyaW5rID0gTnVtYmVyKGNvbHVtbi5kZWZpbml0aW9uLndpZHRoU2hyaW5rKTtcblx0XHR9XG5cdH1cblxuXHRnZXRNb2RlKCl7XG5cdFx0cmV0dXJuIHRoaXMubW9kZTtcblx0fVxuXG5cdC8vdHJpZ2dlciB0YWJsZSBsYXlvdXRcblx0bGF5b3V0KGRhdGFDaGFuZ2VkKXtcblx0XHR0aGlzLmRpc3BhdGNoKFwibGF5b3V0LXJlZnJlc2hpbmdcIik7XG5cdFx0TGF5b3V0Lm1vZGVzW3RoaXMubW9kZV0uY2FsbCh0aGlzLCB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuY29sdW1uc0J5SW5kZXgsIGRhdGFDaGFuZ2VkKTtcblx0XHR0aGlzLmRpc3BhdGNoKFwibGF5b3V0LXJlZnJlc2hlZFwiKTtcblx0fVxufVxuXG5MYXlvdXQubW9kdWxlTmFtZSA9IFwibGF5b3V0XCI7XG5cbi8vbG9hZCBkZWZhdWx0c1xuTGF5b3V0Lm1vZGVzID0gZGVmYXVsdE1vZGVzO1xuXG52YXIgZGVmYXVsdExhbmdzID0ge1xuXHRcImRlZmF1bHRcIjp7IC8vaG9sZCBkZWZhdWx0IGxvY2FsZSB0ZXh0XG5cdFx0XCJncm91cHNcIjp7XG5cdFx0XHRcIml0ZW1cIjpcIml0ZW1cIixcblx0XHRcdFwiaXRlbXNcIjpcIml0ZW1zXCIsXG5cdFx0fSxcblx0XHRcImNvbHVtbnNcIjp7XG5cdFx0fSxcblx0XHRcImRhdGFcIjp7XG5cdFx0XHRcImxvYWRpbmdcIjpcIkxvYWRpbmdcIixcblx0XHRcdFwiZXJyb3JcIjpcIkVycm9yXCIsXG5cdFx0fSxcblx0XHRcInBhZ2luYXRpb25cIjp7XG5cdFx0XHRcInBhZ2Vfc2l6ZVwiOlwiUGFnZSBTaXplXCIsXG5cdFx0XHRcInBhZ2VfdGl0bGVcIjpcIlNob3cgUGFnZVwiLFxuXHRcdFx0XCJmaXJzdFwiOlwiRmlyc3RcIixcblx0XHRcdFwiZmlyc3RfdGl0bGVcIjpcIkZpcnN0IFBhZ2VcIixcblx0XHRcdFwibGFzdFwiOlwiTGFzdFwiLFxuXHRcdFx0XCJsYXN0X3RpdGxlXCI6XCJMYXN0IFBhZ2VcIixcblx0XHRcdFwicHJldlwiOlwiUHJldlwiLFxuXHRcdFx0XCJwcmV2X3RpdGxlXCI6XCJQcmV2IFBhZ2VcIixcblx0XHRcdFwibmV4dFwiOlwiTmV4dFwiLFxuXHRcdFx0XCJuZXh0X3RpdGxlXCI6XCJOZXh0IFBhZ2VcIixcblx0XHRcdFwiYWxsXCI6XCJBbGxcIixcblx0XHRcdFwiY291bnRlclwiOntcblx0XHRcdFx0XCJzaG93aW5nXCI6IFwiU2hvd2luZ1wiLFxuXHRcdFx0XHRcIm9mXCI6IFwib2ZcIixcblx0XHRcdFx0XCJyb3dzXCI6IFwicm93c1wiLFxuXHRcdFx0XHRcInBhZ2VzXCI6IFwicGFnZXNcIixcblx0XHRcdH1cblx0XHR9LFxuXHRcdFwiaGVhZGVyRmlsdGVyc1wiOntcblx0XHRcdFwiZGVmYXVsdFwiOlwiZmlsdGVyIGNvbHVtbi4uLlwiLFxuXHRcdFx0XCJjb2x1bW5zXCI6e31cblx0XHR9XG5cdH0sXG59O1xuXG5jbGFzcyBMb2NhbGl6ZSBleHRlbmRzIE1vZHVsZXtcblxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXG5cdFx0dGhpcy5sb2NhbGUgPSBcImRlZmF1bHRcIjsgLy9jdXJyZW50IGxvY2FsZVxuXHRcdHRoaXMubGFuZyA9IGZhbHNlOyAvL2N1cnJlbnQgbGFuZ3VhZ2Vcblx0XHR0aGlzLmJpbmRpbmdzID0ge307IC8vdXBkYXRlIGV2ZW50cyB0byBjYWxsIHdoZW4gbG9jYWxlIGlzIGNoYW5nZWRcblx0XHR0aGlzLmxhbmdMaXN0ID0ge307XG5cblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJsb2NhbGVcIiwgZmFsc2UpOyAvL2N1cnJlbnQgc3lzdGVtIGxhbmd1YWdlXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwibGFuZ3NcIiwge30pO1xuXHR9XG5cblx0aW5pdGlhbGl6ZSgpe1xuXHRcdHRoaXMubGFuZ0xpc3QgPSBIZWxwZXJzLmRlZXBDbG9uZShMb2NhbGl6ZS5sYW5ncyk7XG5cblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuY29sdW1uRGVmYXVsdHMuaGVhZGVyRmlsdGVyUGxhY2Vob2xkZXIgIT09IGZhbHNlKXtcblx0XHRcdHRoaXMuc2V0SGVhZGVyRmlsdGVyUGxhY2Vob2xkZXIodGhpcy50YWJsZS5vcHRpb25zLmNvbHVtbkRlZmF1bHRzLmhlYWRlckZpbHRlclBsYWNlaG9sZGVyKTtcblx0XHR9XG5cblx0XHRmb3IobGV0IGxvY2FsZSBpbiB0aGlzLnRhYmxlLm9wdGlvbnMubGFuZ3Mpe1xuXHRcdFx0dGhpcy5pbnN0YWxsTGFuZyhsb2NhbGUsIHRoaXMudGFibGUub3B0aW9ucy5sYW5nc1tsb2NhbGVdKTtcblx0XHR9XG5cblx0XHR0aGlzLnNldExvY2FsZSh0aGlzLnRhYmxlLm9wdGlvbnMubG9jYWxlKTtcblxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwic2V0TG9jYWxlXCIsIHRoaXMuc2V0TG9jYWxlLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiZ2V0TG9jYWxlXCIsIHRoaXMuZ2V0TG9jYWxlLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiZ2V0TGFuZ1wiLCB0aGlzLmdldExhbmcuYmluZCh0aGlzKSk7XG5cdH1cblxuXHQvL3NldCBoZWFkZXIgcGxhY2Vob2xkZXJcblx0c2V0SGVhZGVyRmlsdGVyUGxhY2Vob2xkZXIocGxhY2Vob2xkZXIpe1xuXHRcdHRoaXMubGFuZ0xpc3QuZGVmYXVsdC5oZWFkZXJGaWx0ZXJzLmRlZmF1bHQgPSBwbGFjZWhvbGRlcjtcblx0fVxuXG5cdC8vc2V0dXAgYSBsYW5nIGRlc2NyaXB0aW9uIG9iamVjdFxuXHRpbnN0YWxsTGFuZyhsb2NhbGUsIGxhbmcpe1xuXHRcdGlmKHRoaXMubGFuZ0xpc3RbbG9jYWxlXSl7XG5cdFx0XHR0aGlzLl9zZXRMYW5nUHJvcCh0aGlzLmxhbmdMaXN0W2xvY2FsZV0sIGxhbmcpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMubGFuZ0xpc3RbbG9jYWxlXSA9IGxhbmc7XG5cdFx0fVxuXHR9XG5cblx0X3NldExhbmdQcm9wKGxhbmcsIHZhbHVlcyl7XG5cdFx0Zm9yKGxldCBrZXkgaW4gdmFsdWVzKXtcblx0XHRcdGlmKGxhbmdba2V5XSAmJiB0eXBlb2YgbGFuZ1trZXldID09IFwib2JqZWN0XCIpe1xuXHRcdFx0XHR0aGlzLl9zZXRMYW5nUHJvcChsYW5nW2tleV0sIHZhbHVlc1trZXldKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0bGFuZ1trZXldID0gdmFsdWVzW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly9zZXQgY3VycmVudCBsb2NhbGVcblx0c2V0TG9jYWxlKGRlc2lyZWRMb2NhbGUpe1xuXHRcdGRlc2lyZWRMb2NhbGUgPSBkZXNpcmVkTG9jYWxlIHx8IFwiZGVmYXVsdFwiO1xuXG5cdFx0Ly9maWxsIGluIGFueSBtYXRjaGluZyBsYW5ndWFnZSB2YWx1ZXNcblx0XHRmdW5jdGlvbiB0cmF2ZXJzZUxhbmcodHJhbnMsIHBhdGgpe1xuXHRcdFx0Zm9yKHZhciBwcm9wIGluIHRyYW5zKXtcblx0XHRcdFx0aWYodHlwZW9mIHRyYW5zW3Byb3BdID09IFwib2JqZWN0XCIpe1xuXHRcdFx0XHRcdGlmKCFwYXRoW3Byb3BdKXtcblx0XHRcdFx0XHRcdHBhdGhbcHJvcF0gPSB7fTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dHJhdmVyc2VMYW5nKHRyYW5zW3Byb3BdLCBwYXRoW3Byb3BdKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHBhdGhbcHJvcF0gPSB0cmFuc1twcm9wXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vZGV0ZXJtaW5pbmcgY29ycmVjdCBsb2NhbGUgdG8gbG9hZFxuXHRcdGlmKGRlc2lyZWRMb2NhbGUgPT09IHRydWUgJiYgbmF2aWdhdG9yLmxhbmd1YWdlKXtcblx0XHRcdC8vZ2V0IGxvY2FsIGZyb20gc3lzdGVtXG5cdFx0XHRkZXNpcmVkTG9jYWxlID0gbmF2aWdhdG9yLmxhbmd1YWdlLnRvTG93ZXJDYXNlKCk7XG5cdFx0fVxuXG5cdFx0aWYoZGVzaXJlZExvY2FsZSl7XG5cdFx0XHQvL2lmIGxvY2FsZSBpcyBub3Qgc2V0LCBjaGVjayBmb3IgbWF0Y2hpbmcgdG9wIGxldmVsIGxvY2FsZSBlbHNlIHVzZSBkZWZhdWx0XG5cdFx0XHRpZighdGhpcy5sYW5nTGlzdFtkZXNpcmVkTG9jYWxlXSl7XG5cdFx0XHRcdGxldCBwcmVmaXggPSBkZXNpcmVkTG9jYWxlLnNwbGl0KFwiLVwiKVswXTtcblxuXHRcdFx0XHRpZih0aGlzLmxhbmdMaXN0W3ByZWZpeF0pe1xuXHRcdFx0XHRcdGNvbnNvbGUud2FybihcIkxvY2FsaXphdGlvbiBFcnJvciAtIEV4YWN0IG1hdGNoaW5nIGxvY2FsZSBub3QgZm91bmQsIHVzaW5nIGNsb3Nlc3QgbWF0Y2g6IFwiLCBkZXNpcmVkTG9jYWxlLCBwcmVmaXgpO1xuXHRcdFx0XHRcdGRlc2lyZWRMb2NhbGUgPSBwcmVmaXg7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJMb2NhbGl6YXRpb24gRXJyb3IgLSBNYXRjaGluZyBsb2NhbGUgbm90IGZvdW5kLCB1c2luZyBkZWZhdWx0OiBcIiwgZGVzaXJlZExvY2FsZSk7XG5cdFx0XHRcdFx0ZGVzaXJlZExvY2FsZSA9IFwiZGVmYXVsdFwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy5sb2NhbGUgPSBkZXNpcmVkTG9jYWxlO1xuXG5cdFx0Ly9sb2FkIGRlZmF1bHQgbGFuZyB0ZW1wbGF0ZVxuXHRcdHRoaXMubGFuZyA9IEhlbHBlcnMuZGVlcENsb25lKHRoaXMubGFuZ0xpc3QuZGVmYXVsdCB8fCB7fSk7XG5cblx0XHRpZihkZXNpcmVkTG9jYWxlICE9IFwiZGVmYXVsdFwiKXtcblx0XHRcdHRyYXZlcnNlTGFuZyh0aGlzLmxhbmdMaXN0W2Rlc2lyZWRMb2NhbGVdLCB0aGlzLmxhbmcpO1xuXHRcdH1cblxuXHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcImxvY2FsaXplZFwiLCB0aGlzLmxvY2FsZSwgdGhpcy5sYW5nKTtcblxuXHRcdHRoaXMuX2V4ZWN1dGVCaW5kaW5ncygpO1xuXHR9XG5cblx0Ly9nZXQgY3VycmVudCBsb2NhbGVcblx0Z2V0TG9jYWxlKGxvY2FsZSl7XG5cdFx0cmV0dXJuIHRoaXMubG9jYWxlO1xuXHR9XG5cblx0Ly9nZXQgbGFuZyBvYmplY3QgZm9yIGdpdmVuIGxvY2FsIG9yIGN1cnJlbnQgaWYgbm9uZSBwcm92aWRlZFxuXHRnZXRMYW5nKGxvY2FsZSl7XG5cdFx0cmV0dXJuIGxvY2FsZSA/IHRoaXMubGFuZ0xpc3RbbG9jYWxlXSA6IHRoaXMubGFuZztcblx0fVxuXG5cdC8vZ2V0IHRleHQgZm9yIGN1cnJlbnQgbG9jYWxlXG5cdGdldFRleHQocGF0aCwgdmFsdWUpe1xuXHRcdHZhciBmaWxsUGF0aCA9IHZhbHVlID8gcGF0aCArIFwifFwiICsgdmFsdWUgOiBwYXRoLFxuXHRcdHBhdGhBcnJheSA9IGZpbGxQYXRoLnNwbGl0KFwifFwiKSxcblx0XHR0ZXh0ID0gdGhpcy5fZ2V0TGFuZ0VsZW1lbnQocGF0aEFycmF5LCB0aGlzLmxvY2FsZSk7XG5cblx0XHQvLyBpZih0ZXh0ID09PSBmYWxzZSl7XG5cdFx0Ly8gXHRjb25zb2xlLndhcm4oXCJMb2NhbGl6YXRpb24gRXJyb3IgLSBNYXRjaGluZyBsb2NhbGl6ZWQgdGV4dCBub3QgZm91bmQgZm9yIGdpdmVuIHBhdGg6IFwiLCBwYXRoKTtcblx0XHQvLyB9XG5cblx0XHRyZXR1cm4gdGV4dCB8fCBcIlwiO1xuXHR9XG5cblx0Ly90cmF2ZXJzZSBsYW5ncyBvYmplY3QgYW5kIGZpbmQgbG9jYWxpemVkIGNvcHlcblx0X2dldExhbmdFbGVtZW50KHBhdGgsIGxvY2FsZSl7XG5cdFx0dmFyIHJvb3QgPSB0aGlzLmxhbmc7XG5cblx0XHRwYXRoLmZvckVhY2goZnVuY3Rpb24obGV2ZWwpe1xuXHRcdFx0dmFyIHJvb3RQYXRoO1xuXG5cdFx0XHRpZihyb290KXtcblx0XHRcdFx0cm9vdFBhdGggPSByb290W2xldmVsXTtcblxuXHRcdFx0XHRpZih0eXBlb2Ygcm9vdFBhdGggIT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRcdFx0cm9vdCA9IHJvb3RQYXRoO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0cm9vdCA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gcm9vdDtcblx0fVxuXG5cdC8vc2V0IHVwZGF0ZSBiaW5kaW5nXG5cdGJpbmQocGF0aCwgY2FsbGJhY2spe1xuXHRcdGlmKCF0aGlzLmJpbmRpbmdzW3BhdGhdKXtcblx0XHRcdHRoaXMuYmluZGluZ3NbcGF0aF0gPSBbXTtcblx0XHR9XG5cblx0XHR0aGlzLmJpbmRpbmdzW3BhdGhdLnB1c2goY2FsbGJhY2spO1xuXG5cdFx0Y2FsbGJhY2sodGhpcy5nZXRUZXh0KHBhdGgpLCB0aGlzLmxhbmcpO1xuXHR9XG5cblx0Ly9pdGVyYXRlIHRocm91Z2ggYmluZGluZ3MgYW5kIHRyaWdnZXIgdXBkYXRlc1xuXHRfZXhlY3V0ZUJpbmRpbmdzKCl7XG5cdFx0Zm9yKGxldCBwYXRoIGluIHRoaXMuYmluZGluZ3Mpe1xuXHRcdFx0dGhpcy5iaW5kaW5nc1twYXRoXS5mb3JFYWNoKChiaW5kaW5nKSA9PiB7XG5cdFx0XHRcdGJpbmRpbmcodGhpcy5nZXRUZXh0KHBhdGgpLCB0aGlzLmxhbmcpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG59XG5cbkxvY2FsaXplLm1vZHVsZU5hbWUgPSBcImxvY2FsaXplXCI7XG5cbi8vbG9hZCBkZWZhdWx0c1xuTG9jYWxpemUubGFuZ3MgPSBkZWZhdWx0TGFuZ3M7XG5cbmNsYXNzIENvbW1zIGV4dGVuZHMgTW9kdWxle1xuXG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cdH1cblxuXHRpbml0aWFsaXplKCl7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJ0YWJsZUNvbW1zXCIsIHRoaXMucmVjZWl2ZS5iaW5kKHRoaXMpKTtcblx0fVxuXG5cdGdldENvbm5lY3Rpb25zKHNlbGVjdG9ycyl7XG5cdFx0dmFyIGNvbm5lY3Rpb25zID0gW10sXG5cdFx0Y29ubmVjdGlvbjtcblxuXHRcdGNvbm5lY3Rpb24gPSBUYWJsZVJlZ2lzdHJ5Lmxvb2t1cFRhYmxlKHNlbGVjdG9ycyk7XG5cblx0XHRjb25uZWN0aW9uLmZvckVhY2goKGNvbikgPT57XG5cdFx0XHRpZih0aGlzLnRhYmxlICE9PSBjb24pe1xuXHRcdFx0XHRjb25uZWN0aW9ucy5wdXNoKGNvbik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gY29ubmVjdGlvbnM7XG5cdH1cblxuXHRzZW5kKHNlbGVjdG9ycywgbW9kdWxlLCBhY3Rpb24sIGRhdGEpe1xuXHRcdHZhciBjb25uZWN0aW9ucyA9IHRoaXMuZ2V0Q29ubmVjdGlvbnMoc2VsZWN0b3JzKTtcblxuXHRcdGNvbm5lY3Rpb25zLmZvckVhY2goKGNvbm5lY3Rpb24pID0+IHtcblx0XHRcdGNvbm5lY3Rpb24udGFibGVDb21tcyh0aGlzLnRhYmxlLmVsZW1lbnQsIG1vZHVsZSwgYWN0aW9uLCBkYXRhKTtcblx0XHR9KTtcblxuXHRcdGlmKCFjb25uZWN0aW9ucy5sZW5ndGggJiYgc2VsZWN0b3JzKXtcblx0XHRcdGNvbnNvbGUud2FybihcIlRhYmxlIENvbm5lY3Rpb24gRXJyb3IgLSBObyB0YWJsZXMgbWF0Y2hpbmcgc2VsZWN0b3IgZm91bmRcIiwgc2VsZWN0b3JzKTtcblx0XHR9XG5cdH1cblxuXHRyZWNlaXZlKHRhYmxlLCBtb2R1bGUsIGFjdGlvbiwgZGF0YSl7XG5cdFx0aWYodGhpcy50YWJsZS5tb2RFeGlzdHMobW9kdWxlKSl7XG5cdFx0XHRyZXR1cm4gdGhpcy50YWJsZS5tb2R1bGVzW21vZHVsZV0uY29tbXNSZWNlaXZlZCh0YWJsZSwgYWN0aW9uLCBkYXRhKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJJbnRlci10YWJsZSBDb21tcyBFcnJvciAtIG5vIHN1Y2ggbW9kdWxlOlwiLCBtb2R1bGUpO1xuXHRcdH1cblx0fVxufVxuXG5Db21tcy5tb2R1bGVOYW1lID0gXCJjb21tc1wiO1xuXG52YXIgY29yZU1vZHVsZXMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5cdF9fcHJvdG9fXzogbnVsbCxcblx0TGF5b3V0TW9kdWxlOiBMYXlvdXQsXG5cdExvY2FsaXplTW9kdWxlOiBMb2NhbGl6ZSxcblx0Q29tbXNNb2R1bGU6IENvbW1zXG59KTtcblxuY2xhc3MgTW9kdWxlQmluZGVyIHtcblx0XG5cdGNvbnN0cnVjdG9yKHRhYnVsYXRvciwgbW9kdWxlcyl7XG5cdFx0dGhpcy5iaW5kU3RhdGljRnVuY3Rpb25hbGl0eSh0YWJ1bGF0b3IpO1xuXHRcdHRoaXMuYmluZE1vZHVsZXModGFidWxhdG9yLCBjb3JlTW9kdWxlcywgdHJ1ZSk7XG5cdFx0XG5cdFx0aWYobW9kdWxlcyl7XG5cdFx0XHR0aGlzLmJpbmRNb2R1bGVzKHRhYnVsYXRvciwgbW9kdWxlcyk7XG5cdFx0fVxuXHR9XG5cdFxuXHRiaW5kU3RhdGljRnVuY3Rpb25hbGl0eSh0YWJ1bGF0b3Ipe1xuXHRcdHRhYnVsYXRvci5tb2R1bGVCaW5kaW5ncyA9IHt9O1xuXHRcdFxuXHRcdHRhYnVsYXRvci5leHRlbmRNb2R1bGUgPSBmdW5jdGlvbihuYW1lLCBwcm9wZXJ0eSwgdmFsdWVzKXtcblx0XHRcdGlmKHRhYnVsYXRvci5tb2R1bGVCaW5kaW5nc1tuYW1lXSl7XG5cdFx0XHRcdHZhciBzb3VyY2UgPSB0YWJ1bGF0b3IubW9kdWxlQmluZGluZ3NbbmFtZV1bcHJvcGVydHldO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoc291cmNlKXtcblx0XHRcdFx0XHRpZih0eXBlb2YgdmFsdWVzID09IFwib2JqZWN0XCIpe1xuXHRcdFx0XHRcdFx0Zm9yKGxldCBrZXkgaW4gdmFsdWVzKXtcblx0XHRcdFx0XHRcdFx0c291cmNlW2tleV0gPSB2YWx1ZXNba2V5XTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJNb2R1bGUgRXJyb3IgLSBJbnZhbGlkIHZhbHVlIHR5cGUsIGl0IG11c3QgYmUgYW4gb2JqZWN0XCIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGNvbnNvbGUud2FybihcIk1vZHVsZSBFcnJvciAtIHByb3BlcnR5IGRvZXMgbm90IGV4aXN0OlwiLCBwcm9wZXJ0eSk7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiTW9kdWxlIEVycm9yIC0gbW9kdWxlIGRvZXMgbm90IGV4aXN0OlwiLCBuYW1lKTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdFxuXHRcdHRhYnVsYXRvci5yZWdpc3Rlck1vZHVsZSA9IGZ1bmN0aW9uKG1vZHVsZXMpe1xuXHRcdFx0aWYoIUFycmF5LmlzQXJyYXkobW9kdWxlcykpe1xuXHRcdFx0XHRtb2R1bGVzID0gW21vZHVsZXNdO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRtb2R1bGVzLmZvckVhY2goKG1vZCkgPT4ge1xuXHRcdFx0XHR0YWJ1bGF0b3IucmVnaXN0ZXJNb2R1bGVCaW5kaW5nKG1vZCk7XG5cdFx0XHR9KTtcblx0XHR9O1xuXHRcdFxuXHRcdHRhYnVsYXRvci5yZWdpc3Rlck1vZHVsZUJpbmRpbmcgPSBmdW5jdGlvbihtb2Qpe1xuXHRcdFx0dGFidWxhdG9yLm1vZHVsZUJpbmRpbmdzW21vZC5tb2R1bGVOYW1lXSA9IG1vZDtcblx0XHR9O1xuXHRcdFxuXHRcdHRhYnVsYXRvci5maW5kVGFibGUgPSBmdW5jdGlvbihxdWVyeSl7XG5cdFx0XHR2YXIgcmVzdWx0cyA9IFRhYmxlUmVnaXN0cnkubG9va3VwVGFibGUocXVlcnksIHRydWUpO1xuXHRcdFx0cmV0dXJuIEFycmF5LmlzQXJyYXkocmVzdWx0cykgJiYgIXJlc3VsdHMubGVuZ3RoID8gZmFsc2UgOiByZXN1bHRzO1xuXHRcdH07XG5cdFx0XG5cdFx0Ly9lbnN1cmUgdGhhdCBtb2R1bGUgYXJlIGJvdW5kIHRvIGluc3RhbnRpYXRlZCBmdW5jdGlvblxuXHRcdHRhYnVsYXRvci5wcm90b3R5cGUuYmluZE1vZHVsZXMgPSBmdW5jdGlvbigpe1xuXHRcdFx0dmFyIG9yZGVyZWRTdGFydE1vZHMgPSBbXSxcblx0XHRcdG9yZGVyZWRFbmRNb2RzID0gW10sXG5cdFx0XHR1bk9yZGVyZWRNb2RzID0gW107XG5cdFx0XHRcblx0XHRcdHRoaXMubW9kdWxlcyA9IHt9O1xuXHRcdFx0XG5cdFx0XHRmb3IodmFyIG5hbWUgaW4gdGFidWxhdG9yLm1vZHVsZUJpbmRpbmdzKXtcblx0XHRcdFx0bGV0IG1vZCA9IHRhYnVsYXRvci5tb2R1bGVCaW5kaW5nc1tuYW1lXTtcblx0XHRcdFx0bGV0IG1vZHVsZSA9IG5ldyBtb2QodGhpcyk7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLm1vZHVsZXNbbmFtZV0gPSBtb2R1bGU7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihtb2QucHJvdG90eXBlLm1vZHVsZUNvcmUpe1xuXHRcdFx0XHRcdHRoaXMubW9kdWxlc0NvcmUucHVzaChtb2R1bGUpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0aWYobW9kLm1vZHVsZUluaXRPcmRlcil7XG5cdFx0XHRcdFx0XHRpZihtb2QubW9kdWxlSW5pdE9yZGVyIDwgMCl7XG5cdFx0XHRcdFx0XHRcdG9yZGVyZWRTdGFydE1vZHMucHVzaChtb2R1bGUpO1xuXHRcdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0XHRvcmRlcmVkRW5kTW9kcy5wdXNoKG1vZHVsZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHR1bk9yZGVyZWRNb2RzLnB1c2gobW9kdWxlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0b3JkZXJlZFN0YXJ0TW9kcy5zb3J0KChhLCBiKSA9PiBhLm1vZHVsZUluaXRPcmRlciA+IGIubW9kdWxlSW5pdE9yZGVyID8gMSA6IC0xKTtcblx0XHRcdG9yZGVyZWRFbmRNb2RzLnNvcnQoKGEsIGIpID0+IGEubW9kdWxlSW5pdE9yZGVyID4gYi5tb2R1bGVJbml0T3JkZXIgPyAxIDogLTEpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLm1vZHVsZXNSZWd1bGFyID0gb3JkZXJlZFN0YXJ0TW9kcy5jb25jYXQodW5PcmRlcmVkTW9kcy5jb25jYXQob3JkZXJlZEVuZE1vZHMpKTtcblx0XHR9O1xuXHR9XG5cdFxuXHRiaW5kTW9kdWxlcyh0YWJ1bGF0b3IsIG1vZHVsZXMsIGNvcmUpe1xuXHRcdHZhciBtb2RzID0gT2JqZWN0LnZhbHVlcyhtb2R1bGVzKTtcblx0XHRcblx0XHRpZihjb3JlKXtcblx0XHRcdG1vZHMuZm9yRWFjaCgobW9kKSA9PiB7XG5cdFx0XHRcdG1vZC5wcm90b3R5cGUubW9kdWxlQ29yZSA9IHRydWU7XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0XG5cdFx0dGFidWxhdG9yLnJlZ2lzdGVyTW9kdWxlKG1vZHMpO1xuXHR9XG59XG5cbmNsYXNzIEFsZXJ0IGV4dGVuZHMgQ29yZUZlYXR1cmV7XG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG4gICAgICAgIFxuXHRcdHRoaXMuZWxlbWVudCA9IHRoaXMuX2NyZWF0ZUFsZXJ0RWxlbWVudCgpO1xuXHRcdHRoaXMubXNnRWxlbWVudCA9IHRoaXMuX2NyZWF0ZU1zZ0VsZW1lbnQoKTtcblx0XHR0aGlzLnR5cGUgPSBudWxsO1xuICAgICAgICBcblx0XHR0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5tc2dFbGVtZW50KTtcblx0fVxuICAgIFxuXHRfY3JlYXRlQWxlcnRFbGVtZW50KCl7XG5cdFx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRlbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWFsZXJ0XCIpO1xuXHRcdHJldHVybiBlbDtcblx0fVxuICAgIFxuXHRfY3JlYXRlTXNnRWxlbWVudCgpe1xuXHRcdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0ZWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1hbGVydC1tc2dcIik7XG5cdFx0ZWwuc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcImFsZXJ0XCIpO1xuXHRcdHJldHVybiBlbDtcblx0fVxuICAgIFxuXHRfdHlwZUNsYXNzKCl7XG5cdFx0cmV0dXJuIFwidGFidWxhdG9yLWFsZXJ0LXN0YXRlLVwiICsgdGhpcy50eXBlO1xuXHR9XG4gICAgXG5cdGFsZXJ0KGNvbnRlbnQsIHR5cGUgPSBcIm1zZ1wiKXtcblx0XHRpZihjb250ZW50KXtcblx0XHRcdHRoaXMuY2xlYXIoKTtcbiAgICAgICAgICAgIFxuXHRcdFx0dGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgICAgIFxuXHRcdFx0d2hpbGUodGhpcy5tc2dFbGVtZW50LmZpcnN0Q2hpbGQpIHRoaXMubXNnRWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLm1zZ0VsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICBcblx0XHRcdHRoaXMubXNnRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX3R5cGVDbGFzcygpKTtcbiAgICAgICAgICAgIFxuXHRcdFx0aWYodHlwZW9mIGNvbnRlbnQgPT09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRcdGNvbnRlbnQgPSBjb250ZW50KCk7XG5cdFx0XHR9XG4gICAgICAgICAgICBcblx0XHRcdGlmKGNvbnRlbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCl7XG5cdFx0XHRcdHRoaXMubXNnRWxlbWVudC5hcHBlbmRDaGlsZChjb250ZW50KTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5tc2dFbGVtZW50LmlubmVySFRNTCA9IGNvbnRlbnQ7XG5cdFx0XHR9XG4gICAgICAgICAgICBcblx0XHRcdHRoaXMudGFibGUuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmVsZW1lbnQpO1xuXHRcdH1cblx0fVxuICAgIFxuXHRjbGVhcigpe1xuXHRcdGlmKHRoaXMuZWxlbWVudC5wYXJlbnROb2RlKXtcblx0XHRcdHRoaXMuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCk7XG5cdFx0fVxuICAgICAgICBcblx0XHR0aGlzLm1zZ0VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl90eXBlQ2xhc3MoKSk7XG5cdH1cbn1cblxuY2xhc3MgVGFidWxhdG9yIHtcblx0XG5cdGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpe1xuXHRcdFxuXHRcdHRoaXMub3B0aW9ucyA9IHt9O1xuXHRcdFxuXHRcdHRoaXMuY29sdW1uTWFuYWdlciA9IG51bGw7IC8vIGhvbGQgQ29sdW1uIE1hbmFnZXJcblx0XHR0aGlzLnJvd01hbmFnZXIgPSBudWxsOyAvL2hvbGQgUm93IE1hbmFnZXJcblx0XHR0aGlzLmZvb3Rlck1hbmFnZXIgPSBudWxsOyAvL2hvbGRlciBGb290ZXIgTWFuYWdlclxuXHRcdHRoaXMuYWxlcnRNYW5hZ2VyID0gbnVsbDsgLy9ob2xkIEFsZXJ0IE1hbmFnZXJcblx0XHR0aGlzLnZkb21Ib3ogID0gbnVsbDsgLy9ob2xkZXIgaG9yaXpvbnRhbCB2aXJ0dWFsIGRvbVxuXHRcdHRoaXMuZXh0ZXJuYWxFdmVudHMgPSBudWxsOyAvL2hhbmRsZSBleHRlcm5hbCBldmVudCBtZXNzYWdpbmdcblx0XHR0aGlzLmV2ZW50QnVzID0gbnVsbDsgLy9oYW5kbGUgaW50ZXJuYWwgZXZlbnQgbWVzc2FnaW5nXG5cdFx0dGhpcy5pbnRlcmFjdGlvbk1vbml0b3IgPSBmYWxzZTsgLy90cmFjayB1c2VyIGludGVyYWN0aW9uXG5cdFx0dGhpcy5icm93c2VyID0gXCJcIjsgLy9ob2xkIGN1cnJlbnQgYnJvd3NlciB0eXBlXG5cdFx0dGhpcy5icm93c2VyU2xvdyA9IGZhbHNlOyAvL2hhbmRsZSByZWR1Y2VkIGZ1bmN0aW9uYWxpdHkgZm9yIHNsb3dlciBicm93c2Vyc1xuXHRcdHRoaXMuYnJvd3Nlck1vYmlsZSA9IGZhbHNlOyAvL2NoZWNrIGlmIHJ1bm5pbmcgb24gbW9iaWxlLCBwcmV2ZW50IHJlc2l6ZSBjYW5jZWxsaW5nIGVkaXQgb24ga2V5Ym9hcmQgYXBwZWFyYW5jZVxuXHRcdHRoaXMucnRsID0gZmFsc2U7IC8vY2hlY2sgaWYgdGhlIHRhYmxlIGlzIGluIFJUTCBtb2RlXG5cdFx0dGhpcy5vcmlnaW5hbEVsZW1lbnQgPSBudWxsOyAvL2hvbGQgb3JpZ2luYWwgdGFibGUgZWxlbWVudCBpZiBpdCBoYXMgYmVlbiByZXBsYWNlZFxuXHRcdFxuXHRcdHRoaXMuY29tcG9uZW50RnVuY3Rpb25CaW5kZXIgPSBuZXcgQ29tcG9uZW50RnVuY3Rpb25CaW5kZXIodGhpcyk7IC8vYmluZCBjb21wb25lbnQgZnVuY3Rpb25zXG5cdFx0dGhpcy5kYXRhTG9hZGVyID0gZmFsc2U7IC8vYmluZCBjb21wb25lbnQgZnVuY3Rpb25zXG5cdFx0XG5cdFx0dGhpcy5tb2R1bGVzID0ge307IC8vaG9sZCBhbGwgbW9kdWxlcyBib3VuZCB0byB0aGlzIHRhYmxlXG5cdFx0dGhpcy5tb2R1bGVzQ29yZSA9IFtdOyAvL2hvbGQgY29yZSBtb2R1bGVzIGJvdW5kIHRvIHRoaXMgdGFibGUgKGZvciBpbml0aWFsaXphdGlvbiBwdXJwb3Nlcylcblx0XHR0aGlzLm1vZHVsZXNSZWd1bGFyID0gW107IC8vaG9sZCByZWd1bGFyIG1vZHVsZXMgYm91bmQgdG8gdGhpcyB0YWJsZSAoZm9yIGluaXRpYWxpemF0aW9uIHB1cnBvc2VzKVxuXHRcdFxuXHRcdHRoaXMuZGVwcmVjYXRpb25BZHZpc29yID0gbmV3IERlcHJlY2F0aW9uQWR2aXNvcih0aGlzKTtcblx0XHR0aGlzLm9wdGlvbnNMaXN0ID0gbmV3IE9wdGlvbnNMaXN0KHRoaXMsIFwidGFibGUgY29uc3RydWN0b3JcIik7XG5cdFx0XG5cdFx0dGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuXHRcdHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG5cdFx0XG5cdFx0aWYodGhpcy5pbml0aWFsaXplRWxlbWVudChlbGVtZW50KSl7XG5cdFx0XHRcblx0XHRcdHRoaXMuaW5pdGlhbGl6ZUNvcmVTeXN0ZW1zKG9wdGlvbnMpO1xuXHRcdFx0XG5cdFx0XHQvL2RlbGF5IHRhYmxlIGNyZWF0aW9uIHRvIGFsbG93IGV2ZW50IGJpbmRpbmdzIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBjb25zdHJ1Y3RvclxuXHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdHRoaXMuX2NyZWF0ZSgpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdFxuXHRcdFRhYmxlUmVnaXN0cnkucmVnaXN0ZXIodGhpcyk7IC8vcmVnaXN0ZXIgdGFibGUgZm9yIGludGVyLWRldmljZSBjb21tdW5pY2F0aW9uXG5cdH1cblx0XG5cdGluaXRpYWxpemVFbGVtZW50KGVsZW1lbnQpe1xuXHRcdGlmKHR5cGVvZiBIVE1MRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlbGVtZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpe1xuXHRcdFx0dGhpcy5lbGVtZW50ID0gZWxlbWVudDtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1lbHNlIGlmKHR5cGVvZiBlbGVtZW50ID09PSBcInN0cmluZ1wiKXtcblx0XHRcdHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWxlbWVudCk7XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMuZWxlbWVudCl7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKFwiVGFidWxhdG9yIENyZWF0aW9uIEVycm9yIC0gbm8gZWxlbWVudCBmb3VuZCBtYXRjaGluZyBzZWxlY3RvcjogXCIsIGVsZW1lbnQpO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS5lcnJvcihcIlRhYnVsYXRvciBDcmVhdGlvbiBFcnJvciAtIEludmFsaWQgZWxlbWVudCBwcm92aWRlZDpcIiwgZWxlbWVudCk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cdFxuXHRpbml0aWFsaXplQ29yZVN5c3RlbXMob3B0aW9ucyl7XG5cdFx0dGhpcy5jb2x1bW5NYW5hZ2VyID0gbmV3IENvbHVtbk1hbmFnZXIodGhpcyk7XG5cdFx0dGhpcy5yb3dNYW5hZ2VyID0gbmV3IFJvd01hbmFnZXIodGhpcyk7XG5cdFx0dGhpcy5mb290ZXJNYW5hZ2VyID0gbmV3IEZvb3Rlck1hbmFnZXIodGhpcyk7XG5cdFx0dGhpcy5kYXRhTG9hZGVyID0gbmV3IERhdGFMb2FkZXIodGhpcyk7XG5cdFx0dGhpcy5hbGVydE1hbmFnZXIgPSBuZXcgQWxlcnQodGhpcyk7XG5cdFx0XG5cdFx0dGhpcy5iaW5kTW9kdWxlcygpO1xuXHRcdFxuXHRcdHRoaXMub3B0aW9ucyA9IHRoaXMub3B0aW9uc0xpc3QuZ2VuZXJhdGUoVGFidWxhdG9yLmRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcblx0XHRcblx0XHR0aGlzLl9jbGVhck9iamVjdFBvaW50ZXJzKCk7XG5cdFx0XG5cdFx0dGhpcy5fbWFwRGVwcmVjYXRlZEZ1bmN0aW9uYWxpdHkoKTtcblx0XHRcblx0XHR0aGlzLmV4dGVybmFsRXZlbnRzID0gbmV3IEV4dGVybmFsRXZlbnRCdXModGhpcywgdGhpcy5vcHRpb25zLCB0aGlzLm9wdGlvbnMuZGVidWdFdmVudHNFeHRlcm5hbCk7XG5cdFx0dGhpcy5ldmVudEJ1cyA9IG5ldyBJbnRlcm5hbEV2ZW50QnVzKHRoaXMub3B0aW9ucy5kZWJ1Z0V2ZW50c0ludGVybmFsKTtcblx0XHRcblx0XHR0aGlzLmludGVyYWN0aW9uTW9uaXRvciA9IG5ldyBJbnRlcmFjdGlvbk1hbmFnZXIodGhpcyk7XG5cdFx0XG5cdFx0dGhpcy5kYXRhTG9hZGVyLmluaXRpYWxpemUoKTtcblx0XHQvLyB0aGlzLmNvbHVtbk1hbmFnZXIuaW5pdGlhbGl6ZSgpO1xuXHRcdC8vIHRoaXMucm93TWFuYWdlci5pbml0aWFsaXplKCk7XG5cdFx0dGhpcy5mb290ZXJNYW5hZ2VyLmluaXRpYWxpemUoKTtcblx0fVxuXHRcblx0Ly9jb252ZXJ0IGRlcHJlY2F0ZWQgZnVuY3Rpb25hbGl0eSB0byBuZXcgZnVuY3Rpb25zXG5cdF9tYXBEZXByZWNhdGVkRnVuY3Rpb25hbGl0eSgpe1xuXHRcdC8vYWxsIHByZXZpb3VzbHkgZGVwcmVjYXRlZCBmdW5jdGlvbmFsaXR5IHJlbW92ZWQgaW4gdGhlIDUuMCByZWxlYXNlXG5cdH1cblx0XG5cdF9jbGVhclNlbGVjdGlvbigpe1xuXHRcdFxuXHRcdHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWJsb2NrLXNlbGVjdFwiKTtcblx0XHRcblx0XHRpZiAod2luZG93LmdldFNlbGVjdGlvbikge1xuXHRcdFx0aWYgKHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5lbXB0eSkgeyAgLy8gQ2hyb21lXG5cdFx0XHRcdHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5lbXB0eSgpO1xuXHRcdFx0fSBlbHNlIGlmICh3aW5kb3cuZ2V0U2VsZWN0aW9uKCkucmVtb3ZlQWxsUmFuZ2VzKSB7ICAvLyBGaXJlZm94XG5cdFx0XHRcdHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5yZW1vdmVBbGxSYW5nZXMoKTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKGRvY3VtZW50LnNlbGVjdGlvbikgeyAgLy8gSUU/XG5cdFx0XHRkb2N1bWVudC5zZWxlY3Rpb24uZW1wdHkoKTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJ0YWJ1bGF0b3ItYmxvY2stc2VsZWN0XCIpO1xuXHR9XG5cdFxuXHQvL2NyZWF0ZSB0YWJsZVxuXHRfY3JlYXRlKCl7XG5cdFx0dGhpcy5leHRlcm5hbEV2ZW50cy5kaXNwYXRjaChcInRhYmxlQnVpbGRpbmdcIik7XG5cdFx0dGhpcy5ldmVudEJ1cy5kaXNwYXRjaChcInRhYmxlLWJ1aWxkaW5nXCIpO1xuXHRcdFxuXHRcdHRoaXMuX3J0bENoZWNrKCk7XG5cdFx0XG5cdFx0dGhpcy5fYnVpbGRFbGVtZW50KCk7XG5cdFx0XG5cdFx0dGhpcy5faW5pdGlhbGl6ZVRhYmxlKCk7XG5cdFx0XG5cdFx0dGhpcy5fbG9hZEluaXRpYWxEYXRhKCk7XG5cdFx0XG5cdFx0dGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG5cdFx0XG5cdFx0dGhpcy5leHRlcm5hbEV2ZW50cy5kaXNwYXRjaChcInRhYmxlQnVpbHRcIik7XG5cdH1cblx0XG5cdF9ydGxDaGVjaygpe1xuXHRcdHZhciBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuZWxlbWVudCk7XG5cdFx0XG5cdFx0c3dpdGNoKHRoaXMub3B0aW9ucy50ZXh0RGlyZWN0aW9uKXtcblx0XHRcdGNhc2VcImF1dG9cIjpcblx0XHRcdFx0aWYoc3R5bGUuZGlyZWN0aW9uICE9PSBcInJ0bFwiKXtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRjYXNlIFwicnRsXCI6XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXJ0bFwiKTtcblx0XHRcdFx0dGhpcy5ydGwgPSB0cnVlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0Y2FzZSBcImx0clwiOlxuXHRcdFx0XHR0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1sdHJcIik7XG5cdFx0XHRcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHRoaXMucnRsID0gZmFsc2U7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL2NsZWFyIHBvaW50ZXJzIHRvIG9iamVjdHMgaW4gZGVmYXVsdCBjb25maWcgb2JqZWN0XG5cdF9jbGVhck9iamVjdFBvaW50ZXJzKCl7XG5cdFx0dGhpcy5vcHRpb25zLmNvbHVtbnMgPSB0aGlzLm9wdGlvbnMuY29sdW1ucy5zbGljZSgwKTtcblx0XHRcblx0XHRpZihBcnJheS5pc0FycmF5KHRoaXMub3B0aW9ucy5kYXRhKSAmJiAhdGhpcy5vcHRpb25zLnJlYWN0aXZlRGF0YSl7XG5cdFx0XHR0aGlzLm9wdGlvbnMuZGF0YSA9IHRoaXMub3B0aW9ucy5kYXRhLnNsaWNlKDApO1xuXHRcdH1cblx0fVxuXHRcblx0Ly9idWlsZCB0YWJ1bGF0b3IgZWxlbWVudFxuXHRfYnVpbGRFbGVtZW50KCl7XG5cdFx0dmFyIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQsXG5cdFx0b3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcblx0XHRuZXdFbGVtZW50O1xuXHRcdFxuXHRcdGlmKGVsZW1lbnQudGFnTmFtZSA9PT0gXCJUQUJMRVwiKXtcblx0XHRcdHRoaXMub3JpZ2luYWxFbGVtZW50ID0gdGhpcy5lbGVtZW50O1xuXHRcdFx0bmV3RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XHRcblx0XHRcdC8vdHJhbnNmZXIgYXR0cmlidXRlcyB0byBuZXcgZWxlbWVudFxuXHRcdFx0dmFyIGF0dHJpYnV0ZXMgPSBlbGVtZW50LmF0dHJpYnV0ZXM7XG5cdFx0XHRcblx0XHRcdC8vIGxvb3AgdGhyb3VnaCBhdHRyaWJ1dGVzIGFuZCBhcHBseSB0aGVtIG9uIGRpdlxuXHRcdFx0Zm9yKHZhciBpIGluIGF0dHJpYnV0ZXMpe1xuXHRcdFx0XHRpZih0eXBlb2YgYXR0cmlidXRlc1tpXSA9PSBcIm9iamVjdFwiKXtcblx0XHRcdFx0XHRuZXdFbGVtZW50LnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVzW2ldLm5hbWUsIGF0dHJpYnV0ZXNbaV0udmFsdWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdC8vIHJlcGxhY2UgdGFibGUgd2l0aCBkaXYgZWxlbWVudFxuXHRcdFx0ZWxlbWVudC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChuZXdFbGVtZW50LCBlbGVtZW50KTtcblx0XHRcdFxuXHRcdFx0dGhpcy5lbGVtZW50ID0gZWxlbWVudCA9IG5ld0VsZW1lbnQ7XG5cdFx0fVxuXHRcdFxuXHRcdGVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvclwiKTtcblx0XHRlbGVtZW50LnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJncmlkXCIpO1xuXHRcdFxuXHRcdC8vZW1wdHkgZWxlbWVudFxuXHRcdHdoaWxlKGVsZW1lbnQuZmlyc3RDaGlsZCkgZWxlbWVudC5yZW1vdmVDaGlsZChlbGVtZW50LmZpcnN0Q2hpbGQpO1xuXHRcdFxuXHRcdC8vc2V0IHRhYmxlIGhlaWdodFxuXHRcdGlmKG9wdGlvbnMuaGVpZ2h0KXtcblx0XHRcdG9wdGlvbnMuaGVpZ2h0ID0gaXNOYU4ob3B0aW9ucy5oZWlnaHQpID8gb3B0aW9ucy5oZWlnaHQgOiBvcHRpb25zLmhlaWdodCArIFwicHhcIjtcblx0XHRcdGVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gb3B0aW9ucy5oZWlnaHQ7XG5cdFx0fVxuXHRcdFxuXHRcdC8vc2V0IHRhYmxlIG1pbiBoZWlnaHRcblx0XHRpZihvcHRpb25zLm1pbkhlaWdodCAhPT0gZmFsc2Upe1xuXHRcdFx0b3B0aW9ucy5taW5IZWlnaHQgPSBpc05hTihvcHRpb25zLm1pbkhlaWdodCkgPyBvcHRpb25zLm1pbkhlaWdodCA6IG9wdGlvbnMubWluSGVpZ2h0ICsgXCJweFwiO1xuXHRcdFx0ZWxlbWVudC5zdHlsZS5taW5IZWlnaHQgPSBvcHRpb25zLm1pbkhlaWdodDtcblx0XHR9XG5cdFx0XG5cdFx0Ly9zZXQgdGFibGUgbWF4SGVpZ2h0XG5cdFx0aWYob3B0aW9ucy5tYXhIZWlnaHQgIT09IGZhbHNlKXtcblx0XHRcdG9wdGlvbnMubWF4SGVpZ2h0ID0gaXNOYU4ob3B0aW9ucy5tYXhIZWlnaHQpID8gb3B0aW9ucy5tYXhIZWlnaHQgOiBvcHRpb25zLm1heEhlaWdodCArIFwicHhcIjtcblx0XHRcdGVsZW1lbnQuc3R5bGUubWF4SGVpZ2h0ID0gb3B0aW9ucy5tYXhIZWlnaHQ7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL2luaXRpYWxpemUgY29yZSBzeXN0ZW1zIGFuZCBtb2R1bGVzXG5cdF9pbml0aWFsaXplVGFibGUoKXtcblx0XHR2YXIgZWxlbWVudCA9IHRoaXMuZWxlbWVudCxcblx0XHRvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXHRcdFxuXHRcdHRoaXMuaW50ZXJhY3Rpb25Nb25pdG9yLmluaXRpYWxpemUoKTtcblx0XHRcblx0XHR0aGlzLmNvbHVtbk1hbmFnZXIuaW5pdGlhbGl6ZSgpO1xuXHRcdHRoaXMucm93TWFuYWdlci5pbml0aWFsaXplKCk7XG5cdFx0XG5cdFx0dGhpcy5fZGV0ZWN0QnJvd3NlcigpO1xuXHRcdFxuXHRcdC8vaW5pdGlhbGl6ZSBjb3JlIG1vZHVsZXNcblx0XHR0aGlzLm1vZHVsZXNDb3JlLmZvckVhY2goKG1vZCkgPT4ge1xuXHRcdFx0bW9kLmluaXRpYWxpemUoKTtcblx0XHR9KTtcblx0XHRcblx0XHQvL2J1aWxkIHRhYmxlIGVsZW1lbnRzXG5cdFx0ZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmNvbHVtbk1hbmFnZXIuZ2V0RWxlbWVudCgpKTtcblx0XHRlbGVtZW50LmFwcGVuZENoaWxkKHRoaXMucm93TWFuYWdlci5nZXRFbGVtZW50KCkpO1xuXHRcdFxuXHRcdGlmKG9wdGlvbnMuZm9vdGVyRWxlbWVudCl7XG5cdFx0XHR0aGlzLmZvb3Rlck1hbmFnZXIuYWN0aXZhdGUoKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYob3B0aW9ucy5hdXRvQ29sdW1ucyAmJiBvcHRpb25zLmRhdGEpe1xuXHRcdFx0XG5cdFx0XHR0aGlzLmNvbHVtbk1hbmFnZXIuZ2VuZXJhdGVDb2x1bW5zRnJvbVJvd0RhdGEodGhpcy5vcHRpb25zLmRhdGEpO1xuXHRcdH1cblx0XHRcblx0XHQvL2luaXRpYWxpemUgcmVndWxhciBtb2R1bGVzXG5cdFx0dGhpcy5tb2R1bGVzUmVndWxhci5mb3JFYWNoKChtb2QpID0+IHtcblx0XHRcdG1vZC5pbml0aWFsaXplKCk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0dGhpcy5jb2x1bW5NYW5hZ2VyLnNldENvbHVtbnMob3B0aW9ucy5jb2x1bW5zKTtcblx0XHRcblx0XHR0aGlzLmV2ZW50QnVzLmRpc3BhdGNoKFwidGFibGUtYnVpbHRcIik7XG5cdH1cblx0XG5cdF9sb2FkSW5pdGlhbERhdGEoKXtcblx0XHR0aGlzLmRhdGFMb2FkZXIubG9hZCh0aGlzLm9wdGlvbnMuZGF0YSk7XG5cdH1cblx0XG5cdC8vZGVjb25zdHJ1Y3RvclxuXHRkZXN0cm95KCl7XG5cdFx0dmFyIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7XG5cdFx0XG5cdFx0dGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xuXHRcdFxuXHRcdFRhYmxlUmVnaXN0cnkuZGVyZWdpc3Rlcih0aGlzKTsgLy9kZXJlZ2lzdGVyIHRhYmxlIGZyb20gaW50ZXItZGV2aWNlIGNvbW11bmljYXRpb25cblx0XHRcblx0XHR0aGlzLmV2ZW50QnVzLmRpc3BhdGNoKFwidGFibGUtZGVzdHJveVwiKTtcblx0XHRcblx0XHQvL2NsZWFyIHJvdyBkYXRhXG5cdFx0dGhpcy5yb3dNYW5hZ2VyLmRlc3Ryb3koKTtcblx0XHRcblx0XHQvL2NsZWFyIERPTVxuXHRcdHdoaWxlKGVsZW1lbnQuZmlyc3RDaGlsZCkgZWxlbWVudC5yZW1vdmVDaGlsZChlbGVtZW50LmZpcnN0Q2hpbGQpO1xuXHRcdGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcInRhYnVsYXRvclwiKTtcblxuXHRcdHRoaXMuZXh0ZXJuYWxFdmVudHMuZGlzcGF0Y2goXCJ0YWJsZURlc3Ryb3llZFwiKTtcblx0fVxuXHRcblx0X2RldGVjdEJyb3dzZXIoKXtcblx0XHR2YXIgdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50fHxuYXZpZ2F0b3IudmVuZG9yfHx3aW5kb3cub3BlcmE7XG5cdFx0XG5cdFx0aWYodWEuaW5kZXhPZihcIlRyaWRlbnRcIikgPiAtMSl7XG5cdFx0XHR0aGlzLmJyb3dzZXIgPSBcImllXCI7XG5cdFx0XHR0aGlzLmJyb3dzZXJTbG93ID0gdHJ1ZTtcblx0XHR9ZWxzZSBpZih1YS5pbmRleE9mKFwiRWRnZVwiKSA+IC0xKXtcblx0XHRcdHRoaXMuYnJvd3NlciA9IFwiZWRnZVwiO1xuXHRcdFx0dGhpcy5icm93c2VyU2xvdyA9IHRydWU7XG5cdFx0fWVsc2UgaWYodWEuaW5kZXhPZihcIkZpcmVmb3hcIikgPiAtMSl7XG5cdFx0XHR0aGlzLmJyb3dzZXIgPSBcImZpcmVmb3hcIjtcblx0XHRcdHRoaXMuYnJvd3NlclNsb3cgPSBmYWxzZTtcblx0XHR9ZWxzZSBpZih1YS5pbmRleE9mKFwiTWFjIE9TXCIpID4gLTEpe1xuXHRcdFx0dGhpcy5icm93c2VyID0gXCJzYWZhcmlcIjtcblx0XHRcdHRoaXMuYnJvd3NlclNsb3cgPSBmYWxzZTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLmJyb3dzZXIgPSBcIm90aGVyXCI7XG5cdFx0XHR0aGlzLmJyb3dzZXJTbG93ID0gZmFsc2U7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuYnJvd3Nlck1vYmlsZSA9IC8oYW5kcm9pZHxiYlxcZCt8bWVlZ28pLittb2JpbGV8YXZhbnRnb3xiYWRhXFwvfGJsYWNrYmVycnl8YmxhemVyfGNvbXBhbHxlbGFpbmV8ZmVubmVjfGhpcHRvcHxpZW1vYmlsZXxpcChob25lfG9kKXxpcmlzfGtpbmRsZXxsZ2UgfG1hZW1vfG1pZHB8bW1wfG1vYmlsZS4rZmlyZWZveHxuZXRmcm9udHxvcGVyYSBtKG9ifGluKWl8cGFsbSggb3MpP3xwaG9uZXxwKGl4aXxyZSlcXC98cGx1Y2tlcnxwb2NrZXR8cHNwfHNlcmllcyg0fDYpMHxzeW1iaWFufHRyZW98dXBcXC4oYnJvd3NlcnxsaW5rKXx2b2RhZm9uZXx3YXB8d2luZG93cyBjZXx4ZGF8eGlpbm98YW5kcm9pZHxpcGFkfHBsYXlib29rfHNpbGsvaS50ZXN0KHVhKXx8LzEyMDd8NjMxMHw2NTkwfDNnc298NHRocHw1MFsxLTZdaXw3NzBzfDgwMnN8YSB3YXxhYmFjfGFjKGVyfG9vfHMtKXxhaShrb3xybil8YWwoYXZ8Y2F8Y28pfGFtb2l8YW4oZXh8bnl8eXcpfGFwdHV8YXIoY2h8Z28pfGFzKHRlfHVzKXxhdHR3fGF1KGRpfC1tfHIgfHMgKXxhdmFufGJlKGNrfGxsfG5xKXxiaShsYnxyZCl8YmwoYWN8YXopfGJyKGV8dil3fGJ1bWJ8YnctKG58dSl8YzU1XFwvfGNhcGl8Y2N3YXxjZG0tfGNlbGx8Y2h0bXxjbGRjfGNtZC18Y28obXB8bmQpfGNyYXd8ZGEoaXR8bGx8bmcpfGRidGV8ZGMtc3xkZXZpfGRpY2F8ZG1vYnxkbyhjfHApb3xkcygxMnwtZCl8ZWwoNDl8YWkpfGVtKGwyfHVsKXxlcihpY3xrMCl8ZXNsOHxleihbNC03XTB8b3N8d2F8emUpfGZldGN8Zmx5KC18Xyl8ZzEgdXxnNTYwfGdlbmV8Z2YtNXxnLW1vfGdvKFxcLnd8b2QpfGdyKGFkfHVuKXxoYWllfGhjaXR8aGQtKG18cHx0KXxoZWktfGhpKHB0fHRhKXxocCggaXxpcCl8aHMtY3xodChjKC18IHxffGF8Z3xwfHN8dCl8dHApfGh1KGF3fHRjKXxpLSgyMHxnb3xtYSl8aTIzMHxpYWMoIHwtfFxcLyl8aWJyb3xpZGVhfGlnMDF8aWtvbXxpbTFrfGlubm98aXBhcXxpcmlzfGphKHR8dilhfGpicm98amVtdXxqaWdzfGtkZGl8a2VqaXxrZ3QoIHxcXC8pfGtsb258a3B0IHxrd2MtfGt5byhjfGspfGxlKG5vfHhpKXxsZyggZ3xcXC8oa3xsfHUpfDUwfDU0fC1bYS13XSl8bGlid3xseW54fG0xLXd8bTNnYXxtNTBcXC98bWEodGV8dWl8eG8pfG1jKDAxfDIxfGNhKXxtLWNyfG1lKHJjfHJpKXxtaShvOHxvYXx0cyl8bW1lZnxtbygwMXwwMnxiaXxkZXxkb3x0KC18IHxvfHYpfHp6KXxtdCg1MHxwMXx2ICl8bXdicHxteXdhfG4xMFswLTJdfG4yMFsyLTNdfG4zMCgwfDIpfG41MCgwfDJ8NSl8bjcoMCgwfDEpfDEwKXxuZSgoY3xtKS18b258dGZ8d2Z8d2d8d3QpfG5vayg2fGkpfG56cGh8bzJpbXxvcCh0aXx3dil8b3Jhbnxvd2cxfHA4MDB8cGFuKGF8ZHx0KXxwZHhnfHBnKDEzfC0oWzEtOF18YykpfHBoaWx8cGlyZXxwbChheXx1Yyl8cG4tMnxwbyhja3xydHxzZSl8cHJveHxwc2lvfHB0LWd8cWEtYXxxYygwN3wxMnwyMXwzMnw2MHwtWzItN118aS0pfHF0ZWt8cjM4MHxyNjAwfHJha3N8cmltOXxybyh2ZXx6byl8czU1XFwvfHNhKGdlfG1hfG1tfG1zfG55fHZhKXxzYygwMXxoLXxvb3xwLSl8c2RrXFwvfHNlKGMoLXwwfDEpfDQ3fG1jfG5kfHJpKXxzZ2gtfHNoYXJ8c2llKC18bSl8c2stMHxzbCg0NXxpZCl8c20oYWx8YXJ8YjN8aXR8dDUpfHNvKGZ0fG55KXxzcCgwMXxoLXx2LXx2ICl8c3koMDF8bWIpfHQyKDE4fDUwKXx0NigwMHwxMHwxOCl8dGEoZ3R8bGspfHRjbC18dGRnLXx0ZWwoaXxtKXx0aW0tfHQtbW98dG8ocGx8c2gpfHRzKDcwfG0tfG0zfG01KXx0eC05fHVwKFxcLmJ8ZzF8c2kpfHV0c3R8djQwMHx2NzUwfHZlcml8dmkocmd8dGUpfHZrKDQwfDVbMC0zXXwtdil8dm00MHx2b2RhfHZ1bGN8dngoNTJ8NTN8NjB8NjF8NzB8ODB8ODF8ODN8ODV8OTgpfHczYygtfCApfHdlYmN8d2hpdHx3aShnIHxuY3xudyl8d21sYnx3b251fHg3MDB8eWFzLXx5b3VyfHpldG98enRlLS9pLnRlc3QodWEuc2xpY2UoMCw0KSk7XG5cdH1cblx0XG5cdGluaXRHdWFyZChmdW5jLCBtc2cpe1xuXHRcdHZhciBzdGFjaywgbGluZTtcblx0XHRcblx0XHRpZih0aGlzLm9wdGlvbnMuZGVidWdJbml0aWFsaXphdGlvbiAmJiAhdGhpcy5pbml0aWFsaXplZCl7XG5cdFx0XHRpZighZnVuYyl7XG5cdFx0XHRcdHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2suc3BsaXQoXCJcXG5cIik7XG5cdFx0XHRcdFxuXHRcdFx0XHRsaW5lID0gc3RhY2tbMF0gPT0gXCJFcnJvclwiID8gc3RhY2tbMl0gOiBzdGFja1sxXTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKGxpbmVbMF0gPT0gXCIgXCIpe1xuXHRcdFx0XHRcdGZ1bmMgPSBsaW5lLnRyaW0oKS5zcGxpdChcIiBcIilbMV0uc3BsaXQoXCIuXCIpWzFdO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0ZnVuYyA9IGxpbmUudHJpbSgpLnNwbGl0KFwiQFwiKVswXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRjb25zb2xlLndhcm4oXCJUYWJsZSBOb3QgSW5pdGlhbGl6ZWQgLSBDYWxsaW5nIHRoZSBcIiArIGZ1bmMgKyBcIiBmdW5jdGlvbiBiZWZvcmUgdGhlIHRhYmxlIGlzIGluaXRpYWxpemVkIG1heSByZXN1bHQgaW4gaW5jb25zaXN0ZW50IGJlaGF2aW9yLCBQbGVhc2Ugd2FpdCBmb3IgdGhlIGB0YWJsZUJ1aWx0YCBldmVudCBiZWZvcmUgY2FsbGluZyB0aGlzIGZ1bmN0aW9uLlwiICsgKG1zZyA/IFwiIFwiICsgbXNnIDogXCJcIikpO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gdGhpcy5pbml0aWFsaXplZDtcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vIERhdGEgSGFuZGxpbmcgLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vYmxvY2sgdGFibGUgcmVkcmF3aW5nXG5cdGJsb2NrUmVkcmF3KCl7XG5cdFx0dGhpcy5pbml0R3VhcmQoKTtcblxuXHRcdHRoaXMuZXZlbnRCdXMuZGlzcGF0Y2goXCJyZWRyYXctYmxvY2tpbmdcIik7XG5cdFx0XG5cdFx0dGhpcy5yb3dNYW5hZ2VyLmJsb2NrUmVkcmF3KCk7XG5cdFx0dGhpcy5jb2x1bW5NYW5hZ2VyLmJsb2NrUmVkcmF3KCk7XG5cblx0XHR0aGlzLmV2ZW50QnVzLmRpc3BhdGNoKFwicmVkcmF3LWJsb2NrZWRcIik7XG5cdH1cblx0XG5cdC8vcmVzdG9yZSB0YWJsZSByZWRyYXdpbmdcblx0cmVzdG9yZVJlZHJhdygpe1xuXHRcdHRoaXMuaW5pdEd1YXJkKCk7XG5cblx0XHR0aGlzLmV2ZW50QnVzLmRpc3BhdGNoKFwicmVkcmF3LXJlc3RvcmluZ1wiKTtcblxuXHRcdHRoaXMucm93TWFuYWdlci5yZXN0b3JlUmVkcmF3KCk7XG5cdFx0dGhpcy5jb2x1bW5NYW5hZ2VyLnJlc3RvcmVSZWRyYXcoKTtcblxuXHRcdHRoaXMuZXZlbnRCdXMuZGlzcGF0Y2goXCJyZWRyYXctcmVzdG9yZWRcIik7XG5cdH1cblx0XG5cdC8vbG9hZCBkYXRhXG5cdHNldERhdGEoZGF0YSwgcGFyYW1zLCBjb25maWcpe1xuXHRcdHRoaXMuaW5pdEd1YXJkKGZhbHNlLCBcIlRvIHNldCBpbml0aWFsIGRhdGEgcGxlYXNlIHVzZSB0aGUgJ2RhdGEnIHByb3BlcnR5IGluIHRoZSB0YWJsZSBjb25zdHJ1Y3Rvci5cIik7XG5cdFx0XG5cdFx0cmV0dXJuIHRoaXMuZGF0YUxvYWRlci5sb2FkKGRhdGEsIHBhcmFtcywgY29uZmlnLCBmYWxzZSk7XG5cdH1cblx0XG5cdC8vY2xlYXIgZGF0YVxuXHRjbGVhckRhdGEoKXtcblx0XHR0aGlzLmluaXRHdWFyZCgpO1xuXHRcdFxuXHRcdHRoaXMuZGF0YUxvYWRlci5ibG9ja0FjdGl2ZUxvYWQoKTtcblx0XHR0aGlzLnJvd01hbmFnZXIuY2xlYXJEYXRhKCk7XG5cdH1cblx0XG5cdC8vZ2V0IHRhYmxlIGRhdGEgYXJyYXlcblx0Z2V0RGF0YShhY3RpdmUpe1xuXHRcdHJldHVybiB0aGlzLnJvd01hbmFnZXIuZ2V0RGF0YShhY3RpdmUpO1xuXHR9XG5cdFxuXHQvL2dldCB0YWJsZSBkYXRhIGFycmF5IGNvdW50XG5cdGdldERhdGFDb3VudChhY3RpdmUpe1xuXHRcdHJldHVybiB0aGlzLnJvd01hbmFnZXIuZ2V0RGF0YUNvdW50KGFjdGl2ZSk7XG5cdH1cblx0XG5cdC8vcmVwbGFjZSBkYXRhLCBrZWVwaW5nIHRhYmxlIGluIHBvc2l0aW9uIHdpdGggc2FtZSBzb3J0XG5cdHJlcGxhY2VEYXRhKGRhdGEsIHBhcmFtcywgY29uZmlnKXtcblx0XHR0aGlzLmluaXRHdWFyZCgpO1xuXHRcdFxuXHRcdHJldHVybiB0aGlzLmRhdGFMb2FkZXIubG9hZChkYXRhLCBwYXJhbXMsIGNvbmZpZywgdHJ1ZSwgdHJ1ZSk7XG5cdH1cblx0XG5cdC8vdXBkYXRlIHRhYmxlIGRhdGFcblx0dXBkYXRlRGF0YShkYXRhKXtcblx0XHR2YXIgcmVzcG9uc2VzID0gMDtcblx0XHRcblx0XHR0aGlzLmluaXRHdWFyZCgpO1xuXHRcdFxuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHR0aGlzLmRhdGFMb2FkZXIuYmxvY2tBY3RpdmVMb2FkKCk7XG5cdFx0XHRcblx0XHRcdGlmKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKXtcblx0XHRcdFx0ZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKGRhdGEgJiYgZGF0YS5sZW5ndGggPiAwKXtcblx0XHRcdFx0ZGF0YS5mb3JFYWNoKChpdGVtKSA9PiB7XG5cdFx0XHRcdFx0dmFyIHJvdyA9IHRoaXMucm93TWFuYWdlci5maW5kUm93KGl0ZW1bdGhpcy5vcHRpb25zLmluZGV4XSk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYocm93KXtcblx0XHRcdFx0XHRcdHJlc3BvbnNlcysrO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRyb3cudXBkYXRlRGF0YShpdGVtKVxuXHRcdFx0XHRcdFx0XHQudGhlbigoKT0+e1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlcy0tO1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0XHRpZighcmVzcG9uc2VzKXtcblx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0XHRcdC5jYXRjaCgoZSkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdHJlamVjdChcIlVwZGF0ZSBFcnJvciAtIFVuYWJsZSB0byB1cGRhdGUgcm93XCIsIGl0ZW0sIGUpO1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRyZWplY3QoXCJVcGRhdGUgRXJyb3IgLSBVbmFibGUgdG8gZmluZCByb3dcIiwgaXRlbSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiVXBkYXRlIEVycm9yIC0gTm8gZGF0YSBwcm92aWRlZFwiKTtcblx0XHRcdFx0cmVqZWN0KFwiVXBkYXRlIEVycm9yIC0gTm8gZGF0YSBwcm92aWRlZFwiKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRcblx0YWRkRGF0YShkYXRhLCBwb3MsIGluZGV4KXtcblx0XHR0aGlzLmluaXRHdWFyZCgpO1xuXHRcdFxuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHR0aGlzLmRhdGFMb2FkZXIuYmxvY2tBY3RpdmVMb2FkKCk7XG5cdFx0XHRcblx0XHRcdGlmKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKXtcblx0XHRcdFx0ZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKGRhdGEpe1xuXHRcdFx0XHR0aGlzLnJvd01hbmFnZXIuYWRkUm93cyhkYXRhLCBwb3MsIGluZGV4KVxuXHRcdFx0XHRcdC50aGVuKChyb3dzKSA9PiB7XG5cdFx0XHRcdFx0XHR2YXIgb3V0cHV0ID0gW107XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRyb3dzLmZvckVhY2goZnVuY3Rpb24ocm93KXtcblx0XHRcdFx0XHRcdFx0b3V0cHV0LnB1c2gocm93LmdldENvbXBvbmVudCgpKTtcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0cmVzb2x2ZShvdXRwdXQpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJVcGRhdGUgRXJyb3IgLSBObyBkYXRhIHByb3ZpZGVkXCIpO1xuXHRcdFx0XHRyZWplY3QoXCJVcGRhdGUgRXJyb3IgLSBObyBkYXRhIHByb3ZpZGVkXCIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cdFxuXHQvL3VwZGF0ZSB0YWJsZSBkYXRhXG5cdHVwZGF0ZU9yQWRkRGF0YShkYXRhKXtcblx0XHR2YXIgcm93cyA9IFtdLFxuXHRcdHJlc3BvbnNlcyA9IDA7XG5cdFx0XG5cdFx0dGhpcy5pbml0R3VhcmQoKTtcblx0XHRcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0dGhpcy5kYXRhTG9hZGVyLmJsb2NrQWN0aXZlTG9hZCgpO1xuXHRcdFx0XG5cdFx0XHRpZih0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIil7XG5cdFx0XHRcdGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihkYXRhICYmIGRhdGEubGVuZ3RoID4gMCl7XG5cdFx0XHRcdGRhdGEuZm9yRWFjaCgoaXRlbSkgPT4ge1xuXHRcdFx0XHRcdHZhciByb3cgPSB0aGlzLnJvd01hbmFnZXIuZmluZFJvdyhpdGVtW3RoaXMub3B0aW9ucy5pbmRleF0pO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHJlc3BvbnNlcysrO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKHJvdyl7XG5cdFx0XHRcdFx0XHRyb3cudXBkYXRlRGF0YShpdGVtKVxuXHRcdFx0XHRcdFx0XHQudGhlbigoKT0+e1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlcy0tO1xuXHRcdFx0XHRcdFx0XHRcdHJvd3MucHVzaChyb3cuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0XHRpZighcmVzcG9uc2VzKXtcblx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUocm93cyk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHR0aGlzLnJvd01hbmFnZXIuYWRkUm93cyhpdGVtKVxuXHRcdFx0XHRcdFx0XHQudGhlbigobmV3Um93cyk9Pntcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZXMtLTtcblx0XHRcdFx0XHRcdFx0XHRyb3dzLnB1c2gobmV3Um93c1swXS5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRcdGlmKCFyZXNwb25zZXMpe1xuXHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZShyb3dzKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIlVwZGF0ZSBFcnJvciAtIE5vIGRhdGEgcHJvdmlkZWRcIik7XG5cdFx0XHRcdHJlamVjdChcIlVwZGF0ZSBFcnJvciAtIE5vIGRhdGEgcHJvdmlkZWRcIik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0XG5cdC8vZ2V0IHJvdyBvYmplY3Rcblx0Z2V0Um93KGluZGV4KXtcblx0XHR2YXIgcm93ID0gdGhpcy5yb3dNYW5hZ2VyLmZpbmRSb3coaW5kZXgpO1xuXHRcdFxuXHRcdGlmKHJvdyl7XG5cdFx0XHRyZXR1cm4gcm93LmdldENvbXBvbmVudCgpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkZpbmQgRXJyb3IgLSBObyBtYXRjaGluZyByb3cgZm91bmQ6XCIsIGluZGV4KTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblx0XG5cdC8vZ2V0IHJvdyBvYmplY3Rcblx0Z2V0Um93RnJvbVBvc2l0aW9uKHBvc2l0aW9uKXtcblx0XHR2YXIgcm93ID0gdGhpcy5yb3dNYW5hZ2VyLmdldFJvd0Zyb21Qb3NpdGlvbihwb3NpdGlvbik7XG5cdFx0XG5cdFx0aWYocm93KXtcblx0XHRcdHJldHVybiByb3cuZ2V0Q29tcG9uZW50KCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiRmluZCBFcnJvciAtIE5vIG1hdGNoaW5nIHJvdyBmb3VuZDpcIiwgcG9zaXRpb24pO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXHRcblx0Ly9kZWxldGUgcm93IGZyb20gdGFibGVcblx0ZGVsZXRlUm93KGluZGV4KXtcblx0XHR2YXIgZm91bmRSb3dzID0gW107XG5cdFx0XG5cdFx0dGhpcy5pbml0R3VhcmQoKTtcblx0XHRcblx0XHRpZighQXJyYXkuaXNBcnJheShpbmRleCkpe1xuXHRcdFx0aW5kZXggPSBbaW5kZXhdO1xuXHRcdH1cblx0XHRcblx0XHQvL2ZpbmQgbWF0Y2hpbmcgcm93c1xuXHRcdGZvcihsZXQgaXRlbSBvZiBpbmRleCl7XG5cdFx0XHRsZXQgcm93ID0gdGhpcy5yb3dNYW5hZ2VyLmZpbmRSb3coaXRlbSwgdHJ1ZSk7XG5cdFx0XHRcblx0XHRcdGlmKHJvdyl7XG5cdFx0XHRcdGZvdW5kUm93cy5wdXNoKHJvdyk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJEZWxldGUgRXJyb3IgLSBObyBtYXRjaGluZyByb3cgZm91bmQ6XCIsIGl0ZW0pO1xuXHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoXCJEZWxldGUgRXJyb3IgLSBObyBtYXRjaGluZyByb3cgZm91bmRcIik7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdC8vc29ydCByb3dzIGludG8gY29ycmVjdCBvcmRlciB0byBlbnN1cmUgc21vb3RoIGRlbGV0ZSBmcm9tIHRhYmxlXG5cdFx0Zm91bmRSb3dzLnNvcnQoKGEsIGIpID0+IHtcblx0XHRcdHJldHVybiB0aGlzLnJvd01hbmFnZXIucm93cy5pbmRleE9mKGEpID4gdGhpcy5yb3dNYW5hZ2VyLnJvd3MuaW5kZXhPZihiKSA/IDEgOiAtMTtcblx0XHR9KTtcblx0XHRcblx0XHQvL2RlbGV0ZSByb3dzXG5cdFx0Zm91bmRSb3dzLmZvckVhY2goKHJvdykgPT57XG5cdFx0XHRyb3cuZGVsZXRlKCk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0dGhpcy5yb3dNYW5hZ2VyLnJlUmVuZGVySW5Qb3NpdGlvbigpO1xuXHRcdFxuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcblx0fVxuXHRcblx0Ly9hZGQgcm93IHRvIHRhYmxlXG5cdGFkZFJvdyhkYXRhLCBwb3MsIGluZGV4KXtcblx0XHR0aGlzLmluaXRHdWFyZCgpO1xuXHRcdFxuXHRcdGlmKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKXtcblx0XHRcdGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gdGhpcy5yb3dNYW5hZ2VyLmFkZFJvd3MoZGF0YSwgcG9zLCBpbmRleCwgdHJ1ZSlcblx0XHRcdC50aGVuKChyb3dzKT0+e1xuXHRcdFx0XHRyZXR1cm4gcm93c1swXS5nZXRDb21wb25lbnQoKTtcblx0XHRcdH0pO1xuXHR9XG5cdFxuXHQvL3VwZGF0ZSBhIHJvdyBpZiBpdCBleGlzdHMgb3RoZXJ3aXNlIGNyZWF0ZSBpdFxuXHR1cGRhdGVPckFkZFJvdyhpbmRleCwgZGF0YSl7XG5cdFx0dmFyIHJvdyA9IHRoaXMucm93TWFuYWdlci5maW5kUm93KGluZGV4KTtcblx0XHRcblx0XHR0aGlzLmluaXRHdWFyZCgpO1xuXHRcdFxuXHRcdGlmKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKXtcblx0XHRcdGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuXHRcdH1cblx0XHRcblx0XHRpZihyb3cpe1xuXHRcdFx0cmV0dXJuIHJvdy51cGRhdGVEYXRhKGRhdGEpXG5cdFx0XHRcdC50aGVuKCgpPT57XG5cdFx0XHRcdFx0cmV0dXJuIHJvdy5nZXRDb21wb25lbnQoKTtcblx0XHRcdFx0fSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0cmV0dXJuIHRoaXMucm93TWFuYWdlci5hZGRSb3dzKGRhdGEpXG5cdFx0XHRcdC50aGVuKChyb3dzKT0+e1xuXHRcdFx0XHRcdHJldHVybiByb3dzWzBdLmdldENvbXBvbmVudCgpO1xuXHRcdFx0XHR9KTtcblx0XHR9XG5cdH1cblx0XG5cdC8vdXBkYXRlIHJvdyBkYXRhXG5cdHVwZGF0ZVJvdyhpbmRleCwgZGF0YSl7XG5cdFx0dmFyIHJvdyA9IHRoaXMucm93TWFuYWdlci5maW5kUm93KGluZGV4KTtcblx0XHRcblx0XHR0aGlzLmluaXRHdWFyZCgpO1xuXHRcdFxuXHRcdGlmKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKXtcblx0XHRcdGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuXHRcdH1cblx0XHRcblx0XHRpZihyb3cpe1xuXHRcdFx0cmV0dXJuIHJvdy51cGRhdGVEYXRhKGRhdGEpXG5cdFx0XHRcdC50aGVuKCgpPT57XG5cdFx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZShyb3cuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdFx0XHR9KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJVcGRhdGUgRXJyb3IgLSBObyBtYXRjaGluZyByb3cgZm91bmQ6XCIsIGluZGV4KTtcblx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChcIlVwZGF0ZSBFcnJvciAtIE5vIG1hdGNoaW5nIHJvdyBmb3VuZFwiKTtcblx0XHR9XG5cdH1cblx0XG5cdC8vc2Nyb2xsIHRvIHJvdyBpbiBET01cblx0c2Nyb2xsVG9Sb3coaW5kZXgsIHBvc2l0aW9uLCBpZlZpc2libGUpe1xuXHRcdHZhciByb3cgPSB0aGlzLnJvd01hbmFnZXIuZmluZFJvdyhpbmRleCk7XG5cdFx0XG5cdFx0aWYocm93KXtcblx0XHRcdHJldHVybiB0aGlzLnJvd01hbmFnZXIuc2Nyb2xsVG9Sb3cocm93LCBwb3NpdGlvbiwgaWZWaXNpYmxlKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJTY3JvbGwgRXJyb3IgLSBObyBtYXRjaGluZyByb3cgZm91bmQ6XCIsIGluZGV4KTtcblx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChcIlNjcm9sbCBFcnJvciAtIE5vIG1hdGNoaW5nIHJvdyBmb3VuZFwiKTtcblx0XHR9XG5cdH1cblx0XG5cdG1vdmVSb3coZnJvbSwgdG8sIGFmdGVyKXtcblx0XHR2YXIgZnJvbVJvdyA9IHRoaXMucm93TWFuYWdlci5maW5kUm93KGZyb20pO1xuXHRcdFxuXHRcdHRoaXMuaW5pdEd1YXJkKCk7XG5cdFx0XG5cdFx0aWYoZnJvbVJvdyl7XG5cdFx0XHRmcm9tUm93Lm1vdmVUb1Jvdyh0bywgYWZ0ZXIpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIk1vdmUgRXJyb3IgLSBObyBtYXRjaGluZyByb3cgZm91bmQ6XCIsIGZyb20pO1xuXHRcdH1cblx0fVxuXHRcblx0Z2V0Um93cyhhY3RpdmUpe1xuXHRcdHJldHVybiB0aGlzLnJvd01hbmFnZXIuZ2V0Q29tcG9uZW50cyhhY3RpdmUpO1x0XG5cdH1cblx0XG5cdC8vZ2V0IHBvc2l0aW9uIG9mIHJvdyBpbiB0YWJsZVxuXHRnZXRSb3dQb3NpdGlvbihpbmRleCl7XG5cdFx0dmFyIHJvdyA9IHRoaXMucm93TWFuYWdlci5maW5kUm93KGluZGV4KTtcblx0XHRcblx0XHRpZihyb3cpe1xuXHRcdFx0cmV0dXJuIHJvdy5nZXRQb3NpdGlvbigpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIlBvc2l0aW9uIEVycm9yIC0gTm8gbWF0Y2hpbmcgcm93IGZvdW5kOlwiLCBpbmRleCk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8gQ29sdW1uIEZ1bmN0aW9ucyAgLy8vLy8vLy8vLy8vLy8vXG5cdHNldENvbHVtbnMoZGVmaW5pdGlvbil7XG5cdFx0dGhpcy5pbml0R3VhcmQoZmFsc2UsIFwiVG8gc2V0IGluaXRpYWwgY29sdW1ucyBwbGVhc2UgdXNlIHRoZSAnY29sdW1ucycgcHJvcGVydHkgaW4gdGhlIHRhYmxlIGNvbnN0cnVjdG9yXCIpO1xuXHRcdFxuXHRcdHRoaXMuY29sdW1uTWFuYWdlci5zZXRDb2x1bW5zKGRlZmluaXRpb24pO1xuXHR9XG5cdFxuXHRnZXRDb2x1bW5zKHN0cnVjdHVyZWQpe1xuXHRcdHJldHVybiB0aGlzLmNvbHVtbk1hbmFnZXIuZ2V0Q29tcG9uZW50cyhzdHJ1Y3R1cmVkKTtcblx0fVxuXHRcblx0Z2V0Q29sdW1uKGZpZWxkKXtcblx0XHR2YXIgY29sdW1uID0gdGhpcy5jb2x1bW5NYW5hZ2VyLmZpbmRDb2x1bW4oZmllbGQpO1xuXHRcdFxuXHRcdGlmKGNvbHVtbil7XG5cdFx0XHRyZXR1cm4gY29sdW1uLmdldENvbXBvbmVudCgpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkZpbmQgRXJyb3IgLSBObyBtYXRjaGluZyBjb2x1bW4gZm91bmQ6XCIsIGZpZWxkKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblx0XG5cdGdldENvbHVtbkRlZmluaXRpb25zKCl7XG5cdFx0cmV0dXJuIHRoaXMuY29sdW1uTWFuYWdlci5nZXREZWZpbml0aW9uVHJlZSgpO1xuXHR9XG5cdFxuXHRzaG93Q29sdW1uKGZpZWxkKXtcblx0XHR2YXIgY29sdW1uID0gdGhpcy5jb2x1bW5NYW5hZ2VyLmZpbmRDb2x1bW4oZmllbGQpO1xuXHRcdFxuXHRcdHRoaXMuaW5pdEd1YXJkKCk7XG5cdFx0XG5cdFx0aWYoY29sdW1uKXtcblx0XHRcdGNvbHVtbi5zaG93KCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiQ29sdW1uIFNob3cgRXJyb3IgLSBObyBtYXRjaGluZyBjb2x1bW4gZm91bmQ6XCIsIGZpZWxkKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblx0XG5cdGhpZGVDb2x1bW4oZmllbGQpe1xuXHRcdHZhciBjb2x1bW4gPSB0aGlzLmNvbHVtbk1hbmFnZXIuZmluZENvbHVtbihmaWVsZCk7IFxuXHRcdFxuXHRcdHRoaXMuaW5pdEd1YXJkKCk7XG5cdFx0XG5cdFx0aWYoY29sdW1uKXtcblx0XHRcdGNvbHVtbi5oaWRlKCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiQ29sdW1uIEhpZGUgRXJyb3IgLSBObyBtYXRjaGluZyBjb2x1bW4gZm91bmQ6XCIsIGZpZWxkKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblx0XG5cdHRvZ2dsZUNvbHVtbihmaWVsZCl7XG5cdFx0dmFyIGNvbHVtbiA9IHRoaXMuY29sdW1uTWFuYWdlci5maW5kQ29sdW1uKGZpZWxkKTtcblx0XHRcblx0XHR0aGlzLmluaXRHdWFyZCgpO1xuXHRcdFxuXHRcdGlmKGNvbHVtbil7XG5cdFx0XHRpZihjb2x1bW4udmlzaWJsZSl7XG5cdFx0XHRcdGNvbHVtbi5oaWRlKCk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGNvbHVtbi5zaG93KCk7XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiQ29sdW1uIFZpc2liaWxpdHkgVG9nZ2xlIEVycm9yIC0gTm8gbWF0Y2hpbmcgY29sdW1uIGZvdW5kOlwiLCBmaWVsZCk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cdFxuXHRhZGRDb2x1bW4oZGVmaW5pdGlvbiwgYmVmb3JlLCBmaWVsZCl7XG5cdFx0dmFyIGNvbHVtbiA9IHRoaXMuY29sdW1uTWFuYWdlci5maW5kQ29sdW1uKGZpZWxkKTtcblx0XHRcblx0XHR0aGlzLmluaXRHdWFyZCgpO1xuXHRcdFxuXHRcdHJldHVybiB0aGlzLmNvbHVtbk1hbmFnZXIuYWRkQ29sdW1uKGRlZmluaXRpb24sIGJlZm9yZSwgY29sdW1uKVxuXHRcdFx0LnRoZW4oKGNvbHVtbikgPT4ge1xuXHRcdFx0XHRyZXR1cm4gY29sdW1uLmdldENvbXBvbmVudCgpO1xuXHRcdFx0fSk7XG5cdH1cblx0XG5cdGRlbGV0ZUNvbHVtbihmaWVsZCl7XG5cdFx0dmFyIGNvbHVtbiA9IHRoaXMuY29sdW1uTWFuYWdlci5maW5kQ29sdW1uKGZpZWxkKTtcblx0XHRcblx0XHR0aGlzLmluaXRHdWFyZCgpO1xuXHRcdFxuXHRcdGlmKGNvbHVtbil7XG5cdFx0XHRyZXR1cm4gY29sdW1uLmRlbGV0ZSgpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkNvbHVtbiBEZWxldGUgRXJyb3IgLSBObyBtYXRjaGluZyBjb2x1bW4gZm91bmQ6XCIsIGZpZWxkKTtcblx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdCgpO1xuXHRcdH1cblx0fVxuXHRcblx0dXBkYXRlQ29sdW1uRGVmaW5pdGlvbihmaWVsZCwgZGVmaW5pdGlvbil7XG5cdFx0dmFyIGNvbHVtbiA9IHRoaXMuY29sdW1uTWFuYWdlci5maW5kQ29sdW1uKGZpZWxkKTtcblx0XHRcblx0XHR0aGlzLmluaXRHdWFyZCgpO1xuXHRcdFxuXHRcdGlmKGNvbHVtbil7XG5cdFx0XHRyZXR1cm4gY29sdW1uLnVwZGF0ZURlZmluaXRpb24oZGVmaW5pdGlvbik7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiQ29sdW1uIFVwZGF0ZSBFcnJvciAtIE5vIG1hdGNoaW5nIGNvbHVtbiBmb3VuZDpcIiwgZmllbGQpO1xuXHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRtb3ZlQ29sdW1uKGZyb20sIHRvLCBhZnRlcil7XG5cdFx0dmFyIGZyb21Db2x1bW4gPSB0aGlzLmNvbHVtbk1hbmFnZXIuZmluZENvbHVtbihmcm9tKSxcblx0XHR0b0NvbHVtbiA9IHRoaXMuY29sdW1uTWFuYWdlci5maW5kQ29sdW1uKHRvKTtcblx0XHRcblx0XHR0aGlzLmluaXRHdWFyZCgpO1xuXHRcdFxuXHRcdGlmKGZyb21Db2x1bW4pe1xuXHRcdFx0aWYodG9Db2x1bW4pe1xuXHRcdFx0XHR0aGlzLmNvbHVtbk1hbmFnZXIubW92ZUNvbHVtbihmcm9tQ29sdW1uLCB0b0NvbHVtbiwgYWZ0ZXIpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJNb3ZlIEVycm9yIC0gTm8gbWF0Y2hpbmcgY29sdW1uIGZvdW5kOlwiLCB0b0NvbHVtbik7XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiTW92ZSBFcnJvciAtIE5vIG1hdGNoaW5nIGNvbHVtbiBmb3VuZDpcIiwgZnJvbSk7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL3Njcm9sbCB0byBjb2x1bW4gaW4gRE9NXG5cdHNjcm9sbFRvQ29sdW1uKGZpZWxkLCBwb3NpdGlvbiwgaWZWaXNpYmxlKXtcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0dmFyIGNvbHVtbiA9IHRoaXMuY29sdW1uTWFuYWdlci5maW5kQ29sdW1uKGZpZWxkKTtcblx0XHRcdFxuXHRcdFx0aWYoY29sdW1uKXtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29sdW1uTWFuYWdlci5zY3JvbGxUb0NvbHVtbihjb2x1bW4sIHBvc2l0aW9uLCBpZlZpc2libGUpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJTY3JvbGwgRXJyb3IgLSBObyBtYXRjaGluZyBjb2x1bW4gZm91bmQ6XCIsIGZpZWxkKTtcblx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KFwiU2Nyb2xsIEVycm9yIC0gTm8gbWF0Y2hpbmcgY29sdW1uIGZvdW5kXCIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8gR2VuZXJhbCBQdWJsaWMgRnVuY3Rpb25zIC8vLy8vLy8vLy8vL1xuXHQvL3JlZHJhdyBsaXN0IHdpdGhvdXQgdXBkYXRpbmcgZGF0YVxuXHRyZWRyYXcoZm9yY2Upe1xuXHRcdHRoaXMuaW5pdEd1YXJkKCk7XG5cblx0XHR0aGlzLmNvbHVtbk1hbmFnZXIucmVkcmF3KGZvcmNlKTtcblx0XHR0aGlzLnJvd01hbmFnZXIucmVkcmF3KGZvcmNlKTtcblx0fVxuXHRcblx0c2V0SGVpZ2h0KGhlaWdodCl7XG5cdFx0dGhpcy5vcHRpb25zLmhlaWdodCA9IGlzTmFOKGhlaWdodCkgPyBoZWlnaHQgOiBoZWlnaHQgKyBcInB4XCI7XG5cdFx0dGhpcy5lbGVtZW50LnN0eWxlLmhlaWdodCA9IHRoaXMub3B0aW9ucy5oZWlnaHQ7XG5cdFx0dGhpcy5yb3dNYW5hZ2VyLmluaXRpYWxpemVSZW5kZXJlcigpO1xuXHRcdHRoaXMucm93TWFuYWdlci5yZWRyYXcoKTtcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8gRXZlbnQgQnVzIC8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdG9uKGtleSwgY2FsbGJhY2spe1xuXHRcdHRoaXMuZXh0ZXJuYWxFdmVudHMuc3Vic2NyaWJlKGtleSwgY2FsbGJhY2spO1xuXHR9XG5cdFxuXHRvZmYoa2V5LCBjYWxsYmFjayl7XG5cdFx0dGhpcy5leHRlcm5hbEV2ZW50cy51bnN1YnNjcmliZShrZXksIGNhbGxiYWNrKTtcblx0fVxuXHRcblx0ZGlzcGF0Y2hFdmVudCgpe1xuXHRcdHZhciBhcmdzID0gQXJyYXkuZnJvbShhcmd1bWVudHMpO1xuXHRcdGFyZ3Muc2hpZnQoKTtcblx0XHRcblx0XHR0aGlzLmV4dGVybmFsRXZlbnRzLmRpc3BhdGNoKC4uLmFyZ3VtZW50cyk7XG5cdH1cblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLyBBbGVydHMgLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdGFsZXJ0KGNvbnRlbnRzLCB0eXBlKXtcblx0XHR0aGlzLmluaXRHdWFyZCgpO1xuXG5cdFx0dGhpcy5hbGVydE1hbmFnZXIuYWxlcnQoY29udGVudHMsIHR5cGUpO1xuXHR9XG5cblx0Y2xlYXJBbGVydCgpe1xuXHRcdHRoaXMuaW5pdEd1YXJkKCk7XG5cblx0XHR0aGlzLmFsZXJ0TWFuYWdlci5jbGVhcigpO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLyBFeHRlbnNpb24gTWFuYWdlbWVudCAvLy8vLy8vLy8vLy8vL1xuXHRtb2RFeGlzdHMocGx1Z2luLCByZXF1aXJlZCl7XG5cdFx0aWYodGhpcy5tb2R1bGVzW3BsdWdpbl0pe1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYocmVxdWlyZWQpe1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKFwiVGFidWxhdG9yIE1vZHVsZSBOb3QgSW5zdGFsbGVkOiBcIiArIHBsdWdpbik7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cdFxuXHRtb2R1bGUoa2V5KXtcblx0XHR2YXIgbW9kID0gdGhpcy5tb2R1bGVzW2tleV07XG5cdFx0XG5cdFx0aWYoIW1vZCl7XG5cdFx0XHRjb25zb2xlLmVycm9yKFwiVGFidWxhdG9yIG1vZHVsZSBub3QgaW5zdGFsbGVkOiBcIiArIGtleSk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBtb2Q7XG5cdH1cbn1cblxuLy9kZWZhdWx0IHNldHVwIG9wdGlvbnNcblRhYnVsYXRvci5kZWZhdWx0T3B0aW9ucyA9IGRlZmF1bHRPcHRpb25zO1xuXG4vL2JpbmQgbW9kdWxlcyBhbmQgc3RhdGljIGZ1bmN0aW9uYWxpdHlcbm5ldyBNb2R1bGVCaW5kZXIoVGFidWxhdG9yKTtcblxuLy90YWJ1bGF0b3Igd2l0aCBhbGwgbW9kdWxlcyBpbnN0YWxsZWRcblxuY2xhc3MgVGFidWxhdG9yRnVsbCBleHRlbmRzIFRhYnVsYXRvciB7fVxuXG4vL2JpbmQgbW9kdWxlcyBhbmQgc3RhdGljIGZ1bmN0aW9uYWxpdHlcbm5ldyBNb2R1bGVCaW5kZXIoVGFidWxhdG9yRnVsbCwgbW9kdWxlcyk7XG5cbmNsYXNzIFBzZXVkb1JvdyB7XG5cblx0Y29uc3RydWN0b3IgKHR5cGUpe1xuXHRcdHRoaXMudHlwZSA9IHR5cGU7XG5cdFx0dGhpcy5lbGVtZW50ID0gdGhpcy5fY3JlYXRlRWxlbWVudCgpO1xuXHR9XG5cblx0X2NyZWF0ZUVsZW1lbnQoKXtcblx0XHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdGVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3Itcm93XCIpO1xuXHRcdHJldHVybiBlbDtcblx0fVxuXG5cdGdldEVsZW1lbnQoKXtcblx0XHRyZXR1cm4gdGhpcy5lbGVtZW50O1xuXHR9XG5cblx0Z2V0Q29tcG9uZW50KCl7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Z2V0RGF0YSgpe1xuXHRcdHJldHVybiB7fTtcblx0fVxuXG5cdGdldEhlaWdodCgpe1xuXHRcdHJldHVybiB0aGlzLmVsZW1lbnQub3V0ZXJIZWlnaHQ7XG5cdH1cblxuXHRpbml0aWFsaXplKCl7fVxuXG5cdHJlaW5pdGlhbGl6ZSgpe31cblxuXHRub3JtYWxpemVIZWlnaHQoKXt9XG5cblx0Z2VuZXJhdGVDZWxscygpe31cblxuXHRyZWluaXRpYWxpemVIZWlnaHQoKXt9XG5cblx0Y2FsY0hlaWdodCgpe31cblxuXHRzZXRDZWxsSGVpZ2h0KCl7fVxuXG5cdGNsZWFyQ2VsbEhlaWdodCgpe31cbn1cblxuZXhwb3J0IHsgQWNjZXNzb3IgYXMgQWNjZXNzb3JNb2R1bGUsIEFqYXggYXMgQWpheE1vZHVsZSwgQ2FsY0NvbXBvbmVudCwgQ2VsbENvbXBvbmVudCwgQ2xpcGJvYXJkIGFzIENsaXBib2FyZE1vZHVsZSwgQ29sdW1uQ2FsY3MgYXMgQ29sdW1uQ2FsY3NNb2R1bGUsIENvbHVtbkNvbXBvbmVudCwgRGF0YVRyZWUgYXMgRGF0YVRyZWVNb2R1bGUsIERvd25sb2FkIGFzIERvd25sb2FkTW9kdWxlLCBFZGl0JDEgYXMgRWRpdE1vZHVsZSwgRXhwb3J0IGFzIEV4cG9ydE1vZHVsZSwgRmlsdGVyIGFzIEZpbHRlck1vZHVsZSwgRm9ybWF0IGFzIEZvcm1hdE1vZHVsZSwgRnJvemVuQ29sdW1ucyBhcyBGcm96ZW5Db2x1bW5zTW9kdWxlLCBGcm96ZW5Sb3dzIGFzIEZyb3plblJvd3NNb2R1bGUsIEdyb3VwQ29tcG9uZW50LCBHcm91cFJvd3MgYXMgR3JvdXBSb3dzTW9kdWxlLCBIaXN0b3J5IGFzIEhpc3RvcnlNb2R1bGUsIEh0bWxUYWJsZUltcG9ydCBhcyBIdG1sVGFibGVJbXBvcnRNb2R1bGUsIEltcG9ydCBhcyBJbXBvcnRNb2R1bGUsIEludGVyYWN0aW9uIGFzIEludGVyYWN0aW9uTW9kdWxlLCBLZXliaW5kaW5ncyBhcyBLZXliaW5kaW5nc01vZHVsZSwgTWVudSBhcyBNZW51TW9kdWxlLCBNb2R1bGUsIE1vdmVDb2x1bW5zIGFzIE1vdmVDb2x1bW5zTW9kdWxlLCBNb3ZlUm93cyBhcyBNb3ZlUm93c01vZHVsZSwgTXV0YXRvciBhcyBNdXRhdG9yTW9kdWxlLCBQYWdlIGFzIFBhZ2VNb2R1bGUsIFBlcnNpc3RlbmNlIGFzIFBlcnNpc3RlbmNlTW9kdWxlLCBQb3B1cCQxIGFzIFBvcHVwTW9kdWxlLCBQcmludCBhcyBQcmludE1vZHVsZSwgUHNldWRvUm93LCBSZWFjdGl2ZURhdGEgYXMgUmVhY3RpdmVEYXRhTW9kdWxlLCBSZW5kZXJlciwgUmVzaXplQ29sdW1ucyBhcyBSZXNpemVDb2x1bW5zTW9kdWxlLCBSZXNpemVSb3dzIGFzIFJlc2l6ZVJvd3NNb2R1bGUsIFJlc2l6ZVRhYmxlIGFzIFJlc2l6ZVRhYmxlTW9kdWxlLCBSZXNwb25zaXZlTGF5b3V0IGFzIFJlc3BvbnNpdmVMYXlvdXRNb2R1bGUsIFJvd0NvbXBvbmVudCwgU2VsZWN0Um93IGFzIFNlbGVjdFJvd01vZHVsZSwgU29ydCBhcyBTb3J0TW9kdWxlLCBUYWJ1bGF0b3IsIFRhYnVsYXRvckZ1bGwsIFRvb2x0aXAgYXMgVG9vbHRpcE1vZHVsZSwgVmFsaWRhdGUgYXMgVmFsaWRhdGVNb2R1bGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRhYnVsYXRvcl9lc20uanMubWFwXG4iLCJpbXBvcnQge1RhYnVsYXRvciwgRm9ybWF0TW9kdWxlLCBFZGl0TW9kdWxlLCBJbXBvcnRNb2R1bGUsIEZyb3plbkNvbHVtbnNNb2R1bGUsIFJlYWN0aXZlRGF0YU1vZHVsZX0gZnJvbSAndGFidWxhdG9yLXRhYmxlcyc7XG5pbXBvcnQgRGF0YSBmcm9tICcuL2ZpbGVzL3dlZWs1X3BpY2suY3N2JztcbmltcG9ydCB7IGRhdGFNZXRob2RzLCBwbGF5ZXJzQ291bnQgfSBmcm9tICcuL2RhdGEnO1xuaW1wb3J0IHsgZWRpdERvbSB9IGZyb20gJy4vZG9tJztcblxuVGFidWxhdG9yLnJlZ2lzdGVyTW9kdWxlKFtGb3JtYXRNb2R1bGUsIEVkaXRNb2R1bGUsIEltcG9ydE1vZHVsZSwgRnJvemVuQ29sdW1uc01vZHVsZSwgUmVhY3RpdmVEYXRhTW9kdWxlXSk7XG5cbi8vIGF0IHdpY2ggd2VlayBhcmUgd2UgaW4gdGhlIHBvb2xcbmV4cG9ydCBjb25zdCB3ZWVrID0gNTtcbi8vIGlzIHRoZSBmaWxlIGEgcmVzdWx0cyBmaWxlIG9yIHBpY2sgZmlsZVxuY29uc3QgaXNSZXN1bHRzRmlsZSA9IGZhbHNlO1xuLy8gRGF0YSBpcyBpbXBvcnQgZnJvbSBjc3YgZmlsZVxubGV0IGFycmF5RGF0YSA9IERhdGE7XG4vLyBpbml0aWFsaXNhdGlvbiBvZiB0aGUgcGxheWVyIGRhdGFcbmxldCBwbGF5ZXJNZXRyaWNzID0gWydjdXJyZW50UGxheWVyJywgJ2EtcGxheWVyJywgMV07XG5cblxuY29uc3QgdGFibGVNZXRob2RzID0gKCgpID0+IHtcbiAgICAvLyBGdW5jdGlvbiB0byBhZGQgY2xhc3MgdG8gYSBwbGF5ZXJcbiAgICBjb25zdCB1cGRhdGVQbGF5ZXJNZXRyaWNzID0gKHJvdykgPT4ge1xuICAgICAgICBjb25zdCBkYXRhID0gcm93LmdldERhdGEoKTtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHJvdy5nZXRFbGVtZW50KCk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRQbGF5ZXIgPSBkYXRhLmpvdWV1cjtcbiAgICAgICAgcGxheWVyTWV0cmljc1swXSA9IGN1cnJlbnRQbGF5ZXI7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChwbGF5ZXJNZXRyaWNzWzFdKTtcbiAgICAgICAgZGF0YS5wYXJ0aWNpcGF0aW9uID0gcGxheWVyTWV0cmljc1syXTtcbiAgICB9O1xuXG4gICAgLy8gRnVuY3Rpb24gdGhhdCB3aWxsIGNoYW5nZSBjbGFzcyBvZiBhIHJvdyB3aGVuIGl0IGlzIGEgbmV3IHBsYXllciBvbiB0aGF0IHJvdyBcbiAgICBjb25zdCB1cGRhdGVOZXh0Um93TWV0cmljcyA9IChyb3cpID0+IHtcbiAgICAgICAgaWYgKHJvdy5nZXROZXh0Um93KCkgJiYgcm93LmdldE5leHRSb3coKS5nZXREYXRhKCkuam91ZXVyICE9PSBwbGF5ZXJNZXRyaWNzWzBdKSB7XG4gICAgICAgICAgICBwbGF5ZXJNZXRyaWNzWzFdID0gKHBsYXllck1ldHJpY3NbMV0gPT09ICdhLXBsYXllcicpID8gJ2Fub3RoZXItcGxheWVyJyA6ICdhLXBsYXllcic7XG4gICAgICAgICAgICBwbGF5ZXJNZXRyaWNzWzJdID0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBsYXllck1ldHJpY3NbMl0rKztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZ1bmN0aW9uIHRoYXQgY2hlY2sgaWYgYSB0ZWFtIGhhcyBsb3N0LiBJdCBrbm93cyBhIHRlYW0gaGFzIGxvc3QgZGVwZW5kaW5nIG9uIGRpZmZlcmVudCBzY2VuYXJpbyBsaWtlIHdoaWNoIHdlZWsgYXJlIHdlLFxuICAgIC8vICBpZiB0aGUgZmlsZSBpcyBhIGEgdHlwZSBvZiBwaWNrIG9yIHJlc3VsdHMgYW5kIGZpbmFsbHkgaWYsIG9uIHRoZSBzYW1lIHJvdywgdGhlIG5leHQgd2VlayBjZWxsIGlzIGVtcHR5LiBcbiAgICBjb25zdCBjaGVja0lmVGVhbUxvc3QgPSAocm93KSA9PiB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSByb3cuZ2V0RGF0YSgpO1xuXG4gICAgICAgIGNvbnN0IGFkZEdyYXlzY2FsZUVmZmVjdCA9IChjZWxsKSA9PiB7XG4gICAgICAgICAgICBjZWxsLmdldEVsZW1lbnQoKS5jbGFzc0xpc3QuYWRkKCdncmF5c2NhbGUtZWZmZWN0Jyk7XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICBzd2l0Y2ggKHdlZWspIHtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBpZiAoaXNSZXN1bHRzRmlsZSAmJiBkYXRhLndpbiA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0EnKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGlmIChpc1Jlc3VsdHNGaWxlICYmIGRhdGEud2luID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrQicpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEud2Vla0IudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtBJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghaXNSZXN1bHRzRmlsZSAmJiBkYXRhLndlZWtCLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtBJykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBpZiAoaXNSZXN1bHRzRmlsZSAmJiBkYXRhLndpbiA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0MnKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLndlZWtDLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrQicpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS53ZWVrQi50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0EnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFpc1Jlc3VsdHNGaWxlICYmIGRhdGEud2Vla0MudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0InKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLndlZWtCLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrQScpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICBpZiAoaXNSZXN1bHRzRmlsZSAmJiBkYXRhLndpbiA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0QnKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLndlZWtELnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrQycpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS53ZWVrQy50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0InKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEud2Vla0IudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtBJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghaXNSZXN1bHRzRmlsZSAmJiBkYXRhLndlZWtELnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtDJykpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS53ZWVrQy50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0InKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEud2Vla0IudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtBJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgIGlmIChpc1Jlc3VsdHNGaWxlICYmIGRhdGEud2luID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrRScpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEud2Vla0UudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtEJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLndlZWtELnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrQycpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS53ZWVrQy50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0InKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEud2Vla0IudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtBJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghaXNSZXN1bHRzRmlsZSAmJiBkYXRhLndlZWtFLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtEJykpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS53ZWVrRC50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0MnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEud2Vla0MudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtCJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLndlZWtCLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrQScpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICBpZiAoaXNSZXN1bHRzRmlsZSAmJiBkYXRhLndpbiA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0YnKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLndlZWtGLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrRScpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS53ZWVrRS50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0QnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEud2Vla0QudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtDJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLndlZWtDLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrQicpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS53ZWVrQi50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0EnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFpc1Jlc3VsdHNGaWxlICYmIGRhdGEud2Vla0YudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0UnKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLndlZWtFLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrRCcpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS53ZWVrRC50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0MnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEud2Vla0MudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtCJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLndlZWtCLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrQScpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICBpZiAoaXNSZXN1bHRzRmlsZSAmJiBkYXRhLndpbiA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0cnKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLndlZWtHLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrRicpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS53ZWVrRi50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0UnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEud2Vla0UudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtEJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLndlZWtELnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrQycpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS53ZWVrQy50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0InKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEud2Vla0IudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtBJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghaXNSZXN1bHRzRmlsZSAmJiBkYXRhLndlZWtHLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtGJykpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS53ZWVrRi50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0UnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEud2Vla0UudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtEJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLndlZWtELnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrQycpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS53ZWVrQy50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0InKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEud2Vla0IudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtBJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgIGlmIChpc1Jlc3VsdHNGaWxlICYmIGRhdGEud2luID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrSCcpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEud2Vla0gudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtHJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLndlZWtHLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrRicpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS53ZWVrRi50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0UnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEud2Vla0UudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtEJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLndlZWtELnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrQycpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS53ZWVrQy50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0InKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEud2Vla0IudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtBJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghaXNSZXN1bHRzRmlsZSAmJiBkYXRhLndlZWtHLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtHJykpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS53ZWVrRy50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0YnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEud2Vla0YudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtFJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLndlZWtFLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrRCcpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS53ZWVrRC50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0MnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEud2Vla0MudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtCJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLndlZWtCLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrQScpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgLy8gRGVmYXVsdCBjYXNlIGZvciB3ZWVrcyBvdGhlciB0aGFuIHRoZSBzcGVjaWZpZWQgb25lc1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIEZ1bmN0aW9uIHRoYXQgZm9ybWF0IHRoZSBjZWxsIG9mIHRoZSB3ZWVrcyBjb2x1bW5zIGJhc2Ugb24gdGhlIHZhbHVlIHByb3ZpZGVkIGluIHRoZSBjc3YgZmlsZS4gXG4gICAgY29uc3QgZm9ybWF0Q2VsbCA9IChjZWxsLCB2YWx1ZSwgY3VycmVudFdlZWspID0+IHtcbiAgICAgICAgY29uc3QgdGVhbUFzc2V0cyA9IGRhdGFNZXRob2RzLmdldFRlYW0odmFsdWUpO1xuICAgICAgICBjb25zdCB0ZWFtTmFtZSA9IHRlYW1Bc3NldHMudGVhbU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGNlbGwuZ2V0RWxlbWVudCgpO1xuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQodGVhbU5hbWUudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXHMrL2csICctJykpO1xuICAgICAgICAoY3VycmVudFdlZWsgPT09IHdlZWspICYmIChkYXRhTWV0aG9kcy5pbmNyZW1lbnRQbGF5ZXJzQ291bnQoKSwgZGF0YU1ldGhvZHMuaW5jcmVtZW50Q291bnQodGVhbU5hbWUudG9Mb3dlckNhc2UoKSkpO1xuXG4gICAgICAgIHJldHVybiBgPGltZyBzcmM9Jy9kb2NzL2ltYWdlcy8ke3RlYW1Bc3NldHMuaW1nfSc+YDtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBpcyB0aGUgc3RyaW5nIGhhcyBubyBjaGFyYWN0ZXIgYW5kIHJldHVybiBhbiBlbXB0eSBzdHJpbmdcbiAgICBjb25zdCBpc0VtcHR5ID0gKHZhbHVlKSA9PiB7XG4gICAgICAgIHJldHVybiB2YWx1ZS50cmltKCkgPT09IFwiXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdXBkYXRlUGxheWVyTWV0cmljcyxcbiAgICAgICAgdXBkYXRlTmV4dFJvd01ldHJpY3MsXG4gICAgICAgIGNoZWNrSWZUZWFtTG9zdCxcbiAgICAgICAgZm9ybWF0Q2VsbCxcbiAgICAgICAgaXNFbXB0eVxuICAgIH07XG59KSgpO1xuXG4vLyBkZWZpbmUgdGFibGVcbnZhciB0YWJsZSA9IG5ldyBUYWJ1bGF0b3IoXCIjcGljay10YWJsZVwiLCB7XG4gICAgZGF0YTphcnJheURhdGEsIC8vRGF0YSBpcyB0aGUgY3N2IGZpbGVzIGRhdGFcbiAgICByZWFjdGl2ZURhdGE6dHJ1ZSwgLy9lbmFibGUgcmVhY3RpdmUgZGF0YVxuICAgIGltcG9ydEZvcm1hdDpcImFycmF5XCIsXG4gICAgcm93SGVpZ2h0OjQwLFxuICAgIHJvd0Zvcm1hdHRlcjpmdW5jdGlvbihyb3cpe1xuICAgICAgICB0YWJsZU1ldGhvZHMudXBkYXRlUGxheWVyTWV0cmljcyhyb3cpO1xuICAgICAgICB0YWJsZU1ldGhvZHMudXBkYXRlTmV4dFJvd01ldHJpY3Mocm93KTtcbiAgICAgICAgdGFibGVNZXRob2RzLmNoZWNrSWZUZWFtTG9zdChyb3cpO1xuICAgIH0sXG4gICAgY29sdW1uczpbXG4gICAgICAgIHt0aXRsZTpcIndpblwiLCBmaWVsZDpcIndpblwiLCBmcm96ZW46dHJ1ZSwgdmlzaWJsZTpmYWxzZX0sXG4gICAgICAgIHt0aXRsZTpcIiNcIiwgZmllbGQ6XCJwYXJ0aWNpcGF0aW9uXCIsIGhvekFsaWduOlwiY2VudGVyXCIsIGhlYWRlckhvekFsaWduOlwiY2VudGVyXCIsIHZlcnRBbGlnbjpcIm1pZGRsZVwiLCBzb3J0ZXI6XCJudW1iZXJcIiwgd2lkdGg6NDAsIGZyb3plbjp0cnVlfSxcbiAgICAgICAge3RpdGxlOlwiSk9VRVVSU1wiLCBmaWVsZDpcImpvdWV1clwiLCBzb3J0ZXI6XCJzdHJpbmdcIiwgaGVhZGVySG96QWxpZ246XCJjZW50ZXJcIiwgaG96QWxpZ246XCJsZWZ0XCIsIHZlcnRBbGlnbjpcIm1pZGRsZVwiLCBmb3JtYXR0ZXI6XCJwbGFpbnRleHRcIiwgZnJvemVuOnRydWV9LFxuICAgICAgICB7dGl0bGU6XCIxMVwiLCBmaWVsZDpcIndlZWtBXCIsIGhvekFsaWduOlwiY2VudGVyXCIsIGhlYWRlckhvekFsaWduOlwiY2VudGVyXCIsIHZlcnRBbGlnbjpcIm1pZGRsZVwiLCB3aWR0aDo1MCwgZm9ybWF0dGVyOmZ1bmN0aW9uKGNlbGwsIGZvcm1hdHRlclBhcmFtcywgb25SZW5kZXJlZCl7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGNlbGwuZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgIGNvbnN0IFdFRUsgPSAxO1xuICAgICAgICAgICAgLy9mb3JtYXQgdGhlIHNlbGVjdGVkIGNlbGxcbiAgICAgICAgICAgIGlmICghdGFibGVNZXRob2RzLmlzRW1wdHkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhYmxlTWV0aG9kcy5mb3JtYXRDZWxsKGNlbGwsIHZhbHVlLnRvTG93ZXJDYXNlKCksIFdFRUspO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICcnOyAvLyByZXR1cm4gYW4gZW1wdHkgc3RyaW5nIGlmIHRoZSBjZWxsIHZhbHVlIGlzIGVtcHR5XG4gICAgICAgIH19LFxuICAgICAgICB7dGl0bGU6XCIxOFwiLCBmaWVsZDpcIndlZWtCXCIsIGhvekFsaWduOlwiY2VudGVyXCIsIGhlYWRlckhvekFsaWduOlwiY2VudGVyXCIsIHZlcnRBbGlnbjpcIm1pZGRsZVwiLCB3aWR0aDo1MCwgZm9ybWF0dGVyOmZ1bmN0aW9uKGNlbGwsIGZvcm1hdHRlclBhcmFtcywgb25SZW5kZXJlZCl7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGNlbGwuZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgIGNvbnN0IFdFRUsgPSAyO1xuICAgICAgICAgICAgLy9mb3JtYXQgdGhlIHNlbGVjdGVkIGNlbGxcbiAgICAgICAgICAgIGlmICghdGFibGVNZXRob2RzLmlzRW1wdHkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhYmxlTWV0aG9kcy5mb3JtYXRDZWxsKGNlbGwsIHZhbHVlLnRvTG93ZXJDYXNlKCksIFdFRUspO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICcnOyAvLyByZXR1cm4gYW4gZW1wdHkgc3RyaW5nIGlmIHRoZSBjZWxsIHZhbHVlIGlzIGVtcHR5XG4gICAgICAgIH19LFxuICAgICAgICB7dGl0bGU6XCIyNVwiLCBmaWVsZDpcIndlZWtDXCIsIGhvekFsaWduOlwiY2VudGVyXCIsIGhlYWRlckhvekFsaWduOlwiY2VudGVyXCIsIHZlcnRBbGlnbjpcIm1pZGRsZVwiLCB3aWR0aDo1MCwgZm9ybWF0dGVyOmZ1bmN0aW9uKGNlbGwsIGZvcm1hdHRlclBhcmFtcywgb25SZW5kZXJlZCl7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGNlbGwuZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgIGNvbnN0IFdFRUsgPSAzO1xuICAgICAgICAgICAgLy9mb3JtYXQgdGhlIHNlbGVjdGVkIGNlbGxcbiAgICAgICAgICAgIGlmICghdGFibGVNZXRob2RzLmlzRW1wdHkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhYmxlTWV0aG9kcy5mb3JtYXRDZWxsKGNlbGwsIHZhbHVlLnRvTG93ZXJDYXNlKCksIFdFRUspO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICcnOyAvLyByZXR1cm4gYW4gZW1wdHkgc3RyaW5nIGlmIHRoZSBjZWxsIHZhbHVlIGlzIGVtcHR5XG4gICAgICAgIH19LFxuICAgICAgICB7dGl0bGU6XCIyXCIsIGZpZWxkOlwid2Vla0RcIiwgaG96QWxpZ246XCJjZW50ZXJcIiwgaGVhZGVySG96QWxpZ246XCJjZW50ZXJcIiwgdmVydEFsaWduOlwibWlkZGxlXCIsIHdpZHRoOjUwLCBmb3JtYXR0ZXI6ZnVuY3Rpb24oY2VsbCwgZm9ybWF0dGVyUGFyYW1zLCBvblJlbmRlcmVkKXtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY2VsbC5nZXRWYWx1ZSgpO1xuICAgICAgICAgICAgY29uc3QgV0VFSyA9IDQ7XG4gICAgICAgICAgICAvL2Zvcm1hdCB0aGUgc2VsZWN0ZWQgY2VsbFxuICAgICAgICAgICAgaWYgKCF0YWJsZU1ldGhvZHMuaXNFbXB0eSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFibGVNZXRob2RzLmZvcm1hdENlbGwoY2VsbCwgdmFsdWUudG9Mb3dlckNhc2UoKSwgV0VFSyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJyc7IC8vIHJldHVybiBhbiBlbXB0eSBzdHJpbmcgaWYgdGhlIGNlbGwgdmFsdWUgaXMgZW1wdHlcbiAgICAgICAgfX0sXG4gICAgICAgIHt0aXRsZTpcIjlcIiwgZmllbGQ6XCJ3ZWVrRVwiLCBob3pBbGlnbjpcImNlbnRlclwiLCBoZWFkZXJIb3pBbGlnbjpcImNlbnRlclwiLCB2ZXJ0QWxpZ246XCJtaWRkbGVcIiwgd2lkdGg6NTAsIGZvcm1hdHRlcjpmdW5jdGlvbihjZWxsLCBmb3JtYXR0ZXJQYXJhbXMsIG9uUmVuZGVyZWQpe1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBjZWxsLmdldFZhbHVlKCk7XG4gICAgICAgICAgICBjb25zdCBXRUVLID0gNTtcbiAgICAgICAgICAgIC8vZm9ybWF0IHRoZSBzZWxlY3RlZCBjZWxsXG4gICAgICAgICAgICBpZiAoIXRhYmxlTWV0aG9kcy5pc0VtcHR5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0YWJsZU1ldGhvZHMuZm9ybWF0Q2VsbChjZWxsLCB2YWx1ZS50b0xvd2VyQ2FzZSgpLCBXRUVLKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAnJzsgLy8gcmV0dXJuIGFuIGVtcHR5IHN0cmluZyBpZiB0aGUgY2VsbCB2YWx1ZSBpcyBlbXB0eVxuICAgICAgICB9fSxcbiAgICAgICAge3RpdGxlOlwiMTZcIiwgZmllbGQ6XCJ3ZWVrRlwiLCBob3pBbGlnbjpcImNlbnRlclwiLCBoZWFkZXJIb3pBbGlnbjpcImNlbnRlclwiLCB2ZXJ0QWxpZ246XCJtaWRkbGVcIiwgd2lkdGg6NTAsIGZvcm1hdHRlcjpmdW5jdGlvbihjZWxsLCBmb3JtYXR0ZXJQYXJhbXMsIG9uUmVuZGVyZWQpe1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBjZWxsLmdldFZhbHVlKCk7XG4gICAgICAgICAgICBjb25zdCBXRUVLID0gNjtcbiAgICAgICAgICAgIC8vZm9ybWF0IHRoZSBzZWxlY3RlZCBjZWxsXG4gICAgICAgICAgICBpZiAoIXRhYmxlTWV0aG9kcy5pc0VtcHR5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0YWJsZU1ldGhvZHMuZm9ybWF0Q2VsbChjZWxsLCB2YWx1ZS50b0xvd2VyQ2FzZSgpLCBXRUVLKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAnJzsgLy8gcmV0dXJuIGFuIGVtcHR5IHN0cmluZyBpZiB0aGUgY2VsbCB2YWx1ZSBpcyBlbXB0eVxuICAgICAgICB9fSxcbiAgICAgICAge3RpdGxlOlwiMjNcIiwgZmllbGQ6XCJ3ZWVrR1wiLCBob3pBbGlnbjpcImNlbnRlclwiLCBoZWFkZXJIb3pBbGlnbjpcImNlbnRlclwiLCB2ZXJ0QWxpZ246XCJtaWRkbGVcIiwgd2lkdGg6NTAsIGZvcm1hdHRlcjpmdW5jdGlvbihjZWxsLCBmb3JtYXR0ZXJQYXJhbXMsIG9uUmVuZGVyZWQpe1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBjZWxsLmdldFZhbHVlKCk7XG4gICAgICAgICAgICBjb25zdCBXRUVLID0gNztcbiAgICAgICAgICAgIC8vZm9ybWF0IHRoZSBzZWxlY3RlZCBjZWxsXG4gICAgICAgICAgICBpZiAoIXRhYmxlTWV0aG9kcy5pc0VtcHR5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0YWJsZU1ldGhvZHMuZm9ybWF0Q2VsbChjZWxsLCB2YWx1ZS50b0xvd2VyQ2FzZSgpLCBXRUVLKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAnJzsgLy8gcmV0dXJuIGFuIGVtcHR5IHN0cmluZyBpZiB0aGUgY2VsbCB2YWx1ZSBpcyBlbXB0eVxuICAgICAgICB9fSxcbiAgICAgICAge3RpdGxlOlwiMzBcIiwgZmllbGQ6XCJ3ZWVrSFwiLCBob3pBbGlnbjpcImNlbnRlclwiLCBoZWFkZXJIb3pBbGlnbjpcImNlbnRlclwiLCB2ZXJ0QWxpZ246XCJtaWRkbGVcIiwgd2lkdGg6NTAsIGZvcm1hdHRlcjpmdW5jdGlvbihjZWxsLCBmb3JtYXR0ZXJQYXJhbXMsIG9uUmVuZGVyZWQpe1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBjZWxsLmdldFZhbHVlKCk7XG4gICAgICAgICAgICBjb25zdCBXRUVLID0gODtcbiAgICAgICAgICAgIC8vZm9ybWF0IHRoZSBzZWxlY3RlZCBjZWxsXG4gICAgICAgICAgICBpZiAoIXRhYmxlTWV0aG9kcy5pc0VtcHR5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0YWJsZU1ldGhvZHMuZm9ybWF0Q2VsbChjZWxsLCB2YWx1ZS50b0xvd2VyQ2FzZSgpLCBXRUVLKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAnJzsgLy8gcmV0dXJuIGFuIGVtcHR5IHN0cmluZyBpZiB0aGUgY2VsbCB2YWx1ZSBpcyBlbXB0eVxuICAgICAgICB9fSwvKlxuICAgICAgICB7dGl0bGU6XCI2XCIsIGZpZWxkOlwid2Vla0lcIiwgaG96QWxpZ246XCJjZW50ZXJcIiwgaGVhZGVySG96QWxpZ246XCJjZW50ZXJcIiwgdmVydEFsaWduOlwibWlkZGxlXCIsIHdpZHRoOjUwLCBmb3JtYXR0ZXI6ZnVuY3Rpb24oY2VsbCwgZm9ybWF0dGVyUGFyYW1zLCBvblJlbmRlcmVkKXtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY2VsbC5nZXRWYWx1ZSgpO1xuICAgICAgICAgICAgY29uc3QgV0VFSyA9IDk7XG4gICAgICAgICAgICAvL2Zvcm1hdCB0aGUgc2VsZWN0ZWQgY2VsbFxuICAgICAgICAgICAgaWYgKCF0YWJsZU1ldGhvZHMuaXNFbXB0eSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFibGVNZXRob2RzLmZvcm1hdENlbGwoY2VsbCwgdmFsdWUudG9Mb3dlckNhc2UoKSwgV0VFSyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJyc7IC8vIHJldHVybiBhbiBlbXB0eSBzdHJpbmcgaWYgdGhlIGNlbGwgdmFsdWUgaXMgZW1wdHlcbiAgICAgICAgfX0sXG4gICAgICAgIHt0aXRsZTpcIjEzXCIsIGZpZWxkOlwid2Vla0pcIiwgaG96QWxpZ246XCJjZW50ZXJcIiwgaGVhZGVySG96QWxpZ246XCJjZW50ZXJcIiwgdmVydEFsaWduOlwibWlkZGxlXCIsIHdpZHRoOjUwLCBmb3JtYXR0ZXI6ZnVuY3Rpb24oY2VsbCwgZm9ybWF0dGVyUGFyYW1zLCBvblJlbmRlcmVkKXtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY2VsbC5nZXRWYWx1ZSgpO1xuICAgICAgICAgICAgY29uc3QgV0VFSyA9IDEwO1xuICAgICAgICAgICAgLy9mb3JtYXQgdGhlIHNlbGVjdGVkIGNlbGxcbiAgICAgICAgICAgIGlmICghdGFibGVNZXRob2RzLmlzRW1wdHkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhYmxlTWV0aG9kcy5mb3JtYXRDZWxsKGNlbGwsIHZhbHVlLnRvTG93ZXJDYXNlKCksIFdFRUspO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICcnOyAvLyByZXR1cm4gYW4gZW1wdHkgc3RyaW5nIGlmIHRoZSBjZWxsIHZhbHVlIGlzIGVtcHR5XG4gICAgICAgIH19ICovXG4gICAgXSxcbn0pO1xuXG50YWJsZS5vbihcImRhdGFQcm9jZXNzZWRcIiwgZnVuY3Rpb24oKXtcbiAgICBsZXQgdG9wM3RlYW1zID0gZGF0YU1ldGhvZHMuZ2V0TW9zdENvbW1tb25UZWFtcygpO1xuXG4gICAgLy9kZWZpbmUgc29tZSBzYW1wbGUgZGF0YVxuICAgIHZhciB0YWJsZWRhdGEgPSBbXG4gICAgICAgIHtpZDoxLCBwb3NpdGlvbjpcIjFcIiwgZXF1aXBlOmAke3RvcDN0ZWFtc1swXS50ZWFtfWAsIHBpY2s6YCR7dG9wM3RlYW1zWzBdLmNvdW50fWB9LFxuICAgICAgICB7aWQ6MiwgcG9zaXRpb246XCIyXCIsIGVxdWlwZTpgJHt0b3AzdGVhbXNbMV0udGVhbX1gLCBwaWNrOmAke3RvcDN0ZWFtc1sxXS5jb3VudH1gfSxcbiAgICAgICAge2lkOjMsIHBvc2l0aW9uOlwiM1wiLCBlcXVpcGU6YCR7dG9wM3RlYW1zWzJdLnRlYW19YCwgcGljazpgJHt0b3AzdGVhbXNbMl0uY291bnR9YH0sXG4gICAgXTtcbiAgICBcbiAgICAvL2NyZWF0ZSBUYWJ1bGF0b3Igb24gRE9NIGVsZW1lbnQgd2l0aCBpZCBcImV4YW1wbGUtdGFibGVcIlxuICAgIHZhciBzdGF0c1RhYmxlID0gbmV3IFRhYnVsYXRvcihcIiNzdGF0cy10YWJsZVwiLCB7XG4gICAgICAgIGRhdGE6dGFibGVkYXRhLCAvL2Fzc2lnbiBkYXRhIHRvIHRhYmxlXG4gICAgICAgIGxheW91dDpcImZpdENvbHVtbnNcIixcbiAgICAgICAgcm93SGVpZ2h0OjUwLFxuICAgICAgICByb3dGb3JtYXR0ZXI6ZnVuY3Rpb24ocm93KXtcbiAgICAgICAgICAgIHZhciBkYXRhID0gcm93LmdldERhdGEoKTsgLy9nZXQgZGF0YSBvYmplY3QgZm9yIHJvd1xuICAgIFxuICAgICAgICAgICAgaWYoZGF0YS5lcXVpcGUgPT0gYCR7dG9wM3RlYW1zWzBdLnRlYW19YCl7XG4gICAgICAgICAgICAgICAgcm93LmdldEVsZW1lbnQoKS5jbGFzc0xpc3QuYWRkKHRvcDN0ZWFtc1swXS50ZWFtLnJlcGxhY2UoL1xccysvZywgJy0nKS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YS5lcXVpcGUgPT0gYCR7dG9wM3RlYW1zWzFdLnRlYW19YCkge1xuICAgICAgICAgICAgICAgIHJvdy5nZXRFbGVtZW50KCkuY2xhc3NMaXN0LmFkZCh0b3AzdGVhbXNbMV0udGVhbS5yZXBsYWNlKC9cXHMrL2csICctJykudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJvdy5nZXRFbGVtZW50KCkuY2xhc3NMaXN0LmFkZCh0b3AzdGVhbXNbMl0udGVhbS5yZXBsYWNlKC9cXHMrL2csICctJykudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNvbHVtbnM6WyAvL0RlZmluZSBUYWJsZSBDb2x1bW5zXG4gICAgICAgICAgICB7dGl0bGU6XCIjXCIsIGZpZWxkOlwicG9zaXRpb25cIiwgd2lkdGg6MjUsIGhlYWRlckhvekFsaWduOlwiY2VudGVyXCIsIGhvekFsaWduOlwiY2VudGVyXCIsIHZlcnRBbGlnbjpcIm1pZGRsZVwifSxcbiAgICAgICAgICAgIHt0aXRsZTpcIsOJUVVJUEVcIiwgZmllbGQ6XCJlcXVpcGVcIiwgaGVhZGVySG96QWxpZ246XCJjZW50ZXJcIiwgdmVydEFsaWduOlwibWlkZGxlXCIsIGZvcm1hdHRlcjpmdW5jdGlvbihjZWxsLCBmb3JtYXR0ZXJQYXJhbXMsIG9uUmVuZGVyZWQpe1xuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IGNlbGwuZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgICAgICBsZXQgdGVhbUFzc2V0cyA9IGRhdGFNZXRob2RzLmdldFRlYW0odmFsdWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBgPGltZyBzcmM9Jy9kb2NzL2ltYWdlcy8ke3RlYW1Bc3NldHMuaW1nfSc+PGRpdj4ke3ZhbHVlfTwvZGl2PmA7IC8vcmV0dXJuIHRoZSBjb250ZW50cyBvZiB0aGUgY2VsbDtcbiAgICAgICAgICAgIH0sfSxcbiAgICAgICAgICAgIHt0aXRsZTpcIlBJQ0tcIiwgZmllbGQ6XCJwaWNrXCIsIHdpZHRoOjU1LCBob3pBbGlnbjpcImNlbnRlclwiLCBoZWFkZXJIb3pBbGlnbjpcImNlbnRlclwiLCB2ZXJ0QWxpZ246XCJtaWRkbGVcIn0sXG4gICAgICAgIF0sXG4gICAgfSk7XG5cbiAgICBzdGF0c1RhYmxlLm9uKFwidGFibGVCdWlsdFwiLCBmdW5jdGlvbigpe1xuICAgICAgICBlZGl0RG9tLmFkZFBsYXllcnNDb3VudChwbGF5ZXJzQ291bnQpO1xuICAgICAgICBlZGl0RG9tLmFkZEN1cnJlbnRXZWVrKHdlZWspO1xuICAgIH0pXG59KTsiLCJpbXBvcnQgRGF0YSBmcm9tICcuL2ZpbGVzL3RlYW0uY3N2JztcbmltcG9ydCB7IHdlZWsgfSBmcm9tICcuL3RhYmxlJztcblxuLy8gSW5pdGlhbGlzZSB0aGUgbGlzdCBvZiBhbGwgdGhlIE5ITCB0ZWFtc1xuZXhwb3J0IHZhciB0ZWFtc0xpc3QgPSBbXTtcbmV4cG9ydCB2YXIgcGxheWVyc0NvdW50ID0gMDtcblxuLy8gTkhMIHRlYW0gb2JqZWN0XG5jb25zdCBUZWFtID0gKHRlYW0sIGNvdW50LCBwcm9wZXJOYW1lKSA9PiB7XG4gIHJldHVybiB7IHRlYW0sIGNvdW50LCBwcm9wZXJOYW1lfTtcbn07XG5cblxuZXhwb3J0IGNvbnN0IGRhdGFNZXRob2RzID0gKCgpID0+IHtcbiAgLy8gR2V0IGxvZ28gcG5nIGltYWdlXG4gIGNvbnN0IGdldFRlYW0gPSAodGVhbSkgPT4ge1xuICAgIGxldCB0ZWFtQXNzZXRzID0geyB0ZWFtTmFtZTogJycsIGltZzogJycgfTtcbiAgICBsZXQgaW1nO1xuICAgIGxldCB0aXRsZTtcbiAgICBzd2l0Y2ggKHRydWUpIHtcbiAgICAgIGNhc2UgdGVhbS5pbmNsdWRlcygnYW5haCcpOlxuICAgICAgICAgIHRpdGxlID0gJ0FuYWhlaW0gRHVja3MnO1xuICAgICAgICAgIGltZyA9ICdkdWNrcy1sb2dvLnBuZyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0ZWFtLmluY2x1ZGVzKCdjb3lvdGUnKTpcbiAgICAgICAgdGl0bGUgPSAnQXJpem9uYSBDb3lvdGVzJztcbiAgICAgICAgaW1nID0gJ2FyaXpvbmEtbG9nby5wbmcnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdGVhbS5pbmNsdWRlcygnYm9zdG9uJyk6XG4gICAgICAgIHRpdGxlID0gJ0Jvc3RvbiBCcnVpbnMnO1xuICAgICAgICBpbWcgPSAnYm9zdG9uLWJydWlucy1sb2dvLnBuZyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0ZWFtLmluY2x1ZGVzKCdidWZmYWxvJyk6XG4gICAgICAgIHRpdGxlID0gJ0J1ZmZhbG8gU2FicmVzJztcbiAgICAgICAgaW1nID0gJ2J1ZmZhbG8tbG9nby5wbmcnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdGVhbS5pbmNsdWRlcygnY2FsZ2FyeScpOlxuICAgICAgICB0aXRsZSA9ICdDYWxnYXJ5IEZsYW1lcyc7XG4gICAgICAgIGltZyA9ICdjYWxnYXJ5LWxvZ28ucG5nJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRlYW0uaW5jbHVkZXMoJ2Nhcm9saW4nKTpcbiAgICAgICAgdGl0bGUgPSAnQ2Fyb2xpbmEgSHVycmljYW5lcyc7XG4gICAgICAgIGltZyA9ICdjYXJvbGluYS1sb2dvLnBuZyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0ZWFtLmluY2x1ZGVzKCdjaGljYWdvJyk6XG4gICAgICAgIHRpdGxlID0gJ0NoaWNhZ28gQmxhY2toYXdrcyc7XG4gICAgICAgIGltZyA9ICdjaGljYWdvLWJsYWNraGF3a3MtbG9nby5wbmcnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdGVhbS5pbmNsdWRlcygnYXZhbGEnKTpcbiAgICAgICAgdGl0bGUgPSAnQ29sb3JhZG8gQXZhbGFuY2hlJztcbiAgICAgICAgaW1nID0gJ2NvbG9yYWRvLWxvZ28ucG5nJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRlYW0uaW5jbHVkZXMoJ2NvbHVtYnVzJyk6XG4gICAgICAgIHRpdGxlID0gJ0NvbHVtYnVzIEJsdWUgSmFja2V0cyc7XG4gICAgICAgIGltZyA9ICdjb2x1bWJ1cy1sb2dvLnBuZyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0ZWFtLmluY2x1ZGVzKCdkYWxsYXMnKTpcbiAgICAgICAgdGl0bGUgPSAnRGFsbGFzIFN0YXJzJztcbiAgICAgICAgaW1nID0gJ2RhbGxhcy1sb2dvLnBuZyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0ZWFtLmluY2x1ZGVzKCdkZXRyb2l0Jyk6XG4gICAgICAgIHRpdGxlID0gJ0RldHJvaXQgUmVkIFdpbmdzJztcbiAgICAgICAgaW1nID0gJ2RldHJvaXQtbG9nby5wbmcnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdGVhbS5pbmNsdWRlcygnZWRtb250b24nKTpcbiAgICAgICAgdGl0bGUgPSAnRWRtb250b24gT2lsZXJzJztcbiAgICAgICAgaW1nID0gJ2VkbW9udG9uLWxvZ28ucG5nJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRlYW0uaW5jbHVkZXMoJ2Zsb3JpZCcpOlxuICAgICAgICB0aXRsZSA9ICdGbG9yaWRhIFBhbnRoZXJzJztcbiAgICAgICAgaW1nID0gJ2Zsb3JpZGEtbG9nby5wbmcnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdGVhbS5pbmNsdWRlcygna2luZ3MnKTpcbiAgICAgICAgdGl0bGUgPSAnTG9zIEFuZ2VsZXMgS2luZ3MnO1xuICAgICAgICBpbWcgPSAnbG9zLWFuZ2VsZXMta2luZ3MtbG9nby5wbmcnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdGVhbS5pbmNsdWRlcygnd2lsZCcpOlxuICAgICAgICB0aXRsZSA9ICdNaW5uZXNvdGEgV2lsZCc7XG4gICAgICAgIGltZyA9ICdtaW5uZXNvdGEtbG9nby5wbmcnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdGVhbS5pbmNsdWRlcygnbW9udHInKTpcbiAgICAgICAgdGl0bGUgPSAnTW9udHJlYWwgQ2FuYWRpZW5zJztcbiAgICAgICAgaW1nID0gJ21vbnRyZWFsLWxvZ28ucG5nJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRlYW0uaW5jbHVkZXMoJ25hc2gnKTpcbiAgICAgICAgdGl0bGUgPSAnTmFzaHZpbGxlIFByZWRhdG9ycyc7XG4gICAgICAgIGltZyA9ICduYXNodmlsbGUtbG9nby5wbmcnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdGVhbS5pbmNsdWRlcygnamVyc2V5Jyk6XG4gICAgICAgIHRpdGxlID0gJ05ldyBKZXJzZXkgRGV2aWxzJztcbiAgICAgICAgaW1nID0gJ25ldy1qZXJzZXktbG9nby5wbmcnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdGVhbS5pbmNsdWRlcygnaXNsYScpOlxuICAgICAgICB0aXRsZSA9ICdOZXcgWW9yayBJc2xhbmRlcnMnO1xuICAgICAgICBpbWcgPSAnbmV3LXlvcmstaXNsYW5kZXJzLWxvZ28ucG5nJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRlYW0uaW5jbHVkZXMoJ3JhbmdlcicpOlxuICAgICAgICB0aXRsZSA9ICdOZXcgWW9yayBSYW5nZXJzJztcbiAgICAgICAgaW1nID0gJ25ldy15b3JrLXJhbmdlcnMtbG9nby5wbmcnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdGVhbS5pbmNsdWRlcygnb3R0YXdhJyk6XG4gICAgICAgIHRpdGxlID0gJ090dGF3YSBTZW5hdG9ycyc7XG4gICAgICAgIGltZyA9ICdvdHRhd2EtbG9nby5wbmcnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdGVhbS5pbmNsdWRlcygncGhpbGEnKTpcbiAgICAgICAgdGl0bGUgPSAnUGhpbGFkZWxwaGlhIEZseWVycyc7XG4gICAgICAgIGltZyA9ICdwaGlsYWRlbHBoaWEtbG9nby5wbmcnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdGVhbS5pbmNsdWRlcygncGl0dCcpOlxuICAgICAgICB0aXRsZSA9ICdQaXR0c2J1cmdoIFBlbmd1aW5zJztcbiAgICAgICAgaW1nID0gJ3BpdHRzYnVyZ2gtcGVuZ3VpbnMtbG9nby5wbmcnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdGVhbS5pbmNsdWRlcygnc2hhcmsnKTpcbiAgICAgICAgdGl0bGUgPSAnU2FuIEpvc2UgU2hhcmtzJztcbiAgICAgICAgaW1nID0gJ3Nhbi1qb3NlLWxvZ28ucG5nJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRlYW0uaW5jbHVkZXMoJ2tyYWsnKTpcbiAgICAgICAgdGl0bGUgPSAnU2VhdHRsZSBLcmFrZW4nO1xuICAgICAgICBpbWcgPSAna3Jha2VuLWxvZ28ucG5nJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRlYW0uaW5jbHVkZXMoJ2xvdWlzJyk6XG4gICAgICAgIHRpdGxlID0gJ1N0LUxvdWlzIEJsdWVzJztcbiAgICAgICAgaW1nID0gJ3N0LWxvdWlzLWxvZ28ucG5nJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRlYW0uaW5jbHVkZXMoJ3RhbXBhJyk6XG4gICAgICAgIHRpdGxlID0gJ1RhbXBhIEJheSBMaWdodG5pbmcnO1xuICAgICAgICBpbWcgPSAnVEJMX2Rhcmsuc3ZnJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRlYW0uaW5jbHVkZXMoJ3Rvcm9udG8nKTpcbiAgICAgICAgdGl0bGUgPSAnVG9yb250byBNYXBsZSBMZWFmcyc7XG4gICAgICAgIGltZyA9ICd0b3JvbnRvLWxvZ28ucG5nJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRlYW0uaW5jbHVkZXMoJ3ZhbmNvdXYnKTpcbiAgICAgICAgdGl0bGUgPSAnVmFuY291dmVyIENhbnVja3MnO1xuICAgICAgICBpbWcgPSAndmFuY291dmVyLWxvZ28ucG5nJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRlYW0uaW5jbHVkZXMoJ3ZlZ2FzJyk6XG4gICAgICAgIHRpdGxlID0gJ1ZlZ2FzIEdvbGRlbiBLbmlnaHRzJztcbiAgICAgICAgaW1nID0gJ3ZlZ2FzLWxvZ28ucG5nJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRlYW0uaW5jbHVkZXMoJ3dhc2gnKTpcbiAgICAgICAgdGl0bGUgPSAnV2FzaGluZ3RvbiBDYXBpdGFscyc7XG4gICAgICAgIGltZyA9ICd3YXNoaW5ndG9uLWNhcGl0YWxzLWxvZ28ucG5nJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRlYW0uaW5jbHVkZXMoJ2pldHMnKTpcbiAgICAgICAgdGl0bGUgPSAnV2lubmlwZWcgSmV0cyc7XG4gICAgICAgIGltZyA9ICd3aW5uaXBlZy1sb2dvLnBuZyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICB9XG4gICAgdGVhbUFzc2V0cy50ZWFtTmFtZSA9IHRpdGxlO1xuICAgIHRlYW1Bc3NldHMuaW1nID0gaW1nO1xuXG4gICAgcmV0dXJuIHRlYW1Bc3NldHM7XG4gIH07XG5cbiAgLy8gQ291bnQgbnVtYmVyIG9mIHBsYXllcnMgbGVmdCBpbiB0aGUgcG9vbFxuICBjb25zdCBpbmNyZW1lbnRQbGF5ZXJzQ291bnQgPSAod2VlaykgPT4ge1xuICAgIHBsYXllcnNDb3VudCsrO1xuICB9XG4gIFxuICAvLyBJbml0aWFsaXNlIE5ITCB0ZWFtcyBsaXN0XG4gIGNvbnN0IGluaXRpYWxpc2VUZWFtc0xpc3QgPSAoKSA9PiB7XG4gICAgZm9yIChsZXQgaSBpbiBEYXRhKSB7XG4gICAgICB0ZWFtc0xpc3QucHVzaChUZWFtKERhdGFbaV1bMF0sIHBhcnNlSW50KERhdGFbaV1bMV0pLCBUZWFtKERhdGFbaV1bMl0pKSk7XG4gICAgfVxuICB9XG4gIFxuICAvLyBJbmNyZW1lbnQgdGhlIGNvdW50IGZvciBlYWNoIHRlYW0gcGFzc2VkIGFzIHBhcmFtZXRlclxuICBjb25zdCBpbmNyZW1lbnRDb3VudCA9ICh0ZWFtKSA9PiB7XG4gICAgbGV0IHRlYW1PYmplY3QgPSB0ZWFtc0xpc3QuZmluZChvYmogPT4gb2JqLnRlYW0gPT09IHRlYW0pO1xuICAgIGlmICh0ZWFtT2JqZWN0KSB7XG4gICAgICAgIHRlYW1PYmplY3QuY291bnQrKztcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgZ2V0TW9zdENvbW1tb25UZWFtcyA9ICgpID0+IHtcbiAgICBjb25zdCBzb3J0ZWRUZWFtcyA9IFsuLi50ZWFtc0xpc3RdO1xuXG4gICAgLy8gU29ydCB0aGUgdGVhbXMgaW4gZGVzY2VuZGluZyBvcmRlciBiYXNlZCBvbiBjb3VudFxuICAgIHNvcnRlZFRlYW1zLnNvcnQoKGEsIGIpID0+IGIuY291bnQgLSBhLmNvdW50KTtcblxuICAgIC8vIFRha2UgdGhlIHRvcCAzIHRlYW1zXG4gICAgY29uc3QgdG9wM1RlYW1zID0gc29ydGVkVGVhbXMuc2xpY2UoMCwgMyk7XG5cbiAgICByZXR1cm4gdG9wM1RlYW1zLm1hcCh0ZWFtID0+ICh7IHRlYW06IHRlYW0udGVhbSwgY291bnQ6IHRlYW0uY291bnQgfSkpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRUZWFtLFxuICAgIGluY3JlbWVudFBsYXllcnNDb3VudCxcbiAgICBpbml0aWFsaXNlVGVhbXNMaXN0LFxuICAgIGluY3JlbWVudENvdW50LFxuICAgIGdldE1vc3RDb21tbW9uVGVhbXNcbiAgfTtcbn0pKCk7IiwiaW1wb3J0ICcuL3N0eWxlLmNzcyc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0ICcuL2RvbS5qcyc7XG5pbXBvcnQgeyBkYXRhTWV0aG9kcyB9IGZyb20gJy4vZGF0YS5qcyc7XG5pbXBvcnQgJy4vdGFibGUuanMnO1xuXG4vL2luaXRpYWxpc2UgdGVhbXMgbGlzdFxuZGF0YU1ldGhvZHMuaW5pdGlhbGlzZVRlYW1zTGlzdCgpO1xuXG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJpIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwiRlVOQ19FUlJPUl9URVhUIiwiSEFTSF9VTkRFRklORUQiLCJQTEFDRUhPTERFUiIsIldSQVBfUEFSVElBTF9GTEFHIiwiV1JBUF9BUllfRkxBRyIsIklORklOSVRZIiwiTUFYX1NBRkVfSU5URUdFUiIsIk5BTiIsIk1BWF9BUlJBWV9MRU5HVEgiLCJ3cmFwRmxhZ3MiLCJhcmdzVGFnIiwiYXJyYXlUYWciLCJib29sVGFnIiwiZGF0ZVRhZyIsImVycm9yVGFnIiwiZnVuY1RhZyIsImdlblRhZyIsIm1hcFRhZyIsIm51bWJlclRhZyIsIm9iamVjdFRhZyIsInByb21pc2VUYWciLCJyZWdleHBUYWciLCJzZXRUYWciLCJzdHJpbmdUYWciLCJzeW1ib2xUYWciLCJ3ZWFrTWFwVGFnIiwiYXJyYXlCdWZmZXJUYWciLCJkYXRhVmlld1RhZyIsImZsb2F0MzJUYWciLCJmbG9hdDY0VGFnIiwiaW50OFRhZyIsImludDE2VGFnIiwiaW50MzJUYWciLCJ1aW50OFRhZyIsInVpbnQ4Q2xhbXBlZFRhZyIsInVpbnQxNlRhZyIsInVpbnQzMlRhZyIsInJlRW1wdHlTdHJpbmdMZWFkaW5nIiwicmVFbXB0eVN0cmluZ01pZGRsZSIsInJlRW1wdHlTdHJpbmdUcmFpbGluZyIsInJlRXNjYXBlZEh0bWwiLCJyZVVuZXNjYXBlZEh0bWwiLCJyZUhhc0VzY2FwZWRIdG1sIiwiUmVnRXhwIiwic291cmNlIiwicmVIYXNVbmVzY2FwZWRIdG1sIiwicmVFc2NhcGUiLCJyZUV2YWx1YXRlIiwicmVJbnRlcnBvbGF0ZSIsInJlSXNEZWVwUHJvcCIsInJlSXNQbGFpblByb3AiLCJyZVByb3BOYW1lIiwicmVSZWdFeHBDaGFyIiwicmVIYXNSZWdFeHBDaGFyIiwicmVUcmltU3RhcnQiLCJyZVdoaXRlc3BhY2UiLCJyZVdyYXBDb21tZW50IiwicmVXcmFwRGV0YWlscyIsInJlU3BsaXREZXRhaWxzIiwicmVBc2NpaVdvcmQiLCJyZUZvcmJpZGRlbklkZW50aWZpZXJDaGFycyIsInJlRXNjYXBlQ2hhciIsInJlRXNUZW1wbGF0ZSIsInJlRmxhZ3MiLCJyZUlzQmFkSGV4IiwicmVJc0JpbmFyeSIsInJlSXNIb3N0Q3RvciIsInJlSXNPY3RhbCIsInJlSXNVaW50IiwicmVMYXRpbiIsInJlTm9NYXRjaCIsInJlVW5lc2NhcGVkU3RyaW5nIiwicnNBc3RyYWxSYW5nZSIsInJzQ29tYm9SYW5nZSIsInJzQ29tYm9NYXJrc1JhbmdlIiwicnNEaW5nYmF0UmFuZ2UiLCJyc0xvd2VyUmFuZ2UiLCJyc1VwcGVyUmFuZ2UiLCJyc1ZhclJhbmdlIiwicnNCcmVha1JhbmdlIiwicnNNYXRoT3BSYW5nZSIsInJzQXN0cmFsIiwicnNCcmVhayIsInJzQ29tYm8iLCJyc0RpZ2l0cyIsInJzRGluZ2JhdCIsInJzTG93ZXIiLCJyc01pc2MiLCJyc0ZpdHoiLCJyc05vbkFzdHJhbCIsInJzUmVnaW9uYWwiLCJyc1N1cnJQYWlyIiwicnNVcHBlciIsInJzWldKIiwicnNNaXNjTG93ZXIiLCJyc01pc2NVcHBlciIsInJzT3B0Q29udHJMb3dlciIsInJzT3B0Q29udHJVcHBlciIsInJlT3B0TW9kIiwicnNNb2RpZmllciIsInJzT3B0VmFyIiwicnNTZXEiLCJyc0Vtb2ppIiwicnNTeW1ib2wiLCJyZUFwb3MiLCJyZUNvbWJvTWFyayIsInJlVW5pY29kZSIsInJlVW5pY29kZVdvcmQiLCJyZUhhc1VuaWNvZGUiLCJyZUhhc1VuaWNvZGVXb3JkIiwiY29udGV4dFByb3BzIiwidGVtcGxhdGVDb3VudGVyIiwidHlwZWRBcnJheVRhZ3MiLCJjbG9uZWFibGVUYWdzIiwic3RyaW5nRXNjYXBlcyIsImZyZWVQYXJzZUZsb2F0IiwicGFyc2VGbG9hdCIsImZyZWVQYXJzZUludCIsInBhcnNlSW50IiwiZnJlZUdsb2JhbCIsImciLCJPYmplY3QiLCJmcmVlU2VsZiIsInNlbGYiLCJyb290IiwiRnVuY3Rpb24iLCJmcmVlRXhwb3J0cyIsIm5vZGVUeXBlIiwiZnJlZU1vZHVsZSIsIm1vZHVsZUV4cG9ydHMiLCJmcmVlUHJvY2VzcyIsInByb2Nlc3MiLCJub2RlVXRpbCIsInJlcXVpcmUiLCJ0eXBlcyIsImJpbmRpbmciLCJlIiwibm9kZUlzQXJyYXlCdWZmZXIiLCJpc0FycmF5QnVmZmVyIiwibm9kZUlzRGF0ZSIsImlzRGF0ZSIsIm5vZGVJc01hcCIsImlzTWFwIiwibm9kZUlzUmVnRXhwIiwiaXNSZWdFeHAiLCJub2RlSXNTZXQiLCJpc1NldCIsIm5vZGVJc1R5cGVkQXJyYXkiLCJpc1R5cGVkQXJyYXkiLCJhcHBseSIsImZ1bmMiLCJ0aGlzQXJnIiwiYXJncyIsImNhbGwiLCJhcnJheUFnZ3JlZ2F0b3IiLCJhcnJheSIsInNldHRlciIsIml0ZXJhdGVlIiwiYWNjdW11bGF0b3IiLCJpbmRleCIsInZhbHVlIiwiYXJyYXlFYWNoIiwiYXJyYXlFYWNoUmlnaHQiLCJhcnJheUV2ZXJ5IiwicHJlZGljYXRlIiwiYXJyYXlGaWx0ZXIiLCJyZXNJbmRleCIsInJlc3VsdCIsImFycmF5SW5jbHVkZXMiLCJiYXNlSW5kZXhPZiIsImFycmF5SW5jbHVkZXNXaXRoIiwiY29tcGFyYXRvciIsImFycmF5TWFwIiwiQXJyYXkiLCJhcnJheVB1c2giLCJ2YWx1ZXMiLCJvZmZzZXQiLCJhcnJheVJlZHVjZSIsImluaXRBY2N1bSIsImFycmF5UmVkdWNlUmlnaHQiLCJhcnJheVNvbWUiLCJhc2NpaVNpemUiLCJiYXNlUHJvcGVydHkiLCJiYXNlRmluZEtleSIsImNvbGxlY3Rpb24iLCJlYWNoRnVuYyIsImtleSIsImJhc2VGaW5kSW5kZXgiLCJmcm9tSW5kZXgiLCJmcm9tUmlnaHQiLCJzdHJpY3RJbmRleE9mIiwiYmFzZUlzTmFOIiwiYmFzZUluZGV4T2ZXaXRoIiwiYmFzZU1lYW4iLCJiYXNlU3VtIiwib2JqZWN0IiwiYmFzZVByb3BlcnR5T2YiLCJiYXNlUmVkdWNlIiwiY3VycmVudCIsImJhc2VUaW1lcyIsIm4iLCJiYXNlVHJpbSIsInN0cmluZyIsInNsaWNlIiwidHJpbW1lZEVuZEluZGV4IiwicmVwbGFjZSIsImJhc2VVbmFyeSIsImJhc2VWYWx1ZXMiLCJwcm9wcyIsImNhY2hlSGFzIiwiY2FjaGUiLCJoYXMiLCJjaGFyc1N0YXJ0SW5kZXgiLCJzdHJTeW1ib2xzIiwiY2hyU3ltYm9scyIsImNoYXJzRW5kSW5kZXgiLCJkZWJ1cnJMZXR0ZXIiLCJlc2NhcGVIdG1sQ2hhciIsImVzY2FwZVN0cmluZ0NoYXIiLCJjaHIiLCJoYXNVbmljb2RlIiwidGVzdCIsIm1hcFRvQXJyYXkiLCJzaXplIiwiZm9yRWFjaCIsIm92ZXJBcmciLCJ0cmFuc2Zvcm0iLCJhcmciLCJyZXBsYWNlSG9sZGVycyIsInBsYWNlaG9sZGVyIiwic2V0VG9BcnJheSIsInNldCIsInNldFRvUGFpcnMiLCJzdHJpbmdTaXplIiwibGFzdEluZGV4IiwidW5pY29kZVNpemUiLCJzdHJpbmdUb0FycmF5IiwibWF0Y2giLCJ1bmljb2RlVG9BcnJheSIsInNwbGl0IiwiYXNjaWlUb0FycmF5IiwiY2hhckF0IiwidW5lc2NhcGVIdG1sQ2hhciIsIl8iLCJydW5JbkNvbnRleHQiLCJjb250ZXh0IiwidWlkIiwiZGVmYXVsdHMiLCJwaWNrIiwiRGF0ZSIsIkVycm9yIiwiTWF0aCIsIlN0cmluZyIsIlR5cGVFcnJvciIsImFycmF5UHJvdG8iLCJwcm90b3R5cGUiLCJmdW5jUHJvdG8iLCJvYmplY3RQcm90byIsImNvcmVKc0RhdGEiLCJmdW5jVG9TdHJpbmciLCJoYXNPd25Qcm9wZXJ0eSIsImlkQ291bnRlciIsIm1hc2tTcmNLZXkiLCJleGVjIiwia2V5cyIsIklFX1BST1RPIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJvYmplY3RDdG9yU3RyaW5nIiwib2xkRGFzaCIsInJlSXNOYXRpdmUiLCJCdWZmZXIiLCJTeW1ib2wiLCJVaW50OEFycmF5IiwiYWxsb2NVbnNhZmUiLCJnZXRQcm90b3R5cGUiLCJnZXRQcm90b3R5cGVPZiIsIm9iamVjdENyZWF0ZSIsImNyZWF0ZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwic3BsaWNlIiwic3ByZWFkYWJsZVN5bWJvbCIsImlzQ29uY2F0U3ByZWFkYWJsZSIsInN5bUl0ZXJhdG9yIiwiaXRlcmF0b3IiLCJzeW1Ub1N0cmluZ1RhZyIsInRvU3RyaW5nVGFnIiwiZGVmaW5lUHJvcGVydHkiLCJnZXROYXRpdmUiLCJjdHhDbGVhclRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjdHhOb3ciLCJub3ciLCJjdHhTZXRUaW1lb3V0Iiwic2V0VGltZW91dCIsIm5hdGl2ZUNlaWwiLCJjZWlsIiwibmF0aXZlRmxvb3IiLCJmbG9vciIsIm5hdGl2ZUdldFN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJuYXRpdmVJc0J1ZmZlciIsImlzQnVmZmVyIiwibmF0aXZlSXNGaW5pdGUiLCJpc0Zpbml0ZSIsIm5hdGl2ZUpvaW4iLCJuYXRpdmVLZXlzIiwibmF0aXZlTWF4IiwibWF4IiwibmF0aXZlTWluIiwibWluIiwibmF0aXZlTm93IiwibmF0aXZlUGFyc2VJbnQiLCJuYXRpdmVSYW5kb20iLCJyYW5kb20iLCJuYXRpdmVSZXZlcnNlIiwicmV2ZXJzZSIsIkRhdGFWaWV3IiwiTWFwIiwiUHJvbWlzZSIsIlNldCIsIldlYWtNYXAiLCJuYXRpdmVDcmVhdGUiLCJtZXRhTWFwIiwicmVhbE5hbWVzIiwiZGF0YVZpZXdDdG9yU3RyaW5nIiwidG9Tb3VyY2UiLCJtYXBDdG9yU3RyaW5nIiwicHJvbWlzZUN0b3JTdHJpbmciLCJzZXRDdG9yU3RyaW5nIiwid2Vha01hcEN0b3JTdHJpbmciLCJzeW1ib2xQcm90byIsInN5bWJvbFZhbHVlT2YiLCJ2YWx1ZU9mIiwic3ltYm9sVG9TdHJpbmciLCJsb2Rhc2giLCJpc09iamVjdExpa2UiLCJpc0FycmF5IiwiTGF6eVdyYXBwZXIiLCJMb2Rhc2hXcmFwcGVyIiwid3JhcHBlckNsb25lIiwiYmFzZUNyZWF0ZSIsInByb3RvIiwiaXNPYmplY3QiLCJiYXNlTG9kYXNoIiwiY2hhaW5BbGwiLCJfX3dyYXBwZWRfXyIsIl9fYWN0aW9uc19fIiwiX19jaGFpbl9fIiwiX19pbmRleF9fIiwiX192YWx1ZXNfXyIsIl9fZGlyX18iLCJfX2ZpbHRlcmVkX18iLCJfX2l0ZXJhdGVlc19fIiwiX190YWtlQ291bnRfXyIsIl9fdmlld3NfXyIsIkhhc2giLCJlbnRyaWVzIiwiY2xlYXIiLCJlbnRyeSIsIkxpc3RDYWNoZSIsIk1hcENhY2hlIiwiU2V0Q2FjaGUiLCJfX2RhdGFfXyIsImFkZCIsIlN0YWNrIiwiYXJyYXlMaWtlS2V5cyIsImluaGVyaXRlZCIsImlzQXJyIiwiaXNBcmciLCJpc0FyZ3VtZW50cyIsImlzQnVmZiIsImlzVHlwZSIsInNraXBJbmRleGVzIiwiaXNJbmRleCIsImFycmF5U2FtcGxlIiwiYmFzZVJhbmRvbSIsImFycmF5U2FtcGxlU2l6ZSIsInNodWZmbGVTZWxmIiwiY29weUFycmF5IiwiYmFzZUNsYW1wIiwiYXJyYXlTaHVmZmxlIiwiYXNzaWduTWVyZ2VWYWx1ZSIsImVxIiwiYmFzZUFzc2lnblZhbHVlIiwiYXNzaWduVmFsdWUiLCJvYmpWYWx1ZSIsImFzc29jSW5kZXhPZiIsImJhc2VBZ2dyZWdhdG9yIiwiYmFzZUVhY2giLCJiYXNlQXNzaWduIiwiY29weU9iamVjdCIsImJhc2VBdCIsInBhdGhzIiwic2tpcCIsImdldCIsIm51bWJlciIsImxvd2VyIiwidXBwZXIiLCJiYXNlQ2xvbmUiLCJiaXRtYXNrIiwiY3VzdG9taXplciIsInN0YWNrIiwiaXNEZWVwIiwiaXNGbGF0IiwiaXNGdWxsIiwiY29uc3RydWN0b3IiLCJpbnB1dCIsImluaXRDbG9uZUFycmF5IiwidGFnIiwiZ2V0VGFnIiwiaXNGdW5jIiwiY2xvbmVCdWZmZXIiLCJpbml0Q2xvbmVPYmplY3QiLCJnZXRTeW1ib2xzSW4iLCJjb3B5U3ltYm9sc0luIiwia2V5c0luIiwiYmFzZUFzc2lnbkluIiwiZ2V0U3ltYm9scyIsImNvcHlTeW1ib2xzIiwic3ltYm9sIiwiQ3RvciIsImNsb25lQXJyYXlCdWZmZXIiLCJkYXRhVmlldyIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIiwiY2xvbmVEYXRhVmlldyIsImNsb25lVHlwZWRBcnJheSIsInJlZ2V4cCIsImNsb25lUmVnRXhwIiwiaW5pdENsb25lQnlUYWciLCJzdGFja2VkIiwic3ViVmFsdWUiLCJnZXRBbGxLZXlzSW4iLCJnZXRBbGxLZXlzIiwiYmFzZUNvbmZvcm1zVG8iLCJiYXNlRGVsYXkiLCJ3YWl0IiwiYmFzZURpZmZlcmVuY2UiLCJpbmNsdWRlcyIsImlzQ29tbW9uIiwidmFsdWVzTGVuZ3RoIiwib3V0ZXIiLCJjb21wdXRlZCIsInZhbHVlc0luZGV4IiwidGVtcGxhdGVTZXR0aW5ncyIsInBvcCIsImdldE1hcERhdGEiLCJwYWlycyIsIkxBUkdFX0FSUkFZX1NJWkUiLCJjcmVhdGVCYXNlRWFjaCIsImJhc2VGb3JPd24iLCJiYXNlRWFjaFJpZ2h0IiwiYmFzZUZvck93blJpZ2h0IiwiYmFzZUV2ZXJ5IiwiYmFzZUV4dHJlbXVtIiwiaXNTeW1ib2wiLCJiYXNlRmlsdGVyIiwiYmFzZUZsYXR0ZW4iLCJkZXB0aCIsImlzU3RyaWN0IiwiaXNGbGF0dGVuYWJsZSIsImJhc2VGb3IiLCJjcmVhdGVCYXNlRm9yIiwiYmFzZUZvclJpZ2h0IiwiYmFzZUZ1bmN0aW9ucyIsImlzRnVuY3Rpb24iLCJiYXNlR2V0IiwicGF0aCIsImNhc3RQYXRoIiwidG9LZXkiLCJiYXNlR2V0QWxsS2V5cyIsImtleXNGdW5jIiwic3ltYm9sc0Z1bmMiLCJiYXNlR2V0VGFnIiwiaXNPd24iLCJ1bm1hc2tlZCIsImdldFJhd1RhZyIsIm9iamVjdFRvU3RyaW5nIiwiYmFzZUd0Iiwib3RoZXIiLCJiYXNlSGFzIiwiYmFzZUhhc0luIiwiYmFzZUludGVyc2VjdGlvbiIsImFycmF5cyIsIm90aExlbmd0aCIsIm90aEluZGV4IiwiY2FjaGVzIiwibWF4TGVuZ3RoIiwiSW5maW5pdHkiLCJzZWVuIiwiYmFzZUludm9rZSIsInBhcmVudCIsImxhc3QiLCJiYXNlSXNBcmd1bWVudHMiLCJiYXNlSXNFcXVhbCIsImVxdWFsRnVuYyIsIm9iaklzQXJyIiwib3RoSXNBcnIiLCJvYmpUYWciLCJvdGhUYWciLCJvYmpJc09iaiIsIm90aElzT2JqIiwiaXNTYW1lVGFnIiwiZXF1YWxBcnJheXMiLCJuYW1lIiwibWVzc2FnZSIsImNvbnZlcnQiLCJpc1BhcnRpYWwiLCJlcXVhbEJ5VGFnIiwib2JqSXNXcmFwcGVkIiwib3RoSXNXcmFwcGVkIiwib2JqVW53cmFwcGVkIiwib3RoVW53cmFwcGVkIiwib2JqUHJvcHMiLCJvYmpMZW5ndGgiLCJvYmpTdGFja2VkIiwib3RoU3RhY2tlZCIsInNraXBDdG9yIiwib3RoVmFsdWUiLCJjb21wYXJlZCIsIm9iakN0b3IiLCJvdGhDdG9yIiwiZXF1YWxPYmplY3RzIiwiYmFzZUlzRXF1YWxEZWVwIiwiYmFzZUlzTWF0Y2giLCJtYXRjaERhdGEiLCJub0N1c3RvbWl6ZXIiLCJzcmNWYWx1ZSIsIkNPTVBBUkVfUEFSVElBTF9GTEFHIiwiYmFzZUlzTmF0aXZlIiwiYmFzZUl0ZXJhdGVlIiwiaWRlbnRpdHkiLCJiYXNlTWF0Y2hlc1Byb3BlcnR5IiwiYmFzZU1hdGNoZXMiLCJwcm9wZXJ0eSIsImJhc2VLZXlzIiwiaXNQcm90b3R5cGUiLCJiYXNlTHQiLCJiYXNlTWFwIiwiaXNBcnJheUxpa2UiLCJnZXRNYXRjaERhdGEiLCJtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSIsImlzS2V5IiwiaXNTdHJpY3RDb21wYXJhYmxlIiwiaGFzSW4iLCJiYXNlTWVyZ2UiLCJzcmNJbmRleCIsIm1lcmdlRnVuYyIsInNhZmVHZXQiLCJuZXdWYWx1ZSIsImlzVHlwZWQiLCJpc0FycmF5TGlrZU9iamVjdCIsImlzUGxhaW5PYmplY3QiLCJ0b1BsYWluT2JqZWN0IiwiYmFzZU1lcmdlRGVlcCIsImJhc2VOdGgiLCJiYXNlT3JkZXJCeSIsIml0ZXJhdGVlcyIsIm9yZGVycyIsImdldEl0ZXJhdGVlIiwiY3JpdGVyaWEiLCJjb21wYXJlciIsInNvcnQiLCJvYmpDcml0ZXJpYSIsIm90aENyaXRlcmlhIiwib3JkZXJzTGVuZ3RoIiwiY29tcGFyZUFzY2VuZGluZyIsImNvbXBhcmVNdWx0aXBsZSIsImJhc2VTb3J0QnkiLCJiYXNlUGlja0J5IiwiYmFzZVNldCIsImJhc2VQdWxsQWxsIiwiaW5kZXhPZiIsImJhc2VQdWxsQXQiLCJpbmRleGVzIiwicHJldmlvdXMiLCJiYXNlVW5zZXQiLCJiYXNlUmVwZWF0IiwiYmFzZVJlc3QiLCJzdGFydCIsInNldFRvU3RyaW5nIiwib3ZlclJlc3QiLCJiYXNlU2FtcGxlIiwiYmFzZVNhbXBsZVNpemUiLCJuZXN0ZWQiLCJiYXNlU2V0RGF0YSIsImJhc2VTZXRUb1N0cmluZyIsImNvbnN0YW50IiwiYmFzZVNodWZmbGUiLCJiYXNlU2xpY2UiLCJlbmQiLCJiYXNlU29tZSIsImJhc2VTb3J0ZWRJbmRleCIsInJldEhpZ2hlc3QiLCJsb3ciLCJoaWdoIiwibWlkIiwiYmFzZVNvcnRlZEluZGV4QnkiLCJ2YWxJc05hTiIsInZhbElzTnVsbCIsInZhbElzU3ltYm9sIiwidmFsSXNVbmRlZmluZWQiLCJvdGhJc0RlZmluZWQiLCJvdGhJc051bGwiLCJvdGhJc1JlZmxleGl2ZSIsIm90aElzU3ltYm9sIiwic2V0TG93IiwiYmFzZVNvcnRlZFVuaXEiLCJiYXNlVG9OdW1iZXIiLCJiYXNlVG9TdHJpbmciLCJiYXNlVW5pcSIsImNyZWF0ZVNldCIsInNlZW5JbmRleCIsImJhc2VVcGRhdGUiLCJ1cGRhdGVyIiwiYmFzZVdoaWxlIiwiaXNEcm9wIiwiYmFzZVdyYXBwZXJWYWx1ZSIsImFjdGlvbnMiLCJhY3Rpb24iLCJiYXNlWG9yIiwiYmFzZVppcE9iamVjdCIsImFzc2lnbkZ1bmMiLCJ2YWxzTGVuZ3RoIiwiY2FzdEFycmF5TGlrZU9iamVjdCIsImNhc3RGdW5jdGlvbiIsInN0cmluZ1RvUGF0aCIsImNhc3RSZXN0IiwiY2FzdFNsaWNlIiwiY29weSIsImFycmF5QnVmZmVyIiwidHlwZWRBcnJheSIsInZhbElzRGVmaW5lZCIsInZhbElzUmVmbGV4aXZlIiwiY29tcG9zZUFyZ3MiLCJwYXJ0aWFscyIsImhvbGRlcnMiLCJpc0N1cnJpZWQiLCJhcmdzSW5kZXgiLCJhcmdzTGVuZ3RoIiwiaG9sZGVyc0xlbmd0aCIsImxlZnRJbmRleCIsImxlZnRMZW5ndGgiLCJyYW5nZUxlbmd0aCIsImlzVW5jdXJyaWVkIiwiY29tcG9zZUFyZ3NSaWdodCIsImhvbGRlcnNJbmRleCIsInJpZ2h0SW5kZXgiLCJyaWdodExlbmd0aCIsImlzTmV3IiwiY3JlYXRlQWdncmVnYXRvciIsImluaXRpYWxpemVyIiwiY3JlYXRlQXNzaWduZXIiLCJhc3NpZ25lciIsInNvdXJjZXMiLCJndWFyZCIsImlzSXRlcmF0ZWVDYWxsIiwiaXRlcmFibGUiLCJjcmVhdGVDYXNlRmlyc3QiLCJtZXRob2ROYW1lIiwidHJhaWxpbmciLCJjcmVhdGVDb21wb3VuZGVyIiwiY2FsbGJhY2siLCJ3b3JkcyIsImRlYnVyciIsImNyZWF0ZUN0b3IiLCJhcmd1bWVudHMiLCJ0aGlzQmluZGluZyIsImNyZWF0ZUZpbmQiLCJmaW5kSW5kZXhGdW5jIiwiY3JlYXRlRmxvdyIsImZsYXRSZXN0IiwiZnVuY3MiLCJwcmVyZXEiLCJ0aHJ1Iiwid3JhcHBlciIsImdldEZ1bmNOYW1lIiwiZnVuY05hbWUiLCJnZXREYXRhIiwiaXNMYXppYWJsZSIsInBsYW50IiwiY3JlYXRlSHlicmlkIiwicGFydGlhbHNSaWdodCIsImhvbGRlcnNSaWdodCIsImFyZ1BvcyIsImFyeSIsImFyaXR5IiwiaXNBcnkiLCJpc0JpbmQiLCJpc0JpbmRLZXkiLCJpc0ZsaXAiLCJnZXRIb2xkZXIiLCJob2xkZXJzQ291bnQiLCJjb3VudEhvbGRlcnMiLCJuZXdIb2xkZXJzIiwiY3JlYXRlUmVjdXJyeSIsImZuIiwiYXJyTGVuZ3RoIiwib2xkQXJyYXkiLCJyZW9yZGVyIiwiY3JlYXRlSW52ZXJ0ZXIiLCJ0b0l0ZXJhdGVlIiwiYmFzZUludmVydGVyIiwiY3JlYXRlTWF0aE9wZXJhdGlvbiIsIm9wZXJhdG9yIiwiZGVmYXVsdFZhbHVlIiwiY3JlYXRlT3ZlciIsImFycmF5RnVuYyIsImNyZWF0ZVBhZGRpbmciLCJjaGFycyIsImNoYXJzTGVuZ3RoIiwiY3JlYXRlUmFuZ2UiLCJzdGVwIiwidG9GaW5pdGUiLCJiYXNlUmFuZ2UiLCJjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uIiwidG9OdW1iZXIiLCJ3cmFwRnVuYyIsImlzQ3VycnkiLCJuZXdEYXRhIiwic2V0RGF0YSIsInNldFdyYXBUb1N0cmluZyIsImNyZWF0ZVJvdW5kIiwicHJlY2lzaW9uIiwidG9JbnRlZ2VyIiwicGFpciIsIm5vb3AiLCJjcmVhdGVUb1BhaXJzIiwiYmFzZVRvUGFpcnMiLCJjcmVhdGVXcmFwIiwic3JjQml0bWFzayIsIm5ld0JpdG1hc2siLCJpc0NvbWJvIiwibWVyZ2VEYXRhIiwiY3JlYXRlQ3VycnkiLCJjcmVhdGVQYXJ0aWFsIiwiY3JlYXRlQmluZCIsImN1c3RvbURlZmF1bHRzQXNzaWduSW4iLCJjdXN0b21EZWZhdWx0c01lcmdlIiwiY3VzdG9tT21pdENsb25lIiwiYXJyU3RhY2tlZCIsImFyclZhbHVlIiwiZmxhdHRlbiIsIm90aGVyRnVuYyIsInR5cGUiLCJnZXRWYWx1ZSIsInN0dWJBcnJheSIsImhhc1BhdGgiLCJoYXNGdW5jIiwiaXNMZW5ndGgiLCJBcnJheUJ1ZmZlciIsInJlc29sdmUiLCJjdG9yU3RyaW5nIiwiaXNNYXNrYWJsZSIsInN0dWJGYWxzZSIsIm90aGVyQXJncyIsInNob3J0T3V0IiwicmVmZXJlbmNlIiwiZGV0YWlscyIsImluc2VydFdyYXBEZXRhaWxzIiwidXBkYXRlV3JhcERldGFpbHMiLCJnZXRXcmFwRGV0YWlscyIsImNvdW50IiwibGFzdENhbGxlZCIsInN0YW1wIiwicmVtYWluaW5nIiwicmFuZCIsIm1lbW9pemUiLCJjaGFyQ29kZUF0IiwicXVvdGUiLCJzdWJTdHJpbmciLCJjbG9uZSIsImRpZmZlcmVuY2UiLCJkaWZmZXJlbmNlQnkiLCJkaWZmZXJlbmNlV2l0aCIsImZpbmRJbmRleCIsImZpbmRMYXN0SW5kZXgiLCJoZWFkIiwiaW50ZXJzZWN0aW9uIiwibWFwcGVkIiwiaW50ZXJzZWN0aW9uQnkiLCJpbnRlcnNlY3Rpb25XaXRoIiwicHVsbCIsInB1bGxBbGwiLCJwdWxsQXQiLCJ1bmlvbiIsInVuaW9uQnkiLCJ1bmlvbldpdGgiLCJ1bnppcCIsImdyb3VwIiwidW56aXBXaXRoIiwid2l0aG91dCIsInhvciIsInhvckJ5IiwieG9yV2l0aCIsInppcCIsInppcFdpdGgiLCJjaGFpbiIsImludGVyY2VwdG9yIiwid3JhcHBlckF0IiwiY291bnRCeSIsImZpbmQiLCJmaW5kTGFzdCIsImZvckVhY2hSaWdodCIsImdyb3VwQnkiLCJpbnZva2VNYXAiLCJrZXlCeSIsInBhcnRpdGlvbiIsInNvcnRCeSIsImJlZm9yZSIsImJpbmQiLCJiaW5kS2V5IiwiV1JBUF9CSU5EX0ZMQUciLCJkZWJvdW5jZSIsIm9wdGlvbnMiLCJsYXN0QXJncyIsImxhc3RUaGlzIiwibWF4V2FpdCIsInRpbWVySWQiLCJsYXN0Q2FsbFRpbWUiLCJsYXN0SW52b2tlVGltZSIsImxlYWRpbmciLCJtYXhpbmciLCJpbnZva2VGdW5jIiwidGltZSIsInNob3VsZEludm9rZSIsInRpbWVTaW5jZUxhc3RDYWxsIiwidGltZXJFeHBpcmVkIiwidHJhaWxpbmdFZGdlIiwidGltZVdhaXRpbmciLCJyZW1haW5pbmdXYWl0IiwiZGVib3VuY2VkIiwiaXNJbnZva2luZyIsImxlYWRpbmdFZGdlIiwiY2FuY2VsIiwiZmx1c2giLCJkZWZlciIsImRlbGF5IiwicmVzb2x2ZXIiLCJtZW1vaXplZCIsIkNhY2hlIiwibmVnYXRlIiwib3ZlckFyZ3MiLCJ0cmFuc2Zvcm1zIiwiZnVuY3NMZW5ndGgiLCJwYXJ0aWFsIiwicGFydGlhbFJpZ2h0IiwicmVhcmciLCJndCIsImd0ZSIsImlzRXJyb3IiLCJpc0ludGVnZXIiLCJpc051bWJlciIsImlzU3RyaW5nIiwibHQiLCJsdGUiLCJ0b0FycmF5IiwibmV4dCIsImRvbmUiLCJpdGVyYXRvclRvQXJyYXkiLCJyZW1haW5kZXIiLCJ0b0xlbmd0aCIsImlzQmluYXJ5IiwiYXNzaWduIiwiYXNzaWduSW4iLCJhc3NpZ25JbldpdGgiLCJhc3NpZ25XaXRoIiwiYXQiLCJwcm9wc0luZGV4IiwicHJvcHNMZW5ndGgiLCJkZWZhdWx0c0RlZXAiLCJtZXJnZVdpdGgiLCJpbnZlcnQiLCJpbnZlcnRCeSIsImludm9rZSIsIm5hdGl2ZUtleXNJbiIsImlzUHJvdG8iLCJiYXNlS2V5c0luIiwibWVyZ2UiLCJvbWl0IiwiQ0xPTkVfREVFUF9GTEFHIiwiYmFzZVBpY2siLCJwaWNrQnkiLCJwcm9wIiwidG9QYWlycyIsInRvUGFpcnNJbiIsImNhbWVsQ2FzZSIsIndvcmQiLCJ0b0xvd2VyQ2FzZSIsImNhcGl0YWxpemUiLCJ1cHBlckZpcnN0Iiwia2ViYWJDYXNlIiwibG93ZXJDYXNlIiwibG93ZXJGaXJzdCIsInNuYWtlQ2FzZSIsInN0YXJ0Q2FzZSIsInVwcGVyQ2FzZSIsInRvVXBwZXJDYXNlIiwicGF0dGVybiIsImhhc1VuaWNvZGVXb3JkIiwidW5pY29kZVdvcmRzIiwiYXNjaWlXb3JkcyIsImF0dGVtcHQiLCJiaW5kQWxsIiwibWV0aG9kTmFtZXMiLCJmbG93IiwiZmxvd1JpZ2h0IiwibWV0aG9kIiwibWV0aG9kT2YiLCJtaXhpbiIsIm92ZXIiLCJvdmVyRXZlcnkiLCJvdmVyU29tZSIsImJhc2VQcm9wZXJ0eURlZXAiLCJyYW5nZSIsInJhbmdlUmlnaHQiLCJhdWdlbmQiLCJhZGRlbmQiLCJkaXZpZGUiLCJkaXZpZGVuZCIsImRpdmlzb3IiLCJtdWx0aXBseSIsIm11bHRpcGxpZXIiLCJtdWx0aXBsaWNhbmQiLCJyb3VuZCIsInN1YnRyYWN0IiwibWludWVuZCIsInN1YnRyYWhlbmQiLCJhZnRlciIsImNhc3RBcnJheSIsImNodW5rIiwiY29tcGFjdCIsImNvbmQiLCJjb25mb3JtcyIsImJhc2VDb25mb3JtcyIsInByb3BlcnRpZXMiLCJjdXJyeSIsImN1cnJ5UmlnaHQiLCJkcm9wIiwiZHJvcFJpZ2h0IiwiZHJvcFJpZ2h0V2hpbGUiLCJkcm9wV2hpbGUiLCJmaWxsIiwiYmFzZUZpbGwiLCJmaWx0ZXIiLCJmbGF0TWFwIiwiZmxhdE1hcERlZXAiLCJmbGF0TWFwRGVwdGgiLCJmbGF0dGVuRGVlcCIsImZsYXR0ZW5EZXB0aCIsImZsaXAiLCJmcm9tUGFpcnMiLCJmdW5jdGlvbnMiLCJmdW5jdGlvbnNJbiIsImluaXRpYWwiLCJtYXBLZXlzIiwibWFwVmFsdWVzIiwibWF0Y2hlcyIsIm1hdGNoZXNQcm9wZXJ0eSIsIm50aEFyZyIsIm9taXRCeSIsIm9uY2UiLCJvcmRlckJ5IiwicHJvcGVydHlPZiIsInB1bGxBbGxCeSIsInB1bGxBbGxXaXRoIiwicmVqZWN0IiwicmVtb3ZlIiwicmVzdCIsInNhbXBsZVNpemUiLCJzZXRXaXRoIiwic2h1ZmZsZSIsInNvcnRlZFVuaXEiLCJzb3J0ZWRVbmlxQnkiLCJzZXBhcmF0b3IiLCJsaW1pdCIsInNwcmVhZCIsInRhaWwiLCJ0YWtlIiwidGFrZVJpZ2h0IiwidGFrZVJpZ2h0V2hpbGUiLCJ0YWtlV2hpbGUiLCJ0YXAiLCJ0aHJvdHRsZSIsInRvUGF0aCIsImlzQXJyTGlrZSIsInVuYXJ5IiwidW5pcSIsInVuaXFCeSIsInVuaXFXaXRoIiwidW5zZXQiLCJ1cGRhdGUiLCJ1cGRhdGVXaXRoIiwidmFsdWVzSW4iLCJ3cmFwIiwiemlwT2JqZWN0IiwiemlwT2JqZWN0RGVlcCIsImVudHJpZXNJbiIsImV4dGVuZCIsImV4dGVuZFdpdGgiLCJjbGFtcCIsImNsb25lRGVlcCIsImNsb25lRGVlcFdpdGgiLCJjbG9uZVdpdGgiLCJjb25mb3Jtc1RvIiwiZGVmYXVsdFRvIiwiZW5kc1dpdGgiLCJ0YXJnZXQiLCJwb3NpdGlvbiIsImVzY2FwZSIsImVzY2FwZVJlZ0V4cCIsImV2ZXJ5IiwiZmluZEtleSIsImZpbmRMYXN0S2V5IiwiZm9ySW4iLCJmb3JJblJpZ2h0IiwiZm9yT3duIiwiZm9yT3duUmlnaHQiLCJpblJhbmdlIiwiYmFzZUluUmFuZ2UiLCJpc0Jvb2xlYW4iLCJpc0VsZW1lbnQiLCJpc0VtcHR5IiwiaXNFcXVhbCIsImlzRXF1YWxXaXRoIiwiaXNNYXRjaCIsImlzTWF0Y2hXaXRoIiwiaXNOYU4iLCJpc05hdGl2ZSIsImlzTmlsIiwiaXNOdWxsIiwiaXNTYWZlSW50ZWdlciIsImlzVW5kZWZpbmVkIiwiaXNXZWFrTWFwIiwiaXNXZWFrU2V0IiwibGFzdEluZGV4T2YiLCJzdHJpY3RMYXN0SW5kZXhPZiIsIm1heEJ5IiwibWVhbiIsIm1lYW5CeSIsIm1pbkJ5Iiwic3R1Yk9iamVjdCIsInN0dWJTdHJpbmciLCJzdHViVHJ1ZSIsIm50aCIsIm5vQ29uZmxpY3QiLCJwYWQiLCJzdHJMZW5ndGgiLCJwYWRFbmQiLCJwYWRTdGFydCIsInJhZGl4IiwiZmxvYXRpbmciLCJ0ZW1wIiwicmVkdWNlIiwicmVkdWNlUmlnaHQiLCJyZXBlYXQiLCJzYW1wbGUiLCJzb21lIiwic29ydGVkSW5kZXgiLCJzb3J0ZWRJbmRleEJ5Iiwic29ydGVkSW5kZXhPZiIsInNvcnRlZExhc3RJbmRleCIsInNvcnRlZExhc3RJbmRleEJ5Iiwic29ydGVkTGFzdEluZGV4T2YiLCJzdGFydHNXaXRoIiwic3VtIiwic3VtQnkiLCJ0ZW1wbGF0ZSIsInNldHRpbmdzIiwiaXNFc2NhcGluZyIsImlzRXZhbHVhdGluZyIsImltcG9ydHMiLCJpbXBvcnRzS2V5cyIsImltcG9ydHNWYWx1ZXMiLCJpbnRlcnBvbGF0ZSIsInJlRGVsaW1pdGVycyIsImV2YWx1YXRlIiwic291cmNlVVJMIiwiZXNjYXBlVmFsdWUiLCJpbnRlcnBvbGF0ZVZhbHVlIiwiZXNUZW1wbGF0ZVZhbHVlIiwiZXZhbHVhdGVWYWx1ZSIsInZhcmlhYmxlIiwidGltZXMiLCJ0b0xvd2VyIiwidG9TYWZlSW50ZWdlciIsInRvVXBwZXIiLCJ0cmltIiwidHJpbUVuZCIsInRyaW1TdGFydCIsInRydW5jYXRlIiwib21pc3Npb24iLCJzZWFyY2giLCJzdWJzdHJpbmciLCJnbG9iYWwiLCJuZXdFbmQiLCJ1bmlxdWVJZCIsInByZWZpeCIsImVhY2giLCJlYWNoUmlnaHQiLCJmaXJzdCIsIlZFUlNJT04iLCJpc0ZpbHRlciIsInRha2VOYW1lIiwiZHJvcE5hbWUiLCJjaGVja0l0ZXJhdGVlIiwiaXNUYWtlciIsImxvZGFzaEZ1bmMiLCJyZXRVbndyYXBwZWQiLCJpc0xhenkiLCJ1c2VMYXp5IiwiaXNIeWJyaWQiLCJpc1Vud3JhcHBlZCIsIm9ubHlMYXp5IiwiY2hhaW5OYW1lIiwiZGlyIiwiaXNSaWdodCIsInZpZXciLCJnZXRWaWV3IiwiaXRlckxlbmd0aCIsInRha2VDb3VudCIsIml0ZXJJbmRleCIsImNvbW1pdCIsIndyYXBwZWQiLCJ0b0pTT04iLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4IiwiYXBpIiwiZG9tQVBJIiwibmV3T2JqIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImdldFRhcmdldCIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsImxvYWRlZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwibyIsImVudW1lcmFibGUiLCJnbG9iYWxUaGlzIiwibm1kIiwiY2hpbGRyZW4iLCJuYyIsImxvY2FscyIsImVkaXREb20iLCJpbm5lckhUTUwiLCJ3ZWVrIiwiQ29yZUZlYXR1cmUiLCJ0YWJsZSIsInJlbG9hZERhdGEiLCJzaWxlbnQiLCJjb2x1bW5zQ2hhbmdlZCIsImRhdGFMb2FkZXIiLCJsb2FkIiwibGFuZ1RleHQiLCJsb2NhbGl6ZSIsImdldFRleHQiLCJsYW5nQmluZCIsImxhbmdMb2NhbGUiLCJnZXRMb2NhbGUiLCJjb21tc0Nvbm5lY3Rpb25zIiwiY29tbXMiLCJnZXRDb25uZWN0aW9ucyIsImNvbW1zU2VuZCIsInNlbmQiLCJsYXlvdXRNb2RlIiwibGF5b3V0IiwiZ2V0TW9kZSIsImxheW91dFJlZnJlc2giLCJmb3JjZSIsInN1YnNjcmliZSIsImV2ZW50QnVzIiwidW5zdWJzY3JpYmUiLCJzdWJzY3JpYmVkIiwic3Vic2NyaXB0aW9uQ2hhbmdlIiwiZGlzcGF0Y2giLCJjb25maXJtIiwiZGlzcGF0Y2hFeHRlcm5hbCIsImV4dGVybmFsRXZlbnRzIiwic3Vic2NyaWJlZEV4dGVybmFsIiwic3Vic2NyaXB0aW9uQ2hhbmdlRXh0ZXJuYWwiLCJzZXRPcHRpb24iLCJkZXByZWNhdGlvbkNoZWNrIiwib2xkT3B0aW9uIiwibmV3T3B0aW9uIiwiZGVwcmVjYXRpb25BZHZpc29yIiwiY2hlY2siLCJkZXByZWNhdGlvbkNoZWNrTXNnIiwibXNnIiwiY2hlY2tNc2ciLCJkZXByZWNhdGlvbk1zZyIsIkhlbHBlcnMiLCJlbFZpc2libGUiLCJlbCIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwiZWxPZmZzZXQiLCJib3giLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ0b3AiLCJwYWdlWU9mZnNldCIsImRvY3VtZW50RWxlbWVudCIsImNsaWVudFRvcCIsImxlZnQiLCJwYWdlWE9mZnNldCIsImNsaWVudExlZnQiLCJkZWVwQ2xvbmUiLCJfX3Byb3RvX18iLCJzdWJqZWN0IiwidW5zaGlmdCIsIlBvcHVwIiwic3VwZXIiLCJjb250YWluZXIiLCJfbG9va3VwQ29udGFpbmVyIiwicmV2ZXJzZWRYIiwiY2hpbGRQb3B1cCIsImJsdXJhYmxlIiwiYmx1ckNhbGxiYWNrIiwiYmx1ckV2ZW50c0JvdW5kIiwicmVuZGVyZWRDYWxsYmFjayIsInZpc2libGUiLCJoaWRlYWJsZSIsImNsYXNzTGlzdCIsImJsdXJFdmVudCIsImhpZGUiLCJlc2NFdmVudCIsIl9lc2NhcGVDaGVjayIsImRlc3Ryb3lCaW5kaW5nIiwidGFibGVEZXN0cm95ZWQiLCJkZXN0cm95ZWQiLCJwb3B1cENvbnRhaW5lciIsImNvbnNvbGUiLCJ3YXJuIiwiX2NoZWNrQ29udGFpbmVySXNQYXJlbnQiLCJib2R5IiwicmVuZGVyQ2FsbGJhY2siLCJjb250YWluZXJFdmVudENvb3JkcyIsInRvdWNoIiwiTW91c2VFdmVudCIsIngiLCJ0b3VjaGVzIiwicGFnZVgiLCJ5IiwicGFnZVkiLCJwYXJlbnRPZmZzZXQiLCJlbGVtZW50UG9zaXRpb25Db29yZHMiLCJjb250YWluZXJPZmZzZXQiLCJzaG93Iiwib3JpZ2luIiwicGFyZW50RWwiLCJjb29yZHMiLCJIVE1MRWxlbWVudCIsIl9maXRUb1NjcmVlbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJzdG9wUHJvcGFnYXRpb24iLCJzY3JvbGxUb3AiLCJyaWdodCIsInNjcm9sbEhlaWdodCIsImlzVmlzaWJsZSIsImhpZGVPbkJsdXIiLCJyb3dNYW5hZ2VyIiwia2V5Q29kZSIsImJsb2NrSGlkZSIsInJlc3RvcmVIaWRlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNoaWxkIiwiTW9kdWxlIiwiX2hhbmRsZXIiLCJpbml0aWFsaXplIiwicmVnaXN0ZXJUYWJsZU9wdGlvbiIsIm9wdGlvbnNMaXN0IiwicmVnaXN0ZXIiLCJyZWdpc3RlckNvbHVtbk9wdGlvbiIsImNvbHVtbk1hbmFnZXIiLCJyZWdpc3RlclRhYmxlRnVuY3Rpb24iLCJpbml0R3VhcmQiLCJyZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uIiwiY29tcG9uZW50IiwiaGFuZGxlciIsImNvbXBvbmVudEZ1bmN0aW9uQmluZGVyIiwicmVnaXN0ZXJEYXRhSGFuZGxlciIsInByaW9yaXR5IiwicmVnaXN0ZXJEYXRhUGlwZWxpbmVIYW5kbGVyIiwicmVnaXN0ZXJEaXNwbGF5SGFuZGxlciIsInJlZ2lzdGVyRGlzcGxheVBpcGVsaW5lSGFuZGxlciIsImRpc3BsYXlSb3dzIiwiYWRqdXN0IiwibG9va3VwSW5kZXgiLCJkaXNwbGF5UGlwZWxpbmUiLCJnZXREaXNwbGF5Um93cyIsImFjdGl2ZVJvd3MiLCJyZWZyZXNoRGF0YSIsInJlbmRlckluUG9zaXRpb24iLCJyZWZyZXNoQWN0aXZlRGF0YSIsImZvb3RlckFwcGVuZCIsImZvb3Rlck1hbmFnZXIiLCJhcHBlbmQiLCJmb290ZXJQcmVwZW5kIiwicHJlcGVuZCIsImZvb3RlclJlbW92ZSIsInBvcHVwIiwibWVudUVsIiwibWVudUNvbnRhaW5lciIsImFsZXJ0IiwiYWxlcnRNYW5hZ2VyIiwiY2xlYXJBbGVydCIsIkFjY2Vzc29yIiwiYWxsb3dlZFR5cGVzIiwiaW5pdGlhbGl6ZUNvbHVtbiIsInRyYW5zZm9ybVJvdyIsImNvbHVtbiIsImNvbmZpZyIsImFjY2Vzc29yIiwibG9va3VwQWNjZXNzb3IiLCJwYXJhbXMiLCJhY2Nlc3NvcnMiLCJyb3ciLCJyb3dDb21wb25lbnQiLCJnZXRDb21wb25lbnQiLCJ0cmF2ZXJzZSIsImNvbENvbXBvbmVudCIsImdldEZpZWxkVmFsdWUiLCJzZXRGaWVsZFZhbHVlIiwiZ2VuZXJhdGVQYXJhbXNMaXN0Iiwib3V0cHV0Iiwic2VyaWFsaXplUGFyYW1zIiwiZW5jb2RlZCIsInVybEJ1aWxkZXIiLCJ1cmwiLCJnZW5lcmF0ZVBhcmFtc0xpc3QkMSIsIm1vZHVsZU5hbWUiLCJkZWZhdWx0Q29udGVudFR5cGVGb3JtYXR0ZXJzIiwiaGVhZGVycyIsImZvcm0iLCJGb3JtRGF0YSIsIkFqYXgiLCJ1cmxHZW5lcmF0b3IiLCJsb2FkZXJQcm9taXNlIiwiY29udGVudFR5cGVGb3JtYXR0ZXJzIiwiYWpheFJlcXVlc3RGdW5jIiwiZGVmYXVsdExvYWRlclByb21pc2UiLCJhamF4VVJMR2VuZXJhdG9yIiwiZGVmYXVsdFVSTEdlbmVyYXRvciIsImFqYXhVUkwiLCJzZXRVcmwiLCJzZXREZWZhdWx0Q29uZmlnIiwiYWpheENvbmZpZyIsImdldFVybCIsInJlcXVlc3REYXRhQ2hlY2siLCJyZXF1ZXN0UGFyYW1zIiwicmVxdWVzdERhdGEiLCJhamF4UGFyYW1zIiwicHJldmlvdXNEYXRhIiwiZ2VuZXJhdGVDb25maWciLCJzZW5kUmVxdWVzdCIsImRlZmF1bHRDb25maWciLCJhamF4UmVxdWVzdGluZyIsInRoZW4iLCJhamF4UmVzcG9uc2UiLCJjb250ZW50VHlwZSIsImFqYXhDb250ZW50VHlwZSIsIkFjY2VwdCIsIm1vZGUiLCJsb2NhdGlvbiIsImNyZWRlbnRpYWxzIiwiZmV0Y2giLCJyZXNwb25zZSIsIm9rIiwianNvbiIsImNhdGNoIiwiZXJyb3IiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwiQ2xpcGJvYXJkIiwicGFzdGVQYXJzZXIiLCJwYXN0ZUFjdGlvbiIsImN1c3RvbVNlbGVjdGlvbiIsInJvd1JhbmdlIiwiYmxvY2tlZCIsImNsaXBib2FyZCIsImNsaXBib2FyZENvcHlSb3dSYW5nZSIsInBsYWluIiwiaHRtbCIsInByZXZlbnREZWZhdWx0IiwiY2xpcGJvYXJkQ29weUZvcm1hdHRlciIsImV4cG9ydCIsImdlbmVyYXRlRXhwb3J0TGlzdCIsImNsaXBib2FyZENvcHlDb25maWciLCJjbGlwYm9hcmRDb3B5U3R5bGVkIiwiZ2VuZXJhdGVIVE1MVGFibGUiLCJnZW5lcmF0ZVBsYWluQ29udGVudCIsImNsaXBib2FyZERhdGEiLCJvcmlnaW5hbEV2ZW50IiwicmVzZXQiLCJwYXN0ZSIsInNldFBhc3RlUGFyc2VyIiwiY2xpcGJvYXJkUGFzdGVQYXJzZXIiLCJzZXRQYXN0ZUFjdGlvbiIsImNsaXBib2FyZFBhc3RlQWN0aW9uIiwicm93RGF0YSIsImNvbHVtbnMiLCJjb2wiLCJnZXRLZXkiLCJpbnRlcm5hbCIsInNlbCIsInRleHRSYW5nZSIsImdldFNlbGVjdGlvbiIsInNlbGVjdE5vZGVDb250ZW50cyIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2VsZWN0aW9uIiwiY3JlYXRlVGV4dFJhbmdlIiwibW92ZVRvRWxlbWVudFRleHQiLCJzZWxlY3QiLCJleGVjQ29tbWFuZCIsInBhc3RlQWN0aW9ucyIsInBhcnNlciIsInBhc3RlUGFyc2VycyIsInJvd3MiLCJjaGVja1Bhc2VPcmlnaW4iLCJnZXRQYXN0ZURhdGEiLCJtb2RFeGlzdHMiLCJtdXRhdGVEYXRhIiwibXV0YXRvciIsInZhbGlkIiwidGFnTmFtZSIsImVkaXQiLCJjdXJyZW50Q2VsbCIsInVwZGF0ZU9yQWRkRGF0YSIsImFkZERhdGEiLCJoZWFkZXJGaW5kU3VjY2VzcyIsImNvbHVtbk1hcCIsInRpdGxlIiwiZmllbGQiLCJjb2x1bW5zQnlJbmRleCIsInNoaWZ0IiwiQ2FsY0NvbXBvbmVudCIsIl9yb3ciLCJQcm94eSIsInJlY2VpdmVyIiwiaGFuZGxlIiwiZ2V0RWxlbWVudCIsImdldFRhYmxlIiwiZ2V0Q2VsbHMiLCJjZWxscyIsImNlbGwiLCJnZXRDZWxsIiwiX2dldFNlbGYiLCJDZWxsQ29tcG9uZW50IiwiX2NlbGwiLCJnZXRPbGRWYWx1ZSIsImdldEluaXRpYWxWYWx1ZSIsImluaXRpYWxWYWx1ZSIsImdldFJvdyIsImdldFR5cGUiLCJnZXRGaWVsZCIsImdldENvbHVtbiIsInNldFZhbHVlIiwibXV0YXRlIiwicmVzdG9yZU9sZFZhbHVlIiwic2V0VmFsdWVBY3R1YWwiLCJyZXN0b3JlSW5pdGlhbFZhbHVlIiwiY2hlY2tIZWlnaHQiLCJDZWxsIiwib2xkVmFsdWUiLCJoZWlnaHQiLCJ3aWR0aCIsIm1pbldpZHRoIiwiYnVpbGQiLCJnZW5lcmF0ZUVsZW1lbnQiLCJzZXRXaWR0aCIsIl9jb25maWd1cmVDZWxsIiwiY2xhc3NOYW1lIiwidGV4dEFsaWduIiwiaG96QWxpZ24iLCJ2ZXJ0QWxpZ24iLCJkaXNwbGF5IiwiYWxpZ25JdGVtcyIsImJvdHRvbSIsIm1pZGRsZSIsImp1c3RpZnlDb250ZW50IiwiY2VudGVyIiwiY3NzQ2xhc3MiLCJfZ2VuZXJhdGVDb250ZW50cyIsInZhbCIsIk5vZGUiLCJjZWxsUmVuZGVyZWQiLCJjb250YWluZXJPbmx5IiwibGF5b3V0RWxlbWVudCIsInNldFZhbHVlUHJvY2Vzc0RhdGEiLCJjZWxsRWRpdGVkIiwiY2hhbmdlZCIsIndpZHRoU3R5bGVkIiwiY2xlYXJXaWR0aCIsImdldFdpZHRoIiwic2V0TWluV2lkdGgiLCJtaW5XaWR0aFN0eWxlZCIsInNldE1heFdpZHRoIiwibWF4V2lkdGgiLCJtYXhXaWR0aFN0eWxlZCIsInJlaW5pdGlhbGl6ZUhlaWdodCIsImNsZWFySGVpZ2h0Iiwic2V0SGVpZ2h0IiwiaGVpZ2h0U3R5bGVkIiwiZ2V0SGVpZ2h0IiwicmVkcmF3QmxvY2siLCJkZWxldGVDZWxsIiwiY2FsY3MiLCJnZXRJbmRleCIsImdldENlbGxJbmRleCIsIkNvbHVtbkNvbXBvbmVudCIsIl9jb2x1bW4iLCJnZXREZWZpbml0aW9uIiwiZ2V0VGl0bGVEb3dubG9hZCIsImlzR3JvdXAiLCJ0b2dnbGUiLCJkZWxldGUiLCJnZXRTdWJDb2x1bW5zIiwiZ2V0UGFyZW50Q29sdW1uIiwiQ29sdW1uIiwic2Nyb2xsVG8iLCJpZlZpc2libGUiLCJzY3JvbGxUb0NvbHVtbiIsIm1vdmUiLCJ0byIsInRvQ29sdW1uIiwiZmluZENvbHVtbiIsIm1vdmVDb2x1bW4iLCJnZXROZXh0Q29sdW1uIiwibmV4dENvbCIsIm5leHRDb2x1bW4iLCJnZXRQcmV2Q29sdW1uIiwicHJldkNvbCIsInByZXZDb2x1bW4iLCJ1cGRhdGVEZWZpbml0aW9uIiwidXBkYXRlcyIsInJlaW5pdGlhbGl6ZVdpZHRoIiwicmVyZW5kZXJDb2x1bW5zIiwiZGVmYXVsdENvbHVtbk9wdGlvbnMiLCJkZWYiLCJjb250ZW50RWxlbWVudCIsInRpdGxlSG9sZGVyRWxlbWVudCIsInRpdGxlRWxlbWVudCIsImdyb3VwRWxlbWVudCIsImNyZWF0ZUdyb3VwRWxlbWVudCIsImZpZWxkU3RydWN0dXJlIiwidGl0bGVEb3dubG9hZCIsInRpdGxlRm9ybWF0dGVyUmVuZGVyZWQiLCJtYXBEZWZpbml0aW9ucyIsInNldEZpZWxkIiwibWF4SW5pdGlhbFdpZHRoIiwid2lkdGhGaXhlZCIsIm5ld0NvbCIsImF0dGFjaENvbHVtbiIsImNoZWNrQ29sdW1uVmlzaWJpbGl0eSIsInJlZ2lzdGVyQ29sdW1uRmllbGQiLCJfaW5pdGlhbGl6ZSIsImNvbHVtbkhlYWRlclZlcnRBbGlnbiIsImNvbHVtbkRlZmF1bHRzIiwiZ2VuZXJhdGUiLCJkZWZhdWx0T3B0aW9uTGlzdCIsImNoZWNrRGVmaW5pdGlvbiIsIm5lc3RlZEZpZWxkU2VwYXJhdG9yIiwiX2dldE5lc3RlZERhdGEiLCJfZ2V0RmxhdERhdGEiLCJfc2V0TmVzdGVkRGF0YSIsIl9zZXRGbGF0RGF0YSIsInJlZ2lzdGVyQ29sdW1uUG9zaXRpb24iLCJyZVJlZ2lzdGVyUG9zaXRpb24iLCJoZWFkZXJWZXJ0aWNhbCIsIl9idWlsZENvbHVtbkhlYWRlckNvbnRlbnQiLCJfYnVpbGRHcm91cEhlYWRlciIsIl9idWlsZENvbHVtbkhlYWRlciIsImhlYWRlckhvekFsaWduIiwiX2J1aWxkQ29sdW1uSGVhZGVyVGl0bGUiLCJoZWFkZXJXb3JkV3JhcCIsImVkaXRhYmxlVGl0bGUiLCJmb2N1cyIsInRleHQiLCJfZm9ybWF0Q29sdW1uSGVhZGVyVGl0bGUiLCJjb250ZW50cyIsImRhdGFPYmoiLCJzdHJ1Y3R1cmUiLCJjb2x1bW5SZW5kZXJlZCIsInZlcnRpY2FsQWxpZ24iLCJhbGlnbm1lbnQiLCJwYXJlbnRIZWlnaHQiLCJnZXRHcm91cEVsZW1lbnQiLCJjbGllbnRIZWlnaHQiLCJnZXRIZWFkZXJzRWxlbWVudCIsIm1pbkhlaWdodCIsImNsZWFyVmVydGljYWxBbGlnbiIsInBhZGRpbmdUb3AiLCJnZXRGaXJzdENvbHVtbiIsImdldExhc3RDb2x1bW4iLCJnZXRDb2x1bW5zIiwiZ2V0VG9wQ29sdW1uIiwidXBkYXRlQnJhbmNoZXMiLCJjb2xEZWZzIiwicmVzcG9uc2l2ZVRvZ2dsZSIsInZlcnRpY2FsQWxpZ25IZWFkZXJzIiwibWF0Y2hDaGlsZFdpZHRocyIsImNoaWxkV2lkdGgiLCJzZXRXaWR0aEFjdHVhbCIsImNsaWVudFdpZHRoIiwiY2hlY2tDZWxsSGVpZ2h0cyIsImhlaWdodEluaXRpYWxpemVkIiwib2Zmc2V0UGFyZW50IiwiY2xlYXJDZWxsSGVpZ2h0IiwiY2FsY0hlaWdodCIsInNldENlbGxIZWlnaHQiLCJnZXRMZWZ0T2Zmc2V0Iiwib2Zmc2V0TGVmdCIsImNlbGxDb3VudCIsImRlcmVnaXN0ZXJDb2x1bW4iLCJnZW5lcmF0ZUNlbGwiLCJmaW5kQ29sdW1uSW5kZXgiLCJfbmV4dFZpc2libGVDb2x1bW4iLCJnZXRDb2x1bW5CeUluZGV4IiwiX3ByZXZWaXNpYmxlQ29sdW1uIiwiZml0VG9EYXRhIiwic2V0VG8iLCJhZGRDb2x1bW4iLCJSb3dDb21wb25lbnQiLCJnZXRQb3NpdGlvbiIsIndhdGNoUG9zaXRpb24iLCJzY3JvbGxUb1JvdyIsIm1vdmVUb1JvdyIsInVwZGF0ZURhdGEiLCJub3JtYWxpemVIZWlnaHQiLCJyZWZvcm1hdCIsInJlaW5pdGlhbGl6ZSIsImdldE5leHRSb3ciLCJuZXh0Um93IiwiZ2V0UHJldlJvdyIsInByZXZSb3ciLCJSb3ciLCJtYW51YWxIZWlnaHQiLCJvdXRlckhlaWdodCIsImluaXRpYWxpemVkIiwicG9zaXRpb25XYXRjaGVycyIsImNyZWF0ZWQiLCJkZXRhY2hFbGVtZW50IiwiZ2VuZXJhdGVDZWxscyIsImluRnJhZ21lbnQiLCJkZWxldGVDZWxscyIsInJlbmRlcmVyIiwicmVuZGVyUm93Q2VsbHMiLCJyb3dGb3JtYXR0ZXIiLCJyZXJlbmRlclJvd0NlbGxzIiwicmVuZGVyZWQiLCJkZWluaXRpYWxpemUiLCJkZWluaXRpYWxpemVIZWlnaHQiLCJtYXhIZWlnaHQiLCJyb3dIZWlnaHQiLCJyZXNpemFibGVSb3dzIiwidXBkYXRlZERhdGEiLCJuZXdSb3dEYXRhIiwidGVtcERhdGEiLCJwYXJzZSIsImF0dHJuYW1lIiwiZ2V0Q29sdW1uc0J5RmllbGRSb290IiwiZmluZENlbGwiLCJuZXh0RGlzcGxheVJvdyIsInByZXZEaXNwbGF5Um93IiwidG9Sb3ciLCJmaW5kUm93IiwibW92ZVJvd0FjdHVhbCIsImRlbGV0ZUFjdHVhbCIsImJsb2NrUmVkcmF3IiwiZGV0YWNoTW9kdWxlcyIsImRlbGV0ZVJvdyIsIndpcGUiLCJpc0Rpc3BsYXllZCIsInNldFBvc2l0aW9uIiwiZ2V0R3JvdXAiLCJkZWZhdWx0Q2FsY3VsYXRpb25zIiwiY2FsY1BhcmFtcyIsIk51bWJlciIsInRvRml4ZWQiLCJDb2x1bW5DYWxjcyIsInRvcENhbGNzIiwiYm90Q2FsY3MiLCJnZW5Db2x1bW4iLCJ0b3BFbGVtZW50IiwiYm90RWxlbWVudCIsInRvcFJvdyIsImJvdFJvdyIsInRvcEluaXRpYWxpemVkIiwiYm90SW5pdGlhbGl6ZWQiLCJyZWNhbGNBZnRlckJsb2NrIiwiY2VsbFZhbHVlQ2hhbmdlZCIsImluaXRpYWxpemVDb2x1bW5DaGVjayIsInJvd3NVcGRhdGVkIiwic2Nyb2xsSG9yaXpvbnRhbCIsInJlY2FsY0FjdGl2ZVJvd3MiLCJyZWNhbGNBY3RpdmVSb3dzUmVmcmVzaCIsInRhYmxlUmVkcmF3IiwidmlzaWJsZVJvd3MiLCJhZGp1c3RGb3JTY3JvbGxiYXIiLCJyZXN0b3JlUmVkcmF3IiwicmVzaXplSG9sZGVyV2lkdGgiLCJnZXRSZXN1bHRzIiwidXNlclJlY2FsYyIsImhlYWRlcnNFbGVtZW50IiwicmVjYWxjIiwicmVkcmF3IiwiYmxvY2tDaGVjayIsInZpZXdhYmxlIiwicmVjYWxjUm93R3JvdXAiLCJkYXRhVHJlZVN0YXJ0RXhwYW5kZWQiLCJkYXRhVHJlZSIsInJlY2FsY0FsbCIsInRvcENhbGMiLCJib3R0b21DYWxjIiwiY29sdW1uQ2FsY3MiLCJ0b3BDYWxjUGFyYW1zIiwiYm90Q2FsY1BhcmFtcyIsImJvdHRvbUNhbGNQYXJhbXMiLCJjYWxjdWxhdGlvbnMiLCJpbml0aWFsaXplVG9wUm93IiwiYm90Q2FsYyIsImluaXRpYWxpemVCb3R0b21Sb3ciLCJyZW1vdmVDYWxjcyIsImFkanVzdFRhYmxlU2l6ZSIsInJlaW5pdGlhbGl6ZUNhbGNzIiwiZ2V0Q29udGVudHNFbGVtZW50IiwiaW5zZXJ0QmVmb3JlIiwibmV4dFNpYmxpbmciLCJzY3JvbGxMZWZ0Iiwicm93c1RvRGF0YSIsImdlbmVyYXRlUm93IiwiZnJvemVuQ29sdW1ucyIsInJlY2FsY0dyb3VwIiwiZ3JvdXBSb3dzIiwiZ2V0Um93R3JvdXAiLCJnZXRDaGlsZEdyb3VwcyIsImdlbmVyYXRlUm93RGF0YSIsImdlbmVyYXRlVG9wUm93IiwiZ2VuZXJhdGVCb3R0b21Sb3ciLCJkYXRhVHJlZUNoaWxkQ29sdW1uQ2FsY3MiLCJvcGVuIiwiZ2V0RmlsdGVyZWRUcmVlQ2hpbGRyZW4iLCJwb3MiLCJkaXNhYmxlIiwiZW5hYmxlIiwiZm9ybWF0IiwiZm9ybWF0dGVyIiwiZ2V0Rm9ybWF0dGVyIiwicGFyYW1LZXkiLCJoYXNUb3BDYWxjcyIsImhhc0JvdHRvbUNhbGNzIiwicmVzdWx0cyIsImdldEdyb3VwcyIsImdldEdyb3VwUmVzdWx0cyIsImdyb3VwT2JqIiwic3ViR3JvdXBzIiwiZ2V0U3ViR3JvdXBzIiwic3ViR3JvdXBSZXN1bHRzIiwic3ViZ3JvdXAiLCJncm91cHMiLCJydGwiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsIkRhdGFUcmVlIiwiaW5kZW50IiwiY29sbGFwc2VFbCIsImV4cGFuZEVsIiwiYnJhbmNoRWwiLCJlbGVtZW50RmllbGQiLCJzdGFydE9wZW4iLCJjb2xsYXBzZVJvdyIsImV4cGFuZFJvdyIsInRvZ2dsZVJvdyIsImdldFRyZWVQYXJlbnQiLCJnZXRSb3dDaGlsZHJlbiIsImFkZFRyZWVDaGlsZFJvdyIsImlzUm93RXhwYW5kZWQiLCJkdW1teUVsIiwiZGF0YVRyZWVDaGlsZEZpZWxkIiwiZGF0YVRyZWVDaGlsZEluZGVudCIsImRhdGFUcmVlQnJhbmNoRWxlbWVudCIsImRhdGFUcmVlQ29sbGFwc2VFbGVtZW50IiwidGFiSW5kZXgiLCJkYXRhVHJlZUV4cGFuZEVsZW1lbnQiLCJpbml0aWFsaXplUm93IiwibGF5b3V0Um93Iiwicm93RGVsZXRlIiwicm93RGF0YUNoYW5nZWQiLCJjb2x1bW5Nb3ZpbmciLCJpbml0aWFsaXplRWxlbWVudEZpZWxkIiwidGFibGVSZWRyYXdpbmciLCJnZXRSb3dzIiwicmVpbml0aWFsaXplUm93Q2hpbGRyZW4iLCJmaXJzdENvbCIsImdldEZpcnN0VmlzaWJsZUNvbHVtbiIsImRhdGFUcmVlRWxlbWVudENvbHVtbiIsImdldFRyZWVDaGlsZHJlbiIsInJlZHJhd05lZWRlZCIsImNoaWxkQXJyYXkiLCJjb250cm9sRWwiLCJnZW5lcmF0ZUNvbnRyb2xFbGVtZW50IiwiY2xvbmVOb2RlIiwibWFyZ2luUmlnaHQiLCJtYXJnaW5MZWZ0IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJvbGRDb250cm9sIiwicmVwbGFjZUNoaWxkIiwiZ2V0Q2hpbGRyZW4iLCJhbGxDaGlsZHJlbiIsImdlbmVyYXRlQ2hpbGRyZW4iLCJkYXRhVHJlZUZpbHRlciIsImRhdGFUcmVlU29ydCIsInN1YiIsImNoaWxkRGF0YSIsImNoaWxkUm93IiwiZ2V0VHJlZVBhcmVudFJvb3QiLCJjaGlsZEluZGV4IiwiZmluZENoaWxkSW5kZXgiLCJyZWN1cnNlIiwiZ2V0Q2hpbGRGaWVsZCIsImRlZmF1bHREb3dubG9hZGVycyIsImNzdiIsInNldEZpbGVDb250ZW50cyIsImRlbGltaXRlciIsImZpbGVDb250ZW50cyIsImJvbSIsImpzb25MaW5lcyIsInBkZiIsImhlYWRlciIsImF1dG9UYWJsZVBhcmFtcyIsInJvd0dyb3VwU3R5bGVzIiwiZm9udFN0eWxlIiwiZm9udFNpemUiLCJjZWxsUGFkZGluZyIsImZpbGxDb2xvciIsInJvd0NhbGNTdHlsZXMiLCJqc1BERlBhcmFtcyIsImpzUERGIiwicGFyc2VSb3ciLCJzdHlsZXMiLCJjb2xTcGFuIiwicm93U3BhbiIsIm9yaWVudGF0aW9uIiwidW5pdCIsImRvYyIsImpzcGRmIiwiYXV0b1RhYmxlIiwiZGlkRHJhd1BhZ2UiLCJkb2N1bWVudFByb2Nlc3NpbmciLCJ4bHN4Iiwic2hlZXROYW1lIiwid29ya2Jvb2siLCJYTFNYIiwidXRpbHMiLCJib29rX25ldyIsInRhYmxlRmVhdHVyZXMiLCJjb21wcmVzc2lvbiIsImNvbXByZXNzIiwid3JpdGVPcHRpb25zIiwiYm9va1R5cGUiLCJib29rU1NUIiwiZ2VuZXJhdGVTaGVldCIsIm1lcmdlcyIsIndvcmtzaGVldCIsInMiLCJjIiwiciIsImIiLCJqIiwic2hlZXRfYWRkX2FvYSIsImVuY29kZV9yYW5nZSIsIlNoZWV0TmFtZXMiLCJTaGVldHMiLCJzaGVldE9ubHkiLCJzaGVldHMiLCJzaGVldCIsImFjdGl2ZSIsImludGVyY2VwdCIsImJ1ZiIsInMyYWIiLCJ3cml0ZSIsIkRvd25sb2FkIiwibWltZVR5cGUiLCJCbG9iIiwiZGVwcmVjYXRlZE9wdGlvbnNDaGVjayIsImRvd25sb2FkIiwiZG93bmxvYWRUb1RhYiIsImZpbGVuYW1lIiwiaW50ZXJjZXB0Q2FsbGJhY2siLCJkb3dubG9hZEZ1bmMiLCJkb3dubG9hZGVycyIsIm1pbWUiLCJ0cmlnZ2VyRG93bmxvYWQiLCJkb3dubG9hZENvbmZpZyIsImRvd25sb2FkUm93UmFuZ2UiLCJncm91cEhlYWRlciIsImdyb3VwSGVhZGVyRG93bmxvYWQiLCJfZ3JvdXAiLCJnZXRSb3dDb3VudCIsIm5ld1RhYiIsImJsb2IiLCJkb3dubG9hZEVuY29kZXIiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJuYXZpZ2F0b3IiLCJtc1NhdmVPck9wZW5CbG9iIiwiY2xpY2siLCJjb21tc1JlY2VpdmVkIiwibWFza0lucHV0IiwibWFzayIsIm1hc2tMZXR0ZXIiLCJtYXNrTGV0dGVyQ2hhciIsIm1hc2tOdW1iZXIiLCJtYXNrTnVtYmVyQ2hhciIsIm1hc2tXaWxkY2FyZCIsIm1hc2tXaWxkY2FyZENoYXIiLCJmaWxsU3ltYm9scyIsImNoYXIiLCJjdHJsS2V5IiwibWV0YUtleSIsIm1hc2tBdXRvRmlsbCIsIkVkaXQiLCJlZGl0b3IiLCJvblJlbmRlcmVkIiwic3VjY2VzcyIsImVkaXRvclBhcmFtcyIsIl9pbml0aWFsaXplUGFyYW1zIiwiZGlzcGxheUl0ZW1zIiwiY3VycmVudEl0ZW1zIiwiZm9jdXNlZEl0ZW0iLCJfY3JlYXRlSW5wdXRFbGVtZW50IiwibGlzdEVsIiwiX2NyZWF0ZUxpc3RFbGVtZW50IiwiaW5pdGlhbFZhbHVlcyIsImZpbHRlclRpbWVvdXQiLCJmaWx0ZXJlZCIsInR5cGluZyIsImxpc3RJdGVyYXRpb24iLCJsYXN0QWN0aW9uIiwiZmlsdGVyVGVybSIsIl9kZXByZWNhdGVkT3B0aW9uc0NoZWNrIiwiX2luaXRpYWxpemVWYWx1ZSIsIl9vblJlbmRlcmVkIiwibGlzdEl0ZW1Gb3JtYXR0ZXIiLCJzb3J0VmFsdWVzTGlzdCIsInNlYXJjaEZ1bmMiLCJzZWFyY2hpbmdQbGFjZWhvbGRlciIsIm11bHRpc2VsZWN0IiwiaGVhZGVyRmlsdGVySW5pdGlhbExpc3RHZW4iLCJjZWxsRWwiLCJjbGlja1N0b3AiLCJwcmV2ZW50U2Nyb2xsIiwiX3ByZXZlbnRQb3B1cEJsdXIiLCJfcHJldmVudEJsdXIiLCJfaW5wdXRLZXlEb3duIiwiX3NldExpc3RXaWR0aCIsImF0dHJpYnMiLCJlbGVtZW50QXR0cmlidXRlcyIsImNsZWFyYWJsZSIsInBhZGRpbmciLCJib3hTaXppbmciLCJhdXRvY29tcGxldGUiLCJjdXJzb3IiLCJjYXJldENvbG9yIiwiZ2V0QXR0cmlidXRlIiwiX2JpbmRJbnB1dEV2ZW50cyIsInZhbHVlQ2hlY2siLCJ2YWx1ZUtleXMiLCJ2ZXJ0aWNhbE5hdmlnYXRpb24iLCJwbGFjZWhvbGRlckxvYWRpbmciLCJwbGFjZWhvbGRlckVtcHR5IiwiZmlsdGVyRGVsYXkiLCJlbXB0eVZhbHVlIiwiZnJlZXRleHQiLCJmaWx0ZXJGdW5jIiwiZmlsdGVyUmVtb3RlIiwiYWxsb3dFbXB0eSIsImxpc3RPbkVtcHR5IiwidmFsdWVzTG9va3VwIiwidmFsdWVzVVJMIiwiX2lucHV0Rm9jdXMiLCJfaW5wdXRDbGljayIsIl9pbnB1dEJsdXIiLCJfaW5wdXRTZWFyY2giLCJfaW5wdXRLZXlVcCIsInJlYnVpbGRPcHRpb25zTGlzdCIsIl9maWx0ZXIiLCJfZmlsdGVyTGlzdCIsIl9yZXNvbHZlVmFsdWUiLCJfY2xlYXJDaG9pY2VzIiwiX2tleVVwIiwiX2tleURvd24iLCJfa2V5U2lkZSIsIl9rZXlFbnRlciIsIl9rZXlFc2MiLCJfa2V5SG9tZUVuZCIsIl9rZXlUYWIiLCJfa2V5U2VsZWN0TGV0dGVyIiwiX2tleUF1dG9Db21wTGV0dGVyIiwiX2Nob29zZUl0ZW0iLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJfZm9jdXNJdGVtIiwiX2NhbmNlbCIsIl9zY3JvbGxUb1ZhbHVlIiwiY2hhcmFjdGVyIiwiZnJvbUNoYXJDb2RlIiwibGFiZWwiLCJzY3JvbGxJbnRvVmlldyIsImJlaGF2aW9yIiwiYmxvY2siLCJpbmxpbmUiLCJfZ2VuZXJhdGVPcHRpb25zIiwiX3NvcnRPcHRpb25zIiwiX2J1aWxkTGlzdCIsIl9zaG93TGlzdCIsIl9maWx0ZXJPcHRpb25zIiwiaXRlcmF0aW9uIiwiX2FqYXhSZXF1ZXN0IiwiX3VuaXF1ZUNvbHVtblZhbHVlcyIsInZhbHVlc0xvb2t1cEZpZWxkIiwiX2FkZFBsYWNlaG9sZGVyIiwicmVzcG9uc2VWYWx1ZXMiLCJfcGFyc2VMaXN0IiwiX2NsZWFyTGlzdCIsInRlcm0iLCJnZXRDb2x1bW5CeUZpZWxkIiwiaW5wdXRWYWx1ZXMiLCJfcGFyc2VMaXN0SXRlbSIsIm9wdGlvbiIsImxldmVsIiwiX3BhcnNlTGlzdEdyb3VwIiwiaXRlbVBhcmFtcyIsInNlbGVjdGVkIiwib3JpZ2luYWwiLCJzb3J0ZXIiLCJfZGVmYXVsdFNvcnRGdW5jdGlvbiIsIl9zb3J0R3JvdXAiLCJhcyIsImJzIiwiYTEiLCJiMSIsIkwiLCJyeCIsInJkIiwiZW1wdHlBbGlnbiIsIl9kZWZhdWx0RmlsdGVyRnVuYyIsIl9maWx0ZXJJdGVtIiwiX2J1aWxkSXRlbSIsIml0ZW1Gb3JtYXR0ZXIiLCJfZ3JvdXBDbGljayIsIl9pdGVtQ2xpY2siLCJfc3R5bGVJdGVtIiwic3RhcnRWaXMiLCJibHVyIiwiZGVmYXVsdEVkaXRvcnMiLCJjZWxsVmFsdWUiLCJvbkNoYW5nZSIsInNlbGVjdENvbnRlbnRzIiwidGV4dGFyZWEiLCJ2ZXJ0TmF2Iiwid2hpdGVTcGFjZSIsInJlc2l6ZSIsImhlaWdodE5vdyIsInNoaWZ0S2V5Iiwic2hpZnRFbnRlclN1Ym1pdCIsInNlbGVjdGlvblN0YXJ0IiwiYmx1ckZ1bmMiLCJkYXRlIiwiaW5wdXRGb3JtYXQiLCJEVCIsIkRhdGVUaW1lIiwibHV4b24iLCJjb252ZXJ0RGF0ZSIsImlzRGF0ZVRpbWUiLCJmcm9tSVNPIiwiZnJvbUZvcm1hdCIsInRvRm9ybWF0IiwibHV4RGF0ZSIsInRvSVNPIiwicmVsYXRlZFRhcmdldCIsInJhbmdlUGFyZW50IiwiZXhwbGljaXRPcmlnaW5hbFRhcmdldCIsIm5ld0RhdGV0aW1lIiwibHV4VGltZSIsImRhdGV0aW1lIiwibHV4RGF0ZVRpbWUiLCJzdGFyIiwibWF4U3RhcnMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInN0YXJzIiwic3RhcnNIb2xkZXIiLCJjcmVhdGVFbGVtZW50TlMiLCJzdGFyQ2hhbmdlIiwiYnJvd3NlciIsImJ1aWxkU3RhciIsInN0YXJIb2xkZXIiLCJuZXh0U3RhciIsImNoYW5nZVZhbHVlIiwib3ZlcmZsb3ciLCJ0ZXh0T3ZlcmZsb3ciLCJwcm9ncmVzcyIsIm1vdXNlRHJhZyIsIm1vdXNlRHJhZ1dpZHRoIiwicGVyY2VudCIsImJhciIsInVwZGF0ZVZhbHVlIiwiY2FsY1ZhbCIsImJhY2tncm91bmRDb2xvciIsInNjcmVlblgiLCJ0aWNrQ3Jvc3MiLCJ0cmlzdGF0ZSIsImluZGV0ZXJtVmFsdWUiLCJpbmRldGVybWluYXRlVmFsdWUiLCJpbmRldGVybVN0YXRlIiwidHJ1ZVZhbHVlU2V0IiwiZmFsc2VWYWx1ZVNldCIsIm1hcmdpblRvcCIsImNoZWNrZWRWYWx1ZSIsImNoZWNrZWQiLCJ0cnVlVmFsdWUiLCJmYWxzZVZhbHVlIiwiaW5kZXRlcm1pbmF0ZSIsIkVkaXQkMSIsIm1vdXNlQ2xpY2siLCJyZWN1cnNpb25CbG9jayIsImludmFsaWRFZGl0IiwiZWRpdGVkQ2VsbHMiLCJlZGl0b3JzIiwiZ2V0RWRpdGVkQ2VsbHMiLCJjbGVhckNlbGxFZGl0ZWQiLCJuYXZpZ2F0ZVByZXYiLCJuYXZpZ2F0ZU5leHQiLCJuYXZpZ2F0ZUxlZnQiLCJuYXZpZ2F0ZVJpZ2h0IiwibmF2aWdhdGVVcCIsIm5hdmlnYXRlRG93biIsImNlbGxJc0VkaXRlZCIsImNsZWFyRWRpdGVkIiwiZWRpdENlbGwiLCJjZWxsQ2FuY2VsRWRpdCIsImJpbmRFZGl0b3IiLCJ1cGRhdGVDZWxsQ2xhc3MiLCJjb2x1bW5EZWxldGVDaGVjayIsInJvd0RlbGV0ZUNoZWNrIiwicm93RWRpdGFibGVDaGVjayIsImNhbmNlbEVkaXQiLCJrZXliaW5kaW5nTmF2aWdhdGVOZXh0IiwibmV3Um93IiwiYWRkUm93IiwiZWRpdGVkIiwiYWxsb3dFZGl0IiwibmV4dENlbGwiLCJmaW5kUHJldkVkaXRhYmxlQ2VsbCIsImZpbmROZXh0RWRpdGFibGVDZWxsIiwicHJldkNlbGwiLCJlZGl0YWJsZSIsImdldEN1cnJlbnRDZWxsIiwiY2xlYXJFZGl0b3IiLCJ2YXJpYWJsZUhlaWdodCIsImNlbGxFZGl0Q2FuY2VsbGVkIiwiY29udGFpbnMiLCJidXR0b24iLCJmb2N1c0NlbGxOb0V2ZW50IiwiZm9yY2VFZGl0IiwiZm9jdXNTY3JvbGxBZGp1c3QiLCJnZXRSZW5kZXJNb2RlIiwidG9wRWRnZSIsImJvdHRvbUVkZ2UiLCJyb3dFbCIsIm9mZnNldFRvcCIsImxlZnRFZGdlIiwicmlnaHRFZGdlIiwibGVmdE1hcmdpbiIsInJpZ2h0TWFyZ2luIiwicmVuZGVySG9yaXpvbnRhbCIsInZEb21QYWRMZWZ0IiwiY2VsbEVkaXRvciIsImNlbGxDbGljayIsImNlbGxFZGl0aW5nIiwidmFsaWRhdGlvbk1vZGUiLCJlZGl0SW5kZXgiLCJFeHBvcnRSb3ciLCJFeHBvcnRDb2x1bW4iLCJFeHBvcnQiLCJjbG9uZVRhYmxlU3R5bGUiLCJjb2xWaXNQcm9wIiwiZ2V0SHRtbCIsImNvbHVtbkhlYWRlcnMiLCJoZWFkZXJzVG9FeHBvcnRSb3dzIiwiZ2VuZXJhdGVDb2x1bW5Hcm91cEhlYWRlcnMiLCJib2R5VG9FeHBvcnRSb3dzIiwicm93TG9va3VwIiwiZ2VuZXJhdGVUYWJsZSIsImdlbmVyYXRlVGFibGVFbGVtZW50IiwiZ2V0VmlzaWJsZVJvd3MiLCJzZWxlY3RSb3ciLCJzZWxlY3RlZFJvd3MiLCJwYWdpbmF0aW9uIiwiY29sdW1uR3JvdXBzIiwiY29sRGF0YSIsInByb2Nlc3NDb2x1bW5Hcm91cCIsIm1heERlcHRoIiwiZ3JvdXBEYXRhIiwic3ViR3JvdXAiLCJzdWJHcm91cERhdGEiLCJjb2x1bW5WaXNDaGVjayIsInZpc1Byb3AiLCJoZWFkZXJEZXB0aCIsImV4cG9ydFJvd3MiLCJwYXJzZUNvbHVtbkdyb3VwIiwicm93R3JvdXBzIiwiZXhwb3J0Q29scyIsImhlYWRlckVsIiwiYm9keUVsIiwibG9va3VwVGFibGVTdHlsZXMiLCJzZXR1cCIsInRyZWVFbGVtZW50RmllbGQiLCJtYXBFbGVtZW50U3R5bGVzIiwiZ2VuZXJhdGVIZWFkZXJFbGVtZW50IiwiZ2VuZXJhdGVHcm91cEVsZW1lbnQiLCJnZW5lcmF0ZUNhbGNFbGVtZW50IiwiZ2VuZXJhdGVSb3dFbGVtZW50IiwiZXZlblJvdyIsIm9kZFJvdyIsImNhbGNSb3ciLCJmaXJzdFJvdyIsImZpcnN0R3JvdXAiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwic3R5bGVDZWxscyIsImZpcnN0Q2VsbCIsImxhc3RDZWxsIiwiY2xhc3NOYW1lcyIsImdlbmVyYXRvciIsImNlbGxTdHlsZSIsImNlbGxXcmFwcGVyIiwiZm9ybWF0Q2VsbHMiLCJmb3JtYXRFeHBvcnRWYWx1ZSIsImFsaWduIiwiaG9sZGVyIiwiaHRtbE91dHB1dENvbmZpZyIsImZyb20iLCJsb29rdXAiLCJmcm9tU3R5bGUiLCJkZWZhdWx0RmlsdGVycyIsImZpbHRlclZhbCIsInJvd1ZhbCIsImZpbHRlclBhcmFtcyIsImtleXdvcmRzIiwia2V5d29yZCIsIm1hdGNoQWxsIiwiRmlsdGVyIiwiZmlsdGVyTGlzdCIsImhlYWRlckZpbHRlcnMiLCJoZWFkZXJGaWx0ZXJDb2x1bW5zIiwicHJldkhlYWRlckZpbHRlckNoYW5nZUNoZWNrIiwidGFibGVJbml0aWFsaXplZCIsInNlYXJjaFJvd3MiLCJzZWFyY2hEYXRhIiwidXNlclNldEZpbHRlciIsInVzZXJSZWZyZXNoRmlsdGVyIiwidXNlckFkZEZpbHRlciIsImdldEZpbHRlcnMiLCJ1c2VyU2V0SGVhZGVyRmlsdGVyRm9jdXMiLCJ1c2VyR2V0SGVhZGVyRmlsdGVyVmFsdWUiLCJ1c2VyU2V0SGVhZGVyRmlsdGVyVmFsdWUiLCJnZXRIZWFkZXJGaWx0ZXJzIiwidXNlclJlbW92ZUZpbHRlciIsInVzZXJDbGVhckZpbHRlciIsInVzZXJDbGVhckhlYWRlckZpbHRlciIsInNldEhlYWRlckZpbHRlckZvY3VzIiwicmVsb2FkSGVhZGVyRmlsdGVyIiwiZ2V0SGVhZGVyRmlsdGVyVmFsdWUiLCJzZXRIZWFkZXJGaWx0ZXJWYWx1ZSIsImluaXRpYWxpemVDb2x1bW5IZWFkZXJGaWx0ZXIiLCJoaWRlSGVhZGVyRmlsdGVyRWxlbWVudHMiLCJzaG93SGVhZGVyRmlsdGVyRWxlbWVudHMiLCJ0YWJsZUJ1aWx0IiwiZ2VuZXJhdGVQbGFjZWhvbGRlciIsImZpbHRlck1vZGUiLCJyZW1vdGVGaWx0ZXJQYXJhbXMiLCJpbml0aWFsRmlsdGVyIiwic2V0RmlsdGVyIiwiaW5pdGlhbEhlYWRlckZpbHRlciIsInBsYWNlaG9sZGVySGVhZGVyRmlsdGVyIiwicmVmcmVzaEZpbHRlciIsImFkZEZpbHRlciIsInJlbW92ZUZpbHRlciIsImFsbCIsImNsZWFyRmlsdGVyIiwiY2xlYXJIZWFkZXJGaWx0ZXIiLCJoZWFkZXJGaWx0ZXIiLCJmaWx0ZXJUeXBlIiwidGFnVHlwZSIsImF0dHJUeXBlIiwiZmlsdGVyQ2hhbmdlQ2hlY2siLCJwcmV2U3VjY2VzcyIsImVtcHR5RnVuYyIsImhlYWRlckZpbHRlckZ1bmMiLCJmaWx0ZXJzIiwiaGVhZGVyRmlsdGVyRnVuY1BhcmFtcyIsImZpZWxkVmFsIiwiY29sVmFsIiwidHJhY2tDaGFuZ2VzIiwiZ2VuZXJhdGVIZWFkZXJGaWx0ZXJFbGVtZW50IiwiZmlsdGVyRWxlbWVudCIsImVkaXRvckVsZW1lbnQiLCJ0eXBpbmdUaW1lciIsInNlYXJjaFRyaWdnZXIiLCJvblJlbmRlcmVkQ2FsbGJhY2siLCJoZWFkZXJFbGVtZW50IiwiaGVhZGVyRmlsdGVyRW1wdHlDaGVjayIsImhlYWRlckZpbHRlclBhcmFtcyIsImhlYWRlckZpbHRlclBsYWNlaG9sZGVyIiwiY29udGVudHNFbGVtZW50IiwiaGVhZGVyRmlsdGVyTGl2ZUZpbHRlckRlbGF5IiwiaGFzQXR0cmlidXRlIiwiaGVhZGVyRmlsdGVyTGl2ZUZpbHRlciIsImhhc0NoYW5nZWQiLCJmaW5kRmlsdGVyIiwiZmluZFN1YkZpbHRlcnMiLCJhamF4IiwiZmlsdGVyc1RvQXJyYXkiLCJzZWFyY2hUeXBlIiwiZmlsdGVyUmVjdXJzZSIsInJvd0xpc3QiLCJhY3RpdmVSb3dDb21wb25lbnRzIiwiZmlsdGVyUm93Iiwic3ViRmlsdGVyIiwiZGVmYXVsdEZvcm1hdHRlcnMiLCJwbGFpbnRleHQiLCJmb3JtYXR0ZXJQYXJhbXMiLCJlbXB0eVRvU3BhY2UiLCJzYW5pdGl6ZUhUTUwiLCJtb25leSIsImludGVnZXIiLCJkZWNpbWFsIiwicmd4IiwiZmxvYXRWYWwiLCJzaWduIiwiZGVjaW1hbFN5bSIsInRob3VzYW5kU3ltIiwidGhvdXNhbmQiLCJuZWdhdGl2ZVNpZ24iLCJzeW1ib2xBZnRlciIsImFicyIsImxpbmsiLCJ1cmxQcmVmaXgiLCJsYWJlbEZpZWxkIiwibGFiZWxUcmF2ZXJzZSIsInVybEZpZWxkIiwiaW1hZ2UiLCJzcmMiLCJ1cmxTdWZmaXgiLCJlbXB0eSIsInRydXRoeSIsImFsbG93VHJ1dGh5IiwidGljayIsInRpY2tFbGVtZW50IiwiY3Jvc3MiLCJjcm9zc0VsZW1lbnQiLCJvdXRwdXRGb3JtYXQiLCJpbnZhbGlkIiwiaW52YWxpZFBsYWNlaG9sZGVyIiwiaXNWYWxpZCIsInRpbWV6b25lIiwic2V0Wm9uZSIsImRhdGV0aW1lZGlmZiIsInN1ZmZpeCIsImh1bWFuaXplIiwiZGlmZiIsInRvSHVtYW4iLCJ0cmFmZmljIiwicGVyY2VudFZhbHVlIiwiY29sb3JzIiwiY29sb3IiLCJsZWdlbmQiLCJsZWdlbmRDb2xvciIsImxlZ2VuZEFsaWduIiwiYmFyRWwiLCJiYXJDb250YWluZXIiLCJsZWdlbmRFbCIsImhvbGRlckVsIiwiYnV0dG9uVGljayIsImJ1dHRvbkNyb3NzIiwicm93bnVtIiwiaW5uZXJUZXh0IiwicmVzcG9uc2l2ZUNvbGxhcHNlIiwicmVzcG9uc2l2ZUxheW91dCIsInRvZ2dsZUxpc3QiLCJpc09wZW4iLCJyb3dTZWxlY3Rpb24iLCJjaGVja2JveCIsInNlbGVjdGFibGVSYW5nZU1vZGUiLCJ0b2dnbGVTZWxlY3QiLCJoYW5kbGVDb21wbGV4Um93Q2xpY2siLCJpc1NlbGVjdGVkIiwicmVnaXN0ZXJSb3dTZWxlY3RDaGVja2JveCIsImRlc2VsZWN0Um93IiwicmVnaXN0ZXJIZWFkZXJTZWxlY3RDaGVja2JveCIsIkZvcm1hdCIsImZvcm1hdFZhbHVlIiwiZm9ybWF0SGVhZGVyIiwibG9va3VwRm9ybWF0dGVyIiwiZm9ybWF0dGVyUHJpbnQiLCJwcmludCIsImZvcm1hdHRlckNsaXBib2FyZCIsImZvcm1hdHRlckh0bWxPdXRwdXQiLCJodG1sT3V0cHV0IiwiZm9ybWF0dGVycyIsIm1vY2tDZWxsIiwidGl0bGVGb3JtYXR0ZXIiLCJ0aXRsZUZvcm1hdHRlclBhcmFtcyIsImVudGl0eU1hcCIsIkZyb3plbkNvbHVtbnMiLCJsZWZ0Q29sdW1ucyIsInJpZ2h0Q29sdW1ucyIsImluaXRpYWxpemF0aW9uTW9kZSIsImxheW91dENlbGwiLCJyZWluaXRpYWxpemVDb2x1bW5zIiwiYmxvY2tMYXlvdXQiLCJ1bmJsb2NrTGF5b3V0IiwibWFyZ2luIiwiZWRnZSIsImZyb3plbkNoZWNrIiwiZnJvemVuIiwibGF5b3V0Q2FsY1Jvd3MiLCJsYXlvdXRHcm91cENhbGNzIiwiZ3JvdXBMaXN0IiwibGF5b3V0Q29sdW1uUG9zaXRpb24iLCJhbGxDZWxscyIsImxlZnRQYXJlbnRzIiwibWFyZ2luVmFsdWUiLCJnZXRDb2xHcm91cFBhcmVudEVsZW1lbnQiLCJyZWluaXRpYWxpemVSb3dzIiwiZ2V0VGFibGVFbGVtZW50IiwiX2NhbGNTcGFjZSIsIkZyb3plblJvd3MiLCJmcmVlemVSb3ciLCJ1bmZyZWV6ZVJvdyIsImlzUm93RnJvemVuIiwiZGV0YWNoUm93IiwiZnJvemVuUm93cyIsImluaXRpYWxpemVSb3dzIiwicm93VHlwZSIsImlzRnJvemVuIiwic3R5bGVSb3dzIiwic3R5bGVSb3ciLCJHcm91cENvbXBvbmVudCIsImdyb3VwTWFuYWdlciIsImdldFBhcmVudEdyb3VwIiwidG9nZ2xlVmlzaWJpbGl0eSIsIkdyb3VwIiwib2xkR3JvdXAiLCJoYXNTdWJHcm91cHMiLCJncm91cElETG9va3VwcyIsIl9hZGRSb3dUb0dyb3VwIiwiX2FkZFJvdyIsIm9sZCIsImVsZW1lbnRDb250ZW50cyIsImFycm93RWxlbWVudCIsImNyZWF0ZUVsZW1lbnRzIiwiYWRkQmluZGluZ3MiLCJjcmVhdGVWYWx1ZUdyb3VwcyIsImVsZW1lbnRzT25seSIsImFycm93IiwibW92YWJsZVJvd3MiLCJtb3ZlUm93IiwiaW5pdGlhbGl6ZUdyb3VwSGVhZGVyIiwiYWxsb3dlZFZhbHVlcyIsIl9jcmVhdGVHcm91cCIsImdyb3VwVG9nZ2xlRWxlbWVudCIsImdyb3VwSUQiLCJncm91cEtleSIsImhlYWRlckdlbmVyYXRvciIsImluc2VydFJvdyIsImNvbmZvcm1Sb3dEYXRhIiwidG9JbmRleCIsInVwZGF0ZUdyb3VwUm93cyIsInNjcm9sbEhlYWRlciIsImdldFJvd0luZGV4IiwicmVtb3ZlUm93IiwiZ3JvdXBWYWx1ZXMiLCJnZW5lcmF0ZUdyb3VwSGVhZGVyQ29udGVudHMiLCJyZW1vdmVHcm91cCIsImdldEhlYWRlcnNBbmRSb3dzIiwiX3Zpc1NldCIsImdyb3VwQ2xvc2VkU2hvd0NhbGNzIiwicHJldiIsImluY2x1ZGVDaGlsZHJlbiIsImdldFBhdGgiLCJjaGlsZE5vZGVzIiwiR3JvdXBSb3dzIiwiZGlzcGxheUhhbmRsZXIiLCJzZXRHcm91cEJ5Iiwic2V0R3JvdXBWYWx1ZXMiLCJzZXRHcm91cFN0YXJ0T3BlbiIsInNldEdyb3VwSGVhZGVyIiwidXNlckdldEdyb3VwcyIsInVzZXJHZXRHcm91cGVkRGF0YSIsInJvd0dldEdyb3VwIiwiX2Jsb2NrUmVkcmF3aW5nIiwiX3Jlc3RvcmVfcmVkcmF3aW5nIiwiZ3JvdXBVcGRhdGVPbkNlbGxFZGl0IiwiY2VsbFVwZGF0ZWQiLCJyZWFzc2lnblJvd1RvR3JvdXAiLCJjb25maWd1cmVHcm91cFNldHVwIiwicm93RGVsZXRpbmciLCJzY3JvbGxIZWFkZXJzIiwicm93TW92aW5nIiwicm93QWRkaW5nSW5kZXgiLCJyb3dTYW1wbGUiLCJ2aXJ0dWFsUmVuZGVyRmlsbCIsImdyb3VwU3RhcnRPcGVuIiwibGFuZ1ZhbHVlIiwibGFuZyIsIml0ZW1zIiwiZ2V0UmVhbENvbHVtbnMiLCJsb29rdXBGdW5jIiwicHJldlZhbHVlIiwidGFibGVFbGVtZW50IiwiYXNzaWduUm93VG9Hcm91cCIsIm1vdmVSb3dJbkFycmF5IiwiZ2V0R3JvdXBlZERhdGEiLCJ0b0dyb3VwIiwiZnJvbUdyb3VwIiwiZ2VuZXJhdGVHcm91cHMiLCJncm91cENvbXBvbmVudHMiLCJwdWxsR3JvdXBMaXN0RGF0YSIsImdyb3VwTGlzdERhdGEiLCJyb3dDb3VudCIsImhlYWRlckNvbnRlbnQiLCJjb3VudEdyb3VwcyIsIm9sZEdyb3VwcyIsImNyZWF0ZUdyb3VwIiwiYXNzaWduUm93VG9FeGlzdGluZ0dyb3VwIiwibmV3R3JvdXBOZWVkZWQiLCJvbGRSb3dHcm91cCIsIm9sZEdyb3VwUGF0aCIsIm5ld0dyb3VwUGF0aCIsImdldEV4cGVjdGVkUGF0aCIsImdyb3VwUGF0aCIsImdyb3VwSWQiLCJjaGVja0Jhc2ljTW9kZUdyb3VwSGVhZGVyV2lkdGgiLCJvbmx5R3JvdXBIZWFkZXJzIiwiSGlzdG9yeSIsImhpc3RvcnkiLCJjbGVhckNvbXBvbmVudEhpc3RvcnkiLCJyb3dEZWxldGVkIiwicm93QWRkZWQiLCJyb3dNb3ZlZCIsInVuZG8iLCJyZWRvIiwiZ2V0SGlzdG9yeVVuZG9TaXplIiwiZ2V0SGlzdG9yeVJlZG9TaXplIiwicG9zRnJvbSIsInBvc1RvIiwidW5kb2VycyIsInJlZG9lcnMiLCJfcmViaW5kUm93Iiwib2xkUm93IiwiY2VsbEVkaXQiLCJyb3dBZGQiLCJhZGRSb3dBY3R1YWwiLCJyb3dNb3ZlIiwiZ2V0Um93RnJvbVBvc2l0aW9uIiwicmVnZW5lcmF0ZVJvd1Bvc2l0aW9ucyIsInJlUmVuZGVySW5Qb3NpdGlvbiIsIkh0bWxUYWJsZUltcG9ydCIsImZpZWxkSW5kZXgiLCJoYXNJbmRleCIsInRhYmxlRWxlbWVudENoZWNrIiwib3JpZ2luYWxFbGVtZW50IiwicGFyc2VUYWJsZSIsIl9leHRyYWN0T3B0aW9ucyIsIl9leHRyYWN0SGVhZGVycyIsIl9nZW5lcmF0ZUJsYW5rSGVhZGVycyIsImRlZmF1bHRPcHRpb25zIiwib3B0aW9uc0FyciIsImF0dHJpYiIsIl9hdHRyaWJWYWx1ZSIsIl9maW5kQ29sIiwiZXhpc3RzIiwidGV4dENvbnRlbnQiLCJyZXBsYWNlQWxsIiwicmVnaXN0ZXJlZERlZmF1bHRzIiwiZGVmYXVsdEltcG9ydGVycyIsImluUXVvdGUiLCJuZXh0Q2hhciIsIkltcG9ydCIsImltcG9ydEZyb21GaWxlIiwiaW1wb3J0Rm9ybWF0IiwibG9hZERhdGFDaGVjayIsImxvYWREYXRhIiwiaW1wb3J0RGF0YSIsImxvb2t1cEltcG9ydGVyIiwic3RydWN0dXJlRGF0YSIsImVyciIsImltcG9ydGVyIiwiaW1wb3J0ZXJzIiwiZXh0ZW5zaW9uIiwicGlja0ZpbGUiLCJleHRlbnNpb25zIiwiYWNjZXB0IiwiZmlsZSIsImZpbGVzIiwicmVhZGVyIiwiRmlsZVJlYWRlciIsImltcG9ydFJlYWRlciIsInJlYWRBc0FycmF5QnVmZmVyIiwicmVhZEFzQmluYXJ5U3RyaW5nIiwicmVhZEFzRGF0YVVSTCIsInJlYWRBc1RleHQiLCJvbmxvYWQiLCJvbmVycm9yIiwicGFyc2VkRGF0YSIsImF1dG9Db2x1bW5zIiwic3RydWN0dXJlQXJyYXlUb09iamVjdCIsInN0cnVjdHVyZUFycmF5VG9Db2x1bW5zIiwiSW50ZXJhY3Rpb24iLCJldmVudE1hcCIsInJvd0NsaWNrIiwicm93RGJsQ2xpY2siLCJyb3dDb250ZXh0Iiwicm93TW91c2VFbnRlciIsInJvd01vdXNlTGVhdmUiLCJyb3dNb3VzZU92ZXIiLCJyb3dNb3VzZU91dCIsInJvd01vdXNlTW92ZSIsInJvd01vdXNlRG93biIsInJvd01vdXNlVXAiLCJyb3dUYXAiLCJyb3dEYmxUYXAiLCJyb3dUYXBIb2xkIiwiY2VsbERibENsaWNrIiwiY2VsbENvbnRleHQiLCJjZWxsTW91c2VFbnRlciIsImNlbGxNb3VzZUxlYXZlIiwiY2VsbE1vdXNlT3ZlciIsImNlbGxNb3VzZU91dCIsImNlbGxNb3VzZU1vdmUiLCJjZWxsTW91c2VEb3duIiwiY2VsbE1vdXNlVXAiLCJjZWxsVGFwIiwiY2VsbERibFRhcCIsImNlbGxUYXBIb2xkIiwiaGVhZGVyQ2xpY2siLCJoZWFkZXJEYmxDbGljayIsImhlYWRlckNvbnRleHQiLCJoZWFkZXJNb3VzZUVudGVyIiwiaGVhZGVyTW91c2VMZWF2ZSIsImhlYWRlck1vdXNlT3ZlciIsImhlYWRlck1vdXNlT3V0IiwiaGVhZGVyTW91c2VNb3ZlIiwiaGVhZGVyTW91c2VEb3duIiwiaGVhZGVyTW91c2VVcCIsImhlYWRlclRhcCIsImhlYWRlckRibFRhcCIsImhlYWRlclRhcEhvbGQiLCJncm91cENsaWNrIiwiZ3JvdXBEYmxDbGljayIsImdyb3VwQ29udGV4dCIsImdyb3VwTW91c2VFbnRlciIsImdyb3VwTW91c2VMZWF2ZSIsImdyb3VwTW91c2VPdmVyIiwiZ3JvdXBNb3VzZU91dCIsImdyb3VwTW91c2VNb3ZlIiwiZ3JvdXBNb3VzZURvd24iLCJncm91cE1vdXNlVXAiLCJncm91cFRhcCIsImdyb3VwRGJsVGFwIiwiZ3JvdXBUYXBIb2xkIiwic3Vic2NyaWJlcnMiLCJ0b3VjaFN1YnNjcmliZXJzIiwiY29sdW1uU3Vic2NyaWJlcnMiLCJ0b3VjaFdhdGNoZXJzIiwidGFwRGJsIiwidGFwSG9sZCIsImluaXRpYWxpemVFeHRlcm5hbEV2ZW50cyIsImNlbGxDb250ZW50c1NlbGVjdGlvbkZpeGVyIiwiY2xlYXJUb3VjaFdhdGNoZXJzIiwic2VsZWN0Tm9kZSIsInN1YnNjcmlwdGlvbkNoYW5nZWQiLCJhZGRlZCIsInN1YnNjcmliZVRvdWNoRXZlbnRzIiwidW5zdWJzY3JpYmVUb3VjaEV2ZW50cyIsImhhbmRsZVRvdWNoIiwibm9Ub3VjaCIsImRpc3BhdGNoRXZlbnQiLCJ3YXRjaGVycyIsImNvbXBvbmVudE9iaiIsIktleWJpbmRpbmdzIiwid2F0Y2hLZXlzIiwicHJlc3NlZEtleXMiLCJrZXl1cEJpbmRpbmciLCJrZXlkb3duQmluZGluZyIsImJpbmRpbmdzIiwia2V5YmluZGluZ3MiLCJtZXJnZWRCaW5kaW5ncyIsIm1hcEJpbmRpbmdzIiwiYmluZEV2ZW50cyIsImNsZWFyQmluZGluZ3MiLCJtYXBCaW5kaW5nIiwic3ltYm9sc0xpc3QiLCJjdHJsIiwibWV0YSIsImNvZGUiLCJjaGVja0JpbmRpbmciLCJuYXZQcmV2IiwibmF2TmV4dCIsIm5hdlVwIiwibmF2RG93biIsInNjcm9sbFBhZ2VVcCIsInNjcm9sbFBhZ2VEb3duIiwic2Nyb2xsVG9TdGFydCIsInNjcm9sbFRvRW5kIiwiY29weVRvQ2xpcGJvYXJkIiwia2V5QmxvY2siLCJuZXdQb3MiLCJkaXNwbGF5Um93c0NvdW50Iiwic2Nyb2xsTWF4IiwibmF2TGVmdCIsIm5hdlJpZ2h0IiwiTWVudSIsIm5lc3RlZE1lbnVCbG9jayIsImN1cnJlbnRDb21wb25lbnQiLCJyb290UG9wdXAiLCJpbml0aWFsaXplUm93V2F0Y2hlcnMiLCJpbml0aWFsaXplR3JvdXBXYXRjaGVycyIsInJvd0NvbnRleHRNZW51IiwibG9hZE1lbnVFdmVudCIsIm9uIiwicm93Q2xpY2tNZW51Iiwicm93RGJsQ2xpY2tNZW51IiwiZ3JvdXBDb250ZXh0TWVudSIsImdyb3VwQ2xpY2tNZW51IiwiZ3JvdXBEYmxDbGlja01lbnUiLCJoZWFkZXJDb250ZXh0TWVudSIsImxvYWRNZW51VGFibGVDb2x1bW5FdmVudCIsImhlYWRlckNsaWNrTWVudSIsImhlYWRlckRibENsaWNrTWVudSIsImhlYWRlck1lbnUiLCJpbml0aWFsaXplQ29sdW1uSGVhZGVyTWVudSIsImNvbnRleHRNZW51IiwibG9hZE1lbnVUYWJsZUNlbGxFdmVudCIsImNsaWNrTWVudSIsImRibENsaWNrTWVudSIsImhlYWRlck1lbnVFbCIsImljb24iLCJoZWFkZXJNZW51SWNvbiIsIm1lbnUiLCJsb2FkTWVudSIsInBhcmVudFBvcHVwIiwiaXRlbUVsIiwiZGlzYWJsZWQiLCJNb3ZlQ29sdW1ucyIsInBsYWNlaG9sZGVyRWxlbWVudCIsImNyZWF0ZVBsYWNlaG9sZGVyRWxlbWVudCIsImhvdmVyRWxlbWVudCIsImNoZWNrVGltZW91dCIsImNoZWNrUGVyaW9kIiwibW92aW5nIiwidG9Db2wiLCJ0b0NvbEFmdGVyIiwic3RhcnRYIiwiYXV0b1Njcm9sbE1hcmdpbiIsImF1dG9TY3JvbGxTdGVwIiwiYXV0b1Njcm9sbFRpbWVvdXQiLCJ0b3VjaE1vdmUiLCJtb3ZlSG92ZXIiLCJlbmRNb3ZlIiwibW92YWJsZUNvbHVtbnMiLCJjb2xFbCIsIm1vdXNlbW92ZSIsIndoaWNoIiwic3RhcnRNb3ZlIiwiYmluZFRvdWNoRXZlbnRzIiwibmV4dENvbFdpZHRoIiwicHJldkNvbFdpZHRoIiwibmV4dENvbFdpZHRoTGFzdCIsInByZXZDb2xXaWR0aExhc3QiLCJzdGFydFhNb3ZlIiwicGFzc2l2ZSIsIm1vdmVUb0NvbCIsIl9iaW5kTW91c2VNb3ZlIiwiX3VuYmluZE1vdXNlTW92ZSIsIm1vdmluZ0NlbGxzIiwibW92ZUNvbHVtbkFjdHVhbCIsInNjcm9sbFBvcyIsImNvbHVtbkhvbGRlciIsInhQb3MiLCJNb3ZlUm93cyIsInRvUm93QWZ0ZXIiLCJoYXNIYW5kbGUiLCJzdGFydFkiLCJ0YWJsZVJvd0Ryb3BFdmVudCIsImNvbm5lY3Rpb24iLCJjb25uZWN0aW9uU2VsZWN0b3JzVGFibGVzIiwiY29ubmVjdGlvblNlbGVjdG9yc0VsZW1lbnRzIiwiY29ubmVjdGlvbkVsZW1lbnRzIiwiY29ubmVjdGlvbnMiLCJjb25uZWN0ZWRUYWJsZSIsImNvbm5lY3RlZFJvdyIsIm1vdmFibGVSb3dzQ29ubmVjdGVkVGFibGVzIiwibW92YWJsZVJvd3NDb25uZWN0ZWRFbGVtZW50cyIsImluaXRpYWxpemVDZWxsIiwibW91c2V1cCIsInRhYmxlUm93RHJvcCIsInByZXZpb3VzU2libGluZyIsInJvd0hhbmRsZSIsIm5leHRSb3dIZWlnaHQiLCJwcmV2Um93SGVpZ2h0IiwibmV4dFJvd0hlaWdodExhc3QiLCJwcmV2Um93SGVpZ2h0TGFzdCIsInN0YXJ0WU1vdmUiLCJzZXRTdGFydFBvc2l0aW9uIiwiY29ubmVjdFRvVGFibGVzIiwicG9pbnRlckV2ZW50cyIsImRpc2Nvbm5lY3RGcm9tVGFibGVzIiwibW92ZUhvdmVyQ29ubmVjdGlvbnMiLCJtb3ZlSG92ZXJUYWJsZSIsInJvd0hvbGRlciIsInlQb3MiLCJlbGVtZW50Um93RHJvcCIsImNvbm5lY3Rpb25UYWJsZXMiLCJxdWVyeSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJkcm9wRXZlbnQiLCJ0YWJ1bGF0b3JFbGVtZW50RHJvcEV2ZW50IiwiY29ubmVjdCIsImRpc2Nvbm5lY3QiLCJkcm9wQ29tcGxldGUiLCJzZW5kZXIiLCJtb3ZhYmxlUm93c1NlbmRlciIsInNlbmRlcnMiLCJtb3ZhYmxlUm93c1JlY2VpdmVyIiwicmVjZWl2ZXJzIiwiZnJvbVJvdyIsImZyb21UYWJsZSIsInRvVGFibGUiLCJNdXRhdG9yIiwiZW5hYmxlZCIsInRyYW5zZm9ybUNlbGwiLCJtdXRhdGVMaW5rIiwibG9va3VwTXV0YXRvciIsIm11dGF0b3JzIiwibXV0YXRvckVkaXQiLCJsaW5rcyIsImxpbmtDZWxsIiwiZGVmYXVsdFBhZ2VDb3VudGVycyIsInBhZ2VTaXplIiwiY3VycmVudFJvdyIsImN1cnJlbnRQYWdlIiwidG90YWxSb3dzIiwidG90YWxQYWdlcyIsInNob3dpbmdFbCIsInZhbHVlRWwiLCJvZkVsIiwidG90YWxFbCIsInJvd3NFbCIsInBhZ2VzIiwiUGFnZSIsInByb2dyZXNzaXZlTG9hZCIsInBhZ2VDb3VudGVyRWxlbWVudCIsInBhZ2VDb3VudGVyIiwicGFnZSIsInJlbW90ZVJvd0NvdW50RXN0aW1hdGUiLCJpbml0aWFsTG9hZCIsImRhdGFDaGFuZ2luZyIsInBhZ2VTaXplcyIsInNldE1heFBhZ2UiLCJzZXRQYWdlIiwidXNlclNldFBhZ2VUb1JvdyIsInVzZXJTZXRQYWdlU2l6ZSIsImdldFBhZ2VTaXplIiwicHJldmlvdXNQYWdlIiwibmV4dFBhZ2UiLCJnZXRQYWdlIiwiZ2V0UGFnZU1heCIsInNldFBhZ2VUb1JvdyIsImluaXRpYWxMb2FkQ29tcGxldGUiLCJjYWxjdWxhdGVQYWdlU2l6ZXMiLCJmb290ZXJSZWRyYXciLCJwYWdpbmF0aW9uQWRkUm93Iiwicm93QWRkaW5nUG9zaXRpb24iLCJwYWdpbmF0aW9uTW9kZSIsInJlbW90ZVBhZ2VQYXJhbXMiLCJfcGFyc2VSZW1vdGVEYXRhIiwicmVzdE9uUmVuZGVyQmVmb3JlIiwiaW5pdGlhbGl6ZVBhZ2VDb3VudGVyIiwiaW5pdGlhbGl6ZVBhZ2luYXRvciIsImluaXRpYWxpemVQcm9ncmVzc2l2ZSIsInNjcm9sbFZlcnRpY2FsIiwidGVzdEVsUm93IiwidGVzdEVsQ2VsbCIsInBhZ2luYXRpb25TaXplIiwidmlzaWJpbGl0eSIsImdlbmVyYXRlUGFnZVNpemVTZWxlY3RMaXN0Iiwic2V0UGFnZVNpemUiLCJsb2FkaW5nIiwicHJvZ3Jlc3NpdmVMb2FkU2Nyb2xsTWFyZ2luIiwicGFnZXNFbGVtZW50IiwiZmlyc3RCdXQiLCJwcmV2QnV0IiwibmV4dEJ1dCIsImxhc3RCdXQiLCJwYWdpbmF0aW9uU2l6ZVNlbGVjdG9yIiwicGFnZVNpemVTZWxlY3QiLCJjb3VudGVyIiwicGFnaW5hdGlvbkNvdW50ZXIiLCJwYWdlQ291bnRlcnMiLCJoaWRkZW4iLCJwYWdlU2VsZWN0TGFiZWwiLCJwYWdpbmF0aW9uQ291bnRlckhvbGRlciIsInBhZ2luYXRpb25FbGVtZW50IiwicGFnaW5hdGlvbkNvdW50ZXJFbGVtZW50IiwicGFnaW5hdGlvbkluaXRpYWxQYWdlIiwicGFnaW5hdGlvbkJ1dHRvbkNvdW50Iiwic2V0TWF4Um93cyIsInRyaWdnZXIiLCJfc2V0UGFnZUNvdW50ZXIiLCJfc2V0UGFnZUJ1dHRvbnMiLCJsZWZ0U2l6ZSIsInJpZ2h0U2l6ZSIsIl9nZW5lcmF0ZVBhZ2VCdXR0b24iLCJhY3R1YWxTdGFydFJvdyIsImFjdHVhbFJvd1BhZ2VTaXplIiwiYWN0dWFsUm93cyIsImZpbmFsbHkiLCJsYXN0X3BhZ2UiLCJsYXN0X3JvdyIsImFkZFJvd3MiLCJwcm9ncmVzc2l2ZUxvYWREZWxheSIsImZvb3RlciIsImNvbnRhaW5lckVsZW1lbnQiLCJzY3JvbGxXaWR0aCIsImRlZmF1bHRSZWFkZXJzIiwibG9jYWwiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiY29va2llIiwiY29va2llUG9zIiwiZGVmYXVsdFdyaXRlcnMiLCJzZXRJdGVtIiwiZXhwaXJlRGF0ZSIsInNldERhdGUiLCJnZXREYXRlIiwidG9VVENTdHJpbmciLCJQZXJzaXN0ZW5jZSIsImRlZldhdGNoZXJCbG9jayIsInJlYWRGdW5jIiwid3JpdGVGdW5jIiwibG9jYWxTdG9yYWdlVGVzdCIsInRlc3RLZXkiLCJyZW1vdmVJdGVtIiwicGVyc2lzdGVuY2UiLCJyZXRyaWV2ZWREYXRhIiwicGVyc2lzdGVuY2VNb2RlIiwicGVyc2lzdGVuY2VJRCIsInBlcnNpc3RlbmNlUmVhZGVyRnVuYyIsInJlYWRlcnMiLCJwZXJzaXN0ZW5jZVdyaXRlckZ1bmMiLCJ3cml0ZXJzIiwicmV0cmlldmVEYXRhIiwic2F2ZSIsImV2ZW50U2F2ZSIsImdldENvbHVtbkxheW91dCIsInNldENvbHVtbkxheW91dCIsInNvcnRlcnMiLCJpbml0aWFsU29ydCIsInBhcnNlQ29sdW1ucyIsInNldENvbHVtbnMiLCJtZXJnZURlZmluaXRpb24iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJvbGRDb2xzIiwibmV3Q29scyIsIl9maW5kQ29sdW1uIiwidmFsaWRhdGVTb3J0ZXJzIiwiZ2V0U29ydCIsImdldEdyb3VwQ29uZmlnIiwiZ2V0UGFnZUNvbmZpZyIsImRlZmluaXRpb25zIiwiZXhjbHVkZWRLZXlzIiwiZGVmU3RvcmUiLCJjb2xEZWYiLCJtb2R1bGVJbml0T3JkZXIiLCJQb3B1cCQxIiwiX2NvbXBvbmVudFBvcHVwQ2FsbCIsImxvYWRQb3B1cEV2ZW50Iiwicm93Q29udGV4dFBvcHVwIiwicm93Q2xpY2tQb3B1cCIsInJvd0RibENsaWNrUG9wdXAiLCJncm91cENvbnRleHRQb3B1cCIsImdyb3VwQ2xpY2tQb3B1cCIsImdyb3VwRGJsQ2xpY2tQb3B1cCIsImhlYWRlckNvbnRleHRQb3B1cCIsImxvYWRQb3B1cFRhYmxlQ29sdW1uRXZlbnQiLCJoZWFkZXJDbGlja1BvcHVwIiwiaGVhZGVyRGJsQ2xpY2tQb3B1cCIsImhlYWRlclBvcHVwIiwiaW5pdGlhbGl6ZUNvbHVtbkhlYWRlclBvcHVwIiwiY29udGV4dFBvcHVwIiwibG9hZFBvcHVwVGFibGVDZWxsRXZlbnQiLCJjbGlja1BvcHVwIiwiZGJsQ2xpY2tQb3B1cCIsImhlYWRlclBvcHVwRWwiLCJoZWFkZXJQb3B1cEljb24iLCJsb2FkUG9wdXAiLCJjb250ZW50c0VsIiwiUHJpbnQiLCJtYW51YWxCbG9jayIsImJlZm9yZXByaW50RXZlbnRIYW5kbGVyIiwiYWZ0ZXJwcmludEV2ZW50SGFuZGxlciIsInByaW50QXNIdG1sIiwicmVwbGFjZVRhYmxlIiwiY2xlYW51cCIsImRlc3Ryb3kiLCJwcmludEZ1bGxzY3JlZW4iLCJwcmludENvbmZpZyIsInByaW50U3R5bGVkIiwicHJpbnRSb3dSYW5nZSIsImZvb3RlckNvbnRlbnQiLCJzY3JvbGxYIiwic2Nyb2xsWSIsImZvb3RlckVsIiwidGFibGVFbCIsInByaW50SGVhZGVyIiwicHJpbnRGb290ZXIiLCJwcmludEZvcm1hdHRlciIsIlJlYWN0aXZlRGF0YSIsIm9yaWdGdW5jcyIsImN1cnJlbnRWZXJzaW9uIiwicmVhY3RpdmVEYXRhIiwidW5ibG9jayIsIndhdGNoUm93Iiwid2F0Y2hEYXRhIiwidW53YXRjaERhdGEiLCJ2ZXJzaW9uIiwiY29uZmlndXJhYmxlIiwiZ2V0Um93RnJvbURhdGFPYmplY3QiLCJzdGFydFJvdyIsIm5ld1Jvd3MiLCJvbGRSb3dzIiwid3JpdGFibGUiLCJ3YXRjaEtleSIsIndhdGNoVHJlZUNoaWxkcmVuIiwiY2hpbGRGaWVsZCIsInJlYnVpbGRUcmVlIiwidW53YXRjaFJvdyIsIlJlc2l6ZUNvbHVtbnMiLCJzdGFydENvbHVtbiIsInN0YXJ0V2lkdGgiLCJsYXRlc3RYIiwiaW5pdGlhbE5leHRDb2x1bW4iLCJsYXlvdXRDb2x1bW5IZWFkZXIiLCJpbml0aWFsaXplRXZlbnRXYXRjaGVycyIsImxheW91dENlbGxIYW5kbGVzIiwiZGVJbml0aWFsaXplQ29tcG9uZW50IiwicmVzaXplSGFuZGxlIiwiY29sdW1uTGF5b3V0VXBkYXRlZCIsImRlSW5pdGlhbGl6ZUNvbHVtbiIsImNvbHVtbldpZHRoVXBkYXRlZCIsInJlc2l6YWJsZSIsInJlaW5pdGlhbGl6ZUNvbHVtbiIsImZyb3plbkNvbHVtbk9mZnNldCIsImZyb3plbk9mZnNldCIsImhhbmRsZUVsIiwibmVhcmVzdENvbHVtbiIsIl9jaGVja1Jlc2l6YWJpbGl0eSIsImhhbmRsZURvd24iLCJfbW91c2VEb3duIiwib2xkV2lkdGgiLCJwYXJlbnRFbGVtZW50IiwibW91c2VNb3ZlIiwiYmxvY2tlZEJlZm9yZSIsImJsb2NrZWRBZnRlciIsInN0YXJ0RGlmZiIsIm1vdmVEaWZmIiwicmVzaXphYmxlQ29sdW1uRml0IiwiY29sV2lkdGgiLCJicm93c2VyU2xvdyIsIm1vdXNlVXAiLCJSZXNpemVSb3dzIiwic3RhcnRIZWlnaHQiLCJwcmV2SGFuZGxlIiwicHJldkhhbmRsZURvd24iLCJzY3JlZW5ZIiwiUmVzaXplVGFibGUiLCJ2aXNpYmlsaXR5T2JzZXJ2ZXIiLCJyZXNpemVPYnNlcnZlciIsImNvbnRhaW5lck9ic2VydmVyIiwidGFibGVIZWlnaHQiLCJ0YWJsZVdpZHRoIiwiY29udGFpbmVySGVpZ2h0IiwiY29udGFpbmVyV2lkdGgiLCJhdXRvUmVzaXplIiwiaW5pdGlhbFJlZHJhdyIsInRhYmxlU3R5bGUiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsIlJlc2l6ZU9ic2VydmVyIiwiaW5pdGlhbGl6ZVZpc2liaWxpdHlPYnNlcnZlciIsImJyb3dzZXJNb2JpbGUiLCJub2RlSGVpZ2h0IiwiY29udGVudFJlY3QiLCJub2RlV2lkdGgiLCJyZWRyYXdUYWJsZSIsIm9ic2VydmUiLCJmaXhlZEhlaWdodCIsInRhYmxlUmVzaXplZCIsImlzSW50ZXJzZWN0aW5nIiwidW5vYnNlcnZlIiwiUmVzcG9uc2l2ZUxheW91dCIsImhpZGRlbkNvbHVtbnMiLCJjb2xsYXBzZUZvcm1hdHRlciIsImNvbGxhcHNlU3RhcnRPcGVuIiwiY29sbGFwc2VIYW5kbGVDb2x1bW4iLCJ1cGRhdGVDb2x1bW5WaXNpYmlsaXR5IiwiaW5pdGlhbGl6ZVJlc3BvbnNpdml0eSIsImdlbmVyYXRlQ29sbGFwc2VkUm93Q29udGVudCIsInJlc3BvbnNpdmVMYXlvdXRDb2xsYXBzZUZvcm1hdHRlciIsImZvcm1hdENvbGxhcHNlZERhdGEiLCJyZXNwb25zaXZlTGF5b3V0Q29sbGFwc2VTdGFydE9wZW4iLCJyZXNwb25zaXZlIiwib3JkZXIiLCJnZW5lcmF0ZUNvbGxhcHNlZENvbnRlbnQiLCJoaWRlQ29sdW1uIiwiY29sQ291bnQiLCJzaG93Q29sdW1uIiwid29ya2luZyIsImdldEZsZXhCYXNlV2lkdGgiLCJoZWFkZXJWaXNpYmxlIiwiYWN0aXZlUm93c0NvdW50IiwicmVuZGVyRW1wdHlTY3JvbGwiLCJnZW5lcmF0ZUNvbGxhcHNlZFJvd0RhdGEiLCJtb2NrQ2VsbENvbXBvbmVudCIsInJlc3BvbnNpdmVMYXlvdXRDb2xsYXBzZVVzZUZvcm1hdHRlcnMiLCJub2RlX2NvbnRlbnQiLCJ0aXRsZURhdGEiLCJ2YWx1ZURhdGEiLCJ0aXRsZUhpZ2hsaWdodCIsIlNlbGVjdFJvdyIsInNlbGVjdGluZyIsImxhc3RDbGlja2VkUm93Iiwic2VsZWN0UHJldiIsImhlYWRlckNoZWNrYm94RWxlbWVudCIsInNlbGVjdFJvd3MiLCJkZXNlbGVjdFJvd3MiLCJnZXRTZWxlY3RlZFJvd3MiLCJnZXRTZWxlY3RlZERhdGEiLCJpc1Jvd1NlbGVjdGVkIiwic2VsZWN0YWJsZSIsImNsZWFyU2VsZWN0aW9uRGF0YSIsInJvd1JldHJpZXZlIiwic2VsZWN0YWJsZVBlcnNpc3RlbmNlIiwiX2Rlc2VsZWN0Um93IiwicHJldlNlbGVjdGVkIiwiX3Jvd1NlbGVjdGlvbkNoYW5nZWQiLCJlbmRTZWxlY3QiLCJjaGVja1Jvd1NlbGVjdGFiaWxpdHkiLCJfY2xlYXJTZWxlY3Rpb24iLCJsYXN0Q2xpY2tlZFJvd0lkeCIsImdldERpc3BsYXlSb3dJbmRleCIsInJvd0lkeCIsImZyb21Sb3dJZHgiLCJ0b1Jvd0lkeCIsInRvZ2dsZWRSb3dzIiwidG9nZ2xlZFJvdyIsInNlbGVjdGFibGVDaGVjayIsIl9zZWxlY3RSb3ciLCJyb3dNYXRjaCIsImNoYW5nZSIsImNoYW5nZXMiLCJyb3dJbmZvIiwic2VsZWN0YWJsZVJvbGxpbmdTZWxlY3Rpb24iLCJjaGVja2JveEVsIiwiZGF0YVRyZWVTZWxlY3RQcm9wYWdhdGUiLCJjaGlsZFJvd1NlbGVjdGlvbiIsInNlbGVjdGVkUm93IiwiZGVzZWxlY3RlZCIsImRhdGV0aW1lJDIiLCJhUm93IiwiYlJvdyIsImFsaWduRW1wdHlWYWx1ZXMiLCJkZWZhdWx0U29ydGVycyIsImRlY2ltYWxTZXBhcmF0b3IiLCJ0aG91c2FuZFNlcGFyYXRvciIsImxvY2FsZSIsImxvY2FsZUNvbXBhcmUiLCJib29sZWFuIiwiY2FsYyIsImFscGhhbnVtIiwiU29ydCIsInNvcnRMaXN0IiwidXNlclNldFNvcnQiLCJjbGVhclNvcnQiLCJzb3J0TW9kZSIsInJlbW90ZVNvcnRQYXJhbXMiLCJzZXRTb3J0IiwicmVmcmVzaFNvcnQiLCJhcnJvd0VsIiwic29ydGVyUGFyYW1zIiwic3RhcnRpbmdEaXIiLCJoZWFkZXJTb3J0U3RhcnRpbmdEaXIiLCJoZWFkZXJTb3J0VHJpc3RhdGUiLCJoZWFkZXJTb3J0IiwiaGVhZGVyU29ydENsaWNrRWxlbWVudCIsImhlYWRlclNvcnRFbGVtZW50Iiwic2V0Q29sdW1uSGVhZGVyU29ydEljb24iLCJjb2x1bW5IZWFkZXJTb3J0TXVsdGkiLCJuZXdTb3J0TGlzdCIsImZpbmRTb3J0ZXIiLCJzb3J0T3JkZXJSZXZlcnNlIiwic29ydExpc3RBY3R1YWwiLCJyb3dDb21wb25lbnRzIiwiY2xlYXJDb2x1bW5IZWFkZXJzIiwic29ydE9iaiIsInNldENvbHVtbkhlYWRlciIsIl9zb3J0SXRlbXMiLCJzb3J0RWwiLCJzb3J0ZXJDb3VudCIsInNvcnRJdGVtIiwiX3NvcnRSb3ciLCJlbDFDb21wIiwiZWwyQ29tcCIsImVsMSIsImVsMiIsIlRvb2x0aXAiLCJ0b29sdGlwU3Vic2NyaWJlciIsImhlYWRlclN1YnNjcmliZXIiLCJ0aW1lb3V0IiwicG9wdXBJbnN0YW5jZSIsImhlYWRlclRvb2x0aXAiLCJtb3VzZW1vdmVDaGVjayIsIm1vdXNlb3V0Q2hlY2siLCJ0b29sdGlwIiwiY2xlYXJQb3B1cCIsImxvYWRUb29sdGlwIiwidG9vbHRpcERlbGF5IiwiZGVmYXVsdFZhbGlkYXRvcnMiLCJwYXJhbWV0ZXJzIiwiZmxvYXQiLCJudW1lcmljIiwic3RhcnRzIiwiZW5kcyIsIm1pbkxlbmd0aCIsImluIiwicmVnZXgiLCJ1bmlxdWUiLCJjZWxsRGF0YSIsInJlcXVpcmVkIiwiVmFsaWRhdGUiLCJpbnZhbGlkQ2VsbHMiLCJnZXRJbnZhbGlkQ2VsbHMiLCJ1c2VyQ2xlYXJDZWxsVmFsaWRhdGlvbiIsInVzZXJWYWxpZGF0ZSIsImNlbGxJc1ZhbGlkIiwiY2xlYXJWYWxpZGF0aW9uIiwiY2VsbFZhbGlkYXRlIiwiY29sdW1uVmFsaWRhdGUiLCJyb3dWYWxpZGF0ZSIsImVkaXRWYWxpZGF0ZSIsImVkaXRvckNsZWFyIiwiZWRpdGVkQ2xlYXIiLCJwcmV2aW91c1ZhbHVlIiwidmFsaWRhdGUiLCJjYW5jZWxsZWQiLCJ2YWxpZGF0b3IiLCJfZXh0cmFjdFZhbGlkYXRvciIsIl9idWlsZFZhbGlkYXRvciIsInZhbGlkYXRvcnMiLCJmYWlsZWRWYWxpZGF0b3JzIiwiaW52YWxpZEluZGV4IiwiZnJlZXplIiwiQWNjZXNzb3JNb2R1bGUiLCJBamF4TW9kdWxlIiwiQ2xpcGJvYXJkTW9kdWxlIiwiQ29sdW1uQ2FsY3NNb2R1bGUiLCJEYXRhVHJlZU1vZHVsZSIsIkRvd25sb2FkTW9kdWxlIiwiRWRpdE1vZHVsZSIsIkV4cG9ydE1vZHVsZSIsIkZpbHRlck1vZHVsZSIsIkZvcm1hdE1vZHVsZSIsIkZyb3plbkNvbHVtbnNNb2R1bGUiLCJGcm96ZW5Sb3dzTW9kdWxlIiwiR3JvdXBSb3dzTW9kdWxlIiwiSGlzdG9yeU1vZHVsZSIsIkh0bWxUYWJsZUltcG9ydE1vZHVsZSIsIkltcG9ydE1vZHVsZSIsIkludGVyYWN0aW9uTW9kdWxlIiwiS2V5YmluZGluZ3NNb2R1bGUiLCJNZW51TW9kdWxlIiwiTW92ZUNvbHVtbnNNb2R1bGUiLCJNb3ZlUm93c01vZHVsZSIsIk11dGF0b3JNb2R1bGUiLCJQYWdlTW9kdWxlIiwiUGVyc2lzdGVuY2VNb2R1bGUiLCJQb3B1cE1vZHVsZSIsIlByaW50TW9kdWxlIiwiUmVhY3RpdmVEYXRhTW9kdWxlIiwiUmVzaXplQ29sdW1uc01vZHVsZSIsIlJlc2l6ZVJvd3NNb2R1bGUiLCJSZXNpemVUYWJsZU1vZHVsZSIsIlJlc3BvbnNpdmVMYXlvdXRNb2R1bGUiLCJTZWxlY3RSb3dNb2R1bGUiLCJTb3J0TW9kdWxlIiwiVG9vbHRpcE1vZHVsZSIsIlZhbGlkYXRlTW9kdWxlIiwiT3B0aW9uc0xpc3QiLCJtc2dUeXBlIiwidXNlck9wdGlvbnMiLCJkZWJ1Z0ludmFsaWRPcHRpb25zIiwiUmVuZGVyZXIiLCJlbGVtZW50VmVydGljYWwiLCJlbGVtZW50SG9yaXpvbnRhbCIsInZlcnRpY2FsRmlsbE1vZGUiLCJjbGVhclJvd3MiLCJjbGVhckNvbHVtbnMiLCJyZWluaXRpYWxpemVDb2x1bW5XaWR0aHMiLCJyZW5kZXJSb3dzIiwicmVuZGVyQ29sdW1ucyIsInJlcmVuZGVyUm93cyIsInNjcm9sbENvbHVtbnMiLCJzY3JvbGxSb3dzIiwic2Nyb2xsVG9Sb3dOZWFyZXN0VG9wIiwiaW5jbHVkaW5nQnVmZmVyIiwicmVuZGVyIiwicmVyZW5kZXIiLCJzY3JvbGxUb1Jvd1Bvc2l0aW9uIiwicm93SW5kZXgiLCJzY3JvbGxUb1Jvd0lmVmlzaWJsZSIsIkJhc2ljSG9yaXpvbnRhbCIsInJvd0ZyYWciLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiVmlydHVhbERvbUhvcml6b250YWwiLCJsZWZ0Q29sIiwicmlnaHRDb2wiLCJ2RG9tU2Nyb2xsUG9zTGVmdCIsInZEb21TY3JvbGxQb3NSaWdodCIsInZEb21QYWRSaWdodCIsImZpdERhdGFDb2xBdmciLCJ3aW5kb3dCdWZmZXIiLCJpc0ZpdERhdGEiLCJjb21wYXRpYmlsaXR5Q2hlY2siLCJsYXlvdXRDaGVjayIsInZlcnRTY3JvbGxMaXN0ZW4iLCJjbGVhclZpc1Jvd0NhY2hlIiwiZGF0YUNoYW5nZSIsInNjcm9sbCIsImNhbGNXaW5kb3dCdWZmZXIiLCJjb2xzIiwiY29sUG9zIiwibGVmdFBvcyIsInJpZ2h0UG9zIiwiZml0RGF0YUNoZWNrIiwidmRvbUhveiIsInJlaW5pdENoYW5nZWQiLCJyZWluaXRpYWxpemVSb3ciLCJjb2xFbmQiLCJvdGhlclJvd3MiLCJhZGRDb2xSaWdodCIsInJlbW92ZUNvbExlZnQiLCJhZGRDb2xMZWZ0IiwicmVtb3ZlQ29sUmlnaHQiLCJjb2xQb3NpdGlvbkFkanVzdCIsImZpdERhdGFDb2xBY3R1YWxXaWR0aENoZWNrIiwiZXgiLCJuZXdXaWR0aCIsIndpZHRoRGlmZiIsImFwcGVuZENlbGwiLCJDb2x1bW5NYW5hZ2VyIiwiYmxvY2tIb3pTY3JvbGxFdmVudCIsImNvbHVtbnNCeUZpZWxkIiwicmVkcmF3QmxvY2tVcGRhdGUiLCJpbml0aWFsaXplUmVuZGVyZXIiLCJjcmVhdGVIZWFkZXJzRWxlbWVudCIsImNyZWF0ZUhlYWRlckNvbnRlbnRzRWxlbWVudCIsImNyZWF0ZUhlYWRlckVsZW1lbnQiLCJpbml0aWFsaXplU2Nyb2xsV2hlZWxXYXRjaGVyIiwicGFkVmVydGljYWxTY3JvbGxiYXIiLCJyZW5kZXJDbGFzcyIsInJlbmRlcmVycyIsImRlbHRhWCIsImdlbmVyYXRlQ29sdW1uc0Zyb21Sb3dEYXRhIiwiYXV0b0NvbHVtbnNEZWZpbml0aW9ucyIsIl9hZGRDb2x1bW4iLCJfcmVJbmRleENvbHVtbnMiLCJuZXh0VG9Db2x1bW4iLCJ0b3BDb2x1bW4iLCJwYXJlbnRJbmRleCIsIm5leHRFbCIsImdldERlZmluaXRpb25zIiwiZ2V0RGVmaW5pdGlvblRyZWUiLCJnZXRDb21wb25lbnRzIiwic3RydWN0dXJlZCIsIl9tb3ZlQ29sdW1uSW5BcnJheSIsInVwZGF0ZVJvd3MiLCJzY3JvbGxUb0NvbHVtblBvc2l0aW9uIiwic2Nyb2xsVG9Db2x1bW5JZlZpc2libGUiLCJ0b3RhbFdpZHRoIiwiZml4ZWRXaWR0aCIsInJlc2V0U2Nyb2xsIiwiQmFzaWNWZXJ0aWNhbCIsInRhYmxlRnJhZyIsInJvd1RvcCIsIlZpcnR1YWxEb21WZXJ0aWNhbCIsInZEb21Sb3dIZWlnaHQiLCJ2RG9tVG9wIiwidkRvbUJvdHRvbSIsInZEb21TY3JvbGxQb3NUb3AiLCJ2RG9tU2Nyb2xsUG9zQm90dG9tIiwidkRvbVRvcFBhZCIsInZEb21Cb3R0b21QYWQiLCJ2RG9tTWF4UmVuZGVyQ2hhaW4iLCJ2RG9tV2luZG93QnVmZmVyIiwidkRvbVdpbmRvd01pblRvdGFsUm93cyIsInZEb21XaW5kb3dNaW5NYXJnaW5Sb3dzIiwidkRvbVRvcE5ld1Jvd3MiLCJ2RG9tQm90dG9tTmV3Um93cyIsInBhZGRpbmdCb3R0b20iLCJfdmlydHVhbFJlbmRlckZpbGwiLCJ0b3BPZmZzZXQiLCJ0YWJsZUVtcHR5IiwidG9wRGlmZiIsImJvdHRvbURpZmYiLCJfYWRkVG9wUm93IiwidkRvbVNjcm9sbEhlaWdodCIsIl9yZW1vdmVCb3R0b21Sb3ciLCJfYWRkQm90dG9tUm93IiwiX3JlbW92ZVRvcFJvdyIsInJlbmRlclZlcnRpY2FsQnVmZmVyIiwidG9wRm91bmQiLCJib3R0b21Sb3ciLCJmb3JjZU1vdmUiLCJyb3dGcmFnbWVudCIsInRvcFBhZCIsInJvd3NIZWlnaHQiLCJoZWlnaHRPY2N1cGllZCIsInRvcFBhZEhlaWdodCIsInJvd3NDb3VudCIsInJlbmRlcmVkUm93cyIsInRvdGFsUm93c1JlbmRlcmVkIiwicm93c1RvUmVuZGVyIiwiYXZnUm93SGVpZ2h0IiwicmVzaXplZCIsImZpbGxhYmxlU3BhY2UiLCJhZGRlZFJvd3MiLCJwYWRkaW5nQWRqdXN0IiwiX3F1aWNrTm9ybWFsaXplUm93SGVpZ2h0IiwicmVtb3ZhYmxlUm93cyIsIlJvd01hbmFnZXIiLCJjcmVhdGVIb2xkZXJFbGVtZW50IiwiY3JlYXRlVGFibGVFbGVtZW50IiwiaGVpZ2h0Rml4ZXIiLCJwbGFjZWhvbGRlckNvbnRlbnRzIiwiZmlyc3RSZW5kZXIiLCJyZW5kZXJNb2RlIiwiYWN0aXZlUm93c1BpcGVsaW5lIiwicmVkcmF3QmxvY2tSZXN0b3JlQ29uZmlnIiwicmVkcmF3QmxvY2tSZW5kZXJJblBvc2l0aW9uIiwiZGF0YVBpcGVsaW5lIiwic2Nyb2xsYmFyV2lkdGgiLCJpbml0aWFsaXplUGxhY2Vob2xkZXIiLCJsZWZ0RGlyIiwidG9wRGlyIiwiX3Bvc2l0aW9uUGxhY2Vob2xkZXIiLCJfc2V0RGF0YUFjdHVhbCIsIl93aXBlRWxlbWVudHMiLCJhbGxJbmRleCIsImFjdGl2ZUluZGV4Iiwic2V0QWN0aXZlUm93cyIsImRpc3BsYXlSb3dJdGVyYXRvciIsImRpc3BsYXlJbmRleCIsInJlZnJlc2hEaXNwbGF5T25seSIsImZpbmRBZGRSb3dQb3MiLCJfY2xlYXJQbGFjZWhvbGRlciIsImFkZFJvd1BvcyIsImNoYWluUmVzdWx0IiwiY2xlYXJEYXRhIiwiZmluZFJvd0luZGV4Iiwicm93T25seSIsImdldERhdGFDb3VudCIsInNraXBTdGFnZSIsInN0YWdlIiwiY2FzY2FkZU9yZGVyIiwicmVmcmVzaFBpcGVsaW5lcyIsInJlbmRlclRhYmxlIiwibGF5b3V0Q29sdW1uc09uTmV3RGF0YSIsInJlc2V0RGlzcGxheVJvd3MiLCJzZXREaXNwbGF5Um93cyIsInNjcm9sbEJhckNoZWNrIiwicmVuZGVyVmVydGljYWwiLCJfY2xlYXJUYWJsZSIsIl9zaG93UGxhY2Vob2xkZXIiLCJpbml0aWFsSGVpZ2h0Iiwib3RoZXJIZWlnaHQiLCJleHRlcm5hbCIsImV2ZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJFdmVudCIsIkZvb3Rlck1hbmFnZXIiLCJjcmVhdGVDb250YWluZXJFbGVtZW50IiwiaW5pdGlhbGl6ZUVsZW1lbnQiLCJmb290ZXJFbGVtZW50IiwiYWN0aXZhdGUiLCJkZWFjdGl2YXRlIiwiSW50ZXJhY3Rpb25NYW5hZ2VyIiwiYWJvcnRDbGFzc2VzIiwicHJldmlvdXNUYXJnZXRzIiwibGlzdGVuZXJzIiwiY29tcG9uZW50TWFwIiwicHNldWRvVHJhY2tlcnMiLCJzdWJzY3JpYmVyIiwicHNldWRvVHJhY2tpbmciLCJidWlsZExpc3RlbmVyTWFwIiwiYmluZFN1YnNjcmlwdGlvbldhdGNoZXJzIiwibGlzdGVuZXJNYXAiLCJsaXN0ZW5lciIsImNvbXBvbmVudHMiLCJiaW5kUHNldWRvRXZlbnRzIiwicHNldWRvTW91c2VFbnRlciIsInBzZXVkb01vdXNlTGVhdmUiLCJsZWF2ZUxpc3QiLCJsaW5rZWRLZXlzIiwiY29tcCIsImNsZWFyV2F0Y2hlcnMiLCJ1cGRhdGVFdmVudExpc3RlbmVycyIsInRyYWNrIiwiY29tcG9zZWRQYXRoIiwidGFyZ2V0cyIsImZpbmRUYXJnZXRzIiwiYmluZENvbXBvbmVudHMiLCJ0cmlnZ2VyRXZlbnRzIiwiZWxUYXJnZXRzIiwidGFyZ2V0TWF0Y2hlcyIsInByZXZpb3VzVGFyZ2V0IiwiY2xvc2VzdCIsIkNvbXBvbmVudEZ1bmN0aW9uQmluZGVyIiwiZGVidWdJbnZhbGlkQ29tcG9uZW50RnVuY3MiLCJEYXRhTG9hZGVyIiwicmVxdWVzdE9yZGVyIiwicmVxdWVzdE5vIiwiYWxlcnRMb2FkZXIiLCJtYXBQYXJhbXMiLCJkYXRhU2VuZFBhcmFtcyIsIm9iamVjdEludmVydCIsImRhdGFSZWNlaXZlUGFyYW1zIiwiYWxlcnRFcnJvciIsImRhdGFMb2FkZXJFcnJvclRpbWVvdXQiLCJibG9ja0FjdGl2ZUxvYWQiLCJkYXRhTG9hZGVyTG9hZGluZyIsImRhdGFMb2FkZXJFcnJvciIsIkV4dGVybmFsRXZlbnRCdXMiLCJkZWJ1ZyIsImV2ZW50cyIsInN1YnNjcmlwdGlvbk5vdGlmaWVycyIsIl9kZWJ1Z0Rpc3BhdGNoIiwiX2Rpc3BhdGNoIiwiX25vdGlmeVN1YnNjcmlwdGlvbkNoYW5nZSIsIm5vdGlmaWVycyIsImNhbGxSZXN1bHQiLCJsb2ciLCJJbnRlcm5hbEV2ZW50QnVzIiwiX2RlYnVnQ2hhaW4iLCJfY2hhaW4iLCJfZGVidWdDb25maXJtIiwiX2NvbmZpcm0iLCJmYWxsYmFjayIsImNvbmZpcm1lZCIsIkRlcHJlY2F0aW9uQWR2aXNvciIsIl93YXJuVXNlciIsIlRhYmxlUmVnaXN0cnkiLCJ0YWJsZXMiLCJkZXJlZ2lzdGVyIiwibG9va3VwVGFibGUiLCJtYXRjaEVsZW1lbnQiLCJUYWJ1bGF0b3IiLCJmaXREYXRhR2VuZXJhbCIsImZvcmNlZCIsImRlZmF1bHRNb2RlcyIsImZpdERhdGEiLCJmaXREYXRhRmlsbCIsImZpdERhdGFUYWJsZSIsImZpdERhdGFTdHJldGNoIiwiY29sc1dpZHRoIiwiZ2FwIiwibGFzdENvbCIsImZpdENvbHVtbnMiLCJmbGV4Q29sV2lkdGgiLCJvdmVyZmxvd1dpZHRoIiwiZmxleFdpZHRoIiwiZmxleEdyb3dVbml0cyIsImZsZXhDb2x1bW5zIiwiZml4ZWRTaHJpbmtDb2x1bW5zIiwiZmxleFNocmlua1VuaXRzIiwiZ2FwRmlsbCIsImNhbGNXaWR0aCIsInNjYWxlQ29sdW1ucyIsImZyZWVTcGFjZSIsInNocmlua0NvbHMiLCJvdmVyc2l6ZUNvbHMiLCJvdmVyc2l6ZVNwYWNlIiwicmVtYWluaW5nU3BhY2UiLCJyZW1haW5pbmdGbGV4R3Jvd1VuaXRzIiwiY2hhbmdlVW5pdHMiLCJ1bmRlcnNpemVDb2xzIiwiY2FsY0dyb3ciLCJ3aWR0aEdyb3ciLCJjYWxjU2hyaW5rIiwid2lkdGhTaHJpbmsiLCJMYXlvdXQiLCJtb2RlcyIsImRhdGFDaGFuZ2VkIiwiTG9jYWxpemUiLCJsYW5nTGlzdCIsImxhbmdzIiwic2V0SGVhZGVyRmlsdGVyUGxhY2Vob2xkZXIiLCJpbnN0YWxsTGFuZyIsInNldExvY2FsZSIsImdldExhbmciLCJkZWZhdWx0IiwiX3NldExhbmdQcm9wIiwiZGVzaXJlZExvY2FsZSIsImxhbmd1YWdlIiwidHJhdmVyc2VMYW5nIiwidHJhbnMiLCJfZXhlY3V0ZUJpbmRpbmdzIiwicGF0aEFycmF5IiwiX2dldExhbmdFbGVtZW50Iiwicm9vdFBhdGgiLCJDb21tcyIsInJlY2VpdmUiLCJzZWxlY3RvcnMiLCJjb24iLCJ0YWJsZUNvbW1zIiwiY29yZU1vZHVsZXMiLCJMYXlvdXRNb2R1bGUiLCJMb2NhbGl6ZU1vZHVsZSIsIkNvbW1zTW9kdWxlIiwiTW9kdWxlQmluZGVyIiwidGFidWxhdG9yIiwiYmluZFN0YXRpY0Z1bmN0aW9uYWxpdHkiLCJiaW5kTW9kdWxlcyIsIm1vZHVsZUJpbmRpbmdzIiwiZXh0ZW5kTW9kdWxlIiwicmVnaXN0ZXJNb2R1bGUiLCJtb2QiLCJyZWdpc3Rlck1vZHVsZUJpbmRpbmciLCJmaW5kVGFibGUiLCJvcmRlcmVkU3RhcnRNb2RzIiwib3JkZXJlZEVuZE1vZHMiLCJ1bk9yZGVyZWRNb2RzIiwibW9kdWxlQ29yZSIsIm1vZHVsZXNDb3JlIiwibW9kdWxlc1JlZ3VsYXIiLCJjb3JlIiwibW9kcyIsIkFsZXJ0IiwiX2NyZWF0ZUFsZXJ0RWxlbWVudCIsIm1zZ0VsZW1lbnQiLCJfY3JlYXRlTXNnRWxlbWVudCIsIl90eXBlQ2xhc3MiLCJpbnRlcmFjdGlvbk1vbml0b3IiLCJpbml0aWFsaXplQ29yZVN5c3RlbXMiLCJfY3JlYXRlIiwiX2NsZWFyT2JqZWN0UG9pbnRlcnMiLCJfbWFwRGVwcmVjYXRlZEZ1bmN0aW9uYWxpdHkiLCJkZWJ1Z0V2ZW50c0V4dGVybmFsIiwiZGVidWdFdmVudHNJbnRlcm5hbCIsIl9ydGxDaGVjayIsIl9idWlsZEVsZW1lbnQiLCJfaW5pdGlhbGl6ZVRhYmxlIiwiX2xvYWRJbml0aWFsRGF0YSIsInRleHREaXJlY3Rpb24iLCJkaXJlY3Rpb24iLCJuZXdFbGVtZW50IiwiX2RldGVjdEJyb3dzZXIiLCJ1YSIsInVzZXJBZ2VudCIsInZlbmRvciIsIm9wZXJhIiwibGluZSIsImRlYnVnSW5pdGlhbGl6YXRpb24iLCJyZXBsYWNlRGF0YSIsInJlc3BvbnNlcyIsImZvdW5kUm93cyIsInVwZGF0ZU9yQWRkUm93IiwidXBkYXRlUm93IiwiZ2V0Um93UG9zaXRpb24iLCJnZXRDb2x1bW5EZWZpbml0aW9ucyIsInRvZ2dsZUNvbHVtbiIsImRlbGV0ZUNvbHVtbiIsInVwZGF0ZUNvbHVtbkRlZmluaXRpb24iLCJmcm9tQ29sdW1uIiwib2ZmIiwicGx1Z2luIiwiZGVidWdEZXByZWNhdGlvbiIsInJvd0Zvcm1hdHRlclByaW50Iiwicm93Rm9ybWF0dGVyQ2xpcGJvYXJkIiwicm93Rm9ybWF0dGVySHRtbE91dHB1dCIsImFycmF5RGF0YSIsInBsYXllck1ldHJpY3MiLCJ0YWJsZU1ldGhvZHMiLCJjdXJyZW50UGxheWVyIiwiam91ZXVyIiwicGFydGljaXBhdGlvbiIsImFkZEdyYXlzY2FsZUVmZmVjdCIsIndlZWtFIiwid2Vla0QiLCJ3ZWVrQyIsIndlZWtCIiwiY3VycmVudFdlZWsiLCJ0ZWFtQXNzZXRzIiwiZGF0YU1ldGhvZHMiLCJnZXRUZWFtIiwidGVhbU5hbWUiLCJpbmNyZW1lbnRQbGF5ZXJzQ291bnQiLCJpbmNyZW1lbnRDb3VudCIsImltZyIsInRvcDN0ZWFtcyIsImdldE1vc3RDb21tbW9uVGVhbXMiLCJ0YWJsZWRhdGEiLCJlcXVpcGUiLCJ0ZWFtIiwicGxheWVyc0NvdW50IiwidGVhbXNMaXN0IiwiVGVhbSIsInByb3Blck5hbWUiLCJpbml0aWFsaXNlVGVhbXNMaXN0IiwidGVhbU9iamVjdCIsInNvcnRlZFRlYW1zIl0sInNvdXJjZVJvb3QiOiIifQ==