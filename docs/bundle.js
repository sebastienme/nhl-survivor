/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={257:(t,e,i)=>{"use strict";i.d(e,{Z:()=>l});var n=i(537),o=i.n(n),r=i(645),a=i.n(r)()(o());a.push([t.id,'.tabulator {\n  position: relative;\n  border: 1px solid #999;\n  background-color: #888;\n  font-size: 14px;\n  text-align: left;\n  overflow: hidden;\n  -webkit-transform: translateZ(0);\n  -moz-transform: translateZ(0);\n  -ms-transform: translateZ(0);\n  -o-transform: translateZ(0);\n  transform: translateZ(0);\n}\n\n.tabulator[tabulator-layout="fitDataFill"] .tabulator-tableholder .tabulator-table {\n  min-width: 100%;\n}\n\n.tabulator[tabulator-layout="fitDataTable"] {\n  display: inline-block;\n}\n\n.tabulator.tabulator-block-select {\n  user-select: none;\n}\n\n.tabulator .tabulator-header {\n  position: relative;\n  box-sizing: border-box;\n  width: 100%;\n  border-bottom: 1px solid #999;\n  background-color: #e6e6e6;\n  color: #555;\n  font-weight: bold;\n  white-space: nowrap;\n  overflow: hidden;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n}\n\n.tabulator .tabulator-header.tabulator-header-hidden {\n  display: none;\n}\n\n.tabulator .tabulator-header .tabulator-header-contents {\n  position: relative;\n  overflow: hidden;\n}\n\n.tabulator .tabulator-header .tabulator-header-contents .tabulator-headers {\n  display: inline-block;\n}\n\n.tabulator .tabulator-header .tabulator-col {\n  display: inline-flex;\n  position: relative;\n  box-sizing: border-box;\n  flex-direction: column;\n  justify-content: flex-start;\n  border-right: 1px solid #aaa;\n  background: #e6e6e6;\n  text-align: left;\n  vertical-align: bottom;\n  overflow: hidden;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-moving {\n  position: absolute;\n  border: 1px solid #999;\n  background: #cdcdcd;\n  pointer-events: none;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content {\n  box-sizing: border-box;\n  position: relative;\n  padding: 4px;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-header-popup-button {\n  padding: 0 8px;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-header-popup-button:hover {\n  cursor: pointer;\n  opacity: .6;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title-holder {\n  position: relative;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title {\n  box-sizing: border-box;\n  width: 100%;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  vertical-align: bottom;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title.tabulator-col-title-wrap {\n  white-space: normal;\n  text-overflow: initial;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title .tabulator-title-editor {\n  box-sizing: border-box;\n  width: 100%;\n  border: 1px solid #999;\n  padding: 1px;\n  background: #fff;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title .tabulator-header-popup-button + .tabulator-title-editor {\n  width: calc(100% - 22px);\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter {\n  display: flex;\n  align-items: center;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  right: 4px;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n  width: 0;\n  height: 0;\n  border-left: 6px solid transparent;\n  border-right: 6px solid transparent;\n  border-bottom: 6px solid #bbb;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-group .tabulator-col-group-cols {\n  position: relative;\n  display: flex;\n  border-top: 1px solid #aaa;\n  overflow: hidden;\n  margin-right: -1px;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter {\n  position: relative;\n  box-sizing: border-box;\n  margin-top: 2px;\n  width: 100%;\n  text-align: center;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter textarea {\n  height: auto !important;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter svg {\n  margin-top: 3px;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter input::-ms-clear {\n  width: 0;\n  height: 0;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable .tabulator-col-title {\n  padding-right: 25px;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-header .tabulator-col.tabulator-sortable.tabulator-col-sorter-element:hover {\n    cursor: pointer;\n    background-color: #cdcdcd;\n  }\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="none"] .tabulator-col-content .tabulator-col-sorter {\n  color: #bbb;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="none"] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover {\n    cursor: pointer;\n    border-bottom: 6px solid #555;\n  }\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="none"] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n  border-top: none;\n  border-bottom: 6px solid #bbb;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="ascending"] .tabulator-col-content .tabulator-col-sorter {\n  color: #666;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="ascending"] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover {\n    cursor: pointer;\n    border-bottom: 6px solid #555;\n  }\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="ascending"] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n  border-top: none;\n  border-bottom: 6px solid #666;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="descending"] .tabulator-col-content .tabulator-col-sorter {\n  color: #666;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="descending"] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover {\n    cursor: pointer;\n    border-top: 6px solid #555;\n  }\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="descending"] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n  border-bottom: none;\n  border-top: 6px solid #666;\n  color: #666;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical .tabulator-col-content .tabulator-col-title {\n  writing-mode: vertical-rl;\n  text-orientation: mixed;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-col-vertical-flip .tabulator-col-title {\n  transform: rotate(180deg);\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable .tabulator-col-title {\n  padding-right: 0;\n  padding-top: 20px;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable.tabulator-col-vertical-flip .tabulator-col-title {\n  padding-right: 0;\n  padding-bottom: 20px;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable .tabulator-col-sorter {\n  justify-content: center;\n  left: 0;\n  right: 0;\n  top: 4px;\n  bottom: auto;\n}\n\n.tabulator .tabulator-header .tabulator-frozen {\n  position: sticky;\n  left: 0;\n  z-index: 11;\n}\n\n.tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-left {\n  border-right: 2px solid #aaa;\n}\n\n.tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-right {\n  border-left: 2px solid #aaa;\n}\n\n.tabulator .tabulator-header .tabulator-calcs-holder {\n  box-sizing: border-box;\n  background: #f3f3f3 !important;\n  border-top: 1px solid #aaa;\n  border-bottom: 1px solid #aaa;\n}\n\n.tabulator .tabulator-header .tabulator-calcs-holder .tabulator-row {\n  background: #f3f3f3 !important;\n}\n\n.tabulator .tabulator-header .tabulator-calcs-holder .tabulator-row .tabulator-col-resize-handle {\n  display: none;\n}\n\n.tabulator .tabulator-header .tabulator-frozen-rows-holder:empty {\n  display: none;\n}\n\n.tabulator .tabulator-tableholder {\n  position: relative;\n  width: 100%;\n  white-space: nowrap;\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n}\n\n.tabulator .tabulator-tableholder:focus {\n  outline: none;\n}\n\n.tabulator .tabulator-tableholder .tabulator-placeholder {\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n}\n\n.tabulator .tabulator-tableholder .tabulator-placeholder[tabulator-render-mode="virtual"] {\n  min-height: 100%;\n  min-width: 100%;\n}\n\n.tabulator .tabulator-tableholder .tabulator-placeholder .tabulator-placeholder-contents {\n  display: inline-block;\n  text-align: center;\n  padding: 10px;\n  color: #ccc;\n  font-weight: bold;\n  font-size: 20px;\n  white-space: normal;\n}\n\n.tabulator .tabulator-tableholder .tabulator-table {\n  position: relative;\n  display: inline-block;\n  background-color: #fff;\n  white-space: nowrap;\n  overflow: visible;\n  color: #333;\n}\n\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs {\n  font-weight: bold;\n  background: #e2e2e2 !important;\n}\n\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs.tabulator-calcs-top {\n  border-bottom: 2px solid #aaa;\n}\n\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs.tabulator-calcs-bottom {\n  border-top: 2px solid #aaa;\n}\n\n.tabulator .tabulator-footer {\n  border-top: 1px solid #999;\n  background-color: #e6e6e6;\n  color: #555;\n  font-weight: bold;\n  white-space: nowrap;\n  user-select: none;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n}\n\n.tabulator .tabulator-footer .tabulator-footer-contents {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  padding: 5px 10px;\n}\n\n.tabulator .tabulator-footer .tabulator-footer-contents:empty {\n  display: none;\n}\n\n.tabulator .tabulator-footer .tabulator-calcs-holder {\n  box-sizing: border-box;\n  width: 100%;\n  text-align: left;\n  background: #f3f3f3 !important;\n  border-bottom: 1px solid #aaa;\n  border-top: 1px solid #aaa;\n  overflow: hidden;\n}\n\n.tabulator .tabulator-footer .tabulator-calcs-holder .tabulator-row {\n  display: inline-block;\n  background: #f3f3f3 !important;\n}\n\n.tabulator .tabulator-footer .tabulator-calcs-holder .tabulator-row .tabulator-col-resize-handle {\n  display: none;\n}\n\n.tabulator .tabulator-footer .tabulator-calcs-holder:only-child {\n  margin-bottom: -5px;\n  border-bottom: none;\n}\n\n.tabulator .tabulator-footer > * + .tabulator-page-counter {\n  margin-left: 10px;\n}\n\n.tabulator .tabulator-footer .tabulator-page-counter {\n  font-weight: normal;\n}\n\n.tabulator .tabulator-footer .tabulator-paginator {\n  flex: 1;\n  text-align: right;\n  color: #555;\n  font-family: inherit;\n  font-weight: inherit;\n  font-size: inherit;\n}\n\n.tabulator .tabulator-footer .tabulator-page-size {\n  display: inline-block;\n  margin: 0 5px;\n  padding: 2px 5px;\n  border: 1px solid #aaa;\n  border-radius: 3px;\n}\n\n.tabulator .tabulator-footer .tabulator-pages {\n  margin: 0 7px;\n}\n\n.tabulator .tabulator-footer .tabulator-page {\n  display: inline-block;\n  margin: 0 2px;\n  padding: 2px 5px;\n  border: 1px solid #aaa;\n  border-radius: 3px;\n  background: rgba(255, 255, 255, 0.2);\n}\n\n.tabulator .tabulator-footer .tabulator-page.active {\n  color: #d00;\n}\n\n.tabulator .tabulator-footer .tabulator-page:disabled {\n  opacity: .5;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-footer .tabulator-page:not(.disabled):hover {\n    cursor: pointer;\n    background: rgba(0, 0, 0, 0.2);\n    color: #fff;\n  }\n}\n\n.tabulator .tabulator-col-resize-handle {\n  position: relative;\n  display: inline-block;\n  width: 6px;\n  margin-left: -3px;\n  margin-right: -3px;\n  z-index: 10;\n  vertical-align: middle;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-col-resize-handle:hover {\n    cursor: ew-resize;\n  }\n}\n\n.tabulator .tabulator-col-resize-handle:last-of-type {\n  width: 3px;\n  margin-right: 0;\n}\n\n.tabulator .tabulator-alert {\n  position: absolute;\n  display: flex;\n  align-items: center;\n  top: 0;\n  left: 0;\n  z-index: 100;\n  height: 100%;\n  width: 100%;\n  background: rgba(0, 0, 0, 0.4);\n  text-align: center;\n}\n\n.tabulator .tabulator-alert .tabulator-alert-msg {\n  display: inline-block;\n  margin: 0 auto;\n  padding: 10px 20px;\n  border-radius: 10px;\n  background: #fff;\n  font-weight: bold;\n  font-size: 16px;\n}\n\n.tabulator .tabulator-alert .tabulator-alert-msg.tabulator-alert-state-msg {\n  border: 4px solid #333;\n  color: #000;\n}\n\n.tabulator .tabulator-alert .tabulator-alert-msg.tabulator-alert-state-error {\n  border: 4px solid #D00;\n  color: #590000;\n}\n\n.tabulator-row {\n  position: relative;\n  box-sizing: border-box;\n  min-height: 22px;\n  background-color: #fff;\n}\n\n.tabulator-row.tabulator-row-even {\n  background-color: #EFEFEF;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row.tabulator-selectable:hover {\n    background-color: #bbb;\n    cursor: pointer;\n  }\n}\n\n.tabulator-row.tabulator-selected {\n  background-color: #9ABCEA;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row.tabulator-selected:hover {\n    background-color: #769BCC;\n    cursor: pointer;\n  }\n}\n\n.tabulator-row.tabulator-row-moving {\n  border: 1px solid #000;\n  background: #fff;\n}\n\n.tabulator-row.tabulator-moving {\n  position: absolute;\n  border-top: 1px solid #aaa;\n  border-bottom: 1px solid #aaa;\n  pointer-events: none;\n  z-index: 15;\n}\n\n.tabulator-row .tabulator-row-resize-handle {\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  height: 5px;\n}\n\n.tabulator-row .tabulator-row-resize-handle.prev {\n  top: 0;\n  bottom: auto;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row .tabulator-row-resize-handle:hover {\n    cursor: ns-resize;\n  }\n}\n\n.tabulator-row .tabulator-responsive-collapse {\n  box-sizing: border-box;\n  padding: 5px;\n  border-top: 1px solid #aaa;\n  border-bottom: 1px solid #aaa;\n}\n\n.tabulator-row .tabulator-responsive-collapse:empty {\n  display: none;\n}\n\n.tabulator-row .tabulator-responsive-collapse table {\n  font-size: 14px;\n}\n\n.tabulator-row .tabulator-responsive-collapse table tr td {\n  position: relative;\n}\n\n.tabulator-row .tabulator-responsive-collapse table tr td:first-of-type {\n  padding-right: 10px;\n}\n\n.tabulator-row .tabulator-cell {\n  display: inline-block;\n  position: relative;\n  box-sizing: border-box;\n  padding: 4px;\n  border-right: 1px solid #aaa;\n  vertical-align: middle;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.tabulator-row .tabulator-cell.tabulator-frozen {\n  display: inline-block;\n  position: sticky;\n  left: 0;\n  background-color: inherit;\n  z-index: 11;\n}\n\n.tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-left {\n  border-right: 2px solid #aaa;\n}\n\n.tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-right {\n  border-left: 2px solid #aaa;\n}\n\n.tabulator-row .tabulator-cell.tabulator-editing {\n  border: 1px solid #1D68CD;\n  outline: none;\n  padding: 0;\n}\n\n.tabulator-row .tabulator-cell.tabulator-editing input,\n.tabulator-row .tabulator-cell.tabulator-editing select {\n  border: 1px;\n  background: transparent;\n  outline: none;\n}\n\n.tabulator-row .tabulator-cell.tabulator-validation-fail {\n  border: 1px solid #dd0000;\n}\n\n.tabulator-row .tabulator-cell.tabulator-validation-fail input,\n.tabulator-row .tabulator-cell.tabulator-validation-fail select {\n  border: 1px;\n  background: transparent;\n  color: #dd0000;\n}\n\n.tabulator-row .tabulator-cell.tabulator-row-handle {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n}\n\n.tabulator-row .tabulator-cell.tabulator-row-handle .tabulator-row-handle-box {\n  width: 80%;\n}\n\n.tabulator-row .tabulator-cell.tabulator-row-handle .tabulator-row-handle-box .tabulator-row-handle-bar {\n  width: 100%;\n  height: 3px;\n  margin-top: 2px;\n  background: #666;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-branch-empty {\n  display: inline-block;\n  width: 7px;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-branch {\n  display: inline-block;\n  vertical-align: middle;\n  height: 9px;\n  width: 7px;\n  margin-top: -9px;\n  margin-right: 5px;\n  border-bottom-left-radius: 1px;\n  border-left: 2px solid #aaa;\n  border-bottom: 2px solid #aaa;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-control {\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  vertical-align: middle;\n  height: 11px;\n  width: 11px;\n  margin-right: 5px;\n  border: 1px solid #333;\n  border-radius: 2px;\n  background: rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row .tabulator-cell .tabulator-data-tree-control:hover {\n    cursor: pointer;\n    background: rgba(0, 0, 0, 0.2);\n  }\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-collapse {\n  display: inline-block;\n  position: relative;\n  height: 7px;\n  width: 1px;\n  background: transparent;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-collapse:after {\n  position: absolute;\n  content: "";\n  left: -3px;\n  top: 3px;\n  height: 1px;\n  width: 7px;\n  background: #333;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-expand {\n  display: inline-block;\n  position: relative;\n  height: 7px;\n  width: 1px;\n  background: #333;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-expand:after {\n  position: absolute;\n  content: "";\n  left: -3px;\n  top: 3px;\n  height: 1px;\n  width: 7px;\n  background: #333;\n}\n\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n  height: 15px;\n  width: 15px;\n  border-radius: 20px;\n  background: #666;\n  color: #fff;\n  font-weight: bold;\n  font-size: 1.1em;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle:hover {\n    opacity: .7;\n    cursor: pointer;\n  }\n}\n\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle.open .tabulator-responsive-collapse-toggle-close {\n  display: initial;\n}\n\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle.open .tabulator-responsive-collapse-toggle-open {\n  display: none;\n}\n\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle svg {\n  stroke: #fff;\n}\n\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle .tabulator-responsive-collapse-toggle-close {\n  display: none;\n}\n\n.tabulator-row .tabulator-cell .tabulator-traffic-light {\n  display: inline-block;\n  height: 14px;\n  width: 14px;\n  border-radius: 14px;\n}\n\n.tabulator-row.tabulator-group {\n  box-sizing: border-box;\n  border-bottom: 1px solid #999;\n  border-right: 1px solid #aaa;\n  border-top: 1px solid #999;\n  padding: 5px;\n  padding-left: 10px;\n  background: #ccc;\n  font-weight: bold;\n  min-width: 100%;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row.tabulator-group:hover {\n    cursor: pointer;\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n}\n\n.tabulator-row.tabulator-group.tabulator-group-visible .tabulator-arrow {\n  margin-right: 10px;\n  border-left: 6px solid transparent;\n  border-right: 6px solid transparent;\n  border-top: 6px solid #666;\n  border-bottom: 0;\n}\n\n.tabulator-row.tabulator-group.tabulator-group-level-1 {\n  padding-left: 30px;\n}\n\n.tabulator-row.tabulator-group.tabulator-group-level-2 {\n  padding-left: 50px;\n}\n\n.tabulator-row.tabulator-group.tabulator-group-level-3 {\n  padding-left: 70px;\n}\n\n.tabulator-row.tabulator-group.tabulator-group-level-4 {\n  padding-left: 90px;\n}\n\n.tabulator-row.tabulator-group.tabulator-group-level-5 {\n  padding-left: 110px;\n}\n\n.tabulator-row.tabulator-group .tabulator-group-toggle {\n  display: inline-block;\n}\n\n.tabulator-row.tabulator-group .tabulator-arrow {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-right: 16px;\n  border-top: 6px solid transparent;\n  border-bottom: 6px solid transparent;\n  border-right: 0;\n  border-left: 6px solid #666;\n  vertical-align: middle;\n}\n\n.tabulator-row.tabulator-group span {\n  margin-left: 10px;\n  color: #d00;\n}\n\n.tabulator-popup-container {\n  position: absolute;\n  display: inline-block;\n  box-sizing: border-box;\n  background: #fff;\n  border: 1px solid #aaa;\n  box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.2);\n  font-size: 14px;\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n  z-index: 10000;\n}\n\n.tabulator-popup {\n  padding: 5px;\n  border-radius: 3px;\n}\n\n.tabulator-tooltip {\n  max-width: Min(500px, 100%);\n  padding: 3px 5px;\n  border-radius: 2px;\n  box-shadow: none;\n  font-size: 12px;\n  pointer-events: none;\n}\n\n.tabulator-menu .tabulator-menu-item {\n  position: relative;\n  box-sizing: border-box;\n  padding: 5px 10px;\n  user-select: none;\n}\n\n.tabulator-menu .tabulator-menu-item.tabulator-menu-item-disabled {\n  opacity: .5;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-menu .tabulator-menu-item:not(.tabulator-menu-item-disabled):hover {\n    cursor: pointer;\n    background: #EFEFEF;\n  }\n}\n\n.tabulator-menu .tabulator-menu-item.tabulator-menu-item-submenu {\n  padding-right: 25px;\n}\n\n.tabulator-menu .tabulator-menu-item.tabulator-menu-item-submenu::after {\n  display: inline-block;\n  position: absolute;\n  top: calc(5px + .4em);\n  right: 10px;\n  height: 7px;\n  width: 7px;\n  content: \'\';\n  border-width: 1px 1px 0 0;\n  border-style: solid;\n  border-color: #aaa;\n  vertical-align: top;\n  transform: rotate(45deg);\n}\n\n.tabulator-menu .tabulator-menu-separator {\n  border-top: 1px solid #aaa;\n}\n\n.tabulator-edit-list {\n  max-height: 200px;\n  font-size: 14px;\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item {\n  padding: 4px;\n  color: #333;\n  outline: none;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.active {\n  color: #fff;\n  background: #1D68CD;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.active.focused {\n  outline: 1px solid rgba(255, 255, 255, 0.5);\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.focused {\n  outline: 1px solid #1D68CD;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-edit-list .tabulator-edit-list-item:hover {\n    cursor: pointer;\n    color: #fff;\n    background: #1D68CD;\n  }\n}\n\n.tabulator-edit-list .tabulator-edit-list-placeholder {\n  padding: 4px;\n  color: #333;\n  text-align: center;\n}\n\n.tabulator-edit-list .tabulator-edit-list-group {\n  border-bottom: 1px solid #aaa;\n  padding: 4px;\n  padding-top: 6px;\n  color: #333;\n  font-weight: bold;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-2,\n.tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-2 {\n  padding-left: 12px;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-3,\n.tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-3 {\n  padding-left: 20px;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-4,\n.tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-4 {\n  padding-left: 28px;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-5,\n.tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-5 {\n  padding-left: 36px;\n}\n\n.tabulator.tabulator-ltr {\n  direction: ltr;\n}\n\n.tabulator.tabulator-rtl {\n  text-align: initial;\n  direction: rtl;\n}\n\n.tabulator.tabulator-rtl .tabulator-header .tabulator-col {\n  text-align: initial;\n  border-left: 1px solid #aaa;\n  border-right: initial;\n}\n\n.tabulator.tabulator-rtl .tabulator-header .tabulator-col.tabulator-col-group .tabulator-col-group-cols {\n  margin-right: initial;\n  margin-left: -1px;\n}\n\n.tabulator.tabulator-rtl .tabulator-header .tabulator-col.tabulator-sortable .tabulator-col-title {\n  padding-right: 0;\n  padding-left: 25px;\n}\n\n.tabulator.tabulator-rtl .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter {\n  left: 8px;\n  right: initial;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell {\n  border-right: initial;\n  border-left: 1px solid #aaa;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell .tabulator-data-tree-branch {\n  margin-right: initial;\n  margin-left: 5px;\n  border-bottom-left-radius: initial;\n  border-bottom-right-radius: 1px;\n  border-left: initial;\n  border-right: 2px solid #aaa;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell .tabulator-data-tree-control {\n  margin-right: initial;\n  margin-left: 5px;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-left {\n  border-left: 2px solid #aaa;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-right {\n  border-right: 2px solid #aaa;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-col-resize-handle:last-of-type {\n  width: 3px;\n  margin-left: 0;\n  margin-right: -3px;\n}\n\n.tabulator.tabulator-rtl .tabulator-footer .tabulator-calcs-holder {\n  text-align: initial;\n}\n\n.tabulator-print-fullscreen {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 10000;\n}\n\nbody.tabulator-print-fullscreen-hide > *:not(.tabulator-print-fullscreen) {\n  display: none !important;\n}\n\n.tabulator-print-table {\n  border-collapse: collapse;\n}\n\n.tabulator-print-table .tabulator-data-tree-branch {\n  display: inline-block;\n  vertical-align: middle;\n  height: 9px;\n  width: 7px;\n  margin-top: -9px;\n  margin-right: 5px;\n  border-bottom-left-radius: 1px;\n  border-left: 2px solid #aaa;\n  border-bottom: 2px solid #aaa;\n}\n\n.tabulator-print-table .tabulator-print-table-group {\n  box-sizing: border-box;\n  border-bottom: 1px solid #999;\n  border-right: 1px solid #aaa;\n  border-top: 1px solid #999;\n  padding: 5px;\n  padding-left: 10px;\n  background: #ccc;\n  font-weight: bold;\n  min-width: 100%;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-print-table .tabulator-print-table-group:hover {\n    cursor: pointer;\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-visible .tabulator-arrow {\n  margin-right: 10px;\n  border-left: 6px solid transparent;\n  border-right: 6px solid transparent;\n  border-top: 6px solid #666;\n  border-bottom: 0;\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-1 td {\n  padding-left: 30px !important;\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-2 td {\n  padding-left: 50px !important;\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-3 td {\n  padding-left: 70px !important;\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-4 td {\n  padding-left: 90px !important;\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-5 td {\n  padding-left: 110px !important;\n}\n\n.tabulator-print-table .tabulator-print-table-group .tabulator-group-toggle {\n  display: inline-block;\n}\n\n.tabulator-print-table .tabulator-print-table-group .tabulator-arrow {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-right: 16px;\n  border-top: 6px solid transparent;\n  border-bottom: 6px solid transparent;\n  border-right: 0;\n  border-left: 6px solid #666;\n  vertical-align: middle;\n}\n\n.tabulator-print-table .tabulator-print-table-group span {\n  margin-left: 10px;\n  color: #d00;\n}\n\n.tabulator-print-table .tabulator-data-tree-control {\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  vertical-align: middle;\n  height: 11px;\n  width: 11px;\n  margin-right: 5px;\n  border: 1px solid #333;\n  border-radius: 2px;\n  background: rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-print-table .tabulator-data-tree-control:hover {\n    cursor: pointer;\n    background: rgba(0, 0, 0, 0.2);\n  }\n}\n\n.tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-collapse {\n  display: inline-block;\n  position: relative;\n  height: 7px;\n  width: 1px;\n  background: transparent;\n}\n\n.tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-collapse:after {\n  position: absolute;\n  content: "";\n  left: -3px;\n  top: 3px;\n  height: 1px;\n  width: 7px;\n  background: #333;\n}\n\n.tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-expand {\n  display: inline-block;\n  position: relative;\n  height: 7px;\n  width: 1px;\n  background: #333;\n}\n\n.tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-expand:after {\n  position: absolute;\n  content: "";\n  left: -3px;\n  top: 3px;\n  height: 1px;\n  width: 7px;\n  background: #333;\n}\n\n/*# sourceMappingURL=tabulator.css.map */',"",{version:3,sources:["webpack://./node_modules/tabulator-tables/dist/css/tabulator.scss","webpack://./node_modules/tabulator-tables/dist/css/tabulator.css"],names:[],mappings:"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",sourcesContent:['.tabulator {\n  position: relative;\n  border: 1px solid #999;\n  background-color: #888;\n  font-size: 14px;\n  text-align: left;\n  overflow: hidden;\n  -webkit-transform: translateZ(0);\n  -moz-transform: translateZ(0);\n  -ms-transform: translateZ(0);\n  -o-transform: translateZ(0);\n  transform: translateZ(0); }\n  .tabulator[tabulator-layout="fitDataFill"] .tabulator-tableholder .tabulator-table {\n    min-width: 100%; }\n  .tabulator[tabulator-layout="fitDataTable"] {\n    display: inline-block; }\n  .tabulator.tabulator-block-select {\n    user-select: none; }\n  .tabulator .tabulator-header {\n    position: relative;\n    box-sizing: border-box;\n    width: 100%;\n    border-bottom: 1px solid #999;\n    background-color: #e6e6e6;\n    color: #555;\n    font-weight: bold;\n    white-space: nowrap;\n    overflow: hidden;\n    -moz-user-select: none;\n    -khtml-user-select: none;\n    -webkit-user-select: none;\n    -o-user-select: none; }\n    .tabulator .tabulator-header.tabulator-header-hidden {\n      display: none; }\n    .tabulator .tabulator-header .tabulator-header-contents {\n      position: relative;\n      overflow: hidden; }\n      .tabulator .tabulator-header .tabulator-header-contents .tabulator-headers {\n        display: inline-block; }\n    .tabulator .tabulator-header .tabulator-col {\n      display: inline-flex;\n      position: relative;\n      box-sizing: border-box;\n      flex-direction: column;\n      justify-content: flex-start;\n      border-right: 1px solid #aaa;\n      background: #e6e6e6;\n      text-align: left;\n      vertical-align: bottom;\n      overflow: hidden; }\n      .tabulator .tabulator-header .tabulator-col.tabulator-moving {\n        position: absolute;\n        border: 1px solid #999;\n        background: #cdcdcd;\n        pointer-events: none; }\n      .tabulator .tabulator-header .tabulator-col .tabulator-col-content {\n        box-sizing: border-box;\n        position: relative;\n        padding: 4px; }\n        .tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-header-popup-button {\n          padding: 0 8px; }\n          .tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-header-popup-button:hover {\n            cursor: pointer;\n            opacity: .6; }\n        .tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title-holder {\n          position: relative; }\n        .tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title {\n          box-sizing: border-box;\n          width: 100%;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          vertical-align: bottom; }\n          .tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title.tabulator-col-title-wrap {\n            white-space: normal;\n            text-overflow: initial; }\n          .tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title .tabulator-title-editor {\n            box-sizing: border-box;\n            width: 100%;\n            border: 1px solid #999;\n            padding: 1px;\n            background: #fff; }\n          .tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title .tabulator-header-popup-button + .tabulator-title-editor {\n            width: calc(100% - 22px); }\n        .tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter {\n          display: flex;\n          align-items: center;\n          position: absolute;\n          top: 0;\n          bottom: 0;\n          right: 4px; }\n          .tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n            width: 0;\n            height: 0;\n            border-left: 6px solid transparent;\n            border-right: 6px solid transparent;\n            border-bottom: 6px solid #bbb; }\n      .tabulator .tabulator-header .tabulator-col.tabulator-col-group .tabulator-col-group-cols {\n        position: relative;\n        display: flex;\n        border-top: 1px solid #aaa;\n        overflow: hidden;\n        margin-right: -1px; }\n      .tabulator .tabulator-header .tabulator-col .tabulator-header-filter {\n        position: relative;\n        box-sizing: border-box;\n        margin-top: 2px;\n        width: 100%;\n        text-align: center; }\n        .tabulator .tabulator-header .tabulator-col .tabulator-header-filter textarea {\n          height: auto !important; }\n        .tabulator .tabulator-header .tabulator-col .tabulator-header-filter svg {\n          margin-top: 3px; }\n        .tabulator .tabulator-header .tabulator-col .tabulator-header-filter input::-ms-clear {\n          width: 0;\n          height: 0; }\n      .tabulator .tabulator-header .tabulator-col.tabulator-sortable .tabulator-col-title {\n        padding-right: 25px; }\n      @media (hover: hover) and (pointer: fine) {\n        .tabulator .tabulator-header .tabulator-col.tabulator-sortable.tabulator-col-sorter-element:hover {\n          cursor: pointer;\n          background-color: #cdcdcd; } }\n      .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="none"] .tabulator-col-content .tabulator-col-sorter {\n        color: #bbb; }\n        @media (hover: hover) and (pointer: fine) {\n          .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="none"] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover {\n            cursor: pointer;\n            border-bottom: 6px solid #555; } }\n        .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="none"] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n          border-top: none;\n          border-bottom: 6px solid #bbb; }\n      .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="ascending"] .tabulator-col-content .tabulator-col-sorter {\n        color: #666; }\n        @media (hover: hover) and (pointer: fine) {\n          .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="ascending"] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover {\n            cursor: pointer;\n            border-bottom: 6px solid #555; } }\n        .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="ascending"] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n          border-top: none;\n          border-bottom: 6px solid #666; }\n      .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="descending"] .tabulator-col-content .tabulator-col-sorter {\n        color: #666; }\n        @media (hover: hover) and (pointer: fine) {\n          .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="descending"] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover {\n            cursor: pointer;\n            border-top: 6px solid #555; } }\n        .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="descending"] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n          border-bottom: none;\n          border-top: 6px solid #666;\n          color: #666; }\n      .tabulator .tabulator-header .tabulator-col.tabulator-col-vertical .tabulator-col-content .tabulator-col-title {\n        writing-mode: vertical-rl;\n        text-orientation: mixed;\n        display: flex;\n        align-items: center;\n        justify-content: center; }\n      .tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-col-vertical-flip .tabulator-col-title {\n        transform: rotate(180deg); }\n      .tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable .tabulator-col-title {\n        padding-right: 0;\n        padding-top: 20px; }\n      .tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable.tabulator-col-vertical-flip .tabulator-col-title {\n        padding-right: 0;\n        padding-bottom: 20px; }\n      .tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable .tabulator-col-sorter {\n        justify-content: center;\n        left: 0;\n        right: 0;\n        top: 4px;\n        bottom: auto; }\n    .tabulator .tabulator-header .tabulator-frozen {\n      position: sticky;\n      left: 0;\n      z-index: 11; }\n      .tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-left {\n        border-right: 2px solid #aaa; }\n      .tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-right {\n        border-left: 2px solid #aaa; }\n    .tabulator .tabulator-header .tabulator-calcs-holder {\n      box-sizing: border-box;\n      background: #f3f3f3 !important;\n      border-top: 1px solid #aaa;\n      border-bottom: 1px solid #aaa; }\n      .tabulator .tabulator-header .tabulator-calcs-holder .tabulator-row {\n        background: #f3f3f3 !important; }\n        .tabulator .tabulator-header .tabulator-calcs-holder .tabulator-row .tabulator-col-resize-handle {\n          display: none; }\n    .tabulator .tabulator-header .tabulator-frozen-rows-holder:empty {\n      display: none; }\n  .tabulator .tabulator-tableholder {\n    position: relative;\n    width: 100%;\n    white-space: nowrap;\n    overflow: auto;\n    -webkit-overflow-scrolling: touch; }\n    .tabulator .tabulator-tableholder:focus {\n      outline: none; }\n    .tabulator .tabulator-tableholder .tabulator-placeholder {\n      box-sizing: border-box;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      width: 100%; }\n      .tabulator .tabulator-tableholder .tabulator-placeholder[tabulator-render-mode="virtual"] {\n        min-height: 100%;\n        min-width: 100%; }\n      .tabulator .tabulator-tableholder .tabulator-placeholder .tabulator-placeholder-contents {\n        display: inline-block;\n        text-align: center;\n        padding: 10px;\n        color: #ccc;\n        font-weight: bold;\n        font-size: 20px;\n        white-space: normal; }\n    .tabulator .tabulator-tableholder .tabulator-table {\n      position: relative;\n      display: inline-block;\n      background-color: #fff;\n      white-space: nowrap;\n      overflow: visible;\n      color: #333; }\n      .tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs {\n        font-weight: bold;\n        background: #e2e2e2 !important; }\n        .tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs.tabulator-calcs-top {\n          border-bottom: 2px solid #aaa; }\n        .tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs.tabulator-calcs-bottom {\n          border-top: 2px solid #aaa; }\n  .tabulator .tabulator-footer {\n    border-top: 1px solid #999;\n    background-color: #e6e6e6;\n    color: #555;\n    font-weight: bold;\n    white-space: nowrap;\n    user-select: none;\n    -moz-user-select: none;\n    -khtml-user-select: none;\n    -webkit-user-select: none;\n    -o-user-select: none; }\n    .tabulator .tabulator-footer .tabulator-footer-contents {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n      justify-content: space-between;\n      padding: 5px 10px; }\n      .tabulator .tabulator-footer .tabulator-footer-contents:empty {\n        display: none; }\n    .tabulator .tabulator-footer .tabulator-calcs-holder {\n      box-sizing: border-box;\n      width: 100%;\n      text-align: left;\n      background: #f3f3f3 !important;\n      border-bottom: 1px solid #aaa;\n      border-top: 1px solid #aaa;\n      overflow: hidden; }\n      .tabulator .tabulator-footer .tabulator-calcs-holder .tabulator-row {\n        display: inline-block;\n        background: #f3f3f3 !important; }\n        .tabulator .tabulator-footer .tabulator-calcs-holder .tabulator-row .tabulator-col-resize-handle {\n          display: none; }\n      .tabulator .tabulator-footer .tabulator-calcs-holder:only-child {\n        margin-bottom: -5px;\n        border-bottom: none; }\n    .tabulator .tabulator-footer > * + .tabulator-page-counter {\n      margin-left: 10px; }\n    .tabulator .tabulator-footer .tabulator-page-counter {\n      font-weight: normal; }\n    .tabulator .tabulator-footer .tabulator-paginator {\n      flex: 1;\n      text-align: right;\n      color: #555;\n      font-family: inherit;\n      font-weight: inherit;\n      font-size: inherit; }\n    .tabulator .tabulator-footer .tabulator-page-size {\n      display: inline-block;\n      margin: 0 5px;\n      padding: 2px 5px;\n      border: 1px solid #aaa;\n      border-radius: 3px; }\n    .tabulator .tabulator-footer .tabulator-pages {\n      margin: 0 7px; }\n    .tabulator .tabulator-footer .tabulator-page {\n      display: inline-block;\n      margin: 0 2px;\n      padding: 2px 5px;\n      border: 1px solid #aaa;\n      border-radius: 3px;\n      background: rgba(255, 255, 255, 0.2); }\n      .tabulator .tabulator-footer .tabulator-page.active {\n        color: #d00; }\n      .tabulator .tabulator-footer .tabulator-page:disabled {\n        opacity: .5; }\n      @media (hover: hover) and (pointer: fine) {\n        .tabulator .tabulator-footer .tabulator-page:not(.disabled):hover {\n          cursor: pointer;\n          background: rgba(0, 0, 0, 0.2);\n          color: #fff; } }\n  .tabulator .tabulator-col-resize-handle {\n    position: relative;\n    display: inline-block;\n    width: 6px;\n    margin-left: -3px;\n    margin-right: -3px;\n    z-index: 10;\n    vertical-align: middle; }\n    @media (hover: hover) and (pointer: fine) {\n      .tabulator .tabulator-col-resize-handle:hover {\n        cursor: ew-resize; } }\n    .tabulator .tabulator-col-resize-handle:last-of-type {\n      width: 3px;\n      margin-right: 0; }\n  .tabulator .tabulator-alert {\n    position: absolute;\n    display: flex;\n    align-items: center;\n    top: 0;\n    left: 0;\n    z-index: 100;\n    height: 100%;\n    width: 100%;\n    background: rgba(0, 0, 0, 0.4);\n    text-align: center; }\n    .tabulator .tabulator-alert .tabulator-alert-msg {\n      display: inline-block;\n      margin: 0 auto;\n      padding: 10px 20px;\n      border-radius: 10px;\n      background: #fff;\n      font-weight: bold;\n      font-size: 16px; }\n      .tabulator .tabulator-alert .tabulator-alert-msg.tabulator-alert-state-msg {\n        border: 4px solid #333;\n        color: #000; }\n      .tabulator .tabulator-alert .tabulator-alert-msg.tabulator-alert-state-error {\n        border: 4px solid #D00;\n        color: #590000; }\n\n.tabulator-row {\n  position: relative;\n  box-sizing: border-box;\n  min-height: 22px;\n  background-color: #fff; }\n  .tabulator-row.tabulator-row-even {\n    background-color: #EFEFEF; }\n  @media (hover: hover) and (pointer: fine) {\n    .tabulator-row.tabulator-selectable:hover {\n      background-color: #bbb;\n      cursor: pointer; } }\n  .tabulator-row.tabulator-selected {\n    background-color: #9ABCEA; }\n  @media (hover: hover) and (pointer: fine) {\n    .tabulator-row.tabulator-selected:hover {\n      background-color: #769BCC;\n      cursor: pointer; } }\n  .tabulator-row.tabulator-row-moving {\n    border: 1px solid #000;\n    background: #fff; }\n  .tabulator-row.tabulator-moving {\n    position: absolute;\n    border-top: 1px solid #aaa;\n    border-bottom: 1px solid #aaa;\n    pointer-events: none;\n    z-index: 15; }\n  .tabulator-row .tabulator-row-resize-handle {\n    position: absolute;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    height: 5px; }\n    .tabulator-row .tabulator-row-resize-handle.prev {\n      top: 0;\n      bottom: auto; }\n    @media (hover: hover) and (pointer: fine) {\n      .tabulator-row .tabulator-row-resize-handle:hover {\n        cursor: ns-resize; } }\n  .tabulator-row .tabulator-responsive-collapse {\n    box-sizing: border-box;\n    padding: 5px;\n    border-top: 1px solid #aaa;\n    border-bottom: 1px solid #aaa; }\n    .tabulator-row .tabulator-responsive-collapse:empty {\n      display: none; }\n    .tabulator-row .tabulator-responsive-collapse table {\n      font-size: 14px; }\n      .tabulator-row .tabulator-responsive-collapse table tr td {\n        position: relative; }\n        .tabulator-row .tabulator-responsive-collapse table tr td:first-of-type {\n          padding-right: 10px; }\n  .tabulator-row .tabulator-cell {\n    display: inline-block;\n    position: relative;\n    box-sizing: border-box;\n    padding: 4px;\n    border-right: 1px solid #aaa;\n    vertical-align: middle;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis; }\n    .tabulator-row .tabulator-cell.tabulator-frozen {\n      display: inline-block;\n      position: sticky;\n      left: 0;\n      background-color: inherit;\n      z-index: 11; }\n      .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-left {\n        border-right: 2px solid #aaa; }\n      .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-right {\n        border-left: 2px solid #aaa; }\n    .tabulator-row .tabulator-cell.tabulator-editing {\n      border: 1px solid #1D68CD;\n      outline: none;\n      padding: 0; }\n      .tabulator-row .tabulator-cell.tabulator-editing input, .tabulator-row .tabulator-cell.tabulator-editing select {\n        border: 1px;\n        background: transparent;\n        outline: none; }\n    .tabulator-row .tabulator-cell.tabulator-validation-fail {\n      border: 1px solid #dd0000; }\n      .tabulator-row .tabulator-cell.tabulator-validation-fail input, .tabulator-row .tabulator-cell.tabulator-validation-fail select {\n        border: 1px;\n        background: transparent;\n        color: #dd0000; }\n    .tabulator-row .tabulator-cell.tabulator-row-handle {\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      -moz-user-select: none;\n      -khtml-user-select: none;\n      -webkit-user-select: none;\n      -o-user-select: none; }\n      .tabulator-row .tabulator-cell.tabulator-row-handle .tabulator-row-handle-box {\n        width: 80%; }\n        .tabulator-row .tabulator-cell.tabulator-row-handle .tabulator-row-handle-box .tabulator-row-handle-bar {\n          width: 100%;\n          height: 3px;\n          margin-top: 2px;\n          background: #666; }\n    .tabulator-row .tabulator-cell .tabulator-data-tree-branch-empty {\n      display: inline-block;\n      width: 7px; }\n    .tabulator-row .tabulator-cell .tabulator-data-tree-branch {\n      display: inline-block;\n      vertical-align: middle;\n      height: 9px;\n      width: 7px;\n      margin-top: -9px;\n      margin-right: 5px;\n      border-bottom-left-radius: 1px;\n      border-left: 2px solid #aaa;\n      border-bottom: 2px solid #aaa; }\n    .tabulator-row .tabulator-cell .tabulator-data-tree-control {\n      display: inline-flex;\n      justify-content: center;\n      align-items: center;\n      vertical-align: middle;\n      height: 11px;\n      width: 11px;\n      margin-right: 5px;\n      border: 1px solid #333;\n      border-radius: 2px;\n      background: rgba(0, 0, 0, 0.1);\n      overflow: hidden; }\n      @media (hover: hover) and (pointer: fine) {\n        .tabulator-row .tabulator-cell .tabulator-data-tree-control:hover {\n          cursor: pointer;\n          background: rgba(0, 0, 0, 0.2); } }\n      .tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-collapse {\n        display: inline-block;\n        position: relative;\n        height: 7px;\n        width: 1px;\n        background: transparent; }\n        .tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-collapse:after {\n          position: absolute;\n          content: "";\n          left: -3px;\n          top: 3px;\n          height: 1px;\n          width: 7px;\n          background: #333; }\n      .tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-expand {\n        display: inline-block;\n        position: relative;\n        height: 7px;\n        width: 1px;\n        background: #333; }\n        .tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-expand:after {\n          position: absolute;\n          content: "";\n          left: -3px;\n          top: 3px;\n          height: 1px;\n          width: 7px;\n          background: #333; }\n    .tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle {\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      -moz-user-select: none;\n      -khtml-user-select: none;\n      -webkit-user-select: none;\n      -o-user-select: none;\n      height: 15px;\n      width: 15px;\n      border-radius: 20px;\n      background: #666;\n      color: #fff;\n      font-weight: bold;\n      font-size: 1.1em; }\n      @media (hover: hover) and (pointer: fine) {\n        .tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle:hover {\n          opacity: .7;\n          cursor: pointer; } }\n      .tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle.open .tabulator-responsive-collapse-toggle-close {\n        display: initial; }\n      .tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle.open .tabulator-responsive-collapse-toggle-open {\n        display: none; }\n      .tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle svg {\n        stroke: #fff; }\n      .tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle .tabulator-responsive-collapse-toggle-close {\n        display: none; }\n    .tabulator-row .tabulator-cell .tabulator-traffic-light {\n      display: inline-block;\n      height: 14px;\n      width: 14px;\n      border-radius: 14px; }\n  .tabulator-row.tabulator-group {\n    box-sizing: border-box;\n    border-bottom: 1px solid #999;\n    border-right: 1px solid #aaa;\n    border-top: 1px solid #999;\n    padding: 5px;\n    padding-left: 10px;\n    background: #ccc;\n    font-weight: bold;\n    min-width: 100%; }\n    @media (hover: hover) and (pointer: fine) {\n      .tabulator-row.tabulator-group:hover {\n        cursor: pointer;\n        background-color: rgba(0, 0, 0, 0.1); } }\n    .tabulator-row.tabulator-group.tabulator-group-visible .tabulator-arrow {\n      margin-right: 10px;\n      border-left: 6px solid transparent;\n      border-right: 6px solid transparent;\n      border-top: 6px solid #666;\n      border-bottom: 0; }\n    .tabulator-row.tabulator-group.tabulator-group-level-1 {\n      padding-left: 30px; }\n    .tabulator-row.tabulator-group.tabulator-group-level-2 {\n      padding-left: 50px; }\n    .tabulator-row.tabulator-group.tabulator-group-level-3 {\n      padding-left: 70px; }\n    .tabulator-row.tabulator-group.tabulator-group-level-4 {\n      padding-left: 90px; }\n    .tabulator-row.tabulator-group.tabulator-group-level-5 {\n      padding-left: 110px; }\n    .tabulator-row.tabulator-group .tabulator-group-toggle {\n      display: inline-block; }\n    .tabulator-row.tabulator-group .tabulator-arrow {\n      display: inline-block;\n      width: 0;\n      height: 0;\n      margin-right: 16px;\n      border-top: 6px solid transparent;\n      border-bottom: 6px solid transparent;\n      border-right: 0;\n      border-left: 6px solid #666;\n      vertical-align: middle; }\n    .tabulator-row.tabulator-group span {\n      margin-left: 10px;\n      color: #d00; }\n\n.tabulator-popup-container {\n  position: absolute;\n  display: inline-block;\n  box-sizing: border-box;\n  background: #fff;\n  border: 1px solid #aaa;\n  box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.2);\n  font-size: 14px;\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n  z-index: 10000; }\n\n.tabulator-popup {\n  padding: 5px;\n  border-radius: 3px; }\n\n.tabulator-tooltip {\n  max-width: Min(500px, 100%);\n  padding: 3px 5px;\n  border-radius: 2px;\n  box-shadow: none;\n  font-size: 12px;\n  pointer-events: none; }\n\n.tabulator-menu .tabulator-menu-item {\n  position: relative;\n  box-sizing: border-box;\n  padding: 5px 10px;\n  user-select: none; }\n  .tabulator-menu .tabulator-menu-item.tabulator-menu-item-disabled {\n    opacity: .5; }\n  @media (hover: hover) and (pointer: fine) {\n    .tabulator-menu .tabulator-menu-item:not(.tabulator-menu-item-disabled):hover {\n      cursor: pointer;\n      background: #EFEFEF; } }\n  .tabulator-menu .tabulator-menu-item.tabulator-menu-item-submenu {\n    padding-right: 25px; }\n    .tabulator-menu .tabulator-menu-item.tabulator-menu-item-submenu::after {\n      display: inline-block;\n      position: absolute;\n      top: calc(5px + .4em);\n      right: 10px;\n      height: 7px;\n      width: 7px;\n      content: \'\';\n      border-width: 1px 1px 0 0;\n      border-style: solid;\n      border-color: #aaa;\n      vertical-align: top;\n      transform: rotate(45deg); }\n\n.tabulator-menu .tabulator-menu-separator {\n  border-top: 1px solid #aaa; }\n\n.tabulator-edit-list {\n  max-height: 200px;\n  font-size: 14px;\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch; }\n  .tabulator-edit-list .tabulator-edit-list-item {\n    padding: 4px;\n    color: #333;\n    outline: none; }\n    .tabulator-edit-list .tabulator-edit-list-item.active {\n      color: #fff;\n      background: #1D68CD; }\n      .tabulator-edit-list .tabulator-edit-list-item.active.focused {\n        outline: 1px solid rgba(255, 255, 255, 0.5); }\n    .tabulator-edit-list .tabulator-edit-list-item.focused {\n      outline: 1px solid #1D68CD; }\n    @media (hover: hover) and (pointer: fine) {\n      .tabulator-edit-list .tabulator-edit-list-item:hover {\n        cursor: pointer;\n        color: #fff;\n        background: #1D68CD; } }\n  .tabulator-edit-list .tabulator-edit-list-placeholder {\n    padding: 4px;\n    color: #333;\n    text-align: center; }\n  .tabulator-edit-list .tabulator-edit-list-group {\n    border-bottom: 1px solid #aaa;\n    padding: 4px;\n    padding-top: 6px;\n    color: #333;\n    font-weight: bold; }\n  .tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-2, .tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-2 {\n    padding-left: 12px; }\n  .tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-3, .tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-3 {\n    padding-left: 20px; }\n  .tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-4, .tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-4 {\n    padding-left: 28px; }\n  .tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-5, .tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-5 {\n    padding-left: 36px; }\n\n.tabulator.tabulator-ltr {\n  direction: ltr; }\n\n.tabulator.tabulator-rtl {\n  text-align: initial;\n  direction: rtl; }\n  .tabulator.tabulator-rtl .tabulator-header .tabulator-col {\n    text-align: initial;\n    border-left: 1px solid #aaa;\n    border-right: initial; }\n    .tabulator.tabulator-rtl .tabulator-header .tabulator-col.tabulator-col-group .tabulator-col-group-cols {\n      margin-right: initial;\n      margin-left: -1px; }\n    .tabulator.tabulator-rtl .tabulator-header .tabulator-col.tabulator-sortable .tabulator-col-title {\n      padding-right: 0;\n      padding-left: 25px; }\n    .tabulator.tabulator-rtl .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter {\n      left: 8px;\n      right: initial; }\n  .tabulator.tabulator-rtl .tabulator-row .tabulator-cell {\n    border-right: initial;\n    border-left: 1px solid #aaa; }\n    .tabulator.tabulator-rtl .tabulator-row .tabulator-cell .tabulator-data-tree-branch {\n      margin-right: initial;\n      margin-left: 5px;\n      border-bottom-left-radius: initial;\n      border-bottom-right-radius: 1px;\n      border-left: initial;\n      border-right: 2px solid #aaa; }\n    .tabulator.tabulator-rtl .tabulator-row .tabulator-cell .tabulator-data-tree-control {\n      margin-right: initial;\n      margin-left: 5px; }\n    .tabulator.tabulator-rtl .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-left {\n      border-left: 2px solid #aaa; }\n    .tabulator.tabulator-rtl .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-right {\n      border-right: 2px solid #aaa; }\n  .tabulator.tabulator-rtl .tabulator-row .tabulator-col-resize-handle:last-of-type {\n    width: 3px;\n    margin-left: 0;\n    margin-right: -3px; }\n  .tabulator.tabulator-rtl .tabulator-footer .tabulator-calcs-holder {\n    text-align: initial; }\n\n.tabulator-print-fullscreen {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 10000; }\n\nbody.tabulator-print-fullscreen-hide > *:not(.tabulator-print-fullscreen) {\n  display: none !important; }\n\n.tabulator-print-table {\n  border-collapse: collapse; }\n  .tabulator-print-table .tabulator-data-tree-branch {\n    display: inline-block;\n    vertical-align: middle;\n    height: 9px;\n    width: 7px;\n    margin-top: -9px;\n    margin-right: 5px;\n    border-bottom-left-radius: 1px;\n    border-left: 2px solid #aaa;\n    border-bottom: 2px solid #aaa; }\n  .tabulator-print-table .tabulator-print-table-group {\n    box-sizing: border-box;\n    border-bottom: 1px solid #999;\n    border-right: 1px solid #aaa;\n    border-top: 1px solid #999;\n    padding: 5px;\n    padding-left: 10px;\n    background: #ccc;\n    font-weight: bold;\n    min-width: 100%; }\n    @media (hover: hover) and (pointer: fine) {\n      .tabulator-print-table .tabulator-print-table-group:hover {\n        cursor: pointer;\n        background-color: rgba(0, 0, 0, 0.1); } }\n    .tabulator-print-table .tabulator-print-table-group.tabulator-group-visible .tabulator-arrow {\n      margin-right: 10px;\n      border-left: 6px solid transparent;\n      border-right: 6px solid transparent;\n      border-top: 6px solid #666;\n      border-bottom: 0; }\n    .tabulator-print-table .tabulator-print-table-group.tabulator-group-level-1 td {\n      padding-left: 30px !important; }\n    .tabulator-print-table .tabulator-print-table-group.tabulator-group-level-2 td {\n      padding-left: 50px !important; }\n    .tabulator-print-table .tabulator-print-table-group.tabulator-group-level-3 td {\n      padding-left: 70px !important; }\n    .tabulator-print-table .tabulator-print-table-group.tabulator-group-level-4 td {\n      padding-left: 90px !important; }\n    .tabulator-print-table .tabulator-print-table-group.tabulator-group-level-5 td {\n      padding-left: 110px !important; }\n    .tabulator-print-table .tabulator-print-table-group .tabulator-group-toggle {\n      display: inline-block; }\n    .tabulator-print-table .tabulator-print-table-group .tabulator-arrow {\n      display: inline-block;\n      width: 0;\n      height: 0;\n      margin-right: 16px;\n      border-top: 6px solid transparent;\n      border-bottom: 6px solid transparent;\n      border-right: 0;\n      border-left: 6px solid #666;\n      vertical-align: middle; }\n    .tabulator-print-table .tabulator-print-table-group span {\n      margin-left: 10px;\n      color: #d00; }\n  .tabulator-print-table .tabulator-data-tree-control {\n    display: inline-flex;\n    justify-content: center;\n    align-items: center;\n    vertical-align: middle;\n    height: 11px;\n    width: 11px;\n    margin-right: 5px;\n    border: 1px solid #333;\n    border-radius: 2px;\n    background: rgba(0, 0, 0, 0.1);\n    overflow: hidden; }\n    @media (hover: hover) and (pointer: fine) {\n      .tabulator-print-table .tabulator-data-tree-control:hover {\n        cursor: pointer;\n        background: rgba(0, 0, 0, 0.2); } }\n    .tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-collapse {\n      display: inline-block;\n      position: relative;\n      height: 7px;\n      width: 1px;\n      background: transparent; }\n      .tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-collapse:after {\n        position: absolute;\n        content: "";\n        left: -3px;\n        top: 3px;\n        height: 1px;\n        width: 7px;\n        background: #333; }\n    .tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-expand {\n      display: inline-block;\n      position: relative;\n      height: 7px;\n      width: 1px;\n      background: #333; }\n      .tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-expand:after {\n        position: absolute;\n        content: "";\n        left: -3px;\n        top: 3px;\n        height: 1px;\n        width: 7px;\n        background: #333; }\n','.tabulator {\n  position: relative;\n  border: 1px solid #999;\n  background-color: #888;\n  font-size: 14px;\n  text-align: left;\n  overflow: hidden;\n  -webkit-transform: translateZ(0);\n  -moz-transform: translateZ(0);\n  -ms-transform: translateZ(0);\n  -o-transform: translateZ(0);\n  transform: translateZ(0);\n}\n\n.tabulator[tabulator-layout="fitDataFill"] .tabulator-tableholder .tabulator-table {\n  min-width: 100%;\n}\n\n.tabulator[tabulator-layout="fitDataTable"] {\n  display: inline-block;\n}\n\n.tabulator.tabulator-block-select {\n  user-select: none;\n}\n\n.tabulator .tabulator-header {\n  position: relative;\n  box-sizing: border-box;\n  width: 100%;\n  border-bottom: 1px solid #999;\n  background-color: #e6e6e6;\n  color: #555;\n  font-weight: bold;\n  white-space: nowrap;\n  overflow: hidden;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n}\n\n.tabulator .tabulator-header.tabulator-header-hidden {\n  display: none;\n}\n\n.tabulator .tabulator-header .tabulator-header-contents {\n  position: relative;\n  overflow: hidden;\n}\n\n.tabulator .tabulator-header .tabulator-header-contents .tabulator-headers {\n  display: inline-block;\n}\n\n.tabulator .tabulator-header .tabulator-col {\n  display: inline-flex;\n  position: relative;\n  box-sizing: border-box;\n  flex-direction: column;\n  justify-content: flex-start;\n  border-right: 1px solid #aaa;\n  background: #e6e6e6;\n  text-align: left;\n  vertical-align: bottom;\n  overflow: hidden;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-moving {\n  position: absolute;\n  border: 1px solid #999;\n  background: #cdcdcd;\n  pointer-events: none;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content {\n  box-sizing: border-box;\n  position: relative;\n  padding: 4px;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-header-popup-button {\n  padding: 0 8px;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-header-popup-button:hover {\n  cursor: pointer;\n  opacity: .6;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title-holder {\n  position: relative;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title {\n  box-sizing: border-box;\n  width: 100%;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  vertical-align: bottom;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title.tabulator-col-title-wrap {\n  white-space: normal;\n  text-overflow: initial;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title .tabulator-title-editor {\n  box-sizing: border-box;\n  width: 100%;\n  border: 1px solid #999;\n  padding: 1px;\n  background: #fff;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title .tabulator-header-popup-button + .tabulator-title-editor {\n  width: calc(100% - 22px);\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter {\n  display: flex;\n  align-items: center;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  right: 4px;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n  width: 0;\n  height: 0;\n  border-left: 6px solid transparent;\n  border-right: 6px solid transparent;\n  border-bottom: 6px solid #bbb;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-group .tabulator-col-group-cols {\n  position: relative;\n  display: flex;\n  border-top: 1px solid #aaa;\n  overflow: hidden;\n  margin-right: -1px;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter {\n  position: relative;\n  box-sizing: border-box;\n  margin-top: 2px;\n  width: 100%;\n  text-align: center;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter textarea {\n  height: auto !important;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter svg {\n  margin-top: 3px;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter input::-ms-clear {\n  width: 0;\n  height: 0;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable .tabulator-col-title {\n  padding-right: 25px;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-header .tabulator-col.tabulator-sortable.tabulator-col-sorter-element:hover {\n    cursor: pointer;\n    background-color: #cdcdcd;\n  }\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="none"] .tabulator-col-content .tabulator-col-sorter {\n  color: #bbb;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="none"] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover {\n    cursor: pointer;\n    border-bottom: 6px solid #555;\n  }\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="none"] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n  border-top: none;\n  border-bottom: 6px solid #bbb;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="ascending"] .tabulator-col-content .tabulator-col-sorter {\n  color: #666;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="ascending"] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover {\n    cursor: pointer;\n    border-bottom: 6px solid #555;\n  }\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="ascending"] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n  border-top: none;\n  border-bottom: 6px solid #666;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="descending"] .tabulator-col-content .tabulator-col-sorter {\n  color: #666;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="descending"] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover {\n    cursor: pointer;\n    border-top: 6px solid #555;\n  }\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="descending"] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n  border-bottom: none;\n  border-top: 6px solid #666;\n  color: #666;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical .tabulator-col-content .tabulator-col-title {\n  writing-mode: vertical-rl;\n  text-orientation: mixed;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-col-vertical-flip .tabulator-col-title {\n  transform: rotate(180deg);\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable .tabulator-col-title {\n  padding-right: 0;\n  padding-top: 20px;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable.tabulator-col-vertical-flip .tabulator-col-title {\n  padding-right: 0;\n  padding-bottom: 20px;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable .tabulator-col-sorter {\n  justify-content: center;\n  left: 0;\n  right: 0;\n  top: 4px;\n  bottom: auto;\n}\n\n.tabulator .tabulator-header .tabulator-frozen {\n  position: sticky;\n  left: 0;\n  z-index: 11;\n}\n\n.tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-left {\n  border-right: 2px solid #aaa;\n}\n\n.tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-right {\n  border-left: 2px solid #aaa;\n}\n\n.tabulator .tabulator-header .tabulator-calcs-holder {\n  box-sizing: border-box;\n  background: #f3f3f3 !important;\n  border-top: 1px solid #aaa;\n  border-bottom: 1px solid #aaa;\n}\n\n.tabulator .tabulator-header .tabulator-calcs-holder .tabulator-row {\n  background: #f3f3f3 !important;\n}\n\n.tabulator .tabulator-header .tabulator-calcs-holder .tabulator-row .tabulator-col-resize-handle {\n  display: none;\n}\n\n.tabulator .tabulator-header .tabulator-frozen-rows-holder:empty {\n  display: none;\n}\n\n.tabulator .tabulator-tableholder {\n  position: relative;\n  width: 100%;\n  white-space: nowrap;\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n}\n\n.tabulator .tabulator-tableholder:focus {\n  outline: none;\n}\n\n.tabulator .tabulator-tableholder .tabulator-placeholder {\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n}\n\n.tabulator .tabulator-tableholder .tabulator-placeholder[tabulator-render-mode="virtual"] {\n  min-height: 100%;\n  min-width: 100%;\n}\n\n.tabulator .tabulator-tableholder .tabulator-placeholder .tabulator-placeholder-contents {\n  display: inline-block;\n  text-align: center;\n  padding: 10px;\n  color: #ccc;\n  font-weight: bold;\n  font-size: 20px;\n  white-space: normal;\n}\n\n.tabulator .tabulator-tableholder .tabulator-table {\n  position: relative;\n  display: inline-block;\n  background-color: #fff;\n  white-space: nowrap;\n  overflow: visible;\n  color: #333;\n}\n\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs {\n  font-weight: bold;\n  background: #e2e2e2 !important;\n}\n\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs.tabulator-calcs-top {\n  border-bottom: 2px solid #aaa;\n}\n\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs.tabulator-calcs-bottom {\n  border-top: 2px solid #aaa;\n}\n\n.tabulator .tabulator-footer {\n  border-top: 1px solid #999;\n  background-color: #e6e6e6;\n  color: #555;\n  font-weight: bold;\n  white-space: nowrap;\n  user-select: none;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n}\n\n.tabulator .tabulator-footer .tabulator-footer-contents {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  padding: 5px 10px;\n}\n\n.tabulator .tabulator-footer .tabulator-footer-contents:empty {\n  display: none;\n}\n\n.tabulator .tabulator-footer .tabulator-calcs-holder {\n  box-sizing: border-box;\n  width: 100%;\n  text-align: left;\n  background: #f3f3f3 !important;\n  border-bottom: 1px solid #aaa;\n  border-top: 1px solid #aaa;\n  overflow: hidden;\n}\n\n.tabulator .tabulator-footer .tabulator-calcs-holder .tabulator-row {\n  display: inline-block;\n  background: #f3f3f3 !important;\n}\n\n.tabulator .tabulator-footer .tabulator-calcs-holder .tabulator-row .tabulator-col-resize-handle {\n  display: none;\n}\n\n.tabulator .tabulator-footer .tabulator-calcs-holder:only-child {\n  margin-bottom: -5px;\n  border-bottom: none;\n}\n\n.tabulator .tabulator-footer > * + .tabulator-page-counter {\n  margin-left: 10px;\n}\n\n.tabulator .tabulator-footer .tabulator-page-counter {\n  font-weight: normal;\n}\n\n.tabulator .tabulator-footer .tabulator-paginator {\n  flex: 1;\n  text-align: right;\n  color: #555;\n  font-family: inherit;\n  font-weight: inherit;\n  font-size: inherit;\n}\n\n.tabulator .tabulator-footer .tabulator-page-size {\n  display: inline-block;\n  margin: 0 5px;\n  padding: 2px 5px;\n  border: 1px solid #aaa;\n  border-radius: 3px;\n}\n\n.tabulator .tabulator-footer .tabulator-pages {\n  margin: 0 7px;\n}\n\n.tabulator .tabulator-footer .tabulator-page {\n  display: inline-block;\n  margin: 0 2px;\n  padding: 2px 5px;\n  border: 1px solid #aaa;\n  border-radius: 3px;\n  background: rgba(255, 255, 255, 0.2);\n}\n\n.tabulator .tabulator-footer .tabulator-page.active {\n  color: #d00;\n}\n\n.tabulator .tabulator-footer .tabulator-page:disabled {\n  opacity: .5;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-footer .tabulator-page:not(.disabled):hover {\n    cursor: pointer;\n    background: rgba(0, 0, 0, 0.2);\n    color: #fff;\n  }\n}\n\n.tabulator .tabulator-col-resize-handle {\n  position: relative;\n  display: inline-block;\n  width: 6px;\n  margin-left: -3px;\n  margin-right: -3px;\n  z-index: 10;\n  vertical-align: middle;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-col-resize-handle:hover {\n    cursor: ew-resize;\n  }\n}\n\n.tabulator .tabulator-col-resize-handle:last-of-type {\n  width: 3px;\n  margin-right: 0;\n}\n\n.tabulator .tabulator-alert {\n  position: absolute;\n  display: flex;\n  align-items: center;\n  top: 0;\n  left: 0;\n  z-index: 100;\n  height: 100%;\n  width: 100%;\n  background: rgba(0, 0, 0, 0.4);\n  text-align: center;\n}\n\n.tabulator .tabulator-alert .tabulator-alert-msg {\n  display: inline-block;\n  margin: 0 auto;\n  padding: 10px 20px;\n  border-radius: 10px;\n  background: #fff;\n  font-weight: bold;\n  font-size: 16px;\n}\n\n.tabulator .tabulator-alert .tabulator-alert-msg.tabulator-alert-state-msg {\n  border: 4px solid #333;\n  color: #000;\n}\n\n.tabulator .tabulator-alert .tabulator-alert-msg.tabulator-alert-state-error {\n  border: 4px solid #D00;\n  color: #590000;\n}\n\n.tabulator-row {\n  position: relative;\n  box-sizing: border-box;\n  min-height: 22px;\n  background-color: #fff;\n}\n\n.tabulator-row.tabulator-row-even {\n  background-color: #EFEFEF;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row.tabulator-selectable:hover {\n    background-color: #bbb;\n    cursor: pointer;\n  }\n}\n\n.tabulator-row.tabulator-selected {\n  background-color: #9ABCEA;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row.tabulator-selected:hover {\n    background-color: #769BCC;\n    cursor: pointer;\n  }\n}\n\n.tabulator-row.tabulator-row-moving {\n  border: 1px solid #000;\n  background: #fff;\n}\n\n.tabulator-row.tabulator-moving {\n  position: absolute;\n  border-top: 1px solid #aaa;\n  border-bottom: 1px solid #aaa;\n  pointer-events: none;\n  z-index: 15;\n}\n\n.tabulator-row .tabulator-row-resize-handle {\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  height: 5px;\n}\n\n.tabulator-row .tabulator-row-resize-handle.prev {\n  top: 0;\n  bottom: auto;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row .tabulator-row-resize-handle:hover {\n    cursor: ns-resize;\n  }\n}\n\n.tabulator-row .tabulator-responsive-collapse {\n  box-sizing: border-box;\n  padding: 5px;\n  border-top: 1px solid #aaa;\n  border-bottom: 1px solid #aaa;\n}\n\n.tabulator-row .tabulator-responsive-collapse:empty {\n  display: none;\n}\n\n.tabulator-row .tabulator-responsive-collapse table {\n  font-size: 14px;\n}\n\n.tabulator-row .tabulator-responsive-collapse table tr td {\n  position: relative;\n}\n\n.tabulator-row .tabulator-responsive-collapse table tr td:first-of-type {\n  padding-right: 10px;\n}\n\n.tabulator-row .tabulator-cell {\n  display: inline-block;\n  position: relative;\n  box-sizing: border-box;\n  padding: 4px;\n  border-right: 1px solid #aaa;\n  vertical-align: middle;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.tabulator-row .tabulator-cell.tabulator-frozen {\n  display: inline-block;\n  position: sticky;\n  left: 0;\n  background-color: inherit;\n  z-index: 11;\n}\n\n.tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-left {\n  border-right: 2px solid #aaa;\n}\n\n.tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-right {\n  border-left: 2px solid #aaa;\n}\n\n.tabulator-row .tabulator-cell.tabulator-editing {\n  border: 1px solid #1D68CD;\n  outline: none;\n  padding: 0;\n}\n\n.tabulator-row .tabulator-cell.tabulator-editing input,\n.tabulator-row .tabulator-cell.tabulator-editing select {\n  border: 1px;\n  background: transparent;\n  outline: none;\n}\n\n.tabulator-row .tabulator-cell.tabulator-validation-fail {\n  border: 1px solid #dd0000;\n}\n\n.tabulator-row .tabulator-cell.tabulator-validation-fail input,\n.tabulator-row .tabulator-cell.tabulator-validation-fail select {\n  border: 1px;\n  background: transparent;\n  color: #dd0000;\n}\n\n.tabulator-row .tabulator-cell.tabulator-row-handle {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n}\n\n.tabulator-row .tabulator-cell.tabulator-row-handle .tabulator-row-handle-box {\n  width: 80%;\n}\n\n.tabulator-row .tabulator-cell.tabulator-row-handle .tabulator-row-handle-box .tabulator-row-handle-bar {\n  width: 100%;\n  height: 3px;\n  margin-top: 2px;\n  background: #666;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-branch-empty {\n  display: inline-block;\n  width: 7px;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-branch {\n  display: inline-block;\n  vertical-align: middle;\n  height: 9px;\n  width: 7px;\n  margin-top: -9px;\n  margin-right: 5px;\n  border-bottom-left-radius: 1px;\n  border-left: 2px solid #aaa;\n  border-bottom: 2px solid #aaa;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-control {\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  vertical-align: middle;\n  height: 11px;\n  width: 11px;\n  margin-right: 5px;\n  border: 1px solid #333;\n  border-radius: 2px;\n  background: rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row .tabulator-cell .tabulator-data-tree-control:hover {\n    cursor: pointer;\n    background: rgba(0, 0, 0, 0.2);\n  }\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-collapse {\n  display: inline-block;\n  position: relative;\n  height: 7px;\n  width: 1px;\n  background: transparent;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-collapse:after {\n  position: absolute;\n  content: "";\n  left: -3px;\n  top: 3px;\n  height: 1px;\n  width: 7px;\n  background: #333;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-expand {\n  display: inline-block;\n  position: relative;\n  height: 7px;\n  width: 1px;\n  background: #333;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-expand:after {\n  position: absolute;\n  content: "";\n  left: -3px;\n  top: 3px;\n  height: 1px;\n  width: 7px;\n  background: #333;\n}\n\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n  height: 15px;\n  width: 15px;\n  border-radius: 20px;\n  background: #666;\n  color: #fff;\n  font-weight: bold;\n  font-size: 1.1em;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle:hover {\n    opacity: .7;\n    cursor: pointer;\n  }\n}\n\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle.open .tabulator-responsive-collapse-toggle-close {\n  display: initial;\n}\n\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle.open .tabulator-responsive-collapse-toggle-open {\n  display: none;\n}\n\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle svg {\n  stroke: #fff;\n}\n\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle .tabulator-responsive-collapse-toggle-close {\n  display: none;\n}\n\n.tabulator-row .tabulator-cell .tabulator-traffic-light {\n  display: inline-block;\n  height: 14px;\n  width: 14px;\n  border-radius: 14px;\n}\n\n.tabulator-row.tabulator-group {\n  box-sizing: border-box;\n  border-bottom: 1px solid #999;\n  border-right: 1px solid #aaa;\n  border-top: 1px solid #999;\n  padding: 5px;\n  padding-left: 10px;\n  background: #ccc;\n  font-weight: bold;\n  min-width: 100%;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row.tabulator-group:hover {\n    cursor: pointer;\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n}\n\n.tabulator-row.tabulator-group.tabulator-group-visible .tabulator-arrow {\n  margin-right: 10px;\n  border-left: 6px solid transparent;\n  border-right: 6px solid transparent;\n  border-top: 6px solid #666;\n  border-bottom: 0;\n}\n\n.tabulator-row.tabulator-group.tabulator-group-level-1 {\n  padding-left: 30px;\n}\n\n.tabulator-row.tabulator-group.tabulator-group-level-2 {\n  padding-left: 50px;\n}\n\n.tabulator-row.tabulator-group.tabulator-group-level-3 {\n  padding-left: 70px;\n}\n\n.tabulator-row.tabulator-group.tabulator-group-level-4 {\n  padding-left: 90px;\n}\n\n.tabulator-row.tabulator-group.tabulator-group-level-5 {\n  padding-left: 110px;\n}\n\n.tabulator-row.tabulator-group .tabulator-group-toggle {\n  display: inline-block;\n}\n\n.tabulator-row.tabulator-group .tabulator-arrow {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-right: 16px;\n  border-top: 6px solid transparent;\n  border-bottom: 6px solid transparent;\n  border-right: 0;\n  border-left: 6px solid #666;\n  vertical-align: middle;\n}\n\n.tabulator-row.tabulator-group span {\n  margin-left: 10px;\n  color: #d00;\n}\n\n.tabulator-popup-container {\n  position: absolute;\n  display: inline-block;\n  box-sizing: border-box;\n  background: #fff;\n  border: 1px solid #aaa;\n  box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.2);\n  font-size: 14px;\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n  z-index: 10000;\n}\n\n.tabulator-popup {\n  padding: 5px;\n  border-radius: 3px;\n}\n\n.tabulator-tooltip {\n  max-width: Min(500px, 100%);\n  padding: 3px 5px;\n  border-radius: 2px;\n  box-shadow: none;\n  font-size: 12px;\n  pointer-events: none;\n}\n\n.tabulator-menu .tabulator-menu-item {\n  position: relative;\n  box-sizing: border-box;\n  padding: 5px 10px;\n  user-select: none;\n}\n\n.tabulator-menu .tabulator-menu-item.tabulator-menu-item-disabled {\n  opacity: .5;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-menu .tabulator-menu-item:not(.tabulator-menu-item-disabled):hover {\n    cursor: pointer;\n    background: #EFEFEF;\n  }\n}\n\n.tabulator-menu .tabulator-menu-item.tabulator-menu-item-submenu {\n  padding-right: 25px;\n}\n\n.tabulator-menu .tabulator-menu-item.tabulator-menu-item-submenu::after {\n  display: inline-block;\n  position: absolute;\n  top: calc(5px + .4em);\n  right: 10px;\n  height: 7px;\n  width: 7px;\n  content: \'\';\n  border-width: 1px 1px 0 0;\n  border-style: solid;\n  border-color: #aaa;\n  vertical-align: top;\n  transform: rotate(45deg);\n}\n\n.tabulator-menu .tabulator-menu-separator {\n  border-top: 1px solid #aaa;\n}\n\n.tabulator-edit-list {\n  max-height: 200px;\n  font-size: 14px;\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item {\n  padding: 4px;\n  color: #333;\n  outline: none;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.active {\n  color: #fff;\n  background: #1D68CD;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.active.focused {\n  outline: 1px solid rgba(255, 255, 255, 0.5);\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.focused {\n  outline: 1px solid #1D68CD;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-edit-list .tabulator-edit-list-item:hover {\n    cursor: pointer;\n    color: #fff;\n    background: #1D68CD;\n  }\n}\n\n.tabulator-edit-list .tabulator-edit-list-placeholder {\n  padding: 4px;\n  color: #333;\n  text-align: center;\n}\n\n.tabulator-edit-list .tabulator-edit-list-group {\n  border-bottom: 1px solid #aaa;\n  padding: 4px;\n  padding-top: 6px;\n  color: #333;\n  font-weight: bold;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-2,\n.tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-2 {\n  padding-left: 12px;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-3,\n.tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-3 {\n  padding-left: 20px;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-4,\n.tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-4 {\n  padding-left: 28px;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-5,\n.tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-5 {\n  padding-left: 36px;\n}\n\n.tabulator.tabulator-ltr {\n  direction: ltr;\n}\n\n.tabulator.tabulator-rtl {\n  text-align: initial;\n  direction: rtl;\n}\n\n.tabulator.tabulator-rtl .tabulator-header .tabulator-col {\n  text-align: initial;\n  border-left: 1px solid #aaa;\n  border-right: initial;\n}\n\n.tabulator.tabulator-rtl .tabulator-header .tabulator-col.tabulator-col-group .tabulator-col-group-cols {\n  margin-right: initial;\n  margin-left: -1px;\n}\n\n.tabulator.tabulator-rtl .tabulator-header .tabulator-col.tabulator-sortable .tabulator-col-title {\n  padding-right: 0;\n  padding-left: 25px;\n}\n\n.tabulator.tabulator-rtl .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter {\n  left: 8px;\n  right: initial;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell {\n  border-right: initial;\n  border-left: 1px solid #aaa;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell .tabulator-data-tree-branch {\n  margin-right: initial;\n  margin-left: 5px;\n  border-bottom-left-radius: initial;\n  border-bottom-right-radius: 1px;\n  border-left: initial;\n  border-right: 2px solid #aaa;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell .tabulator-data-tree-control {\n  margin-right: initial;\n  margin-left: 5px;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-left {\n  border-left: 2px solid #aaa;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-right {\n  border-right: 2px solid #aaa;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-col-resize-handle:last-of-type {\n  width: 3px;\n  margin-left: 0;\n  margin-right: -3px;\n}\n\n.tabulator.tabulator-rtl .tabulator-footer .tabulator-calcs-holder {\n  text-align: initial;\n}\n\n.tabulator-print-fullscreen {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 10000;\n}\n\nbody.tabulator-print-fullscreen-hide > *:not(.tabulator-print-fullscreen) {\n  display: none !important;\n}\n\n.tabulator-print-table {\n  border-collapse: collapse;\n}\n\n.tabulator-print-table .tabulator-data-tree-branch {\n  display: inline-block;\n  vertical-align: middle;\n  height: 9px;\n  width: 7px;\n  margin-top: -9px;\n  margin-right: 5px;\n  border-bottom-left-radius: 1px;\n  border-left: 2px solid #aaa;\n  border-bottom: 2px solid #aaa;\n}\n\n.tabulator-print-table .tabulator-print-table-group {\n  box-sizing: border-box;\n  border-bottom: 1px solid #999;\n  border-right: 1px solid #aaa;\n  border-top: 1px solid #999;\n  padding: 5px;\n  padding-left: 10px;\n  background: #ccc;\n  font-weight: bold;\n  min-width: 100%;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-print-table .tabulator-print-table-group:hover {\n    cursor: pointer;\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-visible .tabulator-arrow {\n  margin-right: 10px;\n  border-left: 6px solid transparent;\n  border-right: 6px solid transparent;\n  border-top: 6px solid #666;\n  border-bottom: 0;\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-1 td {\n  padding-left: 30px !important;\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-2 td {\n  padding-left: 50px !important;\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-3 td {\n  padding-left: 70px !important;\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-4 td {\n  padding-left: 90px !important;\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-5 td {\n  padding-left: 110px !important;\n}\n\n.tabulator-print-table .tabulator-print-table-group .tabulator-group-toggle {\n  display: inline-block;\n}\n\n.tabulator-print-table .tabulator-print-table-group .tabulator-arrow {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-right: 16px;\n  border-top: 6px solid transparent;\n  border-bottom: 6px solid transparent;\n  border-right: 0;\n  border-left: 6px solid #666;\n  vertical-align: middle;\n}\n\n.tabulator-print-table .tabulator-print-table-group span {\n  margin-left: 10px;\n  color: #d00;\n}\n\n.tabulator-print-table .tabulator-data-tree-control {\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  vertical-align: middle;\n  height: 11px;\n  width: 11px;\n  margin-right: 5px;\n  border: 1px solid #333;\n  border-radius: 2px;\n  background: rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-print-table .tabulator-data-tree-control:hover {\n    cursor: pointer;\n    background: rgba(0, 0, 0, 0.2);\n  }\n}\n\n.tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-collapse {\n  display: inline-block;\n  position: relative;\n  height: 7px;\n  width: 1px;\n  background: transparent;\n}\n\n.tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-collapse:after {\n  position: absolute;\n  content: "";\n  left: -3px;\n  top: 3px;\n  height: 1px;\n  width: 7px;\n  background: #333;\n}\n\n.tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-expand {\n  display: inline-block;\n  position: relative;\n  height: 7px;\n  width: 1px;\n  background: #333;\n}\n\n.tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-expand:after {\n  position: absolute;\n  content: "";\n  left: -3px;\n  top: 3px;\n  height: 1px;\n  width: 7px;\n  background: #333;\n}\n\n/*# sourceMappingURL=tabulator.css.map */'],sourceRoot:""}]);const l=a},426:(t,e,i)=>{"use strict";i.d(e,{Z:()=>u});var n=i(537),o=i.n(n),r=i(645),a=i.n(r),l=i(257),s=a()(o());s.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Epilogue:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Inter:wght@100;200;300;400;500;600;700;800;900&family=Orbitron:wght@400;500;600;700;800;900&family=Sintony:wght@400;700&display=swap);"]),s.i(l.Z),s.push([t.id,"* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n:root {\n    --gigantic-text: 4.768rem;\n    --jumbo-text: 3.815rem;\n    --h1-text: 3.052rem;\n    --h2-text: 2.441rem;\n    --h3-text: 1.953rem;\n    --h4-text: 1.563rem;\n    --h5-text: 1.25rem;\n    --small-text: 0.72rem;\n    --smaller-text: 0.64rem;\n    --smallest-text: 0.512rem;\n    --main-color: #c10828;\n    --text-color: #0d0607;\n    --dark-color: #2b2b2b;\n    --third-color: #b9e937;\n    --red-color: #b90000;\n}\n\nhtml {\n    font-size: 100%;\n    scroll-behavior: smooth;\n}\n\nbody {\n    font-family: 'Sintony', sans-serif;\n    font-weight: 400;\n    color: white;\n    background-color: var(--dark-color);\n}\n\na {\n    cursor: pointer;\n}\n\nbutton {\n    cursor: pointer;\n}\n\np {margin-bottom: 1rem;}\n\nh1, h2, h3, h4, h5 {\n  margin: 3rem 0 1.38rem;\n  font-weight: 700;\n  line-height: 1;\n}\n\nh1 {\n  margin-top: 0;\n  font-size: var(--h1-text);\n  font-weight: 700;\n  text-transform: uppercase;\n}\n\nh2 {font-size: var(--h2-text);}\n\nh3 {font-size: var(--h3-text);}\n\nh4 {font-size: var(--h4-text);}\n\nh5 {font-size: var(--h5-text);}\n\n.material-symbols-outlined {\n  font-variation-settings:\n  'FILL' 0,\n  'wght' 400,\n  'GRAD' 0,\n  'opsz' 24\n}\n\nul {list-style-type: none;}\n\na {\n    text-decoration: none;\n    color: inherit;\n}\n\n.header {\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n    align-items: center;\n    background: rgb(13,6,7);\n    background: linear-gradient(180deg, rgba(13,6,7,1) 0%, rgba(193,8,40,1) 100%);\n}\n\n.header__logo {\n    height: auto;\n    width: 100px;\n}\n\n.divider {\n    position: relative;\n    margin-top: 10px;\n    width: 150px;\n    border-top: 1px solid white;\n}\n\n.header__title {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 150px;\n    width: 100%;\n    gap: 15px;\n    background-color: #00205b;\n}\n\n.header__title__text {\n    text-transform: uppercase;\n    font-weight: 900;\n    font-size: var(--h1-text);\n    font-family: 'Inter', sans-serif;\n    text-align: center;\n    width: 250px;\n}\n\n.header__badge {\n    width: -webkit-fill-available;\n    background: rgb(0,32,91);\n    background: linear-gradient(180deg, rgba(0,32,91,1) 0%, rgba(0,0,0,1) 100%);\n}\n\n.header__stats-section {\n    width: -webkit-fill-available;\n    margin: 15px 25px 40px 25px;\n}\n\n.header__stats-section__list__item__logo {\n    width: 50px;\n    height: auto;\n}\n\n\n.header__stats-section__top-section {\n    display: flex;\n    justify-content: space-around;\n    margin-bottom: 25px;\n    margin-top: 25px;\n}\n\n.section-title > span {\n    font-size: var(--h4-text);\n    font-family: 'Sintony', sans-serif;\n    font-weight: 700;\n}\n\n.header__stats-section-top {\n    padding-top: 10px;\n}\n\n.header__stats-section__top {\n    color: white;\n    text-transform: uppercase;\n    font-weight: 700;\n    font-size: var(--smaller-text);\n}\n\n.stats-results {\n    color: white;\n    text-align: center;\n    font-size: var(--h1-text);\n    font-weight: 700;\n}\n\n.participation {\n    display: flex;\n    gap: 15px;\n    padding: 10px;\n}\n\n.team-logo {\n    width: 40px;\n    height: auto;\n}\n\n.tabulator {\n    border-color: #c5c5c5;\n\n}\n\n.header__stats-section-middle {\n    padding-bottom: 5px;\n    padding-top: 15px;\n}\n\n.header__stats-sectio-bottom-section {\n    margin-top: 25px;\n}\n\n.header__stats-sectio-bottom-section .divider {\n    width: 200px;\n}\n\n#stats-table {\n    margin-bottom: 35px;\n    margin-top: 35px;\n}\n\n#stats-table .tabulator-cell[tabulator-field=\"equipe\"] {\n    font-size: var(--small-text);\n}\n\n.tabulator .tabulator-header,\n.tabulator .tabulator-header .tabulator-col {\n    border-color: #c5c5c5;\n    color: #dfdfdf;\n    background-color: #0a0a0a;\n    font-weight: 600;\n}\n\n.tabulator .tabulator-header .tabulator-col {\n    height: 40px;\n    justify-content: center;\n}\n\n#stats-table .tabulator-cell {\n    gap: 15px;\n    padding: 0;\n    color:#fff;\n    font-weight: 500;\n}\n\n#stats-table .tabulator-cell > div {\n    text-transform: uppercase;\n}\n\n#stats-table .tabulator-cell > img {\n    width: auto;\n    height: 100%;\n    padding-left: 5px;\n    padding-right: 5px;\n}\n\n.tabulator-cell > img {\n    width: auto;\n    height: 100%;\n}\n\n/*Theme the Tabulator element*/\n#pick-table {\n    border: 1px solid #c5c5c5;\n}\n\n/*Theme the header*/\n.tabulator-header {\n    background-color:#1d191a;\n    color:#fff;\n}\n\n/*Allow column header names to wrap lines*/\n#pick-table .tabulator-header .tabulator-col,\n#pick-table .tabulator-header .tabulator-col-row-handle {\n    white-space: normal;\n}\n\n/*Color the table rows base on player name*/\n#pick-table .tabulator-table .tabulator-row.a-player {\n    background-color: #ffffff;\n}\n\n#pick-table .tabulator-table .tabulator-row.another-player {\n    background-color: #dbdbdb;\n}\n\n#pick-table .tabulator-cell[tabulator-field=\"joueur\"] {\n    font-size: var(--small-text);\n}\n\n/* Color the border cells */\n.tabulator-row .tabulator-cell {\n    border-bottom: 1px solid #c5c5c5;\n}\n\n#stats-table .tabulator-row .tabulator-cell:last-of-type,\n#stats-table .tabulator-header .tabulator-col:last-of-type {\n    border-right: none;\n}\n\n#stats-table .tabulator-row:last-of-type .tabulator-cell {\n    border-bottom: none;\n}\n\n.tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-right,\n.tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-right {\n    border-left: 1px;\n}\n\n.grayscale-effect {\n    filter: grayscale(100%);\n  }\n/* NHL TEAMS COLOR */\n#stats-table .anaheim-ducks {\n    background-color: #55472d;\n}\n\n.anaheim-ducks img, .anaheim-ducks {\n    background-color: #b6985a;\n}\n\n#stats-table .arizona-coyotes {\n    background-color: #390b18;\n}\n\n.arizona-coyote img, .arizona-coyotes {\n    background-color: #7a0022;\n}\n\n#stats-table .boston-bruins {\n    background-color: #b48518;\n}\n\n.boston-bruins img, .boston-bruins {\n    background-color: #fdb91e;\n}\n\n#stats-table .buffalo-sabres {\n    background-color: #0a1c40;\n}\n\n.buffalo-sabres img, .buffalo-sabres {\n    background-color: #023089;\n}\n\n#stats-table .calgary-flames {\n    background-color: #68111e;\n}\n\n.calgary-flames img, .calgary-flames {\n    background-color: #e30a2b;\n}\n\n#stats-table .carolina-hurricanes {\n    background-color: #8c2626;\n}\n\n.carolina-hurricanes img, .carolina-hurricanes {\n    background-color: #c8102e;\n}\n\n#stats-table .chicago-blackhawks {\n    background-color: #670e1c;\n}\n\n.chicago-blackhawks img, .chicago-blackhawks {\n    background-color: #e30829;\n}\n\n#stats-table .colorado-avalanche {\n    background-color: #2f1214;\n}\n\n.colorado-avalanche img, .colorado-avalanche {\n    background-color: #6f263d;\n}\n\n#stats-table .columbus-blue-jackets {\n    background-color: #091c32;\n}\n\n.columbus-blue-jackets img, .columbus-blue-jackets {\n    background-color: #032d65;\n}\n\n#stats-table .dallas-stars {\n    background-color: #174233;\n}\n\n.dallas-stars img, .dallas-stars {\n    background-color: #00704a;\n}\n\n#stats-table .detroit-red-wings {\n    background-color: #640c18;\n}\n\n.detroit-red-wings img, .detroit-red-wings {\n    background-color: #e30524;\n}\n\n#stats-table .edmonton-oilers {\n    background-color: #001131;\n}\n\n.edmonton-oilers img, .edmonton-oilers {\n    background-color: #00205b;\n}\n\n#stats-table .florida-panthers {\n    background-color: #920b21;\n}\n\n.florida-panthers img, .florida-panthers {\n    background-color: #c8102e;\n}\n\n#stats-table .seattle-kraken {\n    background-color: #0a101e;\n}\n\n.seattle-kraken img, .seattle-kraken {\n    background-color: #000f32;\n}\n\n#stats-table .los-angeles-kings {\n    background-color: #5b5b5d;\n}\n\n.los-angeles-kings img, .los-angeles-kings {\n    background-color: #b1b6ba;\n}\n\n#stats-table .minnesota-wild {\n    background-color: #002217;\n}\n\n.minnesota-wild img, .minnesota-wild {\n    background-color: #025736;\n}\n\n#stats-table .montreal-canadiens {\n    background-color: #570d1a;\n}\n\n.montreal-canadiens img, .montreal-canadiens {\n    background-color: #c20828;\n}\n\n#stats-table .nashville-predators {\n    background-color: #71541a;\n}\n\n.nashville-predators img, .nashville-predators {\n    background-color: #fdb623;\n}\n\n#stats-table .new-jersey-devils {\n    background-color: #640c18;\n}\n\n.new-jersey-devils img, .new-jersey-devils {\n    background-color: #e10623;\n}\n\n#stats-table .new-york-islanders {\n    background-color: #0b2643;\n}\n\n.new-york-islanders img, .new-york-islanders {\n    background-color: #00478c;\n}\n\n#stats-table .new-york-rangers {\n    background-color: #183859;\n}\n\n.new-york-rangers img, .new-york-rangers {\n    background-color: #0056a8;\n}\n\n#stats-table .ottawa-senators {\n    background-color: #650c19;\n}\n\n.ottawa-senators img, .ottawa-senators {\n    background-color: #e30526;\n}\n\n#stats-table .philadelphia-flyers {\n    background-color: #6f290b;\n}\n\n.philadelphia-flyers img, .philadelphia-flyers {\n    background-color: #fc4c02;\n}\n\n#stats-table .pittsburgh-penguins {\n    background-color: #1b1b1c;\n}\n\n.pittsburgh-penguins img, .pittsburgh-penguins {\n    background-color: #0e0e0f;\n}\n\n#stats-table .san-jose-sharks {\n    background-color: #0a363d;\n}\n\n.san-jose-sharks img, .san-jose-sharks {\n    background-color: #006d80;\n}\n\n#stats-table .st-louis-blues {\n    background-color: #181a39;\n}\n\n.st-louis-blues img, .st-louis-blues {\n    background-color: #003087;\n}\n\n#stats-table .tampa-bay-lightning {\n    background-color: #0c0e24;\n}\n\n.tampa-bay-lightning img, .tampa-bay-lightning {\n    background-color: #00205b;\n}\n\n#stats-table .toronto-maple-leafs {\n    background-color: #151722;\n}\n\n.toronto-maple-leafs img, .toronto-maple-leafs {\n    background-color: #00205b;\n}\n\n#stats-table .vancouver-canucks {\n    background-color: #091d2e;\n}\n\n.vancouver-canucks img, .vancouver-canucks {\n    background-color: #012d53;\n}\n\n#stats-table .vegas-golden-knights {\n    background-color: #53472d;\n}\n\n.vegas-golden-knights img, .vegas-golden-knights {\n    background-color: #b7975c;\n}\n\n#stats-table .washington-capitals {\n    background-color: #660d1b;\n}\n\n.washington-capitals img, .washington-capitals {\n    background-color: #e30628;\n}\n\n#stats-table .winnipeg-jets {\n    background-color: #091c32;\n}\n\n.winnipeg-jets img, .winnipeg-jets {\n    background-color: #002e63;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Epilogue:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Inter:wght@100;200;300;400;500;600;700;800;900&family=Orbitron:wght@400;500;600;700;800;900&family=Sintony:wght@400;700&display=swap');\n@import  \"tabulator-tables\";\n\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n:root {\n    --gigantic-text: 4.768rem;\n    --jumbo-text: 3.815rem;\n    --h1-text: 3.052rem;\n    --h2-text: 2.441rem;\n    --h3-text: 1.953rem;\n    --h4-text: 1.563rem;\n    --h5-text: 1.25rem;\n    --small-text: 0.72rem;\n    --smaller-text: 0.64rem;\n    --smallest-text: 0.512rem;\n    --main-color: #c10828;\n    --text-color: #0d0607;\n    --dark-color: #2b2b2b;\n    --third-color: #b9e937;\n    --red-color: #b90000;\n}\n\nhtml {\n    font-size: 100%;\n    scroll-behavior: smooth;\n}\n\nbody {\n    font-family: 'Sintony', sans-serif;\n    font-weight: 400;\n    color: white;\n    background-color: var(--dark-color);\n}\n\na {\n    cursor: pointer;\n}\n\nbutton {\n    cursor: pointer;\n}\n\np {margin-bottom: 1rem;}\n\nh1, h2, h3, h4, h5 {\n  margin: 3rem 0 1.38rem;\n  font-weight: 700;\n  line-height: 1;\n}\n\nh1 {\n  margin-top: 0;\n  font-size: var(--h1-text);\n  font-weight: 700;\n  text-transform: uppercase;\n}\n\nh2 {font-size: var(--h2-text);}\n\nh3 {font-size: var(--h3-text);}\n\nh4 {font-size: var(--h4-text);}\n\nh5 {font-size: var(--h5-text);}\n\n.material-symbols-outlined {\n  font-variation-settings:\n  'FILL' 0,\n  'wght' 400,\n  'GRAD' 0,\n  'opsz' 24\n}\n\nul {list-style-type: none;}\n\na {\n    text-decoration: none;\n    color: inherit;\n}\n\n.header {\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n    align-items: center;\n    background: rgb(13,6,7);\n    background: linear-gradient(180deg, rgba(13,6,7,1) 0%, rgba(193,8,40,1) 100%);\n}\n\n.header__logo {\n    height: auto;\n    width: 100px;\n}\n\n.divider {\n    position: relative;\n    margin-top: 10px;\n    width: 150px;\n    border-top: 1px solid white;\n}\n\n.header__title {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 150px;\n    width: 100%;\n    gap: 15px;\n    background-color: #00205b;\n}\n\n.header__title__text {\n    text-transform: uppercase;\n    font-weight: 900;\n    font-size: var(--h1-text);\n    font-family: 'Inter', sans-serif;\n    text-align: center;\n    width: 250px;\n}\n\n.header__badge {\n    width: -webkit-fill-available;\n    background: rgb(0,32,91);\n    background: linear-gradient(180deg, rgba(0,32,91,1) 0%, rgba(0,0,0,1) 100%);\n}\n\n.header__stats-section {\n    width: -webkit-fill-available;\n    margin: 15px 25px 40px 25px;\n}\n\n.header__stats-section__list__item__logo {\n    width: 50px;\n    height: auto;\n}\n\n\n.header__stats-section__top-section {\n    display: flex;\n    justify-content: space-around;\n    margin-bottom: 25px;\n    margin-top: 25px;\n}\n\n.section-title > span {\n    font-size: var(--h4-text);\n    font-family: 'Sintony', sans-serif;\n    font-weight: 700;\n}\n\n.header__stats-section-top {\n    padding-top: 10px;\n}\n\n.header__stats-section__top {\n    color: white;\n    text-transform: uppercase;\n    font-weight: 700;\n    font-size: var(--smaller-text);\n}\n\n.stats-results {\n    color: white;\n    text-align: center;\n    font-size: var(--h1-text);\n    font-weight: 700;\n}\n\n.participation {\n    display: flex;\n    gap: 15px;\n    padding: 10px;\n}\n\n.team-logo {\n    width: 40px;\n    height: auto;\n}\n\n.tabulator {\n    border-color: #c5c5c5;\n\n}\n\n.header__stats-section-middle {\n    padding-bottom: 5px;\n    padding-top: 15px;\n}\n\n.header__stats-sectio-bottom-section {\n    margin-top: 25px;\n}\n\n.header__stats-sectio-bottom-section .divider {\n    width: 200px;\n}\n\n#stats-table {\n    margin-bottom: 35px;\n    margin-top: 35px;\n}\n\n#stats-table .tabulator-cell[tabulator-field=\"equipe\"] {\n    font-size: var(--small-text);\n}\n\n.tabulator .tabulator-header,\n.tabulator .tabulator-header .tabulator-col {\n    border-color: #c5c5c5;\n    color: #dfdfdf;\n    background-color: #0a0a0a;\n    font-weight: 600;\n}\n\n.tabulator .tabulator-header .tabulator-col {\n    height: 40px;\n    justify-content: center;\n}\n\n#stats-table .tabulator-cell {\n    gap: 15px;\n    padding: 0;\n    color:#fff;\n    font-weight: 500;\n}\n\n#stats-table .tabulator-cell > div {\n    text-transform: uppercase;\n}\n\n#stats-table .tabulator-cell > img {\n    width: auto;\n    height: 100%;\n    padding-left: 5px;\n    padding-right: 5px;\n}\n\n.tabulator-cell > img {\n    width: auto;\n    height: 100%;\n}\n\n/*Theme the Tabulator element*/\n#pick-table {\n    border: 1px solid #c5c5c5;\n}\n\n/*Theme the header*/\n.tabulator-header {\n    background-color:#1d191a;\n    color:#fff;\n}\n\n/*Allow column header names to wrap lines*/\n#pick-table .tabulator-header .tabulator-col,\n#pick-table .tabulator-header .tabulator-col-row-handle {\n    white-space: normal;\n}\n\n/*Color the table rows base on player name*/\n#pick-table .tabulator-table .tabulator-row.a-player {\n    background-color: #ffffff;\n}\n\n#pick-table .tabulator-table .tabulator-row.another-player {\n    background-color: #dbdbdb;\n}\n\n#pick-table .tabulator-cell[tabulator-field=\"joueur\"] {\n    font-size: var(--small-text);\n}\n\n/* Color the border cells */\n.tabulator-row .tabulator-cell {\n    border-bottom: 1px solid #c5c5c5;\n}\n\n#stats-table .tabulator-row .tabulator-cell:last-of-type,\n#stats-table .tabulator-header .tabulator-col:last-of-type {\n    border-right: none;\n}\n\n#stats-table .tabulator-row:last-of-type .tabulator-cell {\n    border-bottom: none;\n}\n\n.tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-right,\n.tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-right {\n    border-left: 1px;\n}\n\n.grayscale-effect {\n    filter: grayscale(100%);\n  }\n/* NHL TEAMS COLOR */\n#stats-table .anaheim-ducks {\n    background-color: #55472d;\n}\n\n.anaheim-ducks img, .anaheim-ducks {\n    background-color: #b6985a;\n}\n\n#stats-table .arizona-coyotes {\n    background-color: #390b18;\n}\n\n.arizona-coyote img, .arizona-coyotes {\n    background-color: #7a0022;\n}\n\n#stats-table .boston-bruins {\n    background-color: #b48518;\n}\n\n.boston-bruins img, .boston-bruins {\n    background-color: #fdb91e;\n}\n\n#stats-table .buffalo-sabres {\n    background-color: #0a1c40;\n}\n\n.buffalo-sabres img, .buffalo-sabres {\n    background-color: #023089;\n}\n\n#stats-table .calgary-flames {\n    background-color: #68111e;\n}\n\n.calgary-flames img, .calgary-flames {\n    background-color: #e30a2b;\n}\n\n#stats-table .carolina-hurricanes {\n    background-color: #8c2626;\n}\n\n.carolina-hurricanes img, .carolina-hurricanes {\n    background-color: #c8102e;\n}\n\n#stats-table .chicago-blackhawks {\n    background-color: #670e1c;\n}\n\n.chicago-blackhawks img, .chicago-blackhawks {\n    background-color: #e30829;\n}\n\n#stats-table .colorado-avalanche {\n    background-color: #2f1214;\n}\n\n.colorado-avalanche img, .colorado-avalanche {\n    background-color: #6f263d;\n}\n\n#stats-table .columbus-blue-jackets {\n    background-color: #091c32;\n}\n\n.columbus-blue-jackets img, .columbus-blue-jackets {\n    background-color: #032d65;\n}\n\n#stats-table .dallas-stars {\n    background-color: #174233;\n}\n\n.dallas-stars img, .dallas-stars {\n    background-color: #00704a;\n}\n\n#stats-table .detroit-red-wings {\n    background-color: #640c18;\n}\n\n.detroit-red-wings img, .detroit-red-wings {\n    background-color: #e30524;\n}\n\n#stats-table .edmonton-oilers {\n    background-color: #001131;\n}\n\n.edmonton-oilers img, .edmonton-oilers {\n    background-color: #00205b;\n}\n\n#stats-table .florida-panthers {\n    background-color: #920b21;\n}\n\n.florida-panthers img, .florida-panthers {\n    background-color: #c8102e;\n}\n\n#stats-table .seattle-kraken {\n    background-color: #0a101e;\n}\n\n.seattle-kraken img, .seattle-kraken {\n    background-color: #000f32;\n}\n\n#stats-table .los-angeles-kings {\n    background-color: #5b5b5d;\n}\n\n.los-angeles-kings img, .los-angeles-kings {\n    background-color: #b1b6ba;\n}\n\n#stats-table .minnesota-wild {\n    background-color: #002217;\n}\n\n.minnesota-wild img, .minnesota-wild {\n    background-color: #025736;\n}\n\n#stats-table .montreal-canadiens {\n    background-color: #570d1a;\n}\n\n.montreal-canadiens img, .montreal-canadiens {\n    background-color: #c20828;\n}\n\n#stats-table .nashville-predators {\n    background-color: #71541a;\n}\n\n.nashville-predators img, .nashville-predators {\n    background-color: #fdb623;\n}\n\n#stats-table .new-jersey-devils {\n    background-color: #640c18;\n}\n\n.new-jersey-devils img, .new-jersey-devils {\n    background-color: #e10623;\n}\n\n#stats-table .new-york-islanders {\n    background-color: #0b2643;\n}\n\n.new-york-islanders img, .new-york-islanders {\n    background-color: #00478c;\n}\n\n#stats-table .new-york-rangers {\n    background-color: #183859;\n}\n\n.new-york-rangers img, .new-york-rangers {\n    background-color: #0056a8;\n}\n\n#stats-table .ottawa-senators {\n    background-color: #650c19;\n}\n\n.ottawa-senators img, .ottawa-senators {\n    background-color: #e30526;\n}\n\n#stats-table .philadelphia-flyers {\n    background-color: #6f290b;\n}\n\n.philadelphia-flyers img, .philadelphia-flyers {\n    background-color: #fc4c02;\n}\n\n#stats-table .pittsburgh-penguins {\n    background-color: #1b1b1c;\n}\n\n.pittsburgh-penguins img, .pittsburgh-penguins {\n    background-color: #0e0e0f;\n}\n\n#stats-table .san-jose-sharks {\n    background-color: #0a363d;\n}\n\n.san-jose-sharks img, .san-jose-sharks {\n    background-color: #006d80;\n}\n\n#stats-table .st-louis-blues {\n    background-color: #181a39;\n}\n\n.st-louis-blues img, .st-louis-blues {\n    background-color: #003087;\n}\n\n#stats-table .tampa-bay-lightning {\n    background-color: #0c0e24;\n}\n\n.tampa-bay-lightning img, .tampa-bay-lightning {\n    background-color: #00205b;\n}\n\n#stats-table .toronto-maple-leafs {\n    background-color: #151722;\n}\n\n.toronto-maple-leafs img, .toronto-maple-leafs {\n    background-color: #00205b;\n}\n\n#stats-table .vancouver-canucks {\n    background-color: #091d2e;\n}\n\n.vancouver-canucks img, .vancouver-canucks {\n    background-color: #012d53;\n}\n\n#stats-table .vegas-golden-knights {\n    background-color: #53472d;\n}\n\n.vegas-golden-knights img, .vegas-golden-knights {\n    background-color: #b7975c;\n}\n\n#stats-table .washington-capitals {\n    background-color: #660d1b;\n}\n\n.washington-capitals img, .washington-capitals {\n    background-color: #e30628;\n}\n\n#stats-table .winnipeg-jets {\n    background-color: #091c32;\n}\n\n.winnipeg-jets img, .winnipeg-jets {\n    background-color: #002e63;\n}"],sourceRoot:""}]);const u=s},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i="",n=void 0!==e[5];return e[4]&&(i+="@supports (".concat(e[4],") {")),e[2]&&(i+="@media ".concat(e[2]," {")),n&&(i+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),i+=t(e),n&&(i+="}"),e[2]&&(i+="}"),e[4]&&(i+="}"),i})).join("")},e.i=function(t,i,n,o,r){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(n)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(a[s]=!0)}for(var u=0;u<t.length;u++){var h=[].concat(t[u]);n&&a[h[0]]||(void 0!==r&&(void 0===h[5]||(h[1]="@layer".concat(h[5].length>0?" ".concat(h[5]):""," {").concat(h[1],"}")),h[5]=r),i&&(h[2]?(h[1]="@media ".concat(h[2]," {").concat(h[1],"}"),h[2]=i):h[2]=i),o&&(h[4]?(h[1]="@supports (".concat(h[4],") {").concat(h[1],"}"),h[4]=o):h[4]="".concat(o)),e.push(h))}},e}},537:t=>{"use strict";t.exports=function(t){var e=t[1],i=t[3];if(!i)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),r="/*# ".concat(o," */");return[e].concat([r]).join("\n")}return[e].join("\n")}},534:t=>{t.exports=[["boston bruins","0","Boston Bruins"],["los angeles kings","0","Los Angeles Kings"],["vancouver canucks","0","Vancouver Canucks"],["colorado avalanche","0","Colorado Avalanche"],["new york islanders","0","New York Islanders"],["ottawa senators","0","Ottawa Senators"],["tampa bay lightning","0","Tampa Bay Lightning"],["detroit red wings","0","Detroit Red Wings"],["pittsburgh penguins","0","Pittsburgh Penguins"],["buffalo sabres","0","Buffalo Sabres"],["dallas stars","0","Dallas Stars"],["carolina hurricanes","0","Carolina Hurricanes"],["columbus blue jackets","0","Columbus Blue Jackets"],["edmonton oilers","0","Edmonton Oilers"],["new jersey devils","0","New Jersey Devils"],["florida panthers","0","Florida Panthers"],["montreal canadiens","0","Montreal Canadiens"],["new york rangers","0","New York Rangers"],["philadelphia flyers","0","Philadelphia Flyers"],["toronto maple leafs","0","Toronto Maple Leafs"],["washington capitals","0","Washington Capitals"],["arizona coyotes","0","Arizona Coyotes"],["anaheim ducks","0","Anaheim Ducks"],["chicago blackhawks","0","Chicago Blackhawks"],["calgary flames","0","Calgary Flames"],["st. louis blues","0","St.Louis Blues"],["minnesota wild","0","Minnesota Wild"],["san jose sharks","0","San Jose Sharks"],["nashville predators","0","Nashville Predators"],["seattle kraken","0","Seattle Kraken"],["winnipeg jets","0","Winnipeg Jets"],["vegas golden knights","0","Vegas Golden Knights"]]},117:t=>{t.exports=[["win","#","Joueurs","Samedi 11 novembre","Samedi 18 novembre","Samedi 25 novembre","Samedi 2 décembre","Samedi 9 décembre","Samedi 16 décembre"],["1","","Charles-Antoine Messier","Detroit Red Wings","Boston Bruins","Los Angeles Kings","Colorado Avalanche","","",""],["1","","Francois Tremblay","Detroit Red Wings","Washington Capitals","Colorado Avalanche","Winnipeg Jets","","",""],["1","","Louis- Alexandre Belisle Roy","Detroit Red Wings","Boston Bruins","Los Angeles Kings","Winnipeg Jets","","",""],["1","","Mathieu Lacombe","Pittsburgh Penguins","Washington Capitals","Los Angeles Kings","Winnipeg Jets","","",""],["1","","Philippe Reid","Ottawa Senators","Boston Bruins","Los Angeles Kings","Carolina Hurricanes","","",""],["1","","Vincent Ménard","Arizona Coyotes","Washington Capitals","Colorado Avalanche","Florida Panthers","","",""],["1","","Vincent Meslage","Ottawa Senators","Washington Capitals","Los Angeles Kings","Winnipeg Jets","","",""],["0","","Charles Jutras","Ottawa Senators","Boston Bruins","Vegas Golden Knights","","","",""],["0","","Maxime Loranger","Detroit Red Wings","Boston Bruins","Vancouver Canucks","","","",""],["0","","Olivier Tremblay","Dallas Stars","Washington Capitals","Vancouver Canucks","","","",""],["0","","Patrick Loranger","Pittsburgh Penguins","Boston Bruins","Vegas Golden Knights","","","",""],["0","","Philippe Jutras","Ottawa Senators","Boston Bruins","Vegas Golden Knights","","","",""],["0","","Sebastien Meslage","Pittsburgh Penguins","Boston Bruins","Vancouver Canucks","","","",""],["0","","Véronique Bilodeau","Pittsburgh Penguins","Boston Bruins","Vegas Golden Knights","","","",""],["0","","Véronique Bilodeau","Detroit Red Wings","Washington Capitals","Vancouver Canucks","","","",""],["0","","Jonathan Crabey","Detroit Red Wings","Vancouver Canucks","","","","",""],["0","","Jonathan Perreault","Pittsburgh Penguins","Vegas Golden Knights","","","","",""],["0","","Jonathan Perreault","Ottawa Senators","Vancouver Canucks","","","","",""],["0","","Mathieu Blanchette","Ottawa Senators","Vegas Golden Knights","","","","",""],["0","","Mathieu Lacombe","Detroit Red Wings","Vegas Golden Knights","","","","",""],["0","","Maxim Daaneau","Dallas Stars","Vegas Golden Knights","","","","",""],["0","","Patrick Loranger","Edmonton Oilers","Vegas Golden Knights","","","","",""],["0","","Sebastien Meslage","Detroit Red Wings","Vancouver Canucks","","","","",""],["0","","Simon Hébert","Pittsburgh Penguins","Vegas Golden Knights","","","","",""],["0","","Vincent Ménard","Dallas Stars","Vegas Golden Knights","","","","",""],["0","","Vincent Ménard","Ottawa Senators","Vegas Golden Knights","","","","",""],["0","","Vincent Ménard","Pittsburgh Penguins","Vancouver Canucks","","","","",""],["0","","Albert Dalpé-Messier","Boston Bruins","","","","","",""],["0","","Albert Dalpé-Messier","Boston Bruins","","","","","",""],["0","","Albert Dalpé-Messier","Los Angeles Kings","","","","","",""],["0","","Albert Dalpé-Messier","Los Angeles Kings","","","","","",""],["0","","Albert Dalpé-Messier","Vancouver Canucks","","","","","",""],["0","","Bernard-Olivier Giguere","Colorado Avalanche","","","","","",""],["0","","Bernard-Olivier Giguere","Los Angeles Kings","","","","","",""],["0","","Bernard-Olivier Giguere","Boston Bruins","","","","","",""],["0","","Bruno Marquette","New York Islanders","","","","","",""],["0","","Bruno Marquette","Los Angeles Kings","","","","","",""],["0","","Bruno Marquette","Colorado Avalanche","","","","","",""],["0","","Cedric Deniverville","Los Angeles Kings","","","","","",""],["0","","Cedric Deniverville","Los Angeles Kings","","","","","",""],["0","","Cedric Deniverville","Boston Bruins","","","","","",""],["0","","Cedric Deniverville","Boston Bruins","","","","","",""],["0","","Cedric Deniverville","New York Islanders","","","","","",""],["0","","Charles Jutras","Los Angeles Kings","","","","","",""],["0","","Charles Jutras","Los Angeles Kings","","","","","",""],["0","","Charles Jutras","New York Islanders","","","","","",""],["0","","Charles Jutras","Colorado Avalanche","","","","","",""],["0","","Charles-Antoine Messier","Tampa Bay Lightning","","","","","",""],["0","","Charles-Antoine Messier","Colorado Avalanche","","","","","",""],["0","","Charles-Antoine Messier","Los Angeles Kings","","","","","",""],["0","","Charles-Antoine Messier","Los Angeles Kings","","","","","",""],["0","","Claude-Olivier Perreault","Colorado Avalanche","","","","","",""],["0","","Claude-Olivier Perreault","Los Angeles Kings","","","","","",""],["0","","Francis Dubois","Colorado Avalanche","","","","","",""],["0","","Francis Dubois","Boston Bruins","","","","","",""],["0","","Francois Gatien","Los Angeles Kings","","","","","",""],["0","","Francois Gatien","Los Angeles Kings","","","","","",""],["0","","Francois Gatien","Boston Bruins","","","","","",""],["0","","Francois Tremblay","New York Islanders","","","","","",""],["0","","Francois Tremblay","Los Angeles Kings","","","","","",""],["0","","Jonathan Crabey","Boston Bruins","","","","","",""],["0","","Jonathan Crabey","Los Angeles Kings","","","","","",""],["0","","Justin Lafrance","Colorado Avalanche","","","","","",""],["0","","Justin Lafrance","Los Angeles Kings","","","","","",""],["0","","Jonathan Perreault","New York Islanders","","","","","",""],["0","","Jonathan Perreault","Los Angeles Kings","","","","","",""],["0","","Jonathan Perreault","Los Angeles Kings","","","","","",""],["0","","Jonathan Richard","Boston Bruins","","","","","",""],["0","","Jonathan Richard","Los Angeles Kings","","","","","",""],["0","","Loic Blanchette","Boston Bruins","","","","","",""],["0","","Louis- Alexandre Belisle Roy","Boston Bruins","","","","","",""],["0","","Louis- Alexandre Belisle Roy","Los Angeles Kings","","","","","",""],["0","","Mathieu Blanchette","Los Angeles Kings","","","","","",""],["0","","Mathieu Lacombe","Boston Bruins","","","","","",""],["0","","Mathieu Lacombe","Colorado Avalanche","","","","","",""],["0","","Mathieu Lacombe","Los Angeles Kings","","","","","",""],["0","","Mathieu Lefebvre","Los Angeles Kings","","","","","",""],["0","","Mathieu Lefebvre","Los Angeles Kings","","","","","",""],["0","","Mathieu Lefebvre","New York Islanders","","","","","",""],["0","","Mathieu Lefebvre","Buffalo Sabres","","","","","",""],["0","","Matthieu Auger","Los Angeles Kings","","","","","",""],["0","","Matthieu Auger","Los Angeles Kings","","","","","",""],["0","","Matthieu Auger","Colorado Avalanche","","","","","",""],["0","","Maxime Loranger","Colorado Avalanche","","","","","",""],["0","","Maxime Loranger","Colorado Avalanche","","","","","",""],["0","","Maxime Loranger","Los Angeles Kings","","","","","",""],["0","","Maxime Loranger","Los Angeles Kings","","","","","",""],["0","","Olivier Tremblay","Los Angeles Kings","","","","","",""],["0","","Patrick Loranger","New York Islanders","","","","","",""],["0","","Patrick Loranger","Boston Bruins","","","","","",""],["0","","Patrick Loranger","Los Angeles Kings","","","","","",""],["0","","Philippe Jutras","Boston Bruins","","","","","",""],["0","","Philippe Jutras","Colorado Avalanche","","","","","",""],["0","","Philippe Jutras","Los Angeles Kings","","","","","",""],["0","","Philippe Jutras","Boston Bruins","","","","","",""],["0","","Philippe Reid","New York Islanders","","","","","",""],["0","","Philippe Reid","Los Angeles Kings","","","","","",""],["0","","Roxane Pronovost","Colorado Avalanche","","","","","",""],["0","","Sebastien Meslage","Boston Bruins","","","","","",""],["0","","Simon Hébert","Colorado Avalanche","","","","","",""],["0","","Vincent Décarie","Boston Bruins","","","","","",""],["0","","Vincent Décarie","Los Angeles Kings","","","","","",""],["0","","Vincent Meslage","Los Angeles Kings","","","","","",""],["0","","Vincent Meslage","New York Islanders","","","","","",""]]},486:function(t,e,i){var n;t=i.nmd(t),function(){var o,r="Expected a function",a="__lodash_hash_undefined__",l="__lodash_placeholder__",s=32,u=128,h=1/0,c=9007199254740991,d=NaN,p=4294967295,b=[["ary",u],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",s],["partialRight",64],["rearg",256]],m="[object Arguments]",g="[object Array]",f="[object Boolean]",A="[object Date]",v="[object Error]",w="[object Function]",C="[object GeneratorFunction]",E="[object Map]",y="[object Number]",x="[object Object]",B="[object Promise]",k="[object RegExp]",R="[object Set]",_="[object String]",T="[object Symbol]",z="[object WeakMap]",M="[object ArrayBuffer]",L="[object DataView]",S="[object Float32Array]",D="[object Float64Array]",P="[object Int8Array]",I="[object Int16Array]",F="[object Int32Array]",H="[object Uint8Array]",O="[object Uint8ClampedArray]",W="[object Uint16Array]",j="[object Uint32Array]",V=/\b__p \+= '';/g,N=/\b(__p \+=) '' \+/g,G=/(__e\(.*?\)|\b__t\)) \+\n'';/g,U=/&(?:amp|lt|gt|quot|#39);/g,q=/[&<>"']/g,Y=RegExp(U.source),X=RegExp(q.source),K=/<%-([\s\S]+?)%>/g,J=/<%([\s\S]+?)%>/g,Z=/<%=([\s\S]+?)%>/g,$=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Q=/^\w*$/,tt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,et=/[\\^$.*+?()[\]{}|]/g,it=RegExp(et.source),nt=/^\s+/,ot=/\s/,rt=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,at=/\{\n\/\* \[wrapped with (.+)\] \*/,lt=/,? & /,st=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,ut=/[()=,{}\[\]\/\s]/,ht=/\\(\\)?/g,ct=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,dt=/\w*$/,pt=/^[-+]0x[0-9a-f]+$/i,bt=/^0b[01]+$/i,mt=/^\[object .+?Constructor\]$/,gt=/^0o[0-7]+$/i,ft=/^(?:0|[1-9]\d*)$/,At=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,vt=/($^)/,wt=/['\n\r\u2028\u2029\\]/g,Ct="\\ud800-\\udfff",Et="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",yt="\\u2700-\\u27bf",xt="a-z\\xdf-\\xf6\\xf8-\\xff",Bt="A-Z\\xc0-\\xd6\\xd8-\\xde",kt="\\ufe0e\\ufe0f",Rt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",_t="["+Ct+"]",Tt="["+Rt+"]",zt="["+Et+"]",Mt="\\d+",Lt="["+yt+"]",St="["+xt+"]",Dt="[^"+Ct+Rt+Mt+yt+xt+Bt+"]",Pt="\\ud83c[\\udffb-\\udfff]",It="[^"+Ct+"]",Ft="(?:\\ud83c[\\udde6-\\uddff]){2}",Ht="[\\ud800-\\udbff][\\udc00-\\udfff]",Ot="["+Bt+"]",Wt="\\u200d",jt="(?:"+St+"|"+Dt+")",Vt="(?:"+Ot+"|"+Dt+")",Nt="(?:['’](?:d|ll|m|re|s|t|ve))?",Gt="(?:['’](?:D|LL|M|RE|S|T|VE))?",Ut="(?:"+zt+"|"+Pt+")?",qt="["+kt+"]?",Yt=qt+Ut+"(?:"+Wt+"(?:"+[It,Ft,Ht].join("|")+")"+qt+Ut+")*",Xt="(?:"+[Lt,Ft,Ht].join("|")+")"+Yt,Kt="(?:"+[It+zt+"?",zt,Ft,Ht,_t].join("|")+")",Jt=RegExp("['’]","g"),Zt=RegExp(zt,"g"),$t=RegExp(Pt+"(?="+Pt+")|"+Kt+Yt,"g"),Qt=RegExp([Ot+"?"+St+"+"+Nt+"(?="+[Tt,Ot,"$"].join("|")+")",Vt+"+"+Gt+"(?="+[Tt,Ot+jt,"$"].join("|")+")",Ot+"?"+jt+"+"+Nt,Ot+"+"+Gt,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",Mt,Xt].join("|"),"g"),te=RegExp("["+Wt+Ct+Et+kt+"]"),ee=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,ie=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],ne=-1,oe={};oe[S]=oe[D]=oe[P]=oe[I]=oe[F]=oe[H]=oe[O]=oe[W]=oe[j]=!0,oe[m]=oe[g]=oe[M]=oe[f]=oe[L]=oe[A]=oe[v]=oe[w]=oe[E]=oe[y]=oe[x]=oe[k]=oe[R]=oe[_]=oe[z]=!1;var re={};re[m]=re[g]=re[M]=re[L]=re[f]=re[A]=re[S]=re[D]=re[P]=re[I]=re[F]=re[E]=re[y]=re[x]=re[k]=re[R]=re[_]=re[T]=re[H]=re[O]=re[W]=re[j]=!0,re[v]=re[w]=re[z]=!1;var ae={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},le=parseFloat,se=parseInt,ue="object"==typeof i.g&&i.g&&i.g.Object===Object&&i.g,he="object"==typeof self&&self&&self.Object===Object&&self,ce=ue||he||Function("return this")(),de=e&&!e.nodeType&&e,pe=de&&t&&!t.nodeType&&t,be=pe&&pe.exports===de,me=be&&ue.process,ge=function(){try{return pe&&pe.require&&pe.require("util").types||me&&me.binding&&me.binding("util")}catch(t){}}(),fe=ge&&ge.isArrayBuffer,Ae=ge&&ge.isDate,ve=ge&&ge.isMap,we=ge&&ge.isRegExp,Ce=ge&&ge.isSet,Ee=ge&&ge.isTypedArray;function ye(t,e,i){switch(i.length){case 0:return t.call(e);case 1:return t.call(e,i[0]);case 2:return t.call(e,i[0],i[1]);case 3:return t.call(e,i[0],i[1],i[2])}return t.apply(e,i)}function xe(t,e,i,n){for(var o=-1,r=null==t?0:t.length;++o<r;){var a=t[o];e(n,a,i(a),t)}return n}function Be(t,e){for(var i=-1,n=null==t?0:t.length;++i<n&&!1!==e(t[i],i,t););return t}function ke(t,e){for(var i=null==t?0:t.length;i--&&!1!==e(t[i],i,t););return t}function Re(t,e){for(var i=-1,n=null==t?0:t.length;++i<n;)if(!e(t[i],i,t))return!1;return!0}function _e(t,e){for(var i=-1,n=null==t?0:t.length,o=0,r=[];++i<n;){var a=t[i];e(a,i,t)&&(r[o++]=a)}return r}function Te(t,e){return!(null==t||!t.length)&&Oe(t,e,0)>-1}function ze(t,e,i){for(var n=-1,o=null==t?0:t.length;++n<o;)if(i(e,t[n]))return!0;return!1}function Me(t,e){for(var i=-1,n=null==t?0:t.length,o=Array(n);++i<n;)o[i]=e(t[i],i,t);return o}function Le(t,e){for(var i=-1,n=e.length,o=t.length;++i<n;)t[o+i]=e[i];return t}function Se(t,e,i,n){var o=-1,r=null==t?0:t.length;for(n&&r&&(i=t[++o]);++o<r;)i=e(i,t[o],o,t);return i}function De(t,e,i,n){var o=null==t?0:t.length;for(n&&o&&(i=t[--o]);o--;)i=e(i,t[o],o,t);return i}function Pe(t,e){for(var i=-1,n=null==t?0:t.length;++i<n;)if(e(t[i],i,t))return!0;return!1}var Ie=Ne("length");function Fe(t,e,i){var n;return i(t,(function(t,i,o){if(e(t,i,o))return n=i,!1})),n}function He(t,e,i,n){for(var o=t.length,r=i+(n?1:-1);n?r--:++r<o;)if(e(t[r],r,t))return r;return-1}function Oe(t,e,i){return e==e?function(t,e,i){for(var n=i-1,o=t.length;++n<o;)if(t[n]===e)return n;return-1}(t,e,i):He(t,je,i)}function We(t,e,i,n){for(var o=i-1,r=t.length;++o<r;)if(n(t[o],e))return o;return-1}function je(t){return t!=t}function Ve(t,e){var i=null==t?0:t.length;return i?qe(t,e)/i:d}function Ne(t){return function(e){return null==e?o:e[t]}}function Ge(t){return function(e){return null==t?o:t[e]}}function Ue(t,e,i,n,o){return o(t,(function(t,o,r){i=n?(n=!1,t):e(i,t,o,r)})),i}function qe(t,e){for(var i,n=-1,r=t.length;++n<r;){var a=e(t[n]);a!==o&&(i=i===o?a:i+a)}return i}function Ye(t,e){for(var i=-1,n=Array(t);++i<t;)n[i]=e(i);return n}function Xe(t){return t?t.slice(0,ci(t)+1).replace(nt,""):t}function Ke(t){return function(e){return t(e)}}function Je(t,e){return Me(e,(function(e){return t[e]}))}function Ze(t,e){return t.has(e)}function $e(t,e){for(var i=-1,n=t.length;++i<n&&Oe(e,t[i],0)>-1;);return i}function Qe(t,e){for(var i=t.length;i--&&Oe(e,t[i],0)>-1;);return i}var ti=Ge({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),ei=Ge({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function ii(t){return"\\"+ae[t]}function ni(t){return te.test(t)}function oi(t){var e=-1,i=Array(t.size);return t.forEach((function(t,n){i[++e]=[n,t]})),i}function ri(t,e){return function(i){return t(e(i))}}function ai(t,e){for(var i=-1,n=t.length,o=0,r=[];++i<n;){var a=t[i];a!==e&&a!==l||(t[i]=l,r[o++]=i)}return r}function li(t){var e=-1,i=Array(t.size);return t.forEach((function(t){i[++e]=t})),i}function si(t){var e=-1,i=Array(t.size);return t.forEach((function(t){i[++e]=[t,t]})),i}function ui(t){return ni(t)?function(t){for(var e=$t.lastIndex=0;$t.test(t);)++e;return e}(t):Ie(t)}function hi(t){return ni(t)?function(t){return t.match($t)||[]}(t):function(t){return t.split("")}(t)}function ci(t){for(var e=t.length;e--&&ot.test(t.charAt(e)););return e}var di=Ge({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),pi=function t(e){var i,n=(e=null==e?ce:pi.defaults(ce.Object(),e,pi.pick(ce,ie))).Array,ot=e.Date,Ct=e.Error,Et=e.Function,yt=e.Math,xt=e.Object,Bt=e.RegExp,kt=e.String,Rt=e.TypeError,_t=n.prototype,Tt=Et.prototype,zt=xt.prototype,Mt=e["__core-js_shared__"],Lt=Tt.toString,St=zt.hasOwnProperty,Dt=0,Pt=(i=/[^.]+$/.exec(Mt&&Mt.keys&&Mt.keys.IE_PROTO||""))?"Symbol(src)_1."+i:"",It=zt.toString,Ft=Lt.call(xt),Ht=ce._,Ot=Bt("^"+Lt.call(St).replace(et,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Wt=be?e.Buffer:o,jt=e.Symbol,Vt=e.Uint8Array,Nt=Wt?Wt.allocUnsafe:o,Gt=ri(xt.getPrototypeOf,xt),Ut=xt.create,qt=zt.propertyIsEnumerable,Yt=_t.splice,Xt=jt?jt.isConcatSpreadable:o,Kt=jt?jt.iterator:o,$t=jt?jt.toStringTag:o,te=function(){try{var t=ur(xt,"defineProperty");return t({},"",{}),t}catch(t){}}(),ae=e.clearTimeout!==ce.clearTimeout&&e.clearTimeout,ue=ot&&ot.now!==ce.Date.now&&ot.now,he=e.setTimeout!==ce.setTimeout&&e.setTimeout,de=yt.ceil,pe=yt.floor,me=xt.getOwnPropertySymbols,ge=Wt?Wt.isBuffer:o,Ie=e.isFinite,Ge=_t.join,bi=ri(xt.keys,xt),mi=yt.max,gi=yt.min,fi=ot.now,Ai=e.parseInt,vi=yt.random,wi=_t.reverse,Ci=ur(e,"DataView"),Ei=ur(e,"Map"),yi=ur(e,"Promise"),xi=ur(e,"Set"),Bi=ur(e,"WeakMap"),ki=ur(xt,"create"),Ri=Bi&&new Bi,_i={},Ti=Fr(Ci),zi=Fr(Ei),Mi=Fr(yi),Li=Fr(xi),Si=Fr(Bi),Di=jt?jt.prototype:o,Pi=Di?Di.valueOf:o,Ii=Di?Di.toString:o;function Fi(t){if(tl(t)&&!Na(t)&&!(t instanceof ji)){if(t instanceof Wi)return t;if(St.call(t,"__wrapped__"))return Hr(t)}return new Wi(t)}var Hi=function(){function t(){}return function(e){if(!Qa(e))return{};if(Ut)return Ut(e);t.prototype=e;var i=new t;return t.prototype=o,i}}();function Oi(){}function Wi(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=o}function ji(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=p,this.__views__=[]}function Vi(t){var e=-1,i=null==t?0:t.length;for(this.clear();++e<i;){var n=t[e];this.set(n[0],n[1])}}function Ni(t){var e=-1,i=null==t?0:t.length;for(this.clear();++e<i;){var n=t[e];this.set(n[0],n[1])}}function Gi(t){var e=-1,i=null==t?0:t.length;for(this.clear();++e<i;){var n=t[e];this.set(n[0],n[1])}}function Ui(t){var e=-1,i=null==t?0:t.length;for(this.__data__=new Gi;++e<i;)this.add(t[e])}function qi(t){var e=this.__data__=new Ni(t);this.size=e.size}function Yi(t,e){var i=Na(t),n=!i&&Va(t),o=!i&&!n&&Ya(t),r=!i&&!n&&!o&&sl(t),a=i||n||o||r,l=a?Ye(t.length,kt):[],s=l.length;for(var u in t)!e&&!St.call(t,u)||a&&("length"==u||o&&("offset"==u||"parent"==u)||r&&("buffer"==u||"byteLength"==u||"byteOffset"==u)||gr(u,s))||l.push(u);return l}function Xi(t){var e=t.length;return e?t[Un(0,e-1)]:o}function Ki(t,e){return Lr(Ro(t),rn(e,0,t.length))}function Ji(t){return Lr(Ro(t))}function Zi(t,e,i){(i!==o&&!Oa(t[e],i)||i===o&&!(e in t))&&nn(t,e,i)}function $i(t,e,i){var n=t[e];St.call(t,e)&&Oa(n,i)&&(i!==o||e in t)||nn(t,e,i)}function Qi(t,e){for(var i=t.length;i--;)if(Oa(t[i][0],e))return i;return-1}function tn(t,e,i,n){return hn(t,(function(t,o,r){e(n,t,i(t),r)})),n}function en(t,e){return t&&_o(e,zl(e),t)}function nn(t,e,i){"__proto__"==e&&te?te(t,e,{configurable:!0,enumerable:!0,value:i,writable:!0}):t[e]=i}function on(t,e){for(var i=-1,r=e.length,a=n(r),l=null==t;++i<r;)a[i]=l?o:Bl(t,e[i]);return a}function rn(t,e,i){return t==t&&(i!==o&&(t=t<=i?t:i),e!==o&&(t=t>=e?t:e)),t}function an(t,e,i,n,r,a){var l,s=1&e,u=2&e,h=4&e;if(i&&(l=r?i(t,n,r,a):i(t)),l!==o)return l;if(!Qa(t))return t;var c=Na(t);if(c){if(l=function(t){var e=t.length,i=new t.constructor(e);return e&&"string"==typeof t[0]&&St.call(t,"index")&&(i.index=t.index,i.input=t.input),i}(t),!s)return Ro(t,l)}else{var d=dr(t),p=d==w||d==C;if(Ya(t))return Co(t,s);if(d==x||d==m||p&&!r){if(l=u||p?{}:br(t),!s)return u?function(t,e){return _o(t,cr(t),e)}(t,function(t,e){return t&&_o(e,Ml(e),t)}(l,t)):function(t,e){return _o(t,hr(t),e)}(t,en(l,t))}else{if(!re[d])return r?t:{};l=function(t,e,i){var n,o=t.constructor;switch(e){case M:return Eo(t);case f:case A:return new o(+t);case L:return function(t,e){var i=e?Eo(t.buffer):t.buffer;return new t.constructor(i,t.byteOffset,t.byteLength)}(t,i);case S:case D:case P:case I:case F:case H:case O:case W:case j:return yo(t,i);case E:return new o;case y:case _:return new o(t);case k:return function(t){var e=new t.constructor(t.source,dt.exec(t));return e.lastIndex=t.lastIndex,e}(t);case R:return new o;case T:return n=t,Pi?xt(Pi.call(n)):{}}}(t,d,s)}}a||(a=new qi);var b=a.get(t);if(b)return b;a.set(t,l),rl(t)?t.forEach((function(n){l.add(an(n,e,i,n,t,a))})):el(t)&&t.forEach((function(n,o){l.set(o,an(n,e,i,o,t,a))}));var g=c?o:(h?u?ir:er:u?Ml:zl)(t);return Be(g||t,(function(n,o){g&&(n=t[o=n]),$i(l,o,an(n,e,i,o,t,a))})),l}function ln(t,e,i){var n=i.length;if(null==t)return!n;for(t=xt(t);n--;){var r=i[n],a=e[r],l=t[r];if(l===o&&!(r in t)||!a(l))return!1}return!0}function sn(t,e,i){if("function"!=typeof t)throw new Rt(r);return _r((function(){t.apply(o,i)}),e)}function un(t,e,i,n){var o=-1,r=Te,a=!0,l=t.length,s=[],u=e.length;if(!l)return s;i&&(e=Me(e,Ke(i))),n?(r=ze,a=!1):e.length>=200&&(r=Ze,a=!1,e=new Ui(e));t:for(;++o<l;){var h=t[o],c=null==i?h:i(h);if(h=n||0!==h?h:0,a&&c==c){for(var d=u;d--;)if(e[d]===c)continue t;s.push(h)}else r(e,c,n)||s.push(h)}return s}Fi.templateSettings={escape:K,evaluate:J,interpolate:Z,variable:"",imports:{_:Fi}},Fi.prototype=Oi.prototype,Fi.prototype.constructor=Fi,Wi.prototype=Hi(Oi.prototype),Wi.prototype.constructor=Wi,ji.prototype=Hi(Oi.prototype),ji.prototype.constructor=ji,Vi.prototype.clear=function(){this.__data__=ki?ki(null):{},this.size=0},Vi.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},Vi.prototype.get=function(t){var e=this.__data__;if(ki){var i=e[t];return i===a?o:i}return St.call(e,t)?e[t]:o},Vi.prototype.has=function(t){var e=this.__data__;return ki?e[t]!==o:St.call(e,t)},Vi.prototype.set=function(t,e){var i=this.__data__;return this.size+=this.has(t)?0:1,i[t]=ki&&e===o?a:e,this},Ni.prototype.clear=function(){this.__data__=[],this.size=0},Ni.prototype.delete=function(t){var e=this.__data__,i=Qi(e,t);return!(i<0||(i==e.length-1?e.pop():Yt.call(e,i,1),--this.size,0))},Ni.prototype.get=function(t){var e=this.__data__,i=Qi(e,t);return i<0?o:e[i][1]},Ni.prototype.has=function(t){return Qi(this.__data__,t)>-1},Ni.prototype.set=function(t,e){var i=this.__data__,n=Qi(i,t);return n<0?(++this.size,i.push([t,e])):i[n][1]=e,this},Gi.prototype.clear=function(){this.size=0,this.__data__={hash:new Vi,map:new(Ei||Ni),string:new Vi}},Gi.prototype.delete=function(t){var e=lr(this,t).delete(t);return this.size-=e?1:0,e},Gi.prototype.get=function(t){return lr(this,t).get(t)},Gi.prototype.has=function(t){return lr(this,t).has(t)},Gi.prototype.set=function(t,e){var i=lr(this,t),n=i.size;return i.set(t,e),this.size+=i.size==n?0:1,this},Ui.prototype.add=Ui.prototype.push=function(t){return this.__data__.set(t,a),this},Ui.prototype.has=function(t){return this.__data__.has(t)},qi.prototype.clear=function(){this.__data__=new Ni,this.size=0},qi.prototype.delete=function(t){var e=this.__data__,i=e.delete(t);return this.size=e.size,i},qi.prototype.get=function(t){return this.__data__.get(t)},qi.prototype.has=function(t){return this.__data__.has(t)},qi.prototype.set=function(t,e){var i=this.__data__;if(i instanceof Ni){var n=i.__data__;if(!Ei||n.length<199)return n.push([t,e]),this.size=++i.size,this;i=this.__data__=new Gi(n)}return i.set(t,e),this.size=i.size,this};var hn=Mo(An),cn=Mo(vn,!0);function dn(t,e){var i=!0;return hn(t,(function(t,n,o){return i=!!e(t,n,o)})),i}function pn(t,e,i){for(var n=-1,r=t.length;++n<r;){var a=t[n],l=e(a);if(null!=l&&(s===o?l==l&&!ll(l):i(l,s)))var s=l,u=a}return u}function bn(t,e){var i=[];return hn(t,(function(t,n,o){e(t,n,o)&&i.push(t)})),i}function mn(t,e,i,n,o){var r=-1,a=t.length;for(i||(i=mr),o||(o=[]);++r<a;){var l=t[r];e>0&&i(l)?e>1?mn(l,e-1,i,n,o):Le(o,l):n||(o[o.length]=l)}return o}var gn=Lo(),fn=Lo(!0);function An(t,e){return t&&gn(t,e,zl)}function vn(t,e){return t&&fn(t,e,zl)}function wn(t,e){return _e(e,(function(e){return Ja(t[e])}))}function Cn(t,e){for(var i=0,n=(e=fo(e,t)).length;null!=t&&i<n;)t=t[Ir(e[i++])];return i&&i==n?t:o}function En(t,e,i){var n=e(t);return Na(t)?n:Le(n,i(t))}function yn(t){return null==t?t===o?"[object Undefined]":"[object Null]":$t&&$t in xt(t)?function(t){var e=St.call(t,$t),i=t[$t];try{t[$t]=o;var n=!0}catch(t){}var r=It.call(t);return n&&(e?t[$t]=i:delete t[$t]),r}(t):function(t){return It.call(t)}(t)}function xn(t,e){return t>e}function Bn(t,e){return null!=t&&St.call(t,e)}function kn(t,e){return null!=t&&e in xt(t)}function Rn(t,e,i){for(var r=i?ze:Te,a=t[0].length,l=t.length,s=l,u=n(l),h=1/0,c=[];s--;){var d=t[s];s&&e&&(d=Me(d,Ke(e))),h=gi(d.length,h),u[s]=!i&&(e||a>=120&&d.length>=120)?new Ui(s&&d):o}d=t[0];var p=-1,b=u[0];t:for(;++p<a&&c.length<h;){var m=d[p],g=e?e(m):m;if(m=i||0!==m?m:0,!(b?Ze(b,g):r(c,g,i))){for(s=l;--s;){var f=u[s];if(!(f?Ze(f,g):r(t[s],g,i)))continue t}b&&b.push(g),c.push(m)}}return c}function _n(t,e,i){var n=null==(t=Br(t,e=fo(e,t)))?t:t[Ir(Kr(e))];return null==n?o:ye(n,t,i)}function Tn(t){return tl(t)&&yn(t)==m}function zn(t,e,i,n,r){return t===e||(null==t||null==e||!tl(t)&&!tl(e)?t!=t&&e!=e:function(t,e,i,n,r,a){var l=Na(t),s=Na(e),u=l?g:dr(t),h=s?g:dr(e),c=(u=u==m?x:u)==x,d=(h=h==m?x:h)==x,p=u==h;if(p&&Ya(t)){if(!Ya(e))return!1;l=!0,c=!1}if(p&&!c)return a||(a=new qi),l||sl(t)?Qo(t,e,i,n,r,a):function(t,e,i,n,o,r,a){switch(i){case L:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case M:return!(t.byteLength!=e.byteLength||!r(new Vt(t),new Vt(e)));case f:case A:case y:return Oa(+t,+e);case v:return t.name==e.name&&t.message==e.message;case k:case _:return t==e+"";case E:var l=oi;case R:var s=1&n;if(l||(l=li),t.size!=e.size&&!s)return!1;var u=a.get(t);if(u)return u==e;n|=2,a.set(t,e);var h=Qo(l(t),l(e),n,o,r,a);return a.delete(t),h;case T:if(Pi)return Pi.call(t)==Pi.call(e)}return!1}(t,e,u,i,n,r,a);if(!(1&i)){var b=c&&St.call(t,"__wrapped__"),w=d&&St.call(e,"__wrapped__");if(b||w){var C=b?t.value():t,B=w?e.value():e;return a||(a=new qi),r(C,B,i,n,a)}}return!!p&&(a||(a=new qi),function(t,e,i,n,r,a){var l=1&i,s=er(t),u=s.length;if(u!=er(e).length&&!l)return!1;for(var h=u;h--;){var c=s[h];if(!(l?c in e:St.call(e,c)))return!1}var d=a.get(t),p=a.get(e);if(d&&p)return d==e&&p==t;var b=!0;a.set(t,e),a.set(e,t);for(var m=l;++h<u;){var g=t[c=s[h]],f=e[c];if(n)var A=l?n(f,g,c,e,t,a):n(g,f,c,t,e,a);if(!(A===o?g===f||r(g,f,i,n,a):A)){b=!1;break}m||(m="constructor"==c)}if(b&&!m){var v=t.constructor,w=e.constructor;v==w||!("constructor"in t)||!("constructor"in e)||"function"==typeof v&&v instanceof v&&"function"==typeof w&&w instanceof w||(b=!1)}return a.delete(t),a.delete(e),b}(t,e,i,n,r,a))}(t,e,i,n,zn,r))}function Mn(t,e,i,n){var r=i.length,a=r,l=!n;if(null==t)return!a;for(t=xt(t);r--;){var s=i[r];if(l&&s[2]?s[1]!==t[s[0]]:!(s[0]in t))return!1}for(;++r<a;){var u=(s=i[r])[0],h=t[u],c=s[1];if(l&&s[2]){if(h===o&&!(u in t))return!1}else{var d=new qi;if(n)var p=n(h,c,u,t,e,d);if(!(p===o?zn(c,h,3,n,d):p))return!1}}return!0}function Ln(t){return!(!Qa(t)||(e=t,Pt&&Pt in e))&&(Ja(t)?Ot:mt).test(Fr(t));var e}function Sn(t){return"function"==typeof t?t:null==t?is:"object"==typeof t?Na(t)?Hn(t[0],t[1]):Fn(t):cs(t)}function Dn(t){if(!Cr(t))return bi(t);var e=[];for(var i in xt(t))St.call(t,i)&&"constructor"!=i&&e.push(i);return e}function Pn(t,e){return t<e}function In(t,e){var i=-1,o=Ua(t)?n(t.length):[];return hn(t,(function(t,n,r){o[++i]=e(t,n,r)})),o}function Fn(t){var e=sr(t);return 1==e.length&&e[0][2]?yr(e[0][0],e[0][1]):function(i){return i===t||Mn(i,t,e)}}function Hn(t,e){return Ar(t)&&Er(e)?yr(Ir(t),e):function(i){var n=Bl(i,t);return n===o&&n===e?kl(i,t):zn(e,n,3)}}function On(t,e,i,n,r){t!==e&&gn(e,(function(a,l){if(r||(r=new qi),Qa(a))!function(t,e,i,n,r,a,l){var s=kr(t,i),u=kr(e,i),h=l.get(u);if(h)Zi(t,i,h);else{var c=a?a(s,u,i+"",t,e,l):o,d=c===o;if(d){var p=Na(u),b=!p&&Ya(u),m=!p&&!b&&sl(u);c=u,p||b||m?Na(s)?c=s:qa(s)?c=Ro(s):b?(d=!1,c=Co(u,!0)):m?(d=!1,c=yo(u,!0)):c=[]:nl(u)||Va(u)?(c=s,Va(s)?c=gl(s):Qa(s)&&!Ja(s)||(c=br(u))):d=!1}d&&(l.set(u,c),r(c,u,n,a,l),l.delete(u)),Zi(t,i,c)}}(t,e,l,i,On,n,r);else{var s=n?n(kr(t,l),a,l+"",t,e,r):o;s===o&&(s=a),Zi(t,l,s)}}),Ml)}function Wn(t,e){var i=t.length;if(i)return gr(e+=e<0?i:0,i)?t[e]:o}function jn(t,e,i){e=e.length?Me(e,(function(t){return Na(t)?function(e){return Cn(e,1===t.length?t[0]:t)}:t})):[is];var n=-1;e=Me(e,Ke(ar()));var o=In(t,(function(t,i,o){var r=Me(e,(function(e){return e(t)}));return{criteria:r,index:++n,value:t}}));return function(t,e){var n=t.length;for(t.sort((function(t,e){return function(t,e,i){for(var n=-1,o=t.criteria,r=e.criteria,a=o.length,l=i.length;++n<a;){var s=xo(o[n],r[n]);if(s)return n>=l?s:s*("desc"==i[n]?-1:1)}return t.index-e.index}(t,e,i)}));n--;)t[n]=t[n].value;return t}(o)}function Vn(t,e,i){for(var n=-1,o=e.length,r={};++n<o;){var a=e[n],l=Cn(t,a);i(l,a)&&Jn(r,fo(a,t),l)}return r}function Nn(t,e,i,n){var o=n?We:Oe,r=-1,a=e.length,l=t;for(t===e&&(e=Ro(e)),i&&(l=Me(t,Ke(i)));++r<a;)for(var s=0,u=e[r],h=i?i(u):u;(s=o(l,h,s,n))>-1;)l!==t&&Yt.call(l,s,1),Yt.call(t,s,1);return t}function Gn(t,e){for(var i=t?e.length:0,n=i-1;i--;){var o=e[i];if(i==n||o!==r){var r=o;gr(o)?Yt.call(t,o,1):so(t,o)}}return t}function Un(t,e){return t+pe(vi()*(e-t+1))}function qn(t,e){var i="";if(!t||e<1||e>c)return i;do{e%2&&(i+=t),(e=pe(e/2))&&(t+=t)}while(e);return i}function Yn(t,e){return Tr(xr(t,e,is),t+"")}function Xn(t){return Xi(Ol(t))}function Kn(t,e){var i=Ol(t);return Lr(i,rn(e,0,i.length))}function Jn(t,e,i,n){if(!Qa(t))return t;for(var r=-1,a=(e=fo(e,t)).length,l=a-1,s=t;null!=s&&++r<a;){var u=Ir(e[r]),h=i;if("__proto__"===u||"constructor"===u||"prototype"===u)return t;if(r!=l){var c=s[u];(h=n?n(c,u,s):o)===o&&(h=Qa(c)?c:gr(e[r+1])?[]:{})}$i(s,u,h),s=s[u]}return t}var Zn=Ri?function(t,e){return Ri.set(t,e),t}:is,$n=te?function(t,e){return te(t,"toString",{configurable:!0,enumerable:!1,value:Ql(e),writable:!0})}:is;function Qn(t){return Lr(Ol(t))}function to(t,e,i){var o=-1,r=t.length;e<0&&(e=-e>r?0:r+e),(i=i>r?r:i)<0&&(i+=r),r=e>i?0:i-e>>>0,e>>>=0;for(var a=n(r);++o<r;)a[o]=t[o+e];return a}function eo(t,e){var i;return hn(t,(function(t,n,o){return!(i=e(t,n,o))})),!!i}function io(t,e,i){var n=0,o=null==t?n:t.length;if("number"==typeof e&&e==e&&o<=2147483647){for(;n<o;){var r=n+o>>>1,a=t[r];null!==a&&!ll(a)&&(i?a<=e:a<e)?n=r+1:o=r}return o}return no(t,e,is,i)}function no(t,e,i,n){var r=0,a=null==t?0:t.length;if(0===a)return 0;for(var l=(e=i(e))!=e,s=null===e,u=ll(e),h=e===o;r<a;){var c=pe((r+a)/2),d=i(t[c]),p=d!==o,b=null===d,m=d==d,g=ll(d);if(l)var f=n||m;else f=h?m&&(n||p):s?m&&p&&(n||!b):u?m&&p&&!b&&(n||!g):!b&&!g&&(n?d<=e:d<e);f?r=c+1:a=c}return gi(a,4294967294)}function oo(t,e){for(var i=-1,n=t.length,o=0,r=[];++i<n;){var a=t[i],l=e?e(a):a;if(!i||!Oa(l,s)){var s=l;r[o++]=0===a?0:a}}return r}function ro(t){return"number"==typeof t?t:ll(t)?d:+t}function ao(t){if("string"==typeof t)return t;if(Na(t))return Me(t,ao)+"";if(ll(t))return Ii?Ii.call(t):"";var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function lo(t,e,i){var n=-1,o=Te,r=t.length,a=!0,l=[],s=l;if(i)a=!1,o=ze;else if(r>=200){var u=e?null:Yo(t);if(u)return li(u);a=!1,o=Ze,s=new Ui}else s=e?[]:l;t:for(;++n<r;){var h=t[n],c=e?e(h):h;if(h=i||0!==h?h:0,a&&c==c){for(var d=s.length;d--;)if(s[d]===c)continue t;e&&s.push(c),l.push(h)}else o(s,c,i)||(s!==l&&s.push(c),l.push(h))}return l}function so(t,e){return null==(t=Br(t,e=fo(e,t)))||delete t[Ir(Kr(e))]}function uo(t,e,i,n){return Jn(t,e,i(Cn(t,e)),n)}function ho(t,e,i,n){for(var o=t.length,r=n?o:-1;(n?r--:++r<o)&&e(t[r],r,t););return i?to(t,n?0:r,n?r+1:o):to(t,n?r+1:0,n?o:r)}function co(t,e){var i=t;return i instanceof ji&&(i=i.value()),Se(e,(function(t,e){return e.func.apply(e.thisArg,Le([t],e.args))}),i)}function po(t,e,i){var o=t.length;if(o<2)return o?lo(t[0]):[];for(var r=-1,a=n(o);++r<o;)for(var l=t[r],s=-1;++s<o;)s!=r&&(a[r]=un(a[r]||l,t[s],e,i));return lo(mn(a,1),e,i)}function bo(t,e,i){for(var n=-1,r=t.length,a=e.length,l={};++n<r;){var s=n<a?e[n]:o;i(l,t[n],s)}return l}function mo(t){return qa(t)?t:[]}function go(t){return"function"==typeof t?t:is}function fo(t,e){return Na(t)?t:Ar(t,e)?[t]:Pr(fl(t))}var Ao=Yn;function vo(t,e,i){var n=t.length;return i=i===o?n:i,!e&&i>=n?t:to(t,e,i)}var wo=ae||function(t){return ce.clearTimeout(t)};function Co(t,e){if(e)return t.slice();var i=t.length,n=Nt?Nt(i):new t.constructor(i);return t.copy(n),n}function Eo(t){var e=new t.constructor(t.byteLength);return new Vt(e).set(new Vt(t)),e}function yo(t,e){var i=e?Eo(t.buffer):t.buffer;return new t.constructor(i,t.byteOffset,t.length)}function xo(t,e){if(t!==e){var i=t!==o,n=null===t,r=t==t,a=ll(t),l=e!==o,s=null===e,u=e==e,h=ll(e);if(!s&&!h&&!a&&t>e||a&&l&&u&&!s&&!h||n&&l&&u||!i&&u||!r)return 1;if(!n&&!a&&!h&&t<e||h&&i&&r&&!n&&!a||s&&i&&r||!l&&r||!u)return-1}return 0}function Bo(t,e,i,o){for(var r=-1,a=t.length,l=i.length,s=-1,u=e.length,h=mi(a-l,0),c=n(u+h),d=!o;++s<u;)c[s]=e[s];for(;++r<l;)(d||r<a)&&(c[i[r]]=t[r]);for(;h--;)c[s++]=t[r++];return c}function ko(t,e,i,o){for(var r=-1,a=t.length,l=-1,s=i.length,u=-1,h=e.length,c=mi(a-s,0),d=n(c+h),p=!o;++r<c;)d[r]=t[r];for(var b=r;++u<h;)d[b+u]=e[u];for(;++l<s;)(p||r<a)&&(d[b+i[l]]=t[r++]);return d}function Ro(t,e){var i=-1,o=t.length;for(e||(e=n(o));++i<o;)e[i]=t[i];return e}function _o(t,e,i,n){var r=!i;i||(i={});for(var a=-1,l=e.length;++a<l;){var s=e[a],u=n?n(i[s],t[s],s,i,t):o;u===o&&(u=t[s]),r?nn(i,s,u):$i(i,s,u)}return i}function To(t,e){return function(i,n){var o=Na(i)?xe:tn,r=e?e():{};return o(i,t,ar(n,2),r)}}function zo(t){return Yn((function(e,i){var n=-1,r=i.length,a=r>1?i[r-1]:o,l=r>2?i[2]:o;for(a=t.length>3&&"function"==typeof a?(r--,a):o,l&&fr(i[0],i[1],l)&&(a=r<3?o:a,r=1),e=xt(e);++n<r;){var s=i[n];s&&t(e,s,n,a)}return e}))}function Mo(t,e){return function(i,n){if(null==i)return i;if(!Ua(i))return t(i,n);for(var o=i.length,r=e?o:-1,a=xt(i);(e?r--:++r<o)&&!1!==n(a[r],r,a););return i}}function Lo(t){return function(e,i,n){for(var o=-1,r=xt(e),a=n(e),l=a.length;l--;){var s=a[t?l:++o];if(!1===i(r[s],s,r))break}return e}}function So(t){return function(e){var i=ni(e=fl(e))?hi(e):o,n=i?i[0]:e.charAt(0),r=i?vo(i,1).join(""):e.slice(1);return n[t]()+r}}function Do(t){return function(e){return Se(Jl(Vl(e).replace(Jt,"")),t,"")}}function Po(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var i=Hi(t.prototype),n=t.apply(i,e);return Qa(n)?n:i}}function Io(t){return function(e,i,n){var r=xt(e);if(!Ua(e)){var a=ar(i,3);e=zl(e),i=function(t){return a(r[t],t,r)}}var l=t(e,i,n);return l>-1?r[a?e[l]:l]:o}}function Fo(t){return tr((function(e){var i=e.length,n=i,a=Wi.prototype.thru;for(t&&e.reverse();n--;){var l=e[n];if("function"!=typeof l)throw new Rt(r);if(a&&!s&&"wrapper"==or(l))var s=new Wi([],!0)}for(n=s?n:i;++n<i;){var u=or(l=e[n]),h="wrapper"==u?nr(l):o;s=h&&vr(h[0])&&424==h[1]&&!h[4].length&&1==h[9]?s[or(h[0])].apply(s,h[3]):1==l.length&&vr(l)?s[u]():s.thru(l)}return function(){var t=arguments,n=t[0];if(s&&1==t.length&&Na(n))return s.plant(n).value();for(var o=0,r=i?e[o].apply(this,t):n;++o<i;)r=e[o].call(this,r);return r}}))}function Ho(t,e,i,r,a,l,s,h,c,d){var p=e&u,b=1&e,m=2&e,g=24&e,f=512&e,A=m?o:Po(t);return function u(){for(var v=arguments.length,w=n(v),C=v;C--;)w[C]=arguments[C];if(g)var E=rr(u),y=function(t,e){for(var i=t.length,n=0;i--;)t[i]===e&&++n;return n}(w,E);if(r&&(w=Bo(w,r,a,g)),l&&(w=ko(w,l,s,g)),v-=y,g&&v<d){var x=ai(w,E);return Uo(t,e,Ho,u.placeholder,i,w,x,h,c,d-v)}var B=b?i:this,k=m?B[t]:t;return v=w.length,h?w=function(t,e){for(var i=t.length,n=gi(e.length,i),r=Ro(t);n--;){var a=e[n];t[n]=gr(a,i)?r[a]:o}return t}(w,h):f&&v>1&&w.reverse(),p&&c<v&&(w.length=c),this&&this!==ce&&this instanceof u&&(k=A||Po(k)),k.apply(B,w)}}function Oo(t,e){return function(i,n){return function(t,e,i,n){return An(t,(function(t,o,r){e(n,i(t),o,r)})),n}(i,t,e(n),{})}}function Wo(t,e){return function(i,n){var r;if(i===o&&n===o)return e;if(i!==o&&(r=i),n!==o){if(r===o)return n;"string"==typeof i||"string"==typeof n?(i=ao(i),n=ao(n)):(i=ro(i),n=ro(n)),r=t(i,n)}return r}}function jo(t){return tr((function(e){return e=Me(e,Ke(ar())),Yn((function(i){var n=this;return t(e,(function(t){return ye(t,n,i)}))}))}))}function Vo(t,e){var i=(e=e===o?" ":ao(e)).length;if(i<2)return i?qn(e,t):e;var n=qn(e,de(t/ui(e)));return ni(e)?vo(hi(n),0,t).join(""):n.slice(0,t)}function No(t){return function(e,i,r){return r&&"number"!=typeof r&&fr(e,i,r)&&(i=r=o),e=dl(e),i===o?(i=e,e=0):i=dl(i),function(t,e,i,o){for(var r=-1,a=mi(de((e-t)/(i||1)),0),l=n(a);a--;)l[o?a:++r]=t,t+=i;return l}(e,i,r=r===o?e<i?1:-1:dl(r),t)}}function Go(t){return function(e,i){return"string"==typeof e&&"string"==typeof i||(e=ml(e),i=ml(i)),t(e,i)}}function Uo(t,e,i,n,r,a,l,u,h,c){var d=8&e;e|=d?s:64,4&(e&=~(d?64:s))||(e&=-4);var p=[t,e,r,d?a:o,d?l:o,d?o:a,d?o:l,u,h,c],b=i.apply(o,p);return vr(t)&&Rr(b,p),b.placeholder=n,zr(b,t,e)}function qo(t){var e=yt[t];return function(t,i){if(t=ml(t),(i=null==i?0:gi(pl(i),292))&&Ie(t)){var n=(fl(t)+"e").split("e");return+((n=(fl(e(n[0]+"e"+(+n[1]+i)))+"e").split("e"))[0]+"e"+(+n[1]-i))}return e(t)}}var Yo=xi&&1/li(new xi([,-0]))[1]==h?function(t){return new xi(t)}:ls;function Xo(t){return function(e){var i=dr(e);return i==E?oi(e):i==R?si(e):function(t,e){return Me(e,(function(e){return[e,t[e]]}))}(e,t(e))}}function Ko(t,e,i,a,h,c,d,p){var b=2&e;if(!b&&"function"!=typeof t)throw new Rt(r);var m=a?a.length:0;if(m||(e&=-97,a=h=o),d=d===o?d:mi(pl(d),0),p=p===o?p:pl(p),m-=h?h.length:0,64&e){var g=a,f=h;a=h=o}var A=b?o:nr(t),v=[t,e,i,a,h,g,f,c,d,p];if(A&&function(t,e){var i=t[1],n=e[1],o=i|n,r=o<131,a=n==u&&8==i||n==u&&256==i&&t[7].length<=e[8]||384==n&&e[7].length<=e[8]&&8==i;if(!r&&!a)return t;1&n&&(t[2]=e[2],o|=1&i?0:4);var s=e[3];if(s){var h=t[3];t[3]=h?Bo(h,s,e[4]):s,t[4]=h?ai(t[3],l):e[4]}(s=e[5])&&(h=t[5],t[5]=h?ko(h,s,e[6]):s,t[6]=h?ai(t[5],l):e[6]),(s=e[7])&&(t[7]=s),n&u&&(t[8]=null==t[8]?e[8]:gi(t[8],e[8])),null==t[9]&&(t[9]=e[9]),t[0]=e[0],t[1]=o}(v,A),t=v[0],e=v[1],i=v[2],a=v[3],h=v[4],!(p=v[9]=v[9]===o?b?0:t.length:mi(v[9]-m,0))&&24&e&&(e&=-25),e&&1!=e)w=8==e||16==e?function(t,e,i){var r=Po(t);return function a(){for(var l=arguments.length,s=n(l),u=l,h=rr(a);u--;)s[u]=arguments[u];var c=l<3&&s[0]!==h&&s[l-1]!==h?[]:ai(s,h);return(l-=c.length)<i?Uo(t,e,Ho,a.placeholder,o,s,c,o,o,i-l):ye(this&&this!==ce&&this instanceof a?r:t,this,s)}}(t,e,p):e!=s&&33!=e||h.length?Ho.apply(o,v):function(t,e,i,o){var r=1&e,a=Po(t);return function e(){for(var l=-1,s=arguments.length,u=-1,h=o.length,c=n(h+s),d=this&&this!==ce&&this instanceof e?a:t;++u<h;)c[u]=o[u];for(;s--;)c[u++]=arguments[++l];return ye(d,r?i:this,c)}}(t,e,i,a);else var w=function(t,e,i){var n=1&e,o=Po(t);return function e(){return(this&&this!==ce&&this instanceof e?o:t).apply(n?i:this,arguments)}}(t,e,i);return zr((A?Zn:Rr)(w,v),t,e)}function Jo(t,e,i,n){return t===o||Oa(t,zt[i])&&!St.call(n,i)?e:t}function Zo(t,e,i,n,r,a){return Qa(t)&&Qa(e)&&(a.set(e,t),On(t,e,o,Zo,a),a.delete(e)),t}function $o(t){return nl(t)?o:t}function Qo(t,e,i,n,r,a){var l=1&i,s=t.length,u=e.length;if(s!=u&&!(l&&u>s))return!1;var h=a.get(t),c=a.get(e);if(h&&c)return h==e&&c==t;var d=-1,p=!0,b=2&i?new Ui:o;for(a.set(t,e),a.set(e,t);++d<s;){var m=t[d],g=e[d];if(n)var f=l?n(g,m,d,e,t,a):n(m,g,d,t,e,a);if(f!==o){if(f)continue;p=!1;break}if(b){if(!Pe(e,(function(t,e){if(!Ze(b,e)&&(m===t||r(m,t,i,n,a)))return b.push(e)}))){p=!1;break}}else if(m!==g&&!r(m,g,i,n,a)){p=!1;break}}return a.delete(t),a.delete(e),p}function tr(t){return Tr(xr(t,o,Gr),t+"")}function er(t){return En(t,zl,hr)}function ir(t){return En(t,Ml,cr)}var nr=Ri?function(t){return Ri.get(t)}:ls;function or(t){for(var e=t.name+"",i=_i[e],n=St.call(_i,e)?i.length:0;n--;){var o=i[n],r=o.func;if(null==r||r==t)return o.name}return e}function rr(t){return(St.call(Fi,"placeholder")?Fi:t).placeholder}function ar(){var t=Fi.iteratee||ns;return t=t===ns?Sn:t,arguments.length?t(arguments[0],arguments[1]):t}function lr(t,e){var i,n,o=t.__data__;return("string"==(n=typeof(i=e))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==i:null===i)?o["string"==typeof e?"string":"hash"]:o.map}function sr(t){for(var e=zl(t),i=e.length;i--;){var n=e[i],o=t[n];e[i]=[n,o,Er(o)]}return e}function ur(t,e){var i=function(t,e){return null==t?o:t[e]}(t,e);return Ln(i)?i:o}var hr=me?function(t){return null==t?[]:(t=xt(t),_e(me(t),(function(e){return qt.call(t,e)})))}:bs,cr=me?function(t){for(var e=[];t;)Le(e,hr(t)),t=Gt(t);return e}:bs,dr=yn;function pr(t,e,i){for(var n=-1,o=(e=fo(e,t)).length,r=!1;++n<o;){var a=Ir(e[n]);if(!(r=null!=t&&i(t,a)))break;t=t[a]}return r||++n!=o?r:!!(o=null==t?0:t.length)&&$a(o)&&gr(a,o)&&(Na(t)||Va(t))}function br(t){return"function"!=typeof t.constructor||Cr(t)?{}:Hi(Gt(t))}function mr(t){return Na(t)||Va(t)||!!(Xt&&t&&t[Xt])}function gr(t,e){var i=typeof t;return!!(e=null==e?c:e)&&("number"==i||"symbol"!=i&&ft.test(t))&&t>-1&&t%1==0&&t<e}function fr(t,e,i){if(!Qa(i))return!1;var n=typeof e;return!!("number"==n?Ua(i)&&gr(e,i.length):"string"==n&&e in i)&&Oa(i[e],t)}function Ar(t,e){if(Na(t))return!1;var i=typeof t;return!("number"!=i&&"symbol"!=i&&"boolean"!=i&&null!=t&&!ll(t))||Q.test(t)||!$.test(t)||null!=e&&t in xt(e)}function vr(t){var e=or(t),i=Fi[e];if("function"!=typeof i||!(e in ji.prototype))return!1;if(t===i)return!0;var n=nr(i);return!!n&&t===n[0]}(Ci&&dr(new Ci(new ArrayBuffer(1)))!=L||Ei&&dr(new Ei)!=E||yi&&dr(yi.resolve())!=B||xi&&dr(new xi)!=R||Bi&&dr(new Bi)!=z)&&(dr=function(t){var e=yn(t),i=e==x?t.constructor:o,n=i?Fr(i):"";if(n)switch(n){case Ti:return L;case zi:return E;case Mi:return B;case Li:return R;case Si:return z}return e});var wr=Mt?Ja:ms;function Cr(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||zt)}function Er(t){return t==t&&!Qa(t)}function yr(t,e){return function(i){return null!=i&&i[t]===e&&(e!==o||t in xt(i))}}function xr(t,e,i){return e=mi(e===o?t.length-1:e,0),function(){for(var o=arguments,r=-1,a=mi(o.length-e,0),l=n(a);++r<a;)l[r]=o[e+r];r=-1;for(var s=n(e+1);++r<e;)s[r]=o[r];return s[e]=i(l),ye(t,this,s)}}function Br(t,e){return e.length<2?t:Cn(t,to(e,0,-1))}function kr(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}var Rr=Mr(Zn),_r=he||function(t,e){return ce.setTimeout(t,e)},Tr=Mr($n);function zr(t,e,i){var n=e+"";return Tr(t,function(t,e){var i=e.length;if(!i)return t;var n=i-1;return e[n]=(i>1?"& ":"")+e[n],e=e.join(i>2?", ":" "),t.replace(rt,"{\n/* [wrapped with "+e+"] */\n")}(n,function(t,e){return Be(b,(function(i){var n="_."+i[0];e&i[1]&&!Te(t,n)&&t.push(n)})),t.sort()}(function(t){var e=t.match(at);return e?e[1].split(lt):[]}(n),i)))}function Mr(t){var e=0,i=0;return function(){var n=fi(),r=16-(n-i);if(i=n,r>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(o,arguments)}}function Lr(t,e){var i=-1,n=t.length,r=n-1;for(e=e===o?n:e;++i<e;){var a=Un(i,r),l=t[a];t[a]=t[i],t[i]=l}return t.length=e,t}var Sr,Dr,Pr=(Sr=Sa((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(tt,(function(t,i,n,o){e.push(n?o.replace(ht,"$1"):i||t)})),e}),(function(t){return 500===Dr.size&&Dr.clear(),t})),Dr=Sr.cache,Sr);function Ir(t){if("string"==typeof t||ll(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function Fr(t){if(null!=t){try{return Lt.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Hr(t){if(t instanceof ji)return t.clone();var e=new Wi(t.__wrapped__,t.__chain__);return e.__actions__=Ro(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var Or=Yn((function(t,e){return qa(t)?un(t,mn(e,1,qa,!0)):[]})),Wr=Yn((function(t,e){var i=Kr(e);return qa(i)&&(i=o),qa(t)?un(t,mn(e,1,qa,!0),ar(i,2)):[]})),jr=Yn((function(t,e){var i=Kr(e);return qa(i)&&(i=o),qa(t)?un(t,mn(e,1,qa,!0),o,i):[]}));function Vr(t,e,i){var n=null==t?0:t.length;if(!n)return-1;var o=null==i?0:pl(i);return o<0&&(o=mi(n+o,0)),He(t,ar(e,3),o)}function Nr(t,e,i){var n=null==t?0:t.length;if(!n)return-1;var r=n-1;return i!==o&&(r=pl(i),r=i<0?mi(n+r,0):gi(r,n-1)),He(t,ar(e,3),r,!0)}function Gr(t){return null!=t&&t.length?mn(t,1):[]}function Ur(t){return t&&t.length?t[0]:o}var qr=Yn((function(t){var e=Me(t,mo);return e.length&&e[0]===t[0]?Rn(e):[]})),Yr=Yn((function(t){var e=Kr(t),i=Me(t,mo);return e===Kr(i)?e=o:i.pop(),i.length&&i[0]===t[0]?Rn(i,ar(e,2)):[]})),Xr=Yn((function(t){var e=Kr(t),i=Me(t,mo);return(e="function"==typeof e?e:o)&&i.pop(),i.length&&i[0]===t[0]?Rn(i,o,e):[]}));function Kr(t){var e=null==t?0:t.length;return e?t[e-1]:o}var Jr=Yn(Zr);function Zr(t,e){return t&&t.length&&e&&e.length?Nn(t,e):t}var $r=tr((function(t,e){var i=null==t?0:t.length,n=on(t,e);return Gn(t,Me(e,(function(t){return gr(t,i)?+t:t})).sort(xo)),n}));function Qr(t){return null==t?t:wi.call(t)}var ta=Yn((function(t){return lo(mn(t,1,qa,!0))})),ea=Yn((function(t){var e=Kr(t);return qa(e)&&(e=o),lo(mn(t,1,qa,!0),ar(e,2))})),ia=Yn((function(t){var e=Kr(t);return e="function"==typeof e?e:o,lo(mn(t,1,qa,!0),o,e)}));function na(t){if(!t||!t.length)return[];var e=0;return t=_e(t,(function(t){if(qa(t))return e=mi(t.length,e),!0})),Ye(e,(function(e){return Me(t,Ne(e))}))}function oa(t,e){if(!t||!t.length)return[];var i=na(t);return null==e?i:Me(i,(function(t){return ye(e,o,t)}))}var ra=Yn((function(t,e){return qa(t)?un(t,e):[]})),aa=Yn((function(t){return po(_e(t,qa))})),la=Yn((function(t){var e=Kr(t);return qa(e)&&(e=o),po(_e(t,qa),ar(e,2))})),sa=Yn((function(t){var e=Kr(t);return e="function"==typeof e?e:o,po(_e(t,qa),o,e)})),ua=Yn(na),ha=Yn((function(t){var e=t.length,i=e>1?t[e-1]:o;return i="function"==typeof i?(t.pop(),i):o,oa(t,i)}));function ca(t){var e=Fi(t);return e.__chain__=!0,e}function da(t,e){return e(t)}var pa=tr((function(t){var e=t.length,i=e?t[0]:0,n=this.__wrapped__,r=function(e){return on(e,t)};return!(e>1||this.__actions__.length)&&n instanceof ji&&gr(i)?((n=n.slice(i,+i+(e?1:0))).__actions__.push({func:da,args:[r],thisArg:o}),new Wi(n,this.__chain__).thru((function(t){return e&&!t.length&&t.push(o),t}))):this.thru(r)})),ba=To((function(t,e,i){St.call(t,i)?++t[i]:nn(t,i,1)})),ma=Io(Vr),ga=Io(Nr);function fa(t,e){return(Na(t)?Be:hn)(t,ar(e,3))}function Aa(t,e){return(Na(t)?ke:cn)(t,ar(e,3))}var va=To((function(t,e,i){St.call(t,i)?t[i].push(e):nn(t,i,[e])})),wa=Yn((function(t,e,i){var o=-1,r="function"==typeof e,a=Ua(t)?n(t.length):[];return hn(t,(function(t){a[++o]=r?ye(e,t,i):_n(t,e,i)})),a})),Ca=To((function(t,e,i){nn(t,i,e)}));function Ea(t,e){return(Na(t)?Me:In)(t,ar(e,3))}var ya=To((function(t,e,i){t[i?0:1].push(e)}),(function(){return[[],[]]})),xa=Yn((function(t,e){if(null==t)return[];var i=e.length;return i>1&&fr(t,e[0],e[1])?e=[]:i>2&&fr(e[0],e[1],e[2])&&(e=[e[0]]),jn(t,mn(e,1),[])})),Ba=ue||function(){return ce.Date.now()};function ka(t,e,i){return e=i?o:e,e=t&&null==e?t.length:e,Ko(t,u,o,o,o,o,e)}function Ra(t,e){var i;if("function"!=typeof e)throw new Rt(r);return t=pl(t),function(){return--t>0&&(i=e.apply(this,arguments)),t<=1&&(e=o),i}}var _a=Yn((function(t,e,i){var n=1;if(i.length){var o=ai(i,rr(_a));n|=s}return Ko(t,n,e,i,o)})),Ta=Yn((function(t,e,i){var n=3;if(i.length){var o=ai(i,rr(Ta));n|=s}return Ko(e,n,t,i,o)}));function za(t,e,i){var n,a,l,s,u,h,c=0,d=!1,p=!1,b=!0;if("function"!=typeof t)throw new Rt(r);function m(e){var i=n,r=a;return n=a=o,c=e,s=t.apply(r,i)}function g(t){var i=t-h;return h===o||i>=e||i<0||p&&t-c>=l}function f(){var t=Ba();if(g(t))return A(t);u=_r(f,function(t){var i=e-(t-h);return p?gi(i,l-(t-c)):i}(t))}function A(t){return u=o,b&&n?m(t):(n=a=o,s)}function v(){var t=Ba(),i=g(t);if(n=arguments,a=this,h=t,i){if(u===o)return function(t){return c=t,u=_r(f,e),d?m(t):s}(h);if(p)return wo(u),u=_r(f,e),m(h)}return u===o&&(u=_r(f,e)),s}return e=ml(e)||0,Qa(i)&&(d=!!i.leading,l=(p="maxWait"in i)?mi(ml(i.maxWait)||0,e):l,b="trailing"in i?!!i.trailing:b),v.cancel=function(){u!==o&&wo(u),c=0,n=h=a=u=o},v.flush=function(){return u===o?s:A(Ba())},v}var Ma=Yn((function(t,e){return sn(t,1,e)})),La=Yn((function(t,e,i){return sn(t,ml(e)||0,i)}));function Sa(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new Rt(r);var i=function(){var n=arguments,o=e?e.apply(this,n):n[0],r=i.cache;if(r.has(o))return r.get(o);var a=t.apply(this,n);return i.cache=r.set(o,a)||r,a};return i.cache=new(Sa.Cache||Gi),i}function Da(t){if("function"!=typeof t)throw new Rt(r);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}Sa.Cache=Gi;var Pa=Ao((function(t,e){var i=(e=1==e.length&&Na(e[0])?Me(e[0],Ke(ar())):Me(mn(e,1),Ke(ar()))).length;return Yn((function(n){for(var o=-1,r=gi(n.length,i);++o<r;)n[o]=e[o].call(this,n[o]);return ye(t,this,n)}))})),Ia=Yn((function(t,e){var i=ai(e,rr(Ia));return Ko(t,s,o,e,i)})),Fa=Yn((function(t,e){var i=ai(e,rr(Fa));return Ko(t,64,o,e,i)})),Ha=tr((function(t,e){return Ko(t,256,o,o,o,e)}));function Oa(t,e){return t===e||t!=t&&e!=e}var Wa=Go(xn),ja=Go((function(t,e){return t>=e})),Va=Tn(function(){return arguments}())?Tn:function(t){return tl(t)&&St.call(t,"callee")&&!qt.call(t,"callee")},Na=n.isArray,Ga=fe?Ke(fe):function(t){return tl(t)&&yn(t)==M};function Ua(t){return null!=t&&$a(t.length)&&!Ja(t)}function qa(t){return tl(t)&&Ua(t)}var Ya=ge||ms,Xa=Ae?Ke(Ae):function(t){return tl(t)&&yn(t)==A};function Ka(t){if(!tl(t))return!1;var e=yn(t);return e==v||"[object DOMException]"==e||"string"==typeof t.message&&"string"==typeof t.name&&!nl(t)}function Ja(t){if(!Qa(t))return!1;var e=yn(t);return e==w||e==C||"[object AsyncFunction]"==e||"[object Proxy]"==e}function Za(t){return"number"==typeof t&&t==pl(t)}function $a(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=c}function Qa(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function tl(t){return null!=t&&"object"==typeof t}var el=ve?Ke(ve):function(t){return tl(t)&&dr(t)==E};function il(t){return"number"==typeof t||tl(t)&&yn(t)==y}function nl(t){if(!tl(t)||yn(t)!=x)return!1;var e=Gt(t);if(null===e)return!0;var i=St.call(e,"constructor")&&e.constructor;return"function"==typeof i&&i instanceof i&&Lt.call(i)==Ft}var ol=we?Ke(we):function(t){return tl(t)&&yn(t)==k},rl=Ce?Ke(Ce):function(t){return tl(t)&&dr(t)==R};function al(t){return"string"==typeof t||!Na(t)&&tl(t)&&yn(t)==_}function ll(t){return"symbol"==typeof t||tl(t)&&yn(t)==T}var sl=Ee?Ke(Ee):function(t){return tl(t)&&$a(t.length)&&!!oe[yn(t)]},ul=Go(Pn),hl=Go((function(t,e){return t<=e}));function cl(t){if(!t)return[];if(Ua(t))return al(t)?hi(t):Ro(t);if(Kt&&t[Kt])return function(t){for(var e,i=[];!(e=t.next()).done;)i.push(e.value);return i}(t[Kt]());var e=dr(t);return(e==E?oi:e==R?li:Ol)(t)}function dl(t){return t?(t=ml(t))===h||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function pl(t){var e=dl(t),i=e%1;return e==e?i?e-i:e:0}function bl(t){return t?rn(pl(t),0,p):0}function ml(t){if("number"==typeof t)return t;if(ll(t))return d;if(Qa(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=Qa(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=Xe(t);var i=bt.test(t);return i||gt.test(t)?se(t.slice(2),i?2:8):pt.test(t)?d:+t}function gl(t){return _o(t,Ml(t))}function fl(t){return null==t?"":ao(t)}var Al=zo((function(t,e){if(Cr(e)||Ua(e))_o(e,zl(e),t);else for(var i in e)St.call(e,i)&&$i(t,i,e[i])})),vl=zo((function(t,e){_o(e,Ml(e),t)})),wl=zo((function(t,e,i,n){_o(e,Ml(e),t,n)})),Cl=zo((function(t,e,i,n){_o(e,zl(e),t,n)})),El=tr(on),yl=Yn((function(t,e){t=xt(t);var i=-1,n=e.length,r=n>2?e[2]:o;for(r&&fr(e[0],e[1],r)&&(n=1);++i<n;)for(var a=e[i],l=Ml(a),s=-1,u=l.length;++s<u;){var h=l[s],c=t[h];(c===o||Oa(c,zt[h])&&!St.call(t,h))&&(t[h]=a[h])}return t})),xl=Yn((function(t){return t.push(o,Zo),ye(Sl,o,t)}));function Bl(t,e,i){var n=null==t?o:Cn(t,e);return n===o?i:n}function kl(t,e){return null!=t&&pr(t,e,kn)}var Rl=Oo((function(t,e,i){null!=e&&"function"!=typeof e.toString&&(e=It.call(e)),t[e]=i}),Ql(is)),_l=Oo((function(t,e,i){null!=e&&"function"!=typeof e.toString&&(e=It.call(e)),St.call(t,e)?t[e].push(i):t[e]=[i]}),ar),Tl=Yn(_n);function zl(t){return Ua(t)?Yi(t):Dn(t)}function Ml(t){return Ua(t)?Yi(t,!0):function(t){if(!Qa(t))return function(t){var e=[];if(null!=t)for(var i in xt(t))e.push(i);return e}(t);var e=Cr(t),i=[];for(var n in t)("constructor"!=n||!e&&St.call(t,n))&&i.push(n);return i}(t)}var Ll=zo((function(t,e,i){On(t,e,i)})),Sl=zo((function(t,e,i,n){On(t,e,i,n)})),Dl=tr((function(t,e){var i={};if(null==t)return i;var n=!1;e=Me(e,(function(e){return e=fo(e,t),n||(n=e.length>1),e})),_o(t,ir(t),i),n&&(i=an(i,7,$o));for(var o=e.length;o--;)so(i,e[o]);return i})),Pl=tr((function(t,e){return null==t?{}:function(t,e){return Vn(t,e,(function(e,i){return kl(t,i)}))}(t,e)}));function Il(t,e){if(null==t)return{};var i=Me(ir(t),(function(t){return[t]}));return e=ar(e),Vn(t,i,(function(t,i){return e(t,i[0])}))}var Fl=Xo(zl),Hl=Xo(Ml);function Ol(t){return null==t?[]:Je(t,zl(t))}var Wl=Do((function(t,e,i){return e=e.toLowerCase(),t+(i?jl(e):e)}));function jl(t){return Kl(fl(t).toLowerCase())}function Vl(t){return(t=fl(t))&&t.replace(At,ti).replace(Zt,"")}var Nl=Do((function(t,e,i){return t+(i?"-":"")+e.toLowerCase()})),Gl=Do((function(t,e,i){return t+(i?" ":"")+e.toLowerCase()})),Ul=So("toLowerCase"),ql=Do((function(t,e,i){return t+(i?"_":"")+e.toLowerCase()})),Yl=Do((function(t,e,i){return t+(i?" ":"")+Kl(e)})),Xl=Do((function(t,e,i){return t+(i?" ":"")+e.toUpperCase()})),Kl=So("toUpperCase");function Jl(t,e,i){return t=fl(t),(e=i?o:e)===o?function(t){return ee.test(t)}(t)?function(t){return t.match(Qt)||[]}(t):function(t){return t.match(st)||[]}(t):t.match(e)||[]}var Zl=Yn((function(t,e){try{return ye(t,o,e)}catch(t){return Ka(t)?t:new Ct(t)}})),$l=tr((function(t,e){return Be(e,(function(e){e=Ir(e),nn(t,e,_a(t[e],t))})),t}));function Ql(t){return function(){return t}}var ts=Fo(),es=Fo(!0);function is(t){return t}function ns(t){return Sn("function"==typeof t?t:an(t,1))}var os=Yn((function(t,e){return function(i){return _n(i,t,e)}})),rs=Yn((function(t,e){return function(i){return _n(t,i,e)}}));function as(t,e,i){var n=zl(e),o=wn(e,n);null!=i||Qa(e)&&(o.length||!n.length)||(i=e,e=t,t=this,o=wn(e,zl(e)));var r=!(Qa(i)&&"chain"in i&&!i.chain),a=Ja(t);return Be(o,(function(i){var n=e[i];t[i]=n,a&&(t.prototype[i]=function(){var e=this.__chain__;if(r||e){var i=t(this.__wrapped__);return(i.__actions__=Ro(this.__actions__)).push({func:n,args:arguments,thisArg:t}),i.__chain__=e,i}return n.apply(t,Le([this.value()],arguments))})})),t}function ls(){}var ss=jo(Me),us=jo(Re),hs=jo(Pe);function cs(t){return Ar(t)?Ne(Ir(t)):function(t){return function(e){return Cn(e,t)}}(t)}var ds=No(),ps=No(!0);function bs(){return[]}function ms(){return!1}var gs,fs=Wo((function(t,e){return t+e}),0),As=qo("ceil"),vs=Wo((function(t,e){return t/e}),1),ws=qo("floor"),Cs=Wo((function(t,e){return t*e}),1),Es=qo("round"),ys=Wo((function(t,e){return t-e}),0);return Fi.after=function(t,e){if("function"!=typeof e)throw new Rt(r);return t=pl(t),function(){if(--t<1)return e.apply(this,arguments)}},Fi.ary=ka,Fi.assign=Al,Fi.assignIn=vl,Fi.assignInWith=wl,Fi.assignWith=Cl,Fi.at=El,Fi.before=Ra,Fi.bind=_a,Fi.bindAll=$l,Fi.bindKey=Ta,Fi.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return Na(t)?t:[t]},Fi.chain=ca,Fi.chunk=function(t,e,i){e=(i?fr(t,e,i):e===o)?1:mi(pl(e),0);var r=null==t?0:t.length;if(!r||e<1)return[];for(var a=0,l=0,s=n(de(r/e));a<r;)s[l++]=to(t,a,a+=e);return s},Fi.compact=function(t){for(var e=-1,i=null==t?0:t.length,n=0,o=[];++e<i;){var r=t[e];r&&(o[n++]=r)}return o},Fi.concat=function(){var t=arguments.length;if(!t)return[];for(var e=n(t-1),i=arguments[0],o=t;o--;)e[o-1]=arguments[o];return Le(Na(i)?Ro(i):[i],mn(e,1))},Fi.cond=function(t){var e=null==t?0:t.length,i=ar();return t=e?Me(t,(function(t){if("function"!=typeof t[1])throw new Rt(r);return[i(t[0]),t[1]]})):[],Yn((function(i){for(var n=-1;++n<e;){var o=t[n];if(ye(o[0],this,i))return ye(o[1],this,i)}}))},Fi.conforms=function(t){return function(t){var e=zl(t);return function(i){return ln(i,t,e)}}(an(t,1))},Fi.constant=Ql,Fi.countBy=ba,Fi.create=function(t,e){var i=Hi(t);return null==e?i:en(i,e)},Fi.curry=function t(e,i,n){var r=Ko(e,8,o,o,o,o,o,i=n?o:i);return r.placeholder=t.placeholder,r},Fi.curryRight=function t(e,i,n){var r=Ko(e,16,o,o,o,o,o,i=n?o:i);return r.placeholder=t.placeholder,r},Fi.debounce=za,Fi.defaults=yl,Fi.defaultsDeep=xl,Fi.defer=Ma,Fi.delay=La,Fi.difference=Or,Fi.differenceBy=Wr,Fi.differenceWith=jr,Fi.drop=function(t,e,i){var n=null==t?0:t.length;return n?to(t,(e=i||e===o?1:pl(e))<0?0:e,n):[]},Fi.dropRight=function(t,e,i){var n=null==t?0:t.length;return n?to(t,0,(e=n-(e=i||e===o?1:pl(e)))<0?0:e):[]},Fi.dropRightWhile=function(t,e){return t&&t.length?ho(t,ar(e,3),!0,!0):[]},Fi.dropWhile=function(t,e){return t&&t.length?ho(t,ar(e,3),!0):[]},Fi.fill=function(t,e,i,n){var r=null==t?0:t.length;return r?(i&&"number"!=typeof i&&fr(t,e,i)&&(i=0,n=r),function(t,e,i,n){var r=t.length;for((i=pl(i))<0&&(i=-i>r?0:r+i),(n=n===o||n>r?r:pl(n))<0&&(n+=r),n=i>n?0:bl(n);i<n;)t[i++]=e;return t}(t,e,i,n)):[]},Fi.filter=function(t,e){return(Na(t)?_e:bn)(t,ar(e,3))},Fi.flatMap=function(t,e){return mn(Ea(t,e),1)},Fi.flatMapDeep=function(t,e){return mn(Ea(t,e),h)},Fi.flatMapDepth=function(t,e,i){return i=i===o?1:pl(i),mn(Ea(t,e),i)},Fi.flatten=Gr,Fi.flattenDeep=function(t){return null!=t&&t.length?mn(t,h):[]},Fi.flattenDepth=function(t,e){return null!=t&&t.length?mn(t,e=e===o?1:pl(e)):[]},Fi.flip=function(t){return Ko(t,512)},Fi.flow=ts,Fi.flowRight=es,Fi.fromPairs=function(t){for(var e=-1,i=null==t?0:t.length,n={};++e<i;){var o=t[e];n[o[0]]=o[1]}return n},Fi.functions=function(t){return null==t?[]:wn(t,zl(t))},Fi.functionsIn=function(t){return null==t?[]:wn(t,Ml(t))},Fi.groupBy=va,Fi.initial=function(t){return null!=t&&t.length?to(t,0,-1):[]},Fi.intersection=qr,Fi.intersectionBy=Yr,Fi.intersectionWith=Xr,Fi.invert=Rl,Fi.invertBy=_l,Fi.invokeMap=wa,Fi.iteratee=ns,Fi.keyBy=Ca,Fi.keys=zl,Fi.keysIn=Ml,Fi.map=Ea,Fi.mapKeys=function(t,e){var i={};return e=ar(e,3),An(t,(function(t,n,o){nn(i,e(t,n,o),t)})),i},Fi.mapValues=function(t,e){var i={};return e=ar(e,3),An(t,(function(t,n,o){nn(i,n,e(t,n,o))})),i},Fi.matches=function(t){return Fn(an(t,1))},Fi.matchesProperty=function(t,e){return Hn(t,an(e,1))},Fi.memoize=Sa,Fi.merge=Ll,Fi.mergeWith=Sl,Fi.method=os,Fi.methodOf=rs,Fi.mixin=as,Fi.negate=Da,Fi.nthArg=function(t){return t=pl(t),Yn((function(e){return Wn(e,t)}))},Fi.omit=Dl,Fi.omitBy=function(t,e){return Il(t,Da(ar(e)))},Fi.once=function(t){return Ra(2,t)},Fi.orderBy=function(t,e,i,n){return null==t?[]:(Na(e)||(e=null==e?[]:[e]),Na(i=n?o:i)||(i=null==i?[]:[i]),jn(t,e,i))},Fi.over=ss,Fi.overArgs=Pa,Fi.overEvery=us,Fi.overSome=hs,Fi.partial=Ia,Fi.partialRight=Fa,Fi.partition=ya,Fi.pick=Pl,Fi.pickBy=Il,Fi.property=cs,Fi.propertyOf=function(t){return function(e){return null==t?o:Cn(t,e)}},Fi.pull=Jr,Fi.pullAll=Zr,Fi.pullAllBy=function(t,e,i){return t&&t.length&&e&&e.length?Nn(t,e,ar(i,2)):t},Fi.pullAllWith=function(t,e,i){return t&&t.length&&e&&e.length?Nn(t,e,o,i):t},Fi.pullAt=$r,Fi.range=ds,Fi.rangeRight=ps,Fi.rearg=Ha,Fi.reject=function(t,e){return(Na(t)?_e:bn)(t,Da(ar(e,3)))},Fi.remove=function(t,e){var i=[];if(!t||!t.length)return i;var n=-1,o=[],r=t.length;for(e=ar(e,3);++n<r;){var a=t[n];e(a,n,t)&&(i.push(a),o.push(n))}return Gn(t,o),i},Fi.rest=function(t,e){if("function"!=typeof t)throw new Rt(r);return Yn(t,e=e===o?e:pl(e))},Fi.reverse=Qr,Fi.sampleSize=function(t,e,i){return e=(i?fr(t,e,i):e===o)?1:pl(e),(Na(t)?Ki:Kn)(t,e)},Fi.set=function(t,e,i){return null==t?t:Jn(t,e,i)},Fi.setWith=function(t,e,i,n){return n="function"==typeof n?n:o,null==t?t:Jn(t,e,i,n)},Fi.shuffle=function(t){return(Na(t)?Ji:Qn)(t)},Fi.slice=function(t,e,i){var n=null==t?0:t.length;return n?(i&&"number"!=typeof i&&fr(t,e,i)?(e=0,i=n):(e=null==e?0:pl(e),i=i===o?n:pl(i)),to(t,e,i)):[]},Fi.sortBy=xa,Fi.sortedUniq=function(t){return t&&t.length?oo(t):[]},Fi.sortedUniqBy=function(t,e){return t&&t.length?oo(t,ar(e,2)):[]},Fi.split=function(t,e,i){return i&&"number"!=typeof i&&fr(t,e,i)&&(e=i=o),(i=i===o?p:i>>>0)?(t=fl(t))&&("string"==typeof e||null!=e&&!ol(e))&&!(e=ao(e))&&ni(t)?vo(hi(t),0,i):t.split(e,i):[]},Fi.spread=function(t,e){if("function"!=typeof t)throw new Rt(r);return e=null==e?0:mi(pl(e),0),Yn((function(i){var n=i[e],o=vo(i,0,e);return n&&Le(o,n),ye(t,this,o)}))},Fi.tail=function(t){var e=null==t?0:t.length;return e?to(t,1,e):[]},Fi.take=function(t,e,i){return t&&t.length?to(t,0,(e=i||e===o?1:pl(e))<0?0:e):[]},Fi.takeRight=function(t,e,i){var n=null==t?0:t.length;return n?to(t,(e=n-(e=i||e===o?1:pl(e)))<0?0:e,n):[]},Fi.takeRightWhile=function(t,e){return t&&t.length?ho(t,ar(e,3),!1,!0):[]},Fi.takeWhile=function(t,e){return t&&t.length?ho(t,ar(e,3)):[]},Fi.tap=function(t,e){return e(t),t},Fi.throttle=function(t,e,i){var n=!0,o=!0;if("function"!=typeof t)throw new Rt(r);return Qa(i)&&(n="leading"in i?!!i.leading:n,o="trailing"in i?!!i.trailing:o),za(t,e,{leading:n,maxWait:e,trailing:o})},Fi.thru=da,Fi.toArray=cl,Fi.toPairs=Fl,Fi.toPairsIn=Hl,Fi.toPath=function(t){return Na(t)?Me(t,Ir):ll(t)?[t]:Ro(Pr(fl(t)))},Fi.toPlainObject=gl,Fi.transform=function(t,e,i){var n=Na(t),o=n||Ya(t)||sl(t);if(e=ar(e,4),null==i){var r=t&&t.constructor;i=o?n?new r:[]:Qa(t)&&Ja(r)?Hi(Gt(t)):{}}return(o?Be:An)(t,(function(t,n,o){return e(i,t,n,o)})),i},Fi.unary=function(t){return ka(t,1)},Fi.union=ta,Fi.unionBy=ea,Fi.unionWith=ia,Fi.uniq=function(t){return t&&t.length?lo(t):[]},Fi.uniqBy=function(t,e){return t&&t.length?lo(t,ar(e,2)):[]},Fi.uniqWith=function(t,e){return e="function"==typeof e?e:o,t&&t.length?lo(t,o,e):[]},Fi.unset=function(t,e){return null==t||so(t,e)},Fi.unzip=na,Fi.unzipWith=oa,Fi.update=function(t,e,i){return null==t?t:uo(t,e,go(i))},Fi.updateWith=function(t,e,i,n){return n="function"==typeof n?n:o,null==t?t:uo(t,e,go(i),n)},Fi.values=Ol,Fi.valuesIn=function(t){return null==t?[]:Je(t,Ml(t))},Fi.without=ra,Fi.words=Jl,Fi.wrap=function(t,e){return Ia(go(e),t)},Fi.xor=aa,Fi.xorBy=la,Fi.xorWith=sa,Fi.zip=ua,Fi.zipObject=function(t,e){return bo(t||[],e||[],$i)},Fi.zipObjectDeep=function(t,e){return bo(t||[],e||[],Jn)},Fi.zipWith=ha,Fi.entries=Fl,Fi.entriesIn=Hl,Fi.extend=vl,Fi.extendWith=wl,as(Fi,Fi),Fi.add=fs,Fi.attempt=Zl,Fi.camelCase=Wl,Fi.capitalize=jl,Fi.ceil=As,Fi.clamp=function(t,e,i){return i===o&&(i=e,e=o),i!==o&&(i=(i=ml(i))==i?i:0),e!==o&&(e=(e=ml(e))==e?e:0),rn(ml(t),e,i)},Fi.clone=function(t){return an(t,4)},Fi.cloneDeep=function(t){return an(t,5)},Fi.cloneDeepWith=function(t,e){return an(t,5,e="function"==typeof e?e:o)},Fi.cloneWith=function(t,e){return an(t,4,e="function"==typeof e?e:o)},Fi.conformsTo=function(t,e){return null==e||ln(t,e,zl(e))},Fi.deburr=Vl,Fi.defaultTo=function(t,e){return null==t||t!=t?e:t},Fi.divide=vs,Fi.endsWith=function(t,e,i){t=fl(t),e=ao(e);var n=t.length,r=i=i===o?n:rn(pl(i),0,n);return(i-=e.length)>=0&&t.slice(i,r)==e},Fi.eq=Oa,Fi.escape=function(t){return(t=fl(t))&&X.test(t)?t.replace(q,ei):t},Fi.escapeRegExp=function(t){return(t=fl(t))&&it.test(t)?t.replace(et,"\\$&"):t},Fi.every=function(t,e,i){var n=Na(t)?Re:dn;return i&&fr(t,e,i)&&(e=o),n(t,ar(e,3))},Fi.find=ma,Fi.findIndex=Vr,Fi.findKey=function(t,e){return Fe(t,ar(e,3),An)},Fi.findLast=ga,Fi.findLastIndex=Nr,Fi.findLastKey=function(t,e){return Fe(t,ar(e,3),vn)},Fi.floor=ws,Fi.forEach=fa,Fi.forEachRight=Aa,Fi.forIn=function(t,e){return null==t?t:gn(t,ar(e,3),Ml)},Fi.forInRight=function(t,e){return null==t?t:fn(t,ar(e,3),Ml)},Fi.forOwn=function(t,e){return t&&An(t,ar(e,3))},Fi.forOwnRight=function(t,e){return t&&vn(t,ar(e,3))},Fi.get=Bl,Fi.gt=Wa,Fi.gte=ja,Fi.has=function(t,e){return null!=t&&pr(t,e,Bn)},Fi.hasIn=kl,Fi.head=Ur,Fi.identity=is,Fi.includes=function(t,e,i,n){t=Ua(t)?t:Ol(t),i=i&&!n?pl(i):0;var o=t.length;return i<0&&(i=mi(o+i,0)),al(t)?i<=o&&t.indexOf(e,i)>-1:!!o&&Oe(t,e,i)>-1},Fi.indexOf=function(t,e,i){var n=null==t?0:t.length;if(!n)return-1;var o=null==i?0:pl(i);return o<0&&(o=mi(n+o,0)),Oe(t,e,o)},Fi.inRange=function(t,e,i){return e=dl(e),i===o?(i=e,e=0):i=dl(i),function(t,e,i){return t>=gi(e,i)&&t<mi(e,i)}(t=ml(t),e,i)},Fi.invoke=Tl,Fi.isArguments=Va,Fi.isArray=Na,Fi.isArrayBuffer=Ga,Fi.isArrayLike=Ua,Fi.isArrayLikeObject=qa,Fi.isBoolean=function(t){return!0===t||!1===t||tl(t)&&yn(t)==f},Fi.isBuffer=Ya,Fi.isDate=Xa,Fi.isElement=function(t){return tl(t)&&1===t.nodeType&&!nl(t)},Fi.isEmpty=function(t){if(null==t)return!0;if(Ua(t)&&(Na(t)||"string"==typeof t||"function"==typeof t.splice||Ya(t)||sl(t)||Va(t)))return!t.length;var e=dr(t);if(e==E||e==R)return!t.size;if(Cr(t))return!Dn(t).length;for(var i in t)if(St.call(t,i))return!1;return!0},Fi.isEqual=function(t,e){return zn(t,e)},Fi.isEqualWith=function(t,e,i){var n=(i="function"==typeof i?i:o)?i(t,e):o;return n===o?zn(t,e,o,i):!!n},Fi.isError=Ka,Fi.isFinite=function(t){return"number"==typeof t&&Ie(t)},Fi.isFunction=Ja,Fi.isInteger=Za,Fi.isLength=$a,Fi.isMap=el,Fi.isMatch=function(t,e){return t===e||Mn(t,e,sr(e))},Fi.isMatchWith=function(t,e,i){return i="function"==typeof i?i:o,Mn(t,e,sr(e),i)},Fi.isNaN=function(t){return il(t)&&t!=+t},Fi.isNative=function(t){if(wr(t))throw new Ct("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Ln(t)},Fi.isNil=function(t){return null==t},Fi.isNull=function(t){return null===t},Fi.isNumber=il,Fi.isObject=Qa,Fi.isObjectLike=tl,Fi.isPlainObject=nl,Fi.isRegExp=ol,Fi.isSafeInteger=function(t){return Za(t)&&t>=-9007199254740991&&t<=c},Fi.isSet=rl,Fi.isString=al,Fi.isSymbol=ll,Fi.isTypedArray=sl,Fi.isUndefined=function(t){return t===o},Fi.isWeakMap=function(t){return tl(t)&&dr(t)==z},Fi.isWeakSet=function(t){return tl(t)&&"[object WeakSet]"==yn(t)},Fi.join=function(t,e){return null==t?"":Ge.call(t,e)},Fi.kebabCase=Nl,Fi.last=Kr,Fi.lastIndexOf=function(t,e,i){var n=null==t?0:t.length;if(!n)return-1;var r=n;return i!==o&&(r=(r=pl(i))<0?mi(n+r,0):gi(r,n-1)),e==e?function(t,e,i){for(var n=i+1;n--;)if(t[n]===e)return n;return n}(t,e,r):He(t,je,r,!0)},Fi.lowerCase=Gl,Fi.lowerFirst=Ul,Fi.lt=ul,Fi.lte=hl,Fi.max=function(t){return t&&t.length?pn(t,is,xn):o},Fi.maxBy=function(t,e){return t&&t.length?pn(t,ar(e,2),xn):o},Fi.mean=function(t){return Ve(t,is)},Fi.meanBy=function(t,e){return Ve(t,ar(e,2))},Fi.min=function(t){return t&&t.length?pn(t,is,Pn):o},Fi.minBy=function(t,e){return t&&t.length?pn(t,ar(e,2),Pn):o},Fi.stubArray=bs,Fi.stubFalse=ms,Fi.stubObject=function(){return{}},Fi.stubString=function(){return""},Fi.stubTrue=function(){return!0},Fi.multiply=Cs,Fi.nth=function(t,e){return t&&t.length?Wn(t,pl(e)):o},Fi.noConflict=function(){return ce._===this&&(ce._=Ht),this},Fi.noop=ls,Fi.now=Ba,Fi.pad=function(t,e,i){t=fl(t);var n=(e=pl(e))?ui(t):0;if(!e||n>=e)return t;var o=(e-n)/2;return Vo(pe(o),i)+t+Vo(de(o),i)},Fi.padEnd=function(t,e,i){t=fl(t);var n=(e=pl(e))?ui(t):0;return e&&n<e?t+Vo(e-n,i):t},Fi.padStart=function(t,e,i){t=fl(t);var n=(e=pl(e))?ui(t):0;return e&&n<e?Vo(e-n,i)+t:t},Fi.parseInt=function(t,e,i){return i||null==e?e=0:e&&(e=+e),Ai(fl(t).replace(nt,""),e||0)},Fi.random=function(t,e,i){if(i&&"boolean"!=typeof i&&fr(t,e,i)&&(e=i=o),i===o&&("boolean"==typeof e?(i=e,e=o):"boolean"==typeof t&&(i=t,t=o)),t===o&&e===o?(t=0,e=1):(t=dl(t),e===o?(e=t,t=0):e=dl(e)),t>e){var n=t;t=e,e=n}if(i||t%1||e%1){var r=vi();return gi(t+r*(e-t+le("1e-"+((r+"").length-1))),e)}return Un(t,e)},Fi.reduce=function(t,e,i){var n=Na(t)?Se:Ue,o=arguments.length<3;return n(t,ar(e,4),i,o,hn)},Fi.reduceRight=function(t,e,i){var n=Na(t)?De:Ue,o=arguments.length<3;return n(t,ar(e,4),i,o,cn)},Fi.repeat=function(t,e,i){return e=(i?fr(t,e,i):e===o)?1:pl(e),qn(fl(t),e)},Fi.replace=function(){var t=arguments,e=fl(t[0]);return t.length<3?e:e.replace(t[1],t[2])},Fi.result=function(t,e,i){var n=-1,r=(e=fo(e,t)).length;for(r||(r=1,t=o);++n<r;){var a=null==t?o:t[Ir(e[n])];a===o&&(n=r,a=i),t=Ja(a)?a.call(t):a}return t},Fi.round=Es,Fi.runInContext=t,Fi.sample=function(t){return(Na(t)?Xi:Xn)(t)},Fi.size=function(t){if(null==t)return 0;if(Ua(t))return al(t)?ui(t):t.length;var e=dr(t);return e==E||e==R?t.size:Dn(t).length},Fi.snakeCase=ql,Fi.some=function(t,e,i){var n=Na(t)?Pe:eo;return i&&fr(t,e,i)&&(e=o),n(t,ar(e,3))},Fi.sortedIndex=function(t,e){return io(t,e)},Fi.sortedIndexBy=function(t,e,i){return no(t,e,ar(i,2))},Fi.sortedIndexOf=function(t,e){var i=null==t?0:t.length;if(i){var n=io(t,e);if(n<i&&Oa(t[n],e))return n}return-1},Fi.sortedLastIndex=function(t,e){return io(t,e,!0)},Fi.sortedLastIndexBy=function(t,e,i){return no(t,e,ar(i,2),!0)},Fi.sortedLastIndexOf=function(t,e){if(null!=t&&t.length){var i=io(t,e,!0)-1;if(Oa(t[i],e))return i}return-1},Fi.startCase=Yl,Fi.startsWith=function(t,e,i){return t=fl(t),i=null==i?0:rn(pl(i),0,t.length),e=ao(e),t.slice(i,i+e.length)==e},Fi.subtract=ys,Fi.sum=function(t){return t&&t.length?qe(t,is):0},Fi.sumBy=function(t,e){return t&&t.length?qe(t,ar(e,2)):0},Fi.template=function(t,e,i){var n=Fi.templateSettings;i&&fr(t,e,i)&&(e=o),t=fl(t),e=wl({},e,n,Jo);var r,a,l=wl({},e.imports,n.imports,Jo),s=zl(l),u=Je(l,s),h=0,c=e.interpolate||vt,d="__p += '",p=Bt((e.escape||vt).source+"|"+c.source+"|"+(c===Z?ct:vt).source+"|"+(e.evaluate||vt).source+"|$","g"),b="//# sourceURL="+(St.call(e,"sourceURL")?(e.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++ne+"]")+"\n";t.replace(p,(function(e,i,n,o,l,s){return n||(n=o),d+=t.slice(h,s).replace(wt,ii),i&&(r=!0,d+="' +\n__e("+i+") +\n'"),l&&(a=!0,d+="';\n"+l+";\n__p += '"),n&&(d+="' +\n((__t = ("+n+")) == null ? '' : __t) +\n'"),h=s+e.length,e})),d+="';\n";var m=St.call(e,"variable")&&e.variable;if(m){if(ut.test(m))throw new Ct("Invalid `variable` option passed into `_.template`")}else d="with (obj) {\n"+d+"\n}\n";d=(a?d.replace(V,""):d).replace(N,"$1").replace(G,"$1;"),d="function("+(m||"obj")+") {\n"+(m?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(r?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+d+"return __p\n}";var g=Zl((function(){return Et(s,b+"return "+d).apply(o,u)}));if(g.source=d,Ka(g))throw g;return g},Fi.times=function(t,e){if((t=pl(t))<1||t>c)return[];var i=p,n=gi(t,p);e=ar(e),t-=p;for(var o=Ye(n,e);++i<t;)e(i);return o},Fi.toFinite=dl,Fi.toInteger=pl,Fi.toLength=bl,Fi.toLower=function(t){return fl(t).toLowerCase()},Fi.toNumber=ml,Fi.toSafeInteger=function(t){return t?rn(pl(t),-9007199254740991,c):0===t?t:0},Fi.toString=fl,Fi.toUpper=function(t){return fl(t).toUpperCase()},Fi.trim=function(t,e,i){if((t=fl(t))&&(i||e===o))return Xe(t);if(!t||!(e=ao(e)))return t;var n=hi(t),r=hi(e);return vo(n,$e(n,r),Qe(n,r)+1).join("")},Fi.trimEnd=function(t,e,i){if((t=fl(t))&&(i||e===o))return t.slice(0,ci(t)+1);if(!t||!(e=ao(e)))return t;var n=hi(t);return vo(n,0,Qe(n,hi(e))+1).join("")},Fi.trimStart=function(t,e,i){if((t=fl(t))&&(i||e===o))return t.replace(nt,"");if(!t||!(e=ao(e)))return t;var n=hi(t);return vo(n,$e(n,hi(e))).join("")},Fi.truncate=function(t,e){var i=30,n="...";if(Qa(e)){var r="separator"in e?e.separator:r;i="length"in e?pl(e.length):i,n="omission"in e?ao(e.omission):n}var a=(t=fl(t)).length;if(ni(t)){var l=hi(t);a=l.length}if(i>=a)return t;var s=i-ui(n);if(s<1)return n;var u=l?vo(l,0,s).join(""):t.slice(0,s);if(r===o)return u+n;if(l&&(s+=u.length-s),ol(r)){if(t.slice(s).search(r)){var h,c=u;for(r.global||(r=Bt(r.source,fl(dt.exec(r))+"g")),r.lastIndex=0;h=r.exec(c);)var d=h.index;u=u.slice(0,d===o?s:d)}}else if(t.indexOf(ao(r),s)!=s){var p=u.lastIndexOf(r);p>-1&&(u=u.slice(0,p))}return u+n},Fi.unescape=function(t){return(t=fl(t))&&Y.test(t)?t.replace(U,di):t},Fi.uniqueId=function(t){var e=++Dt;return fl(t)+e},Fi.upperCase=Xl,Fi.upperFirst=Kl,Fi.each=fa,Fi.eachRight=Aa,Fi.first=Ur,as(Fi,(gs={},An(Fi,(function(t,e){St.call(Fi.prototype,e)||(gs[e]=t)})),gs),{chain:!1}),Fi.VERSION="4.17.21",Be(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){Fi[t].placeholder=Fi})),Be(["drop","take"],(function(t,e){ji.prototype[t]=function(i){i=i===o?1:mi(pl(i),0);var n=this.__filtered__&&!e?new ji(this):this.clone();return n.__filtered__?n.__takeCount__=gi(i,n.__takeCount__):n.__views__.push({size:gi(i,p),type:t+(n.__dir__<0?"Right":"")}),n},ji.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}})),Be(["filter","map","takeWhile"],(function(t,e){var i=e+1,n=1==i||3==i;ji.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:ar(t,3),type:i}),e.__filtered__=e.__filtered__||n,e}})),Be(["head","last"],(function(t,e){var i="take"+(e?"Right":"");ji.prototype[t]=function(){return this[i](1).value()[0]}})),Be(["initial","tail"],(function(t,e){var i="drop"+(e?"":"Right");ji.prototype[t]=function(){return this.__filtered__?new ji(this):this[i](1)}})),ji.prototype.compact=function(){return this.filter(is)},ji.prototype.find=function(t){return this.filter(t).head()},ji.prototype.findLast=function(t){return this.reverse().find(t)},ji.prototype.invokeMap=Yn((function(t,e){return"function"==typeof t?new ji(this):this.map((function(i){return _n(i,t,e)}))})),ji.prototype.reject=function(t){return this.filter(Da(ar(t)))},ji.prototype.slice=function(t,e){t=pl(t);var i=this;return i.__filtered__&&(t>0||e<0)?new ji(i):(t<0?i=i.takeRight(-t):t&&(i=i.drop(t)),e!==o&&(i=(e=pl(e))<0?i.dropRight(-e):i.take(e-t)),i)},ji.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},ji.prototype.toArray=function(){return this.take(p)},An(ji.prototype,(function(t,e){var i=/^(?:filter|find|map|reject)|While$/.test(e),n=/^(?:head|last)$/.test(e),r=Fi[n?"take"+("last"==e?"Right":""):e],a=n||/^find/.test(e);r&&(Fi.prototype[e]=function(){var e=this.__wrapped__,l=n?[1]:arguments,s=e instanceof ji,u=l[0],h=s||Na(e),c=function(t){var e=r.apply(Fi,Le([t],l));return n&&d?e[0]:e};h&&i&&"function"==typeof u&&1!=u.length&&(s=h=!1);var d=this.__chain__,p=!!this.__actions__.length,b=a&&!d,m=s&&!p;if(!a&&h){e=m?e:new ji(this);var g=t.apply(e,l);return g.__actions__.push({func:da,args:[c],thisArg:o}),new Wi(g,d)}return b&&m?t.apply(this,l):(g=this.thru(c),b?n?g.value()[0]:g.value():g)})})),Be(["pop","push","shift","sort","splice","unshift"],(function(t){var e=_t[t],i=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",n=/^(?:pop|shift)$/.test(t);Fi.prototype[t]=function(){var t=arguments;if(n&&!this.__chain__){var o=this.value();return e.apply(Na(o)?o:[],t)}return this[i]((function(i){return e.apply(Na(i)?i:[],t)}))}})),An(ji.prototype,(function(t,e){var i=Fi[e];if(i){var n=i.name+"";St.call(_i,n)||(_i[n]=[]),_i[n].push({name:e,func:i})}})),_i[Ho(o,2).name]=[{name:"wrapper",func:o}],ji.prototype.clone=function(){var t=new ji(this.__wrapped__);return t.__actions__=Ro(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=Ro(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=Ro(this.__views__),t},ji.prototype.reverse=function(){if(this.__filtered__){var t=new ji(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},ji.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,i=Na(t),n=e<0,o=i?t.length:0,r=function(t,e,i){for(var n=-1,o=i.length;++n<o;){var r=i[n],a=r.size;switch(r.type){case"drop":t+=a;break;case"dropRight":e-=a;break;case"take":e=gi(e,t+a);break;case"takeRight":t=mi(t,e-a)}}return{start:t,end:e}}(0,o,this.__views__),a=r.start,l=r.end,s=l-a,u=n?l:a-1,h=this.__iteratees__,c=h.length,d=0,p=gi(s,this.__takeCount__);if(!i||!n&&o==s&&p==s)return co(t,this.__actions__);var b=[];t:for(;s--&&d<p;){for(var m=-1,g=t[u+=e];++m<c;){var f=h[m],A=f.iteratee,v=f.type,w=A(g);if(2==v)g=w;else if(!w){if(1==v)continue t;break t}}b[d++]=g}return b},Fi.prototype.at=pa,Fi.prototype.chain=function(){return ca(this)},Fi.prototype.commit=function(){return new Wi(this.value(),this.__chain__)},Fi.prototype.next=function(){this.__values__===o&&(this.__values__=cl(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?o:this.__values__[this.__index__++]}},Fi.prototype.plant=function(t){for(var e,i=this;i instanceof Oi;){var n=Hr(i);n.__index__=0,n.__values__=o,e?r.__wrapped__=n:e=n;var r=n;i=i.__wrapped__}return r.__wrapped__=t,e},Fi.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof ji){var e=t;return this.__actions__.length&&(e=new ji(this)),(e=e.reverse()).__actions__.push({func:da,args:[Qr],thisArg:o}),new Wi(e,this.__chain__)}return this.thru(Qr)},Fi.prototype.toJSON=Fi.prototype.valueOf=Fi.prototype.value=function(){return co(this.__wrapped__,this.__actions__)},Fi.prototype.first=Fi.prototype.head,Kt&&(Fi.prototype[Kt]=function(){return this}),Fi}();ce._=pi,(n=function(){return pi}.call(e,i,e,t))===o||(t.exports=n)}.call(this)},379:t=>{"use strict";var e=[];function i(t){for(var i=-1,n=0;n<e.length;n++)if(e[n].identifier===t){i=n;break}return i}function n(t,n){for(var r={},a=[],l=0;l<t.length;l++){var s=t[l],u=n.base?s[0]+n.base:s[0],h=r[u]||0,c="".concat(u," ").concat(h);r[u]=h+1;var d=i(c),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==d)e[d].references++,e[d].updater(p);else{var b=o(p,n);n.byIndex=l,e.splice(l,0,{identifier:c,updater:b,references:1})}a.push(c)}return a}function o(t,e){var i=e.domAPI(e);return i.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;i.update(t=e)}else i.remove()}}t.exports=function(t,o){var r=n(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<r.length;a++){var l=i(r[a]);e[l].references--}for(var s=n(t,o),u=0;u<r.length;u++){var h=i(r[u]);0===e[h].references&&(e[h].updater(),e.splice(h,1))}r=s}}},569:t=>{"use strict";var e={};t.exports=function(t,i){var n=function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}e[t]=i}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(i)}},216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,i)=>{"use strict";t.exports=function(t){var e=i.nc;e&&t.setAttribute("nonce",e)}},795:t=>{"use strict";t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(i){!function(t,e,i){var n="";i.supports&&(n+="@supports (".concat(i.supports,") {")),i.media&&(n+="@media ".concat(i.media," {"));var o=void 0!==i.layer;o&&(n+="@layer".concat(i.layer.length>0?" ".concat(i.layer):""," {")),n+=i.css,o&&(n+="}"),i.media&&(n+="}"),i.supports&&(n+="}");var r=i.sourceMap;r&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,i)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function i(n){var o=e[n];if(void 0!==o)return o.exports;var r=e[n]={id:n,loaded:!1,exports:{}};return t[n].call(r.exports,r,r.exports,i),r.loaded=!0,r.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),i.nc=void 0,(()=>{"use strict";var t=i(379),e=i.n(t),n=i(795),o=i.n(n),r=i(569),a=i.n(r),l=i(565),s=i.n(l),u=i(216),h=i.n(u),c=i(589),d=i.n(c),p=i(426),b={};b.styleTagTransform=d(),b.setAttributes=s(),b.insert=a().bind(null,"head"),b.domAPI=o(),b.insertStyleElement=h(),e()(p.Z,b),p.Z&&p.Z.locals&&p.Z.locals,i(486);const m=t=>{document.querySelector(".header__stats-section__list__item__result").innerHTML=t},g=t=>{document.querySelector(".header__stats-section__top-result").innerHTML=t};var f=i(534),A=i.n(f);class v{constructor(t){this.table=t}reloadData(t,e,i){return this.table.dataLoader.load(t,void 0,void 0,void 0,e,i)}langText(){return this.table.modules.localize.getText(...arguments)}langBind(){return this.table.modules.localize.bind(...arguments)}langLocale(){return this.table.modules.localize.getLocale(...arguments)}commsConnections(){return this.table.modules.comms.getConnections(...arguments)}commsSend(){return this.table.modules.comms.send(...arguments)}layoutMode(){return this.table.modules.layout.getMode()}layoutRefresh(t){return this.table.modules.layout.layout(t)}subscribe(){return this.table.eventBus.subscribe(...arguments)}unsubscribe(){return this.table.eventBus.unsubscribe(...arguments)}subscribed(t){return this.table.eventBus.subscribed(t)}subscriptionChange(){return this.table.eventBus.subscriptionChange(...arguments)}dispatch(){return this.table.eventBus.dispatch(...arguments)}chain(){return this.table.eventBus.chain(...arguments)}confirm(){return this.table.eventBus.confirm(...arguments)}dispatchExternal(){return this.table.externalEvents.dispatch(...arguments)}subscribedExternal(t){return this.table.externalEvents.subscribed(t)}subscriptionChangeExternal(){return this.table.externalEvents.subscriptionChange(...arguments)}options(t){return this.table.options[t]}setOption(t,e){return void 0!==e&&(this.table.options[t]=e),this.table.options[t]}deprecationCheck(t,e){return this.table.deprecationAdvisor.check(t,e)}deprecationCheckMsg(t,e){return this.table.deprecationAdvisor.checkMsg(t,e)}deprecationMsg(t){return this.table.deprecationAdvisor.msg(t)}module(t){return this.table.module(t)}}class w{static elVisible(t){return!(t.offsetWidth<=0&&t.offsetHeight<=0)}static elOffset(t){var e=t.getBoundingClientRect();return{top:e.top+window.pageYOffset-document.documentElement.clientTop,left:e.left+window.pageXOffset-document.documentElement.clientLeft}}static deepClone(t,e,i=[]){var n={}.__proto__,o=[].__proto__;for(var r in e||(e=Object.assign(Array.isArray(t)?[]:{},t)),t){let a,l,s=t[r];null==s||"object"!=typeof s||s.__proto__!==n&&s.__proto__!==o||(a=i.findIndex((t=>t.subject===s)),a>-1?e[r]=i[a].copy:(l=Object.assign(Array.isArray(s)?[]:{},s),i.unshift({subject:s,copy:l}),e[r]=this.deepClone(s,l,i)))}return e}}class C extends v{constructor(t,e,i){super(t),this.element=e,this.container=this._lookupContainer(),this.parent=i,this.reversedX=!1,this.childPopup=null,this.blurable=!1,this.blurCallback=null,this.blurEventsBound=!1,this.renderedCallback=null,this.visible=!1,this.hideable=!0,this.element.classList.add("tabulator-popup-container"),this.blurEvent=this.hide.bind(this,!1),this.escEvent=this._escapeCheck.bind(this),this.destroyBinding=this.tableDestroyed.bind(this),this.destroyed=!1}tableDestroyed(){this.destroyed=!0,this.hide(!0)}_lookupContainer(){var t=this.table.options.popupContainer;return"string"==typeof t?(t=document.querySelector(t))||console.warn("Menu Error - no container element found matching selector:",this.table.options.popupContainer,"(defaulting to document body)"):!0===t&&(t=this.table.element),t&&!this._checkContainerIsParent(t)&&(t=!1,console.warn("Menu Error - container element does not contain this table:",this.table.options.popupContainer,"(defaulting to document body)")),t||(t=document.body),t}_checkContainerIsParent(t,e=this.table.element){return t===e||!!e.parentNode&&this._checkContainerIsParent(t,e.parentNode)}renderCallback(t){this.renderedCallback=t}containerEventCoords(t){var e=!(t instanceof MouseEvent),i=e?t.touches[0].pageX:t.pageX,n=e?t.touches[0].pageY:t.pageY;if(this.container!==document.body){let t=w.elOffset(this.container);i-=t.left,n-=t.top}return{x:i,y:n}}elementPositionCoords(t,e="right"){var i,n,o,r=w.elOffset(t);switch(this.container!==document.body&&(i=w.elOffset(this.container),r.left-=i.left,r.top-=i.top),e){case"right":n=r.left+t.offsetWidth,o=r.top-1;break;case"bottom":n=r.left,o=r.top+t.offsetHeight;break;case"left":n=r.left,o=r.top-1;break;case"top":n=r.left,o=r.top;break;case"center":n=r.left+t.offsetWidth/2,o=r.top+t.offsetHeight/2}return{x:n,y:o,offset:r}}show(t,e){var i,n,o,r,a;return this.destroyed||this.table.destroyed||(t instanceof HTMLElement?(o=t,r=(a=this.elementPositionCoords(t,e)).offset,i=a.x,n=a.y):"number"==typeof t?(r={top:0,left:0},i=t,n=e):(i=(a=this.containerEventCoords(t)).x,n=a.y,this.reversedX=!1),this.element.style.top=n+"px",this.element.style.left=i+"px",this.container.appendChild(this.element),"function"==typeof this.renderedCallback&&this.renderedCallback(),this._fitToScreen(i,n,o,r,e),this.visible=!0,this.subscribe("table-destroy",this.destroyBinding),this.element.addEventListener("mousedown",(t=>{t.stopPropagation()}))),this}_fitToScreen(t,e,i,n,o){var r=this.container===document.body?document.documentElement.scrollTop:this.container.scrollTop;(t+this.element.offsetWidth>=this.container.offsetWidth||this.reversedX)&&(this.element.style.left="",this.element.style.right=i?this.container.offsetWidth-n.left+"px":this.container.offsetWidth-t+"px",this.reversedX=!0),e+this.element.offsetHeight>Math.max(this.container.offsetHeight,r?this.container.scrollHeight:0)&&(this.element.style.top=i?"bottom"===o?parseInt(this.element.style.top)-this.element.offsetHeight-i.offsetHeight-1+"px":parseInt(this.element.style.top)-this.element.offsetHeight+i.offsetHeight+1+"px":parseInt(this.element.style.top)-this.element.offsetHeight+"px")}isVisible(){return this.visible}hideOnBlur(t){return this.blurable=!0,this.visible&&(setTimeout((()=>{this.visible&&(this.table.rowManager.element.addEventListener("scroll",this.blurEvent),this.subscribe("cell-editing",this.blurEvent),document.body.addEventListener("click",this.blurEvent),document.body.addEventListener("contextmenu",this.blurEvent),document.body.addEventListener("mousedown",this.blurEvent),window.addEventListener("resize",this.blurEvent),document.body.addEventListener("keydown",this.escEvent),this.blurEventsBound=!0)}),100),this.blurCallback=t),this}_escapeCheck(t){27==t.keyCode&&this.hide()}blockHide(){this.hideable=!1}restoreHide(){this.hideable=!0}hide(t=!1){return this.visible&&this.hideable&&(this.blurable&&this.blurEventsBound&&(document.body.removeEventListener("keydown",this.escEvent),document.body.removeEventListener("click",this.blurEvent),document.body.removeEventListener("contextmenu",this.blurEvent),document.body.removeEventListener("mousedown",this.blurEvent),window.removeEventListener("resize",this.blurEvent),this.table.rowManager.element.removeEventListener("scroll",this.blurEvent),this.unsubscribe("cell-editing",this.blurEvent),this.blurEventsBound=!1),this.childPopup&&this.childPopup.hide(),this.parent&&(this.parent.childPopup=null),this.element.parentNode&&this.element.parentNode.removeChild(this.element),this.visible=!1,this.blurCallback&&!t&&this.blurCallback(),this.unsubscribe("table-destroy",this.destroyBinding)),this}child(t){return this.childPopup&&this.childPopup.hide(),this.childPopup=new C(this.table,t,this),this.childPopup}}class E extends v{constructor(t,e){super(t),this._handler=null}initialize(){}registerTableOption(t,e){this.table.optionsList.register(t,e)}registerColumnOption(t,e){this.table.columnManager.optionsList.register(t,e)}registerTableFunction(t,e){void 0===this.table[t]?this.table[t]=(...i)=>(this.table.initGuard(t),e(...i)):console.warn("Unable to bind table function, name already in use",t)}registerComponentFunction(t,e,i){return this.table.componentFunctionBinder.bind(t,e,i)}registerDataHandler(t,e){this.table.rowManager.registerDataPipelineHandler(t,e),this._handler=t}registerDisplayHandler(t,e){this.table.rowManager.registerDisplayPipelineHandler(t,e),this._handler=t}displayRows(t){var e,i=this.table.rowManager.displayRows.length-1;if(this._handler&&(e=this.table.rowManager.displayPipeline.findIndex((t=>t.handler===this._handler)))>-1&&(i=e),t&&(i+=t),this._handler)return i>-1?this.table.rowManager.getDisplayRows(i):this.activeRows()}activeRows(){return this.table.rowManager.activeRows}refreshData(t,e){e||(e=this._handler),e&&this.table.rowManager.refreshActiveData(e,!1,t)}footerAppend(t){return this.table.footerManager.append(t)}footerPrepend(t){return this.table.footerManager.prepend(t)}footerRemove(t){return this.table.footerManager.remove(t)}popup(t,e){return new C(this.table,t,e)}alert(t,e){return this.table.alertManager.alert(t,e)}clearAlert(){return this.table.alertManager.clear()}}class y extends E{constructor(t){super(t),this.allowedTypes=["","data","download","clipboard","print","htmlOutput"],this.registerColumnOption("accessor"),this.registerColumnOption("accessorParams"),this.registerColumnOption("accessorData"),this.registerColumnOption("accessorDataParams"),this.registerColumnOption("accessorDownload"),this.registerColumnOption("accessorDownloadParams"),this.registerColumnOption("accessorClipboard"),this.registerColumnOption("accessorClipboardParams"),this.registerColumnOption("accessorPrint"),this.registerColumnOption("accessorPrintParams"),this.registerColumnOption("accessorHtmlOutput"),this.registerColumnOption("accessorHtmlOutputParams")}initialize(){this.subscribe("column-layout",this.initializeColumn.bind(this)),this.subscribe("row-data-retrieve",this.transformRow.bind(this))}initializeColumn(t){var e=!1,i={};this.allowedTypes.forEach((n=>{var o,r="accessor"+(n.charAt(0).toUpperCase()+n.slice(1));t.definition[r]&&(o=this.lookupAccessor(t.definition[r]))&&(e=!0,i[r]={accessor:o,params:t.definition[r+"Params"]||{}})})),e&&(t.modules.accessor=i)}lookupAccessor(t){var e=!1;switch(typeof t){case"string":y.accessors[t]?e=y.accessors[t]:console.warn("Accessor Error - No such accessor found, ignoring: ",t);break;case"function":e=t}return e}transformRow(t,e){var i="accessor"+(e.charAt(0).toUpperCase()+e.slice(1)),n=t.getComponent(),o=w.deepClone(t.data||{});return this.table.columnManager.traverse((function(t){var r,a,l,s;t.modules.accessor&&(a=t.modules.accessor[i]||t.modules.accessor.accessor||!1)&&"undefined"!=(r=t.getFieldValue(o))&&(s=t.getComponent(),l="function"==typeof a.params?a.params(r,o,e,s,n):a.params,t.setFieldValue(o,a.accessor(r,o,e,l,s,n)))})),o}}function x(t,e){var i=[];if(e=e||"",Array.isArray(t))t.forEach(((t,n)=>{i=i.concat(x(t,e?e+"["+n+"]":n))}));else if("object"==typeof t)for(var n in t)i=i.concat(x(t[n],e?e+"["+n+"]":n));else i.push({key:e,value:t});return i}function B(t){var e=x(t),i=[];return e.forEach((function(t){i.push(encodeURIComponent(t.key)+"="+encodeURIComponent(t.value))})),i.join("&")}function k(t,e,i){return t&&i&&Object.keys(i).length&&(e.method&&"get"!=e.method.toLowerCase()||(e.method="get",t+=(t.includes("?")?"&":"?")+B(i))),t}function R(t,e){var i=[];if(e=e||"",Array.isArray(t))t.forEach(((t,n)=>{i=i.concat(R(t,e?e+"["+n+"]":n))}));else if("object"==typeof t)for(var n in t)i=i.concat(R(t[n],e?e+"["+n+"]":n));else i.push({key:e,value:t});return i}y.moduleName="accessor",y.accessors={};var _={json:{headers:{"Content-Type":"application/json"},body:function(t,e,i){return JSON.stringify(i)}},form:{headers:{},body:function(t,e,i){var n=R(i),o=new FormData;return n.forEach((function(t){o.append(t.key,t.value)})),o}}};class T extends E{constructor(t){super(t),this.config={},this.url="",this.urlGenerator=!1,this.params=!1,this.loaderPromise=!1,this.registerTableOption("ajaxURL",!1),this.registerTableOption("ajaxURLGenerator",!1),this.registerTableOption("ajaxParams",{}),this.registerTableOption("ajaxConfig","get"),this.registerTableOption("ajaxContentType","form"),this.registerTableOption("ajaxRequestFunc",!1),this.registerTableOption("ajaxRequesting",(function(){})),this.registerTableOption("ajaxResponse",!1),this.contentTypeFormatters=T.contentTypeFormatters}initialize(){this.loaderPromise=this.table.options.ajaxRequestFunc||T.defaultLoaderPromise,this.urlGenerator=this.table.options.ajaxURLGenerator||T.defaultURLGenerator,this.table.options.ajaxURL&&this.setUrl(this.table.options.ajaxURL),this.setDefaultConfig(this.table.options.ajaxConfig),this.registerTableFunction("getAjaxUrl",this.getUrl.bind(this)),this.subscribe("data-loading",this.requestDataCheck.bind(this)),this.subscribe("data-params",this.requestParams.bind(this)),this.subscribe("data-load",this.requestData.bind(this))}requestParams(t,e,i,n){var o=this.table.options.ajaxParams;return o&&("function"==typeof o&&(o=o.call(this.table)),n=Object.assign(n,o)),n}requestDataCheck(t,e,i,n){return!((t||!this.url)&&"string"!=typeof t)}requestData(t,e,i,n,o){var r;return!o&&this.requestDataCheck(t)?(t&&this.setUrl(t),r=this.generateConfig(i),this.sendRequest(this.url,e,r)):o}setDefaultConfig(t={}){this.config=Object.assign({},T.defaultConfig),"string"==typeof t?this.config.method=t:Object.assign(this.config,t)}generateConfig(t={}){var e=Object.assign({},this.config);return"string"==typeof t?e.method=t:Object.assign(e,t),e}setUrl(t){this.url=t}getUrl(){return this.url}sendRequest(t,e,i){return!1!==this.table.options.ajaxRequesting.call(this.table,t,e)?this.loaderPromise(t,i,e).then((i=>(this.table.options.ajaxResponse&&(i=this.table.options.ajaxResponse.call(this.table,t,e,i)),i))):Promise.reject()}}T.moduleName="ajax",T.defaultConfig={method:"GET"},T.defaultURLGenerator=k,T.defaultLoaderPromise=function(t,e,i){var n;return new Promise(((o,r)=>{if(t=this.urlGenerator.call(this.table,t,e,i),"GET"!=e.method.toUpperCase())if(n="object"==typeof this.table.options.ajaxContentType?this.table.options.ajaxContentType:this.contentTypeFormatters[this.table.options.ajaxContentType]){for(var a in n.headers)e.headers||(e.headers={}),void 0===e.headers[a]&&(e.headers[a]=n.headers[a]);e.body=n.body.call(this,t,e,i)}else console.warn("Ajax Error - Invalid ajaxContentType value:",this.table.options.ajaxContentType);t?(void 0===e.headers&&(e.headers={}),void 0===e.headers.Accept&&(e.headers.Accept="application/json"),void 0===e.headers["X-Requested-With"]&&(e.headers["X-Requested-With"]="XMLHttpRequest"),void 0===e.mode&&(e.mode="cors"),"cors"==e.mode?(void 0===e.headers.Origin&&(e.headers.Origin=window.location.origin),void 0===e.credentials&&(e.credentials="same-origin")):void 0===e.credentials&&(e.credentials="include"),fetch(t,e).then((t=>{t.ok?t.json().then((t=>{o(t)})).catch((t=>{r(t),console.warn("Ajax Load Error - Invalid JSON returned",t)})):(console.error("Ajax Load Error - Connection Error: "+t.status,t.statusText),r(t))})).catch((t=>{console.error("Ajax Load Error - Connection Error: ",t),r(t)}))):(console.warn("Ajax Load Error - No URL Set"),o([]))}))},T.contentTypeFormatters=_;class z extends E{constructor(t){super(t),this.mode=!0,this.pasteParser=function(){},this.pasteAction=function(){},this.customSelection=!1,this.rowRange=!1,this.blocked=!0,this.registerTableOption("clipboard",!1),this.registerTableOption("clipboardCopyStyled",!0),this.registerTableOption("clipboardCopyConfig",!1),this.registerTableOption("clipboardCopyFormatter",!1),this.registerTableOption("clipboardCopyRowRange","active"),this.registerTableOption("clipboardPasteParser","table"),this.registerTableOption("clipboardPasteAction","insert"),this.registerColumnOption("clipboard"),this.registerColumnOption("titleClipboard")}initialize(){this.mode=this.table.options.clipboard,this.rowRange=this.table.options.clipboardCopyRowRange,!0!==this.mode&&"copy"!==this.mode||this.table.element.addEventListener("copy",(t=>{var e,i,n;this.blocked||(t.preventDefault(),this.customSelection?(e=this.customSelection,this.table.options.clipboardCopyFormatter&&(e=this.table.options.clipboardCopyFormatter("plain",e))):(n=this.table.modules.export.generateExportList(this.table.options.clipboardCopyConfig,this.table.options.clipboardCopyStyled,this.rowRange,"clipboard"),e=(i=this.table.modules.export.generateHTMLTable(n))?this.generatePlainContent(n):"",this.table.options.clipboardCopyFormatter&&(e=this.table.options.clipboardCopyFormatter("plain",e),i=this.table.options.clipboardCopyFormatter("html",i))),window.clipboardData&&window.clipboardData.setData?window.clipboardData.setData("Text",e):t.clipboardData&&t.clipboardData.setData?(t.clipboardData.setData("text/plain",e),i&&t.clipboardData.setData("text/html",i)):t.originalEvent&&t.originalEvent.clipboardData.setData&&(t.originalEvent.clipboardData.setData("text/plain",e),i&&t.originalEvent.clipboardData.setData("text/html",i)),this.dispatchExternal("clipboardCopied",e,i),this.reset())})),!0!==this.mode&&"paste"!==this.mode||this.table.element.addEventListener("paste",(t=>{this.paste(t)})),this.setPasteParser(this.table.options.clipboardPasteParser),this.setPasteAction(this.table.options.clipboardPasteAction),this.registerTableFunction("copyToClipboard",this.copy.bind(this))}reset(){this.blocked=!0,this.customSelection=!1}generatePlainContent(t){var e=[];return t.forEach((t=>{var i=[];t.columns.forEach((e=>{var n="";if(e)if("group"===t.type&&(e.value=e.component.getKey()),null===e.value)n="";else switch(typeof e.value){case"object":n=JSON.stringify(e.value);break;case"undefined":n="";break;default:n=e.value}i.push(n)})),e.push(i.join("\t"))})),e.join("\n")}copy(t,e){var i,n;this.blocked=!1,this.customSelection=!1,!0!==this.mode&&"copy"!==this.mode||(this.rowRange=t||this.table.options.clipboardCopyRowRange,void 0!==window.getSelection&&void 0!==document.createRange?((t=document.createRange()).selectNodeContents(this.table.element),(i=window.getSelection()).toString()&&e&&(this.customSelection=i.toString()),i.removeAllRanges(),i.addRange(t)):void 0!==document.selection&&void 0!==document.body.createTextRange&&((n=document.body.createTextRange()).moveToElementText(this.table.element),n.select()),document.execCommand("copy"),i&&i.removeAllRanges())}setPasteAction(t){switch(typeof t){case"string":this.pasteAction=z.pasteActions[t],this.pasteAction||console.warn("Clipboard Error - No such paste action found:",t);break;case"function":this.pasteAction=t}}setPasteParser(t){switch(typeof t){case"string":this.pasteParser=z.pasteParsers[t],this.pasteParser||console.warn("Clipboard Error - No such paste parser found:",t);break;case"function":this.pasteParser=t}}paste(t){var e,i,n;this.checkPaseOrigin(t)&&(e=this.getPasteData(t),(i=this.pasteParser.call(this,e))?(t.preventDefault(),this.table.modExists("mutator")&&(i=this.mutateData(i)),n=this.pasteAction.call(this,i),this.dispatchExternal("clipboardPasted",e,i,n)):this.dispatchExternal("clipboardPasteError",e))}mutateData(t){var e=[];return Array.isArray(t)?t.forEach((t=>{e.push(this.table.modules.mutator.transformRow(t,"clipboard"))})):e=t,e}checkPaseOrigin(t){var e=!0;return("DIV"!=t.target.tagName||this.table.modules.edit.currentCell)&&(e=!1),e}getPasteData(t){var e;return window.clipboardData&&window.clipboardData.getData?e=window.clipboardData.getData("Text"):t.clipboardData&&t.clipboardData.getData?e=t.clipboardData.getData("text/plain"):t.originalEvent&&t.originalEvent.clipboardData.getData&&(e=t.originalEvent.clipboardData.getData("text/plain")),e}}z.moduleName="clipboard",z.pasteActions={replace:function(t){return this.table.setData(t)},update:function(t){return this.table.updateOrAddData(t)},insert:function(t){return this.table.addData(t)}},z.pasteParsers={table:function(t){var e=[],i=!0,n=this.table.columnManager.columns,o=[],r=[];return(t=t.split("\n")).forEach((function(t){e.push(t.split("\t"))})),!(!e.length||1===e.length&&e[0].length<2)&&(e[0].forEach((function(t){var e=n.find((function(e){return t&&e.definition.title&&t.trim()&&e.definition.title.trim()===t.trim()}));e?o.push(e):i=!1})),i||(i=!0,o=[],e[0].forEach((function(t){var e=n.find((function(e){return t&&e.field&&t.trim()&&e.field.trim()===t.trim()}));e?o.push(e):i=!1})),i||(o=this.table.columnManager.columnsByIndex)),i&&e.shift(),e.forEach((function(t){var e={};t.forEach((function(t,i){o[i]&&(e[o[i].field]=t)})),r.push(e)})),r)}};class M{constructor(t){return this._row=t,new Proxy(this,{get:function(t,e,i){return void 0!==t[e]?t[e]:t._row.table.componentFunctionBinder.handle("row",t._row,e)}})}getData(t){return this._row.getData(t)}getElement(){return this._row.getElement()}getTable(){return this._row.table}getCells(){var t=[];return this._row.getCells().forEach((function(e){t.push(e.getComponent())})),t}getCell(t){var e=this._row.getCell(t);return!!e&&e.getComponent()}_getSelf(){return this._row}}class L{constructor(t){return this._cell=t,new Proxy(this,{get:function(t,e,i){return void 0!==t[e]?t[e]:t._cell.table.componentFunctionBinder.handle("cell",t._cell,e)}})}getValue(){return this._cell.getValue()}getOldValue(){return this._cell.getOldValue()}getInitialValue(){return this._cell.initialValue}getElement(){return this._cell.getElement()}getRow(){return this._cell.row.getComponent()}getData(t){return this._cell.row.getData(t)}getType(){return"cell"}getField(){return this._cell.column.getField()}getColumn(){return this._cell.column.getComponent()}setValue(t,e){void 0===e&&(e=!0),this._cell.setValue(t,e)}restoreOldValue(){this._cell.setValueActual(this._cell.getOldValue())}restoreInitialValue(){this._cell.setValueActual(this._cell.initialValue)}checkHeight(){this._cell.checkHeight()}getTable(){return this._cell.table}_getSelf(){return this._cell}}class S extends v{constructor(t,e){super(t.table),this.table=t.table,this.column=t,this.row=e,this.element=null,this.value=null,this.initialValue,this.oldValue=null,this.modules={},this.height=null,this.width=null,this.minWidth=null,this.component=null,this.loaded=!1,this.build()}build(){this.generateElement(),this.setWidth(),this._configureCell(),this.setValueActual(this.column.getFieldValue(this.row.data)),this.initialValue=this.value}generateElement(){this.element=document.createElement("div"),this.element.className="tabulator-cell",this.element.setAttribute("role","gridcell")}_configureCell(){var t=this.element,e=this.column.getField();t.style.textAlign=this.column.hozAlign,this.column.vertAlign&&(t.style.display="inline-flex",t.style.alignItems={top:"flex-start",bottom:"flex-end",middle:"center"}[this.column.vertAlign]||"",this.column.hozAlign&&(t.style.justifyContent={left:"flex-start",right:"flex-end",center:"center"}[this.column.hozAlign]||"")),e&&t.setAttribute("tabulator-field",e),this.column.definition.cssClass&&this.column.definition.cssClass.split(" ").forEach((e=>{t.classList.add(e)})),this.dispatch("cell-init",this),this.column.visible||this.hide()}_generateContents(){var t;switch(typeof(t=this.chain("cell-format",this,null,(()=>this.element.innerHTML=this.value)))){case"object":if(t instanceof Node){for(;this.element.firstChild;)this.element.removeChild(this.element.firstChild);this.element.appendChild(t)}else this.element.innerHTML="",null!=t&&console.warn("Format Error - Formatter has returned a type of object, the only valid formatter object return is an instance of Node, the formatter returned:",t);break;case"undefined":this.element.innerHTML="";break;default:this.element.innerHTML=t}}cellRendered(){this.dispatch("cell-rendered",this)}getElement(t){return this.loaded||(this.loaded=!0,t||this.layoutElement()),this.element}getValue(){return this.value}getOldValue(){return this.oldValue}setValue(t,e,i){this.setValueProcessData(t,e,i)&&(this.dispatch("cell-value-updated",this),this.cellRendered(),this.column.definition.cellEdited&&this.column.definition.cellEdited.call(this.table,this.getComponent()),this.dispatchExternal("cellEdited",this.getComponent()),this.subscribedExternal("dataChanged")&&this.dispatchExternal("dataChanged",this.table.rowManager.getData()))}setValueProcessData(t,e,i){var n=!1;return(this.value!==t||i)&&(n=!0,e&&(t=this.chain("cell-value-changing",[this,t],null,t))),this.setValueActual(t),n&&this.dispatch("cell-value-changed",this),n}setValueActual(t){this.oldValue=this.value,this.value=t,this.dispatch("cell-value-save-before",this),this.column.setFieldValue(this.row.data,t),this.dispatch("cell-value-save-after",this),this.loaded&&this.layoutElement()}layoutElement(){this._generateContents(),this.dispatch("cell-layout",this)}setWidth(){this.width=this.column.width,this.element.style.width=this.column.widthStyled}clearWidth(){this.width="",this.element.style.width=""}getWidth(){return this.width||this.element.offsetWidth}setMinWidth(){this.minWidth=this.column.minWidth,this.element.style.minWidth=this.column.minWidthStyled}setMaxWidth(){this.maxWidth=this.column.maxWidth,this.element.style.maxWidth=this.column.maxWidthStyled}checkHeight(){this.row.reinitializeHeight()}clearHeight(){this.element.style.height="",this.height=null,this.dispatch("cell-height",this,"")}setHeight(){this.height=this.row.height,this.element.style.height=this.row.heightStyled,this.dispatch("cell-height",this,this.row.heightStyled)}getHeight(){return this.height||this.element.offsetHeight}show(){this.element.style.display=this.column.vertAlign?"inline-flex":""}hide(){this.element.style.display="none"}delete(){this.dispatch("cell-delete",this),!this.table.rowManager.redrawBlock&&this.element.parentNode&&this.element.parentNode.removeChild(this.element),this.element=!1,this.column.deleteCell(this),this.row.deleteCell(this),this.calcs={}}getIndex(){return this.row.getCellIndex(this)}getComponent(){return this.component||(this.component=new L(this)),this.component}}class D{constructor(t){return this._column=t,this.type="ColumnComponent",new Proxy(this,{get:function(t,e,i){return void 0!==t[e]?t[e]:t._column.table.componentFunctionBinder.handle("column",t._column,e)}})}getElement(){return this._column.getElement()}getDefinition(){return this._column.getDefinition()}getField(){return this._column.getField()}getTitleDownload(){return this._column.getTitleDownload()}getCells(){var t=[];return this._column.cells.forEach((function(e){t.push(e.getComponent())})),t}isVisible(){return this._column.visible}show(){this._column.isGroup?this._column.columns.forEach((function(t){t.show()})):this._column.show()}hide(){this._column.isGroup?this._column.columns.forEach((function(t){t.hide()})):this._column.hide()}toggle(){this._column.visible?this.hide():this.show()}delete(){return this._column.delete()}getSubColumns(){var t=[];return this._column.columns.length&&this._column.columns.forEach((function(e){t.push(e.getComponent())})),t}getParentColumn(){return this._column.parent instanceof I&&this._column.parent.getComponent()}_getSelf(){return this._column}scrollTo(t,e){return this._column.table.columnManager.scrollToColumn(this._column,t,e)}getTable(){return this._column.table}move(t,e){var i=this._column.table.columnManager.findColumn(t);i?this._column.table.columnManager.moveColumn(this._column,i,e):console.warn("Move Error - No matching column found:",i)}getNextColumn(){var t=this._column.nextColumn();return!!t&&t.getComponent()}getPrevColumn(){var t=this._column.prevColumn();return!!t&&t.getComponent()}updateDefinition(t){return this._column.updateDefinition(t)}getWidth(){return this._column.getWidth()}setWidth(t){var e;return e=!0===t?this._column.reinitializeWidth(!0):this._column.setWidth(t),this._column.table.columnManager.rerenderColumns(!0),e}}var P={title:void 0,field:void 0,columns:void 0,visible:void 0,hozAlign:void 0,vertAlign:void 0,width:void 0,minWidth:40,maxWidth:void 0,maxInitialWidth:void 0,cssClass:void 0,variableHeight:void 0,headerVertical:void 0,headerHozAlign:void 0,headerWordWrap:!1,editableTitle:void 0};class I extends v{constructor(t,e){super(e.table),this.definition=t,this.parent=e,this.type="column",this.columns=[],this.cells=[],this.element=this.createElement(),this.contentElement=!1,this.titleHolderElement=!1,this.titleElement=!1,this.groupElement=this.createGroupElement(),this.isGroup=!1,this.hozAlign="",this.vertAlign="",this.field="",this.fieldStructure="",this.getFieldValue="",this.setFieldValue="",this.titleDownload=null,this.titleFormatterRendered=!1,this.mapDefinitions(),this.setField(this.definition.field),this.modules={},this.width=null,this.widthStyled="",this.maxWidth=null,this.maxWidthStyled="",this.maxInitialWidth=null,this.minWidth=null,this.minWidthStyled="",this.widthFixed=!1,this.visible=!0,this.component=null,this.definition.columns?(this.isGroup=!0,this.definition.columns.forEach(((t,e)=>{var i=new I(t,this);this.attachColumn(i)})),this.checkColumnVisibility()):e.registerColumnField(this),this._initialize()}createElement(){var t=document.createElement("div");switch(t.classList.add("tabulator-col"),t.setAttribute("role","columnheader"),t.setAttribute("aria-sort","none"),this.table.options.columnHeaderVertAlign){case"middle":t.style.justifyContent="center";break;case"bottom":t.style.justifyContent="flex-end"}return t}createGroupElement(){var t=document.createElement("div");return t.classList.add("tabulator-col-group-cols"),t}mapDefinitions(){var t=this.table.options.columnDefaults;if(t)for(let e in t)void 0===this.definition[e]&&(this.definition[e]=t[e]);this.definition=this.table.columnManager.optionsList.generate(I.defaultOptionList,this.definition)}checkDefinition(){Object.keys(this.definition).forEach((t=>{-1===I.defaultOptionList.indexOf(t)&&console.warn("Invalid column definition option in '"+(this.field||this.definition.title)+"' column:",t)}))}setField(t){this.field=t,this.fieldStructure=t?this.table.options.nestedFieldSeparator?t.split(this.table.options.nestedFieldSeparator):[t]:[],this.getFieldValue=this.fieldStructure.length>1?this._getNestedData:this._getFlatData,this.setFieldValue=this.fieldStructure.length>1?this._setNestedData:this._setFlatData}registerColumnPosition(t){this.parent.registerColumnPosition(t)}registerColumnField(t){this.parent.registerColumnField(t)}reRegisterPosition(){this.isGroup?this.columns.forEach((function(t){t.reRegisterPosition()})):this.registerColumnPosition(this)}_initialize(){for(var t=this.definition;this.element.firstChild;)this.element.removeChild(this.element.firstChild);t.headerVertical&&(this.element.classList.add("tabulator-col-vertical"),"flip"===t.headerVertical&&this.element.classList.add("tabulator-col-vertical-flip")),this.contentElement=this._buildColumnHeaderContent(),this.element.appendChild(this.contentElement),this.isGroup?this._buildGroupHeader():this._buildColumnHeader(),this.dispatch("column-init",this)}_buildColumnHeader(){var t=this.definition;this.dispatch("column-layout",this),void 0!==t.visible&&(t.visible?this.show(!0):this.hide(!0)),t.cssClass&&t.cssClass.split(" ").forEach((t=>{this.element.classList.add(t)})),t.field&&this.element.setAttribute("tabulator-field",t.field),this.setMinWidth(parseInt(t.minWidth)),t.maxInitialWidth&&(this.maxInitialWidth=parseInt(t.maxInitialWidth)),t.maxWidth&&this.setMaxWidth(parseInt(t.maxWidth)),this.reinitializeWidth(),this.hozAlign=this.definition.hozAlign,this.vertAlign=this.definition.vertAlign,this.titleElement.style.textAlign=this.definition.headerHozAlign}_buildColumnHeaderContent(){var t=document.createElement("div");return t.classList.add("tabulator-col-content"),this.titleHolderElement=document.createElement("div"),this.titleHolderElement.classList.add("tabulator-col-title-holder"),t.appendChild(this.titleHolderElement),this.titleElement=this._buildColumnHeaderTitle(),this.titleHolderElement.appendChild(this.titleElement),t}_buildColumnHeaderTitle(){var t=this.definition,e=document.createElement("div");if(e.classList.add("tabulator-col-title"),t.headerWordWrap&&e.classList.add("tabulator-col-title-wrap"),t.editableTitle){var i=document.createElement("input");i.classList.add("tabulator-title-editor"),i.addEventListener("click",(t=>{t.stopPropagation(),i.focus()})),i.addEventListener("change",(()=>{t.title=i.value,this.dispatchExternal("columnTitleChanged",this.getComponent())})),e.appendChild(i),t.field?this.langBind("columns|"+t.field,(e=>{i.value=e||t.title||"&nbsp;"})):i.value=t.title||"&nbsp;"}else t.field?this.langBind("columns|"+t.field,(i=>{this._formatColumnHeaderTitle(e,i||t.title||"&nbsp;")})):this._formatColumnHeaderTitle(e,t.title||"&nbsp;");return e}_formatColumnHeaderTitle(t,e){var i=this.chain("column-format",[this,e,t],null,(()=>e));switch(typeof i){case"object":i instanceof Node?t.appendChild(i):(t.innerHTML="",console.warn("Format Error - Title formatter has returned a type of object, the only valid formatter object return is an instance of Node, the formatter returned:",i));break;case"undefined":t.innerHTML="";break;default:t.innerHTML=i}}_buildGroupHeader(){this.element.classList.add("tabulator-col-group"),this.element.setAttribute("role","columngroup"),this.element.setAttribute("aria-title",this.definition.title),this.definition.cssClass&&this.definition.cssClass.split(" ").forEach((t=>{this.element.classList.add(t)})),this.titleElement.style.textAlign=this.definition.headerHozAlign,this.element.appendChild(this.groupElement)}_getFlatData(t){return t[this.field]}_getNestedData(t){var e,i=t,n=this.fieldStructure,o=n.length;for(let t=0;t<o&&(e=i=i[n[t]],i);t++);return e}_setFlatData(t,e){this.field&&(t[this.field]=e)}_setNestedData(t,e){var i=t,n=this.fieldStructure,o=n.length;for(let t=0;t<o;t++)if(t==o-1)i[n[t]]=e;else{if(!i[n[t]]){if(void 0===e)break;i[n[t]]={}}i=i[n[t]]}}attachColumn(t){this.groupElement?(this.columns.push(t),this.groupElement.appendChild(t.getElement()),t.columnRendered()):console.warn("Column Warning - Column being attached to another column instead of column group")}verticalAlign(t,e){var i=this.parent.isGroup?this.parent.getGroupElement().clientHeight:e||this.parent.getHeadersElement().clientHeight;this.element.style.height=i+"px",this.dispatch("column-height",this,this.element.style.height),this.isGroup&&(this.groupElement.style.minHeight=i-this.contentElement.offsetHeight+"px"),this.columns.forEach((function(e){e.verticalAlign(t)}))}clearVerticalAlign(){this.element.style.paddingTop="",this.element.style.height="",this.element.style.minHeight="",this.groupElement.style.minHeight="",this.columns.forEach((function(t){t.clearVerticalAlign()})),this.dispatch("column-height",this,"")}getElement(){return this.element}getGroupElement(){return this.groupElement}getField(){return this.field}getTitleDownload(){return this.titleDownload}getFirstColumn(){return this.isGroup?!!this.columns.length&&this.columns[0].getFirstColumn():this}getLastColumn(){return this.isGroup?!!this.columns.length&&this.columns[this.columns.length-1].getLastColumn():this}getColumns(t){var e=[];return t?this.columns.forEach((t=>{e.push(t),e=e.concat(t.getColumns(!0))})):e=this.columns,e}getCells(){return this.cells}getTopColumn(){return this.parent.isGroup?this.parent.getTopColumn():this}getDefinition(t){var e=[];return this.isGroup&&t&&(this.columns.forEach((function(t){e.push(t.getDefinition(!0))})),this.definition.columns=e),this.definition}checkColumnVisibility(){var t=!1;this.columns.forEach((function(e){e.visible&&(t=!0)})),t?(this.show(),this.dispatchExternal("columnVisibilityChanged",this.getComponent(),!1)):this.hide()}show(t,e){this.visible||(this.visible=!0,this.element.style.display="",this.parent.isGroup&&this.parent.checkColumnVisibility(),this.cells.forEach((function(t){t.show()})),this.isGroup||null!==this.width||this.reinitializeWidth(),this.table.columnManager.verticalAlignHeaders(),this.dispatch("column-show",this,e),t||this.dispatchExternal("columnVisibilityChanged",this.getComponent(),!0),this.parent.isGroup&&this.parent.matchChildWidths(),this.silent||this.table.columnManager.rerenderColumns())}hide(t,e){this.visible&&(this.visible=!1,this.element.style.display="none",this.table.columnManager.verticalAlignHeaders(),this.parent.isGroup&&this.parent.checkColumnVisibility(),this.cells.forEach((function(t){t.hide()})),this.dispatch("column-hide",this,e),t||this.dispatchExternal("columnVisibilityChanged",this.getComponent(),!1),this.parent.isGroup&&this.parent.matchChildWidths(),this.silent||this.table.columnManager.rerenderColumns())}matchChildWidths(){var t=0;this.contentElement&&this.columns.length&&(this.columns.forEach((function(e){e.visible&&(t+=e.getWidth())})),this.contentElement.style.maxWidth=t-1+"px",this.parent.isGroup&&this.parent.matchChildWidths())}removeChild(t){var e=this.columns.indexOf(t);e>-1&&this.columns.splice(e,1),this.columns.length||this.delete()}setWidth(t){this.widthFixed=!0,this.setWidthActual(t)}setWidthActual(t){isNaN(t)&&(t=Math.floor(this.table.element.clientWidth/100*parseInt(t))),t=Math.max(this.minWidth,t),this.maxWidth&&(t=Math.min(this.maxWidth,t)),this.width=t,this.widthStyled=t?t+"px":"",this.element.style.width=this.widthStyled,this.isGroup||this.cells.forEach((function(t){t.setWidth()})),this.parent.isGroup&&this.parent.matchChildWidths(),this.dispatch("column-width",this)}checkCellHeights(){var t=[];this.cells.forEach((function(e){e.row.heightInitialized&&(null!==e.row.getElement().offsetParent?(t.push(e.row),e.row.clearCellHeight()):e.row.heightInitialized=!1)})),t.forEach((function(t){t.calcHeight()})),t.forEach((function(t){t.setCellHeight()}))}getWidth(){var t=0;return this.isGroup?this.columns.forEach((function(e){e.visible&&(t+=e.getWidth())})):t=this.width,t}getLeftOffset(){var t=this.element.offsetLeft;return this.parent.isGroup&&(t+=this.parent.getLeftOffset()),t}getHeight(){return Math.ceil(this.element.getBoundingClientRect().height)}setMinWidth(t){this.maxWidth&&t>this.maxWidth&&(t=this.maxWidth,console.warn("the minWidth ("+t+"px) for column '"+this.field+"' cannot be bigger that its maxWidth ("+this.maxWidthStyled+")")),this.minWidth=t,this.minWidthStyled=t?t+"px":"",this.element.style.minWidth=this.minWidthStyled,this.cells.forEach((function(t){t.setMinWidth()}))}setMaxWidth(t){this.minWidth&&t<this.minWidth&&(t=this.minWidth,console.warn("the maxWidth ("+t+"px) for column '"+this.field+"' cannot be smaller that its minWidth ("+this.minWidthStyled+")")),this.maxWidth=t,this.maxWidthStyled=t?t+"px":"",this.element.style.maxWidth=this.maxWidthStyled,this.cells.forEach((function(t){t.setMaxWidth()}))}delete(){return new Promise(((t,e)=>{this.isGroup&&this.columns.forEach((function(t){t.delete()})),this.dispatch("column-delete",this);var i=this.cells.length;for(let t=0;t<i;t++)this.cells[0].delete();this.element.parentNode&&this.element.parentNode.removeChild(this.element),this.element=!1,this.contentElement=!1,this.titleElement=!1,this.groupElement=!1,this.parent.isGroup&&this.parent.removeChild(this),this.table.columnManager.deregisterColumn(this),this.table.columnManager.rerenderColumns(!0),t()}))}columnRendered(){this.titleFormatterRendered&&this.titleFormatterRendered(),this.dispatch("column-rendered",this)}generateCell(t){var e=new S(this,t);return this.cells.push(e),e}nextColumn(){var t=this.table.columnManager.findColumnIndex(this);return t>-1&&this._nextVisibleColumn(t+1)}_nextVisibleColumn(t){var e=this.table.columnManager.getColumnByIndex(t);return!e||e.visible?e:this._nextVisibleColumn(t+1)}prevColumn(){var t=this.table.columnManager.findColumnIndex(this);return t>-1&&this._prevVisibleColumn(t-1)}_prevVisibleColumn(t){var e=this.table.columnManager.getColumnByIndex(t);return!e||e.visible?e:this._prevVisibleColumn(t-1)}reinitializeWidth(t){this.widthFixed=!1,void 0===this.definition.width||t||this.setWidth(this.definition.width),this.dispatch("column-width-fit-before",this),this.fitToData(t),this.dispatch("column-width-fit-after",this)}fitToData(t){if(!this.isGroup){this.widthFixed||(this.element.style.width="",this.cells.forEach((t=>{t.clearWidth()})));var e=this.element.offsetWidth;if((!this.width||!this.widthFixed)&&(this.cells.forEach((t=>{var i=t.getWidth();i>e&&(e=i)})),e)){var i=e+1;this.maxInitialWidth&&!t&&(i=Math.min(i,this.maxInitialWidth)),this.setWidthActual(i)}}}updateDefinition(t){var e;return this.isGroup||this.parent.isGroup?(console.error("Column Update Error - The updateDefinition function is only available on ungrouped columns"),Promise.reject("Column Update Error - The updateDefinition function is only available on columns, not column groups")):(e=Object.assign({},this.getDefinition()),e=Object.assign(e,t),this.table.columnManager.addColumn(e,!1,this).then((t=>(e.field==this.field&&(this.field=!1),this.delete().then((()=>t.getComponent()))))))}deleteCell(t){var e=this.cells.indexOf(t);e>-1&&this.cells.splice(e,1)}getComponent(){return this.component||(this.component=new D(this)),this.component}}I.defaultOptionList=P;class F{constructor(t){return this._row=t,new Proxy(this,{get:function(t,e,i){return void 0!==t[e]?t[e]:t._row.table.componentFunctionBinder.handle("row",t._row,e)}})}getData(t){return this._row.getData(t)}getElement(){return this._row.getElement()}getCells(){var t=[];return this._row.getCells().forEach((function(e){t.push(e.getComponent())})),t}getCell(t){var e=this._row.getCell(t);return!!e&&e.getComponent()}getIndex(){return this._row.getData("data")[this._row.table.options.index]}getPosition(){return this._row.getPosition()}watchPosition(t){return this._row.watchPosition(t)}delete(){return this._row.delete()}scrollTo(t,e){return this._row.table.rowManager.scrollToRow(this._row,t,e)}move(t,e){this._row.moveToRow(t,e)}update(t){return this._row.updateData(t)}normalizeHeight(){this._row.normalizeHeight(!0)}_getSelf(){return this._row}reformat(){return this._row.reinitialize()}getTable(){return this._row.table}getNextRow(){var t=this._row.nextRow();return t?t.getComponent():t}getPrevRow(){var t=this._row.prevRow();return t?t.getComponent():t}}class H extends v{constructor(t,e,i="row"){super(e.table),this.parent=e,this.data={},this.type=i,this.element=!1,this.modules={},this.cells=[],this.height=0,this.heightStyled="",this.manualHeight=!1,this.outerHeight=0,this.initialized=!1,this.heightInitialized=!1,this.position=0,this.positionWatchers=[],this.component=null,this.created=!1,this.setData(t)}create(){this.created||(this.created=!0,this.generateElement())}createElement(){var t=document.createElement("div");t.classList.add("tabulator-row"),t.setAttribute("role","row"),this.element=t}getElement(){return this.create(),this.element}detachElement(){this.element&&this.element.parentNode&&this.element.parentNode.removeChild(this.element)}generateElement(){this.createElement(),this.dispatch("row-init",this)}generateCells(){this.cells=this.table.columnManager.generateCells(this)}initialize(t,e){if(this.create(),!this.initialized||t){for(this.deleteCells();this.element.firstChild;)this.element.removeChild(this.element.firstChild);this.dispatch("row-layout-before",this),this.generateCells(),this.initialized=!0,this.table.columnManager.renderer.renderRowCells(this,e),t&&this.normalizeHeight(),this.dispatch("row-layout",this),this.table.options.rowFormatter&&this.table.options.rowFormatter(this.getComponent()),this.dispatch("row-layout-after",this)}else this.table.columnManager.renderer.rerenderRowCells(this,e)}rendered(){this.cells.forEach((t=>{t.cellRendered()}))}reinitializeHeight(){this.heightInitialized=!1,this.element&&null!==this.element.offsetParent&&this.normalizeHeight(!0)}deinitialize(){this.initialized=!1}deinitializeHeight(){this.heightInitialized=!1}reinitialize(t){this.initialized=!1,this.heightInitialized=!1,this.manualHeight||(this.height=0,this.heightStyled=""),this.element&&null!==this.element.offsetParent&&this.initialize(!0),this.dispatch("row-relayout",this)}calcHeight(t){var e,i=0;this.table.options.rowHeight?this.height=this.table.options.rowHeight:(e=this.table.options.resizableRows?this.element.clientHeight:0,this.cells.forEach((function(t){var e=t.getHeight();e>i&&(i=e)})),this.height=t?Math.max(i,e):this.manualHeight?this.height:Math.max(i,e)),this.heightStyled=this.height?this.height+"px":"",this.outerHeight=this.element.offsetHeight}setCellHeight(){this.cells.forEach((function(t){t.setHeight()})),this.heightInitialized=!0}clearCellHeight(){this.cells.forEach((function(t){t.clearHeight()}))}normalizeHeight(t){t&&!this.table.options.rowHeight&&this.clearCellHeight(),this.calcHeight(t),this.setCellHeight()}setHeight(t,e){(this.height!=t||e)&&(this.manualHeight=!0,this.height=t,this.heightStyled=t?t+"px":"",this.setCellHeight(),this.outerHeight=this.element.offsetHeight)}getHeight(){return this.outerHeight}getWidth(){return this.element.offsetWidth}deleteCell(t){var e=this.cells.indexOf(t);e>-1&&this.cells.splice(e,1)}setData(t){this.data=this.chain("row-data-init-before",[this,t],void 0,t),this.dispatch("row-data-init-after",this)}updateData(t){var e,i=this.element&&w.elVisible(this.element),n={};return new Promise(((o,r)=>{"string"==typeof t&&(t=JSON.parse(t)),this.dispatch("row-data-save-before",this),this.subscribed("row-data-changing")&&(n=Object.assign(n,this.data),n=Object.assign(n,t)),e=this.chain("row-data-changing",[this,n,t],null,t);for(let t in e)this.data[t]=e[t];this.dispatch("row-data-save-after",this);for(let n in t)this.table.columnManager.getColumnsByFieldRoot(n).forEach((t=>{let n=this.getCell(t.getField());if(n){let o=t.getFieldValue(e);n.getValue()!==o&&(n.setValueProcessData(o),i&&n.cellRendered())}}));i?(this.normalizeHeight(!0),this.table.options.rowFormatter&&this.table.options.rowFormatter(this.getComponent())):(this.initialized=!1,this.height=0,this.heightStyled=""),this.dispatch("row-data-changed",this,i,t),this.dispatchExternal("rowUpdated",this.getComponent()),this.subscribedExternal("dataChanged")&&this.dispatchExternal("dataChanged",this.table.rowManager.getData()),o()}))}getData(t){return t?this.chain("row-data-retrieve",[this,t],null,this.data):this.data}getCell(t){return t=this.table.columnManager.findColumn(t),this.initialized||0!==this.cells.length||this.generateCells(),this.cells.find((function(e){return e.column===t}))}getCellIndex(t){return this.cells.findIndex((function(e){return e===t}))}findCell(t){return this.cells.find((e=>e.element===t))}getCells(){return this.initialized||0!==this.cells.length||this.generateCells(),this.cells}nextRow(){return this.table.rowManager.nextDisplayRow(this,!0)||!1}prevRow(){return this.table.rowManager.prevDisplayRow(this,!0)||!1}moveToRow(t,e){var i=this.table.rowManager.findRow(t);i?(this.table.rowManager.moveRowActual(this,i,!e),this.table.rowManager.refreshActiveData("display",!1,!0)):console.warn("Move Error - No matching row found:",t)}delete(){return this.dispatch("row-delete",this),this.deleteActual(),Promise.resolve()}deleteActual(t){this.detachModules(),this.table.rowManager.deleteRow(this,t),this.deleteCells(),this.initialized=!1,this.heightInitialized=!1,this.element=!1,this.dispatch("row-deleted",this)}detachModules(){this.dispatch("row-deleting",this)}deleteCells(){var t=this.cells.length;for(let e=0;e<t;e++)this.cells[0].delete()}wipe(){if(this.detachModules(),this.deleteCells(),this.element){for(;this.element.firstChild;)this.element.removeChild(this.element.firstChild);this.element.parentNode&&this.element.parentNode.removeChild(this.element)}this.element=!1,this.modules={}}isDisplayed(){return this.table.rowManager.getDisplayRows().includes(this)}getPosition(){return!!this.isDisplayed()&&this.position}setPosition(t){t!=this.position&&(this.position=t,this.positionWatchers.forEach((t=>{t(this.position)})))}watchPosition(t){this.positionWatchers.push(t),t(this.position)}getGroup(){return this.modules.group||!1}getComponent(){return this.component||(this.component=new F(this)),this.component}}var O={avg:function(t,e,i){var n=0,o=void 0!==i.precision?i.precision:2;return t.length&&(n=t.reduce((function(t,e){return Number(t)+Number(e)})),n/=t.length,n=!1!==o?n.toFixed(o):n),parseFloat(n).toString()},max:function(t,e,i){var n=null,o=void 0!==i.precision&&i.precision;return t.forEach((function(t){((t=Number(t))>n||null===n)&&(n=t)})),null!==n?!1!==o?n.toFixed(o):n:""},min:function(t,e,i){var n=null,o=void 0!==i.precision&&i.precision;return t.forEach((function(t){((t=Number(t))<n||null===n)&&(n=t)})),null!==n?!1!==o?n.toFixed(o):n:""},sum:function(t,e,i){var n=0,o=void 0!==i.precision&&i.precision;return t.length&&t.forEach((function(t){t=Number(t),n+=isNaN(t)?0:Number(t)})),!1!==o?n.toFixed(o):n},concat:function(t,e,i){var n=0;return t.length&&(n=t.reduce((function(t,e){return String(t)+String(e)}))),n},count:function(t,e,i){var n=0;return t.length&&t.forEach((function(t){t&&n++})),n},unique:function(t,e,i){return t.filter(((e,i)=>(t||0===e)&&t.indexOf(e)===i)).length}};class W extends E{constructor(t){super(t),this.topCalcs=[],this.botCalcs=[],this.genColumn=!1,this.topElement=this.createElement(),this.botElement=this.createElement(),this.topRow=!1,this.botRow=!1,this.topInitialized=!1,this.botInitialized=!1,this.blocked=!1,this.recalcAfterBlock=!1,this.registerTableOption("columnCalcs",!0),this.registerColumnOption("topCalc"),this.registerColumnOption("topCalcParams"),this.registerColumnOption("topCalcFormatter"),this.registerColumnOption("topCalcFormatterParams"),this.registerColumnOption("bottomCalc"),this.registerColumnOption("bottomCalcParams"),this.registerColumnOption("bottomCalcFormatter"),this.registerColumnOption("bottomCalcFormatterParams")}createElement(){var t=document.createElement("div");return t.classList.add("tabulator-calcs-holder"),t}initialize(){this.genColumn=new I({field:"value"},this),this.subscribe("cell-value-changed",this.cellValueChanged.bind(this)),this.subscribe("column-init",this.initializeColumnCheck.bind(this)),this.subscribe("row-deleted",this.rowsUpdated.bind(this)),this.subscribe("scroll-horizontal",this.scrollHorizontal.bind(this)),this.subscribe("row-added",this.rowsUpdated.bind(this)),this.subscribe("column-moved",this.recalcActiveRows.bind(this)),this.subscribe("column-add",this.recalcActiveRows.bind(this)),this.subscribe("data-refreshed",this.recalcActiveRowsRefresh.bind(this)),this.subscribe("table-redraw",this.tableRedraw.bind(this)),this.subscribe("rows-visible",this.visibleRows.bind(this)),this.subscribe("scrollbar-vertical",this.adjustForScrollbar.bind(this)),this.subscribe("redraw-blocked",this.blockRedraw.bind(this)),this.subscribe("redraw-restored",this.restoreRedraw.bind(this)),this.subscribe("table-redrawing",this.resizeHolderWidth.bind(this)),this.subscribe("column-resized",this.resizeHolderWidth.bind(this)),this.subscribe("column-show",this.resizeHolderWidth.bind(this)),this.subscribe("column-hide",this.resizeHolderWidth.bind(this)),this.registerTableFunction("getCalcResults",this.getResults.bind(this)),this.registerTableFunction("recalc",this.userRecalc.bind(this)),this.resizeHolderWidth()}resizeHolderWidth(){this.topElement.style.minWidth=this.table.columnManager.headersElement.offsetWidth+"px"}tableRedraw(t){this.recalc(this.table.rowManager.activeRows),t&&this.redraw()}blockRedraw(){this.blocked=!0,this.recalcAfterBlock=!1}restoreRedraw(){this.blocked=!1,this.recalcAfterBlock&&(this.recalcAfterBlock=!1,this.recalcActiveRowsRefresh())}userRecalc(){this.recalc(this.table.rowManager.activeRows)}blockCheck(){return this.blocked&&(this.recalcAfterBlock=!0),this.blocked}visibleRows(t,e){return this.topRow&&e.unshift(this.topRow),this.botRow&&e.push(this.botRow),e}rowsUpdated(t){this.table.options.groupBy?this.recalcRowGroup(t):this.recalcActiveRows()}recalcActiveRowsRefresh(){this.table.options.groupBy&&this.table.options.dataTreeStartExpanded&&this.table.options.dataTree?this.recalcAll():this.recalcActiveRows()}recalcActiveRows(){this.recalc(this.table.rowManager.activeRows)}cellValueChanged(t){(t.column.definition.topCalc||t.column.definition.bottomCalc)&&(this.table.options.groupBy?("table"!=this.table.options.columnCalcs&&"both"!=this.table.options.columnCalcs||this.recalcActiveRows(),"table"!=this.table.options.columnCalcs&&this.recalcRowGroup(t.row)):this.recalcActiveRows())}initializeColumnCheck(t){(t.definition.topCalc||t.definition.bottomCalc)&&this.initializeColumn(t)}initializeColumn(t){var e=t.definition,i={topCalcParams:e.topCalcParams||{},botCalcParams:e.bottomCalcParams||{}};if(e.topCalc){switch(typeof e.topCalc){case"string":W.calculations[e.topCalc]?i.topCalc=W.calculations[e.topCalc]:console.warn("Column Calc Error - No such calculation found, ignoring: ",e.topCalc);break;case"function":i.topCalc=e.topCalc}i.topCalc&&(t.modules.columnCalcs=i,this.topCalcs.push(t),"group"!=this.table.options.columnCalcs&&this.initializeTopRow())}if(e.bottomCalc){switch(typeof e.bottomCalc){case"string":W.calculations[e.bottomCalc]?i.botCalc=W.calculations[e.bottomCalc]:console.warn("Column Calc Error - No such calculation found, ignoring: ",e.bottomCalc);break;case"function":i.botCalc=e.bottomCalc}i.botCalc&&(t.modules.columnCalcs=i,this.botCalcs.push(t),"group"!=this.table.options.columnCalcs&&this.initializeBottomRow())}}registerColumnField(){}removeCalcs(){var t=!1;this.topInitialized&&(this.topInitialized=!1,this.topElement.parentNode.removeChild(this.topElement),t=!0),this.botInitialized&&(this.botInitialized=!1,this.footerRemove(this.botElement),t=!0),t&&this.table.rowManager.adjustTableSize()}reinitializeCalcs(){this.topCalcs.length&&this.initializeTopRow(),this.botCalcs.length&&this.initializeBottomRow()}initializeTopRow(){this.topInitialized||(this.table.columnManager.getContentsElement().insertBefore(this.topElement,this.table.columnManager.headersElement.nextSibling),this.topInitialized=!0)}initializeBottomRow(){this.botInitialized||(this.footerPrepend(this.botElement),this.botInitialized=!0)}scrollHorizontal(t){this.botInitialized&&this.botRow&&(this.botElement.scrollLeft=t)}recalc(t){var e,i;if(!this.blockCheck()&&(this.topInitialized||this.botInitialized)){if(e=this.rowsToData(t),this.topInitialized){for(this.topRow&&this.topRow.deleteCells(),i=this.generateRow("top",e),this.topRow=i;this.topElement.firstChild;)this.topElement.removeChild(this.topElement.firstChild);this.topElement.appendChild(i.getElement()),i.initialize(!0)}if(this.botInitialized){for(this.botRow&&this.botRow.deleteCells(),i=this.generateRow("bottom",e),this.botRow=i;this.botElement.firstChild;)this.botElement.removeChild(this.botElement.firstChild);this.botElement.appendChild(i.getElement()),i.initialize(!0)}this.table.rowManager.adjustTableSize(),this.table.modExists("frozenColumns")&&this.table.modules.frozenColumns.layout()}}recalcRowGroup(t){this.recalcGroup(this.table.modules.groupRows.getRowGroup(t))}recalcAll(){(this.topCalcs.length||this.botCalcs.length)&&("group"!==this.table.options.columnCalcs&&this.recalcActiveRows(),this.table.options.groupBy&&"table"!==this.table.options.columnCalcs&&this.table.modules.groupRows.getChildGroups().forEach((t=>{this.recalcGroup(t)})))}recalcGroup(t){var e,i;this.blockCheck()||t&&t.calcs&&(t.calcs.bottom&&(e=this.rowsToData(t.rows),i=this.generateRowData("bottom",e),t.calcs.bottom.updateData(i),t.calcs.bottom.reinitialize()),t.calcs.top&&(e=this.rowsToData(t.rows),i=this.generateRowData("top",e),t.calcs.top.updateData(i),t.calcs.top.reinitialize()))}generateTopRow(t){return this.generateRow("top",this.rowsToData(t))}generateBottomRow(t){return this.generateRow("bottom",this.rowsToData(t))}rowsToData(t){var e=[];return t.forEach((t=>{if(e.push(t.getData()),this.table.options.dataTree&&this.table.options.dataTreeChildColumnCalcs&&t.modules.dataTree&&t.modules.dataTree.open){var i=this.rowsToData(this.table.modules.dataTree.getFilteredTreeChildren(t));e=e.concat(i)}})),e}generateRow(t,e){var i,n=this.generateRowData(t,e);return this.table.modExists("mutator")&&this.table.modules.mutator.disable(),i=new H(n,this,"calc"),this.table.modExists("mutator")&&this.table.modules.mutator.enable(),i.getElement().classList.add("tabulator-calcs","tabulator-calcs-"+t),i.component=!1,i.getComponent=()=>(i.component||(i.component=new M(i)),i.component),i.generateCells=()=>{var e=[];this.table.columnManager.columnsByIndex.forEach((n=>{this.genColumn.setField(n.getField()),this.genColumn.hozAlign=n.hozAlign,n.definition[t+"CalcFormatter"]&&this.table.modExists("format")?this.genColumn.modules.format={formatter:this.table.modules.format.getFormatter(n.definition[t+"CalcFormatter"]),params:n.definition[t+"CalcFormatterParams"]||{}}:this.genColumn.modules.format={formatter:this.table.modules.format.getFormatter("plaintext"),params:{}},this.genColumn.definition.cssClass=n.definition.cssClass;var o=new S(this.genColumn,i);o.getElement(),o.column=n,o.setWidth(),n.cells.push(o),e.push(o),n.visible||o.hide()})),i.cells=e},i}generateRowData(t,e){var i,n,o={},r="top"==t?this.topCalcs:this.botCalcs,a="top"==t?"topCalc":"botCalc";return r.forEach((function(t){var r=[];t.modules.columnCalcs&&t.modules.columnCalcs[a]&&(e.forEach((function(e){r.push(t.getFieldValue(e))})),n=a+"Params",i="function"==typeof t.modules.columnCalcs[n]?t.modules.columnCalcs[n](r,e):t.modules.columnCalcs[n],t.setFieldValue(o,t.modules.columnCalcs[a](r,e,i)))})),o}hasTopCalcs(){return!!this.topCalcs.length}hasBottomCalcs(){return!!this.botCalcs.length}redraw(){this.topRow&&this.topRow.normalizeHeight(!0),this.botRow&&this.botRow.normalizeHeight(!0)}getResults(){var t={};return this.table.options.groupBy&&this.table.modExists("groupRows")?this.table.modules.groupRows.getGroups(!0).forEach((e=>{t[e.getKey()]=this.getGroupResults(e)})):t={top:this.topRow?this.topRow.getData():{},bottom:this.botRow?this.botRow.getData():{}},t}getGroupResults(t){var e=t._getSelf(),i=t.getSubGroups(),n={};return i.forEach((t=>{n[t.getKey()]=this.getGroupResults(t)})),{top:e.calcs.top?e.calcs.top.getData():{},bottom:e.calcs.bottom?e.calcs.bottom.getData():{},groups:n}}adjustForScrollbar(t){this.botRow&&(this.table.rtl?this.botElement.style.paddingLeft=t+"px":this.botElement.style.paddingRight=t+"px")}}W.moduleName="columnCalcs",W.calculations=O;class j extends E{constructor(t){super(t),this.indent=10,this.field="",this.collapseEl=null,this.expandEl=null,this.branchEl=null,this.elementField=!1,this.startOpen=function(){},this.registerTableOption("dataTree",!1),this.registerTableOption("dataTreeFilter",!0),this.registerTableOption("dataTreeSort",!0),this.registerTableOption("dataTreeElementColumn",!1),this.registerTableOption("dataTreeBranchElement",!0),this.registerTableOption("dataTreeChildIndent",9),this.registerTableOption("dataTreeChildField","_children"),this.registerTableOption("dataTreeCollapseElement",!1),this.registerTableOption("dataTreeExpandElement",!1),this.registerTableOption("dataTreeStartExpanded",!1),this.registerTableOption("dataTreeChildColumnCalcs",!1),this.registerTableOption("dataTreeSelectPropagate",!1),this.registerComponentFunction("row","treeCollapse",this.collapseRow.bind(this)),this.registerComponentFunction("row","treeExpand",this.expandRow.bind(this)),this.registerComponentFunction("row","treeToggle",this.toggleRow.bind(this)),this.registerComponentFunction("row","getTreeParent",this.getTreeParent.bind(this)),this.registerComponentFunction("row","getTreeChildren",this.getRowChildren.bind(this)),this.registerComponentFunction("row","addTreeChild",this.addTreeChildRow.bind(this)),this.registerComponentFunction("row","isTreeExpanded",this.isRowExpanded.bind(this))}initialize(){if(this.table.options.dataTree){var t=null,e=this.table.options;switch(this.field=e.dataTreeChildField,this.indent=e.dataTreeChildIndent,this.options("movableRows")&&console.warn("The movableRows option is not available with dataTree enabled, moving of child rows could result in unpredictable behavior"),e.dataTreeBranchElement?!0===e.dataTreeBranchElement?(this.branchEl=document.createElement("div"),this.branchEl.classList.add("tabulator-data-tree-branch")):"string"==typeof e.dataTreeBranchElement?((t=document.createElement("div")).innerHTML=e.dataTreeBranchElement,this.branchEl=t.firstChild):this.branchEl=e.dataTreeBranchElement:(this.branchEl=document.createElement("div"),this.branchEl.classList.add("tabulator-data-tree-branch-empty")),e.dataTreeCollapseElement?"string"==typeof e.dataTreeCollapseElement?((t=document.createElement("div")).innerHTML=e.dataTreeCollapseElement,this.collapseEl=t.firstChild):this.collapseEl=e.dataTreeCollapseElement:(this.collapseEl=document.createElement("div"),this.collapseEl.classList.add("tabulator-data-tree-control"),this.collapseEl.tabIndex=0,this.collapseEl.innerHTML="<div class='tabulator-data-tree-control-collapse'></div>"),e.dataTreeExpandElement?"string"==typeof e.dataTreeExpandElement?((t=document.createElement("div")).innerHTML=e.dataTreeExpandElement,this.expandEl=t.firstChild):this.expandEl=e.dataTreeExpandElement:(this.expandEl=document.createElement("div"),this.expandEl.classList.add("tabulator-data-tree-control"),this.expandEl.tabIndex=0,this.expandEl.innerHTML="<div class='tabulator-data-tree-control-expand'></div>"),typeof e.dataTreeStartExpanded){case"boolean":this.startOpen=function(t,i){return e.dataTreeStartExpanded};break;case"function":this.startOpen=e.dataTreeStartExpanded;break;default:this.startOpen=function(t,i){return e.dataTreeStartExpanded[i]}}this.subscribe("row-init",this.initializeRow.bind(this)),this.subscribe("row-layout-after",this.layoutRow.bind(this)),this.subscribe("row-deleted",this.rowDelete.bind(this),0),this.subscribe("row-data-changed",this.rowDataChanged.bind(this),10),this.subscribe("cell-value-updated",this.cellValueChanged.bind(this)),this.subscribe("edit-cancelled",this.cellValueChanged.bind(this)),this.subscribe("column-moving-rows",this.columnMoving.bind(this)),this.subscribe("table-built",this.initializeElementField.bind(this)),this.subscribe("table-redrawing",this.tableRedrawing.bind(this)),this.registerDisplayHandler(this.getRows.bind(this),30)}}tableRedrawing(t){t&&this.table.rowManager.getRows().forEach((t=>{this.reinitializeRowChildren(t)}))}initializeElementField(){var t=this.table.columnManager.getFirstVisibleColumn();this.elementField=this.table.options.dataTreeElementColumn||!!t&&t.field}getRowChildren(t){return this.getTreeChildren(t,!0)}columnMoving(){var t=[];return this.table.rowManager.rows.forEach((e=>{t=t.concat(this.getTreeChildren(e,!1,!0))})),t}rowDataChanged(t,e,i){this.redrawNeeded(i)&&(this.initializeRow(t),e&&(this.layoutRow(t),this.refreshData(!0)))}cellValueChanged(t){t.column.getField()===this.elementField&&this.layoutRow(t.row)}initializeRow(t){var e=t.getData()[this.field],i=Array.isArray(e),n=i||!i&&"object"==typeof e&&null!==e;!n&&t.modules.dataTree&&t.modules.dataTree.branchEl&&t.modules.dataTree.branchEl.parentNode.removeChild(t.modules.dataTree.branchEl),!n&&t.modules.dataTree&&t.modules.dataTree.controlEl&&t.modules.dataTree.controlEl.parentNode.removeChild(t.modules.dataTree.controlEl),t.modules.dataTree={index:t.modules.dataTree?t.modules.dataTree.index:0,open:!!n&&(t.modules.dataTree?t.modules.dataTree.open:this.startOpen(t.getComponent(),0)),controlEl:!(!t.modules.dataTree||!n)&&t.modules.dataTree.controlEl,branchEl:!(!t.modules.dataTree||!n)&&t.modules.dataTree.branchEl,parent:!!t.modules.dataTree&&t.modules.dataTree.parent,children:n}}reinitializeRowChildren(t){this.getTreeChildren(t,!1,!0).forEach((function(t){t.reinitialize(!0)}))}layoutRow(t){var e=(this.elementField?t.getCell(this.elementField):t.getCells()[0]).getElement(),i=t.modules.dataTree;i.branchEl&&(i.branchEl.parentNode&&i.branchEl.parentNode.removeChild(i.branchEl),i.branchEl=!1),i.controlEl&&(i.controlEl.parentNode&&i.controlEl.parentNode.removeChild(i.controlEl),i.controlEl=!1),this.generateControlElement(t,e),t.getElement().classList.add("tabulator-tree-level-"+i.index),i.index&&(this.branchEl?(i.branchEl=this.branchEl.cloneNode(!0),e.insertBefore(i.branchEl,e.firstChild),this.table.rtl?i.branchEl.style.marginRight=(i.branchEl.offsetWidth+i.branchEl.style.marginLeft)*(i.index-1)+i.index*this.indent+"px":i.branchEl.style.marginLeft=(i.branchEl.offsetWidth+i.branchEl.style.marginRight)*(i.index-1)+i.index*this.indent+"px"):this.table.rtl?e.style.paddingRight=parseInt(window.getComputedStyle(e,null).getPropertyValue("padding-right"))+i.index*this.indent+"px":e.style.paddingLeft=parseInt(window.getComputedStyle(e,null).getPropertyValue("padding-left"))+i.index*this.indent+"px")}generateControlElement(t,e){var i=t.modules.dataTree,n=i.controlEl;e=e||t.getCells()[0].getElement(),!1!==i.children&&(i.open?(i.controlEl=this.collapseEl.cloneNode(!0),i.controlEl.addEventListener("click",(e=>{e.stopPropagation(),this.collapseRow(t)}))):(i.controlEl=this.expandEl.cloneNode(!0),i.controlEl.addEventListener("click",(e=>{e.stopPropagation(),this.expandRow(t)}))),i.controlEl.addEventListener("mousedown",(t=>{t.stopPropagation()})),n&&n.parentNode===e?n.parentNode.replaceChild(i.controlEl,n):e.insertBefore(i.controlEl,e.firstChild))}getRows(t){var e=[];return t.forEach(((t,i)=>{var n;e.push(t),t instanceof H&&(t.create(),(n=t.modules.dataTree).index||!1===n.children||this.getChildren(t).forEach((t=>{t.create(),e.push(t)})))})),e}getChildren(t,e){var i=t.modules.dataTree,n=[],o=[];return!1!==i.children&&(i.open||e)&&(Array.isArray(i.children)||(i.children=this.generateChildren(t)),n=this.table.modExists("filter")&&this.table.options.dataTreeFilter?this.table.modules.filter.filter(i.children):i.children,this.table.modExists("sort")&&this.table.options.dataTreeSort&&this.table.modules.sort.sort(n),n.forEach((t=>{o.push(t),this.getChildren(t).forEach((t=>{o.push(t)}))}))),o}generateChildren(t){var e=[],i=t.getData()[this.field];return Array.isArray(i)||(i=[i]),i.forEach((i=>{var n=new H(i||{},this.table.rowManager);n.create(),n.modules.dataTree.index=t.modules.dataTree.index+1,n.modules.dataTree.parent=t,n.modules.dataTree.children&&(n.modules.dataTree.open=this.startOpen(n.getComponent(),n.modules.dataTree.index)),e.push(n)})),e}expandRow(t,e){var i=t.modules.dataTree;!1!==i.children&&(i.open=!0,t.reinitialize(),this.refreshData(!0),this.dispatchExternal("dataTreeRowExpanded",t.getComponent(),t.modules.dataTree.index))}collapseRow(t){var e=t.modules.dataTree;!1!==e.children&&(e.open=!1,t.reinitialize(),this.refreshData(!0),this.dispatchExternal("dataTreeRowCollapsed",t.getComponent(),t.modules.dataTree.index))}toggleRow(t){var e=t.modules.dataTree;!1!==e.children&&(e.open?this.collapseRow(t):this.expandRow(t))}isRowExpanded(t){return t.modules.dataTree.open}getTreeParent(t){return!!t.modules.dataTree.parent&&t.modules.dataTree.parent.getComponent()}getTreeParentRoot(t){return t.modules.dataTree&&t.modules.dataTree.parent?this.getTreeParentRoot(t.modules.dataTree.parent):t}getFilteredTreeChildren(t){var e=t.modules.dataTree,i=[];return e.children&&(Array.isArray(e.children)||(e.children=this.generateChildren(t)),(this.table.modExists("filter")&&this.table.options.dataTreeFilter?this.table.modules.filter.filter(e.children):e.children).forEach((t=>{t instanceof H&&i.push(t)}))),i}rowDelete(t){var e,i=t.modules.dataTree.parent;i&&(!1!==(e=this.findChildIndex(t,i))&&i.data[this.field].splice(e,1),i.data[this.field].length||delete i.data[this.field],this.initializeRow(i),this.layoutRow(i)),this.refreshData(!0)}addTreeChildRow(t,e,i,n){var o=!1;"string"==typeof e&&(e=JSON.parse(e)),Array.isArray(t.data[this.field])||(t.data[this.field]=[],t.modules.dataTree.open=this.startOpen(t.getComponent(),t.modules.dataTree.index)),void 0!==n&&!1!==(o=this.findChildIndex(n,t))&&t.data[this.field].splice(i?o:o+1,0,e),!1===o&&(i?t.data[this.field].unshift(e):t.data[this.field].push(e)),this.initializeRow(t),this.layoutRow(t),this.refreshData(!0)}findChildIndex(t,e){var i=!1;return"object"==typeof t?t instanceof H?i=t.data:t instanceof F?i=t._getSelf().data:"undefined"!=typeof HTMLElement&&t instanceof HTMLElement?e.modules.dataTree&&(i=e.modules.dataTree.children.find((e=>e instanceof H&&e.element===t)))&&(i=i.data):null===t&&(i=!1):i=void 0!==t&&e.data[this.field].find((e=>e.data[this.table.options.index]==t)),i&&(Array.isArray(e.data[this.field])&&(i=e.data[this.field].indexOf(i)),-1==i&&(i=!1)),i}getTreeChildren(t,e,i){var n=t.modules.dataTree,o=[];return n&&n.children&&(Array.isArray(n.children)||(n.children=this.generateChildren(t)),n.children.forEach((t=>{t instanceof H&&(o.push(e?t.getComponent():t),i&&(o=o.concat(this.getTreeChildren(t,e,i))))}))),o}getChildField(){return this.field}redrawNeeded(t){return!!this.field&&void 0!==t[this.field]||!!this.elementField&&void 0!==t[this.elementField]}}j.moduleName="dataTree";var V={csv:function(t,e={},i){var n=e.delimiter?e.delimiter:",",o=[],r=[];t.forEach((t=>{var e=[];switch(t.type){case"group":console.warn("Download Warning - CSV downloader cannot process row groups");break;case"calc":console.warn("Download Warning - CSV downloader cannot process column calculations");break;case"header":t.columns.forEach(((t,e)=>{t&&1===t.depth&&(r[e]=void 0===t.value||null===t.value?"":'"'+String(t.value).split('"').join('""')+'"')}));break;case"row":t.columns.forEach((t=>{if(t){switch(typeof t.value){case"object":t.value=null!==t.value?JSON.stringify(t.value):"";break;case"undefined":t.value=""}e.push('"'+String(t.value).split('"').join('""')+'"')}})),o.push(e.join(n))}})),r.length&&o.unshift(r.join(n)),o=o.join("\n"),e.bom&&(o="\ufeff"+o),i(o,"text/csv")},json:function(t,e,i){var n=[];t.forEach((t=>{var e={};switch(t.type){case"header":break;case"group":console.warn("Download Warning - JSON downloader cannot process row groups");break;case"calc":console.warn("Download Warning - JSON downloader cannot process column calculations");break;case"row":t.columns.forEach((t=>{t&&(e[t.component.getTitleDownload()||t.component.getField()]=t.value)})),n.push(e)}})),i(n=JSON.stringify(n,null,"\t"),"application/json")},jsonLines:function(t,e,i){const n=[];t.forEach((t=>{const e={};switch(t.type){case"header":break;case"group":console.warn("Download Warning - JSON downloader cannot process row groups");break;case"calc":console.warn("Download Warning - JSON downloader cannot process column calculations");break;case"row":t.columns.forEach((t=>{t&&(e[t.component.getTitleDownload()||t.component.getField()]=t.value)})),n.push(JSON.stringify(e))}})),i(n.join("\n"),"application/x-ndjson")},pdf:function(t,e={},i){var n=[],o=[],r={},a=e.rowGroupStyles||{fontStyle:"bold",fontSize:12,cellPadding:6,fillColor:220},l=e.rowCalcStyles||{fontStyle:"bold",fontSize:10,cellPadding:4,fillColor:232},s=e.jsPDF||{},u=e.title?e.title:"";function h(t,e){var i=[];return t.columns.forEach((t=>{var n;if(t){switch(typeof t.value){case"object":t.value=null!==t.value?JSON.stringify(t.value):"";break;case"undefined":t.value=""}n={content:t.value,colSpan:t.width,rowSpan:t.height},e&&(n.styles=e),i.push(n)}})),i}s.orientation||(s.orientation=e.orientation||"landscape"),s.unit||(s.unit="pt"),t.forEach((t=>{switch(t.type){case"header":n.push(h(t));break;case"group":o.push(h(t,a));break;case"calc":o.push(h(t,l));break;case"row":o.push(h(t))}}));var c=new jspdf.jsPDF(s);e.autoTable&&(r="function"==typeof e.autoTable?e.autoTable(c)||{}:e.autoTable),u&&(r.didDrawPage=function(t){c.text(u,40,30)}),r.head=n,r.body=o,c.autoTable(r),e.documentProcessing&&e.documentProcessing(c),i(c.output("arraybuffer"),"application/pdf")},xlsx:function(t,e,i){var n=e.sheetName||"Sheet1",o=XLSX.utils.book_new(),r=new v(this),a=!("compress"in e)||e.compress,l=e.writeOptions||{bookType:"xlsx",bookSST:!0,compression:a};function s(){var e=[],i=[],n={},o={s:{c:0,r:0},e:{c:t[0]?t[0].columns.reduce(((t,e)=>t+(e&&e.width?e.width:1)),0):0,r:t.length}};return t.forEach(((t,n)=>{var o=[];t.columns.forEach((function(t,e){t?(o.push(t.value instanceof Date||"object"!=typeof t.value?t.value:JSON.stringify(t.value)),(t.width>1||t.height>-1)&&(t.height>1||t.width>1)&&i.push({s:{r:n,c:e},e:{r:n+t.height-1,c:e+t.width-1}})):o.push("")})),e.push(o)})),XLSX.utils.sheet_add_aoa(n,e),n["!ref"]=XLSX.utils.encode_range(o),i.length&&(n["!merges"]=i),n}if(l.type="binary",o.SheetNames=[],o.Sheets={},e.sheetOnly)i(s());else{if(e.sheets)for(var u in e.sheets)!0===e.sheets[u]?(o.SheetNames.push(u),o.Sheets[u]=s()):(o.SheetNames.push(u),r.commsSend(e.sheets[u],"download","intercept",{type:"xlsx",options:{sheetOnly:!0},active:this.active,intercept:function(t){o.Sheets[u]=t}}));else o.SheetNames.push(n),o.Sheets[n]=s();e.documentProcessing&&(o=e.documentProcessing(o)),i(function(t){for(var e=new ArrayBuffer(t.length),i=new Uint8Array(e),n=0;n!=t.length;++n)i[n]=255&t.charCodeAt(n);return e}(XLSX.write(o,l)),"application/octet-stream")}},html:function(t,e,i){this.modExists("export",!0)&&i(this.modules.export.generateHTMLTable(t),"text/html")}};class N extends E{constructor(t){super(t),this.registerTableOption("downloadEncoder",(function(t,e){return new Blob([t],{type:e})})),this.registerTableOption("downloadReady",void 0),this.registerTableOption("downloadConfig",{}),this.registerTableOption("downloadRowRange","active"),this.registerColumnOption("download"),this.registerColumnOption("titleDownload")}initialize(){this.deprecatedOptionsCheck(),this.registerTableFunction("download",this.download.bind(this)),this.registerTableFunction("downloadToTab",this.downloadToTab.bind(this))}deprecatedOptionsCheck(){this.deprecationCheck("downloadReady","downloadEncoder")}downloadToTab(t,e,i,n){this.download(t,e,i,n,!0)}download(t,e,i,n,o){var r=!1;if("function"==typeof t?r=t:N.downloaders[t]?r=N.downloaders[t]:console.warn("Download Error - No such download type found: ",t),r){var a=this.generateExportList(n);r.call(this.table,a,i||{},function(i,n){o?!0===o?this.triggerDownload(i,n,t,e,!0):o(i):this.triggerDownload(i,n,t,e)}.bind(this))}}generateExportList(t){var e=this.table.modules.export.generateExportList(this.table.options.downloadConfig,!1,t||this.table.options.downloadRowRange,"download"),i=this.table.options.groupHeaderDownload;return i&&!Array.isArray(i)&&(i=[i]),e.forEach((t=>{var e;"group"===t.type&&(e=t.columns[0],i&&i[t.indent]&&(e.value=i[t.indent](e.value,t.component._group.getRowCount(),t.component._group.getData(),t.component)))})),e}triggerDownload(t,e,i,n,o){var r=document.createElement("a"),a=this.table.options.downloadEncoder(t,e);a&&(o?window.open(window.URL.createObjectURL(a)):(n=n||"Tabulator."+("function"==typeof i?"txt":i),navigator.msSaveOrOpenBlob?navigator.msSaveOrOpenBlob(a,n):(r.setAttribute("href",window.URL.createObjectURL(a)),r.setAttribute("download",n),r.style.display="none",document.body.appendChild(r),r.click(),document.body.removeChild(r))),this.dispatchExternal("downloadComplete"))}commsReceived(t,e,i){"intercept"===e&&this.download(i.type,"",i.options,i.active,i.intercept)}}function G(t,e){var i=e.mask,n=void 0!==e.maskLetterChar?e.maskLetterChar:"A",o=void 0!==e.maskNumberChar?e.maskNumberChar:"9",r=void 0!==e.maskWildcardChar?e.maskWildcardChar:"*";function a(e){var l=i[e];void 0!==l&&l!==r&&l!==n&&l!==o&&(t.value=t.value+""+l,a(e+1))}t.addEventListener("keydown",(e=>{var a=t.value.length,l=e.key;if(e.keyCode>46&&!e.ctrlKey&&!e.metaKey){if(a>=i.length)return e.preventDefault(),e.stopPropagation(),!1;switch(i[a]){case n:if(l.toUpperCase()==l.toLowerCase())return e.preventDefault(),e.stopPropagation(),!1;break;case o:if(isNaN(l))return e.preventDefault(),e.stopPropagation(),!1;break;case r:break;default:if(l!==i[a])return e.preventDefault(),e.stopPropagation(),!1}}})),t.addEventListener("keyup",(i=>{i.keyCode>46&&e.maskAutoFill&&a(t.value.length)})),t.placeholder||(t.placeholder=i),e.maskAutoFill&&a(t.value.length)}N.moduleName="download",N.downloaders=V;class U{constructor(t,e,i,n,o,r){this.edit=t,this.table=t.table,this.cell=e,this.params=this._initializeParams(r),this.data=[],this.displayItems=[],this.currentItems=[],this.focusedItem=null,this.input=this._createInputElement(),this.listEl=this._createListElement(),this.initialValues=null,this.isFilter="header"===e.getType(),this.filterTimeout=null,this.filtered=!1,this.typing=!1,this.values=[],this.popup=null,this.listIteration=0,this.lastAction="",this.filterTerm="",this.blurable=!0,this.actions={success:n,cancel:o},this._deprecatedOptionsCheck(),this._initializeValue(),i(this._onRendered.bind(this))}_deprecatedOptionsCheck(){this.params.listItemFormatter&&this.cell.getTable().deprecationAdvisor.msg("The listItemFormatter editor param has been deprecated, please see the latest editor documentation for updated options"),this.params.sortValuesList&&this.cell.getTable().deprecationAdvisor.msg("The sortValuesList editor param has been deprecated, please see the latest editor documentation for updated options"),this.params.searchFunc&&this.cell.getTable().deprecationAdvisor.msg("The searchFunc editor param has been deprecated, please see the latest editor documentation for updated options"),this.params.searchingPlaceholder&&this.cell.getTable().deprecationAdvisor.msg("The searchingPlaceholder editor param has been deprecated, please see the latest editor documentation for updated options")}_initializeValue(){var t=this.cell.getValue();void 0===t&&void 0!==this.params.defaultValue&&(t=this.params.defaultValue),this.initialValues=this.params.multiselect?t:[t],this.isFilter&&(this.input.value=this.initialValues?this.initialValues.join(","):"",this.headerFilterInitialListGen())}_onRendered(){var t=this.cell.getElement();function e(t){t.stopPropagation()}this.isFilter||(this.input.style.height="100%",this.input.focus({preventScroll:!0})),t.addEventListener("click",e),setTimeout((()=>{t.removeEventListener("click",e)}),1e3),this.input.addEventListener("mousedown",this._preventPopupBlur.bind(this))}_createListElement(){var t=document.createElement("div");return t.classList.add("tabulator-edit-list"),t.addEventListener("mousedown",this._preventBlur.bind(this)),t.addEventListener("keydown",this._inputKeyDown.bind(this)),t}_setListWidth(){var t=this.isFilter?this.input:this.cell.getElement();this.listEl.style.minWidth=t.offsetWidth+"px",this.params.maxWidth&&(!0===this.params.maxWidth?this.listEl.style.maxWidth=t.offsetWidth+"px":"number"==typeof this.params.maxWidth?this.listEl.style.maxWidth=this.params.maxWidth+"px":this.listEl.style.maxWidth=this.params.maxWidth)}_createInputElement(){var t=this.params.elementAttributes,e=document.createElement("input");if(e.setAttribute("type",this.params.clearable?"search":"text"),e.style.padding="4px",e.style.width="100%",e.style.boxSizing="border-box",this.params.autocomplete||(e.style.cursor="default",e.style.caretColor="transparent"),t&&"object"==typeof t)for(let i in t)"+"==i.charAt(0)?(i=i.slice(1),e.setAttribute(i,e.getAttribute(i)+t["+"+i])):e.setAttribute(i,t[i]);return this.params.mask&&G(e,this.params),this._bindInputEvents(e),e}_initializeParams(t){var e,i=["values","valuesURL","valuesLookup"];return(t=Object.assign({},t)).verticalNavigation=t.verticalNavigation||"editor",t.placeholderLoading=void 0===t.placeholderLoading?"Searching ...":t.placeholderLoading,t.placeholderEmpty=void 0===t.placeholderEmpty?"No Results Found":t.placeholderEmpty,t.filterDelay=void 0===t.filterDelay?300:t.filterDelay,t.emptyValue=Object.keys(t).includes("emptyValue")?t.emptyValue:"",(e=Object.keys(t).filter((t=>i.includes(t))).length)?e>1&&console.warn("list editor config error - only one of the values, valuesURL, or valuesLookup options can be set on the same editor"):console.warn("list editor config error - either the values, valuesURL, or valuesLookup option must be set"),t.autocomplete?t.multiselect&&(t.multiselect=!1,console.warn("list editor config error - multiselect option is not available when autocomplete is enabled")):(t.freetext&&(t.freetext=!1,console.warn("list editor config error - freetext option is only available when autocomplete is enabled")),t.filterFunc&&(t.filterFunc=!1,console.warn("list editor config error - filterFunc option is only available when autocomplete is enabled")),t.filterRemote&&(t.filterRemote=!1,console.warn("list editor config error - filterRemote option is only available when autocomplete is enabled")),t.mask&&(t.mask=!1,console.warn("list editor config error - mask option is only available when autocomplete is enabled")),t.allowEmpty&&(t.allowEmpty=!1,console.warn("list editor config error - allowEmpty option is only available when autocomplete is enabled")),t.listOnEmpty&&(t.listOnEmpty=!1,console.warn("list editor config error - listOnEmpty option is only available when autocomplete is enabled"))),t.filterRemote&&"function"!=typeof t.valuesLookup&&!t.valuesURL&&(t.filterRemote=!1,console.warn("list editor config error - filterRemote option should only be used when values list is populated from a remote source")),t}_bindInputEvents(t){t.addEventListener("focus",this._inputFocus.bind(this)),t.addEventListener("click",this._inputClick.bind(this)),t.addEventListener("blur",this._inputBlur.bind(this)),t.addEventListener("keydown",this._inputKeyDown.bind(this)),t.addEventListener("search",this._inputSearch.bind(this)),this.params.autocomplete&&t.addEventListener("keyup",this._inputKeyUp.bind(this))}_inputFocus(t){this.rebuildOptionsList()}_filter(){this.params.filterRemote?(clearTimeout(this.filterTimeout),this.filterTimeout=setTimeout((()=>{this.rebuildOptionsList()}),this.params.filterDelay)):this._filterList()}_inputClick(t){t.stopPropagation()}_inputBlur(t){this.blurable&&(this.popup?this.popup.hide():this._resolveValue(!0))}_inputSearch(){this._clearChoices()}_inputKeyDown(t){switch(t.keyCode){case 38:this._keyUp(t);break;case 40:this._keyDown(t);break;case 37:case 39:this._keySide(t);break;case 13:this._keyEnter();break;case 27:this._keyEsc();break;case 36:case 35:this._keyHomeEnd(t);break;case 9:this._keyTab(t);break;default:this._keySelectLetter(t)}}_inputKeyUp(t){switch(t.keyCode){case 38:case 37:case 39:case 40:case 13:case 27:break;default:this._keyAutoCompLetter(t)}}_preventPopupBlur(){this.popup&&this.popup.blockHide(),setTimeout((()=>{this.popup&&this.popup.restoreHide()}),10)}_preventBlur(){this.blurable=!1,setTimeout((()=>{this.blurable=!0}),10)}_keyTab(t){this.params.autocomplete&&"typing"===this.lastAction?this._resolveValue(!0):this.focusedItem&&this._chooseItem(this.focusedItem,!0)}_keyUp(t){var e=this.displayItems.indexOf(this.focusedItem);("editor"==this.params.verticalNavigation||"hybrid"==this.params.verticalNavigation&&e)&&(t.stopImmediatePropagation(),t.stopPropagation(),t.preventDefault(),e>0&&this._focusItem(this.displayItems[e-1]))}_keyDown(t){var e=this.displayItems.indexOf(this.focusedItem);("editor"==this.params.verticalNavigation||"hybrid"==this.params.verticalNavigation&&e<this.displayItems.length-1)&&(t.stopImmediatePropagation(),t.stopPropagation(),t.preventDefault(),e<this.displayItems.length-1&&(-1==e?this._focusItem(this.displayItems[0]):this._focusItem(this.displayItems[e+1])))}_keySide(t){this.params.autocomplete||(t.stopImmediatePropagation(),t.stopPropagation(),t.preventDefault())}_keyEnter(t){this.params.autocomplete&&"typing"===this.lastAction?this._resolveValue(!0):this.focusedItem&&this._chooseItem(this.focusedItem)}_keyEsc(t){this._cancel()}_keyHomeEnd(t){this.params.autocomplete&&t.stopImmediatePropagation()}_keySelectLetter(t){this.params.autocomplete||(t.preventDefault(),t.keyCode>=38&&t.keyCode<=90&&this._scrollToValue(t.keyCode))}_keyAutoCompLetter(t){this._filter(),this.lastAction="typing",this.typing=!0}_scrollToValue(t){clearTimeout(this.filterTimeout);var e=String.fromCharCode(t).toLowerCase();this.filterTerm+=e.toLowerCase();var i=this.displayItems.find((t=>void 0!==t.label&&t.label.toLowerCase().startsWith(this.filterTerm)));i&&this._focusItem(i),this.filterTimeout=setTimeout((()=>{this.filterTerm=""}),800)}_focusItem(t){this.lastAction="focus",this.focusedItem&&this.focusedItem.element&&this.focusedItem.element.classList.remove("focused"),this.focusedItem=t,t&&t.element&&(t.element.classList.add("focused"),t.element.scrollIntoView({behavior:"smooth",block:"nearest",inline:"start"}))}headerFilterInitialListGen(){this._generateOptions(!0)}rebuildOptionsList(){this._generateOptions().then(this._sortOptions.bind(this)).then(this._buildList.bind(this)).then(this._showList.bind(this)).catch((t=>{Number.isInteger(t)||console.error("List generation error",t)}))}_filterList(){this._buildList(this._filterOptions()),this._showList()}_generateOptions(t){var e=[],i=++this.listIteration;return this.filtered=!1,this.params.values?e=this.params.values:this.params.valuesURL?e=this._ajaxRequest(this.params.valuesURL,this.input.value):"function"==typeof this.params.valuesLookup?e=this.params.valuesLookup(this.cell,this.input.value):this.params.valuesLookup&&(e=this._uniqueColumnValues(this.params.valuesLookupField)),e instanceof Promise?(t||this._addPlaceholder(this.params.placeholderLoading),e.then().then((t=>this.listIteration===i?this._parseList(t):Promise.reject(i)))):Promise.resolve(this._parseList(e))}_addPlaceholder(t){var e=document.createElement("div");"function"==typeof t&&(t=t(this.cell.getComponent(),this.listEl)),t&&(this._clearList(),t instanceof HTMLElement?e=t:(e.classList.add("tabulator-edit-list-placeholder"),e.innerHTML=t),this.listEl.appendChild(e),this._showList())}_ajaxRequest(t,e){return t=k(t,{},this.params.filterRemote?{term:e}:{}),fetch(t).then((t=>t.ok?t.json().catch((t=>(console.warn("List Ajax Load Error - Invalid JSON returned",t),Promise.reject(t)))):(console.error("List Ajax Load Error - Connection Error: "+t.status,t.statusText),Promise.reject(t)))).catch((t=>(console.error("List Ajax Load Error - Connection Error: ",t),Promise.reject(t))))}_uniqueColumnValues(t){var e,i={},n=this.table.getData(this.params.valuesLookup);return(e=t?this.table.columnManager.getColumnByField(t):this.cell.getColumn()._getSelf())?n.forEach((t=>{var n=e.getFieldValue(t);null!=n&&""!==n&&(i[n]=!0)})):(console.warn("unable to find matching column to create select lookup list:",t),i=[]),Object.keys(i)}_parseList(t){var e=[];return Array.isArray(t)||(t=Object.entries(t).map((([t,e])=>({label:e,value:t})))),t.forEach((t=>{"object"!=typeof t&&(t={label:t,value:t}),this._parseListItem(t,e,0)})),!this.currentItems.length&&this.params.freetext&&(this.input.value=this.initialValues,this.typing=!0,this.lastAction="typing"),this.data=e,e}_parseListItem(t,e,i){var n={};t.options?n=this._parseListGroup(t,i+1):(n={label:t.label,value:t.value,itemParams:t.itemParams,elementAttributes:t.elementAttributes,element:!1,selected:!1,visible:!0,level:i,original:t},this.initialValues&&this.initialValues.indexOf(t.value)>-1&&this._chooseItem(n,!0)),e.push(n)}_parseListGroup(t,e){var i={label:t.label,group:!0,itemParams:t.itemParams,elementAttributes:t.elementAttributes,element:!1,visible:!0,level:e,options:[],original:t};return t.options.forEach((t=>{this._parseListItem(t,i.options,e)})),i}_sortOptions(t){var e;return this.params.sort&&(e="function"==typeof this.params.sort?this.params.sort:this._defaultSortFunction.bind(this),this._sortGroup(e,t)),t}_sortGroup(t,e){e.sort(((e,i)=>t(e.label,i.label,e.value,i.value,e.original,i.original))),e.forEach((e=>{e.group&&this._sortGroup(t,e.options)}))}_defaultSortFunction(t,e){var i,n,o,r,a,l=0,s=/(\d+)|(\D+)/g,u=/\d/,h=0;if("desc"===this.params.sort&&([t,e]=[e,t]),t||0===t){if(e||0===e){if(isFinite(t)&&isFinite(e))return t-e;if((i=String(t).toLowerCase())===(n=String(e).toLowerCase()))return 0;if(!u.test(i)||!u.test(n))return i>n?1:-1;for(i=i.match(s),n=n.match(s),a=i.length>n.length?n.length:i.length;l<a;)if((o=i[l])!==(r=n[l++]))return isFinite(o)&&isFinite(r)?("0"===o.charAt(0)&&(o="."+o),"0"===r.charAt(0)&&(r="."+r),o-r):o>r?1:-1;return i.length>n.length}h=1}else h=e||0===e?-1:0;return h}_filterOptions(){var t=this.params.filterFunc||this._defaultFilterFunc,e=this.input.value;return e?(this.filtered=!0,this.data.forEach((i=>{this._filterItem(t,e,i)}))):this.filtered=!1,this.data}_filterItem(t,e,i){var n=!1;return i.group?(i.options.forEach((i=>{this._filterItem(t,e,i)&&(n=!0)})),i.visible=n):i.visible=t(e,i.label,i.value,i.original),i.visible}_defaultFilterFunc(t,e,i,n){return t=String(t).toLowerCase(),null!=e&&(String(e).toLowerCase().indexOf(t)>-1||String(i).toLowerCase().indexOf(t)>-1)}_clearList(){for(;this.listEl.firstChild;)this.listEl.removeChild(this.listEl.firstChild);this.displayItems=[]}_buildList(t){this._clearList(),t.forEach((t=>{this._buildItem(t)})),this.displayItems.length||this._addPlaceholder(this.params.placeholderEmpty)}_buildItem(t){var e,i=t.element;if(!this.filtered||t.visible){if(!i){if((i=document.createElement("div")).tabIndex=0,(e=this.params.itemFormatter?this.params.itemFormatter(t.label,t.value,t.original,i):t.label)instanceof HTMLElement?i.appendChild(e):i.innerHTML=e,t.group?i.classList.add("tabulator-edit-list-group"):i.classList.add("tabulator-edit-list-item"),i.classList.add("tabulator-edit-list-group-level-"+t.level),t.elementAttributes&&"object"==typeof t.elementAttributes)for(let e in t.elementAttributes)"+"==e.charAt(0)?(e=e.slice(1),i.setAttribute(e,this.input.getAttribute(e)+t.elementAttributes["+"+e])):i.setAttribute(e,t.elementAttributes[e]);t.group?i.addEventListener("click",this._groupClick.bind(this,t)):i.addEventListener("click",this._itemClick.bind(this,t)),i.addEventListener("mousedown",this._preventBlur.bind(this)),t.element=i}this._styleItem(t),this.listEl.appendChild(i),t.group?t.options.forEach((t=>{this._buildItem(t)})):this.displayItems.push(t)}}_showList(){var t=this.popup&&this.popup.isVisible();if(this.input.parentNode){if(this.params.autocomplete&&""===this.input.value&&!this.params.listOnEmpty)return void(this.popup&&this.popup.hide(!0));this._setListWidth(),this.popup||(this.popup=this.edit.popup(this.listEl)),this.popup.show(this.cell.getElement(),"bottom"),t||setTimeout((()=>{this.popup.hideOnBlur(this._resolveValue.bind(this,!0))}),10)}}_styleItem(t){t&&t.element&&(t.selected?t.element.classList.add("active"):t.element.classList.remove("active"))}_itemClick(t,e){e.stopPropagation(),this._chooseItem(t)}_groupClick(t,e){e.stopPropagation()}_cancel(){this.popup.hide(!0),this.actions.cancel()}_clearChoices(){this.typing=!0,this.currentItems.forEach((t=>{t.selected=!1,this._styleItem(t)})),this.currentItems=[],this.focusedItem=null}_chooseItem(t,e){var i;this.typing=!1,this.params.multiselect?((i=this.currentItems.indexOf(t))>-1?(this.currentItems.splice(i,1),t.selected=!1):(this.currentItems.push(t),t.selected=!0),this.input.value=this.currentItems.map((t=>t.label)).join(","),this._styleItem(t)):(this.currentItems=[t],t.selected=!0,this.input.value=t.label,this._styleItem(t),e||this._resolveValue()),this._focusItem(t)}_resolveValue(t){var e,i;if(this.popup&&this.popup.hide(!0),this.params.multiselect)e=this.currentItems.map((t=>t.value));else if(t&&this.params.autocomplete&&this.typing){if(!(this.params.freetext||this.params.allowEmpty&&""===this.input.value))return void this.actions.cancel();e=this.input.value}else e=this.currentItems[0]?this.currentItems[0].value:null==(i=Array.isArray(this.initialValues)?this.initialValues[0]:this.initialValues)||""===i?i:this.params.emptyValue;""===e&&(e=this.params.emptyValue),this.actions.success(e),this.isFilter&&(this.initialValues=e&&!Array.isArray(e)?[e]:e,this.currentItems=[])}}var q={input:function(t,e,i,n,o){var r=t.getValue(),a=document.createElement("input");if(a.setAttribute("type",o.search?"search":"text"),a.style.padding="4px",a.style.width="100%",a.style.boxSizing="border-box",o.elementAttributes&&"object"==typeof o.elementAttributes)for(let t in o.elementAttributes)"+"==t.charAt(0)?(t=t.slice(1),a.setAttribute(t,a.getAttribute(t)+o.elementAttributes["+"+t])):a.setAttribute(t,o.elementAttributes[t]);function l(t){null==r&&""!==a.value||a.value!==r?i(a.value)&&(r=a.value):n()}return a.value=void 0!==r?r:"",e((function(){"cell"===t.getType()&&(a.focus({preventScroll:!0}),a.style.height="100%",o.selectContents&&a.select())})),a.addEventListener("change",l),a.addEventListener("blur",l),a.addEventListener("keydown",(function(t){switch(t.keyCode){case 13:l();break;case 27:n();break;case 35:case 36:t.stopPropagation()}})),o.mask&&G(a,o),a},textarea:function(t,e,i,n,o){var r=t.getValue(),a=o.verticalNavigation||"hybrid",l=String(null!=r?r:""),s=document.createElement("textarea"),u=0;if(s.style.display="block",s.style.padding="2px",s.style.height="100%",s.style.width="100%",s.style.boxSizing="border-box",s.style.whiteSpace="pre-wrap",s.style.resize="none",o.elementAttributes&&"object"==typeof o.elementAttributes)for(let t in o.elementAttributes)"+"==t.charAt(0)?(t=t.slice(1),s.setAttribute(t,s.getAttribute(t)+o.elementAttributes["+"+t])):s.setAttribute(t,o.elementAttributes[t]);function h(e){null==r&&""!==s.value||s.value!==r?(i(s.value)&&(r=s.value),setTimeout((function(){t.getRow().normalizeHeight()}),300)):n()}return s.value=l,e((function(){"cell"===t.getType()&&(s.focus({preventScroll:!0}),s.style.height="100%",s.scrollHeight,s.style.height=s.scrollHeight+"px",t.getRow().normalizeHeight(),o.selectContents&&s.select())})),s.addEventListener("change",h),s.addEventListener("blur",h),s.addEventListener("keyup",(function(){s.style.height="";var e=s.scrollHeight;s.style.height=e+"px",e!=u&&(u=e,t.getRow().normalizeHeight())})),s.addEventListener("keydown",(function(t){switch(t.keyCode){case 13:t.shiftKey&&o.shiftEnterSubmit&&h();break;case 27:n();break;case 38:("editor"==a||"hybrid"==a&&s.selectionStart)&&(t.stopImmediatePropagation(),t.stopPropagation());break;case 40:("editor"==a||"hybrid"==a&&s.selectionStart!==s.value.length)&&(t.stopImmediatePropagation(),t.stopPropagation());break;case 35:case 36:t.stopPropagation()}})),o.mask&&G(s,o),s},number:function(t,e,i,n,o){var r=t.getValue(),a=o.verticalNavigation||"editor",l=document.createElement("input");if(l.setAttribute("type","number"),void 0!==o.max&&l.setAttribute("max",o.max),void 0!==o.min&&l.setAttribute("min",o.min),void 0!==o.step&&l.setAttribute("step",o.step),l.style.padding="4px",l.style.width="100%",l.style.boxSizing="border-box",o.elementAttributes&&"object"==typeof o.elementAttributes)for(let t in o.elementAttributes)"+"==t.charAt(0)?(t=t.slice(1),l.setAttribute(t,l.getAttribute(t)+o.elementAttributes["+"+t])):l.setAttribute(t,o.elementAttributes[t]);l.value=r;var s=function(t){u()};function u(){var t=l.value;isNaN(t)||""===t||(t=Number(t)),t!==r?i(t)&&(r=t):n()}return e((function(){"cell"===t.getType()&&(l.removeEventListener("blur",s),l.focus({preventScroll:!0}),l.style.height="100%",l.addEventListener("blur",s),o.selectContents&&l.select())})),l.addEventListener("keydown",(function(t){switch(t.keyCode){case 13:u();break;case 27:n();break;case 38:case 40:"editor"==a&&(t.stopImmediatePropagation(),t.stopPropagation());break;case 35:case 36:t.stopPropagation()}})),o.mask&&G(l,o),l},range:function(t,e,i,n,o){var r=t.getValue(),a=document.createElement("input");if(a.setAttribute("type","range"),void 0!==o.max&&a.setAttribute("max",o.max),void 0!==o.min&&a.setAttribute("min",o.min),void 0!==o.step&&a.setAttribute("step",o.step),a.style.padding="4px",a.style.width="100%",a.style.boxSizing="border-box",o.elementAttributes&&"object"==typeof o.elementAttributes)for(let t in o.elementAttributes)"+"==t.charAt(0)?(t=t.slice(1),a.setAttribute(t,a.getAttribute(t)+o.elementAttributes["+"+t])):a.setAttribute(t,o.elementAttributes[t]);function l(){var t=a.value;isNaN(t)||""===t||(t=Number(t)),t!=r?i(t)&&(r=t):n()}return a.value=r,e((function(){"cell"===t.getType()&&(a.focus({preventScroll:!0}),a.style.height="100%")})),a.addEventListener("blur",(function(t){l()})),a.addEventListener("keydown",(function(t){switch(t.keyCode){case 13:l();break;case 27:n()}})),a},date:function(t,e,i,n,o){var r=o.format,a=o.verticalNavigation||"editor",l=r?window.DateTime||luxon.DateTime:null,s=t.getValue(),u=document.createElement("input");function h(t){return(l.isDateTime(t)?t:"iso"===r?l.fromISO(String(t)):l.fromFormat(String(t),r)).toFormat("yyyy-MM-dd")}if(u.type="date",u.style.padding="4px",u.style.width="100%",u.style.boxSizing="border-box",o.max&&u.setAttribute("max",r?h(o.max):o.max),o.min&&u.setAttribute("min",r?h(o.min):o.min),o.elementAttributes&&"object"==typeof o.elementAttributes)for(let t in o.elementAttributes)"+"==t.charAt(0)?(t=t.slice(1),u.setAttribute(t,u.getAttribute(t)+o.elementAttributes["+"+t])):u.setAttribute(t,o.elementAttributes[t]);function c(){var t,e=u.value;if(null==s&&""!==e||e!==s){if(e&&r)switch(t=l.fromFormat(String(e),"yyyy-MM-dd"),r){case!0:e=t;break;case"iso":e=t.toISO();break;default:e=t.toFormat(r)}i(e)&&(s=u.value)}else n()}return s=void 0!==s?s:"",r&&(l?s=h(s):console.error("Editor Error - 'date' editor 'format' param is dependant on luxon.js")),u.value=s,e((function(){"cell"===t.getType()&&(u.focus({preventScroll:!0}),u.style.height="100%",o.selectContents&&u.select())})),u.addEventListener("blur",(function(t){(t.relatedTarget||t.rangeParent||t.explicitOriginalTarget!==u)&&c()})),u.addEventListener("keydown",(function(t){switch(t.keyCode){case 13:c();break;case 27:n();break;case 35:case 36:t.stopPropagation();break;case 38:case 40:"editor"==a&&(t.stopImmediatePropagation(),t.stopPropagation())}})),u},time:function(t,e,i,n,o){var r,a=o.format,l=o.verticalNavigation||"editor",s=a?window.DateTime||luxon.DateTime:null,u=t.getValue(),h=document.createElement("input");if(h.type="time",h.style.padding="4px",h.style.width="100%",h.style.boxSizing="border-box",o.elementAttributes&&"object"==typeof o.elementAttributes)for(let t in o.elementAttributes)"+"==t.charAt(0)?(t=t.slice(1),h.setAttribute(t,h.getAttribute(t)+o.elementAttributes["+"+t])):h.setAttribute(t,o.elementAttributes[t]);function c(){var t,e=h.value;if(null==u&&""!==e||e!==u){if(e&&a)switch(t=s.fromFormat(String(e),"hh:mm"),a){case!0:e=t;break;case"iso":e=t.toISO();break;default:e=t.toFormat(a)}i(e)&&(u=h.value)}else n()}return u=void 0!==u?u:"",a&&(s?(r=s.isDateTime(u)?u:"iso"===a?s.fromISO(String(u)):s.fromFormat(String(u),a),u=r.toFormat("hh:mm")):console.error("Editor Error - 'date' editor 'format' param is dependant on luxon.js")),h.value=u,e((function(){"cell"==t.getType()&&(h.focus({preventScroll:!0}),h.style.height="100%",o.selectContents&&h.select())})),h.addEventListener("blur",(function(t){(t.relatedTarget||t.rangeParent||t.explicitOriginalTarget!==h)&&c()})),h.addEventListener("keydown",(function(t){switch(t.keyCode){case 13:c();break;case 27:n();break;case 35:case 36:t.stopPropagation();break;case 38:case 40:"editor"==l&&(t.stopImmediatePropagation(),t.stopPropagation())}})),h},datetime:function(t,e,i,n,o){var r,a=o.format,l=o.verticalNavigation||"editor",s=a?window.DateTime||luxon.DateTime:null,u=t.getValue(),h=document.createElement("input");if(h.type="datetime-local",h.style.padding="4px",h.style.width="100%",h.style.boxSizing="border-box",o.elementAttributes&&"object"==typeof o.elementAttributes)for(let t in o.elementAttributes)"+"==t.charAt(0)?(t=t.slice(1),h.setAttribute(t,h.getAttribute(t)+o.elementAttributes["+"+t])):h.setAttribute(t,o.elementAttributes[t]);function c(){var t,e=h.value;if(null==u&&""!==e||e!==u){if(e&&a)switch(t=s.fromISO(String(e)),a){case!0:e=t;break;case"iso":e=t.toISO();break;default:e=t.toFormat(a)}i(e)&&(u=h.value)}else n()}return u=void 0!==u?u:"",a&&(s?(r=s.isDateTime(u)?u:"iso"===a?s.fromISO(String(u)):s.fromFormat(String(u),a),u=r.toFormat("yyyy-MM-dd")+"T"+r.toFormat("hh:mm")):console.error("Editor Error - 'date' editor 'format' param is dependant on luxon.js")),h.value=u,e((function(){"cell"===t.getType()&&(h.focus({preventScroll:!0}),h.style.height="100%",o.selectContents&&h.select())})),h.addEventListener("blur",(function(t){(t.relatedTarget||t.rangeParent||t.explicitOriginalTarget!==h)&&c()})),h.addEventListener("keydown",(function(t){switch(t.keyCode){case 13:c();break;case 27:n();break;case 35:case 36:t.stopPropagation();break;case 38:case 40:"editor"==l&&(t.stopImmediatePropagation(),t.stopPropagation())}})),h},select:function(t,e,i,n,o){return this.deprecationMsg("The select editor has been deprecated, please use the new list editor"),new U(this,t,e,i,n,o).input},list:function(t,e,i,n,o){return new U(this,t,e,i,n,o).input},autocomplete:function(t,e,i,n,o){return this.deprecationMsg("The autocomplete editor has been deprecated, please use the new list editor with the 'autocomplete' editorParam"),o.autocomplete=!0,new U(this,t,e,i,n,o).input},star:function(t,e,i,n,o){var r=this,a=t.getElement(),l=t.getValue(),s=a.getElementsByTagName("svg").length||5,u=a.getElementsByTagName("svg")[0]?a.getElementsByTagName("svg")[0].getAttribute("width"):14,h=[],c=document.createElement("div"),d=document.createElementNS("http://www.w3.org/2000/svg","svg");function p(t){h.forEach((function(e,i){i<t?("ie"==r.table.browser?e.setAttribute("class","tabulator-star-active"):e.classList.replace("tabulator-star-inactive","tabulator-star-active"),e.innerHTML='<polygon fill="#488CE9" stroke="#014AAE" stroke-width="37.6152" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" points="259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 "/>'):("ie"==r.table.browser?e.setAttribute("class","tabulator-star-inactive"):e.classList.replace("tabulator-star-active","tabulator-star-inactive"),e.innerHTML='<polygon fill="#010155" stroke="#686868" stroke-width="37.6152" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" points="259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 "/>')}))}function b(t){var e=document.createElement("span"),n=d.cloneNode(!0);h.push(n),e.addEventListener("mouseenter",(function(e){e.stopPropagation(),e.stopImmediatePropagation(),p(t)})),e.addEventListener("mousemove",(function(t){t.stopPropagation(),t.stopImmediatePropagation()})),e.addEventListener("click",(function(e){e.stopPropagation(),e.stopImmediatePropagation(),i(t),a.blur()})),e.appendChild(n),c.appendChild(e)}function m(t){l=t,p(t)}if(a.style.whiteSpace="nowrap",a.style.overflow="hidden",a.style.textOverflow="ellipsis",c.style.verticalAlign="middle",c.style.display="inline-block",c.style.padding="4px",d.setAttribute("width",u),d.setAttribute("height",u),d.setAttribute("viewBox","0 0 512 512"),d.setAttribute("xml:space","preserve"),d.style.padding="0 1px",o.elementAttributes&&"object"==typeof o.elementAttributes)for(let t in o.elementAttributes)"+"==t.charAt(0)?(t=t.slice(1),c.setAttribute(t,c.getAttribute(t)+o.elementAttributes["+"+t])):c.setAttribute(t,o.elementAttributes[t]);for(var g=1;g<=s;g++)b(g);return p(l=Math.min(parseInt(l),s)),c.addEventListener("mousemove",(function(t){p(0)})),c.addEventListener("click",(function(t){i(0)})),a.addEventListener("blur",(function(t){n()})),a.addEventListener("keydown",(function(t){switch(t.keyCode){case 39:m(l+1);break;case 37:m(l-1);break;case 13:i(l);break;case 27:n()}})),c},progress:function(t,e,i,n,o){var r,a,l=t.getElement(),s=void 0===o.max?l.getElementsByTagName("div")[0]&&l.getElementsByTagName("div")[0].getAttribute("max")||100:o.max,u=void 0===o.min?l.getElementsByTagName("div")[0]&&l.getElementsByTagName("div")[0].getAttribute("min")||0:o.min,h=(s-u)/100,c=t.getValue()||0,d=document.createElement("div"),p=document.createElement("div");function b(){var t=window.getComputedStyle(l,null),e=h*Math.round(p.offsetWidth/((l.clientWidth-parseInt(t.getPropertyValue("padding-left"))-parseInt(t.getPropertyValue("padding-right")))/100))+u;i(e),l.setAttribute("aria-valuenow",e),l.setAttribute("aria-label",c)}if(d.style.position="absolute",d.style.right="0",d.style.top="0",d.style.bottom="0",d.style.width="5px",d.classList.add("tabulator-progress-handle"),p.style.display="inline-block",p.style.position="relative",p.style.height="100%",p.style.backgroundColor="#488CE9",p.style.maxWidth="100%",p.style.minWidth="0%",o.elementAttributes&&"object"==typeof o.elementAttributes)for(let t in o.elementAttributes)"+"==t.charAt(0)?(t=t.slice(1),p.setAttribute(t,p.getAttribute(t)+o.elementAttributes["+"+t])):p.setAttribute(t,o.elementAttributes[t]);return l.style.padding="4px 4px",c=Math.min(parseFloat(c),s),c=Math.max(parseFloat(c),u),c=Math.round((c-u)/h),p.style.width=c+"%",l.setAttribute("aria-valuemin",u),l.setAttribute("aria-valuemax",s),p.appendChild(d),d.addEventListener("mousedown",(function(t){r=t.screenX,a=p.offsetWidth})),d.addEventListener("mouseover",(function(){d.style.cursor="ew-resize"})),l.addEventListener("mousemove",(function(t){r&&(p.style.width=a+t.screenX-r+"px")})),l.addEventListener("mouseup",(function(t){r&&(t.stopPropagation(),t.stopImmediatePropagation(),r=!1,a=!1,b())})),l.addEventListener("keydown",(function(t){switch(t.keyCode){case 39:t.preventDefault(),p.style.width=p.clientWidth+l.clientWidth/100+"px";break;case 37:t.preventDefault(),p.style.width=p.clientWidth-l.clientWidth/100+"px";break;case 9:case 13:b();break;case 27:n()}})),l.addEventListener("blur",(function(){n()})),p},tickCross:function(t,e,i,n,o){var r=t.getValue(),a=document.createElement("input"),l=o.tristate,s=void 0===o.indeterminateValue?null:o.indeterminateValue,u=!1,h=Object.keys(o).includes("trueValue"),c=Object.keys(o).includes("falseValue");if(a.setAttribute("type","checkbox"),a.style.marginTop="5px",a.style.boxSizing="border-box",o.elementAttributes&&"object"==typeof o.elementAttributes)for(let t in o.elementAttributes)"+"==t.charAt(0)?(t=t.slice(1),a.setAttribute(t,a.getAttribute(t)+o.elementAttributes["+"+t])):a.setAttribute(t,o.elementAttributes[t]);function d(t){var e=a.checked;return h&&e?e=o.trueValue:c&&!e&&(e=o.falseValue),l?t?u?s:e:a.checked&&!u?(a.checked=!1,a.indeterminate=!0,u=!0,s):(u=!1,e):e}return a.value=r,!l||void 0!==r&&r!==s&&""!==r||(u=!0,a.indeterminate=!0),"firefox"!=this.table.browser&&"safari"!=this.table.browser&&e((function(){"cell"===t.getType()&&a.focus({preventScroll:!0})})),a.checked=h?r===o.trueValue:!0===r||"true"===r||"True"===r||1===r,a.addEventListener("change",(function(t){i(d())})),a.addEventListener("blur",(function(t){i(d(!0))})),a.addEventListener("keydown",(function(t){13==t.keyCode&&i(d()),27==t.keyCode&&n()})),a}};class Y extends E{constructor(t){super(t),this.currentCell=!1,this.mouseClick=!1,this.recursionBlock=!1,this.invalidEdit=!1,this.editedCells=[],this.editors=Y.editors,this.registerColumnOption("editable"),this.registerColumnOption("editor"),this.registerColumnOption("editorParams"),this.registerColumnOption("cellEditing"),this.registerColumnOption("cellEdited"),this.registerColumnOption("cellEditCancelled"),this.registerTableFunction("getEditedCells",this.getEditedCells.bind(this)),this.registerTableFunction("clearCellEdited",this.clearCellEdited.bind(this)),this.registerTableFunction("navigatePrev",this.navigatePrev.bind(this)),this.registerTableFunction("navigateNext",this.navigateNext.bind(this)),this.registerTableFunction("navigateLeft",this.navigateLeft.bind(this)),this.registerTableFunction("navigateRight",this.navigateRight.bind(this)),this.registerTableFunction("navigateUp",this.navigateUp.bind(this)),this.registerTableFunction("navigateDown",this.navigateDown.bind(this)),this.registerComponentFunction("cell","isEdited",this.cellIsEdited.bind(this)),this.registerComponentFunction("cell","clearEdited",this.clearEdited.bind(this)),this.registerComponentFunction("cell","edit",this.editCell.bind(this)),this.registerComponentFunction("cell","cancelEdit",this.cellCancelEdit.bind(this)),this.registerComponentFunction("cell","navigatePrev",this.navigatePrev.bind(this)),this.registerComponentFunction("cell","navigateNext",this.navigateNext.bind(this)),this.registerComponentFunction("cell","navigateLeft",this.navigateLeft.bind(this)),this.registerComponentFunction("cell","navigateRight",this.navigateRight.bind(this)),this.registerComponentFunction("cell","navigateUp",this.navigateUp.bind(this)),this.registerComponentFunction("cell","navigateDown",this.navigateDown.bind(this))}initialize(){this.subscribe("cell-init",this.bindEditor.bind(this)),this.subscribe("cell-delete",this.clearEdited.bind(this)),this.subscribe("cell-value-changed",this.updateCellClass.bind(this)),this.subscribe("column-layout",this.initializeColumnCheck.bind(this)),this.subscribe("column-delete",this.columnDeleteCheck.bind(this)),this.subscribe("row-deleting",this.rowDeleteCheck.bind(this)),this.subscribe("row-layout",this.rowEditableCheck.bind(this)),this.subscribe("data-refreshing",this.cancelEdit.bind(this)),this.subscribe("keybinding-nav-prev",this.navigatePrev.bind(this,void 0)),this.subscribe("keybinding-nav-next",this.keybindingNavigateNext.bind(this)),this.subscribe("keybinding-nav-left",this.navigateLeft.bind(this,void 0)),this.subscribe("keybinding-nav-right",this.navigateRight.bind(this,void 0)),this.subscribe("keybinding-nav-up",this.navigateUp.bind(this,void 0)),this.subscribe("keybinding-nav-down",this.navigateDown.bind(this,void 0))}keybindingNavigateNext(t){var e=this.currentCell,i=this.options("tabEndNewRow");e&&(this.navigateNext(e,t)||i&&(e.getElement().firstChild.blur(),(i=!0===i?this.table.addRow({}):"function"==typeof i?this.table.addRow(i(e.row.getComponent())):this.table.addRow(Object.assign({},i))).then((()=>{setTimeout((()=>{e.getComponent().navigateNext()}))}))))}cellIsEdited(t){return!!t.modules.edit&&t.modules.edit.edited}cellCancelEdit(t){t===this.currentCell?this.table.modules.edit.cancelEdit():console.warn("Cancel Editor Error - This cell is not currently being edited ")}updateCellClass(t){this.allowEdit(t)?t.getElement().classList.add("tabulator-editable"):t.getElement().classList.remove("tabulator-editable")}clearCellEdited(t){t||(t=this.table.modules.edit.getEditedCells()),Array.isArray(t)||(t=[t]),t.forEach((t=>{this.table.modules.edit.clearEdited(t._getSelf())}))}navigatePrev(t=this.currentCell,e){var i,n;if(t){if(e&&e.preventDefault(),i=this.navigateLeft())return!0;if((n=this.table.rowManager.prevDisplayRow(t.row,!0))&&(i=this.findPrevEditableCell(n,n.cells.length)))return i.getComponent().edit(),!0}return!1}navigateNext(t=this.currentCell,e){var i,n;if(t){if(e&&e.preventDefault(),i=this.navigateRight())return!0;if((n=this.table.rowManager.nextDisplayRow(t.row,!0))&&(i=this.findNextEditableCell(n,-1)))return i.getComponent().edit(),!0}return!1}navigateLeft(t=this.currentCell,e){var i,n;return!!(t&&(e&&e.preventDefault(),i=t.getIndex(),n=this.findPrevEditableCell(t.row,i)))&&(n.getComponent().edit(),!0)}navigateRight(t=this.currentCell,e){var i,n;return!!(t&&(e&&e.preventDefault(),i=t.getIndex(),n=this.findNextEditableCell(t.row,i)))&&(n.getComponent().edit(),!0)}navigateUp(t=this.currentCell,e){var i,n;return!!(t&&(e&&e.preventDefault(),i=t.getIndex(),n=this.table.rowManager.prevDisplayRow(t.row,!0)))&&(n.cells[i].getComponent().edit(),!0)}navigateDown(t=this.currentCell,e){var i,n;return!!(t&&(e&&e.preventDefault(),i=t.getIndex(),n=this.table.rowManager.nextDisplayRow(t.row,!0)))&&(n.cells[i].getComponent().edit(),!0)}findNextEditableCell(t,e){var i=!1;if(e<t.cells.length-1)for(var n=e+1;n<t.cells.length;n++){let e=t.cells[n];if(e.column.modules.edit&&w.elVisible(e.getElement())&&this.allowEdit(e)){i=e;break}}return i}findPrevEditableCell(t,e){var i=!1;if(e>0)for(var n=e-1;n>=0;n--){let e=t.cells[n];if(e.column.modules.edit&&w.elVisible(e.getElement())&&this.allowEdit(e)){i=e;break}}return i}initializeColumnCheck(t){void 0!==t.definition.editor&&this.initializeColumn(t)}columnDeleteCheck(t){this.currentCell&&this.currentCell.column===t&&this.cancelEdit()}rowDeleteCheck(t){this.currentCell&&this.currentCell.row===t&&this.cancelEdit()}rowEditableCheck(t){t.getCells().forEach((t=>{t.column.modules.edit&&"function"==typeof t.column.modules.edit.check&&this.updateCellClass(t)}))}initializeColumn(t){var e={editor:!1,blocked:!1,check:t.definition.editable,params:t.definition.editorParams||{}};switch(typeof t.definition.editor){case"string":this.editors[t.definition.editor]?e.editor=this.editors[t.definition.editor]:console.warn("Editor Error - No such editor found: ",t.definition.editor);break;case"function":e.editor=t.definition.editor;break;case"boolean":!0===t.definition.editor&&("function"!=typeof t.definition.formatter?this.editors[t.definition.formatter]?e.editor=this.editors[t.definition.formatter]:e.editor=this.editors.input:console.warn("Editor Error - Cannot auto lookup editor for a custom formatter: ",t.definition.formatter))}e.editor&&(t.modules.edit=e)}getCurrentCell(){return!!this.currentCell&&this.currentCell.getComponent()}clearEditor(t){var e,i=this.currentCell;if(this.invalidEdit=!1,i){for(this.currentCell=!1,e=i.getElement(),this.dispatch("edit-editor-clear",i,t),e.classList.remove("tabulator-editing");e.firstChild;)e.removeChild(e.firstChild);i.row.getElement().classList.remove("tabulator-editing"),i.table.element.classList.remove("tabulator-editing")}}cancelEdit(){if(this.currentCell){var t=this.currentCell,e=this.currentCell.getComponent();this.clearEditor(!0),t.setValueActual(t.getValue()),t.cellRendered(),("textarea"==t.column.definition.editor||t.column.definition.variableHeight)&&t.row.normalizeHeight(!0),t.column.definition.cellEditCancelled&&t.column.definition.cellEditCancelled.call(this.table,e),this.dispatch("edit-cancelled",t),this.dispatchExternal("cellEditCancelled",e)}}bindEditor(t){if(t.column.modules.edit){var e=this,i=t.getElement(!0);this.updateCellClass(t),i.setAttribute("tabindex",0),i.addEventListener("click",(function(t){i.classList.contains("tabulator-editing")||i.focus({preventScroll:!0})})),i.addEventListener("mousedown",(function(t){2===t.button?t.preventDefault():e.mouseClick=!0})),i.addEventListener("focus",(function(i){e.recursionBlock||e.edit(t,i,!1)}))}}focusCellNoEvent(t,e){this.recursionBlock=!0,e&&"ie"===this.table.browser||t.getElement().focus({preventScroll:!0}),this.recursionBlock=!1}editCell(t,e){this.focusCellNoEvent(t),this.edit(t,!1,e)}focusScrollAdjust(t){if("virtual"==this.table.rowManager.getRenderMode()){var e=this.table.rowManager.element.scrollTop,i=this.table.rowManager.element.clientHeight+this.table.rowManager.element.scrollTop,n=t.row.getElement();n.offsetTop<e?this.table.rowManager.element.scrollTop-=e-n.offsetTop:n.offsetTop+n.offsetHeight>i&&(this.table.rowManager.element.scrollTop+=n.offsetTop+n.offsetHeight-i);var o=this.table.rowManager.element.scrollLeft,r=this.table.rowManager.element.clientWidth+this.table.rowManager.element.scrollLeft,a=t.getElement();this.table.modExists("frozenColumns")&&(o+=parseInt(this.table.modules.frozenColumns.leftMargin||0),r-=parseInt(this.table.modules.frozenColumns.rightMargin||0)),"virtual"===this.table.options.renderHorizontal&&(o-=parseInt(this.table.columnManager.renderer.vDomPadLeft),r-=parseInt(this.table.columnManager.renderer.vDomPadLeft)),a.offsetLeft<o?this.table.rowManager.element.scrollLeft-=o-a.offsetLeft:a.offsetLeft+a.offsetWidth>r&&(this.table.rowManager.element.scrollLeft+=a.offsetLeft+a.offsetWidth-r)}}allowEdit(t){var e=!!t.column.modules.edit;if(t.column.modules.edit)switch(typeof t.column.modules.edit.check){case"function":t.row.initialized&&(e=t.column.modules.edit.check(t.getComponent()));break;case"string":e=!!t.row.data[t.column.modules.edit.check];break;case"boolean":e=t.column.modules.edit.check}return e}edit(t,e,i){var n,o,r,a=this,l=function(){},s=t.getElement();if(!this.currentCell){if(t.column.modules.edit.blocked)return this.mouseClick=!1,s.blur(),!1;if(e&&e.stopPropagation(),this.allowEdit(t)||i){if(a.cancelEdit(),a.currentCell=t,this.focusScrollAdjust(t),o=t.getComponent(),this.mouseClick&&(this.mouseClick=!1,t.column.definition.cellClick&&t.column.definition.cellClick.call(this.table,e,o)),t.column.definition.cellEditing&&t.column.definition.cellEditing.call(this.table,o),this.dispatch("cell-editing",t),this.dispatchExternal("cellEditing",o),r="function"==typeof t.column.modules.edit.params?t.column.modules.edit.params(o):t.column.modules.edit.params,n=t.column.modules.edit.editor.call(a,o,(function(t){l=t}),(function(e){if(a.currentCell===t){var i=a.chain("edit-success",[t,e],!0,!0);return!0===i||"highlight"===a.table.options.validationMode?(a.clearEditor(),t.modules.edit||(t.modules.edit={}),t.modules.edit.edited=!0,-1==a.editedCells.indexOf(t)&&a.editedCells.push(t),t.setValue(e,!0),!0===i):(a.invalidEdit=!0,a.focusCellNoEvent(t,!0),l(),!1)}}),(function(){a.currentCell===t&&a.cancelEdit()}),r),!this.currentCell||!1===n)return s.blur(),!1;if(!(n instanceof Node))return console.warn("Edit Error - Editor should return an instance of Node, the editor returned:",n),s.blur(),!1;for(s.classList.add("tabulator-editing"),t.row.getElement().classList.add("tabulator-editing"),t.table.element.classList.add("tabulator-editing");s.firstChild;)s.removeChild(s.firstChild);s.appendChild(n),l();for(var u=s.children,h=0;h<u.length;h++)u[h].addEventListener("click",(function(t){t.stopPropagation()}));return!0}return this.mouseClick=!1,s.blur(),!1}this.invalidEdit||this.currentCell===t||this.cancelEdit()}getEditedCells(){var t=[];return this.editedCells.forEach((e=>{t.push(e.getComponent())})),t}clearEdited(t){var e;t.modules.edit&&t.modules.edit.edited&&(t.modules.edit.edited=!1,this.dispatch("edit-edited-clear",t)),(e=this.editedCells.indexOf(t))>-1&&this.editedCells.splice(e,1)}}Y.moduleName="edit",Y.editors=q;class X{constructor(t,e,i,n){this.type=t,this.columns=e,this.component=i||!1,this.indent=n||0}}class K{constructor(t,e,i,n,o){this.value=t,this.component=e||!1,this.width=i,this.height=n,this.depth=o}}class J extends E{constructor(t){super(t),this.config={},this.cloneTableStyle=!0,this.colVisProp="",this.registerTableOption("htmlOutputConfig",!1),this.registerColumnOption("htmlOutput"),this.registerColumnOption("titleHtmlOutput")}initialize(){this.registerTableFunction("getHtml",this.getHtml.bind(this))}generateExportList(t,e,i,n){this.cloneTableStyle=e,this.config=t||{},this.colVisProp=n;var o=!1!==this.config.columnHeaders?this.headersToExportRows(this.generateColumnGroupHeaders()):[],r=this.bodyToExportRows(this.rowLookup(i));return o.concat(r)}generateTable(t,e,i,n){var o=this.generateExportList(t,e,i,n);return this.generateTableElement(o)}rowLookup(t){var e=[];if("function"==typeof t)t.call(this.table).forEach((t=>{(t=this.table.rowManager.findRow(t))&&e.push(t)}));else switch(t){case!0:case"visible":e=this.table.rowManager.getVisibleRows(!1,!0);break;case"all":e=this.table.rowManager.rows;break;case"selected":e=this.table.modules.selectRow.selectedRows;break;default:e=this.table.options.pagination?this.table.rowManager.getDisplayRows(this.table.rowManager.displayRows.length-2):this.table.rowManager.getDisplayRows()}return Object.assign([],e)}generateColumnGroupHeaders(){var t=[];return(!1!==this.config.columnGroups?this.table.columnManager.columns:this.table.columnManager.columnsByIndex).forEach((e=>{var i=this.processColumnGroup(e);i&&t.push(i)})),t}processColumnGroup(t){var e=t.columns,i=0,n={title:t.definition["title"+(this.colVisProp.charAt(0).toUpperCase()+this.colVisProp.slice(1))]||t.definition.title,column:t,depth:1};if(e.length){if(n.subGroups=[],n.width=0,e.forEach((t=>{var e=this.processColumnGroup(t);e&&(n.width+=e.width,n.subGroups.push(e),e.depth>i&&(i=e.depth))})),n.depth+=i,!n.width)return!1}else{if(!this.columnVisCheck(t))return!1;n.width=1}return n}columnVisCheck(t){var e=t.definition[this.colVisProp];return"function"==typeof e&&(e=e.call(this.table,t.getComponent())),!1!==e&&(t.visible||!t.visible&&e)}headersToExportRows(t){var e=[],i=0,n=[];function o(t,n){var r=i-n;if(void 0===e[n]&&(e[n]=[]),t.height=t.subGroups?1:r-t.depth+1,e[n].push(t),t.height>1)for(let i=1;i<t.height;i++)void 0===e[n+i]&&(e[n+i]=[]),e[n+i].push(!1);if(t.width>1)for(let i=1;i<t.width;i++)e[n].push(!1);t.subGroups&&t.subGroups.forEach((function(t){o(t,n+1)}))}return t.forEach((function(t){t.depth>i&&(i=t.depth)})),t.forEach((function(t){o(t,0)})),e.forEach((t=>{var e=[];t.forEach((t=>{if(t){let i=void 0===t.title?"":t.title;e.push(new K(i,t.column.getComponent(),t.width,t.height,t.depth))}else e.push(null)})),n.push(new X("header",e))})),n}bodyToExportRows(t){var e=[],i=[];return this.table.columnManager.columnsByIndex.forEach((t=>{this.columnVisCheck(t)&&e.push(t.getComponent())})),!1!==this.config.columnCalcs&&this.table.modExists("columnCalcs")&&(this.table.modules.columnCalcs.topInitialized&&t.unshift(this.table.modules.columnCalcs.topRow),this.table.modules.columnCalcs.botInitialized&&t.push(this.table.modules.columnCalcs.botRow)),(t=t.filter((t=>{switch(t.type){case"group":return!1!==this.config.rowGroups;case"calc":return!1!==this.config.columnCalcs;case"row":return!(this.table.options.dataTree&&!1===this.config.dataTree&&t.modules.dataTree.parent)}return!0}))).forEach(((t,n)=>{var o=t.getData(this.colVisProp),r=[],a=0;switch(t.type){case"group":a=t.level,r.push(new K(t.key,t.getComponent(),e.length,1));break;case"calc":case"row":e.forEach((t=>{r.push(new K(t._column.getFieldValue(o),t,1,1))})),this.table.options.dataTree&&!1!==this.config.dataTree&&(a=t.modules.dataTree.index)}i.push(new X(t.type,r,t.getComponent(),a))})),i}generateTableElement(t){var e=document.createElement("table"),i=document.createElement("thead"),n=document.createElement("tbody"),o=this.lookupTableStyles(),r=this.table.options["rowFormatter"+(this.colVisProp.charAt(0).toUpperCase()+this.colVisProp.slice(1))],a={};return a.rowFormatter=null!==r?r:this.table.options.rowFormatter,this.table.options.dataTree&&!1!==this.config.dataTree&&this.table.modExists("columnCalcs")&&(a.treeElementField=this.table.modules.dataTree.elementField),a.groupHeader=this.table.options["groupHeader"+(this.colVisProp.charAt(0).toUpperCase()+this.colVisProp.slice(1))],a.groupHeader&&!Array.isArray(a.groupHeader)&&(a.groupHeader=[a.groupHeader]),e.classList.add("tabulator-print-table"),this.mapElementStyles(this.table.columnManager.getHeadersElement(),i,["border-top","border-left","border-right","border-bottom","background-color","color","font-weight","font-family","font-size"]),t.length>1e3&&console.warn("It may take a long time to render an HTML table with more than 1000 rows"),t.forEach(((t,e)=>{let r;switch(t.type){case"header":i.appendChild(this.generateHeaderElement(t,a,o));break;case"group":n.appendChild(this.generateGroupElement(t,a,o));break;case"calc":n.appendChild(this.generateCalcElement(t,a,o));break;case"row":r=this.generateRowElement(t,a,o),this.mapElementStyles(e%2&&o.evenRow?o.evenRow:o.oddRow,r,["border-top","border-left","border-right","border-bottom","color","font-weight","font-family","font-size","background-color"]),n.appendChild(r)}})),i.innerHTML&&e.appendChild(i),e.appendChild(n),this.mapElementStyles(this.table.element,e,["border-top","border-left","border-right","border-bottom"]),e}lookupTableStyles(){var t={};return this.cloneTableStyle&&window.getComputedStyle&&(t.oddRow=this.table.element.querySelector(".tabulator-row-odd:not(.tabulator-group):not(.tabulator-calcs)"),t.evenRow=this.table.element.querySelector(".tabulator-row-even:not(.tabulator-group):not(.tabulator-calcs)"),t.calcRow=this.table.element.querySelector(".tabulator-row.tabulator-calcs"),t.firstRow=this.table.element.querySelector(".tabulator-row:not(.tabulator-group):not(.tabulator-calcs)"),t.firstGroup=this.table.element.getElementsByClassName("tabulator-group")[0],t.firstRow&&(t.styleCells=t.firstRow.getElementsByClassName("tabulator-cell"),t.firstCell=t.styleCells[0],t.lastCell=t.styleCells[t.styleCells.length-1])),t}generateHeaderElement(t,e,i){var n=document.createElement("tr");return t.columns.forEach((t=>{if(t){var e=document.createElement("th"),i=t.component._column.definition.cssClass?t.component._column.definition.cssClass.split(" "):[];e.colSpan=t.width,e.rowSpan=t.height,e.innerHTML=t.value,this.cloneTableStyle&&(e.style.boxSizing="border-box"),i.forEach((function(t){e.classList.add(t)})),this.mapElementStyles(t.component.getElement(),e,["text-align","border-top","border-left","border-right","border-bottom","background-color","color","font-weight","font-family","font-size"]),this.mapElementStyles(t.component._column.contentElement,e,["padding-top","padding-left","padding-right","padding-bottom"]),t.component._column.visible?this.mapElementStyles(t.component.getElement(),e,["width"]):t.component._column.definition.width&&(e.style.width=t.component._column.definition.width+"px"),t.component._column.parent&&this.mapElementStyles(t.component._column.parent.groupElement,e,["border-top"]),n.appendChild(e)}})),n}generateGroupElement(t,e,i){var n=document.createElement("tr"),o=document.createElement("td"),r=t.columns[0];return n.classList.add("tabulator-print-table-row"),e.groupHeader&&e.groupHeader[t.indent]?r.value=e.groupHeader[t.indent](r.value,t.component._group.getRowCount(),t.component._group.getData(),t.component):!1!==e.groupHeader&&(r.value=t.component._group.generator(r.value,t.component._group.getRowCount(),t.component._group.getData(),t.component)),o.colSpan=r.width,o.innerHTML=r.value,n.classList.add("tabulator-print-table-group"),n.classList.add("tabulator-group-level-"+t.indent),r.component.isVisible()&&n.classList.add("tabulator-group-visible"),this.mapElementStyles(i.firstGroup,n,["border-top","border-left","border-right","border-bottom","color","font-weight","font-family","font-size","background-color"]),this.mapElementStyles(i.firstGroup,o,["padding-top","padding-left","padding-right","padding-bottom"]),n.appendChild(o),n}generateCalcElement(t,e,i){var n=this.generateRowElement(t,e,i);return n.classList.add("tabulator-print-table-calcs"),this.mapElementStyles(i.calcRow,n,["border-top","border-left","border-right","border-bottom","color","font-weight","font-family","font-size","background-color"]),n}generateRowElement(t,e,i){var n=document.createElement("tr");return n.classList.add("tabulator-print-table-row"),t.columns.forEach(((o,r)=>{if(o){var a,l=document.createElement("td"),s=o.component._column,u=this.table.columnManager.findColumnIndex(s),h=o.value,c={modules:{},getValue:function(){return h},getField:function(){return s.definition.field},getElement:function(){return l},getType:function(){return"cell"},getColumn:function(){return s.getComponent()},getData:function(){return t.component.getData()},getRow:function(){return t.component},getComponent:function(){return c},column:s};if((s.definition.cssClass?s.definition.cssClass.split(" "):[]).forEach((function(t){l.classList.add(t)})),this.table.modExists("format")&&!1!==this.config.formatCells)h=this.table.modules.format.formatExportValue(c,this.colVisProp);else switch(typeof h){case"object":h=null!==h?JSON.stringify(h):"";break;case"undefined":h=""}h instanceof Node?l.appendChild(h):l.innerHTML=h,(a=i.styleCells&&i.styleCells[u]?i.styleCells[u]:i.firstCell)&&(this.mapElementStyles(a,l,["padding-top","padding-left","padding-right","padding-bottom","border-top","border-left","border-right","border-bottom","color","font-weight","font-family","font-size","text-align"]),s.definition.align&&(l.style.textAlign=s.definition.align)),this.table.options.dataTree&&!1!==this.config.dataTree&&(e.treeElementField&&e.treeElementField==s.field||!e.treeElementField&&0==r)&&(t.component._row.modules.dataTree.controlEl&&l.insertBefore(t.component._row.modules.dataTree.controlEl.cloneNode(!0),l.firstChild),t.component._row.modules.dataTree.branchEl&&l.insertBefore(t.component._row.modules.dataTree.branchEl.cloneNode(!0),l.firstChild)),n.appendChild(l),c.modules.format&&c.modules.format.renderedCallback&&c.modules.format.renderedCallback()}})),e.rowFormatter&&"row"===t.type&&!1!==this.config.formatCells&&(Object.assign(t.component).getElement=function(){return n},e.rowFormatter(t.component)),n}generateHTMLTable(t){var e=document.createElement("div");return e.appendChild(this.generateTableElement(t)),e.innerHTML}getHtml(t,e,i,n){var o=this.generateExportList(i||this.table.options.htmlOutputConfig,e,t,n||"htmlOutput");return this.generateHTMLTable(o)}mapElementStyles(t,e,i){if(this.cloneTableStyle&&t&&e){var n={"background-color":"backgroundColor",color:"fontColor",width:"width","font-weight":"fontWeight","font-family":"fontFamily","font-size":"fontSize","text-align":"textAlign","border-top":"borderTop","border-left":"borderLeft","border-right":"borderRight","border-bottom":"borderBottom","padding-top":"paddingTop","padding-left":"paddingLeft","padding-right":"paddingRight","padding-bottom":"paddingBottom"};if(window.getComputedStyle){var o=window.getComputedStyle(t);i.forEach((function(t){e.style[n[t]]||(e.style[n[t]]=o.getPropertyValue(t))}))}}}}J.moduleName="export";var Z={"=":function(t,e,i,n){return e==t},"<":function(t,e,i,n){return e<t},"<=":function(t,e,i,n){return e<=t},">":function(t,e,i,n){return e>t},">=":function(t,e,i,n){return e>=t},"!=":function(t,e,i,n){return e!=t},regex:function(t,e,i,n){return"string"==typeof t&&(t=new RegExp(t)),t.test(e)},like:function(t,e,i,n){return null==t?e===t:null!=e&&String(e).toLowerCase().indexOf(t.toLowerCase())>-1},keywords:function(t,e,i,n){var o=t.toLowerCase().split(void 0===n.separator?" ":n.separator),r=String(null==e?"":e).toLowerCase(),a=[];return o.forEach((t=>{r.includes(t)&&a.push(!0)})),n.matchAll?a.length===o.length:!!a.length},starts:function(t,e,i,n){return null==t?e===t:null!=e&&String(e).toLowerCase().startsWith(t.toLowerCase())},ends:function(t,e,i,n){return null==t?e===t:null!=e&&String(e).toLowerCase().endsWith(t.toLowerCase())},in:function(t,e,i,n){return Array.isArray(t)?!t.length||t.indexOf(e)>-1:(console.warn("Filter Error - filter value is not an array:",t),!1)}};class $ extends E{constructor(t){super(t),this.filterList=[],this.headerFilters={},this.headerFilterColumns=[],this.prevHeaderFilterChangeCheck="",this.prevHeaderFilterChangeCheck="{}",this.changed=!1,this.tableInitialized=!1,this.registerTableOption("filterMode","local"),this.registerTableOption("initialFilter",!1),this.registerTableOption("initialHeaderFilter",!1),this.registerTableOption("headerFilterLiveFilterDelay",300),this.registerTableOption("placeholderHeaderFilter",!1),this.registerColumnOption("headerFilter"),this.registerColumnOption("headerFilterPlaceholder"),this.registerColumnOption("headerFilterParams"),this.registerColumnOption("headerFilterEmptyCheck"),this.registerColumnOption("headerFilterFunc"),this.registerColumnOption("headerFilterFuncParams"),this.registerColumnOption("headerFilterLiveFilter"),this.registerTableFunction("searchRows",this.searchRows.bind(this)),this.registerTableFunction("searchData",this.searchData.bind(this)),this.registerTableFunction("setFilter",this.userSetFilter.bind(this)),this.registerTableFunction("refreshFilter",this.userRefreshFilter.bind(this)),this.registerTableFunction("addFilter",this.userAddFilter.bind(this)),this.registerTableFunction("getFilters",this.getFilters.bind(this)),this.registerTableFunction("setHeaderFilterFocus",this.userSetHeaderFilterFocus.bind(this)),this.registerTableFunction("getHeaderFilterValue",this.userGetHeaderFilterValue.bind(this)),this.registerTableFunction("setHeaderFilterValue",this.userSetHeaderFilterValue.bind(this)),this.registerTableFunction("getHeaderFilters",this.getHeaderFilters.bind(this)),this.registerTableFunction("removeFilter",this.userRemoveFilter.bind(this)),this.registerTableFunction("clearFilter",this.userClearFilter.bind(this)),this.registerTableFunction("clearHeaderFilter",this.userClearHeaderFilter.bind(this)),this.registerComponentFunction("column","headerFilterFocus",this.setHeaderFilterFocus.bind(this)),this.registerComponentFunction("column","reloadHeaderFilter",this.reloadHeaderFilter.bind(this)),this.registerComponentFunction("column","getHeaderFilterValue",this.getHeaderFilterValue.bind(this)),this.registerComponentFunction("column","setHeaderFilterValue",this.setHeaderFilterValue.bind(this))}initialize(){this.subscribe("column-init",this.initializeColumnHeaderFilter.bind(this)),this.subscribe("column-width-fit-before",this.hideHeaderFilterElements.bind(this)),this.subscribe("column-width-fit-after",this.showHeaderFilterElements.bind(this)),this.subscribe("table-built",this.tableBuilt.bind(this)),this.subscribe("placeholder",this.generatePlaceholder.bind(this)),"remote"===this.table.options.filterMode&&this.subscribe("data-params",this.remoteFilterParams.bind(this)),this.registerDataHandler(this.filter.bind(this),10)}tableBuilt(){this.table.options.initialFilter&&this.setFilter(this.table.options.initialFilter),this.table.options.initialHeaderFilter&&this.table.options.initialHeaderFilter.forEach((t=>{var e=this.table.columnManager.findColumn(t.field);if(!e)return console.warn("Column Filter Error - No matching column found:",t.field),!1;this.setHeaderFilterValue(e,t.value)})),this.tableInitialized=!0}remoteFilterParams(t,e,i,n){return n.filter=this.getFilters(!0,!0),n}generatePlaceholder(t){if(this.table.options.placeholderHeaderFilter&&Object.keys(this.headerFilters).length)return this.table.options.placeholderHeaderFilter}userSetFilter(t,e,i,n){this.setFilter(t,e,i,n),this.refreshFilter()}userRefreshFilter(){this.refreshFilter()}userAddFilter(t,e,i,n){this.addFilter(t,e,i,n),this.refreshFilter()}userSetHeaderFilterFocus(t){var e=this.table.columnManager.findColumn(t);if(!e)return console.warn("Column Filter Focus Error - No matching column found:",t),!1;this.setHeaderFilterFocus(e)}userGetHeaderFilterValue(t){var e=this.table.columnManager.findColumn(t);if(e)return this.getHeaderFilterValue(e);console.warn("Column Filter Error - No matching column found:",t)}userSetHeaderFilterValue(t,e){var i=this.table.columnManager.findColumn(t);if(!i)return console.warn("Column Filter Error - No matching column found:",t),!1;this.setHeaderFilterValue(i,e)}userRemoveFilter(t,e,i){this.removeFilter(t,e,i),this.refreshFilter()}userClearFilter(t){this.clearFilter(t),this.refreshFilter()}userClearHeaderFilter(){this.clearHeaderFilter(),this.refreshFilter()}searchRows(t,e,i){return this.search("rows",t,e,i)}searchData(t,e,i){return this.search("data",t,e,i)}initializeColumnHeaderFilter(t){t.definition.headerFilter&&this.initializeColumn(t)}initializeColumn(t,e){var i=this,n=t.getField();t.modules.filter={success:function(e){var o,r="input"==t.modules.filter.tagType&&"text"==t.modules.filter.attrType||"textarea"==t.modules.filter.tagType?"partial":"match",a="",l="";if(void 0===t.modules.filter.prevSuccess||t.modules.filter.prevSuccess!==e){if(t.modules.filter.prevSuccess=e,t.modules.filter.emptyFunc(e))delete i.headerFilters[n];else{switch(t.modules.filter.value=e,typeof t.definition.headerFilterFunc){case"string":$.filters[t.definition.headerFilterFunc]?(a=t.definition.headerFilterFunc,o=function(i){var n=t.definition.headerFilterFuncParams||{},o=t.getFieldValue(i);return n="function"==typeof n?n(e,o,i):n,$.filters[t.definition.headerFilterFunc](e,o,i,n)}):console.warn("Header Filter Error - Matching filter function not found: ",t.definition.headerFilterFunc);break;case"function":a=o=function(i){var n=t.definition.headerFilterFuncParams||{},o=t.getFieldValue(i);return n="function"==typeof n?n(e,o,i):n,t.definition.headerFilterFunc(e,o,i,n)}}o||("partial"===r?(o=function(i){var n=t.getFieldValue(i);return null!=n&&String(n).toLowerCase().indexOf(String(e).toLowerCase())>-1},a="like"):(o=function(i){return t.getFieldValue(i)==e},a="=")),i.headerFilters[n]={value:e,func:o,type:a}}t.modules.filter.value=e,l=JSON.stringify(i.headerFilters),i.prevHeaderFilterChangeCheck!==l&&(i.prevHeaderFilterChangeCheck=l,i.trackChanges(),i.refreshFilter())}return!0},attrType:!1,tagType:!1,emptyFunc:!1},this.generateHeaderFilterElement(t)}generateHeaderFilterElement(t,e,i){var n,o,r,a,l,s,u,h,c=this,d=t.modules.filter.success,p=t.getField();if(t.modules.filter.value=e,t.modules.filter.headerElement&&t.modules.filter.headerElement.parentNode&&t.contentElement.removeChild(t.modules.filter.headerElement.parentNode),p){switch(t.modules.filter.emptyFunc=t.definition.headerFilterEmptyCheck||function(t){return!t&&0!==t},(n=document.createElement("div")).classList.add("tabulator-header-filter"),typeof t.definition.headerFilter){case"string":c.table.modules.edit.editors[t.definition.headerFilter]?(o=c.table.modules.edit.editors[t.definition.headerFilter],"tick"!==t.definition.headerFilter&&"tickCross"!==t.definition.headerFilter||t.definition.headerFilterEmptyCheck||(t.modules.filter.emptyFunc=function(t){return!0!==t&&!1!==t})):console.warn("Filter Error - Cannot build header filter, No such editor found: ",t.definition.editor);break;case"function":o=t.definition.headerFilter;break;case"boolean":t.modules.edit&&t.modules.edit.editor?o=t.modules.edit.editor:t.definition.formatter&&c.table.modules.edit.editors[t.definition.formatter]?(o=c.table.modules.edit.editors[t.definition.formatter],"tick"!==t.definition.formatter&&"tickCross"!==t.definition.formatter||t.definition.headerFilterEmptyCheck||(t.modules.filter.emptyFunc=function(t){return!0!==t&&!1!==t})):o=c.table.modules.edit.editors.input}if(o){if(a={getValue:function(){return void 0!==e?e:""},getField:function(){return t.definition.field},getElement:function(){return n},getColumn:function(){return t.getComponent()},getTable:()=>this.table,getType:()=>"header",getRow:function(){return{normalizeHeight:function(){}}}},u="function"==typeof(u=t.definition.headerFilterParams||{})?u.call(c.table,a):u,!(r=o.call(this.table.modules.edit,a,(function(t){h=t}),d,(function(){}),u)))return void console.warn("Filter Error - Cannot add filter to "+p+" column, editor returned a value of false");if(!(r instanceof Node))return void console.warn("Filter Error - Cannot add filter to "+p+" column, editor should return an instance of Node, the editor returned:",r);c.langBind("headerFilters|columns|"+t.definition.field,(function(e){r.setAttribute("placeholder",void 0!==e&&e?e:t.definition.headerFilterPlaceholder||c.langText("headerFilters|default"))})),r.addEventListener("click",(function(t){t.stopPropagation(),r.focus()})),r.addEventListener("focus",(t=>{var e=this.table.columnManager.contentsElement.scrollLeft;e!==this.table.rowManager.element.scrollLeft&&(this.table.rowManager.scrollHorizontal(e),this.table.columnManager.scrollHorizontal(e))})),l=!1,s=function(t){l&&clearTimeout(l),l=setTimeout((function(){d(r.value)}),c.table.options.headerFilterLiveFilterDelay)},t.modules.filter.headerElement=r,t.modules.filter.attrType=r.hasAttribute("type")?r.getAttribute("type").toLowerCase():"",t.modules.filter.tagType=r.tagName.toLowerCase(),!1!==t.definition.headerFilterLiveFilter&&("autocomplete"!==t.definition.headerFilter&&"tickCross"!==t.definition.headerFilter&&("autocomplete"!==t.definition.editor&&"tickCross"!==t.definition.editor||!0!==t.definition.headerFilter)&&(r.addEventListener("keyup",s),r.addEventListener("search",s),"number"==t.modules.filter.attrType&&r.addEventListener("change",(function(t){d(r.value)})),"text"==t.modules.filter.attrType&&"ie"!==this.table.browser&&r.setAttribute("type","search")),"input"!=t.modules.filter.tagType&&"select"!=t.modules.filter.tagType&&"textarea"!=t.modules.filter.tagType||r.addEventListener("mousedown",(function(t){t.stopPropagation()}))),n.appendChild(r),t.contentElement.appendChild(n),i||c.headerFilterColumns.push(t),h&&h()}}else console.warn("Filter Error - Cannot add header filter, column has no field set:",t.definition.title)}hideHeaderFilterElements(){this.headerFilterColumns.forEach((function(t){t.modules.filter&&t.modules.filter.headerElement&&(t.modules.filter.headerElement.style.display="none")}))}showHeaderFilterElements(){this.headerFilterColumns.forEach((function(t){t.modules.filter&&t.modules.filter.headerElement&&(t.modules.filter.headerElement.style.display="")}))}setHeaderFilterFocus(t){t.modules.filter&&t.modules.filter.headerElement?t.modules.filter.headerElement.focus():console.warn("Column Filter Focus Error - No header filter set on column:",t.getField())}getHeaderFilterValue(t){if(t.modules.filter&&t.modules.filter.headerElement)return t.modules.filter.value;console.warn("Column Filter Error - No header filter set on column:",t.getField())}setHeaderFilterValue(t,e){t&&(t.modules.filter&&t.modules.filter.headerElement?(this.generateHeaderFilterElement(t,e,!0),t.modules.filter.success(e)):console.warn("Column Filter Error - No header filter set on column:",t.getField()))}reloadHeaderFilter(t){t&&(t.modules.filter&&t.modules.filter.headerElement?this.generateHeaderFilterElement(t,t.modules.filter.value,!0):console.warn("Column Filter Error - No header filter set on column:",t.getField()))}refreshFilter(){this.tableInitialized&&("remote"===this.table.options.filterMode?this.reloadData(null,!1,!1):this.refreshData(!0))}trackChanges(){this.changed=!0,this.dispatch("filter-changed")}hasChanged(){var t=this.changed;return this.changed=!1,t}setFilter(t,e,i,n){this.filterList=[],Array.isArray(t)||(t=[{field:t,type:e,value:i,params:n}]),this.addFilter(t)}addFilter(t,e,i,n){var o=!1;Array.isArray(t)||(t=[{field:t,type:e,value:i,params:n}]),t.forEach((t=>{(t=this.findFilter(t))&&(this.filterList.push(t),o=!0)})),o&&this.trackChanges()}findFilter(t){var e;if(Array.isArray(t))return this.findSubFilters(t);var i=!1;return"function"==typeof t.field?i=function(e){return t.field(e,t.type||{})}:$.filters[t.type]?i=(e=this.table.columnManager.getColumnByField(t.field))?function(i){return $.filters[t.type](t.value,e.getFieldValue(i),i,t.params||{})}:function(e){return $.filters[t.type](t.value,e[t.field],e,t.params||{})}:console.warn("Filter Error - No such filter type found, ignoring: ",t.type),t.func=i,!!t.func&&t}findSubFilters(t){var e=[];return t.forEach((t=>{(t=this.findFilter(t))&&e.push(t)})),!!e.length&&e}getFilters(t,e){var i=[];return t&&(i=this.getHeaderFilters()),e&&i.forEach((function(t){"function"==typeof t.type&&(t.type="function")})),i.concat(this.filtersToArray(this.filterList,e))}filtersToArray(t,e){var i=[];return t.forEach((t=>{var n;Array.isArray(t)?i.push(this.filtersToArray(t,e)):(n={field:t.field,type:t.type,value:t.value},e&&"function"==typeof n.type&&(n.type="function"),i.push(n))})),i}getHeaderFilters(){var t=[];for(var e in this.headerFilters)t.push({field:e,type:this.headerFilters[e].type,value:this.headerFilters[e].value});return t}removeFilter(t,e,i){Array.isArray(t)||(t=[{field:t,type:e,value:i}]),t.forEach((t=>{var e;(e="object"==typeof t.field?this.filterList.findIndex((e=>t===e)):this.filterList.findIndex((e=>t.field===e.field&&t.type===e.type&&t.value===e.value)))>-1?this.filterList.splice(e,1):console.warn("Filter Error - No matching filter type found, ignoring: ",t.type)})),this.trackChanges()}clearFilter(t){this.filterList=[],t&&this.clearHeaderFilter(),this.trackChanges()}clearHeaderFilter(){this.headerFilters={},this.prevHeaderFilterChangeCheck="{}",this.headerFilterColumns.forEach((t=>{void 0!==t.modules.filter.value&&delete t.modules.filter.value,t.modules.filter.prevSuccess=void 0,this.reloadHeaderFilter(t)})),this.trackChanges()}search(t,e,i,n){var o=[],r=[];return Array.isArray(e)||(e=[{field:e,type:i,value:n}]),e.forEach((t=>{(t=this.findFilter(t))&&r.push(t)})),this.table.rowManager.rows.forEach((e=>{var i=!0;r.forEach((t=>{this.filterRecurse(t,e.getData())||(i=!1)})),i&&o.push("data"===t?e.getData("data"):e.getComponent())})),o}filter(t,e){var i=[],n=[];return this.subscribedExternal("dataFiltering")&&this.dispatchExternal("dataFiltering",this.getFilters(!0)),"remote"!==this.table.options.filterMode&&(this.filterList.length||Object.keys(this.headerFilters).length)?t.forEach((t=>{this.filterRow(t)&&i.push(t)})):i=t.slice(0),this.subscribedExternal("dataFiltered")&&(i.forEach((t=>{n.push(t.getComponent())})),this.dispatchExternal("dataFiltered",this.getFilters(!0),n)),i}filterRow(t,e){var i=!0,n=t.getData();for(var o in this.filterList.forEach((t=>{this.filterRecurse(t,n)||(i=!1)})),this.headerFilters)this.headerFilters[o].func(n)||(i=!1);return i}filterRecurse(t,e){var i=!1;return Array.isArray(t)?t.forEach((t=>{this.filterRecurse(t,e)&&(i=!0)})):i=t.func(e),i}}$.moduleName="filter",$.filters=Z;var Q={plaintext:function(t,e,i){return this.emptyToSpace(this.sanitizeHTML(t.getValue()))},html:function(t,e,i){return t.getValue()},textarea:function(t,e,i){return t.getElement().style.whiteSpace="pre-wrap",this.emptyToSpace(this.sanitizeHTML(t.getValue()))},money:function(t,e,i){var n,o,r,a,l,s=parseFloat(t.getValue()),u="",h=e.decimal||".",c=e.thousand||",",d=e.negativeSign||"-",p=e.symbol||"",b=!!e.symbolAfter,m=void 0!==e.precision?e.precision:2;if(isNaN(s))return this.emptyToSpace(this.sanitizeHTML(t.getValue()));if(s<0&&(s=Math.abs(s),u=d),n=!1!==m?s.toFixed(m):s,o=(n=String(n).split("."))[0],r=n.length>1?h+n[1]:"",!1!==e.thousand)for(a=/(\d+)(\d{3})/;a.test(o);)o=o.replace(a,"$1"+c+"$2");return l=o+r,!0===u?(l="("+l+")",b?l+p:p+l):b?u+l+p:u+p+l},link:function(t,e,i){var n,o=t.getValue(),r=e.urlPrefix||"",a=e.download,l=o,s=document.createElement("a");if(e.labelField&&(n=t.getData(),l=function t(e,i){var n=i[e.shift()];return e.length&&"object"==typeof n?t(e,n):n}(e.labelField.split(this.table.options.nestedFieldSeparator),n)),e.label)switch(typeof e.label){case"string":l=e.label;break;case"function":l=e.label(t)}if(l){if(e.urlField&&(o=(n=t.getData())[e.urlField]),e.url)switch(typeof e.url){case"string":o=e.url;break;case"function":o=e.url(t)}return s.setAttribute("href",r+o),e.target&&s.setAttribute("target",e.target),e.download&&(a="function"==typeof a?a(t):!0===a?"":a,s.setAttribute("download",a)),s.innerHTML=this.emptyToSpace(this.sanitizeHTML(l)),s}return"&nbsp;"},image:function(t,e,i){var n=document.createElement("img"),o=t.getValue();switch(e.urlPrefix&&(o=e.urlPrefix+t.getValue()),e.urlSuffix&&(o+=e.urlSuffix),n.setAttribute("src",o),typeof e.height){case"number":n.style.height=e.height+"px";break;case"string":n.style.height=e.height}switch(typeof e.width){case"number":n.style.width=e.width+"px";break;case"string":n.style.width=e.width}return n.addEventListener("load",(function(){t.getRow().normalizeHeight()})),n},tickCross:function(t,e,i){var n=t.getValue(),o=t.getElement(),r=e.allowEmpty,a=e.allowTruthy,l=Object.keys(e).includes("trueValue"),s=void 0!==e.tickElement?e.tickElement:'<svg enable-background="new 0 0 24 24" height="14" width="14" viewBox="0 0 24 24" xml:space="preserve" ><path fill="#2DC214" clip-rule="evenodd" d="M21.652,3.211c-0.293-0.295-0.77-0.295-1.061,0L9.41,14.34  c-0.293,0.297-0.771,0.297-1.062,0L3.449,9.351C3.304,9.203,3.114,9.13,2.923,9.129C2.73,9.128,2.534,9.201,2.387,9.351  l-2.165,1.946C0.078,11.445,0,11.63,0,11.823c0,0.194,0.078,0.397,0.223,0.544l4.94,5.184c0.292,0.296,0.771,0.776,1.062,1.07  l2.124,2.141c0.292,0.293,0.769,0.293,1.062,0l14.366-14.34c0.293-0.294,0.293-0.777,0-1.071L21.652,3.211z" fill-rule="evenodd"/></svg>',u=void 0!==e.crossElement?e.crossElement:'<svg enable-background="new 0 0 24 24" height="14" width="14"  viewBox="0 0 24 24" xml:space="preserve" ><path fill="#CE1515" d="M22.245,4.015c0.313,0.313,0.313,0.826,0,1.139l-6.276,6.27c-0.313,0.312-0.313,0.826,0,1.14l6.273,6.272  c0.313,0.313,0.313,0.826,0,1.14l-2.285,2.277c-0.314,0.312-0.828,0.312-1.142,0l-6.271-6.271c-0.313-0.313-0.828-0.313-1.141,0  l-6.276,6.267c-0.313,0.313-0.828,0.313-1.141,0l-2.282-2.28c-0.313-0.313-0.313-0.826,0-1.14l6.278-6.269  c0.313-0.312,0.313-0.826,0-1.14L1.709,5.147c-0.314-0.313-0.314-0.827,0-1.14l2.284-2.278C4.308,1.417,4.821,1.417,5.135,1.73  L11.405,8c0.314,0.314,0.828,0.314,1.141,0.001l6.276-6.267c0.312-0.312,0.826-0.312,1.141,0L22.245,4.015z"/></svg>';return l&&n===e.trueValue||!l&&(a&&n||!0===n||"true"===n||"True"===n||1===n||"1"===n)?(o.setAttribute("aria-checked",!0),s||""):!r||"null"!==n&&""!==n&&null!=n?(o.setAttribute("aria-checked",!1),u||""):(o.setAttribute("aria-checked","mixed"),"")},datetime:function(t,e,i){var n,o=window.DateTime||luxon.DateTime,r=e.inputFormat||"yyyy-MM-dd HH:mm:ss",a=e.outputFormat||"dd/MM/yyyy HH:mm:ss",l=void 0!==e.invalidPlaceholder?e.invalidPlaceholder:"",s=t.getValue();if(void 0!==o)return(n=o.isDateTime(s)?s:"iso"===r?o.fromISO(String(s)):o.fromFormat(String(s),r)).isValid?(e.timezone&&(n=n.setZone(e.timezone)),n.toFormat(a)):!0!==l&&s?"function"==typeof l?l(s):l:s;console.error("Format Error - 'datetime' formatter is dependant on luxon.js")},datetimediff:function(t,e,i){var n,o=window.DateTime||luxon.DateTime,r=e.inputFormat||"yyyy-MM-dd HH:mm:ss",a=void 0!==e.invalidPlaceholder?e.invalidPlaceholder:"",l=void 0!==e.suffix&&e.suffix,s=void 0!==e.unit?e.unit:"days",u=void 0!==e.humanize&&e.humanize,h=void 0!==e.date?e.date:o.now(),c=t.getValue();if(void 0!==o)return(n=o.isDateTime(c)?c:"iso"===r?o.fromISO(String(c)):o.fromFormat(String(c),r)).isValid?u?n.diff(h,s).toHuman()+(l?" "+l:""):parseInt(n.diff(h,s)[s])+(l?" "+l:""):!0===a?c:"function"==typeof a?a(c):a;console.error("Format Error - 'datetimediff' formatter is dependant on luxon.js")},lookup:function(t,e,i){var n=t.getValue();return void 0===e[n]?(console.warn("Missing display value for "+n),n):e[n]},star:function(t,e,i){var n=t.getValue(),o=t.getElement(),r=e&&e.stars?e.stars:5,a=document.createElement("span"),l=document.createElementNS("http://www.w3.org/2000/svg","svg");a.style.verticalAlign="middle",l.setAttribute("width","14"),l.setAttribute("height","14"),l.setAttribute("viewBox","0 0 512 512"),l.setAttribute("xml:space","preserve"),l.style.padding="0 1px",n=n&&!isNaN(n)?parseInt(n):0,n=Math.max(0,Math.min(n,r));for(var s=1;s<=r;s++){var u=l.cloneNode(!0);u.innerHTML=s<=n?'<polygon fill="#FFEA00" stroke="#C1AB60" stroke-width="37.6152" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" points="259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 "/>':'<polygon fill="#D2D2D2" stroke="#686868" stroke-width="37.6152" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" points="259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 "/>',a.appendChild(u)}return o.style.whiteSpace="nowrap",o.style.overflow="hidden",o.style.textOverflow="ellipsis",o.setAttribute("aria-label",n),a},traffic:function(t,e,i){var n,o,r=this.sanitizeHTML(t.getValue())||0,a=document.createElement("span"),l=e&&e.max?e.max:100,s=e&&e.min?e.min:0,u=e&&void 0!==e.color?e.color:["red","orange","green"],h="#666666";if(!isNaN(r)&&void 0!==t.getValue()){switch(a.classList.add("tabulator-traffic-light"),o=parseFloat(r)<=l?parseFloat(r):l,o=parseFloat(o)>=s?parseFloat(o):s,n=(l-s)/100,o=Math.round((o-s)/n),typeof u){case"string":h=u;break;case"function":h=u(r);break;case"object":if(Array.isArray(u)){var c=100/u.length,d=Math.floor(o/c);d=Math.min(d,u.length-1),h=u[d=Math.max(d,0)];break}}return a.style.backgroundColor=h,a}},progress:function(t,e={},i){var n,o,r,a,l,s=this.sanitizeHTML(t.getValue())||0,u=t.getElement(),h=e.max?e.max:100,c=e.min?e.min:0,d=e.legendAlign?e.legendAlign:"center";switch(o=parseFloat(s)<=h?parseFloat(s):h,o=parseFloat(o)>=c?parseFloat(o):c,n=(h-c)/100,o=Math.round((o-c)/n),typeof e.color){case"string":r=e.color;break;case"function":r=e.color(s);break;case"object":if(Array.isArray(e.color)){let t=100/e.color.length,i=Math.floor(o/t);i=Math.min(i,e.color.length-1),i=Math.max(i,0),r=e.color[i];break}default:r="#2DC214"}switch(typeof e.legend){case"string":a=e.legend;break;case"function":a=e.legend(s);break;case"boolean":a=s;break;default:a=!1}switch(typeof e.legendColor){case"string":l=e.legendColor;break;case"function":l=e.legendColor(s);break;case"object":if(Array.isArray(e.legendColor)){let t=100/e.legendColor.length,i=Math.floor(o/t);i=Math.min(i,e.legendColor.length-1),i=Math.max(i,0),l=e.legendColor[i]}break;default:l="#000"}u.style.minWidth="30px",u.style.position="relative",u.setAttribute("aria-label",o);var p=document.createElement("div");p.style.display="inline-block",p.style.width=o+"%",p.style.backgroundColor=r,p.style.height="100%",p.setAttribute("data-max",h),p.setAttribute("data-min",c);var b=document.createElement("div");if(b.style.position="relative",b.style.width="100%",b.style.height="100%",a){var m=document.createElement("div");m.style.position="absolute",m.style.top=0,m.style.left=0,m.style.textAlign=d,m.style.width="100%",m.style.color=l,m.innerHTML=a}return i((function(){if(!(t instanceof L)){var e=document.createElement("div");e.style.position="absolute",e.style.top="4px",e.style.bottom="4px",e.style.left="4px",e.style.right="4px",u.appendChild(e),u=e}u.appendChild(b),b.appendChild(p),a&&b.appendChild(m)})),""},color:function(t,e,i){return t.getElement().style.backgroundColor=this.sanitizeHTML(t.getValue()),""},buttonTick:function(t,e,i){return'<svg enable-background="new 0 0 24 24" height="14" width="14" viewBox="0 0 24 24" xml:space="preserve" ><path fill="#2DC214" clip-rule="evenodd" d="M21.652,3.211c-0.293-0.295-0.77-0.295-1.061,0L9.41,14.34  c-0.293,0.297-0.771,0.297-1.062,0L3.449,9.351C3.304,9.203,3.114,9.13,2.923,9.129C2.73,9.128,2.534,9.201,2.387,9.351  l-2.165,1.946C0.078,11.445,0,11.63,0,11.823c0,0.194,0.078,0.397,0.223,0.544l4.94,5.184c0.292,0.296,0.771,0.776,1.062,1.07  l2.124,2.141c0.292,0.293,0.769,0.293,1.062,0l14.366-14.34c0.293-0.294,0.293-0.777,0-1.071L21.652,3.211z" fill-rule="evenodd"/></svg>'},buttonCross:function(t,e,i){return'<svg enable-background="new 0 0 24 24" height="14" width="14" viewBox="0 0 24 24" xml:space="preserve" ><path fill="#CE1515" d="M22.245,4.015c0.313,0.313,0.313,0.826,0,1.139l-6.276,6.27c-0.313,0.312-0.313,0.826,0,1.14l6.273,6.272  c0.313,0.313,0.313,0.826,0,1.14l-2.285,2.277c-0.314,0.312-0.828,0.312-1.142,0l-6.271-6.271c-0.313-0.313-0.828-0.313-1.141,0  l-6.276,6.267c-0.313,0.313-0.828,0.313-1.141,0l-2.282-2.28c-0.313-0.313-0.313-0.826,0-1.14l6.278-6.269  c0.313-0.312,0.313-0.826,0-1.14L1.709,5.147c-0.314-0.313-0.314-0.827,0-1.14l2.284-2.278C4.308,1.417,4.821,1.417,5.135,1.73  L11.405,8c0.314,0.314,0.828,0.314,1.141,0.001l6.276-6.267c0.312-0.312,0.826-0.312,1.141,0L22.245,4.015z"/></svg>'},rownum:function(t,e,i){var n=document.createElement("span");return t.getRow().watchPosition((t=>{n.innerText=t})),n},handle:function(t,e,i){return t.getElement().classList.add("tabulator-row-handle"),"<div class='tabulator-row-handle-box'><div class='tabulator-row-handle-bar'></div><div class='tabulator-row-handle-bar'></div><div class='tabulator-row-handle-bar'></div></div>"},responsiveCollapse:function(t,e,i){var n=document.createElement("div"),o=t.getRow()._row.modules.responsiveLayout;function r(t){var e=o.element;o.open=t,e&&(o.open?(n.classList.add("open"),e.style.display=""):(n.classList.remove("open"),e.style.display="none"))}return n.classList.add("tabulator-responsive-collapse-toggle"),n.innerHTML='<svg class=\'tabulator-responsive-collapse-toggle-open\' viewbox="0 0 24 24">\n  <line x1="7" y1="12" x2="17" y2="12" fill="none" stroke-width="3" stroke-linecap="round" />\n  <line y1="7" x1="12" y2="17" x2="12" fill="none" stroke-width="3" stroke-linecap="round" />\n</svg>\n\n<svg class=\'tabulator-responsive-collapse-toggle-close\' viewbox="0 0 24 24">\n  <line x1="7" y1="12" x2="17" y2="12"  fill="none" stroke-width="3" stroke-linecap="round" />\n</svg>',t.getElement().classList.add("tabulator-row-handle"),n.addEventListener("click",(function(e){e.stopImmediatePropagation(),r(!o.open),t.getTable().rowManager.adjustTableSize()})),r(o.open),n},rowSelection:function(t,e,i){var n=document.createElement("input"),o=!1;if(n.type="checkbox",n.setAttribute("aria-label","Select Row"),this.table.modExists("selectRow",!0))if(n.addEventListener("click",(t=>{t.stopPropagation()})),"function"==typeof t.getRow){var r=t.getRow();r instanceof F?(n.addEventListener("change",(t=>{"click"===this.table.options.selectableRangeMode&&o?o=!1:r.toggleSelect()})),"click"===this.table.options.selectableRangeMode&&n.addEventListener("click",(t=>{o=!0,this.table.modules.selectRow.handleComplexRowClick(r._row,t)})),n.checked=r.isSelected&&r.isSelected(),this.table.modules.selectRow.registerRowSelectCheckbox(r,n)):n=""}else n.addEventListener("change",(t=>{this.table.modules.selectRow.selectedRows.length?this.table.deselectRow():this.table.selectRow(e.rowRange)})),this.table.modules.selectRow.registerHeaderSelectCheckbox(n);return n}};class tt extends E{constructor(t){super(t),this.registerColumnOption("formatter"),this.registerColumnOption("formatterParams"),this.registerColumnOption("formatterPrint"),this.registerColumnOption("formatterPrintParams"),this.registerColumnOption("formatterClipboard"),this.registerColumnOption("formatterClipboardParams"),this.registerColumnOption("formatterHtmlOutput"),this.registerColumnOption("formatterHtmlOutputParams"),this.registerColumnOption("titleFormatter"),this.registerColumnOption("titleFormatterParams")}initialize(){this.subscribe("cell-format",this.formatValue.bind(this)),this.subscribe("cell-rendered",this.cellRendered.bind(this)),this.subscribe("column-layout",this.initializeColumn.bind(this)),this.subscribe("column-format",this.formatHeader.bind(this))}initializeColumn(t){t.modules.format=this.lookupFormatter(t,""),void 0!==t.definition.formatterPrint&&(t.modules.format.print=this.lookupFormatter(t,"Print")),void 0!==t.definition.formatterClipboard&&(t.modules.format.clipboard=this.lookupFormatter(t,"Clipboard")),void 0!==t.definition.formatterHtmlOutput&&(t.modules.format.htmlOutput=this.lookupFormatter(t,"HtmlOutput"))}lookupFormatter(t,e){var i={params:t.definition["formatter"+e+"Params"]||{}},n=t.definition["formatter"+e];switch(typeof n){case"string":tt.formatters[n]?i.formatter=tt.formatters[n]:(console.warn("Formatter Error - No such formatter found: ",n),i.formatter=tt.formatters.plaintext);break;case"function":i.formatter=n;break;default:i.formatter=tt.formatters.plaintext}return i}cellRendered(t){t.modules.format&&t.modules.format.renderedCallback&&!t.modules.format.rendered&&(t.modules.format.renderedCallback(),t.modules.format.rendered=!0)}formatHeader(t,e,i){var n,o,r,a;return t.definition.titleFormatter?(n=this.getFormatter(t.definition.titleFormatter),r=e=>{t.titleFormatterRendered=e},a={getValue:function(){return e},getElement:function(){return i},getType:function(){return"header"},getColumn:function(){return t.getComponent()},getTable:()=>this.table},o="function"==typeof(o=t.definition.titleFormatterParams||{})?o():o,n.call(this,a,o,r)):e}formatValue(t){var e=t.getComponent(),i="function"==typeof t.column.modules.format.params?t.column.modules.format.params(e):t.column.modules.format.params;return t.column.modules.format.formatter.call(this,e,i,(function(e){t.modules.format||(t.modules.format={}),t.modules.format.renderedCallback=e,t.modules.format.rendered=!1}))}formatExportValue(t,e){var i,n=t.column.modules.format[e];if(n){function o(e){t.modules.format||(t.modules.format={}),t.modules.format.renderedCallback=e,t.modules.format.rendered=!1}return i="function"==typeof n.params?n.params(t.getComponent()):n.params,n.formatter.call(this,t.getComponent(),i,o)}return this.formatValue(t)}sanitizeHTML(t){if(t){var e={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"};return String(t).replace(/[&<>"'`=/]/g,(function(t){return e[t]}))}return t}emptyToSpace(t){return null==t||""===t?"&nbsp;":t}getFormatter(t){switch(typeof t){case"string":tt.formatters[t]?t=tt.formatters[t]:(console.warn("Formatter Error - No such formatter found: ",t),t=tt.formatters.plaintext);break;case"function":break;default:t=tt.formatters.plaintext}return t}}tt.moduleName="format",tt.formatters=Q;class et extends E{constructor(t){super(t),this.leftColumns=[],this.rightColumns=[],this.initializationMode="left",this.active=!1,this.blocked=!0,this.registerColumnOption("frozen")}reset(){this.initializationMode="left",this.leftColumns=[],this.rightColumns=[],this.active=!1}initialize(){this.subscribe("cell-layout",this.layoutCell.bind(this)),this.subscribe("column-init",this.initializeColumn.bind(this)),this.subscribe("column-width",this.layout.bind(this)),this.subscribe("row-layout-after",this.layoutRow.bind(this)),this.subscribe("table-layout",this.layout.bind(this)),this.subscribe("columns-loading",this.reset.bind(this)),this.subscribe("column-add",this.reinitializeColumns.bind(this)),this.subscribe("column-delete",this.reinitializeColumns.bind(this)),this.subscribe("table-redraw",this.layout.bind(this)),this.subscribe("layout-refreshing",this.blockLayout.bind(this)),this.subscribe("layout-refreshed",this.unblockLayout.bind(this)),this.subscribe("scrollbar-vertical",this.adjustForScrollbar.bind(this))}blockLayout(){this.blocked=!0}unblockLayout(){this.blocked=!1}layoutCell(t){this.layoutElement(t.element,t.column)}reinitializeColumns(){this.reset(),this.table.columnManager.columnsByIndex.forEach((t=>{this.initializeColumn(t)}))}initializeColumn(t){var e={margin:0,edge:!1};t.isGroup||(this.frozenCheck(t)?(e.position=this.initializationMode,"left"==this.initializationMode?this.leftColumns.push(t):this.rightColumns.unshift(t),this.active=!0,t.modules.frozen=e):this.initializationMode="right")}frozenCheck(t){return t.parent.isGroup&&t.definition.frozen&&console.warn("Frozen Column Error - Parent column group must be frozen, not individual columns or sub column groups"),t.parent.isGroup?this.frozenCheck(t.parent):t.definition.frozen}layoutCalcRows(){this.table.modExists("columnCalcs")&&(this.table.modules.columnCalcs.topInitialized&&this.table.modules.columnCalcs.topRow&&this.layoutRow(this.table.modules.columnCalcs.topRow),this.table.modules.columnCalcs.botInitialized&&this.table.modules.columnCalcs.botRow&&this.layoutRow(this.table.modules.columnCalcs.botRow),this.table.modExists("groupRows")&&this.layoutGroupCalcs(this.table.modules.groupRows.getGroups()))}layoutGroupCalcs(t){t.forEach((t=>{t.calcs.top&&this.layoutRow(t.calcs.top),t.calcs.bottom&&this.layoutRow(t.calcs.bottom),t.groupList&&t.groupList.length&&this.layoutGroupCalcs(t.groupList)}))}layoutColumnPosition(t){var e=[],i=0,n=0;this.leftColumns.forEach(((n,o)=>{if(n.modules.frozen.marginValue=i,n.modules.frozen.margin=n.modules.frozen.marginValue+"px",n.visible&&(i+=n.getWidth()),o==this.leftColumns.length-1?n.modules.frozen.edge=!0:n.modules.frozen.edge=!1,n.parent.isGroup){var r=this.getColGroupParentElement(n);e.includes(r)||(this.layoutElement(r,n),e.push(r)),n.modules.frozen.edge&&r.classList.add("tabulator-frozen-"+n.modules.frozen.position)}else this.layoutElement(n.getElement(),n);t&&n.cells.forEach((t=>{this.layoutElement(t.getElement(!0),n)}))})),this.rightColumns.forEach(((e,i)=>{e.modules.frozen.marginValue=n,e.modules.frozen.margin=e.modules.frozen.marginValue+"px",e.visible&&(n+=e.getWidth()),i==this.rightColumns.length-1?e.modules.frozen.edge=!0:e.modules.frozen.edge=!1,e.parent.isGroup?this.layoutElement(this.getColGroupParentElement(e),e):this.layoutElement(e.getElement(),e),t&&e.cells.forEach((t=>{this.layoutElement(t.getElement(!0),e)}))}))}getColGroupParentElement(t){return t.parent.isGroup?this.getColGroupParentElement(t.parent):t.getElement()}layout(){this.active&&!this.blocked&&(this.layoutColumnPosition(),this.reinitializeRows(),this.layoutCalcRows())}reinitializeRows(){var t=this.table.rowManager.getVisibleRows(!0);this.table.rowManager.getRows().filter((e=>!t.includes(e))).forEach((t=>{t.deinitialize()})),t.forEach((t=>{"row"===t.type&&this.layoutRow(t)}))}layoutRow(t){"fitDataFill"===this.table.options.layout&&this.rightColumns.length&&(this.table.rowManager.getTableElement().style.minWidth="calc(100% - "+this.rightMargin+")"),this.leftColumns.forEach((e=>{var i=t.getCell(e);i&&this.layoutElement(i.getElement(!0),e)})),this.rightColumns.forEach((e=>{var i=t.getCell(e);i&&this.layoutElement(i.getElement(!0),e)}))}layoutElement(t,e){var i;e.modules.frozen&&t&&(t.style.position="sticky",i=this.table.rtl?"left"===e.modules.frozen.position?"right":"left":e.modules.frozen.position,t.style[i]=e.modules.frozen.margin,t.classList.add("tabulator-frozen"),e.modules.frozen.edge&&t.classList.add("tabulator-frozen-"+e.modules.frozen.position))}adjustForScrollbar(t){this.rightColumns.length&&(this.table.columnManager.getContentsElement().style.width="calc(100% - "+t+"px)")}_calcSpace(t,e){var i=0;for(let n=0;n<e;n++)t[n].visible&&(i+=t[n].getWidth());return i}}et.moduleName="frozenColumns";class it extends E{constructor(t){super(t),this.topElement=document.createElement("div"),this.rows=[],this.registerComponentFunction("row","freeze",this.freezeRow.bind(this)),this.registerComponentFunction("row","unfreeze",this.unfreezeRow.bind(this)),this.registerComponentFunction("row","isFrozen",this.isRowFrozen.bind(this)),this.registerTableOption("frozenRowsField","id"),this.registerTableOption("frozenRows",!1)}initialize(){this.rows=[],this.topElement.classList.add("tabulator-frozen-rows-holder"),this.table.columnManager.getContentsElement().insertBefore(this.topElement,this.table.columnManager.headersElement.nextSibling),this.subscribe("row-deleting",this.detachRow.bind(this)),this.subscribe("rows-visible",this.visibleRows.bind(this)),this.registerDisplayHandler(this.getRows.bind(this),10),this.table.options.frozenRows&&(this.subscribe("data-processed",this.initializeRows.bind(this)),this.subscribe("row-added",this.initializeRow.bind(this)),this.subscribe("table-redrawing",this.resizeHolderWidth.bind(this)),this.subscribe("column-resized",this.resizeHolderWidth.bind(this)),this.subscribe("column-show",this.resizeHolderWidth.bind(this)),this.subscribe("column-hide",this.resizeHolderWidth.bind(this))),this.resizeHolderWidth()}resizeHolderWidth(){this.topElement.style.minWidth=this.table.columnManager.headersElement.offsetWidth+"px"}initializeRows(){this.table.rowManager.getRows().forEach((t=>{this.initializeRow(t)}))}initializeRow(t){var e=this.table.options.frozenRows,i=typeof e;"number"===i?t.getPosition()&&t.getPosition()+this.rows.length<=e&&this.freezeRow(t):"function"===i?e.call(this.table,t.getComponent())&&this.freezeRow(t):Array.isArray(e)&&e.includes(t.data[this.options("frozenRowsField")])&&this.freezeRow(t)}isRowFrozen(t){return this.rows.indexOf(t)>-1}isFrozen(){return!!this.rows.length}visibleRows(t,e){return this.rows.forEach((t=>{e.push(t)})),e}getRows(t){var e=t.slice(0);return this.rows.forEach((function(t){var i=e.indexOf(t);i>-1&&e.splice(i,1)})),e}freezeRow(t){t.modules.frozen?console.warn("Freeze Error - Row is already frozen"):(t.modules.frozen=!0,this.topElement.appendChild(t.getElement()),t.initialize(),t.normalizeHeight(),this.rows.push(t),this.refreshData(!1,"display"),this.table.rowManager.adjustTableSize(),this.styleRows())}unfreezeRow(t){t.modules.frozen?(t.modules.frozen=!1,this.detachRow(t),this.table.rowManager.adjustTableSize(),this.refreshData(!1,"display"),this.rows.length&&this.styleRows()):console.warn("Freeze Error - Row is already unfrozen")}detachRow(t){var e=this.rows.indexOf(t);if(e>-1){var i=t.getElement();i.parentNode&&i.parentNode.removeChild(i),this.rows.splice(e,1)}}styleRows(t){this.rows.forEach(((t,e)=>{this.table.rowManager.styleRow(t,e)}))}}it.moduleName="frozenRows";class nt{constructor(t){return this._group=t,this.type="GroupComponent",new Proxy(this,{get:function(t,e,i){return void 0!==t[e]?t[e]:t._group.groupManager.table.componentFunctionBinder.handle("group",t._group,e)}})}getKey(){return this._group.key}getField(){return this._group.field}getElement(){return this._group.element}getRows(){return this._group.getRows(!0)}getSubGroups(){return this._group.getSubGroups(!0)}getParentGroup(){return!!this._group.parent&&this._group.parent.getComponent()}isVisible(){return this._group.visible}show(){this._group.show()}hide(){this._group.hide()}toggle(){this._group.toggleVisibility()}scrollTo(t,e){return this._group.groupManager.table.rowManager.scrollToRow(this._group,t,e)}_getSelf(){return this._group}getTable(){return this._group.groupManager.table}}class ot{constructor(t,e,i,n,o,r,a){this.groupManager=t,this.parent=e,this.key=n,this.level=i,this.field=o,this.hasSubGroups=i<t.groupIDLookups.length-1,this.addRow=this.hasSubGroups?this._addRowToGroup:this._addRow,this.type="group",this.old=a,this.rows=[],this.groups=[],this.groupList=[],this.generator=r,this.element=!1,this.elementContents=!1,this.height=0,this.outerHeight=0,this.initialized=!1,this.calcs={},this.initialized=!1,this.modules={},this.arrowElement=!1,this.visible=a?a.visible:void 0!==t.startOpen[i]?t.startOpen[i]:t.startOpen[0],this.component=null,this.createElements(),this.addBindings(),this.createValueGroups()}wipe(t){t||(this.groupList.length?this.groupList.forEach((function(t){t.wipe()})):this.rows.forEach((t=>{t.modules&&delete t.modules.group}))),this.element=!1,this.arrowElement=!1,this.elementContents=!1}createElements(){var t=document.createElement("div");t.classList.add("tabulator-arrow"),this.element=document.createElement("div"),this.element.classList.add("tabulator-row"),this.element.classList.add("tabulator-group"),this.element.classList.add("tabulator-group-level-"+this.level),this.element.setAttribute("role","rowgroup"),this.arrowElement=document.createElement("div"),this.arrowElement.classList.add("tabulator-group-toggle"),this.arrowElement.appendChild(t),!1!==this.groupManager.table.options.movableRows&&this.groupManager.table.modExists("moveRow")&&this.groupManager.table.modules.moveRow.initializeGroupHeader(this)}createValueGroups(){var t=this.level+1;this.groupManager.allowedValues&&this.groupManager.allowedValues[t]&&this.groupManager.allowedValues[t].forEach((e=>{this._createGroup(e,t)}))}addBindings(){this.groupManager.table.options.groupToggleElement&&("arrow"==this.groupManager.table.options.groupToggleElement?this.arrowElement:this.element).addEventListener("click",(t=>{"arrow"===this.groupManager.table.options.groupToggleElement&&(t.stopPropagation(),t.stopImmediatePropagation()),setTimeout((()=>{this.toggleVisibility()}))}))}_createGroup(t,e){var i=e+"_"+t,n=new ot(this.groupManager,this,e,t,this.groupManager.groupIDLookups[e].field,this.groupManager.headerGenerator[e]||this.groupManager.headerGenerator[0],!!this.old&&this.old.groups[i]);this.groups[i]=n,this.groupList.push(n)}_addRowToGroup(t){var e=this.level+1;if(this.hasSubGroups){var i=this.groupManager.groupIDLookups[e].func(t.getData()),n=e+"_"+i;this.groupManager.allowedValues&&this.groupManager.allowedValues[e]?this.groups[n]&&this.groups[n].addRow(t):(this.groups[n]||this._createGroup(i,e),this.groups[n].addRow(t))}}_addRow(t){this.rows.push(t),t.modules.group=this}insertRow(t,e,i){var n=this.conformRowData({});t.updateData(n);var o=this.rows.indexOf(e);o>-1?i?this.rows.splice(o+1,0,t):this.rows.splice(o,0,t):i?this.rows.push(t):this.rows.unshift(t),t.modules.group=this,this.groupManager.table.modExists("columnCalcs")&&"table"!=this.groupManager.table.options.columnCalcs&&this.groupManager.table.modules.columnCalcs.recalcGroup(this),this.groupManager.updateGroupRows(!0)}scrollHeader(t){this.arrowElement&&(this.arrowElement.style.marginLeft=t,this.groupList.forEach((function(e){e.scrollHeader(t)})))}getRowIndex(t){}conformRowData(t){return this.field?t[this.field]=this.key:console.warn("Data Conforming Error - Cannot conform row data to match new group as groupBy is a function"),this.parent&&(t=this.parent.conformRowData(t)),t}removeRow(t){var e=this.rows.indexOf(t),i=t.getElement();e>-1&&this.rows.splice(e,1),this.groupManager.table.options.groupValues||this.rows.length?(i.parentNode&&i.parentNode.removeChild(i),this.groupManager.blockRedraw||(this.generateGroupHeaderContents(),this.groupManager.table.modExists("columnCalcs")&&"table"!=this.groupManager.table.options.columnCalcs&&this.groupManager.table.modules.columnCalcs.recalcGroup(this))):(this.parent?this.parent.removeGroup(this):this.groupManager.removeGroup(this),this.groupManager.updateGroupRows(!0))}removeGroup(t){var e,i=t.level+"_"+t.key;this.groups[i]&&(delete this.groups[i],(e=this.groupList.indexOf(t))>-1&&this.groupList.splice(e,1),this.groupList.length||(this.parent?this.parent.removeGroup(this):this.groupManager.removeGroup(this)))}getHeadersAndRows(){var t=[];return t.push(this),this._visSet(),this.calcs.top&&(this.calcs.top.detachElement(),this.calcs.top.deleteCells()),this.calcs.bottom&&(this.calcs.bottom.detachElement(),this.calcs.bottom.deleteCells()),this.visible?this.groupList.length?this.groupList.forEach((function(e){t=t.concat(e.getHeadersAndRows())})):("table"!=this.groupManager.table.options.columnCalcs&&this.groupManager.table.modExists("columnCalcs")&&this.groupManager.table.modules.columnCalcs.hasTopCalcs()&&(this.calcs.top=this.groupManager.table.modules.columnCalcs.generateTopRow(this.rows),t.push(this.calcs.top)),t=t.concat(this.rows),"table"!=this.groupManager.table.options.columnCalcs&&this.groupManager.table.modExists("columnCalcs")&&this.groupManager.table.modules.columnCalcs.hasBottomCalcs()&&(this.calcs.bottom=this.groupManager.table.modules.columnCalcs.generateBottomRow(this.rows),t.push(this.calcs.bottom))):this.groupList.length||"table"==this.groupManager.table.options.columnCalcs||this.groupManager.table.modExists("columnCalcs")&&(this.groupManager.table.modules.columnCalcs.hasTopCalcs()&&this.groupManager.table.options.groupClosedShowCalcs&&(this.calcs.top=this.groupManager.table.modules.columnCalcs.generateTopRow(this.rows),t.push(this.calcs.top)),this.groupManager.table.modules.columnCalcs.hasBottomCalcs()&&this.groupManager.table.options.groupClosedShowCalcs&&(this.calcs.bottom=this.groupManager.table.modules.columnCalcs.generateBottomRow(this.rows),t.push(this.calcs.bottom))),t}getData(t,e){var i=[];return this._visSet(),(!t||t&&this.visible)&&this.rows.forEach((t=>{i.push(t.getData(e||"data"))})),i}getRowCount(){var t=0;return this.groupList.length?this.groupList.forEach((e=>{t+=e.getRowCount()})):t=this.rows.length,t}toggleVisibility(){this.visible?this.hide():this.show()}hide(){this.visible=!1,"basic"!=this.groupManager.table.rowManager.getRenderMode()||this.groupManager.table.options.pagination||(this.element.classList.remove("tabulator-group-visible"),this.groupList.length?this.groupList.forEach((t=>{t.getHeadersAndRows().forEach((t=>{t.detachElement()}))})):this.rows.forEach((t=>{var e=t.getElement();e.parentNode.removeChild(e)}))),this.groupManager.updateGroupRows(!0),this.groupManager.table.externalEvents.dispatch("groupVisibilityChanged",this.getComponent(),!1)}show(){if(this.visible=!0,"basic"!=this.groupManager.table.rowManager.getRenderMode()||this.groupManager.table.options.pagination)this.groupManager.updateGroupRows(!0);else{this.element.classList.add("tabulator-group-visible");var t=this.generateElement();this.groupList.length?this.groupList.forEach((e=>{e.getHeadersAndRows().forEach((e=>{var i=e.getElement();t.parentNode.insertBefore(i,t.nextSibling),e.initialize(),t=i}))})):this.rows.forEach((e=>{var i=e.getElement();t.parentNode.insertBefore(i,t.nextSibling),e.initialize(),t=i})),this.groupManager.updateGroupRows(!0)}this.groupManager.table.externalEvents.dispatch("groupVisibilityChanged",this.getComponent(),!0)}_visSet(){var t=[];"function"==typeof this.visible&&(this.rows.forEach((function(e){t.push(e.getData())})),this.visible=this.visible(this.key,this.getRowCount(),t,this.getComponent()))}getRowGroup(t){var e=!1;return this.groupList.length?this.groupList.forEach((function(i){var n=i.getRowGroup(t);n&&(e=n)})):this.rows.find((function(e){return e===t}))&&(e=this),e}getSubGroups(t){var e=[];return this.groupList.forEach((function(i){e.push(t?i.getComponent():i)})),e}getRows(t,e){var i=[];return e&&this.groupList.length?this.groupList.forEach((n=>{i=i.concat(n.getRows(t,e))})):this.rows.forEach((function(e){i.push(t?e.getComponent():e)})),i}generateGroupHeaderContents(){var t=[];for(this.getRows(!1,!0).forEach((function(e){t.push(e.getData())})),this.elementContents=this.generator(this.key,this.getRowCount(),t,this.getComponent());this.element.firstChild;)this.element.removeChild(this.element.firstChild);"string"==typeof this.elementContents?this.element.innerHTML=this.elementContents:this.element.appendChild(this.elementContents),this.element.insertBefore(this.arrowElement,this.element.firstChild)}getPath(t=[]){return t.unshift(this.key),this.parent&&this.parent.getPath(t),t}getElement(){return this.elementContents?this.element:this.generateElement()}generateElement(){this.addBindings=!1,this._visSet(),this.visible?this.element.classList.add("tabulator-group-visible"):this.element.classList.remove("tabulator-group-visible");for(var t=0;t<this.element.childNodes.length;++t)this.element.childNodes[t].parentNode.removeChild(this.element.childNodes[t]);return this.generateGroupHeaderContents(),this.element}detachElement(){this.element&&this.element.parentNode&&this.element.parentNode.removeChild(this.element)}normalizeHeight(){this.setHeight(this.element.clientHeight)}initialize(t){this.initialized&&!t||(this.normalizeHeight(),this.initialized=!0)}reinitialize(){this.initialized=!1,this.height=0,w.elVisible(this.element)&&this.initialize(!0)}setHeight(t){this.height!=t&&(this.height=t,this.outerHeight=this.element.offsetHeight)}getHeight(){return this.outerHeight}getGroup(){return this}reinitializeHeight(){}calcHeight(){}setCellHeight(){}clearCellHeight(){}deinitializeHeight(){}rendered(){}getComponent(){return this.component||(this.component=new nt(this)),this.component}}class rt extends E{constructor(t){super(t),this.groupIDLookups=!1,this.startOpen=[function(){return!1}],this.headerGenerator=[function(){return""}],this.groupList=[],this.allowedValues=!1,this.groups={},this.displayHandler=this.getRows.bind(this),this.blockRedraw=!1,this.registerTableOption("groupBy",!1),this.registerTableOption("groupStartOpen",!0),this.registerTableOption("groupValues",!1),this.registerTableOption("groupUpdateOnCellEdit",!1),this.registerTableOption("groupHeader",!1),this.registerTableOption("groupHeaderPrint",null),this.registerTableOption("groupHeaderClipboard",null),this.registerTableOption("groupHeaderHtmlOutput",null),this.registerTableOption("groupHeaderDownload",null),this.registerTableOption("groupToggleElement","arrow"),this.registerTableOption("groupClosedShowCalcs",!1),this.registerTableFunction("setGroupBy",this.setGroupBy.bind(this)),this.registerTableFunction("setGroupValues",this.setGroupValues.bind(this)),this.registerTableFunction("setGroupStartOpen",this.setGroupStartOpen.bind(this)),this.registerTableFunction("setGroupHeader",this.setGroupHeader.bind(this)),this.registerTableFunction("getGroups",this.userGetGroups.bind(this)),this.registerTableFunction("getGroupedData",this.userGetGroupedData.bind(this)),this.registerComponentFunction("row","getGroup",this.rowGetGroup.bind(this))}initialize(){this.subscribe("table-destroy",this._blockRedrawing.bind(this)),this.subscribe("rows-wipe",this._blockRedrawing.bind(this)),this.subscribe("rows-wiped",this._restore_redrawing.bind(this)),this.table.options.groupBy&&(this.table.options.groupUpdateOnCellEdit&&(this.subscribe("cell-value-updated",this.cellUpdated.bind(this)),this.subscribe("row-data-changed",this.reassignRowToGroup.bind(this),0)),this.subscribe("table-built",this.configureGroupSetup.bind(this)),this.subscribe("row-deleting",this.rowDeleting.bind(this)),this.subscribe("row-deleted",this.rowsUpdated.bind(this)),this.subscribe("scroll-horizontal",this.scrollHeaders.bind(this)),this.subscribe("rows-wipe",this.wipe.bind(this)),this.subscribe("rows-added",this.rowsUpdated.bind(this)),this.subscribe("row-moving",this.rowMoving.bind(this)),this.subscribe("row-adding-index",this.rowAddingIndex.bind(this)),this.subscribe("rows-sample",this.rowSample.bind(this)),this.subscribe("render-virtual-fill",this.virtualRenderFill.bind(this)),this.registerDisplayHandler(this.displayHandler,20),this.initialized=!0)}_blockRedrawing(){this.blockRedraw=!0}_restore_redrawing(){this.blockRedraw=!1}configureGroupSetup(){if(this.table.options.groupBy){var t=this.table.options.groupBy,e=this.table.options.groupStartOpen,i=this.table.options.groupHeader;this.allowedValues=this.table.options.groupValues,Array.isArray(t)&&Array.isArray(i)&&t.length>i.length&&console.warn("Error creating group headers, groupHeader array is shorter than groupBy array"),this.headerGenerator=[function(){return""}],this.startOpen=[function(){return!1}],this.langBind("groups|item",((t,e)=>{this.headerGenerator[0]=(i,n,o)=>(void 0===i?"":i)+"<span>("+n+" "+(1===n?t:e.groups.items)+")</span>"})),this.groupIDLookups=[],t?this.table.modExists("columnCalcs")&&"table"!=this.table.options.columnCalcs&&"both"!=this.table.options.columnCalcs&&this.table.modules.columnCalcs.removeCalcs():this.table.modExists("columnCalcs")&&"group"!=this.table.options.columnCalcs&&this.table.columnManager.getRealColumns().forEach((t=>{t.definition.topCalc&&this.table.modules.columnCalcs.initializeTopRow(),t.definition.bottomCalc&&this.table.modules.columnCalcs.initializeBottomRow()})),Array.isArray(t)||(t=[t]),t.forEach(((t,e)=>{var i,n;i="function"==typeof t?t:(n=this.table.columnManager.getColumnByField(t))?function(t){return n.getFieldValue(t)}:function(e){return e[t]},this.groupIDLookups.push({field:"function"!=typeof t&&t,func:i,values:!!this.allowedValues&&this.allowedValues[e]})})),e&&(Array.isArray(e)||(e=[e]),e.forEach((t=>{})),this.startOpen=e),i&&(this.headerGenerator=Array.isArray(i)?i:[i])}else this.groupList=[],this.groups={}}rowSample(t,e){if(this.table.options.groupBy){var i=this.getGroups(!1)[0];e.push(i.getRows(!1)[0])}return e}virtualRenderFill(){var t=this.table.rowManager.tableElement,e=this.table.rowManager.getVisibleRows();if(!this.table.options.groupBy)return e;e=e.filter((t=>"group"!==t.type)),t.style.minWidth=e.length?"":this.table.columnManager.getWidth()+"px"}rowAddingIndex(t,e,i){if(this.table.options.groupBy){this.assignRowToGroup(t);var n=t.modules.group.rows;return n.length>1&&(!e||e&&-1==n.indexOf(e)?i?n[0]!==t&&(e=n[0],this.table.rowManager.moveRowInArray(t.modules.group.rows,t,e,!i)):n[n.length-1]!==t&&(e=n[n.length-1],this.table.rowManager.moveRowInArray(t.modules.group.rows,t,e,!i)):this.table.rowManager.moveRowInArray(t.modules.group.rows,t,e,!i)),e}}trackChanges(){this.dispatch("group-changed")}setGroupBy(t){this.table.options.groupBy=t,this.initialized||this.initialize(),this.configureGroupSetup(),!t&&this.table.modExists("columnCalcs")&&!0===this.table.options.columnCalcs&&this.table.modules.columnCalcs.reinitializeCalcs(),this.refreshData(),this.trackChanges()}setGroupValues(t){this.table.options.groupValues=t,this.configureGroupSetup(),this.refreshData(),this.trackChanges()}setGroupStartOpen(t){this.table.options.groupStartOpen=t,this.configureGroupSetup(),this.table.options.groupBy?(this.refreshData(),this.trackChanges()):console.warn("Grouping Update - cant refresh view, no groups have been set")}setGroupHeader(t){this.table.options.groupHeader=t,this.configureGroupSetup(),this.table.options.groupBy?(this.refreshData(),this.trackChanges()):console.warn("Grouping Update - cant refresh view, no groups have been set")}userGetGroups(t){return this.getGroups(!0)}userGetGroupedData(){return this.table.options.groupBy?this.getGroupedData():this.getData()}rowGetGroup(t){return!!t.modules.group&&t.modules.group.getComponent()}rowMoving(t,e,i){if(this.table.options.groupBy){!i&&e instanceof ot&&(e=this.table.rowManager.prevDisplayRow(t)||e);var n=e instanceof ot?e:e.modules.group,o=t instanceof ot?t:t.modules.group;n===o?this.table.rowManager.moveRowInArray(n.rows,t,e,i):(o&&o.removeRow(t),n.insertRow(t,e,i))}}rowDeleting(t){this.table.options.groupBy&&t.modules.group&&t.modules.group.removeRow(t)}rowsUpdated(t){this.table.options.groupBy&&this.updateGroupRows(!0)}cellUpdated(t){this.table.options.groupBy&&this.reassignRowToGroup(t.row)}getRows(t){return this.table.options.groupBy&&this.groupIDLookups.length?(this.dispatchExternal("dataGrouping"),this.generateGroups(t),this.subscribedExternal("dataGrouped")&&this.dispatchExternal("dataGrouped",this.getGroups(!0)),this.updateGroupRows()):t.slice(0)}getGroups(t){var e=[];return this.groupList.forEach((function(i){e.push(t?i.getComponent():i)})),e}getChildGroups(t){var e=[];return t||(t=this),t.groupList.forEach((t=>{t.groupList.length?e=e.concat(this.getChildGroups(t)):e.push(t)})),e}wipe(){this.table.options.groupBy&&(this.groupList.forEach((function(t){t.wipe()})),this.groupList=[],this.groups={})}pullGroupListData(t){var e=[];return t.forEach((t=>{var i={level:0,rowCount:0,headerContent:""},n=[];t.hasSubGroups?(n=this.pullGroupListData(t.groupList),i.level=t.level,i.rowCount=n.length-t.groupList.length,i.headerContent=t.generator(t.key,i.rowCount,t.rows,t),e.push(i),e=e.concat(n)):(i.level=t.level,i.headerContent=t.generator(t.key,t.rows.length,t.rows,t),i.rowCount=t.getRows().length,e.push(i),t.getRows().forEach((t=>{e.push(t.getData("data"))})))})),e}getGroupedData(){return this.pullGroupListData(this.groupList)}getRowGroup(t){var e=!1;return this.options("dataTree")&&(t=this.table.modules.dataTree.getTreeParentRoot(t)),this.groupList.forEach((i=>{var n=i.getRowGroup(t);n&&(e=n)})),e}countGroups(){return this.groupList.length}generateGroups(t){var e=this.groups;this.groups={},this.groupList=[],this.allowedValues&&this.allowedValues[0]?(this.allowedValues[0].forEach((t=>{this.createGroup(t,0,e)})),t.forEach((t=>{this.assignRowToExistingGroup(t,e)}))):t.forEach((t=>{this.assignRowToGroup(t,e)})),Object.values(e).forEach((t=>{t.wipe(!0)}))}createGroup(t,e,i){var n,o=e+"_"+t;i=i||[],n=new ot(this,!1,e,t,this.groupIDLookups[0].field,this.headerGenerator[0],i[o]),this.groups[o]=n,this.groupList.push(n)}assignRowToExistingGroup(t,e){var i="0_"+this.groupIDLookups[0].func(t.getData());this.groups[i]&&this.groups[i].addRow(t)}assignRowToGroup(t,e){var i=this.groupIDLookups[0].func(t.getData()),n=!this.groups["0_"+i];return n&&this.createGroup(i,0,e),this.groups["0_"+i].addRow(t),!n}reassignRowToGroup(t){if("row"===t.type){var e=t.modules.group,i=e.getPath(),n=this.getExpectedPath(t);i.length==n.length&&i.every(((t,e)=>t===n[e]))||(e.removeRow(t),this.assignRowToGroup(t,this.groups),this.refreshData(!0))}}getExpectedPath(t){var e=[],i=t.getData();return this.groupIDLookups.forEach((t=>{e.push(t.func(i))})),e}updateGroupRows(t){var e=[];return this.blockRedraw||(this.groupList.forEach((t=>{e=e.concat(t.getHeadersAndRows())})),t&&this.refreshData(!0)),e}scrollHeaders(t){this.table.options.groupBy&&("virtual"===this.table.options.renderHorizontal&&(t-=this.table.columnManager.renderer.vDomPadLeft),t+="px",this.groupList.forEach((e=>{e.scrollHeader(t)})))}removeGroup(t){var e,i=t.level+"_"+t.key;this.groups[i]&&(delete this.groups[i],(e=this.groupList.indexOf(t))>-1&&this.groupList.splice(e,1))}checkBasicModeGroupHeaderWidth(){var t=this.table.rowManager.tableElement,e=!0;this.table.rowManager.getDisplayRows().forEach(((i,n)=>{this.table.rowManager.styleRow(i,n),t.appendChild(i.getElement()),i.initialize(!0),"group"!==i.type&&(e=!1)})),t.style.minWidth=e?this.table.columnManager.getWidth()+"px":""}}rt.moduleName="groupRows";class at extends E{constructor(t){super(t),this.history=[],this.index=-1,this.registerTableOption("history",!1)}initialize(){this.table.options.history&&(this.subscribe("cell-value-updated",this.cellUpdated.bind(this)),this.subscribe("cell-delete",this.clearComponentHistory.bind(this)),this.subscribe("row-delete",this.rowDeleted.bind(this)),this.subscribe("rows-wipe",this.clear.bind(this)),this.subscribe("row-added",this.rowAdded.bind(this)),this.subscribe("row-move",this.rowMoved.bind(this))),this.registerTableFunction("undo",this.undo.bind(this)),this.registerTableFunction("redo",this.redo.bind(this)),this.registerTableFunction("getHistoryUndoSize",this.getHistoryUndoSize.bind(this)),this.registerTableFunction("getHistoryRedoSize",this.getHistoryRedoSize.bind(this)),this.registerTableFunction("clearHistory",this.clear.bind(this))}rowMoved(t,e,i){this.action("rowMove",t,{posFrom:t.getPosition(),posTo:e.getPosition(),to:e,after:i})}rowAdded(t,e,i,n){this.action("rowAdd",t,{data:e,pos:i,index:n})}rowDeleted(t){var e,i;this.table.options.groupBy?(e=(i=t.getComponent().getGroup()._getSelf().rows).indexOf(t))&&(e=i[e-1]):(e=t.table.rowManager.getRowIndex(t))&&(e=t.table.rowManager.rows[e-1]),this.action("rowDelete",t,{data:t.getData(),pos:!e,index:e})}cellUpdated(t){this.action("cellEdit",t,{oldValue:t.oldValue,newValue:t.value})}clear(){this.history=[],this.index=-1}action(t,e,i){this.history=this.history.slice(0,this.index+1),this.history.push({type:t,component:e,data:i}),this.index++}getHistoryUndoSize(){return this.index+1}getHistoryRedoSize(){return this.history.length-(this.index+1)}clearComponentHistory(t){var e=this.history.findIndex((function(e){return e.component===t}));e>-1&&(this.history.splice(e,1),e<=this.index&&this.index--,this.clearComponentHistory(t))}undo(){if(this.index>-1){let t=this.history[this.index];return at.undoers[t.type].call(this,t),this.index--,this.dispatchExternal("historyUndo",t.type,t.component.getComponent(),t.data),!0}return console.warn("History Undo Error - No more history to undo"),!1}redo(){if(this.history.length-1>this.index){this.index++;let t=this.history[this.index];return at.redoers[t.type].call(this,t),this.dispatchExternal("historyRedo",t.type,t.component.getComponent(),t.data),!0}return console.warn("History Redo Error - No more history to redo"),!1}_rebindRow(t,e){this.history.forEach((function(i){if(i.component instanceof H)i.component===t&&(i.component=e);else if(i.component instanceof S&&i.component.row===t){var n=i.component.column.getField();n&&(i.component=e.getCell(n))}}))}}at.moduleName="history",at.undoers={cellEdit:function(t){t.component.setValueProcessData(t.data.oldValue),t.component.cellRendered()},rowAdd:function(t){t.component.deleteActual()},rowDelete:function(t){var e=this.table.rowManager.addRowActual(t.data.data,t.data.pos,t.data.index);this.table.options.groupBy&&this.table.modExists("groupRows")&&this.table.modules.groupRows.updateGroupRows(!0),this._rebindRow(t.component,e)},rowMove:function(t){var e=t.data.posFrom-t.data.posTo>0;this.table.rowManager.moveRowActual(t.component,this.table.rowManager.getRowFromPosition(t.data.posFrom),e),this.table.rowManager.regenerateRowPositions(),this.table.rowManager.reRenderInPosition()}},at.redoers={cellEdit:function(t){t.component.setValueProcessData(t.data.newValue),t.component.cellRendered()},rowAdd:function(t){var e=this.table.rowManager.addRowActual(t.data.data,t.data.pos,t.data.index);this.table.options.groupBy&&this.table.modExists("groupRows")&&this.table.modules.groupRows.updateGroupRows(!0),this._rebindRow(t.component,e)},rowDelete:function(t){t.component.deleteActual()},rowMove:function(t){this.table.rowManager.moveRowActual(t.component,this.table.rowManager.getRowFromPosition(t.data.posTo),t.data.after),this.table.rowManager.regenerateRowPositions(),this.table.rowManager.reRenderInPosition()}};class lt extends E{constructor(t){super(t),this.fieldIndex=[],this.hasIndex=!1}initialize(){this.tableElementCheck()}tableElementCheck(){this.table.originalElement&&"TABLE"===this.table.originalElement.tagName&&(this.table.originalElement.childNodes.length?this.parseTable():console.warn("Unable to parse data from empty table tag, Tabulator should be initialized on a div tag unless importing data from a table element."))}parseTable(){var t=this.table.originalElement,e=this.table.options,i=t.getElementsByTagName("th"),n=t.getElementsByTagName("tbody")[0],o=[];this.hasIndex=!1,this.dispatchExternal("htmlImporting"),n=n?n.getElementsByTagName("tr"):[],this._extractOptions(t,e),i.length?this._extractHeaders(i,n):this._generateBlankHeaders(i,n);for(var r=0;r<n.length;r++){var a=n[r].getElementsByTagName("td"),l={};this.hasIndex||(l[e.index]=r);for(var s=0;s<a.length;s++){var u=a[s];void 0!==this.fieldIndex[s]&&(l[this.fieldIndex[s]]=u.innerHTML)}o.push(l)}e.data=o,this.dispatchExternal("htmlImported")}_extractOptions(t,e,i){var n=t.attributes,o=i?Object.keys(i):Object.keys(e),r={};for(var a in o.forEach((t=>{r[t.toLowerCase()]=t})),n){var l,s=n[a];s&&"object"==typeof s&&s.name&&0===s.name.indexOf("tabulator-")&&(l=s.name.replace("tabulator-",""),void 0!==r[l]&&(e[r[l]]=this._attribValue(s.value)))}}_attribValue(t){return"true"===t||"false"!==t&&t}_findCol(t){return this.table.options.columns.find((e=>e.title===t))||!1}_extractHeaders(t,e){for(var i=0;i<t.length;i++){var n,o=t[i],r=!1,a=this._findCol(o.textContent);a?r=!0:a={title:o.textContent.trim()},a.field||(a.field=o.textContent.trim().toLowerCase().replaceAll(" ","_")),(n=o.getAttribute("width"))&&!a.width&&(a.width=n),this._extractOptions(o,a,this.table.columnManager.optionsList.registeredDefaults),this.fieldIndex[i]=a.field,a.field==this.table.options.index&&(this.hasIndex=!0),r||this.table.options.columns.push(a)}}_generateBlankHeaders(t,e){for(var i=0;i<t.length;i++){var n=t[i],o={title:"",field:"col"+i};this.fieldIndex[i]=o.field;var r=n.getAttribute("width");r&&(o.width=r),this.table.options.columns.push(o)}}}lt.moduleName="htmlTableImport";var st={csv:function(t){var e=[],i=0,n=0,o=!1;for(let r=0;r<t.length;r++){let a=t[r],l=t[r+1];e[i]||(e[i]=[]),e[i][n]||(e[i][n]=""),'"'==a&&o&&'"'==l?(e[i][n]+=a,r++):'"'!=a?","!=a||o?"\r"!=a||"\n"!=l||o?"\r"!=a&&"\n"!=a||o?e[i][n]+=a:(n=0,i++):(n=0,i++,r++):n++:o=!o}return e},json:function(t){try{return JSON.parse(t)}catch(t){return console.warn("JSON Import Error - File contents is invalid JSON",t),Promise.reject()}},array:function(t){return t}};class ut extends E{constructor(t){super(t),this.registerTableOption("importFormat"),this.registerTableOption("importReader","text")}initialize(){this.registerTableFunction("import",this.importFromFile.bind(this)),this.table.options.importFormat&&(this.subscribe("data-loading",this.loadDataCheck.bind(this),10),this.subscribe("data-load",this.loadData.bind(this),10))}loadDataCheck(t){return this.table.options.importFormat&&("string"==typeof t||Array.isArray(t)&&t.length&&Array.isArray(t))}loadData(t,e,i,n,o){return this.importData(this.lookupImporter(),t).then(this.structureData.bind(this)).catch((t=>(console.error("Import Error:",t||"Unable to import data"),Promise.reject(t))))}lookupImporter(t){var e;return t||(t=this.table.options.importFormat),(e="string"==typeof t?ut.importers[t]:t)||console.error("Import Error - Importer not found:",t),e}importFromFile(t,e){var i=this.lookupImporter(t);if(i)return this.pickFile(e).then(this.importData.bind(this,i)).then(this.structureData.bind(this)).then(this.setData.bind(this)).catch((t=>(console.error("Import Error:",t||"Unable to import file"),Promise.reject(t))))}pickFile(t){return new Promise(((e,i)=>{var n=document.createElement("input");n.type="file",n.accept=t,n.addEventListener("change",(t=>{var o=n.files[0],r=new FileReader;switch(this.table.options.importReader){case"buffer":r.readAsArrayBuffer(o);break;case"binary":r.readAsBinaryString(o);break;case"url":r.readAsDataURL(o);break;default:r.readAsText(o)}r.onload=t=>{e(r.result)},r.onerror=t=>{console.warn("File Load Error - Unable to read file"),i()}})),n.click()}))}importData(t,e){var i=t.call(this.table,e);return i instanceof Promise?i:i?Promise.resolve(i):Promise.reject()}structureData(t){return Array.isArray(t)&&t.length&&Array.isArray(t[0])?this.table.options.autoColumns?this.structureArrayToObject(t):this.structureArrayToColumns(t):t}structureArrayToObject(t){var e=t.shift();return t.map((t=>{var i={};return e.forEach(((e,n)=>{i[e]=t[n]})),i}))}structureArrayToColumns(t){var e=[],i=this.table.getColumns();return i[0]&&t[0][0]&&i[0].getDefinition().title===t[0][0]&&t.shift(),t.forEach((t=>{var n={};t.forEach(((t,e)=>{var o=i[e];o&&(n[o.getField()]=t)})),e.push(n)})),e}setData(t){return this.table.setData(t)}}ut.moduleName="import",ut.importers=st;class ht extends E{constructor(t){super(t),this.eventMap={rowClick:"row-click",rowDblClick:"row-dblclick",rowContext:"row-contextmenu",rowMouseEnter:"row-mouseenter",rowMouseLeave:"row-mouseleave",rowMouseOver:"row-mouseover",rowMouseOut:"row-mouseout",rowMouseMove:"row-mousemove",rowMouseDown:"row-mousedown",rowMouseUp:"row-mouseup",rowTap:"row",rowDblTap:"row",rowTapHold:"row",cellClick:"cell-click",cellDblClick:"cell-dblclick",cellContext:"cell-contextmenu",cellMouseEnter:"cell-mouseenter",cellMouseLeave:"cell-mouseleave",cellMouseOver:"cell-mouseover",cellMouseOut:"cell-mouseout",cellMouseMove:"cell-mousemove",cellMouseDown:"cell-mousedown",cellMouseUp:"cell-mouseup",cellTap:"cell",cellDblTap:"cell",cellTapHold:"cell",headerClick:"column-click",headerDblClick:"column-dblclick",headerContext:"column-contextmenu",headerMouseEnter:"column-mouseenter",headerMouseLeave:"column-mouseleave",headerMouseOver:"column-mouseover",headerMouseOut:"column-mouseout",headerMouseMove:"column-mousemove",headerMouseDown:"column-mousedown",headerMouseUp:"column-mouseup",headerTap:"column",headerDblTap:"column",headerTapHold:"column",groupClick:"group-click",groupDblClick:"group-dblclick",groupContext:"group-contextmenu",groupMouseEnter:"group-mouseenter",groupMouseLeave:"group-mouseleave",groupMouseOver:"group-mouseover",groupMouseOut:"group-mouseout",groupMouseMove:"group-mousemove",groupMouseDown:"group-mousedown",groupMouseUp:"group-mouseup",groupTap:"group",groupDblTap:"group",groupTapHold:"group"},this.subscribers={},this.touchSubscribers={},this.columnSubscribers={},this.touchWatchers={row:{tap:null,tapDbl:null,tapHold:null},cell:{tap:null,tapDbl:null,tapHold:null},column:{tap:null,tapDbl:null,tapHold:null},group:{tap:null,tapDbl:null,tapHold:null}},this.registerColumnOption("headerClick"),this.registerColumnOption("headerDblClick"),this.registerColumnOption("headerContext"),this.registerColumnOption("headerMouseEnter"),this.registerColumnOption("headerMouseLeave"),this.registerColumnOption("headerMouseOver"),this.registerColumnOption("headerMouseOut"),this.registerColumnOption("headerMouseMove"),this.registerColumnOption("headerMouseDown"),this.registerColumnOption("headerMouseUp"),this.registerColumnOption("headerTap"),this.registerColumnOption("headerDblTap"),this.registerColumnOption("headerTapHold"),this.registerColumnOption("cellClick"),this.registerColumnOption("cellDblClick"),this.registerColumnOption("cellContext"),this.registerColumnOption("cellMouseEnter"),this.registerColumnOption("cellMouseLeave"),this.registerColumnOption("cellMouseOver"),this.registerColumnOption("cellMouseOut"),this.registerColumnOption("cellMouseMove"),this.registerColumnOption("cellMouseDown"),this.registerColumnOption("cellMouseUp"),this.registerColumnOption("cellTap"),this.registerColumnOption("cellDblTap"),this.registerColumnOption("cellTapHold")}initialize(){this.initializeExternalEvents(),this.subscribe("column-init",this.initializeColumn.bind(this)),this.subscribe("cell-dblclick",this.cellContentsSelectionFixer.bind(this)),this.subscribe("scroll-horizontal",this.clearTouchWatchers.bind(this)),this.subscribe("scroll-vertical",this.clearTouchWatchers.bind(this))}clearTouchWatchers(){Object.values(this.touchWatchers).forEach((t=>{for(let e in t)t[e]=null}))}cellContentsSelectionFixer(t,e){var i;if(!this.table.modExists("edit")||this.table.modules.edit.currentCell!==e){t.preventDefault();try{document.selection?((i=document.body.createTextRange()).moveToElementText(e.getElement()),i.select()):window.getSelection&&((i=document.createRange()).selectNode(e.getElement()),window.getSelection().removeAllRanges(),window.getSelection().addRange(i))}catch(t){}}}initializeExternalEvents(){for(let t in this.eventMap)this.subscriptionChangeExternal(t,this.subscriptionChanged.bind(this,t))}subscriptionChanged(t,e){e?this.subscribers[t]||(this.eventMap[t].includes("-")?(this.subscribers[t]=this.handle.bind(this,t),this.subscribe(this.eventMap[t],this.subscribers[t])):this.subscribeTouchEvents(t)):this.eventMap[t].includes("-")?!this.subscribers[t]||this.columnSubscribers[t]||this.subscribedExternal(t)||(this.unsubscribe(this.eventMap[t],this.subscribers[t]),delete this.subscribers[t]):this.unsubscribeTouchEvents(t)}subscribeTouchEvents(t){var e=this.eventMap[t];this.touchSubscribers[e+"-touchstart"]||(this.touchSubscribers[e+"-touchstart"]=this.handleTouch.bind(this,e,"start"),this.touchSubscribers[e+"-touchend"]=this.handleTouch.bind(this,e,"end"),this.subscribe(e+"-touchstart",this.touchSubscribers[e+"-touchstart"]),this.subscribe(e+"-touchend",this.touchSubscribers[e+"-touchend"])),this.subscribers[t]=!0}unsubscribeTouchEvents(t){var e=!0,i=this.eventMap[t];if(this.subscribers[t]&&!this.subscribedExternal(t)){delete this.subscribers[t];for(let t in this.eventMap)this.eventMap[t]===i&&this.subscribers[t]&&(e=!1);e&&(this.unsubscribe(i+"-touchstart",this.touchSubscribers[i+"-touchstart"]),this.unsubscribe(i+"-touchend",this.touchSubscribers[i+"-touchend"]),delete this.touchSubscribers[i+"-touchstart"],delete this.touchSubscribers[i+"-touchend"])}}initializeColumn(t){var e=t.definition;for(let i in this.eventMap)e[i]&&(this.subscriptionChanged(i,!0),this.columnSubscribers[i]||(this.columnSubscribers[i]=[]),this.columnSubscribers[i].push(t))}handle(t,e,i){this.dispatchEvent(t,e,i)}handleTouch(t,e,i,n){var o=this.touchWatchers[t];switch("column"===t&&(t="header"),e){case"start":o.tap=!0,clearTimeout(o.tapHold),o.tapHold=setTimeout((()=>{clearTimeout(o.tapHold),o.tapHold=null,o.tap=null,clearTimeout(o.tapDbl),o.tapDbl=null,this.dispatchEvent(t+"TapHold",i,n)}),1e3);break;case"end":o.tap&&(o.tap=null,this.dispatchEvent(t+"Tap",i,n)),o.tapDbl?(clearTimeout(o.tapDbl),o.tapDbl=null,this.dispatchEvent(t+"DblTap",i,n)):o.tapDbl=setTimeout((()=>{clearTimeout(o.tapDbl),o.tapDbl=null}),300),clearTimeout(o.tapHold),o.tapHold=null}}dispatchEvent(t,e,i){var n,o=i.getComponent();this.columnSubscribers[t]&&(i instanceof S?n=i.column.definition[t]:i instanceof I&&(n=i.definition[t]),n&&n(e,o)),this.dispatchExternal(t,e,o)}}ht.moduleName="interaction";class ct extends E{constructor(t){super(t),this.watchKeys=null,this.pressedKeys=null,this.keyupBinding=!1,this.keydownBinding=!1,this.registerTableOption("keybindings",{}),this.registerTableOption("tabEndNewRow",!1)}initialize(){var t=this.table.options.keybindings,e={};this.watchKeys={},this.pressedKeys=[],!1!==t&&(Object.assign(e,ct.bindings),Object.assign(e,t),this.mapBindings(e),this.bindEvents()),this.subscribe("table-destroy",this.clearBindings.bind(this))}mapBindings(t){for(let e in t)ct.actions[e]?t[e]&&("object"!=typeof t[e]&&(t[e]=[t[e]]),t[e].forEach((t=>{(Array.isArray(t)?t:[t]).forEach((t=>{this.mapBinding(e,t)}))}))):console.warn("Key Binding Error - no such action:",e)}mapBinding(t,e){var i={action:ct.actions[t],keys:[],ctrl:!1,shift:!1,meta:!1};e.toString().toLowerCase().split(" ").join("").split("+").forEach((t=>{switch(t){case"ctrl":i.ctrl=!0;break;case"shift":i.shift=!0;break;case"meta":i.meta=!0;break;default:t=isNaN(t)?t.toUpperCase().charCodeAt(0):parseInt(t),i.keys.push(t),this.watchKeys[t]||(this.watchKeys[t]=[]),this.watchKeys[t].push(i)}}))}bindEvents(){var t=this;this.keyupBinding=function(e){var i=e.keyCode,n=t.watchKeys[i];n&&(t.pressedKeys.push(i),n.forEach((function(i){t.checkBinding(e,i)})))},this.keydownBinding=function(e){var i=e.keyCode;if(t.watchKeys[i]){var n=t.pressedKeys.indexOf(i);n>-1&&t.pressedKeys.splice(n,1)}},this.table.element.addEventListener("keydown",this.keyupBinding),this.table.element.addEventListener("keyup",this.keydownBinding)}clearBindings(){this.keyupBinding&&this.table.element.removeEventListener("keydown",this.keyupBinding),this.keydownBinding&&this.table.element.removeEventListener("keyup",this.keydownBinding)}checkBinding(t,e){var i=!0;return t.ctrlKey==e.ctrl&&t.shiftKey==e.shift&&t.metaKey==e.meta&&(e.keys.forEach((t=>{-1==this.pressedKeys.indexOf(t)&&(i=!1)})),i&&e.action.call(this,t),!0)}}ct.moduleName="keybindings",ct.bindings={navPrev:"shift + 9",navNext:9,navUp:38,navDown:40,scrollPageUp:33,scrollPageDown:34,scrollToStart:36,scrollToEnd:35,undo:["ctrl + 90","meta + 90"],redo:["ctrl + 89","meta + 89"],copyToClipboard:["ctrl + 67","meta + 67"]},ct.actions={keyBlock:function(t){t.stopPropagation(),t.preventDefault()},scrollPageUp:function(t){var e=this.table.rowManager,i=e.scrollTop-e.element.clientHeight;t.preventDefault(),e.displayRowsCount&&(i>=0?e.element.scrollTop=i:e.scrollToRow(e.getDisplayRows()[0])),this.table.element.focus()},scrollPageDown:function(t){var e=this.table.rowManager,i=e.scrollTop+e.element.clientHeight,n=e.element.scrollHeight;t.preventDefault(),e.displayRowsCount&&(i<=n?e.element.scrollTop=i:e.scrollToRow(e.getDisplayRows()[e.displayRowsCount-1])),this.table.element.focus()},scrollToStart:function(t){var e=this.table.rowManager;t.preventDefault(),e.displayRowsCount&&e.scrollToRow(e.getDisplayRows()[0]),this.table.element.focus()},scrollToEnd:function(t){var e=this.table.rowManager;t.preventDefault(),e.displayRowsCount&&e.scrollToRow(e.getDisplayRows()[e.displayRowsCount-1]),this.table.element.focus()},navPrev:function(t){this.dispatch("keybinding-nav-prev",t)},navNext:function(t){this.dispatch("keybinding-nav-next",t)},navLeft:function(t){this.dispatch("keybinding-nav-left",t)},navRight:function(t){this.dispatch("keybinding-nav-right",t)},navUp:function(t){this.dispatch("keybinding-nav-up",t)},navDown:function(t){this.dispatch("keybinding-nav-down",t)},undo:function(t){this.table.options.history&&this.table.modExists("history")&&this.table.modExists("edit")&&(this.table.modules.edit.currentCell||(t.preventDefault(),this.table.modules.history.undo()))},redo:function(t){this.table.options.history&&this.table.modExists("history")&&this.table.modExists("edit")&&(this.table.modules.edit.currentCell||(t.preventDefault(),this.table.modules.history.redo()))},copyToClipboard:function(t){this.table.modules.edit.currentCell||this.table.modExists("clipboard",!0)&&this.table.modules.clipboard.copy(!1,!0)}};class dt extends E{constructor(t){super(t),this.menuContainer=null,this.nestedMenuBlock=!1,this.currentComponent=null,this.rootPopup=null,this.columnSubscribers={},this.registerTableOption("menuContainer",void 0),this.registerTableOption("rowContextMenu",!1),this.registerTableOption("rowClickMenu",!1),this.registerTableOption("rowDblClickMenu",!1),this.registerTableOption("groupContextMenu",!1),this.registerTableOption("groupClickMenu",!1),this.registerTableOption("groupDblClickMenu",!1),this.registerColumnOption("headerContextMenu"),this.registerColumnOption("headerClickMenu"),this.registerColumnOption("headerDblClickMenu"),this.registerColumnOption("headerMenu"),this.registerColumnOption("headerMenuIcon"),this.registerColumnOption("contextMenu"),this.registerColumnOption("clickMenu"),this.registerColumnOption("dblClickMenu")}initialize(){this.deprecatedOptionsCheck(),this.initializeRowWatchers(),this.initializeGroupWatchers(),this.subscribe("column-init",this.initializeColumn.bind(this))}deprecatedOptionsCheck(){this.deprecationCheck("menuContainer","popupContainer")||(this.table.options.popupContainer=this.table.options.menuContainer)}initializeRowWatchers(){this.table.options.rowContextMenu&&(this.subscribe("row-contextmenu",this.loadMenuEvent.bind(this,this.table.options.rowContextMenu)),this.table.on("rowTapHold",this.loadMenuEvent.bind(this,this.table.options.rowContextMenu))),this.table.options.rowClickMenu&&this.subscribe("row-click",this.loadMenuEvent.bind(this,this.table.options.rowClickMenu)),this.table.options.rowDblClickMenu&&this.subscribe("row-dblclick",this.loadMenuEvent.bind(this,this.table.options.rowDblClickMenu))}initializeGroupWatchers(){this.table.options.groupContextMenu&&(this.subscribe("group-contextmenu",this.loadMenuEvent.bind(this,this.table.options.groupContextMenu)),this.table.on("groupTapHold",this.loadMenuEvent.bind(this,this.table.options.groupContextMenu))),this.table.options.groupClickMenu&&this.subscribe("group-click",this.loadMenuEvent.bind(this,this.table.options.groupClickMenu)),this.table.options.groupDblClickMenu&&this.subscribe("group-dblclick",this.loadMenuEvent.bind(this,this.table.options.groupDblClickMenu))}initializeColumn(t){var e=t.definition;e.headerContextMenu&&!this.columnSubscribers.headerContextMenu&&(this.columnSubscribers.headerContextMenu=this.loadMenuTableColumnEvent.bind(this,"headerContextMenu"),this.subscribe("column-contextmenu",this.columnSubscribers.headerContextMenu),this.table.on("headerTapHold",this.loadMenuTableColumnEvent.bind(this,"headerContextMenu"))),e.headerClickMenu&&!this.columnSubscribers.headerClickMenu&&(this.columnSubscribers.headerClickMenu=this.loadMenuTableColumnEvent.bind(this,"headerClickMenu"),this.subscribe("column-click",this.columnSubscribers.headerClickMenu)),e.headerDblClickMenu&&!this.columnSubscribers.headerDblClickMenu&&(this.columnSubscribers.headerDblClickMenu=this.loadMenuTableColumnEvent.bind(this,"headerDblClickMenu"),this.subscribe("column-dblclick",this.columnSubscribers.headerDblClickMenu)),e.headerMenu&&this.initializeColumnHeaderMenu(t),e.contextMenu&&!this.columnSubscribers.contextMenu&&(this.columnSubscribers.contextMenu=this.loadMenuTableCellEvent.bind(this,"contextMenu"),this.subscribe("cell-contextmenu",this.columnSubscribers.contextMenu),this.table.on("cellTapHold",this.loadMenuTableCellEvent.bind(this,"contextMenu"))),e.clickMenu&&!this.columnSubscribers.clickMenu&&(this.columnSubscribers.clickMenu=this.loadMenuTableCellEvent.bind(this,"clickMenu"),this.subscribe("cell-click",this.columnSubscribers.clickMenu)),e.dblClickMenu&&!this.columnSubscribers.dblClickMenu&&(this.columnSubscribers.dblClickMenu=this.loadMenuTableCellEvent.bind(this,"dblClickMenu"),this.subscribe("cell-dblclick",this.columnSubscribers.dblClickMenu))}initializeColumnHeaderMenu(t){var e,i=t.definition.headerMenuIcon;(e=document.createElement("span")).classList.add("tabulator-header-popup-button"),i?("function"==typeof i&&(i=i(t.getComponent())),i instanceof HTMLElement?e.appendChild(i):e.innerHTML=i):e.innerHTML="&vellip;",e.addEventListener("click",(e=>{e.stopPropagation(),e.preventDefault(),this.loadMenuEvent(t.definition.headerMenu,e,t)})),t.titleElement.insertBefore(e,t.titleElement.firstChild)}loadMenuTableCellEvent(t,e,i){i._cell&&(i=i._cell),i.column.definition[t]&&this.loadMenuEvent(i.column.definition[t],e,i)}loadMenuTableColumnEvent(t,e,i){i._column&&(i=i._column),i.definition[t]&&this.loadMenuEvent(i.definition[t],e,i)}loadMenuEvent(t,e,i){i._group?i=i._group:i._row&&(i=i._row),t="function"==typeof t?t.call(this.table,e,i.getComponent()):t,this.loadMenu(e,i,t)}loadMenu(t,e,i,n,o){var r,a=!(t instanceof MouseEvent),l=document.createElement("div");if(l.classList.add("tabulator-menu"),a||t.preventDefault(),i&&i.length){if(n)r=o.child(l);else{if(this.nestedMenuBlock){if(this.rootPopup)return}else this.nestedMenuBlock=setTimeout((()=>{this.nestedMenuBlock=!1}),100);this.rootPopup&&this.rootPopup.hide(),this.rootPopup=r=this.popup(l)}i.forEach((t=>{var i=document.createElement("div"),n=t.label,o=t.disabled;t.separator?i.classList.add("tabulator-menu-separator"):(i.classList.add("tabulator-menu-item"),"function"==typeof n&&(n=n.call(this.table,e.getComponent())),n instanceof Node?i.appendChild(n):i.innerHTML=n,"function"==typeof o&&(o=o.call(this.table,e.getComponent())),o?(i.classList.add("tabulator-menu-item-disabled"),i.addEventListener("click",(t=>{t.stopPropagation()}))):t.menu&&t.menu.length?i.addEventListener("click",(n=>{n.stopPropagation(),this.loadMenu(n,e,t.menu,i,r)})):t.action&&i.addEventListener("click",(i=>{t.action(i,e.getComponent())})),t.menu&&t.menu.length&&i.classList.add("tabulator-menu-item-submenu")),l.appendChild(i)})),l.addEventListener("click",(t=>{this.rootPopup&&this.rootPopup.hide()})),r.show(n||t),r===this.rootPopup&&(this.rootPopup.hideOnBlur((()=>{this.rootPopup=null,this.currentComponent&&(this.dispatchExternal("menuClosed",this.currentComponent.getComponent()),this.currentComponent=null)})),this.currentComponent=e,this.dispatchExternal("menuOpened",e.getComponent()))}}}dt.moduleName="menu";class pt extends E{constructor(t){super(t),this.placeholderElement=this.createPlaceholderElement(),this.hoverElement=!1,this.checkTimeout=!1,this.checkPeriod=250,this.moving=!1,this.toCol=!1,this.toColAfter=!1,this.startX=0,this.autoScrollMargin=40,this.autoScrollStep=5,this.autoScrollTimeout=!1,this.touchMove=!1,this.moveHover=this.moveHover.bind(this),this.endMove=this.endMove.bind(this),this.registerTableOption("movableColumns",!1)}createPlaceholderElement(){var t=document.createElement("div");return t.classList.add("tabulator-col"),t.classList.add("tabulator-col-placeholder"),t}initialize(){this.table.options.movableColumns&&this.subscribe("column-init",this.initializeColumn.bind(this))}initializeColumn(t){var e,i=this,n={};t.modules.frozen||t.isGroup||(e=t.getElement(),n.mousemove=function(n){t.parent===i.moving.parent&&((i.touchMove?n.touches[0].pageX:n.pageX)-w.elOffset(e).left+i.table.columnManager.contentsElement.scrollLeft>t.getWidth()/2?i.toCol===t&&i.toColAfter||(e.parentNode.insertBefore(i.placeholderElement,e.nextSibling),i.moveColumn(t,!0)):(i.toCol!==t||i.toColAfter)&&(e.parentNode.insertBefore(i.placeholderElement,e),i.moveColumn(t,!1)))}.bind(i),e.addEventListener("mousedown",(function(e){i.touchMove=!1,1===e.which&&(i.checkTimeout=setTimeout((function(){i.startMove(e,t)}),i.checkPeriod))})),e.addEventListener("mouseup",(function(t){1===t.which&&i.checkTimeout&&clearTimeout(i.checkTimeout)})),i.bindTouchEvents(t)),t.modules.moveColumn=n}bindTouchEvents(t){var e,i,n,o,r,a,l=t.getElement(),s=!1;l.addEventListener("touchstart",(l=>{this.checkTimeout=setTimeout((()=>{this.touchMove=!0,e=t.nextColumn(),n=e?e.getWidth()/2:0,i=t.prevColumn(),o=i?i.getWidth()/2:0,r=0,a=0,s=!1,this.startMove(l,t)}),this.checkPeriod)}),{passive:!0}),l.addEventListener("touchmove",(l=>{var u,h;this.moving&&(this.moveHover(l),s||(s=l.touches[0].pageX),(u=l.touches[0].pageX-s)>0?e&&u-r>n&&(h=e)!==t&&(s=l.touches[0].pageX,h.getElement().parentNode.insertBefore(this.placeholderElement,h.getElement().nextSibling),this.moveColumn(h,!0)):i&&-u-a>o&&(h=i)!==t&&(s=l.touches[0].pageX,h.getElement().parentNode.insertBefore(this.placeholderElement,h.getElement()),this.moveColumn(h,!1)),h&&(e=h.nextColumn(),r=n,n=e?e.getWidth()/2:0,i=h.prevColumn(),a=o,o=i?i.getWidth()/2:0))}),{passive:!0}),l.addEventListener("touchend",(t=>{this.checkTimeout&&clearTimeout(this.checkTimeout),this.moving&&this.endMove(t)}))}startMove(t,e){var i=e.getElement(),n=this.table.columnManager.getContentsElement(),o=this.table.columnManager.getHeadersElement();this.moving=e,this.startX=(this.touchMove?t.touches[0].pageX:t.pageX)-w.elOffset(i).left,this.table.element.classList.add("tabulator-block-select"),this.placeholderElement.style.width=e.getWidth()+"px",this.placeholderElement.style.height=e.getHeight()+"px",i.parentNode.insertBefore(this.placeholderElement,i),i.parentNode.removeChild(i),this.hoverElement=i.cloneNode(!0),this.hoverElement.classList.add("tabulator-moving"),n.appendChild(this.hoverElement),this.hoverElement.style.left="0",this.hoverElement.style.bottom=n.clientHeight-o.offsetHeight+"px",this.touchMove||(this._bindMouseMove(),document.body.addEventListener("mousemove",this.moveHover),document.body.addEventListener("mouseup",this.endMove)),this.moveHover(t)}_bindMouseMove(){this.table.columnManager.columnsByIndex.forEach((function(t){t.modules.moveColumn.mousemove&&t.getElement().addEventListener("mousemove",t.modules.moveColumn.mousemove)}))}_unbindMouseMove(){this.table.columnManager.columnsByIndex.forEach((function(t){t.modules.moveColumn.mousemove&&t.getElement().removeEventListener("mousemove",t.modules.moveColumn.mousemove)}))}moveColumn(t,e){var i=this.moving.getCells();this.toCol=t,this.toColAfter=e,e?t.getCells().forEach((function(t,e){var n=t.getElement(!0);n.parentNode&&i[e]&&n.parentNode.insertBefore(i[e].getElement(),n.nextSibling)})):t.getCells().forEach((function(t,e){var n=t.getElement(!0);n.parentNode&&i[e]&&n.parentNode.insertBefore(i[e].getElement(),n)}))}endMove(t){(1===t.which||this.touchMove)&&(this._unbindMouseMove(),this.placeholderElement.parentNode.insertBefore(this.moving.getElement(),this.placeholderElement.nextSibling),this.placeholderElement.parentNode.removeChild(this.placeholderElement),this.hoverElement.parentNode.removeChild(this.hoverElement),this.table.element.classList.remove("tabulator-block-select"),this.toCol&&this.table.columnManager.moveColumnActual(this.moving,this.toCol,this.toColAfter),this.moving=!1,this.toCol=!1,this.toColAfter=!1,this.touchMove||(document.body.removeEventListener("mousemove",this.moveHover),document.body.removeEventListener("mouseup",this.endMove)))}moveHover(t){var e,i=this.table.columnManager.getContentsElement(),n=i.scrollLeft,o=(this.touchMove?t.touches[0].pageX:t.pageX)-w.elOffset(i).left+n;this.hoverElement.style.left=o-this.startX+"px",o-n<this.autoScrollMargin&&(this.autoScrollTimeout||(this.autoScrollTimeout=setTimeout((()=>{e=Math.max(0,n-5),this.table.rowManager.getElement().scrollLeft=e,this.autoScrollTimeout=!1}),1))),n+i.clientWidth-o<this.autoScrollMargin&&(this.autoScrollTimeout||(this.autoScrollTimeout=setTimeout((()=>{e=Math.min(i.clientWidth,n+5),this.table.rowManager.getElement().scrollLeft=e,this.autoScrollTimeout=!1}),1)))}}pt.moduleName="moveColumn";class bt extends E{constructor(t){super(t),this.placeholderElement=this.createPlaceholderElement(),this.hoverElement=!1,this.checkTimeout=!1,this.checkPeriod=150,this.moving=!1,this.toRow=!1,this.toRowAfter=!1,this.hasHandle=!1,this.startY=0,this.startX=0,this.moveHover=this.moveHover.bind(this),this.endMove=this.endMove.bind(this),this.tableRowDropEvent=!1,this.touchMove=!1,this.connection=!1,this.connectionSelectorsTables=!1,this.connectionSelectorsElements=!1,this.connectionElements=[],this.connections=[],this.connectedTable=!1,this.connectedRow=!1,this.registerTableOption("movableRows",!1),this.registerTableOption("movableRowsConnectedTables",!1),this.registerTableOption("movableRowsConnectedElements",!1),this.registerTableOption("movableRowsSender",!1),this.registerTableOption("movableRowsReceiver","insert"),this.registerColumnOption("rowHandle")}createPlaceholderElement(){var t=document.createElement("div");return t.classList.add("tabulator-row"),t.classList.add("tabulator-row-placeholder"),t}initialize(){this.table.options.movableRows&&(this.connectionSelectorsTables=this.table.options.movableRowsConnectedTables,this.connectionSelectorsElements=this.table.options.movableRowsConnectedElements,this.connection=this.connectionSelectorsTables||this.connectionSelectorsElements,this.subscribe("cell-init",this.initializeCell.bind(this)),this.subscribe("column-init",this.initializeColumn.bind(this)),this.subscribe("row-init",this.initializeRow.bind(this)))}initializeGroupHeader(t){var e=this,i={};i.mouseup=function(i){e.tableRowDrop(i,t)}.bind(e),i.mousemove=function(i){var n;i.pageY-w.elOffset(t.element).top+e.table.rowManager.element.scrollTop>t.getHeight()/2?e.toRow===t&&e.toRowAfter||((n=t.getElement()).parentNode.insertBefore(e.placeholderElement,n.nextSibling),e.moveRow(t,!0)):(e.toRow!==t||e.toRowAfter)&&(n=t.getElement()).previousSibling&&(n.parentNode.insertBefore(e.placeholderElement,n),e.moveRow(t,!1))}.bind(e),t.modules.moveRow=i}initializeRow(t){var e,i=this,n={};n.mouseup=function(e){i.tableRowDrop(e,t)}.bind(i),n.mousemove=function(e){var n=t.getElement();e.pageY-w.elOffset(n).top+i.table.rowManager.element.scrollTop>t.getHeight()/2?i.toRow===t&&i.toRowAfter||(n.parentNode.insertBefore(i.placeholderElement,n.nextSibling),i.moveRow(t,!0)):(i.toRow!==t||i.toRowAfter)&&(n.parentNode.insertBefore(i.placeholderElement,n),i.moveRow(t,!1))}.bind(i),this.hasHandle||((e=t.getElement()).addEventListener("mousedown",(function(e){1===e.which&&(i.checkTimeout=setTimeout((function(){i.startMove(e,t)}),i.checkPeriod))})),e.addEventListener("mouseup",(function(t){1===t.which&&i.checkTimeout&&clearTimeout(i.checkTimeout)})),this.bindTouchEvents(t,t.getElement())),t.modules.moveRow=n}initializeColumn(t){t.definition.rowHandle&&!1!==this.table.options.movableRows&&(this.hasHandle=!0)}initializeCell(t){if(t.column.definition.rowHandle&&!1!==this.table.options.movableRows){var e=this,i=t.getElement(!0);i.addEventListener("mousedown",(function(i){1===i.which&&(e.checkTimeout=setTimeout((function(){e.startMove(i,t.row)}),e.checkPeriod))})),i.addEventListener("mouseup",(function(t){1===t.which&&e.checkTimeout&&clearTimeout(e.checkTimeout)})),this.bindTouchEvents(t.row,i)}}bindTouchEvents(t,e){var i,n,o,r,a,l,s=!1;e.addEventListener("touchstart",(e=>{this.checkTimeout=setTimeout((()=>{this.touchMove=!0,i=t.nextRow(),o=i?i.getHeight()/2:0,n=t.prevRow(),r=n?n.getHeight()/2:0,a=0,l=0,s=!1,this.startMove(e,t)}),this.checkPeriod)}),{passive:!0}),this.moving,this.toRow,this.toRowAfter,e.addEventListener("touchmove",(e=>{var u,h;this.moving&&(e.preventDefault(),this.moveHover(e),s||(s=e.touches[0].pageY),(u=e.touches[0].pageY-s)>0?i&&u-a>o&&(h=i)!==t&&(s=e.touches[0].pageY,h.getElement().parentNode.insertBefore(this.placeholderElement,h.getElement().nextSibling),this.moveRow(h,!0)):n&&-u-l>r&&(h=n)!==t&&(s=e.touches[0].pageY,h.getElement().parentNode.insertBefore(this.placeholderElement,h.getElement()),this.moveRow(h,!1)),h&&(i=h.nextRow(),a=o,o=i?i.getHeight()/2:0,n=h.prevRow(),l=r,r=n?n.getHeight()/2:0))})),e.addEventListener("touchend",(t=>{this.checkTimeout&&clearTimeout(this.checkTimeout),this.moving&&(this.endMove(t),this.touchMove=!1)}))}_bindMouseMove(){this.table.rowManager.getDisplayRows().forEach((t=>{("row"===t.type||"group"===t.type)&&t.modules.moveRow&&t.modules.moveRow.mousemove&&t.getElement().addEventListener("mousemove",t.modules.moveRow.mousemove)}))}_unbindMouseMove(){this.table.rowManager.getDisplayRows().forEach((t=>{("row"===t.type||"group"===t.type)&&t.modules.moveRow&&t.modules.moveRow.mousemove&&t.getElement().removeEventListener("mousemove",t.modules.moveRow.mousemove)}))}startMove(t,e){var i=e.getElement();this.setStartPosition(t,e),this.moving=e,this.table.element.classList.add("tabulator-block-select"),this.placeholderElement.style.width=e.getWidth()+"px",this.placeholderElement.style.height=e.getHeight()+"px",this.connection?(this.table.element.classList.add("tabulator-movingrow-sending"),this.connectToTables(e)):(i.parentNode.insertBefore(this.placeholderElement,i),i.parentNode.removeChild(i)),this.hoverElement=i.cloneNode(!0),this.hoverElement.classList.add("tabulator-moving"),this.connection?(document.body.appendChild(this.hoverElement),this.hoverElement.style.left="0",this.hoverElement.style.top="0",this.hoverElement.style.width=this.table.element.clientWidth+"px",this.hoverElement.style.whiteSpace="nowrap",this.hoverElement.style.overflow="hidden",this.hoverElement.style.pointerEvents="none"):(this.table.rowManager.getTableElement().appendChild(this.hoverElement),this.hoverElement.style.left="0",this.hoverElement.style.top="0",this._bindMouseMove()),document.body.addEventListener("mousemove",this.moveHover),document.body.addEventListener("mouseup",this.endMove),this.dispatchExternal("rowMoving",e.getComponent()),this.moveHover(t)}setStartPosition(t,e){var i,n,o=this.touchMove?t.touches[0].pageX:t.pageX,r=this.touchMove?t.touches[0].pageY:t.pageY;i=e.getElement(),this.connection?(n=i.getBoundingClientRect(),this.startX=n.left-o+window.pageXOffset,this.startY=n.top-r+window.pageYOffset):this.startY=r-i.getBoundingClientRect().top}endMove(t){t&&1!==t.which&&!this.touchMove||(this._unbindMouseMove(),this.connection||(this.placeholderElement.parentNode.insertBefore(this.moving.getElement(),this.placeholderElement.nextSibling),this.placeholderElement.parentNode.removeChild(this.placeholderElement)),this.hoverElement.parentNode.removeChild(this.hoverElement),this.table.element.classList.remove("tabulator-block-select"),this.toRow?this.table.rowManager.moveRow(this.moving,this.toRow,this.toRowAfter):this.dispatchExternal("rowMoveCancelled",this.moving.getComponent()),this.moving=!1,this.toRow=!1,this.toRowAfter=!1,document.body.removeEventListener("mousemove",this.moveHover),document.body.removeEventListener("mouseup",this.endMove),this.connection&&(this.table.element.classList.remove("tabulator-movingrow-sending"),this.disconnectFromTables()))}moveRow(t,e){this.toRow=t,this.toRowAfter=e}moveHover(t){this.connection?this.moveHoverConnections.call(this,t):this.moveHoverTable.call(this,t)}moveHoverTable(t){var e=this.table.rowManager.getElement(),i=e.scrollTop,n=(this.touchMove?t.touches[0].pageY:t.pageY)-e.getBoundingClientRect().top+i;this.hoverElement.style.top=Math.min(n-this.startY,this.table.rowManager.element.scrollHeight-this.hoverElement.offsetHeight)+"px"}moveHoverConnections(t){this.hoverElement.style.left=this.startX+(this.touchMove?t.touches[0].pageX:t.pageX)+"px",this.hoverElement.style.top=this.startY+(this.touchMove?t.touches[0].pageY:t.pageY)+"px"}elementRowDrop(t,e,i){this.dispatchExternal("movableRowsElementDrop",t,e,!!i&&i.getComponent())}connectToTables(t){var e;this.connectionSelectorsTables&&(e=this.commsConnections(this.connectionSelectorsTables),this.dispatchExternal("movableRowsSendingStart",e),this.commsSend(this.connectionSelectorsTables,"moveRow","connect",{row:t})),this.connectionSelectorsElements&&(this.connectionElements=[],Array.isArray(this.connectionSelectorsElements)||(this.connectionSelectorsElements=[this.connectionSelectorsElements]),this.connectionSelectorsElements.forEach((t=>{"string"==typeof t?this.connectionElements=this.connectionElements.concat(Array.prototype.slice.call(document.querySelectorAll(t))):this.connectionElements.push(t)})),this.connectionElements.forEach((t=>{var e=e=>{this.elementRowDrop(e,t,this.moving)};t.addEventListener("mouseup",e),t.tabulatorElementDropEvent=e,t.classList.add("tabulator-movingrow-receiving")})))}disconnectFromTables(){var t;this.connectionSelectorsTables&&(t=this.commsConnections(this.connectionSelectorsTables),this.dispatchExternal("movableRowsSendingStop",t),this.commsSend(this.connectionSelectorsTables,"moveRow","disconnect")),this.connectionElements.forEach((t=>{t.classList.remove("tabulator-movingrow-receiving"),t.removeEventListener("mouseup",t.tabulatorElementDropEvent),delete t.tabulatorElementDropEvent}))}connect(t,e){return this.connectedTable?(console.warn("Move Row Error - Table cannot accept connection, already connected to table:",this.connectedTable),!1):(this.connectedTable=t,this.connectedRow=e,this.table.element.classList.add("tabulator-movingrow-receiving"),this.table.rowManager.getDisplayRows().forEach((t=>{"row"===t.type&&t.modules.moveRow&&t.modules.moveRow.mouseup&&t.getElement().addEventListener("mouseup",t.modules.moveRow.mouseup)})),this.tableRowDropEvent=this.tableRowDrop.bind(this),this.table.element.addEventListener("mouseup",this.tableRowDropEvent),this.dispatchExternal("movableRowsReceivingStart",e,t),!0)}disconnect(t){t===this.connectedTable?(this.connectedTable=!1,this.connectedRow=!1,this.table.element.classList.remove("tabulator-movingrow-receiving"),this.table.rowManager.getDisplayRows().forEach((t=>{"row"===t.type&&t.modules.moveRow&&t.modules.moveRow.mouseup&&t.getElement().removeEventListener("mouseup",t.modules.moveRow.mouseup)})),this.table.element.removeEventListener("mouseup",this.tableRowDropEvent),this.dispatchExternal("movableRowsReceivingStop",t)):console.warn("Move Row Error - trying to disconnect from non connected table")}dropComplete(t,e,i){var n=!1;if(i){switch(typeof this.table.options.movableRowsSender){case"string":n=this.senders[this.table.options.movableRowsSender];break;case"function":n=this.table.options.movableRowsSender}n?n.call(this,this.moving?this.moving.getComponent():void 0,e?e.getComponent():void 0,t):this.table.options.movableRowsSender&&console.warn("Mover Row Error - no matching sender found:",this.table.options.movableRowsSender),this.dispatchExternal("movableRowsSent",this.moving.getComponent(),e?e.getComponent():void 0,t)}else this.dispatchExternal("movableRowsSentFailed",this.moving.getComponent(),e?e.getComponent():void 0,t);this.endMove()}tableRowDrop(t,e){var i=!1,n=!1;switch(t.stopImmediatePropagation(),typeof this.table.options.movableRowsReceiver){case"string":i=this.receivers[this.table.options.movableRowsReceiver];break;case"function":i=this.table.options.movableRowsReceiver}i?n=i.call(this,this.connectedRow.getComponent(),e?e.getComponent():void 0,this.connectedTable):console.warn("Mover Row Error - no matching receiver found:",this.table.options.movableRowsReceiver),n?this.dispatchExternal("movableRowsReceived",this.connectedRow.getComponent(),e?e.getComponent():void 0,this.connectedTable):this.dispatchExternal("movableRowsReceivedFailed",this.connectedRow.getComponent(),e?e.getComponent():void 0,this.connectedTable),this.commsSend(this.connectedTable,"moveRow","dropcomplete",{row:e,success:n})}commsReceived(t,e,i){switch(e){case"connect":return this.connect(t,i.row);case"disconnect":return this.disconnect(t);case"dropcomplete":return this.dropComplete(t,i.row,i.success)}}}bt.prototype.receivers={insert:function(t,e,i){return this.table.addRow(t.getData(),void 0,e),!0},add:function(t,e,i){return this.table.addRow(t.getData()),!0},update:function(t,e,i){return!!e&&(e.update(t.getData()),!0)},replace:function(t,e,i){return!!e&&(this.table.addRow(t.getData(),void 0,e),e.delete(),!0)}},bt.prototype.senders={delete:function(t,e,i){t.delete()}},bt.moduleName="moveRow";class mt extends E{constructor(t){super(t),this.allowedTypes=["","data","edit","clipboard"],this.enabled=!0,this.registerColumnOption("mutator"),this.registerColumnOption("mutatorParams"),this.registerColumnOption("mutatorData"),this.registerColumnOption("mutatorDataParams"),this.registerColumnOption("mutatorEdit"),this.registerColumnOption("mutatorEditParams"),this.registerColumnOption("mutatorClipboard"),this.registerColumnOption("mutatorClipboardParams"),this.registerColumnOption("mutateLink")}initialize(){this.subscribe("cell-value-changing",this.transformCell.bind(this)),this.subscribe("cell-value-changed",this.mutateLink.bind(this)),this.subscribe("column-layout",this.initializeColumn.bind(this)),this.subscribe("row-data-init-before",this.rowDataChanged.bind(this)),this.subscribe("row-data-changing",this.rowDataChanged.bind(this))}rowDataChanged(t,e,i){return this.transformRow(e,"data",i)}initializeColumn(t){var e=!1,i={};this.allowedTypes.forEach((n=>{var o,r="mutator"+(n.charAt(0).toUpperCase()+n.slice(1));t.definition[r]&&(o=this.lookupMutator(t.definition[r]))&&(e=!0,i[r]={mutator:o,params:t.definition[r+"Params"]||{}})})),e&&(t.modules.mutate=i)}lookupMutator(t){var e=!1;switch(typeof t){case"string":mt.mutators[t]?e=mt.mutators[t]:console.warn("Mutator Error - No such mutator found, ignoring: ",t);break;case"function":e=t}return e}transformRow(t,e,i){var n,o="mutator"+(e.charAt(0).toUpperCase()+e.slice(1));return this.enabled&&this.table.columnManager.traverse((r=>{var a,l,s;r.modules.mutate&&(a=r.modules.mutate[o]||r.modules.mutate.mutator||!1)&&(n=r.getFieldValue(void 0!==i?i:t),("data"==e&&!i||void 0!==n)&&(s=r.getComponent(),l="function"==typeof a.params?a.params(n,t,e,s):a.params,r.setFieldValue(t,a.mutator(n,t,e,l,s))))})),t}transformCell(t,e){if(t.column.modules.mutate){var i=t.column.modules.mutate.mutatorEdit||t.column.modules.mutate.mutator||!1,n={};if(i)return n=Object.assign(n,t.row.getData()),t.column.setFieldValue(n,e),i.mutator(e,n,"edit",i.params,t.getComponent())}return e}mutateLink(t){var e=t.column.definition.mutateLink;e&&(Array.isArray(e)||(e=[e]),e.forEach((e=>{var i=t.row.getCell(e);i&&i.setValue(i.getValue(),!0,!0)})))}enable(){this.enabled=!0}disable(){this.enabled=!1}}mt.moduleName="mutator",mt.mutators={};var gt={rows:function(t,e,i,n,o){var r=document.createElement("span"),a=document.createElement("span"),l=document.createElement("span"),s=document.createElement("span"),u=document.createElement("span"),h=document.createElement("span");return this.table.modules.localize.langBind("pagination|counter|showing",(t=>{a.innerHTML=t})),this.table.modules.localize.langBind("pagination|counter|of",(t=>{s.innerHTML=t})),this.table.modules.localize.langBind("pagination|counter|rows",(t=>{h.innerHTML=t})),n?(l.innerHTML=" "+e+"-"+Math.min(e+t-1,n)+" ",u.innerHTML=" "+n+" ",r.appendChild(a),r.appendChild(l),r.appendChild(s),r.appendChild(u),r.appendChild(h)):(l.innerHTML=" 0 ",r.appendChild(a),r.appendChild(l),r.appendChild(h)),r},pages:function(t,e,i,n,o){var r=document.createElement("span"),a=document.createElement("span"),l=document.createElement("span"),s=document.createElement("span"),u=document.createElement("span"),h=document.createElement("span");return this.table.modules.localize.langBind("pagination|counter|showing",(t=>{a.innerHTML=t})),l.innerHTML=" "+i+" ",this.table.modules.localize.langBind("pagination|counter|of",(t=>{s.innerHTML=t})),u.innerHTML=" "+o+" ",this.table.modules.localize.langBind("pagination|counter|pages",(t=>{h.innerHTML=t})),r.appendChild(a),r.appendChild(l),r.appendChild(s),r.appendChild(u),r.appendChild(h),r}};class ft extends E{constructor(t){super(t),this.mode="local",this.progressiveLoad=!1,this.element=null,this.pageCounterElement=null,this.pageCounter=null,this.size=0,this.page=1,this.count=5,this.max=1,this.remoteRowCountEstimate=null,this.initialLoad=!0,this.dataChanging=!1,this.pageSizes=[],this.registerTableOption("pagination",!1),this.registerTableOption("paginationMode","local"),this.registerTableOption("paginationSize",!1),this.registerTableOption("paginationInitialPage",1),this.registerTableOption("paginationCounter",!1),this.registerTableOption("paginationCounterElement",!1),this.registerTableOption("paginationButtonCount",5),this.registerTableOption("paginationSizeSelector",!1),this.registerTableOption("paginationElement",!1),this.registerTableOption("paginationAddRow","page"),this.registerTableOption("progressiveLoad",!1),this.registerTableOption("progressiveLoadDelay",0),this.registerTableOption("progressiveLoadScrollMargin",0),this.registerTableFunction("setMaxPage",this.setMaxPage.bind(this)),this.registerTableFunction("setPage",this.setPage.bind(this)),this.registerTableFunction("setPageToRow",this.userSetPageToRow.bind(this)),this.registerTableFunction("setPageSize",this.userSetPageSize.bind(this)),this.registerTableFunction("getPageSize",this.getPageSize.bind(this)),this.registerTableFunction("previousPage",this.previousPage.bind(this)),this.registerTableFunction("nextPage",this.nextPage.bind(this)),this.registerTableFunction("getPage",this.getPage.bind(this)),this.registerTableFunction("getPageMax",this.getPageMax.bind(this)),this.registerComponentFunction("row","pageTo",this.setPageToRow.bind(this))}initialize(){this.table.options.pagination?(this.subscribe("row-deleted",this.rowsUpdated.bind(this)),this.subscribe("row-added",this.rowsUpdated.bind(this)),this.subscribe("data-processed",this.initialLoadComplete.bind(this)),this.subscribe("table-built",this.calculatePageSizes.bind(this)),this.subscribe("footer-redraw",this.footerRedraw.bind(this)),"page"==this.table.options.paginationAddRow&&this.subscribe("row-adding-position",this.rowAddingPosition.bind(this)),"remote"===this.table.options.paginationMode&&(this.subscribe("data-params",this.remotePageParams.bind(this)),this.subscribe("data-loaded",this._parseRemoteData.bind(this))),this.table.options.progressiveLoad&&console.error("Progressive Load Error - Pagination and progressive load cannot be used at the same time"),this.registerDisplayHandler(this.restOnRenderBefore.bind(this),40),this.registerDisplayHandler(this.getRows.bind(this),50),this.createElements(),this.initializePageCounter(),this.initializePaginator()):this.table.options.progressiveLoad&&(this.subscribe("data-params",this.remotePageParams.bind(this)),this.subscribe("data-loaded",this._parseRemoteData.bind(this)),this.subscribe("table-built",this.calculatePageSizes.bind(this)),this.subscribe("data-processed",this.initialLoadComplete.bind(this)),this.initializeProgressive(this.table.options.progressiveLoad),"scroll"===this.table.options.progressiveLoad&&this.subscribe("scroll-vertical",this.scrollVertical.bind(this)))}rowAddingPosition(t,e){var i,n=this.table.rowManager,o=n.getDisplayRows();return e?o.length?i=o[0]:n.activeRows.length&&(i=n.activeRows[n.activeRows.length-1],e=!1):o.length&&(i=o[o.length-1],e=!(o.length<this.size)),{index:i,top:e}}calculatePageSizes(){var t,e;this.table.options.paginationSize?this.size=this.table.options.paginationSize:((t=document.createElement("div")).classList.add("tabulator-row"),t.style.visibility="hidden",(e=document.createElement("div")).classList.add("tabulator-cell"),e.innerHTML="Page Row Test",t.appendChild(e),this.table.rowManager.getTableElement().appendChild(t),this.size=Math.floor(this.table.rowManager.getElement().clientHeight/t.offsetHeight),this.table.rowManager.getTableElement().removeChild(t)),this.dispatchExternal("pageSizeChanged",this.size),this.generatePageSizeSelectList()}initialLoadComplete(){this.initialLoad=!1}remotePageParams(t,e,i,n){return this.initialLoad||(this.progressiveLoad&&!i||!this.progressiveLoad&&!this.dataChanging)&&this.reset(!0),n.page=this.page,this.size&&(n.size=this.size),n}userSetPageToRow(t){return this.table.options.pagination&&(t=this.rowManager.findRow(t))?this.setPageToRow(t):Promise.reject()}userSetPageSize(t){return!!this.table.options.pagination&&(this.setPageSize(t),this.setPage(1))}scrollVertical(t,e){var i;e||this.table.dataLoader.loading||(i=this.table.rowManager.getElement()).scrollHeight-i.clientHeight-t<(this.table.options.progressiveLoadScrollMargin||2*i.clientHeight)&&this.nextPage().catch((()=>{}))}restOnRenderBefore(t,e){return e||"local"===this.mode&&this.reset(),t}rowsUpdated(){this.refreshData(!0,"all")}createElements(){var t;this.element=document.createElement("span"),this.element.classList.add("tabulator-paginator"),this.pagesElement=document.createElement("span"),this.pagesElement.classList.add("tabulator-pages"),(t=document.createElement("button")).classList.add("tabulator-page"),t.setAttribute("type","button"),t.setAttribute("role","button"),t.setAttribute("aria-label",""),t.setAttribute("title",""),this.firstBut=t.cloneNode(!0),this.firstBut.setAttribute("data-page","first"),this.prevBut=t.cloneNode(!0),this.prevBut.setAttribute("data-page","prev"),this.nextBut=t.cloneNode(!0),this.nextBut.setAttribute("data-page","next"),this.lastBut=t.cloneNode(!0),this.lastBut.setAttribute("data-page","last"),this.table.options.paginationSizeSelector&&(this.pageSizeSelect=document.createElement("select"),this.pageSizeSelect.classList.add("tabulator-page-size"))}generatePageSizeSelectList(){var t=[];if(this.pageSizeSelect){if(Array.isArray(this.table.options.paginationSizeSelector))t=this.table.options.paginationSizeSelector,this.pageSizes=t,-1==this.pageSizes.indexOf(this.size)&&t.unshift(this.size);else if(-1==this.pageSizes.indexOf(this.size)){t=[];for(let e=1;e<5;e++)t.push(this.size*e);this.pageSizes=t}else t=this.pageSizes;for(;this.pageSizeSelect.firstChild;)this.pageSizeSelect.removeChild(this.pageSizeSelect.firstChild);t.forEach((t=>{var e=document.createElement("option");e.value=t,!0===t?this.langBind("pagination|all",(function(t){e.innerHTML=t})):e.innerHTML=t,this.pageSizeSelect.appendChild(e)})),this.pageSizeSelect.value=this.size}}initializePageCounter(){var t=this.table.options.paginationCounter,e=null;t&&((e="function"==typeof t?t:ft.pageCounters[t])?(this.pageCounter=e,this.pageCounterElement=document.createElement("span"),this.pageCounterElement.classList.add("tabulator-page-counter")):console.warn("Pagination Error - No such page counter found: ",t))}initializePaginator(t){var e,i;t||(this.langBind("pagination|first",(t=>{this.firstBut.innerHTML=t})),this.langBind("pagination|first_title",(t=>{this.firstBut.setAttribute("aria-label",t),this.firstBut.setAttribute("title",t)})),this.langBind("pagination|prev",(t=>{this.prevBut.innerHTML=t})),this.langBind("pagination|prev_title",(t=>{this.prevBut.setAttribute("aria-label",t),this.prevBut.setAttribute("title",t)})),this.langBind("pagination|next",(t=>{this.nextBut.innerHTML=t})),this.langBind("pagination|next_title",(t=>{this.nextBut.setAttribute("aria-label",t),this.nextBut.setAttribute("title",t)})),this.langBind("pagination|last",(t=>{this.lastBut.innerHTML=t})),this.langBind("pagination|last_title",(t=>{this.lastBut.setAttribute("aria-label",t),this.lastBut.setAttribute("title",t)})),this.firstBut.addEventListener("click",(()=>{this.setPage(1)})),this.prevBut.addEventListener("click",(()=>{this.previousPage()})),this.nextBut.addEventListener("click",(()=>{this.nextPage()})),this.lastBut.addEventListener("click",(()=>{this.setPage(this.max)})),this.table.options.paginationElement&&(this.element=this.table.options.paginationElement),this.pageSizeSelect&&(e=document.createElement("label"),this.langBind("pagination|page_size",(t=>{this.pageSizeSelect.setAttribute("aria-label",t),this.pageSizeSelect.setAttribute("title",t),e.innerHTML=t})),this.element.appendChild(e),this.element.appendChild(this.pageSizeSelect),this.pageSizeSelect.addEventListener("change",(t=>{this.setPageSize("true"==this.pageSizeSelect.value||this.pageSizeSelect.value),this.setPage(1)}))),this.element.appendChild(this.firstBut),this.element.appendChild(this.prevBut),this.element.appendChild(this.pagesElement),this.element.appendChild(this.nextBut),this.element.appendChild(this.lastBut),this.table.options.paginationElement||(this.table.options.paginationCounter&&(this.table.options.paginationCounterElement?this.table.options.paginationCounterElement instanceof HTMLElement?this.table.options.paginationCounterElement.appendChild(this.pageCounterElement):"string"==typeof this.table.options.paginationCounterElement&&((i=document.querySelector(this.table.options.paginationCounterElement))?i.appendChild(this.pageCounterElement):console.warn("Pagination Error - Unable to find element matching paginationCounterElement selector:",this.table.options.paginationCounterElement)):this.footerAppend(this.pageCounterElement)),this.footerAppend(this.element)),this.page=this.table.options.paginationInitialPage,this.count=this.table.options.paginationButtonCount),this.mode=this.table.options.paginationMode}initializeProgressive(t){this.initializePaginator(!0),this.mode="progressive_"+t,this.progressiveLoad=!0}trackChanges(){this.dispatch("page-changed")}setMaxRows(t){this.max=t?!0===this.size?1:Math.ceil(t/this.size):1,this.page>this.max&&(this.page=this.max)}reset(t){this.initialLoad||("local"==this.mode||t)&&(this.page=1,this.trackChanges())}setMaxPage(t){t=parseInt(t),this.max=t||1,this.page>this.max&&(this.page=this.max,this.trigger())}setPage(t){switch(t){case"first":return this.setPage(1);case"prev":return this.previousPage();case"next":return this.nextPage();case"last":return this.setPage(this.max)}return(t=parseInt(t))>0&&t<=this.max||"local"!==this.mode?(this.page=t,this.trackChanges(),this.trigger()):(console.warn("Pagination Error - Requested page is out of range of 1 - "+this.max+":",t),Promise.reject())}setPageToRow(t){var e=this.displayRows(-1).indexOf(t);if(e>-1){var i=!0===this.size?1:Math.ceil((e+1)/this.size);return this.setPage(i)}return console.warn("Pagination Error - Requested row is not visible"),Promise.reject()}setPageSize(t){!0!==t&&(t=parseInt(t)),t>0&&(this.size=t,this.dispatchExternal("pageSizeChanged",t)),this.pageSizeSelect&&this.generatePageSizeSelectList(),this.trackChanges()}_setPageCounter(t,e,i){var n;if(this.pageCounter)switch("remote"===this.mode&&(e=this.size,i=(this.page-1)*this.size+1,t=this.remoteRowCountEstimate),typeof(n=this.pageCounter.call(this,e,i,this.page,t,this.max))){case"object":if(n instanceof Node){for(;this.pageCounterElement.firstChild;)this.pageCounterElement.removeChild(this.pageCounterElement.firstChild);this.pageCounterElement.appendChild(n)}else this.pageCounterElement.innerHTML="",null!=n&&console.warn("Page Counter Error - Page Counter has returned a type of object, the only valid page counter object return is an instance of Node, the page counter returned:",n);break;case"undefined":this.pageCounterElement.innerHTML="";break;default:this.pageCounterElement.innerHTML=n}}_setPageButtons(){let t=Math.floor((this.count-1)/2),e=Math.ceil((this.count-1)/2),i=this.max-this.page+t+1<this.count?this.max-this.count+1:Math.max(this.page-t,1),n=this.page<=e?Math.min(this.count,this.max):Math.min(this.page+e,this.max);for(;this.pagesElement.firstChild;)this.pagesElement.removeChild(this.pagesElement.firstChild);1==this.page?(this.firstBut.disabled=!0,this.prevBut.disabled=!0):(this.firstBut.disabled=!1,this.prevBut.disabled=!1),this.page==this.max?(this.lastBut.disabled=!0,this.nextBut.disabled=!0):(this.lastBut.disabled=!1,this.nextBut.disabled=!1);for(let t=i;t<=n;t++)t>0&&t<=this.max&&this.pagesElement.appendChild(this._generatePageButton(t));this.footerRedraw()}_generatePageButton(t){var e=document.createElement("button");return e.classList.add("tabulator-page"),t==this.page&&e.classList.add("active"),e.setAttribute("type","button"),e.setAttribute("role","button"),this.langBind("pagination|page_title",(i=>{e.setAttribute("aria-label",i+" "+t),e.setAttribute("title",i+" "+t)})),e.setAttribute("data-page",t),e.textContent=t,e.addEventListener("click",(e=>{this.setPage(t)})),e}previousPage(){return this.page>1?(this.page--,this.trackChanges(),this.trigger()):(console.warn("Pagination Error - Previous page would be less than page 1:",0),Promise.reject())}nextPage(){return this.page<this.max?(this.page++,this.trackChanges(),this.trigger()):(this.progressiveLoad||console.warn("Pagination Error - Next page would be greater than maximum page of "+this.max+":",this.max+1),Promise.reject())}getPage(){return this.page}getPageMax(){return this.max}getPageSize(t){return this.size}getMode(){return this.mode}getRows(t){var e,i,n,o,r=0,a=t.filter((t=>"row"===t.type));if("local"==this.mode){e=[],this.setMaxRows(t.length),!0===this.size?(i=0,n=t.length):n=(i=this.size*(this.page-1))+parseInt(this.size),this._setPageButtons();for(let a=i;a<n;a++){let i=t[a];i&&(e.push(i),"row"===i.type&&(o||(o=i),r++))}return this._setPageCounter(a.length,r,o?a.indexOf(o)+1:0),e}return this._setPageButtons(),this._setPageCounter(a.length),t.slice(0)}trigger(){var t;switch(this.mode){case"local":return t=this.table.rowManager.scrollLeft,this.refreshData(),this.table.rowManager.scrollHorizontal(t),this.dispatchExternal("pageLoaded",this.getPage()),Promise.resolve();case"remote":return this.dataChanging=!0,this.reloadData(null).finally((()=>{this.dataChanging=!1}));case"progressive_load":case"progressive_scroll":return this.reloadData(null,!0);default:return console.warn("Pagination Error - no such pagination mode:",this.mode),Promise.reject()}}_parseRemoteData(t){var e;if(void 0===t.last_page&&console.warn("Remote Pagination Error - Server response missing '"+(this.options("dataReceiveParams").last_page||"last_page")+"' property"),t.data){if(this.max=parseInt(t.last_page)||1,this.remoteRowCountEstimate=void 0!==t.last_row?t.last_row:t.last_page*this.size-(this.page==t.last_page?this.size-t.data.length:0),this.progressiveLoad){switch(this.mode){case"progressive_load":1==this.page?this.table.rowManager.setData(t.data,!1,1==this.page):this.table.rowManager.addRows(t.data),this.page<this.max&&setTimeout((()=>{this.nextPage()}),this.table.options.progressiveLoadDelay);break;case"progressive_scroll":t=1===this.page?t.data:this.table.rowManager.getData().concat(t.data),this.table.rowManager.setData(t,1!==this.page,1==this.page),e=this.table.options.progressiveLoadScrollMargin||2*this.table.rowManager.element.clientHeight,this.table.rowManager.element.scrollHeight<=this.table.rowManager.element.clientHeight+e&&this.page<this.max&&setTimeout((()=>{this.nextPage()}))}return!1}this.dispatchExternal("pageLoaded",this.getPage())}else console.warn("Remote Pagination Error - Server response missing '"+(this.options("dataReceiveParams").data||"data")+"' property");return t.data}footerRedraw(){var t=this.table.footerManager.containerElement;Math.ceil(t.clientWidth)-t.scrollWidth<0?this.pagesElement.style.display="none":(this.pagesElement.style.display="",Math.ceil(t.clientWidth)-t.scrollWidth<0&&(this.pagesElement.style.display="none"))}}ft.moduleName="page",ft.pageCounters=gt;var At={local:function(t,e){var i=localStorage.getItem(t+"-"+e);return!!i&&JSON.parse(i)},cookie:function(t,e){var i,n,o=document.cookie,r=t+"-"+e,a=o.indexOf(r+"=");return a>-1&&((i=(o=o.slice(a)).indexOf(";"))>-1&&(o=o.slice(0,i)),n=o.replace(r+"=","")),!!n&&JSON.parse(n)}},vt={local:function(t,e,i){localStorage.setItem(t+"-"+e,JSON.stringify(i))},cookie:function(t,e,i){var n=new Date;n.setDate(n.getDate()+1e4),document.cookie=t+"-"+e+"="+JSON.stringify(i)+"; expires="+n.toUTCString()}};class wt extends E{constructor(t){super(t),this.mode="",this.id="",this.defWatcherBlock=!1,this.config={},this.readFunc=!1,this.writeFunc=!1,this.registerTableOption("persistence",!1),this.registerTableOption("persistenceID",""),this.registerTableOption("persistenceMode",!0),this.registerTableOption("persistenceReaderFunc",!1),this.registerTableOption("persistenceWriterFunc",!1)}localStorageTest(){var t="_tabulator_test";try{return window.localStorage.setItem(t,t),window.localStorage.removeItem(t),!0}catch(t){return!1}}initialize(){if(this.table.options.persistence){var t,e=this.table.options.persistenceMode,i=this.table.options.persistenceID;this.mode=!0!==e?e:this.localStorageTest()?"local":"cookie",this.table.options.persistenceReaderFunc?"function"==typeof this.table.options.persistenceReaderFunc?this.readFunc=this.table.options.persistenceReaderFunc:wt.readers[this.table.options.persistenceReaderFunc]?this.readFunc=wt.readers[this.table.options.persistenceReaderFunc]:console.warn("Persistence Read Error - invalid reader set",this.table.options.persistenceReaderFunc):wt.readers[this.mode]?this.readFunc=wt.readers[this.mode]:console.warn("Persistence Read Error - invalid reader set",this.mode),this.table.options.persistenceWriterFunc?"function"==typeof this.table.options.persistenceWriterFunc?this.writeFunc=this.table.options.persistenceWriterFunc:wt.writers[this.table.options.persistenceWriterFunc]?this.writeFunc=wt.writers[this.table.options.persistenceWriterFunc]:console.warn("Persistence Write Error - invalid reader set",this.table.options.persistenceWriterFunc):wt.writers[this.mode]?this.writeFunc=wt.writers[this.mode]:console.warn("Persistence Write Error - invalid writer set",this.mode),this.id="tabulator-"+(i||this.table.element.getAttribute("id")||""),this.config={sort:!0===this.table.options.persistence||this.table.options.persistence.sort,filter:!0===this.table.options.persistence||this.table.options.persistence.filter,headerFilter:!0===this.table.options.persistence||this.table.options.persistence.headerFilter,group:!0===this.table.options.persistence||this.table.options.persistence.group,page:!0===this.table.options.persistence||this.table.options.persistence.page,columns:!0===this.table.options.persistence?["title","width","visible"]:this.table.options.persistence.columns},this.config.page&&(t=this.retrieveData("page"))&&(void 0===t.paginationSize||!0!==this.config.page&&!this.config.page.size||(this.table.options.paginationSize=t.paginationSize),void 0===t.paginationInitialPage||!0!==this.config.page&&!this.config.page.page||(this.table.options.paginationInitialPage=t.paginationInitialPage)),this.config.group&&(t=this.retrieveData("group"))&&(void 0===t.groupBy||!0!==this.config.group&&!this.config.group.groupBy||(this.table.options.groupBy=t.groupBy),void 0===t.groupStartOpen||!0!==this.config.group&&!this.config.group.groupStartOpen||(this.table.options.groupStartOpen=t.groupStartOpen),void 0===t.groupHeader||!0!==this.config.group&&!this.config.group.groupHeader||(this.table.options.groupHeader=t.groupHeader)),this.config.columns&&(this.table.options.columns=this.load("columns",this.table.options.columns),this.subscribe("column-init",this.initializeColumn.bind(this)),this.subscribe("column-show",this.save.bind(this,"columns")),this.subscribe("column-hide",this.save.bind(this,"columns")),this.subscribe("column-moved",this.save.bind(this,"columns"))),this.subscribe("table-built",this.tableBuilt.bind(this),0),this.subscribe("table-redraw",this.tableRedraw.bind(this)),this.subscribe("filter-changed",this.eventSave.bind(this,"filter")),this.subscribe("filter-changed",this.eventSave.bind(this,"headerFilter")),this.subscribe("sort-changed",this.eventSave.bind(this,"sort")),this.subscribe("group-changed",this.eventSave.bind(this,"group")),this.subscribe("page-changed",this.eventSave.bind(this,"page")),this.subscribe("column-resized",this.eventSave.bind(this,"columns")),this.subscribe("column-width",this.eventSave.bind(this,"columns")),this.subscribe("layout-refreshed",this.eventSave.bind(this,"columns"))}this.registerTableFunction("getColumnLayout",this.getColumnLayout.bind(this)),this.registerTableFunction("setColumnLayout",this.setColumnLayout.bind(this))}eventSave(t){this.config[t]&&this.save(t)}tableBuilt(){var t,e,i;this.config.sort&&0==!(t=this.load("sort"))&&(this.table.options.initialSort=t),this.config.filter&&0==!(e=this.load("filter"))&&(this.table.options.initialFilter=e),this.config.headerFilter&&0==!(i=this.load("headerFilter"))&&(this.table.options.initialHeaderFilter=i)}tableRedraw(t){t&&this.config.columns&&this.save("columns")}getColumnLayout(){return this.parseColumns(this.table.columnManager.getColumns())}setColumnLayout(t){return this.table.columnManager.setColumns(this.mergeDefinition(this.table.options.columns,t)),!0}initializeColumn(t){var e;this.config.columns&&(this.defWatcherBlock=!0,e=t.getDefinition(),(!0===this.config.columns?Object.keys(e):this.config.columns).forEach((t=>{var i=Object.getOwnPropertyDescriptor(e,t),n=e[t];i&&Object.defineProperty(e,t,{set:t=>{n=t,this.defWatcherBlock||this.save("columns"),i.set&&i.set(t)},get:()=>(i.get&&i.get(),n)})})),this.defWatcherBlock=!1)}load(t,e){var i=this.retrieveData(t);return e&&(i=i?this.mergeDefinition(e,i):e),i}retrieveData(t){return!!this.readFunc&&this.readFunc(this.id,t)}mergeDefinition(t,e){var i=[];return(e=e||[]).forEach(((e,n)=>{var o,r=this._findColumn(t,e);r&&(!0===this.config.columns||null==this.config.columns?(o=Object.keys(r)).push("width"):o=this.config.columns,o.forEach((t=>{"columns"!==t&&void 0!==e[t]&&(r[t]=e[t])})),r.columns&&(r.columns=this.mergeDefinition(r.columns,e.columns)),i.push(r))})),t.forEach(((t,n)=>{this._findColumn(e,t)||(i.length>n?i.splice(n,0,t):i.push(t))})),i}_findColumn(t,e){var i=e.columns?"group":e.field?"field":"object";return t.find((function(t){switch(i){case"group":return t.title===e.title&&t.columns.length===e.columns.length;case"field":return t.field===e.field;case"object":return t===e}}))}save(t){var e={};switch(t){case"columns":e=this.parseColumns(this.table.columnManager.getColumns());break;case"filter":e=this.table.modules.filter.getFilters();break;case"headerFilter":e=this.table.modules.filter.getHeaderFilters();break;case"sort":e=this.validateSorters(this.table.modules.sort.getSort());break;case"group":e=this.getGroupConfig();break;case"page":e=this.getPageConfig()}this.writeFunc&&this.writeFunc(this.id,t,e)}validateSorters(t){return t.forEach((function(t){t.column=t.field,delete t.field})),t}getGroupConfig(){var t={};return this.config.group&&((!0===this.config.group||this.config.group.groupBy)&&(t.groupBy=this.table.options.groupBy),(!0===this.config.group||this.config.group.groupStartOpen)&&(t.groupStartOpen=this.table.options.groupStartOpen),(!0===this.config.group||this.config.group.groupHeader)&&(t.groupHeader=this.table.options.groupHeader)),t}getPageConfig(){var t={};return this.config.page&&((!0===this.config.page||this.config.page.size)&&(t.paginationSize=this.table.modules.page.getPageSize()),(!0===this.config.page||this.config.page.page)&&(t.paginationInitialPage=this.table.modules.page.getPage())),t}parseColumns(t){var e=[],i=["headerContextMenu","headerMenu","contextMenu","clickMenu"];return t.forEach((t=>{var n,o={},r=t.getDefinition();t.isGroup?(o.title=r.title,o.columns=this.parseColumns(t.getColumns())):(o.field=t.getField(),!0===this.config.columns||null==this.config.columns?((n=Object.keys(r)).push("width"),n.push("visible")):n=this.config.columns,n.forEach((e=>{switch(e){case"width":o.width=t.getWidth();break;case"visible":o.visible=t.visible;break;default:"function"!=typeof r[e]&&-1===i.indexOf(e)&&(o[e]=r[e])}}))),e.push(o)})),e}}wt.moduleName="persistence",wt.moduleInitOrder=-10,wt.readers=At,wt.writers=vt;class Ct extends E{constructor(t){super(t),this.columnSubscribers={},this.registerTableOption("rowContextPopup",!1),this.registerTableOption("rowClickPopup",!1),this.registerTableOption("rowDblClickPopup",!1),this.registerTableOption("groupContextPopup",!1),this.registerTableOption("groupClickPopup",!1),this.registerTableOption("groupDblClickPopup",!1),this.registerColumnOption("headerContextPopup"),this.registerColumnOption("headerClickPopup"),this.registerColumnOption("headerDblClickPopup"),this.registerColumnOption("headerPopup"),this.registerColumnOption("headerPopupIcon"),this.registerColumnOption("contextPopup"),this.registerColumnOption("clickPopup"),this.registerColumnOption("dblClickPopup"),this.registerComponentFunction("cell","popup",this._componentPopupCall.bind(this)),this.registerComponentFunction("column","popup",this._componentPopupCall.bind(this)),this.registerComponentFunction("row","popup",this._componentPopupCall.bind(this)),this.registerComponentFunction("group","popup",this._componentPopupCall.bind(this))}initialize(){this.initializeRowWatchers(),this.initializeGroupWatchers(),this.subscribe("column-init",this.initializeColumn.bind(this))}_componentPopupCall(t,e,i){this.loadPopupEvent(e,null,t,i)}initializeRowWatchers(){this.table.options.rowContextPopup&&(this.subscribe("row-contextmenu",this.loadPopupEvent.bind(this,this.table.options.rowContextPopup)),this.table.on("rowTapHold",this.loadPopupEvent.bind(this,this.table.options.rowContextPopup))),this.table.options.rowClickPopup&&this.subscribe("row-click",this.loadPopupEvent.bind(this,this.table.options.rowClickPopup)),this.table.options.rowDblClickPopup&&this.subscribe("row-dblclick",this.loadPopupEvent.bind(this,this.table.options.rowDblClickPopup))}initializeGroupWatchers(){this.table.options.groupContextPopup&&(this.subscribe("group-contextmenu",this.loadPopupEvent.bind(this,this.table.options.groupContextPopup)),this.table.on("groupTapHold",this.loadPopupEvent.bind(this,this.table.options.groupContextPopup))),this.table.options.groupClickPopup&&this.subscribe("group-click",this.loadPopupEvent.bind(this,this.table.options.groupClickPopup)),this.table.options.groupDblClickPopup&&this.subscribe("group-dblclick",this.loadPopupEvent.bind(this,this.table.options.groupDblClickPopup))}initializeColumn(t){var e=t.definition;e.headerContextPopup&&!this.columnSubscribers.headerContextPopup&&(this.columnSubscribers.headerContextPopup=this.loadPopupTableColumnEvent.bind(this,"headerContextPopup"),this.subscribe("column-contextmenu",this.columnSubscribers.headerContextPopup),this.table.on("headerTapHold",this.loadPopupTableColumnEvent.bind(this,"headerContextPopup"))),e.headerClickPopup&&!this.columnSubscribers.headerClickPopup&&(this.columnSubscribers.headerClickPopup=this.loadPopupTableColumnEvent.bind(this,"headerClickPopup"),this.subscribe("column-click",this.columnSubscribers.headerClickPopup)),e.headerDblClickPopup&&!this.columnSubscribers.headerDblClickPopup&&(this.columnSubscribers.headerDblClickPopup=this.loadPopupTableColumnEvent.bind(this,"headerDblClickPopup"),this.subscribe("column-dblclick",this.columnSubscribers.headerDblClickPopup)),e.headerPopup&&this.initializeColumnHeaderPopup(t),e.contextPopup&&!this.columnSubscribers.contextPopup&&(this.columnSubscribers.contextPopup=this.loadPopupTableCellEvent.bind(this,"contextPopup"),this.subscribe("cell-contextmenu",this.columnSubscribers.contextPopup),this.table.on("cellTapHold",this.loadPopupTableCellEvent.bind(this,"contextPopup"))),e.clickPopup&&!this.columnSubscribers.clickPopup&&(this.columnSubscribers.clickPopup=this.loadPopupTableCellEvent.bind(this,"clickPopup"),this.subscribe("cell-click",this.columnSubscribers.clickPopup)),e.dblClickPopup&&!this.columnSubscribers.dblClickPopup&&(this.columnSubscribers.dblClickPopup=this.loadPopupTableCellEvent.bind(this,"dblClickPopup"),this.subscribe("cell-click",this.columnSubscribers.dblClickPopup))}initializeColumnHeaderPopup(t){var e,i=t.definition.headerPopupIcon;(e=document.createElement("span")).classList.add("tabulator-header-popup-button"),i?("function"==typeof i&&(i=i(t.getComponent())),i instanceof HTMLElement?e.appendChild(i):e.innerHTML=i):e.innerHTML="&vellip;",e.addEventListener("click",(e=>{e.stopPropagation(),e.preventDefault(),this.loadPopupEvent(t.definition.headerPopup,e,t)})),t.titleElement.insertBefore(e,t.titleElement.firstChild)}loadPopupTableCellEvent(t,e,i){i._cell&&(i=i._cell),i.column.definition[t]&&this.loadPopupEvent(i.column.definition[t],e,i)}loadPopupTableColumnEvent(t,e,i){i._column&&(i=i._column),i.definition[t]&&this.loadPopupEvent(i.definition[t],e,i)}loadPopupEvent(t,e,i,n){var o;i._group?i=i._group:i._row&&(i=i._row),t="function"==typeof t?t.call(this.table,e,i.getComponent(),(function(t){o=t})):t,this.loadPopup(e,i,t,o,n)}loadPopup(t,e,i,n,o){var r,a,l=!(t instanceof MouseEvent);i instanceof HTMLElement?r=i:(r=document.createElement("div")).innerHTML=i,r.classList.add("tabulator-popup"),r.addEventListener("click",(t=>{t.stopPropagation()})),l||t.preventDefault(),a=this.popup(r),"function"==typeof n&&a.renderCallback(n),t?a.show(t):a.show(e.getElement(),o||"center"),a.hideOnBlur((()=>{this.dispatchExternal("popupClosed",e.getComponent())})),this.dispatchExternal("popupOpened",e.getComponent())}}Ct.moduleName="popup";class Et extends E{constructor(t){super(t),this.element=!1,this.manualBlock=!1,this.beforeprintEventHandler=null,this.afterprintEventHandler=null,this.registerTableOption("printAsHtml",!1),this.registerTableOption("printFormatter",!1),this.registerTableOption("printHeader",!1),this.registerTableOption("printFooter",!1),this.registerTableOption("printStyled",!0),this.registerTableOption("printRowRange","visible"),this.registerTableOption("printConfig",{}),this.registerColumnOption("print"),this.registerColumnOption("titlePrint")}initialize(){this.table.options.printAsHtml&&(this.beforeprintEventHandler=this.replaceTable.bind(this),this.afterprintEventHandler=this.cleanup.bind(this),window.addEventListener("beforeprint",this.beforeprintEventHandler),window.addEventListener("afterprint",this.afterprintEventHandler),this.subscribe("table-destroy",this.destroy.bind(this))),this.registerTableFunction("print",this.printFullscreen.bind(this))}destroy(){this.table.options.printAsHtml&&(window.removeEventListener("beforeprint",this.beforeprintEventHandler),window.removeEventListener("afterprint",this.afterprintEventHandler))}replaceTable(){this.manualBlock||(this.element=document.createElement("div"),this.element.classList.add("tabulator-print-table"),this.element.appendChild(this.table.modules.export.generateTable(this.table.options.printConfig,this.table.options.printStyled,this.table.options.printRowRange,"print")),this.table.element.style.display="none",this.table.element.parentNode.insertBefore(this.element,this.table.element))}cleanup(){document.body.classList.remove("tabulator-print-fullscreen-hide"),this.element&&this.element.parentNode&&(this.element.parentNode.removeChild(this.element),this.table.element.style.display="")}printFullscreen(t,e,i){var n,o,r=window.scrollX,a=window.scrollY,l=document.createElement("div"),s=document.createElement("div"),u=this.table.modules.export.generateTable(void 0!==i?i:this.table.options.printConfig,void 0!==e?e:this.table.options.printStyled,t||this.table.options.printRowRange,"print");this.manualBlock=!0,this.element=document.createElement("div"),this.element.classList.add("tabulator-print-fullscreen"),this.table.options.printHeader&&(l.classList.add("tabulator-print-header"),"string"==typeof(n="function"==typeof this.table.options.printHeader?this.table.options.printHeader.call(this.table):this.table.options.printHeader)?l.innerHTML=n:l.appendChild(n),this.element.appendChild(l)),this.element.appendChild(u),this.table.options.printFooter&&(s.classList.add("tabulator-print-footer"),"string"==typeof(o="function"==typeof this.table.options.printFooter?this.table.options.printFooter.call(this.table):this.table.options.printFooter)?s.innerHTML=o:s.appendChild(o),this.element.appendChild(s)),document.body.classList.add("tabulator-print-fullscreen-hide"),document.body.appendChild(this.element),this.table.options.printFormatter&&this.table.options.printFormatter(this.element,u),window.print(),this.cleanup(),window.scrollTo(r,a),this.manualBlock=!1}}Et.moduleName="print";class yt extends E{constructor(t){super(t),this.data=!1,this.blocked=!1,this.origFuncs={},this.currentVersion=0,this.registerTableOption("reactiveData",!1)}initialize(){this.table.options.reactiveData&&(this.subscribe("cell-value-save-before",this.block.bind(this,"cellsave")),this.subscribe("cell-value-save-after",this.unblock.bind(this,"cellsave")),this.subscribe("row-data-save-before",this.block.bind(this,"rowsave")),this.subscribe("row-data-save-after",this.unblock.bind(this,"rowsave")),this.subscribe("row-data-init-after",this.watchRow.bind(this)),this.subscribe("data-processing",this.watchData.bind(this)),this.subscribe("table-destroy",this.unwatchData.bind(this)))}watchData(t){var e,i=this;this.currentVersion++,e=this.currentVersion,this.unwatchData(),this.data=t,this.origFuncs.push=t.push,Object.defineProperty(this.data,"push",{enumerable:!1,configurable:!0,value:function(){var n,o=Array.from(arguments);return i.blocked||e!==i.currentVersion||(i.block("data-push"),o.forEach((t=>{i.table.rowManager.addRowActual(t,!1)})),n=i.origFuncs.push.apply(t,arguments),i.unblock("data-push")),n}}),this.origFuncs.unshift=t.unshift,Object.defineProperty(this.data,"unshift",{enumerable:!1,configurable:!0,value:function(){var n,o=Array.from(arguments);return i.blocked||e!==i.currentVersion||(i.block("data-unshift"),o.forEach((t=>{i.table.rowManager.addRowActual(t,!0)})),n=i.origFuncs.unshift.apply(t,arguments),i.unblock("data-unshift")),n}}),this.origFuncs.shift=t.shift,Object.defineProperty(this.data,"shift",{enumerable:!1,configurable:!0,value:function(){var n,o;return i.blocked||e!==i.currentVersion||(i.block("data-shift"),i.data.length&&(n=i.table.rowManager.getRowFromDataObject(i.data[0]))&&n.deleteActual(),o=i.origFuncs.shift.call(t),i.unblock("data-shift")),o}}),this.origFuncs.pop=t.pop,Object.defineProperty(this.data,"pop",{enumerable:!1,configurable:!0,value:function(){var n,o;return i.blocked||e!==i.currentVersion||(i.block("data-pop"),i.data.length&&(n=i.table.rowManager.getRowFromDataObject(i.data[i.data.length-1]))&&n.deleteActual(),o=i.origFuncs.pop.call(t),i.unblock("data-pop")),o}}),this.origFuncs.splice=t.splice,Object.defineProperty(this.data,"splice",{enumerable:!1,configurable:!0,value:function(){var n,o,r=Array.from(arguments),a=r[0]<0?t.length+r[0]:r[0],l=r[1],s=!!r[2]&&r.slice(2);if(!i.blocked&&e===i.currentVersion){if(i.block("data-splice"),s&&((n=!!t[a]&&i.table.rowManager.getRowFromDataObject(t[a]))?s.forEach((t=>{i.table.rowManager.addRowActual(t,!0,n,!0)})):(s=s.slice().reverse()).forEach((t=>{i.table.rowManager.addRowActual(t,!0,!1,!0)}))),0!==l){var u=t.slice(a,void 0===r[1]?r[1]:a+l);u.forEach(((t,e)=>{var n=i.table.rowManager.getRowFromDataObject(t);n&&n.deleteActual(e!==u.length-1)}))}(s||0!==l)&&i.table.rowManager.reRenderInPosition(),o=i.origFuncs.splice.apply(t,arguments),i.unblock("data-splice")}return o}})}unwatchData(){if(!1!==this.data)for(var t in this.origFuncs)Object.defineProperty(this.data,t,{enumerable:!0,configurable:!0,writable:!0,value:this.origFuncs.key})}watchRow(t){var e=t.getData();for(var i in e)this.watchKey(t,e,i);this.table.options.dataTree&&this.watchTreeChildren(t)}watchTreeChildren(t){var e=this,i=t.getData()[this.table.options.dataTreeChildField],n={};i&&(n.push=i.push,Object.defineProperty(i,"push",{enumerable:!1,configurable:!0,value:()=>{if(!e.blocked){e.block("tree-push");var o=n.push.apply(i,arguments);this.rebuildTree(t),e.unblock("tree-push")}return o}}),n.unshift=i.unshift,Object.defineProperty(i,"unshift",{enumerable:!1,configurable:!0,value:()=>{if(!e.blocked){e.block("tree-unshift");var o=n.unshift.apply(i,arguments);this.rebuildTree(t),e.unblock("tree-unshift")}return o}}),n.shift=i.shift,Object.defineProperty(i,"shift",{enumerable:!1,configurable:!0,value:()=>{if(!e.blocked){e.block("tree-shift");var o=n.shift.call(i);this.rebuildTree(t),e.unblock("tree-shift")}return o}}),n.pop=i.pop,Object.defineProperty(i,"pop",{enumerable:!1,configurable:!0,value:()=>{if(!e.blocked){e.block("tree-pop");var o=n.pop.call(i);this.rebuildTree(t),e.unblock("tree-pop")}return o}}),n.splice=i.splice,Object.defineProperty(i,"splice",{enumerable:!1,configurable:!0,value:()=>{if(!e.blocked){e.block("tree-splice");var o=n.splice.apply(i,arguments);this.rebuildTree(t),e.unblock("tree-splice")}return o}}))}rebuildTree(t){this.table.modules.dataTree.initializeRow(t),this.table.modules.dataTree.layoutRow(t),this.table.rowManager.refreshActiveData("tree",!1,!0)}watchKey(t,e,i){var n=this,o=Object.getOwnPropertyDescriptor(e,i),r=e[i],a=this.currentVersion;Object.defineProperty(e,i,{set:e=>{if(r=e,!n.blocked&&a===n.currentVersion){n.block("key");var l={};l[i]=e,t.updateData(l),n.unblock("key")}o.set&&o.set(e)},get:()=>(o.get&&o.get(),r)})}unwatchRow(t){var e=t.getData();for(var i in e)Object.defineProperty(e,i,{value:e[i]})}block(t){this.blocked||(this.blocked=t)}unblock(t){this.blocked===t&&(this.blocked=!1)}}yt.moduleName="reactiveData";class xt extends E{constructor(t){super(t),this.startColumn=!1,this.startX=!1,this.startWidth=!1,this.latestX=!1,this.handle=null,this.initialNextColumn=null,this.nextColumn=null,this.initialized=!1,this.registerColumnOption("resizable",!0),this.registerTableOption("resizableColumnFit",!1)}initialize(){this.subscribe("column-rendered",this.layoutColumnHeader.bind(this))}initializeEventWatchers(){this.initialized||(this.subscribe("cell-rendered",this.layoutCellHandles.bind(this)),this.subscribe("cell-delete",this.deInitializeComponent.bind(this)),this.subscribe("cell-height",this.resizeHandle.bind(this)),this.subscribe("column-moved",this.columnLayoutUpdated.bind(this)),this.subscribe("column-hide",this.deInitializeColumn.bind(this)),this.subscribe("column-show",this.columnLayoutUpdated.bind(this)),this.subscribe("column-width",this.columnWidthUpdated.bind(this)),this.subscribe("column-delete",this.deInitializeComponent.bind(this)),this.subscribe("column-height",this.resizeHandle.bind(this)),this.initialized=!0)}layoutCellHandles(t){"row"===t.row.type&&(this.deInitializeComponent(t),this.initializeColumn("cell",t,t.column,t.element))}layoutColumnHeader(t){t.definition.resizable&&(this.initializeEventWatchers(),this.deInitializeComponent(t),this.initializeColumn("header",t,t,t.element))}columnLayoutUpdated(t){var e=t.prevColumn();this.reinitializeColumn(t),e&&this.reinitializeColumn(e)}columnWidthUpdated(t){t.modules.frozen&&(this.table.modules.frozenColumns.leftColumns.includes(t)?this.table.modules.frozenColumns.leftColumns.forEach((t=>{this.reinitializeColumn(t)})):this.table.modules.frozenColumns.rightColumns.includes(t)&&this.table.modules.frozenColumns.rightColumns.forEach((t=>{this.reinitializeColumn(t)})))}frozenColumnOffset(t){var e=!1;return t.modules.frozen&&(e=t.modules.frozen.marginValue,"left"===t.modules.frozen.position?e+=t.getWidth()-3:e&&(e-=3)),!1!==e&&e+"px"}reinitializeColumn(t){var e=this.frozenColumnOffset(t);t.cells.forEach((i=>{i.modules.resize&&i.modules.resize.handleEl&&(e&&(i.modules.resize.handleEl.style[t.modules.frozen.position]=e,i.modules.resize.handleEl.style["z-index"]=11),i.element.after(i.modules.resize.handleEl))})),t.modules.resize&&t.modules.resize.handleEl&&(e&&(t.modules.resize.handleEl.style[t.modules.frozen.position]=e),t.element.after(t.modules.resize.handleEl))}initializeColumn(t,e,i,n){var o=this,r=i.definition.resizable,a={},l=i.getLastColumn();if("header"===t&&(a={variableHeight:"textarea"==i.definition.formatter||i.definition.variableHeight}),(!0===r||r==t)&&this._checkResizability(l)){var s=document.createElement("span");s.className="tabulator-col-resize-handle",s.addEventListener("click",(function(t){t.stopPropagation()}));var u=function(t){o.startColumn=i,o.initialNextColumn=o.nextColumn=l.nextColumn(),o._mouseDown(t,l,s)};s.addEventListener("mousedown",u),s.addEventListener("touchstart",u,{passive:!0}),s.addEventListener("dblclick",(t=>{var e=l.getWidth();t.stopPropagation(),l.reinitializeWidth(!0),e!==l.getWidth()&&(o.dispatch("column-resized",l),o.table.externalEvents.dispatch("columnResized",l.getComponent()))})),i.modules.frozen&&(s.style.position="sticky",s.style[i.modules.frozen.position]=this.frozenColumnOffset(i)),a.handleEl=s,n.parentNode&&i.visible&&n.after(s)}e.modules.resize=a}deInitializeColumn(t){this.deInitializeComponent(t),t.cells.forEach((t=>{this.deInitializeComponent(t)}))}deInitializeComponent(t){var e;t.modules.resize&&(e=t.modules.resize.handleEl)&&e.parentElement&&e.parentElement.removeChild(e)}resizeHandle(t,e){t.modules.resize&&t.modules.resize.handleEl&&(t.modules.resize.handleEl.style.height=e)}_checkResizability(t){return t.definition.resizable}_mouseDown(t,e,i){var n=this;function o(t){var i,o,r=void 0===t.screenX?t.touches[0].screenX:t.screenX,a=r-n.startX,l=r-n.latestX;if(n.latestX=r,n.table.rtl&&(a=-a,l=-l),i=e.width==e.minWidth||e.width==e.maxWidth,e.setWidth(n.startWidth+a),o=e.width==e.minWidth||e.width==e.maxWidth,l<0&&(n.nextColumn=n.initialNextColumn),n.table.options.resizableColumnFit&&n.nextColumn&&(!i||!o)){let t=n.nextColumn.getWidth();l>0&&t<=n.nextColumn.minWidth&&(n.nextColumn=n.nextColumn.nextColumn()),n.nextColumn&&n.nextColumn.setWidth(n.nextColumn.getWidth()-l)}n.table.columnManager.rerenderColumns(!0),!n.table.browserSlow&&e.modules.resize&&e.modules.resize.variableHeight&&e.checkCellHeights()}function r(t){n.startColumn.modules.edit&&(n.startColumn.modules.edit.blocked=!1),n.table.browserSlow&&e.modules.resize&&e.modules.resize.variableHeight&&e.checkCellHeights(),document.body.removeEventListener("mouseup",r),document.body.removeEventListener("mousemove",o),i.removeEventListener("touchmove",o),i.removeEventListener("touchend",r),n.table.element.classList.remove("tabulator-block-select"),n.startWidth!==e.getWidth()&&(n.table.columnManager.verticalAlignHeaders(),n.dispatch("column-resized",e),n.table.externalEvents.dispatch("columnResized",e.getComponent()))}n.table.element.classList.add("tabulator-block-select"),t.stopPropagation(),n.startColumn.modules.edit&&(n.startColumn.modules.edit.blocked=!0),n.startX=void 0===t.screenX?t.touches[0].screenX:t.screenX,n.latestX=n.startX,n.startWidth=e.getWidth(),document.body.addEventListener("mousemove",o),document.body.addEventListener("mouseup",r),i.addEventListener("touchmove",o,{passive:!0}),i.addEventListener("touchend",r)}}xt.moduleName="resizeColumns";class Bt extends E{constructor(t){super(t),this.startColumn=!1,this.startY=!1,this.startHeight=!1,this.handle=null,this.prevHandle=null,this.registerTableOption("resizableRows",!1)}initialize(){this.table.options.resizableRows&&this.subscribe("row-layout-after",this.initializeRow.bind(this))}initializeRow(t){var e=this,i=t.getElement(),n=document.createElement("div");n.className="tabulator-row-resize-handle";var o=document.createElement("div");o.className="tabulator-row-resize-handle prev",n.addEventListener("click",(function(t){t.stopPropagation()}));var r=function(i){e.startRow=t,e._mouseDown(i,t,n)};n.addEventListener("mousedown",r),n.addEventListener("touchstart",r,{passive:!0}),o.addEventListener("click",(function(t){t.stopPropagation()}));var a=function(i){var n=e.table.rowManager.prevDisplayRow(t);n&&(e.startRow=n,e._mouseDown(i,n,o))};o.addEventListener("mousedown",a),o.addEventListener("touchstart",a,{passive:!0}),i.appendChild(n),i.appendChild(o)}_mouseDown(t,e,i){var n=this;function o(t){e.setHeight(n.startHeight+((void 0===t.screenY?t.touches[0].screenY:t.screenY)-n.startY))}function r(t){document.body.removeEventListener("mouseup",o),document.body.removeEventListener("mousemove",o),i.removeEventListener("touchmove",o),i.removeEventListener("touchend",r),n.table.element.classList.remove("tabulator-block-select"),n.dispatchExternal("rowResized",e.getComponent())}n.table.element.classList.add("tabulator-block-select"),t.stopPropagation(),n.startY=void 0===t.screenY?t.touches[0].screenY:t.screenY,n.startHeight=e.getHeight(),document.body.addEventListener("mousemove",o),document.body.addEventListener("mouseup",r),i.addEventListener("touchmove",o,{passive:!0}),i.addEventListener("touchend",r)}}Bt.moduleName="resizeRows";class kt extends E{constructor(t){super(t),this.binding=!1,this.visibilityObserver=!1,this.resizeObserver=!1,this.containerObserver=!1,this.tableHeight=0,this.tableWidth=0,this.containerHeight=0,this.containerWidth=0,this.autoResize=!1,this.visible=!1,this.initialized=!1,this.initialRedraw=!1,this.registerTableOption("autoResize",!0)}initialize(){if(this.table.options.autoResize){var t,e=this.table;this.tableHeight=e.element.clientHeight,this.tableWidth=e.element.clientWidth,e.element.parentNode&&(this.containerHeight=e.element.parentNode.clientHeight,this.containerWidth=e.element.parentNode.clientWidth),"undefined"!=typeof IntersectionObserver&&"undefined"!=typeof ResizeObserver&&"virtual"===e.rowManager.getRenderMode()?(this.initializeVisibilityObserver(),this.autoResize=!0,this.resizeObserver=new ResizeObserver((t=>{if(!e.browserMobile||e.browserMobile&&!e.modules.edit.currentCell){var i=Math.floor(t[0].contentRect.height),n=Math.floor(t[0].contentRect.width);this.tableHeight==i&&this.tableWidth==n||(this.tableHeight=i,this.tableWidth=n,e.element.parentNode&&(this.containerHeight=e.element.parentNode.clientHeight,this.containerWidth=e.element.parentNode.clientWidth),this.redrawTable())}})),this.resizeObserver.observe(e.element),t=window.getComputedStyle(e.element),this.table.element.parentNode&&!this.table.rowManager.fixedHeight&&(t.getPropertyValue("max-height")||t.getPropertyValue("min-height"))&&(this.containerObserver=new ResizeObserver((t=>{if(!e.browserMobile||e.browserMobile&&!e.modules.edit.currentCell){var i=Math.floor(t[0].contentRect.height),n=Math.floor(t[0].contentRect.width);this.containerHeight==i&&this.containerWidth==n||(this.containerHeight=i,this.containerWidth=n,this.tableHeight=e.element.clientHeight,this.tableWidth=e.element.clientWidth),this.redrawTable()}})),this.containerObserver.observe(this.table.element.parentNode)),this.subscribe("table-resize",this.tableResized.bind(this))):(this.binding=function(){(!e.browserMobile||e.browserMobile&&!e.modules.edit.currentCell)&&(e.columnManager.rerenderColumns(!0),e.redraw())},window.addEventListener("resize",this.binding)),this.subscribe("table-destroy",this.clearBindings.bind(this))}}initializeVisibilityObserver(){this.visibilityObserver=new IntersectionObserver((t=>{this.visible=t[0].isIntersecting,this.initialized?this.visible&&(this.redrawTable(this.initialRedraw),this.initialRedraw=!1):(this.initialized=!0,this.initialRedraw=!this.visible)})),this.visibilityObserver.observe(this.table.element)}redrawTable(t){this.initialized&&this.visible&&(this.table.columnManager.rerenderColumns(!0),this.table.redraw(t))}tableResized(){this.table.rowManager.redraw()}clearBindings(){this.binding&&window.removeEventListener("resize",this.binding),this.resizeObserver&&this.resizeObserver.unobserve(this.table.element),this.visibilityObserver&&this.visibilityObserver.unobserve(this.table.element),this.containerObserver&&this.containerObserver.unobserve(this.table.element.parentNode)}}kt.moduleName="resizeTable";class Rt extends E{constructor(t){super(t),this.columns=[],this.hiddenColumns=[],this.mode="",this.index=0,this.collapseFormatter=[],this.collapseStartOpen=!0,this.collapseHandleColumn=!1,this.registerTableOption("responsiveLayout",!1),this.registerTableOption("responsiveLayoutCollapseStartOpen",!0),this.registerTableOption("responsiveLayoutCollapseUseFormatters",!0),this.registerTableOption("responsiveLayoutCollapseFormatter",!1),this.registerColumnOption("responsive")}initialize(){this.table.options.responsiveLayout&&(this.subscribe("column-layout",this.initializeColumn.bind(this)),this.subscribe("column-show",this.updateColumnVisibility.bind(this)),this.subscribe("column-hide",this.updateColumnVisibility.bind(this)),this.subscribe("columns-loaded",this.initializeResponsivity.bind(this)),this.subscribe("column-moved",this.initializeResponsivity.bind(this)),this.subscribe("column-add",this.initializeResponsivity.bind(this)),this.subscribe("column-delete",this.initializeResponsivity.bind(this)),this.subscribe("table-redrawing",this.tableRedraw.bind(this)),"collapse"===this.table.options.responsiveLayout&&(this.subscribe("row-data-changed",this.generateCollapsedRowContent.bind(this)),this.subscribe("row-init",this.initializeRow.bind(this)),this.subscribe("row-layout",this.layoutRow.bind(this))))}tableRedraw(t){-1===["fitColumns","fitDataStretch"].indexOf(this.layoutMode())&&(t||this.update())}initializeResponsivity(){var t=[];this.mode=this.table.options.responsiveLayout,this.collapseFormatter=this.table.options.responsiveLayoutCollapseFormatter||this.formatCollapsedData,this.collapseStartOpen=this.table.options.responsiveLayoutCollapseStartOpen,this.hiddenColumns=[],this.table.columnManager.columnsByIndex.forEach(((e,i)=>{e.modules.responsive&&e.modules.responsive.order&&e.modules.responsive.visible&&(e.modules.responsive.index=i,t.push(e),e.visible||"collapse"!==this.mode||this.hiddenColumns.push(e))})),t=(t=t.reverse()).sort(((t,e)=>e.modules.responsive.order-t.modules.responsive.order||e.modules.responsive.index-t.modules.responsive.index)),this.columns=t,"collapse"===this.mode&&this.generateCollapsedContent();for(let t of this.table.columnManager.columnsByIndex)if("responsiveCollapse"==t.definition.formatter){this.collapseHandleColumn=t;break}this.collapseHandleColumn&&(this.hiddenColumns.length?this.collapseHandleColumn.show():this.collapseHandleColumn.hide())}initializeColumn(t){var e=t.getDefinition();t.modules.responsive={order:void 0===e.responsive?1:e.responsive,visible:!1!==e.visible}}initializeRow(t){var e;"calc"!==t.type&&((e=document.createElement("div")).classList.add("tabulator-responsive-collapse"),t.modules.responsiveLayout={element:e,open:this.collapseStartOpen},this.collapseStartOpen||(e.style.display="none"))}layoutRow(t){var e=t.getElement();t.modules.responsiveLayout&&(e.appendChild(t.modules.responsiveLayout.element),this.generateCollapsedRowContent(t))}updateColumnVisibility(t,e){!e&&t.modules.responsive&&(t.modules.responsive.visible=t.visible,this.initializeResponsivity())}hideColumn(t){var e=this.hiddenColumns.length;t.hide(!1,!0),"collapse"===this.mode&&(this.hiddenColumns.unshift(t),this.generateCollapsedContent(),this.collapseHandleColumn&&!e&&this.collapseHandleColumn.show())}showColumn(t){var e;t.show(!1,!0),t.setWidth(t.getWidth()),"collapse"===this.mode&&((e=this.hiddenColumns.indexOf(t))>-1&&this.hiddenColumns.splice(e,1),this.generateCollapsedContent(),this.collapseHandleColumn&&!this.hiddenColumns.length&&this.collapseHandleColumn.hide())}update(){for(var t=!0;t;){let e="fitColumns"==this.table.modules.layout.getMode()?this.table.columnManager.getFlexBaseWidth():this.table.columnManager.getWidth(),i=(this.table.options.headerVisible?this.table.columnManager.element.clientWidth:this.table.element.clientWidth)-e;if(i<0){let e=this.columns[this.index];e?(this.hideColumn(e),this.index++):t=!1}else{let e=this.columns[this.index-1];e&&i>0&&i>=e.getWidth()?(this.showColumn(e),this.index--):t=!1}this.table.rowManager.activeRowsCount||this.table.rowManager.renderEmptyScroll()}}generateCollapsedContent(){this.table.rowManager.getDisplayRows().forEach((t=>{this.generateCollapsedRowContent(t)}))}generateCollapsedRowContent(t){var e,i;if(t.modules.responsiveLayout){for(e=t.modules.responsiveLayout.element;e.firstChild;)e.removeChild(e.firstChild);(i=this.collapseFormatter(this.generateCollapsedRowData(t)))&&e.appendChild(i)}}generateCollapsedRowData(t){var e,i=t.getData(),n=[];return this.hiddenColumns.forEach((o=>{var r=o.getFieldValue(i);if(o.definition.title&&o.field)if(o.modules.format&&this.table.options.responsiveLayoutCollapseUseFormatters){function a(t){t()}e={value:!1,data:{},getValue:function(){return r},getData:function(){return i},getType:function(){return"cell"},getElement:function(){return document.createElement("div")},getRow:function(){return t.getComponent()},getColumn:function(){return o.getComponent()},getTable:()=>this.table},n.push({field:o.field,title:o.definition.title,value:o.modules.format.formatter.call(this.table.modules.format,e,o.modules.format.params,a)})}else n.push({field:o.field,title:o.definition.title,value:r})})),n}formatCollapsedData(t){var e=document.createElement("table");return t.forEach((function(t){var i,n=document.createElement("tr"),o=document.createElement("td"),r=document.createElement("td"),a=document.createElement("strong");o.appendChild(a),this.langBind("columns|"+t.field,(function(e){a.innerHTML=e||t.title})),t.value instanceof Node?((i=document.createElement("div")).appendChild(t.value),r.appendChild(i)):r.innerHTML=t.value,n.appendChild(o),n.appendChild(r),e.appendChild(n)}),this),Object.keys(t).length?e:""}}Rt.moduleName="responsiveLayout";class _t extends E{constructor(t){super(t),this.selecting=!1,this.lastClickedRow=!1,this.selectPrev=[],this.selectedRows=[],this.headerCheckboxElement=null,this.registerTableOption("selectable","highlight"),this.registerTableOption("selectableRangeMode","drag"),this.registerTableOption("selectableRollingSelection",!0),this.registerTableOption("selectablePersistence",!0),this.registerTableOption("selectableCheck",(function(t,e){return!0})),this.registerTableFunction("selectRow",this.selectRows.bind(this)),this.registerTableFunction("deselectRow",this.deselectRows.bind(this)),this.registerTableFunction("toggleSelectRow",this.toggleRow.bind(this)),this.registerTableFunction("getSelectedRows",this.getSelectedRows.bind(this)),this.registerTableFunction("getSelectedData",this.getSelectedData.bind(this)),this.registerComponentFunction("row","select",this.selectRows.bind(this)),this.registerComponentFunction("row","deselect",this.deselectRows.bind(this)),this.registerComponentFunction("row","toggleSelect",this.toggleRow.bind(this)),this.registerComponentFunction("row","isSelected",this.isRowSelected.bind(this))}initialize(){!1!==this.table.options.selectable&&(this.subscribe("row-init",this.initializeRow.bind(this)),this.subscribe("row-deleting",this.rowDeleted.bind(this)),this.subscribe("rows-wipe",this.clearSelectionData.bind(this)),this.subscribe("rows-retrieve",this.rowRetrieve.bind(this)),this.table.options.selectable&&!this.table.options.selectablePersistence&&this.subscribe("data-refreshing",this.deselectRows.bind(this)))}rowRetrieve(t,e){return"selected"===t?this.selectedRows:e}rowDeleted(t){this._deselectRow(t,!0)}clearSelectionData(t){var e=this.selectedRows.length;this.selecting=!1,this.lastClickedRow=!1,this.selectPrev=[],this.selectedRows=[],e&&!0!==t&&this._rowSelectionChanged()}initializeRow(t){var e=this,i=t.getElement(),n=function(){setTimeout((function(){e.selecting=!1}),50),document.body.removeEventListener("mouseup",n)};t.modules.select={selected:!1},e.checkRowSelectability(t)?(i.classList.add("tabulator-selectable"),i.classList.remove("tabulator-unselectable"),e.table.options.selectable&&"highlight"!=e.table.options.selectable&&("click"===e.table.options.selectableRangeMode?i.addEventListener("click",this.handleComplexRowClick.bind(this,t)):(i.addEventListener("click",(function(i){e.table.modExists("edit")&&e.table.modules.edit.getCurrentCell()||e.table._clearSelection(),e.selecting||e.toggleRow(t)})),i.addEventListener("mousedown",(function(i){if(i.shiftKey)return e.table._clearSelection(),e.selecting=!0,e.selectPrev=[],document.body.addEventListener("mouseup",n),document.body.addEventListener("keyup",n),e.toggleRow(t),!1})),i.addEventListener("mouseenter",(function(i){e.selecting&&(e.table._clearSelection(),e.toggleRow(t),e.selectPrev[1]==t&&e.toggleRow(e.selectPrev[0]))})),i.addEventListener("mouseout",(function(i){e.selecting&&(e.table._clearSelection(),e.selectPrev.unshift(t))}))))):(i.classList.add("tabulator-unselectable"),i.classList.remove("tabulator-selectable"))}handleComplexRowClick(t,e){if(e.shiftKey){this.table._clearSelection(),this.lastClickedRow=this.lastClickedRow||t;var i=this.table.rowManager.getDisplayRowIndex(this.lastClickedRow),n=this.table.rowManager.getDisplayRowIndex(t),o=i<=n?i:n,r=i>=n?i:n,a=this.table.rowManager.getDisplayRows().slice(0).splice(o,r-o+1);e.ctrlKey||e.metaKey?(a.forEach((e=>{e!==this.lastClickedRow&&(!0===this.table.options.selectable||this.isRowSelected(t)||this.selectedRows.length<this.table.options.selectable)&&this.toggleRow(e)})),this.lastClickedRow=t):(this.deselectRows(void 0,!0),!0!==this.table.options.selectable&&a.length>this.table.options.selectable&&(a=a.slice(0,this.table.options.selectable)),this.selectRows(a)),this.table._clearSelection()}else e.ctrlKey||e.metaKey?(this.toggleRow(t),this.lastClickedRow=t):(this.deselectRows(void 0,!0),this.selectRows(t),this.lastClickedRow=t)}checkRowSelectability(t){return!(!t||"row"!==t.type)&&this.table.options.selectableCheck.call(this.table,t.getComponent())}toggleRow(t){this.checkRowSelectability(t)&&(t.modules.select&&t.modules.select.selected?this._deselectRow(t):this._selectRow(t))}selectRows(t){var e,i,n=[];switch(typeof t){case"undefined":e=this.table.rowManager.rows;break;case"string":(e=this.table.rowManager.findRow(t))||(e=this.table.rowManager.getRows(t));break;default:e=t}Array.isArray(e)?e.length&&(e.forEach((t=>{(i=this._selectRow(t,!0,!0))&&n.push(i)})),this._rowSelectionChanged(!1,n)):e&&this._selectRow(e,!1,!0)}_selectRow(t,e,i){if(!isNaN(this.table.options.selectable)&&!0!==this.table.options.selectable&&!i&&this.selectedRows.length>=this.table.options.selectable){if(!this.table.options.selectableRollingSelection)return!1;this._deselectRow(this.selectedRows[0])}var n=this.table.rowManager.findRow(t);if(n){if(-1==this.selectedRows.indexOf(n))return n.getElement().classList.add("tabulator-selected"),n.modules.select||(n.modules.select={}),n.modules.select.selected=!0,n.modules.select.checkboxEl&&(n.modules.select.checkboxEl.checked=!0),this.selectedRows.push(n),this.table.options.dataTreeSelectPropagate&&this.childRowSelection(n,!0),this.dispatchExternal("rowSelected",n.getComponent()),this._rowSelectionChanged(e,n),n}else e||console.warn("Selection Error - No such row found, ignoring selection:"+t)}isRowSelected(t){return-1!==this.selectedRows.indexOf(t)}deselectRows(t,e){var i,n,o=[];switch(typeof t){case"undefined":i=Object.assign([],this.selectedRows);break;case"string":(i=this.table.rowManager.findRow(t))||(i=this.table.rowManager.getRows(t));break;default:i=t}Array.isArray(i)?i.length&&(i.forEach((t=>{(n=this._deselectRow(t,!0,!0))&&o.push(n)})),this._rowSelectionChanged(e,[],o)):i&&this._deselectRow(i,e,!0)}_deselectRow(t,e){var i,n,o=this,r=o.table.rowManager.findRow(t);if(r){if((i=o.selectedRows.findIndex((function(t){return t==r})))>-1)return(n=r.getElement())&&n.classList.remove("tabulator-selected"),r.modules.select||(r.modules.select={}),r.modules.select.selected=!1,r.modules.select.checkboxEl&&(r.modules.select.checkboxEl.checked=!1),o.selectedRows.splice(i,1),this.table.options.dataTreeSelectPropagate&&this.childRowSelection(r,!1),this.dispatchExternal("rowDeselected",r.getComponent()),o._rowSelectionChanged(e,void 0,r),r}else e||console.warn("Deselection Error - No such row found, ignoring selection:"+t)}getSelectedData(){var t=[];return this.selectedRows.forEach((function(e){t.push(e.getData())})),t}getSelectedRows(){var t=[];return this.selectedRows.forEach((function(e){t.push(e.getComponent())})),t}_rowSelectionChanged(t,e=[],i=[]){this.headerCheckboxElement&&(0===this.selectedRows.length?(this.headerCheckboxElement.checked=!1,this.headerCheckboxElement.indeterminate=!1):this.table.rowManager.rows.length===this.selectedRows.length?(this.headerCheckboxElement.checked=!0,this.headerCheckboxElement.indeterminate=!1):(this.headerCheckboxElement.indeterminate=!0,this.headerCheckboxElement.checked=!1)),t||(Array.isArray(e)||(e=[e]),e=e.map((t=>t.getComponent())),Array.isArray(i)||(i=[i]),i=i.map((t=>t.getComponent())),this.dispatchExternal("rowSelectionChanged",this.getSelectedData(),this.getSelectedRows(),e,i))}registerRowSelectCheckbox(t,e){t._row.modules.select||(t._row.modules.select={}),t._row.modules.select.checkboxEl=e}registerHeaderSelectCheckbox(t){this.headerCheckboxElement=t}childRowSelection(t,e){var i=this.table.modules.dataTree.getChildren(t,!0);if(e)for(let t of i)this._selectRow(t,!0);else for(let t of i)this._deselectRow(t,!0)}}function Tt(t,e,i,n,o,r,a){var l=window.DateTime||luxon.DateTime,s=a.format||"dd/MM/yyyy HH:mm:ss",u=a.alignEmptyValues,h=0;if(void 0!==l){if(l.isDateTime(t)||(t="iso"===s?l.fromISO(String(t)):l.fromFormat(String(t),s)),l.isDateTime(e)||(e="iso"===s?l.fromISO(String(e)):l.fromFormat(String(e),s)),t.isValid){if(e.isValid)return t-e;h=1}else h=e.isValid?-1:0;return("top"===u&&"desc"===r||"bottom"===u&&"asc"===r)&&(h*=-1),h}console.error("Sort Error - 'datetime' sorter is dependant on luxon.js")}_t.moduleName="selectRow";var zt={number:function(t,e,i,n,o,r,a){var l=a.alignEmptyValues,s=a.decimalSeparator,u=a.thousandSeparator,h=0;if(t=String(t),e=String(e),u&&(t=t.split(u).join(""),e=e.split(u).join("")),s&&(t=t.split(s).join("."),e=e.split(s).join(".")),t=parseFloat(t),e=parseFloat(e),isNaN(t))h=isNaN(e)?0:-1;else{if(!isNaN(e))return t-e;h=1}return("top"===l&&"desc"===r||"bottom"===l&&"asc"===r)&&(h*=-1),h},string:function(t,e,i,n,o,r,a){var l,s=a.alignEmptyValues,u=0;if(t){if(e){switch(typeof a.locale){case"boolean":a.locale&&(l=this.langLocale());break;case"string":l=a.locale}return String(t).toLowerCase().localeCompare(String(e).toLowerCase(),l)}u=1}else u=e?-1:0;return("top"===s&&"desc"===r||"bottom"===s&&"asc"===r)&&(u*=-1),u},date:function(t,e,i,n,o,r,a){return a.format||(a.format="dd/MM/yyyy"),Tt.call(this,t,e,i,n,o,r,a)},time:function(t,e,i,n,o,r,a){return a.format||(a.format="HH:mm"),Tt.call(this,t,e,i,n,o,r,a)},datetime:Tt,boolean:function(t,e,i,n,o,r,a){return(!0===t||"true"===t||"True"===t||1===t?1:0)-(!0===e||"true"===e||"True"===e||1===e?1:0)},array:function(t,e,i,n,o,r,a){var l=a.type||"length",s=a.alignEmptyValues,u=0;function h(t){var e;switch(l){case"length":e=t.length;break;case"sum":e=t.reduce((function(t,e){return t+e}));break;case"max":e=Math.max.apply(null,t);break;case"min":e=Math.min.apply(null,t);break;case"avg":e=t.reduce((function(t,e){return t+e}))/t.length}return e}if(Array.isArray(t)){if(Array.isArray(e))return h(e)-h(t);u=1}else u=Array.isArray(e)?-1:0;return("top"===s&&"desc"===r||"bottom"===s&&"asc"===r)&&(u*=-1),u},exists:function(t,e,i,n,o,r,a){return(void 0===t?0:1)-(void 0===e?0:1)},alphanum:function(t,e,i,n,o,r,a){var l,s,u,h,c,d=0,p=/(\d+)|(\D+)/g,b=/\d/,m=a.alignEmptyValues,g=0;if(t||0===t){if(e||0===e){if(isFinite(t)&&isFinite(e))return t-e;if((l=String(t).toLowerCase())===(s=String(e).toLowerCase()))return 0;if(!b.test(l)||!b.test(s))return l>s?1:-1;for(l=l.match(p),s=s.match(p),c=l.length>s.length?s.length:l.length;d<c;)if((u=l[d])!==(h=s[d++]))return isFinite(u)&&isFinite(h)?("0"===u.charAt(0)&&(u="."+u),"0"===h.charAt(0)&&(h="."+h),u-h):u>h?1:-1;return l.length>s.length}g=1}else g=e||0===e?-1:0;return("top"===m&&"desc"===r||"bottom"===m&&"asc"===r)&&(g*=-1),g}};class Mt extends E{constructor(t){super(t),this.sortList=[],this.changed=!1,this.registerTableOption("sortMode","local"),this.registerTableOption("initialSort",!1),this.registerTableOption("columnHeaderSortMulti",!0),this.registerTableOption("sortOrderReverse",!1),this.registerTableOption("headerSortElement","<div class='tabulator-arrow'></div>"),this.registerTableOption("headerSortClickElement","header"),this.registerColumnOption("sorter"),this.registerColumnOption("sorterParams"),this.registerColumnOption("headerSort",!0),this.registerColumnOption("headerSortStartingDir"),this.registerColumnOption("headerSortTristate")}initialize(){this.subscribe("column-layout",this.initializeColumn.bind(this)),this.subscribe("table-built",this.tableBuilt.bind(this)),this.registerDataHandler(this.sort.bind(this),20),this.registerTableFunction("setSort",this.userSetSort.bind(this)),this.registerTableFunction("getSorters",this.getSort.bind(this)),this.registerTableFunction("clearSort",this.clearSort.bind(this)),"remote"===this.table.options.sortMode&&this.subscribe("data-params",this.remoteSortParams.bind(this))}tableBuilt(){this.table.options.initialSort&&this.setSort(this.table.options.initialSort)}remoteSortParams(t,e,i,n){var o=this.getSort();return o.forEach((t=>{delete t.column})),n.sort=o,n}userSetSort(t,e){this.setSort(t,e),this.refreshSort()}clearSort(){this.clear(),this.refreshSort()}initializeColumn(t){var e,i,n=!1;switch(typeof t.definition.sorter){case"string":Mt.sorters[t.definition.sorter]?n=Mt.sorters[t.definition.sorter]:console.warn("Sort Error - No such sorter found: ",t.definition.sorter);break;case"function":n=t.definition.sorter}if(t.modules.sort={sorter:n,dir:"none",params:t.definition.sorterParams||{},startingDir:t.definition.headerSortStartingDir||"asc",tristate:t.definition.headerSortTristate},!1!==t.definition.headerSort){switch((e=t.getElement()).classList.add("tabulator-sortable"),(i=document.createElement("div")).classList.add("tabulator-col-sorter"),"icon"===this.table.options.headerSortClickElement?i.classList.add("tabulator-col-sorter-element"):e.classList.add("tabulator-col-sorter-element"),this.table.options.headerSortElement){case"function":break;case"object":i.appendChild(this.table.options.headerSortElement);break;default:i.innerHTML=this.table.options.headerSortElement}t.titleHolderElement.appendChild(i),t.modules.sort.element=i,this.setColumnHeaderSortIcon(t,"none"),("icon"===this.table.options.headerSortClickElement?i:e).addEventListener("click",(e=>{var i="",n=[],o=!1;if(t.modules.sort){if(t.modules.sort.tristate)i="none"==t.modules.sort.dir?t.modules.sort.startingDir:t.modules.sort.dir==t.modules.sort.startingDir?"asc"==t.modules.sort.dir?"desc":"asc":"none";else switch(t.modules.sort.dir){case"asc":i="desc";break;case"desc":i="asc";break;default:i=t.modules.sort.startingDir}this.table.options.columnHeaderSortMulti&&(e.shiftKey||e.ctrlKey)?(o=(n=this.getSort()).findIndex((e=>e.field===t.getField())),o>-1?(n[o].dir=i,o=n.splice(o,1)[0],"none"!=i&&n.push(o)):"none"!=i&&n.push({column:t,dir:i}),this.setSort(n)):"none"==i?this.clear():this.setSort(t,i),this.refreshSort()}}))}}refreshSort(){"remote"===this.table.options.sortMode?this.reloadData(null,!1,!1):this.refreshData(!0)}hasChanged(){var t=this.changed;return this.changed=!1,t}getSort(){var t=[];return this.sortList.forEach((function(e){e.column&&t.push({column:e.column.getComponent(),field:e.column.getField(),dir:e.dir})})),t}setSort(t,e){var i=this,n=[];Array.isArray(t)||(t=[{column:t,dir:e}]),t.forEach((function(t){var e;(e=i.table.columnManager.findColumn(t.column))?(t.column=e,n.push(t),i.changed=!0):console.warn("Sort Warning - Sort field does not exist and is being ignored: ",t.column)})),i.sortList=n,this.dispatch("sort-changed")}clear(){this.setSort([])}findSorter(t){var e,i=this.table.rowManager.activeRows[0],n="string";if(i&&(i=i.getData(),t.getField()))switch(typeof(e=t.getFieldValue(i))){case"undefined":n="string";break;case"boolean":n="boolean";break;default:isNaN(e)||""===e?e.match(/((^[0-9]+[a-z]+)|(^[a-z]+[0-9]+))+$/i)&&(n="alphanum"):n="number"}return Mt.sorters[n]}sort(t){var e=this,i=this.table.options.sortOrderReverse?e.sortList.slice().reverse():e.sortList,n=[],o=[];return this.subscribedExternal("dataSorting")&&this.dispatchExternal("dataSorting",e.getSort()),e.clearColumnHeaders(),"remote"!==this.table.options.sortMode?(i.forEach((function(t,i){var o;t.column&&((o=t.column.modules.sort)&&(o.sorter||(o.sorter=e.findSorter(t.column)),t.params="function"==typeof o.params?o.params(t.column.getComponent(),t.dir):o.params,n.push(t)),e.setColumnHeader(t.column,t.dir))})),n.length&&e._sortItems(t,n)):i.forEach((function(t,i){e.setColumnHeader(t.column,t.dir)})),this.subscribedExternal("dataSorted")&&(t.forEach((t=>{o.push(t.getComponent())})),this.dispatchExternal("dataSorted",e.getSort(),o)),t}clearColumnHeaders(){this.table.columnManager.getRealColumns().forEach((t=>{t.modules.sort&&(t.modules.sort.dir="none",t.getElement().setAttribute("aria-sort","none"),this.setColumnHeaderSortIcon(t,"none"))}))}setColumnHeader(t,e){t.modules.sort.dir=e,t.getElement().setAttribute("aria-sort","asc"===e?"ascending":"descending"),this.setColumnHeaderSortIcon(t,e)}setColumnHeaderSortIcon(t,e){var i,n=t.modules.sort.element;if(t.definition.headerSort&&"function"==typeof this.table.options.headerSortElement){for(;n.firstChild;)n.removeChild(n.firstChild);"object"==typeof(i=this.table.options.headerSortElement.call(this.table,t.getComponent(),e))?n.appendChild(i):n.innerHTML=i}}_sortItems(t,e){var i=e.length-1;t.sort(((t,n)=>{for(var o,r=i;r>=0;r--){let i=e[r];if(0!==(o=this._sortRow(t,n,i.column,i.dir,i.params)))break}return o}))}_sortRow(t,e,i,n,o){var r,a,l="asc"==n?t:e,s="asc"==n?e:t;return t=void 0!==(t=i.getFieldValue(l.getData()))?t:"",e=void 0!==(e=i.getFieldValue(s.getData()))?e:"",r=l.getComponent(),a=s.getComponent(),i.modules.sort.sorter.call(this,t,e,r,a,i.getComponent(),n,o)}}Mt.moduleName="sort",Mt.sorters=zt;class Lt extends E{constructor(t){super(t),this.tooltipSubscriber=null,this.headerSubscriber=null,this.timeout=null,this.popupInstance=null,this.registerTableOption("tooltipGenerationMode",void 0),this.registerTableOption("tooltipDelay",300),this.registerColumnOption("tooltip"),this.registerColumnOption("headerTooltip")}initialize(){this.deprecatedOptionsCheck(),this.subscribe("column-init",this.initializeColumn.bind(this))}deprecatedOptionsCheck(){this.deprecationCheckMsg("tooltipGenerationMode","This option is no longer needed as tooltips are always generated on hover now")}initializeColumn(t){t.definition.headerTooltip&&!this.headerSubscriber&&(this.headerSubscriber=!0,this.subscribe("column-mousemove",this.mousemoveCheck.bind(this,"headerTooltip")),this.subscribe("column-mouseout",this.mouseoutCheck.bind(this,"headerTooltip"))),t.definition.tooltip&&!this.tooltipSubscriber&&(this.tooltipSubscriber=!0,this.subscribe("cell-mousemove",this.mousemoveCheck.bind(this,"tooltip")),this.subscribe("cell-mouseout",this.mouseoutCheck.bind(this,"tooltip")))}mousemoveCheck(t,e,i){var n="tooltip"===t?i.column.definition.tooltip:i.definition.headerTooltip;n&&(this.clearPopup(),this.timeout=setTimeout(this.loadTooltip.bind(this,e,i,n),this.table.options.tooltipDelay))}mouseoutCheck(t,e,i){this.popupInstance||this.clearPopup()}clearPopup(t,e,i){clearTimeout(this.timeout),this.timeout=null,this.popupInstance&&this.popupInstance.hide()}loadTooltip(t,e,i){var n,o,r;"function"==typeof i&&(i=i(t,e.getComponent(),(function(t){o=t}))),i instanceof HTMLElement?n=i:(n=document.createElement("div"),!0===i&&(e instanceof S?i=e.value:e.definition.field?this.langBind("columns|"+e.definition.field,(t=>{n.innerHTML=i=t||e.definition.title})):i=e.definition.title),n.innerHTML=i),(i||0===i||!1===i)&&(n.classList.add("tabulator-tooltip"),n.addEventListener("mousemove",(t=>t.preventDefault())),this.popupInstance=this.popup(n),"function"==typeof o&&this.popupInstance.renderCallback(o),r=this.popupInstance.containerEventCoords(t),this.popupInstance.show(r.x+15,r.y+15).hideOnBlur((()=>{this.dispatchExternal("TooltipClosed",e.getComponent()),this.popupInstance=null})),this.dispatchExternal("TooltipOpened",e.getComponent()))}}Lt.moduleName="tooltip";var St={integer:function(t,e,i){return""===e||null==e||(e=Number(e),!isNaN(e)&&isFinite(e)&&Math.floor(e)===e)},float:function(t,e,i){return""===e||null==e||(e=Number(e),!isNaN(e)&&isFinite(e)&&e%1!=0)},numeric:function(t,e,i){return""===e||null==e||!isNaN(e)},string:function(t,e,i){return""===e||null==e||isNaN(e)},max:function(t,e,i){return""===e||null==e||parseFloat(e)<=i},min:function(t,e,i){return""===e||null==e||parseFloat(e)>=i},starts:function(t,e,i){return""===e||null==e||String(e).toLowerCase().startsWith(String(i).toLowerCase())},ends:function(t,e,i){return""===e||null==e||String(e).toLowerCase().endsWith(String(i).toLowerCase())},minLength:function(t,e,i){return""===e||null==e||String(e).length>=i},maxLength:function(t,e,i){return""===e||null==e||String(e).length<=i},in:function(t,e,i){return""===e||null==e||("string"==typeof i&&(i=i.split("|")),i.indexOf(e)>-1)},regex:function(t,e,i){return""===e||null==e||new RegExp(i).test(e)},unique:function(t,e,i){if(""===e||null==e)return!0;var n=!0,o=t.getData(),r=t.getColumn()._getSelf();return this.table.rowManager.rows.forEach((function(t){var i=t.getData();i!==o&&e==r.getFieldValue(i)&&(n=!1)})),n},required:function(t,e,i){return""!==e&&null!=e}};class Dt extends E{constructor(t){super(t),this.invalidCells=[],this.registerTableOption("validationMode","blocking"),this.registerColumnOption("validator"),this.registerTableFunction("getInvalidCells",this.getInvalidCells.bind(this)),this.registerTableFunction("clearCellValidation",this.userClearCellValidation.bind(this)),this.registerTableFunction("validate",this.userValidate.bind(this)),this.registerComponentFunction("cell","isValid",this.cellIsValid.bind(this)),this.registerComponentFunction("cell","clearValidation",this.clearValidation.bind(this)),this.registerComponentFunction("cell","validate",this.cellValidate.bind(this)),this.registerComponentFunction("column","validate",this.columnValidate.bind(this)),this.registerComponentFunction("row","validate",this.rowValidate.bind(this))}initialize(){this.subscribe("cell-delete",this.clearValidation.bind(this)),this.subscribe("column-layout",this.initializeColumnCheck.bind(this)),this.subscribe("edit-success",this.editValidate.bind(this)),this.subscribe("edit-editor-clear",this.editorClear.bind(this)),this.subscribe("edit-edited-clear",this.editedClear.bind(this))}editValidate(t,e,i){var n="manual"===this.table.options.validationMode||this.validate(t.column.modules.validate,t,e);return!0!==n&&setTimeout((()=>{t.getElement().classList.add("tabulator-validation-fail"),this.dispatchExternal("validationFailed",t.getComponent(),e,n)})),n}editorClear(t,e){e&&t.column.modules.validate&&this.cellValidate(t),t.getElement().classList.remove("tabulator-validation-fail")}editedClear(t){t.modules.validate&&(t.modules.validate.invalid=!1)}cellIsValid(t){return t.modules.validate&&t.modules.validate.invalid||!0}cellValidate(t){return this.validate(t.column.modules.validate,t,t.getValue())}columnValidate(t){var e=[];return t.cells.forEach((t=>{!0!==this.cellValidate(t)&&e.push(t.getComponent())})),!e.length||e}rowValidate(t){var e=[];return t.cells.forEach((t=>{!0!==this.cellValidate(t)&&e.push(t.getComponent())})),!e.length||e}userClearCellValidation(t){t||(t=this.getInvalidCells()),Array.isArray(t)||(t=[t]),t.forEach((t=>{this.clearValidation(t._getSelf())}))}userValidate(t){var e=[];return this.table.rowManager.rows.forEach((t=>{var i=(t=t.getComponent()).validate();!0!==i&&(e=e.concat(i))})),!e.length||e}initializeColumnCheck(t){void 0!==t.definition.validator&&this.initializeColumn(t)}initializeColumn(t){var e,i=this,n=[];t.definition.validator&&(Array.isArray(t.definition.validator)?t.definition.validator.forEach((t=>{(e=i._extractValidator(t))&&n.push(e)})):(e=this._extractValidator(t.definition.validator))&&n.push(e),t.modules.validate=!!n.length&&n)}_extractValidator(t){var e,i,n;switch(typeof t){case"string":return(n=t.indexOf(":"))>-1?(e=t.substring(0,n),i=t.substring(n+1)):e=t,this._buildValidator(e,i);case"function":return this._buildValidator(t);case"object":return this._buildValidator(t.type,t.parameters)}}_buildValidator(t,e){var i="function"==typeof t?t:Dt.validators[t];return i?{type:"function"==typeof t?"function":t,func:i,params:e}:(console.warn("Validator Setup Error - No matching validator found:",t),!1)}validate(t,e,i){var n=this,o=[],r=this.invalidCells.indexOf(e);return t&&t.forEach((t=>{t.func.call(n,e.getComponent(),i,t.params)||o.push({type:t.type,parameters:t.params})})),e.modules.validate||(e.modules.validate={}),o.length?(e.modules.validate.invalid=o,"manual"!==this.table.options.validationMode&&e.getElement().classList.add("tabulator-validation-fail"),-1==r&&this.invalidCells.push(e)):(e.modules.validate.invalid=!1,e.getElement().classList.remove("tabulator-validation-fail"),r>-1&&this.invalidCells.splice(r,1)),!o.length||o}getInvalidCells(){var t=[];return this.invalidCells.forEach((e=>{t.push(e.getComponent())})),t}clearValidation(t){var e;t.modules.validate&&t.modules.validate.invalid&&(t.getElement().classList.remove("tabulator-validation-fail"),t.modules.validate.invalid=!1,(e=this.invalidCells.indexOf(t))>-1&&this.invalidCells.splice(e,1))}}Dt.moduleName="validate",Dt.validators=St;var Pt=Object.freeze({__proto__:null,AccessorModule:y,AjaxModule:T,ClipboardModule:z,ColumnCalcsModule:W,DataTreeModule:j,DownloadModule:N,EditModule:Y,ExportModule:J,FilterModule:$,FormatModule:tt,FrozenColumnsModule:et,FrozenRowsModule:it,GroupRowsModule:rt,HistoryModule:at,HtmlTableImportModule:lt,ImportModule:ut,InteractionModule:ht,KeybindingsModule:ct,MenuModule:dt,MoveColumnsModule:pt,MoveRowsModule:bt,MutatorModule:mt,PageModule:ft,PersistenceModule:wt,PopupModule:Ct,PrintModule:Et,ReactiveDataModule:yt,ResizeColumnsModule:xt,ResizeRowsModule:Bt,ResizeTableModule:kt,ResponsiveLayoutModule:Rt,SelectRowModule:_t,SortModule:Mt,TooltipModule:Lt,ValidateModule:Dt});class It{constructor(t,e,i={}){this.table=t,this.msgType=e,this.registeredDefaults=Object.assign({},i)}register(t,e){this.registeredDefaults[t]=e}generate(t,e={}){var i=Object.assign({},this.registeredDefaults),n=this.table.options.debugInvalidOptions||!0===e.debugInvalidOptions;Object.assign(i,t);for(let t in e)i.hasOwnProperty(t)||(n&&console.warn("Invalid "+this.msgType+" option:",t),i[t]=e.key);for(let t in i)t in e?i[t]=e[t]:Array.isArray(i[t])?i[t]=Object.assign([],i[t]):"object"==typeof i[t]&&null!==i[t]?i[t]=Object.assign({},i[t]):void 0===i[t]&&delete i[t];return i}}class Ft extends v{constructor(t){super(t),this.elementVertical=t.rowManager.element,this.elementHorizontal=t.columnManager.element,this.tableElement=t.rowManager.tableElement,this.verticalFillMode="fit"}initialize(){}clearRows(){}clearColumns(){}reinitializeColumnWidths(t){}renderRows(){}renderColumns(){}rerenderRows(t){t&&t()}rerenderColumns(t,e){}renderRowCells(t){}rerenderRowCells(t,e){}scrollColumns(t,e){}scrollRows(t,e){}resize(){}scrollToRow(t){}scrollToRowNearestTop(t){}visibleRows(t){return[]}rows(){return this.table.rowManager.getDisplayRows()}styleRow(t,e){var i=t.getElement();e%2?(i.classList.add("tabulator-row-even"),i.classList.remove("tabulator-row-odd")):(i.classList.add("tabulator-row-odd"),i.classList.remove("tabulator-row-even"))}clear(){this.clearRows(),this.clearColumns()}render(){this.renderRows(),this.renderColumns()}rerender(t){this.rerenderRows(),this.rerenderColumns()}scrollToRowPosition(t,e,i){var n=this.rows().indexOf(t),o=t.getElement(),r=0;return new Promise(((a,l)=>{if(n>-1){if(void 0===i&&(i=this.table.options.scrollToRowIfVisible),!i&&w.elVisible(o)&&(r=w.elOffset(o).top-w.elOffset(this.elementVertical).top)>0&&r<this.elementVertical.clientHeight-o.offsetHeight)return a(),!1;switch(void 0===e&&(e=this.table.options.scrollToRowPosition),"nearest"===e&&(e=this.scrollToRowNearestTop(t)?"top":"bottom"),this.scrollToRow(t),e){case"middle":case"center":this.elementVertical.scrollHeight-this.elementVertical.scrollTop==this.elementVertical.clientHeight?this.elementVertical.scrollTop=this.elementVertical.scrollTop+(o.offsetTop-this.elementVertical.scrollTop)-(this.elementVertical.scrollHeight-o.offsetTop)/2:this.elementVertical.scrollTop=this.elementVertical.scrollTop-this.elementVertical.clientHeight/2;break;case"bottom":this.elementVertical.scrollHeight-this.elementVertical.scrollTop==this.elementVertical.clientHeight?this.elementVertical.scrollTop=this.elementVertical.scrollTop-(this.elementVertical.scrollHeight-o.offsetTop)+o.offsetHeight:this.elementVertical.scrollTop=this.elementVertical.scrollTop-this.elementVertical.clientHeight+o.offsetHeight;break;case"top":this.elementVertical.scrollTop=o.offsetTop}a()}else console.warn("Scroll Error - Row not visible"),l("Scroll Error - Row not visible")}))}}class Ht extends Ft{constructor(t){super(t)}renderRowCells(t,e){const i=document.createDocumentFragment();t.cells.forEach((t=>{i.appendChild(t.getElement())})),t.element.appendChild(i),e||t.cells.forEach((t=>{t.cellRendered()}))}reinitializeColumnWidths(t){t.forEach((function(t){t.reinitializeWidth()}))}}class Ot extends Ft{constructor(t){super(t),this.leftCol=0,this.rightCol=0,this.scrollLeft=0,this.vDomScrollPosLeft=0,this.vDomScrollPosRight=0,this.vDomPadLeft=0,this.vDomPadRight=0,this.fitDataColAvg=0,this.windowBuffer=200,this.visibleRows=null,this.initialized=!1,this.isFitData=!1,this.columns=[]}initialize(){this.compatibilityCheck(),this.layoutCheck(),this.vertScrollListen()}compatibilityCheck(){"fitDataTable"==this.options("layout")&&console.warn("Horizontal Virtual DOM is not compatible with fitDataTable layout mode"),this.options("responsiveLayout")&&console.warn("Horizontal Virtual DOM is not compatible with responsive columns"),this.options("rtl")&&console.warn("Horizontal Virtual DOM is not currently compatible with RTL text direction")}layoutCheck(){this.isFitData=this.options("layout").startsWith("fitData")}vertScrollListen(){this.subscribe("scroll-vertical",this.clearVisRowCache.bind(this)),this.subscribe("data-refreshed",this.clearVisRowCache.bind(this))}clearVisRowCache(){this.visibleRows=null}renderColumns(t,e){this.dataChange()}scrollColumns(t,e){this.scrollLeft!=t&&(this.scrollLeft=t,this.scroll(t-(this.vDomScrollPosLeft+this.windowBuffer)))}calcWindowBuffer(){var t=this.elementVertical.clientWidth;this.table.columnManager.columnsByIndex.forEach((e=>{if(e.visible){var i=e.getWidth();i>t&&(t=i)}})),this.windowBuffer=2*t}rerenderColumns(t,e){var i={cols:this.columns,leftCol:this.leftCol,rightCol:this.rightCol},n=0;t&&!this.initialized||(this.clear(),this.calcWindowBuffer(),this.scrollLeft=this.elementVertical.scrollLeft,this.vDomScrollPosLeft=this.scrollLeft-this.windowBuffer,this.vDomScrollPosRight=this.scrollLeft+this.elementVertical.clientWidth+this.windowBuffer,this.table.columnManager.columnsByIndex.forEach((t=>{var e,i={};t.visible&&(t.modules.frozen||(e=t.getWidth(),i.leftPos=n,i.rightPos=n+e,i.width=e,this.isFitData&&(i.fitDataCheck=!t.modules.vdomHoz||t.modules.vdomHoz.fitDataCheck),n+e>this.vDomScrollPosLeft&&n<this.vDomScrollPosRight?(-1==this.leftCol&&(this.leftCol=this.columns.length,this.vDomPadLeft=n),this.rightCol=this.columns.length):-1!==this.leftCol&&(this.vDomPadRight+=e),this.columns.push(t),t.modules.vdomHoz=i,n+=e))})),this.tableElement.style.paddingLeft=this.vDomPadLeft+"px",this.tableElement.style.paddingRight=this.vDomPadRight+"px",this.initialized=!0,e||t&&!this.reinitChanged(i)||this.reinitializeRows(),this.elementVertical.scrollLeft=this.scrollLeft)}renderRowCells(t){if(this.initialized)this.initializeRow(t);else{const e=document.createDocumentFragment();t.cells.forEach((t=>{e.appendChild(t.getElement())})),t.element.appendChild(e),t.cells.forEach((t=>{t.cellRendered()}))}}rerenderRowCells(t,e){this.reinitializeRow(t,e)}reinitializeColumnWidths(t){for(let t=this.leftCol;t<=this.rightCol;t++)this.columns[t].reinitializeWidth()}deinitialize(){this.initialized=!1}clear(){this.columns=[],this.leftCol=-1,this.rightCol=0,this.vDomScrollPosLeft=0,this.vDomScrollPosRight=0,this.vDomPadLeft=0,this.vDomPadRight=0}dataChange(){var t,e,i=!1;if(this.isFitData){if(this.table.columnManager.columnsByIndex.forEach((t=>{!t.definition.width&&t.visible&&(i=!0)})),i&&this.table.rowManager.getDisplayRows().length&&(this.vDomScrollPosRight=this.scrollLeft+this.elementVertical.clientWidth+this.windowBuffer,t=this.chain("rows-sample",[1],[],(()=>this.table.rowManager.getDisplayRows()))[0])){e=t.getElement(),t.generateCells(),this.tableElement.appendChild(e);for(let i=0;i<t.cells.length;i++){let n=t.cells[i];e.appendChild(n.getElement()),n.column.reinitializeWidth()}e.parentNode.removeChild(e),this.rerenderColumns(!1,!0)}}else"fitColumns"===this.options("layout")&&(this.layoutRefresh(),this.rerenderColumns(!1,!0))}reinitChanged(t){var e=!0;return t.cols.length!==this.columns.length||t.leftCol!==this.leftCol||t.rightCol!==this.rightCol||(t.cols.forEach(((t,i)=>{t!==this.columns[i]&&(e=!1)})),!e)}reinitializeRows(){var t=this.getVisibleRows(),e=this.table.rowManager.getRows().filter((e=>!t.includes(e)));t.forEach((t=>{this.reinitializeRow(t,!0)})),e.forEach((t=>{t.deinitialize()}))}getVisibleRows(){return this.visibleRows||(this.visibleRows=this.table.rowManager.getVisibleRows()),this.visibleRows}scroll(t){this.vDomScrollPosLeft+=t,this.vDomScrollPosRight+=t,Math.abs(t)>this.windowBuffer/2?this.rerenderColumns():t>0?(this.addColRight(),this.removeColLeft()):(this.addColLeft(),this.removeColRight())}colPositionAdjust(t,e,i){for(let n=t;n<e;n++){let t=this.columns[n];t.modules.vdomHoz.leftPos+=i,t.modules.vdomHoz.rightPos+=i}}addColRight(){for(var t=!1,e=!0;e;){let i=this.columns[this.rightCol+1];i&&i.modules.vdomHoz.leftPos<=this.vDomScrollPosRight?(t=!0,this.getVisibleRows().forEach((t=>{if("group"!==t.type){var e=t.getCell(i);t.getElement().insertBefore(e.getElement(),t.getCell(this.columns[this.rightCol]).getElement().nextSibling),e.cellRendered()}})),this.fitDataColActualWidthCheck(i),this.rightCol++,this.getVisibleRows().forEach((t=>{"group"!==t.type&&(t.modules.vdomHoz.rightCol=this.rightCol)})),this.rightCol>=this.columns.length-1?this.vDomPadRight=0:this.vDomPadRight-=i.getWidth()):e=!1}t&&(this.tableElement.style.paddingRight=this.vDomPadRight+"px")}addColLeft(){for(var t=!1,e=!0;e;){let i=this.columns[this.leftCol-1];if(i)if(i.modules.vdomHoz.rightPos>=this.vDomScrollPosLeft){t=!0,this.getVisibleRows().forEach((t=>{if("group"!==t.type){var e=t.getCell(i);t.getElement().insertBefore(e.getElement(),t.getCell(this.columns[this.leftCol]).getElement()),e.cellRendered()}})),this.leftCol--,this.getVisibleRows().forEach((t=>{"group"!==t.type&&(t.modules.vdomHoz.leftCol=this.leftCol)})),this.leftCol<=0?this.vDomPadLeft=0:this.vDomPadLeft-=i.getWidth();let e=this.fitDataColActualWidthCheck(i);e&&(this.scrollLeft=this.elementVertical.scrollLeft=this.elementVertical.scrollLeft+e,this.vDomPadRight-=e)}else e=!1;else e=!1}t&&(this.tableElement.style.paddingLeft=this.vDomPadLeft+"px")}removeColRight(){for(var t=!1,e=!0;e;){let i=this.columns[this.rightCol];i&&i.modules.vdomHoz.leftPos>this.vDomScrollPosRight?(t=!0,this.getVisibleRows().forEach((t=>{if("group"!==t.type){var e=t.getCell(i);try{t.getElement().removeChild(e.getElement())}catch(t){console.warn("Could not removeColRight",t.message)}}})),this.vDomPadRight+=i.getWidth(),this.rightCol--,this.getVisibleRows().forEach((t=>{"group"!==t.type&&(t.modules.vdomHoz.rightCol=this.rightCol)}))):e=!1}t&&(this.tableElement.style.paddingRight=this.vDomPadRight+"px")}removeColLeft(){for(var t=!1,e=!0;e;){let i=this.columns[this.leftCol];i&&i.modules.vdomHoz.rightPos<this.vDomScrollPosLeft?(t=!0,this.getVisibleRows().forEach((t=>{if("group"!==t.type){var e=t.getCell(i);try{t.getElement().removeChild(e.getElement())}catch(t){console.warn("Could not removeColLeft",t.message)}}})),this.vDomPadLeft+=i.getWidth(),this.leftCol++,this.getVisibleRows().forEach((t=>{"group"!==t.type&&(t.modules.vdomHoz.leftCol=this.leftCol)}))):e=!1}t&&(this.tableElement.style.paddingLeft=this.vDomPadLeft+"px")}fitDataColActualWidthCheck(t){var e,i;return t.modules.vdomHoz.fitDataCheck&&(t.reinitializeWidth(),(i=(e=t.getWidth())-t.modules.vdomHoz.width)&&(t.modules.vdomHoz.rightPos+=i,t.modules.vdomHoz.width=e,this.colPositionAdjust(this.columns.indexOf(t)+1,this.columns.length,i)),t.modules.vdomHoz.fitDataCheck=!1),i}initializeRow(t){if("group"!==t.type){t.modules.vdomHoz={leftCol:this.leftCol,rightCol:this.rightCol},this.table.modules.frozenColumns&&this.table.modules.frozenColumns.leftColumns.forEach((e=>{this.appendCell(t,e)}));for(let e=this.leftCol;e<=this.rightCol;e++)this.appendCell(t,this.columns[e]);this.table.modules.frozenColumns&&this.table.modules.frozenColumns.rightColumns.forEach((e=>{this.appendCell(t,e)}))}}appendCell(t,e){if(e&&e.visible){let i=t.getCell(e);t.getElement().appendChild(i.getElement()),i.cellRendered()}}reinitializeRow(t,e){if("group"!==t.type&&(e||!t.modules.vdomHoz||t.modules.vdomHoz.leftCol!==this.leftCol||t.modules.vdomHoz.rightCol!==this.rightCol)){for(var i=t.getElement();i.firstChild;)i.removeChild(i.firstChild);this.initializeRow(t)}}}class Wt extends v{constructor(t){super(t),this.blockHozScrollEvent=!1,this.headersElement=null,this.contentsElement=null,this.element=null,this.columns=[],this.columnsByIndex=[],this.columnsByField={},this.scrollLeft=0,this.optionsList=new It(this.table,"column definition",P),this.redrawBlock=!1,this.redrawBlockUpdate=null,this.renderer=null}initialize(){this.initializeRenderer(),this.headersElement=this.createHeadersElement(),this.contentsElement=this.createHeaderContentsElement(),this.element=this.createHeaderElement(),this.contentsElement.insertBefore(this.headersElement,this.contentsElement.firstChild),this.element.insertBefore(this.contentsElement,this.element.firstChild),this.initializeScrollWheelWatcher(),this.subscribe("scroll-horizontal",this.scrollHorizontal.bind(this)),this.subscribe("scrollbar-vertical",this.padVerticalScrollbar.bind(this))}padVerticalScrollbar(t){this.table.rtl?this.headersElement.style.marginLeft=t+"px":this.headersElement.style.marginRight=t+"px"}initializeRenderer(){var t,e={virtual:Ot,basic:Ht};(t="string"==typeof this.table.options.renderHorizontal?e[this.table.options.renderHorizontal]:this.table.options.renderHorizontal)?(this.renderer=new t(this.table,this.element,this.tableElement),this.renderer.initialize()):console.error("Unable to find matching renderer:",this.table.options.renderHorizontal)}createHeadersElement(){var t=document.createElement("div");return t.classList.add("tabulator-headers"),t.setAttribute("role","row"),t}createHeaderContentsElement(){var t=document.createElement("div");return t.classList.add("tabulator-header-contents"),t.setAttribute("role","rowgroup"),t}createHeaderElement(){var t=document.createElement("div");return t.classList.add("tabulator-header"),t.setAttribute("role","rowgroup"),this.table.options.headerVisible||t.classList.add("tabulator-header-hidden"),t}getElement(){return this.element}getContentsElement(){return this.contentsElement}getHeadersElement(){return this.headersElement}scrollHorizontal(t){this.contentsElement.scrollLeft=t,this.scrollLeft=t,this.renderer.scrollColumns(t)}initializeScrollWheelWatcher(){this.contentsElement.addEventListener("wheel",(t=>{var e;t.deltaX&&(e=this.contentsElement.scrollLeft+t.deltaX,this.table.rowManager.scrollHorizontal(e),this.table.columnManager.scrollHorizontal(e))}))}generateColumnsFromRowData(t){var e,i,n=[],o=this.table.options.autoColumnsDefinitions;if(t&&t.length){for(var r in e=t[0]){let t={field:r,title:r},o=e[r];switch(typeof o){case"undefined":i="string";break;case"boolean":i="boolean";break;case"object":i=Array.isArray(o)?"array":"string";break;default:i=isNaN(o)||""===o?o.match(/((^[0-9]+[a-z]+)|(^[a-z]+[0-9]+))+$/i)?"alphanum":"string":"number"}t.sorter=i,n.push(t)}if(o)switch(typeof o){case"function":this.table.options.columns=o.call(this.table,n);break;case"object":Array.isArray(o)?n.forEach((t=>{var e=o.find((e=>e.field===t.field));e&&Object.assign(t,e)})):n.forEach((t=>{o[t.field]&&Object.assign(t,o[t.field])})),this.table.options.columns=n}else this.table.options.columns=n;this.setColumns(this.table.options.columns)}}setColumns(t,e){for(;this.headersElement.firstChild;)this.headersElement.removeChild(this.headersElement.firstChild);this.columns=[],this.columnsByIndex=[],this.columnsByField={},this.dispatch("columns-loading"),t.forEach(((t,e)=>{this._addColumn(t)})),this._reIndexColumns(),this.dispatch("columns-loaded"),this.rerenderColumns(!1,!0),this.redraw(!0)}_addColumn(t,e,i){var n=new I(t,this),o=n.getElement(),r=i?this.findColumnIndex(i):i;if(i&&r>-1){var a=i.getTopColumn(),l=this.columns.indexOf(a),s=a.getElement();e?(this.columns.splice(l,0,n),s.parentNode.insertBefore(o,s)):(this.columns.splice(l+1,0,n),s.parentNode.insertBefore(o,s.nextSibling))}else e?(this.columns.unshift(n),this.headersElement.insertBefore(n.getElement(),this.headersElement.firstChild)):(this.columns.push(n),this.headersElement.appendChild(n.getElement()));return n.columnRendered(),n}registerColumnField(t){t.definition.field&&(this.columnsByField[t.definition.field]=t)}registerColumnPosition(t){this.columnsByIndex.push(t)}_reIndexColumns(){this.columnsByIndex=[],this.columns.forEach((function(t){t.reRegisterPosition()}))}verticalAlignHeaders(){var t=0;this.redrawBlock||(this.headersElement.style.height="",this.columns.forEach((t=>{t.clearVerticalAlign()})),this.columns.forEach((e=>{var i=e.getHeight();i>t&&(t=i)})),this.headersElement.style.height=t+"px",this.columns.forEach((e=>{e.verticalAlign(this.table.options.columnHeaderVertAlign,t)})),this.table.rowManager.adjustTableSize())}findColumn(t){var e;return"object"!=typeof t?this.columnsByField[t]||!1:t instanceof I?t:t instanceof D?t._getSelf()||!1:"undefined"!=typeof HTMLElement&&t instanceof HTMLElement&&(e=[],this.columns.forEach((t=>{e.push(t),e=e.concat(t.getColumns(!0))})),e.find((e=>e.element===t))||!1)}getColumnByField(t){return this.columnsByField[t]}getColumnsByFieldRoot(t){var e=[];return Object.keys(this.columnsByField).forEach((i=>{i.split(".")[0]===t&&e.push(this.columnsByField[i])})),e}getColumnByIndex(t){return this.columnsByIndex[t]}getFirstVisibleColumn(){var t=this.columnsByIndex.findIndex((t=>t.visible));return t>-1&&this.columnsByIndex[t]}getColumns(){return this.columns}findColumnIndex(t){return this.columnsByIndex.findIndex((e=>t===e))}getRealColumns(){return this.columnsByIndex}traverse(t){this.columnsByIndex.forEach(((e,i)=>{t(e,i)}))}getDefinitions(t){var e=[];return this.columnsByIndex.forEach((i=>{(!t||t&&i.visible)&&e.push(i.getDefinition())})),e}getDefinitionTree(){var t=[];return this.columns.forEach((e=>{t.push(e.getDefinition(!0))})),t}getComponents(t){var e=[];return(t?this.columns:this.columnsByIndex).forEach((t=>{e.push(t.getComponent())})),e}getWidth(){var t=0;return this.columnsByIndex.forEach((e=>{e.visible&&(t+=e.getWidth())})),t}moveColumn(t,e,i){e.element.parentNode.insertBefore(t.element,e.element),i&&e.element.parentNode.insertBefore(e.element,t.element),this.moveColumnActual(t,e,i),this.verticalAlignHeaders(),this.table.rowManager.reinitialize()}moveColumnActual(t,e,i){t.parent.isGroup?this._moveColumnInArray(t.parent.columns,t,e,i):this._moveColumnInArray(this.columns,t,e,i),this._moveColumnInArray(this.columnsByIndex,t,e,i,!0),this.rerenderColumns(!0),this.dispatch("column-moved",t,e,i),this.subscribedExternal("columnMoved")&&this.dispatchExternal("columnMoved",t.getComponent(),this.table.columnManager.getComponents())}_moveColumnInArray(t,e,i,n,o){var r,a=t.indexOf(e);a>-1&&(t.splice(a,1),(r=t.indexOf(i))>-1?n&&(r+=1):r=a,t.splice(r,0,e),o&&(this.chain("column-moving-rows",[e,i,n],null,[])||[]).concat(this.table.rowManager.rows).forEach((function(t){if(t.cells.length){var e=t.cells.splice(a,1)[0];t.cells.splice(r,0,e)}})))}scrollToColumn(t,e,i){var n=0,o=t.getLeftOffset(),r=0,a=t.getElement();return new Promise(((l,s)=>{if(void 0===e&&(e=this.table.options.scrollToColumnPosition),void 0===i&&(i=this.table.options.scrollToColumnIfVisible),t.visible){switch(e){case"middle":case"center":r=-this.element.clientWidth/2;break;case"right":r=a.clientWidth-this.headersElement.clientWidth}if(!i&&o>0&&o+a.offsetWidth<this.element.clientWidth)return!1;n=o+r,n=Math.max(Math.min(n,this.table.rowManager.element.scrollWidth-this.table.rowManager.element.clientWidth),0),this.table.rowManager.scrollHorizontal(n),this.scrollHorizontal(n),l()}else console.warn("Scroll Error - Column not visible"),s("Scroll Error - Column not visible")}))}generateCells(t){var e=[];return this.columnsByIndex.forEach((i=>{e.push(i.generateCell(t))})),e}getFlexBaseWidth(){var t=this.table.element.clientWidth,e=0;return this.table.rowManager.element.scrollHeight>this.table.rowManager.element.clientHeight&&(t-=this.table.rowManager.element.offsetWidth-this.table.rowManager.element.clientWidth),this.columnsByIndex.forEach((function(i){var n,o,r;i.visible&&(n=i.definition.width||0,o=parseInt(i.minWidth),r="string"==typeof n?n.indexOf("%")>-1?t/100*parseInt(n):parseInt(n):n,e+=r>o?r:o)})),e}addColumn(t,e,i){return new Promise(((n,o)=>{var r=this._addColumn(t,e,i);this._reIndexColumns(),this.dispatch("column-add",t,e,i),"fitColumns"!=this.layoutMode()&&r.reinitializeWidth(),this.redraw(!0),this.table.rowManager.reinitialize(),this.rerenderColumns(),n(r)}))}deregisterColumn(t){var e,i=t.getField();i&&delete this.columnsByField[i],(e=this.columnsByIndex.indexOf(t))>-1&&this.columnsByIndex.splice(e,1),(e=this.columns.indexOf(t))>-1&&this.columns.splice(e,1),this.verticalAlignHeaders(),this.redraw()}rerenderColumns(t,e){this.redrawBlock?(!1===t||!0===t&&null===this.redrawBlockUpdate)&&(this.redrawBlockUpdate=t):this.renderer.rerenderColumns(t,e)}blockRedraw(){this.redrawBlock=!0,this.redrawBlockUpdate=null}restoreRedraw(){this.redrawBlock=!1,this.verticalAlignHeaders(),this.renderer.rerenderColumns(this.redrawBlockUpdate)}redraw(t){w.elVisible(this.element)&&this.verticalAlignHeaders(),t&&(this.table.rowManager.resetScroll(),this.table.rowManager.reinitialize()),this.confirm("table-redrawing",t)||this.layoutRefresh(t),this.dispatch("table-redraw",t),this.table.footerManager.redraw()}}class jt extends Ft{constructor(t){super(t),this.verticalFillMode="fill",this.scrollTop=0,this.scrollLeft=0,this.scrollTop=0,this.scrollLeft=0}clearRows(){for(var t=this.tableElement;t.firstChild;)t.removeChild(t.firstChild);t.scrollTop=0,t.scrollLeft=0,t.style.minWidth="",t.style.minHeight="",t.style.display="",t.style.visibility=""}renderRows(){var t=this.tableElement,e=!0,i=document.createDocumentFragment(),n=this.rows();n.forEach(((t,n)=>{this.styleRow(t,n),t.initialize(!1,!0),"group"!==t.type&&(e=!1),i.appendChild(t.getElement())})),t.appendChild(i),n.forEach((t=>{t.rendered(),t.heightInitialized||t.calcHeight(!0)})),n.forEach((t=>{t.heightInitialized||t.setCellHeight()})),t.style.minWidth=e?this.table.columnManager.getWidth()+"px":""}rerenderRows(t){this.clearRows(),t&&t(),this.renderRows()}scrollToRowNearestTop(t){var e=w.elOffset(t.getElement()).top;return!(Math.abs(this.elementVertical.scrollTop-e)>Math.abs(this.elementVertical.scrollTop+this.elementVertical.clientHeight-e))}scrollToRow(t){var e=t.getElement();this.elementVertical.scrollTop=w.elOffset(e).top-w.elOffset(this.elementVertical).top+this.elementVertical.scrollTop}visibleRows(t){return this.rows()}}class Vt extends Ft{constructor(t){super(t),this.verticalFillMode="fill",this.scrollTop=0,this.scrollLeft=0,this.vDomRowHeight=20,this.vDomTop=0,this.vDomBottom=0,this.vDomScrollPosTop=0,this.vDomScrollPosBottom=0,this.vDomTopPad=0,this.vDomBottomPad=0,this.vDomMaxRenderChain=90,this.vDomWindowBuffer=0,this.vDomWindowMinTotalRows=20,this.vDomWindowMinMarginRows=5,this.vDomTopNewRows=[],this.vDomBottomNewRows=[]}clearRows(){for(var t=this.tableElement;t.firstChild;)t.removeChild(t.firstChild);t.style.paddingTop="",t.style.paddingBottom="",t.style.minHeight="",t.style.display="",t.style.visibility="",this.elementVertical.scrollTop=0,this.elementVertical.scrollLeft=0,this.scrollTop=0,this.scrollLeft=0,this.vDomTop=0,this.vDomBottom=0,this.vDomTopPad=0,this.vDomBottomPad=0,this.vDomScrollPosTop=0,this.vDomScrollPosBottom=0}renderRows(){this._virtualRenderFill()}rerenderRows(t){for(var e=this.elementVertical.scrollTop,i=!1,n=!1,o=this.table.rowManager.scrollLeft,r=this.rows(),a=this.vDomTop;a<=this.vDomBottom;a++)if(r[a]){var l=e-r[a].getElement().offsetTop;if(!(!1===n||Math.abs(l)<n))break;n=l,i=a}r.forEach((t=>{t.deinitializeHeight()})),t&&t(),this.rows().length?this._virtualRenderFill(!1===i?this.rows.length-1:i,!0,n||0):(this.clear(),this.table.rowManager.tableEmpty()),this.scrollColumns(o)}scrollColumns(t){this.table.rowManager.scrollHorizontal(t)}scrollRows(t,e){var i=t-this.vDomScrollPosTop,n=t-this.vDomScrollPosBottom,o=2*this.vDomWindowBuffer,r=this.rows();if(this.scrollTop=t,-i>o||n>o){var a=this.table.rowManager.scrollLeft;this._virtualRenderFill(Math.floor(this.elementVertical.scrollTop/this.elementVertical.scrollHeight*r.length)),this.scrollColumns(a)}else e?(i<0&&this._addTopRow(r,-i),n<0&&(this.vDomScrollHeight-this.scrollTop>this.vDomWindowBuffer?this._removeBottomRow(r,-n):this.vDomScrollPosBottom=this.scrollTop)):(n>=0&&this._addBottomRow(r,n),i>=0&&(this.scrollTop>this.vDomWindowBuffer?this._removeTopRow(r,i):this.vDomScrollPosTop=this.scrollTop))}resize(){this.vDomWindowBuffer=this.table.options.renderVerticalBuffer||this.elementVertical.clientHeight}scrollToRowNearestTop(t){var e=this.rows().indexOf(t);return!(Math.abs(this.vDomTop-e)>Math.abs(this.vDomBottom-e))}scrollToRow(t){var e=this.rows().indexOf(t);e>-1&&this._virtualRenderFill(e,!0)}visibleRows(t){var e=this.elementVertical.scrollTop,i=this.elementVertical.clientHeight+e,n=!1,o=0,r=0,a=this.rows();if(t)o=this.vDomTop,r=this.vDomBottom;else for(var l=this.vDomTop;l<=this.vDomBottom;l++)if(a[l])if(n){if(!(i-a[l].getElement().offsetTop>=0))break;r=l}else if(e-a[l].getElement().offsetTop>=0)o=l;else{if(n=!0,!(i-a[l].getElement().offsetTop>=0))break;r=l}return a.slice(o,r+1)}_virtualRenderFill(t,e,i){var n,o,r=this.tableElement,a=this.elementVertical,l=0,s=0,u=0,h=0,c=0,d=0,p=this.rows(),b=p.length,m=0,g=[],f=0,A=0,v=this.table.rowManager.fixedHeight,C=this.elementVertical.clientHeight,E=this.table.options.rowHeight,y=!0;if(i=i||0,t=t||0){for(;r.firstChild;)r.removeChild(r.firstChild);(h=(b-t+1)*this.vDomRowHeight)<C&&(t-=Math.ceil((C-h)/this.vDomRowHeight))<0&&(t=0),t-=l=Math.min(Math.max(Math.floor(this.vDomWindowBuffer/this.vDomRowHeight),this.vDomWindowMinMarginRows),t)}else this.clear();if(b&&w.elVisible(this.elementVertical)){for(this.vDomTop=t,this.vDomBottom=t-1,v||this.table.options.maxHeight?(E&&(A=C/E+this.vDomWindowBuffer/E),A=Math.max(this.vDomWindowMinTotalRows,Math.ceil(A))):A=b;(A==b||s<=C+this.vDomWindowBuffer||f<this.vDomWindowMinTotalRows)&&this.vDomBottom<b-1;){for(g=[],o=document.createDocumentFragment(),d=0;d<A&&this.vDomBottom<b-1;)n=p[m=this.vDomBottom+1],this.styleRow(n,m),n.initialize(!1,!0),n.heightInitialized||this.table.options.rowHeight||n.clearCellHeight(),o.appendChild(n.getElement()),g.push(n),this.vDomBottom++,d++;if(!g.length)break;r.appendChild(o),g.forEach((t=>{t.rendered(),t.heightInitialized||t.calcHeight(!0)})),g.forEach((t=>{t.heightInitialized||t.setCellHeight()})),g.forEach((t=>{u=t.getHeight(),f<l?c+=u:s+=u,u>this.vDomWindowBuffer&&(this.vDomWindowBuffer=2*u),f++})),y=this.table.rowManager.adjustTableSize(),C=this.elementVertical.clientHeight,y&&(v||this.table.options.maxHeight)&&(E=s/f,A=Math.max(this.vDomWindowMinTotalRows,Math.ceil(C/E+this.vDomWindowBuffer/E)))}t?(this.vDomTopPad=e?this.vDomRowHeight*this.vDomTop+i:this.scrollTop-c,this.vDomBottomPad=this.vDomBottom==b-1?0:Math.max(this.vDomScrollHeight-this.vDomTopPad-s-c,0)):(this.vDomTopPad=0,this.vDomRowHeight=Math.floor((s+c)/f),this.vDomBottomPad=this.vDomRowHeight*(b-this.vDomBottom-1),this.vDomScrollHeight=c+s+this.vDomBottomPad-C),r.style.paddingTop=this.vDomTopPad+"px",r.style.paddingBottom=this.vDomBottomPad+"px",e&&(this.scrollTop=this.vDomTopPad+c+i-(this.elementVertical.scrollWidth>this.elementVertical.clientWidth?this.elementVertical.offsetHeight-C:0)),this.scrollTop=Math.min(this.scrollTop,this.elementVertical.scrollHeight-C),this.elementVertical.scrollWidth>this.elementVertical.clientWidth&&e&&(this.scrollTop+=this.elementVertical.offsetHeight-C),this.vDomScrollPosTop=this.scrollTop,this.vDomScrollPosBottom=this.scrollTop,a.scrollTop=this.scrollTop,this.dispatch("render-virtual-fill")}}_addTopRow(t,e){for(var i=this.tableElement,n=[],o=0,r=this.vDomTop-1,a=0,l=!0;l;)if(this.vDomTop){let s,u,h=t[r];h&&a<this.vDomMaxRenderChain?(s=h.getHeight()||this.vDomRowHeight,u=h.initialized,e>=s?(this.styleRow(h,r),i.insertBefore(h.getElement(),i.firstChild),h.initialized&&h.heightInitialized||n.push(h),h.initialize(),u||(s=h.getElement().offsetHeight,s>this.vDomWindowBuffer&&(this.vDomWindowBuffer=2*s)),e-=s,o+=s,this.vDomTop--,r--,a++):l=!1):l=!1}else l=!1;for(let t of n)t.clearCellHeight();this._quickNormalizeRowHeight(n),o&&(this.vDomTopPad-=o,this.vDomTopPad<0&&(this.vDomTopPad=r*this.vDomRowHeight),r<1&&(this.vDomTopPad=0),i.style.paddingTop=this.vDomTopPad+"px",this.vDomScrollPosTop-=o)}_removeTopRow(t,e){for(var i=[],n=0,o=0,r=!0;r;){let a,l=t[this.vDomTop];l&&o<this.vDomMaxRenderChain?(a=l.getHeight()||this.vDomRowHeight,e>=a?(this.vDomTop++,e-=a,n+=a,i.push(l),o++):r=!1):r=!1}for(let t of i){let e=t.getElement();e.parentNode&&e.parentNode.removeChild(e)}n&&(this.vDomTopPad+=n,this.tableElement.style.paddingTop=this.vDomTopPad+"px",this.vDomScrollPosTop+=this.vDomTop?n:n+this.vDomWindowBuffer)}_addBottomRow(t,e){for(var i=this.tableElement,n=[],o=0,r=this.vDomBottom+1,a=0,l=!0;l;){let s,u,h=t[r];h&&a<this.vDomMaxRenderChain?(s=h.getHeight()||this.vDomRowHeight,u=h.initialized,e>=s?(this.styleRow(h,r),i.appendChild(h.getElement()),h.initialized&&h.heightInitialized||n.push(h),h.initialize(),u||(s=h.getElement().offsetHeight,s>this.vDomWindowBuffer&&(this.vDomWindowBuffer=2*s)),e-=s,o+=s,this.vDomBottom++,r++,a++):l=!1):l=!1}for(let t of n)t.clearCellHeight();this._quickNormalizeRowHeight(n),o&&(this.vDomBottomPad-=o,(this.vDomBottomPad<0||r==t.length-1)&&(this.vDomBottomPad=0),i.style.paddingBottom=this.vDomBottomPad+"px",this.vDomScrollPosBottom+=o)}_removeBottomRow(t,e){for(var i=[],n=0,o=0,r=!0;r;){let a,l=t[this.vDomBottom];l&&o<this.vDomMaxRenderChain?(a=l.getHeight()||this.vDomRowHeight,e>=a?(this.vDomBottom--,e-=a,n+=a,i.push(l),o++):r=!1):r=!1}for(let t of i){let e=t.getElement();e.parentNode&&e.parentNode.removeChild(e)}n&&(this.vDomBottomPad+=n,this.vDomBottomPad<0&&(this.vDomBottomPad=0),this.tableElement.style.paddingBottom=this.vDomBottomPad+"px",this.vDomScrollPosBottom-=n)}_quickNormalizeRowHeight(t){for(let e of t)e.calcHeight();for(let e of t)e.setCellHeight()}}class Nt extends v{constructor(t){super(t),this.element=this.createHolderElement(),this.tableElement=this.createTableElement(),this.heightFixer=this.createTableElement(),this.placeholder=null,this.placeholderContents=null,this.firstRender=!1,this.renderMode="virtual",this.fixedHeight=!1,this.rows=[],this.activeRowsPipeline=[],this.activeRows=[],this.activeRowsCount=0,this.displayRows=[],this.displayRowsCount=0,this.scrollTop=0,this.scrollLeft=0,this.redrawBlock=!1,this.redrawBlockRestoreConfig=!1,this.redrawBlockRenderInPosition=!1,this.dataPipeline=[],this.displayPipeline=[],this.scrollbarWidth=0,this.renderer=null}createHolderElement(){var t=document.createElement("div");return t.classList.add("tabulator-tableholder"),t.setAttribute("tabindex",0),t}createTableElement(){var t=document.createElement("div");return t.classList.add("tabulator-table"),t.setAttribute("role","rowgroup"),t}initializePlaceholder(){var t=this.table.options.placeholder;if("function"==typeof t&&(t=t.call(this.table)),t=this.chain("placeholder",[t],t,t)||t){let e=document.createElement("div");if(e.classList.add("tabulator-placeholder"),"string"==typeof t){let i=document.createElement("div");i.classList.add("tabulator-placeholder-contents"),i.innerHTML=t,e.appendChild(i),this.placeholderContents=i}else"undefined"!=typeof HTMLElement&&t instanceof HTMLElement?(e.appendChild(t),this.placeholderContents=t):(console.warn("Invalid placeholder provided, must be string or HTML Element",t),this.el=null);this.placeholder=e}}getElement(){return this.element}getTableElement(){return this.tableElement}initialize(){this.initializePlaceholder(),this.initializeRenderer(),this.element.appendChild(this.tableElement),this.firstRender=!0,this.element.addEventListener("scroll",(()=>{var t=this.element.scrollLeft,e=this.scrollLeft>t,i=this.element.scrollTop,n=this.scrollTop>i;this.scrollLeft!=t&&(this.scrollLeft=t,this.dispatch("scroll-horizontal",t,e),this.dispatchExternal("scrollHorizontal",t,e),this._positionPlaceholder()),this.scrollTop!=i&&(this.scrollTop=i,this.renderer.scrollRows(i,n),this.dispatch("scroll-vertical",i,n),this.dispatchExternal("scrollVertical",i,n))}))}findRow(t){return"object"!=typeof t?void 0!==t&&(this.rows.find((e=>e.data[this.table.options.index]==t))||!1):t instanceof H?t:t instanceof F?t._getSelf()||!1:"undefined"!=typeof HTMLElement&&t instanceof HTMLElement&&this.rows.find((e=>e.getElement()===t))||!1}getRowFromDataObject(t){return this.rows.find((e=>e.data===t))||!1}getRowFromPosition(t){return this.getDisplayRows().find((e=>e.getPosition()===t&&e.isDisplayed()))}scrollToRow(t,e,i){return this.renderer.scrollToRowPosition(t,e,i)}setData(t,e,i){return new Promise(((n,o)=>{e&&this.getDisplayRows().length?this.table.options.pagination?this._setDataActual(t,!0):this.reRenderInPosition((()=>{this._setDataActual(t)})):(this.table.options.autoColumns&&i&&this.table.initialized&&this.table.columnManager.generateColumnsFromRowData(t),this.resetScroll(),this._setDataActual(t)),n()}))}_setDataActual(t,e){this.dispatchExternal("dataProcessing",t),this._wipeElements(),Array.isArray(t)?(this.dispatch("data-processing",t),t.forEach(((t,e)=>{if(t&&"object"==typeof t){var i=new H(t,this);this.rows.push(i)}else console.warn("Data Loading Warning - Invalid row data detected and ignored, expecting object but received:",t)})),this.refreshActiveData(!1,!1,e),this.dispatch("data-processed",t),this.dispatchExternal("dataProcessed",t)):console.error("Data Loading Error - Unable to process data due to invalid data type \nExpecting: array \nReceived: ",typeof t,"\nData:     ",t)}_wipeElements(){this.dispatch("rows-wipe"),this.destroy(),this.adjustTableSize(),this.dispatch("rows-wiped")}destroy(){this.rows.forEach((t=>{t.wipe()})),this.rows=[],this.activeRows=[],this.activeRowsPipeline=[],this.activeRowsCount=0,this.displayRows=[],this.displayRowsCount=0}deleteRow(t,e){var i=this.rows.indexOf(t),n=this.activeRows.indexOf(t);n>-1&&this.activeRows.splice(n,1),i>-1&&this.rows.splice(i,1),this.setActiveRows(this.activeRows),this.displayRowIterator((e=>{var i=e.indexOf(t);i>-1&&e.splice(i,1)})),e||this.reRenderInPosition(),this.regenerateRowPositions(),this.dispatchExternal("rowDeleted",t.getComponent()),this.displayRowsCount||this.tableEmpty(),this.subscribedExternal("dataChanged")&&this.dispatchExternal("dataChanged",this.getData())}addRow(t,e,i,n){return this.addRowActual(t,e,i,n)}addRows(t,e,i,n){var o=[];return new Promise(((r,a)=>{e=this.findAddRowPos(e),Array.isArray(t)||(t=[t]),(void 0===i&&e||void 0!==i&&!e)&&t.reverse(),t.forEach(((t,n)=>{var r=this.addRow(t,e,i,!0);o.push(r),this.dispatch("row-added",r,t,e,i)})),this.refreshActiveData(!!n&&"displayPipeline",!1,!0),this.regenerateRowPositions(),o.length&&this._clearPlaceholder(),r(o)}))}findAddRowPos(t){return void 0===t&&(t=this.table.options.addRowPos),"pos"===t&&(t=!0),"bottom"===t&&(t=!1),t}addRowActual(t,e,i,n){var o,r,a=t instanceof H?t:new H(t||{},this),l=this.findAddRowPos(e),s=-1;return i||(r=this.chain("row-adding-position",[a,l],null,{index:i,top:l}),i=r.index,l=r.top),void 0!==i&&(i=this.findRow(i)),(i=this.chain("row-adding-index",[a,i,l],null,i))&&(s=this.rows.indexOf(i)),i&&s>-1?(o=this.activeRows.indexOf(i),this.displayRowIterator((function(t){var e=t.indexOf(i);e>-1&&t.splice(l?e:e+1,0,a)})),o>-1&&this.activeRows.splice(l?o:o+1,0,a),this.rows.splice(l?s:s+1,0,a)):l?(this.displayRowIterator((function(t){t.unshift(a)})),this.activeRows.unshift(a),this.rows.unshift(a)):(this.displayRowIterator((function(t){t.push(a)})),this.activeRows.push(a),this.rows.push(a)),this.setActiveRows(this.activeRows),this.dispatchExternal("rowAdded",a.getComponent()),this.subscribedExternal("dataChanged")&&this.dispatchExternal("dataChanged",this.table.rowManager.getData()),n||this.reRenderInPosition(),a}moveRow(t,e,i){this.dispatch("row-move",t,e,i),this.moveRowActual(t,e,i),this.regenerateRowPositions(),this.dispatch("row-moved",t,e,i),this.dispatchExternal("rowMoved",t.getComponent())}moveRowActual(t,e,i){this.moveRowInArray(this.rows,t,e,i),this.moveRowInArray(this.activeRows,t,e,i),this.displayRowIterator((n=>{this.moveRowInArray(n,t,e,i)})),this.dispatch("row-moving",t,e,i)}moveRowInArray(t,e,i,n){var o,r,a;if(e!==i&&((o=t.indexOf(e))>-1&&(t.splice(o,1),(r=t.indexOf(i))>-1?n?t.splice(r+1,0,e):t.splice(r,0,e):t.splice(o,0,e)),t===this.getDisplayRows())){a=r>o?r:o+1;for(let e=o<r?o:r;e<=a;e++)t[e]&&this.styleRow(t[e],e)}}clearData(){this.setData([])}getRowIndex(t){return this.findRowIndex(t,this.rows)}getDisplayRowIndex(t){var e=this.getDisplayRows().indexOf(t);return e>-1&&e}nextDisplayRow(t,e){var i=this.getDisplayRowIndex(t),n=!1;return!1!==i&&i<this.displayRowsCount-1&&(n=this.getDisplayRows()[i+1]),!n||n instanceof H&&"row"==n.type?n:this.nextDisplayRow(n,e)}prevDisplayRow(t,e){var i=this.getDisplayRowIndex(t),n=!1;return i&&(n=this.getDisplayRows()[i-1]),!e||!n||n instanceof H&&"row"==n.type?n:this.prevDisplayRow(n,e)}findRowIndex(t,e){var i;return!!((t=this.findRow(t))&&(i=e.indexOf(t))>-1)&&i}getData(t,e){var i=[];return this.getRows(t).forEach((function(t){"row"==t.type&&i.push(t.getData(e||"data"))})),i}getComponents(t){var e=[];return this.getRows(t).forEach((function(t){e.push(t.getComponent())})),e}getDataCount(t){return this.getRows(t).length}scrollHorizontal(t){this.scrollLeft=t,this.element.scrollLeft=t,this.dispatch("scroll-horizontal",t)}registerDataPipelineHandler(t,e){void 0!==e?(this.dataPipeline.push({handler:t,priority:e}),this.dataPipeline.sort(((t,e)=>t.priority-e.priority))):console.error("Data pipeline handlers must have a priority in order to be registered")}registerDisplayPipelineHandler(t,e){void 0!==e?(this.displayPipeline.push({handler:t,priority:e}),this.displayPipeline.sort(((t,e)=>t.priority-e.priority))):console.error("Display pipeline handlers must have a priority in order to be registered")}refreshActiveData(t,e,i){var n=this.table,o="",r=0,a=["all","dataPipeline","display","displayPipeline","end"];if(!this.table.destroyed){if("function"==typeof t)if((r=this.dataPipeline.findIndex((e=>e.handler===t)))>-1)o="dataPipeline",e&&(r==this.dataPipeline.length-1?o="display":r++);else{if(!((r=this.displayPipeline.findIndex((e=>e.handler===t)))>-1))return void console.error("Unable to refresh data, invalid handler provided",t);o="displayPipeline",e&&(r==this.displayPipeline.length-1?o="end":r++)}else o=t||"all",r=0;if(this.redrawBlock)return void((!this.redrawBlockRestoreConfig||this.redrawBlockRestoreConfig&&(this.redrawBlockRestoreConfig.stage===o&&r<this.redrawBlockRestoreConfig.index||a.indexOf(o)<a.indexOf(this.redrawBlockRestoreConfig.stage)))&&(this.redrawBlockRestoreConfig={handler:t,skipStage:e,renderInPosition:i,stage:o,index:r}));w.elVisible(this.element)?i?this.reRenderInPosition(this.refreshPipelines.bind(this,t,o,r,i)):(this.refreshPipelines(t,o,r,i),t||this.table.columnManager.renderer.renderColumns(),this.renderTable(),n.options.layoutColumnsOnNewData&&this.table.columnManager.redraw(!0)):this.refreshPipelines(t,o,r,i),this.dispatch("data-refreshed")}}refreshPipelines(t,e,i,n){switch(this.dispatch("data-refreshing"),t||(this.activeRowsPipeline[0]=this.rows.slice(0)),e){case"all":case"dataPipeline":for(let t=i;t<this.dataPipeline.length;t++){let e=this.dataPipeline[t].handler(this.activeRowsPipeline[t].slice(0));this.activeRowsPipeline[t+1]=e||this.activeRowsPipeline[t].slice(0)}this.setActiveRows(this.activeRowsPipeline[this.dataPipeline.length]);case"display":i=0,this.resetDisplayRows();case"displayPipeline":for(let t=i;t<this.displayPipeline.length;t++){let e=this.displayPipeline[t].handler((t?this.getDisplayRows(t-1):this.activeRows).slice(0),n);this.setDisplayRows(e||this.getDisplayRows(t-1).slice(0),t)}case"end":this.regenerateRowPositions()}this.getDisplayRows().length&&this._clearPlaceholder()}regenerateRowPositions(){var t=this.getDisplayRows(),e=1;t.forEach((t=>{"row"===t.type&&(t.setPosition(e),e++)}))}setActiveRows(t){this.activeRows=this.activeRows=Object.assign([],t),this.activeRowsCount=this.activeRows.length}resetDisplayRows(){this.displayRows=[],this.displayRows.push(this.activeRows.slice(0)),this.displayRowsCount=this.displayRows[0].length}setDisplayRows(t,e){this.displayRows[e]=t,e==this.displayRows.length-1&&(this.displayRowsCount=this.displayRows[this.displayRows.length-1].length)}getDisplayRows(t){return void 0===t?this.displayRows.length?this.displayRows[this.displayRows.length-1]:[]:this.displayRows[t]||[]}getVisibleRows(t,e){var i=Object.assign([],this.renderer.visibleRows(!e));return t&&(i=this.chain("rows-visible",[e],i,i)),i}displayRowIterator(t){this.activeRowsPipeline.forEach(t),this.displayRows.forEach(t),this.displayRowsCount=this.displayRows[this.displayRows.length-1].length}getRows(t){var e=[];switch(t){case"active":e=this.activeRows;break;case"display":e=this.table.rowManager.getDisplayRows();break;case"visible":e=this.getVisibleRows(!1,!0);break;default:e=this.chain("rows-retrieve",t,null,this.rows)||this.rows}return e}reRenderInPosition(t){this.redrawBlock?t?t():this.redrawBlockRenderInPosition=!0:(this.dispatchExternal("renderStarted"),this.renderer.rerenderRows(t),this.fixedHeight||this.adjustTableSize(),this.scrollBarCheck(),this.dispatchExternal("renderComplete"))}scrollBarCheck(){var t=0;this.element.scrollHeight>this.element.clientHeight&&(t=this.element.offsetWidth-this.element.clientWidth),t!==this.scrollbarWidth&&(this.scrollbarWidth=t,this.dispatch("scrollbar-vertical",t))}initializeRenderer(){var t,e={virtual:Vt,basic:jt};(t="string"==typeof this.table.options.renderVertical?e[this.table.options.renderVertical]:this.table.options.renderVertical)?(this.renderMode=this.table.options.renderVertical,this.renderer=new t(this.table,this.element,this.tableElement),this.renderer.initialize(),!this.table.element.clientHeight&&!this.table.options.height||this.table.options.minHeight&&this.table.options.maxHeight?this.fixedHeight=!1:this.fixedHeight=!0):console.error("Unable to find matching renderer:",this.table.options.renderVertical)}getRenderMode(){return this.renderMode}renderTable(){this.dispatchExternal("renderStarted"),this.element.scrollTop=0,this._clearTable(),this.displayRowsCount?(this.renderer.renderRows(),this.firstRender&&(this.firstRender=!1,this.fixedHeight||this.adjustTableSize(),this.layoutRefresh(!0))):this.renderEmptyScroll(),this.fixedHeight||this.adjustTableSize(),this.dispatch("table-layout"),this.displayRowsCount||this._showPlaceholder(),this.scrollBarCheck(),this.dispatchExternal("renderComplete")}renderEmptyScroll(){this.placeholder?this.tableElement.style.display="none":this.tableElement.style.minWidth=this.table.columnManager.getWidth()+"px"}_clearTable(){this._clearPlaceholder(),this.scrollTop=0,this.scrollLeft=0,this.renderer.clearRows()}tableEmpty(){this.renderEmptyScroll(),this._showPlaceholder()}_showPlaceholder(){this.placeholder&&(this.placeholder&&this.placeholder.parentNode&&this.placeholder.parentNode.removeChild(this.placeholder),this.initializePlaceholder(),this.placeholder.setAttribute("tabulator-render-mode",this.renderMode),this.getElement().appendChild(this.placeholder),this._positionPlaceholder(),this.adjustTableSize())}_clearPlaceholder(){this.placeholder&&this.placeholder.parentNode&&this.placeholder.parentNode.removeChild(this.placeholder),this.tableElement.style.minWidth="",this.tableElement.style.display=""}_positionPlaceholder(){this.placeholder&&this.placeholder.parentNode&&(this.placeholder.style.width=this.table.columnManager.getWidth()+"px",this.placeholderContents.style.width=this.table.rowManager.element.clientWidth+"px",this.placeholderContents.style.marginLeft=this.scrollLeft+"px")}styleRow(t,e){var i=t.getElement();e%2?(i.classList.add("tabulator-row-even"),i.classList.remove("tabulator-row-odd")):(i.classList.add("tabulator-row-odd"),i.classList.remove("tabulator-row-even"))}normalizeHeight(){this.activeRows.forEach((function(t){t.normalizeHeight()}))}adjustTableSize(){let t,e=this.element.clientHeight,i=!1;if("fill"===this.renderer.verticalFillMode){let n=Math.floor(this.table.columnManager.getElement().getBoundingClientRect().height+(this.table.footerManager&&this.table.footerManager.active&&!this.table.footerManager.external?this.table.footerManager.getElement().getBoundingClientRect().height:0));if(this.fixedHeight){t=isNaN(this.table.options.minHeight)?this.table.options.minHeight:this.table.options.minHeight+"px";const e="calc(100% - "+n+"px)";this.element.style.minHeight=t||"calc(100% - "+n+"px)",this.element.style.height=e,this.element.style.maxHeight=e}else this.element.style.height="",this.element.style.height=this.table.element.clientHeight-n+"px",this.element.scrollTop=this.scrollTop;this.renderer.resize(),this.fixedHeight||e==this.element.clientHeight||(i=!0,this.subscribed("table-resize")?this.dispatch("table-resize"):this.redraw()),this.scrollBarCheck()}return this._positionPlaceholder(),i}reinitialize(){this.rows.forEach((function(t){t.reinitialize(!0)}))}blockRedraw(){this.redrawBlock=!0,this.redrawBlockRestoreConfig=!1}restoreRedraw(){this.redrawBlock=!1,this.redrawBlockRestoreConfig?(this.refreshActiveData(this.redrawBlockRestoreConfig.handler,this.redrawBlockRestoreConfig.skipStage,this.redrawBlockRestoreConfig.renderInPosition),this.redrawBlockRestoreConfig=!1):this.redrawBlockRenderInPosition&&this.reRenderInPosition(),this.redrawBlockRenderInPosition=!1}redraw(t){const e=this.adjustTableSize();this.table.tableWidth=this.table.element.clientWidth,t?this.renderTable():(e&&this.reRenderInPosition(),this.scrollHorizontal(this.scrollLeft))}resetScroll(){if(this.element.scrollLeft=0,this.element.scrollTop=0,"ie"===this.table.browser){var t=document.createEvent("Event");t.initEvent("scroll",!1,!0),this.element.dispatchEvent(t)}else this.element.dispatchEvent(new Event("scroll"))}}class Gt extends v{constructor(t){super(t),this.active=!1,this.element=this.createElement(),this.containerElement=this.createContainerElement(),this.external=!1}initialize(){this.initializeElement()}createElement(){var t=document.createElement("div");return t.classList.add("tabulator-footer"),t}createContainerElement(){var t=document.createElement("div");return t.classList.add("tabulator-footer-contents"),this.element.appendChild(t),t}initializeElement(){this.table.options.footerElement&&("string"==typeof this.table.options.footerElement?"<"===this.table.options.footerElement[0]?this.containerElement.innerHTML=this.table.options.footerElement:(this.external=!0,this.containerElement=document.querySelector(this.table.options.footerElement)):this.element=this.table.options.footerElement)}getElement(){return this.element}append(t){this.activate(),this.containerElement.appendChild(t),this.table.rowManager.adjustTableSize()}prepend(t){this.activate(),this.element.insertBefore(t,this.element.firstChild),this.table.rowManager.adjustTableSize()}remove(t){t.parentNode.removeChild(t),this.deactivate()}deactivate(t){this.element.firstChild&&!t||(this.external||this.element.parentNode.removeChild(this.element),this.active=!1)}activate(){this.active||(this.active=!0,this.external||(this.table.element.appendChild(this.getElement()),this.table.element.style.display=""))}redraw(){this.dispatch("footer-redraw")}}class Ut extends v{constructor(t){super(t),this.el=null,this.abortClasses=["tabulator-headers","tabulator-table"],this.previousTargets={},this.listeners=["click","dblclick","contextmenu","mouseenter","mouseleave","mouseover","mouseout","mousemove","mouseup","mousedown","touchstart","touchend"],this.componentMap={"tabulator-cell":"cell","tabulator-row":"row","tabulator-group":"group","tabulator-col":"column"},this.pseudoTrackers={row:{subscriber:null,target:null},cell:{subscriber:null,target:null},group:{subscriber:null,target:null},column:{subscriber:null,target:null}},this.pseudoTracking=!1}initialize(){this.el=this.table.element,this.buildListenerMap(),this.bindSubscriptionWatchers()}buildListenerMap(){var t={};this.listeners.forEach((e=>{t[e]={handler:null,components:[]}})),this.listeners=t}bindPseudoEvents(){Object.keys(this.pseudoTrackers).forEach((t=>{this.pseudoTrackers[t].subscriber=this.pseudoMouseEnter.bind(this,t),this.subscribe(t+"-mouseover",this.pseudoTrackers[t].subscriber)})),this.pseudoTracking=!0}pseudoMouseEnter(t,e,i){this.pseudoTrackers[t].target!==i&&(this.pseudoTrackers[t].target&&this.dispatch(t+"-mouseleave",e,this.pseudoTrackers[t].target),this.pseudoMouseLeave(t,e),this.pseudoTrackers[t].target=i,this.dispatch(t+"-mouseenter",e,i))}pseudoMouseLeave(t,e){var i=Object.keys(this.pseudoTrackers),n={row:["cell"],cell:["row"]};(i=i.filter((e=>{var i=n[t];return e!==t&&(!i||i&&!i.includes(e))}))).forEach((t=>{var i=this.pseudoTrackers[t].target;this.pseudoTrackers[t].target&&(this.dispatch(t+"-mouseleave",e,i),this.pseudoTrackers[t].target=null)}))}bindSubscriptionWatchers(){var t=Object.keys(this.listeners),e=Object.values(this.componentMap);for(let i of e)for(let e of t){let t=i+"-"+e;this.subscriptionChange(t,this.subscriptionChanged.bind(this,i,e))}this.subscribe("table-destroy",this.clearWatchers.bind(this))}subscriptionChanged(t,e,i){var n=this.listeners[e].components,o=n.indexOf(t),r=!1;i?-1===o&&(n.push(t),r=!0):this.subscribed(t+"-"+e)||o>-1&&(n.splice(o,1),r=!0),"mouseenter"!==e&&"mouseleave"!==e||this.pseudoTracking||this.bindPseudoEvents(),r&&this.updateEventListeners()}updateEventListeners(){for(let t in this.listeners){let e=this.listeners[t];e.components.length?e.handler||(e.handler=this.track.bind(this,t),this.el.addEventListener(t,e.handler)):e.handler&&(this.el.removeEventListener(t,e.handler),e.handler=null)}}track(t,e){var i=e.composedPath&&e.composedPath()||e.path,n=this.findTargets(i);n=this.bindComponents(t,n),this.triggerEvents(t,e,n),!this.pseudoTracking||"mouseover"!=t&&"mouseleave"!=t||Object.keys(n).length||this.pseudoMouseLeave("none",e)}findTargets(t){var e={};let i=Object.keys(this.componentMap);for(let n of t){let t=n.classList?[...n.classList]:[];if(t.filter((t=>this.abortClasses.includes(t))).length)break;let o=t.filter((t=>i.includes(t)));for(let t of o)e[this.componentMap[t]]||(e[this.componentMap[t]]=n)}return e.group&&e.group===e.row&&delete e.row,e}bindComponents(t,e){var i=Object.keys(e).reverse(),n=this.listeners[t],o={},r={};for(let t of i){let i,a=e[t],l=this.previousTargets[t];if(l&&l.target===a)i=l.component;else switch(t){case"row":case"group":(n.components.includes("row")||n.components.includes("cell")||n.components.includes("group"))&&(i=this.table.rowManager.getVisibleRows(!0).find((t=>t.getElement()===a)),e.row&&e.row.parentNode&&e.row.parentNode.closest(".tabulator-row")&&(e[t]=!1));break;case"column":n.components.includes("column")&&(i=this.table.columnManager.findColumn(a));break;case"cell":n.components.includes("cell")&&(o.row instanceof H?i=o.row.findCell(a):e.row&&console.warn("Event Target Lookup Error - The row this cell is attached to cannot be found, has the table been reinitialized without being destroyed first?"))}i&&(o[t]=i,r[t]={target:a,component:i})}return this.previousTargets=r,o}triggerEvents(t,e,i){var n=this.listeners[t];for(let o in i)i[o]&&n.components.includes(o)&&this.dispatch(o+"-"+t,e,i[o])}clearWatchers(){for(let t in this.listeners){let e=this.listeners[t];e.handler&&(this.el.removeEventListener(t,e.handler),e.handler=null)}}}class qt{constructor(t){this.table=t,this.bindings={}}bind(t,e,i){this.bindings[t]||(this.bindings[t]={}),this.bindings[t][e]?console.warn("Unable to bind component handler, a matching function name is already bound",t,e,i):this.bindings[t][e]=i}handle(t,e,i){if(this.bindings[t]&&this.bindings[t][i]&&"function"==typeof this.bindings[t][i].bind)return this.bindings[t][i].bind(null,e);"then"===i||"string"!=typeof i||i.startsWith("_")||this.table.options.debugInvalidComponentFuncs&&console.error("The "+t+" component does not have a "+i+" function, have you checked that you have the correct Tabulator module installed?")}}class Yt extends v{constructor(t){super(t),this.requestOrder=0,this.loading=!1}initialize(){}load(t,e,i,n,o,r){var a=++this.requestOrder;return this.table.destroyed?Promise.resolve():(this.dispatchExternal("dataLoading",t),!t||0!=t.indexOf("{")&&0!=t.indexOf("[")||(t=JSON.parse(t)),this.confirm("data-loading",[t,e,i,o])?(this.loading=!0,o||this.alertLoader(),e=this.chain("data-params",[t,i,o],e||{},e||{}),e=this.mapParams(e,this.table.options.dataSendParams),this.chain("data-load",[t,e,i,o],!1,Promise.resolve([])).then((t=>{if(this.table.destroyed)console.warn("Data Load Response Blocked - Table has been destroyed");else{Array.isArray(t)||"object"!=typeof t||(t=this.mapParams(t,this.objectInvert(this.table.options.dataReceiveParams)));var e=this.chain("data-loaded",t,null,t);a==this.requestOrder?(this.clearAlert(),!1!==e&&(this.dispatchExternal("dataLoaded",e),this.table.rowManager.setData(e,n,void 0===r?!n:r))):console.warn("Data Load Response Blocked - An active data load request was blocked by an attempt to change table data while the request was being made")}})).catch((t=>{console.error("Data Load Error: ",t),this.dispatchExternal("dataLoadError",t),o||this.alertError(),setTimeout((()=>{this.clearAlert()}),this.table.options.dataLoaderErrorTimeout)})).finally((()=>{this.loading=!1}))):(this.dispatchExternal("dataLoaded",t),t||(t=[]),this.table.rowManager.setData(t,n,void 0===r?!n:r),Promise.resolve()))}mapParams(t,e){var i={};for(let n in t)i[e.hasOwnProperty(n)?e[n]:n]=t[n];return i}objectInvert(t){var e={};for(let i in t)e[t[i]]=i;return e}blockActiveLoad(){this.requestOrder++}alertLoader(){("function"==typeof this.table.options.dataLoader?this.table.options.dataLoader():this.table.options.dataLoader)&&this.table.alertManager.alert(this.table.options.dataLoaderLoading||this.langText("data|loading"))}alertError(){this.table.alertManager.alert(this.table.options.dataLoaderError||this.langText("data|error"),"error")}clearAlert(){this.table.alertManager.clear()}}class Xt{constructor(t,e,i){this.table=t,this.events={},this.optionsList=e||{},this.subscriptionNotifiers={},this.dispatch=i?this._debugDispatch.bind(this):this._dispatch.bind(this),this.debug=i}subscriptionChange(t,e){this.subscriptionNotifiers[t]||(this.subscriptionNotifiers[t]=[]),this.subscriptionNotifiers[t].push(e),this.subscribed(t)&&this._notifySubscriptionChange(t,!0)}subscribe(t,e){this.events[t]||(this.events[t]=[]),this.events[t].push(e),this._notifySubscriptionChange(t,!0)}unsubscribe(t,e){var i;if(this.events[t]){if(e){if(!((i=this.events[t].findIndex((t=>t===e)))>-1))return void console.warn("Cannot remove event, no matching event found:",t,e);this.events[t].splice(i,1)}else delete this.events[t];this._notifySubscriptionChange(t,!1)}else console.warn("Cannot remove event, no events set on:",t)}subscribed(t){return this.events[t]&&this.events[t].length}_notifySubscriptionChange(t,e){var i=this.subscriptionNotifiers[t];i&&i.forEach((t=>{t(e)}))}_dispatch(){var t,e=Array.from(arguments),i=e.shift();return this.events[i]&&this.events[i].forEach(((i,n)=>{let o=i.apply(this.table,e);n||(t=o)})),t}_debugDispatch(){var t=Array.from(arguments),e=t[0];return t[0]="ExternalEvent:"+t[0],(!0===this.debug||this.debug.includes(e))&&console.log(...t),this._dispatch(...arguments)}}class Kt{constructor(t){this.events={},this.subscriptionNotifiers={},this.dispatch=t?this._debugDispatch.bind(this):this._dispatch.bind(this),this.chain=t?this._debugChain.bind(this):this._chain.bind(this),this.confirm=t?this._debugConfirm.bind(this):this._confirm.bind(this),this.debug=t}subscriptionChange(t,e){this.subscriptionNotifiers[t]||(this.subscriptionNotifiers[t]=[]),this.subscriptionNotifiers[t].push(e),this.subscribed(t)&&this._notifySubscriptionChange(t,!0)}subscribe(t,e,i=1e4){this.events[t]||(this.events[t]=[]),this.events[t].push({callback:e,priority:i}),this.events[t].sort(((t,e)=>t.priority-e.priority)),this._notifySubscriptionChange(t,!0)}unsubscribe(t,e){var i;if(this.events[t]){if(e){if(!((i=this.events[t].findIndex((t=>t.callback===e)))>-1))return void console.warn("Cannot remove event, no matching event found:",t,e);this.events[t].splice(i,1)}this._notifySubscriptionChange(t,!1)}else console.warn("Cannot remove event, no events set on:",t)}subscribed(t){return this.events[t]&&this.events[t].length}_chain(t,e,i,n){var o=i;return Array.isArray(e)||(e=[e]),this.subscribed(t)?(this.events[t].forEach(((t,i)=>{o=t.callback.apply(this,e.concat([o]))})),o):"function"==typeof n?n():n}_confirm(t,e){var i=!1;return Array.isArray(e)||(e=[e]),this.subscribed(t)&&this.events[t].forEach(((t,n)=>{t.callback.apply(this,e)&&(i=!0)})),i}_notifySubscriptionChange(t,e){var i=this.subscriptionNotifiers[t];i&&i.forEach((t=>{t(e)}))}_dispatch(){var t=Array.from(arguments),e=t.shift();this.events[e]&&this.events[e].forEach((e=>{e.callback.apply(this,t)}))}_debugDispatch(){var t=Array.from(arguments),e=t[0];return t[0]="InternalEvent:"+e,(!0===this.debug||this.debug.includes(e))&&console.log(...t),this._dispatch(...arguments)}_debugChain(){var t=Array.from(arguments),e=t[0];return t[0]="InternalEvent:"+e,(!0===this.debug||this.debug.includes(e))&&console.log(...t),this._chain(...arguments)}_debugConfirm(){var t=Array.from(arguments),e=t[0];return t[0]="InternalEvent:"+e,(!0===this.debug||this.debug.includes(e))&&console.log(...t),this._confirm(...arguments)}}class Jt extends v{constructor(t){super(t)}_warnUser(){this.options("debugDeprecation")&&console.warn(...arguments)}check(t,e){var i="";return void 0===this.options(t)||(i="Deprecated Setup Option - Use of the %c"+t+"%c option is now deprecated",e?(i=i+", Please use the %c"+e+"%c option instead",this._warnUser(i,"font-weight: bold;","font-weight: normal;","font-weight: bold;","font-weight: normal;")):this._warnUser(i,"font-weight: bold;","font-weight: normal;"),!1)}checkMsg(t,e){return void 0===this.options(t)||(this._warnUser("%cDeprecated Setup Option - Use of the %c"+t+" %c option is now deprecated, "+e,"font-weight: normal;","font-weight: bold;","font-weight: normal;"),!1)}msg(t){this._warnUser(t)}}class Zt{static register(t){Zt.tables.push(t)}static deregister(t){var e=Zt.tables.indexOf(t);e>-1&&Zt.tables.splice(e,1)}static lookupTable(t,e){var i,n,o=[];if("string"==typeof t){if((i=document.querySelectorAll(t)).length)for(var r=0;r<i.length;r++)(n=Zt.matchElement(i[r]))&&o.push(n)}else"undefined"!=typeof HTMLElement&&t instanceof HTMLElement||t instanceof ae?(n=Zt.matchElement(t))&&o.push(n):Array.isArray(t)?t.forEach((function(t){o=o.concat(Zt.lookupTable(t))})):e||console.warn("Table Connection Error - Invalid Selector",t);return o}static matchElement(t){return Zt.tables.find((function(e){return t instanceof ae?e===t:e.element===t}))}}function $t(t,e){t.forEach((function(t){t.reinitializeWidth()})),this.table.options.responsiveLayout&&this.table.modExists("responsiveLayout",!0)&&this.table.modules.responsiveLayout.update()}Zt.tables=[];var Qt={fitData:function(t,e){e&&this.table.columnManager.renderer.reinitializeColumnWidths(t),this.table.options.responsiveLayout&&this.table.modExists("responsiveLayout",!0)&&this.table.modules.responsiveLayout.update()},fitDataFill:$t,fitDataTable:$t,fitDataStretch:function(t,e){var i=0,n=this.table.rowManager.element.clientWidth,o=0,r=!1;t.forEach(((t,e)=>{t.widthFixed||t.reinitializeWidth(),(this.table.options.responsiveLayout?t.modules.responsive.visible:t.visible)&&(r=t),t.visible&&(i+=t.getWidth())})),r?(o=n-i+r.getWidth(),this.table.options.responsiveLayout&&this.table.modExists("responsiveLayout",!0)&&(r.setWidth(0),this.table.modules.responsiveLayout.update()),o>0?r.setWidth(o):r.reinitializeWidth()):this.table.options.responsiveLayout&&this.table.modExists("responsiveLayout",!0)&&this.table.modules.responsiveLayout.update()},fitColumns:function(t,e){var i,n,o=this.table.rowManager.element.getBoundingClientRect().width,r=0,a=0,l=0,s=[],u=[],h=0,c=0;function d(t){return"string"==typeof t?t.indexOf("%")>-1?o/100*parseInt(t):parseInt(t):t}function p(t,e,i,n){var o=[],r=0,a=0,s=0,u=l,h=0,c=0,b=[];function m(t){return i*(t.column.definition.widthGrow||1)}function g(t){return d(t.width)-i*(t.column.definition.widthShrink||0)}return t.forEach((function(t,r){var a=n?g(t):m(t);t.column.minWidth>=a?o.push(t):t.column.maxWidth&&t.column.maxWidth<a?(t.width=t.column.maxWidth,e-=t.column.maxWidth,(u-=n?t.column.definition.widthShrink||1:t.column.definition.widthGrow||1)&&(i=Math.floor(e/u))):(b.push(t),c+=n?t.column.definition.widthShrink||1:t.column.definition.widthGrow||1)})),o.length?(o.forEach((function(t){r+=n?t.width-t.column.minWidth:t.column.minWidth,t.width=t.column.minWidth})),a=e-r,s=c?Math.floor(a/c):a,h=p(b,a,s,n)):(h=c?e-Math.floor(e/c)*c:e,b.forEach((function(t){t.width=n?g(t):m(t)}))),h}this.table.options.responsiveLayout&&this.table.modExists("responsiveLayout",!0)&&this.table.modules.responsiveLayout.update(),this.table.rowManager.element.scrollHeight>this.table.rowManager.element.clientHeight&&(o-=this.table.rowManager.element.offsetWidth-this.table.rowManager.element.clientWidth),t.forEach((function(t){var e,i,n;t.visible&&(e=t.definition.width,i=parseInt(t.minWidth),e?(n=d(e),r+=n>i?n:i,t.definition.widthShrink&&(u.push({column:t,width:n>i?n:i}),h+=t.definition.widthShrink)):(s.push({column:t,width:0}),l+=t.definition.widthGrow||1))})),a=o-r,i=Math.floor(a/l),c=p(s,a,i,!1),s.length&&c>0&&(s[s.length-1].width+=c),s.forEach((function(t){a-=t.width})),(n=Math.abs(c)+a)>0&&h&&(c=p(u,n,Math.floor(n/h),!0)),c&&u.length&&(u[u.length-1].width-=c),s.forEach((function(t){t.column.setWidth(t.width)})),u.forEach((function(t){t.column.setWidth(t.width)}))}};class te extends E{constructor(t){super(t,"layout"),this.mode=null,this.registerTableOption("layout","fitData"),this.registerTableOption("layoutColumnsOnNewData",!1),this.registerColumnOption("widthGrow"),this.registerColumnOption("widthShrink")}initialize(){var t=this.table.options.layout;te.modes[t]?this.mode=t:(console.warn("Layout Error - invalid mode set, defaulting to 'fitData' : "+t),this.mode="fitData"),this.table.element.setAttribute("tabulator-layout",this.mode),this.subscribe("column-init",this.initializeColumn.bind(this))}initializeColumn(t){t.definition.widthGrow&&(t.definition.widthGrow=Number(t.definition.widthGrow)),t.definition.widthShrink&&(t.definition.widthShrink=Number(t.definition.widthShrink))}getMode(){return this.mode}layout(t){this.dispatch("layout-refreshing"),te.modes[this.mode].call(this,this.table.columnManager.columnsByIndex,t),this.dispatch("layout-refreshed")}}te.moduleName="layout",te.modes=Qt;class ee extends E{constructor(t){super(t),this.locale="default",this.lang=!1,this.bindings={},this.langList={},this.registerTableOption("locale",!1),this.registerTableOption("langs",{})}initialize(){this.langList=w.deepClone(ee.langs),!1!==this.table.options.columnDefaults.headerFilterPlaceholder&&this.setHeaderFilterPlaceholder(this.table.options.columnDefaults.headerFilterPlaceholder);for(let t in this.table.options.langs)this.installLang(t,this.table.options.langs[t]);this.setLocale(this.table.options.locale),this.registerTableFunction("setLocale",this.setLocale.bind(this)),this.registerTableFunction("getLocale",this.getLocale.bind(this)),this.registerTableFunction("getLang",this.getLang.bind(this))}setHeaderFilterPlaceholder(t){this.langList.default.headerFilters.default=t}installLang(t,e){this.langList[t]?this._setLangProp(this.langList[t],e):this.langList[t]=e}_setLangProp(t,e){for(let i in e)t[i]&&"object"==typeof t[i]?this._setLangProp(t[i],e[i]):t[i]=e[i]}setLocale(t){if(!0===(t=t||"default")&&navigator.language&&(t=navigator.language.toLowerCase()),t&&!this.langList[t]){let e=t.split("-")[0];this.langList[e]?(console.warn("Localization Error - Exact matching locale not found, using closest match: ",t,e),t=e):(console.warn("Localization Error - Matching locale not found, using default: ",t),t="default")}this.locale=t,this.lang=w.deepClone(this.langList.default||{}),"default"!=t&&function t(e,i){for(var n in e)"object"==typeof e[n]?(i[n]||(i[n]={}),t(e[n],i[n])):i[n]=e[n]}(this.langList[t],this.lang),this.dispatchExternal("localized",this.locale,this.lang),this._executeBindings()}getLocale(t){return this.locale}getLang(t){return t?this.langList[t]:this.lang}getText(t,e){var i=(e?t+"|"+e:t).split("|");return this._getLangElement(i,this.locale)||""}_getLangElement(t,e){var i=this.lang;return t.forEach((function(t){var e;i&&(e=i[t],i=void 0!==e&&e)})),i}bind(t,e){this.bindings[t]||(this.bindings[t]=[]),this.bindings[t].push(e),e(this.getText(t),this.lang)}_executeBindings(){for(let t in this.bindings)this.bindings[t].forEach((e=>{e(this.getText(t),this.lang)}))}}ee.moduleName="localize",ee.langs={default:{groups:{item:"item",items:"items"},columns:{},data:{loading:"Loading",error:"Error"},pagination:{page_size:"Page Size",page_title:"Show Page",first:"First",first_title:"First Page",last:"Last",last_title:"Last Page",prev:"Prev",prev_title:"Prev Page",next:"Next",next_title:"Next Page",all:"All",counter:{showing:"Showing",of:"of",rows:"rows",pages:"pages"}},headerFilters:{default:"filter column...",columns:{}}}};class ie extends E{constructor(t){super(t)}initialize(){this.registerTableFunction("tableComms",this.receive.bind(this))}getConnections(t){var e=[];return Zt.lookupTable(t).forEach((t=>{this.table!==t&&e.push(t)})),e}send(t,e,i,n){var o=this.getConnections(t);o.forEach((t=>{t.tableComms(this.table.element,e,i,n)})),!o.length&&t&&console.warn("Table Connection Error - No tables matching selector found",t)}receive(t,e,i,n){if(this.table.modExists(e))return this.table.modules[e].commsReceived(t,i,n);console.warn("Inter-table Comms Error - no such module:",e)}}ie.moduleName="comms";var ne=Object.freeze({__proto__:null,LayoutModule:te,LocalizeModule:ee,CommsModule:ie});class oe{constructor(t,e){this.bindStaticFunctionality(t),this.bindModules(t,ne,!0),e&&this.bindModules(t,e)}bindStaticFunctionality(t){t.moduleBindings={},t.extendModule=function(e,i,n){if(t.moduleBindings[e]){var o=t.moduleBindings[e][i];if(o)if("object"==typeof n)for(let t in n)o[t]=n[t];else console.warn("Module Error - Invalid value type, it must be an object");else console.warn("Module Error - property does not exist:",i)}else console.warn("Module Error - module does not exist:",e)},t.registerModule=function(e){Array.isArray(e)||(e=[e]),e.forEach((e=>{t.registerModuleBinding(e)}))},t.registerModuleBinding=function(e){t.moduleBindings[e.moduleName]=e},t.findTable=function(t){var e=Zt.lookupTable(t,!0);return!(Array.isArray(e)&&!e.length)&&e},t.prototype.bindModules=function(){var e=[],i=[],n=[];for(var o in this.modules={},t.moduleBindings){let r=t.moduleBindings[o],a=new r(this);this.modules[o]=a,r.prototype.moduleCore?this.modulesCore.push(a):r.moduleInitOrder?r.moduleInitOrder<0?e.push(a):i.push(a):n.push(a)}e.sort(((t,e)=>t.moduleInitOrder>e.moduleInitOrder?1:-1)),i.sort(((t,e)=>t.moduleInitOrder>e.moduleInitOrder?1:-1)),this.modulesRegular=e.concat(n.concat(i))}}bindModules(t,e,i){var n=Object.values(e);i&&n.forEach((t=>{t.prototype.moduleCore=!0})),t.registerModule(n)}}class re extends v{constructor(t){super(t),this.element=this._createAlertElement(),this.msgElement=this._createMsgElement(),this.type=null,this.element.appendChild(this.msgElement)}_createAlertElement(){var t=document.createElement("div");return t.classList.add("tabulator-alert"),t}_createMsgElement(){var t=document.createElement("div");return t.classList.add("tabulator-alert-msg"),t.setAttribute("role","alert"),t}_typeClass(){return"tabulator-alert-state-"+this.type}alert(t,e="msg"){if(t){for(this.clear(),this.type=e;this.msgElement.firstChild;)this.msgElement.removeChild(this.msgElement.firstChild);this.msgElement.classList.add(this._typeClass()),"function"==typeof t&&(t=t()),t instanceof HTMLElement?this.msgElement.appendChild(t):this.msgElement.innerHTML=t,this.table.element.appendChild(this.element)}}clear(){this.element.parentNode&&this.element.parentNode.removeChild(this.element),this.msgElement.classList.remove(this._typeClass())}}class ae{constructor(t,e){this.options={},this.columnManager=null,this.rowManager=null,this.footerManager=null,this.alertManager=null,this.vdomHoz=null,this.externalEvents=null,this.eventBus=null,this.interactionMonitor=!1,this.browser="",this.browserSlow=!1,this.browserMobile=!1,this.rtl=!1,this.originalElement=null,this.componentFunctionBinder=new qt(this),this.dataLoader=!1,this.modules={},this.modulesCore=[],this.modulesRegular=[],this.deprecationAdvisor=new Jt(this),this.optionsList=new It(this,"table constructor"),this.initialized=!1,this.destroyed=!1,this.initializeElement(t)&&(this.initializeCoreSystems(e),setTimeout((()=>{this._create()}))),Zt.register(this)}initializeElement(t){return"undefined"!=typeof HTMLElement&&t instanceof HTMLElement?(this.element=t,!0):"string"==typeof t?(this.element=document.querySelector(t),!!this.element||(console.error("Tabulator Creation Error - no element found matching selector: ",t),!1)):(console.error("Tabulator Creation Error - Invalid element provided:",t),!1)}initializeCoreSystems(t){this.columnManager=new Wt(this),this.rowManager=new Nt(this),this.footerManager=new Gt(this),this.dataLoader=new Yt(this),this.alertManager=new re(this),this.bindModules(),this.options=this.optionsList.generate(ae.defaultOptions,t),this._clearObjectPointers(),this._mapDeprecatedFunctionality(),this.externalEvents=new Xt(this,this.options,this.options.debugEventsExternal),this.eventBus=new Kt(this.options.debugEventsInternal),this.interactionMonitor=new Ut(this),this.dataLoader.initialize(),this.footerManager.initialize()}_mapDeprecatedFunctionality(){}_clearSelection(){this.element.classList.add("tabulator-block-select"),window.getSelection?window.getSelection().empty?window.getSelection().empty():window.getSelection().removeAllRanges&&window.getSelection().removeAllRanges():document.selection&&document.selection.empty(),this.element.classList.remove("tabulator-block-select")}_create(){this.externalEvents.dispatch("tableBuilding"),this.eventBus.dispatch("table-building"),this._rtlCheck(),this._buildElement(),this._initializeTable(),this._loadInitialData(),this.initialized=!0,this.externalEvents.dispatch("tableBuilt")}_rtlCheck(){var t=window.getComputedStyle(this.element);switch(this.options.textDirection){case"auto":if("rtl"!==t.direction)break;case"rtl":this.element.classList.add("tabulator-rtl"),this.rtl=!0;break;case"ltr":this.element.classList.add("tabulator-ltr");default:this.rtl=!1}}_clearObjectPointers(){this.options.columns=this.options.columns.slice(0),Array.isArray(this.options.data)&&!this.options.reactiveData&&(this.options.data=this.options.data.slice(0))}_buildElement(){var t,e=this.element,i=this.options;if("TABLE"===e.tagName){this.originalElement=this.element,t=document.createElement("div");var n=e.attributes;for(var o in n)"object"==typeof n[o]&&t.setAttribute(n[o].name,n[o].value);e.parentNode.replaceChild(t,e),this.element=e=t}for(e.classList.add("tabulator"),e.setAttribute("role","grid");e.firstChild;)e.removeChild(e.firstChild);i.height&&(i.height=isNaN(i.height)?i.height:i.height+"px",e.style.height=i.height),!1!==i.minHeight&&(i.minHeight=isNaN(i.minHeight)?i.minHeight:i.minHeight+"px",e.style.minHeight=i.minHeight),!1!==i.maxHeight&&(i.maxHeight=isNaN(i.maxHeight)?i.maxHeight:i.maxHeight+"px",e.style.maxHeight=i.maxHeight)}_initializeTable(){var t=this.element,e=this.options;this.interactionMonitor.initialize(),this.columnManager.initialize(),this.rowManager.initialize(),this._detectBrowser(),this.modulesCore.forEach((t=>{t.initialize()})),t.appendChild(this.columnManager.getElement()),t.appendChild(this.rowManager.getElement()),e.footerElement&&this.footerManager.activate(),e.autoColumns&&e.data&&this.columnManager.generateColumnsFromRowData(this.options.data),this.modulesRegular.forEach((t=>{t.initialize()})),this.columnManager.setColumns(e.columns),this.eventBus.dispatch("table-built")}_loadInitialData(){this.dataLoader.load(this.options.data)}destroy(){var t=this.element;for(this.destroyed=!0,Zt.deregister(this),this.eventBus.dispatch("table-destroy"),this.rowManager.destroy();t.firstChild;)t.removeChild(t.firstChild);t.classList.remove("tabulator"),this.externalEvents.dispatch("tableDestroyed")}_detectBrowser(){var t=navigator.userAgent||navigator.vendor||window.opera;t.indexOf("Trident")>-1?(this.browser="ie",this.browserSlow=!0):t.indexOf("Edge")>-1?(this.browser="edge",this.browserSlow=!0):t.indexOf("Firefox")>-1?(this.browser="firefox",this.browserSlow=!1):t.indexOf("Mac OS")>-1?(this.browser="safari",this.browserSlow=!1):(this.browser="other",this.browserSlow=!1),this.browserMobile=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(t.slice(0,4))}initGuard(t,e){var i,n;return this.options.debugInitialization&&!this.initialized&&(t||(t=" "==(n="Error"==(i=(new Error).stack.split("\n"))[0]?i[2]:i[1])[0]?n.trim().split(" ")[1].split(".")[1]:n.trim().split("@")[0]),console.warn("Table Not Initialized - Calling the "+t+" function before the table is initialized may result in inconsistent behavior, Please wait for the `tableBuilt` event before calling this function."+(e?" "+e:""))),this.initialized}blockRedraw(){this.initGuard(),this.eventBus.dispatch("redraw-blocking"),this.rowManager.blockRedraw(),this.columnManager.blockRedraw(),this.eventBus.dispatch("redraw-blocked")}restoreRedraw(){this.initGuard(),this.eventBus.dispatch("redraw-restoring"),this.rowManager.restoreRedraw(),this.columnManager.restoreRedraw(),this.eventBus.dispatch("redraw-restored")}setData(t,e,i){return this.initGuard(!1,"To set initial data please use the 'data' property in the table constructor."),this.dataLoader.load(t,e,i,!1)}clearData(){this.initGuard(),this.dataLoader.blockActiveLoad(),this.rowManager.clearData()}getData(t){return this.rowManager.getData(t)}getDataCount(t){return this.rowManager.getDataCount(t)}replaceData(t,e,i){return this.initGuard(),this.dataLoader.load(t,e,i,!0,!0)}updateData(t){var e=0;return this.initGuard(),new Promise(((i,n)=>{this.dataLoader.blockActiveLoad(),"string"==typeof t&&(t=JSON.parse(t)),t&&t.length>0?t.forEach((t=>{var o=this.rowManager.findRow(t[this.options.index]);o?(e++,o.updateData(t).then((()=>{--e||i()})).catch((e=>{n("Update Error - Unable to update row",t,e)}))):n("Update Error - Unable to find row",t)})):(console.warn("Update Error - No data provided"),n("Update Error - No data provided"))}))}addData(t,e,i){return this.initGuard(),new Promise(((n,o)=>{this.dataLoader.blockActiveLoad(),"string"==typeof t&&(t=JSON.parse(t)),t?this.rowManager.addRows(t,e,i).then((t=>{var e=[];t.forEach((function(t){e.push(t.getComponent())})),n(e)})):(console.warn("Update Error - No data provided"),o("Update Error - No data provided"))}))}updateOrAddData(t){var e=[],i=0;return this.initGuard(),new Promise(((n,o)=>{this.dataLoader.blockActiveLoad(),"string"==typeof t&&(t=JSON.parse(t)),t&&t.length>0?t.forEach((t=>{var o=this.rowManager.findRow(t[this.options.index]);i++,o?o.updateData(t).then((()=>{i--,e.push(o.getComponent()),i||n(e)})):this.rowManager.addRows(t).then((t=>{i--,e.push(t[0].getComponent()),i||n(e)}))})):(console.warn("Update Error - No data provided"),o("Update Error - No data provided"))}))}getRow(t){var e=this.rowManager.findRow(t);return e?e.getComponent():(console.warn("Find Error - No matching row found:",t),!1)}getRowFromPosition(t){var e=this.rowManager.getRowFromPosition(t);return e?e.getComponent():(console.warn("Find Error - No matching row found:",t),!1)}deleteRow(t){var e=[];this.initGuard(),Array.isArray(t)||(t=[t]);for(let i of t){let t=this.rowManager.findRow(i,!0);if(!t)return console.error("Delete Error - No matching row found:",i),Promise.reject("Delete Error - No matching row found");e.push(t)}return e.sort(((t,e)=>this.rowManager.rows.indexOf(t)>this.rowManager.rows.indexOf(e)?1:-1)),e.forEach((t=>{t.delete()})),this.rowManager.reRenderInPosition(),Promise.resolve()}addRow(t,e,i){return this.initGuard(),"string"==typeof t&&(t=JSON.parse(t)),this.rowManager.addRows(t,e,i,!0).then((t=>t[0].getComponent()))}updateOrAddRow(t,e){var i=this.rowManager.findRow(t);return this.initGuard(),"string"==typeof e&&(e=JSON.parse(e)),i?i.updateData(e).then((()=>i.getComponent())):this.rowManager.addRows(e).then((t=>t[0].getComponent()))}updateRow(t,e){var i=this.rowManager.findRow(t);return this.initGuard(),"string"==typeof e&&(e=JSON.parse(e)),i?i.updateData(e).then((()=>Promise.resolve(i.getComponent()))):(console.warn("Update Error - No matching row found:",t),Promise.reject("Update Error - No matching row found"))}scrollToRow(t,e,i){var n=this.rowManager.findRow(t);return n?this.rowManager.scrollToRow(n,e,i):(console.warn("Scroll Error - No matching row found:",t),Promise.reject("Scroll Error - No matching row found"))}moveRow(t,e,i){var n=this.rowManager.findRow(t);this.initGuard(),n?n.moveToRow(e,i):console.warn("Move Error - No matching row found:",t)}getRows(t){return this.rowManager.getComponents(t)}getRowPosition(t){var e=this.rowManager.findRow(t);return e?e.getPosition():(console.warn("Position Error - No matching row found:",t),!1)}setColumns(t){this.initGuard(!1,"To set initial columns please use the 'columns' property in the table constructor"),this.columnManager.setColumns(t)}getColumns(t){return this.columnManager.getComponents(t)}getColumn(t){var e=this.columnManager.findColumn(t);return e?e.getComponent():(console.warn("Find Error - No matching column found:",t),!1)}getColumnDefinitions(){return this.columnManager.getDefinitionTree()}showColumn(t){var e=this.columnManager.findColumn(t);if(this.initGuard(),!e)return console.warn("Column Show Error - No matching column found:",t),!1;e.show()}hideColumn(t){var e=this.columnManager.findColumn(t);if(this.initGuard(),!e)return console.warn("Column Hide Error - No matching column found:",t),!1;e.hide()}toggleColumn(t){var e=this.columnManager.findColumn(t);if(this.initGuard(),!e)return console.warn("Column Visibility Toggle Error - No matching column found:",t),!1;e.visible?e.hide():e.show()}addColumn(t,e,i){var n=this.columnManager.findColumn(i);return this.initGuard(),this.columnManager.addColumn(t,e,n).then((t=>t.getComponent()))}deleteColumn(t){var e=this.columnManager.findColumn(t);return this.initGuard(),e?e.delete():(console.warn("Column Delete Error - No matching column found:",t),Promise.reject())}updateColumnDefinition(t,e){var i=this.columnManager.findColumn(t);return this.initGuard(),i?i.updateDefinition(e):(console.warn("Column Update Error - No matching column found:",t),Promise.reject())}moveColumn(t,e,i){var n=this.columnManager.findColumn(t),o=this.columnManager.findColumn(e);this.initGuard(),n?o?this.columnManager.moveColumn(n,o,i):console.warn("Move Error - No matching column found:",o):console.warn("Move Error - No matching column found:",t)}scrollToColumn(t,e,i){return new Promise(((n,o)=>{var r=this.columnManager.findColumn(t);return r?this.columnManager.scrollToColumn(r,e,i):(console.warn("Scroll Error - No matching column found:",t),Promise.reject("Scroll Error - No matching column found"))}))}redraw(t){this.initGuard(),this.columnManager.redraw(t),this.rowManager.redraw(t)}setHeight(t){this.options.height=isNaN(t)?t:t+"px",this.element.style.height=this.options.height,this.rowManager.initializeRenderer(),this.rowManager.redraw()}on(t,e){this.externalEvents.subscribe(t,e)}off(t,e){this.externalEvents.unsubscribe(t,e)}dispatchEvent(){Array.from(arguments).shift(),this.externalEvents.dispatch(...arguments)}alert(t,e){this.initGuard(),this.alertManager.alert(t,e)}clearAlert(){this.initGuard(),this.alertManager.clear()}modExists(t,e){return!!this.modules[t]||(e&&console.error("Tabulator Module Not Installed: "+t),!1)}module(t){var e=this.modules[t];return e||console.error("Tabulator module not installed: "+t),e}}ae.defaultOptions={debugEventsExternal:!1,debugEventsInternal:!1,debugInvalidOptions:!0,debugInvalidComponentFuncs:!0,debugInitialization:!0,debugDeprecation:!0,height:!1,minHeight:!1,maxHeight:!1,columnHeaderVertAlign:"top",popupContainer:!1,columns:[],columnDefaults:{},data:!1,autoColumns:!1,autoColumnsDefinitions:!1,nestedFieldSeparator:".",footerElement:!1,index:"id",textDirection:"auto",addRowPos:"bottom",headerVisible:!0,renderVertical:"virtual",renderHorizontal:"basic",renderVerticalBuffer:0,scrollToRowPosition:"top",scrollToRowIfVisible:!0,scrollToColumnPosition:"left",scrollToColumnIfVisible:!0,rowFormatter:!1,rowFormatterPrint:null,rowFormatterClipboard:null,rowFormatterHtmlOutput:null,rowHeight:null,placeholder:!1,dataLoader:!0,dataLoaderLoading:!1,dataLoaderError:!1,dataLoaderErrorTimeout:3e3,dataSendParams:{},dataReceiveParams:{}},new oe(ae),new oe(class extends ae{},Pt);var le=i(117),se=i.n(le);ae.registerModule([tt,Y,ut,et,yt]);let ue=se(),he=["currentPlayer","a-player",1];const ce=t=>{const e=t.getData(),i=t.getElement(),n=e.joueur;he[0]=n,i.classList.add(he[1]),e.participation=he[2]},de=t=>{t.getNextRow()&&t.getNextRow().getData().joueur!==he[0]?(he[1]="a-player"===he[1]?"another-player":"a-player",he[2]=1):he[2]++},pe=t=>{const e=t.getData(),i=t=>{t.getElement().classList.add("grayscale-effect")};""===e.weekD.trim()&&(i(t.getCell("weekC")),""===e.weekC.trim()&&i(t.getCell("weekB")),""===e.weekB.trim()&&i(t.getCell("weekA")))},be=(t,e,i)=>{const n=ve.getLogo(e);return t.getElement().classList.add(e.replace(/\s+/g,"-")),4===i&&(ve.incrementPlayersCount(),ve.incrementCount(e)),`<img src='images/${n}'>`},me=t=>""===t.trim();new ae("#pick-table",{data:ue,reactiveData:!0,importFormat:"array",rowHeight:40,rowFormatter:function(t){ce(t),de(t),pe(t)},columns:[{title:"win",field:"win",frozen:!0,visible:!1},{title:"#",field:"participation",hozAlign:"center",headerHozAlign:"center",vertAlign:"middle",sorter:"number",width:40,frozen:!0},{title:"JOUEURS",field:"joueur",sorter:"string",headerHozAlign:"center",hozAlign:"left",vertAlign:"middle",formatter:"plaintext",frozen:!0},{title:"11",field:"weekA",hozAlign:"center",headerHozAlign:"center",vertAlign:"middle",width:50,formatter:function(t,e,i){const n=t.getValue();return me(n)?"":be(t,n.toLowerCase(),1)}},{title:"18",field:"weekB",hozAlign:"center",headerHozAlign:"center",vertAlign:"middle",width:50,formatter:function(t,e,i){const n=t.getValue();return me(n)?"":be(t,n.toLowerCase(),2)}},{title:"25",field:"weekC",hozAlign:"center",headerHozAlign:"center",vertAlign:"middle",width:50,formatter:function(t,e,i){const n=t.getValue();return me(n)?"":be(t,n.toLowerCase(),3)}},{title:"2",field:"weekD",hozAlign:"center",headerHozAlign:"center",vertAlign:"middle",width:50,formatter:function(t,e,i){const n=t.getValue();return me(n)?"":be(t,n.toLowerCase(),4)}},{title:"9",field:"weekE",hozAlign:"center",headerHozAlign:"center",vertAlign:"middle",width:50,formatter:function(t,e,i){const n=t.getValue();return me(n)?"":be(t,n.toLowerCase(),5)}},{title:"16",field:"weekF",hozAlign:"center",headerHozAlign:"center",vertAlign:"middle",width:50,formatter:function(t,e,i){const n=t.getValue();return me(n)?"":be(t,n.toLowerCase(),6)}},{title:"23",field:"weekG",hozAlign:"center",headerHozAlign:"center",vertAlign:"middle",width:50,formatter:function(t,e,i){const n=t.getValue();return me(n)?"":be(t,n.toLowerCase(),7)}}]}).on("dataProcessed",(function(){let t=ve.getMostCommmonTeams();var e=[{id:1,position:"1",equipe:`${t[0].team}`,pick:`${t[0].count}`},{id:2,position:"2",equipe:`${t[1].team}`,pick:`${t[1].count}`},{id:3,position:"3",equipe:`${t[2].team}`,pick:`${t[2].count}`}];new ae("#stats-table",{data:e,layout:"fitColumns",rowHeight:50,rowFormatter:function(e){var i=e.getData();i.equipe==`${t[0].team}`?e.getElement().classList.add(t[0].team.replace(/\s+/g,"-").toLowerCase()):i.equipe==`${t[1].team}`?e.getElement().classList.add(t[1].team.replace(/\s+/g,"-").toLowerCase()):e.getElement().classList.add(t[2].team.replace(/\s+/g,"-").toLowerCase())},columns:[{title:"#",field:"position",width:25,headerHozAlign:"center",hozAlign:"center",vertAlign:"middle"},{title:"ÉQUIPE",field:"equipe",headerHozAlign:"center",vertAlign:"middle",formatter:function(t,e,i){let n=t.getValue();return`<img src='images/${ve.getLogo(n)}'><div>${n}</div>`}},{title:"PICK",field:"pick",width:55,hozAlign:"center",headerHozAlign:"center",vertAlign:"middle"}]}).on("tableBuilt",(function(){m(fe),g(4)}))}));var ge=[],fe=0;const Ae=(t,e,i)=>({team:t,count:e,properName:i}),ve={getLogo:t=>{let e;switch(!0){case t.includes("anaheim"):e="ducks-logo.png";break;case t.includes("arizona"):e="arizona-logo.png";break;case t.includes("boston"):e="boston-bruins-logo.png";break;case t.includes("buffalo"):e="buffalo-logo.png";break;case t.includes("calgary"):e="calgary-logo.png";break;case t.includes("carolin"):e="carolina-logo.png";break;case t.includes("chicago"):e="chicago-blackhawks-logo.png";break;case t.includes("colorado"):e="colorado-logo.png";break;case t.includes("columbus"):e="columbus-logo.png";break;case t.includes("dallas"):e="dallas-logo.png";break;case t.includes("detroit"):e="detroit-logo.png";break;case t.includes("edmonton"):e="edmonton-logo.png";break;case t.includes("florid"):e="florida-logo.png";break;case t.includes("los angeles"):e="los-angeles-kings-logo.png";break;case t.includes("minnes"):e="minnesota-logo.png";break;case t.includes("montr"):e="montreal-logo.png";break;case t.includes("nash"):e="nashville-logo.png";break;case t.includes("jersey"):e="new-jersey-logo.png";break;case t.includes("islanders"):e="new-york-islanders-logo.png";break;case t.includes("rangers"):e="new-york-rangers-logo.png";break;case t.includes("ottawa"):e="ottawa-logo.png";break;case t.includes("phila"):e="philadelphia-logo.png";break;case t.includes("pitts"):e="pittsburgh-penguins-logo.png";break;case t.includes("san jose"):e="san-jose-logo.png";break;case t.includes("seat"):e="kraken-logo.png";break;case t.includes("louis"):e="st-louis-logo.png";break;case t.includes("tampa"):e="TBL_dark.svg";break;case t.includes("toronto"):e="toronto-logo.png";break;case t.includes("vancouv"):e="vancouver-logo.png";break;case t.includes("vegas"):e="vegas-logo.png";break;case t.includes("wash"):e="washington-capitals-logo.png";break;case t.includes("winnipeg"):e="winnipeg-logo.png"}return e},incrementPlayersCount:t=>{fe++},initialiseTeamsList:()=>{for(let t in A())ge.push(Ae(A()[t][0],parseInt(A()[t][1]),Ae(A()[t][2])))},incrementCount:t=>{let e=ge.find((e=>e.team===t));e&&e.count++},getMostCommmonTeams:()=>{const t=[...ge];return t.sort(((t,e)=>e.count-t.count)),t.slice(0,3).map((t=>({team:t.team,count:t.count})))}};ve.initialiseTeamsList()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QixzQkFBc0IsZ0JBQWdCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLHFCQUFxQixzQkFBc0IsZ0JBQWdCLHVCQUF1QixHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLHFCQUFxQixvQkFBb0Isc0JBQXNCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLGtCQUFrQixvQkFBb0Isb0JBQW9CLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxxQkFBcUIsc0JBQXNCLHVCQUF1QixHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcscUJBQXFCLGtCQUFrQixvQkFBb0IsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLHFCQUFxQixrQkFBa0IsdUJBQXVCLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxrQkFBa0Isb0JBQW9CLHVCQUF1QixHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsZ0JBQWdCLGVBQWUsdUJBQXVCLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxtQkFBbUIsa0JBQWtCLHVCQUF1QixHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsb0JBQW9CLG9CQUFvQixvQkFBb0IsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLGVBQWUsc0JBQXNCLHVCQUF1QixHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsaUJBQWlCLGVBQWUsdUJBQXVCLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxpQkFBaUIsa0JBQWtCLHVCQUF1QixHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsaUJBQWlCLHNCQUFzQixvQkFBb0IsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLHVCQUF1QixnQkFBZ0IsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsdUJBQXVCLGdCQUFnQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyx1QkFBdUIsb0JBQW9CLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLHVCQUF1QixvQkFBb0IsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsdUJBQXVCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRywwQkFBMEIscUJBQXFCLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLDBCQUEwQixvQkFBb0IsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsMEJBQTBCLGdCQUFnQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxrQkFBa0IscUJBQXFCLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLGtCQUFrQixvQkFBb0IsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLHFCQUFxQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxzQkFBc0Isb0JBQW9CLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLHNCQUFzQixvQkFBb0IsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsc0JBQXNCLGdCQUFnQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxzQkFBc0IsZ0JBQWdCLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLHNCQUFzQixxQkFBcUIsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsaUJBQWlCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxpQkFBaUIsb0JBQW9CLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLGlCQUFpQixxQkFBcUIsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsaUJBQWlCLHFCQUFxQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRywwQkFBMEIsc0JBQXNCLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLDBCQUEwQixxQkFBcUIsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsMEJBQTBCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRywwQkFBMEIsb0JBQW9CLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLDJCQUEyQixxQkFBcUIsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsMkJBQTJCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxpQkFBaUIscUJBQXFCLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLGlCQUFpQixnQkFBZ0IsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxrQkFBa0Isb0JBQW9CLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLGtCQUFrQixnQkFBZ0IsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsb0JBQW9CLHFCQUFxQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxvQkFBb0Isb0JBQW9CLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLGtCQUFrQixnQkFBZ0IsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxrQkFBa0IscUJBQXFCLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLGtCQUFrQixvQkFBb0IsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcscUJBQXFCLHFCQUFxQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxxQkFBcUIsb0JBQW9CLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLHFCQUFxQixvQkFBb0IsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsbUJBQW1CLGdCQUFnQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxtQkFBbUIsb0JBQW9CLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLGtCQUFrQixnQkFBZ0IsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsK0JBQStCLGdCQUFnQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRywrQkFBK0Isb0JBQW9CLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLHFCQUFxQixvQkFBb0IsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLGdCQUFnQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxrQkFBa0IscUJBQXFCLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLGtCQUFrQixvQkFBb0IsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsbUJBQW1CLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxtQkFBbUIsb0JBQW9CLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLG1CQUFtQixxQkFBcUIsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsbUJBQW1CLGlCQUFpQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxpQkFBaUIsb0JBQW9CLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLGlCQUFpQixvQkFBb0IsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsaUJBQWlCLHFCQUFxQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxrQkFBa0IscUJBQXFCLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLGtCQUFrQixxQkFBcUIsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxrQkFBa0Isb0JBQW9CLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLG1CQUFtQixvQkFBb0IsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsbUJBQW1CLHFCQUFxQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxtQkFBbUIsZ0JBQWdCLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLG1CQUFtQixvQkFBb0IsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLGdCQUFnQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxrQkFBa0IscUJBQXFCLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLGtCQUFrQixvQkFBb0IsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLGdCQUFnQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxnQkFBZ0IscUJBQXFCLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLGdCQUFnQixvQkFBb0IsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsbUJBQW1CLHFCQUFxQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxvQkFBb0IsZ0JBQWdCLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLGVBQWUscUJBQXFCLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLGtCQUFrQixnQkFBZ0IsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQWtCLG9CQUFvQixHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxrQkFBa0Isb0JBQW9CLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLGtCQUFrQixx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QVEsSUFBSyxFQUFRLElBQUssRUFBUSxJQUNoRCxFQUFRLElBQU0sRUFBUSxJQUFLLEVBQVEsSUFDbkMsRUFBUSxLQUFNLEVBQVEsS0FDdEIsRUFBUSxLQUFNLEVBQVEsS0FDdEIsRUFBUSxLQUVSLEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUN6QyxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFDekMsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN4RCxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQ3hELEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDeEQsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDdkUsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDdkUsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN4RCxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQ3hELEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDeEQsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDdkUsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDdkUsRUFBVSxJQUFNLEVBQVUsSUFDMUIsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQ3pDLEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQ3ZFLEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQ3ZFLEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDeEQsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN4RCxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFDekMsRUFBVSxJQUFN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RUFBWWhwRyxNQUFLLENBQUM2bUIsRUFBRzh0QixJQUFNQSxFQUFFbm9DLE1BQVFxYSxFQUFFcmEsUUFHckJ3OEYsRUFBWXgvRyxNQUFNLEVBQUcsR0FFdEJwTyxLQUFJb3RILElBQVEsQ0FBR0EsS0FBTUEsRUFBS0EsS0FBTWg4RixNQUFPZzhGLEVBQUtoOEYsU0FBUyxHQzdJMUV3N0YsR0FBWWMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uaGwtc3Vydml2b3IvLi9ub2RlX21vZHVsZXMvdGFidWxhdG9yLXRhYmxlcy9kaXN0L2Nzcy90YWJ1bGF0b3IuY3NzIiwid2VicGFjazovL25obC1zdXJ2aXZvci8uL3NyYy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vbmhsLXN1cnZpdm9yLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9uaGwtc3Vydml2b3IvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9uaGwtc3Vydml2b3IvLi9zcmMvZmlsZXMvdGVhbS5jc3YiLCJ3ZWJwYWNrOi8vbmhsLXN1cnZpdm9yLy4vc3JjL2ZpbGVzL3dlZWs0X3BpY2suY3N2Iiwid2VicGFjazovL25obC1zdXJ2aXZvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbG9kYXNoLmpzIiwid2VicGFjazovL25obC1zdXJ2aXZvci8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9uaGwtc3Vydml2b3IvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL25obC1zdXJ2aXZvci8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9uaGwtc3Vydml2b3IvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vbmhsLXN1cnZpdm9yLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vbmhsLXN1cnZpdm9yLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vbmhsLXN1cnZpdm9yL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL25obC1zdXJ2aXZvci93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9uaGwtc3Vydml2b3Ivd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL25obC1zdXJ2aXZvci93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL25obC1zdXJ2aXZvci93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL25obC1zdXJ2aXZvci93ZWJwYWNrL3J1bnRpbWUvbm9kZSBtb2R1bGUgZGVjb3JhdG9yIiwid2VicGFjazovL25obC1zdXJ2aXZvci93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vbmhsLXN1cnZpdm9yLy4vc3JjL3N0eWxlLmNzcz83MTYzIiwid2VicGFjazovL25obC1zdXJ2aXZvci8uL3NyYy9kb20uanMiLCJ3ZWJwYWNrOi8vbmhsLXN1cnZpdm9yLy4vbm9kZV9tb2R1bGVzL3RhYnVsYXRvci10YWJsZXMvZGlzdC9qcy90YWJ1bGF0b3JfZXNtLmpzIiwid2VicGFjazovL25obC1zdXJ2aXZvci8uL3NyYy90YWJsZS5qcyIsIndlYnBhY2s6Ly9uaGwtc3Vydml2b3IvLi9zcmMvZGF0YS5qcyIsIndlYnBhY2s6Ly9uaGwtc3Vydml2b3IvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAudGFidWxhdG9yIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBib3JkZXI6IDFweCBzb2xpZCAjOTk5O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjODg4O1xuICBmb250LXNpemU6IDE0cHg7XG4gIHRleHQtYWxpZ246IGxlZnQ7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVaKDApO1xuICAtbW96LXRyYW5zZm9ybTogdHJhbnNsYXRlWigwKTtcbiAgLW1zLXRyYW5zZm9ybTogdHJhbnNsYXRlWigwKTtcbiAgLW8tdHJhbnNmb3JtOiB0cmFuc2xhdGVaKDApO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XG59XG5cbi50YWJ1bGF0b3JbdGFidWxhdG9yLWxheW91dD1cImZpdERhdGFGaWxsXCJdIC50YWJ1bGF0b3ItdGFibGVob2xkZXIgLnRhYnVsYXRvci10YWJsZSB7XG4gIG1pbi13aWR0aDogMTAwJTtcbn1cblxuLnRhYnVsYXRvclt0YWJ1bGF0b3ItbGF5b3V0PVwiZml0RGF0YVRhYmxlXCJdIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xufVxuXG4udGFidWxhdG9yLnRhYnVsYXRvci1ibG9jay1zZWxlY3Qge1xuICB1c2VyLXNlbGVjdDogbm9uZTtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgd2lkdGg6IDEwMCU7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjOTk5O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTZlNmU2O1xuICBjb2xvcjogIzU1NTtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XG4gIC1raHRtbC11c2VyLXNlbGVjdDogbm9uZTtcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcbiAgLW8tdXNlci1zZWxlY3Q6IG5vbmU7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIudGFidWxhdG9yLWhlYWRlci1oaWRkZW4ge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItaGVhZGVyLWNvbnRlbnRzIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItaGVhZGVyLWNvbnRlbnRzIC50YWJ1bGF0b3ItaGVhZGVycyB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbCB7XG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI2FhYTtcbiAgYmFja2dyb3VuZDogI2U2ZTZlNjtcbiAgdGV4dC1hbGlnbjogbGVmdDtcbiAgdmVydGljYWwtYWxpZ246IGJvdHRvbTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3ItbW92aW5nIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBib3JkZXI6IDFweCBzb2xpZCAjOTk5O1xuICBiYWNrZ3JvdW5kOiAjY2RjZGNkO1xuICBwb2ludGVyLWV2ZW50czogbm9uZTtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbCAudGFidWxhdG9yLWNvbC1jb250ZW50IHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBwYWRkaW5nOiA0cHg7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWhlYWRlci1wb3B1cC1idXR0b24ge1xuICBwYWRkaW5nOiAwIDhweDtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbCAudGFidWxhdG9yLWNvbC1jb250ZW50IC50YWJ1bGF0b3ItaGVhZGVyLXBvcHVwLWJ1dHRvbjpob3ZlciB7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgb3BhY2l0eTogLjY7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC10aXRsZS1ob2xkZXIge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC10aXRsZSB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIHdpZHRoOiAxMDAlO1xuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgdmVydGljYWwtYWxpZ246IGJvdHRvbTtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbCAudGFidWxhdG9yLWNvbC1jb250ZW50IC50YWJ1bGF0b3ItY29sLXRpdGxlLnRhYnVsYXRvci1jb2wtdGl0bGUtd3JhcCB7XG4gIHdoaXRlLXNwYWNlOiBub3JtYWw7XG4gIHRleHQtb3ZlcmZsb3c6IGluaXRpYWw7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC10aXRsZSAudGFidWxhdG9yLXRpdGxlLWVkaXRvciB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIHdpZHRoOiAxMDAlO1xuICBib3JkZXI6IDFweCBzb2xpZCAjOTk5O1xuICBwYWRkaW5nOiAxcHg7XG4gIGJhY2tncm91bmQ6ICNmZmY7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC10aXRsZSAudGFidWxhdG9yLWhlYWRlci1wb3B1cC1idXR0b24gKyAudGFidWxhdG9yLXRpdGxlLWVkaXRvciB7XG4gIHdpZHRoOiBjYWxjKDEwMCUgLSAyMnB4KTtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbCAudGFidWxhdG9yLWNvbC1jb250ZW50IC50YWJ1bGF0b3ItY29sLXNvcnRlciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICBib3R0b206IDA7XG4gIHJpZ2h0OiA0cHg7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC1zb3J0ZXIgLnRhYnVsYXRvci1hcnJvdyB7XG4gIHdpZHRoOiAwO1xuICBoZWlnaHQ6IDA7XG4gIGJvcmRlci1sZWZ0OiA2cHggc29saWQgdHJhbnNwYXJlbnQ7XG4gIGJvcmRlci1yaWdodDogNnB4IHNvbGlkIHRyYW5zcGFyZW50O1xuICBib3JkZXItYm90dG9tOiA2cHggc29saWQgI2JiYjtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3ItY29sLWdyb3VwIC50YWJ1bGF0b3ItY29sLWdyb3VwLWNvbHMge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjYWFhO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBtYXJnaW4tcmlnaHQ6IC0xcHg7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1oZWFkZXItZmlsdGVyIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBtYXJnaW4tdG9wOiAycHg7XG4gIHdpZHRoOiAxMDAlO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1oZWFkZXItZmlsdGVyIHRleHRhcmVhIHtcbiAgaGVpZ2h0OiBhdXRvICFpbXBvcnRhbnQ7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1oZWFkZXItZmlsdGVyIHN2ZyB7XG4gIG1hcmdpbi10b3A6IDNweDtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbCAudGFidWxhdG9yLWhlYWRlci1maWx0ZXIgaW5wdXQ6Oi1tcy1jbGVhciB7XG4gIHdpZHRoOiAwO1xuICBoZWlnaHQ6IDA7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlIC50YWJ1bGF0b3ItY29sLXRpdGxlIHtcbiAgcGFkZGluZy1yaWdodDogMjVweDtcbn1cblxuQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xuICAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1zb3J0YWJsZS50YWJ1bGF0b3ItY29sLXNvcnRlci1lbGVtZW50OmhvdmVyIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2NkY2RjZDtcbiAgfVxufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1zb3J0YWJsZVthcmlhLXNvcnQ9XCJub25lXCJdIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtc29ydGVyIHtcbiAgY29sb3I6ICNiYmI7XG59XG5cbkBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcbiAgLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3Itc29ydGFibGVbYXJpYS1zb3J0PVwibm9uZVwiXSAudGFidWxhdG9yLWNvbC1jb250ZW50IC50YWJ1bGF0b3ItY29sLXNvcnRlci50YWJ1bGF0b3ItY29sLXNvcnRlci1lbGVtZW50IC50YWJ1bGF0b3ItYXJyb3c6aG92ZXIge1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICBib3JkZXItYm90dG9tOiA2cHggc29saWQgIzU1NTtcbiAgfVxufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1zb3J0YWJsZVthcmlhLXNvcnQ9XCJub25lXCJdIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtc29ydGVyIC50YWJ1bGF0b3ItYXJyb3cge1xuICBib3JkZXItdG9wOiBub25lO1xuICBib3JkZXItYm90dG9tOiA2cHggc29saWQgI2JiYjtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3Itc29ydGFibGVbYXJpYS1zb3J0PVwiYXNjZW5kaW5nXCJdIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtc29ydGVyIHtcbiAgY29sb3I6ICM2NjY7XG59XG5cbkBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcbiAgLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3Itc29ydGFibGVbYXJpYS1zb3J0PVwiYXNjZW5kaW5nXCJdIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtc29ydGVyLnRhYnVsYXRvci1jb2wtc29ydGVyLWVsZW1lbnQgLnRhYnVsYXRvci1hcnJvdzpob3ZlciB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIGJvcmRlci1ib3R0b206IDZweCBzb2xpZCAjNTU1O1xuICB9XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlW2FyaWEtc29ydD1cImFzY2VuZGluZ1wiXSAudGFidWxhdG9yLWNvbC1jb250ZW50IC50YWJ1bGF0b3ItY29sLXNvcnRlciAudGFidWxhdG9yLWFycm93IHtcbiAgYm9yZGVyLXRvcDogbm9uZTtcbiAgYm9yZGVyLWJvdHRvbTogNnB4IHNvbGlkICM2NjY7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlW2FyaWEtc29ydD1cImRlc2NlbmRpbmdcIl0gLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC1zb3J0ZXIge1xuICBjb2xvcjogIzY2Njtcbn1cblxuQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xuICAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1zb3J0YWJsZVthcmlhLXNvcnQ9XCJkZXNjZW5kaW5nXCJdIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtc29ydGVyLnRhYnVsYXRvci1jb2wtc29ydGVyLWVsZW1lbnQgLnRhYnVsYXRvci1hcnJvdzpob3ZlciB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIGJvcmRlci10b3A6IDZweCBzb2xpZCAjNTU1O1xuICB9XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlW2FyaWEtc29ydD1cImRlc2NlbmRpbmdcIl0gLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC1zb3J0ZXIgLnRhYnVsYXRvci1hcnJvdyB7XG4gIGJvcmRlci1ib3R0b206IG5vbmU7XG4gIGJvcmRlci10b3A6IDZweCBzb2xpZCAjNjY2O1xuICBjb2xvcjogIzY2Njtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3ItY29sLXZlcnRpY2FsIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtdGl0bGUge1xuICB3cml0aW5nLW1vZGU6IHZlcnRpY2FsLXJsO1xuICB0ZXh0LW9yaWVudGF0aW9uOiBtaXhlZDtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLWNvbC12ZXJ0aWNhbC50YWJ1bGF0b3ItY29sLXZlcnRpY2FsLWZsaXAgLnRhYnVsYXRvci1jb2wtdGl0bGUge1xuICB0cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpO1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1jb2wtdmVydGljYWwudGFidWxhdG9yLXNvcnRhYmxlIC50YWJ1bGF0b3ItY29sLXRpdGxlIHtcbiAgcGFkZGluZy1yaWdodDogMDtcbiAgcGFkZGluZy10b3A6IDIwcHg7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLWNvbC12ZXJ0aWNhbC50YWJ1bGF0b3Itc29ydGFibGUudGFidWxhdG9yLWNvbC12ZXJ0aWNhbC1mbGlwIC50YWJ1bGF0b3ItY29sLXRpdGxlIHtcbiAgcGFkZGluZy1yaWdodDogMDtcbiAgcGFkZGluZy1ib3R0b206IDIwcHg7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLWNvbC12ZXJ0aWNhbC50YWJ1bGF0b3Itc29ydGFibGUgLnRhYnVsYXRvci1jb2wtc29ydGVyIHtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGxlZnQ6IDA7XG4gIHJpZ2h0OiAwO1xuICB0b3A6IDRweDtcbiAgYm90dG9tOiBhdXRvO1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItZnJvemVuIHtcbiAgcG9zaXRpb246IHN0aWNreTtcbiAgbGVmdDogMDtcbiAgei1pbmRleDogMTE7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1mcm96ZW4udGFidWxhdG9yLWZyb3plbi1sZWZ0IHtcbiAgYm9yZGVyLXJpZ2h0OiAycHggc29saWQgI2FhYTtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWZyb3plbi50YWJ1bGF0b3ItZnJvemVuLXJpZ2h0IHtcbiAgYm9yZGVyLWxlZnQ6IDJweCBzb2xpZCAjYWFhO1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY2FsY3MtaG9sZGVyIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgYmFja2dyb3VuZDogI2YzZjNmMyAhaW1wb3J0YW50O1xuICBib3JkZXItdG9wOiAxcHggc29saWQgI2FhYTtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNhYWE7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jYWxjcy1ob2xkZXIgLnRhYnVsYXRvci1yb3cge1xuICBiYWNrZ3JvdW5kOiAjZjNmM2YzICFpbXBvcnRhbnQ7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jYWxjcy1ob2xkZXIgLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jb2wtcmVzaXplLWhhbmRsZSB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1mcm96ZW4tcm93cy1ob2xkZXI6ZW1wdHkge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItdGFibGVob2xkZXIge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHdpZHRoOiAxMDAlO1xuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICBvdmVyZmxvdzogYXV0bztcbiAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoO1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItdGFibGVob2xkZXI6Zm9jdXMge1xuICBvdXRsaW5lOiBub25lO1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItdGFibGVob2xkZXIgLnRhYnVsYXRvci1wbGFjZWhvbGRlciB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICB3aWR0aDogMTAwJTtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLXRhYmxlaG9sZGVyIC50YWJ1bGF0b3ItcGxhY2Vob2xkZXJbdGFidWxhdG9yLXJlbmRlci1tb2RlPVwidmlydHVhbFwiXSB7XG4gIG1pbi1oZWlnaHQ6IDEwMCU7XG4gIG1pbi13aWR0aDogMTAwJTtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLXRhYmxlaG9sZGVyIC50YWJ1bGF0b3ItcGxhY2Vob2xkZXIgLnRhYnVsYXRvci1wbGFjZWhvbGRlci1jb250ZW50cyB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBwYWRkaW5nOiAxMHB4O1xuICBjb2xvcjogI2NjYztcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgd2hpdGUtc3BhY2U6IG5vcm1hbDtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLXRhYmxlaG9sZGVyIC50YWJ1bGF0b3ItdGFibGUge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgb3ZlcmZsb3c6IHZpc2libGU7XG4gIGNvbG9yOiAjMzMzO1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItdGFibGVob2xkZXIgLnRhYnVsYXRvci10YWJsZSAudGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItY2FsY3Mge1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgYmFja2dyb3VuZDogI2UyZTJlMiAhaW1wb3J0YW50O1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItdGFibGVob2xkZXIgLnRhYnVsYXRvci10YWJsZSAudGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItY2FsY3MudGFidWxhdG9yLWNhbGNzLXRvcCB7XG4gIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCAjYWFhO1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItdGFibGVob2xkZXIgLnRhYnVsYXRvci10YWJsZSAudGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItY2FsY3MudGFidWxhdG9yLWNhbGNzLWJvdHRvbSB7XG4gIGJvcmRlci10b3A6IDJweCBzb2xpZCAjYWFhO1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyIHtcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICM5OTk7XG4gIGJhY2tncm91bmQtY29sb3I6ICNlNmU2ZTY7XG4gIGNvbG9yOiAjNTU1O1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XG4gIC1raHRtbC11c2VyLXNlbGVjdDogbm9uZTtcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcbiAgLW8tdXNlci1zZWxlY3Q6IG5vbmU7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1mb290ZXItY29udGVudHMge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIHBhZGRpbmc6IDVweCAxMHB4O1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyIC50YWJ1bGF0b3ItZm9vdGVyLWNvbnRlbnRzOmVtcHR5IHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLWZvb3RlciAudGFidWxhdG9yLWNhbGNzLWhvbGRlciB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIHdpZHRoOiAxMDAlO1xuICB0ZXh0LWFsaWduOiBsZWZ0O1xuICBiYWNrZ3JvdW5kOiAjZjNmM2YzICFpbXBvcnRhbnQ7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjYWFhO1xuICBib3JkZXItdG9wOiAxcHggc29saWQgI2FhYTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLWZvb3RlciAudGFidWxhdG9yLWNhbGNzLWhvbGRlciAudGFidWxhdG9yLXJvdyB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgYmFja2dyb3VuZDogI2YzZjNmMyAhaW1wb3J0YW50O1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyIC50YWJ1bGF0b3ItY2FsY3MtaG9sZGVyIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY29sLXJlc2l6ZS1oYW5kbGUge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyIC50YWJ1bGF0b3ItY2FsY3MtaG9sZGVyOm9ubHktY2hpbGQge1xuICBtYXJnaW4tYm90dG9tOiAtNXB4O1xuICBib3JkZXItYm90dG9tOiBub25lO1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyID4gKiArIC50YWJ1bGF0b3ItcGFnZS1jb3VudGVyIHtcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1wYWdlLWNvdW50ZXIge1xuICBmb250LXdlaWdodDogbm9ybWFsO1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyIC50YWJ1bGF0b3ItcGFnaW5hdG9yIHtcbiAgZmxleDogMTtcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gIGNvbG9yOiAjNTU1O1xuICBmb250LWZhbWlseTogaW5oZXJpdDtcbiAgZm9udC13ZWlnaHQ6IGluaGVyaXQ7XG4gIGZvbnQtc2l6ZTogaW5oZXJpdDtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLWZvb3RlciAudGFidWxhdG9yLXBhZ2Utc2l6ZSB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgbWFyZ2luOiAwIDVweDtcbiAgcGFkZGluZzogMnB4IDVweDtcbiAgYm9yZGVyOiAxcHggc29saWQgI2FhYTtcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyIC50YWJ1bGF0b3ItcGFnZXMge1xuICBtYXJnaW46IDAgN3B4O1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyIC50YWJ1bGF0b3ItcGFnZSB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgbWFyZ2luOiAwIDJweDtcbiAgcGFkZGluZzogMnB4IDVweDtcbiAgYm9yZGVyOiAxcHggc29saWQgI2FhYTtcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xuICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1wYWdlLmFjdGl2ZSB7XG4gIGNvbG9yOiAjZDAwO1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyIC50YWJ1bGF0b3ItcGFnZTpkaXNhYmxlZCB7XG4gIG9wYWNpdHk6IC41O1xufVxuXG5AbWVkaWEgKGhvdmVyOiBob3ZlcikgYW5kIChwb2ludGVyOiBmaW5lKSB7XG4gIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1wYWdlOm5vdCguZGlzYWJsZWQpOmhvdmVyIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjIpO1xuICAgIGNvbG9yOiAjZmZmO1xuICB9XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1jb2wtcmVzaXplLWhhbmRsZSB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB3aWR0aDogNnB4O1xuICBtYXJnaW4tbGVmdDogLTNweDtcbiAgbWFyZ2luLXJpZ2h0OiAtM3B4O1xuICB6LWluZGV4OiAxMDtcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbn1cblxuQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xuICAudGFidWxhdG9yIC50YWJ1bGF0b3ItY29sLXJlc2l6ZS1oYW5kbGU6aG92ZXIge1xuICAgIGN1cnNvcjogZXctcmVzaXplO1xuICB9XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1jb2wtcmVzaXplLWhhbmRsZTpsYXN0LW9mLXR5cGUge1xuICB3aWR0aDogM3B4O1xuICBtYXJnaW4tcmlnaHQ6IDA7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1hbGVydCB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICB6LWluZGV4OiAxMDA7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC40KTtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItYWxlcnQgLnRhYnVsYXRvci1hbGVydC1tc2cge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIG1hcmdpbjogMCBhdXRvO1xuICBwYWRkaW5nOiAxMHB4IDIwcHg7XG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4gIGJhY2tncm91bmQ6ICNmZmY7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICBmb250LXNpemU6IDE2cHg7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1hbGVydCAudGFidWxhdG9yLWFsZXJ0LW1zZy50YWJ1bGF0b3ItYWxlcnQtc3RhdGUtbXNnIHtcbiAgYm9yZGVyOiA0cHggc29saWQgIzMzMztcbiAgY29sb3I6ICMwMDA7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1hbGVydCAudGFidWxhdG9yLWFsZXJ0LW1zZy50YWJ1bGF0b3ItYWxlcnQtc3RhdGUtZXJyb3Ige1xuICBib3JkZXI6IDRweCBzb2xpZCAjRDAwO1xuICBjb2xvcjogIzU5MDAwMDtcbn1cblxuLnRhYnVsYXRvci1yb3cge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIG1pbi1oZWlnaHQ6IDIycHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG59XG5cbi50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1yb3ctZXZlbiB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNFRkVGRUY7XG59XG5cbkBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcbiAgLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLXNlbGVjdGFibGU6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNiYmI7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICB9XG59XG5cbi50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1zZWxlY3RlZCB7XG4gIGJhY2tncm91bmQtY29sb3I6ICM5QUJDRUE7XG59XG5cbkBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcbiAgLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLXNlbGVjdGVkOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNzY5QkNDO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgfVxufVxuXG4udGFidWxhdG9yLXJvdy50YWJ1bGF0b3Itcm93LW1vdmluZyB7XG4gIGJvcmRlcjogMXB4IHNvbGlkICMwMDA7XG4gIGJhY2tncm91bmQ6ICNmZmY7XG59XG5cbi50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1tb3Zpbmcge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjYWFhO1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2FhYTtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gIHotaW5kZXg6IDE1O1xufVxuXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLXJvdy1yZXNpemUtaGFuZGxlIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICByaWdodDogMDtcbiAgYm90dG9tOiAwO1xuICBsZWZ0OiAwO1xuICBoZWlnaHQ6IDVweDtcbn1cblxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1yb3ctcmVzaXplLWhhbmRsZS5wcmV2IHtcbiAgdG9wOiAwO1xuICBib3R0b206IGF1dG87XG59XG5cbkBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcbiAgLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1yb3ctcmVzaXplLWhhbmRsZTpob3ZlciB7XG4gICAgY3Vyc29yOiBucy1yZXNpemU7XG4gIH1cbn1cblxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1yZXNwb25zaXZlLWNvbGxhcHNlIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgcGFkZGluZzogNXB4O1xuICBib3JkZXItdG9wOiAxcHggc29saWQgI2FhYTtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNhYWE7XG59XG5cbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItcmVzcG9uc2l2ZS1jb2xsYXBzZTplbXB0eSB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItcmVzcG9uc2l2ZS1jb2xsYXBzZSB0YWJsZSB7XG4gIGZvbnQtc2l6ZTogMTRweDtcbn1cblxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1yZXNwb25zaXZlLWNvbGxhcHNlIHRhYmxlIHRyIHRkIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2UgdGFibGUgdHIgdGQ6Zmlyc3Qtb2YtdHlwZSB7XG4gIHBhZGRpbmctcmlnaHQ6IDEwcHg7XG59XG5cbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBwYWRkaW5nOiA0cHg7XG4gIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNhYWE7XG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xufVxuXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwudGFidWxhdG9yLWZyb3plbiB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgcG9zaXRpb246IHN0aWNreTtcbiAgbGVmdDogMDtcbiAgYmFja2dyb3VuZC1jb2xvcjogaW5oZXJpdDtcbiAgei1pbmRleDogMTE7XG59XG5cbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3ItZnJvemVuLnRhYnVsYXRvci1mcm96ZW4tbGVmdCB7XG4gIGJvcmRlci1yaWdodDogMnB4IHNvbGlkICNhYWE7XG59XG5cbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3ItZnJvemVuLnRhYnVsYXRvci1mcm96ZW4tcmlnaHQge1xuICBib3JkZXItbGVmdDogMnB4IHNvbGlkICNhYWE7XG59XG5cbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3ItZWRpdGluZyB7XG4gIGJvcmRlcjogMXB4IHNvbGlkICMxRDY4Q0Q7XG4gIG91dGxpbmU6IG5vbmU7XG4gIHBhZGRpbmc6IDA7XG59XG5cbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3ItZWRpdGluZyBpbnB1dCxcbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3ItZWRpdGluZyBzZWxlY3Qge1xuICBib3JkZXI6IDFweDtcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gIG91dGxpbmU6IG5vbmU7XG59XG5cbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3ItdmFsaWRhdGlvbi1mYWlsIHtcbiAgYm9yZGVyOiAxcHggc29saWQgI2RkMDAwMDtcbn1cblxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsLnRhYnVsYXRvci12YWxpZGF0aW9uLWZhaWwgaW5wdXQsXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwudGFidWxhdG9yLXZhbGlkYXRpb24tZmFpbCBzZWxlY3Qge1xuICBib3JkZXI6IDFweDtcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gIGNvbG9yOiAjZGQwMDAwO1xufVxuXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwudGFidWxhdG9yLXJvdy1oYW5kbGUge1xuICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XG4gIC1raHRtbC11c2VyLXNlbGVjdDogbm9uZTtcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcbiAgLW8tdXNlci1zZWxlY3Q6IG5vbmU7XG59XG5cbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3Itcm93LWhhbmRsZSAudGFidWxhdG9yLXJvdy1oYW5kbGUtYm94IHtcbiAgd2lkdGg6IDgwJTtcbn1cblxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsLnRhYnVsYXRvci1yb3ctaGFuZGxlIC50YWJ1bGF0b3Itcm93LWhhbmRsZS1ib3ggLnRhYnVsYXRvci1yb3ctaGFuZGxlLWJhciB7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDNweDtcbiAgbWFyZ2luLXRvcDogMnB4O1xuICBiYWNrZ3JvdW5kOiAjNjY2O1xufVxuXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtYnJhbmNoLWVtcHR5IHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB3aWR0aDogN3B4O1xufVxuXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtYnJhbmNoIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICBoZWlnaHQ6IDlweDtcbiAgd2lkdGg6IDdweDtcbiAgbWFyZ2luLXRvcDogLTlweDtcbiAgbWFyZ2luLXJpZ2h0OiA1cHg7XG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDFweDtcbiAgYm9yZGVyLWxlZnQ6IDJweCBzb2xpZCAjYWFhO1xuICBib3JkZXItYm90dG9tOiAycHggc29saWQgI2FhYTtcbn1cblxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wge1xuICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIGhlaWdodDogMTFweDtcbiAgd2lkdGg6IDExcHg7XG4gIG1hcmdpbi1yaWdodDogNXB4O1xuICBib3JkZXI6IDFweCBzb2xpZCAjMzMzO1xuICBib3JkZXItcmFkaXVzOiAycHg7XG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC4xKTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxuQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xuICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbDpob3ZlciB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC4yKTtcbiAgfVxufVxuXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbCAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sLWNvbGxhcHNlIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGhlaWdodDogN3B4O1xuICB3aWR0aDogMXB4O1xuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbn1cblxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbC1jb2xsYXBzZTphZnRlciB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgY29udGVudDogXCJcIjtcbiAgbGVmdDogLTNweDtcbiAgdG9wOiAzcHg7XG4gIGhlaWdodDogMXB4O1xuICB3aWR0aDogN3B4O1xuICBiYWNrZ3JvdW5kOiAjMzMzO1xufVxuXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbCAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sLWV4cGFuZCB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBoZWlnaHQ6IDdweDtcbiAgd2lkdGg6IDFweDtcbiAgYmFja2dyb3VuZDogIzMzMztcbn1cblxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbC1leHBhbmQ6YWZ0ZXIge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGNvbnRlbnQ6IFwiXCI7XG4gIGxlZnQ6IC0zcHg7XG4gIHRvcDogM3B4O1xuICBoZWlnaHQ6IDFweDtcbiAgd2lkdGg6IDdweDtcbiAgYmFja2dyb3VuZDogIzMzMztcbn1cblxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItcmVzcG9uc2l2ZS1jb2xsYXBzZS10b2dnbGUge1xuICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XG4gIC1raHRtbC11c2VyLXNlbGVjdDogbm9uZTtcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcbiAgLW8tdXNlci1zZWxlY3Q6IG5vbmU7XG4gIGhlaWdodDogMTVweDtcbiAgd2lkdGg6IDE1cHg7XG4gIGJvcmRlci1yYWRpdXM6IDIwcHg7XG4gIGJhY2tncm91bmQ6ICM2NjY7XG4gIGNvbG9yOiAjZmZmO1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgZm9udC1zaXplOiAxLjFlbTtcbn1cblxuQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xuICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1yZXNwb25zaXZlLWNvbGxhcHNlLXRvZ2dsZTpob3ZlciB7XG4gICAgb3BhY2l0eTogLjc7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICB9XG59XG5cbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCAudGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2UtdG9nZ2xlLm9wZW4gLnRhYnVsYXRvci1yZXNwb25zaXZlLWNvbGxhcHNlLXRvZ2dsZS1jbG9zZSB7XG4gIGRpc3BsYXk6IGluaXRpYWw7XG59XG5cbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCAudGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2UtdG9nZ2xlLm9wZW4gLnRhYnVsYXRvci1yZXNwb25zaXZlLWNvbGxhcHNlLXRvZ2dsZS1vcGVuIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItcmVzcG9uc2l2ZS1jb2xsYXBzZS10b2dnbGUgc3ZnIHtcbiAgc3Ryb2tlOiAjZmZmO1xufVxuXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1yZXNwb25zaXZlLWNvbGxhcHNlLXRvZ2dsZSAudGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2UtdG9nZ2xlLWNsb3NlIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItdHJhZmZpYy1saWdodCB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgaGVpZ2h0OiAxNHB4O1xuICB3aWR0aDogMTRweDtcbiAgYm9yZGVyLXJhZGl1czogMTRweDtcbn1cblxuLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLWdyb3VwIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICM5OTk7XG4gIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNhYWE7XG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjOTk5O1xuICBwYWRkaW5nOiA1cHg7XG4gIHBhZGRpbmctbGVmdDogMTBweDtcbiAgYmFja2dyb3VuZDogI2NjYztcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIG1pbi13aWR0aDogMTAwJTtcbn1cblxuQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xuICAudGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItZ3JvdXA6aG92ZXIge1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMSk7XG4gIH1cbn1cblxuLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLWdyb3VwLnRhYnVsYXRvci1ncm91cC12aXNpYmxlIC50YWJ1bGF0b3ItYXJyb3cge1xuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gIGJvcmRlci1sZWZ0OiA2cHggc29saWQgdHJhbnNwYXJlbnQ7XG4gIGJvcmRlci1yaWdodDogNnB4IHNvbGlkIHRyYW5zcGFyZW50O1xuICBib3JkZXItdG9wOiA2cHggc29saWQgIzY2NjtcbiAgYm9yZGVyLWJvdHRvbTogMDtcbn1cblxuLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLWdyb3VwLnRhYnVsYXRvci1ncm91cC1sZXZlbC0xIHtcbiAgcGFkZGluZy1sZWZ0OiAzMHB4O1xufVxuXG4udGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItZ3JvdXAudGFidWxhdG9yLWdyb3VwLWxldmVsLTIge1xuICBwYWRkaW5nLWxlZnQ6IDUwcHg7XG59XG5cbi50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1ncm91cC50YWJ1bGF0b3ItZ3JvdXAtbGV2ZWwtMyB7XG4gIHBhZGRpbmctbGVmdDogNzBweDtcbn1cblxuLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLWdyb3VwLnRhYnVsYXRvci1ncm91cC1sZXZlbC00IHtcbiAgcGFkZGluZy1sZWZ0OiA5MHB4O1xufVxuXG4udGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItZ3JvdXAudGFidWxhdG9yLWdyb3VwLWxldmVsLTUge1xuICBwYWRkaW5nLWxlZnQ6IDExMHB4O1xufVxuXG4udGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItZ3JvdXAgLnRhYnVsYXRvci1ncm91cC10b2dnbGUge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG59XG5cbi50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1ncm91cCAudGFidWxhdG9yLWFycm93IHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB3aWR0aDogMDtcbiAgaGVpZ2h0OiAwO1xuICBtYXJnaW4tcmlnaHQ6IDE2cHg7XG4gIGJvcmRlci10b3A6IDZweCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgYm9yZGVyLWJvdHRvbTogNnB4IHNvbGlkIHRyYW5zcGFyZW50O1xuICBib3JkZXItcmlnaHQ6IDA7XG4gIGJvcmRlci1sZWZ0OiA2cHggc29saWQgIzY2NjtcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbn1cblxuLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLWdyb3VwIHNwYW4ge1xuICBtYXJnaW4tbGVmdDogMTBweDtcbiAgY29sb3I6ICNkMDA7XG59XG5cbi50YWJ1bGF0b3ItcG9wdXAtY29udGFpbmVyIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIGJhY2tncm91bmQ6ICNmZmY7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNhYWE7XG4gIGJveC1zaGFkb3c6IDAgMCA1cHggMCByZ2JhKDAsIDAsIDAsIDAuMik7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgb3ZlcmZsb3cteTogYXV0bztcbiAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoO1xuICB6LWluZGV4OiAxMDAwMDtcbn1cblxuLnRhYnVsYXRvci1wb3B1cCB7XG4gIHBhZGRpbmc6IDVweDtcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xufVxuXG4udGFidWxhdG9yLXRvb2x0aXAge1xuICBtYXgtd2lkdGg6IE1pbig1MDBweCwgMTAwJSk7XG4gIHBhZGRpbmc6IDNweCA1cHg7XG4gIGJvcmRlci1yYWRpdXM6IDJweDtcbiAgYm94LXNoYWRvdzogbm9uZTtcbiAgZm9udC1zaXplOiAxMnB4O1xuICBwb2ludGVyLWV2ZW50czogbm9uZTtcbn1cblxuLnRhYnVsYXRvci1tZW51IC50YWJ1bGF0b3ItbWVudS1pdGVtIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBwYWRkaW5nOiA1cHggMTBweDtcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XG59XG5cbi50YWJ1bGF0b3ItbWVudSAudGFidWxhdG9yLW1lbnUtaXRlbS50YWJ1bGF0b3ItbWVudS1pdGVtLWRpc2FibGVkIHtcbiAgb3BhY2l0eTogLjU7XG59XG5cbkBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcbiAgLnRhYnVsYXRvci1tZW51IC50YWJ1bGF0b3ItbWVudS1pdGVtOm5vdCgudGFidWxhdG9yLW1lbnUtaXRlbS1kaXNhYmxlZCk6aG92ZXIge1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICBiYWNrZ3JvdW5kOiAjRUZFRkVGO1xuICB9XG59XG5cbi50YWJ1bGF0b3ItbWVudSAudGFidWxhdG9yLW1lbnUtaXRlbS50YWJ1bGF0b3ItbWVudS1pdGVtLXN1Ym1lbnUge1xuICBwYWRkaW5nLXJpZ2h0OiAyNXB4O1xufVxuXG4udGFidWxhdG9yLW1lbnUgLnRhYnVsYXRvci1tZW51LWl0ZW0udGFidWxhdG9yLW1lbnUtaXRlbS1zdWJtZW51OjphZnRlciB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IGNhbGMoNXB4ICsgLjRlbSk7XG4gIHJpZ2h0OiAxMHB4O1xuICBoZWlnaHQ6IDdweDtcbiAgd2lkdGg6IDdweDtcbiAgY29udGVudDogJyc7XG4gIGJvcmRlci13aWR0aDogMXB4IDFweCAwIDA7XG4gIGJvcmRlci1zdHlsZTogc29saWQ7XG4gIGJvcmRlci1jb2xvcjogI2FhYTtcbiAgdmVydGljYWwtYWxpZ246IHRvcDtcbiAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1xufVxuXG4udGFidWxhdG9yLW1lbnUgLnRhYnVsYXRvci1tZW51LXNlcGFyYXRvciB7XG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjYWFhO1xufVxuXG4udGFidWxhdG9yLWVkaXQtbGlzdCB7XG4gIG1heC1oZWlnaHQ6IDIwMHB4O1xuICBmb250LXNpemU6IDE0cHg7XG4gIG92ZXJmbG93LXk6IGF1dG87XG4gIC13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOiB0b3VjaDtcbn1cblxuLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtaXRlbSB7XG4gIHBhZGRpbmc6IDRweDtcbiAgY29sb3I6ICMzMzM7XG4gIG91dGxpbmU6IG5vbmU7XG59XG5cbi50YWJ1bGF0b3ItZWRpdC1saXN0IC50YWJ1bGF0b3ItZWRpdC1saXN0LWl0ZW0uYWN0aXZlIHtcbiAgY29sb3I6ICNmZmY7XG4gIGJhY2tncm91bmQ6ICMxRDY4Q0Q7XG59XG5cbi50YWJ1bGF0b3ItZWRpdC1saXN0IC50YWJ1bGF0b3ItZWRpdC1saXN0LWl0ZW0uYWN0aXZlLmZvY3VzZWQge1xuICBvdXRsaW5lOiAxcHggc29saWQgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpO1xufVxuXG4udGFidWxhdG9yLWVkaXQtbGlzdCAudGFidWxhdG9yLWVkaXQtbGlzdC1pdGVtLmZvY3VzZWQge1xuICBvdXRsaW5lOiAxcHggc29saWQgIzFENjhDRDtcbn1cblxuQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xuICAudGFidWxhdG9yLWVkaXQtbGlzdCAudGFidWxhdG9yLWVkaXQtbGlzdC1pdGVtOmhvdmVyIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgY29sb3I6ICNmZmY7XG4gICAgYmFja2dyb3VuZDogIzFENjhDRDtcbiAgfVxufVxuXG4udGFidWxhdG9yLWVkaXQtbGlzdCAudGFidWxhdG9yLWVkaXQtbGlzdC1wbGFjZWhvbGRlciB7XG4gIHBhZGRpbmc6IDRweDtcbiAgY29sb3I6ICMzMzM7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtZ3JvdXAge1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2FhYTtcbiAgcGFkZGluZzogNHB4O1xuICBwYWRkaW5nLXRvcDogNnB4O1xuICBjb2xvcjogIzMzMztcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbi50YWJ1bGF0b3ItZWRpdC1saXN0IC50YWJ1bGF0b3ItZWRpdC1saXN0LWl0ZW0udGFidWxhdG9yLWVkaXQtbGlzdC1ncm91cC1sZXZlbC0yLFxuLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtZ3JvdXAudGFidWxhdG9yLWVkaXQtbGlzdC1ncm91cC1sZXZlbC0yIHtcbiAgcGFkZGluZy1sZWZ0OiAxMnB4O1xufVxuXG4udGFidWxhdG9yLWVkaXQtbGlzdCAudGFidWxhdG9yLWVkaXQtbGlzdC1pdGVtLnRhYnVsYXRvci1lZGl0LWxpc3QtZ3JvdXAtbGV2ZWwtMyxcbi50YWJ1bGF0b3ItZWRpdC1saXN0IC50YWJ1bGF0b3ItZWRpdC1saXN0LWdyb3VwLnRhYnVsYXRvci1lZGl0LWxpc3QtZ3JvdXAtbGV2ZWwtMyB7XG4gIHBhZGRpbmctbGVmdDogMjBweDtcbn1cblxuLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtaXRlbS50YWJ1bGF0b3ItZWRpdC1saXN0LWdyb3VwLWxldmVsLTQsXG4udGFidWxhdG9yLWVkaXQtbGlzdCAudGFidWxhdG9yLWVkaXQtbGlzdC1ncm91cC50YWJ1bGF0b3ItZWRpdC1saXN0LWdyb3VwLWxldmVsLTQge1xuICBwYWRkaW5nLWxlZnQ6IDI4cHg7XG59XG5cbi50YWJ1bGF0b3ItZWRpdC1saXN0IC50YWJ1bGF0b3ItZWRpdC1saXN0LWl0ZW0udGFidWxhdG9yLWVkaXQtbGlzdC1ncm91cC1sZXZlbC01LFxuLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtZ3JvdXAudGFidWxhdG9yLWVkaXQtbGlzdC1ncm91cC1sZXZlbC01IHtcbiAgcGFkZGluZy1sZWZ0OiAzNnB4O1xufVxuXG4udGFidWxhdG9yLnRhYnVsYXRvci1sdHIge1xuICBkaXJlY3Rpb246IGx0cjtcbn1cblxuLnRhYnVsYXRvci50YWJ1bGF0b3ItcnRsIHtcbiAgdGV4dC1hbGlnbjogaW5pdGlhbDtcbiAgZGlyZWN0aW9uOiBydGw7XG59XG5cbi50YWJ1bGF0b3IudGFidWxhdG9yLXJ0bCAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbCB7XG4gIHRleHQtYWxpZ246IGluaXRpYWw7XG4gIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI2FhYTtcbiAgYm9yZGVyLXJpZ2h0OiBpbml0aWFsO1xufVxuXG4udGFidWxhdG9yLnRhYnVsYXRvci1ydGwgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLWNvbC1ncm91cCAudGFidWxhdG9yLWNvbC1ncm91cC1jb2xzIHtcbiAgbWFyZ2luLXJpZ2h0OiBpbml0aWFsO1xuICBtYXJnaW4tbGVmdDogLTFweDtcbn1cblxuLnRhYnVsYXRvci50YWJ1bGF0b3ItcnRsIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1zb3J0YWJsZSAudGFidWxhdG9yLWNvbC10aXRsZSB7XG4gIHBhZGRpbmctcmlnaHQ6IDA7XG4gIHBhZGRpbmctbGVmdDogMjVweDtcbn1cblxuLnRhYnVsYXRvci50YWJ1bGF0b3ItcnRsIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtc29ydGVyIHtcbiAgbGVmdDogOHB4O1xuICByaWdodDogaW5pdGlhbDtcbn1cblxuLnRhYnVsYXRvci50YWJ1bGF0b3ItcnRsIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCB7XG4gIGJvcmRlci1yaWdodDogaW5pdGlhbDtcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjYWFhO1xufVxuXG4udGFidWxhdG9yLnRhYnVsYXRvci1ydGwgLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItZGF0YS10cmVlLWJyYW5jaCB7XG4gIG1hcmdpbi1yaWdodDogaW5pdGlhbDtcbiAgbWFyZ2luLWxlZnQ6IDVweDtcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogaW5pdGlhbDtcbiAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDFweDtcbiAgYm9yZGVyLWxlZnQ6IGluaXRpYWw7XG4gIGJvcmRlci1yaWdodDogMnB4IHNvbGlkICNhYWE7XG59XG5cbi50YWJ1bGF0b3IudGFidWxhdG9yLXJ0bCAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbCB7XG4gIG1hcmdpbi1yaWdodDogaW5pdGlhbDtcbiAgbWFyZ2luLWxlZnQ6IDVweDtcbn1cblxuLnRhYnVsYXRvci50YWJ1bGF0b3ItcnRsIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3ItZnJvemVuLnRhYnVsYXRvci1mcm96ZW4tbGVmdCB7XG4gIGJvcmRlci1sZWZ0OiAycHggc29saWQgI2FhYTtcbn1cblxuLnRhYnVsYXRvci50YWJ1bGF0b3ItcnRsIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3ItZnJvemVuLnRhYnVsYXRvci1mcm96ZW4tcmlnaHQge1xuICBib3JkZXItcmlnaHQ6IDJweCBzb2xpZCAjYWFhO1xufVxuXG4udGFidWxhdG9yLnRhYnVsYXRvci1ydGwgLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jb2wtcmVzaXplLWhhbmRsZTpsYXN0LW9mLXR5cGUge1xuICB3aWR0aDogM3B4O1xuICBtYXJnaW4tbGVmdDogMDtcbiAgbWFyZ2luLXJpZ2h0OiAtM3B4O1xufVxuXG4udGFidWxhdG9yLnRhYnVsYXRvci1ydGwgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1jYWxjcy1ob2xkZXIge1xuICB0ZXh0LWFsaWduOiBpbml0aWFsO1xufVxuXG4udGFidWxhdG9yLXByaW50LWZ1bGxzY3JlZW4ge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgYm90dG9tOiAwO1xuICBsZWZ0OiAwO1xuICByaWdodDogMDtcbiAgei1pbmRleDogMTAwMDA7XG59XG5cbmJvZHkudGFidWxhdG9yLXByaW50LWZ1bGxzY3JlZW4taGlkZSA+ICo6bm90KC50YWJ1bGF0b3ItcHJpbnQtZnVsbHNjcmVlbikge1xuICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XG59XG5cbi50YWJ1bGF0b3ItcHJpbnQtdGFibGUge1xuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xufVxuXG4udGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItZGF0YS10cmVlLWJyYW5jaCB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgaGVpZ2h0OiA5cHg7XG4gIHdpZHRoOiA3cHg7XG4gIG1hcmdpbi10b3A6IC05cHg7XG4gIG1hcmdpbi1yaWdodDogNXB4O1xuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAxcHg7XG4gIGJvcmRlci1sZWZ0OiAycHggc29saWQgI2FhYTtcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICNhYWE7XG59XG5cbi50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1wcmludC10YWJsZS1ncm91cCB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjOTk5O1xuICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjYWFhO1xuICBib3JkZXItdG9wOiAxcHggc29saWQgIzk5OTtcbiAgcGFkZGluZzogNXB4O1xuICBwYWRkaW5nLWxlZnQ6IDEwcHg7XG4gIGJhY2tncm91bmQ6ICNjY2M7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICBtaW4td2lkdGg6IDEwMCU7XG59XG5cbkBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcbiAgLnRhYnVsYXRvci1wcmludC10YWJsZSAudGFidWxhdG9yLXByaW50LXRhYmxlLWdyb3VwOmhvdmVyIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjEpO1xuICB9XG59XG5cbi50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1wcmludC10YWJsZS1ncm91cC50YWJ1bGF0b3ItZ3JvdXAtdmlzaWJsZSAudGFidWxhdG9yLWFycm93IHtcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICBib3JkZXItbGVmdDogNnB4IHNvbGlkIHRyYW5zcGFyZW50O1xuICBib3JkZXItcmlnaHQ6IDZweCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgYm9yZGVyLXRvcDogNnB4IHNvbGlkICM2NjY7XG4gIGJvcmRlci1ib3R0b206IDA7XG59XG5cbi50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1wcmludC10YWJsZS1ncm91cC50YWJ1bGF0b3ItZ3JvdXAtbGV2ZWwtMSB0ZCB7XG4gIHBhZGRpbmctbGVmdDogMzBweCAhaW1wb3J0YW50O1xufVxuXG4udGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUtZ3JvdXAudGFidWxhdG9yLWdyb3VwLWxldmVsLTIgdGQge1xuICBwYWRkaW5nLWxlZnQ6IDUwcHggIWltcG9ydGFudDtcbn1cblxuLnRhYnVsYXRvci1wcmludC10YWJsZSAudGFidWxhdG9yLXByaW50LXRhYmxlLWdyb3VwLnRhYnVsYXRvci1ncm91cC1sZXZlbC0zIHRkIHtcbiAgcGFkZGluZy1sZWZ0OiA3MHB4ICFpbXBvcnRhbnQ7XG59XG5cbi50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1wcmludC10YWJsZS1ncm91cC50YWJ1bGF0b3ItZ3JvdXAtbGV2ZWwtNCB0ZCB7XG4gIHBhZGRpbmctbGVmdDogOTBweCAhaW1wb3J0YW50O1xufVxuXG4udGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUtZ3JvdXAudGFidWxhdG9yLWdyb3VwLWxldmVsLTUgdGQge1xuICBwYWRkaW5nLWxlZnQ6IDExMHB4ICFpbXBvcnRhbnQ7XG59XG5cbi50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1wcmludC10YWJsZS1ncm91cCAudGFidWxhdG9yLWdyb3VwLXRvZ2dsZSB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbn1cblxuLnRhYnVsYXRvci1wcmludC10YWJsZSAudGFidWxhdG9yLXByaW50LXRhYmxlLWdyb3VwIC50YWJ1bGF0b3ItYXJyb3cge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHdpZHRoOiAwO1xuICBoZWlnaHQ6IDA7XG4gIG1hcmdpbi1yaWdodDogMTZweDtcbiAgYm9yZGVyLXRvcDogNnB4IHNvbGlkIHRyYW5zcGFyZW50O1xuICBib3JkZXItYm90dG9tOiA2cHggc29saWQgdHJhbnNwYXJlbnQ7XG4gIGJvcmRlci1yaWdodDogMDtcbiAgYm9yZGVyLWxlZnQ6IDZweCBzb2xpZCAjNjY2O1xuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xufVxuXG4udGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUtZ3JvdXAgc3BhbiB7XG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xuICBjb2xvcjogI2QwMDtcbn1cblxuLnRhYnVsYXRvci1wcmludC10YWJsZSAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sIHtcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICBoZWlnaHQ6IDExcHg7XG4gIHdpZHRoOiAxMXB4O1xuICBtYXJnaW4tcmlnaHQ6IDVweDtcbiAgYm9yZGVyOiAxcHggc29saWQgIzMzMztcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xuICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuMSk7XG4gIG92ZXJmbG93OiBoaWRkZW47XG59XG5cbkBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcbiAgLnRhYnVsYXRvci1wcmludC10YWJsZSAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sOmhvdmVyIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjIpO1xuICB9XG59XG5cbi50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbCAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sLWNvbGxhcHNlIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGhlaWdodDogN3B4O1xuICB3aWR0aDogMXB4O1xuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbn1cblxuLnRhYnVsYXRvci1wcmludC10YWJsZSAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wtY29sbGFwc2U6YWZ0ZXIge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGNvbnRlbnQ6IFwiXCI7XG4gIGxlZnQ6IC0zcHg7XG4gIHRvcDogM3B4O1xuICBoZWlnaHQ6IDFweDtcbiAgd2lkdGg6IDdweDtcbiAgYmFja2dyb3VuZDogIzMzMztcbn1cblxuLnRhYnVsYXRvci1wcmludC10YWJsZSAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wtZXhwYW5kIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGhlaWdodDogN3B4O1xuICB3aWR0aDogMXB4O1xuICBiYWNrZ3JvdW5kOiAjMzMzO1xufVxuXG4udGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbC1leHBhbmQ6YWZ0ZXIge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGNvbnRlbnQ6IFwiXCI7XG4gIGxlZnQ6IC0zcHg7XG4gIHRvcDogM3B4O1xuICBoZWlnaHQ6IDFweDtcbiAgd2lkdGg6IDdweDtcbiAgYmFja2dyb3VuZDogIzMzMztcbn1cblxuLyojIHNvdXJjZU1hcHBpbmdVUkw9dGFidWxhdG9yLmNzcy5tYXAgKi9gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy90YWJ1bGF0b3ItdGFibGVzL2Rpc3QvY3NzL3RhYnVsYXRvci5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvdGFidWxhdG9yLXRhYmxlcy9kaXN0L2Nzcy90YWJ1bGF0b3IuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0Usa0JBQWtCO0VBQ2xCLHNCQUFzQjtFQUN0QixzQkFBc0I7RUFDdEIsZUFBZTtFQUNmLGdCQUFnQjtFQUNoQixnQkFBZ0I7RUFDaEIsZ0NBQWdDO0VBQ2hDLDZCQUE2QjtFQUM3Qiw0QkFBNEI7RUFDNUIsMkJBQTJCO0VBQzNCLHdCQUF3QjtBQUFFOztBQUMxQjtFQUNFLGVBQWU7QUFBRTs7QUFDbkI7RUFDRSxxQkFBcUI7QUFBRTs7QUFDekI7RUFDRSxpQkFBaUI7QUFBRTs7QUFDckI7RUFDRSxrQkFBa0I7RUFDbEIsc0JBQXNCO0VBQ3RCLFdBQVc7RUFDWCw2QkFBNkI7RUFDN0IseUJBQXlCO0VBQ3pCLFdBQVc7RUFDWCxpQkFBaUI7RUFDakIsbUJBQW1CO0VBQ25CLGdCQUFnQjtFQUNoQixzQkFBc0I7RUFDdEIsd0JBQXdCO0VBQ3hCLHlCQUF5QjtFQUN6QixvQkFBb0I7QUFBRTs7QUFDdEI7RUFDRSxhQUFhO0FBQUU7O0FBQ2pCO0VBQ0Usa0JBQWtCO0VBQ2xCLGdCQUFnQjtBQUFFOztBQUNsQjtFQUNFLHFCQUFxQjtBQUFFOztBQUMzQjtFQUNFLG9CQUFvQjtFQUNwQixrQkFBa0I7RUFDbEIsc0JBQXNCO0VBQ3RCLHNCQUFzQjtFQUN0QiwyQkFBMkI7RUFDM0IsNEJBQTRCO0VBQzVCLG1CQUFtQjtFQUNuQixnQkFBZ0I7RUFDaEIsc0JBQXNC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YXRvciB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjOTk5O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzg4ODtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XFxuICAtbW96LXRyYW5zZm9ybTogdHJhbnNsYXRlWigwKTtcXG4gIC1tcy10cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XFxuICAtby10cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7IH1cXG4gIC50YWJ1bGF0b3JbdGFidWxhdG9yLWxheW91dD1cXFwiZml0RGF0YUZpbGxcXFwiXSAudGFidWxhdG9yLXRhYmxlaG9sZGVyIC50YWJ1bGF0b3ItdGFibGUge1xcbiAgICBtaW4td2lkdGg6IDEwMCU7IH1cXG4gIC50YWJ1bGF0b3JbdGFidWxhdG9yLWxheW91dD1cXFwiZml0RGF0YVRhYmxlXFxcIl0ge1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IH1cXG4gIC50YWJ1bGF0b3IudGFidWxhdG9yLWJsb2NrLXNlbGVjdCB7XFxuICAgIHVzZXItc2VsZWN0OiBub25lOyB9XFxuICAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICM5OTk7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlNmU2ZTY7XFxuICAgIGNvbG9yOiAjNTU1O1xcbiAgICBmb250LXdlaWdodDogYm9sZDtcXG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gICAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcXG4gICAgLWtodG1sLXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAtby11c2VyLXNlbGVjdDogbm9uZTsgfVxcbiAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyLnRhYnVsYXRvci1oZWFkZXItaGlkZGVuIHtcXG4gICAgICBkaXNwbGF5OiBub25lOyB9XFxuICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1oZWFkZXItY29udGVudHMge1xcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgICBvdmVyZmxvdzogaGlkZGVuOyB9XFxuICAgICAgLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWhlYWRlci1jb250ZW50cyAudGFidWxhdG9yLWhlYWRlcnMge1xcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOyB9XFxuICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wge1xcbiAgICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcbiAgICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNhYWE7XFxuICAgICAgYmFja2dyb3VuZDogI2U2ZTZlNjtcXG4gICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xcbiAgICAgIHZlcnRpY2FsLWFsaWduOiBib3R0b207XFxuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjsgfVxcbiAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLW1vdmluZyB7XFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjOTk5O1xcbiAgICAgICAgYmFja2dyb3VuZDogI2NkY2RjZDtcXG4gICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lOyB9XFxuICAgICAgLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbCAudGFidWxhdG9yLWNvbC1jb250ZW50IHtcXG4gICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgICBwYWRkaW5nOiA0cHg7IH1cXG4gICAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWhlYWRlci1wb3B1cC1idXR0b24ge1xcbiAgICAgICAgICBwYWRkaW5nOiAwIDhweDsgfVxcbiAgICAgICAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1oZWFkZXItcG9wdXAtYnV0dG9uOmhvdmVyIHtcXG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgICAgICAgb3BhY2l0eTogLjY7IH1cXG4gICAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC10aXRsZS1ob2xkZXIge1xcbiAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7IH1cXG4gICAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC10aXRsZSB7XFxuICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgICAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXG4gICAgICAgICAgdmVydGljYWwtYWxpZ246IGJvdHRvbTsgfVxcbiAgICAgICAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtdGl0bGUudGFidWxhdG9yLWNvbC10aXRsZS13cmFwIHtcXG4gICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm9ybWFsO1xcbiAgICAgICAgICAgIHRleHQtb3ZlcmZsb3c6IGluaXRpYWw7IH1cXG4gICAgICAgICAgLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbCAudGFidWxhdG9yLWNvbC1jb250ZW50IC50YWJ1bGF0b3ItY29sLXRpdGxlIC50YWJ1bGF0b3ItdGl0bGUtZWRpdG9yIHtcXG4gICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICM5OTk7XFxuICAgICAgICAgICAgcGFkZGluZzogMXB4O1xcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICNmZmY7IH1cXG4gICAgICAgICAgLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbCAudGFidWxhdG9yLWNvbC1jb250ZW50IC50YWJ1bGF0b3ItY29sLXRpdGxlIC50YWJ1bGF0b3ItaGVhZGVyLXBvcHVwLWJ1dHRvbiArIC50YWJ1bGF0b3ItdGl0bGUtZWRpdG9yIHtcXG4gICAgICAgICAgICB3aWR0aDogY2FsYygxMDAlIC0gMjJweCk7IH1cXG4gICAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC1zb3J0ZXIge1xcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICAgIHRvcDogMDtcXG4gICAgICAgICAgYm90dG9tOiAwO1xcbiAgICAgICAgICByaWdodDogNHB4OyB9XFxuICAgICAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC1zb3J0ZXIgLnRhYnVsYXRvci1hcnJvdyB7XFxuICAgICAgICAgICAgd2lkdGg6IDA7XFxuICAgICAgICAgICAgaGVpZ2h0OiAwO1xcbiAgICAgICAgICAgIGJvcmRlci1sZWZ0OiA2cHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICAgICAgICAgICAgYm9yZGVyLXJpZ2h0OiA2cHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogNnB4IHNvbGlkICNiYmI7IH1cXG4gICAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1jb2wtZ3JvdXAgLnRhYnVsYXRvci1jb2wtZ3JvdXAtY29scyB7XFxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNhYWE7XFxuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAtMXB4OyB9XFxuICAgICAgLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbCAudGFidWxhdG9yLWhlYWRlci1maWx0ZXIge1xcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgICAgIG1hcmdpbi10b3A6IDJweDtcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOyB9XFxuICAgICAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sIC50YWJ1bGF0b3ItaGVhZGVyLWZpbHRlciB0ZXh0YXJlYSB7XFxuICAgICAgICAgIGhlaWdodDogYXV0byAhaW1wb3J0YW50OyB9XFxuICAgICAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sIC50YWJ1bGF0b3ItaGVhZGVyLWZpbHRlciBzdmcge1xcbiAgICAgICAgICBtYXJnaW4tdG9wOiAzcHg7IH1cXG4gICAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1oZWFkZXItZmlsdGVyIGlucHV0OjotbXMtY2xlYXIge1xcbiAgICAgICAgICB3aWR0aDogMDtcXG4gICAgICAgICAgaGVpZ2h0OiAwOyB9XFxuICAgICAgLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3Itc29ydGFibGUgLnRhYnVsYXRvci1jb2wtdGl0bGUge1xcbiAgICAgICAgcGFkZGluZy1yaWdodDogMjVweDsgfVxcbiAgICAgIEBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcXG4gICAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlLnRhYnVsYXRvci1jb2wtc29ydGVyLWVsZW1lbnQ6aG92ZXIge1xcbiAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNjZGNkY2Q7IH0gfVxcbiAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlW2FyaWEtc29ydD1cXFwibm9uZVxcXCJdIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtc29ydGVyIHtcXG4gICAgICAgIGNvbG9yOiAjYmJiOyB9XFxuICAgICAgICBAbWVkaWEgKGhvdmVyOiBob3ZlcikgYW5kIChwb2ludGVyOiBmaW5lKSB7XFxuICAgICAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlW2FyaWEtc29ydD1cXFwibm9uZVxcXCJdIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtc29ydGVyLnRhYnVsYXRvci1jb2wtc29ydGVyLWVsZW1lbnQgLnRhYnVsYXRvci1hcnJvdzpob3ZlciB7XFxuICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICAgICAgICAgIGJvcmRlci1ib3R0b206IDZweCBzb2xpZCAjNTU1OyB9IH1cXG4gICAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlW2FyaWEtc29ydD1cXFwibm9uZVxcXCJdIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtc29ydGVyIC50YWJ1bGF0b3ItYXJyb3cge1xcbiAgICAgICAgICBib3JkZXItdG9wOiBub25lO1xcbiAgICAgICAgICBib3JkZXItYm90dG9tOiA2cHggc29saWQgI2JiYjsgfVxcbiAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlW2FyaWEtc29ydD1cXFwiYXNjZW5kaW5nXFxcIl0gLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC1zb3J0ZXIge1xcbiAgICAgICAgY29sb3I6ICM2NjY7IH1cXG4gICAgICAgIEBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcXG4gICAgICAgICAgLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3Itc29ydGFibGVbYXJpYS1zb3J0PVxcXCJhc2NlbmRpbmdcXFwiXSAudGFidWxhdG9yLWNvbC1jb250ZW50IC50YWJ1bGF0b3ItY29sLXNvcnRlci50YWJ1bGF0b3ItY29sLXNvcnRlci1lbGVtZW50IC50YWJ1bGF0b3ItYXJyb3c6aG92ZXIge1xcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgICAgICAgICBib3JkZXItYm90dG9tOiA2cHggc29saWQgIzU1NTsgfSB9XFxuICAgICAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1zb3J0YWJsZVthcmlhLXNvcnQ9XFxcImFzY2VuZGluZ1xcXCJdIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtc29ydGVyIC50YWJ1bGF0b3ItYXJyb3cge1xcbiAgICAgICAgICBib3JkZXItdG9wOiBub25lO1xcbiAgICAgICAgICBib3JkZXItYm90dG9tOiA2cHggc29saWQgIzY2NjsgfVxcbiAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlW2FyaWEtc29ydD1cXFwiZGVzY2VuZGluZ1xcXCJdIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtc29ydGVyIHtcXG4gICAgICAgIGNvbG9yOiAjNjY2OyB9XFxuICAgICAgICBAbWVkaWEgKGhvdmVyOiBob3ZlcikgYW5kIChwb2ludGVyOiBmaW5lKSB7XFxuICAgICAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlW2FyaWEtc29ydD1cXFwiZGVzY2VuZGluZ1xcXCJdIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtc29ydGVyLnRhYnVsYXRvci1jb2wtc29ydGVyLWVsZW1lbnQgLnRhYnVsYXRvci1hcnJvdzpob3ZlciB7XFxuICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICAgICAgICAgIGJvcmRlci10b3A6IDZweCBzb2xpZCAjNTU1OyB9IH1cXG4gICAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlW2FyaWEtc29ydD1cXFwiZGVzY2VuZGluZ1xcXCJdIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtc29ydGVyIC50YWJ1bGF0b3ItYXJyb3cge1xcbiAgICAgICAgICBib3JkZXItYm90dG9tOiBub25lO1xcbiAgICAgICAgICBib3JkZXItdG9wOiA2cHggc29saWQgIzY2NjtcXG4gICAgICAgICAgY29sb3I6ICM2NjY7IH1cXG4gICAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1jb2wtdmVydGljYWwgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC10aXRsZSB7XFxuICAgICAgICB3cml0aW5nLW1vZGU6IHZlcnRpY2FsLXJsO1xcbiAgICAgICAgdGV4dC1vcmllbnRhdGlvbjogbWl4ZWQ7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOyB9XFxuICAgICAgLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3ItY29sLXZlcnRpY2FsLnRhYnVsYXRvci1jb2wtdmVydGljYWwtZmxpcCAudGFidWxhdG9yLWNvbC10aXRsZSB7XFxuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpOyB9XFxuICAgICAgLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3ItY29sLXZlcnRpY2FsLnRhYnVsYXRvci1zb3J0YWJsZSAudGFidWxhdG9yLWNvbC10aXRsZSB7XFxuICAgICAgICBwYWRkaW5nLXJpZ2h0OiAwO1xcbiAgICAgICAgcGFkZGluZy10b3A6IDIwcHg7IH1cXG4gICAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1jb2wtdmVydGljYWwudGFidWxhdG9yLXNvcnRhYmxlLnRhYnVsYXRvci1jb2wtdmVydGljYWwtZmxpcCAudGFidWxhdG9yLWNvbC10aXRsZSB7XFxuICAgICAgICBwYWRkaW5nLXJpZ2h0OiAwO1xcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDIwcHg7IH1cXG4gICAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1jb2wtdmVydGljYWwudGFidWxhdG9yLXNvcnRhYmxlIC50YWJ1bGF0b3ItY29sLXNvcnRlciB7XFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgICAgIGxlZnQ6IDA7XFxuICAgICAgICByaWdodDogMDtcXG4gICAgICAgIHRvcDogNHB4O1xcbiAgICAgICAgYm90dG9tOiBhdXRvOyB9XFxuICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1mcm96ZW4ge1xcbiAgICAgIHBvc2l0aW9uOiBzdGlja3k7XFxuICAgICAgbGVmdDogMDtcXG4gICAgICB6LWluZGV4OiAxMTsgfVxcbiAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1mcm96ZW4udGFidWxhdG9yLWZyb3plbi1sZWZ0IHtcXG4gICAgICAgIGJvcmRlci1yaWdodDogMnB4IHNvbGlkICNhYWE7IH1cXG4gICAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItZnJvemVuLnRhYnVsYXRvci1mcm96ZW4tcmlnaHQge1xcbiAgICAgICAgYm9yZGVyLWxlZnQ6IDJweCBzb2xpZCAjYWFhOyB9XFxuICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jYWxjcy1ob2xkZXIge1xcbiAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgICAgYmFja2dyb3VuZDogI2YzZjNmMyAhaW1wb3J0YW50O1xcbiAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjYWFhO1xcbiAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjYWFhOyB9XFxuICAgICAgLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNhbGNzLWhvbGRlciAudGFidWxhdG9yLXJvdyB7XFxuICAgICAgICBiYWNrZ3JvdW5kOiAjZjNmM2YzICFpbXBvcnRhbnQ7IH1cXG4gICAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jYWxjcy1ob2xkZXIgLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jb2wtcmVzaXplLWhhbmRsZSB7XFxuICAgICAgICAgIGRpc3BsYXk6IG5vbmU7IH1cXG4gICAgLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWZyb3plbi1yb3dzLWhvbGRlcjplbXB0eSB7XFxuICAgICAgZGlzcGxheTogbm9uZTsgfVxcbiAgLnRhYnVsYXRvciAudGFidWxhdG9yLXRhYmxlaG9sZGVyIHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gICAgb3ZlcmZsb3c6IGF1dG87XFxuICAgIC13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOiB0b3VjaDsgfVxcbiAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItdGFibGVob2xkZXI6Zm9jdXMge1xcbiAgICAgIG91dGxpbmU6IG5vbmU7IH1cXG4gICAgLnRhYnVsYXRvciAudGFidWxhdG9yLXRhYmxlaG9sZGVyIC50YWJ1bGF0b3ItcGxhY2Vob2xkZXIge1xcbiAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICAgIHdpZHRoOiAxMDAlOyB9XFxuICAgICAgLnRhYnVsYXRvciAudGFidWxhdG9yLXRhYmxlaG9sZGVyIC50YWJ1bGF0b3ItcGxhY2Vob2xkZXJbdGFidWxhdG9yLXJlbmRlci1tb2RlPVxcXCJ2aXJ0dWFsXFxcIl0ge1xcbiAgICAgICAgbWluLWhlaWdodDogMTAwJTtcXG4gICAgICAgIG1pbi13aWR0aDogMTAwJTsgfVxcbiAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci10YWJsZWhvbGRlciAudGFidWxhdG9yLXBsYWNlaG9sZGVyIC50YWJ1bGF0b3ItcGxhY2Vob2xkZXItY29udGVudHMge1xcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICAgICAgcGFkZGluZzogMTBweDtcXG4gICAgICAgIGNvbG9yOiAjY2NjO1xcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICAgICAgICBmb250LXNpemU6IDIwcHg7XFxuICAgICAgICB3aGl0ZS1zcGFjZTogbm9ybWFsOyB9XFxuICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci10YWJsZWhvbGRlciAudGFidWxhdG9yLXRhYmxlIHtcXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gICAgICBvdmVyZmxvdzogdmlzaWJsZTtcXG4gICAgICBjb2xvcjogIzMzMzsgfVxcbiAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci10YWJsZWhvbGRlciAudGFidWxhdG9yLXRhYmxlIC50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1jYWxjcyB7XFxuICAgICAgICBmb250LXdlaWdodDogYm9sZDtcXG4gICAgICAgIGJhY2tncm91bmQ6ICNlMmUyZTIgIWltcG9ydGFudDsgfVxcbiAgICAgICAgLnRhYnVsYXRvciAudGFidWxhdG9yLXRhYmxlaG9sZGVyIC50YWJ1bGF0b3ItdGFibGUgLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLWNhbGNzLnRhYnVsYXRvci1jYWxjcy10b3Age1xcbiAgICAgICAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgI2FhYTsgfVxcbiAgICAgICAgLnRhYnVsYXRvciAudGFidWxhdG9yLXRhYmxlaG9sZGVyIC50YWJ1bGF0b3ItdGFibGUgLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLWNhbGNzLnRhYnVsYXRvci1jYWxjcy1ib3R0b20ge1xcbiAgICAgICAgICBib3JkZXItdG9wOiAycHggc29saWQgI2FhYTsgfVxcbiAgLnRhYnVsYXRvciAudGFidWxhdG9yLWZvb3RlciB7XFxuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjOTk5O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTZlNmU2O1xcbiAgICBjb2xvcjogIzU1NTtcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICAgIHVzZXItc2VsZWN0OiBub25lO1xcbiAgICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAta2h0bWwtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgIC1vLXVzZXItc2VsZWN0OiBub25lOyB9XFxuICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1mb290ZXItY29udGVudHMge1xcbiAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gICAgICBwYWRkaW5nOiA1cHggMTBweDsgfVxcbiAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1mb290ZXItY29udGVudHM6ZW1wdHkge1xcbiAgICAgICAgZGlzcGxheTogbm9uZTsgfVxcbiAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyIC50YWJ1bGF0b3ItY2FsY3MtaG9sZGVyIHtcXG4gICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgIHRleHQtYWxpZ246IGxlZnQ7XFxuICAgICAgYmFja2dyb3VuZDogI2YzZjNmMyAhaW1wb3J0YW50O1xcbiAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjYWFhO1xcbiAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjYWFhO1xcbiAgICAgIG92ZXJmbG93OiBoaWRkZW47IH1cXG4gICAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyIC50YWJ1bGF0b3ItY2FsY3MtaG9sZGVyIC50YWJ1bGF0b3Itcm93IHtcXG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgICAgIGJhY2tncm91bmQ6ICNmM2YzZjMgIWltcG9ydGFudDsgfVxcbiAgICAgICAgLnRhYnVsYXRvciAudGFidWxhdG9yLWZvb3RlciAudGFidWxhdG9yLWNhbGNzLWhvbGRlciAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNvbC1yZXNpemUtaGFuZGxlIHtcXG4gICAgICAgICAgZGlzcGxheTogbm9uZTsgfVxcbiAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1jYWxjcy1ob2xkZXI6b25seS1jaGlsZCB7XFxuICAgICAgICBtYXJnaW4tYm90dG9tOiAtNXB4O1xcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogbm9uZTsgfVxcbiAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyID4gKiArIC50YWJ1bGF0b3ItcGFnZS1jb3VudGVyIHtcXG4gICAgICBtYXJnaW4tbGVmdDogMTBweDsgfVxcbiAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyIC50YWJ1bGF0b3ItcGFnZS1jb3VudGVyIHtcXG4gICAgICBmb250LXdlaWdodDogbm9ybWFsOyB9XFxuICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1wYWdpbmF0b3Ige1xcbiAgICAgIGZsZXg6IDE7XFxuICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XFxuICAgICAgY29sb3I6ICM1NTU7XFxuICAgICAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XFxuICAgICAgZm9udC13ZWlnaHQ6IGluaGVyaXQ7XFxuICAgICAgZm9udC1zaXplOiBpbmhlcml0OyB9XFxuICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1wYWdlLXNpemUge1xcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgICBtYXJnaW46IDAgNXB4O1xcbiAgICAgIHBhZGRpbmc6IDJweCA1cHg7XFxuICAgICAgYm9yZGVyOiAxcHggc29saWQgI2FhYTtcXG4gICAgICBib3JkZXItcmFkaXVzOiAzcHg7IH1cXG4gICAgLnRhYnVsYXRvciAudGFidWxhdG9yLWZvb3RlciAudGFidWxhdG9yLXBhZ2VzIHtcXG4gICAgICBtYXJnaW46IDAgN3B4OyB9XFxuICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1wYWdlIHtcXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgICAgbWFyZ2luOiAwIDJweDtcXG4gICAgICBwYWRkaW5nOiAycHggNXB4O1xcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNhYWE7XFxuICAgICAgYm9yZGVyLXJhZGl1czogM3B4O1xcbiAgICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTsgfVxcbiAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1wYWdlLmFjdGl2ZSB7XFxuICAgICAgICBjb2xvcjogI2QwMDsgfVxcbiAgICAgIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1wYWdlOmRpc2FibGVkIHtcXG4gICAgICAgIG9wYWNpdHk6IC41OyB9XFxuICAgICAgQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xcbiAgICAgICAgLnRhYnVsYXRvciAudGFidWxhdG9yLWZvb3RlciAudGFidWxhdG9yLXBhZ2U6bm90KC5kaXNhYmxlZCk6aG92ZXIge1xcbiAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC4yKTtcXG4gICAgICAgICAgY29sb3I6ICNmZmY7IH0gfVxcbiAgLnRhYnVsYXRvciAudGFidWxhdG9yLWNvbC1yZXNpemUtaGFuZGxlIHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgIHdpZHRoOiA2cHg7XFxuICAgIG1hcmdpbi1sZWZ0OiAtM3B4O1xcbiAgICBtYXJnaW4tcmlnaHQ6IC0zcHg7XFxuICAgIHotaW5kZXg6IDEwO1xcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOyB9XFxuICAgIEBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcXG4gICAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItY29sLXJlc2l6ZS1oYW5kbGU6aG92ZXIge1xcbiAgICAgICAgY3Vyc29yOiBldy1yZXNpemU7IH0gfVxcbiAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItY29sLXJlc2l6ZS1oYW5kbGU6bGFzdC1vZi10eXBlIHtcXG4gICAgICB3aWR0aDogM3B4O1xcbiAgICAgIG1hcmdpbi1yaWdodDogMDsgfVxcbiAgLnRhYnVsYXRvciAudGFidWxhdG9yLWFsZXJ0IHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICB0b3A6IDA7XFxuICAgIGxlZnQ6IDA7XFxuICAgIHotaW5kZXg6IDEwMDtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjQpO1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7IH1cXG4gICAgLnRhYnVsYXRvciAudGFidWxhdG9yLWFsZXJ0IC50YWJ1bGF0b3ItYWxlcnQtbXNnIHtcXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgICAgbWFyZ2luOiAwIGF1dG87XFxuICAgICAgcGFkZGluZzogMTBweCAyMHB4O1xcbiAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICAgICAgYmFja2dyb3VuZDogI2ZmZjtcXG4gICAgICBmb250LXdlaWdodDogYm9sZDtcXG4gICAgICBmb250LXNpemU6IDE2cHg7IH1cXG4gICAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItYWxlcnQgLnRhYnVsYXRvci1hbGVydC1tc2cudGFidWxhdG9yLWFsZXJ0LXN0YXRlLW1zZyB7XFxuICAgICAgICBib3JkZXI6IDRweCBzb2xpZCAjMzMzO1xcbiAgICAgICAgY29sb3I6ICMwMDA7IH1cXG4gICAgICAudGFidWxhdG9yIC50YWJ1bGF0b3ItYWxlcnQgLnRhYnVsYXRvci1hbGVydC1tc2cudGFidWxhdG9yLWFsZXJ0LXN0YXRlLWVycm9yIHtcXG4gICAgICAgIGJvcmRlcjogNHB4IHNvbGlkICNEMDA7XFxuICAgICAgICBjb2xvcjogIzU5MDAwMDsgfVxcblxcbi50YWJ1bGF0b3Itcm93IHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBtaW4taGVpZ2h0OiAyMnB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsgfVxcbiAgLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLXJvdy1ldmVuIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0VGRUZFRjsgfVxcbiAgQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xcbiAgICAudGFidWxhdG9yLXJvdy50YWJ1bGF0b3Itc2VsZWN0YWJsZTpob3ZlciB7XFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2JiYjtcXG4gICAgICBjdXJzb3I6IHBvaW50ZXI7IH0gfVxcbiAgLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLXNlbGVjdGVkIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzlBQkNFQTsgfVxcbiAgQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xcbiAgICAudGFidWxhdG9yLXJvdy50YWJ1bGF0b3Itc2VsZWN0ZWQ6aG92ZXIge1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICM3NjlCQ0M7XFxuICAgICAgY3Vyc29yOiBwb2ludGVyOyB9IH1cXG4gIC50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1yb3ctbW92aW5nIHtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgIzAwMDtcXG4gICAgYmFja2dyb3VuZDogI2ZmZjsgfVxcbiAgLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLW1vdmluZyB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNhYWE7XFxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjYWFhO1xcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gICAgei1pbmRleDogMTU7IH1cXG4gIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3Itcm93LXJlc2l6ZS1oYW5kbGUge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHJpZ2h0OiAwO1xcbiAgICBib3R0b206IDA7XFxuICAgIGxlZnQ6IDA7XFxuICAgIGhlaWdodDogNXB4OyB9XFxuICAgIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3Itcm93LXJlc2l6ZS1oYW5kbGUucHJldiB7XFxuICAgICAgdG9wOiAwO1xcbiAgICAgIGJvdHRvbTogYXV0bzsgfVxcbiAgICBAbWVkaWEgKGhvdmVyOiBob3ZlcikgYW5kIChwb2ludGVyOiBmaW5lKSB7XFxuICAgICAgLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1yb3ctcmVzaXplLWhhbmRsZTpob3ZlciB7XFxuICAgICAgICBjdXJzb3I6IG5zLXJlc2l6ZTsgfSB9XFxuICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2Uge1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICBwYWRkaW5nOiA1cHg7XFxuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjYWFhO1xcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2FhYTsgfVxcbiAgICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2U6ZW1wdHkge1xcbiAgICAgIGRpc3BsYXk6IG5vbmU7IH1cXG4gICAgLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1yZXNwb25zaXZlLWNvbGxhcHNlIHRhYmxlIHtcXG4gICAgICBmb250LXNpemU6IDE0cHg7IH1cXG4gICAgICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2UgdGFibGUgdHIgdGQge1xcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOyB9XFxuICAgICAgICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2UgdGFibGUgdHIgdGQ6Zmlyc3Qtb2YtdHlwZSB7XFxuICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDEwcHg7IH1cXG4gIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICBwYWRkaW5nOiA0cHg7XFxuICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNhYWE7XFxuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzOyB9XFxuICAgIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3ItZnJvemVuIHtcXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgICAgcG9zaXRpb246IHN0aWNreTtcXG4gICAgICBsZWZ0OiAwO1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IGluaGVyaXQ7XFxuICAgICAgei1pbmRleDogMTE7IH1cXG4gICAgICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwudGFidWxhdG9yLWZyb3plbi50YWJ1bGF0b3ItZnJvemVuLWxlZnQge1xcbiAgICAgICAgYm9yZGVyLXJpZ2h0OiAycHggc29saWQgI2FhYTsgfVxcbiAgICAgIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3ItZnJvemVuLnRhYnVsYXRvci1mcm96ZW4tcmlnaHQge1xcbiAgICAgICAgYm9yZGVyLWxlZnQ6IDJweCBzb2xpZCAjYWFhOyB9XFxuICAgIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3ItZWRpdGluZyB7XFxuICAgICAgYm9yZGVyOiAxcHggc29saWQgIzFENjhDRDtcXG4gICAgICBvdXRsaW5lOiBub25lO1xcbiAgICAgIHBhZGRpbmc6IDA7IH1cXG4gICAgICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwudGFidWxhdG9yLWVkaXRpbmcgaW5wdXQsIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3ItZWRpdGluZyBzZWxlY3Qge1xcbiAgICAgICAgYm9yZGVyOiAxcHg7XFxuICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG4gICAgICAgIG91dGxpbmU6IG5vbmU7IH1cXG4gICAgLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsLnRhYnVsYXRvci12YWxpZGF0aW9uLWZhaWwge1xcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNkZDAwMDA7IH1cXG4gICAgICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwudGFidWxhdG9yLXZhbGlkYXRpb24tZmFpbCBpbnB1dCwgLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsLnRhYnVsYXRvci12YWxpZGF0aW9uLWZhaWwgc2VsZWN0IHtcXG4gICAgICAgIGJvcmRlcjogMXB4O1xcbiAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuICAgICAgICBjb2xvcjogI2RkMDAwMDsgfVxcbiAgICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwudGFidWxhdG9yLXJvdy1oYW5kbGUge1xcbiAgICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgICAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcXG4gICAgICAta2h0bWwtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgICAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXG4gICAgICAtby11c2VyLXNlbGVjdDogbm9uZTsgfVxcbiAgICAgIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3Itcm93LWhhbmRsZSAudGFidWxhdG9yLXJvdy1oYW5kbGUtYm94IHtcXG4gICAgICAgIHdpZHRoOiA4MCU7IH1cXG4gICAgICAgIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3Itcm93LWhhbmRsZSAudGFidWxhdG9yLXJvdy1oYW5kbGUtYm94IC50YWJ1bGF0b3Itcm93LWhhbmRsZS1iYXIge1xcbiAgICAgICAgICB3aWR0aDogMTAwJTtcXG4gICAgICAgICAgaGVpZ2h0OiAzcHg7XFxuICAgICAgICAgIG1hcmdpbi10b3A6IDJweDtcXG4gICAgICAgICAgYmFja2dyb3VuZDogIzY2NjsgfVxcbiAgICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtYnJhbmNoLWVtcHR5IHtcXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgICAgd2lkdGg6IDdweDsgfVxcbiAgICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtYnJhbmNoIHtcXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG4gICAgICBoZWlnaHQ6IDlweDtcXG4gICAgICB3aWR0aDogN3B4O1xcbiAgICAgIG1hcmdpbi10b3A6IC05cHg7XFxuICAgICAgbWFyZ2luLXJpZ2h0OiA1cHg7XFxuICAgICAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMXB4O1xcbiAgICAgIGJvcmRlci1sZWZ0OiAycHggc29saWQgI2FhYTtcXG4gICAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgI2FhYTsgfVxcbiAgICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbCB7XFxuICAgICAgZGlzcGxheTogaW5saW5lLWZsZXg7XFxuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgICAgIGhlaWdodDogMTFweDtcXG4gICAgICB3aWR0aDogMTFweDtcXG4gICAgICBtYXJnaW4tcmlnaHQ6IDVweDtcXG4gICAgICBib3JkZXI6IDFweCBzb2xpZCAjMzMzO1xcbiAgICAgIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gICAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuMSk7XFxuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjsgfVxcbiAgICAgIEBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcXG4gICAgICAgIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sOmhvdmVyIHtcXG4gICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuMik7IH0gfVxcbiAgICAgIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wtY29sbGFwc2Uge1xcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICAgICAgaGVpZ2h0OiA3cHg7XFxuICAgICAgICB3aWR0aDogMXB4O1xcbiAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7IH1cXG4gICAgICAgIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wtY29sbGFwc2U6YWZ0ZXIge1xcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICAgIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgICAgICAgICBsZWZ0OiAtM3B4O1xcbiAgICAgICAgICB0b3A6IDNweDtcXG4gICAgICAgICAgaGVpZ2h0OiAxcHg7XFxuICAgICAgICAgIHdpZHRoOiA3cHg7XFxuICAgICAgICAgIGJhY2tncm91bmQ6ICMzMzM7IH1cXG4gICAgICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbCAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sLWV4cGFuZCB7XFxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgICBoZWlnaHQ6IDdweDtcXG4gICAgICAgIHdpZHRoOiAxcHg7XFxuICAgICAgICBiYWNrZ3JvdW5kOiAjMzMzOyB9XFxuICAgICAgICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbCAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sLWV4cGFuZDphZnRlciB7XFxuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgICAgY29udGVudDogXFxcIlxcXCI7XFxuICAgICAgICAgIGxlZnQ6IC0zcHg7XFxuICAgICAgICAgIHRvcDogM3B4O1xcbiAgICAgICAgICBoZWlnaHQ6IDFweDtcXG4gICAgICAgICAgd2lkdGg6IDdweDtcXG4gICAgICAgICAgYmFja2dyb3VuZDogIzMzMzsgfVxcbiAgICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1yZXNwb25zaXZlLWNvbGxhcHNlLXRvZ2dsZSB7XFxuICAgICAgZGlzcGxheTogaW5saW5lLWZsZXg7XFxuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAgIC1raHRtbC11c2VyLXNlbGVjdDogbm9uZTtcXG4gICAgICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAgIC1vLXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAgIGhlaWdodDogMTVweDtcXG4gICAgICB3aWR0aDogMTVweDtcXG4gICAgICBib3JkZXItcmFkaXVzOiAyMHB4O1xcbiAgICAgIGJhY2tncm91bmQ6ICM2NjY7XFxuICAgICAgY29sb3I6ICNmZmY7XFxuICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICAgICAgZm9udC1zaXplOiAxLjFlbTsgfVxcbiAgICAgIEBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcXG4gICAgICAgIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCAudGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2UtdG9nZ2xlOmhvdmVyIHtcXG4gICAgICAgICAgb3BhY2l0eTogLjc7XFxuICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjsgfSB9XFxuICAgICAgLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItcmVzcG9uc2l2ZS1jb2xsYXBzZS10b2dnbGUub3BlbiAudGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2UtdG9nZ2xlLWNsb3NlIHtcXG4gICAgICAgIGRpc3BsYXk6IGluaXRpYWw7IH1cXG4gICAgICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1yZXNwb25zaXZlLWNvbGxhcHNlLXRvZ2dsZS5vcGVuIC50YWJ1bGF0b3ItcmVzcG9uc2l2ZS1jb2xsYXBzZS10b2dnbGUtb3BlbiB7XFxuICAgICAgICBkaXNwbGF5OiBub25lOyB9XFxuICAgICAgLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItcmVzcG9uc2l2ZS1jb2xsYXBzZS10b2dnbGUgc3ZnIHtcXG4gICAgICAgIHN0cm9rZTogI2ZmZjsgfVxcbiAgICAgIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCAudGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2UtdG9nZ2xlIC50YWJ1bGF0b3ItcmVzcG9uc2l2ZS1jb2xsYXBzZS10b2dnbGUtY2xvc2Uge1xcbiAgICAgICAgZGlzcGxheTogbm9uZTsgfVxcbiAgICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci10cmFmZmljLWxpZ2h0IHtcXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgICAgaGVpZ2h0OiAxNHB4O1xcbiAgICAgIHdpZHRoOiAxNHB4O1xcbiAgICAgIGJvcmRlci1yYWRpdXM6IDE0cHg7IH1cXG4gIC50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1ncm91cCB7XFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjOTk5O1xcbiAgICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjYWFhO1xcbiAgICBib3JkZXItdG9wOiAxcHggc29saWQgIzk5OTtcXG4gICAgcGFkZGluZzogNXB4O1xcbiAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XFxuICAgIGJhY2tncm91bmQ6ICNjY2M7XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgICBtaW4td2lkdGg6IDEwMCU7IH1cXG4gICAgQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xcbiAgICAgIC50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1ncm91cDpob3ZlciB7XFxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMSk7IH0gfVxcbiAgICAudGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItZ3JvdXAudGFidWxhdG9yLWdyb3VwLXZpc2libGUgLnRhYnVsYXRvci1hcnJvdyB7XFxuICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcbiAgICAgIGJvcmRlci1sZWZ0OiA2cHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICAgICAgYm9yZGVyLXJpZ2h0OiA2cHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICAgICAgYm9yZGVyLXRvcDogNnB4IHNvbGlkICM2NjY7XFxuICAgICAgYm9yZGVyLWJvdHRvbTogMDsgfVxcbiAgICAudGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItZ3JvdXAudGFidWxhdG9yLWdyb3VwLWxldmVsLTEge1xcbiAgICAgIHBhZGRpbmctbGVmdDogMzBweDsgfVxcbiAgICAudGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItZ3JvdXAudGFidWxhdG9yLWdyb3VwLWxldmVsLTIge1xcbiAgICAgIHBhZGRpbmctbGVmdDogNTBweDsgfVxcbiAgICAudGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItZ3JvdXAudGFidWxhdG9yLWdyb3VwLWxldmVsLTMge1xcbiAgICAgIHBhZGRpbmctbGVmdDogNzBweDsgfVxcbiAgICAudGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItZ3JvdXAudGFidWxhdG9yLWdyb3VwLWxldmVsLTQge1xcbiAgICAgIHBhZGRpbmctbGVmdDogOTBweDsgfVxcbiAgICAudGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItZ3JvdXAudGFidWxhdG9yLWdyb3VwLWxldmVsLTUge1xcbiAgICAgIHBhZGRpbmctbGVmdDogMTEwcHg7IH1cXG4gICAgLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLWdyb3VwIC50YWJ1bGF0b3ItZ3JvdXAtdG9nZ2xlIHtcXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IH1cXG4gICAgLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLWdyb3VwIC50YWJ1bGF0b3ItYXJyb3cge1xcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgICB3aWR0aDogMDtcXG4gICAgICBoZWlnaHQ6IDA7XFxuICAgICAgbWFyZ2luLXJpZ2h0OiAxNnB4O1xcbiAgICAgIGJvcmRlci10b3A6IDZweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gICAgICBib3JkZXItYm90dG9tOiA2cHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICAgICAgYm9yZGVyLXJpZ2h0OiAwO1xcbiAgICAgIGJvcmRlci1sZWZ0OiA2cHggc29saWQgIzY2NjtcXG4gICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOyB9XFxuICAgIC50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1ncm91cCBzcGFuIHtcXG4gICAgICBtYXJnaW4tbGVmdDogMTBweDtcXG4gICAgICBjb2xvcjogI2QwMDsgfVxcblxcbi50YWJ1bGF0b3ItcG9wdXAtY29udGFpbmVyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBiYWNrZ3JvdW5kOiAjZmZmO1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2FhYTtcXG4gIGJveC1zaGFkb3c6IDAgMCA1cHggMCByZ2JhKDAsIDAsIDAsIDAuMik7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBvdmVyZmxvdy15OiBhdXRvO1xcbiAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoO1xcbiAgei1pbmRleDogMTAwMDA7IH1cXG5cXG4udGFidWxhdG9yLXBvcHVwIHtcXG4gIHBhZGRpbmc6IDVweDtcXG4gIGJvcmRlci1yYWRpdXM6IDNweDsgfVxcblxcbi50YWJ1bGF0b3ItdG9vbHRpcCB7XFxuICBtYXgtd2lkdGg6IE1pbig1MDBweCwgMTAwJSk7XFxuICBwYWRkaW5nOiAzcHggNXB4O1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgYm94LXNoYWRvdzogbm9uZTtcXG4gIGZvbnQtc2l6ZTogMTJweDtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lOyB9XFxuXFxuLnRhYnVsYXRvci1tZW51IC50YWJ1bGF0b3ItbWVudS1pdGVtIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBwYWRkaW5nOiA1cHggMTBweDtcXG4gIHVzZXItc2VsZWN0OiBub25lOyB9XFxuICAudGFidWxhdG9yLW1lbnUgLnRhYnVsYXRvci1tZW51LWl0ZW0udGFidWxhdG9yLW1lbnUtaXRlbS1kaXNhYmxlZCB7XFxuICAgIG9wYWNpdHk6IC41OyB9XFxuICBAbWVkaWEgKGhvdmVyOiBob3ZlcikgYW5kIChwb2ludGVyOiBmaW5lKSB7XFxuICAgIC50YWJ1bGF0b3ItbWVudSAudGFidWxhdG9yLW1lbnUtaXRlbTpub3QoLnRhYnVsYXRvci1tZW51LWl0ZW0tZGlzYWJsZWQpOmhvdmVyIHtcXG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgYmFja2dyb3VuZDogI0VGRUZFRjsgfSB9XFxuICAudGFidWxhdG9yLW1lbnUgLnRhYnVsYXRvci1tZW51LWl0ZW0udGFidWxhdG9yLW1lbnUtaXRlbS1zdWJtZW51IHtcXG4gICAgcGFkZGluZy1yaWdodDogMjVweDsgfVxcbiAgICAudGFidWxhdG9yLW1lbnUgLnRhYnVsYXRvci1tZW51LWl0ZW0udGFidWxhdG9yLW1lbnUtaXRlbS1zdWJtZW51OjphZnRlciB7XFxuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICB0b3A6IGNhbGMoNXB4ICsgLjRlbSk7XFxuICAgICAgcmlnaHQ6IDEwcHg7XFxuICAgICAgaGVpZ2h0OiA3cHg7XFxuICAgICAgd2lkdGg6IDdweDtcXG4gICAgICBjb250ZW50OiAnJztcXG4gICAgICBib3JkZXItd2lkdGg6IDFweCAxcHggMCAwO1xcbiAgICAgIGJvcmRlci1zdHlsZTogc29saWQ7XFxuICAgICAgYm9yZGVyLWNvbG9yOiAjYWFhO1xcbiAgICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7XFxuICAgICAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpOyB9XFxuXFxuLnRhYnVsYXRvci1tZW51IC50YWJ1bGF0b3ItbWVudS1zZXBhcmF0b3Ige1xcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNhYWE7IH1cXG5cXG4udGFidWxhdG9yLWVkaXQtbGlzdCB7XFxuICBtYXgtaGVpZ2h0OiAyMDBweDtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIG92ZXJmbG93LXk6IGF1dG87XFxuICAtd2Via2l0LW92ZXJmbG93LXNjcm9sbGluZzogdG91Y2g7IH1cXG4gIC50YWJ1bGF0b3ItZWRpdC1saXN0IC50YWJ1bGF0b3ItZWRpdC1saXN0LWl0ZW0ge1xcbiAgICBwYWRkaW5nOiA0cHg7XFxuICAgIGNvbG9yOiAjMzMzO1xcbiAgICBvdXRsaW5lOiBub25lOyB9XFxuICAgIC50YWJ1bGF0b3ItZWRpdC1saXN0IC50YWJ1bGF0b3ItZWRpdC1saXN0LWl0ZW0uYWN0aXZlIHtcXG4gICAgICBjb2xvcjogI2ZmZjtcXG4gICAgICBiYWNrZ3JvdW5kOiAjMUQ2OENEOyB9XFxuICAgICAgLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtaXRlbS5hY3RpdmUuZm9jdXNlZCB7XFxuICAgICAgICBvdXRsaW5lOiAxcHggc29saWQgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpOyB9XFxuICAgIC50YWJ1bGF0b3ItZWRpdC1saXN0IC50YWJ1bGF0b3ItZWRpdC1saXN0LWl0ZW0uZm9jdXNlZCB7XFxuICAgICAgb3V0bGluZTogMXB4IHNvbGlkICMxRDY4Q0Q7IH1cXG4gICAgQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xcbiAgICAgIC50YWJ1bGF0b3ItZWRpdC1saXN0IC50YWJ1bGF0b3ItZWRpdC1saXN0LWl0ZW06aG92ZXIge1xcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICAgICAgY29sb3I6ICNmZmY7XFxuICAgICAgICBiYWNrZ3JvdW5kOiAjMUQ2OENEOyB9IH1cXG4gIC50YWJ1bGF0b3ItZWRpdC1saXN0IC50YWJ1bGF0b3ItZWRpdC1saXN0LXBsYWNlaG9sZGVyIHtcXG4gICAgcGFkZGluZzogNHB4O1xcbiAgICBjb2xvcjogIzMzMztcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyOyB9XFxuICAudGFidWxhdG9yLWVkaXQtbGlzdCAudGFidWxhdG9yLWVkaXQtbGlzdC1ncm91cCB7XFxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjYWFhO1xcbiAgICBwYWRkaW5nOiA0cHg7XFxuICAgIHBhZGRpbmctdG9wOiA2cHg7XFxuICAgIGNvbG9yOiAjMzMzO1xcbiAgICBmb250LXdlaWdodDogYm9sZDsgfVxcbiAgLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtaXRlbS50YWJ1bGF0b3ItZWRpdC1saXN0LWdyb3VwLWxldmVsLTIsIC50YWJ1bGF0b3ItZWRpdC1saXN0IC50YWJ1bGF0b3ItZWRpdC1saXN0LWdyb3VwLnRhYnVsYXRvci1lZGl0LWxpc3QtZ3JvdXAtbGV2ZWwtMiB7XFxuICAgIHBhZGRpbmctbGVmdDogMTJweDsgfVxcbiAgLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtaXRlbS50YWJ1bGF0b3ItZWRpdC1saXN0LWdyb3VwLWxldmVsLTMsIC50YWJ1bGF0b3ItZWRpdC1saXN0IC50YWJ1bGF0b3ItZWRpdC1saXN0LWdyb3VwLnRhYnVsYXRvci1lZGl0LWxpc3QtZ3JvdXAtbGV2ZWwtMyB7XFxuICAgIHBhZGRpbmctbGVmdDogMjBweDsgfVxcbiAgLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtaXRlbS50YWJ1bGF0b3ItZWRpdC1saXN0LWdyb3VwLWxldmVsLTQsIC50YWJ1bGF0b3ItZWRpdC1saXN0IC50YWJ1bGF0b3ItZWRpdC1saXN0LWdyb3VwLnRhYnVsYXRvci1lZGl0LWxpc3QtZ3JvdXAtbGV2ZWwtNCB7XFxuICAgIHBhZGRpbmctbGVmdDogMjhweDsgfVxcbiAgLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtaXRlbS50YWJ1bGF0b3ItZWRpdC1saXN0LWdyb3VwLWxldmVsLTUsIC50YWJ1bGF0b3ItZWRpdC1saXN0IC50YWJ1bGF0b3ItZWRpdC1saXN0LWdyb3VwLnRhYnVsYXRvci1lZGl0LWxpc3QtZ3JvdXAtbGV2ZWwtNSB7XFxuICAgIHBhZGRpbmctbGVmdDogMzZweDsgfVxcblxcbi50YWJ1bGF0b3IudGFidWxhdG9yLWx0ciB7XFxuICBkaXJlY3Rpb246IGx0cjsgfVxcblxcbi50YWJ1bGF0b3IudGFidWxhdG9yLXJ0bCB7XFxuICB0ZXh0LWFsaWduOiBpbml0aWFsO1xcbiAgZGlyZWN0aW9uOiBydGw7IH1cXG4gIC50YWJ1bGF0b3IudGFidWxhdG9yLXJ0bCAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbCB7XFxuICAgIHRleHQtYWxpZ246IGluaXRpYWw7XFxuICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI2FhYTtcXG4gICAgYm9yZGVyLXJpZ2h0OiBpbml0aWFsOyB9XFxuICAgIC50YWJ1bGF0b3IudGFidWxhdG9yLXJ0bCAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3ItY29sLWdyb3VwIC50YWJ1bGF0b3ItY29sLWdyb3VwLWNvbHMge1xcbiAgICAgIG1hcmdpbi1yaWdodDogaW5pdGlhbDtcXG4gICAgICBtYXJnaW4tbGVmdDogLTFweDsgfVxcbiAgICAudGFidWxhdG9yLnRhYnVsYXRvci1ydGwgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlIC50YWJ1bGF0b3ItY29sLXRpdGxlIHtcXG4gICAgICBwYWRkaW5nLXJpZ2h0OiAwO1xcbiAgICAgIHBhZGRpbmctbGVmdDogMjVweDsgfVxcbiAgICAudGFidWxhdG9yLnRhYnVsYXRvci1ydGwgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC1zb3J0ZXIge1xcbiAgICAgIGxlZnQ6IDhweDtcXG4gICAgICByaWdodDogaW5pdGlhbDsgfVxcbiAgLnRhYnVsYXRvci50YWJ1bGF0b3ItcnRsIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCB7XFxuICAgIGJvcmRlci1yaWdodDogaW5pdGlhbDtcXG4gICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjYWFhOyB9XFxuICAgIC50YWJ1bGF0b3IudGFidWxhdG9yLXJ0bCAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtYnJhbmNoIHtcXG4gICAgICBtYXJnaW4tcmlnaHQ6IGluaXRpYWw7XFxuICAgICAgbWFyZ2luLWxlZnQ6IDVweDtcXG4gICAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiBpbml0aWFsO1xcbiAgICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAxcHg7XFxuICAgICAgYm9yZGVyLWxlZnQ6IGluaXRpYWw7XFxuICAgICAgYm9yZGVyLXJpZ2h0OiAycHggc29saWQgI2FhYTsgfVxcbiAgICAudGFidWxhdG9yLnRhYnVsYXRvci1ydGwgLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wge1xcbiAgICAgIG1hcmdpbi1yaWdodDogaW5pdGlhbDtcXG4gICAgICBtYXJnaW4tbGVmdDogNXB4OyB9XFxuICAgIC50YWJ1bGF0b3IudGFidWxhdG9yLXJ0bCAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwudGFidWxhdG9yLWZyb3plbi50YWJ1bGF0b3ItZnJvemVuLWxlZnQge1xcbiAgICAgIGJvcmRlci1sZWZ0OiAycHggc29saWQgI2FhYTsgfVxcbiAgICAudGFidWxhdG9yLnRhYnVsYXRvci1ydGwgLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsLnRhYnVsYXRvci1mcm96ZW4udGFidWxhdG9yLWZyb3plbi1yaWdodCB7XFxuICAgICAgYm9yZGVyLXJpZ2h0OiAycHggc29saWQgI2FhYTsgfVxcbiAgLnRhYnVsYXRvci50YWJ1bGF0b3ItcnRsIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY29sLXJlc2l6ZS1oYW5kbGU6bGFzdC1vZi10eXBlIHtcXG4gICAgd2lkdGg6IDNweDtcXG4gICAgbWFyZ2luLWxlZnQ6IDA7XFxuICAgIG1hcmdpbi1yaWdodDogLTNweDsgfVxcbiAgLnRhYnVsYXRvci50YWJ1bGF0b3ItcnRsIC50YWJ1bGF0b3ItZm9vdGVyIC50YWJ1bGF0b3ItY2FsY3MtaG9sZGVyIHtcXG4gICAgdGV4dC1hbGlnbjogaW5pdGlhbDsgfVxcblxcbi50YWJ1bGF0b3ItcHJpbnQtZnVsbHNjcmVlbiB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiAwO1xcbiAgcmlnaHQ6IDA7XFxuICB6LWluZGV4OiAxMDAwMDsgfVxcblxcbmJvZHkudGFidWxhdG9yLXByaW50LWZ1bGxzY3JlZW4taGlkZSA+ICo6bm90KC50YWJ1bGF0b3ItcHJpbnQtZnVsbHNjcmVlbikge1xcbiAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50OyB9XFxuXFxuLnRhYnVsYXRvci1wcmludC10YWJsZSB7XFxuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlOyB9XFxuICAudGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItZGF0YS10cmVlLWJyYW5jaCB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG4gICAgaGVpZ2h0OiA5cHg7XFxuICAgIHdpZHRoOiA3cHg7XFxuICAgIG1hcmdpbi10b3A6IC05cHg7XFxuICAgIG1hcmdpbi1yaWdodDogNXB4O1xcbiAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAxcHg7XFxuICAgIGJvcmRlci1sZWZ0OiAycHggc29saWQgI2FhYTtcXG4gICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICNhYWE7IH1cXG4gIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1wcmludC10YWJsZS1ncm91cCB7XFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjOTk5O1xcbiAgICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjYWFhO1xcbiAgICBib3JkZXItdG9wOiAxcHggc29saWQgIzk5OTtcXG4gICAgcGFkZGluZzogNXB4O1xcbiAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XFxuICAgIGJhY2tncm91bmQ6ICNjY2M7XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgICBtaW4td2lkdGg6IDEwMCU7IH1cXG4gICAgQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xcbiAgICAgIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1wcmludC10YWJsZS1ncm91cDpob3ZlciB7XFxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMSk7IH0gfVxcbiAgICAudGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUtZ3JvdXAudGFidWxhdG9yLWdyb3VwLXZpc2libGUgLnRhYnVsYXRvci1hcnJvdyB7XFxuICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcbiAgICAgIGJvcmRlci1sZWZ0OiA2cHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICAgICAgYm9yZGVyLXJpZ2h0OiA2cHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICAgICAgYm9yZGVyLXRvcDogNnB4IHNvbGlkICM2NjY7XFxuICAgICAgYm9yZGVyLWJvdHRvbTogMDsgfVxcbiAgICAudGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUtZ3JvdXAudGFidWxhdG9yLWdyb3VwLWxldmVsLTEgdGQge1xcbiAgICAgIHBhZGRpbmctbGVmdDogMzBweCAhaW1wb3J0YW50OyB9XFxuICAgIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1wcmludC10YWJsZS1ncm91cC50YWJ1bGF0b3ItZ3JvdXAtbGV2ZWwtMiB0ZCB7XFxuICAgICAgcGFkZGluZy1sZWZ0OiA1MHB4ICFpbXBvcnRhbnQ7IH1cXG4gICAgLnRhYnVsYXRvci1wcmludC10YWJsZSAudGFidWxhdG9yLXByaW50LXRhYmxlLWdyb3VwLnRhYnVsYXRvci1ncm91cC1sZXZlbC0zIHRkIHtcXG4gICAgICBwYWRkaW5nLWxlZnQ6IDcwcHggIWltcG9ydGFudDsgfVxcbiAgICAudGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUtZ3JvdXAudGFidWxhdG9yLWdyb3VwLWxldmVsLTQgdGQge1xcbiAgICAgIHBhZGRpbmctbGVmdDogOTBweCAhaW1wb3J0YW50OyB9XFxuICAgIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1wcmludC10YWJsZS1ncm91cC50YWJ1bGF0b3ItZ3JvdXAtbGV2ZWwtNSB0ZCB7XFxuICAgICAgcGFkZGluZy1sZWZ0OiAxMTBweCAhaW1wb3J0YW50OyB9XFxuICAgIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1wcmludC10YWJsZS1ncm91cCAudGFidWxhdG9yLWdyb3VwLXRvZ2dsZSB7XFxuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOyB9XFxuICAgIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1wcmludC10YWJsZS1ncm91cCAudGFidWxhdG9yLWFycm93IHtcXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgICAgd2lkdGg6IDA7XFxuICAgICAgaGVpZ2h0OiAwO1xcbiAgICAgIG1hcmdpbi1yaWdodDogMTZweDtcXG4gICAgICBib3JkZXItdG9wOiA2cHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICAgICAgYm9yZGVyLWJvdHRvbTogNnB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgICAgIGJvcmRlci1yaWdodDogMDtcXG4gICAgICBib3JkZXItbGVmdDogNnB4IHNvbGlkICM2NjY7XFxuICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsgfVxcbiAgICAudGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUtZ3JvdXAgc3BhbiB7XFxuICAgICAgbWFyZ2luLWxlZnQ6IDEwcHg7XFxuICAgICAgY29sb3I6ICNkMDA7IH1cXG4gIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbCB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG4gICAgaGVpZ2h0OiAxMXB4O1xcbiAgICB3aWR0aDogMTFweDtcXG4gICAgbWFyZ2luLXJpZ2h0OiA1cHg7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICMzMzM7XFxuICAgIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gICAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjEpO1xcbiAgICBvdmVyZmxvdzogaGlkZGVuOyB9XFxuICAgIEBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcXG4gICAgICAudGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2w6aG92ZXIge1xcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICAgICAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjIpOyB9IH1cXG4gICAgLnRhYnVsYXRvci1wcmludC10YWJsZSAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wtY29sbGFwc2Uge1xcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgaGVpZ2h0OiA3cHg7XFxuICAgICAgd2lkdGg6IDFweDtcXG4gICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsgfVxcbiAgICAgIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbCAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sLWNvbGxhcHNlOmFmdGVyIHtcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgICAgICAgbGVmdDogLTNweDtcXG4gICAgICAgIHRvcDogM3B4O1xcbiAgICAgICAgaGVpZ2h0OiAxcHg7XFxuICAgICAgICB3aWR0aDogN3B4O1xcbiAgICAgICAgYmFja2dyb3VuZDogIzMzMzsgfVxcbiAgICAudGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbC1leHBhbmQge1xcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgaGVpZ2h0OiA3cHg7XFxuICAgICAgd2lkdGg6IDFweDtcXG4gICAgICBiYWNrZ3JvdW5kOiAjMzMzOyB9XFxuICAgICAgLnRhYnVsYXRvci1wcmludC10YWJsZSAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wtZXhwYW5kOmFmdGVyIHtcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgICAgICAgbGVmdDogLTNweDtcXG4gICAgICAgIHRvcDogM3B4O1xcbiAgICAgICAgaGVpZ2h0OiAxcHg7XFxuICAgICAgICB3aWR0aDogN3B4O1xcbiAgICAgICAgYmFja2dyb3VuZDogIzMzMzsgfVxcblwiLFwiLnRhYnVsYXRvciB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjOTk5O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzg4ODtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XFxuICAtbW96LXRyYW5zZm9ybTogdHJhbnNsYXRlWigwKTtcXG4gIC1tcy10cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XFxuICAtby10cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XFxufVxcblxcbi50YWJ1bGF0b3JbdGFidWxhdG9yLWxheW91dD1cXFwiZml0RGF0YUZpbGxcXFwiXSAudGFidWxhdG9yLXRhYmxlaG9sZGVyIC50YWJ1bGF0b3ItdGFibGUge1xcbiAgbWluLXdpZHRoOiAxMDAlO1xcbn1cXG5cXG4udGFidWxhdG9yW3RhYnVsYXRvci1sYXlvdXQ9XFxcImZpdERhdGFUYWJsZVxcXCJdIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG59XFxuXFxuLnRhYnVsYXRvci50YWJ1bGF0b3ItYmxvY2stc2VsZWN0IHtcXG4gIHVzZXItc2VsZWN0OiBub25lO1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjOTk5O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U2ZTZlNjtcXG4gIGNvbG9yOiAjNTU1O1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAta2h0bWwtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcbiAgLW8tdXNlci1zZWxlY3Q6IG5vbmU7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIudGFidWxhdG9yLWhlYWRlci1oaWRkZW4ge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWhlYWRlci1jb250ZW50cyB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItaGVhZGVyLWNvbnRlbnRzIC50YWJ1bGF0b3ItaGVhZGVycyB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wge1xcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXG4gIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNhYWE7XFxuICBiYWNrZ3JvdW5kOiAjZTZlNmU2O1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG4gIHZlcnRpY2FsLWFsaWduOiBib3R0b207XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1tb3Zpbmcge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgYm9yZGVyOiAxcHggc29saWQgIzk5OTtcXG4gIGJhY2tncm91bmQ6ICNjZGNkY2Q7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbCAudGFidWxhdG9yLWNvbC1jb250ZW50IHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBwYWRkaW5nOiA0cHg7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWhlYWRlci1wb3B1cC1idXR0b24ge1xcbiAgcGFkZGluZzogMCA4cHg7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWhlYWRlci1wb3B1cC1idXR0b246aG92ZXIge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgb3BhY2l0eTogLjY7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC10aXRsZS1ob2xkZXIge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtdGl0bGUge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXG4gIHZlcnRpY2FsLWFsaWduOiBib3R0b207XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC10aXRsZS50YWJ1bGF0b3ItY29sLXRpdGxlLXdyYXAge1xcbiAgd2hpdGUtc3BhY2U6IG5vcm1hbDtcXG4gIHRleHQtb3ZlcmZsb3c6IGluaXRpYWw7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC10aXRsZSAudGFidWxhdG9yLXRpdGxlLWVkaXRvciB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgd2lkdGg6IDEwMCU7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjOTk5O1xcbiAgcGFkZGluZzogMXB4O1xcbiAgYmFja2dyb3VuZDogI2ZmZjtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbCAudGFidWxhdG9yLWNvbC1jb250ZW50IC50YWJ1bGF0b3ItY29sLXRpdGxlIC50YWJ1bGF0b3ItaGVhZGVyLXBvcHVwLWJ1dHRvbiArIC50YWJ1bGF0b3ItdGl0bGUtZWRpdG9yIHtcXG4gIHdpZHRoOiBjYWxjKDEwMCUgLSAyMnB4KTtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbCAudGFidWxhdG9yLWNvbC1jb250ZW50IC50YWJ1bGF0b3ItY29sLXNvcnRlciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIHJpZ2h0OiA0cHg7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC1zb3J0ZXIgLnRhYnVsYXRvci1hcnJvdyB7XFxuICB3aWR0aDogMDtcXG4gIGhlaWdodDogMDtcXG4gIGJvcmRlci1sZWZ0OiA2cHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItcmlnaHQ6IDZweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1ib3R0b206IDZweCBzb2xpZCAjYmJiO1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1jb2wtZ3JvdXAgLnRhYnVsYXRvci1jb2wtZ3JvdXAtY29scyB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNhYWE7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgbWFyZ2luLXJpZ2h0OiAtMXB4O1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sIC50YWJ1bGF0b3ItaGVhZGVyLWZpbHRlciB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgbWFyZ2luLXRvcDogMnB4O1xcbiAgd2lkdGg6IDEwMCU7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1oZWFkZXItZmlsdGVyIHRleHRhcmVhIHtcXG4gIGhlaWdodDogYXV0byAhaW1wb3J0YW50O1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sIC50YWJ1bGF0b3ItaGVhZGVyLWZpbHRlciBzdmcge1xcbiAgbWFyZ2luLXRvcDogM3B4O1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sIC50YWJ1bGF0b3ItaGVhZGVyLWZpbHRlciBpbnB1dDo6LW1zLWNsZWFyIHtcXG4gIHdpZHRoOiAwO1xcbiAgaGVpZ2h0OiAwO1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1zb3J0YWJsZSAudGFidWxhdG9yLWNvbC10aXRsZSB7XFxuICBwYWRkaW5nLXJpZ2h0OiAyNXB4O1xcbn1cXG5cXG5AbWVkaWEgKGhvdmVyOiBob3ZlcikgYW5kIChwb2ludGVyOiBmaW5lKSB7XFxuICAudGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1zb3J0YWJsZS50YWJ1bGF0b3ItY29sLXNvcnRlci1lbGVtZW50OmhvdmVyIHtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjY2RjZGNkO1xcbiAgfVxcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1zb3J0YWJsZVthcmlhLXNvcnQ9XFxcIm5vbmVcXFwiXSAudGFidWxhdG9yLWNvbC1jb250ZW50IC50YWJ1bGF0b3ItY29sLXNvcnRlciB7XFxuICBjb2xvcjogI2JiYjtcXG59XFxuXFxuQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xcbiAgLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3Itc29ydGFibGVbYXJpYS1zb3J0PVxcXCJub25lXFxcIl0gLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC1zb3J0ZXIudGFidWxhdG9yLWNvbC1zb3J0ZXItZWxlbWVudCAudGFidWxhdG9yLWFycm93OmhvdmVyIHtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICBib3JkZXItYm90dG9tOiA2cHggc29saWQgIzU1NTtcXG4gIH1cXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3Itc29ydGFibGVbYXJpYS1zb3J0PVxcXCJub25lXFxcIl0gLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC1zb3J0ZXIgLnRhYnVsYXRvci1hcnJvdyB7XFxuICBib3JkZXItdG9wOiBub25lO1xcbiAgYm9yZGVyLWJvdHRvbTogNnB4IHNvbGlkICNiYmI7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlW2FyaWEtc29ydD1cXFwiYXNjZW5kaW5nXFxcIl0gLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC1zb3J0ZXIge1xcbiAgY29sb3I6ICM2NjY7XFxufVxcblxcbkBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcXG4gIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlW2FyaWEtc29ydD1cXFwiYXNjZW5kaW5nXFxcIl0gLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC1zb3J0ZXIudGFidWxhdG9yLWNvbC1zb3J0ZXItZWxlbWVudCAudGFidWxhdG9yLWFycm93OmhvdmVyIHtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICBib3JkZXItYm90dG9tOiA2cHggc29saWQgIzU1NTtcXG4gIH1cXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3Itc29ydGFibGVbYXJpYS1zb3J0PVxcXCJhc2NlbmRpbmdcXFwiXSAudGFidWxhdG9yLWNvbC1jb250ZW50IC50YWJ1bGF0b3ItY29sLXNvcnRlciAudGFidWxhdG9yLWFycm93IHtcXG4gIGJvcmRlci10b3A6IG5vbmU7XFxuICBib3JkZXItYm90dG9tOiA2cHggc29saWQgIzY2NjtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3Itc29ydGFibGVbYXJpYS1zb3J0PVxcXCJkZXNjZW5kaW5nXFxcIl0gLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC1zb3J0ZXIge1xcbiAgY29sb3I6ICM2NjY7XFxufVxcblxcbkBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcXG4gIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlW2FyaWEtc29ydD1cXFwiZGVzY2VuZGluZ1xcXCJdIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtc29ydGVyLnRhYnVsYXRvci1jb2wtc29ydGVyLWVsZW1lbnQgLnRhYnVsYXRvci1hcnJvdzpob3ZlciB7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgYm9yZGVyLXRvcDogNnB4IHNvbGlkICM1NTU7XFxuICB9XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLXNvcnRhYmxlW2FyaWEtc29ydD1cXFwiZGVzY2VuZGluZ1xcXCJdIC50YWJ1bGF0b3ItY29sLWNvbnRlbnQgLnRhYnVsYXRvci1jb2wtc29ydGVyIC50YWJ1bGF0b3ItYXJyb3cge1xcbiAgYm9yZGVyLWJvdHRvbTogbm9uZTtcXG4gIGJvcmRlci10b3A6IDZweCBzb2xpZCAjNjY2O1xcbiAgY29sb3I6ICM2NjY7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLWNvbC12ZXJ0aWNhbCAudGFidWxhdG9yLWNvbC1jb250ZW50IC50YWJ1bGF0b3ItY29sLXRpdGxlIHtcXG4gIHdyaXRpbmctbW9kZTogdmVydGljYWwtcmw7XFxuICB0ZXh0LW9yaWVudGF0aW9uOiBtaXhlZDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLWNvbC12ZXJ0aWNhbC50YWJ1bGF0b3ItY29sLXZlcnRpY2FsLWZsaXAgLnRhYnVsYXRvci1jb2wtdGl0bGUge1xcbiAgdHJhbnNmb3JtOiByb3RhdGUoMTgwZGVnKTtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3ItY29sLXZlcnRpY2FsLnRhYnVsYXRvci1zb3J0YWJsZSAudGFidWxhdG9yLWNvbC10aXRsZSB7XFxuICBwYWRkaW5nLXJpZ2h0OiAwO1xcbiAgcGFkZGluZy10b3A6IDIwcHg7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wudGFidWxhdG9yLWNvbC12ZXJ0aWNhbC50YWJ1bGF0b3Itc29ydGFibGUudGFidWxhdG9yLWNvbC12ZXJ0aWNhbC1mbGlwIC50YWJ1bGF0b3ItY29sLXRpdGxlIHtcXG4gIHBhZGRpbmctcmlnaHQ6IDA7XFxuICBwYWRkaW5nLWJvdHRvbTogMjBweDtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNvbC50YWJ1bGF0b3ItY29sLXZlcnRpY2FsLnRhYnVsYXRvci1zb3J0YWJsZSAudGFidWxhdG9yLWNvbC1zb3J0ZXIge1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBsZWZ0OiAwO1xcbiAgcmlnaHQ6IDA7XFxuICB0b3A6IDRweDtcXG4gIGJvdHRvbTogYXV0bztcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWZyb3plbiB7XFxuICBwb3NpdGlvbjogc3RpY2t5O1xcbiAgbGVmdDogMDtcXG4gIHotaW5kZXg6IDExO1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItZnJvemVuLnRhYnVsYXRvci1mcm96ZW4tbGVmdCB7XFxuICBib3JkZXItcmlnaHQ6IDJweCBzb2xpZCAjYWFhO1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItZnJvemVuLnRhYnVsYXRvci1mcm96ZW4tcmlnaHQge1xcbiAgYm9yZGVyLWxlZnQ6IDJweCBzb2xpZCAjYWFhO1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY2FsY3MtaG9sZGVyIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBiYWNrZ3JvdW5kOiAjZjNmM2YzICFpbXBvcnRhbnQ7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgI2FhYTtcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjYWFhO1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY2FsY3MtaG9sZGVyIC50YWJ1bGF0b3Itcm93IHtcXG4gIGJhY2tncm91bmQ6ICNmM2YzZjMgIWltcG9ydGFudDtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlciAudGFidWxhdG9yLWNhbGNzLWhvbGRlciAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNvbC1yZXNpemUtaGFuZGxlIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1mcm96ZW4tcm93cy1ob2xkZXI6ZW1wdHkge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLXRhYmxlaG9sZGVyIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIG92ZXJmbG93OiBhdXRvO1xcbiAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoO1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItdGFibGVob2xkZXI6Zm9jdXMge1xcbiAgb3V0bGluZTogbm9uZTtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLXRhYmxlaG9sZGVyIC50YWJ1bGF0b3ItcGxhY2Vob2xkZXIge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLXRhYmxlaG9sZGVyIC50YWJ1bGF0b3ItcGxhY2Vob2xkZXJbdGFidWxhdG9yLXJlbmRlci1tb2RlPVxcXCJ2aXJ0dWFsXFxcIl0ge1xcbiAgbWluLWhlaWdodDogMTAwJTtcXG4gIG1pbi13aWR0aDogMTAwJTtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLXRhYmxlaG9sZGVyIC50YWJ1bGF0b3ItcGxhY2Vob2xkZXIgLnRhYnVsYXRvci1wbGFjZWhvbGRlci1jb250ZW50cyB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBwYWRkaW5nOiAxMHB4O1xcbiAgY29sb3I6ICNjY2M7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIGZvbnQtc2l6ZTogMjBweDtcXG4gIHdoaXRlLXNwYWNlOiBub3JtYWw7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci10YWJsZWhvbGRlciAudGFidWxhdG9yLXRhYmxlIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgb3ZlcmZsb3c6IHZpc2libGU7XFxuICBjb2xvcjogIzMzMztcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLXRhYmxlaG9sZGVyIC50YWJ1bGF0b3ItdGFibGUgLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLWNhbGNzIHtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgYmFja2dyb3VuZDogI2UyZTJlMiAhaW1wb3J0YW50O1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItdGFibGVob2xkZXIgLnRhYnVsYXRvci10YWJsZSAudGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItY2FsY3MudGFidWxhdG9yLWNhbGNzLXRvcCB7XFxuICBib3JkZXItYm90dG9tOiAycHggc29saWQgI2FhYTtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLXRhYmxlaG9sZGVyIC50YWJ1bGF0b3ItdGFibGUgLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLWNhbGNzLnRhYnVsYXRvci1jYWxjcy1ib3R0b20ge1xcbiAgYm9yZGVyLXRvcDogMnB4IHNvbGlkICNhYWE7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIge1xcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICM5OTk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTZlNmU2O1xcbiAgY29sb3I6ICM1NTU7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICB1c2VyLXNlbGVjdDogbm9uZTtcXG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAta2h0bWwtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcbiAgLW8tdXNlci1zZWxlY3Q6IG5vbmU7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1mb290ZXItY29udGVudHMge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgcGFkZGluZzogNXB4IDEwcHg7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1mb290ZXItY29udGVudHM6ZW1wdHkge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWZvb3RlciAudGFidWxhdG9yLWNhbGNzLWhvbGRlciB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgd2lkdGg6IDEwMCU7XFxuICB0ZXh0LWFsaWduOiBsZWZ0O1xcbiAgYmFja2dyb3VuZDogI2YzZjNmMyAhaW1wb3J0YW50O1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNhYWE7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgI2FhYTtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1jYWxjcy1ob2xkZXIgLnRhYnVsYXRvci1yb3cge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgYmFja2dyb3VuZDogI2YzZjNmMyAhaW1wb3J0YW50O1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyIC50YWJ1bGF0b3ItY2FsY3MtaG9sZGVyIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY29sLXJlc2l6ZS1oYW5kbGUge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWZvb3RlciAudGFidWxhdG9yLWNhbGNzLWhvbGRlcjpvbmx5LWNoaWxkIHtcXG4gIG1hcmdpbi1ib3R0b206IC01cHg7XFxuICBib3JkZXItYm90dG9tOiBub25lO1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyID4gKiArIC50YWJ1bGF0b3ItcGFnZS1jb3VudGVyIHtcXG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyIC50YWJ1bGF0b3ItcGFnZS1jb3VudGVyIHtcXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1wYWdpbmF0b3Ige1xcbiAgZmxleDogMTtcXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xcbiAgY29sb3I6ICM1NTU7XFxuICBmb250LWZhbWlseTogaW5oZXJpdDtcXG4gIGZvbnQtd2VpZ2h0OiBpbmhlcml0O1xcbiAgZm9udC1zaXplOiBpbmhlcml0O1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyIC50YWJ1bGF0b3ItcGFnZS1zaXplIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIG1hcmdpbjogMCA1cHg7XFxuICBwYWRkaW5nOiAycHggNXB4O1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2FhYTtcXG4gIGJvcmRlci1yYWRpdXM6IDNweDtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWZvb3RlciAudGFidWxhdG9yLXBhZ2VzIHtcXG4gIG1hcmdpbjogMCA3cHg7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1mb290ZXIgLnRhYnVsYXRvci1wYWdlIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIG1hcmdpbjogMCAycHg7XFxuICBwYWRkaW5nOiAycHggNXB4O1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2FhYTtcXG4gIGJvcmRlci1yYWRpdXM6IDNweDtcXG4gIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWZvb3RlciAudGFidWxhdG9yLXBhZ2UuYWN0aXZlIHtcXG4gIGNvbG9yOiAjZDAwO1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItZm9vdGVyIC50YWJ1bGF0b3ItcGFnZTpkaXNhYmxlZCB7XFxuICBvcGFjaXR5OiAuNTtcXG59XFxuXFxuQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xcbiAgLnRhYnVsYXRvciAudGFidWxhdG9yLWZvb3RlciAudGFidWxhdG9yLXBhZ2U6bm90KC5kaXNhYmxlZCk6aG92ZXIge1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC4yKTtcXG4gICAgY29sb3I6ICNmZmY7XFxuICB9XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1jb2wtcmVzaXplLWhhbmRsZSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB3aWR0aDogNnB4O1xcbiAgbWFyZ2luLWxlZnQ6IC0zcHg7XFxuICBtYXJnaW4tcmlnaHQ6IC0zcHg7XFxuICB6LWluZGV4OiAxMDtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxufVxcblxcbkBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcXG4gIC50YWJ1bGF0b3IgLnRhYnVsYXRvci1jb2wtcmVzaXplLWhhbmRsZTpob3ZlciB7XFxuICAgIGN1cnNvcjogZXctcmVzaXplO1xcbiAgfVxcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItY29sLXJlc2l6ZS1oYW5kbGU6bGFzdC1vZi10eXBlIHtcXG4gIHdpZHRoOiAzcHg7XFxuICBtYXJnaW4tcmlnaHQ6IDA7XFxufVxcblxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1hbGVydCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICB6LWluZGV4OiAxMDA7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC40KTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWFsZXJ0IC50YWJ1bGF0b3ItYWxlcnQtbXNnIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIG1hcmdpbjogMCBhdXRvO1xcbiAgcGFkZGluZzogMTBweCAyMHB4O1xcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gIGJhY2tncm91bmQ6ICNmZmY7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG59XFxuXFxuLnRhYnVsYXRvciAudGFidWxhdG9yLWFsZXJ0IC50YWJ1bGF0b3ItYWxlcnQtbXNnLnRhYnVsYXRvci1hbGVydC1zdGF0ZS1tc2cge1xcbiAgYm9yZGVyOiA0cHggc29saWQgIzMzMztcXG4gIGNvbG9yOiAjMDAwO1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItYWxlcnQgLnRhYnVsYXRvci1hbGVydC1tc2cudGFidWxhdG9yLWFsZXJ0LXN0YXRlLWVycm9yIHtcXG4gIGJvcmRlcjogNHB4IHNvbGlkICNEMDA7XFxuICBjb2xvcjogIzU5MDAwMDtcXG59XFxuXFxuLnRhYnVsYXRvci1yb3cge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIG1pbi1oZWlnaHQ6IDIycHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbn1cXG5cXG4udGFidWxhdG9yLXJvdy50YWJ1bGF0b3Itcm93LWV2ZW4ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI0VGRUZFRjtcXG59XFxuXFxuQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xcbiAgLnRhYnVsYXRvci1yb3cudGFidWxhdG9yLXNlbGVjdGFibGU6aG92ZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYmJiO1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICB9XFxufVxcblxcbi50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1zZWxlY3RlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjOUFCQ0VBO1xcbn1cXG5cXG5AbWVkaWEgKGhvdmVyOiBob3ZlcikgYW5kIChwb2ludGVyOiBmaW5lKSB7XFxuICAudGFidWxhdG9yLXJvdy50YWJ1bGF0b3Itc2VsZWN0ZWQ6aG92ZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNzY5QkNDO1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICB9XFxufVxcblxcbi50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1yb3ctbW92aW5nIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICMwMDA7XFxuICBiYWNrZ3JvdW5kOiAjZmZmO1xcbn1cXG5cXG4udGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItbW92aW5nIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjYWFhO1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNhYWE7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gIHotaW5kZXg6IDE1O1xcbn1cXG5cXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLXJvdy1yZXNpemUtaGFuZGxlIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHJpZ2h0OiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG4gIGhlaWdodDogNXB4O1xcbn1cXG5cXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLXJvdy1yZXNpemUtaGFuZGxlLnByZXYge1xcbiAgdG9wOiAwO1xcbiAgYm90dG9tOiBhdXRvO1xcbn1cXG5cXG5AbWVkaWEgKGhvdmVyOiBob3ZlcikgYW5kIChwb2ludGVyOiBmaW5lKSB7XFxuICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLXJvdy1yZXNpemUtaGFuZGxlOmhvdmVyIHtcXG4gICAgY3Vyc29yOiBucy1yZXNpemU7XFxuICB9XFxufVxcblxcbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItcmVzcG9uc2l2ZS1jb2xsYXBzZSB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgcGFkZGluZzogNXB4O1xcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNhYWE7XFxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2FhYTtcXG59XFxuXFxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1yZXNwb25zaXZlLWNvbGxhcHNlOmVtcHR5IHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItcmVzcG9uc2l2ZS1jb2xsYXBzZSB0YWJsZSB7XFxuICBmb250LXNpemU6IDE0cHg7XFxufVxcblxcbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItcmVzcG9uc2l2ZS1jb2xsYXBzZSB0YWJsZSB0ciB0ZCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItcmVzcG9uc2l2ZS1jb2xsYXBzZSB0YWJsZSB0ciB0ZDpmaXJzdC1vZi10eXBlIHtcXG4gIHBhZGRpbmctcmlnaHQ6IDEwcHg7XFxufVxcblxcbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgcGFkZGluZzogNHB4O1xcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI2FhYTtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xcbn1cXG5cXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwudGFidWxhdG9yLWZyb3plbiB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBwb3NpdGlvbjogc3RpY2t5O1xcbiAgbGVmdDogMDtcXG4gIGJhY2tncm91bmQtY29sb3I6IGluaGVyaXQ7XFxuICB6LWluZGV4OiAxMTtcXG59XFxuXFxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsLnRhYnVsYXRvci1mcm96ZW4udGFidWxhdG9yLWZyb3plbi1sZWZ0IHtcXG4gIGJvcmRlci1yaWdodDogMnB4IHNvbGlkICNhYWE7XFxufVxcblxcbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3ItZnJvemVuLnRhYnVsYXRvci1mcm96ZW4tcmlnaHQge1xcbiAgYm9yZGVyLWxlZnQ6IDJweCBzb2xpZCAjYWFhO1xcbn1cXG5cXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwudGFidWxhdG9yLWVkaXRpbmcge1xcbiAgYm9yZGVyOiAxcHggc29saWQgIzFENjhDRDtcXG4gIG91dGxpbmU6IG5vbmU7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG5cXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwudGFidWxhdG9yLWVkaXRpbmcgaW5wdXQsXFxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsLnRhYnVsYXRvci1lZGl0aW5nIHNlbGVjdCB7XFxuICBib3JkZXI6IDFweDtcXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcbiAgb3V0bGluZTogbm9uZTtcXG59XFxuXFxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsLnRhYnVsYXRvci12YWxpZGF0aW9uLWZhaWwge1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2RkMDAwMDtcXG59XFxuXFxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsLnRhYnVsYXRvci12YWxpZGF0aW9uLWZhaWwgaW5wdXQsXFxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsLnRhYnVsYXRvci12YWxpZGF0aW9uLWZhaWwgc2VsZWN0IHtcXG4gIGJvcmRlcjogMXB4O1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogI2RkMDAwMDtcXG59XFxuXFxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsLnRhYnVsYXRvci1yb3ctaGFuZGxlIHtcXG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcXG4gIC1raHRtbC11c2VyLXNlbGVjdDogbm9uZTtcXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtby11c2VyLXNlbGVjdDogbm9uZTtcXG59XFxuXFxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsLnRhYnVsYXRvci1yb3ctaGFuZGxlIC50YWJ1bGF0b3Itcm93LWhhbmRsZS1ib3gge1xcbiAgd2lkdGg6IDgwJTtcXG59XFxuXFxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsLnRhYnVsYXRvci1yb3ctaGFuZGxlIC50YWJ1bGF0b3Itcm93LWhhbmRsZS1ib3ggLnRhYnVsYXRvci1yb3ctaGFuZGxlLWJhciB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogM3B4O1xcbiAgbWFyZ2luLXRvcDogMnB4O1xcbiAgYmFja2dyb3VuZDogIzY2NjtcXG59XFxuXFxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItZGF0YS10cmVlLWJyYW5jaC1lbXB0eSB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB3aWR0aDogN3B4O1xcbn1cXG5cXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtYnJhbmNoIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxuICBoZWlnaHQ6IDlweDtcXG4gIHdpZHRoOiA3cHg7XFxuICBtYXJnaW4tdG9wOiAtOXB4O1xcbiAgbWFyZ2luLXJpZ2h0OiA1cHg7XFxuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAxcHg7XFxuICBib3JkZXItbGVmdDogMnB4IHNvbGlkICNhYWE7XFxuICBib3JkZXItYm90dG9tOiAycHggc29saWQgI2FhYTtcXG59XFxuXFxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wge1xcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgaGVpZ2h0OiAxMXB4O1xcbiAgd2lkdGg6IDExcHg7XFxuICBtYXJnaW4tcmlnaHQ6IDVweDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICMzMzM7XFxuICBib3JkZXItcmFkaXVzOiAycHg7XFxuICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuMSk7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG5cXG5AbWVkaWEgKGhvdmVyOiBob3ZlcikgYW5kIChwb2ludGVyOiBmaW5lKSB7XFxuICAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbDpob3ZlciB7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjIpO1xcbiAgfVxcbn1cXG5cXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbCAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sLWNvbGxhcHNlIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGhlaWdodDogN3B4O1xcbiAgd2lkdGg6IDFweDtcXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbCAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sLWNvbGxhcHNlOmFmdGVyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgbGVmdDogLTNweDtcXG4gIHRvcDogM3B4O1xcbiAgaGVpZ2h0OiAxcHg7XFxuICB3aWR0aDogN3B4O1xcbiAgYmFja2dyb3VuZDogIzMzMztcXG59XFxuXFxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbC1leHBhbmQge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgaGVpZ2h0OiA3cHg7XFxuICB3aWR0aDogMXB4O1xcbiAgYmFja2dyb3VuZDogIzMzMztcXG59XFxuXFxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbC1leHBhbmQ6YWZ0ZXIge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBsZWZ0OiAtM3B4O1xcbiAgdG9wOiAzcHg7XFxuICBoZWlnaHQ6IDFweDtcXG4gIHdpZHRoOiA3cHg7XFxuICBiYWNrZ3JvdW5kOiAjMzMzO1xcbn1cXG5cXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1yZXNwb25zaXZlLWNvbGxhcHNlLXRvZ2dsZSB7XFxuICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAta2h0bWwtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcbiAgLW8tdXNlci1zZWxlY3Q6IG5vbmU7XFxuICBoZWlnaHQ6IDE1cHg7XFxuICB3aWR0aDogMTVweDtcXG4gIGJvcmRlci1yYWRpdXM6IDIwcHg7XFxuICBiYWNrZ3JvdW5kOiAjNjY2O1xcbiAgY29sb3I6ICNmZmY7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIGZvbnQtc2l6ZTogMS4xZW07XFxufVxcblxcbkBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcXG4gIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCAudGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2UtdG9nZ2xlOmhvdmVyIHtcXG4gICAgb3BhY2l0eTogLjc7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gIH1cXG59XFxuXFxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItcmVzcG9uc2l2ZS1jb2xsYXBzZS10b2dnbGUub3BlbiAudGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2UtdG9nZ2xlLWNsb3NlIHtcXG4gIGRpc3BsYXk6IGluaXRpYWw7XFxufVxcblxcbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCAudGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2UtdG9nZ2xlLm9wZW4gLnRhYnVsYXRvci1yZXNwb25zaXZlLWNvbGxhcHNlLXRvZ2dsZS1vcGVuIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCAudGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2UtdG9nZ2xlIHN2ZyB7XFxuICBzdHJva2U6ICNmZmY7XFxufVxcblxcbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCAudGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2UtdG9nZ2xlIC50YWJ1bGF0b3ItcmVzcG9uc2l2ZS1jb2xsYXBzZS10b2dnbGUtY2xvc2Uge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItdHJhZmZpYy1saWdodCB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBoZWlnaHQ6IDE0cHg7XFxuICB3aWR0aDogMTRweDtcXG4gIGJvcmRlci1yYWRpdXM6IDE0cHg7XFxufVxcblxcbi50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1ncm91cCB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICM5OTk7XFxuICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjYWFhO1xcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICM5OTk7XFxuICBwYWRkaW5nOiA1cHg7XFxuICBwYWRkaW5nLWxlZnQ6IDEwcHg7XFxuICBiYWNrZ3JvdW5kOiAjY2NjO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBtaW4td2lkdGg6IDEwMCU7XFxufVxcblxcbkBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcXG4gIC50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1ncm91cDpob3ZlciB7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjEpO1xcbiAgfVxcbn1cXG5cXG4udGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItZ3JvdXAudGFidWxhdG9yLWdyb3VwLXZpc2libGUgLnRhYnVsYXRvci1hcnJvdyB7XFxuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxuICBib3JkZXItbGVmdDogNnB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLXJpZ2h0OiA2cHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItdG9wOiA2cHggc29saWQgIzY2NjtcXG4gIGJvcmRlci1ib3R0b206IDA7XFxufVxcblxcbi50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1ncm91cC50YWJ1bGF0b3ItZ3JvdXAtbGV2ZWwtMSB7XFxuICBwYWRkaW5nLWxlZnQ6IDMwcHg7XFxufVxcblxcbi50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1ncm91cC50YWJ1bGF0b3ItZ3JvdXAtbGV2ZWwtMiB7XFxuICBwYWRkaW5nLWxlZnQ6IDUwcHg7XFxufVxcblxcbi50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1ncm91cC50YWJ1bGF0b3ItZ3JvdXAtbGV2ZWwtMyB7XFxuICBwYWRkaW5nLWxlZnQ6IDcwcHg7XFxufVxcblxcbi50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1ncm91cC50YWJ1bGF0b3ItZ3JvdXAtbGV2ZWwtNCB7XFxuICBwYWRkaW5nLWxlZnQ6IDkwcHg7XFxufVxcblxcbi50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1ncm91cC50YWJ1bGF0b3ItZ3JvdXAtbGV2ZWwtNSB7XFxuICBwYWRkaW5nLWxlZnQ6IDExMHB4O1xcbn1cXG5cXG4udGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItZ3JvdXAgLnRhYnVsYXRvci1ncm91cC10b2dnbGUge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbn1cXG5cXG4udGFidWxhdG9yLXJvdy50YWJ1bGF0b3ItZ3JvdXAgLnRhYnVsYXRvci1hcnJvdyB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB3aWR0aDogMDtcXG4gIGhlaWdodDogMDtcXG4gIG1hcmdpbi1yaWdodDogMTZweDtcXG4gIGJvcmRlci10b3A6IDZweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1ib3R0b206IDZweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1yaWdodDogMDtcXG4gIGJvcmRlci1sZWZ0OiA2cHggc29saWQgIzY2NjtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxufVxcblxcbi50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1ncm91cCBzcGFuIHtcXG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xcbiAgY29sb3I6ICNkMDA7XFxufVxcblxcbi50YWJ1bGF0b3ItcG9wdXAtY29udGFpbmVyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBiYWNrZ3JvdW5kOiAjZmZmO1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2FhYTtcXG4gIGJveC1zaGFkb3c6IDAgMCA1cHggMCByZ2JhKDAsIDAsIDAsIDAuMik7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBvdmVyZmxvdy15OiBhdXRvO1xcbiAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoO1xcbiAgei1pbmRleDogMTAwMDA7XFxufVxcblxcbi50YWJ1bGF0b3ItcG9wdXAge1xcbiAgcGFkZGluZzogNXB4O1xcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xcbn1cXG5cXG4udGFidWxhdG9yLXRvb2x0aXAge1xcbiAgbWF4LXdpZHRoOiBNaW4oNTAwcHgsIDEwMCUpO1xcbiAgcGFkZGluZzogM3B4IDVweDtcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gIGJveC1zaGFkb3c6IG5vbmU7XFxuICBmb250LXNpemU6IDEycHg7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG59XFxuXFxuLnRhYnVsYXRvci1tZW51IC50YWJ1bGF0b3ItbWVudS1pdGVtIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBwYWRkaW5nOiA1cHggMTBweDtcXG4gIHVzZXItc2VsZWN0OiBub25lO1xcbn1cXG5cXG4udGFidWxhdG9yLW1lbnUgLnRhYnVsYXRvci1tZW51LWl0ZW0udGFidWxhdG9yLW1lbnUtaXRlbS1kaXNhYmxlZCB7XFxuICBvcGFjaXR5OiAuNTtcXG59XFxuXFxuQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xcbiAgLnRhYnVsYXRvci1tZW51IC50YWJ1bGF0b3ItbWVudS1pdGVtOm5vdCgudGFidWxhdG9yLW1lbnUtaXRlbS1kaXNhYmxlZCk6aG92ZXIge1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIGJhY2tncm91bmQ6ICNFRkVGRUY7XFxuICB9XFxufVxcblxcbi50YWJ1bGF0b3ItbWVudSAudGFidWxhdG9yLW1lbnUtaXRlbS50YWJ1bGF0b3ItbWVudS1pdGVtLXN1Ym1lbnUge1xcbiAgcGFkZGluZy1yaWdodDogMjVweDtcXG59XFxuXFxuLnRhYnVsYXRvci1tZW51IC50YWJ1bGF0b3ItbWVudS1pdGVtLnRhYnVsYXRvci1tZW51LWl0ZW0tc3VibWVudTo6YWZ0ZXIge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiBjYWxjKDVweCArIC40ZW0pO1xcbiAgcmlnaHQ6IDEwcHg7XFxuICBoZWlnaHQ6IDdweDtcXG4gIHdpZHRoOiA3cHg7XFxuICBjb250ZW50OiAnJztcXG4gIGJvcmRlci13aWR0aDogMXB4IDFweCAwIDA7XFxuICBib3JkZXItc3R5bGU6IHNvbGlkO1xcbiAgYm9yZGVyLWNvbG9yOiAjYWFhO1xcbiAgdmVydGljYWwtYWxpZ246IHRvcDtcXG4gIHRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcXG59XFxuXFxuLnRhYnVsYXRvci1tZW51IC50YWJ1bGF0b3ItbWVudS1zZXBhcmF0b3Ige1xcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNhYWE7XFxufVxcblxcbi50YWJ1bGF0b3ItZWRpdC1saXN0IHtcXG4gIG1heC1oZWlnaHQ6IDIwMHB4O1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbiAgb3ZlcmZsb3cteTogYXV0bztcXG4gIC13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOiB0b3VjaDtcXG59XFxuXFxuLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtaXRlbSB7XFxuICBwYWRkaW5nOiA0cHg7XFxuICBjb2xvcjogIzMzMztcXG4gIG91dGxpbmU6IG5vbmU7XFxufVxcblxcbi50YWJ1bGF0b3ItZWRpdC1saXN0IC50YWJ1bGF0b3ItZWRpdC1saXN0LWl0ZW0uYWN0aXZlIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZDogIzFENjhDRDtcXG59XFxuXFxuLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtaXRlbS5hY3RpdmUuZm9jdXNlZCB7XFxuICBvdXRsaW5lOiAxcHggc29saWQgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpO1xcbn1cXG5cXG4udGFidWxhdG9yLWVkaXQtbGlzdCAudGFidWxhdG9yLWVkaXQtbGlzdC1pdGVtLmZvY3VzZWQge1xcbiAgb3V0bGluZTogMXB4IHNvbGlkICMxRDY4Q0Q7XFxufVxcblxcbkBtZWRpYSAoaG92ZXI6IGhvdmVyKSBhbmQgKHBvaW50ZXI6IGZpbmUpIHtcXG4gIC50YWJ1bGF0b3ItZWRpdC1saXN0IC50YWJ1bGF0b3ItZWRpdC1saXN0LWl0ZW06aG92ZXIge1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIGNvbG9yOiAjZmZmO1xcbiAgICBiYWNrZ3JvdW5kOiAjMUQ2OENEO1xcbiAgfVxcbn1cXG5cXG4udGFidWxhdG9yLWVkaXQtbGlzdCAudGFidWxhdG9yLWVkaXQtbGlzdC1wbGFjZWhvbGRlciB7XFxuICBwYWRkaW5nOiA0cHg7XFxuICBjb2xvcjogIzMzMztcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtZ3JvdXAge1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNhYWE7XFxuICBwYWRkaW5nOiA0cHg7XFxuICBwYWRkaW5nLXRvcDogNnB4O1xcbiAgY29sb3I6ICMzMzM7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG59XFxuXFxuLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtaXRlbS50YWJ1bGF0b3ItZWRpdC1saXN0LWdyb3VwLWxldmVsLTIsXFxuLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtZ3JvdXAudGFidWxhdG9yLWVkaXQtbGlzdC1ncm91cC1sZXZlbC0yIHtcXG4gIHBhZGRpbmctbGVmdDogMTJweDtcXG59XFxuXFxuLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtaXRlbS50YWJ1bGF0b3ItZWRpdC1saXN0LWdyb3VwLWxldmVsLTMsXFxuLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtZ3JvdXAudGFidWxhdG9yLWVkaXQtbGlzdC1ncm91cC1sZXZlbC0zIHtcXG4gIHBhZGRpbmctbGVmdDogMjBweDtcXG59XFxuXFxuLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtaXRlbS50YWJ1bGF0b3ItZWRpdC1saXN0LWdyb3VwLWxldmVsLTQsXFxuLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtZ3JvdXAudGFidWxhdG9yLWVkaXQtbGlzdC1ncm91cC1sZXZlbC00IHtcXG4gIHBhZGRpbmctbGVmdDogMjhweDtcXG59XFxuXFxuLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtaXRlbS50YWJ1bGF0b3ItZWRpdC1saXN0LWdyb3VwLWxldmVsLTUsXFxuLnRhYnVsYXRvci1lZGl0LWxpc3QgLnRhYnVsYXRvci1lZGl0LWxpc3QtZ3JvdXAudGFidWxhdG9yLWVkaXQtbGlzdC1ncm91cC1sZXZlbC01IHtcXG4gIHBhZGRpbmctbGVmdDogMzZweDtcXG59XFxuXFxuLnRhYnVsYXRvci50YWJ1bGF0b3ItbHRyIHtcXG4gIGRpcmVjdGlvbjogbHRyO1xcbn1cXG5cXG4udGFidWxhdG9yLnRhYnVsYXRvci1ydGwge1xcbiAgdGV4dC1hbGlnbjogaW5pdGlhbDtcXG4gIGRpcmVjdGlvbjogcnRsO1xcbn1cXG5cXG4udGFidWxhdG9yLnRhYnVsYXRvci1ydGwgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wge1xcbiAgdGV4dC1hbGlnbjogaW5pdGlhbDtcXG4gIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI2FhYTtcXG4gIGJvcmRlci1yaWdodDogaW5pdGlhbDtcXG59XFxuXFxuLnRhYnVsYXRvci50YWJ1bGF0b3ItcnRsIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1jb2wtZ3JvdXAgLnRhYnVsYXRvci1jb2wtZ3JvdXAtY29scyB7XFxuICBtYXJnaW4tcmlnaHQ6IGluaXRpYWw7XFxuICBtYXJnaW4tbGVmdDogLTFweDtcXG59XFxuXFxuLnRhYnVsYXRvci50YWJ1bGF0b3ItcnRsIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLnRhYnVsYXRvci1zb3J0YWJsZSAudGFidWxhdG9yLWNvbC10aXRsZSB7XFxuICBwYWRkaW5nLXJpZ2h0OiAwO1xcbiAgcGFkZGluZy1sZWZ0OiAyNXB4O1xcbn1cXG5cXG4udGFidWxhdG9yLnRhYnVsYXRvci1ydGwgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wgLnRhYnVsYXRvci1jb2wtY29udGVudCAudGFidWxhdG9yLWNvbC1zb3J0ZXIge1xcbiAgbGVmdDogOHB4O1xcbiAgcmlnaHQ6IGluaXRpYWw7XFxufVxcblxcbi50YWJ1bGF0b3IudGFidWxhdG9yLXJ0bCAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwge1xcbiAgYm9yZGVyLXJpZ2h0OiBpbml0aWFsO1xcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjYWFhO1xcbn1cXG5cXG4udGFidWxhdG9yLnRhYnVsYXRvci1ydGwgLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsIC50YWJ1bGF0b3ItZGF0YS10cmVlLWJyYW5jaCB7XFxuICBtYXJnaW4tcmlnaHQ6IGluaXRpYWw7XFxuICBtYXJnaW4tbGVmdDogNXB4O1xcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogaW5pdGlhbDtcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAxcHg7XFxuICBib3JkZXItbGVmdDogaW5pdGlhbDtcXG4gIGJvcmRlci1yaWdodDogMnB4IHNvbGlkICNhYWE7XFxufVxcblxcbi50YWJ1bGF0b3IudGFidWxhdG9yLXJ0bCAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbCB7XFxuICBtYXJnaW4tcmlnaHQ6IGluaXRpYWw7XFxuICBtYXJnaW4tbGVmdDogNXB4O1xcbn1cXG5cXG4udGFidWxhdG9yLnRhYnVsYXRvci1ydGwgLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsLnRhYnVsYXRvci1mcm96ZW4udGFidWxhdG9yLWZyb3plbi1sZWZ0IHtcXG4gIGJvcmRlci1sZWZ0OiAycHggc29saWQgI2FhYTtcXG59XFxuXFxuLnRhYnVsYXRvci50YWJ1bGF0b3ItcnRsIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbC50YWJ1bGF0b3ItZnJvemVuLnRhYnVsYXRvci1mcm96ZW4tcmlnaHQge1xcbiAgYm9yZGVyLXJpZ2h0OiAycHggc29saWQgI2FhYTtcXG59XFxuXFxuLnRhYnVsYXRvci50YWJ1bGF0b3ItcnRsIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY29sLXJlc2l6ZS1oYW5kbGU6bGFzdC1vZi10eXBlIHtcXG4gIHdpZHRoOiAzcHg7XFxuICBtYXJnaW4tbGVmdDogMDtcXG4gIG1hcmdpbi1yaWdodDogLTNweDtcXG59XFxuXFxuLnRhYnVsYXRvci50YWJ1bGF0b3ItcnRsIC50YWJ1bGF0b3ItZm9vdGVyIC50YWJ1bGF0b3ItY2FsY3MtaG9sZGVyIHtcXG4gIHRleHQtYWxpZ246IGluaXRpYWw7XFxufVxcblxcbi50YWJ1bGF0b3ItcHJpbnQtZnVsbHNjcmVlbiB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiAwO1xcbiAgcmlnaHQ6IDA7XFxuICB6LWluZGV4OiAxMDAwMDtcXG59XFxuXFxuYm9keS50YWJ1bGF0b3ItcHJpbnQtZnVsbHNjcmVlbi1oaWRlID4gKjpub3QoLnRhYnVsYXRvci1wcmludC1mdWxsc2NyZWVuKSB7XFxuICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XFxufVxcblxcbi50YWJ1bGF0b3ItcHJpbnQtdGFibGUge1xcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcXG59XFxuXFxuLnRhYnVsYXRvci1wcmludC10YWJsZSAudGFidWxhdG9yLWRhdGEtdHJlZS1icmFuY2gge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG4gIGhlaWdodDogOXB4O1xcbiAgd2lkdGg6IDdweDtcXG4gIG1hcmdpbi10b3A6IC05cHg7XFxuICBtYXJnaW4tcmlnaHQ6IDVweDtcXG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDFweDtcXG4gIGJvcmRlci1sZWZ0OiAycHggc29saWQgI2FhYTtcXG4gIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCAjYWFhO1xcbn1cXG5cXG4udGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUtZ3JvdXAge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjOTk5O1xcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI2FhYTtcXG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjOTk5O1xcbiAgcGFkZGluZzogNXB4O1xcbiAgcGFkZGluZy1sZWZ0OiAxMHB4O1xcbiAgYmFja2dyb3VuZDogI2NjYztcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgbWluLXdpZHRoOiAxMDAlO1xcbn1cXG5cXG5AbWVkaWEgKGhvdmVyOiBob3ZlcikgYW5kIChwb2ludGVyOiBmaW5lKSB7XFxuICAudGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUtZ3JvdXA6aG92ZXIge1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4xKTtcXG4gIH1cXG59XFxuXFxuLnRhYnVsYXRvci1wcmludC10YWJsZSAudGFidWxhdG9yLXByaW50LXRhYmxlLWdyb3VwLnRhYnVsYXRvci1ncm91cC12aXNpYmxlIC50YWJ1bGF0b3ItYXJyb3cge1xcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcbiAgYm9yZGVyLWxlZnQ6IDZweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1yaWdodDogNnB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLXRvcDogNnB4IHNvbGlkICM2NjY7XFxuICBib3JkZXItYm90dG9tOiAwO1xcbn1cXG5cXG4udGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUtZ3JvdXAudGFidWxhdG9yLWdyb3VwLWxldmVsLTEgdGQge1xcbiAgcGFkZGluZy1sZWZ0OiAzMHB4ICFpbXBvcnRhbnQ7XFxufVxcblxcbi50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1wcmludC10YWJsZS1ncm91cC50YWJ1bGF0b3ItZ3JvdXAtbGV2ZWwtMiB0ZCB7XFxuICBwYWRkaW5nLWxlZnQ6IDUwcHggIWltcG9ydGFudDtcXG59XFxuXFxuLnRhYnVsYXRvci1wcmludC10YWJsZSAudGFidWxhdG9yLXByaW50LXRhYmxlLWdyb3VwLnRhYnVsYXRvci1ncm91cC1sZXZlbC0zIHRkIHtcXG4gIHBhZGRpbmctbGVmdDogNzBweCAhaW1wb3J0YW50O1xcbn1cXG5cXG4udGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItcHJpbnQtdGFibGUtZ3JvdXAudGFidWxhdG9yLWdyb3VwLWxldmVsLTQgdGQge1xcbiAgcGFkZGluZy1sZWZ0OiA5MHB4ICFpbXBvcnRhbnQ7XFxufVxcblxcbi50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1wcmludC10YWJsZS1ncm91cC50YWJ1bGF0b3ItZ3JvdXAtbGV2ZWwtNSB0ZCB7XFxuICBwYWRkaW5nLWxlZnQ6IDExMHB4ICFpbXBvcnRhbnQ7XFxufVxcblxcbi50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1wcmludC10YWJsZS1ncm91cCAudGFidWxhdG9yLWdyb3VwLXRvZ2dsZSB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcblxcbi50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1wcmludC10YWJsZS1ncm91cCAudGFidWxhdG9yLWFycm93IHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdpZHRoOiAwO1xcbiAgaGVpZ2h0OiAwO1xcbiAgbWFyZ2luLXJpZ2h0OiAxNnB4O1xcbiAgYm9yZGVyLXRvcDogNnB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWJvdHRvbTogNnB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLXJpZ2h0OiAwO1xcbiAgYm9yZGVyLWxlZnQ6IDZweCBzb2xpZCAjNjY2O1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG59XFxuXFxuLnRhYnVsYXRvci1wcmludC10YWJsZSAudGFidWxhdG9yLXByaW50LXRhYmxlLWdyb3VwIHNwYW4ge1xcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XFxuICBjb2xvcjogI2QwMDtcXG59XFxuXFxuLnRhYnVsYXRvci1wcmludC10YWJsZSAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sIHtcXG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG4gIGhlaWdodDogMTFweDtcXG4gIHdpZHRoOiAxMXB4O1xcbiAgbWFyZ2luLXJpZ2h0OiA1cHg7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjMzMzO1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjEpO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuXFxuQG1lZGlhIChob3ZlcjogaG92ZXIpIGFuZCAocG9pbnRlcjogZmluZSkge1xcbiAgLnRhYnVsYXRvci1wcmludC10YWJsZSAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sOmhvdmVyIHtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuMik7XFxuICB9XFxufVxcblxcbi50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbCAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sLWNvbGxhcHNlIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGhlaWdodDogN3B4O1xcbiAgd2lkdGg6IDFweDtcXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG4udGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbC1jb2xsYXBzZTphZnRlciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG4gIGxlZnQ6IC0zcHg7XFxuICB0b3A6IDNweDtcXG4gIGhlaWdodDogMXB4O1xcbiAgd2lkdGg6IDdweDtcXG4gIGJhY2tncm91bmQ6ICMzMzM7XFxufVxcblxcbi50YWJ1bGF0b3ItcHJpbnQtdGFibGUgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbCAudGFidWxhdG9yLWRhdGEtdHJlZS1jb250cm9sLWV4cGFuZCB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBoZWlnaHQ6IDdweDtcXG4gIHdpZHRoOiAxcHg7XFxuICBiYWNrZ3JvdW5kOiAjMzMzO1xcbn1cXG5cXG4udGFidWxhdG9yLXByaW50LXRhYmxlIC50YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wgLnRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbC1leHBhbmQ6YWZ0ZXIge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBsZWZ0OiAtM3B4O1xcbiAgdG9wOiAzcHg7XFxuICBoZWlnaHQ6IDFweDtcXG4gIHdpZHRoOiA3cHg7XFxuICBiYWNrZ3JvdW5kOiAjMzMzO1xcbn1cXG5cXG4vKiMgc291cmNlTWFwcGluZ1VSTD10YWJ1bGF0b3IuY3NzLm1hcCAqL1wiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18gZnJvbSBcIi0hLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3RhYnVsYXRvci10YWJsZXMvZGlzdC9jc3MvdGFidWxhdG9yLmNzc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIkBpbXBvcnQgdXJsKGh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9RXBpbG9ndWU6aXRhbCx3Z2h0QDAsMTAwOzAsMjAwOzAsMzAwOzAsNDAwOzAsNTAwOzAsNjAwOzAsNzAwOzAsODAwOzAsOTAwOzEsMTAwOzEsMjAwOzEsMzAwOzEsNDAwOzEsNTAwOzEsNjAwOzEsNzAwOzEsODAwOzEsOTAwJmZhbWlseT1JbnRlcjp3Z2h0QDEwMDsyMDA7MzAwOzQwMDs1MDA7NjAwOzcwMDs4MDA7OTAwJmZhbWlseT1PcmJpdHJvbjp3Z2h0QDQwMDs1MDA7NjAwOzcwMDs4MDA7OTAwJmZhbWlseT1TaW50b255OndnaHRANDAwOzcwMCZkaXNwbGF5PXN3YXApO1wiXSk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYCoge1xuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG59XG5cbjpyb290IHtcbiAgICAtLWdpZ2FudGljLXRleHQ6IDQuNzY4cmVtO1xuICAgIC0tanVtYm8tdGV4dDogMy44MTVyZW07XG4gICAgLS1oMS10ZXh0OiAzLjA1MnJlbTtcbiAgICAtLWgyLXRleHQ6IDIuNDQxcmVtO1xuICAgIC0taDMtdGV4dDogMS45NTNyZW07XG4gICAgLS1oNC10ZXh0OiAxLjU2M3JlbTtcbiAgICAtLWg1LXRleHQ6IDEuMjVyZW07XG4gICAgLS1zbWFsbC10ZXh0OiAwLjcycmVtO1xuICAgIC0tc21hbGxlci10ZXh0OiAwLjY0cmVtO1xuICAgIC0tc21hbGxlc3QtdGV4dDogMC41MTJyZW07XG4gICAgLS1tYWluLWNvbG9yOiAjYzEwODI4O1xuICAgIC0tdGV4dC1jb2xvcjogIzBkMDYwNztcbiAgICAtLWRhcmstY29sb3I6ICMyYjJiMmI7XG4gICAgLS10aGlyZC1jb2xvcjogI2I5ZTkzNztcbiAgICAtLXJlZC1jb2xvcjogI2I5MDAwMDtcbn1cblxuaHRtbCB7XG4gICAgZm9udC1zaXplOiAxMDAlO1xuICAgIHNjcm9sbC1iZWhhdmlvcjogc21vb3RoO1xufVxuXG5ib2R5IHtcbiAgICBmb250LWZhbWlseTogJ1NpbnRvbnknLCBzYW5zLXNlcmlmO1xuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgY29sb3I6IHdoaXRlO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWRhcmstY29sb3IpO1xufVxuXG5hIHtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbmJ1dHRvbiB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG5wIHttYXJnaW4tYm90dG9tOiAxcmVtO31cblxuaDEsIGgyLCBoMywgaDQsIGg1IHtcbiAgbWFyZ2luOiAzcmVtIDAgMS4zOHJlbTtcbiAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgbGluZS1oZWlnaHQ6IDE7XG59XG5cbmgxIHtcbiAgbWFyZ2luLXRvcDogMDtcbiAgZm9udC1zaXplOiB2YXIoLS1oMS10ZXh0KTtcbiAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbn1cblxuaDIge2ZvbnQtc2l6ZTogdmFyKC0taDItdGV4dCk7fVxuXG5oMyB7Zm9udC1zaXplOiB2YXIoLS1oMy10ZXh0KTt9XG5cbmg0IHtmb250LXNpemU6IHZhcigtLWg0LXRleHQpO31cblxuaDUge2ZvbnQtc2l6ZTogdmFyKC0taDUtdGV4dCk7fVxuXG4ubWF0ZXJpYWwtc3ltYm9scy1vdXRsaW5lZCB7XG4gIGZvbnQtdmFyaWF0aW9uLXNldHRpbmdzOlxuICAnRklMTCcgMCxcbiAgJ3dnaHQnIDQwMCxcbiAgJ0dSQUQnIDAsXG4gICdvcHN6JyAyNFxufVxuXG51bCB7bGlzdC1zdHlsZS10eXBlOiBub25lO31cblxuYSB7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgIGNvbG9yOiBpbmhlcml0O1xufVxuXG4uaGVhZGVyIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBiYWNrZ3JvdW5kOiByZ2IoMTMsNiw3KTtcbiAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCByZ2JhKDEzLDYsNywxKSAwJSwgcmdiYSgxOTMsOCw0MCwxKSAxMDAlKTtcbn1cblxuLmhlYWRlcl9fbG9nbyB7XG4gICAgaGVpZ2h0OiBhdXRvO1xuICAgIHdpZHRoOiAxMDBweDtcbn1cblxuLmRpdmlkZXIge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgIHdpZHRoOiAxNTBweDtcbiAgICBib3JkZXItdG9wOiAxcHggc29saWQgd2hpdGU7XG59XG5cbi5oZWFkZXJfX3RpdGxlIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgaGVpZ2h0OiAxNTBweDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBnYXA6IDE1cHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMjA1Yjtcbn1cblxuLmhlYWRlcl9fdGl0bGVfX3RleHQge1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgZm9udC13ZWlnaHQ6IDkwMDtcbiAgICBmb250LXNpemU6IHZhcigtLWgxLXRleHQpO1xuICAgIGZvbnQtZmFtaWx5OiAnSW50ZXInLCBzYW5zLXNlcmlmO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICB3aWR0aDogMjUwcHg7XG59XG5cbi5oZWFkZXJfX2JhZGdlIHtcbiAgICB3aWR0aDogLXdlYmtpdC1maWxsLWF2YWlsYWJsZTtcbiAgICBiYWNrZ3JvdW5kOiByZ2IoMCwzMiw5MSk7XG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDE4MGRlZywgcmdiYSgwLDMyLDkxLDEpIDAlLCByZ2JhKDAsMCwwLDEpIDEwMCUpO1xufVxuXG4uaGVhZGVyX19zdGF0cy1zZWN0aW9uIHtcbiAgICB3aWR0aDogLXdlYmtpdC1maWxsLWF2YWlsYWJsZTtcbiAgICBtYXJnaW46IDE1cHggMjVweCA0MHB4IDI1cHg7XG59XG5cbi5oZWFkZXJfX3N0YXRzLXNlY3Rpb25fX2xpc3RfX2l0ZW1fX2xvZ28ge1xuICAgIHdpZHRoOiA1MHB4O1xuICAgIGhlaWdodDogYXV0bztcbn1cblxuXG4uaGVhZGVyX19zdGF0cy1zZWN0aW9uX190b3Atc2VjdGlvbiB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcbiAgICBtYXJnaW4tYm90dG9tOiAyNXB4O1xuICAgIG1hcmdpbi10b3A6IDI1cHg7XG59XG5cbi5zZWN0aW9uLXRpdGxlID4gc3BhbiB7XG4gICAgZm9udC1zaXplOiB2YXIoLS1oNC10ZXh0KTtcbiAgICBmb250LWZhbWlseTogJ1NpbnRvbnknLCBzYW5zLXNlcmlmO1xuICAgIGZvbnQtd2VpZ2h0OiA3MDA7XG59XG5cbi5oZWFkZXJfX3N0YXRzLXNlY3Rpb24tdG9wIHtcbiAgICBwYWRkaW5nLXRvcDogMTBweDtcbn1cblxuLmhlYWRlcl9fc3RhdHMtc2VjdGlvbl9fdG9wIHtcbiAgICBjb2xvcjogd2hpdGU7XG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICBmb250LXdlaWdodDogNzAwO1xuICAgIGZvbnQtc2l6ZTogdmFyKC0tc21hbGxlci10ZXh0KTtcbn1cblxuLnN0YXRzLXJlc3VsdHMge1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgZm9udC1zaXplOiB2YXIoLS1oMS10ZXh0KTtcbiAgICBmb250LXdlaWdodDogNzAwO1xufVxuXG4ucGFydGljaXBhdGlvbiB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBnYXA6IDE1cHg7XG4gICAgcGFkZGluZzogMTBweDtcbn1cblxuLnRlYW0tbG9nbyB7XG4gICAgd2lkdGg6IDQwcHg7XG4gICAgaGVpZ2h0OiBhdXRvO1xufVxuXG4udGFidWxhdG9yIHtcbiAgICBib3JkZXItY29sb3I6ICNjNWM1YzU7XG5cbn1cblxuLmhlYWRlcl9fc3RhdHMtc2VjdGlvbi1taWRkbGUge1xuICAgIHBhZGRpbmctYm90dG9tOiA1cHg7XG4gICAgcGFkZGluZy10b3A6IDE1cHg7XG59XG5cbi5oZWFkZXJfX3N0YXRzLXNlY3Rpby1ib3R0b20tc2VjdGlvbiB7XG4gICAgbWFyZ2luLXRvcDogMjVweDtcbn1cblxuLmhlYWRlcl9fc3RhdHMtc2VjdGlvLWJvdHRvbS1zZWN0aW9uIC5kaXZpZGVyIHtcbiAgICB3aWR0aDogMjAwcHg7XG59XG5cbiNzdGF0cy10YWJsZSB7XG4gICAgbWFyZ2luLWJvdHRvbTogMzVweDtcbiAgICBtYXJnaW4tdG9wOiAzNXB4O1xufVxuXG4jc3RhdHMtdGFibGUgLnRhYnVsYXRvci1jZWxsW3RhYnVsYXRvci1maWVsZD1cImVxdWlwZVwiXSB7XG4gICAgZm9udC1zaXplOiB2YXIoLS1zbWFsbC10ZXh0KTtcbn1cblxuLnRhYnVsYXRvciAudGFidWxhdG9yLWhlYWRlcixcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wge1xuICAgIGJvcmRlci1jb2xvcjogI2M1YzVjNTtcbiAgICBjb2xvcjogI2RmZGZkZjtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMGEwYTBhO1xuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XG59XG5cbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wge1xuICAgIGhlaWdodDogNDBweDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbn1cblxuI3N0YXRzLXRhYmxlIC50YWJ1bGF0b3ItY2VsbCB7XG4gICAgZ2FwOiAxNXB4O1xuICAgIHBhZGRpbmc6IDA7XG4gICAgY29sb3I6I2ZmZjtcbiAgICBmb250LXdlaWdodDogNTAwO1xufVxuXG4jc3RhdHMtdGFibGUgLnRhYnVsYXRvci1jZWxsID4gZGl2IHtcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xufVxuXG4jc3RhdHMtdGFibGUgLnRhYnVsYXRvci1jZWxsID4gaW1nIHtcbiAgICB3aWR0aDogYXV0bztcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgcGFkZGluZy1sZWZ0OiA1cHg7XG4gICAgcGFkZGluZy1yaWdodDogNXB4O1xufVxuXG4udGFidWxhdG9yLWNlbGwgPiBpbWcge1xuICAgIHdpZHRoOiBhdXRvO1xuICAgIGhlaWdodDogMTAwJTtcbn1cblxuLypUaGVtZSB0aGUgVGFidWxhdG9yIGVsZW1lbnQqL1xuI3BpY2stdGFibGUge1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICNjNWM1YzU7XG59XG5cbi8qVGhlbWUgdGhlIGhlYWRlciovXG4udGFidWxhdG9yLWhlYWRlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjojMWQxOTFhO1xuICAgIGNvbG9yOiNmZmY7XG59XG5cbi8qQWxsb3cgY29sdW1uIGhlYWRlciBuYW1lcyB0byB3cmFwIGxpbmVzKi9cbiNwaWNrLXRhYmxlIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sLFxuI3BpY2stdGFibGUgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wtcm93LWhhbmRsZSB7XG4gICAgd2hpdGUtc3BhY2U6IG5vcm1hbDtcbn1cblxuLypDb2xvciB0aGUgdGFibGUgcm93cyBiYXNlIG9uIHBsYXllciBuYW1lKi9cbiNwaWNrLXRhYmxlIC50YWJ1bGF0b3ItdGFibGUgLnRhYnVsYXRvci1yb3cuYS1wbGF5ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7XG59XG5cbiNwaWNrLXRhYmxlIC50YWJ1bGF0b3ItdGFibGUgLnRhYnVsYXRvci1yb3cuYW5vdGhlci1wbGF5ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNkYmRiZGI7XG59XG5cbiNwaWNrLXRhYmxlIC50YWJ1bGF0b3ItY2VsbFt0YWJ1bGF0b3ItZmllbGQ9XCJqb3VldXJcIl0ge1xuICAgIGZvbnQtc2l6ZTogdmFyKC0tc21hbGwtdGV4dCk7XG59XG5cbi8qIENvbG9yIHRoZSBib3JkZXIgY2VsbHMgKi9cbi50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbCB7XG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNjNWM1YzU7XG59XG5cbiNzdGF0cy10YWJsZSAudGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGw6bGFzdC1vZi10eXBlLFxuI3N0YXRzLXRhYmxlIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sOmxhc3Qtb2YtdHlwZSB7XG4gICAgYm9yZGVyLXJpZ2h0OiBub25lO1xufVxuXG4jc3RhdHMtdGFibGUgLnRhYnVsYXRvci1yb3c6bGFzdC1vZi10eXBlIC50YWJ1bGF0b3ItY2VsbCB7XG4gICAgYm9yZGVyLWJvdHRvbTogbm9uZTtcbn1cblxuLnRhYnVsYXRvci1yb3cgLnRhYnVsYXRvci1jZWxsLnRhYnVsYXRvci1mcm96ZW4udGFidWxhdG9yLWZyb3plbi1yaWdodCxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1mcm96ZW4udGFidWxhdG9yLWZyb3plbi1yaWdodCB7XG4gICAgYm9yZGVyLWxlZnQ6IDFweDtcbn1cblxuLmdyYXlzY2FsZS1lZmZlY3Qge1xuICAgIGZpbHRlcjogZ3JheXNjYWxlKDEwMCUpO1xuICB9XG4vKiBOSEwgVEVBTVMgQ09MT1IgKi9cbiNzdGF0cy10YWJsZSAuYW5haGVpbS1kdWNrcyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzU1NDcyZDtcbn1cblxuLmFuYWhlaW0tZHVja3MgaW1nLCAuYW5haGVpbS1kdWNrcyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2I2OTg1YTtcbn1cblxuI3N0YXRzLXRhYmxlIC5hcml6b25hLWNveW90ZXMge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMzOTBiMTg7XG59XG5cbi5hcml6b25hLWNveW90ZSBpbWcsIC5hcml6b25hLWNveW90ZXMge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICM3YTAwMjI7XG59XG5cbiNzdGF0cy10YWJsZSAuYm9zdG9uLWJydWlucyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2I0ODUxODtcbn1cblxuLmJvc3Rvbi1icnVpbnMgaW1nLCAuYm9zdG9uLWJydWlucyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZkYjkxZTtcbn1cblxuI3N0YXRzLXRhYmxlIC5idWZmYWxvLXNhYnJlcyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzBhMWM0MDtcbn1cblxuLmJ1ZmZhbG8tc2FicmVzIGltZywgLmJ1ZmZhbG8tc2FicmVzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDIzMDg5O1xufVxuXG4jc3RhdHMtdGFibGUgLmNhbGdhcnktZmxhbWVzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjgxMTFlO1xufVxuXG4uY2FsZ2FyeS1mbGFtZXMgaW1nLCAuY2FsZ2FyeS1mbGFtZXMge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNlMzBhMmI7XG59XG5cbiNzdGF0cy10YWJsZSAuY2Fyb2xpbmEtaHVycmljYW5lcyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzhjMjYyNjtcbn1cblxuLmNhcm9saW5hLWh1cnJpY2FuZXMgaW1nLCAuY2Fyb2xpbmEtaHVycmljYW5lcyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2M4MTAyZTtcbn1cblxuI3N0YXRzLXRhYmxlIC5jaGljYWdvLWJsYWNraGF3a3Mge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICM2NzBlMWM7XG59XG5cbi5jaGljYWdvLWJsYWNraGF3a3MgaW1nLCAuY2hpY2Fnby1ibGFja2hhd2tzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTMwODI5O1xufVxuXG4jc3RhdHMtdGFibGUgLmNvbG9yYWRvLWF2YWxhbmNoZSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzJmMTIxNDtcbn1cblxuLmNvbG9yYWRvLWF2YWxhbmNoZSBpbWcsIC5jb2xvcmFkby1hdmFsYW5jaGUge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICM2ZjI2M2Q7XG59XG5cbiNzdGF0cy10YWJsZSAuY29sdW1idXMtYmx1ZS1qYWNrZXRzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDkxYzMyO1xufVxuXG4uY29sdW1idXMtYmx1ZS1qYWNrZXRzIGltZywgLmNvbHVtYnVzLWJsdWUtamFja2V0cyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAzMmQ2NTtcbn1cblxuI3N0YXRzLXRhYmxlIC5kYWxsYXMtc3RhcnMge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMxNzQyMzM7XG59XG5cbi5kYWxsYXMtc3RhcnMgaW1nLCAuZGFsbGFzLXN0YXJzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3MDRhO1xufVxuXG4jc3RhdHMtdGFibGUgLmRldHJvaXQtcmVkLXdpbmdzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjQwYzE4O1xufVxuXG4uZGV0cm9pdC1yZWQtd2luZ3MgaW1nLCAuZGV0cm9pdC1yZWQtd2luZ3Mge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNlMzA1MjQ7XG59XG5cbiNzdGF0cy10YWJsZSAuZWRtb250b24tb2lsZXJzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAxMTMxO1xufVxuXG4uZWRtb250b24tb2lsZXJzIGltZywgLmVkbW9udG9uLW9pbGVycyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMjA1Yjtcbn1cblxuI3N0YXRzLXRhYmxlIC5mbG9yaWRhLXBhbnRoZXJzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjOTIwYjIxO1xufVxuXG4uZmxvcmlkYS1wYW50aGVycyBpbWcsIC5mbG9yaWRhLXBhbnRoZXJzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYzgxMDJlO1xufVxuXG4jc3RhdHMtdGFibGUgLnNlYXR0bGUta3Jha2VuIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMGExMDFlO1xufVxuXG4uc2VhdHRsZS1rcmFrZW4gaW1nLCAuc2VhdHRsZS1rcmFrZW4ge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDBmMzI7XG59XG5cbiNzdGF0cy10YWJsZSAubG9zLWFuZ2VsZXMta2luZ3Mge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICM1YjViNWQ7XG59XG5cbi5sb3MtYW5nZWxlcy1raW5ncyBpbWcsIC5sb3MtYW5nZWxlcy1raW5ncyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2IxYjZiYTtcbn1cblxuI3N0YXRzLXRhYmxlIC5taW5uZXNvdGEtd2lsZCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMjIxNztcbn1cblxuLm1pbm5lc290YS13aWxkIGltZywgLm1pbm5lc290YS13aWxkIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDI1NzM2O1xufVxuXG4jc3RhdHMtdGFibGUgLm1vbnRyZWFsLWNhbmFkaWVucyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzU3MGQxYTtcbn1cblxuLm1vbnRyZWFsLWNhbmFkaWVucyBpbWcsIC5tb250cmVhbC1jYW5hZGllbnMge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNjMjA4Mjg7XG59XG5cbiNzdGF0cy10YWJsZSAubmFzaHZpbGxlLXByZWRhdG9ycyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzcxNTQxYTtcbn1cblxuLm5hc2h2aWxsZS1wcmVkYXRvcnMgaW1nLCAubmFzaHZpbGxlLXByZWRhdG9ycyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZkYjYyMztcbn1cblxuI3N0YXRzLXRhYmxlIC5uZXctamVyc2V5LWRldmlscyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzY0MGMxODtcbn1cblxuLm5ldy1qZXJzZXktZGV2aWxzIGltZywgLm5ldy1qZXJzZXktZGV2aWxzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTEwNjIzO1xufVxuXG4jc3RhdHMtdGFibGUgLm5ldy15b3JrLWlzbGFuZGVycyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzBiMjY0Mztcbn1cblxuLm5ldy15b3JrLWlzbGFuZGVycyBpbWcsIC5uZXcteW9yay1pc2xhbmRlcnMge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDQ3OGM7XG59XG5cbiNzdGF0cy10YWJsZSAubmV3LXlvcmstcmFuZ2VycyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzE4Mzg1OTtcbn1cblxuLm5ldy15b3JrLXJhbmdlcnMgaW1nLCAubmV3LXlvcmstcmFuZ2VycyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwNTZhODtcbn1cblxuI3N0YXRzLXRhYmxlIC5vdHRhd2Etc2VuYXRvcnMge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICM2NTBjMTk7XG59XG5cbi5vdHRhd2Etc2VuYXRvcnMgaW1nLCAub3R0YXdhLXNlbmF0b3JzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTMwNTI2O1xufVxuXG4jc3RhdHMtdGFibGUgLnBoaWxhZGVscGhpYS1mbHllcnMge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICM2ZjI5MGI7XG59XG5cbi5waGlsYWRlbHBoaWEtZmx5ZXJzIGltZywgLnBoaWxhZGVscGhpYS1mbHllcnMge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmYzRjMDI7XG59XG5cbiNzdGF0cy10YWJsZSAucGl0dHNidXJnaC1wZW5ndWlucyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzFiMWIxYztcbn1cblxuLnBpdHRzYnVyZ2gtcGVuZ3VpbnMgaW1nLCAucGl0dHNidXJnaC1wZW5ndWlucyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzBlMGUwZjtcbn1cblxuI3N0YXRzLXRhYmxlIC5zYW4tam9zZS1zaGFya3Mge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMwYTM2M2Q7XG59XG5cbi5zYW4tam9zZS1zaGFya3MgaW1nLCAuc2FuLWpvc2Utc2hhcmtzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA2ZDgwO1xufVxuXG4jc3RhdHMtdGFibGUgLnN0LWxvdWlzLWJsdWVzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTgxYTM5O1xufVxuXG4uc3QtbG91aXMtYmx1ZXMgaW1nLCAuc3QtbG91aXMtYmx1ZXMge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDMwODc7XG59XG5cbiNzdGF0cy10YWJsZSAudGFtcGEtYmF5LWxpZ2h0bmluZyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzBjMGUyNDtcbn1cblxuLnRhbXBhLWJheS1saWdodG5pbmcgaW1nLCAudGFtcGEtYmF5LWxpZ2h0bmluZyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMjA1Yjtcbn1cblxuI3N0YXRzLXRhYmxlIC50b3JvbnRvLW1hcGxlLWxlYWZzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTUxNzIyO1xufVxuXG4udG9yb250by1tYXBsZS1sZWFmcyBpbWcsIC50b3JvbnRvLW1hcGxlLWxlYWZzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAyMDViO1xufVxuXG4jc3RhdHMtdGFibGUgLnZhbmNvdXZlci1jYW51Y2tzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDkxZDJlO1xufVxuXG4udmFuY291dmVyLWNhbnVja3MgaW1nLCAudmFuY291dmVyLWNhbnVja3Mge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMTJkNTM7XG59XG5cbiNzdGF0cy10YWJsZSAudmVnYXMtZ29sZGVuLWtuaWdodHMge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICM1MzQ3MmQ7XG59XG5cbi52ZWdhcy1nb2xkZW4ta25pZ2h0cyBpbWcsIC52ZWdhcy1nb2xkZW4ta25pZ2h0cyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2I3OTc1Yztcbn1cblxuI3N0YXRzLXRhYmxlIC53YXNoaW5ndG9uLWNhcGl0YWxzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjYwZDFiO1xufVxuXG4ud2FzaGluZ3Rvbi1jYXBpdGFscyBpbWcsIC53YXNoaW5ndG9uLWNhcGl0YWxzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTMwNjI4O1xufVxuXG4jc3RhdHMtdGFibGUgLndpbm5pcGVnLWpldHMge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMwOTFjMzI7XG59XG5cbi53aW5uaXBlZy1qZXRzIGltZywgLndpbm5pcGVnLWpldHMge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDJlNjM7XG59YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUdBO0lBQ0ksU0FBUztJQUNULFVBQVU7SUFDVixzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSx5QkFBeUI7SUFDekIsc0JBQXNCO0lBQ3RCLG1CQUFtQjtJQUNuQixtQkFBbUI7SUFDbkIsbUJBQW1CO0lBQ25CLG1CQUFtQjtJQUNuQixrQkFBa0I7SUFDbEIscUJBQXFCO0lBQ3JCLHVCQUF1QjtJQUN2Qix5QkFBeUI7SUFDekIscUJBQXFCO0lBQ3JCLHFCQUFxQjtJQUNy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QUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgdXJsKCdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PUVwaWxvZ3VlOml0YWwsd2dodEAwLDEwMDswLDIwMDswLDMwMDswLDQwMDswLDUwMDswLDYwMDswLDcwMDswLDgwMDswLDkwMDsxLDEwMDsxLDIwMDsxLDMwMDsxLDQwMDsxLDUwMDsxLDYwMDsxLDcwMDsxLDgwMDsxLDkwMCZmYW1pbHk9SW50ZXI6d2dodEAxMDA7MjAwOzMwMDs0MDA7NTAwOzYwMDs3MDA7ODAwOzkwMCZmYW1pbHk9T3JiaXRyb246d2dodEA0MDA7NTAwOzYwMDs3MDA7ODAwOzkwMCZmYW1pbHk9U2ludG9ueTp3Z2h0QDQwMDs3MDAmZGlzcGxheT1zd2FwJyk7XFxuQGltcG9ydCAgXFxcInRhYnVsYXRvci10YWJsZXNcXFwiO1xcblxcbioge1xcbiAgICBtYXJnaW46IDA7XFxuICAgIHBhZGRpbmc6IDA7XFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbjpyb290IHtcXG4gICAgLS1naWdhbnRpYy10ZXh0OiA0Ljc2OHJlbTtcXG4gICAgLS1qdW1iby10ZXh0OiAzLjgxNXJlbTtcXG4gICAgLS1oMS10ZXh0OiAzLjA1MnJlbTtcXG4gICAgLS1oMi10ZXh0OiAyLjQ0MXJlbTtcXG4gICAgLS1oMy10ZXh0OiAxLjk1M3JlbTtcXG4gICAgLS1oNC10ZXh0OiAxLjU2M3JlbTtcXG4gICAgLS1oNS10ZXh0OiAxLjI1cmVtO1xcbiAgICAtLXNtYWxsLXRleHQ6IDAuNzJyZW07XFxuICAgIC0tc21hbGxlci10ZXh0OiAwLjY0cmVtO1xcbiAgICAtLXNtYWxsZXN0LXRleHQ6IDAuNTEycmVtO1xcbiAgICAtLW1haW4tY29sb3I6ICNjMTA4Mjg7XFxuICAgIC0tdGV4dC1jb2xvcjogIzBkMDYwNztcXG4gICAgLS1kYXJrLWNvbG9yOiAjMmIyYjJiO1xcbiAgICAtLXRoaXJkLWNvbG9yOiAjYjllOTM3O1xcbiAgICAtLXJlZC1jb2xvcjogI2I5MDAwMDtcXG59XFxuXFxuaHRtbCB7XFxuICAgIGZvbnQtc2l6ZTogMTAwJTtcXG4gICAgc2Nyb2xsLWJlaGF2aW9yOiBzbW9vdGg7XFxufVxcblxcbmJvZHkge1xcbiAgICBmb250LWZhbWlseTogJ1NpbnRvbnknLCBzYW5zLXNlcmlmO1xcbiAgICBmb250LXdlaWdodDogNDAwO1xcbiAgICBjb2xvcjogd2hpdGU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWRhcmstY29sb3IpO1xcbn1cXG5cXG5hIHtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG5idXR0b24ge1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbnAge21hcmdpbi1ib3R0b206IDFyZW07fVxcblxcbmgxLCBoMiwgaDMsIGg0LCBoNSB7XFxuICBtYXJnaW46IDNyZW0gMCAxLjM4cmVtO1xcbiAgZm9udC13ZWlnaHQ6IDcwMDtcXG4gIGxpbmUtaGVpZ2h0OiAxO1xcbn1cXG5cXG5oMSB7XFxuICBtYXJnaW4tdG9wOiAwO1xcbiAgZm9udC1zaXplOiB2YXIoLS1oMS10ZXh0KTtcXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XFxuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xcbn1cXG5cXG5oMiB7Zm9udC1zaXplOiB2YXIoLS1oMi10ZXh0KTt9XFxuXFxuaDMge2ZvbnQtc2l6ZTogdmFyKC0taDMtdGV4dCk7fVxcblxcbmg0IHtmb250LXNpemU6IHZhcigtLWg0LXRleHQpO31cXG5cXG5oNSB7Zm9udC1zaXplOiB2YXIoLS1oNS10ZXh0KTt9XFxuXFxuLm1hdGVyaWFsLXN5bWJvbHMtb3V0bGluZWQge1xcbiAgZm9udC12YXJpYXRpb24tc2V0dGluZ3M6XFxuICAnRklMTCcgMCxcXG4gICd3Z2h0JyA0MDAsXFxuICAnR1JBRCcgMCxcXG4gICdvcHN6JyAyNFxcbn1cXG5cXG51bCB7bGlzdC1zdHlsZS10eXBlOiBub25lO31cXG5cXG5hIHtcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbiAgICBjb2xvcjogaW5oZXJpdDtcXG59XFxuXFxuLmhlYWRlciB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBiYWNrZ3JvdW5kOiByZ2IoMTMsNiw3KTtcXG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDE4MGRlZywgcmdiYSgxMyw2LDcsMSkgMCUsIHJnYmEoMTkzLDgsNDAsMSkgMTAwJSk7XFxufVxcblxcbi5oZWFkZXJfX2xvZ28ge1xcbiAgICBoZWlnaHQ6IGF1dG87XFxuICAgIHdpZHRoOiAxMDBweDtcXG59XFxuXFxuLmRpdmlkZXIge1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIG1hcmdpbi10b3A6IDEwcHg7XFxuICAgIHdpZHRoOiAxNTBweDtcXG4gICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkIHdoaXRlO1xcbn1cXG5cXG4uaGVhZGVyX190aXRsZSB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBoZWlnaHQ6IDE1MHB4O1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgZ2FwOiAxNXB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAyMDViO1xcbn1cXG5cXG4uaGVhZGVyX190aXRsZV9fdGV4dCB7XFxuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XFxuICAgIGZvbnQtd2VpZ2h0OiA5MDA7XFxuICAgIGZvbnQtc2l6ZTogdmFyKC0taDEtdGV4dCk7XFxuICAgIGZvbnQtZmFtaWx5OiAnSW50ZXInLCBzYW5zLXNlcmlmO1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIHdpZHRoOiAyNTBweDtcXG59XFxuXFxuLmhlYWRlcl9fYmFkZ2Uge1xcbiAgICB3aWR0aDogLXdlYmtpdC1maWxsLWF2YWlsYWJsZTtcXG4gICAgYmFja2dyb3VuZDogcmdiKDAsMzIsOTEpO1xcbiAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCByZ2JhKDAsMzIsOTEsMSkgMCUsIHJnYmEoMCwwLDAsMSkgMTAwJSk7XFxufVxcblxcbi5oZWFkZXJfX3N0YXRzLXNlY3Rpb24ge1xcbiAgICB3aWR0aDogLXdlYmtpdC1maWxsLWF2YWlsYWJsZTtcXG4gICAgbWFyZ2luOiAxNXB4IDI1cHggNDBweCAyNXB4O1xcbn1cXG5cXG4uaGVhZGVyX19zdGF0cy1zZWN0aW9uX19saXN0X19pdGVtX19sb2dvIHtcXG4gICAgd2lkdGg6IDUwcHg7XFxuICAgIGhlaWdodDogYXV0bztcXG59XFxuXFxuXFxuLmhlYWRlcl9fc3RhdHMtc2VjdGlvbl9fdG9wLXNlY3Rpb24ge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcXG4gICAgbWFyZ2luLWJvdHRvbTogMjVweDtcXG4gICAgbWFyZ2luLXRvcDogMjVweDtcXG59XFxuXFxuLnNlY3Rpb24tdGl0bGUgPiBzcGFuIHtcXG4gICAgZm9udC1zaXplOiB2YXIoLS1oNC10ZXh0KTtcXG4gICAgZm9udC1mYW1pbHk6ICdTaW50b255Jywgc2Fucy1zZXJpZjtcXG4gICAgZm9udC13ZWlnaHQ6IDcwMDtcXG59XFxuXFxuLmhlYWRlcl9fc3RhdHMtc2VjdGlvbi10b3Age1xcbiAgICBwYWRkaW5nLXRvcDogMTBweDtcXG59XFxuXFxuLmhlYWRlcl9fc3RhdHMtc2VjdGlvbl9fdG9wIHtcXG4gICAgY29sb3I6IHdoaXRlO1xcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xcbiAgICBmb250LXdlaWdodDogNzAwO1xcbiAgICBmb250LXNpemU6IHZhcigtLXNtYWxsZXItdGV4dCk7XFxufVxcblxcbi5zdGF0cy1yZXN1bHRzIHtcXG4gICAgY29sb3I6IHdoaXRlO1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIGZvbnQtc2l6ZTogdmFyKC0taDEtdGV4dCk7XFxuICAgIGZvbnQtd2VpZ2h0OiA3MDA7XFxufVxcblxcbi5wYXJ0aWNpcGF0aW9uIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZ2FwOiAxNXB4O1xcbiAgICBwYWRkaW5nOiAxMHB4O1xcbn1cXG5cXG4udGVhbS1sb2dvIHtcXG4gICAgd2lkdGg6IDQwcHg7XFxuICAgIGhlaWdodDogYXV0bztcXG59XFxuXFxuLnRhYnVsYXRvciB7XFxuICAgIGJvcmRlci1jb2xvcjogI2M1YzVjNTtcXG5cXG59XFxuXFxuLmhlYWRlcl9fc3RhdHMtc2VjdGlvbi1taWRkbGUge1xcbiAgICBwYWRkaW5nLWJvdHRvbTogNXB4O1xcbiAgICBwYWRkaW5nLXRvcDogMTVweDtcXG59XFxuXFxuLmhlYWRlcl9fc3RhdHMtc2VjdGlvLWJvdHRvbS1zZWN0aW9uIHtcXG4gICAgbWFyZ2luLXRvcDogMjVweDtcXG59XFxuXFxuLmhlYWRlcl9fc3RhdHMtc2VjdGlvLWJvdHRvbS1zZWN0aW9uIC5kaXZpZGVyIHtcXG4gICAgd2lkdGg6IDIwMHB4O1xcbn1cXG5cXG4jc3RhdHMtdGFibGUge1xcbiAgICBtYXJnaW4tYm90dG9tOiAzNXB4O1xcbiAgICBtYXJnaW4tdG9wOiAzNXB4O1xcbn1cXG5cXG4jc3RhdHMtdGFibGUgLnRhYnVsYXRvci1jZWxsW3RhYnVsYXRvci1maWVsZD1cXFwiZXF1aXBlXFxcIl0ge1xcbiAgICBmb250LXNpemU6IHZhcigtLXNtYWxsLXRleHQpO1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyLFxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wge1xcbiAgICBib3JkZXItY29sb3I6ICNjNWM1YzU7XFxuICAgIGNvbG9yOiAjZGZkZmRmO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMGEwYTBhO1xcbiAgICBmb250LXdlaWdodDogNjAwO1xcbn1cXG5cXG4udGFidWxhdG9yIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sIHtcXG4gICAgaGVpZ2h0OiA0MHB4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG59XFxuXFxuI3N0YXRzLXRhYmxlIC50YWJ1bGF0b3ItY2VsbCB7XFxuICAgIGdhcDogMTVweDtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgY29sb3I6I2ZmZjtcXG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcXG59XFxuXFxuI3N0YXRzLXRhYmxlIC50YWJ1bGF0b3ItY2VsbCA+IGRpdiB7XFxuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XFxufVxcblxcbiNzdGF0cy10YWJsZSAudGFidWxhdG9yLWNlbGwgPiBpbWcge1xcbiAgICB3aWR0aDogYXV0bztcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICBwYWRkaW5nLWxlZnQ6IDVweDtcXG4gICAgcGFkZGluZy1yaWdodDogNXB4O1xcbn1cXG5cXG4udGFidWxhdG9yLWNlbGwgPiBpbWcge1xcbiAgICB3aWR0aDogYXV0bztcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbn1cXG5cXG4vKlRoZW1lIHRoZSBUYWJ1bGF0b3IgZWxlbWVudCovXFxuI3BpY2stdGFibGUge1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjYzVjNWM1O1xcbn1cXG5cXG4vKlRoZW1lIHRoZSBoZWFkZXIqL1xcbi50YWJ1bGF0b3ItaGVhZGVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjojMWQxOTFhO1xcbiAgICBjb2xvcjojZmZmO1xcbn1cXG5cXG4vKkFsbG93IGNvbHVtbiBoZWFkZXIgbmFtZXMgdG8gd3JhcCBsaW5lcyovXFxuI3BpY2stdGFibGUgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wsXFxuI3BpY2stdGFibGUgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1jb2wtcm93LWhhbmRsZSB7XFxuICAgIHdoaXRlLXNwYWNlOiBub3JtYWw7XFxufVxcblxcbi8qQ29sb3IgdGhlIHRhYmxlIHJvd3MgYmFzZSBvbiBwbGF5ZXIgbmFtZSovXFxuI3BpY2stdGFibGUgLnRhYnVsYXRvci10YWJsZSAudGFidWxhdG9yLXJvdy5hLXBsYXllciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7XFxufVxcblxcbiNwaWNrLXRhYmxlIC50YWJ1bGF0b3ItdGFibGUgLnRhYnVsYXRvci1yb3cuYW5vdGhlci1wbGF5ZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGJkYmRiO1xcbn1cXG5cXG4jcGljay10YWJsZSAudGFidWxhdG9yLWNlbGxbdGFidWxhdG9yLWZpZWxkPVxcXCJqb3VldXJcXFwiXSB7XFxuICAgIGZvbnQtc2l6ZTogdmFyKC0tc21hbGwtdGV4dCk7XFxufVxcblxcbi8qIENvbG9yIHRoZSBib3JkZXIgY2VsbHMgKi9cXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwge1xcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2M1YzVjNTtcXG59XFxuXFxuI3N0YXRzLXRhYmxlIC50YWJ1bGF0b3Itcm93IC50YWJ1bGF0b3ItY2VsbDpsYXN0LW9mLXR5cGUsXFxuI3N0YXRzLXRhYmxlIC50YWJ1bGF0b3ItaGVhZGVyIC50YWJ1bGF0b3ItY29sOmxhc3Qtb2YtdHlwZSB7XFxuICAgIGJvcmRlci1yaWdodDogbm9uZTtcXG59XFxuXFxuI3N0YXRzLXRhYmxlIC50YWJ1bGF0b3Itcm93Omxhc3Qtb2YtdHlwZSAudGFidWxhdG9yLWNlbGwge1xcbiAgICBib3JkZXItYm90dG9tOiBub25lO1xcbn1cXG5cXG4udGFidWxhdG9yLXJvdyAudGFidWxhdG9yLWNlbGwudGFidWxhdG9yLWZyb3plbi50YWJ1bGF0b3ItZnJvemVuLXJpZ2h0LFxcbi50YWJ1bGF0b3IgLnRhYnVsYXRvci1oZWFkZXIgLnRhYnVsYXRvci1mcm96ZW4udGFidWxhdG9yLWZyb3plbi1yaWdodCB7XFxuICAgIGJvcmRlci1sZWZ0OiAxcHg7XFxufVxcblxcbi5ncmF5c2NhbGUtZWZmZWN0IHtcXG4gICAgZmlsdGVyOiBncmF5c2NhbGUoMTAwJSk7XFxuICB9XFxuLyogTkhMIFRFQU1TIENPTE9SICovXFxuI3N0YXRzLXRhYmxlIC5hbmFoZWltLWR1Y2tzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzU1NDcyZDtcXG59XFxuXFxuLmFuYWhlaW0tZHVja3MgaW1nLCAuYW5haGVpbS1kdWNrcyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNiNjk4NWE7XFxufVxcblxcbiNzdGF0cy10YWJsZSAuYXJpem9uYS1jb3lvdGVzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzM5MGIxODtcXG59XFxuXFxuLmFyaXpvbmEtY295b3RlIGltZywgLmFyaXpvbmEtY295b3RlcyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM3YTAwMjI7XFxufVxcblxcbiNzdGF0cy10YWJsZSAuYm9zdG9uLWJydWlucyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNiNDg1MTg7XFxufVxcblxcbi5ib3N0b24tYnJ1aW5zIGltZywgLmJvc3Rvbi1icnVpbnMge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmRiOTFlO1xcbn1cXG5cXG4jc3RhdHMtdGFibGUgLmJ1ZmZhbG8tc2FicmVzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzBhMWM0MDtcXG59XFxuXFxuLmJ1ZmZhbG8tc2FicmVzIGltZywgLmJ1ZmZhbG8tc2FicmVzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAyMzA4OTtcXG59XFxuXFxuI3N0YXRzLXRhYmxlIC5jYWxnYXJ5LWZsYW1lcyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM2ODExMWU7XFxufVxcblxcbi5jYWxnYXJ5LWZsYW1lcyBpbWcsIC5jYWxnYXJ5LWZsYW1lcyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlMzBhMmI7XFxufVxcblxcbiNzdGF0cy10YWJsZSAuY2Fyb2xpbmEtaHVycmljYW5lcyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM4YzI2MjY7XFxufVxcblxcbi5jYXJvbGluYS1odXJyaWNhbmVzIGltZywgLmNhcm9saW5hLWh1cnJpY2FuZXMge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYzgxMDJlO1xcbn1cXG5cXG4jc3RhdHMtdGFibGUgLmNoaWNhZ28tYmxhY2toYXdrcyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM2NzBlMWM7XFxufVxcblxcbi5jaGljYWdvLWJsYWNraGF3a3MgaW1nLCAuY2hpY2Fnby1ibGFja2hhd2tzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2UzMDgyOTtcXG59XFxuXFxuI3N0YXRzLXRhYmxlIC5jb2xvcmFkby1hdmFsYW5jaGUge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMmYxMjE0O1xcbn1cXG5cXG4uY29sb3JhZG8tYXZhbGFuY2hlIGltZywgLmNvbG9yYWRvLWF2YWxhbmNoZSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM2ZjI2M2Q7XFxufVxcblxcbiNzdGF0cy10YWJsZSAuY29sdW1idXMtYmx1ZS1qYWNrZXRzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzA5MWMzMjtcXG59XFxuXFxuLmNvbHVtYnVzLWJsdWUtamFja2V0cyBpbWcsIC5jb2x1bWJ1cy1ibHVlLWphY2tldHMge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDMyZDY1O1xcbn1cXG5cXG4jc3RhdHMtdGFibGUgLmRhbGxhcy1zdGFycyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMxNzQyMzM7XFxufVxcblxcbi5kYWxsYXMtc3RhcnMgaW1nLCAuZGFsbGFzLXN0YXJzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwNzA0YTtcXG59XFxuXFxuI3N0YXRzLXRhYmxlIC5kZXRyb2l0LXJlZC13aW5ncyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM2NDBjMTg7XFxufVxcblxcbi5kZXRyb2l0LXJlZC13aW5ncyBpbWcsIC5kZXRyb2l0LXJlZC13aW5ncyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlMzA1MjQ7XFxufVxcblxcbiNzdGF0cy10YWJsZSAuZWRtb250b24tb2lsZXJzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMTEzMTtcXG59XFxuXFxuLmVkbW9udG9uLW9pbGVycyBpbWcsIC5lZG1vbnRvbi1vaWxlcnMge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAyMDViO1xcbn1cXG5cXG4jc3RhdHMtdGFibGUgLmZsb3JpZGEtcGFudGhlcnMge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjOTIwYjIxO1xcbn1cXG5cXG4uZmxvcmlkYS1wYW50aGVycyBpbWcsIC5mbG9yaWRhLXBhbnRoZXJzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2M4MTAyZTtcXG59XFxuXFxuI3N0YXRzLXRhYmxlIC5zZWF0dGxlLWtyYWtlbiB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwYTEwMWU7XFxufVxcblxcbi5zZWF0dGxlLWtyYWtlbiBpbWcsIC5zZWF0dGxlLWtyYWtlbiB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDBmMzI7XFxufVxcblxcbiNzdGF0cy10YWJsZSAubG9zLWFuZ2VsZXMta2luZ3Mge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNWI1YjVkO1xcbn1cXG5cXG4ubG9zLWFuZ2VsZXMta2luZ3MgaW1nLCAubG9zLWFuZ2VsZXMta2luZ3Mge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYjFiNmJhO1xcbn1cXG5cXG4jc3RhdHMtdGFibGUgLm1pbm5lc290YS13aWxkIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMjIxNztcXG59XFxuXFxuLm1pbm5lc290YS13aWxkIGltZywgLm1pbm5lc290YS13aWxkIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAyNTczNjtcXG59XFxuXFxuI3N0YXRzLXRhYmxlIC5tb250cmVhbC1jYW5hZGllbnMge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNTcwZDFhO1xcbn1cXG5cXG4ubW9udHJlYWwtY2FuYWRpZW5zIGltZywgLm1vbnRyZWFsLWNhbmFkaWVucyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNjMjA4Mjg7XFxufVxcblxcbiNzdGF0cy10YWJsZSAubmFzaHZpbGxlLXByZWRhdG9ycyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM3MTU0MWE7XFxufVxcblxcbi5uYXNodmlsbGUtcHJlZGF0b3JzIGltZywgLm5hc2h2aWxsZS1wcmVkYXRvcnMge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmRiNjIzO1xcbn1cXG5cXG4jc3RhdHMtdGFibGUgLm5ldy1qZXJzZXktZGV2aWxzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzY0MGMxODtcXG59XFxuXFxuLm5ldy1qZXJzZXktZGV2aWxzIGltZywgLm5ldy1qZXJzZXktZGV2aWxzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2UxMDYyMztcXG59XFxuXFxuI3N0YXRzLXRhYmxlIC5uZXcteW9yay1pc2xhbmRlcnMge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMGIyNjQzO1xcbn1cXG5cXG4ubmV3LXlvcmstaXNsYW5kZXJzIGltZywgLm5ldy15b3JrLWlzbGFuZGVycyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDQ3OGM7XFxufVxcblxcbiNzdGF0cy10YWJsZSAubmV3LXlvcmstcmFuZ2VycyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMxODM4NTk7XFxufVxcblxcbi5uZXcteW9yay1yYW5nZXJzIGltZywgLm5ldy15b3JrLXJhbmdlcnMge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA1NmE4O1xcbn1cXG5cXG4jc3RhdHMtdGFibGUgLm90dGF3YS1zZW5hdG9ycyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM2NTBjMTk7XFxufVxcblxcbi5vdHRhd2Etc2VuYXRvcnMgaW1nLCAub3R0YXdhLXNlbmF0b3JzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2UzMDUyNjtcXG59XFxuXFxuI3N0YXRzLXRhYmxlIC5waGlsYWRlbHBoaWEtZmx5ZXJzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzZmMjkwYjtcXG59XFxuXFxuLnBoaWxhZGVscGhpYS1mbHllcnMgaW1nLCAucGhpbGFkZWxwaGlhLWZseWVycyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmYzRjMDI7XFxufVxcblxcbiNzdGF0cy10YWJsZSAucGl0dHNidXJnaC1wZW5ndWlucyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMxYjFiMWM7XFxufVxcblxcbi5waXR0c2J1cmdoLXBlbmd1aW5zIGltZywgLnBpdHRzYnVyZ2gtcGVuZ3VpbnMge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMGUwZTBmO1xcbn1cXG5cXG4jc3RhdHMtdGFibGUgLnNhbi1qb3NlLXNoYXJrcyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwYTM2M2Q7XFxufVxcblxcbi5zYW4tam9zZS1zaGFya3MgaW1nLCAuc2FuLWpvc2Utc2hhcmtzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwNmQ4MDtcXG59XFxuXFxuI3N0YXRzLXRhYmxlIC5zdC1sb3Vpcy1ibHVlcyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMxODFhMzk7XFxufVxcblxcbi5zdC1sb3Vpcy1ibHVlcyBpbWcsIC5zdC1sb3Vpcy1ibHVlcyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDMwODc7XFxufVxcblxcbiNzdGF0cy10YWJsZSAudGFtcGEtYmF5LWxpZ2h0bmluZyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwYzBlMjQ7XFxufVxcblxcbi50YW1wYS1iYXktbGlnaHRuaW5nIGltZywgLnRhbXBhLWJheS1saWdodG5pbmcge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAyMDViO1xcbn1cXG5cXG4jc3RhdHMtdGFibGUgLnRvcm9udG8tbWFwbGUtbGVhZnMge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTUxNzIyO1xcbn1cXG5cXG4udG9yb250by1tYXBsZS1sZWFmcyBpbWcsIC50b3JvbnRvLW1hcGxlLWxlYWZzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMjA1YjtcXG59XFxuXFxuI3N0YXRzLXRhYmxlIC52YW5jb3V2ZXItY2FudWNrcyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwOTFkMmU7XFxufVxcblxcbi52YW5jb3V2ZXItY2FudWNrcyBpbWcsIC52YW5jb3V2ZXItY2FudWNrcyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMTJkNTM7XFxufVxcblxcbiNzdGF0cy10YWJsZSAudmVnYXMtZ29sZGVuLWtuaWdodHMge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNTM0NzJkO1xcbn1cXG5cXG4udmVnYXMtZ29sZGVuLWtuaWdodHMgaW1nLCAudmVnYXMtZ29sZGVuLWtuaWdodHMge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYjc5NzVjO1xcbn1cXG5cXG4jc3RhdHMtdGFibGUgLndhc2hpbmd0b24tY2FwaXRhbHMge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjYwZDFiO1xcbn1cXG5cXG4ud2FzaGluZ3Rvbi1jYXBpdGFscyBpbWcsIC53YXNoaW5ndG9uLWNhcGl0YWxzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2UzMDYyODtcXG59XFxuXFxuI3N0YXRzLXRhYmxlIC53aW5uaXBlZy1qZXRzIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzA5MWMzMjtcXG59XFxuXFxuLndpbm5pcGVnLWpldHMgaW1nLCAud2lubmlwZWctamV0cyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDJlNjM7XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSBbW1wiYm9zdG9uIGJydWluc1wiLFwiMFwiLFwiQm9zdG9uIEJydWluc1wiXSxbXCJsb3MgYW5nZWxlcyBraW5nc1wiLFwiMFwiLFwiTG9zIEFuZ2VsZXMgS2luZ3NcIl0sW1widmFuY291dmVyIGNhbnVja3NcIixcIjBcIixcIlZhbmNvdXZlciBDYW51Y2tzXCJdLFtcImNvbG9yYWRvIGF2YWxhbmNoZVwiLFwiMFwiLFwiQ29sb3JhZG8gQXZhbGFuY2hlXCJdLFtcIm5ldyB5b3JrIGlzbGFuZGVyc1wiLFwiMFwiLFwiTmV3IFlvcmsgSXNsYW5kZXJzXCJdLFtcIm90dGF3YSBzZW5hdG9yc1wiLFwiMFwiLFwiT3R0YXdhIFNlbmF0b3JzXCJdLFtcInRhbXBhIGJheSBsaWdodG5pbmdcIixcIjBcIixcIlRhbXBhIEJheSBMaWdodG5pbmdcIl0sW1wiZGV0cm9pdCByZWQgd2luZ3NcIixcIjBcIixcIkRldHJvaXQgUmVkIFdpbmdzXCJdLFtcInBpdHRzYnVyZ2ggcGVuZ3VpbnNcIixcIjBcIixcIlBpdHRzYnVyZ2ggUGVuZ3VpbnNcIl0sW1wiYnVmZmFsbyBzYWJyZXNcIixcIjBcIixcIkJ1ZmZhbG8gU2FicmVzXCJdLFtcImRhbGxhcyBzdGFyc1wiLFwiMFwiLFwiRGFsbGFzIFN0YXJzXCJdLFtcImNhcm9saW5hIGh1cnJpY2FuZXNcIixcIjBcIixcIkNhcm9saW5hIEh1cnJpY2FuZXNcIl0sW1wiY29sdW1idXMgYmx1ZSBqYWNrZXRzXCIsXCIwXCIsXCJDb2x1bWJ1cyBCbHVlIEphY2tldHNcIl0sW1wiZWRtb250b24gb2lsZXJzXCIsXCIwXCIsXCJFZG1vbnRvbiBPaWxlcnNcIl0sW1wibmV3IGplcnNleSBkZXZpbHNcIixcIjBcIixcIk5ldyBKZXJzZXkgRGV2aWxzXCJdLFtcImZsb3JpZGEgcGFudGhlcnNcIixcIjBcIixcIkZsb3JpZGEgUGFudGhlcnNcIl0sW1wibW9udHJlYWwgY2FuYWRpZW5zXCIsXCIwXCIsXCJNb250cmVhbCBDYW5hZGllbnNcIl0sW1wibmV3IHlvcmsgcmFuZ2Vyc1wiLFwiMFwiLFwiTmV3IFlvcmsgUmFuZ2Vyc1wiXSxbXCJwaGlsYWRlbHBoaWEgZmx5ZXJzXCIsXCIwXCIsXCJQaGlsYWRlbHBoaWEgRmx5ZXJzXCJdLFtcInRvcm9udG8gbWFwbGUgbGVhZnNcIixcIjBcIixcIlRvcm9udG8gTWFwbGUgTGVhZnNcIl0sW1wid2FzaGluZ3RvbiBjYXBpdGFsc1wiLFwiMFwiLFwiV2FzaGluZ3RvbiBDYXBpdGFsc1wiXSxbXCJhcml6b25hIGNveW90ZXNcIixcIjBcIixcIkFyaXpvbmEgQ295b3Rlc1wiXSxbXCJhbmFoZWltIGR1Y2tzXCIsXCIwXCIsXCJBbmFoZWltIER1Y2tzXCJdLFtcImNoaWNhZ28gYmxhY2toYXdrc1wiLFwiMFwiLFwiQ2hpY2FnbyBCbGFja2hhd2tzXCJdLFtcImNhbGdhcnkgZmxhbWVzXCIsXCIwXCIsXCJDYWxnYXJ5IEZsYW1lc1wiXSxbXCJzdC4gbG91aXMgYmx1ZXNcIixcIjBcIixcIlN0LkxvdWlzIEJsdWVzXCJdLFtcIm1pbm5lc290YSB3aWxkXCIsXCIwXCIsXCJNaW5uZXNvdGEgV2lsZFwiXSxbXCJzYW4gam9zZSBzaGFya3NcIixcIjBcIixcIlNhbiBKb3NlIFNoYXJrc1wiXSxbXCJuYXNodmlsbGUgcHJlZGF0b3JzXCIsXCIwXCIsXCJOYXNodmlsbGUgUHJlZGF0b3JzXCJdLFtcInNlYXR0bGUga3Jha2VuXCIsXCIwXCIsXCJTZWF0dGxlIEtyYWtlblwiXSxbXCJ3aW5uaXBlZyBqZXRzXCIsXCIwXCIsXCJXaW5uaXBlZyBKZXRzXCJdLFtcInZlZ2FzIGdvbGRlbiBrbmlnaHRzXCIsXCIwXCIsXCJWZWdhcyBHb2xkZW4gS25pZ2h0c1wiXV0iLCJtb2R1bGUuZXhwb3J0cyA9IFtbXCJ3aW5cIixcIiNcIixcIkpvdWV1cnNcIixcIlNhbWVkaSAxMSBub3ZlbWJyZVwiLFwiU2FtZWRpIDE4IG5vdmVtYnJlXCIsXCJTYW1lZGkgMjUgbm92ZW1icmVcIixcIlNhbWVkaSAyIGTDqWNlbWJyZVwiLFwiU2FtZWRpIDkgZMOpY2VtYnJlXCIsXCJTYW1lZGkgMTYgZMOpY2VtYnJlXCJdLFtcIjFcIixcIlwiLFwiQ2hhcmxlcy1BbnRvaW5lIE1lc3NpZXJcIixcIkRldHJvaXQgUmVkIFdpbmdzXCIsXCJCb3N0b24gQnJ1aW5zXCIsXCJMb3MgQW5nZWxlcyBLaW5nc1wiLFwiQ29sb3JhZG8gQXZhbGFuY2hlXCIsXCJcIixcIlwiLFwiXCJdLFtcIjFcIixcIlwiLFwiRnJhbmNvaXMgVHJlbWJsYXlcIixcIkRldHJvaXQgUmVkIFdpbmdzXCIsXCJXYXNoaW5ndG9uIENhcGl0YWxzXCIsXCJDb2xvcmFkbyBBdmFsYW5jaGVcIixcIldpbm5pcGVnIEpldHNcIixcIlwiLFwiXCIsXCJcIl0sW1wiMVwiLFwiXCIsXCJMb3Vpcy0gQWxleGFuZHJlIEJlbGlzbGUgUm95XCIsXCJEZXRyb2l0IFJlZCBXaW5nc1wiLFwiQm9zdG9uIEJydWluc1wiLFwiTG9zIEFuZ2VsZXMgS2luZ3NcIixcIldpbm5pcGVnIEpldHNcIixcIlwiLFwiXCIsXCJcIl0sW1wiMVwiLFwiXCIsXCJNYXRoaWV1IExhY29tYmVcIixcIlBpdHRzYnVyZ2ggUGVuZ3VpbnNcIixcIldhc2hpbmd0b24gQ2FwaXRhbHNcIixcIkxvcyBBbmdlbGVzIEtpbmdzXCIsXCJXaW5uaXBlZyBKZXRzXCIsXCJcIixcIlwiLFwiXCJdLFtcIjFcIixcIlwiLFwiUGhpbGlwcGUgUmVpZFwiLFwiT3R0YXdhIFNlbmF0b3JzXCIsXCJCb3N0b24gQnJ1aW5zXCIsXCJMb3MgQW5nZWxlcyBLaW5nc1wiLFwiQ2Fyb2xpbmEgSHVycmljYW5lc1wiLFwiXCIsXCJcIixcIlwiXSxbXCIxXCIsXCJcIixcIlZpbmNlbnQgTcOpbmFyZFwiLFwiQXJpem9uYSBDb3lvdGVzXCIsXCJXYXNoaW5ndG9uIENhcGl0YWxzXCIsXCJDb2xvcmFkbyBBdmFsYW5jaGVcIixcIkZsb3JpZGEgUGFudGhlcnNcIixcIlwiLFwiXCIsXCJcIl0sW1wiMVwiLFwiXCIsXCJWaW5jZW50IE1lc2xhZ2VcIixcIk90dGF3YSBTZW5hdG9yc1wiLFwiV2FzaGluZ3RvbiBDYXBpdGFsc1wiLFwiTG9zIEFuZ2VsZXMgS2luZ3NcIixcIldpbm5pcGVnIEpldHNcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJDaGFybGVzIEp1dHJhc1wiLFwiT3R0YXdhIFNlbmF0b3JzXCIsXCJCb3N0b24gQnJ1aW5zXCIsXCJWZWdhcyBHb2xkZW4gS25pZ2h0c1wiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiTWF4aW1lIExvcmFuZ2VyXCIsXCJEZXRyb2l0IFJlZCBXaW5nc1wiLFwiQm9zdG9uIEJydWluc1wiLFwiVmFuY291dmVyIENhbnVja3NcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIk9saXZpZXIgVHJlbWJsYXlcIixcIkRhbGxhcyBTdGFyc1wiLFwiV2FzaGluZ3RvbiBDYXBpdGFsc1wiLFwiVmFuY291dmVyIENhbnVja3NcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIlBhdHJpY2sgTG9yYW5nZXJcIixcIlBpdHRzYnVyZ2ggUGVuZ3VpbnNcIixcIkJvc3RvbiBCcnVpbnNcIixcIlZlZ2FzIEdvbGRlbiBLbmlnaHRzXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJQaGlsaXBwZSBKdXRyYXNcIixcIk90dGF3YSBTZW5hdG9yc1wiLFwiQm9zdG9uIEJydWluc1wiLFwiVmVnYXMgR29sZGVuIEtuaWdodHNcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIlNlYmFzdGllbiBNZXNsYWdlXCIsXCJQaXR0c2J1cmdoIFBlbmd1aW5zXCIsXCJCb3N0b24gQnJ1aW5zXCIsXCJWYW5jb3V2ZXIgQ2FudWNrc1wiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiVsOpcm9uaXF1ZSBCaWxvZGVhdVwiLFwiUGl0dHNidXJnaCBQZW5ndWluc1wiLFwiQm9zdG9uIEJydWluc1wiLFwiVmVnYXMgR29sZGVuIEtuaWdodHNcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIlbDqXJvbmlxdWUgQmlsb2RlYXVcIixcIkRldHJvaXQgUmVkIFdpbmdzXCIsXCJXYXNoaW5ndG9uIENhcGl0YWxzXCIsXCJWYW5jb3V2ZXIgQ2FudWNrc1wiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiSm9uYXRoYW4gQ3JhYmV5XCIsXCJEZXRyb2l0IFJlZCBXaW5nc1wiLFwiVmFuY291dmVyIENhbnVja3NcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiSm9uYXRoYW4gUGVycmVhdWx0XCIsXCJQaXR0c2J1cmdoIFBlbmd1aW5zXCIsXCJWZWdhcyBHb2xkZW4gS25pZ2h0c1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJKb25hdGhhbiBQZXJyZWF1bHRcIixcIk90dGF3YSBTZW5hdG9yc1wiLFwiVmFuY291dmVyIENhbnVja3NcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiTWF0aGlldSBCbGFuY2hldHRlXCIsXCJPdHRhd2EgU2VuYXRvcnNcIixcIlZlZ2FzIEdvbGRlbiBLbmlnaHRzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIk1hdGhpZXUgTGFjb21iZVwiLFwiRGV0cm9pdCBSZWQgV2luZ3NcIixcIlZlZ2FzIEdvbGRlbiBLbmlnaHRzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIk1heGltIERhYW5lYXVcIixcIkRhbGxhcyBTdGFyc1wiLFwiVmVnYXMgR29sZGVuIEtuaWdodHNcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiUGF0cmljayBMb3JhbmdlclwiLFwiRWRtb250b24gT2lsZXJzXCIsXCJWZWdhcyBHb2xkZW4gS25pZ2h0c1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJTZWJhc3RpZW4gTWVzbGFnZVwiLFwiRGV0cm9pdCBSZWQgV2luZ3NcIixcIlZhbmNvdXZlciBDYW51Y2tzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIlNpbW9uIEjDqWJlcnRcIixcIlBpdHRzYnVyZ2ggUGVuZ3VpbnNcIixcIlZlZ2FzIEdvbGRlbiBLbmlnaHRzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIlZpbmNlbnQgTcOpbmFyZFwiLFwiRGFsbGFzIFN0YXJzXCIsXCJWZWdhcyBHb2xkZW4gS25pZ2h0c1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJWaW5jZW50IE3DqW5hcmRcIixcIk90dGF3YSBTZW5hdG9yc1wiLFwiVmVnYXMgR29sZGVuIEtuaWdodHNcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiVmluY2VudCBNw6luYXJkXCIsXCJQaXR0c2J1cmdoIFBlbmd1aW5zXCIsXCJWYW5jb3V2ZXIgQ2FudWNrc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJBbGJlcnQgRGFscMOpLU1lc3NpZXJcIixcIkJvc3RvbiBCcnVpbnNcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJBbGJlcnQgRGFscMOpLU1lc3NpZXJcIixcIkJvc3RvbiBCcnVpbnNcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJBbGJlcnQgRGFscMOpLU1lc3NpZXJcIixcIkxvcyBBbmdlbGVzIEtpbmdzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiQWxiZXJ0IERhbHDDqS1NZXNzaWVyXCIsXCJMb3MgQW5nZWxlcyBLaW5nc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIkFsYmVydCBEYWxww6ktTWVzc2llclwiLFwiVmFuY291dmVyIENhbnVja3NcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJCZXJuYXJkLU9saXZpZXIgR2lndWVyZVwiLFwiQ29sb3JhZG8gQXZhbGFuY2hlXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiQmVybmFyZC1PbGl2aWVyIEdpZ3VlcmVcIixcIkxvcyBBbmdlbGVzIEtpbmdzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiQmVybmFyZC1PbGl2aWVyIEdpZ3VlcmVcIixcIkJvc3RvbiBCcnVpbnNcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJCcnVubyBNYXJxdWV0dGVcIixcIk5ldyBZb3JrIElzbGFuZGVyc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIkJydW5vIE1hcnF1ZXR0ZVwiLFwiTG9zIEFuZ2VsZXMgS2luZ3NcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJCcnVubyBNYXJxdWV0dGVcIixcIkNvbG9yYWRvIEF2YWxhbmNoZVwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIkNlZHJpYyBEZW5pdmVydmlsbGVcIixcIkxvcyBBbmdlbGVzIEtpbmdzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiQ2VkcmljIERlbml2ZXJ2aWxsZVwiLFwiTG9zIEFuZ2VsZXMgS2luZ3NcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJDZWRyaWMgRGVuaXZlcnZpbGxlXCIsXCJCb3N0b24gQnJ1aW5zXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiQ2VkcmljIERlbml2ZXJ2aWxsZVwiLFwiQm9zdG9uIEJydWluc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIkNlZHJpYyBEZW5pdmVydmlsbGVcIixcIk5ldyBZb3JrIElzbGFuZGVyc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIkNoYXJsZXMgSnV0cmFzXCIsXCJMb3MgQW5nZWxlcyBLaW5nc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIkNoYXJsZXMgSnV0cmFzXCIsXCJMb3MgQW5nZWxlcyBLaW5nc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIkNoYXJsZXMgSnV0cmFzXCIsXCJOZXcgWW9yayBJc2xhbmRlcnNcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJDaGFybGVzIEp1dHJhc1wiLFwiQ29sb3JhZG8gQXZhbGFuY2hlXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiQ2hhcmxlcy1BbnRvaW5lIE1lc3NpZXJcIixcIlRhbXBhIEJheSBMaWdodG5pbmdcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJDaGFybGVzLUFudG9pbmUgTWVzc2llclwiLFwiQ29sb3JhZG8gQXZhbGFuY2hlXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiQ2hhcmxlcy1BbnRvaW5lIE1lc3NpZXJcIixcIkxvcyBBbmdlbGVzIEtpbmdzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiQ2hhcmxlcy1BbnRvaW5lIE1lc3NpZXJcIixcIkxvcyBBbmdlbGVzIEtpbmdzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiQ2xhdWRlLU9saXZpZXIgUGVycmVhdWx0XCIsXCJDb2xvcmFkbyBBdmFsYW5jaGVcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJDbGF1ZGUtT2xpdmllciBQZXJyZWF1bHRcIixcIkxvcyBBbmdlbGVzIEtpbmdzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiRnJhbmNpcyBEdWJvaXNcIixcIkNvbG9yYWRvIEF2YWxhbmNoZVwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIkZyYW5jaXMgRHVib2lzXCIsXCJCb3N0b24gQnJ1aW5zXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiRnJhbmNvaXMgR2F0aWVuXCIsXCJMb3MgQW5nZWxlcyBLaW5nc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIkZyYW5jb2lzIEdhdGllblwiLFwiTG9zIEFuZ2VsZXMgS2luZ3NcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJGcmFuY29pcyBHYXRpZW5cIixcIkJvc3RvbiBCcnVpbnNcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJGcmFuY29pcyBUcmVtYmxheVwiLFwiTmV3IFlvcmsgSXNsYW5kZXJzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiRnJhbmNvaXMgVHJlbWJsYXlcIixcIkxvcyBBbmdlbGVzIEtpbmdzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiSm9uYXRoYW4gQ3JhYmV5XCIsXCJCb3N0b24gQnJ1aW5zXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiSm9uYXRoYW4gQ3JhYmV5XCIsXCJMb3MgQW5nZWxlcyBLaW5nc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIkp1c3RpbiBMYWZyYW5jZVwiLFwiQ29sb3JhZG8gQXZhbGFuY2hlXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiSnVzdGluIExhZnJhbmNlXCIsXCJMb3MgQW5nZWxlcyBLaW5nc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIkpvbmF0aGFuIFBlcnJlYXVsdFwiLFwiTmV3IFlvcmsgSXNsYW5kZXJzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiSm9uYXRoYW4gUGVycmVhdWx0XCIsXCJMb3MgQW5nZWxlcyBLaW5nc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIkpvbmF0aGFuIFBlcnJlYXVsdFwiLFwiTG9zIEFuZ2VsZXMgS2luZ3NcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJKb25hdGhhbiBSaWNoYXJkXCIsXCJCb3N0b24gQnJ1aW5zXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiSm9uYXRoYW4gUmljaGFyZFwiLFwiTG9zIEFuZ2VsZXMgS2luZ3NcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJMb2ljIEJsYW5jaGV0dGVcIixcIkJvc3RvbiBCcnVpbnNcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJMb3Vpcy0gQWxleGFuZHJlIEJlbGlzbGUgUm95XCIsXCJCb3N0b24gQnJ1aW5zXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiTG91aXMtIEFsZXhhbmRyZSBCZWxpc2xlIFJveVwiLFwiTG9zIEFuZ2VsZXMgS2luZ3NcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJNYXRoaWV1IEJsYW5jaGV0dGVcIixcIkxvcyBBbmdlbGVzIEtpbmdzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiTWF0aGlldSBMYWNvbWJlXCIsXCJCb3N0b24gQnJ1aW5zXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiTWF0aGlldSBMYWNvbWJlXCIsXCJDb2xvcmFkbyBBdmFsYW5jaGVcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJNYXRoaWV1IExhY29tYmVcIixcIkxvcyBBbmdlbGVzIEtpbmdzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiTWF0aGlldSBMZWZlYnZyZVwiLFwiTG9zIEFuZ2VsZXMgS2luZ3NcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJNYXRoaWV1IExlZmVidnJlXCIsXCJMb3MgQW5nZWxlcyBLaW5nc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIk1hdGhpZXUgTGVmZWJ2cmVcIixcIk5ldyBZb3JrIElzbGFuZGVyc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIk1hdGhpZXUgTGVmZWJ2cmVcIixcIkJ1ZmZhbG8gU2FicmVzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiTWF0dGhpZXUgQXVnZXJcIixcIkxvcyBBbmdlbGVzIEtpbmdzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiTWF0dGhpZXUgQXVnZXJcIixcIkxvcyBBbmdlbGVzIEtpbmdzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiTWF0dGhpZXUgQXVnZXJcIixcIkNvbG9yYWRvIEF2YWxhbmNoZVwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIk1heGltZSBMb3JhbmdlclwiLFwiQ29sb3JhZG8gQXZhbGFuY2hlXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiTWF4aW1lIExvcmFuZ2VyXCIsXCJDb2xvcmFkbyBBdmFsYW5jaGVcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJNYXhpbWUgTG9yYW5nZXJcIixcIkxvcyBBbmdlbGVzIEtpbmdzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiTWF4aW1lIExvcmFuZ2VyXCIsXCJMb3MgQW5nZWxlcyBLaW5nc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIk9saXZpZXIgVHJlbWJsYXlcIixcIkxvcyBBbmdlbGVzIEtpbmdzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiUGF0cmljayBMb3JhbmdlclwiLFwiTmV3IFlvcmsgSXNsYW5kZXJzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiUGF0cmljayBMb3JhbmdlclwiLFwiQm9zdG9uIEJydWluc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIlBhdHJpY2sgTG9yYW5nZXJcIixcIkxvcyBBbmdlbGVzIEtpbmdzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiUGhpbGlwcGUgSnV0cmFzXCIsXCJCb3N0b24gQnJ1aW5zXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiUGhpbGlwcGUgSnV0cmFzXCIsXCJDb2xvcmFkbyBBdmFsYW5jaGVcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJQaGlsaXBwZSBKdXRyYXNcIixcIkxvcyBBbmdlbGVzIEtpbmdzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiUGhpbGlwcGUgSnV0cmFzXCIsXCJCb3N0b24gQnJ1aW5zXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiUGhpbGlwcGUgUmVpZFwiLFwiTmV3IFlvcmsgSXNsYW5kZXJzXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCJdLFtcIjBcIixcIlwiLFwiUGhpbGlwcGUgUmVpZFwiLFwiTG9zIEFuZ2VsZXMgS2luZ3NcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJSb3hhbmUgUHJvbm92b3N0XCIsXCJDb2xvcmFkbyBBdmFsYW5jaGVcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJTZWJhc3RpZW4gTWVzbGFnZVwiLFwiQm9zdG9uIEJydWluc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIlNpbW9uIEjDqWJlcnRcIixcIkNvbG9yYWRvIEF2YWxhbmNoZVwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIlZpbmNlbnQgRMOpY2FyaWVcIixcIkJvc3RvbiBCcnVpbnNcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJWaW5jZW50IETDqWNhcmllXCIsXCJMb3MgQW5nZWxlcyBLaW5nc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXSxbXCIwXCIsXCJcIixcIlZpbmNlbnQgTWVzbGFnZVwiLFwiTG9zIEFuZ2VsZXMgS2luZ3NcIixcIlwiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIl0sW1wiMFwiLFwiXCIsXCJWaW5jZW50IE1lc2xhZ2VcIixcIk5ldyBZb3JrIElzbGFuZGVyc1wiLFwiXCIsXCJcIixcIlwiLFwiXCIsXCJcIixcIlwiXV0iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBMb2Rhc2ggPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBDb3B5cmlnaHQgT3BlbkpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyA8aHR0cHM6Ly9vcGVuanNmLm9yZy8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cbjsoZnVuY3Rpb24oKSB7XG5cbiAgLyoqIFVzZWQgYXMgYSBzYWZlIHJlZmVyZW5jZSBmb3IgYHVuZGVmaW5lZGAgaW4gcHJlLUVTNSBlbnZpcm9ubWVudHMuICovXG4gIHZhciB1bmRlZmluZWQ7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIHNlbWFudGljIHZlcnNpb24gbnVtYmVyLiAqL1xuICB2YXIgVkVSU0lPTiA9ICc0LjE3LjIxJztcblxuICAvKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbiAgdmFyIExBUkdFX0FSUkFZX1NJWkUgPSAyMDA7XG5cbiAgLyoqIEVycm9yIG1lc3NhZ2UgY29uc3RhbnRzLiAqL1xuICB2YXIgQ09SRV9FUlJPUl9URVhUID0gJ1Vuc3VwcG9ydGVkIGNvcmUtanMgdXNlLiBUcnkgaHR0cHM6Ly9ucG1zLmlvL3NlYXJjaD9xPXBvbnlmaWxsLicsXG4gICAgICBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbicsXG4gICAgICBJTlZBTElEX1RFTVBMX1ZBUl9FUlJPUl9URVhUID0gJ0ludmFsaWQgYHZhcmlhYmxlYCBvcHRpb24gcGFzc2VkIGludG8gYF8udGVtcGxhdGVgJztcblxuICAvKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG4gIHZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuICAvKiogVXNlZCBhcyB0aGUgbWF4aW11bSBtZW1vaXplIGNhY2hlIHNpemUuICovXG4gIHZhciBNQVhfTUVNT0laRV9TSVpFID0gNTAwO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBpbnRlcm5hbCBhcmd1bWVudCBwbGFjZWhvbGRlci4gKi9cbiAgdmFyIFBMQUNFSE9MREVSID0gJ19fbG9kYXNoX3BsYWNlaG9sZGVyX18nO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNsb25pbmcuICovXG4gIHZhciBDTE9ORV9ERUVQX0ZMQUcgPSAxLFxuICAgICAgQ0xPTkVfRkxBVF9GTEFHID0gMixcbiAgICAgIENMT05FX1NZTUJPTFNfRkxBRyA9IDQ7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG4gIHZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBmdW5jdGlvbiBtZXRhZGF0YS4gKi9cbiAgdmFyIFdSQVBfQklORF9GTEFHID0gMSxcbiAgICAgIFdSQVBfQklORF9LRVlfRkxBRyA9IDIsXG4gICAgICBXUkFQX0NVUlJZX0JPVU5EX0ZMQUcgPSA0LFxuICAgICAgV1JBUF9DVVJSWV9GTEFHID0gOCxcbiAgICAgIFdSQVBfQ1VSUllfUklHSFRfRkxBRyA9IDE2LFxuICAgICAgV1JBUF9QQVJUSUFMX0ZMQUcgPSAzMixcbiAgICAgIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHID0gNjQsXG4gICAgICBXUkFQX0FSWV9GTEFHID0gMTI4LFxuICAgICAgV1JBUF9SRUFSR19GTEFHID0gMjU2LFxuICAgICAgV1JBUF9GTElQX0ZMQUcgPSA1MTI7XG5cbiAgLyoqIFVzZWQgYXMgZGVmYXVsdCBvcHRpb25zIGZvciBgXy50cnVuY2F0ZWAuICovXG4gIHZhciBERUZBVUxUX1RSVU5DX0xFTkdUSCA9IDMwLFxuICAgICAgREVGQVVMVF9UUlVOQ19PTUlTU0lPTiA9ICcuLi4nO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBob3QgZnVuY3Rpb25zIGJ5IG51bWJlciBvZiBjYWxscyB3aXRoaW4gYSBzcGFuIG9mIG1pbGxpc2Vjb25kcy4gKi9cbiAgdmFyIEhPVF9DT1VOVCA9IDgwMCxcbiAgICAgIEhPVF9TUEFOID0gMTY7XG5cbiAgLyoqIFVzZWQgdG8gaW5kaWNhdGUgdGhlIHR5cGUgb2YgbGF6eSBpdGVyYXRlZXMuICovXG4gIHZhciBMQVpZX0ZJTFRFUl9GTEFHID0gMSxcbiAgICAgIExBWllfTUFQX0ZMQUcgPSAyLFxuICAgICAgTEFaWV9XSElMRV9GTEFHID0gMztcblxuICAvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbiAgdmFyIElORklOSVRZID0gMSAvIDAsXG4gICAgICBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MSxcbiAgICAgIE1BWF9JTlRFR0VSID0gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDgsXG4gICAgICBOQU4gPSAwIC8gMDtcblxuICAvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB0aGUgbWF4aW11bSBsZW5ndGggYW5kIGluZGV4IG9mIGFuIGFycmF5LiAqL1xuICB2YXIgTUFYX0FSUkFZX0xFTkdUSCA9IDQyOTQ5NjcyOTUsXG4gICAgICBNQVhfQVJSQVlfSU5ERVggPSBNQVhfQVJSQVlfTEVOR1RIIC0gMSxcbiAgICAgIEhBTEZfTUFYX0FSUkFZX0xFTkdUSCA9IE1BWF9BUlJBWV9MRU5HVEggPj4+IDE7XG5cbiAgLyoqIFVzZWQgdG8gYXNzb2NpYXRlIHdyYXAgbWV0aG9kcyB3aXRoIHRoZWlyIGJpdCBmbGFncy4gKi9cbiAgdmFyIHdyYXBGbGFncyA9IFtcbiAgICBbJ2FyeScsIFdSQVBfQVJZX0ZMQUddLFxuICAgIFsnYmluZCcsIFdSQVBfQklORF9GTEFHXSxcbiAgICBbJ2JpbmRLZXknLCBXUkFQX0JJTkRfS0VZX0ZMQUddLFxuICAgIFsnY3VycnknLCBXUkFQX0NVUlJZX0ZMQUddLFxuICAgIFsnY3VycnlSaWdodCcsIFdSQVBfQ1VSUllfUklHSFRfRkxBR10sXG4gICAgWydmbGlwJywgV1JBUF9GTElQX0ZMQUddLFxuICAgIFsncGFydGlhbCcsIFdSQVBfUEFSVElBTF9GTEFHXSxcbiAgICBbJ3BhcnRpYWxSaWdodCcsIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHXSxcbiAgICBbJ3JlYXJnJywgV1JBUF9SRUFSR19GTEFHXVxuICBdO1xuXG4gIC8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbiAgdmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICAgIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgICBkb21FeGNUYWcgPSAnW29iamVjdCBET01FeGNlcHRpb25dJyxcbiAgICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgICBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgICBwcm9taXNlVGFnID0gJ1tvYmplY3QgUHJvbWlzZV0nLFxuICAgICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nLFxuICAgICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXScsXG4gICAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJyxcbiAgICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXScsXG4gICAgICB3ZWFrU2V0VGFnID0gJ1tvYmplY3QgV2Vha1NldF0nO1xuXG4gIHZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggZW1wdHkgc3RyaW5nIGxpdGVyYWxzIGluIGNvbXBpbGVkIHRlbXBsYXRlIHNvdXJjZS4gKi9cbiAgdmFyIHJlRW1wdHlTdHJpbmdMZWFkaW5nID0gL1xcYl9fcCBcXCs9ICcnOy9nLFxuICAgICAgcmVFbXB0eVN0cmluZ01pZGRsZSA9IC9cXGIoX19wIFxcKz0pICcnIFxcKy9nLFxuICAgICAgcmVFbXB0eVN0cmluZ1RyYWlsaW5nID0gLyhfX2VcXCguKj9cXCl8XFxiX190XFwpKSBcXCtcXG4nJzsvZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBIVE1MIGVudGl0aWVzIGFuZCBIVE1MIGNoYXJhY3RlcnMuICovXG4gIHZhciByZUVzY2FwZWRIdG1sID0gLyYoPzphbXB8bHR8Z3R8cXVvdHwjMzkpOy9nLFxuICAgICAgcmVVbmVzY2FwZWRIdG1sID0gL1smPD5cIiddL2csXG4gICAgICByZUhhc0VzY2FwZWRIdG1sID0gUmVnRXhwKHJlRXNjYXBlZEh0bWwuc291cmNlKSxcbiAgICAgIHJlSGFzVW5lc2NhcGVkSHRtbCA9IFJlZ0V4cChyZVVuZXNjYXBlZEh0bWwuc291cmNlKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLiAqL1xuICB2YXIgcmVFc2NhcGUgPSAvPCUtKFtcXHNcXFNdKz8pJT4vZyxcbiAgICAgIHJlRXZhbHVhdGUgPSAvPCUoW1xcc1xcU10rPyklPi9nLFxuICAgICAgcmVJbnRlcnBvbGF0ZSA9IC88JT0oW1xcc1xcU10rPyklPi9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbiAgdmFyIHJlSXNEZWVwUHJvcCA9IC9cXC58XFxbKD86W15bXFxdXSp8KFtcIiddKSg/Oig/IVxcMSlbXlxcXFxdfFxcXFwuKSo/XFwxKVxcXS8sXG4gICAgICByZUlzUGxhaW5Qcm9wID0gL15cXHcqJC8sXG4gICAgICByZVByb3BOYW1lID0gL1teLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCQpKS9nO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gICAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICAgKi9cbiAgdmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZyxcbiAgICAgIHJlSGFzUmVnRXhwQ2hhciA9IFJlZ0V4cChyZVJlZ0V4cENoYXIuc291cmNlKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIHdoaXRlc3BhY2UuICovXG4gIHZhciByZVRyaW1TdGFydCA9IC9eXFxzKy87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggYSBzaW5nbGUgd2hpdGVzcGFjZSBjaGFyYWN0ZXIuICovXG4gIHZhciByZVdoaXRlc3BhY2UgPSAvXFxzLztcblxuICAvKiogVXNlZCB0byBtYXRjaCB3cmFwIGRldGFpbCBjb21tZW50cy4gKi9cbiAgdmFyIHJlV3JhcENvbW1lbnQgPSAvXFx7KD86XFxuXFwvXFwqIFxcW3dyYXBwZWQgd2l0aCAuK1xcXSBcXCpcXC8pP1xcbj8vLFxuICAgICAgcmVXcmFwRGV0YWlscyA9IC9cXHtcXG5cXC9cXCogXFxbd3JhcHBlZCB3aXRoICguKylcXF0gXFwqLyxcbiAgICAgIHJlU3BsaXREZXRhaWxzID0gLyw/ICYgLztcblxuICAvKiogVXNlZCB0byBtYXRjaCB3b3JkcyBjb21wb3NlZCBvZiBhbHBoYW51bWVyaWMgY2hhcmFjdGVycy4gKi9cbiAgdmFyIHJlQXNjaWlXb3JkID0gL1teXFx4MDAtXFx4MmZcXHgzYS1cXHg0MFxceDViLVxceDYwXFx4N2ItXFx4N2ZdKy9nO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIHZhbGlkYXRlIHRoZSBgdmFsaWRhdGVgIG9wdGlvbiBpbiBgXy50ZW1wbGF0ZWAgdmFyaWFibGUuXG4gICAqXG4gICAqIEZvcmJpZHMgY2hhcmFjdGVycyB3aGljaCBjb3VsZCBwb3RlbnRpYWxseSBjaGFuZ2UgdGhlIG1lYW5pbmcgb2YgdGhlIGZ1bmN0aW9uIGFyZ3VtZW50IGRlZmluaXRpb246XG4gICAqIC0gXCIoKSxcIiAobW9kaWZpY2F0aW9uIG9mIGZ1bmN0aW9uIHBhcmFtZXRlcnMpXG4gICAqIC0gXCI9XCIgKGRlZmF1bHQgdmFsdWUpXG4gICAqIC0gXCJbXXt9XCIgKGRlc3RydWN0dXJpbmcgb2YgZnVuY3Rpb24gcGFyYW1ldGVycylcbiAgICogLSBcIi9cIiAoYmVnaW5uaW5nIG9mIGEgY29tbWVudClcbiAgICogLSB3aGl0ZXNwYWNlXG4gICAqL1xuICB2YXIgcmVGb3JiaWRkZW5JZGVudGlmaWVyQ2hhcnMgPSAvWygpPSx7fVxcW1xcXVxcL1xcc10vO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xuICB2YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2hcbiAgICogW0VTIHRlbXBsYXRlIGRlbGltaXRlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRlbXBsYXRlLWxpdGVyYWwtbGV4aWNhbC1jb21wb25lbnRzKS5cbiAgICovXG4gIHZhciByZUVzVGVtcGxhdGUgPSAvXFwkXFx7KFteXFxcXH1dKig/OlxcXFwuW15cXFxcfV0qKSopXFx9L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGAgZmxhZ3MgZnJvbSB0aGVpciBjb2VyY2VkIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUZsYWdzID0gL1xcdyokLztcblxuICAvKiogVXNlZCB0byBkZXRlY3QgYmFkIHNpZ25lZCBoZXhhZGVjaW1hbCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBiaW5hcnkgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNCaW5hcnkgPSAvXjBiWzAxXSskL2k7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xuICB2YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuICAvKiogVXNlZCB0byBkZXRlY3Qgb2N0YWwgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNPY3RhbCA9IC9eMG9bMC03XSskL2k7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xuICB2YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIExhdGluIFVuaWNvZGUgbGV0dGVycyAoZXhjbHVkaW5nIG1hdGhlbWF0aWNhbCBvcGVyYXRvcnMpLiAqL1xuICB2YXIgcmVMYXRpbiA9IC9bXFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxceGZmXFx1MDEwMC1cXHUwMTdmXS9nO1xuXG4gIC8qKiBVc2VkIHRvIGVuc3VyZSBjYXB0dXJpbmcgb3JkZXIgb2YgdGVtcGxhdGUgZGVsaW1pdGVycy4gKi9cbiAgdmFyIHJlTm9NYXRjaCA9IC8oJF4pLztcblxuICAvKiogVXNlZCB0byBtYXRjaCB1bmVzY2FwZWQgY2hhcmFjdGVycyBpbiBjb21waWxlZCBzdHJpbmcgbGl0ZXJhbHMuICovXG4gIHZhciByZVVuZXNjYXBlZFN0cmluZyA9IC9bJ1xcblxcclxcdTIwMjhcXHUyMDI5XFxcXF0vZztcblxuICAvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2hhcmFjdGVyIGNsYXNzZXMuICovXG4gIHZhciByc0FzdHJhbFJhbmdlID0gJ1xcXFx1ZDgwMC1cXFxcdWRmZmYnLFxuICAgICAgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZicsXG4gICAgICByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgPSAnXFxcXHVmZTIwLVxcXFx1ZmUyZicsXG4gICAgICByc0NvbWJvU3ltYm9sc1JhbmdlID0gJ1xcXFx1MjBkMC1cXFxcdTIwZmYnLFxuICAgICAgcnNDb21ib1JhbmdlID0gcnNDb21ib01hcmtzUmFuZ2UgKyByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlLFxuICAgICAgcnNEaW5nYmF0UmFuZ2UgPSAnXFxcXHUyNzAwLVxcXFx1MjdiZicsXG4gICAgICByc0xvd2VyUmFuZ2UgPSAnYS16XFxcXHhkZi1cXFxceGY2XFxcXHhmOC1cXFxceGZmJyxcbiAgICAgIHJzTWF0aE9wUmFuZ2UgPSAnXFxcXHhhY1xcXFx4YjFcXFxceGQ3XFxcXHhmNycsXG4gICAgICByc05vbkNoYXJSYW5nZSA9ICdcXFxceDAwLVxcXFx4MmZcXFxceDNhLVxcXFx4NDBcXFxceDViLVxcXFx4NjBcXFxceDdiLVxcXFx4YmYnLFxuICAgICAgcnNQdW5jdHVhdGlvblJhbmdlID0gJ1xcXFx1MjAwMC1cXFxcdTIwNmYnLFxuICAgICAgcnNTcGFjZVJhbmdlID0gJyBcXFxcdFxcXFx4MGJcXFxcZlxcXFx4YTBcXFxcdWZlZmZcXFxcblxcXFxyXFxcXHUyMDI4XFxcXHUyMDI5XFxcXHUxNjgwXFxcXHUxODBlXFxcXHUyMDAwXFxcXHUyMDAxXFxcXHUyMDAyXFxcXHUyMDAzXFxcXHUyMDA0XFxcXHUyMDA1XFxcXHUyMDA2XFxcXHUyMDA3XFxcXHUyMDA4XFxcXHUyMDA5XFxcXHUyMDBhXFxcXHUyMDJmXFxcXHUyMDVmXFxcXHUzMDAwJyxcbiAgICAgIHJzVXBwZXJSYW5nZSA9ICdBLVpcXFxceGMwLVxcXFx4ZDZcXFxceGQ4LVxcXFx4ZGUnLFxuICAgICAgcnNWYXJSYW5nZSA9ICdcXFxcdWZlMGVcXFxcdWZlMGYnLFxuICAgICAgcnNCcmVha1JhbmdlID0gcnNNYXRoT3BSYW5nZSArIHJzTm9uQ2hhclJhbmdlICsgcnNQdW5jdHVhdGlvblJhbmdlICsgcnNTcGFjZVJhbmdlO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjYXB0dXJlIGdyb3Vwcy4gKi9cbiAgdmFyIHJzQXBvcyA9IFwiWydcXHUyMDE5XVwiLFxuICAgICAgcnNBc3RyYWwgPSAnWycgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgICAgcnNCcmVhayA9ICdbJyArIHJzQnJlYWtSYW5nZSArICddJyxcbiAgICAgIHJzQ29tYm8gPSAnWycgKyByc0NvbWJvUmFuZ2UgKyAnXScsXG4gICAgICByc0RpZ2l0cyA9ICdcXFxcZCsnLFxuICAgICAgcnNEaW5nYmF0ID0gJ1snICsgcnNEaW5nYmF0UmFuZ2UgKyAnXScsXG4gICAgICByc0xvd2VyID0gJ1snICsgcnNMb3dlclJhbmdlICsgJ10nLFxuICAgICAgcnNNaXNjID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyByc0JyZWFrUmFuZ2UgKyByc0RpZ2l0cyArIHJzRGluZ2JhdFJhbmdlICsgcnNMb3dlclJhbmdlICsgcnNVcHBlclJhbmdlICsgJ10nLFxuICAgICAgcnNGaXR6ID0gJ1xcXFx1ZDgzY1tcXFxcdWRmZmItXFxcXHVkZmZmXScsXG4gICAgICByc01vZGlmaWVyID0gJyg/OicgKyByc0NvbWJvICsgJ3wnICsgcnNGaXR6ICsgJyknLFxuICAgICAgcnNOb25Bc3RyYWwgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICAgIHJzUmVnaW9uYWwgPSAnKD86XFxcXHVkODNjW1xcXFx1ZGRlNi1cXFxcdWRkZmZdKXsyfScsXG4gICAgICByc1N1cnJQYWlyID0gJ1tcXFxcdWQ4MDAtXFxcXHVkYmZmXVtcXFxcdWRjMDAtXFxcXHVkZmZmXScsXG4gICAgICByc1VwcGVyID0gJ1snICsgcnNVcHBlclJhbmdlICsgJ10nLFxuICAgICAgcnNaV0ogPSAnXFxcXHUyMDBkJztcblxuICAvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgcmVnZXhlcy4gKi9cbiAgdmFyIHJzTWlzY0xvd2VyID0gJyg/OicgKyByc0xvd2VyICsgJ3wnICsgcnNNaXNjICsgJyknLFxuICAgICAgcnNNaXNjVXBwZXIgPSAnKD86JyArIHJzVXBwZXIgKyAnfCcgKyByc01pc2MgKyAnKScsXG4gICAgICByc09wdENvbnRyTG93ZXIgPSAnKD86JyArIHJzQXBvcyArICcoPzpkfGxsfG18cmV8c3x0fHZlKSk/JyxcbiAgICAgIHJzT3B0Q29udHJVcHBlciA9ICcoPzonICsgcnNBcG9zICsgJyg/OkR8TEx8TXxSRXxTfFR8VkUpKT8nLFxuICAgICAgcmVPcHRNb2QgPSByc01vZGlmaWVyICsgJz8nLFxuICAgICAgcnNPcHRWYXIgPSAnWycgKyByc1ZhclJhbmdlICsgJ10/JyxcbiAgICAgIHJzT3B0Sm9pbiA9ICcoPzonICsgcnNaV0ogKyAnKD86JyArIFtyc05vbkFzdHJhbCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbignfCcpICsgJyknICsgcnNPcHRWYXIgKyByZU9wdE1vZCArICcpKicsXG4gICAgICByc09yZExvd2VyID0gJ1xcXFxkKig/OjFzdHwybmR8M3JkfCg/IVsxMjNdKVxcXFxkdGgpKD89XFxcXGJ8W0EtWl9dKScsXG4gICAgICByc09yZFVwcGVyID0gJ1xcXFxkKig/OjFTVHwyTkR8M1JEfCg/IVsxMjNdKVxcXFxkVEgpKD89XFxcXGJ8W2Etel9dKScsXG4gICAgICByc1NlcSA9IHJzT3B0VmFyICsgcmVPcHRNb2QgKyByc09wdEpvaW4sXG4gICAgICByc0Vtb2ppID0gJyg/OicgKyBbcnNEaW5nYmF0LCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc1NlcSxcbiAgICAgIHJzU3ltYm9sID0gJyg/OicgKyBbcnNOb25Bc3RyYWwgKyByc0NvbWJvICsgJz8nLCByc0NvbWJvLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyLCByc0FzdHJhbF0uam9pbignfCcpICsgJyknO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGFwb3N0cm9waGVzLiAqL1xuICB2YXIgcmVBcG9zID0gUmVnRXhwKHJzQXBvcywgJ2cnKTtcblxuICAvKipcbiAgICogVXNlZCB0byBtYXRjaCBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3MpIGFuZFxuICAgKiBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzIGZvciBzeW1ib2xzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3NfZm9yX1N5bWJvbHMpLlxuICAgKi9cbiAgdmFyIHJlQ29tYm9NYXJrID0gUmVnRXhwKHJzQ29tYm8sICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggW3N0cmluZyBzeW1ib2xzXShodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC11bmljb2RlKS4gKi9cbiAgdmFyIHJlVW5pY29kZSA9IFJlZ0V4cChyc0ZpdHogKyAnKD89JyArIHJzRml0eiArICcpfCcgKyByc1N5bWJvbCArIHJzU2VxLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGNvbXBsZXggb3IgY29tcG91bmQgd29yZHMuICovXG4gIHZhciByZVVuaWNvZGVXb3JkID0gUmVnRXhwKFtcbiAgICByc1VwcGVyICsgJz8nICsgcnNMb3dlciArICcrJyArIHJzT3B0Q29udHJMb3dlciArICcoPz0nICsgW3JzQnJlYWssIHJzVXBwZXIsICckJ10uam9pbignfCcpICsgJyknLFxuICAgIHJzTWlzY1VwcGVyICsgJysnICsgcnNPcHRDb250clVwcGVyICsgJyg/PScgKyBbcnNCcmVhaywgcnNVcHBlciArIHJzTWlzY0xvd2VyLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgICByc1VwcGVyICsgJz8nICsgcnNNaXNjTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIsXG4gICAgcnNVcHBlciArICcrJyArIHJzT3B0Q29udHJVcHBlcixcbiAgICByc09yZFVwcGVyLFxuICAgIHJzT3JkTG93ZXIsXG4gICAgcnNEaWdpdHMsXG4gICAgcnNFbW9qaVxuICBdLmpvaW4oJ3wnKSwgJ2cnKTtcblxuICAvKiogVXNlZCB0byBkZXRlY3Qgc3RyaW5ncyB3aXRoIFt6ZXJvLXdpZHRoIGpvaW5lcnMgb3IgY29kZSBwb2ludHMgZnJvbSB0aGUgYXN0cmFsIHBsYW5lc10oaHR0cDovL2Vldi5lZS9ibG9nLzIwMTUvMDkvMTIvZGFyay1jb3JuZXJzLW9mLXVuaWNvZGUvKS4gKi9cbiAgdmFyIHJlSGFzVW5pY29kZSA9IFJlZ0V4cCgnWycgKyByc1pXSiArIHJzQXN0cmFsUmFuZ2UgICsgcnNDb21ib1JhbmdlICsgcnNWYXJSYW5nZSArICddJyk7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3MgdGhhdCBuZWVkIGEgbW9yZSByb2J1c3QgcmVnZXhwIHRvIG1hdGNoIHdvcmRzLiAqL1xuICB2YXIgcmVIYXNVbmljb2RlV29yZCA9IC9bYS16XVtBLVpdfFtBLVpdezJ9W2Etel18WzAtOV1bYS16QS1aXXxbYS16QS1aXVswLTldfFteYS16QS1aMC05IF0vO1xuXG4gIC8qKiBVc2VkIHRvIGFzc2lnbiBkZWZhdWx0IGBjb250ZXh0YCBvYmplY3QgcHJvcGVydGllcy4gKi9cbiAgdmFyIGNvbnRleHRQcm9wcyA9IFtcbiAgICAnQXJyYXknLCAnQnVmZmVyJywgJ0RhdGFWaWV3JywgJ0RhdGUnLCAnRXJyb3InLCAnRmxvYXQzMkFycmF5JywgJ0Zsb2F0NjRBcnJheScsXG4gICAgJ0Z1bmN0aW9uJywgJ0ludDhBcnJheScsICdJbnQxNkFycmF5JywgJ0ludDMyQXJyYXknLCAnTWFwJywgJ01hdGgnLCAnT2JqZWN0JyxcbiAgICAnUHJvbWlzZScsICdSZWdFeHAnLCAnU2V0JywgJ1N0cmluZycsICdTeW1ib2wnLCAnVHlwZUVycm9yJywgJ1VpbnQ4QXJyYXknLFxuICAgICdVaW50OENsYW1wZWRBcnJheScsICdVaW50MTZBcnJheScsICdVaW50MzJBcnJheScsICdXZWFrTWFwJyxcbiAgICAnXycsICdjbGVhclRpbWVvdXQnLCAnaXNGaW5pdGUnLCAncGFyc2VJbnQnLCAnc2V0VGltZW91dCdcbiAgXTtcblxuICAvKiogVXNlZCB0byBtYWtlIHRlbXBsYXRlIHNvdXJjZVVSTHMgZWFzaWVyIHRvIGlkZW50aWZ5LiAqL1xuICB2YXIgdGVtcGxhdGVDb3VudGVyID0gLTE7XG5cbiAgLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgb2YgdHlwZWQgYXJyYXlzLiAqL1xuICB2YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbiAgdHlwZWRBcnJheVRhZ3NbZmxvYXQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1tmbG9hdDY0VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2ludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQxNlRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbiAgdHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1thcnJheUJ1ZmZlclRhZ10gPSB0eXBlZEFycmF5VGFnc1tib29sVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2RhdGFWaWV3VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxuICB0eXBlZEFycmF5VGFnc1ttYXBUYWddID0gdHlwZWRBcnJheVRhZ3NbbnVtYmVyVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxuICB0eXBlZEFycmF5VGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4gIC8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIHN1cHBvcnRlZCBieSBgXy5jbG9uZWAuICovXG4gIHZhciBjbG9uZWFibGVUYWdzID0ge307XG4gIGNsb25lYWJsZVRhZ3NbYXJnc1RhZ10gPSBjbG9uZWFibGVUYWdzW2FycmF5VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gY2xvbmVhYmxlVGFnc1tkYXRhVmlld1RhZ10gPVxuICBjbG9uZWFibGVUYWdzW2Jvb2xUYWddID0gY2xvbmVhYmxlVGFnc1tkYXRlVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbZmxvYXQzMlRhZ10gPSBjbG9uZWFibGVUYWdzW2Zsb2F0NjRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tpbnQ4VGFnXSA9IGNsb25lYWJsZVRhZ3NbaW50MTZUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tpbnQzMlRhZ10gPSBjbG9uZWFibGVUYWdzW21hcFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW251bWJlclRhZ10gPSBjbG9uZWFibGVUYWdzW29iamVjdFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3JlZ2V4cFRhZ10gPSBjbG9uZWFibGVUYWdzW3NldFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3N0cmluZ1RhZ10gPSBjbG9uZWFibGVUYWdzW3N5bWJvbFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3VpbnQ4VGFnXSA9IGNsb25lYWJsZVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbdWludDE2VGFnXSA9IGNsb25lYWJsZVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG4gIGNsb25lYWJsZVRhZ3NbZXJyb3JUYWddID0gY2xvbmVhYmxlVGFnc1tmdW5jVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuICAvKiogVXNlZCB0byBtYXAgTGF0aW4gVW5pY29kZSBsZXR0ZXJzIHRvIGJhc2ljIExhdGluIGxldHRlcnMuICovXG4gIHZhciBkZWJ1cnJlZExldHRlcnMgPSB7XG4gICAgLy8gTGF0aW4tMSBTdXBwbGVtZW50IGJsb2NrLlxuICAgICdcXHhjMCc6ICdBJywgICdcXHhjMSc6ICdBJywgJ1xceGMyJzogJ0EnLCAnXFx4YzMnOiAnQScsICdcXHhjNCc6ICdBJywgJ1xceGM1JzogJ0EnLFxuICAgICdcXHhlMCc6ICdhJywgICdcXHhlMSc6ICdhJywgJ1xceGUyJzogJ2EnLCAnXFx4ZTMnOiAnYScsICdcXHhlNCc6ICdhJywgJ1xceGU1JzogJ2EnLFxuICAgICdcXHhjNyc6ICdDJywgICdcXHhlNyc6ICdjJyxcbiAgICAnXFx4ZDAnOiAnRCcsICAnXFx4ZjAnOiAnZCcsXG4gICAgJ1xceGM4JzogJ0UnLCAgJ1xceGM5JzogJ0UnLCAnXFx4Y2EnOiAnRScsICdcXHhjYic6ICdFJyxcbiAgICAnXFx4ZTgnOiAnZScsICAnXFx4ZTknOiAnZScsICdcXHhlYSc6ICdlJywgJ1xceGViJzogJ2UnLFxuICAgICdcXHhjYyc6ICdJJywgICdcXHhjZCc6ICdJJywgJ1xceGNlJzogJ0knLCAnXFx4Y2YnOiAnSScsXG4gICAgJ1xceGVjJzogJ2knLCAgJ1xceGVkJzogJ2knLCAnXFx4ZWUnOiAnaScsICdcXHhlZic6ICdpJyxcbiAgICAnXFx4ZDEnOiAnTicsICAnXFx4ZjEnOiAnbicsXG4gICAgJ1xceGQyJzogJ08nLCAgJ1xceGQzJzogJ08nLCAnXFx4ZDQnOiAnTycsICdcXHhkNSc6ICdPJywgJ1xceGQ2JzogJ08nLCAnXFx4ZDgnOiAnTycsXG4gICAgJ1xceGYyJzogJ28nLCAgJ1xceGYzJzogJ28nLCAnXFx4ZjQnOiAnbycsICdcXHhmNSc6ICdvJywgJ1xceGY2JzogJ28nLCAnXFx4ZjgnOiAnbycsXG4gICAgJ1xceGQ5JzogJ1UnLCAgJ1xceGRhJzogJ1UnLCAnXFx4ZGInOiAnVScsICdcXHhkYyc6ICdVJyxcbiAgICAnXFx4ZjknOiAndScsICAnXFx4ZmEnOiAndScsICdcXHhmYic6ICd1JywgJ1xceGZjJzogJ3UnLFxuICAgICdcXHhkZCc6ICdZJywgICdcXHhmZCc6ICd5JywgJ1xceGZmJzogJ3knLFxuICAgICdcXHhjNic6ICdBZScsICdcXHhlNic6ICdhZScsXG4gICAgJ1xceGRlJzogJ1RoJywgJ1xceGZlJzogJ3RoJyxcbiAgICAnXFx4ZGYnOiAnc3MnLFxuICAgIC8vIExhdGluIEV4dGVuZGVkLUEgYmxvY2suXG4gICAgJ1xcdTAxMDAnOiAnQScsICAnXFx1MDEwMic6ICdBJywgJ1xcdTAxMDQnOiAnQScsXG4gICAgJ1xcdTAxMDEnOiAnYScsICAnXFx1MDEwMyc6ICdhJywgJ1xcdTAxMDUnOiAnYScsXG4gICAgJ1xcdTAxMDYnOiAnQycsICAnXFx1MDEwOCc6ICdDJywgJ1xcdTAxMGEnOiAnQycsICdcXHUwMTBjJzogJ0MnLFxuICAgICdcXHUwMTA3JzogJ2MnLCAgJ1xcdTAxMDknOiAnYycsICdcXHUwMTBiJzogJ2MnLCAnXFx1MDEwZCc6ICdjJyxcbiAgICAnXFx1MDEwZSc6ICdEJywgICdcXHUwMTEwJzogJ0QnLCAnXFx1MDEwZic6ICdkJywgJ1xcdTAxMTEnOiAnZCcsXG4gICAgJ1xcdTAxMTInOiAnRScsICAnXFx1MDExNCc6ICdFJywgJ1xcdTAxMTYnOiAnRScsICdcXHUwMTE4JzogJ0UnLCAnXFx1MDExYSc6ICdFJyxcbiAgICAnXFx1MDExMyc6ICdlJywgICdcXHUwMTE1JzogJ2UnLCAnXFx1MDExNyc6ICdlJywgJ1xcdTAxMTknOiAnZScsICdcXHUwMTFiJzogJ2UnLFxuICAgICdcXHUwMTFjJzogJ0cnLCAgJ1xcdTAxMWUnOiAnRycsICdcXHUwMTIwJzogJ0cnLCAnXFx1MDEyMic6ICdHJyxcbiAgICAnXFx1MDExZCc6ICdnJywgICdcXHUwMTFmJzogJ2cnLCAnXFx1MDEyMSc6ICdnJywgJ1xcdTAxMjMnOiAnZycsXG4gICAgJ1xcdTAxMjQnOiAnSCcsICAnXFx1MDEyNic6ICdIJywgJ1xcdTAxMjUnOiAnaCcsICdcXHUwMTI3JzogJ2gnLFxuICAgICdcXHUwMTI4JzogJ0knLCAgJ1xcdTAxMmEnOiAnSScsICdcXHUwMTJjJzogJ0knLCAnXFx1MDEyZSc6ICdJJywgJ1xcdTAxMzAnOiAnSScsXG4gICAgJ1xcdTAxMjknOiAnaScsICAnXFx1MDEyYic6ICdpJywgJ1xcdTAxMmQnOiAnaScsICdcXHUwMTJmJzogJ2knLCAnXFx1MDEzMSc6ICdpJyxcbiAgICAnXFx1MDEzNCc6ICdKJywgICdcXHUwMTM1JzogJ2onLFxuICAgICdcXHUwMTM2JzogJ0snLCAgJ1xcdTAxMzcnOiAnaycsICdcXHUwMTM4JzogJ2snLFxuICAgICdcXHUwMTM5JzogJ0wnLCAgJ1xcdTAxM2InOiAnTCcsICdcXHUwMTNkJzogJ0wnLCAnXFx1MDEzZic6ICdMJywgJ1xcdTAxNDEnOiAnTCcsXG4gICAgJ1xcdTAxM2EnOiAnbCcsICAnXFx1MDEzYyc6ICdsJywgJ1xcdTAxM2UnOiAnbCcsICdcXHUwMTQwJzogJ2wnLCAnXFx1MDE0Mic6ICdsJyxcbiAgICAnXFx1MDE0Myc6ICdOJywgICdcXHUwMTQ1JzogJ04nLCAnXFx1MDE0Nyc6ICdOJywgJ1xcdTAxNGEnOiAnTicsXG4gICAgJ1xcdTAxNDQnOiAnbicsICAnXFx1MDE0Nic6ICduJywgJ1xcdTAxNDgnOiAnbicsICdcXHUwMTRiJzogJ24nLFxuICAgICdcXHUwMTRjJzogJ08nLCAgJ1xcdTAxNGUnOiAnTycsICdcXHUwMTUwJzogJ08nLFxuICAgICdcXHUwMTRkJzogJ28nLCAgJ1xcdTAxNGYnOiAnbycsICdcXHUwMTUxJzogJ28nLFxuICAgICdcXHUwMTU0JzogJ1InLCAgJ1xcdTAxNTYnOiAnUicsICdcXHUwMTU4JzogJ1InLFxuICAgICdcXHUwMTU1JzogJ3InLCAgJ1xcdTAxNTcnOiAncicsICdcXHUwMTU5JzogJ3InLFxuICAgICdcXHUwMTVhJzogJ1MnLCAgJ1xcdTAxNWMnOiAnUycsICdcXHUwMTVlJzogJ1MnLCAnXFx1MDE2MCc6ICdTJyxcbiAgICAnXFx1MDE1Yic6ICdzJywgICdcXHUwMTVkJzogJ3MnLCAnXFx1MDE1Zic6ICdzJywgJ1xcdTAxNjEnOiAncycsXG4gICAgJ1xcdTAxNjInOiAnVCcsICAnXFx1MDE2NCc6ICdUJywgJ1xcdTAxNjYnOiAnVCcsXG4gICAgJ1xcdTAxNjMnOiAndCcsICAnXFx1MDE2NSc6ICd0JywgJ1xcdTAxNjcnOiAndCcsXG4gICAgJ1xcdTAxNjgnOiAnVScsICAnXFx1MDE2YSc6ICdVJywgJ1xcdTAxNmMnOiAnVScsICdcXHUwMTZlJzogJ1UnLCAnXFx1MDE3MCc6ICdVJywgJ1xcdTAxNzInOiAnVScsXG4gICAgJ1xcdTAxNjknOiAndScsICAnXFx1MDE2Yic6ICd1JywgJ1xcdTAxNmQnOiAndScsICdcXHUwMTZmJzogJ3UnLCAnXFx1MDE3MSc6ICd1JywgJ1xcdTAxNzMnOiAndScsXG4gICAgJ1xcdTAxNzQnOiAnVycsICAnXFx1MDE3NSc6ICd3JyxcbiAgICAnXFx1MDE3Nic6ICdZJywgICdcXHUwMTc3JzogJ3knLCAnXFx1MDE3OCc6ICdZJyxcbiAgICAnXFx1MDE3OSc6ICdaJywgICdcXHUwMTdiJzogJ1onLCAnXFx1MDE3ZCc6ICdaJyxcbiAgICAnXFx1MDE3YSc6ICd6JywgICdcXHUwMTdjJzogJ3onLCAnXFx1MDE3ZSc6ICd6JyxcbiAgICAnXFx1MDEzMic6ICdJSicsICdcXHUwMTMzJzogJ2lqJyxcbiAgICAnXFx1MDE1Mic6ICdPZScsICdcXHUwMTUzJzogJ29lJyxcbiAgICAnXFx1MDE0OSc6IFwiJ25cIiwgJ1xcdTAxN2YnOiAncydcbiAgfTtcblxuICAvKiogVXNlZCB0byBtYXAgY2hhcmFjdGVycyB0byBIVE1MIGVudGl0aWVzLiAqL1xuICB2YXIgaHRtbEVzY2FwZXMgPSB7XG4gICAgJyYnOiAnJmFtcDsnLFxuICAgICc8JzogJyZsdDsnLFxuICAgICc+JzogJyZndDsnLFxuICAgICdcIic6ICcmcXVvdDsnLFxuICAgIFwiJ1wiOiAnJiMzOTsnXG4gIH07XG5cbiAgLyoqIFVzZWQgdG8gbWFwIEhUTUwgZW50aXRpZXMgdG8gY2hhcmFjdGVycy4gKi9cbiAgdmFyIGh0bWxVbmVzY2FwZXMgPSB7XG4gICAgJyZhbXA7JzogJyYnLFxuICAgICcmbHQ7JzogJzwnLFxuICAgICcmZ3Q7JzogJz4nLFxuICAgICcmcXVvdDsnOiAnXCInLFxuICAgICcmIzM5Oyc6IFwiJ1wiXG4gIH07XG5cbiAgLyoqIFVzZWQgdG8gZXNjYXBlIGNoYXJhY3RlcnMgZm9yIGluY2x1c2lvbiBpbiBjb21waWxlZCBzdHJpbmcgbGl0ZXJhbHMuICovXG4gIHZhciBzdHJpbmdFc2NhcGVzID0ge1xuICAgICdcXFxcJzogJ1xcXFwnLFxuICAgIFwiJ1wiOiBcIidcIixcbiAgICAnXFxuJzogJ24nLFxuICAgICdcXHInOiAncicsXG4gICAgJ1xcdTIwMjgnOiAndTIwMjgnLFxuICAgICdcXHUyMDI5JzogJ3UyMDI5J1xuICB9O1xuXG4gIC8qKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB3aXRob3V0IGEgZGVwZW5kZW5jeSBvbiBgcm9vdGAuICovXG4gIHZhciBmcmVlUGFyc2VGbG9hdCA9IHBhcnNlRmxvYXQsXG4gICAgICBmcmVlUGFyc2VJbnQgPSBwYXJzZUludDtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xuICB2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbiAgdmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbiAgLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG4gIHZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG4gIHZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG4gIHZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbiAgLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbiAgdmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBwcm9jZXNzYCBmcm9tIE5vZGUuanMuICovXG4gIHZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG4gIC8qKiBVc2VkIHRvIGFjY2VzcyBmYXN0ZXIgTm9kZS5qcyBoZWxwZXJzLiAqL1xuICB2YXIgbm9kZVV0aWwgPSAoZnVuY3Rpb24oKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFVzZSBgdXRpbC50eXBlc2AgZm9yIE5vZGUuanMgMTArLlxuICAgICAgdmFyIHR5cGVzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlKCd1dGlsJykudHlwZXM7XG5cbiAgICAgIGlmICh0eXBlcykge1xuICAgICAgICByZXR1cm4gdHlwZXM7XG4gICAgICB9XG5cbiAgICAgIC8vIExlZ2FjeSBgcHJvY2Vzcy5iaW5kaW5nKCd1dGlsJylgIGZvciBOb2RlLmpzIDwgMTAuXG4gICAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVByb2Nlc3MuYmluZGluZyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nKCd1dGlsJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfSgpKTtcblxuICAvKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xuICB2YXIgbm9kZUlzQXJyYXlCdWZmZXIgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc0FycmF5QnVmZmVyLFxuICAgICAgbm9kZUlzRGF0ZSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzRGF0ZSxcbiAgICAgIG5vZGVJc01hcCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzTWFwLFxuICAgICAgbm9kZUlzUmVnRXhwID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNSZWdFeHAsXG4gICAgICBub2RlSXNTZXQgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1NldCxcbiAgICAgIG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1R5cGVkQXJyYXk7XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLyoqXG4gICAqIEEgZmFzdGVyIGFsdGVybmF0aXZlIHRvIGBGdW5jdGlvbiNhcHBseWAsIHRoaXMgZnVuY3Rpb24gaW52b2tlcyBgZnVuY2BcbiAgICogd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgYHRoaXNBcmdgIGFuZCB0aGUgYXJndW1lbnRzIG9mIGBhcmdzYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICAgKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuXG4gICAqL1xuICBmdW5jdGlvbiBhcHBseShmdW5jLCB0aGlzQXJnLCBhcmdzKSB7XG4gICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgY2FzZSAwOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcpO1xuICAgICAgY2FzZSAxOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0pO1xuICAgICAgY2FzZSAyOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgY2FzZSAzOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIH1cbiAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VBZ2dyZWdhdG9yYCBmb3IgYXJyYXlzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCBhZ2dyZWdhdGVkIG9iamVjdC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUFnZ3JlZ2F0b3IoYXJyYXksIHNldHRlciwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgIHNldHRlcihhY2N1bXVsYXRvciwgdmFsdWUsIGl0ZXJhdGVlKHZhbHVlKSwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZvckVhY2hgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlFYWNoKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoUmlnaHRgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlFYWNoUmlnaHQoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbbGVuZ3RoXSwgbGVuZ3RoLCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmV2ZXJ5YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAqICBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUV2ZXJ5KGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKCFwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZpbHRlcmAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlGaWx0ZXIoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5pbmNsdWRlc2AgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIHNwZWNpZnlpbmcgYW4gaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHRhcmdldGAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5SW5jbHVkZXMoYXJyYXksIHZhbHVlKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgIHJldHVybiAhIWxlbmd0aCAmJiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIDApID4gLTE7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBhcnJheUluY2x1ZGVzYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGEgY29tcGFyYXRvci5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB0YXJnZXQgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB0YXJnZXRgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUluY2x1ZGVzV2l0aChhcnJheSwgdmFsdWUsIGNvbXBhcmF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGNvbXBhcmF0b3IodmFsdWUsIGFycmF5W2luZGV4XSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWFwYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAgICogc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheU1hcChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBlbmRzIHRoZSBlbGVtZW50cyBvZiBgdmFsdWVzYCB0byBgYXJyYXlgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhcHBlbmQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlQdXNoKGFycmF5LCB2YWx1ZXMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgb2Zmc2V0ID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGFycmF5W29mZnNldCArIGluZGV4XSA9IHZhbHVlc1tpbmRleF07XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ucmVkdWNlYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luaXRBY2N1bV0gU3BlY2lmeSB1c2luZyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgIGFzXG4gICAqICB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlSZWR1Y2UoYXJyYXksIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgaWYgKGluaXRBY2N1bSAmJiBsZW5ndGgpIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gYXJyYXlbKytpbmRleF07XG4gICAgfVxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCBhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ucmVkdWNlUmlnaHRgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBbaW5pdEFjY3VtXSBTcGVjaWZ5IHVzaW5nIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YCBhc1xuICAgKiAgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UmVkdWNlUmlnaHQoYXJyYXksIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGFycmF5Wy0tbGVuZ3RoXTtcbiAgICB9XG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCBhcnJheVtsZW5ndGhdLCBsZW5ndGgsIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zb21lYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAgICogc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlTb21lKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBzaXplIG9mIGFuIEFTQ0lJIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gICAqL1xuICB2YXIgYXNjaWlTaXplID0gYmFzZVByb3BlcnR5KCdsZW5ndGgnKTtcblxuICAvKipcbiAgICogQ29udmVydHMgYW4gQVNDSUkgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFzY2lpVG9BcnJheShzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLnNwbGl0KCcnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTcGxpdHMgYW4gQVNDSUkgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gICAqL1xuICBmdW5jdGlvbiBhc2NpaVdvcmRzKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcubWF0Y2gocmVBc2NpaVdvcmQpIHx8IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5maW5kS2V5YCBhbmQgYF8uZmluZExhc3RLZXlgLFxuICAgKiB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYGNvbGxlY3Rpb25gXG4gICAqIHVzaW5nIGBlYWNoRnVuY2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGBjb2xsZWN0aW9uYC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZvdW5kIGVsZW1lbnQgb3IgaXRzIGtleSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VGaW5kS2V5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZWFjaEZ1bmMpIHtcbiAgICB2YXIgcmVzdWx0O1xuICAgIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGtleSwgY29sbGVjdGlvbikpIHtcbiAgICAgICAgcmVzdWx0ID0ga2V5O1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maW5kSW5kZXhgIGFuZCBgXy5maW5kTGFzdEluZGV4YCB3aXRob3V0XG4gICAqIHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgsIGZyb21SaWdodCkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIGluZGV4ID0gZnJvbUluZGV4ICsgKGZyb21SaWdodCA/IDEgOiAtMSk7XG5cbiAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW5kZXhPZmAgd2l0aG91dCBgZnJvbUluZGV4YCBib3VuZHMgY2hlY2tzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWVcbiAgICAgID8gc3RyaWN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleClcbiAgICAgIDogYmFzZUZpbmRJbmRleChhcnJheSwgYmFzZUlzTmFOLCBmcm9tSW5kZXgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYmFzZUluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYSBjb21wYXJhdG9yLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VJbmRleE9mV2l0aChhcnJheSwgdmFsdWUsIGZyb21JbmRleCwgY29tcGFyYXRvcikge1xuICAgIHZhciBpbmRleCA9IGZyb21JbmRleCAtIDEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoY29tcGFyYXRvcihhcnJheVtpbmRleF0sIHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hTmAgd2l0aG91dCBzdXBwb3J0IGZvciBudW1iZXIgb2JqZWN0cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSXNOYU4odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1lYW5gIGFuZCBgXy5tZWFuQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbWVhbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VNZWFuKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICByZXR1cm4gbGVuZ3RoID8gKGJhc2VTdW0oYXJyYXksIGl0ZXJhdGVlKSAvIGxlbmd0aCkgOiBOQU47XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVByb3BlcnR5KGtleSkge1xuICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlPZmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVByb3BlcnR5T2Yob2JqZWN0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZWR1Y2VgIGFuZCBgXy5yZWR1Y2VSaWdodGAsIHdpdGhvdXQgc3VwcG9ydFxuICAgKiBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcywgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgY29sbGVjdGlvbmAgdXNpbmcgYGVhY2hGdW5jYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0geyp9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGluaXRBY2N1bSBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBvciBsYXN0IGVsZW1lbnQgb2ZcbiAgICogIGBjb2xsZWN0aW9uYCBhcyB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBgY29sbGVjdGlvbmAuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VSZWR1Y2UoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0sIGVhY2hGdW5jKSB7XG4gICAgZWFjaEZ1bmMoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGluaXRBY2N1bVxuICAgICAgICA/IChpbml0QWNjdW0gPSBmYWxzZSwgdmFsdWUpXG4gICAgICAgIDogaXRlcmF0ZWUoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgfSk7XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRCeWAgd2hpY2ggdXNlcyBgY29tcGFyZXJgIHRvIGRlZmluZSB0aGVcbiAgICogc29ydCBvcmRlciBvZiBgYXJyYXlgIGFuZCByZXBsYWNlcyBjcml0ZXJpYSBvYmplY3RzIHdpdGggdGhlaXIgY29ycmVzcG9uZGluZ1xuICAgKiB2YWx1ZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzb3J0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJlciBUaGUgZnVuY3Rpb24gdG8gZGVmaW5lIHNvcnQgb3JkZXIuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVNvcnRCeShhcnJheSwgY29tcGFyZXIpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgYXJyYXkuc29ydChjb21wYXJlcik7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBhcnJheVtsZW5ndGhdID0gYXJyYXlbbGVuZ3RoXS52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnN1bWAgYW5kIGBfLnN1bUJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VTdW0oYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIHJlc3VsdCxcbiAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdKTtcbiAgICAgIGlmIChjdXJyZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBjdXJyZW50IDogKHJlc3VsdCArIGN1cnJlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRpbWVzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHNcbiAgICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1BhaXJzYCBhbmQgYF8udG9QYWlyc0luYCB3aGljaCBjcmVhdGVzIGFuIGFycmF5XG4gICAqIG9mIGtleS12YWx1ZSBwYWlycyBmb3IgYG9iamVjdGAgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvcGVydHkgbmFtZXMgb2YgYHByb3BzYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZ2V0IHZhbHVlcyBmb3IuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VUb1BhaXJzKG9iamVjdCwgcHJvcHMpIHtcbiAgICByZXR1cm4gYXJyYXlNYXAocHJvcHMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIFtrZXksIG9iamVjdFtrZXldXTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50cmltYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVRyaW0oc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZ1xuICAgICAgPyBzdHJpbmcuc2xpY2UoMCwgdHJpbW1lZEVuZEluZGV4KHN0cmluZykgKyAxKS5yZXBsYWNlKHJlVHJpbVN0YXJ0LCAnJylcbiAgICAgIDogc3RyaW5nO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udmFsdWVzYCBhbmQgYF8udmFsdWVzSW5gIHdoaWNoIGNyZWF0ZXMgYW5cbiAgICogYXJyYXkgb2YgYG9iamVjdGAgcHJvcGVydHkgdmFsdWVzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IG5hbWVzXG4gICAqIG9mIGBwcm9wc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVmFsdWVzKG9iamVjdCwgcHJvcHMpIHtcbiAgICByZXR1cm4gYXJyYXlNYXAocHJvcHMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdFtrZXldO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBhIGBjYWNoZWAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGNhY2hlSGFzKGNhY2hlLCBrZXkpIHtcbiAgICByZXR1cm4gY2FjaGUuaGFzKGtleSk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbVN0YXJ0YCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBzdHJpbmcgc3ltYm9sXG4gICAqIHRoYXQgaXMgbm90IGZvdW5kIGluIHRoZSBjaGFyYWN0ZXIgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gc3RyU3ltYm9scyBUaGUgc3RyaW5nIHN5bWJvbHMgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtBcnJheX0gY2hyU3ltYm9scyBUaGUgY2hhcmFjdGVyIHN5bWJvbHMgdG8gZmluZC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IHVubWF0Y2hlZCBzdHJpbmcgc3ltYm9sLlxuICAgKi9cbiAgZnVuY3Rpb24gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gc3RyU3ltYm9scy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCAmJiBiYXNlSW5kZXhPZihjaHJTeW1ib2xzLCBzdHJTeW1ib2xzW2luZGV4XSwgMCkgPiAtMSkge31cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbUVuZGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzdHJpbmcgc3ltYm9sXG4gICAqIHRoYXQgaXMgbm90IGZvdW5kIGluIHRoZSBjaGFyYWN0ZXIgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gc3RyU3ltYm9scyBUaGUgc3RyaW5nIHN5bWJvbHMgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtBcnJheX0gY2hyU3ltYm9scyBUaGUgY2hhcmFjdGVyIHN5bWJvbHMgdG8gZmluZC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGxhc3QgdW5tYXRjaGVkIHN0cmluZyBzeW1ib2wuXG4gICAqL1xuICBmdW5jdGlvbiBjaGFyc0VuZEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpIHtcbiAgICB2YXIgaW5kZXggPSBzdHJTeW1ib2xzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpbmRleC0tICYmIGJhc2VJbmRleE9mKGNoclN5bWJvbHMsIHN0clN5bWJvbHNbaW5kZXhdLCAwKSA+IC0xKSB7fVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBudW1iZXIgb2YgYHBsYWNlaG9sZGVyYCBvY2N1cnJlbmNlcyBpbiBgYXJyYXlgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdG8gc2VhcmNoIGZvci5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcGxhY2Vob2xkZXIgY291bnQuXG4gICAqL1xuICBmdW5jdGlvbiBjb3VudEhvbGRlcnMoYXJyYXksIHBsYWNlaG9sZGVyKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzdWx0ID0gMDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgaWYgKGFycmF5W2xlbmd0aF0gPT09IHBsYWNlaG9sZGVyKSB7XG4gICAgICAgICsrcmVzdWx0O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8uZGVidXJyYCB0byBjb252ZXJ0IExhdGluLTEgU3VwcGxlbWVudCBhbmQgTGF0aW4gRXh0ZW5kZWQtQVxuICAgKiBsZXR0ZXJzIHRvIGJhc2ljIExhdGluIGxldHRlcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsZXR0ZXIgVGhlIG1hdGNoZWQgbGV0dGVyIHRvIGRlYnVyci5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZGVidXJyZWQgbGV0dGVyLlxuICAgKi9cbiAgdmFyIGRlYnVyckxldHRlciA9IGJhc2VQcm9wZXJ0eU9mKGRlYnVycmVkTGV0dGVycyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8uZXNjYXBlYCB0byBjb252ZXJ0IGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIHZhciBlc2NhcGVIdG1sQ2hhciA9IGJhc2VQcm9wZXJ0eU9mKGh0bWxFc2NhcGVzKTtcblxuICAvKipcbiAgICogVXNlZCBieSBgXy50ZW1wbGF0ZWAgdG8gZXNjYXBlIGNoYXJhY3RlcnMgZm9yIGluY2x1c2lvbiBpbiBjb21waWxlZCBzdHJpbmcgbGl0ZXJhbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIGVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAqL1xuICBmdW5jdGlvbiBlc2NhcGVTdHJpbmdDaGFyKGNocikge1xuICAgIHJldHVybiAnXFxcXCcgKyBzdHJpbmdFc2NhcGVzW2Nocl07XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYHN0cmluZ2AgY29udGFpbnMgVW5pY29kZSBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGEgc3ltYm9sIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBoYXNVbmljb2RlKHN0cmluZykge1xuICAgIHJldHVybiByZUhhc1VuaWNvZGUudGVzdChzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBgc3RyaW5nYCBjb250YWlucyBhIHdvcmQgY29tcG9zZWQgb2YgVW5pY29kZSBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGEgd29yZCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gaGFzVW5pY29kZVdvcmQoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHJlSGFzVW5pY29kZVdvcmQudGVzdChzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBpdGVyYXRvcmAgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBpdGVyYXRvciBUaGUgaXRlcmF0b3IgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBpdGVyYXRvclRvQXJyYXkoaXRlcmF0b3IpIHtcbiAgICB2YXIgZGF0YSxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoIShkYXRhID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICByZXN1bHQucHVzaChkYXRhLnZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgbWFwYCB0byBpdHMga2V5LXZhbHVlIHBhaXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBtYXBUb0FycmF5KG1hcCkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShtYXAuc2l6ZSk7XG5cbiAgICBtYXAuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHRbKytpbmRleF0gPSBba2V5LCB2YWx1ZV07XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhbGwgYHBsYWNlaG9sZGVyYCBlbGVtZW50cyBpbiBgYXJyYXlgIHdpdGggYW4gaW50ZXJuYWwgcGxhY2Vob2xkZXJcbiAgICogYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlaXIgaW5kZXhlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdG8gcmVwbGFjZS5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICovXG4gIGZ1bmN0aW9uIHJlcGxhY2VIb2xkZXJzKGFycmF5LCBwbGFjZWhvbGRlcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgaWYgKHZhbHVlID09PSBwbGFjZWhvbGRlciB8fCB2YWx1ZSA9PT0gUExBQ0VIT0xERVIpIHtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gUExBQ0VIT0xERVI7XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlcy5cbiAgICovXG4gIGZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICAgIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXN1bHRbKytpbmRleF0gPSB2YWx1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBzZXRgIHRvIGl0cyB2YWx1ZS12YWx1ZSBwYWlycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWUtdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBzZXRUb1BhaXJzKHNldCkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmVzdWx0WysraW5kZXhdID0gW3ZhbHVlLCB2YWx1ZV07XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5kZXhPZmAgd2hpY2ggcGVyZm9ybXMgc3RyaWN0IGVxdWFsaXR5XG4gICAqIGNvbXBhcmlzb25zIG9mIHZhbHVlcywgaS5lLiBgPT09YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaWN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgIHZhciBpbmRleCA9IGZyb21JbmRleCAtIDEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubGFzdEluZGV4T2ZgIHdoaWNoIHBlcmZvcm1zIHN0cmljdCBlcXVhbGl0eVxuICAgKiBjb21wYXJpc29ucyBvZiB2YWx1ZXMsIGkuZS4gYD09PWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmljdExhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4ICsgMTtcbiAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgaWYgKGFycmF5W2luZGV4XSA9PT0gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgbnVtYmVyIG9mIHN5bWJvbHMgaW4gYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmluZ1NpemUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgPyB1bmljb2RlU2l6ZShzdHJpbmcpXG4gICAgICA6IGFzY2lpU2l6ZShzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpbmdUb0FycmF5KHN0cmluZykge1xuICAgIHJldHVybiBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgID8gdW5pY29kZVRvQXJyYXkoc3RyaW5nKVxuICAgICAgOiBhc2NpaVRvQXJyYXkoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltRW5kYCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IG5vbi13aGl0ZXNwYWNlXG4gICAqIGNoYXJhY3RlciBvZiBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBsYXN0IG5vbi13aGl0ZXNwYWNlIGNoYXJhY3Rlci5cbiAgICovXG4gIGZ1bmN0aW9uIHRyaW1tZWRFbmRJbmRleChzdHJpbmcpIHtcbiAgICB2YXIgaW5kZXggPSBzdHJpbmcubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGluZGV4LS0gJiYgcmVXaGl0ZXNwYWNlLnRlc3Qoc3RyaW5nLmNoYXJBdChpbmRleCkpKSB7fVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnVuZXNjYXBlYCB0byBjb252ZXJ0IEhUTUwgZW50aXRpZXMgdG8gY2hhcmFjdGVycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gdW5lc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAqL1xuICB2YXIgdW5lc2NhcGVIdG1sQ2hhciA9IGJhc2VQcm9wZXJ0eU9mKGh0bWxVbmVzY2FwZXMpO1xuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBzaXplIG9mIGEgVW5pY29kZSBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgZnVuY3Rpb24gdW5pY29kZVNpemUoc3RyaW5nKSB7XG4gICAgdmFyIHJlc3VsdCA9IHJlVW5pY29kZS5sYXN0SW5kZXggPSAwO1xuICAgIHdoaWxlIChyZVVuaWNvZGUudGVzdChzdHJpbmcpKSB7XG4gICAgICArK3Jlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhIFVuaWNvZGUgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIHVuaWNvZGVUb0FycmF5KHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcubWF0Y2gocmVVbmljb2RlKSB8fCBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTcGxpdHMgYSBVbmljb2RlIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgKi9cbiAgZnVuY3Rpb24gdW5pY29kZVdvcmRzKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcubWF0Y2gocmVVbmljb2RlV29yZCkgfHwgW107XG4gIH1cblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IHByaXN0aW5lIGBsb2Rhc2hgIGZ1bmN0aW9uIHVzaW5nIHRoZSBgY29udGV4dGAgb2JqZWN0LlxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBfXG4gICAqIEBzaW5jZSAxLjEuMFxuICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbnRleHQ9cm9vdF0gVGhlIGNvbnRleHQgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYSBuZXcgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIF8ubWl4aW4oeyAnZm9vJzogXy5jb25zdGFudCgnZm9vJykgfSk7XG4gICAqXG4gICAqIHZhciBsb2Rhc2ggPSBfLnJ1bkluQ29udGV4dCgpO1xuICAgKiBsb2Rhc2gubWl4aW4oeyAnYmFyJzogbG9kYXNoLmNvbnN0YW50KCdiYXInKSB9KTtcbiAgICpcbiAgICogXy5pc0Z1bmN0aW9uKF8uZm9vKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKiBfLmlzRnVuY3Rpb24oXy5iYXIpO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKlxuICAgKiBsb2Rhc2guaXNGdW5jdGlvbihsb2Rhc2guZm9vKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICogbG9kYXNoLmlzRnVuY3Rpb24obG9kYXNoLmJhcik7XG4gICAqIC8vID0+IHRydWVcbiAgICpcbiAgICogLy8gQ3JlYXRlIGEgc3VwZWQtdXAgYGRlZmVyYCBpbiBOb2RlLmpzLlxuICAgKiB2YXIgZGVmZXIgPSBfLnJ1bkluQ29udGV4dCh7ICdzZXRUaW1lb3V0Jzogc2V0SW1tZWRpYXRlIH0pLmRlZmVyO1xuICAgKi9cbiAgdmFyIHJ1bkluQ29udGV4dCA9IChmdW5jdGlvbiBydW5JbkNvbnRleHQoY29udGV4dCkge1xuICAgIGNvbnRleHQgPSBjb250ZXh0ID09IG51bGwgPyByb290IDogXy5kZWZhdWx0cyhyb290Lk9iamVjdCgpLCBjb250ZXh0LCBfLnBpY2socm9vdCwgY29udGV4dFByb3BzKSk7XG5cbiAgICAvKiogQnVpbHQtaW4gY29uc3RydWN0b3IgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgQXJyYXkgPSBjb250ZXh0LkFycmF5LFxuICAgICAgICBEYXRlID0gY29udGV4dC5EYXRlLFxuICAgICAgICBFcnJvciA9IGNvbnRleHQuRXJyb3IsXG4gICAgICAgIEZ1bmN0aW9uID0gY29udGV4dC5GdW5jdGlvbixcbiAgICAgICAgTWF0aCA9IGNvbnRleHQuTWF0aCxcbiAgICAgICAgT2JqZWN0ID0gY29udGV4dC5PYmplY3QsXG4gICAgICAgIFJlZ0V4cCA9IGNvbnRleHQuUmVnRXhwLFxuICAgICAgICBTdHJpbmcgPSBjb250ZXh0LlN0cmluZyxcbiAgICAgICAgVHlwZUVycm9yID0gY29udGV4dC5UeXBlRXJyb3I7XG5cbiAgICAvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsXG4gICAgICAgIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICAgICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xuICAgIHZhciBjb3JlSnNEYXRhID0gY29udGV4dFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbiAgICAvKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG4gICAgdmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuICAgIC8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xuICAgIHZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4gICAgLyoqIFVzZWQgdG8gZ2VuZXJhdGUgdW5pcXVlIElEcy4gKi9cbiAgICB2YXIgaWRDb3VudGVyID0gMDtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG4gICAgdmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICAgICAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xuICAgIH0oKSk7XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gICAgICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gICAgICogb2YgdmFsdWVzLlxuICAgICAqL1xuICAgIHZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4gICAgLyoqIFVzZWQgdG8gaW5mZXIgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yLiAqL1xuICAgIHZhciBvYmplY3RDdG9yU3RyaW5nID0gZnVuY1RvU3RyaW5nLmNhbGwoT2JqZWN0KTtcblxuICAgIC8qKiBVc2VkIHRvIHJlc3RvcmUgdGhlIG9yaWdpbmFsIGBfYCByZWZlcmVuY2UgaW4gYF8ubm9Db25mbGljdGAuICovXG4gICAgdmFyIG9sZERhc2ggPSByb290Ll87XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xuICAgIHZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gICAgICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAgICAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4gICAgKTtcblxuICAgIC8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gY29udGV4dC5CdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgICAgIFN5bWJvbCA9IGNvbnRleHQuU3ltYm9sLFxuICAgICAgICBVaW50OEFycmF5ID0gY29udGV4dC5VaW50OEFycmF5LFxuICAgICAgICBhbGxvY1Vuc2FmZSA9IEJ1ZmZlciA/IEJ1ZmZlci5hbGxvY1Vuc2FmZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCksXG4gICAgICAgIG9iamVjdENyZWF0ZSA9IE9iamVjdC5jcmVhdGUsXG4gICAgICAgIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGUsXG4gICAgICAgIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlLFxuICAgICAgICBzcHJlYWRhYmxlU3ltYm9sID0gU3ltYm9sID8gU3ltYm9sLmlzQ29uY2F0U3ByZWFkYWJsZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltSXRlcmF0b3IgPSBTeW1ib2wgPyBTeW1ib2wuaXRlcmF0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4gICAgdmFyIGRlZmluZVByb3BlcnR5ID0gKGZ1bmN0aW9uKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIGZ1bmMgPSBnZXROYXRpdmUoT2JqZWN0LCAnZGVmaW5lUHJvcGVydHknKTtcbiAgICAgICAgZnVuYyh7fSwgJycsIHt9KTtcbiAgICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH0oKSk7XG5cbiAgICAvKiogTW9ja2VkIGJ1aWx0LWlucy4gKi9cbiAgICB2YXIgY3R4Q2xlYXJUaW1lb3V0ID0gY29udGV4dC5jbGVhclRpbWVvdXQgIT09IHJvb3QuY2xlYXJUaW1lb3V0ICYmIGNvbnRleHQuY2xlYXJUaW1lb3V0LFxuICAgICAgICBjdHhOb3cgPSBEYXRlICYmIERhdGUubm93ICE9PSByb290LkRhdGUubm93ICYmIERhdGUubm93LFxuICAgICAgICBjdHhTZXRUaW1lb3V0ID0gY29udGV4dC5zZXRUaW1lb3V0ICE9PSByb290LnNldFRpbWVvdXQgJiYgY29udGV4dC5zZXRUaW1lb3V0O1xuXG4gICAgLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xuICAgIHZhciBuYXRpdmVDZWlsID0gTWF0aC5jZWlsLFxuICAgICAgICBuYXRpdmVGbG9vciA9IE1hdGguZmxvb3IsXG4gICAgICAgIG5hdGl2ZUdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLFxuICAgICAgICBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICAgICAgbmF0aXZlSXNGaW5pdGUgPSBjb250ZXh0LmlzRmluaXRlLFxuICAgICAgICBuYXRpdmVKb2luID0gYXJyYXlQcm90by5qb2luLFxuICAgICAgICBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KSxcbiAgICAgICAgbmF0aXZlTWF4ID0gTWF0aC5tYXgsXG4gICAgICAgIG5hdGl2ZU1pbiA9IE1hdGgubWluLFxuICAgICAgICBuYXRpdmVOb3cgPSBEYXRlLm5vdyxcbiAgICAgICAgbmF0aXZlUGFyc2VJbnQgPSBjb250ZXh0LnBhcnNlSW50LFxuICAgICAgICBuYXRpdmVSYW5kb20gPSBNYXRoLnJhbmRvbSxcbiAgICAgICAgbmF0aXZlUmV2ZXJzZSA9IGFycmF5UHJvdG8ucmV2ZXJzZTtcblxuICAgIC8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbiAgICB2YXIgRGF0YVZpZXcgPSBnZXROYXRpdmUoY29udGV4dCwgJ0RhdGFWaWV3JyksXG4gICAgICAgIE1hcCA9IGdldE5hdGl2ZShjb250ZXh0LCAnTWFwJyksXG4gICAgICAgIFByb21pc2UgPSBnZXROYXRpdmUoY29udGV4dCwgJ1Byb21pc2UnKSxcbiAgICAgICAgU2V0ID0gZ2V0TmF0aXZlKGNvbnRleHQsICdTZXQnKSxcbiAgICAgICAgV2Vha01hcCA9IGdldE5hdGl2ZShjb250ZXh0LCAnV2Vha01hcCcpLFxuICAgICAgICBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbiAgICAvKiogVXNlZCB0byBzdG9yZSBmdW5jdGlvbiBtZXRhZGF0YS4gKi9cbiAgICB2YXIgbWV0YU1hcCA9IFdlYWtNYXAgJiYgbmV3IFdlYWtNYXA7XG5cbiAgICAvKiogVXNlZCB0byBsb29rdXAgdW5taW5pZmllZCBmdW5jdGlvbiBuYW1lcy4gKi9cbiAgICB2YXIgcmVhbE5hbWVzID0ge307XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqL1xuICAgIHZhciBkYXRhVmlld0N0b3JTdHJpbmcgPSB0b1NvdXJjZShEYXRhVmlldyksXG4gICAgICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgICAgICBwcm9taXNlQ3RvclN0cmluZyA9IHRvU291cmNlKFByb21pc2UpLFxuICAgICAgICBzZXRDdG9yU3RyaW5nID0gdG9Tb3VyY2UoU2V0KSxcbiAgICAgICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuICAgIC8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xuICAgIHZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by50b1N0cmluZyA6IHVuZGVmaW5lZDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCBvYmplY3Qgd2hpY2ggd3JhcHMgYHZhbHVlYCB0byBlbmFibGUgaW1wbGljaXQgbWV0aG9kXG4gICAgICogY2hhaW4gc2VxdWVuY2VzLiBNZXRob2RzIHRoYXQgb3BlcmF0ZSBvbiBhbmQgcmV0dXJuIGFycmF5cywgY29sbGVjdGlvbnMsXG4gICAgICogYW5kIGZ1bmN0aW9ucyBjYW4gYmUgY2hhaW5lZCB0b2dldGhlci4gTWV0aG9kcyB0aGF0IHJldHJpZXZlIGEgc2luZ2xlIHZhbHVlXG4gICAgICogb3IgbWF5IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZSB3aWxsIGF1dG9tYXRpY2FsbHkgZW5kIHRoZSBjaGFpbiBzZXF1ZW5jZVxuICAgICAqIGFuZCByZXR1cm4gdGhlIHVud3JhcHBlZCB2YWx1ZS4gT3RoZXJ3aXNlLCB0aGUgdmFsdWUgbXVzdCBiZSB1bndyYXBwZWRcbiAgICAgKiB3aXRoIGBfI3ZhbHVlYC5cbiAgICAgKlxuICAgICAqIEV4cGxpY2l0IGNoYWluIHNlcXVlbmNlcywgd2hpY2ggbXVzdCBiZSB1bndyYXBwZWQgd2l0aCBgXyN2YWx1ZWAsIG1heSBiZVxuICAgICAqIGVuYWJsZWQgdXNpbmcgYF8uY2hhaW5gLlxuICAgICAqXG4gICAgICogVGhlIGV4ZWN1dGlvbiBvZiBjaGFpbmVkIG1ldGhvZHMgaXMgbGF6eSwgdGhhdCBpcywgaXQncyBkZWZlcnJlZCB1bnRpbFxuICAgICAqIGBfI3ZhbHVlYCBpcyBpbXBsaWNpdGx5IG9yIGV4cGxpY2l0bHkgY2FsbGVkLlxuICAgICAqXG4gICAgICogTGF6eSBldmFsdWF0aW9uIGFsbG93cyBzZXZlcmFsIG1ldGhvZHMgdG8gc3VwcG9ydCBzaG9ydGN1dCBmdXNpb24uXG4gICAgICogU2hvcnRjdXQgZnVzaW9uIGlzIGFuIG9wdGltaXphdGlvbiB0byBtZXJnZSBpdGVyYXRlZSBjYWxsczsgdGhpcyBhdm9pZHNcbiAgICAgKiB0aGUgY3JlYXRpb24gb2YgaW50ZXJtZWRpYXRlIGFycmF5cyBhbmQgY2FuIGdyZWF0bHkgcmVkdWNlIHRoZSBudW1iZXIgb2ZcbiAgICAgKiBpdGVyYXRlZSBleGVjdXRpb25zLiBTZWN0aW9ucyBvZiBhIGNoYWluIHNlcXVlbmNlIHF1YWxpZnkgZm9yIHNob3J0Y3V0XG4gICAgICogZnVzaW9uIGlmIHRoZSBzZWN0aW9uIGlzIGFwcGxpZWQgdG8gYW4gYXJyYXkgYW5kIGl0ZXJhdGVlcyBhY2NlcHQgb25seVxuICAgICAqIG9uZSBhcmd1bWVudC4gVGhlIGhldXJpc3RpYyBmb3Igd2hldGhlciBhIHNlY3Rpb24gcXVhbGlmaWVzIGZvciBzaG9ydGN1dFxuICAgICAqIGZ1c2lvbiBpcyBzdWJqZWN0IHRvIGNoYW5nZS5cbiAgICAgKlxuICAgICAqIENoYWluaW5nIGlzIHN1cHBvcnRlZCBpbiBjdXN0b20gYnVpbGRzIGFzIGxvbmcgYXMgdGhlIGBfI3ZhbHVlYCBtZXRob2QgaXNcbiAgICAgKiBkaXJlY3RseSBvciBpbmRpcmVjdGx5IGluY2x1ZGVkIGluIHRoZSBidWlsZC5cbiAgICAgKlxuICAgICAqIEluIGFkZGl0aW9uIHRvIGxvZGFzaCBtZXRob2RzLCB3cmFwcGVycyBoYXZlIGBBcnJheWAgYW5kIGBTdHJpbmdgIG1ldGhvZHMuXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBgQXJyYXlgIG1ldGhvZHMgYXJlOlxuICAgICAqIGBjb25jYXRgLCBgam9pbmAsIGBwb3BgLCBgcHVzaGAsIGBzaGlmdGAsIGBzb3J0YCwgYHNwbGljZWAsIGFuZCBgdW5zaGlmdGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIGBTdHJpbmdgIG1ldGhvZHMgYXJlOlxuICAgICAqIGByZXBsYWNlYCBhbmQgYHNwbGl0YFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgbWV0aG9kcyB0aGF0IHN1cHBvcnQgc2hvcnRjdXQgZnVzaW9uIGFyZTpcbiAgICAgKiBgYXRgLCBgY29tcGFjdGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBkcm9wV2hpbGVgLCBgZmlsdGVyYCwgYGZpbmRgLFxuICAgICAqIGBmaW5kTGFzdGAsIGBoZWFkYCwgYGluaXRpYWxgLCBgbGFzdGAsIGBtYXBgLCBgcmVqZWN0YCwgYHJldmVyc2VgLCBgc2xpY2VgLFxuICAgICAqIGB0YWlsYCwgYHRha2VgLCBgdGFrZVJpZ2h0YCwgYHRha2VSaWdodFdoaWxlYCwgYHRha2VXaGlsZWAsIGFuZCBgdG9BcnJheWBcbiAgICAgKlxuICAgICAqIFRoZSBjaGFpbmFibGUgd3JhcHBlciBtZXRob2RzIGFyZTpcbiAgICAgKiBgYWZ0ZXJgLCBgYXJ5YCwgYGFzc2lnbmAsIGBhc3NpZ25JbmAsIGBhc3NpZ25JbldpdGhgLCBgYXNzaWduV2l0aGAsIGBhdGAsXG4gICAgICogYGJlZm9yZWAsIGBiaW5kYCwgYGJpbmRBbGxgLCBgYmluZEtleWAsIGBjYXN0QXJyYXlgLCBgY2hhaW5gLCBgY2h1bmtgLFxuICAgICAqIGBjb21taXRgLCBgY29tcGFjdGAsIGBjb25jYXRgLCBgY29uZm9ybXNgLCBgY29uc3RhbnRgLCBgY291bnRCeWAsIGBjcmVhdGVgLFxuICAgICAqIGBjdXJyeWAsIGBkZWJvdW5jZWAsIGBkZWZhdWx0c2AsIGBkZWZhdWx0c0RlZXBgLCBgZGVmZXJgLCBgZGVsYXlgLFxuICAgICAqIGBkaWZmZXJlbmNlYCwgYGRpZmZlcmVuY2VCeWAsIGBkaWZmZXJlbmNlV2l0aGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsXG4gICAgICogYGRyb3BSaWdodFdoaWxlYCwgYGRyb3BXaGlsZWAsIGBleHRlbmRgLCBgZXh0ZW5kV2l0aGAsIGBmaWxsYCwgYGZpbHRlcmAsXG4gICAgICogYGZsYXRNYXBgLCBgZmxhdE1hcERlZXBgLCBgZmxhdE1hcERlcHRoYCwgYGZsYXR0ZW5gLCBgZmxhdHRlbkRlZXBgLFxuICAgICAqIGBmbGF0dGVuRGVwdGhgLCBgZmxpcGAsIGBmbG93YCwgYGZsb3dSaWdodGAsIGBmcm9tUGFpcnNgLCBgZnVuY3Rpb25zYCxcbiAgICAgKiBgZnVuY3Rpb25zSW5gLCBgZ3JvdXBCeWAsIGBpbml0aWFsYCwgYGludGVyc2VjdGlvbmAsIGBpbnRlcnNlY3Rpb25CeWAsXG4gICAgICogYGludGVyc2VjdGlvbldpdGhgLCBgaW52ZXJ0YCwgYGludmVydEJ5YCwgYGludm9rZU1hcGAsIGBpdGVyYXRlZWAsIGBrZXlCeWAsXG4gICAgICogYGtleXNgLCBga2V5c0luYCwgYG1hcGAsIGBtYXBLZXlzYCwgYG1hcFZhbHVlc2AsIGBtYXRjaGVzYCwgYG1hdGNoZXNQcm9wZXJ0eWAsXG4gICAgICogYG1lbW9pemVgLCBgbWVyZ2VgLCBgbWVyZ2VXaXRoYCwgYG1ldGhvZGAsIGBtZXRob2RPZmAsIGBtaXhpbmAsIGBuZWdhdGVgLFxuICAgICAqIGBudGhBcmdgLCBgb21pdGAsIGBvbWl0QnlgLCBgb25jZWAsIGBvcmRlckJ5YCwgYG92ZXJgLCBgb3ZlckFyZ3NgLFxuICAgICAqIGBvdmVyRXZlcnlgLCBgb3ZlclNvbWVgLCBgcGFydGlhbGAsIGBwYXJ0aWFsUmlnaHRgLCBgcGFydGl0aW9uYCwgYHBpY2tgLFxuICAgICAqIGBwaWNrQnlgLCBgcGxhbnRgLCBgcHJvcGVydHlgLCBgcHJvcGVydHlPZmAsIGBwdWxsYCwgYHB1bGxBbGxgLCBgcHVsbEFsbEJ5YCxcbiAgICAgKiBgcHVsbEFsbFdpdGhgLCBgcHVsbEF0YCwgYHB1c2hgLCBgcmFuZ2VgLCBgcmFuZ2VSaWdodGAsIGByZWFyZ2AsIGByZWplY3RgLFxuICAgICAqIGByZW1vdmVgLCBgcmVzdGAsIGByZXZlcnNlYCwgYHNhbXBsZVNpemVgLCBgc2V0YCwgYHNldFdpdGhgLCBgc2h1ZmZsZWAsXG4gICAgICogYHNsaWNlYCwgYHNvcnRgLCBgc29ydEJ5YCwgYHNwbGljZWAsIGBzcHJlYWRgLCBgdGFpbGAsIGB0YWtlYCwgYHRha2VSaWdodGAsXG4gICAgICogYHRha2VSaWdodFdoaWxlYCwgYHRha2VXaGlsZWAsIGB0YXBgLCBgdGhyb3R0bGVgLCBgdGhydWAsIGB0b0FycmF5YCxcbiAgICAgKiBgdG9QYWlyc2AsIGB0b1BhaXJzSW5gLCBgdG9QYXRoYCwgYHRvUGxhaW5PYmplY3RgLCBgdHJhbnNmb3JtYCwgYHVuYXJ5YCxcbiAgICAgKiBgdW5pb25gLCBgdW5pb25CeWAsIGB1bmlvbldpdGhgLCBgdW5pcWAsIGB1bmlxQnlgLCBgdW5pcVdpdGhgLCBgdW5zZXRgLFxuICAgICAqIGB1bnNoaWZ0YCwgYHVuemlwYCwgYHVuemlwV2l0aGAsIGB1cGRhdGVgLCBgdXBkYXRlV2l0aGAsIGB2YWx1ZXNgLFxuICAgICAqIGB2YWx1ZXNJbmAsIGB3aXRob3V0YCwgYHdyYXBgLCBgeG9yYCwgYHhvckJ5YCwgYHhvcldpdGhgLCBgemlwYCxcbiAgICAgKiBgemlwT2JqZWN0YCwgYHppcE9iamVjdERlZXBgLCBhbmQgYHppcFdpdGhgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBtZXRob2RzIHRoYXQgYXJlICoqbm90KiogY2hhaW5hYmxlIGJ5IGRlZmF1bHQgYXJlOlxuICAgICAqIGBhZGRgLCBgYXR0ZW1wdGAsIGBjYW1lbENhc2VgLCBgY2FwaXRhbGl6ZWAsIGBjZWlsYCwgYGNsYW1wYCwgYGNsb25lYCxcbiAgICAgKiBgY2xvbmVEZWVwYCwgYGNsb25lRGVlcFdpdGhgLCBgY2xvbmVXaXRoYCwgYGNvbmZvcm1zVG9gLCBgZGVidXJyYCxcbiAgICAgKiBgZGVmYXVsdFRvYCwgYGRpdmlkZWAsIGBlYWNoYCwgYGVhY2hSaWdodGAsIGBlbmRzV2l0aGAsIGBlcWAsIGBlc2NhcGVgLFxuICAgICAqIGBlc2NhcGVSZWdFeHBgLCBgZXZlcnlgLCBgZmluZGAsIGBmaW5kSW5kZXhgLCBgZmluZEtleWAsIGBmaW5kTGFzdGAsXG4gICAgICogYGZpbmRMYXN0SW5kZXhgLCBgZmluZExhc3RLZXlgLCBgZmlyc3RgLCBgZmxvb3JgLCBgZm9yRWFjaGAsIGBmb3JFYWNoUmlnaHRgLFxuICAgICAqIGBmb3JJbmAsIGBmb3JJblJpZ2h0YCwgYGZvck93bmAsIGBmb3JPd25SaWdodGAsIGBnZXRgLCBgZ3RgLCBgZ3RlYCwgYGhhc2AsXG4gICAgICogYGhhc0luYCwgYGhlYWRgLCBgaWRlbnRpdHlgLCBgaW5jbHVkZXNgLCBgaW5kZXhPZmAsIGBpblJhbmdlYCwgYGludm9rZWAsXG4gICAgICogYGlzQXJndW1lbnRzYCwgYGlzQXJyYXlgLCBgaXNBcnJheUJ1ZmZlcmAsIGBpc0FycmF5TGlrZWAsIGBpc0FycmF5TGlrZU9iamVjdGAsXG4gICAgICogYGlzQm9vbGVhbmAsIGBpc0J1ZmZlcmAsIGBpc0RhdGVgLCBgaXNFbGVtZW50YCwgYGlzRW1wdHlgLCBgaXNFcXVhbGAsXG4gICAgICogYGlzRXF1YWxXaXRoYCwgYGlzRXJyb3JgLCBgaXNGaW5pdGVgLCBgaXNGdW5jdGlvbmAsIGBpc0ludGVnZXJgLCBgaXNMZW5ndGhgLFxuICAgICAqIGBpc01hcGAsIGBpc01hdGNoYCwgYGlzTWF0Y2hXaXRoYCwgYGlzTmFOYCwgYGlzTmF0aXZlYCwgYGlzTmlsYCwgYGlzTnVsbGAsXG4gICAgICogYGlzTnVtYmVyYCwgYGlzT2JqZWN0YCwgYGlzT2JqZWN0TGlrZWAsIGBpc1BsYWluT2JqZWN0YCwgYGlzUmVnRXhwYCxcbiAgICAgKiBgaXNTYWZlSW50ZWdlcmAsIGBpc1NldGAsIGBpc1N0cmluZ2AsIGBpc1VuZGVmaW5lZGAsIGBpc1R5cGVkQXJyYXlgLFxuICAgICAqIGBpc1dlYWtNYXBgLCBgaXNXZWFrU2V0YCwgYGpvaW5gLCBga2ViYWJDYXNlYCwgYGxhc3RgLCBgbGFzdEluZGV4T2ZgLFxuICAgICAqIGBsb3dlckNhc2VgLCBgbG93ZXJGaXJzdGAsIGBsdGAsIGBsdGVgLCBgbWF4YCwgYG1heEJ5YCwgYG1lYW5gLCBgbWVhbkJ5YCxcbiAgICAgKiBgbWluYCwgYG1pbkJ5YCwgYG11bHRpcGx5YCwgYG5vQ29uZmxpY3RgLCBgbm9vcGAsIGBub3dgLCBgbnRoYCwgYHBhZGAsXG4gICAgICogYHBhZEVuZGAsIGBwYWRTdGFydGAsIGBwYXJzZUludGAsIGBwb3BgLCBgcmFuZG9tYCwgYHJlZHVjZWAsIGByZWR1Y2VSaWdodGAsXG4gICAgICogYHJlcGVhdGAsIGByZXN1bHRgLCBgcm91bmRgLCBgcnVuSW5Db250ZXh0YCwgYHNhbXBsZWAsIGBzaGlmdGAsIGBzaXplYCxcbiAgICAgKiBgc25ha2VDYXNlYCwgYHNvbWVgLCBgc29ydGVkSW5kZXhgLCBgc29ydGVkSW5kZXhCeWAsIGBzb3J0ZWRMYXN0SW5kZXhgLFxuICAgICAqIGBzb3J0ZWRMYXN0SW5kZXhCeWAsIGBzdGFydENhc2VgLCBgc3RhcnRzV2l0aGAsIGBzdHViQXJyYXlgLCBgc3R1YkZhbHNlYCxcbiAgICAgKiBgc3R1Yk9iamVjdGAsIGBzdHViU3RyaW5nYCwgYHN0dWJUcnVlYCwgYHN1YnRyYWN0YCwgYHN1bWAsIGBzdW1CeWAsXG4gICAgICogYHRlbXBsYXRlYCwgYHRpbWVzYCwgYHRvRmluaXRlYCwgYHRvSW50ZWdlcmAsIGB0b0pTT05gLCBgdG9MZW5ndGhgLFxuICAgICAqIGB0b0xvd2VyYCwgYHRvTnVtYmVyYCwgYHRvU2FmZUludGVnZXJgLCBgdG9TdHJpbmdgLCBgdG9VcHBlcmAsIGB0cmltYCxcbiAgICAgKiBgdHJpbUVuZGAsIGB0cmltU3RhcnRgLCBgdHJ1bmNhdGVgLCBgdW5lc2NhcGVgLCBgdW5pcXVlSWRgLCBgdXBwZXJDYXNlYCxcbiAgICAgKiBgdXBwZXJGaXJzdGAsIGB2YWx1ZWAsIGFuZCBgd29yZHNgXG4gICAgICpcbiAgICAgKiBAbmFtZSBfXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAgaW4gYSBgbG9kYXNoYCBpbnN0YW5jZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDIsIDNdKTtcbiAgICAgKlxuICAgICAqIC8vIFJldHVybnMgYW4gdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIHdyYXBwZWQucmVkdWNlKF8uYWRkKTtcbiAgICAgKiAvLyA9PiA2XG4gICAgICpcbiAgICAgKiAvLyBSZXR1cm5zIGEgd3JhcHBlZCB2YWx1ZS5cbiAgICAgKiB2YXIgc3F1YXJlcyA9IHdyYXBwZWQubWFwKHNxdWFyZSk7XG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoc3F1YXJlcyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShzcXVhcmVzLnZhbHVlKCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsb2Rhc2godmFsdWUpIHtcbiAgICAgIGlmIChpc09iamVjdExpa2UodmFsdWUpICYmICFpc0FycmF5KHZhbHVlKSAmJiAhKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpKSB7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIExvZGFzaFdyYXBwZXIpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdfX3dyYXBwZWRfXycpKSB7XG4gICAgICAgICAgcmV0dXJuIHdyYXBwZXJDbG9uZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY3JlYXRlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGFzc2lnbmluZ1xuICAgICAqIHByb3BlcnRpZXMgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvdG8gVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUNyZWF0ZSA9IChmdW5jdGlvbigpIHtcbiAgICAgIGZ1bmN0aW9uIG9iamVjdCgpIHt9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocHJvdG8pIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChwcm90bykpIHtcbiAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9iamVjdENyZWF0ZSkge1xuICAgICAgICAgIHJldHVybiBvYmplY3RDcmVhdGUocHJvdG8pO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdC5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBvYmplY3Q7XG4gICAgICAgIG9iamVjdC5wcm90b3R5cGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH0oKSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZnVuY3Rpb24gd2hvc2UgcHJvdG90eXBlIGNoYWluIHNlcXVlbmNlIHdyYXBwZXJzIGluaGVyaXQgZnJvbS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUxvZGFzaCgpIHtcbiAgICAgIC8vIE5vIG9wZXJhdGlvbiBwZXJmb3JtZWQuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgY29uc3RydWN0b3IgZm9yIGNyZWF0aW5nIGBsb2Rhc2hgIHdyYXBwZXIgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtjaGFpbkFsbF0gRW5hYmxlIGV4cGxpY2l0IG1ldGhvZCBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTG9kYXNoV3JhcHBlcih2YWx1ZSwgY2hhaW5BbGwpIHtcbiAgICAgIHRoaXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgICAgIHRoaXMuX19hY3Rpb25zX18gPSBbXTtcbiAgICAgIHRoaXMuX19jaGFpbl9fID0gISFjaGFpbkFsbDtcbiAgICAgIHRoaXMuX19pbmRleF9fID0gMDtcbiAgICAgIHRoaXMuX192YWx1ZXNfXyA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCeSBkZWZhdWx0LCB0aGUgdGVtcGxhdGUgZGVsaW1pdGVycyB1c2VkIGJ5IGxvZGFzaCBhcmUgbGlrZSB0aG9zZSBpblxuICAgICAqIGVtYmVkZGVkIFJ1YnkgKEVSQikgYXMgd2VsbCBhcyBFUzIwMTUgdGVtcGxhdGUgc3RyaW5ncy4gQ2hhbmdlIHRoZVxuICAgICAqIGZvbGxvd2luZyB0ZW1wbGF0ZSBzZXR0aW5ncyB0byB1c2UgYWx0ZXJuYXRpdmUgZGVsaW1pdGVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgbG9kYXNoLnRlbXBsYXRlU2V0dGluZ3MgPSB7XG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgYGRhdGFgIHByb3BlcnR5IHZhbHVlcyB0byBiZSBIVE1MLWVzY2FwZWQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAqL1xuICAgICAgJ2VzY2FwZSc6IHJlRXNjYXBlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGNvZGUgdG8gYmUgZXZhbHVhdGVkLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtSZWdFeHB9XG4gICAgICAgKi9cbiAgICAgICdldmFsdWF0ZSc6IHJlRXZhbHVhdGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgYGRhdGFgIHByb3BlcnR5IHZhbHVlcyB0byBpbmplY3QuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAqL1xuICAgICAgJ2ludGVycG9sYXRlJzogcmVJbnRlcnBvbGF0ZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIHJlZmVyZW5jZSB0aGUgZGF0YSBvYmplY3QgaW4gdGhlIHRlbXBsYXRlIHRleHQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAqL1xuICAgICAgJ3ZhcmlhYmxlJzogJycsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBpbXBvcnQgdmFyaWFibGVzIGludG8gdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICAgKi9cbiAgICAgICdpbXBvcnRzJzoge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3MuaW1wb3J0c1xuICAgICAgICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAgICAgICAqL1xuICAgICAgICAnXyc6IGxvZGFzaFxuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBFbnN1cmUgd3JhcHBlcnMgYXJlIGluc3RhbmNlcyBvZiBgYmFzZUxvZGFzaGAuXG4gICAgbG9kYXNoLnByb3RvdHlwZSA9IGJhc2VMb2Rhc2gucHJvdG90eXBlO1xuICAgIGxvZGFzaC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBsb2Rhc2g7XG5cbiAgICBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZSA9IGJhc2VDcmVhdGUoYmFzZUxvZGFzaC5wcm90b3R5cGUpO1xuICAgIExvZGFzaFdyYXBwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTG9kYXNoV3JhcHBlcjtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBsYXp5IHdyYXBwZXIgb2JqZWN0IHdoaWNoIHdyYXBzIGB2YWx1ZWAgdG8gZW5hYmxlIGxhenkgZXZhbHVhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMYXp5V3JhcHBlcih2YWx1ZSkge1xuICAgICAgdGhpcy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgdGhpcy5fX2FjdGlvbnNfXyA9IFtdO1xuICAgICAgdGhpcy5fX2Rpcl9fID0gMTtcbiAgICAgIHRoaXMuX19maWx0ZXJlZF9fID0gZmFsc2U7XG4gICAgICB0aGlzLl9faXRlcmF0ZWVzX18gPSBbXTtcbiAgICAgIHRoaXMuX190YWtlQ291bnRfXyA9IE1BWF9BUlJBWV9MRU5HVEg7XG4gICAgICB0aGlzLl9fdmlld3NfXyA9IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgbGF6eSB3cmFwcGVyIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xvbmVcbiAgICAgKiBAbWVtYmVyT2YgTGF6eVdyYXBwZXJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgYExhenlXcmFwcGVyYCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eUNsb25lKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBMYXp5V3JhcHBlcih0aGlzLl9fd3JhcHBlZF9fKTtcbiAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXyA9IGNvcHlBcnJheSh0aGlzLl9fYWN0aW9uc19fKTtcbiAgICAgIHJlc3VsdC5fX2Rpcl9fID0gdGhpcy5fX2Rpcl9fO1xuICAgICAgcmVzdWx0Ll9fZmlsdGVyZWRfXyA9IHRoaXMuX19maWx0ZXJlZF9fO1xuICAgICAgcmVzdWx0Ll9faXRlcmF0ZWVzX18gPSBjb3B5QXJyYXkodGhpcy5fX2l0ZXJhdGVlc19fKTtcbiAgICAgIHJlc3VsdC5fX3Rha2VDb3VudF9fID0gdGhpcy5fX3Rha2VDb3VudF9fO1xuICAgICAgcmVzdWx0Ll9fdmlld3NfXyA9IGNvcHlBcnJheSh0aGlzLl9fdmlld3NfXyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmVyc2VzIHRoZSBkaXJlY3Rpb24gb2YgbGF6eSBpdGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHJldmVyc2VcbiAgICAgKiBAbWVtYmVyT2YgTGF6eVdyYXBwZXJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgcmV2ZXJzZWQgYExhenlXcmFwcGVyYCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eVJldmVyc2UoKSB7XG4gICAgICBpZiAodGhpcy5fX2ZpbHRlcmVkX18pIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgICAgcmVzdWx0Ll9fZGlyX18gPSAtMTtcbiAgICAgICAgcmVzdWx0Ll9fZmlsdGVyZWRfXyA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIHJlc3VsdC5fX2Rpcl9fICo9IC0xO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyB0aGUgdW53cmFwcGVkIHZhbHVlIGZyb20gaXRzIGxhenkgd3JhcHBlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgdmFsdWVcbiAgICAgKiBAbWVtYmVyT2YgTGF6eVdyYXBwZXJcbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhenlWYWx1ZSgpIHtcbiAgICAgIHZhciBhcnJheSA9IHRoaXMuX193cmFwcGVkX18udmFsdWUoKSxcbiAgICAgICAgICBkaXIgPSB0aGlzLl9fZGlyX18sXG4gICAgICAgICAgaXNBcnIgPSBpc0FycmF5KGFycmF5KSxcbiAgICAgICAgICBpc1JpZ2h0ID0gZGlyIDwgMCxcbiAgICAgICAgICBhcnJMZW5ndGggPSBpc0FyciA/IGFycmF5Lmxlbmd0aCA6IDAsXG4gICAgICAgICAgdmlldyA9IGdldFZpZXcoMCwgYXJyTGVuZ3RoLCB0aGlzLl9fdmlld3NfXyksXG4gICAgICAgICAgc3RhcnQgPSB2aWV3LnN0YXJ0LFxuICAgICAgICAgIGVuZCA9IHZpZXcuZW5kLFxuICAgICAgICAgIGxlbmd0aCA9IGVuZCAtIHN0YXJ0LFxuICAgICAgICAgIGluZGV4ID0gaXNSaWdodCA/IGVuZCA6IChzdGFydCAtIDEpLFxuICAgICAgICAgIGl0ZXJhdGVlcyA9IHRoaXMuX19pdGVyYXRlZXNfXyxcbiAgICAgICAgICBpdGVyTGVuZ3RoID0gaXRlcmF0ZWVzLmxlbmd0aCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgdGFrZUNvdW50ID0gbmF0aXZlTWluKGxlbmd0aCwgdGhpcy5fX3Rha2VDb3VudF9fKTtcblxuICAgICAgaWYgKCFpc0FyciB8fCAoIWlzUmlnaHQgJiYgYXJyTGVuZ3RoID09IGxlbmd0aCAmJiB0YWtlQ291bnQgPT0gbGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gYmFzZVdyYXBwZXJWYWx1ZShhcnJheSwgdGhpcy5fX2FjdGlvbnNfXyk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKGxlbmd0aC0tICYmIHJlc0luZGV4IDwgdGFrZUNvdW50KSB7XG4gICAgICAgIGluZGV4ICs9IGRpcjtcblxuICAgICAgICB2YXIgaXRlckluZGV4ID0gLTEsXG4gICAgICAgICAgICB2YWx1ZSA9IGFycmF5W2luZGV4XTtcblxuICAgICAgICB3aGlsZSAoKytpdGVySW5kZXggPCBpdGVyTGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSBpdGVyYXRlZXNbaXRlckluZGV4XSxcbiAgICAgICAgICAgICAgaXRlcmF0ZWUgPSBkYXRhLml0ZXJhdGVlLFxuICAgICAgICAgICAgICB0eXBlID0gZGF0YS50eXBlLFxuICAgICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICAgIGlmICh0eXBlID09IExBWllfTUFQX0ZMQUcpIHtcbiAgICAgICAgICAgIHZhbHVlID0gY29tcHV0ZWQ7XG4gICAgICAgICAgfSBlbHNlIGlmICghY29tcHV0ZWQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlID09IExBWllfRklMVEVSX0ZMQUcpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBicmVhayBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8vIEVuc3VyZSBgTGF6eVdyYXBwZXJgIGlzIGFuIGluc3RhbmNlIG9mIGBiYXNlTG9kYXNoYC5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUgPSBiYXNlQ3JlYXRlKGJhc2VMb2Rhc2gucHJvdG90eXBlKTtcbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMYXp5V3JhcHBlcjtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmF0aXZlQ3JlYXRlID8gbmF0aXZlQ3JlYXRlKG51bGwpIDoge307XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG4gICAgICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoR2V0KGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gZGF0YVtrZXldO1xuICAgICAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSkgPyBkYXRhW2tleV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgdGhpcy5zaXplICs9IHRoaXMuaGFzKGtleSkgPyAwIDogMTtcbiAgICAgIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuICAgIEhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuICAgIEhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG4gICAgSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbiAgICBIYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuICAgIEhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgICAgIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgZGF0YS5wb3AoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgICAgIH1cbiAgICAgIC0tdGhpcy5zaXplO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgICAgIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICAgICAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgICsrdGhpcy5zaXplO1xuICAgICAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbWFwIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIE1hcENhY2hlKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAgICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAgICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICAgICAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gICAgICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIG1hcCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmhhcyhrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgICAgIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuICAgIE1hcENhY2hlLnByb3RvdHlwZS5jbGVhciA9IG1hcENhY2hlQ2xlYXI7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuaGFzID0gbWFwQ2FjaGVIYXM7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IGNhY2hlIG9iamVjdCB0byBzdG9yZSB1bmlxdWUgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFNldENhY2hlKHZhbHVlcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdmFsdWVzID09IG51bGwgPyAwIDogdmFsdWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuYWRkKHZhbHVlc1tpbmRleF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgYHZhbHVlYCB0byB0aGUgYXJyYXkgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGFkZFxuICAgICAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICAgICAqIEBhbGlhcyBwdXNoXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2FjaGUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0Q2FjaGVBZGQodmFsdWUpIHtcbiAgICAgIHRoaXMuX19kYXRhX18uc2V0KHZhbHVlLCBIQVNIX1VOREVGSU5FRCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiB0aGUgYXJyYXkgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldENhY2hlSGFzKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXModmFsdWUpO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBTZXRDYWNoZWAuXG4gICAgU2V0Q2FjaGUucHJvdG90eXBlLmFkZCA9IFNldENhY2hlLnByb3RvdHlwZS5wdXNoID0gc2V0Q2FjaGVBZGQ7XG4gICAgU2V0Q2FjaGUucHJvdG90eXBlLmhhcyA9IHNldENhY2hlSGFzO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHN0YWNrIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFN0YWNrKGVudHJpZXMpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7XG4gICAgICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgc3RhY2suXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tDbGVhcigpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlO1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0RlbGV0ZShrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICByZXN1bHQgPSBkYXRhWydkZWxldGUnXShrZXkpO1xuXG4gICAgICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrR2V0KGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgc3RhY2sgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrSGFzKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgc3RhY2sgYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHN0YWNrIGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgICAgIHZhciBwYWlycyA9IGRhdGEuX19kYXRhX187XG4gICAgICAgIGlmICghTWFwIHx8IChwYWlycy5sZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIC0gMSkpIHtcbiAgICAgICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICAgICAgdGhpcy5zaXplID0gKytkYXRhLnNpemU7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGUocGFpcnMpO1xuICAgICAgfVxuICAgICAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgU3RhY2tgLlxuICAgIFN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG4gICAgU3RhY2sucHJvdG90eXBlWydkZWxldGUnXSA9IHN0YWNrRGVsZXRlO1xuICAgIFN0YWNrLnByb3RvdHlwZS5nZXQgPSBzdGFja0dldDtcbiAgICBTdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG4gICAgU3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiB0aGUgYXJyYXktbGlrZSBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgICAgIGlzQXJnID0gIWlzQXJyICYmIGlzQXJndW1lbnRzKHZhbHVlKSxcbiAgICAgICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgICAgICBza2lwSW5kZXhlcyA9IGlzQXJyIHx8IGlzQXJnIHx8IGlzQnVmZiB8fCBpc1R5cGUsXG4gICAgICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgICAgIC8vIFNhZmFyaSA5IGhhcyBlbnVtZXJhYmxlIGBhcmd1bWVudHMubGVuZ3RoYCBpbiBzdHJpY3QgbW9kZS5cbiAgICAgICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAgICAgLy8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG4gICAgICAgICAgICAgICAoaXNCdWZmICYmIChrZXkgPT0gJ29mZnNldCcgfHwga2V5ID09ICdwYXJlbnQnKSkgfHxcbiAgICAgICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgICAgIChpc1R5cGUgJiYgKGtleSA9PSAnYnVmZmVyJyB8fCBrZXkgPT0gJ2J5dGVMZW5ndGgnIHx8IGtleSA9PSAnYnl0ZU9mZnNldCcpKSB8fFxuICAgICAgICAgICAgICAgLy8gU2tpcCBpbmRleCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgICAgICkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2FtcGxlYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheVNhbXBsZShhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBhcnJheVtiYXNlUmFuZG9tKDAsIGxlbmd0aCAtIDEpXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2FtcGxlU2l6ZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheVNhbXBsZVNpemUoYXJyYXksIG4pIHtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZihjb3B5QXJyYXkoYXJyYXkpLCBiYXNlQ2xhbXAobiwgMCwgYXJyYXkubGVuZ3RoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNodWZmbGVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzaHVmZmxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNodWZmbGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2h1ZmZsZShhcnJheSkge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGNvcHlBcnJheShhcnJheSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXNzaWduVmFsdWVgIGV4Y2VwdCB0aGF0IGl0IGRvZXNuJ3QgYXNzaWduXG4gICAgICogYHVuZGVmaW5lZGAgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKCh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmICFlcShvYmplY3Rba2V5XSwgdmFsdWUpKSB8fFxuICAgICAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgYHZhbHVlYCB0byBga2V5YCBvZiBgb2JqZWN0YCBpZiB0aGUgZXhpc3RpbmcgdmFsdWUgaXMgbm90IGVxdWl2YWxlbnRcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgICAgIGlmICghKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGVxKG9ialZhbHVlLCB2YWx1ZSkpIHx8XG4gICAgICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZ2dyZWdhdGVzIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCBvbiBgYWNjdW11bGF0b3JgIHdpdGgga2V5cyB0cmFuc2Zvcm1lZFxuICAgICAqIGJ5IGBpdGVyYXRlZWAgYW5kIHZhbHVlcyBzZXQgYnkgYHNldHRlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIGFnZ3JlZ2F0ZWQgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBZ2dyZWdhdG9yKGNvbGxlY3Rpb24sIHNldHRlciwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHNldHRlcihhY2N1bXVsYXRvciwgdmFsdWUsIGl0ZXJhdGVlKHZhbHVlKSwgY29sbGVjdGlvbik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICAgICAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbkluYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAgICAgKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBc3NpZ25JbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGFzc2lnblZhbHVlYCBhbmQgYGFzc2lnbk1lcmdlVmFsdWVgIHdpdGhvdXRcbiAgICAgKiB2YWx1ZSBjaGVja3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIGlmIChrZXkgPT0gJ19fcHJvdG9fXycgJiYgZGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgZGVmaW5lUHJvcGVydHkob2JqZWN0LCBrZXksIHtcbiAgICAgICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgICAnZW51bWVyYWJsZSc6IHRydWUsXG4gICAgICAgICAgJ3ZhbHVlJzogdmFsdWUsXG4gICAgICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHBpY2tlZCBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXQob2JqZWN0LCBwYXRocykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgc2tpcCA9IG9iamVjdCA9PSBudWxsO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbaW5kZXhdID0gc2tpcCA/IHVuZGVmaW5lZCA6IGdldChvYmplY3QsIHBhdGhzW2luZGV4XSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsYW1wYCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjbGFtcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyXSBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjbGFtcGVkIG51bWJlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ2xhbXAobnVtYmVyLCBsb3dlciwgdXBwZXIpIHtcbiAgICAgIGlmIChudW1iZXIgPT09IG51bWJlcikge1xuICAgICAgICBpZiAodXBwZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG51bWJlciA9IG51bWJlciA8PSB1cHBlciA/IG51bWJlciA6IHVwcGVyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsb3dlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbnVtYmVyID0gbnVtYmVyID49IGxvd2VyID8gbnVtYmVyIDogbG93ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudW1iZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xvbmVgIGFuZCBgXy5jbG9uZURlZXBgIHdoaWNoIHRyYWNrc1xuICAgICAqIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gICAgICogIDEgLSBEZWVwIGNsb25lXG4gICAgICogIDIgLSBGbGF0dGVuIGluaGVyaXRlZCBwcm9wZXJ0aWVzXG4gICAgICogIDQgLSBDbG9uZSBzeW1ib2xzXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2tleV0gVGhlIGtleSBvZiBgdmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgcGFyZW50IG9iamVjdCBvZiBgdmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBhbmQgdGhlaXIgY2xvbmUgY291bnRlcnBhcnRzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNsb25lKHZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIG9iamVjdCwgc3RhY2spIHtcbiAgICAgIHZhciByZXN1bHQsXG4gICAgICAgICAgaXNEZWVwID0gYml0bWFzayAmIENMT05FX0RFRVBfRkxBRyxcbiAgICAgICAgICBpc0ZsYXQgPSBiaXRtYXNrICYgQ0xPTkVfRkxBVF9GTEFHLFxuICAgICAgICAgIGlzRnVsbCA9IGJpdG1hc2sgJiBDTE9ORV9TWU1CT0xTX0ZMQUc7XG5cbiAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgIHJlc3VsdCA9IG9iamVjdCA/IGN1c3RvbWl6ZXIodmFsdWUsIGtleSwgb2JqZWN0LCBzdGFjaykgOiBjdXN0b21pemVyKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSk7XG4gICAgICBpZiAoaXNBcnIpIHtcbiAgICAgICAgcmVzdWx0ID0gaW5pdENsb25lQXJyYXkodmFsdWUpO1xuICAgICAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgICAgIHJldHVybiBjb3B5QXJyYXkodmFsdWUsIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpLFxuICAgICAgICAgICAgaXNGdW5jID0gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZztcblxuICAgICAgICBpZiAoaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGNsb25lQnVmZmVyKHZhbHVlLCBpc0RlZXApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YWcgPT0gb2JqZWN0VGFnIHx8IHRhZyA9PSBhcmdzVGFnIHx8IChpc0Z1bmMgJiYgIW9iamVjdCkpIHtcbiAgICAgICAgICByZXN1bHQgPSAoaXNGbGF0IHx8IGlzRnVuYykgPyB7fSA6IGluaXRDbG9uZU9iamVjdCh2YWx1ZSk7XG4gICAgICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgICAgIHJldHVybiBpc0ZsYXRcbiAgICAgICAgICAgICAgPyBjb3B5U3ltYm9sc0luKHZhbHVlLCBiYXNlQXNzaWduSW4ocmVzdWx0LCB2YWx1ZSkpXG4gICAgICAgICAgICAgIDogY29weVN5bWJvbHModmFsdWUsIGJhc2VBc3NpZ24ocmVzdWx0LCB2YWx1ZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIWNsb25lYWJsZVRhZ3NbdGFnXSkge1xuICAgICAgICAgICAgcmV0dXJuIG9iamVjdCA/IHZhbHVlIDoge307XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IGluaXRDbG9uZUJ5VGFnKHZhbHVlLCB0YWcsIGlzRGVlcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIENoZWNrIGZvciBjaXJjdWxhciByZWZlcmVuY2VzIGFuZCByZXR1cm4gaXRzIGNvcnJlc3BvbmRpbmcgY2xvbmUuXG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQodmFsdWUpO1xuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQ7XG4gICAgICB9XG4gICAgICBzdGFjay5zZXQodmFsdWUsIHJlc3VsdCk7XG5cbiAgICAgIGlmIChpc1NldCh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSkge1xuICAgICAgICAgIHJlc3VsdC5hZGQoYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdWJWYWx1ZSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChpc01hcCh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICAgICAgcmVzdWx0LnNldChrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBrZXlzRnVuYyA9IGlzRnVsbFxuICAgICAgICA/IChpc0ZsYXQgPyBnZXRBbGxLZXlzSW4gOiBnZXRBbGxLZXlzKVxuICAgICAgICA6IChpc0ZsYXQgPyBrZXlzSW4gOiBrZXlzKTtcblxuICAgICAgdmFyIHByb3BzID0gaXNBcnIgPyB1bmRlZmluZWQgOiBrZXlzRnVuYyh2YWx1ZSk7XG4gICAgICBhcnJheUVhY2gocHJvcHMgfHwgdmFsdWUsIGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKHByb3BzKSB7XG4gICAgICAgICAga2V5ID0gc3ViVmFsdWU7XG4gICAgICAgICAgc3ViVmFsdWUgPSB2YWx1ZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IHBvcHVsYXRlIGNsb25lIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY29uZm9ybXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ29uZm9ybXMoc291cmNlKSB7XG4gICAgICB2YXIgcHJvcHMgPSBrZXlzKHNvdXJjZSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwgcHJvcHMpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jb25mb3Jtc1RvYCB3aGljaCBhY2NlcHRzIGBwcm9wc2AgdG8gY2hlY2suXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGNvbmZvcm1zLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UsIHByb3BzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAhbGVuZ3RoO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGtleSA9IHByb3BzW2xlbmd0aF0sXG4gICAgICAgICAgICBwcmVkaWNhdGUgPSBzb3VyY2Vba2V5XSxcbiAgICAgICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgaWYgKCh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHx8ICFwcmVkaWNhdGUodmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5kZWxheWAgYW5kIGBfLmRlZmVyYCB3aGljaCBhY2NlcHRzIGBhcmdzYFxuICAgICAqIHRvIHByb3ZpZGUgdG8gYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBwcm92aWRlIHRvIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfE9iamVjdH0gUmV0dXJucyB0aGUgdGltZXIgaWQgb3IgdGltZW91dCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZURlbGF5KGZ1bmMsIHdhaXQsIGFyZ3MpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7IH0sIHdhaXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5kaWZmZXJlbmNlYCB3aXRob3V0IHN1cHBvcnRcbiAgICAgKiBmb3IgZXhjbHVkaW5nIG11bHRpcGxlIGFycmF5cyBvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VEaWZmZXJlbmNlKGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgaXNDb21tb24gPSB0cnVlLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBbXSxcbiAgICAgICAgICB2YWx1ZXNMZW5ndGggPSB2YWx1ZXMubGVuZ3RoO1xuXG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhbHVlcyA9IGFycmF5TWFwKHZhbHVlcywgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gICAgICB9XG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodmFsdWVzLmxlbmd0aCA+PSBMQVJHRV9BUlJBWV9TSVpFKSB7XG4gICAgICAgIGluY2x1ZGVzID0gY2FjaGVIYXM7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcyA9IG5ldyBTZXRDYWNoZSh2YWx1ZXMpO1xuICAgICAgfVxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID09IG51bGwgPyB2YWx1ZSA6IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKGlzQ29tbW9uICYmIGNvbXB1dGVkID09PSBjb21wdXRlZCkge1xuICAgICAgICAgIHZhciB2YWx1ZXNJbmRleCA9IHZhbHVlc0xlbmd0aDtcbiAgICAgICAgICB3aGlsZSAodmFsdWVzSW5kZXgtLSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlc1t2YWx1ZXNJbmRleF0gPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWluY2x1ZGVzKHZhbHVlcywgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICovXG4gICAgdmFyIGJhc2VFYWNoID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93bik7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JFYWNoUmlnaHRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICovXG4gICAgdmFyIGJhc2VFYWNoUmlnaHQgPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duUmlnaHQsIHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZXZlcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRXZlcnkoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHQgPSAhIXByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5tYXhgIGFuZCBgXy5taW5gIHdoaWNoIGFjY2VwdHMgYVxuICAgICAqIGBjb21wYXJhdG9yYCB0byBkZXRlcm1pbmUgdGhlIGV4dHJlbXVtIHZhbHVlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciB1c2VkIHRvIGNvbXBhcmUgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBleHRyZW11bSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRXh0cmVtdW0oYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGN1cnJlbnQgPSBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgICAgaWYgKGN1cnJlbnQgIT0gbnVsbCAmJiAoY29tcHV0ZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IChjdXJyZW50ID09PSBjdXJyZW50ICYmICFpc1N5bWJvbChjdXJyZW50KSlcbiAgICAgICAgICAgICAgOiBjb21wYXJhdG9yKGN1cnJlbnQsIGNvbXB1dGVkKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIHZhciBjb21wdXRlZCA9IGN1cnJlbnQsXG4gICAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbGxgIHdpdGhvdXQgYW4gaXRlcmF0ZWUgY2FsbCBndWFyZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZpbGwuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZmlsbCBgYXJyYXlgIHdpdGguXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgc3RhcnQgPSB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICBzdGFydCA9IC1zdGFydCA+IGxlbmd0aCA/IDAgOiAobGVuZ3RoICsgc3RhcnQpO1xuICAgICAgfVxuICAgICAgZW5kID0gKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IGxlbmd0aCkgPyBsZW5ndGggOiB0b0ludGVnZXIoZW5kKTtcbiAgICAgIGlmIChlbmQgPCAwKSB7XG4gICAgICAgIGVuZCArPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBlbmQgPSBzdGFydCA+IGVuZCA/IDAgOiB0b0xlbmd0aChlbmQpO1xuICAgICAgd2hpbGUgKHN0YXJ0IDwgZW5kKSB7XG4gICAgICAgIGFycmF5W3N0YXJ0KytdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmlsdGVyYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmlsdGVyKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZsYXR0ZW5gIHdpdGggc3VwcG9ydCBmb3IgcmVzdHJpY3RpbmcgZmxhdHRlbmluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRlcHRoIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtwcmVkaWNhdGU9aXNGbGF0dGVuYWJsZV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1N0cmljdF0gUmVzdHJpY3QgdG8gdmFsdWVzIHRoYXQgcGFzcyBgcHJlZGljYXRlYCBjaGVja3MuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdD1bXV0gVGhlIGluaXRpYWwgcmVzdWx0IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgsIHByZWRpY2F0ZSwgaXNTdHJpY3QsIHJlc3VsdCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBwcmVkaWNhdGUgfHwgKHByZWRpY2F0ZSA9IGlzRmxhdHRlbmFibGUpO1xuICAgICAgcmVzdWx0IHx8IChyZXN1bHQgPSBbXSk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKGRlcHRoID4gMCAmJiBwcmVkaWNhdGUodmFsdWUpKSB7XG4gICAgICAgICAgaWYgKGRlcHRoID4gMSkge1xuICAgICAgICAgICAgLy8gUmVjdXJzaXZlbHkgZmxhdHRlbiBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgICAgIGJhc2VGbGF0dGVuKHZhbHVlLCBkZXB0aCAtIDEsIHByZWRpY2F0ZSwgaXNTdHJpY3QsIHJlc3VsdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFycmF5UHVzaChyZXN1bHQsIHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzU3RyaWN0KSB7XG4gICAgICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGJhc2VGb3JPd25gIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYG9iamVjdGBcbiAgICAgKiBwcm9wZXJ0aWVzIHJldHVybmVkIGJ5IGBrZXlzRnVuY2AgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAgICAgKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgdmFyIGJhc2VGb3IgPSBjcmVhdGVCYXNlRm9yKCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGJhc2VGb3JgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllc1xuICAgICAqIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUZvclJpZ2h0ID0gY3JlYXRlQmFzZUZvcih0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvck93bmAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvcihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25SaWdodGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRm9yT3duUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yUmlnaHQob2JqZWN0LCBpdGVyYXRlZSwga2V5cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZnVuY3Rpb25zYCB3aGljaCBjcmVhdGVzIGFuIGFycmF5IG9mXG4gICAgICogYG9iamVjdGAgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZmlsdGVyZWQgZnJvbSBgcHJvcHNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZmlsdGVyLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZ1bmN0aW9ucyhvYmplY3QsIHByb3BzKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaWx0ZXIocHJvcHMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihvYmplY3Rba2V5XSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5nZXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVmYXVsdCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChvYmplY3QgIT0gbnVsbCAmJiBpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBvYmplY3QgPSBvYmplY3RbdG9LZXkocGF0aFtpbmRleCsrXSldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChpbmRleCAmJiBpbmRleCA9PSBsZW5ndGgpID8gb2JqZWN0IDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRBbGxLZXlzYCBhbmQgYGdldEFsbEtleXNJbmAgd2hpY2ggdXNlc1xuICAgICAqIGBrZXlzRnVuY2AgYW5kIGBzeW1ib2xzRnVuY2AgdG8gZ2V0IHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICAgICAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN5bWJvbHNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNGdW5jLCBzeW1ib2xzRnVuYykge1xuICAgICAgdmFyIHJlc3VsdCA9IGtleXNGdW5jKG9iamVjdCk7XG4gICAgICByZXR1cm4gaXNBcnJheShvYmplY3QpID8gcmVzdWx0IDogYXJyYXlQdXNoKHJlc3VsdCwgc3ltYm9sc0Z1bmMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gICAgICB9XG4gICAgICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgICAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5ndGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR3QodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPiBvdGhlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSGFzKG9iamVjdCwga2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSGFzSW4ob2JqZWN0LCBrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBrZXkgaW4gT2JqZWN0KG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW5SYW5nZWAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG51bWJlcmAgaXMgaW4gdGhlIHJhbmdlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKSB7XG4gICAgICByZXR1cm4gbnVtYmVyID49IG5hdGl2ZU1pbihzdGFydCwgZW5kKSAmJiBudW1iZXIgPCBuYXRpdmVNYXgoc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmludGVyc2VjdGlvbmAsIHdpdGhvdXQgc3VwcG9ydFxuICAgICAqIGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB0aGF0IGFjY2VwdHMgYW4gYXJyYXkgb2YgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5cyBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBzaGFyZWQgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnRlcnNlY3Rpb24oYXJyYXlzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluY2x1ZGVzID0gY29tcGFyYXRvciA/IGFycmF5SW5jbHVkZXNXaXRoIDogYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheXNbMF0ubGVuZ3RoLFxuICAgICAgICAgIG90aExlbmd0aCA9IGFycmF5cy5sZW5ndGgsXG4gICAgICAgICAgb3RoSW5kZXggPSBvdGhMZW5ndGgsXG4gICAgICAgICAgY2FjaGVzID0gQXJyYXkob3RoTGVuZ3RoKSxcbiAgICAgICAgICBtYXhMZW5ndGggPSBJbmZpbml0eSxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKG90aEluZGV4LS0pIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJyYXlzW290aEluZGV4XTtcbiAgICAgICAgaWYgKG90aEluZGV4ICYmIGl0ZXJhdGVlKSB7XG4gICAgICAgICAgYXJyYXkgPSBhcnJheU1hcChhcnJheSwgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgbWF4TGVuZ3RoID0gbmF0aXZlTWluKGFycmF5Lmxlbmd0aCwgbWF4TGVuZ3RoKTtcbiAgICAgICAgY2FjaGVzW290aEluZGV4XSA9ICFjb21wYXJhdG9yICYmIChpdGVyYXRlZSB8fCAobGVuZ3RoID49IDEyMCAmJiBhcnJheS5sZW5ndGggPj0gMTIwKSlcbiAgICAgICAgICA/IG5ldyBTZXRDYWNoZShvdGhJbmRleCAmJiBhcnJheSlcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGFycmF5ID0gYXJyYXlzWzBdO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBzZWVuID0gY2FjaGVzWzBdO1xuXG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIHJlc3VsdC5sZW5ndGggPCBtYXhMZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoIShzZWVuXG4gICAgICAgICAgICAgID8gY2FjaGVIYXMoc2VlbiwgY29tcHV0ZWQpXG4gICAgICAgICAgICAgIDogaW5jbHVkZXMocmVzdWx0LCBjb21wdXRlZCwgY29tcGFyYXRvcilcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICBvdGhJbmRleCA9IG90aExlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoLS1vdGhJbmRleCkge1xuICAgICAgICAgICAgdmFyIGNhY2hlID0gY2FjaGVzW290aEluZGV4XTtcbiAgICAgICAgICAgIGlmICghKGNhY2hlXG4gICAgICAgICAgICAgICAgICA/IGNhY2hlSGFzKGNhY2hlLCBjb21wdXRlZClcbiAgICAgICAgICAgICAgICAgIDogaW5jbHVkZXMoYXJyYXlzW290aEluZGV4XSwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNlZW4pIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbnZlcnRgIGFuZCBgXy5pbnZlcnRCeWAgd2hpY2ggaW52ZXJ0c1xuICAgICAqIGBvYmplY3RgIHdpdGggdmFsdWVzIHRyYW5zZm9ybWVkIGJ5IGBpdGVyYXRlZWAgYW5kIHNldCBieSBgc2V0dGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnZlcnRlcihvYmplY3QsIHNldHRlciwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIHNldHRlcihhY2N1bXVsYXRvciwgaXRlcmF0ZWUodmFsdWUpLCBrZXksIG9iamVjdCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbnZva2VgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICAgICAqIG1ldGhvZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW52b2tlKG9iamVjdCwgcGF0aCwgYXJncykge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICBvYmplY3QgPSBwYXJlbnQob2JqZWN0LCBwYXRoKTtcbiAgICAgIHZhciBmdW5jID0gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBvYmplY3RbdG9LZXkobGFzdChwYXRoKSldO1xuICAgICAgcmV0dXJuIGZ1bmMgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGFwcGx5KGZ1bmMsIG9iamVjdCwgYXJncyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcmdzVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJyYXlCdWZmZXJgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNBcnJheUJ1ZmZlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJyYXlCdWZmZXJUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNEYXRlYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBkYXRlIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0RhdGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGRhdGVUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNFcXVhbGAgd2hpY2ggc3VwcG9ydHMgcGFydGlhbCBjb21wYXJpc29uc1xuICAgICAqIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gICAgICogIDEgLSBVbm9yZGVyZWQgY29tcGFyaXNvblxuICAgICAqICAyIC0gUGFydGlhbCBjb21wYXJpc29uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgdmFsdWVgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICBpZiAodmFsdWUgPT09IG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlID09IG51bGwgfHwgb3RoZXIgPT0gbnVsbCB8fCAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzT2JqZWN0TGlrZShvdGhlcikpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJc0VxdWFsRGVlcCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGJhc2VJc0VxdWFsLCBzdGFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbGAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICAgICAqIGRlZXAgY29tcGFyaXNvbnMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAgICAgKiByZWZlcmVuY2VzIHRvIGJlIGNvbXBhcmVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0VxdWFsRGVlcChvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgb2JqSXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICAgICAgb3RoSXNBcnIgPSBpc0FycmF5KG90aGVyKSxcbiAgICAgICAgICBvYmpUYWcgPSBvYmpJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG9iamVjdCksXG4gICAgICAgICAgb3RoVGFnID0gb3RoSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvdGhlcik7XG5cbiAgICAgIG9ialRhZyA9IG9ialRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb2JqVGFnO1xuICAgICAgb3RoVGFnID0gb3RoVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvdGhUYWc7XG5cbiAgICAgIHZhciBvYmpJc09iaiA9IG9ialRhZyA9PSBvYmplY3RUYWcsXG4gICAgICAgICAgb3RoSXNPYmogPSBvdGhUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG5cbiAgICAgIGlmIChpc1NhbWVUYWcgJiYgaXNCdWZmZXIob2JqZWN0KSkge1xuICAgICAgICBpZiAoIWlzQnVmZmVyKG90aGVyKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBvYmpJc0FyciA9IHRydWU7XG4gICAgICAgIG9iaklzT2JqID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoaXNTYW1lVGFnICYmICFvYmpJc09iaikge1xuICAgICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgICByZXR1cm4gKG9iaklzQXJyIHx8IGlzVHlwZWRBcnJheShvYmplY3QpKVxuICAgICAgICAgID8gZXF1YWxBcnJheXMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaylcbiAgICAgICAgICA6IGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgb2JqVGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghKGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRykpIHtcbiAgICAgICAgdmFyIG9iaklzV3JhcHBlZCA9IG9iaklzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnX193cmFwcGVkX18nKSxcbiAgICAgICAgICAgIG90aElzV3JhcHBlZCA9IG90aElzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsICdfX3dyYXBwZWRfXycpO1xuXG4gICAgICAgIGlmIChvYmpJc1dyYXBwZWQgfHwgb3RoSXNXcmFwcGVkKSB7XG4gICAgICAgICAgdmFyIG9ialVud3JhcHBlZCA9IG9iaklzV3JhcHBlZCA/IG9iamVjdC52YWx1ZSgpIDogb2JqZWN0LFxuICAgICAgICAgICAgICBvdGhVbndyYXBwZWQgPSBvdGhJc1dyYXBwZWQgPyBvdGhlci52YWx1ZSgpIDogb3RoZXI7XG5cbiAgICAgICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgICAgIHJldHVybiBlcXVhbEZ1bmMob2JqVW53cmFwcGVkLCBvdGhVbndyYXBwZWQsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHJldHVybiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXBgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc01hcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBtYXBUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXRjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG1hdGNoRGF0YSBUaGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3MgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhLCBjdXN0b21pemVyKSB7XG4gICAgICB2YXIgaW5kZXggPSBtYXRjaERhdGEubGVuZ3RoLFxuICAgICAgICAgIGxlbmd0aCA9IGluZGV4LFxuICAgICAgICAgIG5vQ3VzdG9taXplciA9ICFjdXN0b21pemVyO1xuXG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICFsZW5ndGg7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgIHZhciBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICAgICAgaWYgKChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSlcbiAgICAgICAgICAgICAgPyBkYXRhWzFdICE9PSBvYmplY3RbZGF0YVswXV1cbiAgICAgICAgICAgICAgOiAhKGRhdGFbMF0gaW4gb2JqZWN0KVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICAgICAgdmFyIGtleSA9IGRhdGFbMF0sXG4gICAgICAgICAgICBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICAgICAgc3JjVmFsdWUgPSBkYXRhWzFdO1xuXG4gICAgICAgIGlmIChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSkge1xuICAgICAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHN0YWNrID0gbmV3IFN0YWNrO1xuICAgICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCEocmVzdWx0ID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA/IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgICAgICAgICA6IHJlc3VsdFxuICAgICAgICAgICAgICApKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNSZWdFeHBgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHJlZ2V4cCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1JlZ0V4cCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gcmVnZXhwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzU2V0YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNTZXQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gc2V0VGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzVHlwZWRBcnJheWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNUeXBlZEFycmF5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgICAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLml0ZXJhdGVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBbdmFsdWU9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYW4gaXRlcmF0ZWUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBpdGVyYXRlZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXRlcmF0ZWUodmFsdWUpIHtcbiAgICAgIC8vIERvbid0IHN0b3JlIHRoZSBgdHlwZW9mYCByZXN1bHQgaW4gYSB2YXJpYWJsZSB0byBhdm9pZCBhIEpJVCBidWcgaW4gU2FmYXJpIDkuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE1NjAzNCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpXG4gICAgICAgICAgPyBiYXNlTWF0Y2hlc1Byb3BlcnR5KHZhbHVlWzBdLCB2YWx1ZVsxXSlcbiAgICAgICAgICA6IGJhc2VNYXRjaGVzKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm9wZXJ0eSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlS2V5cyhvYmplY3QpIHtcbiAgICAgIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBrZXkgIT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c0luYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VLZXlzSW4ob2JqZWN0KSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUtleXNJbihvYmplY3QpO1xuICAgICAgfVxuICAgICAgdmFyIGlzUHJvdG8gPSBpc1Byb3RvdHlwZShvYmplY3QpLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgIGlmICghKGtleSA9PSAnY29uc3RydWN0b3InICYmIChpc1Byb3RvIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5sdGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTHQodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPCBvdGhlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXBgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gQXJyYXkoY29sbGVjdGlvbi5sZW5ndGgpIDogW107XG5cbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0WysraW5kZXhdID0gaXRlcmF0ZWUodmFsdWUsIGtleSwgY29sbGVjdGlvbik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc2Agd2hpY2ggZG9lc24ndCBjbG9uZSBgc291cmNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNYXRjaGVzKHNvdXJjZSkge1xuICAgICAgdmFyIG1hdGNoRGF0YSA9IGdldE1hdGNoRGF0YShzb3VyY2UpO1xuICAgICAgaWYgKG1hdGNoRGF0YS5sZW5ndGggPT0gMSAmJiBtYXRjaERhdGFbMF1bMl0pIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKG1hdGNoRGF0YVswXVswXSwgbWF0Y2hEYXRhWzBdWzFdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdCA9PT0gc291cmNlIHx8IGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzUHJvcGVydHlgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNyY1ZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgICAgIGlmIChpc0tleShwYXRoKSAmJiBpc1N0cmljdENvbXBhcmFibGUoc3JjVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSh0b0tleShwYXRoKSwgc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICB2YXIgb2JqVmFsdWUgPSBnZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgICAgcmV0dXJuIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmIG9ialZhbHVlID09PSBzcmNWYWx1ZSlcbiAgICAgICAgICA/IGhhc0luKG9iamVjdCwgcGF0aClcbiAgICAgICAgICA6IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWVyZ2VgIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBtZXJnZWQgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gICAgICogIGNvdW50ZXJwYXJ0cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjaykge1xuICAgICAgaWYgKG9iamVjdCA9PT0gc291cmNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGJhc2VGb3Ioc291cmNlLCBmdW5jdGlvbihzcmNWYWx1ZSwga2V5KSB7XG4gICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgIGlmIChpc09iamVjdChzcmNWYWx1ZSkpIHtcbiAgICAgICAgICBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBiYXNlTWVyZ2UsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIoc2FmZUdldChvYmplY3QsIGtleSksIHNyY1ZhbHVlLCAoa2V5ICsgJycpLCBvYmplY3QsIHNvdXJjZSwgc3RhY2spXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHNyY1ZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlTWVyZ2VgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAgICAgKiBkZWVwIG1lcmdlcyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICAgICAqIHJlZmVyZW5jZXMgdG8gYmUgbWVyZ2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIG1lcmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzcmNJbmRleCBUaGUgaW5kZXggb2YgYHNvdXJjZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbWVyZ2VGdW5jIFRoZSBmdW5jdGlvbiB0byBtZXJnZSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gICAgICogIGNvdW50ZXJwYXJ0cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBtZXJnZUZ1bmMsIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICB2YXIgb2JqVmFsdWUgPSBzYWZlR2V0KG9iamVjdCwga2V5KSxcbiAgICAgICAgICBzcmNWYWx1ZSA9IHNhZmVHZXQoc291cmNlLCBrZXkpLFxuICAgICAgICAgIHN0YWNrZWQgPSBzdGFjay5nZXQoc3JjVmFsdWUpO1xuXG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBzdGFja2VkKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICA/IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCAoa2V5ICsgJycpLCBvYmplY3QsIHNvdXJjZSwgc3RhY2spXG4gICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICB2YXIgaXNDb21tb24gPSBuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoaXNDb21tb24pIHtcbiAgICAgICAgdmFyIGlzQXJyID0gaXNBcnJheShzcmNWYWx1ZSksXG4gICAgICAgICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgaXNCdWZmZXIoc3JjVmFsdWUpLFxuICAgICAgICAgICAgaXNUeXBlZCA9ICFpc0FyciAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheShzcmNWYWx1ZSk7XG5cbiAgICAgICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICAgICAgaWYgKGlzQXJyIHx8IGlzQnVmZiB8fCBpc1R5cGVkKSB7XG4gICAgICAgICAgaWYgKGlzQXJyYXkob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc0FycmF5TGlrZU9iamVjdChvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY29weUFycmF5KG9ialZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNCdWZmKSB7XG4gICAgICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjbG9uZUJ1ZmZlcihzcmNWYWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzVHlwZWQpIHtcbiAgICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNsb25lVHlwZWRBcnJheShzcmNWYWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBbXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNQbGFpbk9iamVjdChzcmNWYWx1ZSkgfHwgaXNBcmd1bWVudHMoc3JjVmFsdWUpKSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgICAgICBpZiAoaXNBcmd1bWVudHMob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHRvUGxhaW5PYmplY3Qob2JqVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmICghaXNPYmplY3Qob2JqVmFsdWUpIHx8IGlzRnVuY3Rpb24ob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGluaXRDbG9uZU9iamVjdChzcmNWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpc0NvbW1vbikge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgc3RhY2suc2V0KHNyY1ZhbHVlLCBuZXdWYWx1ZSk7XG4gICAgICAgIG1lcmdlRnVuYyhuZXdWYWx1ZSwgc3JjVmFsdWUsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgICAgIHN0YWNrWydkZWxldGUnXShzcmNWYWx1ZSk7XG4gICAgICB9XG4gICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubnRoYCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgaW5kZXggb2YgdGhlIGVsZW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBudGggZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VOdGgoYXJyYXksIG4pIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBuICs9IG4gPCAwID8gbGVuZ3RoIDogMDtcbiAgICAgIHJldHVybiBpc0luZGV4KG4sIGxlbmd0aCkgPyBhcnJheVtuXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5vcmRlckJ5YCB3aXRob3V0IHBhcmFtIGd1YXJkcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb25bXXxPYmplY3RbXXxzdHJpbmdbXX0gaXRlcmF0ZWVzIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBvcmRlcnMgVGhlIHNvcnQgb3JkZXJzIG9mIGBpdGVyYXRlZXNgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNvcnRlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycykge1xuICAgICAgaWYgKGl0ZXJhdGVlcy5sZW5ndGgpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICAgIGlmIChpc0FycmF5KGl0ZXJhdGVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBiYXNlR2V0KHZhbHVlLCBpdGVyYXRlZS5sZW5ndGggPT09IDEgPyBpdGVyYXRlZVswXSA6IGl0ZXJhdGVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGl0ZXJhdGVlO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IFtpZGVudGl0eV07XG4gICAgICB9XG5cbiAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgaXRlcmF0ZWVzID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZU1hcChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHZhciBjcml0ZXJpYSA9IGFycmF5TWFwKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0ZWUodmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHsgJ2NyaXRlcmlhJzogY3JpdGVyaWEsICdpbmRleCc6ICsraW5kZXgsICd2YWx1ZSc6IHZhbHVlIH07XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGJhc2VTb3J0QnkocmVzdWx0LCBmdW5jdGlvbihvYmplY3QsIG90aGVyKSB7XG4gICAgICAgIHJldHVybiBjb21wYXJlTXVsdGlwbGUob2JqZWN0LCBvdGhlciwgb3JkZXJzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnBpY2tgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICAgICAqIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVBpY2sob2JqZWN0LCBwYXRocykge1xuICAgICAgcmV0dXJuIGJhc2VQaWNrQnkob2JqZWN0LCBwYXRocywgZnVuY3Rpb24odmFsdWUsIHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGhhc0luKG9iamVjdCwgcGF0aCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiAgYF8ucGlja0J5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQaWNrQnkob2JqZWN0LCBwYXRocywgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBwYXRoID0gcGF0aHNbaW5kZXhdLFxuICAgICAgICAgICAgdmFsdWUgPSBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG5cbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgcGF0aCkpIHtcbiAgICAgICAgICBiYXNlU2V0KHJlc3VsdCwgY2FzdFBhdGgocGF0aCwgb2JqZWN0KSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVByb3BlcnR5YCB3aGljaCBzdXBwb3J0cyBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eURlZXAocGF0aCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wdWxsQWxsQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAgICAgKiBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXhPZiA9IGNvbXBhcmF0b3IgPyBiYXNlSW5kZXhPZldpdGggOiBiYXNlSW5kZXhPZixcbiAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgICAgc2VlbiA9IGFycmF5O1xuXG4gICAgICBpZiAoYXJyYXkgPT09IHZhbHVlcykge1xuICAgICAgICB2YWx1ZXMgPSBjb3B5QXJyYXkodmFsdWVzKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICBzZWVuID0gYXJyYXlNYXAoYXJyYXksIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGZyb21JbmRleCA9IDAsXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlc1tpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgd2hpbGUgKChmcm9tSW5kZXggPSBpbmRleE9mKHNlZW4sIGNvbXB1dGVkLCBmcm9tSW5kZXgsIGNvbXBhcmF0b3IpKSA+IC0xKSB7XG4gICAgICAgICAgaWYgKHNlZW4gIT09IGFycmF5KSB7XG4gICAgICAgICAgICBzcGxpY2UuY2FsbChzZWVuLCBmcm9tSW5kZXgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzcGxpY2UuY2FsbChhcnJheSwgZnJvbUluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnB1bGxBdGAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogaW5kZXhlcyBvciBjYXB0dXJpbmcgdGhlIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJbXX0gaW5kZXhlcyBUaGUgaW5kZXhlcyBvZiBlbGVtZW50cyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVB1bGxBdChhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID8gaW5kZXhlcy5sZW5ndGggOiAwLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgaW5kZXggPSBpbmRleGVzW2xlbmd0aF07XG4gICAgICAgIGlmIChsZW5ndGggPT0gbGFzdEluZGV4IHx8IGluZGV4ICE9PSBwcmV2aW91cykge1xuICAgICAgICAgIHZhciBwcmV2aW91cyA9IGluZGV4O1xuICAgICAgICAgIGlmIChpc0luZGV4KGluZGV4KSkge1xuICAgICAgICAgICAgc3BsaWNlLmNhbGwoYXJyYXksIGluZGV4LCAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYmFzZVVuc2V0KGFycmF5LCBpbmRleCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmFuZG9tYCB3aXRob3V0IHN1cHBvcnQgZm9yIHJldHVybmluZ1xuICAgICAqIGZsb2F0aW5nLXBvaW50IG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsb3dlciBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByYW5kb20gbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSYW5kb20obG93ZXIsIHVwcGVyKSB7XG4gICAgICByZXR1cm4gbG93ZXIgKyBuYXRpdmVGbG9vcihuYXRpdmVSYW5kb20oKSAqICh1cHBlciAtIGxvd2VyICsgMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJhbmdlYCBhbmQgYF8ucmFuZ2VSaWdodGAgd2hpY2ggZG9lc24ndFxuICAgICAqIGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0ZXAgVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSYW5nZShzdGFydCwgZW5kLCBzdGVwLCBmcm9tUmlnaHQpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChuYXRpdmVDZWlsKChlbmQgLSBzdGFydCkgLyAoc3RlcCB8fCAxKSksIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICByZXN1bHRbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF0gPSBzdGFydDtcbiAgICAgICAgc3RhcnQgKz0gc3RlcDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVwZWF0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byByZXBlYXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byByZXBlYXQgdGhlIHN0cmluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByZXBlYXRlZCBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJlcGVhdChzdHJpbmcsIG4pIHtcbiAgICAgIHZhciByZXN1bHQgPSAnJztcbiAgICAgIGlmICghc3RyaW5nIHx8IG4gPCAxIHx8IG4gPiBNQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICAvLyBMZXZlcmFnZSB0aGUgZXhwb25lbnRpYXRpb24gYnkgc3F1YXJpbmcgYWxnb3JpdGhtIGZvciBhIGZhc3RlciByZXBlYXQuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRXhwb25lbnRpYXRpb25fYnlfc3F1YXJpbmcgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKG4gJSAyKSB7XG4gICAgICAgICAgcmVzdWx0ICs9IHN0cmluZztcbiAgICAgICAgfVxuICAgICAgICBuID0gbmF0aXZlRmxvb3IobiAvIDIpO1xuICAgICAgICBpZiAobikge1xuICAgICAgICAgIHN0cmluZyArPSBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgIH0gd2hpbGUgKG4pO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlc3RgIHdoaWNoIGRvZXNuJ3QgdmFsaWRhdGUgb3IgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJlc3QoZnVuYywgc3RhcnQpIHtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCBzdGFydCwgaWRlbnRpdHkpLCBmdW5jICsgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNhbXBsZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNhbXBsZShjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm4gYXJyYXlTYW1wbGUodmFsdWVzKGNvbGxlY3Rpb24pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zYW1wbGVTaXplYCB3aXRob3V0IHBhcmFtIGd1YXJkcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTYW1wbGVTaXplKGNvbGxlY3Rpb24sIG4pIHtcbiAgICAgIHZhciBhcnJheSA9IHZhbHVlcyhjb2xsZWN0aW9uKTtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZihhcnJheSwgYmFzZUNsYW1wKG4sIDAsIGFycmF5Lmxlbmd0aCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNldGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgcGF0aCBjcmVhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMSxcbiAgICAgICAgICBuZXN0ZWQgPSBvYmplY3Q7XG5cbiAgICAgIHdoaWxlIChuZXN0ZWQgIT0gbnVsbCAmJiArK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSksXG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHZhbHVlO1xuXG4gICAgICAgIGlmIChrZXkgPT09ICdfX3Byb3RvX18nIHx8IGtleSA9PT0gJ2NvbnN0cnVjdG9yJyB8fCBrZXkgPT09ICdwcm90b3R5cGUnKSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbmRleCAhPSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICB2YXIgb2JqVmFsdWUgPSBuZXN0ZWRba2V5XTtcbiAgICAgICAgICBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKG9ialZhbHVlLCBrZXksIG5lc3RlZCkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gaXNPYmplY3Qob2JqVmFsdWUpXG4gICAgICAgICAgICAgID8gb2JqVmFsdWVcbiAgICAgICAgICAgICAgOiAoaXNJbmRleChwYXRoW2luZGV4ICsgMV0pID8gW10gOiB7fSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFzc2lnblZhbHVlKG5lc3RlZCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIG5lc3RlZCA9IG5lc3RlZFtrZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0RGF0YWAgd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzb2NpYXRlIG1ldGFkYXRhIHdpdGguXG4gICAgICogQHBhcmFtIHsqfSBkYXRhIFRoZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBiYXNlU2V0RGF0YSA9ICFtZXRhTWFwID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBkYXRhKSB7XG4gICAgICBtZXRhTWFwLnNldChmdW5jLCBkYXRhKTtcbiAgICAgIHJldHVybiBmdW5jO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0VG9TdHJpbmdgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGJhc2VTZXRUb1N0cmluZyA9ICFkZWZpbmVQcm9wZXJ0eSA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgc3RyaW5nKSB7XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoZnVuYywgJ3RvU3RyaW5nJywge1xuICAgICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgJ2VudW1lcmFibGUnOiBmYWxzZSxcbiAgICAgICAgJ3ZhbHVlJzogY29uc3RhbnQoc3RyaW5nKSxcbiAgICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNodWZmbGVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzaHVmZmxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNodWZmbGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTaHVmZmxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZih2YWx1ZXMoY29sbGVjdGlvbikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNsaWNlYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gICAgICB9XG4gICAgICBlbmQgPSBlbmQgPiBsZW5ndGggPyBsZW5ndGggOiBlbmQ7XG4gICAgICBpZiAoZW5kIDwgMCkge1xuICAgICAgICBlbmQgKz0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgbGVuZ3RoID0gc3RhcnQgPiBlbmQgPyAwIDogKChlbmQgLSBzdGFydCkgPj4+IDApO1xuICAgICAgc3RhcnQgPj4+PSAwO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBhcnJheVtpbmRleCArIHN0YXJ0XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29tZWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0O1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0ID0gcHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgIHJldHVybiAhcmVzdWx0O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gISFyZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkSW5kZXhgIGFuZCBgXy5zb3J0ZWRMYXN0SW5kZXhgIHdoaWNoXG4gICAgICogcGVyZm9ybXMgYSBiaW5hcnkgc2VhcmNoIG9mIGBhcnJheWAgdG8gZGV0ZXJtaW5lIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgXG4gICAgICogc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0byBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JldEhpZ2hlc3RdIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBoaWdoZXN0IHF1YWxpZmllZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgcmV0SGlnaGVzdCkge1xuICAgICAgdmFyIGxvdyA9IDAsXG4gICAgICAgICAgaGlnaCA9IGFycmF5ID09IG51bGwgPyBsb3cgOiBhcnJheS5sZW5ndGg7XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgdmFsdWUgPT09IHZhbHVlICYmIGhpZ2ggPD0gSEFMRl9NQVhfQVJSQVlfTEVOR1RIKSB7XG4gICAgICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICAgICAgdmFyIG1pZCA9IChsb3cgKyBoaWdoKSA+Pj4gMSxcbiAgICAgICAgICAgICAgY29tcHV0ZWQgPSBhcnJheVttaWRdO1xuXG4gICAgICAgICAgaWYgKGNvbXB1dGVkICE9PSBudWxsICYmICFpc1N5bWJvbChjb21wdXRlZCkgJiZcbiAgICAgICAgICAgICAgKHJldEhpZ2hlc3QgPyAoY29tcHV0ZWQgPD0gdmFsdWUpIDogKGNvbXB1dGVkIDwgdmFsdWUpKSkge1xuICAgICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhpZ2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpZGVudGl0eSwgcmV0SGlnaGVzdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkSW5kZXhCeWAgYW5kIGBfLnNvcnRlZExhc3RJbmRleEJ5YFxuICAgICAqIHdoaWNoIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZVxuICAgICAqIHRoZWlyIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXRIaWdoZXN0XSBTcGVjaWZ5IHJldHVybmluZyB0aGUgaGlnaGVzdCBxdWFsaWZpZWQgaW5kZXguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUsIHJldEhpZ2hlc3QpIHtcbiAgICAgIHZhciBsb3cgPSAwLFxuICAgICAgICAgIGhpZ2ggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmIChoaWdoID09PSAwKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuXG4gICAgICB2YWx1ZSA9IGl0ZXJhdGVlKHZhbHVlKTtcbiAgICAgIHZhciB2YWxJc05hTiA9IHZhbHVlICE9PSB2YWx1ZSxcbiAgICAgICAgICB2YWxJc051bGwgPSB2YWx1ZSA9PT0gbnVsbCxcbiAgICAgICAgICB2YWxJc1N5bWJvbCA9IGlzU3ltYm9sKHZhbHVlKSxcbiAgICAgICAgICB2YWxJc1VuZGVmaW5lZCA9IHZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICAgIHZhciBtaWQgPSBuYXRpdmVGbG9vcigobG93ICsgaGlnaCkgLyAyKSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUoYXJyYXlbbWlkXSksXG4gICAgICAgICAgICBvdGhJc0RlZmluZWQgPSBjb21wdXRlZCAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgb3RoSXNOdWxsID0gY29tcHV0ZWQgPT09IG51bGwsXG4gICAgICAgICAgICBvdGhJc1JlZmxleGl2ZSA9IGNvbXB1dGVkID09PSBjb21wdXRlZCxcbiAgICAgICAgICAgIG90aElzU3ltYm9sID0gaXNTeW1ib2woY29tcHV0ZWQpO1xuXG4gICAgICAgIGlmICh2YWxJc05hTikge1xuICAgICAgICAgIHZhciBzZXRMb3cgPSByZXRIaWdoZXN0IHx8IG90aElzUmVmbGV4aXZlO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzVW5kZWZpbmVkKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgKHJldEhpZ2hlc3QgfHwgb3RoSXNEZWZpbmVkKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc051bGwpIHtcbiAgICAgICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiBvdGhJc0RlZmluZWQgJiYgKHJldEhpZ2hlc3QgfHwgIW90aElzTnVsbCk7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNTeW1ib2wpIHtcbiAgICAgICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiBvdGhJc0RlZmluZWQgJiYgIW90aElzTnVsbCAmJiAocmV0SGlnaGVzdCB8fCAhb3RoSXNTeW1ib2wpO1xuICAgICAgICB9IGVsc2UgaWYgKG90aElzTnVsbCB8fCBvdGhJc1N5bWJvbCkge1xuICAgICAgICAgIHNldExvdyA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNldExvdyA9IHJldEhpZ2hlc3QgPyAoY29tcHV0ZWQgPD0gdmFsdWUpIDogKGNvbXB1dGVkIDwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXRMb3cpIHtcbiAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhpZ2ggPSBtaWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuYXRpdmVNaW4oaGlnaCwgTUFYX0FSUkFZX0lOREVYKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRVbmlxYCBhbmQgYF8uc29ydGVkVW5pcUJ5YCB3aXRob3V0XG4gICAgICogc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydGVkVW5pcShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICBpZiAoIWluZGV4IHx8ICFlcShjb21wdXRlZCwgc2VlbikpIHtcbiAgICAgICAgICB2YXIgc2VlbiA9IGNvbXB1dGVkO1xuICAgICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvTnVtYmVyYCB3aGljaCBkb2Vzbid0IGVuc3VyZSBjb3JyZWN0XG4gICAgICogY29udmVyc2lvbnMgb2YgYmluYXJ5LCBoZXhhZGVjaW1hbCwgb3Igb2N0YWwgc3RyaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVRvTnVtYmVyKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIE5BTjtcbiAgICAgIH1cbiAgICAgIHJldHVybiArdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9TdHJpbmdgIHdoaWNoIGRvZXNuJ3QgY29udmVydCBudWxsaXNoXG4gICAgICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAgICAgLy8gRXhpdCBlYXJseSBmb3Igc3RyaW5ncyB0byBhdm9pZCBhIHBlcmZvcm1hbmNlIGhpdCBpbiBzb21lIGVudmlyb25tZW50cy5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgdmFsdWVzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgYmFzZVRvU3RyaW5nKSArICcnO1xuICAgICAgfVxuICAgICAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gc3ltYm9sVG9TdHJpbmcgPyBzeW1ib2xUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgICAgIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmlxQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVW5pcShhcnJheSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgaXNDb21tb24gPSB0cnVlLFxuICAgICAgICAgIHJlc3VsdCA9IFtdLFxuICAgICAgICAgIHNlZW4gPSByZXN1bHQ7XG5cbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlc1dpdGg7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChsZW5ndGggPj0gTEFSR0VfQVJSQVlfU0laRSkge1xuICAgICAgICB2YXIgc2V0ID0gaXRlcmF0ZWUgPyBudWxsIDogY3JlYXRlU2V0KGFycmF5KTtcbiAgICAgICAgaWYgKHNldCkge1xuICAgICAgICAgIHJldHVybiBzZXRUb0FycmF5KHNldCk7XG4gICAgICAgIH1cbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgaW5jbHVkZXMgPSBjYWNoZUhhcztcbiAgICAgICAgc2VlbiA9IG5ldyBTZXRDYWNoZTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzZWVuID0gaXRlcmF0ZWUgPyBbXSA6IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoaXNDb21tb24gJiYgY29tcHV0ZWQgPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgdmFyIHNlZW5JbmRleCA9IHNlZW4ubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlIChzZWVuSW5kZXgtLSkge1xuICAgICAgICAgICAgaWYgKHNlZW5bc2VlbkluZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFpbmNsdWRlcyhzZWVuLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHtcbiAgICAgICAgICBpZiAoc2VlbiAhPT0gcmVzdWx0KSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5zZXRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwcm9wZXJ0eSBwYXRoIHRvIHVuc2V0LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcHJvcGVydHkgaXMgZGVsZXRlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VVbnNldChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgb2JqZWN0ID0gcGFyZW50KG9iamVjdCwgcGF0aCk7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgfHwgZGVsZXRlIG9iamVjdFt0b0tleShsYXN0KHBhdGgpKV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udXBkYXRlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gdXBkYXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgcGF0aCBjcmVhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCB1cGRhdGVyLCBjdXN0b21pemVyKSB7XG4gICAgICByZXR1cm4gYmFzZVNldChvYmplY3QsIHBhdGgsIHVwZGF0ZXIoYmFzZUdldChvYmplY3QsIHBhdGgpKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmRyb3BXaGlsZWAgYW5kIGBfLnRha2VXaGlsZWBcbiAgICAgKiB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0Ryb3BdIFNwZWNpZnkgZHJvcHBpbmcgZWxlbWVudHMgaW5zdGVhZCBvZiB0YWtpbmcgdGhlbS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVdoaWxlKGFycmF5LCBwcmVkaWNhdGUsIGlzRHJvcCwgZnJvbVJpZ2h0KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTE7XG5cbiAgICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpICYmXG4gICAgICAgIHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHt9XG5cbiAgICAgIHJldHVybiBpc0Ryb3BcbiAgICAgICAgPyBiYXNlU2xpY2UoYXJyYXksIChmcm9tUmlnaHQgPyAwIDogaW5kZXgpLCAoZnJvbVJpZ2h0ID8gaW5kZXggKyAxIDogbGVuZ3RoKSlcbiAgICAgICAgOiBiYXNlU2xpY2UoYXJyYXksIChmcm9tUmlnaHQgPyBpbmRleCArIDEgOiAwKSwgKGZyb21SaWdodCA/IGxlbmd0aCA6IGluZGV4KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHdyYXBwZXJWYWx1ZWAgd2hpY2ggcmV0dXJucyB0aGUgcmVzdWx0IG9mXG4gICAgICogcGVyZm9ybWluZyBhIHNlcXVlbmNlIG9mIGFjdGlvbnMgb24gdGhlIHVud3JhcHBlZCBgdmFsdWVgLCB3aGVyZSBlYWNoXG4gICAgICogc3VjY2Vzc2l2ZSBhY3Rpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhY3Rpb25zIEFjdGlvbnMgdG8gcGVyZm9ybSB0byByZXNvbHZlIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VXcmFwcGVyVmFsdWUodmFsdWUsIGFjdGlvbnMpIHtcbiAgICAgIHZhciByZXN1bHQgPSB2YWx1ZTtcbiAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQudmFsdWUoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheVJlZHVjZShhY3Rpb25zLCBmdW5jdGlvbihyZXN1bHQsIGFjdGlvbikge1xuICAgICAgICByZXR1cm4gYWN0aW9uLmZ1bmMuYXBwbHkoYWN0aW9uLnRoaXNBcmcsIGFycmF5UHVzaChbcmVzdWx0XSwgYWN0aW9uLmFyZ3MpKTtcbiAgICAgIH0sIHJlc3VsdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLnhvcmAsIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLCB0aGF0IGFjY2VwdHMgYW4gYXJyYXkgb2YgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5cyBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVhvcihhcnJheXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXlzLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlVW5pcShhcnJheXNbMF0pIDogW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcnJheXNbaW5kZXhdLFxuICAgICAgICAgICAgb3RoSW5kZXggPSAtMTtcblxuICAgICAgICB3aGlsZSAoKytvdGhJbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGlmIChvdGhJbmRleCAhPSBpbmRleCkge1xuICAgICAgICAgICAgcmVzdWx0W2luZGV4XSA9IGJhc2VEaWZmZXJlbmNlKHJlc3VsdFtpbmRleF0gfHwgYXJyYXksIGFycmF5c1tvdGhJbmRleF0sIGl0ZXJhdGVlLCBjb21wYXJhdG9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihyZXN1bHQsIDEpLCBpdGVyYXRlZSwgY29tcGFyYXRvcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnppcE9iamVjdGAgd2hpY2ggYXNzaWducyB2YWx1ZXMgdXNpbmcgYGFzc2lnbkZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXNzaWduRnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzaWduIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VaaXBPYmplY3QocHJvcHMsIHZhbHVlcywgYXNzaWduRnVuYykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoLFxuICAgICAgICAgIHZhbHNMZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBpbmRleCA8IHZhbHNMZW5ndGggPyB2YWx1ZXNbaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgICBhc3NpZ25GdW5jKHJlc3VsdCwgcHJvcHNbaW5kZXhdLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYW4gZW1wdHkgYXJyYXkgaWYgaXQncyBub3QgYW4gYXJyYXkgbGlrZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyB0aGUgY2FzdCBhcnJheS1saWtlIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0QXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpID8gdmFsdWUgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGBpZGVudGl0eWAgaWYgaXQncyBub3QgYSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgY2FzdCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0RnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlIDogaWRlbnRpdHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBhIHBhdGggYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdFBhdGgodmFsdWUsIG9iamVjdCkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0tleSh2YWx1ZSwgb2JqZWN0KSA/IFt2YWx1ZV0gOiBzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIGBiYXNlUmVzdGAgYWxpYXMgd2hpY2ggY2FuIGJlIHJlcGxhY2VkIHdpdGggYGlkZW50aXR5YCBieSBtb2R1bGVcbiAgICAgKiByZXBsYWNlbWVudCBwbHVnaW5zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICB2YXIgY2FzdFJlc3QgPSBiYXNlUmVzdDtcblxuICAgIC8qKlxuICAgICAqIENhc3RzIGBhcnJheWAgdG8gYSBzbGljZSBpZiBpdCdzIG5lZWRlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHNsaWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kO1xuICAgICAgcmV0dXJuICghc3RhcnQgJiYgZW5kID49IGxlbmd0aCkgPyBhcnJheSA6IGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzaW1wbGUgd3JhcHBlciBhcm91bmQgdGhlIGdsb2JhbCBbYGNsZWFyVGltZW91dGBdKGh0dHBzOi8vbWRuLmlvL2NsZWFyVGltZW91dCkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfE9iamVjdH0gaWQgVGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0IG9mIHRoZSB0aW1lciB0byBjbGVhci5cbiAgICAgKi9cbiAgICB2YXIgY2xlYXJUaW1lb3V0ID0gY3R4Q2xlYXJUaW1lb3V0IHx8IGZ1bmN0aW9uKGlkKSB7XG4gICAgICByZXR1cm4gcm9vdC5jbGVhclRpbWVvdXQoaWQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgIGBidWZmZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIFRoZSBidWZmZXIgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYnVmZmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lQnVmZmVyKGJ1ZmZlciwgaXNEZWVwKSB7XG4gICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgIHJldHVybiBidWZmZXIuc2xpY2UoKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBidWZmZXIubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IGFsbG9jVW5zYWZlID8gYWxsb2NVbnNhZmUobGVuZ3RoKSA6IG5ldyBidWZmZXIuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAgICAgYnVmZmVyLmNvcHkocmVzdWx0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGBhcnJheUJ1ZmZlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGFycmF5QnVmZmVyIFRoZSBhcnJheSBidWZmZXIgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge0FycmF5QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYXJyYXkgYnVmZmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lQXJyYXlCdWZmZXIoYXJyYXlCdWZmZXIpIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgYXJyYXlCdWZmZXIuY29uc3RydWN0b3IoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICBuZXcgVWludDhBcnJheShyZXN1bHQpLnNldChuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcikpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGRhdGFWaWV3YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFWaWV3IFRoZSBkYXRhIHZpZXcgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgZGF0YSB2aWV3LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGF0YVZpZXcoZGF0YVZpZXcsIGlzRGVlcCkge1xuICAgICAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIoZGF0YVZpZXcuYnVmZmVyKSA6IGRhdGFWaWV3LmJ1ZmZlcjtcbiAgICAgIHJldHVybiBuZXcgZGF0YVZpZXcuY29uc3RydWN0b3IoYnVmZmVyLCBkYXRhVmlldy5ieXRlT2Zmc2V0LCBkYXRhVmlldy5ieXRlTGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHJlZ2V4cGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWdleHAgVGhlIHJlZ2V4cCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgcmVnZXhwLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lUmVnRXhwKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyByZWdleHAuY29uc3RydWN0b3IocmVnZXhwLnNvdXJjZSwgcmVGbGFncy5leGVjKHJlZ2V4cCkpO1xuICAgICAgcmVzdWx0Lmxhc3RJbmRleCA9IHJlZ2V4cC5sYXN0SW5kZXg7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgYHN5bWJvbGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3ltYm9sIFRoZSBzeW1ib2wgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBzeW1ib2wgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lU3ltYm9sKHN5bWJvbCkge1xuICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YgPyBPYmplY3Qoc3ltYm9sVmFsdWVPZi5jYWxsKHN5bWJvbCkpIDoge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGB0eXBlZEFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHR5cGVkQXJyYXkgVGhlIHR5cGVkIGFycmF5IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHR5cGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lVHlwZWRBcnJheSh0eXBlZEFycmF5LCBpc0RlZXApIHtcbiAgICAgIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKHR5cGVkQXJyYXkuYnVmZmVyKSA6IHR5cGVkQXJyYXkuYnVmZmVyO1xuICAgICAgcmV0dXJuIG5ldyB0eXBlZEFycmF5LmNvbnN0cnVjdG9yKGJ1ZmZlciwgdHlwZWRBcnJheS5ieXRlT2Zmc2V0LCB0eXBlZEFycmF5Lmxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcGFyZXMgdmFsdWVzIHRvIHNvcnQgdGhlbSBpbiBhc2NlbmRpbmcgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzb3J0IG9yZGVyIGluZGljYXRvciBmb3IgYHZhbHVlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYXJlQXNjZW5kaW5nKHZhbHVlLCBvdGhlcikge1xuICAgICAgaWYgKHZhbHVlICE9PSBvdGhlcikge1xuICAgICAgICB2YXIgdmFsSXNEZWZpbmVkID0gdmFsdWUgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHZhbElzTnVsbCA9IHZhbHVlID09PSBudWxsLFxuICAgICAgICAgICAgdmFsSXNSZWZsZXhpdmUgPSB2YWx1ZSA9PT0gdmFsdWUsXG4gICAgICAgICAgICB2YWxJc1N5bWJvbCA9IGlzU3ltYm9sKHZhbHVlKTtcblxuICAgICAgICB2YXIgb3RoSXNEZWZpbmVkID0gb3RoZXIgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG90aElzTnVsbCA9IG90aGVyID09PSBudWxsLFxuICAgICAgICAgICAgb3RoSXNSZWZsZXhpdmUgPSBvdGhlciA9PT0gb3RoZXIsXG4gICAgICAgICAgICBvdGhJc1N5bWJvbCA9IGlzU3ltYm9sKG90aGVyKTtcblxuICAgICAgICBpZiAoKCFvdGhJc051bGwgJiYgIW90aElzU3ltYm9sICYmICF2YWxJc1N5bWJvbCAmJiB2YWx1ZSA+IG90aGVyKSB8fFxuICAgICAgICAgICAgKHZhbElzU3ltYm9sICYmIG90aElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSAmJiAhb3RoSXNOdWxsICYmICFvdGhJc1N5bWJvbCkgfHxcbiAgICAgICAgICAgICh2YWxJc051bGwgJiYgb3RoSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgKCF2YWxJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAhdmFsSXNSZWZsZXhpdmUpIHtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKCF2YWxJc051bGwgJiYgIXZhbElzU3ltYm9sICYmICFvdGhJc1N5bWJvbCAmJiB2YWx1ZSA8IG90aGVyKSB8fFxuICAgICAgICAgICAgKG90aElzU3ltYm9sICYmIHZhbElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSAmJiAhdmFsSXNOdWxsICYmICF2YWxJc1N5bWJvbCkgfHxcbiAgICAgICAgICAgIChvdGhJc051bGwgJiYgdmFsSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgKCFvdGhJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAhb3RoSXNSZWZsZXhpdmUpIHtcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8ub3JkZXJCeWAgdG8gY29tcGFyZSBtdWx0aXBsZSBwcm9wZXJ0aWVzIG9mIGEgdmFsdWUgdG8gYW5vdGhlclxuICAgICAqIGFuZCBzdGFibGUgc29ydCB0aGVtLlxuICAgICAqXG4gICAgICogSWYgYG9yZGVyc2AgaXMgdW5zcGVjaWZpZWQsIGFsbCB2YWx1ZXMgYXJlIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIuIE90aGVyd2lzZSxcbiAgICAgKiBzcGVjaWZ5IGFuIG9yZGVyIG9mIFwiZGVzY1wiIGZvciBkZXNjZW5kaW5nIG9yIFwiYXNjXCIgZm9yIGFzY2VuZGluZyBzb3J0IG9yZGVyXG4gICAgICogb2YgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtib29sZWFuW118c3RyaW5nW119IG9yZGVycyBUaGUgb3JkZXIgdG8gc29ydCBieSBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzb3J0IG9yZGVyIGluZGljYXRvciBmb3IgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFyZU11bHRpcGxlKG9iamVjdCwgb3RoZXIsIG9yZGVycykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgb2JqQ3JpdGVyaWEgPSBvYmplY3QuY3JpdGVyaWEsXG4gICAgICAgICAgb3RoQ3JpdGVyaWEgPSBvdGhlci5jcml0ZXJpYSxcbiAgICAgICAgICBsZW5ndGggPSBvYmpDcml0ZXJpYS5sZW5ndGgsXG4gICAgICAgICAgb3JkZXJzTGVuZ3RoID0gb3JkZXJzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNvbXBhcmVBc2NlbmRpbmcob2JqQ3JpdGVyaWFbaW5kZXhdLCBvdGhDcml0ZXJpYVtpbmRleF0pO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgaWYgKGluZGV4ID49IG9yZGVyc0xlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIG9yZGVyID0gb3JkZXJzW2luZGV4XTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0ICogKG9yZGVyID09ICdkZXNjJyA/IC0xIDogMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIEZpeGVzIGFuIGBBcnJheSNzb3J0YCBidWcgaW4gdGhlIEpTIGVuZ2luZSBlbWJlZGRlZCBpbiBBZG9iZSBhcHBsaWNhdGlvbnNcbiAgICAgIC8vIHRoYXQgY2F1c2VzIGl0LCB1bmRlciBjZXJ0YWluIGNpcmN1bXN0YW5jZXMsIHRvIHByb3ZpZGUgdGhlIHNhbWUgdmFsdWUgZm9yXG4gICAgICAvLyBgb2JqZWN0YCBhbmQgYG90aGVyYC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qYXNoa2VuYXMvdW5kZXJzY29yZS9wdWxsLzEyNDdcbiAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBhbHNvIGVuc3VyZXMgYSBzdGFibGUgc29ydCBpbiBWOCBhbmQgb3RoZXIgZW5naW5lcy5cbiAgICAgIC8vIFNlZSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD05MCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgcmV0dXJuIG9iamVjdC5pbmRleCAtIG90aGVyLmluZGV4O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgdGhhdCBpcyB0aGUgY29tcG9zaXRpb24gb2YgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLFxuICAgICAqIHBsYWNlaG9sZGVycywgYW5kIHByb3ZpZGVkIGFyZ3VtZW50cyBpbnRvIGEgc2luZ2xlIGFycmF5IG9mIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBob2xkZXJzIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtcyB7Ym9vbGVhbn0gW2lzQ3VycmllZF0gU3BlY2lmeSBjb21wb3NpbmcgZm9yIGEgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21wb3NlZCBhcmd1bWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcG9zZUFyZ3MoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCkge1xuICAgICAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aCxcbiAgICAgICAgICBob2xkZXJzTGVuZ3RoID0gaG9sZGVycy5sZW5ndGgsXG4gICAgICAgICAgbGVmdEluZGV4ID0gLTEsXG4gICAgICAgICAgbGVmdExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICByYW5nZUxlbmd0aCA9IG5hdGl2ZU1heChhcmdzTGVuZ3RoIC0gaG9sZGVyc0xlbmd0aCwgMCksXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVmdExlbmd0aCArIHJhbmdlTGVuZ3RoKSxcbiAgICAgICAgICBpc1VuY3VycmllZCA9ICFpc0N1cnJpZWQ7XG5cbiAgICAgIHdoaWxlICgrK2xlZnRJbmRleCA8IGxlZnRMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2xlZnRJbmRleF0gPSBwYXJ0aWFsc1tsZWZ0SW5kZXhdO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsrYXJnc0luZGV4IDwgaG9sZGVyc0xlbmd0aCkge1xuICAgICAgICBpZiAoaXNVbmN1cnJpZWQgfHwgYXJnc0luZGV4IDwgYXJnc0xlbmd0aCkge1xuICAgICAgICAgIHJlc3VsdFtob2xkZXJzW2FyZ3NJbmRleF1dID0gYXJnc1thcmdzSW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB3aGlsZSAocmFuZ2VMZW5ndGgtLSkge1xuICAgICAgICByZXN1bHRbbGVmdEluZGV4KytdID0gYXJnc1thcmdzSW5kZXgrK107XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgY29tcG9zZUFyZ3NgIGV4Y2VwdCB0aGF0IHRoZSBhcmd1bWVudHMgY29tcG9zaXRpb25cbiAgICAgKiBpcyB0YWlsb3JlZCBmb3IgYF8ucGFydGlhbFJpZ2h0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gYXBwZW5kIHRvIHRob3NlIHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGhvbGRlcnMgVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW1zIHtib29sZWFufSBbaXNDdXJyaWVkXSBTcGVjaWZ5IGNvbXBvc2luZyBmb3IgYSBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbXBvc2VkIGFyZ3VtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wb3NlQXJnc1JpZ2h0KGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpIHtcbiAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJncy5sZW5ndGgsXG4gICAgICAgICAgaG9sZGVyc0luZGV4ID0gLTEsXG4gICAgICAgICAgaG9sZGVyc0xlbmd0aCA9IGhvbGRlcnMubGVuZ3RoLFxuICAgICAgICAgIHJpZ2h0SW5kZXggPSAtMSxcbiAgICAgICAgICByaWdodExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICByYW5nZUxlbmd0aCA9IG5hdGl2ZU1heChhcmdzTGVuZ3RoIC0gaG9sZGVyc0xlbmd0aCwgMCksXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkocmFuZ2VMZW5ndGggKyByaWdodExlbmd0aCksXG4gICAgICAgICAgaXNVbmN1cnJpZWQgPSAhaXNDdXJyaWVkO1xuXG4gICAgICB3aGlsZSAoKythcmdzSW5kZXggPCByYW5nZUxlbmd0aCkge1xuICAgICAgICByZXN1bHRbYXJnc0luZGV4XSA9IGFyZ3NbYXJnc0luZGV4XTtcbiAgICAgIH1cbiAgICAgIHZhciBvZmZzZXQgPSBhcmdzSW5kZXg7XG4gICAgICB3aGlsZSAoKytyaWdodEluZGV4IDwgcmlnaHRMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W29mZnNldCArIHJpZ2h0SW5kZXhdID0gcGFydGlhbHNbcmlnaHRJbmRleF07XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytob2xkZXJzSW5kZXggPCBob2xkZXJzTGVuZ3RoKSB7XG4gICAgICAgIGlmIChpc1VuY3VycmllZCB8fCBhcmdzSW5kZXggPCBhcmdzTGVuZ3RoKSB7XG4gICAgICAgICAgcmVzdWx0W29mZnNldCArIGhvbGRlcnNbaG9sZGVyc0luZGV4XV0gPSBhcmdzW2FyZ3NJbmRleCsrXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiBgc291cmNlYCB0byBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIGZyb20uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5PVtdXSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgdG8uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weUFycmF5KHNvdXJjZSwgYXJyYXkpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG5cbiAgICAgIGFycmF5IHx8IChhcnJheSA9IEFycmF5KGxlbmd0aCkpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gc291cmNlW2luZGV4XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycyB0byBjb3B5LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyB0by5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBpc05ldyA9ICFvYmplY3Q7XG4gICAgICBvYmplY3QgfHwgKG9iamVjdCA9IHt9KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgICA/IGN1c3RvbWl6ZXIob2JqZWN0W2tleV0sIHNvdXJjZVtrZXldLCBrZXksIG9iamVjdCwgc291cmNlKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOZXcpIHtcbiAgICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBvd24gc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlTeW1ib2xzKHNvdXJjZSwgb2JqZWN0KSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHMoc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgb3duIGFuZCBpbmhlcml0ZWQgc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlTeW1ib2xzSW4oc291cmNlLCBvYmplY3QpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9sc0luKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uZ3JvdXBCeWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGFjY3VtdWxhdG9yIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaW5pdGlhbGl6ZXJdIFRoZSBhY2N1bXVsYXRvciBvYmplY3QgaW5pdGlhbGl6ZXIuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWdncmVnYXRvciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVBZ2dyZWdhdG9yKHNldHRlciwgaW5pdGlhbGl6ZXIpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUFnZ3JlZ2F0b3IgOiBiYXNlQWdncmVnYXRvcixcbiAgICAgICAgICAgIGFjY3VtdWxhdG9yID0gaW5pdGlhbGl6ZXIgPyBpbml0aWFsaXplcigpIDoge307XG5cbiAgICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgc2V0dGVyLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIGFjY3VtdWxhdG9yKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uYXNzaWduYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXNzaWduZXIgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYXNzaWduZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQXNzaWduZXIoYXNzaWduZXIpIHtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aCxcbiAgICAgICAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPiAxID8gc291cmNlc1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGd1YXJkID0gbGVuZ3RoID4gMiA/IHNvdXJjZXNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgY3VzdG9taXplciA9IChhc3NpZ25lci5sZW5ndGggPiAzICYmIHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicpXG4gICAgICAgICAgPyAobGVuZ3RoLS0sIGN1c3RvbWl6ZXIpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPCAzID8gdW5kZWZpbmVkIDogY3VzdG9taXplcjtcbiAgICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgICAgICBhc3NpZ25lcihvYmplY3QsIHNvdXJjZSwgaW5kZXgsIGN1c3RvbWl6ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBiYXNlRWFjaGAgb3IgYGJhc2VFYWNoUmlnaHRgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGEgY29sbGVjdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJhc2VFYWNoKGVhY2hGdW5jLCBmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHJldHVybiBlYWNoRnVuYyhjb2xsZWN0aW9uLCBpdGVyYXRlZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuICAgICAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMSxcbiAgICAgICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KGNvbGxlY3Rpb24pO1xuXG4gICAgICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2luZGV4XSwgaW5kZXgsIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGJhc2UgZnVuY3Rpb24gZm9yIG1ldGhvZHMgbGlrZSBgXy5mb3JJbmAgYW5kIGBfLmZvck93bmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmFzZUZvcihmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzRnVuYykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KG9iamVjdCksXG4gICAgICAgICAgICBwcm9wcyA9IGtleXNGdW5jKG9iamVjdCksXG4gICAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgICAgdmFyIGtleSA9IHByb3BzW2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdO1xuICAgICAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggdGhlIG9wdGlvbmFsIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgYHRoaXNBcmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJpbmQoZnVuYywgYml0bWFzaywgdGhpc0FyZykge1xuICAgICAgdmFyIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgICAgICBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ubG93ZXJGaXJzdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIFRoZSBuYW1lIG9mIHRoZSBgU3RyaW5nYCBjYXNlIG1ldGhvZCB0byB1c2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDYXNlRmlyc3QobWV0aG9kTmFtZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuXG4gICAgICAgIHZhciBzdHJTeW1ib2xzID0gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICAgICAgPyBzdHJpbmdUb0FycmF5KHN0cmluZylcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICB2YXIgY2hyID0gc3RyU3ltYm9sc1xuICAgICAgICAgID8gc3RyU3ltYm9sc1swXVxuICAgICAgICAgIDogc3RyaW5nLmNoYXJBdCgwKTtcblxuICAgICAgICB2YXIgdHJhaWxpbmcgPSBzdHJTeW1ib2xzXG4gICAgICAgICAgPyBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMSkuam9pbignJylcbiAgICAgICAgICA6IHN0cmluZy5zbGljZSgxKTtcblxuICAgICAgICByZXR1cm4gY2hyW21ldGhvZE5hbWVdKCkgKyB0cmFpbGluZztcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uY2FtZWxDYXNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmUgZWFjaCB3b3JkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvdW5kZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ29tcG91bmRlcihjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgICByZXR1cm4gYXJyYXlSZWR1Y2Uod29yZHMoZGVidXJyKHN0cmluZykucmVwbGFjZShyZUFwb3MsICcnKSksIGNhbGxiYWNrLCAnJyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHByb2R1Y2VzIGFuIGluc3RhbmNlIG9mIGBDdG9yYCByZWdhcmRsZXNzIG9mXG4gICAgICogd2hldGhlciBpdCB3YXMgaW52b2tlZCBhcyBwYXJ0IG9mIGEgYG5ld2AgZXhwcmVzc2lvbiBvciBieSBgY2FsbGAgb3IgYGFwcGx5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gQ3RvciBUaGUgY29uc3RydWN0b3IgdG8gd3JhcC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUN0b3IoQ3Rvcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBVc2UgYSBgc3dpdGNoYCBzdGF0ZW1lbnQgdG8gd29yayB3aXRoIGNsYXNzIGNvbnN0cnVjdG9ycy4gU2VlXG4gICAgICAgIC8vIGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtZnVuY3Rpb24tb2JqZWN0cy1jYWxsLXRoaXNhcmd1bWVudC1hcmd1bWVudHNsaXN0XG4gICAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IEN0b3I7XG4gICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSk7XG4gICAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSk7XG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSwgYXJnc1s1XSk7XG4gICAgICAgICAgY2FzZSA3OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSwgYXJnc1s1XSwgYXJnc1s2XSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRoaXNCaW5kaW5nID0gYmFzZUNyZWF0ZShDdG9yLnByb3RvdHlwZSksXG4gICAgICAgICAgICByZXN1bHQgPSBDdG9yLmFwcGx5KHRoaXNCaW5kaW5nLCBhcmdzKTtcblxuICAgICAgICAvLyBNaW1pYyB0aGUgY29uc3RydWN0b3IncyBgcmV0dXJuYCBiZWhhdmlvci5cbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDEzLjIuMiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IHRoaXNCaW5kaW5nO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gZW5hYmxlIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFyaXR5IFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDdXJyeShmdW5jLCBiaXRtYXNrLCBhcml0eSkge1xuICAgICAgdmFyIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGgsXG4gICAgICAgICAgICBwbGFjZWhvbGRlciA9IGdldEhvbGRlcih3cmFwcGVyKTtcblxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaG9sZGVycyA9IChsZW5ndGggPCAzICYmIGFyZ3NbMF0gIT09IHBsYWNlaG9sZGVyICYmIGFyZ3NbbGVuZ3RoIC0gMV0gIT09IHBsYWNlaG9sZGVyKVxuICAgICAgICAgID8gW11cbiAgICAgICAgICA6IHJlcGxhY2VIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcblxuICAgICAgICBsZW5ndGggLT0gaG9sZGVycy5sZW5ndGg7XG4gICAgICAgIGlmIChsZW5ndGggPCBhcml0eSkge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVSZWN1cnJ5KFxuICAgICAgICAgICAgZnVuYywgYml0bWFzaywgY3JlYXRlSHlicmlkLCB3cmFwcGVyLnBsYWNlaG9sZGVyLCB1bmRlZmluZWQsXG4gICAgICAgICAgICBhcmdzLCBob2xkZXJzLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYXJpdHkgLSBsZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG4gICAgICAgIHJldHVybiBhcHBseShmbiwgdGhpcywgYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8uZmluZGAgb3IgYF8uZmluZExhc3RgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmaW5kSW5kZXhGdW5jIFRoZSBmdW5jdGlvbiB0byBmaW5kIHRoZSBjb2xsZWN0aW9uIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZpbmQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRmluZChmaW5kSW5kZXhGdW5jKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgICAgdmFyIGl0ZXJhYmxlID0gT2JqZWN0KGNvbGxlY3Rpb24pO1xuICAgICAgICBpZiAoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgdmFyIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKTtcbiAgICAgICAgICBjb2xsZWN0aW9uID0ga2V5cyhjb2xsZWN0aW9uKTtcbiAgICAgICAgICBwcmVkaWNhdGUgPSBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpOyB9O1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbmRleCA9IGZpbmRJbmRleEZ1bmMoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBmcm9tSW5kZXgpO1xuICAgICAgICByZXR1cm4gaW5kZXggPiAtMSA/IGl0ZXJhYmxlW2l0ZXJhdGVlID8gY29sbGVjdGlvbltpbmRleF0gOiBpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5mbG93YCBvciBgXy5mbG93UmlnaHRgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmbG93IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUZsb3coZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZmxhdFJlc3QoZnVuY3Rpb24oZnVuY3MpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGZ1bmNzLmxlbmd0aCxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoLFxuICAgICAgICAgICAgcHJlcmVxID0gTG9kYXNoV3JhcHBlci5wcm90b3R5cGUudGhydTtcblxuICAgICAgICBpZiAoZnJvbVJpZ2h0KSB7XG4gICAgICAgICAgZnVuY3MucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgdmFyIGZ1bmMgPSBmdW5jc1tpbmRleF07XG4gICAgICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHByZXJlcSAmJiAhd3JhcHBlciAmJiBnZXRGdW5jTmFtZShmdW5jKSA9PSAnd3JhcHBlcicpIHtcbiAgICAgICAgICAgIHZhciB3cmFwcGVyID0gbmV3IExvZGFzaFdyYXBwZXIoW10sIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IHdyYXBwZXIgPyBpbmRleCA6IGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBmdW5jID0gZnVuY3NbaW5kZXhdO1xuXG4gICAgICAgICAgdmFyIGZ1bmNOYW1lID0gZ2V0RnVuY05hbWUoZnVuYyksXG4gICAgICAgICAgICAgIGRhdGEgPSBmdW5jTmFtZSA9PSAnd3JhcHBlcicgPyBnZXREYXRhKGZ1bmMpIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKGRhdGEgJiYgaXNMYXppYWJsZShkYXRhWzBdKSAmJlxuICAgICAgICAgICAgICAgIGRhdGFbMV0gPT0gKFdSQVBfQVJZX0ZMQUcgfCBXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX1BBUlRJQUxfRkxBRyB8IFdSQVBfUkVBUkdfRkxBRykgJiZcbiAgICAgICAgICAgICAgICAhZGF0YVs0XS5sZW5ndGggJiYgZGF0YVs5XSA9PSAxXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgd3JhcHBlciA9IHdyYXBwZXJbZ2V0RnVuY05hbWUoZGF0YVswXSldLmFwcGx5KHdyYXBwZXIsIGRhdGFbM10pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3cmFwcGVyID0gKGZ1bmMubGVuZ3RoID09IDEgJiYgaXNMYXppYWJsZShmdW5jKSlcbiAgICAgICAgICAgICAgPyB3cmFwcGVyW2Z1bmNOYW1lXSgpXG4gICAgICAgICAgICAgIDogd3JhcHBlci50aHJ1KGZ1bmMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgIHZhbHVlID0gYXJnc1swXTtcblxuICAgICAgICAgIGlmICh3cmFwcGVyICYmIGFyZ3MubGVuZ3RoID09IDEgJiYgaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB3cmFwcGVyLnBsYW50KHZhbHVlKS52YWx1ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgICAgICByZXN1bHQgPSBsZW5ndGggPyBmdW5jc1tpbmRleF0uYXBwbHkodGhpcywgYXJncykgOiB2YWx1ZTtcblxuICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBmdW5jc1tpbmRleF0uY2FsbCh0aGlzLCByZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIG9wdGlvbmFsIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgYHRoaXNBcmdgLCBwYXJ0aWFsIGFwcGxpY2F0aW9uLCBhbmQgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSBmdW5jIFRoZSBmdW5jdGlvbiBvciBtZXRob2QgbmFtZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICAgICAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc1JpZ2h0XSBUaGUgYXJndW1lbnRzIHRvIGFwcGVuZCB0byB0aG9zZSBwcm92aWRlZFxuICAgICAqICB0byB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzUmlnaHRdIFRoZSBgcGFydGlhbHNSaWdodGAgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVIeWJyaWQoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCwgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNBcnkgPSBiaXRtYXNrICYgV1JBUF9BUllfRkxBRyxcbiAgICAgICAgICBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgaXNCaW5kS2V5ID0gYml0bWFzayAmIFdSQVBfQklORF9LRVlfRkxBRyxcbiAgICAgICAgICBpc0N1cnJpZWQgPSBiaXRtYXNrICYgKFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfQ1VSUllfUklHSFRfRkxBRyksXG4gICAgICAgICAgaXNGbGlwID0gYml0bWFzayAmIFdSQVBfRkxJUF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBpc0JpbmRLZXkgPyB1bmRlZmluZWQgOiBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICBhcmdzW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQ3VycmllZCkge1xuICAgICAgICAgIHZhciBwbGFjZWhvbGRlciA9IGdldEhvbGRlcih3cmFwcGVyKSxcbiAgICAgICAgICAgICAgaG9sZGVyc0NvdW50ID0gY291bnRIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydGlhbHMpIHtcbiAgICAgICAgICBhcmdzID0gY29tcG9zZUFyZ3MoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRpYWxzUmlnaHQpIHtcbiAgICAgICAgICBhcmdzID0gY29tcG9zZUFyZ3NSaWdodChhcmdzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsIGlzQ3VycmllZCk7XG4gICAgICAgIH1cbiAgICAgICAgbGVuZ3RoIC09IGhvbGRlcnNDb3VudDtcbiAgICAgICAgaWYgKGlzQ3VycmllZCAmJiBsZW5ndGggPCBhcml0eSkge1xuICAgICAgICAgIHZhciBuZXdIb2xkZXJzID0gcmVwbGFjZUhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuICAgICAgICAgIHJldHVybiBjcmVhdGVSZWN1cnJ5KFxuICAgICAgICAgICAgZnVuYywgYml0bWFzaywgY3JlYXRlSHlicmlkLCB3cmFwcGVyLnBsYWNlaG9sZGVyLCB0aGlzQXJnLFxuICAgICAgICAgICAgYXJncywgbmV3SG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5IC0gbGVuZ3RoXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGhpc0JpbmRpbmcgPSBpc0JpbmQgPyB0aGlzQXJnIDogdGhpcyxcbiAgICAgICAgICAgIGZuID0gaXNCaW5kS2V5ID8gdGhpc0JpbmRpbmdbZnVuY10gOiBmdW5jO1xuXG4gICAgICAgIGxlbmd0aCA9IGFyZ3MubGVuZ3RoO1xuICAgICAgICBpZiAoYXJnUG9zKSB7XG4gICAgICAgICAgYXJncyA9IHJlb3JkZXIoYXJncywgYXJnUG9zKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0ZsaXAgJiYgbGVuZ3RoID4gMSkge1xuICAgICAgICAgIGFyZ3MucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FyeSAmJiBhcnkgPCBsZW5ndGgpIHtcbiAgICAgICAgICBhcmdzLmxlbmd0aCA9IGFyeTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSB7XG4gICAgICAgICAgZm4gPSBDdG9yIHx8IGNyZWF0ZUN0b3IoZm4pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzQmluZGluZywgYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5pbnZlcnRCeWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGFjY3VtdWxhdG9yIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0b0l0ZXJhdGVlIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIGl0ZXJhdGVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVJbnZlcnRlcihzZXR0ZXIsIHRvSXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52ZXJ0ZXIob2JqZWN0LCBzZXR0ZXIsIHRvSXRlcmF0ZWUoaXRlcmF0ZWUpLCB7fSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgbWF0aGVtYXRpY2FsIG9wZXJhdGlvbiBvbiB0d28gdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcGVyYXRvciBUaGUgZnVuY3Rpb24gdG8gcGVyZm9ybSB0aGUgb3BlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgdXNlZCBmb3IgYHVuZGVmaW5lZGAgYXJndW1lbnRzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1hdGhlbWF0aWNhbCBvcGVyYXRpb24gZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlTWF0aE9wZXJhdGlvbihvcGVyYXRvciwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIG90aGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG90aGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBvdGhlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3RoZXIgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZVRvU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgIG90aGVyID0gYmFzZVRvU3RyaW5nKG90aGVyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUgPSBiYXNlVG9OdW1iZXIodmFsdWUpO1xuICAgICAgICAgICAgb3RoZXIgPSBiYXNlVG9OdW1iZXIob3RoZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBvcGVyYXRvcih2YWx1ZSwgb3RoZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLm92ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhcnJheUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBpdGVyYXRlZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgb3ZlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVPdmVyKGFycmF5RnVuYykge1xuICAgICAgcmV0dXJuIGZsYXRSZXN0KGZ1bmN0aW9uKGl0ZXJhdGVlcykge1xuICAgICAgICBpdGVyYXRlZXMgPSBhcnJheU1hcChpdGVyYXRlZXMsIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG4gICAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgICAgdmFyIHRoaXNBcmcgPSB0aGlzO1xuICAgICAgICAgIHJldHVybiBhcnJheUZ1bmMoaXRlcmF0ZWVzLCBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICAgICAgcmV0dXJuIGFwcGx5KGl0ZXJhdGVlLCB0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIHRoZSBwYWRkaW5nIGZvciBgc3RyaW5nYCBiYXNlZCBvbiBgbGVuZ3RoYC4gVGhlIGBjaGFyc2Agc3RyaW5nXG4gICAgICogaXMgdHJ1bmNhdGVkIGlmIHRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyBleGNlZWRzIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGluZyBmb3IgYHN0cmluZ2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUGFkZGluZyhsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBjaGFycyA9IGNoYXJzID09PSB1bmRlZmluZWQgPyAnICcgOiBiYXNlVG9TdHJpbmcoY2hhcnMpO1xuXG4gICAgICB2YXIgY2hhcnNMZW5ndGggPSBjaGFycy5sZW5ndGg7XG4gICAgICBpZiAoY2hhcnNMZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiBjaGFyc0xlbmd0aCA/IGJhc2VSZXBlYXQoY2hhcnMsIGxlbmd0aCkgOiBjaGFycztcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlUmVwZWF0KGNoYXJzLCBuYXRpdmVDZWlsKGxlbmd0aCAvIHN0cmluZ1NpemUoY2hhcnMpKSk7XG4gICAgICByZXR1cm4gaGFzVW5pY29kZShjaGFycylcbiAgICAgICAgPyBjYXN0U2xpY2Uoc3RyaW5nVG9BcnJheShyZXN1bHQpLCAwLCBsZW5ndGgpLmpvaW4oJycpXG4gICAgICAgIDogcmVzdWx0LnNsaWNlKDAsIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZ1xuICAgICAqIG9mIGB0aGlzQXJnYCBhbmQgYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICAgICAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUGFydGlhbChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgICAgICBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBsZWZ0SW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlZnRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVmdExlbmd0aCArIGFyZ3NMZW5ndGgpLFxuICAgICAgICAgICAgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuXG4gICAgICAgIHdoaWxlICgrK2xlZnRJbmRleCA8IGxlZnRMZW5ndGgpIHtcbiAgICAgICAgICBhcmdzW2xlZnRJbmRleF0gPSBwYXJ0aWFsc1tsZWZ0SW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChhcmdzTGVuZ3RoLS0pIHtcbiAgICAgICAgICBhcmdzW2xlZnRJbmRleCsrXSA9IGFyZ3VtZW50c1srK2FyZ3NJbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZuLCBpc0JpbmQgPyB0aGlzQXJnIDogdGhpcywgYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8ucmFuZ2VgIG9yIGBfLnJhbmdlUmlnaHRgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByYW5nZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSYW5nZShmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdGFydCwgZW5kLCBzdGVwKSB7XG4gICAgICAgIGlmIChzdGVwICYmIHR5cGVvZiBzdGVwICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKHN0YXJ0LCBlbmQsIHN0ZXApKSB7XG4gICAgICAgICAgZW5kID0gc3RlcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBFbnN1cmUgdGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gICAgICAgIHN0YXJ0ID0gdG9GaW5pdGUoc3RhcnQpO1xuICAgICAgICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBlbmQgPSBzdGFydDtcbiAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZW5kID0gdG9GaW5pdGUoZW5kKTtcbiAgICAgICAgfVxuICAgICAgICBzdGVwID0gc3RlcCA9PT0gdW5kZWZpbmVkID8gKHN0YXJ0IDwgZW5kID8gMSA6IC0xKSA6IHRvRmluaXRlKHN0ZXApO1xuICAgICAgICByZXR1cm4gYmFzZVJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXAsIGZyb21SaWdodCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgcmVsYXRpb25hbCBvcGVyYXRpb24gb24gdHdvIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3BlcmF0b3IgVGhlIGZ1bmN0aW9uIHRvIHBlcmZvcm0gdGhlIG9wZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZWxhdGlvbmFsIG9wZXJhdGlvbiBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKG9wZXJhdG9yKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICAgIGlmICghKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyAmJiB0eXBlb2Ygb3RoZXIgPT0gJ3N0cmluZycpKSB7XG4gICAgICAgICAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gICAgICAgICAgb3RoZXIgPSB0b051bWJlcihvdGhlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9wZXJhdG9yKHZhbHVlLCBvdGhlcik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBjb250aW51ZSBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHdyYXBGdW5jIFRoZSBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIGBmdW5jYCB3cmFwcGVyLlxuICAgICAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSZWN1cnJ5KGZ1bmMsIGJpdG1hc2ssIHdyYXBGdW5jLCBwbGFjZWhvbGRlciwgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICAgICAgdmFyIGlzQ3VycnkgPSBiaXRtYXNrICYgV1JBUF9DVVJSWV9GTEFHLFxuICAgICAgICAgIG5ld0hvbGRlcnMgPSBpc0N1cnJ5ID8gaG9sZGVycyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBuZXdIb2xkZXJzUmlnaHQgPSBpc0N1cnJ5ID8gdW5kZWZpbmVkIDogaG9sZGVycyxcbiAgICAgICAgICBuZXdQYXJ0aWFscyA9IGlzQ3VycnkgPyBwYXJ0aWFscyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBuZXdQYXJ0aWFsc1JpZ2h0ID0gaXNDdXJyeSA/IHVuZGVmaW5lZCA6IHBhcnRpYWxzO1xuXG4gICAgICBiaXRtYXNrIHw9IChpc0N1cnJ5ID8gV1JBUF9QQVJUSUFMX0ZMQUcgOiBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyk7XG4gICAgICBiaXRtYXNrICY9IH4oaXNDdXJyeSA/IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHIDogV1JBUF9QQVJUSUFMX0ZMQUcpO1xuXG4gICAgICBpZiAoIShiaXRtYXNrICYgV1JBUF9DVVJSWV9CT1VORF9GTEFHKSkge1xuICAgICAgICBiaXRtYXNrICY9IH4oV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUcpO1xuICAgICAgfVxuICAgICAgdmFyIG5ld0RhdGEgPSBbXG4gICAgICAgIGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIG5ld1BhcnRpYWxzLCBuZXdIb2xkZXJzLCBuZXdQYXJ0aWFsc1JpZ2h0LFxuICAgICAgICBuZXdIb2xkZXJzUmlnaHQsIGFyZ1BvcywgYXJ5LCBhcml0eVxuICAgICAgXTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHdyYXBGdW5jLmFwcGx5KHVuZGVmaW5lZCwgbmV3RGF0YSk7XG4gICAgICBpZiAoaXNMYXppYWJsZShmdW5jKSkge1xuICAgICAgICBzZXREYXRhKHJlc3VsdCwgbmV3RGF0YSk7XG4gICAgICB9XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlcjtcbiAgICAgIHJldHVybiBzZXRXcmFwVG9TdHJpbmcocmVzdWx0LCBmdW5jLCBiaXRtYXNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5yb3VuZGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIFRoZSBuYW1lIG9mIHRoZSBgTWF0aGAgbWV0aG9kIHRvIHVzZSB3aGVuIHJvdW5kaW5nLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJvdW5kIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJvdW5kKG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gTWF0aFttZXRob2ROYW1lXTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihudW1iZXIsIHByZWNpc2lvbikge1xuICAgICAgICBudW1iZXIgPSB0b051bWJlcihudW1iZXIpO1xuICAgICAgICBwcmVjaXNpb24gPSBwcmVjaXNpb24gPT0gbnVsbCA/IDAgOiBuYXRpdmVNaW4odG9JbnRlZ2VyKHByZWNpc2lvbiksIDI5Mik7XG4gICAgICAgIGlmIChwcmVjaXNpb24gJiYgbmF0aXZlSXNGaW5pdGUobnVtYmVyKSkge1xuICAgICAgICAgIC8vIFNoaWZ0IHdpdGggZXhwb25lbnRpYWwgbm90YXRpb24gdG8gYXZvaWQgZmxvYXRpbmctcG9pbnQgaXNzdWVzLlxuICAgICAgICAgIC8vIFNlZSBbTUROXShodHRwczovL21kbi5pby9yb3VuZCNFeGFtcGxlcykgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgICB2YXIgcGFpciA9ICh0b1N0cmluZyhudW1iZXIpICsgJ2UnKS5zcGxpdCgnZScpLFxuICAgICAgICAgICAgICB2YWx1ZSA9IGZ1bmMocGFpclswXSArICdlJyArICgrcGFpclsxXSArIHByZWNpc2lvbikpO1xuXG4gICAgICAgICAgcGFpciA9ICh0b1N0cmluZyh2YWx1ZSkgKyAnZScpLnNwbGl0KCdlJyk7XG4gICAgICAgICAgcmV0dXJuICsocGFpclswXSArICdlJyArICgrcGFpclsxXSAtIHByZWNpc2lvbikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jKG51bWJlcik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzZXQgb2JqZWN0IG9mIGB2YWx1ZXNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhZGQgdG8gdGhlIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgc2V0LlxuICAgICAqL1xuICAgIHZhciBjcmVhdGVTZXQgPSAhKFNldCAmJiAoMSAvIHNldFRvQXJyYXkobmV3IFNldChbLC0wXSkpWzFdKSA9PSBJTkZJTklUWSkgPyBub29wIDogZnVuY3Rpb24odmFsdWVzKSB7XG4gICAgICByZXR1cm4gbmV3IFNldCh2YWx1ZXMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8udG9QYWlyc2Agb3IgYF8udG9QYWlyc0luYCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBhIGdpdmVuIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYWlycyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVUb1BhaXJzKGtleXNGdW5jKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHZhciB0YWcgPSBnZXRUYWcob2JqZWN0KTtcbiAgICAgICAgaWYgKHRhZyA9PSBtYXBUYWcpIHtcbiAgICAgICAgICByZXR1cm4gbWFwVG9BcnJheShvYmplY3QpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YWcgPT0gc2V0VGFnKSB7XG4gICAgICAgICAgcmV0dXJuIHNldFRvUGFpcnMob2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmFzZVRvUGFpcnMob2JqZWN0LCBrZXlzRnVuYyhvYmplY3QpKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgZWl0aGVyIGN1cnJpZXMgb3IgaW52b2tlcyBgZnVuY2Agd2l0aCBvcHRpb25hbFxuICAgICAqIGB0aGlzYCBiaW5kaW5nIGFuZCBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSBmdW5jIFRoZSBmdW5jdGlvbiBvciBtZXRob2QgbmFtZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICAgICAqICAgIDEgLSBgXy5iaW5kYFxuICAgICAqICAgIDIgLSBgXy5iaW5kS2V5YFxuICAgICAqICAgIDQgLSBgXy5jdXJyeWAgb3IgYF8uY3VycnlSaWdodGAgb2YgYSBib3VuZCBmdW5jdGlvblxuICAgICAqICAgIDggLSBgXy5jdXJyeWBcbiAgICAgKiAgIDE2IC0gYF8uY3VycnlSaWdodGBcbiAgICAgKiAgIDMyIC0gYF8ucGFydGlhbGBcbiAgICAgKiAgIDY0IC0gYF8ucGFydGlhbFJpZ2h0YFxuICAgICAqICAxMjggLSBgXy5yZWFyZ2BcbiAgICAgKiAgMjU2IC0gYF8uYXJ5YFxuICAgICAqICA1MTIgLSBgXy5mbGlwYFxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVdyYXAoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICAgICAgdmFyIGlzQmluZEtleSA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfS0VZX0ZMQUc7XG4gICAgICBpZiAoIWlzQmluZEtleSAmJiB0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBwYXJ0aWFscyA/IHBhcnRpYWxzLmxlbmd0aCA6IDA7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICBiaXRtYXNrICY9IH4oV1JBUF9QQVJUSUFMX0ZMQUcgfCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyk7XG4gICAgICAgIHBhcnRpYWxzID0gaG9sZGVycyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGFyeSA9IGFyeSA9PT0gdW5kZWZpbmVkID8gYXJ5IDogbmF0aXZlTWF4KHRvSW50ZWdlcihhcnkpLCAwKTtcbiAgICAgIGFyaXR5ID0gYXJpdHkgPT09IHVuZGVmaW5lZCA/IGFyaXR5IDogdG9JbnRlZ2VyKGFyaXR5KTtcbiAgICAgIGxlbmd0aCAtPSBob2xkZXJzID8gaG9sZGVycy5sZW5ndGggOiAwO1xuXG4gICAgICBpZiAoYml0bWFzayAmIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsc1JpZ2h0ID0gcGFydGlhbHMsXG4gICAgICAgICAgICBob2xkZXJzUmlnaHQgPSBob2xkZXJzO1xuXG4gICAgICAgIHBhcnRpYWxzID0gaG9sZGVycyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHZhciBkYXRhID0gaXNCaW5kS2V5ID8gdW5kZWZpbmVkIDogZ2V0RGF0YShmdW5jKTtcblxuICAgICAgdmFyIG5ld0RhdGEgPSBbXG4gICAgICAgIGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsXG4gICAgICAgIGFyZ1BvcywgYXJ5LCBhcml0eVxuICAgICAgXTtcblxuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgbWVyZ2VEYXRhKG5ld0RhdGEsIGRhdGEpO1xuICAgICAgfVxuICAgICAgZnVuYyA9IG5ld0RhdGFbMF07XG4gICAgICBiaXRtYXNrID0gbmV3RGF0YVsxXTtcbiAgICAgIHRoaXNBcmcgPSBuZXdEYXRhWzJdO1xuICAgICAgcGFydGlhbHMgPSBuZXdEYXRhWzNdO1xuICAgICAgaG9sZGVycyA9IG5ld0RhdGFbNF07XG4gICAgICBhcml0eSA9IG5ld0RhdGFbOV0gPSBuZXdEYXRhWzldID09PSB1bmRlZmluZWRcbiAgICAgICAgPyAoaXNCaW5kS2V5ID8gMCA6IGZ1bmMubGVuZ3RoKVxuICAgICAgICA6IG5hdGl2ZU1heChuZXdEYXRhWzldIC0gbGVuZ3RoLCAwKTtcblxuICAgICAgaWYgKCFhcml0eSAmJiBiaXRtYXNrICYgKFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfQ1VSUllfUklHSFRfRkxBRykpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfQ1VSUllfUklHSFRfRkxBRyk7XG4gICAgICB9XG4gICAgICBpZiAoIWJpdG1hc2sgfHwgYml0bWFzayA9PSBXUkFQX0JJTkRfRkxBRykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlQmluZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnKTtcbiAgICAgIH0gZWxzZSBpZiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcgfHwgYml0bWFzayA9PSBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpIHtcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlQ3VycnkoZnVuYywgYml0bWFzaywgYXJpdHkpO1xuICAgICAgfSBlbHNlIGlmICgoYml0bWFzayA9PSBXUkFQX1BBUlRJQUxfRkxBRyB8fCBiaXRtYXNrID09IChXUkFQX0JJTkRfRkxBRyB8IFdSQVBfUEFSVElBTF9GTEFHKSkgJiYgIWhvbGRlcnMubGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZVBhcnRpYWwoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlSHlicmlkLmFwcGx5KHVuZGVmaW5lZCwgbmV3RGF0YSk7XG4gICAgICB9XG4gICAgICB2YXIgc2V0dGVyID0gZGF0YSA/IGJhc2VTZXREYXRhIDogc2V0RGF0YTtcbiAgICAgIHJldHVybiBzZXRXcmFwVG9TdHJpbmcoc2V0dGVyKHJlc3VsdCwgbmV3RGF0YSksIGZ1bmMsIGJpdG1hc2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8uZGVmYXVsdHNgIHRvIGN1c3RvbWl6ZSBpdHMgYF8uYXNzaWduSW5gIHVzZSB0byBhc3NpZ24gcHJvcGVydGllc1xuICAgICAqIG9mIHNvdXJjZSBvYmplY3RzIHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QgZm9yIGFsbCBkZXN0aW5hdGlvbiBwcm9wZXJ0aWVzXG4gICAgICogdGhhdCByZXNvbHZlIHRvIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IG9ialZhbHVlIFRoZSBkZXN0aW5hdGlvbiB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSBzb3VyY2UgdmFsdWUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgcGFyZW50IG9iamVjdCBvZiBgb2JqVmFsdWVgLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tRGVmYXVsdHNBc3NpZ25JbihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgIChlcShvYmpWYWx1ZSwgb2JqZWN0UHJvdG9ba2V5XSkgJiYgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkge1xuICAgICAgICByZXR1cm4gc3JjVmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqVmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5kZWZhdWx0c0RlZXBgIHRvIGN1c3RvbWl6ZSBpdHMgYF8ubWVyZ2VgIHVzZSB0byBtZXJnZSBzb3VyY2VcbiAgICAgKiBvYmplY3RzIGludG8gZGVzdGluYXRpb24gb2JqZWN0cyB0aGF0IGFyZSBwYXNzZWQgdGhydS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBvYmpWYWx1ZSBUaGUgZGVzdGluYXRpb24gdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgc291cmNlIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gbWVyZ2UuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgcGFyZW50IG9iamVjdCBvZiBgb2JqVmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHBhcmVudCBvYmplY3Qgb2YgYHNyY1ZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICAgICAqICBjb3VudGVycGFydHMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21EZWZhdWx0c01lcmdlKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spIHtcbiAgICAgIGlmIChpc09iamVjdChvYmpWYWx1ZSkgJiYgaXNPYmplY3Qoc3JjVmFsdWUpKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBzdGFjay5zZXQoc3JjVmFsdWUsIG9ialZhbHVlKTtcbiAgICAgICAgYmFzZU1lcmdlKG9ialZhbHVlLCBzcmNWYWx1ZSwgdW5kZWZpbmVkLCBjdXN0b21EZWZhdWx0c01lcmdlLCBzdGFjayk7XG4gICAgICAgIHN0YWNrWydkZWxldGUnXShzcmNWYWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqVmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5vbWl0YCB0byBjdXN0b21pemUgaXRzIGBfLmNsb25lRGVlcGAgdXNlIHRvIG9ubHkgY2xvbmUgcGxhaW5cbiAgICAgKiBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdW5jbG9uZWQgdmFsdWUgb3IgYHVuZGVmaW5lZGAgdG8gZGVmZXIgY2xvbmluZyB0byBgXy5jbG9uZURlZXBgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbU9taXRDbG9uZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzUGxhaW5PYmplY3QodmFsdWUpID8gdW5kZWZpbmVkIDogdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBhcnJheXMgd2l0aCBzdXBwb3J0IGZvclxuICAgICAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtBcnJheX0gb3RoZXIgVGhlIG90aGVyIGFycmF5IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgYXJyYXlgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcnJheXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbEFycmF5cyhhcnJheSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICAgICAgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIG90aExlbmd0aCA9IG90aGVyLmxlbmd0aDtcblxuICAgICAgaWYgKGFyckxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIShpc1BhcnRpYWwgJiYgb3RoTGVuZ3RoID4gYXJyTGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBDaGVjayB0aGF0IGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIGFyclN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpO1xuICAgICAgdmFyIG90aFN0YWNrZWQgPSBzdGFjay5nZXQob3RoZXIpO1xuICAgICAgaWYgKGFyclN0YWNrZWQgJiYgb3RoU3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gYXJyU3RhY2tlZCA9PSBvdGhlciAmJiBvdGhTdGFja2VkID09IGFycmF5O1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gdHJ1ZSxcbiAgICAgICAgICBzZWVuID0gKGJpdG1hc2sgJiBDT01QQVJFX1VOT1JERVJFRF9GTEFHKSA/IG5ldyBTZXRDYWNoZSA6IHVuZGVmaW5lZDtcblxuICAgICAgc3RhY2suc2V0KGFycmF5LCBvdGhlcik7XG4gICAgICBzdGFjay5zZXQob3RoZXIsIGFycmF5KTtcblxuICAgICAgLy8gSWdub3JlIG5vbi1pbmRleCBwcm9wZXJ0aWVzLlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBhcnJMZW5ndGgpIHtcbiAgICAgICAgdmFyIGFyclZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltpbmRleF07XG5cbiAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgYXJyVmFsdWUsIGluZGV4LCBvdGhlciwgYXJyYXksIHN0YWNrKVxuICAgICAgICAgICAgOiBjdXN0b21pemVyKGFyclZhbHVlLCBvdGhWYWx1ZSwgaW5kZXgsIGFycmF5LCBvdGhlciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb21wYXJlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKGNvbXBhcmVkKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgaWYgKHNlZW4pIHtcbiAgICAgICAgICBpZiAoIWFycmF5U29tZShvdGhlciwgZnVuY3Rpb24ob3RoVmFsdWUsIG90aEluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjYWNoZUhhcyhzZWVuLCBvdGhJbmRleCkgJiZcbiAgICAgICAgICAgICAgICAgICAgKGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gc2Vlbi5wdXNoKG90aEluZGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghKFxuICAgICAgICAgICAgICBhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHxcbiAgICAgICAgICAgICAgICBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3RhY2tbJ2RlbGV0ZSddKGFycmF5KTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgY29tcGFyaW5nIG9iamVjdHMgb2ZcbiAgICAgKiB0aGUgc2FtZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjb21wYXJpbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICAgICAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIG9yIGBTdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdHMgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCB0YWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICAgICAob2JqZWN0LmJ5dGVPZmZzZXQgIT0gb3RoZXIuYnl0ZU9mZnNldCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb2JqZWN0ID0gb2JqZWN0LmJ1ZmZlcjtcbiAgICAgICAgICBvdGhlciA9IG90aGVyLmJ1ZmZlcjtcblxuICAgICAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAgICAgIWVxdWFsRnVuYyhuZXcgVWludDhBcnJheShvYmplY3QpLCBuZXcgVWludDhBcnJheShvdGhlcikpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAgIGNhc2UgYm9vbFRhZzpcbiAgICAgICAgY2FzZSBkYXRlVGFnOlxuICAgICAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgICAgICAvLyBDb2VyY2UgYm9vbGVhbnMgdG8gYDFgIG9yIGAwYCBhbmQgZGF0ZXMgdG8gbWlsbGlzZWNvbmRzLlxuICAgICAgICAgIC8vIEludmFsaWQgZGF0ZXMgYXJlIGNvZXJjZWQgdG8gYE5hTmAuXG4gICAgICAgICAgcmV0dXJuIGVxKCtvYmplY3QsICtvdGhlcik7XG5cbiAgICAgICAgY2FzZSBlcnJvclRhZzpcbiAgICAgICAgICByZXR1cm4gb2JqZWN0Lm5hbWUgPT0gb3RoZXIubmFtZSAmJiBvYmplY3QubWVzc2FnZSA9PSBvdGhlci5tZXNzYWdlO1xuXG4gICAgICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgICAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgICAgICAvLyBDb2VyY2UgcmVnZXhlcyB0byBzdHJpbmdzIGFuZCB0cmVhdCBzdHJpbmdzLCBwcmltaXRpdmVzIGFuZCBvYmplY3RzLFxuICAgICAgICAgIC8vIGFzIGVxdWFsLiBTZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbiAgICAgICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICAgIHJldHVybiBvYmplY3QgPT0gKG90aGVyICsgJycpO1xuXG4gICAgICAgIGNhc2UgbWFwVGFnOlxuICAgICAgICAgIHZhciBjb252ZXJ0ID0gbWFwVG9BcnJheTtcblxuICAgICAgICBjYXNlIHNldFRhZzpcbiAgICAgICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHO1xuICAgICAgICAgIGNvbnZlcnQgfHwgKGNvbnZlcnQgPSBzZXRUb0FycmF5KTtcblxuICAgICAgICAgIGlmIChvYmplY3Quc2l6ZSAhPSBvdGhlci5zaXplICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBiaXRtYXNrIHw9IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUc7XG5cbiAgICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGVxdWFsQXJyYXlzKGNvbnZlcnQob2JqZWN0KSwgY29udmVydChvdGhlciksIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICAgICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICAgICAgaWYgKHN5bWJvbFZhbHVlT2YpIHtcbiAgICAgICAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mLmNhbGwob2JqZWN0KSA9PSBzeW1ib2xWYWx1ZU9mLmNhbGwob3RoZXIpO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIG9iamVjdHMgd2l0aCBzdXBwb3J0IGZvclxuICAgICAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICAgICAgb2JqUHJvcHMgPSBnZXRBbGxLZXlzKG9iamVjdCksXG4gICAgICAgICAgb2JqTGVuZ3RoID0gb2JqUHJvcHMubGVuZ3RoLFxuICAgICAgICAgIG90aFByb3BzID0gZ2V0QWxsS2V5cyhvdGhlciksXG4gICAgICAgICAgb3RoTGVuZ3RoID0gb3RoUHJvcHMubGVuZ3RoO1xuXG4gICAgICBpZiAob2JqTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IG9iakxlbmd0aDtcbiAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgICAgIGlmICghKGlzUGFydGlhbCA/IGtleSBpbiBvdGhlciA6IGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsIGtleSkpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBDaGVjayB0aGF0IGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIG9ialN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgIHZhciBvdGhTdGFja2VkID0gc3RhY2suZ2V0KG90aGVyKTtcbiAgICAgIGlmIChvYmpTdGFja2VkICYmIG90aFN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIG9ialN0YWNrZWQgPT0gb3RoZXIgJiYgb3RoU3RhY2tlZCA9PSBvYmplY3Q7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgIHN0YWNrLnNldChvdGhlciwgb2JqZWN0KTtcblxuICAgICAgdmFyIHNraXBDdG9yID0gaXNQYXJ0aWFsO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBvYmpMZW5ndGgpIHtcbiAgICAgICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgICAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgICAgIG90aFZhbHVlID0gb3RoZXJba2V5XTtcblxuICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBvYmpWYWx1ZSwga2V5LCBvdGhlciwgb2JqZWN0LCBzdGFjaylcbiAgICAgICAgICAgIDogY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUsIGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBpZiAoIShjb21wYXJlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gKG9ialZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMob2JqVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpXG4gICAgICAgICAgICAgIDogY29tcGFyZWRcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBza2lwQ3RvciB8fCAoc2tpcEN0b3IgPSBrZXkgPT0gJ2NvbnN0cnVjdG9yJyk7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ICYmICFza2lwQ3Rvcikge1xuICAgICAgICB2YXIgb2JqQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcixcbiAgICAgICAgICAgIG90aEN0b3IgPSBvdGhlci5jb25zdHJ1Y3RvcjtcblxuICAgICAgICAvLyBOb24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbC5cbiAgICAgICAgaWYgKG9iakN0b3IgIT0gb3RoQ3RvciAmJlxuICAgICAgICAgICAgKCdjb25zdHJ1Y3RvcicgaW4gb2JqZWN0ICYmICdjb25zdHJ1Y3RvcicgaW4gb3RoZXIpICYmXG4gICAgICAgICAgICAhKHR5cGVvZiBvYmpDdG9yID09ICdmdW5jdGlvbicgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiZcbiAgICAgICAgICAgICAgdHlwZW9mIG90aEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvdGhDdG9yIGluc3RhbmNlb2Ygb3RoQ3RvcikpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCBmbGF0dGVucyB0aGUgcmVzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0UmVzdChmdW5jKSB7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgdW5kZWZpbmVkLCBmbGF0dGVuKSwgZnVuYyArICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5cywgZ2V0U3ltYm9scyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICAgICAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEFsbEtleXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNJbiwgZ2V0U3ltYm9sc0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBnZXREYXRhID0gIW1ldGFNYXAgPyBub29wIDogZnVuY3Rpb24oZnVuYykge1xuICAgICAgcmV0dXJuIG1ldGFNYXAuZ2V0KGZ1bmMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuYW1lIG9mIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRGdW5jTmFtZShmdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gKGZ1bmMubmFtZSArICcnKSxcbiAgICAgICAgICBhcnJheSA9IHJlYWxOYW1lc1tyZXN1bHRdLFxuICAgICAgICAgIGxlbmd0aCA9IGhhc093blByb3BlcnR5LmNhbGwocmVhbE5hbWVzLCByZXN1bHQpID8gYXJyYXkubGVuZ3RoIDogMDtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBkYXRhID0gYXJyYXlbbGVuZ3RoXSxcbiAgICAgICAgICAgIG90aGVyRnVuYyA9IGRhdGEuZnVuYztcbiAgICAgICAgaWYgKG90aGVyRnVuYyA9PSBudWxsIHx8IG90aGVyRnVuYyA9PSBmdW5jKSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGEubmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBhcmd1bWVudCBwbGFjZWhvbGRlciB2YWx1ZSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRIb2xkZXIoZnVuYykge1xuICAgICAgdmFyIG9iamVjdCA9IGhhc093blByb3BlcnR5LmNhbGwobG9kYXNoLCAncGxhY2Vob2xkZXInKSA/IGxvZGFzaCA6IGZ1bmM7XG4gICAgICByZXR1cm4gb2JqZWN0LnBsYWNlaG9sZGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFwcHJvcHJpYXRlIFwiaXRlcmF0ZWVcIiBmdW5jdGlvbi4gSWYgYF8uaXRlcmF0ZWVgIGlzIGN1c3RvbWl6ZWQsXG4gICAgICogdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBjdXN0b20gbWV0aG9kLCBvdGhlcndpc2UgaXQgcmV0dXJucyBgYmFzZUl0ZXJhdGVlYC5cbiAgICAgKiBJZiBhcmd1bWVudHMgYXJlIHByb3ZpZGVkLCB0aGUgY2hvc2VuIGZ1bmN0aW9uIGlzIGludm9rZWQgd2l0aCB0aGVtIGFuZFxuICAgICAqIGl0cyByZXN1bHQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gW3ZhbHVlXSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgdGhlIGNyZWF0ZWQgaXRlcmF0ZWUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjaG9zZW4gZnVuY3Rpb24gb3IgaXRzIHJlc3VsdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRJdGVyYXRlZSgpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2guaXRlcmF0ZWUgfHwgaXRlcmF0ZWU7XG4gICAgICByZXN1bHQgPSByZXN1bHQgPT09IGl0ZXJhdGVlID8gYmFzZUl0ZXJhdGVlIDogcmVzdWx0O1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyByZXN1bHQoYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0pIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICAgICAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gICAgICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICAgICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICAgICAgOiBkYXRhLm1hcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbWF0Y2ggZGF0YSBvZiBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRNYXRjaERhdGEob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0ga2V5cyhvYmplY3QpLFxuICAgICAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIga2V5ID0gcmVzdWx0W2xlbmd0aF0sXG4gICAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgIHJlc3VsdFtsZW5ndGhdID0gW2tleSwgdmFsdWUsIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICAgICAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgICAgIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICAgIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIGlmICh1bm1hc2tlZCkge1xuICAgICAgICBpZiAoaXNPd24pIHtcbiAgICAgICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICAgICAqL1xuICAgIHZhciBnZXRTeW1ib2xzID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHJldHVybiBhcnJheUZpbHRlcihuYXRpdmVHZXRTeW1ib2xzKG9iamVjdCksIGZ1bmN0aW9uKHN5bWJvbCkge1xuICAgICAgICByZXR1cm4gcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsIHN5bWJvbCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICAgICAqL1xuICAgIHZhciBnZXRTeW1ib2xzSW4gPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgd2hpbGUgKG9iamVjdCkge1xuICAgICAgICBhcnJheVB1c2gocmVzdWx0LCBnZXRTeW1ib2xzKG9iamVjdCkpO1xuICAgICAgICBvYmplY3QgPSBnZXRQcm90b3R5cGUob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICB2YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuICAgIC8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cbiAgICBpZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAgICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgICAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgICAgIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogJyc7XG5cbiAgICAgICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOiByZXR1cm4gcHJvbWlzZVRhZztcbiAgICAgICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2aWV3LCBhcHBseWluZyBhbnkgYHRyYW5zZm9ybXNgIHRvIHRoZSBgc3RhcnRgIGFuZCBgZW5kYCBwb3NpdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHZpZXcuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSB2aWV3LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHRyYW5zZm9ybXMgVGhlIHRyYW5zZm9ybWF0aW9ucyB0byBhcHBseSB0byB0aGUgdmlldy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBgc3RhcnRgIGFuZCBgZW5kYFxuICAgICAqICBwb3NpdGlvbnMgb2YgdGhlIHZpZXcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0VmlldyhzdGFydCwgZW5kLCB0cmFuc2Zvcm1zKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB0cmFuc2Zvcm1zLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSB0cmFuc2Zvcm1zW2luZGV4XSxcbiAgICAgICAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgICAgICAgc3dpdGNoIChkYXRhLnR5cGUpIHtcbiAgICAgICAgICBjYXNlICdkcm9wJzogICAgICBzdGFydCArPSBzaXplOyBicmVhaztcbiAgICAgICAgICBjYXNlICdkcm9wUmlnaHQnOiBlbmQgLT0gc2l6ZTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndGFrZSc6ICAgICAgZW5kID0gbmF0aXZlTWluKGVuZCwgc3RhcnQgKyBzaXplKTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndGFrZVJpZ2h0Jzogc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQsIGVuZCAtIHNpemUpOyBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHsgJ3N0YXJ0Jzogc3RhcnQsICdlbmQnOiBlbmQgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyB3cmFwcGVyIGRldGFpbHMgZnJvbSB0aGUgYHNvdXJjZWAgYm9keSBjb21tZW50LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFRoZSBzb3VyY2UgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdyYXBwZXIgZGV0YWlscy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRXcmFwRGV0YWlscyhzb3VyY2UpIHtcbiAgICAgIHZhciBtYXRjaCA9IHNvdXJjZS5tYXRjaChyZVdyYXBEZXRhaWxzKTtcbiAgICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdLnNwbGl0KHJlU3BsaXREZXRhaWxzKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgZXhpc3RzIG9uIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFzRnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2sgcHJvcGVydGllcy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBoYXNGdW5jKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSk7XG4gICAgICAgIGlmICghKHJlc3VsdCA9IG9iamVjdCAhPSBudWxsICYmIGhhc0Z1bmMob2JqZWN0LCBrZXkpKSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IG9iamVjdFtrZXldO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCB8fCArK2luZGV4ICE9IGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgbGVuZ3RoID0gb2JqZWN0ID09IG51bGwgPyAwIDogb2JqZWN0Lmxlbmd0aDtcbiAgICAgIHJldHVybiAhIWxlbmd0aCAmJiBpc0xlbmd0aChsZW5ndGgpICYmIGlzSW5kZXgoa2V5LCBsZW5ndGgpICYmXG4gICAgICAgIChpc0FycmF5KG9iamVjdCkgfHwgaXNBcmd1bWVudHMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gYXJyYXkgY2xvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZUFycmF5KGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IG5ldyBhcnJheS5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gICAgICAvLyBBZGQgcHJvcGVydGllcyBhc3NpZ25lZCBieSBgUmVnRXhwI2V4ZWNgLlxuICAgICAgaWYgKGxlbmd0aCAmJiB0eXBlb2YgYXJyYXlbMF0gPT0gJ3N0cmluZycgJiYgaGFzT3duUHJvcGVydHkuY2FsbChhcnJheSwgJ2luZGV4JykpIHtcbiAgICAgICAgcmVzdWx0LmluZGV4ID0gYXJyYXkuaW5kZXg7XG4gICAgICAgIHJlc3VsdC5pbnB1dCA9IGFycmF5LmlucHV0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVPYmplY3Qob2JqZWN0KSB7XG4gICAgICByZXR1cm4gKHR5cGVvZiBvYmplY3QuY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNQcm90b3R5cGUob2JqZWN0KSlcbiAgICAgICAgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKVxuICAgICAgICA6IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZSBiYXNlZCBvbiBpdHMgYHRvU3RyaW5nVGFnYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY2xvbmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gICAgICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBNYXBgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIGBTZXRgLCBvciBgU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZUJ5VGFnKG9iamVjdCwgdGFnLCBpc0RlZXApIHtcbiAgICAgIHZhciBDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yO1xuICAgICAgc3dpdGNoICh0YWcpIHtcbiAgICAgICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVBcnJheUJ1ZmZlcihvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgYm9vbFRhZzpcbiAgICAgICAgY2FzZSBkYXRlVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3Rvcigrb2JqZWN0KTtcblxuICAgICAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZURhdGFWaWV3KG9iamVjdCwgaXNEZWVwKTtcblxuICAgICAgICBjYXNlIGZsb2F0MzJUYWc6IGNhc2UgZmxvYXQ2NFRhZzpcbiAgICAgICAgY2FzZSBpbnQ4VGFnOiBjYXNlIGludDE2VGFnOiBjYXNlIGludDMyVGFnOlxuICAgICAgICBjYXNlIHVpbnQ4VGFnOiBjYXNlIHVpbnQ4Q2xhbXBlZFRhZzogY2FzZSB1aW50MTZUYWc6IGNhc2UgdWludDMyVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVR5cGVkQXJyYXkob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgICAgIGNhc2UgbWFwVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgICAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSByZWdleHBUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lUmVnRXhwKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSBzZXRUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVN5bWJvbChvYmplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluc2VydHMgd3JhcHBlciBgZGV0YWlsc2AgaW4gYSBjb21tZW50IGF0IHRoZSB0b3Agb2YgdGhlIGBzb3VyY2VgIGJvZHkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgVGhlIHNvdXJjZSB0byBtb2RpZnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBkZXRhaWxzIFRoZSBkZXRhaWxzIHRvIGluc2VydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBtb2RpZmllZCBzb3VyY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5zZXJ0V3JhcERldGFpbHMoc291cmNlLCBkZXRhaWxzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gZGV0YWlscy5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc291cmNlO1xuICAgICAgfVxuICAgICAgdmFyIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgICBkZXRhaWxzW2xhc3RJbmRleF0gPSAobGVuZ3RoID4gMSA/ICcmICcgOiAnJykgKyBkZXRhaWxzW2xhc3RJbmRleF07XG4gICAgICBkZXRhaWxzID0gZGV0YWlscy5qb2luKGxlbmd0aCA+IDIgPyAnLCAnIDogJyAnKTtcbiAgICAgIHJldHVybiBzb3VyY2UucmVwbGFjZShyZVdyYXBDb21tZW50LCAne1xcbi8qIFt3cmFwcGVkIHdpdGggJyArIGRldGFpbHMgKyAnXSAqL1xcbicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmxhdHRlbmFibGUgYGFyZ3VtZW50c2Agb2JqZWN0IG9yIGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmbGF0dGVuYWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRmxhdHRlbmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkgfHxcbiAgICAgICAgISEoc3ByZWFkYWJsZVN5bWJvbCAmJiB2YWx1ZSAmJiB2YWx1ZVtzcHJlYWRhYmxlU3ltYm9sXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG5cbiAgICAgIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICAgICAodHlwZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgICAgICh0eXBlICE9ICdzeW1ib2wnICYmIHJlSXNVaW50LnRlc3QodmFsdWUpKSkgJiZcbiAgICAgICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIGdpdmVuIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgdmFsdWUgYXJndW1lbnQuXG4gICAgICogQHBhcmFtIHsqfSBpbmRleCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIGluZGV4IG9yIGtleSBhcmd1bWVudC5cbiAgICAgKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIG9iamVjdCBhcmd1bWVudC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJdGVyYXRlZUNhbGwodmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiBpbmRleDtcbiAgICAgIGlmICh0eXBlID09ICdudW1iZXInXG4gICAgICAgICAgICA/IChpc0FycmF5TGlrZShvYmplY3QpICYmIGlzSW5kZXgoaW5kZXgsIG9iamVjdC5sZW5ndGgpKVxuICAgICAgICAgICAgOiAodHlwZSA9PSAnc3RyaW5nJyAmJiBpbmRleCBpbiBvYmplY3QpXG4gICAgICAgICAgKSB7XG4gICAgICAgIHJldHVybiBlcShvYmplY3RbaW5kZXhdLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lIGFuZCBub3QgYSBwcm9wZXJ0eSBwYXRoLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzS2V5KHZhbHVlLCBvYmplY3QpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGlmICh0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicgfHxcbiAgICAgICAgICB2YWx1ZSA9PSBudWxsIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZUlzUGxhaW5Qcm9wLnRlc3QodmFsdWUpIHx8ICFyZUlzRGVlcFByb3AudGVzdCh2YWx1ZSkgfHxcbiAgICAgICAgKG9iamVjdCAhPSBudWxsICYmIHZhbHVlIGluIE9iamVjdChvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgICAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgICAgIDogKHZhbHVlID09PSBudWxsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBhIGxhenkgY291bnRlcnBhcnQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaGFzIGEgbGF6eSBjb3VudGVycGFydCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTGF6aWFibGUoZnVuYykge1xuICAgICAgdmFyIGZ1bmNOYW1lID0gZ2V0RnVuY05hbWUoZnVuYyksXG4gICAgICAgICAgb3RoZXIgPSBsb2Rhc2hbZnVuY05hbWVdO1xuXG4gICAgICBpZiAodHlwZW9mIG90aGVyICE9ICdmdW5jdGlvbicgfHwgIShmdW5jTmFtZSBpbiBMYXp5V3JhcHBlci5wcm90b3R5cGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChmdW5jID09PSBvdGhlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBkYXRhID0gZ2V0RGF0YShvdGhlcik7XG4gICAgICByZXR1cm4gISFkYXRhICYmIGZ1bmMgPT09IGRhdGFbMF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICAgICAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGlzIGNhcGFibGUgb2YgYmVpbmcgbWFza2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2thYmxlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgdmFyIGlzTWFza2FibGUgPSBjb3JlSnNEYXRhID8gaXNGdW5jdGlvbiA6IHN0dWJGYWxzZTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgICAgIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaWYgc3VpdGFibGUgZm9yIHN0cmljdFxuICAgICAqICBlcXVhbGl0eSBjb21wYXJpc29ucywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSAmJiAhaXNPYmplY3QodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgbWF0Y2hlc1Byb3BlcnR5YCBmb3Igc291cmNlIHZhbHVlcyBzdWl0YWJsZVxuICAgICAqIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUoa2V5LCBzcmNWYWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdFtrZXldID09PSBzcmNWYWx1ZSAmJlxuICAgICAgICAgIChzcmNWYWx1ZSAhPT0gdW5kZWZpbmVkIHx8IChrZXkgaW4gT2JqZWN0KG9iamVjdCkpKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1lbW9pemVgIHdoaWNoIGNsZWFycyB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24nc1xuICAgICAqIGNhY2hlIHdoZW4gaXQgZXhjZWVkcyBgTUFYX01FTU9JWkVfU0laRWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZW1vaXplQ2FwcGVkKGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBtZW1vaXplKGZ1bmMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBpZiAoY2FjaGUuc2l6ZSA9PT0gTUFYX01FTU9JWkVfU0laRSkge1xuICAgICAgICAgIGNhY2hlLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgY2FjaGUgPSByZXN1bHQuY2FjaGU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1lcmdlcyB0aGUgZnVuY3Rpb24gbWV0YWRhdGEgb2YgYHNvdXJjZWAgaW50byBgZGF0YWAuXG4gICAgICpcbiAgICAgKiBNZXJnaW5nIG1ldGFkYXRhIHJlZHVjZXMgdGhlIG51bWJlciBvZiB3cmFwcGVycyB1c2VkIHRvIGludm9rZSBhIGZ1bmN0aW9uLlxuICAgICAqIFRoaXMgaXMgcG9zc2libGUgYmVjYXVzZSBtZXRob2RzIGxpa2UgYF8uYmluZGAsIGBfLmN1cnJ5YCwgYW5kIGBfLnBhcnRpYWxgXG4gICAgICogbWF5IGJlIGFwcGxpZWQgcmVnYXJkbGVzcyBvZiBleGVjdXRpb24gb3JkZXIuIE1ldGhvZHMgbGlrZSBgXy5hcnlgIGFuZFxuICAgICAqIGBfLnJlYXJnYCBtb2RpZnkgZnVuY3Rpb24gYXJndW1lbnRzLCBtYWtpbmcgdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgYXJlXG4gICAgICogZXhlY3V0ZWQgaW1wb3J0YW50LCBwcmV2ZW50aW5nIHRoZSBtZXJnaW5nIG9mIG1ldGFkYXRhLiBIb3dldmVyLCB3ZSBtYWtlXG4gICAgICogYW4gZXhjZXB0aW9uIGZvciBhIHNhZmUgY29tYmluZWQgY2FzZSB3aGVyZSBjdXJyaWVkIGZ1bmN0aW9ucyBoYXZlIGBfLmFyeWBcbiAgICAgKiBhbmQgb3IgYF8ucmVhcmdgIGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgVGhlIGRlc3RpbmF0aW9uIG1ldGFkYXRhLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgc291cmNlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgZGF0YWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVyZ2VEYXRhKGRhdGEsIHNvdXJjZSkge1xuICAgICAgdmFyIGJpdG1hc2sgPSBkYXRhWzFdLFxuICAgICAgICAgIHNyY0JpdG1hc2sgPSBzb3VyY2VbMV0sXG4gICAgICAgICAgbmV3Qml0bWFzayA9IGJpdG1hc2sgfCBzcmNCaXRtYXNrLFxuICAgICAgICAgIGlzQ29tbW9uID0gbmV3Qml0bWFzayA8IChXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRyB8IFdSQVBfQVJZX0ZMQUcpO1xuXG4gICAgICB2YXIgaXNDb21ibyA9XG4gICAgICAgICgoc3JjQml0bWFzayA9PSBXUkFQX0FSWV9GTEFHKSAmJiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcpKSB8fFxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gV1JBUF9BUllfRkxBRykgJiYgKGJpdG1hc2sgPT0gV1JBUF9SRUFSR19GTEFHKSAmJiAoZGF0YVs3XS5sZW5ndGggPD0gc291cmNlWzhdKSkgfHxcbiAgICAgICAgKChzcmNCaXRtYXNrID09IChXUkFQX0FSWV9GTEFHIHwgV1JBUF9SRUFSR19GTEFHKSkgJiYgKHNvdXJjZVs3XS5sZW5ndGggPD0gc291cmNlWzhdKSAmJiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcpKTtcblxuICAgICAgLy8gRXhpdCBlYXJseSBpZiBtZXRhZGF0YSBjYW4ndCBiZSBtZXJnZWQuXG4gICAgICBpZiAoIShpc0NvbW1vbiB8fCBpc0NvbWJvKSkge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYHRoaXNBcmdgIGlmIGF2YWlsYWJsZS5cbiAgICAgIGlmIChzcmNCaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcpIHtcbiAgICAgICAgZGF0YVsyXSA9IHNvdXJjZVsyXTtcbiAgICAgICAgLy8gU2V0IHdoZW4gY3VycnlpbmcgYSBib3VuZCBmdW5jdGlvbi5cbiAgICAgICAgbmV3Qml0bWFzayB8PSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcgPyAwIDogV1JBUF9DVVJSWV9CT1VORF9GTEFHO1xuICAgICAgfVxuICAgICAgLy8gQ29tcG9zZSBwYXJ0aWFsIGFyZ3VtZW50cy5cbiAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVszXTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB2YXIgcGFydGlhbHMgPSBkYXRhWzNdO1xuICAgICAgICBkYXRhWzNdID0gcGFydGlhbHMgPyBjb21wb3NlQXJncyhwYXJ0aWFscywgdmFsdWUsIHNvdXJjZVs0XSkgOiB2YWx1ZTtcbiAgICAgICAgZGF0YVs0XSA9IHBhcnRpYWxzID8gcmVwbGFjZUhvbGRlcnMoZGF0YVszXSwgUExBQ0VIT0xERVIpIDogc291cmNlWzRdO1xuICAgICAgfVxuICAgICAgLy8gQ29tcG9zZSBwYXJ0aWFsIHJpZ2h0IGFyZ3VtZW50cy5cbiAgICAgIHZhbHVlID0gc291cmNlWzVdO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHBhcnRpYWxzID0gZGF0YVs1XTtcbiAgICAgICAgZGF0YVs1XSA9IHBhcnRpYWxzID8gY29tcG9zZUFyZ3NSaWdodChwYXJ0aWFscywgdmFsdWUsIHNvdXJjZVs2XSkgOiB2YWx1ZTtcbiAgICAgICAgZGF0YVs2XSA9IHBhcnRpYWxzID8gcmVwbGFjZUhvbGRlcnMoZGF0YVs1XSwgUExBQ0VIT0xERVIpIDogc291cmNlWzZdO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJnUG9zYCBpZiBhdmFpbGFibGUuXG4gICAgICB2YWx1ZSA9IHNvdXJjZVs3XTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBkYXRhWzddID0gdmFsdWU7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcnlgIGlmIGl0J3Mgc21hbGxlci5cbiAgICAgIGlmIChzcmNCaXRtYXNrICYgV1JBUF9BUllfRkxBRykge1xuICAgICAgICBkYXRhWzhdID0gZGF0YVs4XSA9PSBudWxsID8gc291cmNlWzhdIDogbmF0aXZlTWluKGRhdGFbOF0sIHNvdXJjZVs4XSk7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcml0eWAgaWYgb25lIGlzIG5vdCBwcm92aWRlZC5cbiAgICAgIGlmIChkYXRhWzldID09IG51bGwpIHtcbiAgICAgICAgZGF0YVs5XSA9IHNvdXJjZVs5XTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGZ1bmNgIGFuZCBtZXJnZSBiaXRtYXNrcy5cbiAgICAgIGRhdGFbMF0gPSBzb3VyY2VbMF07XG4gICAgICBkYXRhWzFdID0gbmV3Qml0bWFzaztcblxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlXG4gICAgICogW2BPYmplY3Qua2V5c2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICAgICAqIGV4Y2VwdCB0aGF0IGl0IGluY2x1ZGVzIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5hdGl2ZUtleXNJbihvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmIChvYmplY3QgIT0gbnVsbCkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCB0cmFuc2Zvcm1zIHRoZSByZXN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIHJlc3QgYXJyYXkgdHJhbnNmb3JtLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCB0cmFuc2Zvcm0pIHtcbiAgICAgIHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0ID09PSB1bmRlZmluZWQgPyAoZnVuYy5sZW5ndGggLSAxKSA6IHN0YXJ0LCAwKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3MubGVuZ3RoIC0gc3RhcnQsIDApLFxuICAgICAgICAgICAgYXJyYXkgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJyYXlbaW5kZXhdID0gYXJnc1tzdGFydCArIGluZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IC0xO1xuICAgICAgICB2YXIgb3RoZXJBcmdzID0gQXJyYXkoc3RhcnQgKyAxKTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBzdGFydCkge1xuICAgICAgICAgIG90aGVyQXJnc1tpbmRleF0gPSBhcmdzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBvdGhlckFyZ3Nbc3RhcnRdID0gdHJhbnNmb3JtKGFycmF5KTtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHBhcmVudCB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXRoIFRoZSBwYXRoIHRvIGdldCB0aGUgcGFyZW50IHZhbHVlIG9mLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwYXJlbnQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFyZW50KG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGgubGVuZ3RoIDwgMiA/IG9iamVjdCA6IGJhc2VHZXQob2JqZWN0LCBiYXNlU2xpY2UocGF0aCwgMCwgLTEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW9yZGVyIGBhcnJheWAgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgaW5kZXhlcyB3aGVyZSB0aGUgZWxlbWVudCBhdFxuICAgICAqIHRoZSBmaXJzdCBpbmRleCBpcyBhc3NpZ25lZCBhcyB0aGUgZmlyc3QgZWxlbWVudCwgdGhlIGVsZW1lbnQgYXRcbiAgICAgKiB0aGUgc2Vjb25kIGluZGV4IGlzIGFzc2lnbmVkIGFzIHRoZSBzZWNvbmQgZWxlbWVudCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcmVvcmRlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBpbmRleGVzIFRoZSBhcnJhbmdlZCBhcnJheSBpbmRleGVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlb3JkZXIoYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWluKGluZGV4ZXMubGVuZ3RoLCBhcnJMZW5ndGgpLFxuICAgICAgICAgIG9sZEFycmF5ID0gY29weUFycmF5KGFycmF5KTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGluZGV4ZXNbbGVuZ3RoXTtcbiAgICAgICAgYXJyYXlbbGVuZ3RoXSA9IGlzSW5kZXgoaW5kZXgsIGFyckxlbmd0aCkgPyBvbGRBcnJheVtpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAsIHVubGVzcyBga2V5YCBpcyBcIl9fcHJvdG9fX1wiIG9yIFwiY29uc3RydWN0b3JcIi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzYWZlR2V0KG9iamVjdCwga2V5KSB7XG4gICAgICBpZiAoa2V5ID09PSAnY29uc3RydWN0b3InICYmIHR5cGVvZiBvYmplY3Rba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChrZXkgPT0gJ19fcHJvdG9fXycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIHRoaXMgZnVuY3Rpb24gYmVjb21lcyBob3QsIGkuZS4gaXMgaW52b2tlZCBhIGxvdCBpbiBhIHNob3J0XG4gICAgICogcGVyaW9kIG9mIHRpbWUsIGl0IHdpbGwgdHJpcCBpdHMgYnJlYWtlciBhbmQgdHJhbnNpdGlvbiB0byBhbiBpZGVudGl0eVxuICAgICAqIGZ1bmN0aW9uIHRvIGF2b2lkIGdhcmJhZ2UgY29sbGVjdGlvbiBwYXVzZXMgaW4gVjguIFNlZVxuICAgICAqIFtWOCBpc3N1ZSAyMDcwXShodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0yMDcwKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc29jaWF0ZSBtZXRhZGF0YSB3aXRoLlxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgc2V0RGF0YSA9IHNob3J0T3V0KGJhc2VTZXREYXRhKTtcblxuICAgIC8qKlxuICAgICAqIEEgc2ltcGxlIHdyYXBwZXIgYXJvdW5kIHRoZSBnbG9iYWwgW2BzZXRUaW1lb3V0YF0oaHR0cHM6Ly9tZG4uaW8vc2V0VGltZW91dCkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcnxPYmplY3R9IFJldHVybnMgdGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0LlxuICAgICAqL1xuICAgIHZhciBzZXRUaW1lb3V0ID0gY3R4U2V0VGltZW91dCB8fCBmdW5jdGlvbihmdW5jLCB3YWl0KSB7XG4gICAgICByZXR1cm4gcm9vdC5zZXRUaW1lb3V0KGZ1bmMsIHdhaXQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgZnVuY2AgdG8gcmV0dXJuIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBzZXRUb1N0cmluZyA9IHNob3J0T3V0KGJhc2VTZXRUb1N0cmluZyk7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgd3JhcHBlcmAgdG8gbWltaWMgdGhlIHNvdXJjZSBvZiBgcmVmZXJlbmNlYFxuICAgICAqIHdpdGggd3JhcHBlciBkZXRhaWxzIGluIGEgY29tbWVudCBhdCB0aGUgdG9wIG9mIHRoZSBzb3VyY2UgYm9keS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcHBlciBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZmVyZW5jZSBUaGUgcmVmZXJlbmNlIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGB3cmFwcGVyYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRXcmFwVG9TdHJpbmcod3JhcHBlciwgcmVmZXJlbmNlLCBiaXRtYXNrKSB7XG4gICAgICB2YXIgc291cmNlID0gKHJlZmVyZW5jZSArICcnKTtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyh3cmFwcGVyLCBpbnNlcnRXcmFwRGV0YWlscyhzb3VyY2UsIHVwZGF0ZVdyYXBEZXRhaWxzKGdldFdyYXBEZXRhaWxzKHNvdXJjZSksIGJpdG1hc2spKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQnbGwgc2hvcnQgb3V0IGFuZCBpbnZva2UgYGlkZW50aXR5YCBpbnN0ZWFkXG4gICAgICogb2YgYGZ1bmNgIHdoZW4gaXQncyBjYWxsZWQgYEhPVF9DT1VOVGAgb3IgbW9yZSB0aW1lcyBpbiBgSE9UX1NQQU5gXG4gICAgICogbWlsbGlzZWNvbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzaG9ydGFibGUgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2hvcnRPdXQoZnVuYykge1xuICAgICAgdmFyIGNvdW50ID0gMCxcbiAgICAgICAgICBsYXN0Q2FsbGVkID0gMDtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc3RhbXAgPSBuYXRpdmVOb3coKSxcbiAgICAgICAgICAgIHJlbWFpbmluZyA9IEhPVF9TUEFOIC0gKHN0YW1wIC0gbGFzdENhbGxlZCk7XG5cbiAgICAgICAgbGFzdENhbGxlZCA9IHN0YW1wO1xuICAgICAgICBpZiAocmVtYWluaW5nID4gMCkge1xuICAgICAgICAgIGlmICgrK2NvdW50ID49IEhPVF9DT1VOVCkge1xuICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50c1swXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY291bnQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNodWZmbGVgIHdoaWNoIG11dGF0ZXMgYW5kIHNldHMgdGhlIHNpemUgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNodWZmbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzaXplPWFycmF5Lmxlbmd0aF0gVGhlIHNpemUgb2YgYGFycmF5YC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaHVmZmxlU2VsZihhcnJheSwgc2l6ZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG5cbiAgICAgIHNpemUgPSBzaXplID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBzaXplO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBzaXplKSB7XG4gICAgICAgIHZhciByYW5kID0gYmFzZVJhbmRvbShpbmRleCwgbGFzdEluZGV4KSxcbiAgICAgICAgICAgIHZhbHVlID0gYXJyYXlbcmFuZF07XG5cbiAgICAgICAgYXJyYXlbcmFuZF0gPSBhcnJheVtpbmRleF07XG4gICAgICAgIGFycmF5W2luZGV4XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgYXJyYXkubGVuZ3RoID0gc2l6ZTtcbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKi9cbiAgICB2YXIgc3RyaW5nVG9QYXRoID0gbWVtb2l6ZUNhcHBlZChmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmIChzdHJpbmcuY2hhckNvZGVBdCgwKSA9PT0gNDYgLyogLiAqLykge1xuICAgICAgICByZXN1bHQucHVzaCgnJyk7XG4gICAgICB9XG4gICAgICBzdHJpbmcucmVwbGFjZShyZVByb3BOYW1lLCBmdW5jdGlvbihtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHF1b3RlID8gc3ViU3RyaW5nLnJlcGxhY2UocmVFc2NhcGVDaGFyLCAnJDEnKSA6IChudW1iZXIgfHwgbWF0Y2gpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHN5bWJvbH0gUmV0dXJucyB0aGUga2V5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICAgICAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICAgICAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB3cmFwcGVyIGBkZXRhaWxzYCBiYXNlZCBvbiBgYml0bWFza2AgZmxhZ3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gZGV0YWlscyBUaGUgZGV0YWlscyB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGRldGFpbHNgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVdyYXBEZXRhaWxzKGRldGFpbHMsIGJpdG1hc2spIHtcbiAgICAgIGFycmF5RWFjaCh3cmFwRmxhZ3MsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gJ18uJyArIHBhaXJbMF07XG4gICAgICAgIGlmICgoYml0bWFzayAmIHBhaXJbMV0pICYmICFhcnJheUluY2x1ZGVzKGRldGFpbHMsIHZhbHVlKSkge1xuICAgICAgICAgIGRldGFpbHMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGRldGFpbHMuc29ydCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgd3JhcHBlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB3cmFwcGVyIFRoZSB3cmFwcGVyIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB3cmFwcGVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDbG9uZSh3cmFwcGVyKSB7XG4gICAgICBpZiAod3JhcHBlciBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHJldHVybiB3cmFwcGVyLmNsb25lKCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IExvZGFzaFdyYXBwZXIod3JhcHBlci5fX3dyYXBwZWRfXywgd3JhcHBlci5fX2NoYWluX18pO1xuICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHdyYXBwZXIuX19hY3Rpb25zX18pO1xuICAgICAgcmVzdWx0Ll9faW5kZXhfXyAgPSB3cmFwcGVyLl9faW5kZXhfXztcbiAgICAgIHJlc3VsdC5fX3ZhbHVlc19fID0gd3JhcHBlci5fX3ZhbHVlc19fO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHNwbGl0IGludG8gZ3JvdXBzIHRoZSBsZW5ndGggb2YgYHNpemVgLlxuICAgICAqIElmIGBhcnJheWAgY2FuJ3QgYmUgc3BsaXQgZXZlbmx5LCB0aGUgZmluYWwgY2h1bmsgd2lsbCBiZSB0aGUgcmVtYWluaW5nXG4gICAgICogZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NpemU9MV0gVGhlIGxlbmd0aCBvZiBlYWNoIGNodW5rXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjaHVua3MuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2h1bmsoWydhJywgJ2InLCAnYycsICdkJ10sIDIpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYiddLCBbJ2MnLCAnZCddXVxuICAgICAqXG4gICAgICogXy5jaHVuayhbJ2EnLCAnYicsICdjJywgJ2QnXSwgMyk7XG4gICAgICogLy8gPT4gW1snYScsICdiJywgJ2MnXSwgWydkJ11dXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2h1bmsoYXJyYXksIHNpemUsIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoYXJyYXksIHNpemUsIGd1YXJkKSA6IHNpemUgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgc2l6ZSA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaXplID0gbmF0aXZlTWF4KHRvSW50ZWdlcihzaXplKSwgMCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCB8fCBzaXplIDwgMSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShuYXRpdmVDZWlsKGxlbmd0aCAvIHNpemUpKTtcblxuICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IGJhc2VTbGljZShhcnJheSwgaW5kZXgsIChpbmRleCArPSBzaXplKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgZmFsc2V5IHZhbHVlcyByZW1vdmVkLiBUaGUgdmFsdWVzIGBmYWxzZWAsIGBudWxsYCxcbiAgICAgKiBgMGAsIGBcIlwiYCwgYHVuZGVmaW5lZGAsIGFuZCBgTmFOYCBhcmUgZmFsc2V5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvbXBhY3QoWzAsIDEsIGZhbHNlLCAyLCAnJywgM10pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhY3QoYXJyYXkpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGFycmF5IGNvbmNhdGVuYXRpbmcgYGFycmF5YCB3aXRoIGFueSBhZGRpdGlvbmFsIGFycmF5c1xuICAgICAqIGFuZC9vciB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29uY2F0ZW5hdGUuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNvbmNhdGVuYXRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGNvbmNhdGVuYXRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzFdO1xuICAgICAqIHZhciBvdGhlciA9IF8uY29uY2F0KGFycmF5LCAyLCBbM10sIFtbNF1dKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG90aGVyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgWzRdXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmNhdCgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGFyZ3MgPSBBcnJheShsZW5ndGggLSAxKSxcbiAgICAgICAgICBhcnJheSA9IGFyZ3VtZW50c1swXSxcbiAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcblxuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgYXJnc1tpbmRleCAtIDFdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheVB1c2goaXNBcnJheShhcnJheSkgPyBjb3B5QXJyYXkoYXJyYXkpIDogW2FycmF5XSwgYmFzZUZsYXR0ZW4oYXJncywgMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgYGFycmF5YCB2YWx1ZXMgbm90IGluY2x1ZGVkIGluIHRoZSBvdGhlciBnaXZlbiBhcnJheXNcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8ud2l0aG91dCwgXy54b3JcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSkpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRpZmZlcmVuY2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIGFuZCBgdmFsdWVzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxCeWAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZGlmZmVyZW5jZUJ5KFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgW3sgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KHZhbHVlcyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kaWZmZXJlbmNlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgIHRvIGB2YWx1ZXNgLiBUaGUgb3JkZXIgYW5kXG4gICAgICogcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGNvbXBhcmF0b3JcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbFdpdGhgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlV2l0aChvYmplY3RzLCBbeyAneCc6IDEsICd5JzogMiB9XSwgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdCh2YWx1ZXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGNvbXBhcmF0b3IpKSB7XG4gICAgICAgIGNvbXBhcmF0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBkcm9wLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3AoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgbiA8IDAgPyAwIDogbiwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGVuZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBkcm9wLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFJpZ2h0KGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIG4gPSBsZW5ndGggLSBuO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgMCwgbiA8IDAgPyAwIDogbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZXhjbHVkaW5nIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgZW5kLlxuICAgICAqIEVsZW1lbnRzIGFyZSBkcm9wcGVkIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BSaWdodFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgdHJ1ZSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBleGNsdWRpbmcgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICogRWxlbWVudHMgYXJlIGRyb3BwZWQgdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaWxscyBlbGVtZW50cyBvZiBgYXJyYXlgIHdpdGggYHZhbHVlYCBmcm9tIGBzdGFydGAgdXAgdG8sIGJ1dCBub3RcbiAgICAgKiBpbmNsdWRpbmcsIGBlbmRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmaWxsLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGZpbGwgYGFycmF5YCB3aXRoLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXy5maWxsKGFycmF5LCAnYScpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYScsICdhJ11cbiAgICAgKlxuICAgICAqIF8uZmlsbChBcnJheSgzKSwgMik7XG4gICAgICogLy8gPT4gWzIsIDIsIDJdXG4gICAgICpcbiAgICAgKiBfLmZpbGwoWzQsIDYsIDgsIDEwXSwgJyonLCAxLCAzKTtcbiAgICAgKiAvLyA9PiBbNCwgJyonLCAnKicsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoc3RhcnQgJiYgdHlwZW9mIHN0YXJ0ICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQpKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgZW5kID0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3RcbiAgICAgKiBlbGVtZW50IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlciA9PSAnYmFybmV5JzsgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgeyAndXNlcic6ICdmcmVkJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGZyb21JbmRleCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEluZGV4YCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzXG4gICAgICogb2YgYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1hcnJheS5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmb3VuZCBlbGVtZW50LCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyID09ICdwZWJibGVzJzsgfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kTGFzdEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICAgIGlmIChmcm9tSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpbmRleCA9IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgICBpbmRleCA9IGZyb21JbmRleCA8IDBcbiAgICAgICAgICA/IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMClcbiAgICAgICAgICA6IG5hdGl2ZU1pbihpbmRleCwgbGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgaW5kZXgsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZsYXR0ZW5zIGBhcnJheWAgYSBzaW5nbGUgbGV2ZWwgZGVlcC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuKFsxLCBbMiwgWzMsIFs0XV0sIDVdXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIFszLCBbNF1dLCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW4oYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgMSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBmbGF0dGVucyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZWVwKFsxLCBbMiwgWzMsIFs0XV0sIDVdXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIDQsIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbkRlZXAoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgSU5GSU5JVFkpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgZmxhdHRlbiBgYXJyYXlgIHVwIHRvIGBkZXB0aGAgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlcHRoPTFdIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCBbMiwgWzMsIFs0XV0sIDVdXTtcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlcHRoKGFycmF5LCAxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgWzMsIFs0XV0sIDVdXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZXB0aChhcnJheSwgMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIFs0XSwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuRGVwdGgoYXJyYXksIGRlcHRoKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBkZXB0aCA9IGRlcHRoID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoKTtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBpbnZlcnNlIG9mIGBfLnRvUGFpcnNgOyB0aGlzIG1ldGhvZCByZXR1cm5zIGFuIG9iamVjdCBjb21wb3NlZFxuICAgICAqIGZyb20ga2V5LXZhbHVlIGBwYWlyc2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYWlycyBUaGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZnJvbVBhaXJzKFtbJ2EnLCAxXSwgWydiJywgMl1dKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tUGFpcnMocGFpcnMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhaXJzID09IG51bGwgPyAwIDogcGFpcnMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2luZGV4XTtcbiAgICAgICAgcmVzdWx0W3BhaXJbMF1dID0gcGFpclsxXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIGZpcnN0XG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaGVhZChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIF8uaGVhZChbXSk7XG4gICAgICogLy8gPT4gdW5kZWZpbmVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGVhZChhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYXJyYXlbMF0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYHZhbHVlYCBpcyBmb3VuZCBpbiBgYXJyYXlgXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCdzIHVzZWQgYXMgdGhlXG4gICAgICogb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbmRleE9mKFsxLCAyLCAxLCAyXSwgMik7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gU2VhcmNoIGZyb20gdGhlIGBmcm9tSW5kZXhgLlxuICAgICAqIF8uaW5kZXhPZihbMSwgMiwgMSwgMl0sIDIsIDIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIGJ1dCB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluaXRpYWwoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0aWFsKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVNsaWNlKGFycmF5LCAwLCAtMSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgdGhhdCBhcmUgaW5jbHVkZWQgaW4gYWxsIGdpdmVuIGFycmF5c1xuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbihbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzJdXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludGVyc2VjdGlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbkJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjFdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmludGVyc2VjdGlvbkJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9XVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb25CeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpLFxuICAgICAgICAgIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG5cbiAgICAgIGlmIChpdGVyYXRlZSA9PT0gbGFzdChtYXBwZWQpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWFwcGVkLnBvcCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludGVyc2VjdGlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlc1xuICAgICAqIG9mIHJlc3VsdCB2YWx1ZXMgYXJlIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgY29tcGFyYXRvciBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyksXG4gICAgICAgICAgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcblxuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgbWFwcGVkLnBvcCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhbGwgZWxlbWVudHMgaW4gYGFycmF5YCBpbnRvIGEgc3RyaW5nIHNlcGFyYXRlZCBieSBgc2VwYXJhdG9yYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb252ZXJ0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc2VwYXJhdG9yPScsJ10gVGhlIGVsZW1lbnQgc2VwYXJhdG9yLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGpvaW5lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uam9pbihbJ2EnLCAnYicsICdjJ10sICd+Jyk7XG4gICAgICogLy8gPT4gJ2F+Yn5jJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGpvaW4oYXJyYXksIHNlcGFyYXRvcikge1xuICAgICAgcmV0dXJuIGFycmF5ID09IG51bGwgPyAnJyA6IG5hdGl2ZUpvaW4uY2FsbChhcnJheSwgc2VwYXJhdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubGFzdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXN0KGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYXJyYXlbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbmRleE9mYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGFycmF5YCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PWFycmF5Lmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sYXN0SW5kZXhPZihbMSwgMiwgMSwgMl0sIDIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIC8vIFNlYXJjaCBmcm9tIHRoZSBgZnJvbUluZGV4YC5cbiAgICAgKiBfLmxhc3RJbmRleE9mKFsxLCAyLCAxLCAyXSwgMiwgMik7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBsZW5ndGg7XG4gICAgICBpZiAoZnJvbUluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW5kZXggPSB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgICAgaW5kZXggPSBpbmRleCA8IDAgPyBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApIDogbmF0aXZlTWluKGluZGV4LCBsZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWVcbiAgICAgICAgPyBzdHJpY3RMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGluZGV4KVxuICAgICAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgaW5kZXgsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGVsZW1lbnQgYXQgaW5kZXggYG5gIG9mIGBhcnJheWAuIElmIGBuYCBpcyBuZWdhdGl2ZSwgdGhlIG50aFxuICAgICAqIGVsZW1lbnQgZnJvbSB0aGUgZW5kIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MF0gVGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbnRoIGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdkJ107XG4gICAgICpcbiAgICAgKiBfLm50aChhcnJheSwgMSk7XG4gICAgICogLy8gPT4gJ2InXG4gICAgICpcbiAgICAgKiBfLm50aChhcnJheSwgLTIpO1xuICAgICAqIC8vID0+ICdjJztcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBudGgoYXJyYXksIG4pIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VOdGgoYXJyYXksIHRvSW50ZWdlcihuKSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgZ2l2ZW4gdmFsdWVzIGZyb20gYGFycmF5YCB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy53aXRob3V0YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLiBVc2UgYF8ucmVtb3ZlYFxuICAgICAqIHRvIHJlbW92ZSBlbGVtZW50cyBmcm9tIGFuIGFycmF5IGJ5IHByZWRpY2F0ZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdhJywgJ2InLCAnYyddO1xuICAgICAqXG4gICAgICogXy5wdWxsKGFycmF5LCAnYScsICdjJyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYicsICdiJ11cbiAgICAgKi9cbiAgICB2YXIgcHVsbCA9IGJhc2VSZXN0KHB1bGxBbGwpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGFuIGFycmF5IG9mIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdhJywgJ2InLCAnYyddO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsKGFycmF5LCBbJ2EnLCAnYyddKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydiJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGwoYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcylcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxBbGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIGFuZCBgdmFsdWVzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VCeWAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH0sIHsgJ3gnOiAzIH0sIHsgJ3gnOiAxIH1dO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsQnkoYXJyYXksIFt7ICd4JzogMSB9LCB7ICd4JzogMyB9XSwgJ3gnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbEJ5KGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsQWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgIHRvIGB2YWx1ZXNgLiBUaGUgY29tcGFyYXRvciBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlV2l0aGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMywgJ3knOiA0IH0sIHsgJ3gnOiA1LCAneSc6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGxXaXRoKGFycmF5LCBbeyAneCc6IDMsICd5JzogNCB9XSwgXy5pc0VxdWFsKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDUsICd5JzogNiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGxXaXRoKGFycmF5LCB2YWx1ZXMsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGVsZW1lbnRzIGZyb20gYGFycmF5YCBjb3JyZXNwb25kaW5nIHRvIGBpbmRleGVzYCBhbmQgcmV0dXJucyBhblxuICAgICAqIGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmF0YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0gey4uLihudW1iZXJ8bnVtYmVyW10pfSBbaW5kZXhlc10gVGhlIGluZGV4ZXMgb2YgZWxlbWVudHMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnZCddO1xuICAgICAqIHZhciBwdWxsZWQgPSBfLnB1bGxBdChhcnJheSwgWzEsIDNdKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYyddXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhwdWxsZWQpO1xuICAgICAqIC8vID0+IFsnYicsICdkJ11cbiAgICAgKi9cbiAgICB2YXIgcHVsbEF0ID0gZmxhdFJlc3QoZnVuY3Rpb24oYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBiYXNlQXQoYXJyYXksIGluZGV4ZXMpO1xuXG4gICAgICBiYXNlUHVsbEF0KGFycmF5LCBhcnJheU1hcChpbmRleGVzLCBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICByZXR1cm4gaXNJbmRleChpbmRleCwgbGVuZ3RoKSA/ICtpbmRleCA6IGluZGV4O1xuICAgICAgfSkuc29ydChjb21wYXJlQXNjZW5kaW5nKSk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBlbGVtZW50cyBmcm9tIGBhcnJheWAgdGhhdCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3JcbiAgICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGUgcmVtb3ZlZCBlbGVtZW50cy4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZmlsdGVyYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLiBVc2UgYF8ucHVsbGBcbiAgICAgKiB0byBwdWxsIGVsZW1lbnRzIGZyb20gYW4gYXJyYXkgYnkgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgMywgNF07XG4gICAgICogdmFyIGV2ZW5zID0gXy5yZW1vdmUoYXJyYXksIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAzXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZXZlbnMpO1xuICAgICAqIC8vID0+IFsyLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmRleGVzID0gW10sXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBwcmVkaWNhdGUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICAgIGluZGV4ZXMucHVzaChpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJhc2VQdWxsQXQoYXJyYXksIGluZGV4ZXMpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnNlcyBgYXJyYXlgIHNvIHRoYXQgdGhlIGZpcnN0IGVsZW1lbnQgYmVjb21lcyB0aGUgbGFzdCwgdGhlIHNlY29uZFxuICAgICAqIGVsZW1lbnQgYmVjb21lcyB0aGUgc2Vjb25kIHRvIGxhc3QsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAgYW5kIGlzIGJhc2VkIG9uXG4gICAgICogW2BBcnJheSNyZXZlcnNlYF0oaHR0cHM6Ly9tZG4uaW8vQXJyYXkvcmV2ZXJzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfLnJldmVyc2UoYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJldmVyc2UoYXJyYXkpIHtcbiAgICAgIHJldHVybiBhcnJheSA9PSBudWxsID8gYXJyYXkgOiBuYXRpdmVSZXZlcnNlLmNhbGwoYXJyYXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGZyb20gYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIHVzZWQgaW5zdGVhZCBvZlxuICAgICAqIFtgQXJyYXkjc2xpY2VgXShodHRwczovL21kbi5pby9BcnJheS9zbGljZSkgdG8gZW5zdXJlIGRlbnNlIGFycmF5cyBhcmVcbiAgICAgKiByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoZW5kICYmIHR5cGVvZiBlbmQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoYXJyYXksIHN0YXJ0LCBlbmQpKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgZW5kID0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHN0YXJ0ID0gc3RhcnQgPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvSW50ZWdlcihlbmQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlcyBhIGJpbmFyeSBzZWFyY2ggdG8gZGV0ZXJtaW5lIHRoZSBsb3dlc3QgaW5kZXggYXQgd2hpY2ggYHZhbHVlYFxuICAgICAqIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG8gbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4KFszMCwgNTBdLCA0MCk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGUgdGhlaXJcbiAgICAgKiBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiA0IH0sIHsgJ3gnOiA1IH1dO1xuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ueDsgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb3J0ZWRJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sICd4Jyk7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IHBlcmZvcm1zIGEgYmluYXJ5XG4gICAgICogc2VhcmNoIG9uIGEgc29ydGVkIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXhPZihbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICB2YXIgaW5kZXggPSBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKTtcbiAgICAgICAgaWYgKGluZGV4IDwgbGVuZ3RoICYmIGVxKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRJbmRleGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgaGlnaGVzdFxuICAgICAqIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0b1xuICAgICAqIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXgoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4KGFycmF5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkTGFzdEluZGV4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlIHRoZWlyXG4gICAgICogc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogNCB9LCB7ICd4JzogNSB9XTtcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgZnVuY3Rpb24obykgeyByZXR1cm4gby54OyB9KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sICd4Jyk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5sYXN0SW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgcGVyZm9ybXMgYSBiaW5hcnlcbiAgICAgKiBzZWFyY2ggb24gYSBzb3J0ZWQgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhPZihbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgdHJ1ZSkgLSAxO1xuICAgICAgICBpZiAoZXEoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0J3MgZGVzaWduZWQgYW5kIG9wdGltaXplZFxuICAgICAqIGZvciBzb3J0ZWQgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkVW5pcShbMSwgMSwgMl0pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZFVuaXEoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTb3J0ZWRVbmlxKGFycmF5KVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcUJ5YCBleGNlcHQgdGhhdCBpdCdzIGRlc2lnbmVkIGFuZCBvcHRpbWl6ZWRcbiAgICAgKiBmb3Igc29ydGVkIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkVW5pcUJ5KFsxLjEsIDEuMiwgMi4zLCAyLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4xLCAyLjNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkVW5pcUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVNvcnRlZFVuaXEoYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBidXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFpbChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRhaWwoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlU2xpY2UoYXJyYXksIDEsIGxlbmd0aCkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gdGFrZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlKGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgMCwgbiA8IDAgPyAwIDogbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgZW5kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHRha2UuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlUmlnaHQoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgbiA9IGxlbmd0aCAtIG47XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBuIDwgMCA/IDAgOiBuLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgZW5kLiBFbGVtZW50cyBhcmVcbiAgICAgKiB0YWtlbiB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGhcbiAgICAgKiB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VSaWdodFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgZmFsc2UsIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBiZWdpbm5pbmcuIEVsZW1lbnRzXG4gICAgICogYXJlIHRha2VuIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMsIGluIG9yZGVyLCBmcm9tIGFsbCBnaXZlbiBhcnJheXMgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pb24oWzJdLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIHZhciB1bmlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnlcbiAgICAgKiB3aGljaCB1bmlxdWVuZXNzIGlzIGNvbXB1dGVkLiBSZXN1bHQgdmFsdWVzIGFyZSBjaG9zZW4gZnJvbSB0aGUgZmlyc3RcbiAgICAgKiBhcnJheSBpbiB3aGljaCB0aGUgdmFsdWUgb2NjdXJzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pb25CeShbMi4xXSwgWzEuMiwgMi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMSwgMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy51bmlvbkJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciB1bmlvbkJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFJlc3VsdCB2YWx1ZXMgYXJlIGNob3NlbiBmcm9tXG4gICAgICogdGhlIGZpcnN0IGFycmF5IGluIHdoaWNoIHRoZSB2YWx1ZSBvY2N1cnMuIFRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnVuaW9uV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIHVuaW9uV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyk7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIHVuZGVmaW5lZCwgY29tcGFyYXRvcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZHVwbGljYXRlLWZyZWUgdmVyc2lvbiBvZiBhbiBhcnJheSwgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucywgaW4gd2hpY2ggb25seSB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBlYWNoIGVsZW1lbnRcbiAgICAgKiBpcyBrZXB0LiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyXG4gICAgICogaW4gdGhlIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcShbMiwgMSwgMl0pO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXEoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5KSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHVuaXF1ZW5lc3MgaXMgY29tcHV0ZWQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlXG4gICAgICogb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcUJ5KFsyLjEsIDEuMiwgMi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMSwgMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy51bmlxQnkoW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXFCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpc1xuICAgICAqIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5LlRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnVuaXFXaXRoKG9iamVjdHMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXFXaXRoKGFycmF5LCBjb21wYXJhdG9yKSB7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGFuIGFycmF5IG9mIGdyb3VwZWRcbiAgICAgKiBlbGVtZW50cyBhbmQgY3JlYXRlcyBhbiBhcnJheSByZWdyb3VwaW5nIHRoZSBlbGVtZW50cyB0byB0aGVpciBwcmUtemlwXG4gICAgICogY29uZmlndXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjIuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgemlwcGVkID0gXy56aXAoWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMSwgdHJ1ZV0sIFsnYicsIDIsIGZhbHNlXV1cbiAgICAgKlxuICAgICAqIF8udW56aXAoemlwcGVkKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuemlwKGFycmF5KSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSAwO1xuICAgICAgYXJyYXkgPSBhcnJheUZpbHRlcihhcnJheSwgZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGdyb3VwKSkge1xuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChncm91cC5sZW5ndGgsIGxlbmd0aCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGJhc2VUaW1lcyhsZW5ndGgsIGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIHJldHVybiBhcnJheU1hcChhcnJheSwgYmFzZVByb3BlcnR5KGluZGV4KSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgdG8gc3BlY2lmeVxuICAgICAqIGhvdyByZWdyb3VwZWQgdmFsdWVzIHNob3VsZCBiZSBjb21iaW5lZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aGVcbiAgICAgKiBlbGVtZW50cyBvZiBlYWNoIGdyb3VwOiAoLi4uZ3JvdXApLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmVcbiAgICAgKiAgcmVncm91cGVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZWdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB6aXBwZWQgPSBfLnppcChbMSwgMl0sIFsxMCwgMjBdLCBbMTAwLCAyMDBdKTtcbiAgICAgKiAvLyA9PiBbWzEsIDEwLCAxMDBdLCBbMiwgMjAsIDIwMF1dXG4gICAgICpcbiAgICAgKiBfLnVuemlwV2l0aCh6aXBwZWQsIF8uYWRkKTtcbiAgICAgKiAvLyA9PiBbMywgMzAsIDMwMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnppcFdpdGgoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSB1bnppcChhcnJheSk7XG4gICAgICBpZiAoaXRlcmF0ZWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5TWFwKHJlc3VsdCwgZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGl0ZXJhdGVlLCB1bmRlZmluZWQsIGdyb3VwKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgZXhjbHVkaW5nIGFsbCBnaXZlbiB2YWx1ZXMgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLmRpZmZlcmVuY2UsIF8ueG9yXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ud2l0aG91dChbMiwgMSwgMiwgM10sIDEsIDIpO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqL1xuICAgIHZhciB3aXRob3V0ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCB2YWx1ZXMpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgdGhhdCBpcyB0aGVcbiAgICAgKiBbc3ltbWV0cmljIGRpZmZlcmVuY2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1N5bW1ldHJpY19kaWZmZXJlbmNlKVxuICAgICAqIG9mIHRoZSBnaXZlbiBhcnJheXMuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyXG4gICAgICogdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8uZGlmZmVyZW5jZSwgXy53aXRob3V0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ueG9yKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgM11cbiAgICAgKi9cbiAgICB2YXIgeG9yID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnhvcmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieVxuICAgICAqIHdoaWNoIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWRcbiAgICAgKiBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZVxuICAgICAqIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ueG9yQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMiwgMy40XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy54b3JCeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgeG9yQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ueG9yYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXNcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuIFRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnhvcldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgeG9yV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyk7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cywgdGhlIGZpcnN0IG9mIHdoaWNoIGNvbnRhaW5zIHRoZVxuICAgICAqIGZpcnN0IGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheXMsIHRoZSBzZWNvbmQgb2Ygd2hpY2ggY29udGFpbnMgdGhlXG4gICAgICogc2Vjb25kIGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheXMsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcChbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxLCB0cnVlXSwgWydiJywgMiwgZmFsc2VdXVxuICAgICAqL1xuICAgIHZhciB6aXAgPSBiYXNlUmVzdCh1bnppcCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZyb21QYWlyc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyB0d28gYXJyYXlzLFxuICAgICAqIG9uZSBvZiBwcm9wZXJ0eSBpZGVudGlmaWVycyBhbmQgb25lIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BzPVtdXSBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlcz1bXV0gVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcE9iamVjdChbJ2EnLCAnYiddLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcE9iamVjdChwcm9wcywgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gYmFzZVppcE9iamVjdChwcm9wcyB8fCBbXSwgdmFsdWVzIHx8IFtdLCBhc3NpZ25WYWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBPYmplY3RgIGV4Y2VwdCB0aGF0IGl0IHN1cHBvcnRzIHByb3BlcnR5IHBhdGhzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BzPVtdXSBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlcz1bXV0gVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcE9iamVjdERlZXAoWydhLmJbMF0uYycsICdhLmJbMV0uZCddLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdiJzogW3sgJ2MnOiAxIH0sIHsgJ2QnOiAyIH1dIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcE9iamVjdERlZXAocHJvcHMsIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGJhc2VaaXBPYmplY3QocHJvcHMgfHwgW10sIHZhbHVlcyB8fCBbXSwgYmFzZVNldCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB0byBzcGVjaWZ5XG4gICAgICogaG93IGdyb3VwZWQgdmFsdWVzIHNob3VsZCBiZSBjb21iaW5lZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aGVcbiAgICAgKiBlbGVtZW50cyBvZiBlYWNoIGdyb3VwOiAoLi4uZ3JvdXApLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gdG8gY29tYmluZVxuICAgICAqICBncm91cGVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcFdpdGgoWzEsIDJdLCBbMTAsIDIwXSwgWzEwMCwgMjAwXSwgZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIGEgKyBiICsgYztcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBbMTExLCAyMjJdXG4gICAgICovXG4gICAgdmFyIHppcFdpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheXMubGVuZ3RoLFxuICAgICAgICAgIGl0ZXJhdGVlID0gbGVuZ3RoID4gMSA/IGFycmF5c1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcblxuICAgICAgaXRlcmF0ZWUgPSB0eXBlb2YgaXRlcmF0ZWUgPT0gJ2Z1bmN0aW9uJyA/IChhcnJheXMucG9wKCksIGl0ZXJhdGVlKSA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiB1bnppcFdpdGgoYXJyYXlzLCBpdGVyYXRlZSk7XG4gICAgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZSB0aGF0IHdyYXBzIGB2YWx1ZWAgd2l0aCBleHBsaWNpdCBtZXRob2RcbiAgICAgKiBjaGFpbiBzZXF1ZW5jZXMgZW5hYmxlZC4gVGhlIHJlc3VsdCBvZiBzdWNoIHNlcXVlbmNlcyBtdXN0IGJlIHVud3JhcHBlZFxuICAgICAqIHdpdGggYF8jdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMy4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIHZhciB5b3VuZ2VzdCA9IF9cbiAgICAgKiAgIC5jaGFpbih1c2VycylcbiAgICAgKiAgIC5zb3J0QnkoJ2FnZScpXG4gICAgICogICAubWFwKGZ1bmN0aW9uKG8pIHtcbiAgICAgKiAgICAgcmV0dXJuIG8udXNlciArICcgaXMgJyArIG8uYWdlO1xuICAgICAqICAgfSlcbiAgICAgKiAgIC5oZWFkKClcbiAgICAgKiAgIC52YWx1ZSgpO1xuICAgICAqIC8vID0+ICdwZWJibGVzIGlzIDEnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2hhaW4odmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2godmFsdWUpO1xuICAgICAgcmVzdWx0Ll9fY2hhaW5fXyA9IHRydWU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGludm9rZXMgYGludGVyY2VwdG9yYCBhbmQgcmV0dXJucyBgdmFsdWVgLiBUaGUgaW50ZXJjZXB0b3JcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAodmFsdWUpLiBUaGUgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0b1xuICAgICAqIFwidGFwIGludG9cIiBhIG1ldGhvZCBjaGFpbiBzZXF1ZW5jZSBpbiBvcmRlciB0byBtb2RpZnkgaW50ZXJtZWRpYXRlIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvdmlkZSB0byBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGludGVyY2VwdG9yIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgM10pXG4gICAgICogIC50YXAoZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgKiAgICAvLyBNdXRhdGUgaW5wdXQgYXJyYXkuXG4gICAgICogICAgYXJyYXkucG9wKCk7XG4gICAgICogIH0pXG4gICAgICogIC5yZXZlcnNlKClcbiAgICAgKiAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFwKHZhbHVlLCBpbnRlcmNlcHRvcikge1xuICAgICAgaW50ZXJjZXB0b3IodmFsdWUpO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udGFwYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSByZXN1bHQgb2YgYGludGVyY2VwdG9yYC5cbiAgICAgKiBUaGUgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byBcInBhc3MgdGhydVwiIHZhbHVlcyByZXBsYWNpbmcgaW50ZXJtZWRpYXRlXG4gICAgICogcmVzdWx0cyBpbiBhIG1ldGhvZCBjaGFpbiBzZXF1ZW5jZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm92aWRlIHRvIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaW50ZXJjZXB0b3IgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oJyAgYWJjICAnKVxuICAgICAqICAuY2hhaW4oKVxuICAgICAqICAudHJpbSgpXG4gICAgICogIC50aHJ1KGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICAgcmV0dXJuIFt2YWx1ZV07XG4gICAgICogIH0pXG4gICAgICogIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsnYWJjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aHJ1KHZhbHVlLCBpbnRlcmNlcHRvcikge1xuICAgICAgcmV0dXJuIGludGVyY2VwdG9yKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB0aGUgd3JhcHBlciB2ZXJzaW9uIG9mIGBfLmF0YC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGF0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfSwgNF0gfTtcbiAgICAgKlxuICAgICAqIF8ob2JqZWN0KS5hdChbJ2FbMF0uYi5jJywgJ2FbMV0nXSkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKi9cbiAgICB2YXIgd3JhcHBlckF0ID0gZmxhdFJlc3QoZnVuY3Rpb24ocGF0aHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgc3RhcnQgPSBsZW5ndGggPyBwYXRoc1swXSA6IDAsXG4gICAgICAgICAgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fLFxuICAgICAgICAgIGludGVyY2VwdG9yID0gZnVuY3Rpb24ob2JqZWN0KSB7IHJldHVybiBiYXNlQXQob2JqZWN0LCBwYXRocyk7IH07XG5cbiAgICAgIGlmIChsZW5ndGggPiAxIHx8IHRoaXMuX19hY3Rpb25zX18ubGVuZ3RoIHx8XG4gICAgICAgICAgISh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB8fCAhaXNJbmRleChzdGFydCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGhydShpbnRlcmNlcHRvcik7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKHN0YXJ0LCArc3RhcnQgKyAobGVuZ3RoID8gMSA6IDApKTtcbiAgICAgIHZhbHVlLl9fYWN0aW9uc19fLnB1c2goe1xuICAgICAgICAnZnVuYyc6IHRocnUsXG4gICAgICAgICdhcmdzJzogW2ludGVyY2VwdG9yXSxcbiAgICAgICAgJ3RoaXNBcmcnOiB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHZhbHVlLCB0aGlzLl9fY2hhaW5fXykudGhydShmdW5jdGlvbihhcnJheSkge1xuICAgICAgICBpZiAobGVuZ3RoICYmICFhcnJheS5sZW5ndGgpIHtcbiAgICAgICAgICBhcnJheS5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZSB3aXRoIGV4cGxpY2l0IG1ldGhvZCBjaGFpbiBzZXF1ZW5jZXMgZW5hYmxlZC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGNoYWluXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIEEgc2VxdWVuY2Ugd2l0aG91dCBleHBsaWNpdCBjaGFpbmluZy5cbiAgICAgKiBfKHVzZXJzKS5oZWFkKCk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfVxuICAgICAqXG4gICAgICogLy8gQSBzZXF1ZW5jZSB3aXRoIGV4cGxpY2l0IGNoYWluaW5nLlxuICAgICAqIF8odXNlcnMpXG4gICAgICogICAuY2hhaW4oKVxuICAgICAqICAgLmhlYWQoKVxuICAgICAqICAgLnBpY2soJ3VzZXInKVxuICAgICAqICAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ2hhaW4oKSB7XG4gICAgICByZXR1cm4gY2hhaW4odGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGNoYWluIHNlcXVlbmNlIGFuZCByZXR1cm5zIHRoZSB3cmFwcGVkIHJlc3VsdC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGNvbW1pdFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMl07XG4gICAgICogdmFyIHdyYXBwZWQgPSBfKGFycmF5KS5wdXNoKDMpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogd3JhcHBlZCA9IHdyYXBwZWQuY29tbWl0KCk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogd3JhcHBlZC5sYXN0KCk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDb21taXQoKSB7XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodGhpcy52YWx1ZSgpLCB0aGlzLl9fY2hhaW5fXyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmV4dCB2YWx1ZSBvbiBhIHdyYXBwZWQgb2JqZWN0IGZvbGxvd2luZyB0aGVcbiAgICAgKiBbaXRlcmF0b3IgcHJvdG9jb2xdKGh0dHBzOi8vbWRuLmlvL2l0ZXJhdGlvbl9wcm90b2NvbHMjaXRlcmF0b3IpLlxuICAgICAqXG4gICAgICogQG5hbWUgbmV4dFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5leHQgaXRlcmF0b3IgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pO1xuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IGZhbHNlLCAndmFsdWUnOiAxIH1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiBmYWxzZSwgJ3ZhbHVlJzogMiB9XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogdHJ1ZSwgJ3ZhbHVlJzogdW5kZWZpbmVkIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyTmV4dCgpIHtcbiAgICAgIGlmICh0aGlzLl9fdmFsdWVzX18gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9fdmFsdWVzX18gPSB0b0FycmF5KHRoaXMudmFsdWUoKSk7XG4gICAgICB9XG4gICAgICB2YXIgZG9uZSA9IHRoaXMuX19pbmRleF9fID49IHRoaXMuX192YWx1ZXNfXy5sZW5ndGgsXG4gICAgICAgICAgdmFsdWUgPSBkb25lID8gdW5kZWZpbmVkIDogdGhpcy5fX3ZhbHVlc19fW3RoaXMuX19pbmRleF9fKytdO1xuXG4gICAgICByZXR1cm4geyAnZG9uZSc6IGRvbmUsICd2YWx1ZSc6IHZhbHVlIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlcyB0aGUgd3JhcHBlciB0byBiZSBpdGVyYWJsZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIFN5bWJvbC5pdGVyYXRvclxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHdyYXBwZXIgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKTtcbiAgICAgKlxuICAgICAqIHdyYXBwZWRbU3ltYm9sLml0ZXJhdG9yXSgpID09PSB3cmFwcGVkO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIEFycmF5LmZyb20od3JhcHBlZCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclRvSXRlcmF0b3IoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGNoYWluIHNlcXVlbmNlIHBsYW50aW5nIGB2YWx1ZWAgYXMgdGhlIHdyYXBwZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAbmFtZSBwbGFudFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBsYW50LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pLm1hcChzcXVhcmUpO1xuICAgICAqIHZhciBvdGhlciA9IHdyYXBwZWQucGxhbnQoWzMsIDRdKTtcbiAgICAgKlxuICAgICAqIG90aGVyLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzksIDE2XVxuICAgICAqXG4gICAgICogd3JhcHBlZC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsxLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJQbGFudCh2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCxcbiAgICAgICAgICBwYXJlbnQgPSB0aGlzO1xuXG4gICAgICB3aGlsZSAocGFyZW50IGluc3RhbmNlb2YgYmFzZUxvZGFzaCkge1xuICAgICAgICB2YXIgY2xvbmUgPSB3cmFwcGVyQ2xvbmUocGFyZW50KTtcbiAgICAgICAgY2xvbmUuX19pbmRleF9fID0gMDtcbiAgICAgICAgY2xvbmUuX192YWx1ZXNfXyA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIHByZXZpb3VzLl9fd3JhcHBlZF9fID0gY2xvbmU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ID0gY2xvbmU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByZXZpb3VzID0gY2xvbmU7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5fX3dyYXBwZWRfXztcbiAgICAgIH1cbiAgICAgIHByZXZpb3VzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHRoZSB3cmFwcGVyIHZlcnNpb24gb2YgYF8ucmV2ZXJzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyB0aGUgd3JhcHBlZCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHJldmVyc2VcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXyhhcnJheSkucmV2ZXJzZSgpLnZhbHVlKClcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyUmV2ZXJzZSgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX187XG4gICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICB2YXIgd3JhcHBlZCA9IHZhbHVlO1xuICAgICAgICBpZiAodGhpcy5fX2FjdGlvbnNfXy5sZW5ndGgpIHtcbiAgICAgICAgICB3cmFwcGVkID0gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHdyYXBwZWQgPSB3cmFwcGVkLnJldmVyc2UoKTtcbiAgICAgICAgd3JhcHBlZC5fX2FjdGlvbnNfXy5wdXNoKHtcbiAgICAgICAgICAnZnVuYyc6IHRocnUsXG4gICAgICAgICAgJ2FyZ3MnOiBbcmV2ZXJzZV0sXG4gICAgICAgICAgJ3RoaXNBcmcnOiB1bmRlZmluZWRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih3cmFwcGVkLCB0aGlzLl9fY2hhaW5fXyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy50aHJ1KHJldmVyc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBjaGFpbiBzZXF1ZW5jZSB0byByZXNvbHZlIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAbmFtZSB2YWx1ZVxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIHRvSlNPTiwgdmFsdWVPZlxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKFsxLCAyLCAzXSkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyVmFsdWUoKSB7XG4gICAgICByZXR1cm4gYmFzZVdyYXBwZXJWYWx1ZSh0aGlzLl9fd3JhcHBlZF9fLCB0aGlzLl9fYWN0aW9uc19fKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUgb2ZcbiAgICAgKiBlYWNoIGtleSBpcyB0aGUgbnVtYmVyIG9mIHRpbWVzIHRoZSBrZXkgd2FzIHJldHVybmVkIGJ5IGBpdGVyYXRlZWAuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY291bnRCeShbNi4xLCA0LjIsIDYuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IHsgJzQnOiAxLCAnNic6IDIgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5jb3VudEJ5KFsnb25lJywgJ3R3bycsICd0aHJlZSddLCAnbGVuZ3RoJyk7XG4gICAgICogLy8gPT4geyAnMyc6IDIsICc1JzogMSB9XG4gICAgICovXG4gICAgdmFyIGNvdW50QnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpKSB7XG4gICAgICAgICsrcmVzdWx0W2tleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIDEpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciAqKmFsbCoqIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBJdGVyYXRpb24gaXMgc3RvcHBlZCBvbmNlIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIHJldHVybnMgYHRydWVgIGZvclxuICAgICAqIFtlbXB0eSBjb2xsZWN0aW9uc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRW1wdHlfc2V0KSBiZWNhdXNlXG4gICAgICogW2V2ZXJ5dGhpbmcgaXMgdHJ1ZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVmFjdW91c190cnV0aCkgb2ZcbiAgICAgKiBlbGVtZW50cyBvZiBlbXB0eSBjb2xsZWN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXZlcnkoW3RydWUsIDEsIG51bGwsICd5ZXMnXSwgQm9vbGVhbik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGV2ZXJ5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RXZlcnkgOiBiYXNlRXZlcnk7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkpIHtcbiAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAsIHJldHVybmluZyBhbiBhcnJheSBvZiBhbGwgZWxlbWVudHNcbiAgICAgKiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnJlbW92ZWAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICogQHNlZSBfLnJlamVjdFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIENvbWJpbmluZyBzZXZlcmFsIHByZWRpY2F0ZXMgdXNpbmcgYF8ub3ZlckV2ZXJ5YCBvciBgXy5vdmVyU29tZWAuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIF8ub3ZlclNvbWUoW3sgJ2FnZSc6IDM2IH0sIFsnYWdlJywgNDBdXSkpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdiYXJuZXknXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbHRlcihjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RmlsdGVyIDogYmFzZUZpbHRlcjtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLCByZXR1cm5pbmcgdGhlIGZpcnN0IGVsZW1lbnRcbiAgICAgKiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF0Y2hlZCBlbGVtZW50LCBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEsICAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2UgPCA0MDsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAnYmFybmV5J1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsIHsgJ2FnZSc6IDEsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ3BlYmJsZXMnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAnZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2Jhcm5leSdcbiAgICAgKi9cbiAgICB2YXIgZmluZCA9IGNyZWF0ZUZpbmQoZmluZEluZGV4KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PWNvbGxlY3Rpb24ubGVuZ3RoLTFdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF0Y2hlZCBlbGVtZW50LCBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZpbmRMYXN0KFsxLCAyLCAzLCA0XSwgZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDE7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIHZhciBmaW5kTGFzdCA9IGNyZWF0ZUZpbmQoZmluZExhc3RJbmRleCk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZmxhdHRlbmVkIGFycmF5IG9mIHZhbHVlcyBieSBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmBcbiAgICAgKiB0aHJ1IGBpdGVyYXRlZWAgYW5kIGZsYXR0ZW5pbmcgdGhlIG1hcHBlZCByZXN1bHRzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGR1cGxpY2F0ZShuKSB7XG4gICAgICogICByZXR1cm4gW24sIG5dO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmxhdE1hcChbMSwgMl0sIGR1cGxpY2F0ZSk7XG4gICAgICogLy8gPT4gWzEsIDEsIDIsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VGbGF0dGVuKG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSksIDEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmxhdE1hcGAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgZmxhdHRlbnMgdGhlXG4gICAgICogbWFwcGVkIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGR1cGxpY2F0ZShuKSB7XG4gICAgICogICByZXR1cm4gW1tbbiwgbl1dXTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZsYXRNYXBEZWVwKFsxLCAyXSwgZHVwbGljYXRlKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMiwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwRGVlcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VGbGF0dGVuKG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSksIElORklOSVRZKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZsYXRNYXBgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIHRoZVxuICAgICAqIG1hcHBlZCByZXN1bHRzIHVwIHRvIGBkZXB0aGAgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlcHRoPTFdIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGR1cGxpY2F0ZShuKSB7XG4gICAgICogICByZXR1cm4gW1tbbiwgbl1dXTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZsYXRNYXBEZXB0aChbMSwgMl0sIGR1cGxpY2F0ZSwgMik7XG4gICAgICogLy8gPT4gW1sxLCAxXSwgWzIsIDJdXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXBEZXB0aChjb2xsZWN0aW9uLCBpdGVyYXRlZSwgZGVwdGgpIHtcbiAgICAgIGRlcHRoID0gZGVwdGggPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGgpO1xuICAgICAgcmV0dXJuIGJhc2VGbGF0dGVuKG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSksIGRlcHRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIGVsZW1lbnQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogQXMgd2l0aCBvdGhlciBcIkNvbGxlY3Rpb25zXCIgbWV0aG9kcywgb2JqZWN0cyB3aXRoIGEgXCJsZW5ndGhcIlxuICAgICAqIHByb3BlcnR5IGFyZSBpdGVyYXRlZCBsaWtlIGFycmF5cy4gVG8gYXZvaWQgdGhpcyBiZWhhdmlvciB1c2UgYF8uZm9ySW5gXG4gICAgICogb3IgYF8uZm9yT3duYCBmb3Igb2JqZWN0IGl0ZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBhbGlhcyBlYWNoXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICogQHNlZSBfLmZvckVhY2hSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZvckVhY2goWzEsIDJdLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgY29uc29sZS5sb2codmFsdWUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgYDFgIHRoZW4gYDJgLlxuICAgICAqXG4gICAgICogXy5mb3JFYWNoKHsgJ2EnOiAxLCAnYic6IDIgfSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdhJyB0aGVuICdiJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JFYWNoKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUVhY2ggOiBiYXNlRWFjaDtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JFYWNoYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBhbGlhcyBlYWNoUmlnaHRcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBAc2VlIF8uZm9yRWFjaFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZvckVhY2hSaWdodChbMSwgMl0sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyBgMmAgdGhlbiBgMWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yRWFjaFJpZ2h0KGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUVhY2hSaWdodCA6IGJhc2VFYWNoUmlnaHQ7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgb3JkZXIgb2YgZ3JvdXBlZCB2YWx1ZXNcbiAgICAgKiBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIGBjb2xsZWN0aW9uYC4gVGhlIGNvcnJlc3BvbmRpbmdcbiAgICAgKiB2YWx1ZSBvZiBlYWNoIGtleSBpcyBhbiBhcnJheSBvZiBlbGVtZW50cyByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGVcbiAgICAgKiBrZXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmdyb3VwQnkoWzYuMSwgNC4yLCA2LjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiB7ICc0JzogWzQuMl0sICc2JzogWzYuMSwgNi4zXSB9XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmdyb3VwQnkoWydvbmUnLCAndHdvJywgJ3RocmVlJ10sICdsZW5ndGgnKTtcbiAgICAgKiAvLyA9PiB7ICczJzogWydvbmUnLCAndHdvJ10sICc1JzogWyd0aHJlZSddIH1cbiAgICAgKi9cbiAgICB2YXIgZ3JvdXBCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIGtleSkpIHtcbiAgICAgICAgcmVzdWx0W2tleV0ucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIFt2YWx1ZV0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gYGNvbGxlY3Rpb25gLiBJZiBgY29sbGVjdGlvbmAgaXMgYSBzdHJpbmcsIGl0J3NcbiAgICAgKiBjaGVja2VkIGZvciBhIHN1YnN0cmluZyBvZiBgdmFsdWVgLCBvdGhlcndpc2VcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGlzIHVzZWQgZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBJZiBgZnJvbUluZGV4YCBpcyBuZWdhdGl2ZSwgaXQncyB1c2VkIGFzXG4gICAgICogdGhlIG9mZnNldCBmcm9tIHRoZSBlbmQgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5yZWR1Y2VgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoWzEsIDIsIDNdLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKFsxLCAyLCAzXSwgMSwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoeyAnYSc6IDEsICdiJzogMiB9LCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKCdhYmNkJywgJ2JjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluY2x1ZGVzKGNvbGxlY3Rpb24sIHZhbHVlLCBmcm9tSW5kZXgsIGd1YXJkKSB7XG4gICAgICBjb2xsZWN0aW9uID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBjb2xsZWN0aW9uIDogdmFsdWVzKGNvbGxlY3Rpb24pO1xuICAgICAgZnJvbUluZGV4ID0gKGZyb21JbmRleCAmJiAhZ3VhcmQpID8gdG9JbnRlZ2VyKGZyb21JbmRleCkgOiAwO1xuXG4gICAgICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG4gICAgICBpZiAoZnJvbUluZGV4IDwgMCkge1xuICAgICAgICBmcm9tSW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgZnJvbUluZGV4LCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc1N0cmluZyhjb2xsZWN0aW9uKVxuICAgICAgICA/IChmcm9tSW5kZXggPD0gbGVuZ3RoICYmIGNvbGxlY3Rpb24uaW5kZXhPZih2YWx1ZSwgZnJvbUluZGV4KSA+IC0xKVxuICAgICAgICA6ICghIWxlbmd0aCAmJiBiYXNlSW5kZXhPZihjb2xsZWN0aW9uLCB2YWx1ZSwgZnJvbUluZGV4KSA+IC0xKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBtZXRob2QgYXQgYHBhdGhgIG9mIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAsIHJldHVybmluZ1xuICAgICAqIGFuIGFycmF5IG9mIHRoZSByZXN1bHRzIG9mIGVhY2ggaW52b2tlZCBtZXRob2QuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50c1xuICAgICAqIGFyZSBwcm92aWRlZCB0byBlYWNoIGludm9rZWQgbWV0aG9kLiBJZiBgcGF0aGAgaXMgYSBmdW5jdGlvbiwgaXQncyBpbnZva2VkXG4gICAgICogZm9yLCBhbmQgYHRoaXNgIGJvdW5kIHRvLCBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbnxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2Ugb3JcbiAgICAgKiAgdGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBlYWNoIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbnZva2VNYXAoW1s1LCAxLCA3XSwgWzMsIDIsIDFdXSwgJ3NvcnQnKTtcbiAgICAgKiAvLyA9PiBbWzEsIDUsIDddLCBbMSwgMiwgM11dXG4gICAgICpcbiAgICAgKiBfLmludm9rZU1hcChbMTIzLCA0NTZdLCBTdHJpbmcucHJvdG90eXBlLnNwbGl0LCAnJyk7XG4gICAgICogLy8gPT4gW1snMScsICcyJywgJzMnXSwgWyc0JywgJzUnLCAnNiddXVxuICAgICAqL1xuICAgIHZhciBpbnZva2VNYXAgPSBiYXNlUmVzdChmdW5jdGlvbihjb2xsZWN0aW9uLCBwYXRoLCBhcmdzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpc0Z1bmMgPSB0eXBlb2YgcGF0aCA9PSAnZnVuY3Rpb24nLFxuICAgICAgICAgIHJlc3VsdCA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gQXJyYXkoY29sbGVjdGlvbi5sZW5ndGgpIDogW107XG5cbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJlc3VsdFsrK2luZGV4XSA9IGlzRnVuYyA/IGFwcGx5KHBhdGgsIHZhbHVlLCBhcmdzKSA6IGJhc2VJbnZva2UodmFsdWUsIHBhdGgsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBjb3JyZXNwb25kaW5nIHZhbHVlIG9mXG4gICAgICogZWFjaCBrZXkgaXMgdGhlIGxhc3QgZWxlbWVudCByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGUga2V5LiBUaGVcbiAgICAgKiBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbXG4gICAgICogICB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSxcbiAgICAgKiAgIHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5rZXlCeShhcnJheSwgZnVuY3Rpb24obykge1xuICAgICAqICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoby5jb2RlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sICdkJzogeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfSB9XG4gICAgICpcbiAgICAgKiBfLmtleUJ5KGFycmF5LCAnZGlyJyk7XG4gICAgICogLy8gPT4geyAnbGVmdCc6IHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LCAncmlnaHQnOiB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9IH1cbiAgICAgKi9cbiAgICB2YXIga2V5QnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCB2YWx1ZSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHZhbHVlcyBieSBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAgdGhydVxuICAgICAqIGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICAgICAqICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICAgICAqIGBfLmV2ZXJ5YCwgYF8uZmlsdGVyYCwgYF8ubWFwYCwgYF8ubWFwVmFsdWVzYCwgYF8ucmVqZWN0YCwgYW5kIGBfLnNvbWVgLlxuICAgICAqXG4gICAgICogVGhlIGd1YXJkZWQgbWV0aG9kcyBhcmU6XG4gICAgICogYGFyeWAsIGBjaHVua2AsIGBjdXJyeWAsIGBjdXJyeVJpZ2h0YCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCwgYGV2ZXJ5YCxcbiAgICAgKiBgZmlsbGAsIGBpbnZlcnRgLCBgcGFyc2VJbnRgLCBgcmFuZG9tYCwgYHJhbmdlYCwgYHJhbmdlUmlnaHRgLCBgcmVwZWF0YCxcbiAgICAgKiBgc2FtcGxlU2l6ZWAsIGBzbGljZWAsIGBzb21lYCwgYHNvcnRCeWAsIGBzcGxpdGAsIGB0YWtlYCwgYHRha2VSaWdodGAsXG4gICAgICogYHRlbXBsYXRlYCwgYHRyaW1gLCBgdHJpbUVuZGAsIGB0cmltU3RhcnRgLCBhbmQgYHdvcmRzYFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8ubWFwKFs0LCA4XSwgc3F1YXJlKTtcbiAgICAgKiAvLyA9PiBbMTYsIDY0XVxuICAgICAqXG4gICAgICogXy5tYXAoeyAnYSc6IDQsICdiJzogOCB9LCBzcXVhcmUpO1xuICAgICAqIC8vID0+IFsxNiwgNjRdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1hcCh1c2VycywgJ3VzZXInKTtcbiAgICAgKiAvLyA9PiBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5TWFwIDogYmFzZU1hcDtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0QnlgIGV4Y2VwdCB0aGF0IGl0IGFsbG93cyBzcGVjaWZ5aW5nIHRoZSBzb3J0XG4gICAgICogb3JkZXJzIG9mIHRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS4gSWYgYG9yZGVyc2AgaXMgdW5zcGVjaWZpZWQsIGFsbCB2YWx1ZXNcbiAgICAgKiBhcmUgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlci4gT3RoZXJ3aXNlLCBzcGVjaWZ5IGFuIG9yZGVyIG9mIFwiZGVzY1wiIGZvclxuICAgICAqIGRlc2NlbmRpbmcgb3IgXCJhc2NcIiBmb3IgYXNjZW5kaW5nIHNvcnQgb3JkZXIgb2YgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5W118RnVuY3Rpb25bXXxPYmplY3RbXXxzdHJpbmdbXX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBbb3JkZXJzXSBUaGUgc29ydCBvcmRlcnMgb2YgYGl0ZXJhdGVlc2AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ucmVkdWNlYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQ4IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNCB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gU29ydCBieSBgdXNlcmAgaW4gYXNjZW5kaW5nIG9yZGVyIGFuZCBieSBgYWdlYCBpbiBkZXNjZW5kaW5nIG9yZGVyLlxuICAgICAqIF8ub3JkZXJCeSh1c2VycywgWyd1c2VyJywgJ2FnZSddLCBbJ2FzYycsICdkZXNjJ10pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM2XSwgWydiYXJuZXknLCAzNF0sIFsnZnJlZCcsIDQ4XSwgWydmcmVkJywgNDBdXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMsIGd1YXJkKSB7XG4gICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNBcnJheShpdGVyYXRlZXMpKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IGl0ZXJhdGVlcyA9PSBudWxsID8gW10gOiBbaXRlcmF0ZWVzXTtcbiAgICAgIH1cbiAgICAgIG9yZGVycyA9IGd1YXJkID8gdW5kZWZpbmVkIDogb3JkZXJzO1xuICAgICAgaWYgKCFpc0FycmF5KG9yZGVycykpIHtcbiAgICAgICAgb3JkZXJzID0gb3JkZXJzID09IG51bGwgPyBbXSA6IFtvcmRlcnNdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHNwbGl0IGludG8gdHdvIGdyb3VwcywgdGhlIGZpcnN0IG9mIHdoaWNoXG4gICAgICogY29udGFpbnMgZWxlbWVudHMgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLCB0aGUgc2Vjb25kIG9mIHdoaWNoXG4gICAgICogY29udGFpbnMgZWxlbWVudHMgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkgZm9yLiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snZnJlZCddLCBbJ2Jhcm5leScsICdwZWJibGVzJ11dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1sncGViYmxlcyddLCBbJ2Jhcm5leScsICdmcmVkJ11dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAncGViYmxlcyddLCBbJ2ZyZWQnXV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snZnJlZCddLCBbJ2Jhcm5leScsICdwZWJibGVzJ11dXG4gICAgICovXG4gICAgdmFyIHBhcnRpdGlvbiA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHRba2V5ID8gMCA6IDFdLnB1c2godmFsdWUpO1xuICAgIH0sIGZ1bmN0aW9uKCkgeyByZXR1cm4gW1tdLCBbXV07IH0pO1xuXG4gICAgLyoqXG4gICAgICogUmVkdWNlcyBgY29sbGVjdGlvbmAgdG8gYSB2YWx1ZSB3aGljaCBpcyB0aGUgYWNjdW11bGF0ZWQgcmVzdWx0IG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYCwgd2hlcmUgZWFjaCBzdWNjZXNzaXZlXG4gICAgICogaW52b2NhdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy4gSWYgYGFjY3VtdWxhdG9yYFxuICAgICAqIGlzIG5vdCBnaXZlbiwgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIGlzIHVzZWQgYXMgdGhlIGluaXRpYWxcbiAgICAgKiB2YWx1ZS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBmb3VyIGFyZ3VtZW50czpcbiAgICAgKiAoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogTWFueSBsb2Rhc2ggbWV0aG9kcyBhcmUgZ3VhcmRlZCB0byB3b3JrIGFzIGl0ZXJhdGVlcyBmb3IgbWV0aG9kcyBsaWtlXG4gICAgICogYF8ucmVkdWNlYCwgYF8ucmVkdWNlUmlnaHRgLCBhbmQgYF8udHJhbnNmb3JtYC5cbiAgICAgKlxuICAgICAqIFRoZSBndWFyZGVkIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhc3NpZ25gLCBgZGVmYXVsdHNgLCBgZGVmYXVsdHNEZWVwYCwgYGluY2x1ZGVzYCwgYG1lcmdlYCwgYG9yZGVyQnlgLFxuICAgICAqIGFuZCBgc29ydEJ5YFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8ucmVkdWNlUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yZWR1Y2UoWzEsIDJdLCBmdW5jdGlvbihzdW0sIG4pIHtcbiAgICAgKiAgIHJldHVybiBzdW0gKyBuO1xuICAgICAqIH0sIDApO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlKHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9LCBmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIChyZXN1bHRbdmFsdWVdIHx8IChyZXN1bHRbdmFsdWVdID0gW10pKS5wdXNoKGtleSk7XG4gICAgICogICByZXR1cm4gcmVzdWx0O1xuICAgICAqIH0sIHt9KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVkdWNlKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlSZWR1Y2UgOiBiYXNlUmVkdWNlLFxuICAgICAgICAgIGluaXRBY2N1bSA9IGFyZ3VtZW50cy5sZW5ndGggPCAzO1xuXG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgNCksIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0sIGJhc2VFYWNoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnJlZHVjZWAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5yZWR1Y2VcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW1swLCAxXSwgWzIsIDNdLCBbNCwgNV1dO1xuICAgICAqXG4gICAgICogXy5yZWR1Y2VSaWdodChhcnJheSwgZnVuY3Rpb24oZmxhdHRlbmVkLCBvdGhlcikge1xuICAgICAqICAgcmV0dXJuIGZsYXR0ZW5lZC5jb25jYXQob3RoZXIpO1xuICAgICAqIH0sIFtdKTtcbiAgICAgKiAvLyA9PiBbNCwgNSwgMiwgMywgMCwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWR1Y2VSaWdodChjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5UmVkdWNlUmlnaHQgOiBiYXNlUmVkdWNlLFxuICAgICAgICAgIGluaXRBY2N1bSA9IGFyZ3VtZW50cy5sZW5ndGggPCAzO1xuXG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgNCksIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0sIGJhc2VFYWNoUmlnaHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5maWx0ZXJgOyB0aGlzIG1ldGhvZCByZXR1cm5zIHRoZSBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmBcbiAgICAgKiB0aGF0IGBwcmVkaWNhdGVgIGRvZXMgKipub3QqKiByZXR1cm4gdHJ1dGh5IGZvci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICAgKiBAc2VlIF8uZmlsdGVyXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ucmVqZWN0KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucmVqZWN0KHVzZXJzLCB7ICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucmVqZWN0KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucmVqZWN0KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlamVjdChjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RmlsdGVyIDogYmFzZUZpbHRlcjtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIG5lZ2F0ZShnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIHJhbmRvbSBlbGVtZW50IGZyb20gYGNvbGxlY3Rpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZShbMSwgMiwgMywgNF0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzYW1wbGUoY29sbGVjdGlvbikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTYW1wbGUgOiBiYXNlU2FtcGxlO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBgbmAgcmFuZG9tIGVsZW1lbnRzIGF0IHVuaXF1ZSBrZXlzIGZyb20gYGNvbGxlY3Rpb25gIHVwIHRvIHRoZVxuICAgICAqIHNpemUgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2FtcGxlU2l6ZShbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFszLCAxXVxuICAgICAqXG4gICAgICogXy5zYW1wbGVTaXplKFsxLCAyLCAzXSwgNCk7XG4gICAgICogLy8gPT4gWzIsIDMsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FtcGxlU2l6ZShjb2xsZWN0aW9uLCBuLCBndWFyZCkge1xuICAgICAgaWYgKChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIG4sIGd1YXJkKSA6IG4gPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgbiA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgfVxuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTYW1wbGVTaXplIDogYmFzZVNhbXBsZVNpemU7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHNodWZmbGVkIHZhbHVlcywgdXNpbmcgYSB2ZXJzaW9uIG9mIHRoZVxuICAgICAqIFtGaXNoZXItWWF0ZXMgc2h1ZmZsZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmlzaGVyLVlhdGVzX3NodWZmbGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzaHVmZmxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNodWZmbGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNodWZmbGUoWzEsIDIsIDMsIDRdKTtcbiAgICAgKiAvLyA9PiBbNCwgMSwgMywgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaHVmZmxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2h1ZmZsZSA6IGJhc2VTaHVmZmxlO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc2l6ZSBvZiBgY29sbGVjdGlvbmAgYnkgcmV0dXJuaW5nIGl0cyBsZW5ndGggZm9yIGFycmF5LWxpa2VcbiAgICAgKiB2YWx1ZXMgb3IgdGhlIG51bWJlciBvZiBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBmb3Igb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29sbGVjdGlvbiBzaXplLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNpemUoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnNpemUoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiBfLnNpemUoJ3BlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiA3XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2l6ZShjb2xsZWN0aW9uKSB7XG4gICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHJldHVybiBpc1N0cmluZyhjb2xsZWN0aW9uKSA/IHN0cmluZ1NpemUoY29sbGVjdGlvbikgOiBjb2xsZWN0aW9uLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcoY29sbGVjdGlvbik7XG4gICAgICBpZiAodGFnID09IG1hcFRhZyB8fCB0YWcgPT0gc2V0VGFnKSB7XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uLnNpemU7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUtleXMoY29sbGVjdGlvbikubGVuZ3RoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgKiphbnkqKiBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBJdGVyYXRpb24gaXMgc3RvcHBlZCBvbmNlIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29tZShbbnVsbCwgMCwgJ3llcycsIGZhbHNlXSwgQm9vbGVhbik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29tZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvbWUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvbWUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29tZShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNvbWUgOiBiYXNlU29tZTtcbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSkge1xuICAgICAgICBwcmVkaWNhdGUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzLCBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyIGJ5IHRoZSByZXN1bHRzIG9mXG4gICAgICogcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYSBjb2xsZWN0aW9uIHRocnUgZWFjaCBpdGVyYXRlZS4gVGhpcyBtZXRob2RcbiAgICAgKiBwZXJmb3JtcyBhIHN0YWJsZSBzb3J0LCB0aGF0IGlzLCBpdCBwcmVzZXJ2ZXMgdGhlIG9yaWdpbmFsIHNvcnQgb3JkZXIgb2ZcbiAgICAgKiBlcXVhbCBlbGVtZW50cy4gVGhlIGl0ZXJhdGVlcyBhcmUgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbaXRlcmF0ZWVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNvcnRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDggfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiAzMCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzQgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnNvcnRCeSh1c2VycywgW2Z1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlcjsgfV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM2XSwgWydiYXJuZXknLCAzNF0sIFsnZnJlZCcsIDQ4XSwgWydmcmVkJywgMzBdXVxuICAgICAqXG4gICAgICogXy5zb3J0QnkodXNlcnMsIFsndXNlcicsICdhZ2UnXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzRdLCBbJ2Jhcm5leScsIDM2XSwgWydmcmVkJywgMzBdLCBbJ2ZyZWQnLCA0OF1dXG4gICAgICovXG4gICAgdmFyIHNvcnRCeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlcykge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gaXRlcmF0ZWVzLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggPiAxICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIGl0ZXJhdGVlc1swXSwgaXRlcmF0ZWVzWzFdKSkge1xuICAgICAgICBpdGVyYXRlZXMgPSBbXTtcbiAgICAgIH0gZWxzZSBpZiAobGVuZ3RoID4gMiAmJiBpc0l0ZXJhdGVlQ2FsbChpdGVyYXRlZXNbMF0sIGl0ZXJhdGVlc1sxXSwgaXRlcmF0ZWVzWzJdKSkge1xuICAgICAgICBpdGVyYXRlZXMgPSBbaXRlcmF0ZWVzWzBdXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBiYXNlRmxhdHRlbihpdGVyYXRlZXMsIDEpLCBbXSk7XG4gICAgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB0aW1lc3RhbXAgb2YgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2VcbiAgICAgKiB0aGUgVW5peCBlcG9jaCAoMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBEYXRlXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXN0YW1wLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmVyKGZ1bmN0aW9uKHN0YW1wKSB7XG4gICAgICogICBjb25zb2xlLmxvZyhfLm5vdygpIC0gc3RhbXApO1xuICAgICAqIH0sIF8ubm93KCkpO1xuICAgICAqIC8vID0+IExvZ3MgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaXQgdG9vayBmb3IgdGhlIGRlZmVycmVkIGludm9jYXRpb24uXG4gICAgICovXG4gICAgdmFyIG5vdyA9IGN0eE5vdyB8fCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByb290LkRhdGUubm93KCk7XG4gICAgfTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5iZWZvcmVgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzXG4gICAgICogYGZ1bmNgIG9uY2UgaXQncyBjYWxsZWQgYG5gIG9yIG1vcmUgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGNhbGxzIGJlZm9yZSBgZnVuY2AgaXMgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F2ZXMgPSBbJ3Byb2ZpbGUnLCAnc2V0dGluZ3MnXTtcbiAgICAgKlxuICAgICAqIHZhciBkb25lID0gXy5hZnRlcihzYXZlcy5sZW5ndGgsIGZ1bmN0aW9uKCkge1xuICAgICAqICAgY29uc29sZS5sb2coJ2RvbmUgc2F2aW5nIScpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogXy5mb3JFYWNoKHNhdmVzLCBmdW5jdGlvbih0eXBlKSB7XG4gICAgICogICBhc3luY1NhdmUoeyAndHlwZSc6IHR5cGUsICdjb21wbGV0ZSc6IGRvbmUgfSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnZG9uZSBzYXZpbmchJyBhZnRlciB0aGUgdHdvIGFzeW5jIHNhdmVzIGhhdmUgY29tcGxldGVkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFmdGVyKG4sIGZ1bmMpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgtLW4gPCAxKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCwgd2l0aCB1cCB0byBgbmAgYXJndW1lbnRzLFxuICAgICAqIGlnbm9yaW5nIGFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IGNhcC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzgnLCAnMTAnXSwgXy5hcnkocGFyc2VJbnQsIDEpKTtcbiAgICAgKiAvLyA9PiBbNiwgOCwgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJ5KGZ1bmMsIG4sIGd1YXJkKSB7XG4gICAgICBuID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBuO1xuICAgICAgbiA9IChmdW5jICYmIG4gPT0gbnVsbCkgPyBmdW5jLmxlbmd0aCA6IG47XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0FSWV9GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgLCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzXG4gICAgICogb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24sIHdoaWxlIGl0J3MgY2FsbGVkIGxlc3MgdGhhbiBgbmAgdGltZXMuIFN1YnNlcXVlbnRcbiAgICAgKiBjYWxscyB0byB0aGUgY3JlYXRlZCBmdW5jdGlvbiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgaW52b2NhdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgY2FsbHMgYXQgd2hpY2ggYGZ1bmNgIGlzIG5vIGxvbmdlciBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmJlZm9yZSg1LCBhZGRDb250YWN0VG9MaXN0KSk7XG4gICAgICogLy8gPT4gQWxsb3dzIGFkZGluZyB1cCB0byA0IGNvbnRhY3RzIHRvIHRoZSBsaXN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJlZm9yZShuLCBmdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKC0tbiA+IDApIHtcbiAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG4gPD0gMSkge1xuICAgICAgICAgIGZ1bmMgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgYHRoaXNBcmdgXG4gICAgICogYW5kIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uYmluZC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljIGJ1aWxkcyxcbiAgICAgKiBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIG5hdGl2ZSBgRnVuY3Rpb24jYmluZGAsIHRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiXG4gICAgICogcHJvcGVydHkgb2YgYm91bmQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYmluZC5cbiAgICAgKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBib3VuZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZ3JlZXQoZ3JlZXRpbmcsIHB1bmN0dWF0aW9uKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAndXNlcic6ICdmcmVkJyB9O1xuICAgICAqXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kKGdyZWV0LCBvYmplY3QsICdoaScpO1xuICAgICAqIGJvdW5kKCchJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQhJ1xuICAgICAqXG4gICAgICogLy8gQm91bmQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kKGdyZWV0LCBvYmplY3QsIF8sICchJyk7XG4gICAgICogYm91bmQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQhJ1xuICAgICAqL1xuICAgIHZhciBiaW5kID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgdGhpc0FyZywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gV1JBUF9CSU5EX0ZMQUc7XG4gICAgICBpZiAocGFydGlhbHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihiaW5kKSk7XG4gICAgICAgIGJpdG1hc2sgfD0gV1JBUF9QQVJUSUFMX0ZMQUc7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBtZXRob2QgYXQgYG9iamVjdFtrZXldYCB3aXRoIGBwYXJ0aWFsc2BcbiAgICAgKiBwcmVwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGRpZmZlcnMgZnJvbSBgXy5iaW5kYCBieSBhbGxvd2luZyBib3VuZCBmdW5jdGlvbnMgdG8gcmVmZXJlbmNlXG4gICAgICogbWV0aG9kcyB0aGF0IG1heSBiZSByZWRlZmluZWQgb3IgZG9uJ3QgeWV0IGV4aXN0LiBTZWVcbiAgICAgKiBbUGV0ZXIgTWljaGF1eCdzIGFydGljbGVdKGh0dHA6Ly9wZXRlci5taWNoYXV4LmNhL2FydGljbGVzL2xhenktZnVuY3Rpb24tZGVmaW5pdGlvbi1wYXR0ZXJuKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uYmluZEtleS5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGludm9rZSB0aGUgbWV0aG9kIG9uLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJvdW5kIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge1xuICAgICAqICAgJ3VzZXInOiAnZnJlZCcsXG4gICAgICogICAnZ3JlZXQnOiBmdW5jdGlvbihncmVldGluZywgcHVuY3R1YXRpb24pIHtcbiAgICAgKiAgICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogICB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZEtleShvYmplY3QsICdncmVldCcsICdoaScpO1xuICAgICAqIGJvdW5kKCchJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQhJ1xuICAgICAqXG4gICAgICogb2JqZWN0LmdyZWV0ID0gZnVuY3Rpb24oZ3JlZXRpbmcsIHB1bmN0dWF0aW9uKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAneWEgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaXlhIGZyZWQhJ1xuICAgICAqXG4gICAgICogLy8gQm91bmQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kS2V5KG9iamVjdCwgJ2dyZWV0JywgXywgJyEnKTtcbiAgICAgKiBib3VuZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGl5YSBmcmVkISdcbiAgICAgKi9cbiAgICB2YXIgYmluZEtleSA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwga2V5LCBwYXJ0aWFscykge1xuICAgICAgdmFyIGJpdG1hc2sgPSBXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRztcbiAgICAgIGlmIChwYXJ0aWFscy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKGJpbmRLZXkpKTtcbiAgICAgICAgYml0bWFzayB8PSBXUkFQX1BBUlRJQUxfRkxBRztcbiAgICAgIH1cbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGtleSwgYml0bWFzaywgb2JqZWN0LCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIGFyZ3VtZW50cyBvZiBgZnVuY2AgYW5kIGVpdGhlciBpbnZva2VzXG4gICAgICogYGZ1bmNgIHJldHVybmluZyBpdHMgcmVzdWx0LCBpZiBhdCBsZWFzdCBgYXJpdHlgIG51bWJlciBvZiBhcmd1bWVudHMgaGF2ZVxuICAgICAqIGJlZW4gcHJvdmlkZWQsIG9yIHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdGhlIHJlbWFpbmluZyBgZnVuY2BcbiAgICAgKiBhcmd1bWVudHMsIGFuZCBzbyBvbi4gVGhlIGFyaXR5IG9mIGBmdW5jYCBtYXkgYmUgc3BlY2lmaWVkIGlmIGBmdW5jLmxlbmd0aGBcbiAgICAgKiBpcyBub3Qgc3VmZmljaWVudC5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5jdXJyeS5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljIGJ1aWxkcyxcbiAgICAgKiBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgY3VycmllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5PWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFiYyA9IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBbYSwgYiwgY107XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBjdXJyaWVkID0gXy5jdXJyeShhYmMpO1xuICAgICAqXG4gICAgICogY3VycmllZCgxKSgyKSgzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMikoMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIsIDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogLy8gQ3VycmllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiBjdXJyaWVkKDEpKF8sIDMpKDIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1cnJ5KGZ1bmMsIGFyaXR5LCBndWFyZCkge1xuICAgICAgYXJpdHkgPSBndWFyZCA/IHVuZGVmaW5lZCA6IGFyaXR5O1xuICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9DVVJSWV9GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYXJpdHkpO1xuICAgICAgcmVzdWx0LnBsYWNlaG9sZGVyID0gY3VycnkucGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY3VycnlgIGV4Y2VwdCB0aGF0IGFyZ3VtZW50cyBhcmUgYXBwbGllZCB0byBgZnVuY2BcbiAgICAgKiBpbiB0aGUgbWFubmVyIG9mIGBfLnBhcnRpYWxSaWdodGAgaW5zdGVhZCBvZiBgXy5wYXJ0aWFsYC5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5jdXJyeVJpZ2h0LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBjdXJyaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGN1cnJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHk9ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYWJjID0gZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGN1cnJpZWQgPSBfLmN1cnJ5UmlnaHQoYWJjKTtcbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMykoMikoMSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDIsIDMpKDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyLCAzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIC8vIEN1cnJpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogY3VycmllZCgzKSgxLCBfKSgyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXJyeVJpZ2h0KGZ1bmMsIGFyaXR5LCBndWFyZCkge1xuICAgICAgYXJpdHkgPSBndWFyZCA/IHVuZGVmaW5lZCA6IGFyaXR5O1xuICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9DVVJSWV9SSUdIVF9GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYXJpdHkpO1xuICAgICAgcmVzdWx0LnBsYWNlaG9sZGVyID0gY3VycnlSaWdodC5wbGFjZWhvbGRlcjtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGRlYm91bmNlZCBmdW5jdGlvbiB0aGF0IGRlbGF5cyBpbnZva2luZyBgZnVuY2AgdW50aWwgYWZ0ZXIgYHdhaXRgXG4gICAgICogbWlsbGlzZWNvbmRzIGhhdmUgZWxhcHNlZCBzaW5jZSB0aGUgbGFzdCB0aW1lIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gd2FzXG4gICAgICogaW52b2tlZC4gVGhlIGRlYm91bmNlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGAgbWV0aG9kIHRvIGNhbmNlbFxuICAgICAqIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLlxuICAgICAqIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZVxuICAgICAqIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YCB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50XG4gICAgICogY2FsbHMgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2BcbiAgICAgKiBpbnZvY2F0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICAgICAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uXG4gICAgICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICAgICAqXG4gICAgICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gICAgICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICAgICAqXG4gICAgICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gICAgICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy5kZWJvdW5jZWAgYW5kIGBfLnRocm90dGxlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlYm91bmNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9ZmFsc2VdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4V2FpdF1cbiAgICAgKiAgVGhlIG1heGltdW0gdGltZSBgZnVuY2AgaXMgYWxsb3dlZCB0byBiZSBkZWxheWVkIGJlZm9yZSBpdCdzIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGRlYm91bmNlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gQXZvaWQgY29zdGx5IGNhbGN1bGF0aW9ucyB3aGlsZSB0aGUgd2luZG93IHNpemUgaXMgaW4gZmx1eC5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncmVzaXplJywgXy5kZWJvdW5jZShjYWxjdWxhdGVMYXlvdXQsIDE1MCkpO1xuICAgICAqXG4gICAgICogLy8gSW52b2tlIGBzZW5kTWFpbGAgd2hlbiBjbGlja2VkLCBkZWJvdW5jaW5nIHN1YnNlcXVlbnQgY2FsbHMuXG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uZGVib3VuY2Uoc2VuZE1haWwsIDMwMCwge1xuICAgICAqICAgJ2xlYWRpbmcnOiB0cnVlLFxuICAgICAqICAgJ3RyYWlsaW5nJzogZmFsc2VcbiAgICAgKiB9KSk7XG4gICAgICpcbiAgICAgKiAvLyBFbnN1cmUgYGJhdGNoTG9nYCBpcyBpbnZva2VkIG9uY2UgYWZ0ZXIgMSBzZWNvbmQgb2YgZGVib3VuY2VkIGNhbGxzLlxuICAgICAqIHZhciBkZWJvdW5jZWQgPSBfLmRlYm91bmNlKGJhdGNoTG9nLCAyNTAsIHsgJ21heFdhaXQnOiAxMDAwIH0pO1xuICAgICAqIHZhciBzb3VyY2UgPSBuZXcgRXZlbnRTb3VyY2UoJy9zdHJlYW0nKTtcbiAgICAgKiBqUXVlcnkoc291cmNlKS5vbignbWVzc2FnZScsIGRlYm91bmNlZCk7XG4gICAgICpcbiAgICAgKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIGRlYm91bmNlZCBpbnZvY2F0aW9uLlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIGRlYm91bmNlZC5jYW5jZWwpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsYXN0QXJncyxcbiAgICAgICAgICBsYXN0VGhpcyxcbiAgICAgICAgICBtYXhXYWl0LFxuICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICB0aW1lcklkLFxuICAgICAgICAgIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICBsYXN0SW52b2tlVGltZSA9IDAsXG4gICAgICAgICAgbGVhZGluZyA9IGZhbHNlLFxuICAgICAgICAgIG1heGluZyA9IGZhbHNlLFxuICAgICAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgd2FpdCA9IHRvTnVtYmVyKHdhaXQpIHx8IDA7XG4gICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgbGVhZGluZyA9ICEhb3B0aW9ucy5sZWFkaW5nO1xuICAgICAgICBtYXhpbmcgPSAnbWF4V2FpdCcgaW4gb3B0aW9ucztcbiAgICAgICAgbWF4V2FpdCA9IG1heGluZyA/IG5hdGl2ZU1heCh0b051bWJlcihvcHRpb25zLm1heFdhaXQpIHx8IDAsIHdhaXQpIDogbWF4V2FpdDtcbiAgICAgICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gaW52b2tlRnVuYyh0aW1lKSB7XG4gICAgICAgIHZhciBhcmdzID0gbGFzdEFyZ3MsXG4gICAgICAgICAgICB0aGlzQXJnID0gbGFzdFRoaXM7XG5cbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBsZWFkaW5nRWRnZSh0aW1lKSB7XG4gICAgICAgIC8vIFJlc2V0IGFueSBgbWF4V2FpdGAgdGltZXIuXG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAgICAgLy8gU3RhcnQgdGhlIHRpbWVyIGZvciB0aGUgdHJhaWxpbmcgZWRnZS5cbiAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgLy8gSW52b2tlIHRoZSBsZWFkaW5nIGVkZ2UuXG4gICAgICAgIHJldHVybiBsZWFkaW5nID8gaW52b2tlRnVuYyh0aW1lKSA6IHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmVtYWluaW5nV2FpdCh0aW1lKSB7XG4gICAgICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lLFxuICAgICAgICAgICAgdGltZVdhaXRpbmcgPSB3YWl0IC0gdGltZVNpbmNlTGFzdENhbGw7XG5cbiAgICAgICAgcmV0dXJuIG1heGluZ1xuICAgICAgICAgID8gbmF0aXZlTWluKHRpbWVXYWl0aW5nLCBtYXhXYWl0IC0gdGltZVNpbmNlTGFzdEludm9rZSlcbiAgICAgICAgICA6IHRpbWVXYWl0aW5nO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBzaG91bGRJbnZva2UodGltZSkge1xuICAgICAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZTtcblxuICAgICAgICAvLyBFaXRoZXIgdGhpcyBpcyB0aGUgZmlyc3QgY2FsbCwgYWN0aXZpdHkgaGFzIHN0b3BwZWQgYW5kIHdlJ3JlIGF0IHRoZVxuICAgICAgICAvLyB0cmFpbGluZyBlZGdlLCB0aGUgc3lzdGVtIHRpbWUgaGFzIGdvbmUgYmFja3dhcmRzIGFuZCB3ZSdyZSB0cmVhdGluZ1xuICAgICAgICAvLyBpdCBhcyB0aGUgdHJhaWxpbmcgZWRnZSwgb3Igd2UndmUgaGl0IHRoZSBgbWF4V2FpdGAgbGltaXQuXG4gICAgICAgIHJldHVybiAobGFzdENhbGxUaW1lID09PSB1bmRlZmluZWQgfHwgKHRpbWVTaW5jZUxhc3RDYWxsID49IHdhaXQpIHx8XG4gICAgICAgICAgKHRpbWVTaW5jZUxhc3RDYWxsIDwgMCkgfHwgKG1heGluZyAmJiB0aW1lU2luY2VMYXN0SW52b2tlID49IG1heFdhaXQpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdGltZXJFeHBpcmVkKCkge1xuICAgICAgICB2YXIgdGltZSA9IG5vdygpO1xuICAgICAgICBpZiAoc2hvdWxkSW52b2tlKHRpbWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHRyYWlsaW5nRWRnZSh0aW1lKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZXN0YXJ0IHRoZSB0aW1lci5cbiAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCByZW1haW5pbmdXYWl0KHRpbWUpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdHJhaWxpbmdFZGdlKHRpbWUpIHtcbiAgICAgICAgdGltZXJJZCA9IHVuZGVmaW5lZDtcblxuICAgICAgICAvLyBPbmx5IGludm9rZSBpZiB3ZSBoYXZlIGBsYXN0QXJnc2Agd2hpY2ggbWVhbnMgYGZ1bmNgIGhhcyBiZWVuXG4gICAgICAgIC8vIGRlYm91bmNlZCBhdCBsZWFzdCBvbmNlLlxuICAgICAgICBpZiAodHJhaWxpbmcgJiYgbGFzdEFyZ3MpIHtcbiAgICAgICAgICByZXR1cm4gaW52b2tlRnVuYyh0aW1lKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgICAgIGlmICh0aW1lcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdEludm9rZVRpbWUgPSAwO1xuICAgICAgICBsYXN0QXJncyA9IGxhc3RDYWxsVGltZSA9IGxhc3RUaGlzID0gdGltZXJJZCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgICAgIHJldHVybiB0aW1lcklkID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiB0cmFpbGluZ0VkZ2Uobm93KCkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7XG4gICAgICAgIHZhciB0aW1lID0gbm93KCksXG4gICAgICAgICAgICBpc0ludm9raW5nID0gc2hvdWxkSW52b2tlKHRpbWUpO1xuXG4gICAgICAgIGxhc3RBcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBsYXN0VGhpcyA9IHRoaXM7XG4gICAgICAgIGxhc3RDYWxsVGltZSA9IHRpbWU7XG5cbiAgICAgICAgaWYgKGlzSW52b2tpbmcpIHtcbiAgICAgICAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbGVhZGluZ0VkZ2UobGFzdENhbGxUaW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG1heGluZykge1xuICAgICAgICAgICAgLy8gSGFuZGxlIGludm9jYXRpb25zIGluIGEgdGlnaHQgbG9vcC5cbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICAgICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgICAgICByZXR1cm4gaW52b2tlRnVuYyhsYXN0Q2FsbFRpbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgZGVib3VuY2VkLmNhbmNlbCA9IGNhbmNlbDtcbiAgICAgIGRlYm91bmNlZC5mbHVzaCA9IGZsdXNoO1xuICAgICAgcmV0dXJuIGRlYm91bmNlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWZlcnMgaW52b2tpbmcgdGhlIGBmdW5jYCB1bnRpbCB0aGUgY3VycmVudCBjYWxsIHN0YWNrIGhhcyBjbGVhcmVkLiBBbnlcbiAgICAgKiBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgdG8gYGZ1bmNgIHdoZW4gaXQncyBpbnZva2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVmZXIuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXIgaWQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmZXIoZnVuY3Rpb24odGV4dCkge1xuICAgICAqICAgY29uc29sZS5sb2codGV4dCk7XG4gICAgICogfSwgJ2RlZmVycmVkJyk7XG4gICAgICogLy8gPT4gTG9ncyAnZGVmZXJyZWQnIGFmdGVyIG9uZSBtaWxsaXNlY29uZC5cbiAgICAgKi9cbiAgICB2YXIgZGVmZXIgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBhcmdzKSB7XG4gICAgICByZXR1cm4gYmFzZURlbGF5KGZ1bmMsIDEsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyBgZnVuY2AgYWZ0ZXIgYHdhaXRgIG1pbGxpc2Vjb25kcy4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZVxuICAgICAqIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXIgaWQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVsYXkoZnVuY3Rpb24odGV4dCkge1xuICAgICAqICAgY29uc29sZS5sb2codGV4dCk7XG4gICAgICogfSwgMTAwMCwgJ2xhdGVyJyk7XG4gICAgICogLy8gPT4gTG9ncyAnbGF0ZXInIGFmdGVyIG9uZSBzZWNvbmQuXG4gICAgICovXG4gICAgdmFyIGRlbGF5ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgd2FpdCwgYXJncykge1xuICAgICAgcmV0dXJuIGJhc2VEZWxheShmdW5jLCB0b051bWJlcih3YWl0KSB8fCAwLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggYXJndW1lbnRzIHJldmVyc2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZmxpcCBhcmd1bWVudHMgZm9yLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZsaXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmbGlwcGVkID0gXy5mbGlwKGZ1bmN0aW9uKCkge1xuICAgICAqICAgcmV0dXJuIF8udG9BcnJheShhcmd1bWVudHMpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogZmxpcHBlZCgnYScsICdiJywgJ2MnLCAnZCcpO1xuICAgICAqIC8vID0+IFsnZCcsICdjJywgJ2InLCAnYSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxpcChmdW5jKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0ZMSVBfRkxBRyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAgICAgKiBwcm92aWRlZCwgaXQgZGV0ZXJtaW5lcyB0aGUgY2FjaGUga2V5IGZvciBzdG9yaW5nIHRoZSByZXN1bHQgYmFzZWQgb24gdGhlXG4gICAgICogYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbi4gQnkgZGVmYXVsdCwgdGhlIGZpcnN0IGFyZ3VtZW50XG4gICAgICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAgICAgKiBmdW5jdGlvbi4gSXRzIGNyZWF0aW9uIG1heSBiZSBjdXN0b21pemVkIGJ5IHJlcGxhY2luZyB0aGUgYF8ubWVtb2l6ZS5DYWNoZWBcbiAgICAgKiBjb25zdHJ1Y3RvciB3aXRoIG9uZSB3aG9zZSBpbnN0YW5jZXMgaW1wbGVtZW50IHRoZVxuICAgICAqIFtgTWFwYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtbWFwLXByb3RvdHlwZS1vYmplY3QpXG4gICAgICogbWV0aG9kIGludGVyZmFjZSBvZiBgY2xlYXJgLCBgZGVsZXRlYCwgYGdldGAsIGBoYXNgLCBhbmQgYHNldGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jlc29sdmVyXSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSB0aGUgY2FjaGUga2V5LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2MnOiAzLCAnZCc6IDQgfTtcbiAgICAgKlxuICAgICAqIHZhciB2YWx1ZXMgPSBfLm1lbW9pemUoXy52YWx1ZXMpO1xuICAgICAqIHZhbHVlcyhvYmplY3QpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogdmFsdWVzKG90aGVyKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKlxuICAgICAqIG9iamVjdC5hID0gMjtcbiAgICAgKiB2YWx1ZXMob2JqZWN0KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIC8vIE1vZGlmeSB0aGUgcmVzdWx0IGNhY2hlLlxuICAgICAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAgICAgKiB2YWx1ZXMob2JqZWN0KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddXG4gICAgICpcbiAgICAgKiAvLyBSZXBsYWNlIGBfLm1lbW9pemUuQ2FjaGVgLlxuICAgICAqIF8ubWVtb2l6ZS5DYWNoZSA9IFdlYWtNYXA7XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVtb2l6ZShmdW5jLCByZXNvbHZlcikge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicgfHwgKHJlc29sdmVyICE9IG51bGwgJiYgdHlwZW9mIHJlc29sdmVyICE9ICdmdW5jdGlvbicpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHZhciBtZW1vaXplZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGtleSA9IHJlc29sdmVyID8gcmVzb2x2ZXIuYXBwbHkodGhpcywgYXJncykgOiBhcmdzWzBdLFxuICAgICAgICAgICAgY2FjaGUgPSBtZW1vaXplZC5jYWNoZTtcblxuICAgICAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gY2FjaGUuZ2V0KGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIG1lbW9pemVkLmNhY2hlID0gY2FjaGUuc2V0KGtleSwgcmVzdWx0KSB8fCBjYWNoZTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgICBtZW1vaXplZC5jYWNoZSA9IG5ldyAobWVtb2l6ZS5DYWNoZSB8fCBNYXBDYWNoZSk7XG4gICAgICByZXR1cm4gbWVtb2l6ZWQ7XG4gICAgfVxuXG4gICAgLy8gRXhwb3NlIGBNYXBDYWNoZWAuXG4gICAgbWVtb2l6ZS5DYWNoZSA9IE1hcENhY2hlO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbmVnYXRlcyB0aGUgcmVzdWx0IG9mIHRoZSBwcmVkaWNhdGUgYGZ1bmNgLiBUaGVcbiAgICAgKiBgZnVuY2AgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGVcbiAgICAgKiBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBwcmVkaWNhdGUgdG8gbmVnYXRlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG5lZ2F0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGlzRXZlbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihbMSwgMiwgMywgNCwgNSwgNl0sIF8ubmVnYXRlKGlzRXZlbikpO1xuICAgICAqIC8vID0+IFsxLCAzLCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5lZ2F0ZShwcmVkaWNhdGUpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJlZGljYXRlICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICAgIGNhc2UgMDogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzKTtcbiAgICAgICAgICBjYXNlIDE6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSk7XG4gICAgICAgICAgY2FzZSAyOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gIXByZWRpY2F0ZS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaXMgcmVzdHJpY3RlZCB0byBpbnZva2luZyBgZnVuY2Agb25jZS4gUmVwZWF0IGNhbGxzXG4gICAgICogdG8gdGhlIGZ1bmN0aW9uIHJldHVybiB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGludm9jYXRpb24uIFRoZSBgZnVuY2AgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgaW5pdGlhbGl6ZSA9IF8ub25jZShjcmVhdGVBcHBsaWNhdGlvbik7XG4gICAgICogaW5pdGlhbGl6ZSgpO1xuICAgICAqIGluaXRpYWxpemUoKTtcbiAgICAgKiAvLyA9PiBgY3JlYXRlQXBwbGljYXRpb25gIGlzIGludm9rZWQgb25jZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uY2UoZnVuYykge1xuICAgICAgcmV0dXJuIGJlZm9yZSgyLCBmdW5jKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudHMgdHJhbnNmb3JtZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbdHJhbnNmb3Jtcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm1zLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkb3VibGVkKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyQXJncyhmdW5jdGlvbih4LCB5KSB7XG4gICAgICogICByZXR1cm4gW3gsIHldO1xuICAgICAqIH0sIFtzcXVhcmUsIGRvdWJsZWRdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoOSwgMyk7XG4gICAgICogLy8gPT4gWzgxLCA2XVxuICAgICAqXG4gICAgICogZnVuYygxMCwgNSk7XG4gICAgICogLy8gPT4gWzEwMCwgMTBdXG4gICAgICovXG4gICAgdmFyIG92ZXJBcmdzID0gY2FzdFJlc3QoZnVuY3Rpb24oZnVuYywgdHJhbnNmb3Jtcykge1xuICAgICAgdHJhbnNmb3JtcyA9ICh0cmFuc2Zvcm1zLmxlbmd0aCA9PSAxICYmIGlzQXJyYXkodHJhbnNmb3Jtc1swXSkpXG4gICAgICAgID8gYXJyYXlNYXAodHJhbnNmb3Jtc1swXSwgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKVxuICAgICAgICA6IGFycmF5TWFwKGJhc2VGbGF0dGVuKHRyYW5zZm9ybXMsIDEpLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpO1xuXG4gICAgICB2YXIgZnVuY3NMZW5ndGggPSB0cmFuc2Zvcm1zLmxlbmd0aDtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWluKGFyZ3MubGVuZ3RoLCBmdW5jc0xlbmd0aCk7XG5cbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBhcmdzW2luZGV4XSA9IHRyYW5zZm9ybXNbaW5kZXhdLmNhbGwodGhpcywgYXJnc1tpbmRleF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGVcbiAgICAgKiBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYmluZGAgZXhjZXB0IGl0IGRvZXMgKipub3QqKlxuICAgICAqIGFsdGVyIHRoZSBgdGhpc2AgYmluZGluZy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5wYXJ0aWFsLnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBwYXJ0aWFsbHlcbiAgICAgKiBhcHBsaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjIuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHBhcnRpYWxseSBhcHBseSBhcmd1bWVudHMgdG8uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFydGlhbGx5IGFwcGxpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBuYW1lKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyBuYW1lO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBzYXlIZWxsb1RvID0gXy5wYXJ0aWFsKGdyZWV0LCAnaGVsbG8nKTtcbiAgICAgKiBzYXlIZWxsb1RvKCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBQYXJ0aWFsbHkgYXBwbGllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgZ3JlZXRGcmVkID0gXy5wYXJ0aWFsKGdyZWV0LCBfLCAnZnJlZCcpO1xuICAgICAqIGdyZWV0RnJlZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCdcbiAgICAgKi9cbiAgICB2YXIgcGFydGlhbCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIocGFydGlhbCkpO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9QQVJUSUFMX0ZMQUcsIHVuZGVmaW5lZCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wYXJ0aWFsYCBleGNlcHQgdGhhdCBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHNcbiAgICAgKiBhcmUgYXBwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5wYXJ0aWFsUmlnaHQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIHBhcnRpYWxseVxuICAgICAqIGFwcGxpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcGFydGlhbGx5IGFwcGx5IGFyZ3VtZW50cyB0by5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXJ0aWFsbHkgYXBwbGllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZ3JlZXQoZ3JlZXRpbmcsIG5hbWUpIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIG5hbWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGdyZWV0RnJlZCA9IF8ucGFydGlhbFJpZ2h0KGdyZWV0LCAnZnJlZCcpO1xuICAgICAqIGdyZWV0RnJlZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFBhcnRpYWxseSBhcHBsaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBzYXlIZWxsb1RvID0gXy5wYXJ0aWFsUmlnaHQoZ3JlZXQsICdoZWxsbycsIF8pO1xuICAgICAqIHNheUhlbGxvVG8oJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCdcbiAgICAgKi9cbiAgICB2YXIgcGFydGlhbFJpZ2h0ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihwYXJ0aWFsUmlnaHQpKTtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHLCB1bmRlZmluZWQsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggYXJndW1lbnRzIGFycmFuZ2VkIGFjY29yZGluZ1xuICAgICAqIHRvIHRoZSBzcGVjaWZpZWQgYGluZGV4ZXNgIHdoZXJlIHRoZSBhcmd1bWVudCB2YWx1ZSBhdCB0aGUgZmlyc3QgaW5kZXggaXNcbiAgICAgKiBwcm92aWRlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQsIHRoZSBhcmd1bWVudCB2YWx1ZSBhdCB0aGUgc2Vjb25kIGluZGV4IGlzXG4gICAgICogcHJvdmlkZWQgYXMgdGhlIHNlY29uZCBhcmd1bWVudCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVhcnJhbmdlIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHBhcmFtIHsuLi4obnVtYmVyfG51bWJlcltdKX0gaW5kZXhlcyBUaGUgYXJyYW5nZWQgYXJndW1lbnQgaW5kZXhlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHJlYXJnZWQgPSBfLnJlYXJnKGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBbYSwgYiwgY107XG4gICAgICogfSwgWzIsIDAsIDFdKTtcbiAgICAgKlxuICAgICAqIHJlYXJnZWQoJ2InLCAnYycsICdhJylcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKi9cbiAgICB2YXIgcmVhcmcgPSBmbGF0UmVzdChmdW5jdGlvbihmdW5jLCBpbmRleGVzKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1JFQVJHX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGluZGV4ZXMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbiBhbmQgYXJndW1lbnRzIGZyb20gYHN0YXJ0YCBhbmQgYmV5b25kIHByb3ZpZGVkIGFzXG4gICAgICogYW4gYXJyYXkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb24gdGhlXG4gICAgICogW3Jlc3QgcGFyYW1ldGVyXShodHRwczovL21kbi5pby9yZXN0X3BhcmFtZXRlcnMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzYXkgPSBfLnJlc3QoZnVuY3Rpb24od2hhdCwgbmFtZXMpIHtcbiAgICAgKiAgIHJldHVybiB3aGF0ICsgJyAnICsgXy5pbml0aWFsKG5hbWVzKS5qb2luKCcsICcpICtcbiAgICAgKiAgICAgKF8uc2l6ZShuYW1lcykgPiAxID8gJywgJiAnIDogJycpICsgXy5sYXN0KG5hbWVzKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHNheSgnaGVsbG8nLCAnZnJlZCcsICdiYXJuZXknLCAncGViYmxlcycpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkLCBiYXJuZXksICYgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXN0KGZ1bmMsIHN0YXJ0KSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBzdGFydCA9IHN0YXJ0ID09PSB1bmRlZmluZWQgPyBzdGFydCA6IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuYywgc3RhcnQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZVxuICAgICAqIGNyZWF0ZSBmdW5jdGlvbiBhbmQgYW4gYXJyYXkgb2YgYXJndW1lbnRzIG11Y2ggbGlrZVxuICAgICAqIFtgRnVuY3Rpb24jYXBwbHlgXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvbiB0aGVcbiAgICAgKiBbc3ByZWFkIG9wZXJhdG9yXShodHRwczovL21kbi5pby9zcHJlYWRfb3BlcmF0b3IpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gc3ByZWFkIGFyZ3VtZW50cyBvdmVyLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSBzcHJlYWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzYXkgPSBfLnNwcmVhZChmdW5jdGlvbih3aG8sIHdoYXQpIHtcbiAgICAgKiAgIHJldHVybiB3aG8gKyAnIHNheXMgJyArIHdoYXQ7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBzYXkoWydmcmVkJywgJ2hlbGxvJ10pO1xuICAgICAqIC8vID0+ICdmcmVkIHNheXMgaGVsbG8nXG4gICAgICpcbiAgICAgKiB2YXIgbnVtYmVycyA9IFByb21pc2UuYWxsKFtcbiAgICAgKiAgIFByb21pc2UucmVzb2x2ZSg0MCksXG4gICAgICogICBQcm9taXNlLnJlc29sdmUoMzYpXG4gICAgICogXSk7XG4gICAgICpcbiAgICAgKiBudW1iZXJzLnRoZW4oXy5zcHJlYWQoZnVuY3Rpb24oeCwgeSkge1xuICAgICAqICAgcmV0dXJuIHggKyB5O1xuICAgICAqIH0pKTtcbiAgICAgKiAvLyA9PiBhIFByb21pc2Ugb2YgNzZcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzcHJlYWQoZnVuYywgc3RhcnQpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gc3RhcnQgPT0gbnVsbCA/IDAgOiBuYXRpdmVNYXgodG9JbnRlZ2VyKHN0YXJ0KSwgMCk7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcmdzW3N0YXJ0XSxcbiAgICAgICAgICAgIG90aGVyQXJncyA9IGNhc3RTbGljZShhcmdzLCAwLCBzdGFydCk7XG5cbiAgICAgICAgaWYgKGFycmF5KSB7XG4gICAgICAgICAgYXJyYXlQdXNoKG90aGVyQXJncywgYXJyYXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHRocm90dGxlZCBmdW5jdGlvbiB0aGF0IG9ubHkgaW52b2tlcyBgZnVuY2AgYXQgbW9zdCBvbmNlIHBlclxuICAgICAqIGV2ZXJ5IGB3YWl0YCBtaWxsaXNlY29uZHMuIFRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgXG4gICAgICogbWV0aG9kIHRvIGNhbmNlbCBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0b1xuICAgICAqIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYFxuICAgICAqIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZSBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGBcbiAgICAgKiB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWQgd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlXG4gICAgICogdGhyb3R0bGVkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50IGNhbGxzIHRvIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gcmV0dXJuIHRoZVxuICAgICAqIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgaW52b2NhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAgICAgKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIHRocm90dGxlZCBmdW5jdGlvblxuICAgICAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAgICAgKlxuICAgICAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICAgICAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAgICAgKlxuICAgICAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICAgICAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8udGhyb3R0bGVgIGFuZCBgXy5kZWJvdW5jZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB0aHJvdHRsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhyb3R0bGUgaW52b2NhdGlvbnMgdG8uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPXRydWVdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgdGhyb3R0bGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBBdm9pZCBleGNlc3NpdmVseSB1cGRhdGluZyB0aGUgcG9zaXRpb24gd2hpbGUgc2Nyb2xsaW5nLlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdzY3JvbGwnLCBfLnRocm90dGxlKHVwZGF0ZVBvc2l0aW9uLCAxMDApKTtcbiAgICAgKlxuICAgICAqIC8vIEludm9rZSBgcmVuZXdUb2tlbmAgd2hlbiB0aGUgY2xpY2sgZXZlbnQgaXMgZmlyZWQsIGJ1dCBub3QgbW9yZSB0aGFuIG9uY2UgZXZlcnkgNSBtaW51dGVzLlxuICAgICAqIHZhciB0aHJvdHRsZWQgPSBfLnRocm90dGxlKHJlbmV3VG9rZW4sIDMwMDAwMCwgeyAndHJhaWxpbmcnOiBmYWxzZSB9KTtcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdGhyb3R0bGVkKTtcbiAgICAgKlxuICAgICAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgdGhyb3R0bGVkIGludm9jYXRpb24uXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgdGhyb3R0bGVkLmNhbmNlbCk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gdGhyb3R0bGUoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICAgICAgdmFyIGxlYWRpbmcgPSB0cnVlLFxuICAgICAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIGxlYWRpbmcgPSAnbGVhZGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy5sZWFkaW5nIDogbGVhZGluZztcbiAgICAgICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWJvdW5jZShmdW5jLCB3YWl0LCB7XG4gICAgICAgICdsZWFkaW5nJzogbGVhZGluZyxcbiAgICAgICAgJ21heFdhaXQnOiB3YWl0LFxuICAgICAgICAndHJhaWxpbmcnOiB0cmFpbGluZ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB1cCB0byBvbmUgYXJndW1lbnQsIGlnbm9yaW5nIGFueVxuICAgICAqIGFkZGl0aW9uYWwgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcChbJzYnLCAnOCcsICcxMCddLCBfLnVuYXJ5KHBhcnNlSW50KSk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuYXJ5KGZ1bmMpIHtcbiAgICAgIHJldHVybiBhcnkoZnVuYywgMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcHJvdmlkZXMgYHZhbHVlYCB0byBgd3JhcHBlcmAgYXMgaXRzIGZpcnN0XG4gICAgICogYXJndW1lbnQuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgZnVuY3Rpb24gYXJlIGFwcGVuZGVkXG4gICAgICogdG8gdGhvc2UgcHJvdmlkZWQgdG8gdGhlIGB3cmFwcGVyYC4gVGhlIHdyYXBwZXIgaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbd3JhcHBlcj1pZGVudGl0eV0gVGhlIHdyYXBwZXIgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBwID0gXy53cmFwKF8uZXNjYXBlLCBmdW5jdGlvbihmdW5jLCB0ZXh0KSB7XG4gICAgICogICByZXR1cm4gJzxwPicgKyBmdW5jKHRleHQpICsgJzwvcD4nO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogcCgnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnPHA+ZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzPC9wPidcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwKHZhbHVlLCB3cmFwcGVyKSB7XG4gICAgICByZXR1cm4gcGFydGlhbChjYXN0RnVuY3Rpb24od3JhcHBlciksIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIGFzIGFuIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjQuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KDEpO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoeyAnYSc6IDEgfSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxIH1dXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSgnYWJjJyk7XG4gICAgICogLy8gPT4gWydhYmMnXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkobnVsbCk7XG4gICAgICogLy8gPT4gW251bGxdXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSh1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IFt1bmRlZmluZWRdXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSgpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICogY29uc29sZS5sb2coXy5jYXN0QXJyYXkoYXJyYXkpID09PSBhcnJheSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RBcnJheSgpIHtcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWUgPSBhcmd1bWVudHNbMF07XG4gICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNoYWxsb3cgY2xvbmUgb2YgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uIHRoZVxuICAgICAqIFtzdHJ1Y3R1cmVkIGNsb25lIGFsZ29yaXRobV0oaHR0cHM6Ly9tZG4uaW8vU3RydWN0dXJlZF9jbG9uZV9hbGdvcml0aG0pXG4gICAgICogYW5kIHN1cHBvcnRzIGNsb25pbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucywgZGF0ZSBvYmplY3RzLCBtYXBzLFxuICAgICAqIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZFxuICAgICAqIGFycmF5cy4gVGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgYGFyZ3VtZW50c2Agb2JqZWN0cyBhcmUgY2xvbmVkXG4gICAgICogYXMgcGxhaW4gb2JqZWN0cy4gQW4gZW1wdHkgb2JqZWN0IGlzIHJldHVybmVkIGZvciB1bmNsb25lYWJsZSB2YWx1ZXMgc3VjaFxuICAgICAqIGFzIGVycm9yIG9iamVjdHMsIGZ1bmN0aW9ucywgRE9NIG5vZGVzLCBhbmQgV2Vha01hcHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lRGVlcFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICdhJzogMSB9LCB7ICdiJzogMiB9XTtcbiAgICAgKlxuICAgICAqIHZhciBzaGFsbG93ID0gXy5jbG9uZShvYmplY3RzKTtcbiAgICAgKiBjb25zb2xlLmxvZyhzaGFsbG93WzBdID09PSBvYmplY3RzWzBdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmUodmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX1NZTUJPTFNfRkxBRyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGNsb25lZCB2YWx1ZS4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsXG4gICAgICogY2xvbmluZyBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGhcbiAgICAgKiB1cCB0byBmb3VyIGFyZ3VtZW50czsgKHZhbHVlIFssIGluZGV4fGtleSwgb2JqZWN0LCBzdGFja10pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lRGVlcFdpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcih2YWx1ZSkge1xuICAgICAqICAgaWYgKF8uaXNFbGVtZW50KHZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdmFsdWUuY2xvbmVOb2RlKGZhbHNlKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZWwgPSBfLmNsb25lV2l0aChkb2N1bWVudC5ib2R5LCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGVsID09PSBkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqIGNvbnNvbGUubG9nKGVsLm5vZGVOYW1lKTtcbiAgICAgKiAvLyA9PiAnQk9EWSdcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5jaGlsZE5vZGVzLmxlbmd0aCk7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lV2l0aCh2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfU1lNQk9MU19GTEFHLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBjbG9uZXMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmVjdXJzaXZlbHkgY2xvbmUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGRlZXAgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICdhJzogMSB9LCB7ICdiJzogMiB9XTtcbiAgICAgKlxuICAgICAqIHZhciBkZWVwID0gXy5jbG9uZURlZXAob2JqZWN0cyk7XG4gICAgICogY29uc29sZS5sb2coZGVlcFswXSA9PT0gb2JqZWN0c1swXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURlZXAodmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZVdpdGhgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGNsb25lcyBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZWN1cnNpdmVseSBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVXaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIodmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzRWxlbWVudCh2YWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHZhbHVlLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZWwgPSBfLmNsb25lRGVlcFdpdGgoZG9jdW1lbnQuYm9keSwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhlbCA9PT0gZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5ub2RlTmFtZSk7XG4gICAgICogLy8gPT4gJ0JPRFknXG4gICAgICogY29uc29sZS5sb2coZWwuY2hpbGROb2Rlcy5sZW5ndGgpO1xuICAgICAqIC8vID0+IDIwXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEZWVwV2l0aCh2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYG9iamVjdGAgY29uZm9ybXMgdG8gYHNvdXJjZWAgYnkgaW52b2tpbmcgdGhlIHByZWRpY2F0ZVxuICAgICAqIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgd2l0aCB0aGUgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgZXF1aXZhbGVudCB0byBgXy5jb25mb3Jtc2Agd2hlbiBgc291cmNlYCBpc1xuICAgICAqIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTQuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgY29uZm9ybXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKlxuICAgICAqIF8uY29uZm9ybXNUbyhvYmplY3QsIHsgJ2InOiBmdW5jdGlvbihuKSB7IHJldHVybiBuID4gMTsgfSB9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmNvbmZvcm1zVG8ob2JqZWN0LCB7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDI7IH0gfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25mb3Jtc1RvKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gc291cmNlID09IG51bGwgfHwgYmFzZUNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UsIGtleXMoc291cmNlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYVxuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICAgICAqXG4gICAgICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5lcSgnYScsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5lcShOYU4sIE5hTik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCAodmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5sdFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmd0KDMsIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3QoMywgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZ3QoMSwgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgZ3QgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGJhc2VHdCk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0b1xuICAgICAqICBgb3RoZXJgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmx0ZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmd0ZSgzLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0ZSgzLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0ZSgxLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBndGUgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlID49IG90aGVyO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICAgICAhcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheSgnYWJjJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlCdWZmZXJgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXkgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUJ1ZmZlcihuZXcgQXJyYXlCdWZmZXIoMikpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUJ1ZmZlcihuZXcgQXJyYXkoMikpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQXJyYXlCdWZmZXIgPSBub2RlSXNBcnJheUJ1ZmZlciA/IGJhc2VVbmFyeShub2RlSXNBcnJheUJ1ZmZlcikgOiBiYXNlSXNBcnJheUJ1ZmZlcjtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAgICAgKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gICAgICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc0FycmF5TGlrZWAgZXhjZXB0IHRoYXQgaXQgYWxzbyBjaGVja3MgaWYgYHZhbHVlYFxuICAgICAqIGlzIGFuIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXktbGlrZSBvYmplY3QsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdCgnYWJjJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBpc0FycmF5TGlrZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGJvb2xlYW4gcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBib29sZWFuLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNCb29sZWFuKGZhbHNlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQm9vbGVhbihudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQm9vbGVhbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB0cnVlIHx8IHZhbHVlID09PSBmYWxzZSB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBib29sVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0J1ZmZlcihuZXcgQnVmZmVyKDIpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQnVmZmVyKG5ldyBVaW50OEFycmF5KDIpKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0J1ZmZlciA9IG5hdGl2ZUlzQnVmZmVyIHx8IHN0dWJGYWxzZTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRGF0ZWAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGRhdGUgb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNEYXRlKG5ldyBEYXRlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRGF0ZSgnTW9uIEFwcmlsIDIzIDIwMTInKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0RhdGUgPSBub2RlSXNEYXRlID8gYmFzZVVuYXJ5KG5vZGVJc0RhdGUpIDogYmFzZUlzRGF0ZTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIERPTSBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIERPTSBlbGVtZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFbGVtZW50KGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbGVtZW50KCc8Ym9keT4nKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRWxlbWVudCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgdmFsdWUubm9kZVR5cGUgPT09IDEgJiYgIWlzUGxhaW5PYmplY3QodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGVtcHR5IG9iamVjdCwgY29sbGVjdGlvbiwgbWFwLCBvciBzZXQuXG4gICAgICpcbiAgICAgKiBPYmplY3RzIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBubyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWRcbiAgICAgKiBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQXJyYXktbGlrZSB2YWx1ZXMgc3VjaCBhcyBgYXJndW1lbnRzYCBvYmplY3RzLCBhcnJheXMsIGJ1ZmZlcnMsIHN0cmluZ3MsIG9yXG4gICAgICogalF1ZXJ5LWxpa2UgY29sbGVjdGlvbnMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIGEgYGxlbmd0aGAgb2YgYDBgLlxuICAgICAqIFNpbWlsYXJseSwgbWFwcyBhbmQgc2V0cyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgYSBgc2l6ZWAgb2YgYDBgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBlbXB0eSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KHRydWUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSgxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KHsgJ2EnOiAxIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUxpa2UodmFsdWUpICYmXG4gICAgICAgICAgKGlzQXJyYXkodmFsdWUpIHx8IHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUuc3BsaWNlID09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgICAgIGlzQnVmZmVyKHZhbHVlKSB8fCBpc1R5cGVkQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSkpIHtcbiAgICAgICAgcmV0dXJuICF2YWx1ZS5sZW5ndGg7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKTtcbiAgICAgIGlmICh0YWcgPT0gbWFwVGFnIHx8IHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgICAgcmV0dXJuICF2YWx1ZS5zaXplO1xuICAgICAgfVxuICAgICAgaWYgKGlzUHJvdG90eXBlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gIWJhc2VLZXlzKHZhbHVlKS5sZW5ndGg7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmVcbiAgICAgKiBlcXVpdmFsZW50LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIHN1cHBvcnRzIGNvbXBhcmluZyBhcnJheXMsIGFycmF5IGJ1ZmZlcnMsIGJvb2xlYW5zLFxuICAgICAqIGRhdGUgb2JqZWN0cywgZXJyb3Igb2JqZWN0cywgbWFwcywgbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcyxcbiAgICAgKiBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWQgYXJyYXlzLiBgT2JqZWN0YCBvYmplY3RzIGFyZSBjb21wYXJlZFxuICAgICAqIGJ5IHRoZWlyIG93biwgbm90IGluaGVyaXRlZCwgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLiBGdW5jdGlvbnMgYW5kIERPTVxuICAgICAqIG5vZGVzIGFyZSBjb21wYXJlZCBieSBzdHJpY3QgZXF1YWxpdHksIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICAgICAqXG4gICAgICogXy5pc0VxdWFsKG9iamVjdCwgb3RoZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIG9iamVjdCA9PT0gb3RoZXI7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VxdWFsKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc0VxdWFsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLCBjb21wYXJpc29uc1xuICAgICAqIGFyZSBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGggdXAgdG9cbiAgICAgKiBzaXggYXJndW1lbnRzOiAob2JqVmFsdWUsIG90aFZhbHVlIFssIGluZGV4fGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2tdKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGlzR3JlZXRpbmcodmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiAvXmgoPzppfGVsbG8pJC8udGVzdCh2YWx1ZSk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUpIHtcbiAgICAgKiAgIGlmIChpc0dyZWV0aW5nKG9ialZhbHVlKSAmJiBpc0dyZWV0aW5nKG90aFZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2hlbGxvJywgJ2dvb2RieWUnXTtcbiAgICAgKiB2YXIgb3RoZXIgPSBbJ2hpJywgJ2dvb2RieWUnXTtcbiAgICAgKlxuICAgICAqIF8uaXNFcXVhbFdpdGgoYXJyYXksIG90aGVyLCBjdXN0b21pemVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcXVhbFdpdGgodmFsdWUsIG90aGVyLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICB2YXIgcmVzdWx0ID0gY3VzdG9taXplciA/IGN1c3RvbWl6ZXIodmFsdWUsIG90aGVyKSA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgdW5kZWZpbmVkLCBjdXN0b21pemVyKSA6ICEhcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGBFcnJvcmAsIGBFdmFsRXJyb3JgLCBgUmFuZ2VFcnJvcmAsIGBSZWZlcmVuY2VFcnJvcmAsXG4gICAgICogYFN5bnRheEVycm9yYCwgYFR5cGVFcnJvcmAsIG9yIGBVUklFcnJvcmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBlcnJvciBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Vycm9yKG5ldyBFcnJvcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Vycm9yKEVycm9yKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXJyb3IodmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gICAgICByZXR1cm4gdGFnID09IGVycm9yVGFnIHx8IHRhZyA9PSBkb21FeGNUYWcgfHxcbiAgICAgICAgKHR5cGVvZiB2YWx1ZS5tZXNzYWdlID09ICdzdHJpbmcnICYmIHR5cGVvZiB2YWx1ZS5uYW1lID09ICdzdHJpbmcnICYmICFpc1BsYWluT2JqZWN0KHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBmaW5pdGUgcHJpbWl0aXZlIG51bWJlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzRmluaXRlYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzRmluaXRlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmaW5pdGUgbnVtYmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZShOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZSgnMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGaW5pdGUodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgbmF0aXZlSXNGaW5pdGUodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRnVuY3Rpb24oXyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAgICAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gICAgICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gICAgICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc0ludGVnZXJgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNJbnRlZ2VyKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gaW50ZWdlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcigzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJbnRlZ2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIHZhbHVlID09IHRvSW50ZWdlcih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gICAgICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aCgzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aCgnMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICAgICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICAgICAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAgICAgKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KHt9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChfLm5vb3ApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICAgICAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2Uoe30pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYE1hcGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTWFwKG5ldyBNYXApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNNYXAobmV3IFdlYWtNYXApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzTWFwID0gbm9kZUlzTWFwID8gYmFzZVVuYXJ5KG5vZGVJc01hcCkgOiBiYXNlSXNNYXA7XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gYG9iamVjdGAgYW5kIGBzb3VyY2VgIHRvXG4gICAgICogZGV0ZXJtaW5lIGlmIGBvYmplY3RgIGNvbnRhaW5zIGVxdWl2YWxlbnQgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGVxdWl2YWxlbnQgdG8gYF8ubWF0Y2hlc2Agd2hlbiBgc291cmNlYCBpc1xuICAgICAqIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogUGFydGlhbCBjb21wYXJpc29ucyB3aWxsIG1hdGNoIGVtcHR5IGFycmF5IGFuZCBlbXB0eSBvYmplY3QgYHNvdXJjZWBcbiAgICAgKiB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZSBgXy5pc0VxdWFsYFxuICAgICAqIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICpcbiAgICAgKiBfLmlzTWF0Y2gob2JqZWN0LCB7ICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTWF0Y2gob2JqZWN0LCB7ICdiJzogMSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTWF0Y2gob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgZ2V0TWF0Y2hEYXRhKHNvdXJjZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNNYXRjaGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgY29tcGFyaXNvbnNcbiAgICAgKiBhcmUgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIGZpdmVcbiAgICAgKiBhcmd1bWVudHM6IChvYmpWYWx1ZSwgc3JjVmFsdWUsIGluZGV4fGtleSwgb2JqZWN0LCBzb3VyY2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGlzR3JlZXRpbmcodmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiAvXmgoPzppfGVsbG8pJC8udGVzdCh2YWx1ZSk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIGlmIChpc0dyZWV0aW5nKG9ialZhbHVlKSAmJiBpc0dyZWV0aW5nKHNyY1ZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnZ3JlZXRpbmcnOiAnaGVsbG8nIH07XG4gICAgICogdmFyIHNvdXJjZSA9IHsgJ2dyZWV0aW5nJzogJ2hpJyB9O1xuICAgICAqXG4gICAgICogXy5pc01hdGNoV2l0aChvYmplY3QsIHNvdXJjZSwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTWF0Y2hXaXRoKG9iamVjdCwgc291cmNlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIGdldE1hdGNoRGF0YShzb3VyY2UpLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgTmFOYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzTmFOYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzTmFOKSBhbmQgaXMgbm90IHRoZSBzYW1lIGFzXG4gICAgICogZ2xvYmFsIFtgaXNOYU5gXShodHRwczovL21kbi5pby9pc05hTikgd2hpY2ggcmV0dXJucyBgdHJ1ZWAgZm9yXG4gICAgICogYHVuZGVmaW5lZGAgYW5kIG90aGVyIG5vbi1udW1iZXIgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgTmFOYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKE5hTik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05hTihuZXcgTnVtYmVyKE5hTikpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGlzTmFOKHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05hTih1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOYU4odmFsdWUpIHtcbiAgICAgIC8vIEFuIGBOYU5gIHByaW1pdGl2ZSBpcyB0aGUgb25seSB2YWx1ZSB0aGF0IGlzIG5vdCBlcXVhbCB0byBpdHNlbGYuXG4gICAgICAvLyBQZXJmb3JtIHRoZSBgdG9TdHJpbmdUYWdgIGNoZWNrIGZpcnN0IHRvIGF2b2lkIGVycm9ycyB3aXRoIHNvbWVcbiAgICAgIC8vIEFjdGl2ZVggb2JqZWN0cyBpbiBJRS5cbiAgICAgIHJldHVybiBpc051bWJlcih2YWx1ZSkgJiYgdmFsdWUgIT0gK3ZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJpc3RpbmUgbmF0aXZlIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGNhbid0IHJlbGlhYmx5IGRldGVjdCBuYXRpdmUgZnVuY3Rpb25zIGluIHRoZSBwcmVzZW5jZVxuICAgICAqIG9mIHRoZSBjb3JlLWpzIHBhY2thZ2UgYmVjYXVzZSBjb3JlLWpzIGNpcmN1bXZlbnRzIHRoaXMga2luZCBvZiBkZXRlY3Rpb24uXG4gICAgICogRGVzcGl0ZSBtdWx0aXBsZSByZXF1ZXN0cywgdGhlIGNvcmUtanMgbWFpbnRhaW5lciBoYXMgbWFkZSBpdCBjbGVhcjogYW55XG4gICAgICogYXR0ZW1wdCB0byBmaXggdGhlIGRldGVjdGlvbiB3aWxsIGJlIG9ic3RydWN0ZWQuIEFzIGEgcmVzdWx0LCB3ZSdyZSBsZWZ0XG4gICAgICogd2l0aCBsaXR0bGUgY2hvaWNlIGJ1dCB0byB0aHJvdyBhbiBlcnJvci4gVW5mb3J0dW5hdGVseSwgdGhpcyBhbHNvIGFmZmVjdHNcbiAgICAgKiBwYWNrYWdlcywgbGlrZSBbYmFiZWwtcG9seWZpbGxdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2JhYmVsLXBvbHlmaWxsKSxcbiAgICAgKiB3aGljaCByZWx5IG9uIGNvcmUtanMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOYXRpdmUoQXJyYXkucHJvdG90eXBlLnB1c2gpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYXRpdmUoXyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc05hdGl2ZSh2YWx1ZSkge1xuICAgICAgaWYgKGlzTWFza2FibGUodmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihDT1JFX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYG51bGxgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgbnVsbGAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc051bGwobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bGwodm9pZCAwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTnVsbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBudWxsYCBvciBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbnVsbGlzaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTmlsKG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOaWwodm9pZCAwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmlsKE5hTik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc05pbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBOdW1iZXJgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVG8gZXhjbHVkZSBgSW5maW5pdHlgLCBgLUluZmluaXR5YCwgYW5kIGBOYU5gLCB3aGljaCBhcmVcbiAgICAgKiBjbGFzc2lmaWVkIGFzIG51bWJlcnMsIHVzZSB0aGUgYF8uaXNGaW5pdGVgIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBudW1iZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcigzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInIHx8XG4gICAgICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IG51bWJlclRhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICAgICAqIGBPYmplY3RgIGNvbnN0cnVjdG9yIG9yIG9uZSB3aXRoIGEgYFtbUHJvdG90eXBlXV1gIG9mIGBudWxsYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjguMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSB8fCBiYXNlR2V0VGFnKHZhbHVlKSAhPSBvYmplY3RUYWcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHByb3RvID0gZ2V0UHJvdG90eXBlKHZhbHVlKTtcbiAgICAgIGlmIChwcm90byA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBDdG9yID0gaGFzT3duUHJvcGVydHkuY2FsbChwcm90bywgJ2NvbnN0cnVjdG9yJykgJiYgcHJvdG8uY29uc3RydWN0b3I7XG4gICAgICByZXR1cm4gdHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJlxuICAgICAgICBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PSBvYmplY3RDdG9yU3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgUmVnRXhwYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcmVnZXhwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNSZWdFeHAoL2FiYy8pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNSZWdFeHAoJy9hYmMvJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNSZWdFeHAgPSBub2RlSXNSZWdFeHAgPyBiYXNlVW5hcnkobm9kZUlzUmVnRXhwKSA6IGJhc2VJc1JlZ0V4cDtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgc2FmZSBpbnRlZ2VyLiBBbiBpbnRlZ2VyIGlzIHNhZmUgaWYgaXQncyBhbiBJRUVFLTc1NFxuICAgICAqIGRvdWJsZSBwcmVjaXNpb24gbnVtYmVyIHdoaWNoIGlzbid0IHRoZSByZXN1bHQgb2YgYSByb3VuZGVkIHVuc2FmZSBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNTYWZlSW50ZWdlcmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc1NhZmVJbnRlZ2VyKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzYWZlIGludGVnZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNJbnRlZ2VyKHZhbHVlKSAmJiB2YWx1ZSA+PSAtTUFYX1NBRkVfSU5URUdFUiAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU2V0YCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTZXQobmV3IFNldCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1NldChuZXcgV2Vha1NldCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNTZXQgPSBub2RlSXNTZXQgPyBiYXNlVW5hcnkobm9kZUlzU2V0KSA6IGJhc2VJc1NldDtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3RyaW5nYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN0cmluZywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU3RyaW5nKCdhYmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU3RyaW5nKDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHxcbiAgICAgICAgKCFpc0FycmF5KHZhbHVlKSAmJiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN0cmluZ1RhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN5bWJvbFRhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzVHlwZWRBcnJheShbXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNUeXBlZEFycmF5ID0gbm9kZUlzVHlwZWRBcnJheSA/IGJhc2VVbmFyeShub2RlSXNUeXBlZEFycmF5KSA6IGJhc2VJc1R5cGVkQXJyYXk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1VuZGVmaW5lZCh2b2lkIDApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNVbmRlZmluZWQobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBXZWFrTWFwYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgd2VhayBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtNYXAobmV3IFdlYWtNYXApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrTWFwKG5ldyBNYXApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNXZWFrTWFwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IHdlYWtNYXBUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBXZWFrU2V0YCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgd2VhayBzZXQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtTZXQobmV3IFdlYWtTZXQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrU2V0KG5ldyBTZXQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNXZWFrU2V0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSB3ZWFrU2V0VGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8uZ3RcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sdCgxLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0KDMsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmx0KDMsIDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGx0ID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihiYXNlTHQpO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG9cbiAgICAgKiAgYG90aGVyYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5ndGVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sdGUoMSwgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5sdGUoMywgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5sdGUoMywgMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgbHRlID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA8PSBvdGhlcjtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9BcnJheSh7ICdhJzogMSwgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy50b0FycmF5KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKlxuICAgICAqIF8udG9BcnJheSgxKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogXy50b0FycmF5KG51bGwpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9BcnJheSh2YWx1ZSkge1xuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUxpa2UodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBpc1N0cmluZyh2YWx1ZSkgPyBzdHJpbmdUb0FycmF5KHZhbHVlKSA6IGNvcHlBcnJheSh2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoc3ltSXRlcmF0b3IgJiYgdmFsdWVbc3ltSXRlcmF0b3JdKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvclRvQXJyYXkodmFsdWVbc3ltSXRlcmF0b3JdKCkpO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgZnVuYyA9IHRhZyA9PSBtYXBUYWcgPyBtYXBUb0FycmF5IDogKHRhZyA9PSBzZXRUYWcgPyBzZXRUb0FycmF5IDogdmFsdWVzKTtcblxuICAgICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBmaW5pdGUgbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTIuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKDMuMik7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDVlLTMyNFxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZShJbmZpbml0eSk7XG4gICAgICogLy8gPT4gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDhcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoJzMuMicpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvRmluaXRlKHZhbHVlKSB7XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogMDtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdG9OdW1iZXIodmFsdWUpO1xuICAgICAgaWYgKHZhbHVlID09PSBJTkZJTklUWSB8fCB2YWx1ZSA9PT0gLUlORklOSVRZKSB7XG4gICAgICAgIHZhciBzaWduID0gKHZhbHVlIDwgMCA/IC0xIDogMSk7XG4gICAgICAgIHJldHVybiBzaWduICogTUFYX0lOVEVHRVI7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gdmFsdWUgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gICAgICogW2BUb0ludGVnZXJgXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9pbnRlZ2VyKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoMy4yKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDhcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKCczLjInKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9JbnRlZ2VyKHZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdG9GaW5pdGUodmFsdWUpLFxuICAgICAgICAgIHJlbWFpbmRlciA9IHJlc3VsdCAlIDE7XG5cbiAgICAgIHJldHVybiByZXN1bHQgPT09IHJlc3VsdCA/IChyZW1haW5kZXIgPyByZXN1bHQgLSByZW1haW5kZXIgOiByZXN1bHQpIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGludGVnZXIgc3VpdGFibGUgZm9yIHVzZSBhcyB0aGUgbGVuZ3RoIG9mIGFuXG4gICAgICogYXJyYXktbGlrZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiA0Mjk0OTY3Mjk1XG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKCczLjInKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9MZW5ndGgodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA/IGJhc2VDbGFtcCh0b0ludGVnZXIodmFsdWUpLCAwLCBNQVhfQVJSQVlfTEVOR1RIKSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoMy4yKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gNWUtMzI0XG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBJbmZpbml0eVxuICAgICAqXG4gICAgICogXy50b051bWJlcignMy4yJyk7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gTkFOO1xuICAgICAgfVxuICAgICAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICB2YXIgb3RoZXIgPSB0eXBlb2YgdmFsdWUudmFsdWVPZiA9PSAnZnVuY3Rpb24nID8gdmFsdWUudmFsdWVPZigpIDogdmFsdWU7XG4gICAgICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSBiYXNlVHJpbSh2YWx1ZSk7XG4gICAgICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICAgICAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgICAgID8gZnJlZVBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCBpc0JpbmFyeSA/IDIgOiA4KVxuICAgICAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgcGxhaW4gb2JqZWN0IGZsYXR0ZW5pbmcgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nXG4gICAgICoga2V5ZWQgcHJvcGVydGllcyBvZiBgdmFsdWVgIHRvIG93biBwcm9wZXJ0aWVzIG9mIHRoZSBwbGFpbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29udmVydGVkIHBsYWluIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgbmV3IEZvbyk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMSB9LCBfLnRvUGxhaW5PYmplY3QobmV3IEZvbykpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9QbGFpbk9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3QodmFsdWUsIGtleXNJbih2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzYWZlIGludGVnZXIuIEEgc2FmZSBpbnRlZ2VyIGNhbiBiZSBjb21wYXJlZCBhbmRcbiAgICAgKiByZXByZXNlbnRlZCBjb3JyZWN0bHkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcigzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDkwMDcxOTkyNTQ3NDA5OTFcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcignMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU2FmZUludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgICA/IGJhc2VDbGFtcCh0b0ludGVnZXIodmFsdWUpLCAtTUFYX1NBRkVfSU5URUdFUiwgTUFYX1NBRkVfSU5URUdFUilcbiAgICAgICAgOiAodmFsdWUgPT09IDAgPyB2YWx1ZSA6IDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gICAgICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy4gVGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1N0cmluZyhudWxsKTtcbiAgICAgKiAvLyA9PiAnJ1xuICAgICAqXG4gICAgICogXy50b1N0cmluZygtMCk7XG4gICAgICogLy8gPT4gJy0wJ1xuICAgICAqXG4gICAgICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICAgICAqIC8vID0+ICcxLDIsMydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0cyB0byB0aGVcbiAgICAgKiBkZXN0aW5hdGlvbiBvYmplY3QuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC5cbiAgICAgKiBTdWJzZXF1ZW50IHNvdXJjZXMgb3ZlcndyaXRlIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YCBhbmQgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgT2JqZWN0LmFzc2lnbmBdKGh0dHBzOi8vbWRuLmlvL09iamVjdC9hc3NpZ24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduSW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBCYXIoKSB7XG4gICAgICogICB0aGlzLmMgPSAzO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYiA9IDI7XG4gICAgICogQmFyLnByb3RvdHlwZS5kID0gNDtcbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAwIH0sIG5ldyBGb28sIG5ldyBCYXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ24gPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgaWYgKGlzUHJvdG90eXBlKHNvdXJjZSkgfHwgaXNBcnJheUxpa2Uoc291cmNlKSkge1xuICAgICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIG93biBhbmRcbiAgICAgKiBpbmhlcml0ZWQgc291cmNlIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBleHRlbmRcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEJhcigpIHtcbiAgICAgKiAgIHRoaXMuYyA9IDM7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5iID0gMjtcbiAgICAgKiBCYXIucHJvdG90eXBlLmQgPSA0O1xuICAgICAqXG4gICAgICogXy5hc3NpZ25Jbih7ICdhJzogMCB9LCBuZXcgRm9vLCBuZXcgQmFyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMsICdkJzogNCB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbkluID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduSW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBhc3NpZ25lZCB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zXG4gICAgICogYHVuZGVmaW5lZGAsIGFzc2lnbm1lbnQgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggZml2ZSBhcmd1bWVudHM6IChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZXh0ZW5kV2l0aFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25XaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICByZXR1cm4gXy5pc1VuZGVmaW5lZChvYmpWYWx1ZSkgPyBzcmNWYWx1ZSA6IG9ialZhbHVlO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBkZWZhdWx0cyA9IF8ucGFydGlhbFJpZ2h0KF8uYXNzaWduSW5XaXRoLCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25JbldpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgYXNzaWduZWQgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJuc1xuICAgICAqIGB1bmRlZmluZWRgLCBhc3NpZ25tZW50IGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIGZpdmUgYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbkluV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgcmV0dXJuIF8uaXNVbmRlZmluZWQob2JqVmFsdWUpID8gc3JjVmFsdWUgOiBvYmpWYWx1ZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZGVmYXVsdHMgPSBfLnBhcnRpYWxSaWdodChfLmFzc2lnbldpdGgsIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbldpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIGBwYXRoc2Agb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcGlja2VkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfSwgNF0gfTtcbiAgICAgKlxuICAgICAqIF8uYXQob2JqZWN0LCBbJ2FbMF0uYi5jJywgJ2FbMV0nXSk7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICovXG4gICAgdmFyIGF0ID0gZmxhdFJlc3QoYmFzZUF0KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IHRoYXQgaW5oZXJpdHMgZnJvbSB0aGUgYHByb3RvdHlwZWAgb2JqZWN0LiBJZiBhXG4gICAgICogYHByb3BlcnRpZXNgIG9iamVjdCBpcyBnaXZlbiwgaXRzIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzXG4gICAgICogYXJlIGFzc2lnbmVkIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvdG90eXBlIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbcHJvcGVydGllc10gVGhlIHByb3BlcnRpZXMgdG8gYXNzaWduIHRvIHRoZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gU2hhcGUoKSB7XG4gICAgICogICB0aGlzLnggPSAwO1xuICAgICAqICAgdGhpcy55ID0gMDtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBDaXJjbGUoKSB7XG4gICAgICogICBTaGFwZS5jYWxsKHRoaXMpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIENpcmNsZS5wcm90b3R5cGUgPSBfLmNyZWF0ZShTaGFwZS5wcm90b3R5cGUsIHtcbiAgICAgKiAgICdjb25zdHJ1Y3Rvcic6IENpcmNsZVxuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogdmFyIGNpcmNsZSA9IG5ldyBDaXJjbGU7XG4gICAgICogY2lyY2xlIGluc3RhbmNlb2YgQ2lyY2xlO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNpcmNsZSBpbnN0YW5jZW9mIFNoYXBlO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUocHJvdG90eXBlLCBwcm9wZXJ0aWVzKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZUNyZWF0ZShwcm90b3R5cGUpO1xuICAgICAgcmV0dXJuIHByb3BlcnRpZXMgPT0gbnVsbCA/IHJlc3VsdCA6IGJhc2VBc3NpZ24ocmVzdWx0LCBwcm9wZXJ0aWVzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlXG4gICAgICogb2JqZWN0cyB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGZvciBhbGwgZGVzdGluYXRpb24gcHJvcGVydGllcyB0aGF0XG4gICAgICogcmVzb2x2ZSB0byBgdW5kZWZpbmVkYC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LlxuICAgICAqIE9uY2UgYSBwcm9wZXJ0eSBpcyBzZXQsIGFkZGl0aW9uYWwgdmFsdWVzIG9mIHRoZSBzYW1lIHByb3BlcnR5IGFyZSBpZ25vcmVkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmRlZmF1bHRzRGVlcFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBkZWZhdWx0cyA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgdmFyIGxlbmd0aCA9IHNvdXJjZXMubGVuZ3RoO1xuICAgICAgdmFyIGd1YXJkID0gbGVuZ3RoID4gMiA/IHNvdXJjZXNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuICAgICAgICB2YXIgcHJvcHMgPSBrZXlzSW4oc291cmNlKTtcbiAgICAgICAgdmFyIHByb3BzSW5kZXggPSAtMTtcbiAgICAgICAgdmFyIHByb3BzTGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlICgrK3Byb3BzSW5kZXggPCBwcm9wc0xlbmd0aCkge1xuICAgICAgICAgIHZhciBrZXkgPSBwcm9wc1twcm9wc0luZGV4XTtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAgIChlcSh2YWx1ZSwgb2JqZWN0UHJvdG9ba2V5XSkgJiYgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkge1xuICAgICAgICAgICAgb2JqZWN0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGVmYXVsdHNgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGFzc2lnbnNcbiAgICAgKiBkZWZhdWx0IHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmRlZmF1bHRzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdHNEZWVwKHsgJ2EnOiB7ICdiJzogMiB9IH0sIHsgJ2EnOiB7ICdiJzogMSwgJ2MnOiAzIH0gfSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2InOiAyLCAnYyc6IDMgfSB9XG4gICAgICovXG4gICAgdmFyIGRlZmF1bHRzRGVlcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgIGFyZ3MucHVzaCh1bmRlZmluZWQsIGN1c3RvbURlZmF1bHRzTWVyZ2UpO1xuICAgICAgcmV0dXJuIGFwcGx5KG1lcmdlV2l0aCwgdW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUga2V5IG9mIHRoZSBmaXJzdFxuICAgICAqIGVsZW1lbnQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yIGluc3RlYWQgb2YgdGhlIGVsZW1lbnQgaXRzZWxmLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gUmV0dXJucyB0aGUga2V5IG9mIHRoZSBtYXRjaGVkIGVsZW1lbnQsXG4gICAgICogIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdiYXJuZXknOiAgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICAnZnJlZCc6ICAgIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiAnYmFybmV5JyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIHsgJ2FnZSc6IDEsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+ICdwZWJibGVzJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gJ2Jhcm5leSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kS2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gYmFzZUZpbmRLZXkob2JqZWN0LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBiYXNlRm9yT3duKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRLZXlgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBhIGNvbGxlY3Rpb24gaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gUmV0dXJucyB0aGUga2V5IG9mIHRoZSBtYXRjaGVkIGVsZW1lbnQsXG4gICAgICogIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdiYXJuZXknOiAgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICAnZnJlZCc6ICAgIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2UgPCA0MDsgfSk7XG4gICAgICogLy8gPT4gcmV0dXJucyAncGViYmxlcycgYXNzdW1pbmcgYF8uZmluZEtleWAgcmV0dXJucyAnYmFybmV5J1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZExhc3RLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBiYXNlRmluZEtleShvYmplY3QsIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGJhc2VGb3JPd25SaWdodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGFuXG4gICAgICogb2JqZWN0IGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXRcbiAgICAgKiBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvckluUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9ySW4obmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdhJywgJ2InLCB0aGVuICdjJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JJbihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGxcbiAgICAgICAgPyBvYmplY3RcbiAgICAgICAgOiBiYXNlRm9yKG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpLCBrZXlzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9ySW5gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllcyBvZlxuICAgICAqIGBvYmplY3RgIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvckluXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvckluUmlnaHQobmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdjJywgJ2InLCB0aGVuICdhJyBhc3N1bWluZyBgXy5mb3JJbmAgbG9ncyAnYScsICdiJywgdGhlbiAnYycuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9ySW5SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGxcbiAgICAgICAgPyBvYmplY3RcbiAgICAgICAgOiBiYXNlRm9yUmlnaHQob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBhbiBvYmplY3QgYW5kXG4gICAgICogaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS4gSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvblxuICAgICAqIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JPd25SaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JPd24obmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdhJyB0aGVuICdiJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yT3duKG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvck93bmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzIG9mXG4gICAgICogYG9iamVjdGAgaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9yT3duXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvck93blJpZ2h0KG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYicgdGhlbiAnYScgYXNzdW1pbmcgYF8uZm9yT3duYCBsb2dzICdhJyB0aGVuICdiJy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JPd25SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JPd25SaWdodChvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmcm9tIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXNcbiAgICAgKiBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqIEBzZWUgXy5mdW5jdGlvbnNJblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSBfLmNvbnN0YW50KCdhJyk7XG4gICAgICogICB0aGlzLmIgPSBfLmNvbnN0YW50KCdiJyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gXy5jb25zdGFudCgnYycpO1xuICAgICAqXG4gICAgICogXy5mdW5jdGlvbnMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZ1bmN0aW9ucyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZUZ1bmN0aW9ucyhvYmplY3QsIGtleXMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmcm9tIG93biBhbmQgaW5oZXJpdGVkXG4gICAgICogZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZXMuXG4gICAgICogQHNlZSBfLmZ1bmN0aW9uc1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSBfLmNvbnN0YW50KCdhJyk7XG4gICAgICogICB0aGlzLmIgPSBfLmNvbnN0YW50KCdiJyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gXy5jb25zdGFudCgnYycpO1xuICAgICAqXG4gICAgICogXy5mdW5jdGlvbnNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmdW5jdGlvbnNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZUZ1bmN0aW9ucyhvYmplY3QsIGtleXNJbihvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIHRoZSByZXNvbHZlZCB2YWx1ZSBpc1xuICAgICAqIGB1bmRlZmluZWRgLCB0aGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaW4gaXRzIHBsYWNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsICdhLmIuYycsICdkZWZhdWx0Jyk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0VmFsdWUgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiB7ICdiJzogMiB9IH07XG4gICAgICogdmFyIG90aGVyID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgJ2EuYicpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob3RoZXIsICdhJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXMob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsICdhLmInKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNJbihvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhc0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgaW52ZXJ0ZWQga2V5cyBhbmQgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqIElmIGBvYmplY3RgIGNvbnRhaW5zIGR1cGxpY2F0ZSB2YWx1ZXMsIHN1YnNlcXVlbnQgdmFsdWVzIG92ZXJ3cml0ZVxuICAgICAqIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0KG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMSc6ICdjJywgJzInOiAnYicgfVxuICAgICAqL1xuICAgIHZhciBpbnZlcnQgPSBjcmVhdGVJbnZlcnRlcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmXG4gICAgICAgICAgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFsdWUgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0W3ZhbHVlXSA9IGtleTtcbiAgICB9LCBjb25zdGFudChpZGVudGl0eSkpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbnZlcnRgIGV4Y2VwdCB0aGF0IHRoZSBpbnZlcnRlZCBvYmplY3QgaXMgZ2VuZXJhdGVkXG4gICAgICogZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nIGVhY2ggZWxlbWVudCBvZiBgb2JqZWN0YCB0aHJ1IGBpdGVyYXRlZWAuIFRoZVxuICAgICAqIGNvcnJlc3BvbmRpbmcgaW52ZXJ0ZWQgdmFsdWUgb2YgZWFjaCBpbnZlcnRlZCBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5c1xuICAgICAqIHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZSBpbnZlcnRlZCB2YWx1ZS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52ZXJ0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmludmVydEJ5KG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfVxuICAgICAqXG4gICAgICogXy5pbnZlcnRCeShvYmplY3QsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gJ2dyb3VwJyArIHZhbHVlO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2dyb3VwMSc6IFsnYScsICdjJ10sICdncm91cDInOiBbJ2InXSB9XG4gICAgICovXG4gICAgdmFyIGludmVydEJ5ID0gY3JlYXRlSW52ZXJ0ZXIoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJlxuICAgICAgICAgIHR5cGVvZiB2YWx1ZS50b1N0cmluZyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhbHVlID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwgdmFsdWUpKSB7XG4gICAgICAgIHJlc3VsdFt2YWx1ZV0ucHVzaChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0W3ZhbHVlXSA9IFtrZXldO1xuICAgICAgfVxuICAgIH0sIGdldEl0ZXJhdGVlKTtcblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiBbMSwgMiwgMywgNF0gfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5pbnZva2Uob2JqZWN0LCAnYVswXS5iLmMuc2xpY2UnLCAxLCAzKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKi9cbiAgICB2YXIgaW52b2tlID0gYmFzZVJlc3QoYmFzZUludm9rZSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gICAgICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmtleXMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogXy5rZXlzKCdoaScpO1xuICAgICAqIC8vID0+IFsnMCcsICcxJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8ua2V5c0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGtleXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QsIHRydWUpIDogYmFzZUtleXNJbihvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5tYXBWYWx1ZXNgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCB3aXRoIHRoZVxuICAgICAqIHNhbWUgdmFsdWVzIGFzIGBvYmplY3RgIGFuZCBrZXlzIGdlbmVyYXRlZCBieSBydW5uaW5nIGVhY2ggb3duIGVudW1lcmFibGVcbiAgICAgKiBzdHJpbmcga2V5ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICAgICAqIEBzZWUgXy5tYXBWYWx1ZXNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXBLZXlzKHsgJ2EnOiAxLCAnYic6IDIgfSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgcmV0dXJuIGtleSArIHZhbHVlO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2ExJzogMSwgJ2IyJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwS2V5cyhvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKTtcblxuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBpdGVyYXRlZSh2YWx1ZSwga2V5LCBvYmplY3QpLCB2YWx1ZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzIGFzIGBvYmplY3RgIGFuZCB2YWx1ZXMgZ2VuZXJhdGVkXG4gICAgICogYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YCB0aHJ1XG4gICAgICogYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gICAgICogKHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIG9iamVjdC5cbiAgICAgKiBAc2VlIF8ubWFwS2V5c1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnZnJlZCc6ICAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8ubWFwVmFsdWVzKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZTsgfSk7XG4gICAgICogLy8gPT4geyAnZnJlZCc6IDQwLCAncGViYmxlcyc6IDEgfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXBWYWx1ZXModXNlcnMsICdhZ2UnKTtcbiAgICAgKiAvLyA9PiB7ICdmcmVkJzogNDAsICdwZWJibGVzJzogMSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwVmFsdWVzKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpO1xuXG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqZWN0KSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IG1lcmdlcyBvd24gYW5kXG4gICAgICogaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgaW50byB0aGVcbiAgICAgKiBkZXN0aW5hdGlvbiBvYmplY3QuIFNvdXJjZSBwcm9wZXJ0aWVzIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYCBhcmVcbiAgICAgKiBza2lwcGVkIGlmIGEgZGVzdGluYXRpb24gdmFsdWUgZXhpc3RzLiBBcnJheSBhbmQgcGxhaW4gb2JqZWN0IHByb3BlcnRpZXNcbiAgICAgKiBhcmUgbWVyZ2VkIHJlY3Vyc2l2ZWx5LiBPdGhlciBvYmplY3RzIGFuZCB2YWx1ZSB0eXBlcyBhcmUgb3ZlcnJpZGRlbiBieVxuICAgICAqIGFzc2lnbm1lbnQuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC4gU3Vic2VxdWVudFxuICAgICAqIHNvdXJjZXMgb3ZlcndyaXRlIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICdhJzogW3sgJ2InOiAyIH0sIHsgJ2QnOiA0IH1dXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBvdGhlciA9IHtcbiAgICAgKiAgICdhJzogW3sgJ2MnOiAzIH0sIHsgJ2UnOiA1IH1dXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8ubWVyZ2Uob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzogMiwgJ2MnOiAzIH0sIHsgJ2QnOiA0LCAnZSc6IDUgfV0gfVxuICAgICAqL1xuICAgIHZhciBtZXJnZSA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCkge1xuICAgICAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1lcmdlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgbWVyZ2VkIHZhbHVlcyBvZiB0aGUgZGVzdGluYXRpb24gYW5kIHNvdXJjZVxuICAgICAqIHByb3BlcnRpZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLCBtZXJnaW5nIGlzIGhhbmRsZWQgYnkgdGhlXG4gICAgICogbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIHNpeCBhcmd1bWVudHM6XG4gICAgICogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0FycmF5KG9ialZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gb2JqVmFsdWUuY29uY2F0KHNyY1ZhbHVlKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFsxXSwgJ2InOiBbMl0gfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdhJzogWzNdLCAnYic6IFs0XSB9O1xuICAgICAqXG4gICAgICogXy5tZXJnZVdpdGgob2JqZWN0LCBvdGhlciwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4geyAnYSc6IFsxLCAzXSwgJ2InOiBbMiwgNF0gfVxuICAgICAqL1xuICAgIHZhciBtZXJnZVdpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnBpY2tgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGVcbiAgICAgKiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IHBhdGhzIG9mIGBvYmplY3RgIHRoYXQgYXJlIG5vdCBvbWl0dGVkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGNvbnNpZGVyYWJseSBzbG93ZXIgdGhhbiBgXy5waWNrYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIG9taXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLm9taXQob2JqZWN0LCBbJ2EnLCAnYyddKTtcbiAgICAgKiAvLyA9PiB7ICdiJzogJzInIH1cbiAgICAgKi9cbiAgICB2YXIgb21pdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgdmFyIGlzRGVlcCA9IGZhbHNlO1xuICAgICAgcGF0aHMgPSBhcnJheU1hcChwYXRocywgZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgICAgaXNEZWVwIHx8IChpc0RlZXAgPSBwYXRoLmxlbmd0aCA+IDEpO1xuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAgIH0pO1xuICAgICAgY29weU9iamVjdChvYmplY3QsIGdldEFsbEtleXNJbihvYmplY3QpLCByZXN1bHQpO1xuICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICByZXN1bHQgPSBiYXNlQ2xvbmUocmVzdWx0LCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9GTEFUX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbU9taXRDbG9uZSk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gcGF0aHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGJhc2VVbnNldChyZXN1bHQsIHBhdGhzW2xlbmd0aF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5waWNrQnlgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZlxuICAgICAqIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGBvYmplY3RgIHRoYXRcbiAgICAgKiBgcHJlZGljYXRlYCBkb2Vzbid0IHJldHVybiB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0d29cbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwga2V5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5vbWl0Qnkob2JqZWN0LCBfLmlzTnVtYmVyKTtcbiAgICAgKiAvLyA9PiB7ICdiJzogJzInIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbWl0Qnkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBwaWNrQnkob2JqZWN0LCBuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBwaWNrZWQgYG9iamVjdGAgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLnBpY2sob2JqZWN0LCBbJ2EnLCAnYyddKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICB2YXIgcGljayA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHt9IDogYmFzZVBpY2sob2JqZWN0LCBwYXRocyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgYG9iamVjdGAgcHJvcGVydGllcyBgcHJlZGljYXRlYCByZXR1cm5zXG4gICAgICogdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKHZhbHVlLCBrZXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLnBpY2tCeShvYmplY3QsIF8uaXNOdW1iZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBpY2tCeShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm9wcyA9IGFycmF5TWFwKGdldEFsbEtleXNJbihvYmplY3QpLCBmdW5jdGlvbihwcm9wKSB7XG4gICAgICAgIHJldHVybiBbcHJvcF07XG4gICAgICB9KTtcbiAgICAgIHByZWRpY2F0ZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSk7XG4gICAgICByZXR1cm4gYmFzZVBpY2tCeShvYmplY3QsIHByb3BzLCBmdW5jdGlvbih2YWx1ZSwgcGF0aCkge1xuICAgICAgICByZXR1cm4gcHJlZGljYXRlKHZhbHVlLCBwYXRoWzBdKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZ2V0YCBleGNlcHQgdGhhdCBpZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXMgYVxuICAgICAqIGZ1bmN0aW9uIGl0J3MgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBpdHMgcGFyZW50IG9iamVjdCBhbmRcbiAgICAgKiBpdHMgcmVzdWx0IGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gcmVzb2x2ZS5cbiAgICAgKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MxJzogMywgJ2MyJzogXy5jb25zdGFudCg0KSB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzEnKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzInKTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzMnLCAnZGVmYXVsdCcpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMzJywgXy5jb25zdGFudCgnZGVmYXVsdCcpKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXN1bHQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICAgICAgLy8gRW5zdXJlIHRoZSBsb29wIGlzIGVudGVyZWQgd2hlbiBwYXRoIGlzIGVtcHR5LlxuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgICAgb2JqZWN0ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3RbdG9LZXkocGF0aFtpbmRleF0pXTtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcbiAgICAgICAgICB2YWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlLmNhbGwob2JqZWN0KSA6IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIGEgcG9ydGlvbiBvZiBgcGF0aGAgZG9lc24ndCBleGlzdCxcbiAgICAgKiBpdCdzIGNyZWF0ZWQuIEFycmF5cyBhcmUgY3JlYXRlZCBmb3IgbWlzc2luZyBpbmRleCBwcm9wZXJ0aWVzIHdoaWxlIG9iamVjdHNcbiAgICAgKiBhcmUgY3JlYXRlZCBmb3IgYWxsIG90aGVyIG1pc3NpbmcgcHJvcGVydGllcy4gVXNlIGBfLnNldFdpdGhgIHRvIGN1c3RvbWl6ZVxuICAgICAqIGBwYXRoYCBjcmVhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uc2V0KG9iamVjdCwgJ2FbMF0uYi5jJywgNCk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LmFbMF0uYi5jKTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnNldChvYmplY3QsIFsneCcsICcwJywgJ3knLCAneiddLCA1KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QueFswXS55LnopO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNldGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG9iamVjdHMgb2YgYHBhdGhgLiAgSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGBcbiAgICAgKiBwYXRoIGNyZWF0aW9uIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKG5zVmFsdWUsIGtleSwgbnNPYmplY3QpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHt9O1xuICAgICAqXG4gICAgICogXy5zZXRXaXRoKG9iamVjdCwgJ1swXVsxXScsICdhJywgT2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcwJzogeyAnMSc6ICdhJyB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRXaXRoKG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQtdmFsdWUgcGFpcnMgZm9yIGBvYmplY3RgXG4gICAgICogd2hpY2ggY2FuIGJlIGNvbnN1bWVkIGJ5IGBfLmZyb21QYWlyc2AuIElmIGBvYmplY3RgIGlzIGEgbWFwIG9yIHNldCwgaXRzXG4gICAgICogZW50cmllcyBhcmUgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZW50cmllc1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnRvUGFpcnMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gW1snYScsIDFdLCBbJ2InLCAyXV0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICB2YXIgdG9QYWlycyA9IGNyZWF0ZVRvUGFpcnMoa2V5cyk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkLXZhbHVlIHBhaXJzXG4gICAgICogZm9yIGBvYmplY3RgIHdoaWNoIGNhbiBiZSBjb25zdW1lZCBieSBgXy5mcm9tUGFpcnNgLiBJZiBgb2JqZWN0YCBpcyBhIG1hcFxuICAgICAqIG9yIHNldCwgaXRzIGVudHJpZXMgYXJlIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGVudHJpZXNJblxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnRvUGFpcnNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMV0sIFsnYicsIDJdLCBbJ2MnLCAzXV0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICB2YXIgdG9QYWlyc0luID0gY3JlYXRlVG9QYWlycyhrZXlzSW4pO1xuXG4gICAgLyoqXG4gICAgICogQW4gYWx0ZXJuYXRpdmUgdG8gYF8ucmVkdWNlYDsgdGhpcyBtZXRob2QgdHJhbnNmb3JtcyBgb2JqZWN0YCB0byBhIG5ld1xuICAgICAqIGBhY2N1bXVsYXRvcmAgb2JqZWN0IHdoaWNoIGlzIHRoZSByZXN1bHQgb2YgcnVubmluZyBlYWNoIG9mIGl0cyBvd25cbiAgICAgKiBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIHRocnUgYGl0ZXJhdGVlYCwgd2l0aCBlYWNoIGludm9jYXRpb25cbiAgICAgKiBwb3RlbnRpYWxseSBtdXRhdGluZyB0aGUgYGFjY3VtdWxhdG9yYCBvYmplY3QuIElmIGBhY2N1bXVsYXRvcmAgaXMgbm90XG4gICAgICogcHJvdmlkZWQsIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBzYW1lIGBbW1Byb3RvdHlwZV1dYCB3aWxsIGJlIHVzZWQuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBmb3VyIGFyZ3VtZW50czogKGFjY3VtdWxhdG9yLCB2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgY3VzdG9tIGFjY3VtdWxhdG9yIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmFuc2Zvcm0oWzIsIDMsIDRdLCBmdW5jdGlvbihyZXN1bHQsIG4pIHtcbiAgICAgKiAgIHJlc3VsdC5wdXNoKG4gKj0gbik7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9LCBbXSk7XG4gICAgICogLy8gPT4gWzQsIDldXG4gICAgICpcbiAgICAgKiBfLnRyYW5zZm9ybSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfSwgZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICogICAocmVzdWx0W3ZhbHVlXSB8fCAocmVzdWx0W3ZhbHVlXSA9IFtdKSkucHVzaChrZXkpO1xuICAgICAqIH0sIHt9KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJhbnNmb3JtKG9iamVjdCwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICAgICAgaXNBcnJMaWtlID0gaXNBcnIgfHwgaXNCdWZmZXIob2JqZWN0KSB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KTtcblxuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgNCk7XG4gICAgICBpZiAoYWNjdW11bGF0b3IgPT0gbnVsbCkge1xuICAgICAgICB2YXIgQ3RvciA9IG9iamVjdCAmJiBvYmplY3QuY29uc3RydWN0b3I7XG4gICAgICAgIGlmIChpc0Fyckxpa2UpIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IGlzQXJyID8gbmV3IEN0b3IgOiBbXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBpc0Z1bmN0aW9uKEN0b3IpID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSkgOiB7fTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IHt9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAoaXNBcnJMaWtlID8gYXJyYXlFYWNoIDogYmFzZUZvck93bikob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgb2JqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIHByb3BlcnR5IGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHVuc2V0LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcHJvcGVydHkgaXMgZGVsZXRlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDcgfSB9XSB9O1xuICAgICAqIF8udW5zZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IHt9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnVuc2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzoge30gfV0gfTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnNldChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHRydWUgOiBiYXNlVW5zZXQob2JqZWN0LCBwYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNldGAgZXhjZXB0IHRoYXQgYWNjZXB0cyBgdXBkYXRlcmAgdG8gcHJvZHVjZSB0aGVcbiAgICAgKiB2YWx1ZSB0byBzZXQuIFVzZSBgXy51cGRhdGVXaXRoYCB0byBjdXN0b21pemUgYHBhdGhgIGNyZWF0aW9uLiBUaGUgYHVwZGF0ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZShvYmplY3QsICdhWzBdLmIuYycsIGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gKiBuOyB9KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QuYVswXS5iLmMpO1xuICAgICAqIC8vID0+IDlcbiAgICAgKlxuICAgICAqIF8udXBkYXRlKG9iamVjdCwgJ3hbMF0ueS56JywgZnVuY3Rpb24obikgeyByZXR1cm4gbiA/IG4gKyAxIDogMDsgfSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LnhbMF0ueS56KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlKG9iamVjdCwgcGF0aCwgdXBkYXRlcikge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIGNhc3RGdW5jdGlvbih1cGRhdGVyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51cGRhdGVgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCB0byBwcm9kdWNlIHRoZSBvYmplY3RzIG9mIGBwYXRoYC4gIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgXG4gICAgICogcGF0aCBjcmVhdGlvbiBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6IChuc1ZhbHVlLCBrZXksIG5zT2JqZWN0KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge307XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZVdpdGgob2JqZWN0LCAnWzBdWzFdJywgXy5jb25zdGFudCgnYScpLCBPYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzAnOiB7ICcxJzogJ2EnIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVdpdGgob2JqZWN0LCBwYXRoLCB1cGRhdGVyLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgY2FzdEZ1bmN0aW9uKHVwZGF0ZXIpLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy52YWx1ZXMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWzEsIDJdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiBfLnZhbHVlcygnaGknKTtcbiAgICAgKiAvLyA9PiBbJ2gnLCAnaSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsdWVzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlVmFsdWVzKG9iamVjdCwga2V5cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eVxuICAgICAqIHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udmFsdWVzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsdWVzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VWYWx1ZXMob2JqZWN0LCBrZXlzSW4ob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ2xhbXBzIGBudW1iZXJgIHdpdGhpbiB0aGUgaW5jbHVzaXZlIGBsb3dlcmAgYW5kIGB1cHBlcmAgYm91bmRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjbGFtcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyXSBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjbGFtcGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jbGFtcCgtMTAsIC01LCA1KTtcbiAgICAgKiAvLyA9PiAtNVxuICAgICAqXG4gICAgICogXy5jbGFtcCgxMCwgLTUsIDUpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbGFtcChudW1iZXIsIGxvd2VyLCB1cHBlcikge1xuICAgICAgaWYgKHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdXBwZXIgPSBsb3dlcjtcbiAgICAgICAgbG93ZXIgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAodXBwZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB1cHBlciA9IHRvTnVtYmVyKHVwcGVyKTtcbiAgICAgICAgdXBwZXIgPSB1cHBlciA9PT0gdXBwZXIgPyB1cHBlciA6IDA7XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsb3dlciA9IHRvTnVtYmVyKGxvd2VyKTtcbiAgICAgICAgbG93ZXIgPSBsb3dlciA9PT0gbG93ZXIgPyBsb3dlciA6IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUNsYW1wKHRvTnVtYmVyKG51bWJlciksIGxvd2VyLCB1cHBlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBuYCBpcyBiZXR3ZWVuIGBzdGFydGAgYW5kIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuIElmXG4gICAgICogYGVuZGAgaXMgbm90IHNwZWNpZmllZCwgaXQncyBzZXQgdG8gYHN0YXJ0YCB3aXRoIGBzdGFydGAgdGhlbiBzZXQgdG8gYDBgLlxuICAgICAqIElmIGBzdGFydGAgaXMgZ3JlYXRlciB0aGFuIGBlbmRgIHRoZSBwYXJhbXMgYXJlIHN3YXBwZWQgdG8gc3VwcG9ydFxuICAgICAqIG5lZ2F0aXZlIHJhbmdlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjMuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBudW1iZXJgIGlzIGluIHRoZSByYW5nZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5yYW5nZSwgXy5yYW5nZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgzLCAyLCA0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNCwgOCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDQsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMiwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgxLjIsIDIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg1LjIsIDQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoLTMsIC0yLCAtNik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKSB7XG4gICAgICBzdGFydCA9IHRvRmluaXRlKHN0YXJ0KTtcbiAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbmQgPSBzdGFydDtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW5kID0gdG9GaW5pdGUoZW5kKTtcbiAgICAgIH1cbiAgICAgIG51bWJlciA9IHRvTnVtYmVyKG51bWJlcik7XG4gICAgICByZXR1cm4gYmFzZUluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcm9kdWNlcyBhIHJhbmRvbSBudW1iZXIgYmV0d2VlbiB0aGUgaW5jbHVzaXZlIGBsb3dlcmAgYW5kIGB1cHBlcmAgYm91bmRzLlxuICAgICAqIElmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHByb3ZpZGVkIGEgbnVtYmVyIGJldHdlZW4gYDBgIGFuZCB0aGUgZ2l2ZW4gbnVtYmVyXG4gICAgICogaXMgcmV0dXJuZWQuIElmIGBmbG9hdGluZ2AgaXMgYHRydWVgLCBvciBlaXRoZXIgYGxvd2VyYCBvciBgdXBwZXJgIGFyZVxuICAgICAqIGZsb2F0cywgYSBmbG9hdGluZy1wb2ludCBudW1iZXIgaXMgcmV0dXJuZWQgaW5zdGVhZCBvZiBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEphdmFTY3JpcHQgZm9sbG93cyB0aGUgSUVFRS03NTQgc3RhbmRhcmQgZm9yIHJlc29sdmluZ1xuICAgICAqIGZsb2F0aW5nLXBvaW50IHZhbHVlcyB3aGljaCBjYW4gcHJvZHVjZSB1bmV4cGVjdGVkIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcj0wXSBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt1cHBlcj0xXSBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZmxvYXRpbmddIFNwZWNpZnkgcmV0dXJuaW5nIGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJhbmRvbSBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDAsIDUpO1xuICAgICAqIC8vID0+IGFuIGludGVnZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSg1KTtcbiAgICAgKiAvLyA9PiBhbHNvIGFuIGludGVnZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSg1LCB0cnVlKTtcbiAgICAgKiAvLyA9PiBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDEuMiwgNS4yKTtcbiAgICAgKiAvLyA9PiBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBiZXR3ZWVuIDEuMiBhbmQgNS4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmFuZG9tKGxvd2VyLCB1cHBlciwgZmxvYXRpbmcpIHtcbiAgICAgIGlmIChmbG9hdGluZyAmJiB0eXBlb2YgZmxvYXRpbmcgIT0gJ2Jvb2xlYW4nICYmIGlzSXRlcmF0ZWVDYWxsKGxvd2VyLCB1cHBlciwgZmxvYXRpbmcpKSB7XG4gICAgICAgIHVwcGVyID0gZmxvYXRpbmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoZmxvYXRpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAodHlwZW9mIHVwcGVyID09ICdib29sZWFuJykge1xuICAgICAgICAgIGZsb2F0aW5nID0gdXBwZXI7XG4gICAgICAgICAgdXBwZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGxvd2VyID09ICdib29sZWFuJykge1xuICAgICAgICAgIGZsb2F0aW5nID0gbG93ZXI7XG4gICAgICAgICAgbG93ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciA9PT0gdW5kZWZpbmVkICYmIHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbG93ZXIgPSAwO1xuICAgICAgICB1cHBlciA9IDE7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbG93ZXIgPSB0b0Zpbml0ZShsb3dlcik7XG4gICAgICAgIGlmICh1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdXBwZXIgPSBsb3dlcjtcbiAgICAgICAgICBsb3dlciA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXBwZXIgPSB0b0Zpbml0ZSh1cHBlcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciA+IHVwcGVyKSB7XG4gICAgICAgIHZhciB0ZW1wID0gbG93ZXI7XG4gICAgICAgIGxvd2VyID0gdXBwZXI7XG4gICAgICAgIHVwcGVyID0gdGVtcDtcbiAgICAgIH1cbiAgICAgIGlmIChmbG9hdGluZyB8fCBsb3dlciAlIDEgfHwgdXBwZXIgJSAxKSB7XG4gICAgICAgIHZhciByYW5kID0gbmF0aXZlUmFuZG9tKCk7XG4gICAgICAgIHJldHVybiBuYXRpdmVNaW4obG93ZXIgKyAocmFuZCAqICh1cHBlciAtIGxvd2VyICsgZnJlZVBhcnNlRmxvYXQoJzFlLScgKyAoKHJhbmQgKyAnJykubGVuZ3RoIC0gMSkpKSksIHVwcGVyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlUmFuZG9tKGxvd2VyLCB1cHBlcik7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gW2NhbWVsIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NhbWVsQ2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjYW1lbCBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqL1xuICAgIHZhciBjYW1lbENhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHdvcmQgPSB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gY2FwaXRhbGl6ZSh3b3JkKSA6IHdvcmQpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byB1cHBlciBjYXNlIGFuZCB0aGUgcmVtYWluaW5nXG4gICAgICogdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjYXBpdGFsaXplLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNhcGl0YWxpemVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYXBpdGFsaXplKCdGUkVEJyk7XG4gICAgICogLy8gPT4gJ0ZyZWQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgICAgIHJldHVybiB1cHBlckZpcnN0KHRvU3RyaW5nKHN0cmluZykudG9Mb3dlckNhc2UoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVidXJycyBgc3RyaW5nYCBieSBjb252ZXJ0aW5nXG4gICAgICogW0xhdGluLTEgU3VwcGxlbWVudF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGF0aW4tMV9TdXBwbGVtZW50XyhVbmljb2RlX2Jsb2NrKSNDaGFyYWN0ZXJfdGFibGUpXG4gICAgICogYW5kIFtMYXRpbiBFeHRlbmRlZC1BXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXRpbl9FeHRlbmRlZC1BKVxuICAgICAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycyBhbmQgcmVtb3ZpbmdcbiAgICAgKiBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3MpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGRlYnVyci5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVidXJyKCdkw6lqw6AgdnUnKTtcbiAgICAgKiAvLyA9PiAnZGVqYSB2dSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWJ1cnIoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIHN0cmluZyAmJiBzdHJpbmcucmVwbGFjZShyZUxhdGluLCBkZWJ1cnJMZXR0ZXIpLnJlcGxhY2UocmVDb21ib01hcmssICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHN0cmluZ2AgZW5kcyB3aXRoIHRoZSBnaXZlbiB0YXJnZXQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt0YXJnZXRdIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3Bvc2l0aW9uPXN0cmluZy5sZW5ndGhdIFRoZSBwb3NpdGlvbiB0byBzZWFyY2ggdXAgdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBzdHJpbmdgIGVuZHMgd2l0aCBgdGFyZ2V0YCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdiJywgMik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVuZHNXaXRoKHN0cmluZywgdGFyZ2V0LCBwb3NpdGlvbikge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHRhcmdldCA9IGJhc2VUb1N0cmluZyh0YXJnZXQpO1xuXG4gICAgICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPT09IHVuZGVmaW5lZFxuICAgICAgICA/IGxlbmd0aFxuICAgICAgICA6IGJhc2VDbGFtcCh0b0ludGVnZXIocG9zaXRpb24pLCAwLCBsZW5ndGgpO1xuXG4gICAgICB2YXIgZW5kID0gcG9zaXRpb247XG4gICAgICBwb3NpdGlvbiAtPSB0YXJnZXQubGVuZ3RoO1xuICAgICAgcmV0dXJuIHBvc2l0aW9uID49IDAgJiYgc3RyaW5nLnNsaWNlKHBvc2l0aW9uLCBlbmQpID09IHRhcmdldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgY2hhcmFjdGVycyBcIiZcIiwgXCI8XCIsIFwiPlwiLCAnXCInLCBhbmQgXCInXCIgaW4gYHN0cmluZ2AgdG8gdGhlaXJcbiAgICAgKiBjb3JyZXNwb25kaW5nIEhUTUwgZW50aXRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm8gb3RoZXIgY2hhcmFjdGVycyBhcmUgZXNjYXBlZC4gVG8gZXNjYXBlIGFkZGl0aW9uYWxcbiAgICAgKiBjaGFyYWN0ZXJzIHVzZSBhIHRoaXJkLXBhcnR5IGxpYnJhcnkgbGlrZSBbX2hlX10oaHR0cHM6Ly9tdGhzLmJlL2hlKS5cbiAgICAgKlxuICAgICAqIFRob3VnaCB0aGUgXCI+XCIgY2hhcmFjdGVyIGlzIGVzY2FwZWQgZm9yIHN5bW1ldHJ5LCBjaGFyYWN0ZXJzIGxpa2VcbiAgICAgKiBcIj5cIiBhbmQgXCIvXCIgZG9uJ3QgbmVlZCBlc2NhcGluZyBpbiBIVE1MIGFuZCBoYXZlIG5vIHNwZWNpYWwgbWVhbmluZ1xuICAgICAqIHVubGVzcyB0aGV5J3JlIHBhcnQgb2YgYSB0YWcgb3IgdW5xdW90ZWQgYXR0cmlidXRlIHZhbHVlLiBTZWVcbiAgICAgKiBbTWF0aGlhcyBCeW5lbnMncyBhcnRpY2xlXShodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvYW1iaWd1b3VzLWFtcGVyc2FuZHMpXG4gICAgICogKHVuZGVyIFwic2VtaS1yZWxhdGVkIGZ1biBmYWN0XCIpIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBXaGVuIHdvcmtpbmcgd2l0aCBIVE1MIHlvdSBzaG91bGQgYWx3YXlzXG4gICAgICogW3F1b3RlIGF0dHJpYnV0ZSB2YWx1ZXNdKGh0dHA6Ly93b25rby5jb20vcG9zdC9odG1sLWVzY2FwaW5nKSB0byByZWR1Y2VcbiAgICAgKiBYU1MgdmVjdG9ycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBlc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXNjYXBlKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICdmcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXNjYXBlKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzVW5lc2NhcGVkSHRtbC50ZXN0KHN0cmluZykpXG4gICAgICAgID8gc3RyaW5nLnJlcGxhY2UocmVVbmVzY2FwZWRIdG1sLCBlc2NhcGVIdG1sQ2hhcilcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXNjYXBlcyB0aGUgYFJlZ0V4cGAgc3BlY2lhbCBjaGFyYWN0ZXJzIFwiXlwiLCBcIiRcIiwgXCJcXFwiLCBcIi5cIiwgXCIqXCIsIFwiK1wiLFxuICAgICAqIFwiP1wiLCBcIihcIiwgXCIpXCIsIFwiW1wiLCBcIl1cIiwgXCJ7XCIsIFwifVwiLCBhbmQgXCJ8XCIgaW4gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVzY2FwZVJlZ0V4cCgnW2xvZGFzaF0oaHR0cHM6Ly9sb2Rhc2guY29tLyknKTtcbiAgICAgKiAvLyA9PiAnXFxbbG9kYXNoXFxdXFwoaHR0cHM6Ly9sb2Rhc2hcXC5jb20vXFwpJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVzY2FwZVJlZ0V4cChzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc1JlZ0V4cENoYXIudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW2tlYmFiIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xldHRlcl9jYXNlI1NwZWNpYWxfY2FzZV9zdHlsZXMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUga2ViYWIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICovXG4gICAgdmFyIGtlYmFiQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICctJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBzcGFjZSBzZXBhcmF0ZWQgd29yZHMsIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBsb3dlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCctLUZvby1CYXItLScpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICovXG4gICAgdmFyIGxvd2VyQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICcgJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubG93ZXJGaXJzdCgnRnJlZCcpO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogXy5sb3dlckZpcnN0KCdGUkVEJyk7XG4gICAgICogLy8gPT4gJ2ZSRUQnXG4gICAgICovXG4gICAgdmFyIGxvd2VyRmlyc3QgPSBjcmVhdGVDYXNlRmlyc3QoJ3RvTG93ZXJDYXNlJyk7XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSBsZWZ0IGFuZCByaWdodCBzaWRlcyBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC5cbiAgICAgKiBQYWRkaW5nIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGNhbid0IGJlIGV2ZW5seSBkaXZpZGVkIGJ5IGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCA4KTtcbiAgICAgKiAvLyA9PiAnICBhYmMgICAnXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgOCwgJ18tJyk7XG4gICAgICogLy8gPT4gJ18tYWJjXy1fJ1xuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkKHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIGlmICghbGVuZ3RoIHx8IHN0ckxlbmd0aCA+PSBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBtaWQgPSAobGVuZ3RoIC0gc3RyTGVuZ3RoKSAvIDI7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBjcmVhdGVQYWRkaW5nKG5hdGl2ZUZsb29yKG1pZCksIGNoYXJzKSArXG4gICAgICAgIHN0cmluZyArXG4gICAgICAgIGNyZWF0ZVBhZGRpbmcobmF0aXZlQ2VpbChtaWQpLCBjaGFycylcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgcmlnaHQgc2lkZSBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC4gUGFkZGluZ1xuICAgICAqIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGV4Y2VlZCBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgNik7XG4gICAgICogLy8gPT4gJ2FiYyAgICdcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCA2LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnYWJjXy1fJ1xuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkRW5kKHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIHJldHVybiAobGVuZ3RoICYmIHN0ckxlbmd0aCA8IGxlbmd0aClcbiAgICAgICAgPyAoc3RyaW5nICsgY3JlYXRlUGFkZGluZyhsZW5ndGggLSBzdHJMZW5ndGgsIGNoYXJzKSlcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgbGVmdCBzaWRlIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLiBQYWRkaW5nXG4gICAgICogY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgZXhjZWVkIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDYpO1xuICAgICAqIC8vID0+ICcgICBhYmMnXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCA2LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnXy1fYWJjJ1xuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWRTdGFydChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICByZXR1cm4gKGxlbmd0aCAmJiBzdHJMZW5ndGggPCBsZW5ndGgpXG4gICAgICAgID8gKGNyZWF0ZVBhZGRpbmcobGVuZ3RoIC0gc3RyTGVuZ3RoLCBjaGFycykgKyBzdHJpbmcpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGFuIGludGVnZXIgb2YgdGhlIHNwZWNpZmllZCByYWRpeC4gSWYgYHJhZGl4YCBpc1xuICAgICAqIGB1bmRlZmluZWRgIG9yIGAwYCwgYSBgcmFkaXhgIG9mIGAxMGAgaXMgdXNlZCB1bmxlc3MgYHZhbHVlYCBpcyBhXG4gICAgICogaGV4YWRlY2ltYWwsIGluIHdoaWNoIGNhc2UgYSBgcmFkaXhgIG9mIGAxNmAgaXMgdXNlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBhbGlnbnMgd2l0aCB0aGVcbiAgICAgKiBbRVM1IGltcGxlbWVudGF0aW9uXShodHRwczovL2VzNS5naXRodWIuaW8vI3gxNS4xLjIuMikgb2YgYHBhcnNlSW50YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3JhZGl4PTEwXSBUaGUgcmFkaXggdG8gaW50ZXJwcmV0IGB2YWx1ZWAgYnkuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYXJzZUludCgnMDgnKTtcbiAgICAgKiAvLyA9PiA4XG4gICAgICpcbiAgICAgKiBfLm1hcChbJzYnLCAnMDgnLCAnMTAnXSwgXy5wYXJzZUludCk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhcnNlSW50KHN0cmluZywgcmFkaXgsIGd1YXJkKSB7XG4gICAgICBpZiAoZ3VhcmQgfHwgcmFkaXggPT0gbnVsbCkge1xuICAgICAgICByYWRpeCA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHJhZGl4KSB7XG4gICAgICAgIHJhZGl4ID0gK3JhZGl4O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZVBhcnNlSW50KHRvU3RyaW5nKHN0cmluZykucmVwbGFjZShyZVRyaW1TdGFydCwgJycpLCByYWRpeCB8fCAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBlYXRzIHRoZSBnaXZlbiBzdHJpbmcgYG5gIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHJlcGVhdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiB0aW1lcyB0byByZXBlYXQgdGhlIHN0cmluZy5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJlcGVhdGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yZXBlYXQoJyonLCAzKTtcbiAgICAgKiAvLyA9PiAnKioqJ1xuICAgICAqXG4gICAgICogXy5yZXBlYXQoJ2FiYycsIDIpO1xuICAgICAqIC8vID0+ICdhYmNhYmMnXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnYWJjJywgMCk7XG4gICAgICogLy8gPT4gJydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXBlYXQoc3RyaW5nLCBuLCBndWFyZCkge1xuICAgICAgaWYgKChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgbiwgZ3VhcmQpIDogbiA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBuID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVJlcGVhdCh0b1N0cmluZyhzdHJpbmcpLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlcyBtYXRjaGVzIGZvciBgcGF0dGVybmAgaW4gYHN0cmluZ2Agd2l0aCBgcmVwbGFjZW1lbnRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BTdHJpbmcjcmVwbGFjZWBdKGh0dHBzOi8vbWRuLmlvL1N0cmluZy9yZXBsYWNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBwYXR0ZXJuIFRoZSBwYXR0ZXJuIHRvIHJlcGxhY2UuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IHJlcGxhY2VtZW50IFRoZSBtYXRjaCByZXBsYWNlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBtb2RpZmllZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVwbGFjZSgnSGkgRnJlZCcsICdGcmVkJywgJ0Jhcm5leScpO1xuICAgICAqIC8vID0+ICdIaSBCYXJuZXknXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVwbGFjZSgpIHtcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgIHN0cmluZyA9IHRvU3RyaW5nKGFyZ3NbMF0pO1xuXG4gICAgICByZXR1cm4gYXJncy5sZW5ndGggPCAzID8gc3RyaW5nIDogc3RyaW5nLnJlcGxhY2UoYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBbc25ha2UgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU25ha2VfY2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzbmFrZSBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnLS1GT08tQkFSLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKi9cbiAgICB2YXIgc25ha2VDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJ18nIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogU3BsaXRzIGBzdHJpbmdgIGJ5IGBzZXBhcmF0b3JgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BTdHJpbmcjc3BsaXRgXShodHRwczovL21kbi5pby9TdHJpbmcvc3BsaXQpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHNwbGl0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gc2VwYXJhdG9yIFRoZSBzZXBhcmF0b3IgcGF0dGVybiB0byBzcGxpdCBieS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xpbWl0XSBUaGUgbGVuZ3RoIHRvIHRydW5jYXRlIHJlc3VsdHMgdG8uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzdHJpbmcgc2VnbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3BsaXQoJ2EtYi1jJywgJy0nLCAyKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3BsaXQoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICBpZiAobGltaXQgJiYgdHlwZW9mIGxpbWl0ICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCkpIHtcbiAgICAgICAgc2VwYXJhdG9yID0gbGltaXQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBsaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfQVJSQVlfTEVOR1RIIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAoIWxpbWl0KSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChcbiAgICAgICAgICAgIHR5cGVvZiBzZXBhcmF0b3IgPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgIChzZXBhcmF0b3IgIT0gbnVsbCAmJiAhaXNSZWdFeHAoc2VwYXJhdG9yKSlcbiAgICAgICAgICApKSB7XG4gICAgICAgIHNlcGFyYXRvciA9IGJhc2VUb1N0cmluZyhzZXBhcmF0b3IpO1xuICAgICAgICBpZiAoIXNlcGFyYXRvciAmJiBoYXNVbmljb2RlKHN0cmluZykpIHtcbiAgICAgICAgICByZXR1cm4gY2FzdFNsaWNlKHN0cmluZ1RvQXJyYXkoc3RyaW5nKSwgMCwgbGltaXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaW5nLnNwbGl0KHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW3N0YXJ0IGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xldHRlcl9jYXNlI1N0eWxpc3RpY19vcl9zcGVjaWFsaXNlZF91c2FnZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdGFydCBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICdGb28gQmFyJ1xuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdGb28gQmFyJ1xuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICovXG4gICAgdmFyIHN0YXJ0Q2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICcgJyA6ICcnKSArIHVwcGVyRmlyc3Qod29yZCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHN0cmluZ2Agc3RhcnRzIHdpdGggdGhlIGdpdmVuIHRhcmdldCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3RhcmdldF0gVGhlIHN0cmluZyB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcG9zaXRpb249MF0gVGhlIHBvc2l0aW9uIHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgc3RyaW5nYCBzdGFydHMgd2l0aCBgdGFyZ2V0YCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdiJywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc3RyaW5nLCB0YXJnZXQsIHBvc2l0aW9uKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiA9PSBudWxsXG4gICAgICAgID8gMFxuICAgICAgICA6IGJhc2VDbGFtcCh0b0ludGVnZXIocG9zaXRpb24pLCAwLCBzdHJpbmcubGVuZ3RoKTtcblxuICAgICAgdGFyZ2V0ID0gYmFzZVRvU3RyaW5nKHRhcmdldCk7XG4gICAgICByZXR1cm4gc3RyaW5nLnNsaWNlKHBvc2l0aW9uLCBwb3NpdGlvbiArIHRhcmdldC5sZW5ndGgpID09IHRhcmdldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY29tcGlsZWQgdGVtcGxhdGUgZnVuY3Rpb24gdGhhdCBjYW4gaW50ZXJwb2xhdGUgZGF0YSBwcm9wZXJ0aWVzXG4gICAgICogaW4gXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlcnMsIEhUTUwtZXNjYXBlIGludGVycG9sYXRlZCBkYXRhIHByb3BlcnRpZXMgaW5cbiAgICAgKiBcImVzY2FwZVwiIGRlbGltaXRlcnMsIGFuZCBleGVjdXRlIEphdmFTY3JpcHQgaW4gXCJldmFsdWF0ZVwiIGRlbGltaXRlcnMuIERhdGFcbiAgICAgKiBwcm9wZXJ0aWVzIG1heSBiZSBhY2Nlc3NlZCBhcyBmcmVlIHZhcmlhYmxlcyBpbiB0aGUgdGVtcGxhdGUuIElmIGEgc2V0dGluZ1xuICAgICAqIG9iamVjdCBpcyBnaXZlbiwgaXQgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIGBfLnRlbXBsYXRlU2V0dGluZ3NgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJbiB0aGUgZGV2ZWxvcG1lbnQgYnVpbGQgYF8udGVtcGxhdGVgIHV0aWxpemVzXG4gICAgICogW3NvdXJjZVVSTHNdKGh0dHA6Ly93d3cuaHRtbDVyb2Nrcy5jb20vZW4vdHV0b3JpYWxzL2RldmVsb3BlcnRvb2xzL3NvdXJjZW1hcHMvI3RvYy1zb3VyY2V1cmwpXG4gICAgICogZm9yIGVhc2llciBkZWJ1Z2dpbmcuXG4gICAgICpcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBwcmVjb21waWxpbmcgdGVtcGxhdGVzIHNlZVxuICAgICAqIFtsb2Rhc2gncyBjdXN0b20gYnVpbGRzIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vbG9kYXNoLmNvbS9jdXN0b20tYnVpbGRzKS5cbiAgICAgKlxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIENocm9tZSBleHRlbnNpb24gc2FuZGJveGVzIHNlZVxuICAgICAqIFtDaHJvbWUncyBleHRlbnNpb25zIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vZXh0ZW5zaW9ucy9zYW5kYm94aW5nRXZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSB0ZW1wbGF0ZSBzdHJpbmcuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmVzY2FwZT1fLnRlbXBsYXRlU2V0dGluZ3MuZXNjYXBlXVxuICAgICAqICBUaGUgSFRNTCBcImVzY2FwZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXZhbHVhdGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmV2YWx1YXRlXVxuICAgICAqICBUaGUgXCJldmFsdWF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuaW1wb3J0cz1fLnRlbXBsYXRlU2V0dGluZ3MuaW1wb3J0c11cbiAgICAgKiAgQW4gb2JqZWN0IHRvIGltcG9ydCBpbnRvIHRoZSB0ZW1wbGF0ZSBhcyBmcmVlIHZhcmlhYmxlcy5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuaW50ZXJwb2xhdGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmludGVycG9sYXRlXVxuICAgICAqICBUaGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuc291cmNlVVJMPSdsb2Rhc2gudGVtcGxhdGVTb3VyY2VzW25dJ11cbiAgICAgKiAgVGhlIHNvdXJjZVVSTCBvZiB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnZhcmlhYmxlPSdvYmonXVxuICAgICAqICBUaGUgZGF0YSBvYmplY3QgdmFyaWFibGUgbmFtZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY29tcGlsZWQgdGVtcGxhdGUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlciB0byBjcmVhdGUgYSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyA8JT0gdXNlciAlPiEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ2ZyZWQnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgSFRNTCBcImVzY2FwZVwiIGRlbGltaXRlciB0byBlc2NhcGUgZGF0YSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPGI+PCUtIHZhbHVlICU+PC9iPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3ZhbHVlJzogJzxzY3JpcHQ+JyB9KTtcbiAgICAgKiAvLyA9PiAnPGI+Jmx0O3NjcmlwdCZndDs8L2I+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBcImV2YWx1YXRlXCIgZGVsaW1pdGVyIHRvIGV4ZWN1dGUgSmF2YVNjcmlwdCBhbmQgZ2VuZXJhdGUgSFRNTC5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JSBfLmZvckVhY2godXNlcnMsIGZ1bmN0aW9uKHVzZXIpIHsgJT48bGk+PCUtIHVzZXIgJT48L2xpPjwlIH0pOyAlPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXJzJzogWydmcmVkJywgJ2Jhcm5leSddIH0pO1xuICAgICAqIC8vID0+ICc8bGk+ZnJlZDwvbGk+PGxpPmJhcm5leTwvbGk+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBpbnRlcm5hbCBgcHJpbnRgIGZ1bmN0aW9uIGluIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXJzLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlIHByaW50KFwiaGVsbG8gXCIgKyB1c2VyKTsgJT4hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdiYXJuZXknIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBiYXJuZXkhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBFUyB0ZW1wbGF0ZSBsaXRlcmFsIGRlbGltaXRlciBhcyBhbiBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIC8vIERpc2FibGUgc3VwcG9ydCBieSByZXBsYWNpbmcgdGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gJHsgdXNlciB9IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAncGViYmxlcycgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIHBlYmJsZXMhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIGJhY2tzbGFzaGVzIHRvIHRyZWF0IGRlbGltaXRlcnMgYXMgcGxhaW4gdGV4dC5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JT0gXCJcXFxcPCUtIHZhbHVlICVcXFxcPlwiICU+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndmFsdWUnOiAnaWdub3JlZCcgfSk7XG4gICAgICogLy8gPT4gJzwlLSB2YWx1ZSAlPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYGltcG9ydHNgIG9wdGlvbiB0byBpbXBvcnQgYGpRdWVyeWAgYXMgYGpxYC5cbiAgICAgKiB2YXIgdGV4dCA9ICc8JSBqcS5lYWNoKHVzZXJzLCBmdW5jdGlvbih1c2VyKSB7ICU+PGxpPjwlLSB1c2VyICU+PC9saT48JSB9KTsgJT4nO1xuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUodGV4dCwgeyAnaW1wb3J0cyc6IHsgJ2pxJzogalF1ZXJ5IH0gfSk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcnMnOiBbJ2ZyZWQnLCAnYmFybmV5J10gfSk7XG4gICAgICogLy8gPT4gJzxsaT5mcmVkPC9saT48bGk+YmFybmV5PC9saT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBzb3VyY2VVUkxgIG9wdGlvbiB0byBzcGVjaWZ5IGEgY3VzdG9tIHNvdXJjZVVSTCBmb3IgdGhlIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIDwlPSB1c2VyICU+IScsIHsgJ3NvdXJjZVVSTCc6ICcvYmFzaWMvZ3JlZXRpbmcuanN0JyB9KTtcbiAgICAgKiBjb21waWxlZChkYXRhKTtcbiAgICAgKiAvLyA9PiBGaW5kIHRoZSBzb3VyY2Ugb2YgXCJncmVldGluZy5qc3RcIiB1bmRlciB0aGUgU291cmNlcyB0YWIgb3IgUmVzb3VyY2VzIHBhbmVsIG9mIHRoZSB3ZWIgaW5zcGVjdG9yLlxuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgdmFyaWFibGVgIG9wdGlvbiB0byBlbnN1cmUgYSB3aXRoLXN0YXRlbWVudCBpc24ndCB1c2VkIGluIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoaSA8JT0gZGF0YS51c2VyICU+IScsIHsgJ3ZhcmlhYmxlJzogJ2RhdGEnIH0pO1xuICAgICAqIGNvbXBpbGVkLnNvdXJjZTtcbiAgICAgKiAvLyA9PiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICogLy8gICB2YXIgX190LCBfX3AgPSAnJztcbiAgICAgKiAvLyAgIF9fcCArPSAnaGkgJyArICgoX190ID0gKCBkYXRhLnVzZXIgKSkgPT0gbnVsbCA/ICcnIDogX190KSArICchJztcbiAgICAgKiAvLyAgIHJldHVybiBfX3A7XG4gICAgICogLy8gfVxuICAgICAqXG4gICAgICogLy8gVXNlIGN1c3RvbSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLlxuICAgICAqIF8udGVtcGxhdGVTZXR0aW5ncy5pbnRlcnBvbGF0ZSA9IC97eyhbXFxzXFxTXSs/KX19L2c7XG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8ge3sgdXNlciB9fSEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ211c3RhY2hlJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gbXVzdGFjaGUhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgc291cmNlYCBwcm9wZXJ0eSB0byBpbmxpbmUgY29tcGlsZWQgdGVtcGxhdGVzIGZvciBtZWFuaW5nZnVsXG4gICAgICogLy8gbGluZSBudW1iZXJzIGluIGVycm9yIG1lc3NhZ2VzIGFuZCBzdGFjayB0cmFjZXMuXG4gICAgICogZnMud3JpdGVGaWxlU3luYyhwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ2pzdC5qcycpLCAnXFxcbiAgICAgKiAgIHZhciBKU1QgPSB7XFxcbiAgICAgKiAgICAgXCJtYWluXCI6ICcgKyBfLnRlbXBsYXRlKG1haW5UZXh0KS5zb3VyY2UgKyAnXFxcbiAgICAgKiAgIH07XFxcbiAgICAgKiAnKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0ZW1wbGF0ZShzdHJpbmcsIG9wdGlvbnMsIGd1YXJkKSB7XG4gICAgICAvLyBCYXNlZCBvbiBKb2huIFJlc2lnJ3MgYHRtcGxgIGltcGxlbWVudGF0aW9uXG4gICAgICAvLyAoaHR0cDovL2Vqb2huLm9yZy9ibG9nL2phdmFzY3JpcHQtbWljcm8tdGVtcGxhdGluZy8pXG4gICAgICAvLyBhbmQgTGF1cmEgRG9rdG9yb3ZhJ3MgZG9ULmpzIChodHRwczovL2dpdGh1Yi5jb20vb2xhZG8vZG9UKS5cbiAgICAgIHZhciBzZXR0aW5ncyA9IGxvZGFzaC50ZW1wbGF0ZVNldHRpbmdzO1xuXG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBvcHRpb25zLCBndWFyZCkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBvcHRpb25zID0gYXNzaWduSW5XaXRoKHt9LCBvcHRpb25zLCBzZXR0aW5ncywgY3VzdG9tRGVmYXVsdHNBc3NpZ25Jbik7XG5cbiAgICAgIHZhciBpbXBvcnRzID0gYXNzaWduSW5XaXRoKHt9LCBvcHRpb25zLmltcG9ydHMsIHNldHRpbmdzLmltcG9ydHMsIGN1c3RvbURlZmF1bHRzQXNzaWduSW4pLFxuICAgICAgICAgIGltcG9ydHNLZXlzID0ga2V5cyhpbXBvcnRzKSxcbiAgICAgICAgICBpbXBvcnRzVmFsdWVzID0gYmFzZVZhbHVlcyhpbXBvcnRzLCBpbXBvcnRzS2V5cyk7XG5cbiAgICAgIHZhciBpc0VzY2FwaW5nLFxuICAgICAgICAgIGlzRXZhbHVhdGluZyxcbiAgICAgICAgICBpbmRleCA9IDAsXG4gICAgICAgICAgaW50ZXJwb2xhdGUgPSBvcHRpb25zLmludGVycG9sYXRlIHx8IHJlTm9NYXRjaCxcbiAgICAgICAgICBzb3VyY2UgPSBcIl9fcCArPSAnXCI7XG5cbiAgICAgIC8vIENvbXBpbGUgdGhlIHJlZ2V4cCB0byBtYXRjaCBlYWNoIGRlbGltaXRlci5cbiAgICAgIHZhciByZURlbGltaXRlcnMgPSBSZWdFeHAoXG4gICAgICAgIChvcHRpb25zLmVzY2FwZSB8fCByZU5vTWF0Y2gpLnNvdXJjZSArICd8JyArXG4gICAgICAgIGludGVycG9sYXRlLnNvdXJjZSArICd8JyArXG4gICAgICAgIChpbnRlcnBvbGF0ZSA9PT0gcmVJbnRlcnBvbGF0ZSA/IHJlRXNUZW1wbGF0ZSA6IHJlTm9NYXRjaCkuc291cmNlICsgJ3wnICtcbiAgICAgICAgKG9wdGlvbnMuZXZhbHVhdGUgfHwgcmVOb01hdGNoKS5zb3VyY2UgKyAnfCQnXG4gICAgICAsICdnJyk7XG5cbiAgICAgIC8vIFVzZSBhIHNvdXJjZVVSTCBmb3IgZWFzaWVyIGRlYnVnZ2luZy5cbiAgICAgIC8vIFRoZSBzb3VyY2VVUkwgZ2V0cyBpbmplY3RlZCBpbnRvIHRoZSBzb3VyY2UgdGhhdCdzIGV2YWwtZWQsIHNvIGJlIGNhcmVmdWxcbiAgICAgIC8vIHRvIG5vcm1hbGl6ZSBhbGwga2luZHMgb2Ygd2hpdGVzcGFjZSwgc28gZS5nLiBuZXdsaW5lcyAoYW5kIHVuaWNvZGUgdmVyc2lvbnMgb2YgaXQpIGNhbid0IHNuZWFrIGluXG4gICAgICAvLyBhbmQgZXNjYXBlIHRoZSBjb21tZW50LCB0aHVzIGluamVjdGluZyBjb2RlIHRoYXQgZ2V0cyBldmFsZWQuXG4gICAgICB2YXIgc291cmNlVVJMID0gJy8vIyBzb3VyY2VVUkw9JyArXG4gICAgICAgIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsICdzb3VyY2VVUkwnKVxuICAgICAgICAgID8gKG9wdGlvbnMuc291cmNlVVJMICsgJycpLnJlcGxhY2UoL1xccy9nLCAnICcpXG4gICAgICAgICAgOiAoJ2xvZGFzaC50ZW1wbGF0ZVNvdXJjZXNbJyArICgrK3RlbXBsYXRlQ291bnRlcikgKyAnXScpXG4gICAgICAgICkgKyAnXFxuJztcblxuICAgICAgc3RyaW5nLnJlcGxhY2UocmVEZWxpbWl0ZXJzLCBmdW5jdGlvbihtYXRjaCwgZXNjYXBlVmFsdWUsIGludGVycG9sYXRlVmFsdWUsIGVzVGVtcGxhdGVWYWx1ZSwgZXZhbHVhdGVWYWx1ZSwgb2Zmc2V0KSB7XG4gICAgICAgIGludGVycG9sYXRlVmFsdWUgfHwgKGludGVycG9sYXRlVmFsdWUgPSBlc1RlbXBsYXRlVmFsdWUpO1xuXG4gICAgICAgIC8vIEVzY2FwZSBjaGFyYWN0ZXJzIHRoYXQgY2FuJ3QgYmUgaW5jbHVkZWQgaW4gc3RyaW5nIGxpdGVyYWxzLlxuICAgICAgICBzb3VyY2UgKz0gc3RyaW5nLnNsaWNlKGluZGV4LCBvZmZzZXQpLnJlcGxhY2UocmVVbmVzY2FwZWRTdHJpbmcsIGVzY2FwZVN0cmluZ0NoYXIpO1xuXG4gICAgICAgIC8vIFJlcGxhY2UgZGVsaW1pdGVycyB3aXRoIHNuaXBwZXRzLlxuICAgICAgICBpZiAoZXNjYXBlVmFsdWUpIHtcbiAgICAgICAgICBpc0VzY2FwaW5nID0gdHJ1ZTtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInICtcXG5fX2UoXCIgKyBlc2NhcGVWYWx1ZSArIFwiKSArXFxuJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmFsdWF0ZVZhbHVlKSB7XG4gICAgICAgICAgaXNFdmFsdWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInO1xcblwiICsgZXZhbHVhdGVWYWx1ZSArIFwiO1xcbl9fcCArPSAnXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGludGVycG9sYXRlVmFsdWUpIHtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInICtcXG4oKF9fdCA9IChcIiArIGludGVycG9sYXRlVmFsdWUgKyBcIikpID09IG51bGwgPyAnJyA6IF9fdCkgK1xcbidcIjtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IG9mZnNldCArIG1hdGNoLmxlbmd0aDtcblxuICAgICAgICAvLyBUaGUgSlMgZW5naW5lIGVtYmVkZGVkIGluIEFkb2JlIHByb2R1Y3RzIG5lZWRzIGBtYXRjaGAgcmV0dXJuZWQgaW5cbiAgICAgICAgLy8gb3JkZXIgdG8gcHJvZHVjZSB0aGUgY29ycmVjdCBgb2Zmc2V0YCB2YWx1ZS5cbiAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgfSk7XG5cbiAgICAgIHNvdXJjZSArPSBcIic7XFxuXCI7XG5cbiAgICAgIC8vIElmIGB2YXJpYWJsZWAgaXMgbm90IHNwZWNpZmllZCB3cmFwIGEgd2l0aC1zdGF0ZW1lbnQgYXJvdW5kIHRoZSBnZW5lcmF0ZWRcbiAgICAgIC8vIGNvZGUgdG8gYWRkIHRoZSBkYXRhIG9iamVjdCB0byB0aGUgdG9wIG9mIHRoZSBzY29wZSBjaGFpbi5cbiAgICAgIHZhciB2YXJpYWJsZSA9IGhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucywgJ3ZhcmlhYmxlJykgJiYgb3B0aW9ucy52YXJpYWJsZTtcbiAgICAgIGlmICghdmFyaWFibGUpIHtcbiAgICAgICAgc291cmNlID0gJ3dpdGggKG9iaikge1xcbicgKyBzb3VyY2UgKyAnXFxufVxcbic7XG4gICAgICB9XG4gICAgICAvLyBUaHJvdyBhbiBlcnJvciBpZiBhIGZvcmJpZGRlbiBjaGFyYWN0ZXIgd2FzIGZvdW5kIGluIGB2YXJpYWJsZWAsIHRvIHByZXZlbnRcbiAgICAgIC8vIHBvdGVudGlhbCBjb21tYW5kIGluamVjdGlvbiBhdHRhY2tzLlxuICAgICAgZWxzZSBpZiAocmVGb3JiaWRkZW5JZGVudGlmaWVyQ2hhcnMudGVzdCh2YXJpYWJsZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKElOVkFMSURfVEVNUExfVkFSX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuXG4gICAgICAvLyBDbGVhbnVwIGNvZGUgYnkgc3RyaXBwaW5nIGVtcHR5IHN0cmluZ3MuXG4gICAgICBzb3VyY2UgPSAoaXNFdmFsdWF0aW5nID8gc291cmNlLnJlcGxhY2UocmVFbXB0eVN0cmluZ0xlYWRpbmcsICcnKSA6IHNvdXJjZSlcbiAgICAgICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ01pZGRsZSwgJyQxJylcbiAgICAgICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ1RyYWlsaW5nLCAnJDE7Jyk7XG5cbiAgICAgIC8vIEZyYW1lIGNvZGUgYXMgdGhlIGZ1bmN0aW9uIGJvZHkuXG4gICAgICBzb3VyY2UgPSAnZnVuY3Rpb24oJyArICh2YXJpYWJsZSB8fCAnb2JqJykgKyAnKSB7XFxuJyArXG4gICAgICAgICh2YXJpYWJsZVxuICAgICAgICAgID8gJydcbiAgICAgICAgICA6ICdvYmogfHwgKG9iaiA9IHt9KTtcXG4nXG4gICAgICAgICkgK1xuICAgICAgICBcInZhciBfX3QsIF9fcCA9ICcnXCIgK1xuICAgICAgICAoaXNFc2NhcGluZ1xuICAgICAgICAgICA/ICcsIF9fZSA9IF8uZXNjYXBlJ1xuICAgICAgICAgICA6ICcnXG4gICAgICAgICkgK1xuICAgICAgICAoaXNFdmFsdWF0aW5nXG4gICAgICAgICAgPyAnLCBfX2ogPSBBcnJheS5wcm90b3R5cGUuam9pbjtcXG4nICtcbiAgICAgICAgICAgIFwiZnVuY3Rpb24gcHJpbnQoKSB7IF9fcCArPSBfX2ouY2FsbChhcmd1bWVudHMsICcnKSB9XFxuXCJcbiAgICAgICAgICA6ICc7XFxuJ1xuICAgICAgICApICtcbiAgICAgICAgc291cmNlICtcbiAgICAgICAgJ3JldHVybiBfX3BcXG59JztcblxuICAgICAgdmFyIHJlc3VsdCA9IGF0dGVtcHQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbihpbXBvcnRzS2V5cywgc291cmNlVVJMICsgJ3JldHVybiAnICsgc291cmNlKVxuICAgICAgICAgIC5hcHBseSh1bmRlZmluZWQsIGltcG9ydHNWYWx1ZXMpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFByb3ZpZGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uJ3Mgc291cmNlIGJ5IGl0cyBgdG9TdHJpbmdgIG1ldGhvZCBvclxuICAgICAgLy8gdGhlIGBzb3VyY2VgIHByb3BlcnR5IGFzIGEgY29udmVuaWVuY2UgZm9yIGlubGluaW5nIGNvbXBpbGVkIHRlbXBsYXRlcy5cbiAgICAgIHJlc3VsdC5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICBpZiAoaXNFcnJvcihyZXN1bHQpKSB7XG4gICAgICAgIHRocm93IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIGEgd2hvbGUsIHRvIGxvd2VyIGNhc2UganVzdCBsaWtlXG4gICAgICogW1N0cmluZyN0b0xvd2VyQ2FzZV0oaHR0cHM6Ly9tZG4uaW8vdG9Mb3dlckNhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbG93ZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTG93ZXIoJy0tRm9vLUJhci0tJyk7XG4gICAgICogLy8gPT4gJy0tZm9vLWJhci0tJ1xuICAgICAqXG4gICAgICogXy50b0xvd2VyKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vYmFyJ1xuICAgICAqXG4gICAgICogXy50b0xvd2VyKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdfX2Zvb19iYXJfXydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0xvd2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcodmFsdWUpLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIGEgd2hvbGUsIHRvIHVwcGVyIGNhc2UganVzdCBsaWtlXG4gICAgICogW1N0cmluZyN0b1VwcGVyQ2FzZV0oaHR0cHM6Ly9tZG4uaW8vdG9VcHBlckNhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdXBwZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvVXBwZXIoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJy0tRk9PLUJBUi0tJ1xuICAgICAqXG4gICAgICogXy50b1VwcGVyKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PQkFSJ1xuICAgICAqXG4gICAgICogXy50b1VwcGVyKCdfX2Zvb19iYXJfXycpO1xuICAgICAqIC8vID0+ICdfX0ZPT19CQVJfXydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1VwcGVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcodmFsdWUpLnRvVXBwZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltKCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKlxuICAgICAqIF8udHJpbSgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnICBmb28gICcsICcgIGJhciAgJ10sIF8udHJpbSk7XG4gICAgICogLy8gPT4gWydmb28nLCAnYmFyJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltKHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VUcmltKHN0cmluZyk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIGNoclN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KGNoYXJzKSxcbiAgICAgICAgICBzdGFydCA9IGNoYXJzU3RhcnRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSxcbiAgICAgICAgICBlbmQgPSBjaGFyc0VuZEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpICsgMTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCBzdGFydCwgZW5kKS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRyYWlsaW5nIHdoaXRlc3BhY2Ugb3Igc3BlY2lmaWVkIGNoYXJhY3RlcnMgZnJvbSBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB0cmltLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9d2hpdGVzcGFjZV0gVGhlIGNoYXJhY3RlcnMgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyaW1FbmQoJyAgYWJjICAnKTtcbiAgICAgKiAvLyA9PiAnICBhYmMnXG4gICAgICpcbiAgICAgKiBfLnRyaW1FbmQoJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICctXy1hYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbUVuZChzdHJpbmcsIGNoYXJzLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKGd1YXJkIHx8IGNoYXJzID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcuc2xpY2UoMCwgdHJpbW1lZEVuZEluZGV4KHN0cmluZykgKyAxKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgZW5kID0gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBzdHJpbmdUb0FycmF5KGNoYXJzKSkgKyAxO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDAsIGVuZCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBsZWFkaW5nIHdoaXRlc3BhY2Ugb3Igc3BlY2lmaWVkIGNoYXJhY3RlcnMgZnJvbSBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB0cmltLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9d2hpdGVzcGFjZV0gVGhlIGNoYXJhY3RlcnMgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyaW1TdGFydCgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICdhYmMgICdcbiAgICAgKlxuICAgICAqIF8udHJpbVN0YXJ0KCctXy1hYmMtXy0nLCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnYWJjLV8tJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaW1TdGFydChzdHJpbmcsIGNoYXJzLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKGd1YXJkIHx8IGNoYXJzID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZShyZVRyaW1TdGFydCwgJycpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBzdGFydCA9IGNoYXJzU3RhcnRJbmRleChzdHJTeW1ib2xzLCBzdHJpbmdUb0FycmF5KGNoYXJzKSk7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgc3RhcnQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRydW5jYXRlcyBgc3RyaW5nYCBpZiBpdCdzIGxvbmdlciB0aGFuIHRoZSBnaXZlbiBtYXhpbXVtIHN0cmluZyBsZW5ndGguXG4gICAgICogVGhlIGxhc3QgY2hhcmFjdGVycyBvZiB0aGUgdHJ1bmNhdGVkIHN0cmluZyBhcmUgcmVwbGFjZWQgd2l0aCB0aGUgb21pc3Npb25cbiAgICAgKiBzdHJpbmcgd2hpY2ggZGVmYXVsdHMgdG8gXCIuLi5cIi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB0cnVuY2F0ZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubGVuZ3RoPTMwXSBUaGUgbWF4aW11bSBzdHJpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5vbWlzc2lvbj0nLi4uJ10gVGhlIHN0cmluZyB0byBpbmRpY2F0ZSB0ZXh0IGlzIG9taXR0ZWQuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBbb3B0aW9ucy5zZXBhcmF0b3JdIFRoZSBzZXBhcmF0b3IgcGF0dGVybiB0byB0cnVuY2F0ZSB0by5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cnVuY2F0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJyk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hiby4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnbGVuZ3RoJzogMjQsXG4gICAgICogICAnc2VwYXJhdG9yJzogJyAnXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwuLi4nXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJywge1xuICAgICAqICAgJ2xlbmd0aCc6IDI0LFxuICAgICAqICAgJ3NlcGFyYXRvcic6IC8sPyArL1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUuLi4nXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJywge1xuICAgICAqICAgJ29taXNzaW9uJzogJyBbLi4uXSdcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnIFsuLi5dJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRydW5jYXRlKHN0cmluZywgb3B0aW9ucykge1xuICAgICAgdmFyIGxlbmd0aCA9IERFRkFVTFRfVFJVTkNfTEVOR1RILFxuICAgICAgICAgIG9taXNzaW9uID0gREVGQVVMVF9UUlVOQ19PTUlTU0lPTjtcblxuICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIHZhciBzZXBhcmF0b3IgPSAnc2VwYXJhdG9yJyBpbiBvcHRpb25zID8gb3B0aW9ucy5zZXBhcmF0b3IgOiBzZXBhcmF0b3I7XG4gICAgICAgIGxlbmd0aCA9ICdsZW5ndGgnIGluIG9wdGlvbnMgPyB0b0ludGVnZXIob3B0aW9ucy5sZW5ndGgpIDogbGVuZ3RoO1xuICAgICAgICBvbWlzc2lvbiA9ICdvbWlzc2lvbicgaW4gb3B0aW9ucyA/IGJhc2VUb1N0cmluZyhvcHRpb25zLm9taXNzaW9uKSA6IG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gICAgICBpZiAoaGFzVW5pY29kZShzdHJpbmcpKSB7XG4gICAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpO1xuICAgICAgICBzdHJMZW5ndGggPSBzdHJTeW1ib2xzLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGlmIChsZW5ndGggPj0gc3RyTGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgZW5kID0gbGVuZ3RoIC0gc3RyaW5nU2l6ZShvbWlzc2lvbik7XG4gICAgICBpZiAoZW5kIDwgMSkge1xuICAgICAgICByZXR1cm4gb21pc3Npb247XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gc3RyU3ltYm9sc1xuICAgICAgICA/IGNhc3RTbGljZShzdHJTeW1ib2xzLCAwLCBlbmQpLmpvaW4oJycpXG4gICAgICAgIDogc3RyaW5nLnNsaWNlKDAsIGVuZCk7XG5cbiAgICAgIGlmIChzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0ICsgb21pc3Npb247XG4gICAgICB9XG4gICAgICBpZiAoc3RyU3ltYm9scykge1xuICAgICAgICBlbmQgKz0gKHJlc3VsdC5sZW5ndGggLSBlbmQpO1xuICAgICAgfVxuICAgICAgaWYgKGlzUmVnRXhwKHNlcGFyYXRvcikpIHtcbiAgICAgICAgaWYgKHN0cmluZy5zbGljZShlbmQpLnNlYXJjaChzZXBhcmF0b3IpKSB7XG4gICAgICAgICAgdmFyIG1hdGNoLFxuICAgICAgICAgICAgICBzdWJzdHJpbmcgPSByZXN1bHQ7XG5cbiAgICAgICAgICBpZiAoIXNlcGFyYXRvci5nbG9iYWwpIHtcbiAgICAgICAgICAgIHNlcGFyYXRvciA9IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCB0b1N0cmluZyhyZUZsYWdzLmV4ZWMoc2VwYXJhdG9yKSkgKyAnZycpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzZXBhcmF0b3IubGFzdEluZGV4ID0gMDtcbiAgICAgICAgICB3aGlsZSAoKG1hdGNoID0gc2VwYXJhdG9yLmV4ZWMoc3Vic3RyaW5nKSkpIHtcbiAgICAgICAgICAgIHZhciBuZXdFbmQgPSBtYXRjaC5pbmRleDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnNsaWNlKDAsIG5ld0VuZCA9PT0gdW5kZWZpbmVkID8gZW5kIDogbmV3RW5kKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzdHJpbmcuaW5kZXhPZihiYXNlVG9TdHJpbmcoc2VwYXJhdG9yKSwgZW5kKSAhPSBlbmQpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gcmVzdWx0Lmxhc3RJbmRleE9mKHNlcGFyYXRvcik7XG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnNsaWNlKDAsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdCArIG9taXNzaW9uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBpbnZlcnNlIG9mIGBfLmVzY2FwZWA7IHRoaXMgbWV0aG9kIGNvbnZlcnRzIHRoZSBIVE1MIGVudGl0aWVzXG4gICAgICogYCZhbXA7YCwgYCZsdDtgLCBgJmd0O2AsIGAmcXVvdDtgLCBhbmQgYCYjMzk7YCBpbiBgc3RyaW5nYCB0b1xuICAgICAqIHRoZWlyIGNvcnJlc3BvbmRpbmcgY2hhcmFjdGVycy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBObyBvdGhlciBIVE1MIGVudGl0aWVzIGFyZSB1bmVzY2FwZWQuIFRvIHVuZXNjYXBlIGFkZGl0aW9uYWxcbiAgICAgKiBIVE1MIGVudGl0aWVzIHVzZSBhIHRoaXJkLXBhcnR5IGxpYnJhcnkgbGlrZSBbX2hlX10oaHR0cHM6Ly9tdGhzLmJlL2hlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjYuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB1bmVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmVzY2FwZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuZXNjYXBlKCdmcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5lc2NhcGUoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNFc2NhcGVkSHRtbC50ZXN0KHN0cmluZykpXG4gICAgICAgID8gc3RyaW5nLnJlcGxhY2UocmVFc2NhcGVkSHRtbCwgdW5lc2NhcGVIdG1sQ2hhcilcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIHNwYWNlIHNlcGFyYXRlZCB3b3JkcywgdG8gdXBwZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVwcGVyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51cHBlckNhc2UoJy0tZm9vLWJhcicpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqXG4gICAgICogXy51cHBlckNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqXG4gICAgICogXy51cHBlckNhc2UoJ19fZm9vX2Jhcl9fJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICovXG4gICAgdmFyIHVwcGVyQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICcgJyA6ICcnKSArIHdvcmQudG9VcHBlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gdXBwZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udXBwZXJGaXJzdCgnZnJlZCcpO1xuICAgICAqIC8vID0+ICdGcmVkJ1xuICAgICAqXG4gICAgICogXy51cHBlckZpcnN0KCdGUkVEJyk7XG4gICAgICogLy8gPT4gJ0ZSRUQnXG4gICAgICovXG4gICAgdmFyIHVwcGVyRmlyc3QgPSBjcmVhdGVDYXNlRmlyc3QoJ3RvVXBwZXJDYXNlJyk7XG5cbiAgICAvKipcbiAgICAgKiBTcGxpdHMgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IFtwYXR0ZXJuXSBUaGUgcGF0dGVybiB0byBtYXRjaCB3b3Jkcy5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ud29yZHMoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gWydmcmVkJywgJ2Jhcm5leScsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIF8ud29yZHMoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJywgL1teLCBdKy9nKTtcbiAgICAgKiAvLyA9PiBbJ2ZyZWQnLCAnYmFybmV5JywgJyYnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gd29yZHMoc3RyaW5nLCBwYXR0ZXJuLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHBhdHRlcm4gPSBndWFyZCA/IHVuZGVmaW5lZCA6IHBhdHRlcm47XG5cbiAgICAgIGlmIChwYXR0ZXJuID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGhhc1VuaWNvZGVXb3JkKHN0cmluZykgPyB1bmljb2RlV29yZHMoc3RyaW5nKSA6IGFzY2lpV29yZHMoc3RyaW5nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHJpbmcubWF0Y2gocGF0dGVybikgfHwgW107XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQXR0ZW1wdHMgdG8gaW52b2tlIGBmdW5jYCwgcmV0dXJuaW5nIGVpdGhlciB0aGUgcmVzdWx0IG9yIHRoZSBjYXVnaHQgZXJyb3JcbiAgICAgKiBvYmplY3QuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgdG8gYGZ1bmNgIHdoZW4gaXQncyBpbnZva2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhdHRlbXB0LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBgZnVuY2AgcmVzdWx0IG9yIGVycm9yIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gQXZvaWQgdGhyb3dpbmcgZXJyb3JzIGZvciBpbnZhbGlkIHNlbGVjdG9ycy5cbiAgICAgKiB2YXIgZWxlbWVudHMgPSBfLmF0dGVtcHQoZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICAgKiAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICAgKiB9LCAnPl8+Jyk7XG4gICAgICpcbiAgICAgKiBpZiAoXy5pc0Vycm9yKGVsZW1lbnRzKSkge1xuICAgICAqICAgZWxlbWVudHMgPSBbXTtcbiAgICAgKiB9XG4gICAgICovXG4gICAgdmFyIGF0dGVtcHQgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBhcmdzKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGlzRXJyb3IoZSkgPyBlIDogbmV3IEVycm9yKGUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQmluZHMgbWV0aG9kcyBvZiBhbiBvYmplY3QgdG8gdGhlIG9iamVjdCBpdHNlbGYsIG92ZXJ3cml0aW5nIHRoZSBleGlzdGluZ1xuICAgICAqIG1ldGhvZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBib3VuZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBiaW5kIGFuZCBhc3NpZ24gdGhlIGJvdW5kIG1ldGhvZHMgdG8uXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gbWV0aG9kTmFtZXMgVGhlIG9iamVjdCBtZXRob2QgbmFtZXMgdG8gYmluZC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdmlldyA9IHtcbiAgICAgKiAgICdsYWJlbCc6ICdkb2NzJyxcbiAgICAgKiAgICdjbGljayc6IGZ1bmN0aW9uKCkge1xuICAgICAqICAgICBjb25zb2xlLmxvZygnY2xpY2tlZCAnICsgdGhpcy5sYWJlbCk7XG4gICAgICogICB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uYmluZEFsbCh2aWV3LCBbJ2NsaWNrJ10pO1xuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCB2aWV3LmNsaWNrKTtcbiAgICAgKiAvLyA9PiBMb2dzICdjbGlja2VkIGRvY3MnIHdoZW4gY2xpY2tlZC5cbiAgICAgKi9cbiAgICB2YXIgYmluZEFsbCA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgbWV0aG9kTmFtZXMpIHtcbiAgICAgIGFycmF5RWFjaChtZXRob2ROYW1lcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIGtleSA9IHRvS2V5KGtleSk7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgYmluZChvYmplY3Rba2V5XSwgb2JqZWN0KSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpdGVyYXRlcyBvdmVyIGBwYWlyc2AgYW5kIGludm9rZXMgdGhlIGNvcnJlc3BvbmRpbmdcbiAgICAgKiBmdW5jdGlvbiBvZiB0aGUgZmlyc3QgcHJlZGljYXRlIHRvIHJldHVybiB0cnV0aHkuIFRoZSBwcmVkaWNhdGUtZnVuY3Rpb25cbiAgICAgKiBwYWlycyBhcmUgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkXG4gICAgICogZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhaXJzIFRoZSBwcmVkaWNhdGUtZnVuY3Rpb24gcGFpcnMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8uY29uZChbXG4gICAgICogICBbXy5tYXRjaGVzKHsgJ2EnOiAxIH0pLCAgICAgICAgICAgXy5jb25zdGFudCgnbWF0Y2hlcyBBJyldLFxuICAgICAqICAgW18uY29uZm9ybXMoeyAnYic6IF8uaXNOdW1iZXIgfSksIF8uY29uc3RhbnQoJ21hdGNoZXMgQicpXSxcbiAgICAgKiAgIFtfLnN0dWJUcnVlLCAgICAgICAgICAgICAgICAgICAgICBfLmNvbnN0YW50KCdubyBtYXRjaCcpXVxuICAgICAqIF0pO1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogMSwgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+ICdtYXRjaGVzIEEnXG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAwLCAnYic6IDEgfSk7XG4gICAgICogLy8gPT4gJ21hdGNoZXMgQidcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6ICcxJywgJ2InOiAnMicgfSk7XG4gICAgICogLy8gPT4gJ25vIG1hdGNoJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmQocGFpcnMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwYWlycyA9PSBudWxsID8gMCA6IHBhaXJzLmxlbmd0aCxcbiAgICAgICAgICB0b0l0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoKTtcblxuICAgICAgcGFpcnMgPSAhbGVuZ3RoID8gW10gOiBhcnJheU1hcChwYWlycywgZnVuY3Rpb24ocGFpcikge1xuICAgICAgICBpZiAodHlwZW9mIHBhaXJbMV0gIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW3RvSXRlcmF0ZWUocGFpclswXSksIHBhaXJbMV1dO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIHZhciBwYWlyID0gcGFpcnNbaW5kZXhdO1xuICAgICAgICAgIGlmIChhcHBseShwYWlyWzBdLCB0aGlzLCBhcmdzKSkge1xuICAgICAgICAgICAgcmV0dXJuIGFwcGx5KHBhaXJbMV0sIHRoaXMsIGFyZ3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgcHJlZGljYXRlIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgd2l0aFxuICAgICAqIHRoZSBjb3JyZXNwb25kaW5nIHByb3BlcnR5IHZhbHVlcyBvZiBhIGdpdmVuIG9iamVjdCwgcmV0dXJuaW5nIGB0cnVlYCBpZlxuICAgICAqIGFsbCBwcmVkaWNhdGVzIHJldHVybiB0cnV0aHksIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGUgY3JlYXRlZCBmdW5jdGlvbiBpcyBlcXVpdmFsZW50IHRvIGBfLmNvbmZvcm1zVG9gIHdpdGhcbiAgICAgKiBgc291cmNlYCBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiAyLCAnYic6IDEgfSxcbiAgICAgKiAgIHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihvYmplY3RzLCBfLmNvbmZvcm1zKHsgJ2InOiBmdW5jdGlvbihuKSB7IHJldHVybiBuID4gMTsgfSB9KSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxLCAnYic6IDIgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25mb3Jtcyhzb3VyY2UpIHtcbiAgICAgIHJldHVybiBiYXNlQ29uZm9ybXMoYmFzZUNsb25lKHNvdXJjZSwgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZXR1cm4gZnJvbSB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbnN0YW50IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IF8udGltZXMoMiwgXy5jb25zdGFudCh7ICdhJzogMSB9KSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzKTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEgfSwgeyAnYSc6IDEgfV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHNbMF0gPT09IG9iamVjdHNbMV0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25zdGFudCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBgdmFsdWVgIHRvIGRldGVybWluZSB3aGV0aGVyIGEgZGVmYXVsdCB2YWx1ZSBzaG91bGQgYmUgcmV0dXJuZWQgaW5cbiAgICAgKiBpdHMgcGxhY2UuIFRoZSBgZGVmYXVsdFZhbHVlYCBpcyByZXR1cm5lZCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBgbnVsbGAsXG4gICAgICogb3IgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xNC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0geyp9IGRlZmF1bHRWYWx1ZSBUaGUgZGVmYXVsdCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdFRvKDEsIDEwKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRUbyh1bmRlZmluZWQsIDEwKTtcbiAgICAgKiAvLyA9PiAxMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlZmF1bHRUbyh2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICByZXR1cm4gKHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlKSA/IGRlZmF1bHRWYWx1ZSA6IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHJlc3VsdCBvZiBpbnZva2luZyB0aGUgZ2l2ZW4gZnVuY3Rpb25zXG4gICAgICogd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24sIHdoZXJlIGVhY2ggc3VjY2Vzc2l2ZVxuICAgICAqIGludm9jYXRpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbZnVuY3NdIFRoZSBmdW5jdGlvbnMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAc2VlIF8uZmxvd1JpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGFkZFNxdWFyZSA9IF8uZmxvdyhbXy5hZGQsIHNxdWFyZV0pO1xuICAgICAqIGFkZFNxdWFyZSgxLCAyKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICovXG4gICAgdmFyIGZsb3cgPSBjcmVhdGVGbG93KCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZsb3dgIGV4Y2VwdCB0aGF0IGl0IGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0XG4gICAgICogaW52b2tlcyB0aGUgZ2l2ZW4gZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtmdW5jc10gVGhlIGZ1bmN0aW9ucyB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICAgICAqIEBzZWUgXy5mbG93XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGFkZFNxdWFyZSA9IF8uZmxvd1JpZ2h0KFtzcXVhcmUsIF8uYWRkXSk7XG4gICAgICogYWRkU3F1YXJlKDEsIDIpO1xuICAgICAqIC8vID0+IDlcbiAgICAgKi9cbiAgICB2YXIgZmxvd1JpZ2h0ID0gY3JlYXRlRmxvdyh0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIEFueSB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKF8uaWRlbnRpdHkob2JqZWN0KSA9PT0gb2JqZWN0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBhcmd1bWVudHMgb2YgdGhlIGNyZWF0ZWRcbiAgICAgKiBmdW5jdGlvbi4gSWYgYGZ1bmNgIGlzIGEgcHJvcGVydHkgbmFtZSwgdGhlIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJucyB0aGVcbiAgICAgKiBwcm9wZXJ0eSB2YWx1ZSBmb3IgYSBnaXZlbiBlbGVtZW50LiBJZiBgZnVuY2AgaXMgYW4gYXJyYXkgb3Igb2JqZWN0LCB0aGVcbiAgICAgKiBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGNvbnRhaW4gdGhlIGVxdWl2YWxlbnRcbiAgICAgKiBzb3VyY2UgcHJvcGVydGllcywgb3RoZXJ3aXNlIGl0IHJldHVybnMgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSBbZnVuYz1fLmlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhIGNhbGxiYWNrLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY2FsbGJhY2suXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIF8uaXRlcmF0ZWUoeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogdHJ1ZSB9KSk7XG4gICAgICogLy8gPT4gW3sgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBfLml0ZXJhdGVlKFsndXNlcicsICdmcmVkJ10pKTtcbiAgICAgKiAvLyA9PiBbeyAndXNlcic6ICdmcmVkJywgJ2FnZSc6IDQwIH1dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1hcCh1c2VycywgXy5pdGVyYXRlZSgndXNlcicpKTtcbiAgICAgKiAvLyA9PiBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIENyZWF0ZSBjdXN0b20gaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKiBfLml0ZXJhdGVlID0gXy53cmFwKF8uaXRlcmF0ZWUsIGZ1bmN0aW9uKGl0ZXJhdGVlLCBmdW5jKSB7XG4gICAgICogICByZXR1cm4gIV8uaXNSZWdFeHAoZnVuYykgPyBpdGVyYXRlZShmdW5jKSA6IGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAqICAgICByZXR1cm4gZnVuYy50ZXN0KHN0cmluZyk7XG4gICAgICogICB9O1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIoWydhYmMnLCAnZGVmJ10sIC9lZi8pO1xuICAgICAqIC8vID0+IFsnZGVmJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpdGVyYXRlZShmdW5jKSB7XG4gICAgICByZXR1cm4gYmFzZUl0ZXJhdGVlKHR5cGVvZiBmdW5jID09ICdmdW5jdGlvbicgPyBmdW5jIDogYmFzZUNsb25lKGZ1bmMsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiBhIGdpdmVuXG4gICAgICogb2JqZWN0IGFuZCBgc291cmNlYCwgcmV0dXJuaW5nIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gb2JqZWN0IGhhcyBlcXVpdmFsZW50XG4gICAgICogcHJvcGVydHkgdmFsdWVzLCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNyZWF0ZWQgZnVuY3Rpb24gaXMgZXF1aXZhbGVudCB0byBgXy5pc01hdGNoYCB3aXRoIGBzb3VyY2VgXG4gICAgICogcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBQYXJ0aWFsIGNvbXBhcmlzb25zIHdpbGwgbWF0Y2ggZW1wdHkgYXJyYXkgYW5kIGVtcHR5IG9iamVjdCBgc291cmNlYFxuICAgICAqIHZhbHVlcyBhZ2FpbnN0IGFueSBhcnJheSBvciBvYmplY3QgdmFsdWUsIHJlc3BlY3RpdmVseS4gU2VlIGBfLmlzRXF1YWxgXG4gICAgICogZm9yIGEgbGlzdCBvZiBzdXBwb3J0ZWQgdmFsdWUgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTXVsdGlwbGUgdmFsdWVzIGNhbiBiZSBjaGVja2VkIGJ5IGNvbWJpbmluZyBzZXZlcmFsIG1hdGNoZXJzXG4gICAgICogdXNpbmcgYF8ub3ZlclNvbWVgXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfSxcbiAgICAgKiAgIHsgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8ubWF0Y2hlcyh7ICdhJzogNCwgJ2MnOiA2IH0pKTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1dXG4gICAgICpcbiAgICAgKiAvLyBDaGVja2luZyBmb3Igc2V2ZXJhbCBwb3NzaWJsZSB2YWx1ZXNcbiAgICAgKiBfLmZpbHRlcihvYmplY3RzLCBfLm92ZXJTb21lKFtfLm1hdGNoZXMoeyAnYSc6IDEgfSksIF8ubWF0Y2hlcyh7ICdhJzogNCB9KV0pKTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sIHsgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hdGNoZXMoc291cmNlKSB7XG4gICAgICByZXR1cm4gYmFzZU1hdGNoZXMoYmFzZUNsb25lKHNvdXJjZSwgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIHRoZVxuICAgICAqIHZhbHVlIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdCB0byBgc3JjVmFsdWVgLCByZXR1cm5pbmcgYHRydWVgIGlmIHRoZVxuICAgICAqIG9iamVjdCB2YWx1ZSBpcyBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogUGFydGlhbCBjb21wYXJpc29ucyB3aWxsIG1hdGNoIGVtcHR5IGFycmF5IGFuZCBlbXB0eSBvYmplY3RcbiAgICAgKiBgc3JjVmFsdWVgIHZhbHVlcyBhZ2FpbnN0IGFueSBhcnJheSBvciBvYmplY3QgdmFsdWUsIHJlc3BlY3RpdmVseS4gU2VlXG4gICAgICogYF8uaXNFcXVhbGAgZm9yIGEgbGlzdCBvZiBzdXBwb3J0ZWQgdmFsdWUgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTXVsdGlwbGUgdmFsdWVzIGNhbiBiZSBjaGVja2VkIGJ5IGNvbWJpbmluZyBzZXZlcmFsIG1hdGNoZXJzXG4gICAgICogdXNpbmcgYF8ub3ZlclNvbWVgXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfSxcbiAgICAgKiAgIHsgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZChvYmplY3RzLCBfLm1hdGNoZXNQcm9wZXJ0eSgnYScsIDQpKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqXG4gICAgICogLy8gQ2hlY2tpbmcgZm9yIHNldmVyYWwgcG9zc2libGUgdmFsdWVzXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5vdmVyU29tZShbXy5tYXRjaGVzUHJvcGVydHkoJ2EnLCAxKSwgXy5tYXRjaGVzUHJvcGVydHkoJ2EnLCA0KV0pKTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sIHsgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgYmFzZUNsb25lKHNyY1ZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBtZXRob2QgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgdG8gdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52b2tlciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogeyAnYic6IF8uY29uc3RhbnQoMikgfSB9LFxuICAgICAqICAgeyAnYSc6IHsgJ2InOiBfLmNvbnN0YW50KDEpIH0gfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLm1hcChvYmplY3RzLCBfLm1ldGhvZCgnYS5iJykpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5tZXRob2QoWydhJywgJ2InXSkpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIHZhciBtZXRob2QgPSBiYXNlUmVzdChmdW5jdGlvbihwYXRoLCBhcmdzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52b2tlKG9iamVjdCwgcGF0aCwgYXJncyk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLm1ldGhvZGA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXNcbiAgICAgKiB0aGUgbWV0aG9kIGF0IGEgZ2l2ZW4gcGF0aCBvZiBgb2JqZWN0YC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZVxuICAgICAqIHByb3ZpZGVkIHRvIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBpbnZva2VyIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBfLnRpbWVzKDMsIF8uY29uc3RhbnQpLFxuICAgICAqICAgICBvYmplY3QgPSB7ICdhJzogYXJyYXksICdiJzogYXJyYXksICdjJzogYXJyYXkgfTtcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnYVsyXScsICdjWzBdJ10sIF8ubWV0aG9kT2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICpcbiAgICAgKiBfLm1hcChbWydhJywgJzInXSwgWydjJywgJzAnXV0sIF8ubWV0aG9kT2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICovXG4gICAgdmFyIG1ldGhvZE9mID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBhcmdzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEFkZHMgYWxsIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBmdW5jdGlvbiBwcm9wZXJ0aWVzIG9mIGEgc291cmNlXG4gICAgICogb2JqZWN0IHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QuIElmIGBvYmplY3RgIGlzIGEgZnVuY3Rpb24sIHRoZW4gbWV0aG9kc1xuICAgICAqIGFyZSBhZGRlZCB0byBpdHMgcHJvdG90eXBlIGFzIHdlbGwuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVXNlIGBfLnJ1bkluQ29udGV4dGAgdG8gY3JlYXRlIGEgcHJpc3RpbmUgYGxvZGFzaGAgZnVuY3Rpb24gdG9cbiAgICAgKiBhdm9pZCBjb25mbGljdHMgY2F1c2VkIGJ5IG1vZGlmeWluZyB0aGUgb3JpZ2luYWwuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBbb2JqZWN0PWxvZGFzaF0gVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgZnVuY3Rpb25zIHRvIGFkZC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNoYWluPXRydWVdIFNwZWNpZnkgd2hldGhlciBtaXhpbnMgYXJlIGNoYWluYWJsZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiB2b3dlbHMoc3RyaW5nKSB7XG4gICAgICogICByZXR1cm4gXy5maWx0ZXIoc3RyaW5nLCBmdW5jdGlvbih2KSB7XG4gICAgICogICAgIHJldHVybiAvW2FlaW91XS9pLnRlc3Qodik7XG4gICAgICogICB9KTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLm1peGluKHsgJ3Zvd2Vscyc6IHZvd2VscyB9KTtcbiAgICAgKiBfLnZvd2VscygnZnJlZCcpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICpcbiAgICAgKiBfKCdmcmVkJykudm93ZWxzKCkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqXG4gICAgICogXy5taXhpbih7ICd2b3dlbHMnOiB2b3dlbHMgfSwgeyAnY2hhaW4nOiBmYWxzZSB9KTtcbiAgICAgKiBfKCdmcmVkJykudm93ZWxzKCk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaXhpbihvYmplY3QsIHNvdXJjZSwgb3B0aW9ucykge1xuICAgICAgdmFyIHByb3BzID0ga2V5cyhzb3VyY2UpLFxuICAgICAgICAgIG1ldGhvZE5hbWVzID0gYmFzZUZ1bmN0aW9ucyhzb3VyY2UsIHByb3BzKTtcblxuICAgICAgaWYgKG9wdGlvbnMgPT0gbnVsbCAmJlxuICAgICAgICAgICEoaXNPYmplY3Qoc291cmNlKSAmJiAobWV0aG9kTmFtZXMubGVuZ3RoIHx8ICFwcm9wcy5sZW5ndGgpKSkge1xuICAgICAgICBvcHRpb25zID0gc291cmNlO1xuICAgICAgICBzb3VyY2UgPSBvYmplY3Q7XG4gICAgICAgIG9iamVjdCA9IHRoaXM7XG4gICAgICAgIG1ldGhvZE5hbWVzID0gYmFzZUZ1bmN0aW9ucyhzb3VyY2UsIGtleXMoc291cmNlKSk7XG4gICAgICB9XG4gICAgICB2YXIgY2hhaW4gPSAhKGlzT2JqZWN0KG9wdGlvbnMpICYmICdjaGFpbicgaW4gb3B0aW9ucykgfHwgISFvcHRpb25zLmNoYWluLFxuICAgICAgICAgIGlzRnVuYyA9IGlzRnVuY3Rpb24ob2JqZWN0KTtcblxuICAgICAgYXJyYXlFYWNoKG1ldGhvZE5hbWVzLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICAgIHZhciBmdW5jID0gc291cmNlW21ldGhvZE5hbWVdO1xuICAgICAgICBvYmplY3RbbWV0aG9kTmFtZV0gPSBmdW5jO1xuICAgICAgICBpZiAoaXNGdW5jKSB7XG4gICAgICAgICAgb2JqZWN0LnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGNoYWluQWxsID0gdGhpcy5fX2NoYWluX187XG4gICAgICAgICAgICBpZiAoY2hhaW4gfHwgY2hhaW5BbGwpIHtcbiAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG9iamVjdCh0aGlzLl9fd3JhcHBlZF9fKSxcbiAgICAgICAgICAgICAgICAgIGFjdGlvbnMgPSByZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkodGhpcy5fX2FjdGlvbnNfXyk7XG5cbiAgICAgICAgICAgICAgYWN0aW9ucy5wdXNoKHsgJ2Z1bmMnOiBmdW5jLCAnYXJncyc6IGFyZ3VtZW50cywgJ3RoaXNBcmcnOiBvYmplY3QgfSk7XG4gICAgICAgICAgICAgIHJlc3VsdC5fX2NoYWluX18gPSBjaGFpbkFsbDtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KG9iamVjdCwgYXJyYXlQdXNoKFt0aGlzLnZhbHVlKCldLCBhcmd1bWVudHMpKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnRzIHRoZSBgX2AgdmFyaWFibGUgdG8gaXRzIHByZXZpb3VzIHZhbHVlIGFuZCByZXR1cm5zIGEgcmVmZXJlbmNlIHRvXG4gICAgICogdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgbG9kYXNoID0gXy5ub0NvbmZsaWN0KCk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9Db25mbGljdCgpIHtcbiAgICAgIGlmIChyb290Ll8gPT09IHRoaXMpIHtcbiAgICAgICAgcm9vdC5fID0gb2xkRGFzaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8ubm9vcCk7XG4gICAgICogLy8gPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vb3AoKSB7XG4gICAgICAvLyBObyBvcGVyYXRpb24gcGVyZm9ybWVkLlxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGdldHMgdGhlIGFyZ3VtZW50IGF0IGluZGV4IGBuYC4gSWYgYG5gIGlzIG5lZ2F0aXZlLFxuICAgICAqIHRoZSBudGggYXJndW1lbnQgZnJvbSB0aGUgZW5kIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MF0gVGhlIGluZGV4IG9mIHRoZSBhcmd1bWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFzcy10aHJ1IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ubnRoQXJnKDEpO1xuICAgICAqIGZ1bmMoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiAnYidcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5udGhBcmcoLTIpO1xuICAgICAqIGZ1bmMoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiAnYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBudGhBcmcobikge1xuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHJldHVybiBiYXNlTnRoKGFyZ3MsIG4pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgaXRlcmF0ZWVzYCB3aXRoIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXNcbiAgICAgKiBhbmQgcmV0dXJucyB0aGVpciByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlcihbTWF0aC5tYXgsIE1hdGgubWluXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKDEsIDIsIDMsIDQpO1xuICAgICAqIC8vID0+IFs0LCAxXVxuICAgICAqL1xuICAgIHZhciBvdmVyID0gY3JlYXRlT3ZlcihhcnJheU1hcCk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgKiphbGwqKiBvZiB0aGUgYHByZWRpY2F0ZXNgIHJldHVyblxuICAgICAqIHRydXRoeSB3aGVuIGludm9rZWQgd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogRm9sbG93aW5nIHNob3J0aGFuZHMgYXJlIHBvc3NpYmxlIGZvciBwcm92aWRpbmcgcHJlZGljYXRlcy5cbiAgICAgKiBQYXNzIGFuIGBPYmplY3RgIGFuZCBpdCB3aWxsIGJlIHVzZWQgYXMgYW4gcGFyYW1ldGVyIGZvciBgXy5tYXRjaGVzYCB0byBjcmVhdGUgdGhlIHByZWRpY2F0ZS5cbiAgICAgKiBQYXNzIGFuIGBBcnJheWAgb2YgcGFyYW1ldGVycyBmb3IgYF8ubWF0Y2hlc1Byb3BlcnR5YCBhbmQgdGhlIHByZWRpY2F0ZSB3aWxsIGJlIGNyZWF0ZWQgdXNpbmcgdGhlbS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtwcmVkaWNhdGVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIHByZWRpY2F0ZXMgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyRXZlcnkoW0Jvb2xlYW4sIGlzRmluaXRlXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKCcxJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogZnVuYyhOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIG92ZXJFdmVyeSA9IGNyZWF0ZU92ZXIoYXJyYXlFdmVyeSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgKiphbnkqKiBvZiB0aGUgYHByZWRpY2F0ZXNgIHJldHVyblxuICAgICAqIHRydXRoeSB3aGVuIGludm9rZWQgd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogRm9sbG93aW5nIHNob3J0aGFuZHMgYXJlIHBvc3NpYmxlIGZvciBwcm92aWRpbmcgcHJlZGljYXRlcy5cbiAgICAgKiBQYXNzIGFuIGBPYmplY3RgIGFuZCBpdCB3aWxsIGJlIHVzZWQgYXMgYW4gcGFyYW1ldGVyIGZvciBgXy5tYXRjaGVzYCB0byBjcmVhdGUgdGhlIHByZWRpY2F0ZS5cbiAgICAgKiBQYXNzIGFuIGBBcnJheWAgb2YgcGFyYW1ldGVycyBmb3IgYF8ubWF0Y2hlc1Byb3BlcnR5YCBhbmQgdGhlIHByZWRpY2F0ZSB3aWxsIGJlIGNyZWF0ZWQgdXNpbmcgdGhlbS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtwcmVkaWNhdGVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIHByZWRpY2F0ZXMgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyU29tZShbQm9vbGVhbiwgaXNGaW5pdGVdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoJzEnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBmdW5jKG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGZ1bmMoTmFOKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogdmFyIG1hdGNoZXNGdW5jID0gXy5vdmVyU29tZShbeyAnYSc6IDEgfSwgeyAnYSc6IDIgfV0pXG4gICAgICogdmFyIG1hdGNoZXNQcm9wZXJ0eUZ1bmMgPSBfLm92ZXJTb21lKFtbJ2EnLCAxXSwgWydhJywgMl1dKVxuICAgICAqL1xuICAgIHZhciBvdmVyU29tZSA9IGNyZWF0ZU92ZXIoYXJyYXlTb21lKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogeyAnYic6IDIgfSB9LFxuICAgICAqICAgeyAnYSc6IHsgJ2InOiAxIH0gfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLm1hcChvYmplY3RzLCBfLnByb3BlcnR5KCdhLmInKSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICpcbiAgICAgKiBfLm1hcChfLnNvcnRCeShvYmplY3RzLCBfLnByb3BlcnR5KFsnYScsICdiJ10pKSwgJ2EuYicpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHByb3BlcnR5KHBhdGgpIHtcbiAgICAgIHJldHVybiBpc0tleShwYXRoKSA/IGJhc2VQcm9wZXJ0eSh0b0tleShwYXRoKSkgOiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5wcm9wZXJ0eWA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnNcbiAgICAgKiB0aGUgdmFsdWUgYXQgYSBnaXZlbiBwYXRoIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFswLCAxLCAyXSxcbiAgICAgKiAgICAgb2JqZWN0ID0geyAnYSc6IGFycmF5LCAnYic6IGFycmF5LCAnYyc6IGFycmF5IH07XG4gICAgICpcbiAgICAgKiBfLm1hcChbJ2FbMl0nLCAnY1swXSddLCBfLnByb3BlcnR5T2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICpcbiAgICAgKiBfLm1hcChbWydhJywgJzInXSwgWydjJywgJzAnXV0sIF8ucHJvcGVydHlPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eU9mKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG51bWJlcnMgKHBvc2l0aXZlIGFuZC9vciBuZWdhdGl2ZSkgcHJvZ3Jlc3NpbmcgZnJvbVxuICAgICAqIGBzdGFydGAgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC4gQSBzdGVwIG9mIGAtMWAgaXMgdXNlZCBpZiBhIG5lZ2F0aXZlXG4gICAgICogYHN0YXJ0YCBpcyBzcGVjaWZpZWQgd2l0aG91dCBhbiBgZW5kYCBvciBgc3RlcGAuIElmIGBlbmRgIGlzIG5vdCBzcGVjaWZpZWQsXG4gICAgICogaXQncyBzZXQgdG8gYHN0YXJ0YCB3aXRoIGBzdGFydGAgdGhlbiBzZXQgdG8gYDBgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEphdmFTY3JpcHQgZm9sbG93cyB0aGUgSUVFRS03NTQgc3RhbmRhcmQgZm9yIHJlc29sdmluZ1xuICAgICAqIGZsb2F0aW5nLXBvaW50IHZhbHVlcyB3aGljaCBjYW4gcHJvZHVjZSB1bmV4cGVjdGVkIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RlcD0xXSBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICogQHNlZSBfLmluUmFuZ2UsIF8ucmFuZ2VSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDQpO1xuICAgICAqIC8vID0+IFswLCAxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgtNCk7XG4gICAgICogLy8gPT4gWzAsIC0xLCAtMiwgLTNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDEsIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCA0XVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwLCAyMCwgNSk7XG4gICAgICogLy8gPT4gWzAsIDUsIDEwLCAxNV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCwgLTQsIC0xKTtcbiAgICAgKiAvLyA9PiBbMCwgLTEsIC0yLCAtM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMSwgNCwgMCk7XG4gICAgICogLy8gPT4gWzEsIDEsIDFdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgdmFyIHJhbmdlID0gY3JlYXRlUmFuZ2UoKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucmFuZ2VgIGV4Y2VwdCB0aGF0IGl0IHBvcHVsYXRlcyB2YWx1ZXMgaW5cbiAgICAgKiBkZXNjZW5kaW5nIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0ZXA9MV0gVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqIEBzZWUgXy5pblJhbmdlLCBfLnJhbmdlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCg0KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgtNCk7XG4gICAgICogLy8gPT4gWy0zLCAtMiwgLTEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMSwgNSk7XG4gICAgICogLy8gPT4gWzQsIDMsIDIsIDFdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMCwgMjAsIDUpO1xuICAgICAqIC8vID0+IFsxNSwgMTAsIDUsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMCwgLTQsIC0xKTtcbiAgICAgKiAvLyA9PiBbLTMsIC0yLCAtMSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgxLCA0LCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIHZhciByYW5nZVJpZ2h0ID0gY3JlYXRlUmFuZ2UodHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheXMgPSBfLnRpbWVzKDIsIF8uc3R1YkFycmF5KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5cyk7XG4gICAgICogLy8gPT4gW1tdLCBbXV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5c1swXSA9PT0gYXJyYXlzWzFdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJBcnJheSgpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YkZhbHNlKTtcbiAgICAgKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJGYWxzZSgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gXy50aW1lcygyLCBfLnN0dWJPYmplY3QpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gICAgICogLy8gPT4gW3t9LCB7fV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHNbMF0gPT09IG9iamVjdHNbMV0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1Yk9iamVjdCgpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGFuIGVtcHR5IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVtcHR5IHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLnN0dWJTdHJpbmcpO1xuICAgICAqIC8vID0+IFsnJywgJyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YlN0cmluZygpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB0cnVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLnN0dWJUcnVlKTtcbiAgICAgKiAvLyA9PiBbdHJ1ZSwgdHJ1ZV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViVHJ1ZSgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIGl0ZXJhdGVlIGBuYCB0aW1lcywgcmV0dXJuaW5nIGFuIGFycmF5IG9mIHRoZSByZXN1bHRzIG9mXG4gICAgICogZWFjaCBpbnZvY2F0aW9uLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKGluZGV4KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMywgU3RyaW5nKTtcbiAgICAgKiAvLyA9PiBbJzAnLCAnMScsICcyJ11cbiAgICAgKlxuICAgICAqICBfLnRpbWVzKDQsIF8uY29uc3RhbnQoMCkpO1xuICAgICAqIC8vID0+IFswLCAwLCAwLCAwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgaWYgKG4gPCAxIHx8IG4gPiBNQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IE1BWF9BUlJBWV9MRU5HVEgsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWluKG4sIE1BWF9BUlJBWV9MRU5HVEgpO1xuXG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlKTtcbiAgICAgIG4gLT0gTUFYX0FSUkFZX0xFTkdUSDtcblxuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VUaW1lcyhsZW5ndGgsIGl0ZXJhdGVlKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgICAgICBpdGVyYXRlZShpbmRleCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9QYXRoKCdhLmIuYycpO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqXG4gICAgICogXy50b1BhdGgoJ2FbMF0uYi5jJyk7XG4gICAgICogLy8gPT4gWydhJywgJzAnLCAnYicsICdjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1BhdGgodmFsdWUpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIHRvS2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc1N5bWJvbCh2YWx1ZSkgPyBbdmFsdWVdIDogY29weUFycmF5KHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSB1bmlxdWUgSUQuIElmIGBwcmVmaXhgIGlzIGdpdmVuLCB0aGUgSUQgaXMgYXBwZW5kZWQgdG8gaXQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcHJlZml4PScnXSBUaGUgdmFsdWUgdG8gcHJlZml4IHRoZSBJRCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuaXF1ZSBJRC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlxdWVJZCgnY29udGFjdF8nKTtcbiAgICAgKiAvLyA9PiAnY29udGFjdF8xMDQnXG4gICAgICpcbiAgICAgKiBfLnVuaXF1ZUlkKCk7XG4gICAgICogLy8gPT4gJzEwNSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxdWVJZChwcmVmaXgpIHtcbiAgICAgIHZhciBpZCA9ICsraWRDb3VudGVyO1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHByZWZpeCkgKyBpZDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBZGRzIHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYXVnZW5kIFRoZSBmaXJzdCBudW1iZXIgaW4gYW4gYWRkaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFkZGVuZCBUaGUgc2Vjb25kIG51bWJlciBpbiBhbiBhZGRpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0b3RhbC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5hZGQoNiwgNCk7XG4gICAgICogLy8gPT4gMTBcbiAgICAgKi9cbiAgICB2YXIgYWRkID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihhdWdlbmQsIGFkZGVuZCkge1xuICAgICAgcmV0dXJuIGF1Z2VuZCArIGFkZGVuZDtcbiAgICB9LCAwKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIGBudW1iZXJgIHJvdW5kZWQgdXAgdG8gYHByZWNpc2lvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gcm91bmQgdXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb249MF0gVGhlIHByZWNpc2lvbiB0byByb3VuZCB1cCB0by5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByb3VuZGVkIHVwIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jZWlsKDQuMDA2KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICpcbiAgICAgKiBfLmNlaWwoNi4wMDQsIDIpO1xuICAgICAqIC8vID0+IDYuMDFcbiAgICAgKlxuICAgICAqIF8uY2VpbCg2MDQwLCAtMik7XG4gICAgICogLy8gPT4gNjEwMFxuICAgICAqL1xuICAgIHZhciBjZWlsID0gY3JlYXRlUm91bmQoJ2NlaWwnKTtcblxuICAgIC8qKlxuICAgICAqIERpdmlkZSB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRpdmlkZW5kIFRoZSBmaXJzdCBudW1iZXIgaW4gYSBkaXZpc2lvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGl2aXNvciBUaGUgc2Vjb25kIG51bWJlciBpbiBhIGRpdmlzaW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHF1b3RpZW50LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRpdmlkZSg2LCA0KTtcbiAgICAgKiAvLyA9PiAxLjVcbiAgICAgKi9cbiAgICB2YXIgZGl2aWRlID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihkaXZpZGVuZCwgZGl2aXNvcikge1xuICAgICAgcmV0dXJuIGRpdmlkZW5kIC8gZGl2aXNvcjtcbiAgICB9LCAxKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIGBudW1iZXJgIHJvdW5kZWQgZG93biB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZCBkb3duLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgZG93biB0by5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByb3VuZGVkIGRvd24gbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsb29yKDQuMDA2KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLmZsb29yKDAuMDQ2LCAyKTtcbiAgICAgKiAvLyA9PiAwLjA0XG4gICAgICpcbiAgICAgKiBfLmZsb29yKDQwNjAsIC0yKTtcbiAgICAgKiAvLyA9PiA0MDAwXG4gICAgICovXG4gICAgdmFyIGZsb29yID0gY3JlYXRlUm91bmQoJ2Zsb29yJyk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbWF4aW11bSB2YWx1ZSBvZiBgYXJyYXlgLiBJZiBgYXJyYXlgIGlzIGVtcHR5IG9yIGZhbHNleSxcbiAgICAgKiBgdW5kZWZpbmVkYCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF4aW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXgoWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiA4XG4gICAgICpcbiAgICAgKiBfLm1heChbXSk7XG4gICAgICogLy8gPT4gdW5kZWZpbmVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF4KGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGlkZW50aXR5LCBiYXNlR3QpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWF4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5IHdoaWNoXG4gICAgICogdGhlIHZhbHVlIGlzIHJhbmtlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXhpbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogMSB9LCB7ICduJzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8ubWF4Qnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiB7ICduJzogMiB9XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1heEJ5KG9iamVjdHMsICduJyk7XG4gICAgICogLy8gPT4geyAnbic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1heEJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIGJhc2VHdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1lYW4gb2YgdGhlIHZhbHVlcyBpbiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWVhbihbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZWFuKGFycmF5KSB7XG4gICAgICByZXR1cm4gYmFzZU1lYW4oYXJyYXksIGlkZW50aXR5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1lYW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSB2YWx1ZSB0byBiZSBhdmVyYWdlZC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbWVhbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDQgfSwgeyAnbic6IDIgfSwgeyAnbic6IDggfSwgeyAnbic6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLm1lYW5CeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IDVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWVhbkJ5KG9iamVjdHMsICduJyk7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lYW5CeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlTWVhbihhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbWluaW11bSB2YWx1ZSBvZiBgYXJyYXlgLiBJZiBgYXJyYXlgIGlzIGVtcHR5IG9yIGZhbHNleSxcbiAgICAgKiBgdW5kZWZpbmVkYCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5taW4oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiBfLm1pbihbXSk7XG4gICAgICogLy8gPT4gdW5kZWZpbmVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWluKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGlkZW50aXR5LCBiYXNlTHQpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWluYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5IHdoaWNoXG4gICAgICogdGhlIHZhbHVlIGlzIHJhbmtlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtaW5pbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogMSB9LCB7ICduJzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8ubWluQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiB7ICduJzogMSB9XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1pbkJ5KG9iamVjdHMsICduJyk7XG4gICAgICogLy8gPT4geyAnbic6IDEgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1pbkJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIGJhc2VMdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTXVsdGlwbHkgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtdWx0aXBsaWVyIFRoZSBmaXJzdCBudW1iZXIgaW4gYSBtdWx0aXBsaWNhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbXVsdGlwbGljYW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgbXVsdGlwbGljYXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcHJvZHVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tdWx0aXBseSg2LCA0KTtcbiAgICAgKiAvLyA9PiAyNFxuICAgICAqL1xuICAgIHZhciBtdWx0aXBseSA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24obXVsdGlwbGllciwgbXVsdGlwbGljYW5kKSB7XG4gICAgICByZXR1cm4gbXVsdGlwbGllciAqIG11bHRpcGxpY2FuZDtcbiAgICB9LCAxKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIGBudW1iZXJgIHJvdW5kZWQgdG8gYHByZWNpc2lvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gcm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb249MF0gVGhlIHByZWNpc2lvbiB0byByb3VuZCB0by5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByb3VuZGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yb3VuZCg0LjAwNik7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5yb3VuZCg0LjAwNiwgMik7XG4gICAgICogLy8gPT4gNC4wMVxuICAgICAqXG4gICAgICogXy5yb3VuZCg0MDYwLCAtMik7XG4gICAgICogLy8gPT4gNDEwMFxuICAgICAqL1xuICAgIHZhciByb3VuZCA9IGNyZWF0ZVJvdW5kKCdyb3VuZCcpO1xuXG4gICAgLyoqXG4gICAgICogU3VidHJhY3QgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtaW51ZW5kIFRoZSBmaXJzdCBudW1iZXIgaW4gYSBzdWJ0cmFjdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3VidHJhaGVuZCBUaGUgc2Vjb25kIG51bWJlciBpbiBhIHN1YnRyYWN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGRpZmZlcmVuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3VidHJhY3QoNiwgNCk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIHZhciBzdWJ0cmFjdCA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24obWludWVuZCwgc3VidHJhaGVuZCkge1xuICAgICAgcmV0dXJuIG1pbnVlbmQgLSBzdWJ0cmFoZW5kO1xuICAgIH0sIDApO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIHN1bSBvZiB0aGUgdmFsdWVzIGluIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN1bShbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDIwXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3VtKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU3VtKGFycmF5LCBpZGVudGl0eSlcbiAgICAgICAgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc3VtYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgdmFsdWUgdG8gYmUgc3VtbWVkLlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiA0IH0sIHsgJ24nOiAyIH0sIHsgJ24nOiA4IH0sIHsgJ24nOiA2IH1dO1xuICAgICAqXG4gICAgICogXy5zdW1CeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IDIwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnN1bUJ5KG9iamVjdHMsICduJyk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdW1CeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiAwO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8vIEFkZCBtZXRob2RzIHRoYXQgcmV0dXJuIHdyYXBwZWQgdmFsdWVzIGluIGNoYWluIHNlcXVlbmNlcy5cbiAgICBsb2Rhc2guYWZ0ZXIgPSBhZnRlcjtcbiAgICBsb2Rhc2guYXJ5ID0gYXJ5O1xuICAgIGxvZGFzaC5hc3NpZ24gPSBhc3NpZ247XG4gICAgbG9kYXNoLmFzc2lnbkluID0gYXNzaWduSW47XG4gICAgbG9kYXNoLmFzc2lnbkluV2l0aCA9IGFzc2lnbkluV2l0aDtcbiAgICBsb2Rhc2guYXNzaWduV2l0aCA9IGFzc2lnbldpdGg7XG4gICAgbG9kYXNoLmF0ID0gYXQ7XG4gICAgbG9kYXNoLmJlZm9yZSA9IGJlZm9yZTtcbiAgICBsb2Rhc2guYmluZCA9IGJpbmQ7XG4gICAgbG9kYXNoLmJpbmRBbGwgPSBiaW5kQWxsO1xuICAgIGxvZGFzaC5iaW5kS2V5ID0gYmluZEtleTtcbiAgICBsb2Rhc2guY2FzdEFycmF5ID0gY2FzdEFycmF5O1xuICAgIGxvZGFzaC5jaGFpbiA9IGNoYWluO1xuICAgIGxvZGFzaC5jaHVuayA9IGNodW5rO1xuICAgIGxvZGFzaC5jb21wYWN0ID0gY29tcGFjdDtcbiAgICBsb2Rhc2guY29uY2F0ID0gY29uY2F0O1xuICAgIGxvZGFzaC5jb25kID0gY29uZDtcbiAgICBsb2Rhc2guY29uZm9ybXMgPSBjb25mb3JtcztcbiAgICBsb2Rhc2guY29uc3RhbnQgPSBjb25zdGFudDtcbiAgICBsb2Rhc2guY291bnRCeSA9IGNvdW50Qnk7XG4gICAgbG9kYXNoLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICBsb2Rhc2guY3VycnkgPSBjdXJyeTtcbiAgICBsb2Rhc2guY3VycnlSaWdodCA9IGN1cnJ5UmlnaHQ7XG4gICAgbG9kYXNoLmRlYm91bmNlID0gZGVib3VuY2U7XG4gICAgbG9kYXNoLmRlZmF1bHRzID0gZGVmYXVsdHM7XG4gICAgbG9kYXNoLmRlZmF1bHRzRGVlcCA9IGRlZmF1bHRzRGVlcDtcbiAgICBsb2Rhc2guZGVmZXIgPSBkZWZlcjtcbiAgICBsb2Rhc2guZGVsYXkgPSBkZWxheTtcbiAgICBsb2Rhc2guZGlmZmVyZW5jZSA9IGRpZmZlcmVuY2U7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2VCeSA9IGRpZmZlcmVuY2VCeTtcbiAgICBsb2Rhc2guZGlmZmVyZW5jZVdpdGggPSBkaWZmZXJlbmNlV2l0aDtcbiAgICBsb2Rhc2guZHJvcCA9IGRyb3A7XG4gICAgbG9kYXNoLmRyb3BSaWdodCA9IGRyb3BSaWdodDtcbiAgICBsb2Rhc2guZHJvcFJpZ2h0V2hpbGUgPSBkcm9wUmlnaHRXaGlsZTtcbiAgICBsb2Rhc2guZHJvcFdoaWxlID0gZHJvcFdoaWxlO1xuICAgIGxvZGFzaC5maWxsID0gZmlsbDtcbiAgICBsb2Rhc2guZmlsdGVyID0gZmlsdGVyO1xuICAgIGxvZGFzaC5mbGF0TWFwID0gZmxhdE1hcDtcbiAgICBsb2Rhc2guZmxhdE1hcERlZXAgPSBmbGF0TWFwRGVlcDtcbiAgICBsb2Rhc2guZmxhdE1hcERlcHRoID0gZmxhdE1hcERlcHRoO1xuICAgIGxvZGFzaC5mbGF0dGVuID0gZmxhdHRlbjtcbiAgICBsb2Rhc2guZmxhdHRlbkRlZXAgPSBmbGF0dGVuRGVlcDtcbiAgICBsb2Rhc2guZmxhdHRlbkRlcHRoID0gZmxhdHRlbkRlcHRoO1xuICAgIGxvZGFzaC5mbGlwID0gZmxpcDtcbiAgICBsb2Rhc2guZmxvdyA9IGZsb3c7XG4gICAgbG9kYXNoLmZsb3dSaWdodCA9IGZsb3dSaWdodDtcbiAgICBsb2Rhc2guZnJvbVBhaXJzID0gZnJvbVBhaXJzO1xuICAgIGxvZGFzaC5mdW5jdGlvbnMgPSBmdW5jdGlvbnM7XG4gICAgbG9kYXNoLmZ1bmN0aW9uc0luID0gZnVuY3Rpb25zSW47XG4gICAgbG9kYXNoLmdyb3VwQnkgPSBncm91cEJ5O1xuICAgIGxvZGFzaC5pbml0aWFsID0gaW5pdGlhbDtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uID0gaW50ZXJzZWN0aW9uO1xuICAgIGxvZGFzaC5pbnRlcnNlY3Rpb25CeSA9IGludGVyc2VjdGlvbkJ5O1xuICAgIGxvZGFzaC5pbnRlcnNlY3Rpb25XaXRoID0gaW50ZXJzZWN0aW9uV2l0aDtcbiAgICBsb2Rhc2guaW52ZXJ0ID0gaW52ZXJ0O1xuICAgIGxvZGFzaC5pbnZlcnRCeSA9IGludmVydEJ5O1xuICAgIGxvZGFzaC5pbnZva2VNYXAgPSBpbnZva2VNYXA7XG4gICAgbG9kYXNoLml0ZXJhdGVlID0gaXRlcmF0ZWU7XG4gICAgbG9kYXNoLmtleUJ5ID0ga2V5Qnk7XG4gICAgbG9kYXNoLmtleXMgPSBrZXlzO1xuICAgIGxvZGFzaC5rZXlzSW4gPSBrZXlzSW47XG4gICAgbG9kYXNoLm1hcCA9IG1hcDtcbiAgICBsb2Rhc2gubWFwS2V5cyA9IG1hcEtleXM7XG4gICAgbG9kYXNoLm1hcFZhbHVlcyA9IG1hcFZhbHVlcztcbiAgICBsb2Rhc2gubWF0Y2hlcyA9IG1hdGNoZXM7XG4gICAgbG9kYXNoLm1hdGNoZXNQcm9wZXJ0eSA9IG1hdGNoZXNQcm9wZXJ0eTtcbiAgICBsb2Rhc2gubWVtb2l6ZSA9IG1lbW9pemU7XG4gICAgbG9kYXNoLm1lcmdlID0gbWVyZ2U7XG4gICAgbG9kYXNoLm1lcmdlV2l0aCA9IG1lcmdlV2l0aDtcbiAgICBsb2Rhc2gubWV0aG9kID0gbWV0aG9kO1xuICAgIGxvZGFzaC5tZXRob2RPZiA9IG1ldGhvZE9mO1xuICAgIGxvZGFzaC5taXhpbiA9IG1peGluO1xuICAgIGxvZGFzaC5uZWdhdGUgPSBuZWdhdGU7XG4gICAgbG9kYXNoLm50aEFyZyA9IG50aEFyZztcbiAgICBsb2Rhc2gub21pdCA9IG9taXQ7XG4gICAgbG9kYXNoLm9taXRCeSA9IG9taXRCeTtcbiAgICBsb2Rhc2gub25jZSA9IG9uY2U7XG4gICAgbG9kYXNoLm9yZGVyQnkgPSBvcmRlckJ5O1xuICAgIGxvZGFzaC5vdmVyID0gb3ZlcjtcbiAgICBsb2Rhc2gub3ZlckFyZ3MgPSBvdmVyQXJncztcbiAgICBsb2Rhc2gub3ZlckV2ZXJ5ID0gb3ZlckV2ZXJ5O1xuICAgIGxvZGFzaC5vdmVyU29tZSA9IG92ZXJTb21lO1xuICAgIGxvZGFzaC5wYXJ0aWFsID0gcGFydGlhbDtcbiAgICBsb2Rhc2gucGFydGlhbFJpZ2h0ID0gcGFydGlhbFJpZ2h0O1xuICAgIGxvZGFzaC5wYXJ0aXRpb24gPSBwYXJ0aXRpb247XG4gICAgbG9kYXNoLnBpY2sgPSBwaWNrO1xuICAgIGxvZGFzaC5waWNrQnkgPSBwaWNrQnk7XG4gICAgbG9kYXNoLnByb3BlcnR5ID0gcHJvcGVydHk7XG4gICAgbG9kYXNoLnByb3BlcnR5T2YgPSBwcm9wZXJ0eU9mO1xuICAgIGxvZGFzaC5wdWxsID0gcHVsbDtcbiAgICBsb2Rhc2gucHVsbEFsbCA9IHB1bGxBbGw7XG4gICAgbG9kYXNoLnB1bGxBbGxCeSA9IHB1bGxBbGxCeTtcbiAgICBsb2Rhc2gucHVsbEFsbFdpdGggPSBwdWxsQWxsV2l0aDtcbiAgICBsb2Rhc2gucHVsbEF0ID0gcHVsbEF0O1xuICAgIGxvZGFzaC5yYW5nZSA9IHJhbmdlO1xuICAgIGxvZGFzaC5yYW5nZVJpZ2h0ID0gcmFuZ2VSaWdodDtcbiAgICBsb2Rhc2gucmVhcmcgPSByZWFyZztcbiAgICBsb2Rhc2gucmVqZWN0ID0gcmVqZWN0O1xuICAgIGxvZGFzaC5yZW1vdmUgPSByZW1vdmU7XG4gICAgbG9kYXNoLnJlc3QgPSByZXN0O1xuICAgIGxvZGFzaC5yZXZlcnNlID0gcmV2ZXJzZTtcbiAgICBsb2Rhc2guc2FtcGxlU2l6ZSA9IHNhbXBsZVNpemU7XG4gICAgbG9kYXNoLnNldCA9IHNldDtcbiAgICBsb2Rhc2guc2V0V2l0aCA9IHNldFdpdGg7XG4gICAgbG9kYXNoLnNodWZmbGUgPSBzaHVmZmxlO1xuICAgIGxvZGFzaC5zbGljZSA9IHNsaWNlO1xuICAgIGxvZGFzaC5zb3J0QnkgPSBzb3J0Qnk7XG4gICAgbG9kYXNoLnNvcnRlZFVuaXEgPSBzb3J0ZWRVbmlxO1xuICAgIGxvZGFzaC5zb3J0ZWRVbmlxQnkgPSBzb3J0ZWRVbmlxQnk7XG4gICAgbG9kYXNoLnNwbGl0ID0gc3BsaXQ7XG4gICAgbG9kYXNoLnNwcmVhZCA9IHNwcmVhZDtcbiAgICBsb2Rhc2gudGFpbCA9IHRhaWw7XG4gICAgbG9kYXNoLnRha2UgPSB0YWtlO1xuICAgIGxvZGFzaC50YWtlUmlnaHQgPSB0YWtlUmlnaHQ7XG4gICAgbG9kYXNoLnRha2VSaWdodFdoaWxlID0gdGFrZVJpZ2h0V2hpbGU7XG4gICAgbG9kYXNoLnRha2VXaGlsZSA9IHRha2VXaGlsZTtcbiAgICBsb2Rhc2gudGFwID0gdGFwO1xuICAgIGxvZGFzaC50aHJvdHRsZSA9IHRocm90dGxlO1xuICAgIGxvZGFzaC50aHJ1ID0gdGhydTtcbiAgICBsb2Rhc2gudG9BcnJheSA9IHRvQXJyYXk7XG4gICAgbG9kYXNoLnRvUGFpcnMgPSB0b1BhaXJzO1xuICAgIGxvZGFzaC50b1BhaXJzSW4gPSB0b1BhaXJzSW47XG4gICAgbG9kYXNoLnRvUGF0aCA9IHRvUGF0aDtcbiAgICBsb2Rhc2gudG9QbGFpbk9iamVjdCA9IHRvUGxhaW5PYmplY3Q7XG4gICAgbG9kYXNoLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICBsb2Rhc2gudW5hcnkgPSB1bmFyeTtcbiAgICBsb2Rhc2gudW5pb24gPSB1bmlvbjtcbiAgICBsb2Rhc2gudW5pb25CeSA9IHVuaW9uQnk7XG4gICAgbG9kYXNoLnVuaW9uV2l0aCA9IHVuaW9uV2l0aDtcbiAgICBsb2Rhc2gudW5pcSA9IHVuaXE7XG4gICAgbG9kYXNoLnVuaXFCeSA9IHVuaXFCeTtcbiAgICBsb2Rhc2gudW5pcVdpdGggPSB1bmlxV2l0aDtcbiAgICBsb2Rhc2gudW5zZXQgPSB1bnNldDtcbiAgICBsb2Rhc2gudW56aXAgPSB1bnppcDtcbiAgICBsb2Rhc2gudW56aXBXaXRoID0gdW56aXBXaXRoO1xuICAgIGxvZGFzaC51cGRhdGUgPSB1cGRhdGU7XG4gICAgbG9kYXNoLnVwZGF0ZVdpdGggPSB1cGRhdGVXaXRoO1xuICAgIGxvZGFzaC52YWx1ZXMgPSB2YWx1ZXM7XG4gICAgbG9kYXNoLnZhbHVlc0luID0gdmFsdWVzSW47XG4gICAgbG9kYXNoLndpdGhvdXQgPSB3aXRob3V0O1xuICAgIGxvZGFzaC53b3JkcyA9IHdvcmRzO1xuICAgIGxvZGFzaC53cmFwID0gd3JhcDtcbiAgICBsb2Rhc2gueG9yID0geG9yO1xuICAgIGxvZGFzaC54b3JCeSA9IHhvckJ5O1xuICAgIGxvZGFzaC54b3JXaXRoID0geG9yV2l0aDtcbiAgICBsb2Rhc2guemlwID0gemlwO1xuICAgIGxvZGFzaC56aXBPYmplY3QgPSB6aXBPYmplY3Q7XG4gICAgbG9kYXNoLnppcE9iamVjdERlZXAgPSB6aXBPYmplY3REZWVwO1xuICAgIGxvZGFzaC56aXBXaXRoID0gemlwV2l0aDtcblxuICAgIC8vIEFkZCBhbGlhc2VzLlxuICAgIGxvZGFzaC5lbnRyaWVzID0gdG9QYWlycztcbiAgICBsb2Rhc2guZW50cmllc0luID0gdG9QYWlyc0luO1xuICAgIGxvZGFzaC5leHRlbmQgPSBhc3NpZ25JbjtcbiAgICBsb2Rhc2guZXh0ZW5kV2l0aCA9IGFzc2lnbkluV2l0aDtcblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBtaXhpbihsb2Rhc2gsIGxvZGFzaCk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0aGF0IHJldHVybiB1bndyYXBwZWQgdmFsdWVzIGluIGNoYWluIHNlcXVlbmNlcy5cbiAgICBsb2Rhc2guYWRkID0gYWRkO1xuICAgIGxvZGFzaC5hdHRlbXB0ID0gYXR0ZW1wdDtcbiAgICBsb2Rhc2guY2FtZWxDYXNlID0gY2FtZWxDYXNlO1xuICAgIGxvZGFzaC5jYXBpdGFsaXplID0gY2FwaXRhbGl6ZTtcbiAgICBsb2Rhc2guY2VpbCA9IGNlaWw7XG4gICAgbG9kYXNoLmNsYW1wID0gY2xhbXA7XG4gICAgbG9kYXNoLmNsb25lID0gY2xvbmU7XG4gICAgbG9kYXNoLmNsb25lRGVlcCA9IGNsb25lRGVlcDtcbiAgICBsb2Rhc2guY2xvbmVEZWVwV2l0aCA9IGNsb25lRGVlcFdpdGg7XG4gICAgbG9kYXNoLmNsb25lV2l0aCA9IGNsb25lV2l0aDtcbiAgICBsb2Rhc2guY29uZm9ybXNUbyA9IGNvbmZvcm1zVG87XG4gICAgbG9kYXNoLmRlYnVyciA9IGRlYnVycjtcbiAgICBsb2Rhc2guZGVmYXVsdFRvID0gZGVmYXVsdFRvO1xuICAgIGxvZGFzaC5kaXZpZGUgPSBkaXZpZGU7XG4gICAgbG9kYXNoLmVuZHNXaXRoID0gZW5kc1dpdGg7XG4gICAgbG9kYXNoLmVxID0gZXE7XG4gICAgbG9kYXNoLmVzY2FwZSA9IGVzY2FwZTtcbiAgICBsb2Rhc2guZXNjYXBlUmVnRXhwID0gZXNjYXBlUmVnRXhwO1xuICAgIGxvZGFzaC5ldmVyeSA9IGV2ZXJ5O1xuICAgIGxvZGFzaC5maW5kID0gZmluZDtcbiAgICBsb2Rhc2guZmluZEluZGV4ID0gZmluZEluZGV4O1xuICAgIGxvZGFzaC5maW5kS2V5ID0gZmluZEtleTtcbiAgICBsb2Rhc2guZmluZExhc3QgPSBmaW5kTGFzdDtcbiAgICBsb2Rhc2guZmluZExhc3RJbmRleCA9IGZpbmRMYXN0SW5kZXg7XG4gICAgbG9kYXNoLmZpbmRMYXN0S2V5ID0gZmluZExhc3RLZXk7XG4gICAgbG9kYXNoLmZsb29yID0gZmxvb3I7XG4gICAgbG9kYXNoLmZvckVhY2ggPSBmb3JFYWNoO1xuICAgIGxvZGFzaC5mb3JFYWNoUmlnaHQgPSBmb3JFYWNoUmlnaHQ7XG4gICAgbG9kYXNoLmZvckluID0gZm9ySW47XG4gICAgbG9kYXNoLmZvckluUmlnaHQgPSBmb3JJblJpZ2h0O1xuICAgIGxvZGFzaC5mb3JPd24gPSBmb3JPd247XG4gICAgbG9kYXNoLmZvck93blJpZ2h0ID0gZm9yT3duUmlnaHQ7XG4gICAgbG9kYXNoLmdldCA9IGdldDtcbiAgICBsb2Rhc2guZ3QgPSBndDtcbiAgICBsb2Rhc2guZ3RlID0gZ3RlO1xuICAgIGxvZGFzaC5oYXMgPSBoYXM7XG4gICAgbG9kYXNoLmhhc0luID0gaGFzSW47XG4gICAgbG9kYXNoLmhlYWQgPSBoZWFkO1xuICAgIGxvZGFzaC5pZGVudGl0eSA9IGlkZW50aXR5O1xuICAgIGxvZGFzaC5pbmNsdWRlcyA9IGluY2x1ZGVzO1xuICAgIGxvZGFzaC5pbmRleE9mID0gaW5kZXhPZjtcbiAgICBsb2Rhc2guaW5SYW5nZSA9IGluUmFuZ2U7XG4gICAgbG9kYXNoLmludm9rZSA9IGludm9rZTtcbiAgICBsb2Rhc2guaXNBcmd1bWVudHMgPSBpc0FyZ3VtZW50cztcbiAgICBsb2Rhc2guaXNBcnJheSA9IGlzQXJyYXk7XG4gICAgbG9kYXNoLmlzQXJyYXlCdWZmZXIgPSBpc0FycmF5QnVmZmVyO1xuICAgIGxvZGFzaC5pc0FycmF5TGlrZSA9IGlzQXJyYXlMaWtlO1xuICAgIGxvZGFzaC5pc0FycmF5TGlrZU9iamVjdCA9IGlzQXJyYXlMaWtlT2JqZWN0O1xuICAgIGxvZGFzaC5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG4gICAgbG9kYXNoLmlzQnVmZmVyID0gaXNCdWZmZXI7XG4gICAgbG9kYXNoLmlzRGF0ZSA9IGlzRGF0ZTtcbiAgICBsb2Rhc2guaXNFbGVtZW50ID0gaXNFbGVtZW50O1xuICAgIGxvZGFzaC5pc0VtcHR5ID0gaXNFbXB0eTtcbiAgICBsb2Rhc2guaXNFcXVhbCA9IGlzRXF1YWw7XG4gICAgbG9kYXNoLmlzRXF1YWxXaXRoID0gaXNFcXVhbFdpdGg7XG4gICAgbG9kYXNoLmlzRXJyb3IgPSBpc0Vycm9yO1xuICAgIGxvZGFzaC5pc0Zpbml0ZSA9IGlzRmluaXRlO1xuICAgIGxvZGFzaC5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbiAgICBsb2Rhc2guaXNJbnRlZ2VyID0gaXNJbnRlZ2VyO1xuICAgIGxvZGFzaC5pc0xlbmd0aCA9IGlzTGVuZ3RoO1xuICAgIGxvZGFzaC5pc01hcCA9IGlzTWFwO1xuICAgIGxvZGFzaC5pc01hdGNoID0gaXNNYXRjaDtcbiAgICBsb2Rhc2guaXNNYXRjaFdpdGggPSBpc01hdGNoV2l0aDtcbiAgICBsb2Rhc2guaXNOYU4gPSBpc05hTjtcbiAgICBsb2Rhc2guaXNOYXRpdmUgPSBpc05hdGl2ZTtcbiAgICBsb2Rhc2guaXNOaWwgPSBpc05pbDtcbiAgICBsb2Rhc2guaXNOdWxsID0gaXNOdWxsO1xuICAgIGxvZGFzaC5pc051bWJlciA9IGlzTnVtYmVyO1xuICAgIGxvZGFzaC5pc09iamVjdCA9IGlzT2JqZWN0O1xuICAgIGxvZGFzaC5pc09iamVjdExpa2UgPSBpc09iamVjdExpa2U7XG4gICAgbG9kYXNoLmlzUGxhaW5PYmplY3QgPSBpc1BsYWluT2JqZWN0O1xuICAgIGxvZGFzaC5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuICAgIGxvZGFzaC5pc1NhZmVJbnRlZ2VyID0gaXNTYWZlSW50ZWdlcjtcbiAgICBsb2Rhc2guaXNTZXQgPSBpc1NldDtcbiAgICBsb2Rhc2guaXNTdHJpbmcgPSBpc1N0cmluZztcbiAgICBsb2Rhc2guaXNTeW1ib2wgPSBpc1N5bWJvbDtcbiAgICBsb2Rhc2guaXNUeXBlZEFycmF5ID0gaXNUeXBlZEFycmF5O1xuICAgIGxvZGFzaC5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuICAgIGxvZGFzaC5pc1dlYWtNYXAgPSBpc1dlYWtNYXA7XG4gICAgbG9kYXNoLmlzV2Vha1NldCA9IGlzV2Vha1NldDtcbiAgICBsb2Rhc2guam9pbiA9IGpvaW47XG4gICAgbG9kYXNoLmtlYmFiQ2FzZSA9IGtlYmFiQ2FzZTtcbiAgICBsb2Rhc2gubGFzdCA9IGxhc3Q7XG4gICAgbG9kYXNoLmxhc3RJbmRleE9mID0gbGFzdEluZGV4T2Y7XG4gICAgbG9kYXNoLmxvd2VyQ2FzZSA9IGxvd2VyQ2FzZTtcbiAgICBsb2Rhc2gubG93ZXJGaXJzdCA9IGxvd2VyRmlyc3Q7XG4gICAgbG9kYXNoLmx0ID0gbHQ7XG4gICAgbG9kYXNoLmx0ZSA9IGx0ZTtcbiAgICBsb2Rhc2gubWF4ID0gbWF4O1xuICAgIGxvZGFzaC5tYXhCeSA9IG1heEJ5O1xuICAgIGxvZGFzaC5tZWFuID0gbWVhbjtcbiAgICBsb2Rhc2gubWVhbkJ5ID0gbWVhbkJ5O1xuICAgIGxvZGFzaC5taW4gPSBtaW47XG4gICAgbG9kYXNoLm1pbkJ5ID0gbWluQnk7XG4gICAgbG9kYXNoLnN0dWJBcnJheSA9IHN0dWJBcnJheTtcbiAgICBsb2Rhc2guc3R1YkZhbHNlID0gc3R1YkZhbHNlO1xuICAgIGxvZGFzaC5zdHViT2JqZWN0ID0gc3R1Yk9iamVjdDtcbiAgICBsb2Rhc2guc3R1YlN0cmluZyA9IHN0dWJTdHJpbmc7XG4gICAgbG9kYXNoLnN0dWJUcnVlID0gc3R1YlRydWU7XG4gICAgbG9kYXNoLm11bHRpcGx5ID0gbXVsdGlwbHk7XG4gICAgbG9kYXNoLm50aCA9IG50aDtcbiAgICBsb2Rhc2gubm9Db25mbGljdCA9IG5vQ29uZmxpY3Q7XG4gICAgbG9kYXNoLm5vb3AgPSBub29wO1xuICAgIGxvZGFzaC5ub3cgPSBub3c7XG4gICAgbG9kYXNoLnBhZCA9IHBhZDtcbiAgICBsb2Rhc2gucGFkRW5kID0gcGFkRW5kO1xuICAgIGxvZGFzaC5wYWRTdGFydCA9IHBhZFN0YXJ0O1xuICAgIGxvZGFzaC5wYXJzZUludCA9IHBhcnNlSW50O1xuICAgIGxvZGFzaC5yYW5kb20gPSByYW5kb207XG4gICAgbG9kYXNoLnJlZHVjZSA9IHJlZHVjZTtcbiAgICBsb2Rhc2gucmVkdWNlUmlnaHQgPSByZWR1Y2VSaWdodDtcbiAgICBsb2Rhc2gucmVwZWF0ID0gcmVwZWF0O1xuICAgIGxvZGFzaC5yZXBsYWNlID0gcmVwbGFjZTtcbiAgICBsb2Rhc2gucmVzdWx0ID0gcmVzdWx0O1xuICAgIGxvZGFzaC5yb3VuZCA9IHJvdW5kO1xuICAgIGxvZGFzaC5ydW5JbkNvbnRleHQgPSBydW5JbkNvbnRleHQ7XG4gICAgbG9kYXNoLnNhbXBsZSA9IHNhbXBsZTtcbiAgICBsb2Rhc2guc2l6ZSA9IHNpemU7XG4gICAgbG9kYXNoLnNuYWtlQ2FzZSA9IHNuYWtlQ2FzZTtcbiAgICBsb2Rhc2guc29tZSA9IHNvbWU7XG4gICAgbG9kYXNoLnNvcnRlZEluZGV4ID0gc29ydGVkSW5kZXg7XG4gICAgbG9kYXNoLnNvcnRlZEluZGV4QnkgPSBzb3J0ZWRJbmRleEJ5O1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleE9mID0gc29ydGVkSW5kZXhPZjtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4ID0gc29ydGVkTGFzdEluZGV4O1xuICAgIGxvZGFzaC5zb3J0ZWRMYXN0SW5kZXhCeSA9IHNvcnRlZExhc3RJbmRleEJ5O1xuICAgIGxvZGFzaC5zb3J0ZWRMYXN0SW5kZXhPZiA9IHNvcnRlZExhc3RJbmRleE9mO1xuICAgIGxvZGFzaC5zdGFydENhc2UgPSBzdGFydENhc2U7XG4gICAgbG9kYXNoLnN0YXJ0c1dpdGggPSBzdGFydHNXaXRoO1xuICAgIGxvZGFzaC5zdWJ0cmFjdCA9IHN1YnRyYWN0O1xuICAgIGxvZGFzaC5zdW0gPSBzdW07XG4gICAgbG9kYXNoLnN1bUJ5ID0gc3VtQnk7XG4gICAgbG9kYXNoLnRlbXBsYXRlID0gdGVtcGxhdGU7XG4gICAgbG9kYXNoLnRpbWVzID0gdGltZXM7XG4gICAgbG9kYXNoLnRvRmluaXRlID0gdG9GaW5pdGU7XG4gICAgbG9kYXNoLnRvSW50ZWdlciA9IHRvSW50ZWdlcjtcbiAgICBsb2Rhc2gudG9MZW5ndGggPSB0b0xlbmd0aDtcbiAgICBsb2Rhc2gudG9Mb3dlciA9IHRvTG93ZXI7XG4gICAgbG9kYXNoLnRvTnVtYmVyID0gdG9OdW1iZXI7XG4gICAgbG9kYXNoLnRvU2FmZUludGVnZXIgPSB0b1NhZmVJbnRlZ2VyO1xuICAgIGxvZGFzaC50b1N0cmluZyA9IHRvU3RyaW5nO1xuICAgIGxvZGFzaC50b1VwcGVyID0gdG9VcHBlcjtcbiAgICBsb2Rhc2gudHJpbSA9IHRyaW07XG4gICAgbG9kYXNoLnRyaW1FbmQgPSB0cmltRW5kO1xuICAgIGxvZGFzaC50cmltU3RhcnQgPSB0cmltU3RhcnQ7XG4gICAgbG9kYXNoLnRydW5jYXRlID0gdHJ1bmNhdGU7XG4gICAgbG9kYXNoLnVuZXNjYXBlID0gdW5lc2NhcGU7XG4gICAgbG9kYXNoLnVuaXF1ZUlkID0gdW5pcXVlSWQ7XG4gICAgbG9kYXNoLnVwcGVyQ2FzZSA9IHVwcGVyQ2FzZTtcbiAgICBsb2Rhc2gudXBwZXJGaXJzdCA9IHVwcGVyRmlyc3Q7XG5cbiAgICAvLyBBZGQgYWxpYXNlcy5cbiAgICBsb2Rhc2guZWFjaCA9IGZvckVhY2g7XG4gICAgbG9kYXNoLmVhY2hSaWdodCA9IGZvckVhY2hSaWdodDtcbiAgICBsb2Rhc2guZmlyc3QgPSBoZWFkO1xuXG4gICAgbWl4aW4obG9kYXNoLCAoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc291cmNlID0ge307XG4gICAgICBiYXNlRm9yT3duKGxvZGFzaCwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwobG9kYXNoLnByb3RvdHlwZSwgbWV0aG9kTmFtZSkpIHtcbiAgICAgICAgICBzb3VyY2VbbWV0aG9kTmFtZV0gPSBmdW5jO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgfSgpKSwgeyAnY2hhaW4nOiBmYWxzZSB9KTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBzZW1hbnRpYyB2ZXJzaW9uIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgbG9kYXNoLlZFUlNJT04gPSBWRVJTSU9OO1xuXG4gICAgLy8gQXNzaWduIGRlZmF1bHQgcGxhY2Vob2xkZXJzLlxuICAgIGFycmF5RWFjaChbJ2JpbmQnLCAnYmluZEtleScsICdjdXJyeScsICdjdXJyeVJpZ2h0JywgJ3BhcnRpYWwnLCAncGFydGlhbFJpZ2h0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgIGxvZGFzaFttZXRob2ROYW1lXS5wbGFjZWhvbGRlciA9IGxvZGFzaDtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgZm9yIGBfLmRyb3BgIGFuZCBgXy50YWtlYCB2YXJpYW50cy5cbiAgICBhcnJheUVhY2goWydkcm9wJywgJ3Rha2UnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgbiA9IG4gPT09IHVuZGVmaW5lZCA/IDEgOiBuYXRpdmVNYXgodG9JbnRlZ2VyKG4pLCAwKTtcblxuICAgICAgICB2YXIgcmVzdWx0ID0gKHRoaXMuX19maWx0ZXJlZF9fICYmICFpbmRleClcbiAgICAgICAgICA/IG5ldyBMYXp5V3JhcHBlcih0aGlzKVxuICAgICAgICAgIDogdGhpcy5jbG9uZSgpO1xuXG4gICAgICAgIGlmIChyZXN1bHQuX19maWx0ZXJlZF9fKSB7XG4gICAgICAgICAgcmVzdWx0Ll9fdGFrZUNvdW50X18gPSBuYXRpdmVNaW4obiwgcmVzdWx0Ll9fdGFrZUNvdW50X18pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdC5fX3ZpZXdzX18ucHVzaCh7XG4gICAgICAgICAgICAnc2l6ZSc6IG5hdGl2ZU1pbihuLCBNQVhfQVJSQVlfTEVOR1RIKSxcbiAgICAgICAgICAgICd0eXBlJzogbWV0aG9kTmFtZSArIChyZXN1bHQuX19kaXJfXyA8IDAgPyAnUmlnaHQnIDogJycpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lICsgJ1JpZ2h0J10gPSBmdW5jdGlvbihuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKVttZXRob2ROYW1lXShuKS5yZXZlcnNlKCk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyB0aGF0IGFjY2VwdCBhbiBgaXRlcmF0ZWVgIHZhbHVlLlxuICAgIGFycmF5RWFjaChbJ2ZpbHRlcicsICdtYXAnLCAndGFrZVdoaWxlJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgdHlwZSA9IGluZGV4ICsgMSxcbiAgICAgICAgICBpc0ZpbHRlciA9IHR5cGUgPT0gTEFaWV9GSUxURVJfRkxBRyB8fCB0eXBlID09IExBWllfV0hJTEVfRkxBRztcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgcmVzdWx0Ll9faXRlcmF0ZWVzX18ucHVzaCh7XG4gICAgICAgICAgJ2l0ZXJhdGVlJzogZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpLFxuICAgICAgICAgICd0eXBlJzogdHlwZVxuICAgICAgICB9KTtcbiAgICAgICAgcmVzdWx0Ll9fZmlsdGVyZWRfXyA9IHJlc3VsdC5fX2ZpbHRlcmVkX18gfHwgaXNGaWx0ZXI7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uaGVhZGAgYW5kIGBfLmxhc3RgLlxuICAgIGFycmF5RWFjaChbJ2hlYWQnLCAnbGFzdCddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIHRha2VOYW1lID0gJ3Rha2UnICsgKGluZGV4ID8gJ1JpZ2h0JyA6ICcnKTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzW3Rha2VOYW1lXSgxKS52YWx1ZSgpWzBdO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgZm9yIGBfLmluaXRpYWxgIGFuZCBgXy50YWlsYC5cbiAgICBhcnJheUVhY2goWydpbml0aWFsJywgJ3RhaWwnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciBkcm9wTmFtZSA9ICdkcm9wJyArIChpbmRleCA/ICcnIDogJ1JpZ2h0Jyk7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fX2ZpbHRlcmVkX18gPyBuZXcgTGF6eVdyYXBwZXIodGhpcykgOiB0aGlzW2Ryb3BOYW1lXSgxKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuY29tcGFjdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKGlkZW50aXR5KTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmZpbmQgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihwcmVkaWNhdGUpLmhlYWQoKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmZpbmRMYXN0ID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKCkuZmluZChwcmVkaWNhdGUpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuaW52b2tlTWFwID0gYmFzZVJlc3QoZnVuY3Rpb24ocGF0aCwgYXJncykge1xuICAgICAgaWYgKHR5cGVvZiBwYXRoID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZSh2YWx1ZSwgcGF0aCwgYXJncyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5yZWplY3QgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlKSkpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgICBzdGFydCA9IHRvSW50ZWdlcihzdGFydCk7XG5cbiAgICAgIHZhciByZXN1bHQgPSB0aGlzO1xuICAgICAgaWYgKHJlc3VsdC5fX2ZpbHRlcmVkX18gJiYgKHN0YXJ0ID4gMCB8fCBlbmQgPCAwKSkge1xuICAgICAgICByZXR1cm4gbmV3IExhenlXcmFwcGVyKHJlc3VsdCk7XG4gICAgICB9XG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC50YWtlUmlnaHQoLXN0YXJ0KTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhcnQpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LmRyb3Aoc3RhcnQpO1xuICAgICAgfVxuICAgICAgaWYgKGVuZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVuZCA9IHRvSW50ZWdlcihlbmQpO1xuICAgICAgICByZXN1bHQgPSBlbmQgPCAwID8gcmVzdWx0LmRyb3BSaWdodCgtZW5kKSA6IHJlc3VsdC50YWtlKGVuZCAtIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS50YWtlUmlnaHRXaGlsZSA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpLnRha2VXaGlsZShwcmVkaWNhdGUpLnJldmVyc2UoKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRha2UoTUFYX0FSUkFZX0xFTkdUSCk7XG4gICAgfTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIGJhc2VGb3JPd24oTGF6eVdyYXBwZXIucHJvdG90eXBlLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgY2hlY2tJdGVyYXRlZSA9IC9eKD86ZmlsdGVyfGZpbmR8bWFwfHJlamVjdCl8V2hpbGUkLy50ZXN0KG1ldGhvZE5hbWUpLFxuICAgICAgICAgIGlzVGFrZXIgPSAvXig/OmhlYWR8bGFzdCkkLy50ZXN0KG1ldGhvZE5hbWUpLFxuICAgICAgICAgIGxvZGFzaEZ1bmMgPSBsb2Rhc2hbaXNUYWtlciA/ICgndGFrZScgKyAobWV0aG9kTmFtZSA9PSAnbGFzdCcgPyAnUmlnaHQnIDogJycpKSA6IG1ldGhvZE5hbWVdLFxuICAgICAgICAgIHJldFVud3JhcHBlZCA9IGlzVGFrZXIgfHwgL15maW5kLy50ZXN0KG1ldGhvZE5hbWUpO1xuXG4gICAgICBpZiAoIWxvZGFzaEZ1bmMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fLFxuICAgICAgICAgICAgYXJncyA9IGlzVGFrZXIgPyBbMV0gOiBhcmd1bWVudHMsXG4gICAgICAgICAgICBpc0xhenkgPSB2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyLFxuICAgICAgICAgICAgaXRlcmF0ZWUgPSBhcmdzWzBdLFxuICAgICAgICAgICAgdXNlTGF6eSA9IGlzTGF6eSB8fCBpc0FycmF5KHZhbHVlKTtcblxuICAgICAgICB2YXIgaW50ZXJjZXB0b3IgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2hGdW5jLmFwcGx5KGxvZGFzaCwgYXJyYXlQdXNoKFt2YWx1ZV0sIGFyZ3MpKTtcbiAgICAgICAgICByZXR1cm4gKGlzVGFrZXIgJiYgY2hhaW5BbGwpID8gcmVzdWx0WzBdIDogcmVzdWx0O1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh1c2VMYXp5ICYmIGNoZWNrSXRlcmF0ZWUgJiYgdHlwZW9mIGl0ZXJhdGVlID09ICdmdW5jdGlvbicgJiYgaXRlcmF0ZWUubGVuZ3RoICE9IDEpIHtcbiAgICAgICAgICAvLyBBdm9pZCBsYXp5IHVzZSBpZiB0aGUgaXRlcmF0ZWUgaGFzIGEgXCJsZW5ndGhcIiB2YWx1ZSBvdGhlciB0aGFuIGAxYC5cbiAgICAgICAgICBpc0xhenkgPSB1c2VMYXp5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNoYWluQWxsID0gdGhpcy5fX2NoYWluX18sXG4gICAgICAgICAgICBpc0h5YnJpZCA9ICEhdGhpcy5fX2FjdGlvbnNfXy5sZW5ndGgsXG4gICAgICAgICAgICBpc1Vud3JhcHBlZCA9IHJldFVud3JhcHBlZCAmJiAhY2hhaW5BbGwsXG4gICAgICAgICAgICBvbmx5TGF6eSA9IGlzTGF6eSAmJiAhaXNIeWJyaWQ7XG5cbiAgICAgICAgaWYgKCFyZXRVbndyYXBwZWQgJiYgdXNlTGF6eSkge1xuICAgICAgICAgIHZhbHVlID0gb25seUxhenkgPyB2YWx1ZSA6IG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh2YWx1ZSwgYXJncyk7XG4gICAgICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fLnB1c2goeyAnZnVuYyc6IHRocnUsICdhcmdzJzogW2ludGVyY2VwdG9yXSwgJ3RoaXNBcmcnOiB1bmRlZmluZWQgfSk7XG4gICAgICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHJlc3VsdCwgY2hhaW5BbGwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Vud3JhcHBlZCAmJiBvbmx5TGF6eSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCA9IHRoaXMudGhydShpbnRlcmNlcHRvcik7XG4gICAgICAgIHJldHVybiBpc1Vud3JhcHBlZCA/IChpc1Rha2VyID8gcmVzdWx0LnZhbHVlKClbMF0gOiByZXN1bHQudmFsdWUoKSkgOiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBBcnJheWAgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgYXJyYXlFYWNoKFsncG9wJywgJ3B1c2gnLCAnc2hpZnQnLCAnc29ydCcsICdzcGxpY2UnLCAndW5zaGlmdCddLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgZnVuYyA9IGFycmF5UHJvdG9bbWV0aG9kTmFtZV0sXG4gICAgICAgICAgY2hhaW5OYW1lID0gL14oPzpwdXNofHNvcnR8dW5zaGlmdCkkLy50ZXN0KG1ldGhvZE5hbWUpID8gJ3RhcCcgOiAndGhydScsXG4gICAgICAgICAgcmV0VW53cmFwcGVkID0gL14oPzpwb3B8c2hpZnQpJC8udGVzdChtZXRob2ROYW1lKTtcblxuICAgICAgbG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgaWYgKHJldFVud3JhcHBlZCAmJiAhdGhpcy5fX2NoYWluX18pIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnZhbHVlKCk7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkoaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFtdLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpc1tjaGFpbk5hbWVdKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkoaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFtdLCBhcmdzKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gTWFwIG1pbmlmaWVkIG1ldGhvZCBuYW1lcyB0byB0aGVpciByZWFsIG5hbWVzLlxuICAgIGJhc2VGb3JPd24oTGF6eVdyYXBwZXIucHJvdG90eXBlLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgbG9kYXNoRnVuYyA9IGxvZGFzaFttZXRob2ROYW1lXTtcbiAgICAgIGlmIChsb2Rhc2hGdW5jKSB7XG4gICAgICAgIHZhciBrZXkgPSBsb2Rhc2hGdW5jLm5hbWUgKyAnJztcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlYWxOYW1lcywga2V5KSkge1xuICAgICAgICAgIHJlYWxOYW1lc1trZXldID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmVhbE5hbWVzW2tleV0ucHVzaCh7ICduYW1lJzogbWV0aG9kTmFtZSwgJ2Z1bmMnOiBsb2Rhc2hGdW5jIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmVhbE5hbWVzW2NyZWF0ZUh5YnJpZCh1bmRlZmluZWQsIFdSQVBfQklORF9LRVlfRkxBRykubmFtZV0gPSBbe1xuICAgICAgJ25hbWUnOiAnd3JhcHBlcicsXG4gICAgICAnZnVuYyc6IHVuZGVmaW5lZFxuICAgIH1dO1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYExhenlXcmFwcGVyYC5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuY2xvbmUgPSBsYXp5Q2xvbmU7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnJldmVyc2UgPSBsYXp5UmV2ZXJzZTtcbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudmFsdWUgPSBsYXp5VmFsdWU7XG5cbiAgICAvLyBBZGQgY2hhaW4gc2VxdWVuY2UgbWV0aG9kcyB0byB0aGUgYGxvZGFzaGAgd3JhcHBlci5cbiAgICBsb2Rhc2gucHJvdG90eXBlLmF0ID0gd3JhcHBlckF0O1xuICAgIGxvZGFzaC5wcm90b3R5cGUuY2hhaW4gPSB3cmFwcGVyQ2hhaW47XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jb21taXQgPSB3cmFwcGVyQ29tbWl0O1xuICAgIGxvZGFzaC5wcm90b3R5cGUubmV4dCA9IHdyYXBwZXJOZXh0O1xuICAgIGxvZGFzaC5wcm90b3R5cGUucGxhbnQgPSB3cmFwcGVyUGxhbnQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5yZXZlcnNlID0gd3JhcHBlclJldmVyc2U7XG4gICAgbG9kYXNoLnByb3RvdHlwZS50b0pTT04gPSBsb2Rhc2gucHJvdG90eXBlLnZhbHVlT2YgPSBsb2Rhc2gucHJvdG90eXBlLnZhbHVlID0gd3JhcHBlclZhbHVlO1xuXG4gICAgLy8gQWRkIGxhenkgYWxpYXNlcy5cbiAgICBsb2Rhc2gucHJvdG90eXBlLmZpcnN0ID0gbG9kYXNoLnByb3RvdHlwZS5oZWFkO1xuXG4gICAgaWYgKHN5bUl0ZXJhdG9yKSB7XG4gICAgICBsb2Rhc2gucHJvdG90eXBlW3N5bUl0ZXJhdG9yXSA9IHdyYXBwZXJUb0l0ZXJhdG9yO1xuICAgIH1cbiAgICByZXR1cm4gbG9kYXNoO1xuICB9KTtcblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvLyBFeHBvcnQgbG9kYXNoLlxuICB2YXIgXyA9IHJ1bkluQ29udGV4dCgpO1xuXG4gIC8vIFNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMsIGxpa2Ugci5qcywgY2hlY2sgZm9yIGNvbmRpdGlvbiBwYXR0ZXJucyBsaWtlOlxuICBpZiAodHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcbiAgICAvLyBFeHBvc2UgTG9kYXNoIG9uIHRoZSBnbG9iYWwgb2JqZWN0IHRvIHByZXZlbnQgZXJyb3JzIHdoZW4gTG9kYXNoIGlzXG4gICAgLy8gbG9hZGVkIGJ5IGEgc2NyaXB0IHRhZyBpbiB0aGUgcHJlc2VuY2Ugb2YgYW4gQU1EIGxvYWRlci5cbiAgICAvLyBTZWUgaHR0cDovL3JlcXVpcmVqcy5vcmcvZG9jcy9lcnJvcnMuaHRtbCNtaXNtYXRjaCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgIC8vIFVzZSBgXy5ub0NvbmZsaWN0YCB0byByZW1vdmUgTG9kYXNoIGZyb20gdGhlIGdsb2JhbCBvYmplY3QuXG4gICAgcm9vdC5fID0gXztcblxuICAgIC8vIERlZmluZSBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlIHNvLCB0aHJvdWdoIHBhdGggbWFwcGluZywgaXQgY2FuIGJlXG4gICAgLy8gcmVmZXJlbmNlZCBhcyB0aGUgXCJ1bmRlcnNjb3JlXCIgbW9kdWxlLlxuICAgIGRlZmluZShmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBfO1xuICAgIH0pO1xuICB9XG4gIC8vIENoZWNrIGZvciBgZXhwb3J0c2AgYWZ0ZXIgYGRlZmluZWAgaW4gY2FzZSBhIGJ1aWxkIG9wdGltaXplciBhZGRzIGl0LlxuICBlbHNlIGlmIChmcmVlTW9kdWxlKSB7XG4gICAgLy8gRXhwb3J0IGZvciBOb2RlLmpzLlxuICAgIChmcmVlTW9kdWxlLmV4cG9ydHMgPSBfKS5fID0gXztcbiAgICAvLyBFeHBvcnQgZm9yIENvbW1vbkpTIHN1cHBvcnQuXG4gICAgZnJlZUV4cG9ydHMuXyA9IF87XG4gIH1cbiAgZWxzZSB7XG4gICAgLy8gRXhwb3J0IHRvIHRoZSBnbG9iYWwgb2JqZWN0LlxuICAgIHJvb3QuXyA9IF87XG4gIH1cbn0uY2FsbCh0aGlzKSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdGxvYWRlZDogZmFsc2UsXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuXHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5ubWQgPSAobW9kdWxlKSA9PiB7XG5cdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdHJldHVybiBtb2R1bGU7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG5leHBvcnQgY29uc3QgZWRpdERvbSA9ICgoKSA9PiB7XG4gICAgY29uc3QgYWRkUGxheWVyc0NvdW50ID0gKGNvdW50KSA9PiB7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXJfX3N0YXRzLXNlY3Rpb25fX2xpc3RfX2l0ZW1fX3Jlc3VsdCcpLmlubmVySFRNTCA9IGNvdW50O1xuICAgIH07XG5cbiAgICBjb25zdCBhZGRDdXJyZW50V2VlayA9ICh3ZWVrKSA9PiB7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXJfX3N0YXRzLXNlY3Rpb25fX3RvcC1yZXN1bHQnKS5pbm5lckhUTUwgPSB3ZWVrO1xuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBhZGRQbGF5ZXJzQ291bnQsXG4gICAgICAgIGFkZEN1cnJlbnRXZWVrXG4gICAgfVxufSkoKTtcblxuIiwiLyogVGFidWxhdG9yIHY1LjUuMiAoYykgT2xpdmVyIEZvbGtlcmQgMjAyMyAqL1xuY2xhc3MgQ29yZUZlYXR1cmV7XG5cblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHRoaXMudGFibGUgPSB0YWJsZTtcblx0fVxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8gRGF0YUxvYWQgLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0cmVsb2FkRGF0YShkYXRhLCBzaWxlbnQsIGNvbHVtbnNDaGFuZ2VkKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5kYXRhTG9hZGVyLmxvYWQoZGF0YSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgc2lsZW50LCBjb2x1bW5zQ2hhbmdlZCk7XG5cdH1cblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLyBMb2NhbGl6YXRpb24gLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdGxhbmdUZXh0KCl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUubW9kdWxlcy5sb2NhbGl6ZS5nZXRUZXh0KC4uLmFyZ3VtZW50cyk7XG5cdH1cblxuXHRsYW5nQmluZCgpe1xuXHRcdHJldHVybiB0aGlzLnRhYmxlLm1vZHVsZXMubG9jYWxpemUuYmluZCguLi5hcmd1bWVudHMpO1xuXHR9XG5cblx0bGFuZ0xvY2FsZSgpe1xuXHRcdHJldHVybiB0aGlzLnRhYmxlLm1vZHVsZXMubG9jYWxpemUuZ2V0TG9jYWxlKC4uLmFyZ3VtZW50cyk7XG5cdH1cblxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vIEludGVyIFRhYmxlIENvbW1zIC8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0Y29tbXNDb25uZWN0aW9ucygpe1xuXHRcdHJldHVybiB0aGlzLnRhYmxlLm1vZHVsZXMuY29tbXMuZ2V0Q29ubmVjdGlvbnMoLi4uYXJndW1lbnRzKTtcblx0fVxuXG5cdGNvbW1zU2VuZCgpe1xuXHRcdHJldHVybiB0aGlzLnRhYmxlLm1vZHVsZXMuY29tbXMuc2VuZCguLi5hcmd1bWVudHMpO1xuXHR9XG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8gTGF5b3V0ICAvLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXHRsYXlvdXRNb2RlKCl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUubW9kdWxlcy5sYXlvdXQuZ2V0TW9kZSgpO1xuXHR9XG5cblx0bGF5b3V0UmVmcmVzaChmb3JjZSl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUubW9kdWxlcy5sYXlvdXQubGF5b3V0KGZvcmNlKTtcblx0fVxuXG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLyBFdmVudCBCdXMgLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXHRzdWJzY3JpYmUoKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5ldmVudEJ1cy5zdWJzY3JpYmUoLi4uYXJndW1lbnRzKTtcblx0fVxuXG5cdHVuc3Vic2NyaWJlKCl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUuZXZlbnRCdXMudW5zdWJzY3JpYmUoLi4uYXJndW1lbnRzKTtcblx0fVxuXG5cdHN1YnNjcmliZWQoa2V5KXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5ldmVudEJ1cy5zdWJzY3JpYmVkKGtleSk7XG5cdH1cblxuXHRzdWJzY3JpcHRpb25DaGFuZ2UoKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5ldmVudEJ1cy5zdWJzY3JpcHRpb25DaGFuZ2UoLi4uYXJndW1lbnRzKTtcblx0fVxuXG5cdGRpc3BhdGNoKCl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUuZXZlbnRCdXMuZGlzcGF0Y2goLi4uYXJndW1lbnRzKTtcblx0fVxuXG5cdGNoYWluKCl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUuZXZlbnRCdXMuY2hhaW4oLi4uYXJndW1lbnRzKTtcblx0fVxuXG5cdGNvbmZpcm0oKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5ldmVudEJ1cy5jb25maXJtKC4uLmFyZ3VtZW50cyk7XG5cdH1cblxuXHRkaXNwYXRjaEV4dGVybmFsKCl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUuZXh0ZXJuYWxFdmVudHMuZGlzcGF0Y2goLi4uYXJndW1lbnRzKTtcblx0fVxuXG5cdHN1YnNjcmliZWRFeHRlcm5hbChrZXkpe1xuXHRcdHJldHVybiB0aGlzLnRhYmxlLmV4dGVybmFsRXZlbnRzLnN1YnNjcmliZWQoa2V5KTtcblx0fVxuXG5cdHN1YnNjcmlwdGlvbkNoYW5nZUV4dGVybmFsKCl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUuZXh0ZXJuYWxFdmVudHMuc3Vic2NyaXB0aW9uQ2hhbmdlKC4uLmFyZ3VtZW50cyk7XG5cdH1cblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLyBPcHRpb25zIC8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdG9wdGlvbnMoa2V5KXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5vcHRpb25zW2tleV07XG5cdH1cblxuXHRzZXRPcHRpb24oa2V5LCB2YWx1ZSl7XG5cdFx0aWYodHlwZW9mIHZhbHVlICE9PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdHRoaXMudGFibGUub3B0aW9uc1trZXldID0gdmFsdWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMudGFibGUub3B0aW9uc1trZXldO1xuXHR9XG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vIERlcHJlY2F0aW9uIENoZWNrcyAvLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXHRkZXByZWNhdGlvbkNoZWNrKG9sZE9wdGlvbiwgbmV3T3B0aW9uKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5kZXByZWNhdGlvbkFkdmlzb3IuY2hlY2sob2xkT3B0aW9uLCBuZXdPcHRpb24pO1xuXHR9XG5cblx0ZGVwcmVjYXRpb25DaGVja01zZyhvbGRPcHRpb24sIG1zZyl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUuZGVwcmVjYXRpb25BZHZpc29yLmNoZWNrTXNnKG9sZE9wdGlvbiwgbXNnKTtcblx0fVxuXG5cdGRlcHJlY2F0aW9uTXNnKG1zZyl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUuZGVwcmVjYXRpb25BZHZpc29yLm1zZyhtc2cpO1xuXHR9XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vIE1vZHVsZXMgLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0bW9kdWxlKGtleSl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUubW9kdWxlKGtleSk7XG5cdH1cbn1cblxuY2xhc3MgSGVscGVyc3tcblxuXHRzdGF0aWMgZWxWaXNpYmxlKGVsKXtcblx0XHRyZXR1cm4gIShlbC5vZmZzZXRXaWR0aCA8PSAwICYmIGVsLm9mZnNldEhlaWdodCA8PSAwKTtcblx0fVxuXG5cdHN0YXRpYyBlbE9mZnNldChlbCl7XG5cdFx0dmFyIGJveCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogYm94LnRvcCArIHdpbmRvdy5wYWdlWU9mZnNldCAtIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRUb3AsXG5cdFx0XHRsZWZ0OiBib3gubGVmdCArIHdpbmRvdy5wYWdlWE9mZnNldCAtIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRMZWZ0XG5cdFx0fTtcblx0fVxuXG5cdHN0YXRpYyBkZWVwQ2xvbmUob2JqLCBjbG9uZSwgbGlzdCA9IFtdKXtcblx0XHR2YXIgb2JqZWN0UHJvdG8gPSB7fS5fX3Byb3RvX18sXG5cdFx0YXJyYXlQcm90byA9IFtdLl9fcHJvdG9fXztcblxuXHRcdGlmICghY2xvbmUpe1xuXHRcdFx0Y2xvbmUgPSBPYmplY3QuYXNzaWduKEFycmF5LmlzQXJyYXkob2JqKSA/IFtdIDoge30sIG9iaik7XG5cdFx0fVxuXG5cdFx0Zm9yKHZhciBpIGluIG9iaikge1xuXHRcdFx0bGV0IHN1YmplY3QgPSBvYmpbaV0sXG5cdFx0XHRtYXRjaCwgY29weTtcblxuXHRcdFx0aWYoc3ViamVjdCAhPSBudWxsICYmIHR5cGVvZiBzdWJqZWN0ID09PSBcIm9iamVjdFwiICYmIChzdWJqZWN0Ll9fcHJvdG9fXyA9PT0gb2JqZWN0UHJvdG8gfHwgc3ViamVjdC5fX3Byb3RvX18gPT09IGFycmF5UHJvdG8pKXtcblx0XHRcdFx0bWF0Y2ggPSBsaXN0LmZpbmRJbmRleCgoaXRlbSkgPT4ge1xuXHRcdFx0XHRcdHJldHVybiBpdGVtLnN1YmplY3QgPT09IHN1YmplY3Q7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGlmKG1hdGNoID4gLTEpe1xuXHRcdFx0XHRcdGNsb25lW2ldID0gbGlzdFttYXRjaF0uY29weTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGNvcHkgPSBPYmplY3QuYXNzaWduKEFycmF5LmlzQXJyYXkoc3ViamVjdCkgPyBbXSA6IHt9LCBzdWJqZWN0KTtcblxuXHRcdFx0XHRcdGxpc3QudW5zaGlmdCh7c3ViamVjdCwgY29weX0pO1xuXG5cdFx0XHRcdFx0Y2xvbmVbaV0gPSB0aGlzLmRlZXBDbG9uZShzdWJqZWN0LCBjb3B5LCBsaXN0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbG9uZTtcblx0fVxufVxuXG5jbGFzcyBQb3B1cCBleHRlbmRzIENvcmVGZWF0dXJle1xuXHRjb25zdHJ1Y3Rvcih0YWJsZSwgZWxlbWVudCwgcGFyZW50KXtcblx0XHRzdXBlcih0YWJsZSk7XG5cdFx0XG5cdFx0dGhpcy5lbGVtZW50ID0gZWxlbWVudDtcblx0XHR0aGlzLmNvbnRhaW5lciA9IHRoaXMuX2xvb2t1cENvbnRhaW5lcigpO1xuXHRcdFxuXHRcdHRoaXMucGFyZW50ID0gcGFyZW50O1xuXHRcdFxuXHRcdHRoaXMucmV2ZXJzZWRYID0gZmFsc2U7XG5cdFx0dGhpcy5jaGlsZFBvcHVwID0gbnVsbDtcblx0XHR0aGlzLmJsdXJhYmxlID0gZmFsc2U7XG5cdFx0dGhpcy5ibHVyQ2FsbGJhY2sgPSBudWxsO1xuXHRcdHRoaXMuYmx1ckV2ZW50c0JvdW5kID0gZmFsc2U7XG5cdFx0dGhpcy5yZW5kZXJlZENhbGxiYWNrID0gbnVsbDtcblx0XHRcblx0XHR0aGlzLnZpc2libGUgPSBmYWxzZTtcblx0XHR0aGlzLmhpZGVhYmxlID0gdHJ1ZTtcblx0XHRcblx0XHR0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1wb3B1cC1jb250YWluZXJcIik7XG5cdFx0XG5cdFx0dGhpcy5ibHVyRXZlbnQgPSB0aGlzLmhpZGUuYmluZCh0aGlzLCBmYWxzZSk7XG5cdFx0dGhpcy5lc2NFdmVudCA9IHRoaXMuX2VzY2FwZUNoZWNrLmJpbmQodGhpcyk7XG5cdFx0XG5cdFx0dGhpcy5kZXN0cm95QmluZGluZyA9IHRoaXMudGFibGVEZXN0cm95ZWQuYmluZCh0aGlzKTtcblx0XHR0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuXHR9XG5cdFxuXHR0YWJsZURlc3Ryb3llZCgpe1xuXHRcdHRoaXMuZGVzdHJveWVkID0gdHJ1ZTtcblx0XHR0aGlzLmhpZGUodHJ1ZSk7XG5cdH1cblx0XG5cdF9sb29rdXBDb250YWluZXIoKXtcblx0XHR2YXIgY29udGFpbmVyID0gdGhpcy50YWJsZS5vcHRpb25zLnBvcHVwQ29udGFpbmVyO1xuXHRcdFxuXHRcdGlmKHR5cGVvZiBjb250YWluZXIgPT09IFwic3RyaW5nXCIpe1xuXHRcdFx0Y29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXIpO1xuXHRcdFx0XG5cdFx0XHRpZighY29udGFpbmVyKXtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiTWVudSBFcnJvciAtIG5vIGNvbnRhaW5lciBlbGVtZW50IGZvdW5kIG1hdGNoaW5nIHNlbGVjdG9yOlwiLCAgdGhpcy50YWJsZS5vcHRpb25zLnBvcHVwQ29udGFpbmVyICwgXCIoZGVmYXVsdGluZyB0byBkb2N1bWVudCBib2R5KVwiKTtcblx0XHRcdH1cblx0XHR9ZWxzZSBpZiAoY29udGFpbmVyID09PSB0cnVlKXtcblx0XHRcdGNvbnRhaW5lciA9IHRoaXMudGFibGUuZWxlbWVudDtcblx0XHR9XG5cdFx0XG5cdFx0aWYoY29udGFpbmVyICYmICF0aGlzLl9jaGVja0NvbnRhaW5lcklzUGFyZW50KGNvbnRhaW5lcikpe1xuXHRcdFx0Y29udGFpbmVyID0gZmFsc2U7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJNZW51IEVycm9yIC0gY29udGFpbmVyIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiB0aGlzIHRhYmxlOlwiLCAgdGhpcy50YWJsZS5vcHRpb25zLnBvcHVwQ29udGFpbmVyICwgXCIoZGVmYXVsdGluZyB0byBkb2N1bWVudCBib2R5KVwiKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYoIWNvbnRhaW5lcil7XG5cdFx0XHRjb250YWluZXIgPSBkb2N1bWVudC5ib2R5O1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gY29udGFpbmVyO1xuXHR9XG5cdFxuXHRfY2hlY2tDb250YWluZXJJc1BhcmVudChjb250YWluZXIsIGVsZW1lbnQgPSB0aGlzLnRhYmxlLmVsZW1lbnQpe1xuXHRcdGlmKGNvbnRhaW5lciA9PT0gZWxlbWVudCl7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRyZXR1cm4gZWxlbWVudC5wYXJlbnROb2RlID8gdGhpcy5fY2hlY2tDb250YWluZXJJc1BhcmVudChjb250YWluZXIsIGVsZW1lbnQucGFyZW50Tm9kZSkgOiBmYWxzZTtcblx0XHR9XG5cdH1cblx0XG5cdHJlbmRlckNhbGxiYWNrKGNhbGxiYWNrKXtcblx0XHR0aGlzLnJlbmRlcmVkQ2FsbGJhY2sgPSBjYWxsYmFjaztcblx0fVxuXHRcblx0Y29udGFpbmVyRXZlbnRDb29yZHMoZSl7XG5cdFx0dmFyIHRvdWNoID0gIShlIGluc3RhbmNlb2YgTW91c2VFdmVudCk7XG5cdFx0XG5cdFx0dmFyIHggPSB0b3VjaCA/IGUudG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG5cdFx0dmFyIHkgPSB0b3VjaCA/IGUudG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG5cdFx0XG5cdFx0aWYodGhpcy5jb250YWluZXIgIT09IGRvY3VtZW50LmJvZHkpe1xuXHRcdFx0bGV0IHBhcmVudE9mZnNldCA9IEhlbHBlcnMuZWxPZmZzZXQodGhpcy5jb250YWluZXIpO1xuXHRcdFx0XG5cdFx0XHR4IC09IHBhcmVudE9mZnNldC5sZWZ0O1xuXHRcdFx0eSAtPSBwYXJlbnRPZmZzZXQudG9wO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4ge3gsIHl9O1xuXHR9XG5cdFxuXHRlbGVtZW50UG9zaXRpb25Db29yZHMoZWxlbWVudCwgcG9zaXRpb24gPSBcInJpZ2h0XCIpe1xuXHRcdHZhciBvZmZzZXQgPSBIZWxwZXJzLmVsT2Zmc2V0KGVsZW1lbnQpLFxuXHRcdGNvbnRhaW5lck9mZnNldCwgeCwgeTtcblx0XHRcblx0XHRpZih0aGlzLmNvbnRhaW5lciAhPT0gZG9jdW1lbnQuYm9keSl7XG5cdFx0XHRjb250YWluZXJPZmZzZXQgPSBIZWxwZXJzLmVsT2Zmc2V0KHRoaXMuY29udGFpbmVyKTtcblx0XHRcdFxuXHRcdFx0b2Zmc2V0LmxlZnQgLT0gY29udGFpbmVyT2Zmc2V0LmxlZnQ7XG5cdFx0XHRvZmZzZXQudG9wIC09IGNvbnRhaW5lck9mZnNldC50b3A7XG5cdFx0fVxuXHRcdFxuXHRcdHN3aXRjaChwb3NpdGlvbil7XG5cdFx0XHRjYXNlIFwicmlnaHRcIjpcblx0XHRcdFx0eCA9IG9mZnNldC5sZWZ0ICsgZWxlbWVudC5vZmZzZXRXaWR0aDtcblx0XHRcdFx0eSA9IG9mZnNldC50b3AgLSAxO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0Y2FzZSBcImJvdHRvbVwiOlxuXHRcdFx0XHR4ID0gb2Zmc2V0LmxlZnQ7XG5cdFx0XHRcdHkgPSBvZmZzZXQudG9wICsgZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRjYXNlIFwibGVmdFwiOlxuXHRcdFx0XHR4ID0gb2Zmc2V0LmxlZnQ7XG5cdFx0XHRcdHkgPSBvZmZzZXQudG9wIC0gMTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGNhc2UgXCJ0b3BcIjpcblx0XHRcdFx0eCA9IG9mZnNldC5sZWZ0O1xuXHRcdFx0XHR5ID0gb2Zmc2V0LnRvcDtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGNhc2UgXCJjZW50ZXJcIjpcblx0XHRcdFx0eCA9IG9mZnNldC5sZWZ0ICsgKGVsZW1lbnQub2Zmc2V0V2lkdGggLyAyKTtcblx0XHRcdFx0eSA9IG9mZnNldC50b3AgKyAoZWxlbWVudC5vZmZzZXRIZWlnaHQgLyAyKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHt4LCB5LCBvZmZzZXR9O1xuXHR9XG5cdFxuXHRzaG93KG9yaWdpbiwgcG9zaXRpb24pe1xuXHRcdHZhciB4LCB5LCBwYXJlbnRFbCwgcGFyZW50T2Zmc2V0LCBjb29yZHM7XG5cdFx0XG5cdFx0aWYodGhpcy5kZXN0cm95ZWQgfHwgdGhpcy50YWJsZS5kZXN0cm95ZWQpe1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKG9yaWdpbiBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KXtcblx0XHRcdHBhcmVudEVsID0gb3JpZ2luO1xuXHRcdFx0Y29vcmRzID0gdGhpcy5lbGVtZW50UG9zaXRpb25Db29yZHMob3JpZ2luLCBwb3NpdGlvbik7XG5cdFx0XHRcblx0XHRcdHBhcmVudE9mZnNldCA9IGNvb3Jkcy5vZmZzZXQ7XG5cdFx0XHR4ID0gY29vcmRzLng7XG5cdFx0XHR5ID0gY29vcmRzLnk7XG5cdFx0XHRcblx0XHR9ZWxzZSBpZih0eXBlb2Ygb3JpZ2luID09PSBcIm51bWJlclwiKXtcblx0XHRcdHBhcmVudE9mZnNldCA9IHt0b3A6MCwgbGVmdDowfTtcblx0XHRcdHggPSBvcmlnaW47XG5cdFx0XHR5ID0gcG9zaXRpb247XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29vcmRzID0gdGhpcy5jb250YWluZXJFdmVudENvb3JkcyhvcmlnaW4pO1xuXHRcdFx0XG5cdFx0XHR4ID0gY29vcmRzLng7XG5cdFx0XHR5ID0gY29vcmRzLnk7XG5cdFx0XHRcblx0XHRcdHRoaXMucmV2ZXJzZWRYID0gZmFsc2U7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuZWxlbWVudC5zdHlsZS50b3AgPSB5ICsgXCJweFwiO1xuXHRcdHRoaXMuZWxlbWVudC5zdHlsZS5sZWZ0ID0geCArIFwicHhcIjtcblx0XHRcblx0XHR0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmVsZW1lbnQpO1xuXHRcdFxuXHRcdGlmKHR5cGVvZiB0aGlzLnJlbmRlcmVkQ2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHR0aGlzLnJlbmRlcmVkQ2FsbGJhY2soKTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5fZml0VG9TY3JlZW4oeCwgeSwgcGFyZW50RWwsIHBhcmVudE9mZnNldCwgcG9zaXRpb24pO1xuXHRcdFxuXHRcdHRoaXMudmlzaWJsZSA9IHRydWU7XG5cdFx0XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJ0YWJsZS1kZXN0cm95XCIsIHRoaXMuZGVzdHJveUJpbmRpbmcpO1xuXHRcdFxuXHRcdHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIChlKSA9PiB7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cdFxuXHRfZml0VG9TY3JlZW4oeCwgeSwgcGFyZW50RWwsIHBhcmVudE9mZnNldCwgcG9zaXRpb24pe1xuXHRcdHZhciBzY3JvbGxUb3AgPSB0aGlzLmNvbnRhaW5lciA9PT0gZG9jdW1lbnQuYm9keSA/IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgOiB0aGlzLmNvbnRhaW5lci5zY3JvbGxUb3A7XG5cdFx0XG5cdFx0Ly9tb3ZlIG1lbnUgdG8gc3RhcnQgb24gcmlnaHQgZWRnZSBpZiBpdCBpcyB0b28gY2xvc2UgdG8gdGhlIGVkZ2Ugb2YgdGhlIHNjcmVlblxuXHRcdGlmKCh4ICsgdGhpcy5lbGVtZW50Lm9mZnNldFdpZHRoKSA+PSB0aGlzLmNvbnRhaW5lci5vZmZzZXRXaWR0aCB8fCB0aGlzLnJldmVyc2VkWCl7XG5cdFx0XHR0aGlzLmVsZW1lbnQuc3R5bGUubGVmdCA9IFwiXCI7XG5cdFx0XHRcblx0XHRcdGlmKHBhcmVudEVsKXtcblx0XHRcdFx0dGhpcy5lbGVtZW50LnN0eWxlLnJpZ2h0ID0gKHRoaXMuY29udGFpbmVyLm9mZnNldFdpZHRoIC0gcGFyZW50T2Zmc2V0LmxlZnQpICsgXCJweFwiO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQuc3R5bGUucmlnaHQgPSAodGhpcy5jb250YWluZXIub2Zmc2V0V2lkdGggLSB4KSArIFwicHhcIjtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5yZXZlcnNlZFggPSB0cnVlO1xuXHRcdH1cblx0XHRcblx0XHQvL21vdmUgbWVudSB0byBzdGFydCBvbiBib3R0b20gZWRnZSBpZiBpdCBpcyB0b28gY2xvc2UgdG8gdGhlIGVkZ2Ugb2YgdGhlIHNjcmVlblxuXHRcdGlmKCh5ICsgdGhpcy5lbGVtZW50Lm9mZnNldEhlaWdodCkgPiBNYXRoLm1heCh0aGlzLmNvbnRhaW5lci5vZmZzZXRIZWlnaHQsIHNjcm9sbFRvcCA/IHRoaXMuY29udGFpbmVyLnNjcm9sbEhlaWdodCA6IDApKSB7XG5cdFx0XHRpZihwYXJlbnRFbCl7XG5cdFx0XHRcdHN3aXRjaChwb3NpdGlvbil7XG5cdFx0XHRcdFx0Y2FzZSBcImJvdHRvbVwiOlxuXHRcdFx0XHRcdFx0dGhpcy5lbGVtZW50LnN0eWxlLnRvcCA9IChwYXJzZUludCh0aGlzLmVsZW1lbnQuc3R5bGUudG9wKSAtIHRoaXMuZWxlbWVudC5vZmZzZXRIZWlnaHQgLSBwYXJlbnRFbC5vZmZzZXRIZWlnaHQgLSAxKSArIFwicHhcIjtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHR0aGlzLmVsZW1lbnQuc3R5bGUudG9wID0gKHBhcnNlSW50KHRoaXMuZWxlbWVudC5zdHlsZS50b3ApIC0gdGhpcy5lbGVtZW50Lm9mZnNldEhlaWdodCArIHBhcmVudEVsLm9mZnNldEhlaWdodCArIDEpICsgXCJweFwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQuc3R5bGUudG9wID0gKHBhcnNlSW50KHRoaXMuZWxlbWVudC5zdHlsZS50b3ApIC0gdGhpcy5lbGVtZW50Lm9mZnNldEhlaWdodCkgKyBcInB4XCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRpc1Zpc2libGUoKXtcblx0XHRyZXR1cm4gdGhpcy52aXNpYmxlO1xuXHR9XG5cdFxuXHRoaWRlT25CbHVyKGNhbGxiYWNrKXtcblx0XHR0aGlzLmJsdXJhYmxlID0gdHJ1ZTtcblx0XHRcblx0XHRpZih0aGlzLnZpc2libGUpe1xuXHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdGlmKHRoaXMudmlzaWJsZSl7XG5cdFx0XHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCB0aGlzLmJsdXJFdmVudCk7XG5cdFx0XHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjZWxsLWVkaXRpbmdcIiwgdGhpcy5ibHVyRXZlbnQpO1xuXHRcdFx0XHRcdGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuYmx1ckV2ZW50KTtcblx0XHRcdFx0XHRkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJjb250ZXh0bWVudVwiLCB0aGlzLmJsdXJFdmVudCk7XG5cdFx0XHRcdFx0ZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHRoaXMuYmx1ckV2ZW50KTtcblx0XHRcdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLmJsdXJFdmVudCk7XG5cdFx0XHRcdFx0ZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLmVzY0V2ZW50KTtcblxuXHRcdFx0XHRcdHRoaXMuYmx1ckV2ZW50c0JvdW5kID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgMTAwKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5ibHVyQ2FsbGJhY2sgPSBjYWxsYmFjaztcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblx0XG5cdF9lc2NhcGVDaGVjayhlKXtcblx0XHRpZihlLmtleUNvZGUgPT0gMjcpe1xuXHRcdFx0dGhpcy5oaWRlKCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRibG9ja0hpZGUoKXtcblx0XHR0aGlzLmhpZGVhYmxlID0gZmFsc2U7XG5cdH1cblx0XG5cdHJlc3RvcmVIaWRlKCl7XG5cdFx0dGhpcy5oaWRlYWJsZSA9IHRydWU7XG5cdH1cblx0XG5cdGhpZGUoc2lsZW50ID0gZmFsc2Upe1xuXHRcdGlmKHRoaXMudmlzaWJsZSAmJiB0aGlzLmhpZGVhYmxlKXtcblx0XHRcdGlmKHRoaXMuYmx1cmFibGUgJiYgdGhpcy5ibHVyRXZlbnRzQm91bmQpe1xuXHRcdFx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuZXNjRXZlbnQpO1xuXHRcdFx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmJsdXJFdmVudCk7XG5cdFx0XHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNvbnRleHRtZW51XCIsIHRoaXMuYmx1ckV2ZW50KTtcblx0XHRcdFx0ZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHRoaXMuYmx1ckV2ZW50KTtcblx0XHRcdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5ibHVyRXZlbnQpO1xuXHRcdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHRoaXMuYmx1ckV2ZW50KTtcblx0XHRcdFx0dGhpcy51bnN1YnNjcmliZShcImNlbGwtZWRpdGluZ1wiLCB0aGlzLmJsdXJFdmVudCk7XG5cblx0XHRcdFx0dGhpcy5ibHVyRXZlbnRzQm91bmQgPSBmYWxzZTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYodGhpcy5jaGlsZFBvcHVwKXtcblx0XHRcdFx0dGhpcy5jaGlsZFBvcHVwLmhpZGUoKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYodGhpcy5wYXJlbnQpe1xuXHRcdFx0XHR0aGlzLnBhcmVudC5jaGlsZFBvcHVwID0gbnVsbDtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYodGhpcy5lbGVtZW50LnBhcmVudE5vZGUpe1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLnZpc2libGUgPSBmYWxzZTtcblx0XHRcdFxuXHRcdFx0aWYodGhpcy5ibHVyQ2FsbGJhY2sgJiYgIXNpbGVudCl7XG5cdFx0XHRcdHRoaXMuYmx1ckNhbGxiYWNrKCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHRoaXMudW5zdWJzY3JpYmUoXCJ0YWJsZS1kZXN0cm95XCIsIHRoaXMuZGVzdHJveUJpbmRpbmcpO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXHRcblx0Y2hpbGQoZWxlbWVudCl7XG5cdFx0aWYodGhpcy5jaGlsZFBvcHVwKXtcblx0XHRcdHRoaXMuY2hpbGRQb3B1cC5oaWRlKCk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuY2hpbGRQb3B1cCA9IG5ldyBQb3B1cCh0aGlzLnRhYmxlLCBlbGVtZW50LCB0aGlzKTtcblx0XHRcblx0XHRyZXR1cm4gdGhpcy5jaGlsZFBvcHVwO1xuXHR9XG59XG5cbmNsYXNzIE1vZHVsZSBleHRlbmRzIENvcmVGZWF0dXJle1xuXHRcblx0Y29uc3RydWN0b3IodGFibGUsIG5hbWUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblx0XHRcblx0XHR0aGlzLl9oYW5kbGVyID0gbnVsbDtcblx0fVxuXHRcblx0aW5pdGlhbGl6ZSgpe1xuXHRcdC8vIHNldHVwIG1vZHVsZSB3aGVuIHRhYmxlIGlzIGluaXRpYWxpemVkLCB0byBiZSBvdmVycmlkZGVuIGluIG1vZHVsZVxuXHR9XG5cdFxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vIE9wdGlvbnMgUmVnaXN0cmF0aW9uIC8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdHJlZ2lzdGVyVGFibGVPcHRpb24oa2V5LCB2YWx1ZSl7XG5cdFx0dGhpcy50YWJsZS5vcHRpb25zTGlzdC5yZWdpc3RlcihrZXksIHZhbHVlKTtcblx0fVxuXHRcblx0cmVnaXN0ZXJDb2x1bW5PcHRpb24oa2V5LCB2YWx1ZSl7XG5cdFx0dGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLm9wdGlvbnNMaXN0LnJlZ2lzdGVyKGtleSwgdmFsdWUpO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8gUHVibGljIEZ1bmN0aW9uIFJlZ2lzdHJhdGlvbiAvLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdHJlZ2lzdGVyVGFibGVGdW5jdGlvbihuYW1lLCBmdW5jKXtcblx0XHRpZih0eXBlb2YgdGhpcy50YWJsZVtuYW1lXSA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHR0aGlzLnRhYmxlW25hbWVdID0gKC4uLmFyZ3MpID0+IHtcblx0XHRcdFx0dGhpcy50YWJsZS5pbml0R3VhcmQobmFtZSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRyZXR1cm4gZnVuYyguLi5hcmdzKTtcblx0XHRcdH07XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiVW5hYmxlIHRvIGJpbmQgdGFibGUgZnVuY3Rpb24sIG5hbWUgYWxyZWFkeSBpbiB1c2VcIiwgbmFtZSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRyZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKGNvbXBvbmVudCwgZnVuYywgaGFuZGxlcil7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUuY29tcG9uZW50RnVuY3Rpb25CaW5kZXIuYmluZChjb21wb25lbnQsIGZ1bmMsIGhhbmRsZXIpO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vIERhdGEgUGlwZWxpbmUgLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0cmVnaXN0ZXJEYXRhSGFuZGxlcihoYW5kbGVyLCBwcmlvcml0eSl7XG5cdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnJlZ2lzdGVyRGF0YVBpcGVsaW5lSGFuZGxlcihoYW5kbGVyLCBwcmlvcml0eSk7XG5cdFx0dGhpcy5faGFuZGxlciA9IGhhbmRsZXI7XG5cdH1cblx0XG5cdHJlZ2lzdGVyRGlzcGxheUhhbmRsZXIoaGFuZGxlciwgcHJpb3JpdHkpe1xuXHRcdHRoaXMudGFibGUucm93TWFuYWdlci5yZWdpc3RlckRpc3BsYXlQaXBlbGluZUhhbmRsZXIoaGFuZGxlciwgcHJpb3JpdHkpO1xuXHRcdHRoaXMuX2hhbmRsZXIgPSBoYW5kbGVyO1xuXHR9XG5cdFxuXHRkaXNwbGF5Um93cyhhZGp1c3Qpe1xuXHRcdHZhciBpbmRleCA9IHRoaXMudGFibGUucm93TWFuYWdlci5kaXNwbGF5Um93cy5sZW5ndGggLSAxLCBcblx0XHRsb29rdXBJbmRleDtcblx0XHRcblx0XHRpZih0aGlzLl9oYW5kbGVyKXtcblx0XHRcdGxvb2t1cEluZGV4ID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmRpc3BsYXlQaXBlbGluZS5maW5kSW5kZXgoKGl0ZW0pID0+IHtcblx0XHRcdFx0cmV0dXJuIGl0ZW0uaGFuZGxlciA9PT0gdGhpcy5faGFuZGxlcjtcblx0XHRcdH0pO1xuXG5cdFx0XHRpZihsb29rdXBJbmRleCA+IC0xKXtcblx0XHRcdFx0aW5kZXggPSBsb29rdXBJbmRleDtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0aWYoYWRqdXN0KXtcblx0XHRcdGluZGV4ID0gaW5kZXggKyBhZGp1c3Q7XG5cdFx0fVxuXG5cdFx0aWYodGhpcy5faGFuZGxlcil7XG5cdFx0XHRpZihpbmRleCA+IC0xKXtcblx0XHRcdFx0cmV0dXJuIHRoaXMudGFibGUucm93TWFuYWdlci5nZXREaXNwbGF5Um93cyhpbmRleCk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmFjdGl2ZVJvd3MoKTtcblx0XHRcdH1cblx0XHR9XHRcblx0fVxuXHRcblx0YWN0aXZlUm93cygpe1xuXHRcdHJldHVybiB0aGlzLnRhYmxlLnJvd01hbmFnZXIuYWN0aXZlUm93cztcblx0fVxuXHRcblx0cmVmcmVzaERhdGEocmVuZGVySW5Qb3NpdGlvbiwgaGFuZGxlcil7XG5cdFx0aWYoIWhhbmRsZXIpe1xuXHRcdFx0aGFuZGxlciA9IHRoaXMuX2hhbmRsZXI7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGhhbmRsZXIpe1xuXHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnJlZnJlc2hBY3RpdmVEYXRhKGhhbmRsZXIsIGZhbHNlLCByZW5kZXJJblBvc2l0aW9uKTtcblx0XHR9XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vIEZvb3RlciBNYW5hZ2VtZW50IC8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHRmb290ZXJBcHBlbmQoZWxlbWVudCl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUuZm9vdGVyTWFuYWdlci5hcHBlbmQoZWxlbWVudCk7XG5cdH1cblx0XG5cdGZvb3RlclByZXBlbmQoZWxlbWVudCl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUuZm9vdGVyTWFuYWdlci5wcmVwZW5kKGVsZW1lbnQpO1xuXHR9XG5cdFxuXHRmb290ZXJSZW1vdmUoZWxlbWVudCl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUuZm9vdGVyTWFuYWdlci5yZW1vdmUoZWxlbWVudCk7XG5cdH0gXG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLyBQb3B1cHMgTWFuYWdlbWVudCAvLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0cG9wdXAobWVudUVsLCBtZW51Q29udGFpbmVyKXtcblx0XHRyZXR1cm4gbmV3IFBvcHVwKHRoaXMudGFibGUsIG1lbnVFbCwgbWVudUNvbnRhaW5lcik7XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vIEFsZXJ0IE1hbmFnZW1lbnQgLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdGFsZXJ0KGNvbnRlbnQsIHR5cGUpe1xuXHRcdHJldHVybiB0aGlzLnRhYmxlLmFsZXJ0TWFuYWdlci5hbGVydChjb250ZW50LCB0eXBlKTtcblx0fVxuXHRcblx0Y2xlYXJBbGVydCgpe1xuXHRcdHJldHVybiB0aGlzLnRhYmxlLmFsZXJ0TWFuYWdlci5jbGVhcigpO1xuXHR9XG5cdFxufVxuXG52YXIgZGVmYXVsdEFjY2Vzc29ycyA9IHt9O1xuXG5jbGFzcyBBY2Nlc3NvciBleHRlbmRzIE1vZHVsZXtcblxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXG5cdFx0dGhpcy5hbGxvd2VkVHlwZXMgPSBbXCJcIiwgXCJkYXRhXCIsIFwiZG93bmxvYWRcIiwgXCJjbGlwYm9hcmRcIiwgXCJwcmludFwiLCBcImh0bWxPdXRwdXRcIl07IC8vbGlzdCBvZiBhY2Nlc3NvciB0eXBlc1xuXG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImFjY2Vzc29yXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJhY2Nlc3NvclBhcmFtc1wiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiYWNjZXNzb3JEYXRhXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJhY2Nlc3NvckRhdGFQYXJhbXNcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImFjY2Vzc29yRG93bmxvYWRcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImFjY2Vzc29yRG93bmxvYWRQYXJhbXNcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImFjY2Vzc29yQ2xpcGJvYXJkXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJhY2Nlc3NvckNsaXBib2FyZFBhcmFtc1wiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiYWNjZXNzb3JQcmludFwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiYWNjZXNzb3JQcmludFBhcmFtc1wiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiYWNjZXNzb3JIdG1sT3V0cHV0XCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJhY2Nlc3Nvckh0bWxPdXRwdXRQYXJhbXNcIik7XG5cdH1cblxuXHRpbml0aWFsaXplKCl7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tbGF5b3V0XCIsIHRoaXMuaW5pdGlhbGl6ZUNvbHVtbi5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1kYXRhLXJldHJpZXZlXCIsIHRoaXMudHJhbnNmb3JtUm93LmJpbmQodGhpcykpO1xuXHR9XG5cblx0Ly9pbml0aWFsaXplIGNvbHVtbiBhY2Nlc3NvclxuXHRpbml0aWFsaXplQ29sdW1uKGNvbHVtbil7XG5cdFx0dmFyIG1hdGNoID0gZmFsc2UsXG5cdFx0Y29uZmlnID0ge307XG5cblx0XHR0aGlzLmFsbG93ZWRUeXBlcy5mb3JFYWNoKCh0eXBlKSA9PiB7XG5cdFx0XHR2YXIga2V5ID0gXCJhY2Nlc3NvclwiICsgKHR5cGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0eXBlLnNsaWNlKDEpKSxcblx0XHRcdGFjY2Vzc29yO1xuXG5cdFx0XHRpZihjb2x1bW4uZGVmaW5pdGlvbltrZXldKXtcblx0XHRcdFx0YWNjZXNzb3IgPSB0aGlzLmxvb2t1cEFjY2Vzc29yKGNvbHVtbi5kZWZpbml0aW9uW2tleV0pO1xuXG5cdFx0XHRcdGlmKGFjY2Vzc29yKXtcblx0XHRcdFx0XHRtYXRjaCA9IHRydWU7XG5cblx0XHRcdFx0XHRjb25maWdba2V5XSA9IHtcblx0XHRcdFx0XHRcdGFjY2Vzc29yOmFjY2Vzc29yLFxuXHRcdFx0XHRcdFx0cGFyYW1zOiBjb2x1bW4uZGVmaW5pdGlvbltrZXkgKyBcIlBhcmFtc1wiXSB8fCB7fSxcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRpZihtYXRjaCl7XG5cdFx0XHRjb2x1bW4ubW9kdWxlcy5hY2Nlc3NvciA9IGNvbmZpZztcblx0XHR9XG5cdH1cblxuXHRsb29rdXBBY2Nlc3Nvcih2YWx1ZSl7XG5cdFx0dmFyIGFjY2Vzc29yID0gZmFsc2U7XG5cblx0XHQvL3NldCBjb2x1bW4gYWNjZXNzb3Jcblx0XHRzd2l0Y2godHlwZW9mIHZhbHVlKXtcblx0XHRcdGNhc2UgXCJzdHJpbmdcIjpcblx0XHRcdFx0aWYoQWNjZXNzb3IuYWNjZXNzb3JzW3ZhbHVlXSl7XG5cdFx0XHRcdFx0YWNjZXNzb3IgPSBBY2Nlc3Nvci5hY2Nlc3NvcnNbdmFsdWVdO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiQWNjZXNzb3IgRXJyb3IgLSBObyBzdWNoIGFjY2Vzc29yIGZvdW5kLCBpZ25vcmluZzogXCIsIHZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHRcdGFjY2Vzc29yID0gdmFsdWU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3Nvcjtcblx0fVxuXG5cdC8vYXBwbHkgYWNjZXNzb3IgdG8gcm93XG5cdHRyYW5zZm9ybVJvdyhyb3csIHR5cGUpe1xuXHRcdHZhciBrZXkgPSBcImFjY2Vzc29yXCIgKyAodHlwZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHR5cGUuc2xpY2UoMSkpLFxuXHRcdHJvd0NvbXBvbmVudCA9IHJvdy5nZXRDb21wb25lbnQoKTtcblxuXHRcdC8vY2xvbmUgZGF0YSBvYmplY3Qgd2l0aCBkZWVwIGNvcHkgdG8gaXNvbGF0ZSBpbnRlcm5hbCBkYXRhIGZyb20gcmV0dXJuZWQgcmVzdWx0XG5cdFx0dmFyIGRhdGEgPSBIZWxwZXJzLmRlZXBDbG9uZShyb3cuZGF0YSB8fCB7fSk7XG5cblx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIudHJhdmVyc2UoZnVuY3Rpb24oY29sdW1uKXtcblx0XHRcdHZhciB2YWx1ZSwgYWNjZXNzb3IsIHBhcmFtcywgY29sQ29tcG9uZW50O1xuXG5cdFx0XHRpZihjb2x1bW4ubW9kdWxlcy5hY2Nlc3Nvcil7XG5cblx0XHRcdFx0YWNjZXNzb3IgPSBjb2x1bW4ubW9kdWxlcy5hY2Nlc3NvcltrZXldIHx8IGNvbHVtbi5tb2R1bGVzLmFjY2Vzc29yLmFjY2Vzc29yIHx8IGZhbHNlO1xuXG5cdFx0XHRcdGlmKGFjY2Vzc29yKXtcblx0XHRcdFx0XHR2YWx1ZSA9IGNvbHVtbi5nZXRGaWVsZFZhbHVlKGRhdGEpO1xuXG5cdFx0XHRcdFx0aWYodmFsdWUgIT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRcdFx0XHRjb2xDb21wb25lbnQgPSBjb2x1bW4uZ2V0Q29tcG9uZW50KCk7XG5cdFx0XHRcdFx0XHRwYXJhbXMgPSB0eXBlb2YgYWNjZXNzb3IucGFyYW1zID09PSBcImZ1bmN0aW9uXCIgPyBhY2Nlc3Nvci5wYXJhbXModmFsdWUsIGRhdGEsIHR5cGUsIGNvbENvbXBvbmVudCwgcm93Q29tcG9uZW50KSA6IGFjY2Vzc29yLnBhcmFtcztcblx0XHRcdFx0XHRcdGNvbHVtbi5zZXRGaWVsZFZhbHVlKGRhdGEsIGFjY2Vzc29yLmFjY2Vzc29yKHZhbHVlLCBkYXRhLCB0eXBlLCBwYXJhbXMsIGNvbENvbXBvbmVudCwgcm93Q29tcG9uZW50KSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblx0fVxufVxuXG4vL2xvYWQgZGVmYXVsdHNcbkFjY2Vzc29yLm1vZHVsZU5hbWUgPSBcImFjY2Vzc29yXCI7XG5BY2Nlc3Nvci5hY2Nlc3NvcnMgPSBkZWZhdWx0QWNjZXNzb3JzO1xuXG52YXIgZGVmYXVsdENvbmZpZyA9IHtcblx0bWV0aG9kOiBcIkdFVFwiLFxufTtcblxuZnVuY3Rpb24gZ2VuZXJhdGVQYXJhbXNMaXN0KGRhdGEsIHByZWZpeCl7XG5cdHZhciBvdXRwdXQgPSBbXTtcblxuXHRwcmVmaXggPSBwcmVmaXggfHwgXCJcIjtcblxuXHRpZihBcnJheS5pc0FycmF5KGRhdGEpKXtcblx0XHRkYXRhLmZvckVhY2goKGl0ZW0sIGkpID0+IHtcblx0XHRcdG91dHB1dCA9IG91dHB1dC5jb25jYXQoZ2VuZXJhdGVQYXJhbXNMaXN0KGl0ZW0sIHByZWZpeCA/IHByZWZpeCArIFwiW1wiICsgaSArIFwiXVwiIDogaSkpO1xuXHRcdH0pO1xuXHR9ZWxzZSBpZiAodHlwZW9mIGRhdGEgPT09IFwib2JqZWN0XCIpe1xuXHRcdGZvciAodmFyIGtleSBpbiBkYXRhKXtcblx0XHRcdG91dHB1dCA9IG91dHB1dC5jb25jYXQoZ2VuZXJhdGVQYXJhbXNMaXN0KGRhdGFba2V5XSwgcHJlZml4ID8gcHJlZml4ICsgXCJbXCIgKyBrZXkgKyBcIl1cIiA6IGtleSkpO1xuXHRcdH1cblx0fWVsc2Uge1xuXHRcdG91dHB1dC5wdXNoKHtrZXk6cHJlZml4LCB2YWx1ZTpkYXRhfSk7XG5cdH1cblxuXHRyZXR1cm4gb3V0cHV0O1xufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVQYXJhbXMocGFyYW1zKXtcblx0dmFyIG91dHB1dCA9IGdlbmVyYXRlUGFyYW1zTGlzdChwYXJhbXMpLFxuXHRlbmNvZGVkID0gW107XG5cblx0b3V0cHV0LmZvckVhY2goZnVuY3Rpb24oaXRlbSl7XG5cdFx0ZW5jb2RlZC5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChpdGVtLmtleSkgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudChpdGVtLnZhbHVlKSk7XG5cdH0pO1xuXG5cdHJldHVybiBlbmNvZGVkLmpvaW4oXCImXCIpO1xufVxuXG5mdW5jdGlvbiB1cmxCdWlsZGVyKHVybCwgY29uZmlnLCBwYXJhbXMpe1xuXHRpZih1cmwpe1xuXHRcdGlmKHBhcmFtcyAmJiBPYmplY3Qua2V5cyhwYXJhbXMpLmxlbmd0aCl7XG5cdFx0XHRpZighY29uZmlnLm1ldGhvZCB8fCBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCkgPT0gXCJnZXRcIil7XG5cdFx0XHRcdGNvbmZpZy5tZXRob2QgPSBcImdldFwiO1xuXG5cdFx0XHRcdHVybCArPSAodXJsLmluY2x1ZGVzKFwiP1wiKSA/IFwiJlwiIDogXCI/XCIpICsgc2VyaWFsaXplUGFyYW1zKHBhcmFtcyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHVybDtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdExvYWRlclByb21pc2UodXJsLCBjb25maWcsIHBhcmFtcyl7XG5cdHZhciBjb250ZW50VHlwZTtcblxuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdC8vc2V0IHVybFxuXHRcdHVybCA9IHRoaXMudXJsR2VuZXJhdG9yLmNhbGwodGhpcy50YWJsZSwgdXJsLCBjb25maWcsIHBhcmFtcyk7XG5cblx0XHQvL3NldCBib2R5IGNvbnRlbnQgaWYgbm90IEdFVCByZXF1ZXN0XG5cdFx0aWYoY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpICE9IFwiR0VUXCIpe1xuXHRcdFx0Y29udGVudFR5cGUgPSB0eXBlb2YgdGhpcy50YWJsZS5vcHRpb25zLmFqYXhDb250ZW50VHlwZSA9PT0gXCJvYmplY3RcIiA/ICB0aGlzLnRhYmxlLm9wdGlvbnMuYWpheENvbnRlbnRUeXBlIDogdGhpcy5jb250ZW50VHlwZUZvcm1hdHRlcnNbdGhpcy50YWJsZS5vcHRpb25zLmFqYXhDb250ZW50VHlwZV07XG5cdFx0XHRpZihjb250ZW50VHlwZSl7XG5cblx0XHRcdFx0Zm9yKHZhciBrZXkgaW4gY29udGVudFR5cGUuaGVhZGVycyl7XG5cdFx0XHRcdFx0aWYoIWNvbmZpZy5oZWFkZXJzKXtcblx0XHRcdFx0XHRcdGNvbmZpZy5oZWFkZXJzID0ge307XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYodHlwZW9mIGNvbmZpZy5oZWFkZXJzW2tleV0gPT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0XHRcdFx0Y29uZmlnLmhlYWRlcnNba2V5XSA9IGNvbnRlbnRUeXBlLmhlYWRlcnNba2V5XTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25maWcuYm9keSA9IGNvbnRlbnRUeXBlLmJvZHkuY2FsbCh0aGlzLCB1cmwsIGNvbmZpZywgcGFyYW1zKTtcblxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJBamF4IEVycm9yIC0gSW52YWxpZCBhamF4Q29udGVudFR5cGUgdmFsdWU6XCIsIHRoaXMudGFibGUub3B0aW9ucy5hamF4Q29udGVudFR5cGUpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmKHVybCl7XG5cdFx0XHQvL2NvbmZpZ3VyZSBoZWFkZXJzXG5cdFx0XHRpZih0eXBlb2YgY29uZmlnLmhlYWRlcnMgPT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0XHRjb25maWcuaGVhZGVycyA9IHt9O1xuXHRcdFx0fVxuXG5cdFx0XHRpZih0eXBlb2YgY29uZmlnLmhlYWRlcnMuQWNjZXB0ID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdFx0Y29uZmlnLmhlYWRlcnMuQWNjZXB0ID0gXCJhcHBsaWNhdGlvbi9qc29uXCI7XG5cdFx0XHR9XG5cblx0XHRcdGlmKHR5cGVvZiBjb25maWcuaGVhZGVyc1tcIlgtUmVxdWVzdGVkLVdpdGhcIl0gPT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0XHRjb25maWcuaGVhZGVyc1tcIlgtUmVxdWVzdGVkLVdpdGhcIl0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHR9XG5cblx0XHRcdGlmKHR5cGVvZiBjb25maWcubW9kZSA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRcdGNvbmZpZy5tb2RlID0gXCJjb3JzXCI7XG5cdFx0XHR9XG5cblx0XHRcdGlmKGNvbmZpZy5tb2RlID09IFwiY29yc1wiKXtcblx0XHRcdFx0aWYodHlwZW9mIGNvbmZpZy5oZWFkZXJzW1wiT3JpZ2luXCJdID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdFx0XHRjb25maWcuaGVhZGVyc1tcIk9yaWdpblwiXSA9IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW47XG5cdFx0XHRcdH1cbiAgICAgICAgXG5cdFx0XHRcdGlmKHR5cGVvZiBjb25maWcuY3JlZGVudGlhbHMgPT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0XHRcdGNvbmZpZy5jcmVkZW50aWFscyA9ICdzYW1lLW9yaWdpbic7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aWYodHlwZW9mIGNvbmZpZy5jcmVkZW50aWFscyA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRcdFx0Y29uZmlnLmNyZWRlbnRpYWxzID0gJ2luY2x1ZGUnO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vc2VuZCByZXF1ZXN0XG5cdFx0XHRmZXRjaCh1cmwsIGNvbmZpZylcblx0XHRcdFx0LnRoZW4oKHJlc3BvbnNlKT0+e1xuXHRcdFx0XHRcdGlmKHJlc3BvbnNlLm9rKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZS5qc29uKClcblx0XHRcdFx0XHRcdFx0LnRoZW4oKGRhdGEpPT57XG5cdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZShkYXRhKTtcblx0XHRcdFx0XHRcdFx0fSkuY2F0Y2goKGVycm9yKT0+e1xuXHRcdFx0XHRcdFx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiQWpheCBMb2FkIEVycm9yIC0gSW52YWxpZCBKU09OIHJldHVybmVkXCIsIGVycm9yKTtcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvcihcIkFqYXggTG9hZCBFcnJvciAtIENvbm5lY3Rpb24gRXJyb3I6IFwiICsgcmVzcG9uc2Uuc3RhdHVzLCByZXNwb25zZS5zdGF0dXNUZXh0KTtcblx0XHRcdFx0XHRcdHJlamVjdChyZXNwb25zZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KVxuXHRcdFx0XHQuY2F0Y2goKGVycm9yKT0+e1xuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJBamF4IExvYWQgRXJyb3IgLSBDb25uZWN0aW9uIEVycm9yOiBcIiwgZXJyb3IpO1xuXHRcdFx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0XHRcdH0pO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkFqYXggTG9hZCBFcnJvciAtIE5vIFVSTCBTZXRcIik7XG5cdFx0XHRyZXNvbHZlKFtdKTtcblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVBhcmFtc0xpc3QkMShkYXRhLCBwcmVmaXgpe1xuXHR2YXIgb3V0cHV0ID0gW107XG5cblx0cHJlZml4ID0gcHJlZml4IHx8IFwiXCI7XG5cblx0aWYoQXJyYXkuaXNBcnJheShkYXRhKSl7XG5cdFx0ZGF0YS5mb3JFYWNoKChpdGVtLCBpKSA9PiB7XG5cdFx0XHRvdXRwdXQgPSBvdXRwdXQuY29uY2F0KGdlbmVyYXRlUGFyYW1zTGlzdCQxKGl0ZW0sIHByZWZpeCA/IHByZWZpeCArIFwiW1wiICsgaSArIFwiXVwiIDogaSkpO1xuXHRcdH0pO1xuXHR9ZWxzZSBpZiAodHlwZW9mIGRhdGEgPT09IFwib2JqZWN0XCIpe1xuXHRcdGZvciAodmFyIGtleSBpbiBkYXRhKXtcblx0XHRcdG91dHB1dCA9IG91dHB1dC5jb25jYXQoZ2VuZXJhdGVQYXJhbXNMaXN0JDEoZGF0YVtrZXldLCBwcmVmaXggPyBwcmVmaXggKyBcIltcIiArIGtleSArIFwiXVwiIDoga2V5KSk7XG5cdFx0fVxuXHR9ZWxzZSB7XG5cdFx0b3V0cHV0LnB1c2goe2tleTpwcmVmaXgsIHZhbHVlOmRhdGF9KTtcblx0fVxuXG5cdHJldHVybiBvdXRwdXQ7XG59XG5cbnZhciBkZWZhdWx0Q29udGVudFR5cGVGb3JtYXR0ZXJzID0ge1xuXHRcImpzb25cIjp7XG5cdFx0aGVhZGVyczp7XG5cdFx0XHQnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuXHRcdH0sXG5cdFx0Ym9keTpmdW5jdGlvbih1cmwsIGNvbmZpZywgcGFyYW1zKXtcblx0XHRcdHJldHVybiBKU09OLnN0cmluZ2lmeShwYXJhbXMpO1xuXHRcdH0sXG5cdH0sXG5cdFwiZm9ybVwiOntcblx0XHRoZWFkZXJzOntcblx0XHR9LFxuXHRcdGJvZHk6ZnVuY3Rpb24odXJsLCBjb25maWcsIHBhcmFtcyl7XG5cblx0XHRcdHZhciBvdXRwdXQgPSBnZW5lcmF0ZVBhcmFtc0xpc3QkMShwYXJhbXMpLFxuXHRcdFx0Zm9ybSA9IG5ldyBGb3JtRGF0YSgpO1xuXG5cdFx0XHRvdXRwdXQuZm9yRWFjaChmdW5jdGlvbihpdGVtKXtcblx0XHRcdFx0Zm9ybS5hcHBlbmQoaXRlbS5rZXksIGl0ZW0udmFsdWUpO1xuXHRcdFx0fSk7XG5cblx0XHRcdHJldHVybiBmb3JtO1xuXHRcdH0sXG5cdH0sXG59O1xuXG5jbGFzcyBBamF4IGV4dGVuZHMgTW9kdWxle1xuXHRcblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblx0XHRcblx0XHR0aGlzLmNvbmZpZyA9IHt9OyAvL2hvbGQgY29uZmlnIG9iamVjdCBmb3IgYWpheCByZXF1ZXN0XG5cdFx0dGhpcy51cmwgPSBcIlwiOyAvL3JlcXVlc3QgVVJMXG5cdFx0dGhpcy51cmxHZW5lcmF0b3IgPSBmYWxzZTtcblx0XHR0aGlzLnBhcmFtcyA9IGZhbHNlOyAvL3JlcXVlc3QgcGFyYW1ldGVyc1xuXHRcdFxuXHRcdHRoaXMubG9hZGVyUHJvbWlzZSA9IGZhbHNlO1xuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImFqYXhVUkxcIiwgZmFsc2UpOyAvL3VybCBmb3IgYWpheCBsb2FkaW5nXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiYWpheFVSTEdlbmVyYXRvclwiLCBmYWxzZSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiYWpheFBhcmFtc1wiLCB7fSk7ICAvL3BhcmFtcyBmb3IgYWpheCBsb2FkaW5nXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiYWpheENvbmZpZ1wiLCBcImdldFwiKTsgLy9hamF4IHJlcXVlc3QgdHlwZVxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImFqYXhDb250ZW50VHlwZVwiLCBcImZvcm1cIik7IC8vYWpheCByZXF1ZXN0IHR5cGVcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJhamF4UmVxdWVzdEZ1bmNcIiwgZmFsc2UpOyAvL3Byb21pc2UgZnVuY3Rpb25cblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJhamF4UmVxdWVzdGluZ1wiLCBmdW5jdGlvbigpe30pO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImFqYXhSZXNwb25zZVwiLCBmYWxzZSk7XG5cdFx0XG5cdFx0dGhpcy5jb250ZW50VHlwZUZvcm1hdHRlcnMgPSBBamF4LmNvbnRlbnRUeXBlRm9ybWF0dGVycztcblx0fVxuXHRcblx0Ly9pbml0aWFsaXplIHNldHVwIG9wdGlvbnNcblx0aW5pdGlhbGl6ZSgpe1xuXHRcdHRoaXMubG9hZGVyUHJvbWlzZSA9IHRoaXMudGFibGUub3B0aW9ucy5hamF4UmVxdWVzdEZ1bmMgfHwgQWpheC5kZWZhdWx0TG9hZGVyUHJvbWlzZTtcblx0XHR0aGlzLnVybEdlbmVyYXRvciA9IHRoaXMudGFibGUub3B0aW9ucy5hamF4VVJMR2VuZXJhdG9yIHx8IEFqYXguZGVmYXVsdFVSTEdlbmVyYXRvcjtcblx0XHRcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuYWpheFVSTCl7XG5cdFx0XHR0aGlzLnNldFVybCh0aGlzLnRhYmxlLm9wdGlvbnMuYWpheFVSTCk7XG5cdFx0fVxuXG5cblx0XHR0aGlzLnNldERlZmF1bHRDb25maWcodGhpcy50YWJsZS5vcHRpb25zLmFqYXhDb25maWcpO1xuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiZ2V0QWpheFVybFwiLCB0aGlzLmdldFVybC5iaW5kKHRoaXMpKTtcblx0XHRcblx0XHR0aGlzLnN1YnNjcmliZShcImRhdGEtbG9hZGluZ1wiLCB0aGlzLnJlcXVlc3REYXRhQ2hlY2suYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJkYXRhLXBhcmFtc1wiLCB0aGlzLnJlcXVlc3RQYXJhbXMuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJkYXRhLWxvYWRcIiwgdGhpcy5yZXF1ZXN0RGF0YS5iaW5kKHRoaXMpKTtcblx0fVxuXHRcblx0cmVxdWVzdFBhcmFtcyhkYXRhLCBjb25maWcsIHNpbGVudCwgcGFyYW1zKXtcblx0XHR2YXIgYWpheFBhcmFtcyA9IHRoaXMudGFibGUub3B0aW9ucy5hamF4UGFyYW1zO1xuXHRcdFxuXHRcdGlmKGFqYXhQYXJhbXMpe1xuXHRcdFx0aWYodHlwZW9mIGFqYXhQYXJhbXMgPT09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRcdGFqYXhQYXJhbXMgPSBhamF4UGFyYW1zLmNhbGwodGhpcy50YWJsZSk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHBhcmFtcyA9IE9iamVjdC5hc3NpZ24ocGFyYW1zLCBhamF4UGFyYW1zKTtcblx0XHR9XHRcdFxuXHRcdFxuXHRcdHJldHVybiBwYXJhbXM7XG5cdH1cblx0XG5cdHJlcXVlc3REYXRhQ2hlY2soZGF0YSwgcGFyYW1zLCBjb25maWcsIHNpbGVudCl7XG5cdFx0cmV0dXJuICEhKCghZGF0YSAmJiB0aGlzLnVybCkgfHwgdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIpO1xuXHR9XG5cdFxuXHRyZXF1ZXN0RGF0YSh1cmwsIHBhcmFtcywgY29uZmlnLCBzaWxlbnQsIHByZXZpb3VzRGF0YSl7XG5cdFx0dmFyIGFqYXhDb25maWc7XG5cdFx0XG5cdFx0aWYoIXByZXZpb3VzRGF0YSAmJiB0aGlzLnJlcXVlc3REYXRhQ2hlY2sodXJsKSl7XG5cdFx0XHRpZih1cmwpe1xuXHRcdFx0XHR0aGlzLnNldFVybCh1cmwpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRhamF4Q29uZmlnID0gdGhpcy5nZW5lcmF0ZUNvbmZpZyhjb25maWcpO1xuXHRcdFx0XG5cdFx0XHRyZXR1cm4gdGhpcy5zZW5kUmVxdWVzdCh0aGlzLnVybCwgcGFyYW1zLCBhamF4Q29uZmlnKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRyZXR1cm4gcHJldmlvdXNEYXRhO1xuXHRcdH1cblx0fVxuXHRcblx0c2V0RGVmYXVsdENvbmZpZyhjb25maWcgPSB7fSl7XG5cdFx0dGhpcy5jb25maWcgPSBPYmplY3QuYXNzaWduKHt9LCBBamF4LmRlZmF1bHRDb25maWcpO1xuXG5cdFx0aWYodHlwZW9mIGNvbmZpZyA9PSBcInN0cmluZ1wiKXtcblx0XHRcdHRoaXMuY29uZmlnLm1ldGhvZCA9IGNvbmZpZztcblx0XHR9ZWxzZSB7XG5cdFx0XHRPYmplY3QuYXNzaWduKHRoaXMuY29uZmlnLCBjb25maWcpO1xuXHRcdH1cblx0fVxuXHRcblx0Ly9sb2FkIGNvbmZpZyBvYmplY3Rcblx0Z2VuZXJhdGVDb25maWcoY29uZmlnID0ge30pe1xuXHRcdHZhciBhamF4Q29uZmlnID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5jb25maWcpO1xuXHRcdFxuXHRcdGlmKHR5cGVvZiBjb25maWcgPT0gXCJzdHJpbmdcIil7XG5cdFx0XHRhamF4Q29uZmlnLm1ldGhvZCA9IGNvbmZpZztcblx0XHR9ZWxzZSB7XG5cdFx0XHRPYmplY3QuYXNzaWduKGFqYXhDb25maWcsIGNvbmZpZyk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBhamF4Q29uZmlnO1xuXHR9XG5cdFxuXHQvL3NldCByZXF1ZXN0IHVybFxuXHRzZXRVcmwodXJsKXtcblx0XHR0aGlzLnVybCA9IHVybDtcblx0fVxuXHRcblx0Ly9nZXQgcmVxdWVzdCB1cmxcblx0Z2V0VXJsKCl7XG5cdFx0cmV0dXJuIHRoaXMudXJsO1xuXHR9XG5cdFxuXHQvL3NlbmQgYWpheCByZXF1ZXN0XG5cdHNlbmRSZXF1ZXN0KHVybCwgcGFyYW1zLCBjb25maWcpe1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5hamF4UmVxdWVzdGluZy5jYWxsKHRoaXMudGFibGUsIHVybCwgcGFyYW1zKSAhPT0gZmFsc2Upe1xuXHRcdFx0cmV0dXJuIHRoaXMubG9hZGVyUHJvbWlzZSh1cmwsIGNvbmZpZywgcGFyYW1zKVxuXHRcdFx0XHQudGhlbigoZGF0YSk9Pntcblx0XHRcdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuYWpheFJlc3BvbnNlKXtcblx0XHRcdFx0XHRcdGRhdGEgPSB0aGlzLnRhYmxlLm9wdGlvbnMuYWpheFJlc3BvbnNlLmNhbGwodGhpcy50YWJsZSwgdXJsLCBwYXJhbXMsIGRhdGEpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH0pO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdCgpO1xuXHRcdH1cblx0fVxufVxuXG5BamF4Lm1vZHVsZU5hbWUgPSBcImFqYXhcIjtcblxuLy9sb2FkIGRlZmF1bHRzXG5BamF4LmRlZmF1bHRDb25maWcgPSBkZWZhdWx0Q29uZmlnO1xuQWpheC5kZWZhdWx0VVJMR2VuZXJhdG9yID0gdXJsQnVpbGRlcjtcbkFqYXguZGVmYXVsdExvYWRlclByb21pc2UgPSBkZWZhdWx0TG9hZGVyUHJvbWlzZTtcbkFqYXguY29udGVudFR5cGVGb3JtYXR0ZXJzID0gZGVmYXVsdENvbnRlbnRUeXBlRm9ybWF0dGVycztcblxudmFyIGRlZmF1bHRQYXN0ZUFjdGlvbnMgPSB7XG5cdHJlcGxhY2U6ZnVuY3Rpb24ocm93cyl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUuc2V0RGF0YShyb3dzKTtcblx0fSxcblx0dXBkYXRlOmZ1bmN0aW9uKHJvd3Mpe1xuXHRcdHJldHVybiB0aGlzLnRhYmxlLnVwZGF0ZU9yQWRkRGF0YShyb3dzKTtcblx0fSxcblx0aW5zZXJ0OmZ1bmN0aW9uKHJvd3Mpe1xuXHRcdHJldHVybiB0aGlzLnRhYmxlLmFkZERhdGEocm93cyk7XG5cdH0sXG59O1xuXG52YXIgZGVmYXVsdFBhc3RlUGFyc2VycyA9IHtcblx0dGFibGU6ZnVuY3Rpb24oY2xpcGJvYXJkKXtcblx0XHR2YXIgZGF0YSA9IFtdLFxuXHRcdGhlYWRlckZpbmRTdWNjZXNzID0gdHJ1ZSxcblx0XHRjb2x1bW5zID0gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmNvbHVtbnMsXG5cdFx0Y29sdW1uTWFwID0gW10sXG5cdFx0cm93cyA9IFtdO1xuXG5cdFx0Ly9nZXQgZGF0YSBmcm9tIGNsaXBib2FyZCBpbnRvIGFycmF5IG9mIGNvbHVtbnMgYW5kIHJvd3MuXG5cdFx0Y2xpcGJvYXJkID0gY2xpcGJvYXJkLnNwbGl0KFwiXFxuXCIpO1xuXG5cdFx0Y2xpcGJvYXJkLmZvckVhY2goZnVuY3Rpb24ocm93KXtcblx0XHRcdGRhdGEucHVzaChyb3cuc3BsaXQoXCJcXHRcIikpO1xuXHRcdH0pO1xuXG5cdFx0aWYoZGF0YS5sZW5ndGggJiYgIShkYXRhLmxlbmd0aCA9PT0gMSAmJiBkYXRhWzBdLmxlbmd0aCA8IDIpKXtcblxuXHRcdFx0Ly9jaGVjayBpZiBoZWFkZXJzIGFyZSBwcmVzZW50IGJ5IHRpdGxlXG5cdFx0XHRkYXRhWzBdLmZvckVhY2goZnVuY3Rpb24odmFsdWUpe1xuXHRcdFx0XHR2YXIgY29sdW1uID0gY29sdW1ucy5maW5kKGZ1bmN0aW9uKGNvbHVtbil7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlICYmIGNvbHVtbi5kZWZpbml0aW9uLnRpdGxlICYmIHZhbHVlLnRyaW0oKSAmJiBjb2x1bW4uZGVmaW5pdGlvbi50aXRsZS50cmltKCkgPT09IHZhbHVlLnRyaW0oKTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0aWYoY29sdW1uKXtcblx0XHRcdFx0XHRjb2x1bW5NYXAucHVzaChjb2x1bW4pO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0aGVhZGVyRmluZFN1Y2Nlc3MgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdC8vY2hlY2sgaWYgY29sdW1uIGhlYWRlcnMgYXJlIHByZXNlbnQgYnkgZmllbGRcblx0XHRcdGlmKCFoZWFkZXJGaW5kU3VjY2Vzcyl7XG5cdFx0XHRcdGhlYWRlckZpbmRTdWNjZXNzID0gdHJ1ZTtcblx0XHRcdFx0Y29sdW1uTWFwID0gW107XG5cblx0XHRcdFx0ZGF0YVswXS5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKXtcblx0XHRcdFx0XHR2YXIgY29sdW1uID0gY29sdW1ucy5maW5kKGZ1bmN0aW9uKGNvbHVtbil7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgJiYgY29sdW1uLmZpZWxkICYmIHZhbHVlLnRyaW0oKSAmJiBjb2x1bW4uZmllbGQudHJpbSgpID09PSB2YWx1ZS50cmltKCk7XG5cdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHRpZihjb2x1bW4pe1xuXHRcdFx0XHRcdFx0Y29sdW1uTWFwLnB1c2goY29sdW1uKTtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRoZWFkZXJGaW5kU3VjY2VzcyA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0aWYoIWhlYWRlckZpbmRTdWNjZXNzKXtcblx0XHRcdFx0XHRjb2x1bW5NYXAgPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuY29sdW1uc0J5SW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly9yZW1vdmUgaGVhZGVyIHJvdyBpZiBmb3VuZFxuXHRcdFx0aWYoaGVhZGVyRmluZFN1Y2Nlc3Mpe1xuXHRcdFx0XHRkYXRhLnNoaWZ0KCk7XG5cdFx0XHR9XG5cblx0XHRcdGRhdGEuZm9yRWFjaChmdW5jdGlvbihpdGVtKXtcblx0XHRcdFx0dmFyIHJvdyA9IHt9O1xuXG5cdFx0XHRcdGl0ZW0uZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgaSl7XG5cdFx0XHRcdFx0aWYoY29sdW1uTWFwW2ldKXtcblx0XHRcdFx0XHRcdHJvd1tjb2x1bW5NYXBbaV0uZmllbGRdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRyb3dzLnB1c2gocm93KTtcblx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm4gcm93cztcblx0XHR9ZWxzZSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG59O1xuXG5jbGFzcyBDbGlwYm9hcmQgZXh0ZW5kcyBNb2R1bGV7XG5cblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblxuXHRcdHRoaXMubW9kZSA9IHRydWU7XG5cdFx0dGhpcy5wYXN0ZVBhcnNlciA9IGZ1bmN0aW9uKCl7fTtcblx0XHR0aGlzLnBhc3RlQWN0aW9uID0gZnVuY3Rpb24oKXt9O1xuXHRcdHRoaXMuY3VzdG9tU2VsZWN0aW9uID0gZmFsc2U7XG5cdFx0dGhpcy5yb3dSYW5nZSA9IGZhbHNlO1xuXHRcdHRoaXMuYmxvY2tlZCA9IHRydWU7IC8vYmxvY2sgY29weSBhY3Rpb25zIG5vdCBvcmlnaW5hdGluZyBmcm9tIHRoaXMgY29tbWFuZFxuXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiY2xpcGJvYXJkXCIsIGZhbHNlKTsgLy9lbmFibGUgY2xpcGJvYXJkXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiY2xpcGJvYXJkQ29weVN0eWxlZFwiLCB0cnVlKTsgLy9mb3JtYXR0ZWQgdGFibGUgZGF0YVxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImNsaXBib2FyZENvcHlDb25maWdcIiwgZmFsc2UpOyAvL2NsaXBib2FyZCBjb25maWdcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJjbGlwYm9hcmRDb3B5Rm9ybWF0dGVyXCIsIGZhbHNlKTsgLy9ERVBSRUNBVEVEIC0gUkVNT1ZFIGluIDUuMFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImNsaXBib2FyZENvcHlSb3dSYW5nZVwiLCBcImFjdGl2ZVwiKTsgLy9yZXN0cmljdCBjbGlwYm9hcmQgdG8gdmlzaWJsZSByb3dzIG9ubHlcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJjbGlwYm9hcmRQYXN0ZVBhcnNlclwiLCBcInRhYmxlXCIpOyAvL2NvbnZlcnQgcGFzdGVkIGNsaXBib2FyZCBkYXRhIHRvIHJvd3Ncblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJjbGlwYm9hcmRQYXN0ZUFjdGlvblwiLCBcImluc2VydFwiKTsgLy9ob3cgdG8gaW5zZXJ0IHBhc3RlZCBkYXRhIGludG8gdGhlIHRhYmxlXG5cblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiY2xpcGJvYXJkXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJ0aXRsZUNsaXBib2FyZFwiKTtcblx0fVxuXG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLm1vZGUgPSB0aGlzLnRhYmxlLm9wdGlvbnMuY2xpcGJvYXJkO1xuXG5cdFx0dGhpcy5yb3dSYW5nZSA9IHRoaXMudGFibGUub3B0aW9ucy5jbGlwYm9hcmRDb3B5Um93UmFuZ2U7XG5cblx0XHRpZih0aGlzLm1vZGUgPT09IHRydWUgfHwgdGhpcy5tb2RlID09PSBcImNvcHlcIil7XG5cdFx0XHR0aGlzLnRhYmxlLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNvcHlcIiwgKGUpID0+IHtcblx0XHRcdFx0dmFyIHBsYWluLCBodG1sLCBsaXN0O1xuXG5cdFx0XHRcdGlmKCF0aGlzLmJsb2NrZWQpe1xuXHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0XHRcdGlmKHRoaXMuY3VzdG9tU2VsZWN0aW9uKXtcblx0XHRcdFx0XHRcdHBsYWluID0gdGhpcy5jdXN0b21TZWxlY3Rpb247XG5cblx0XHRcdFx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5jbGlwYm9hcmRDb3B5Rm9ybWF0dGVyKXtcblx0XHRcdFx0XHRcdFx0cGxhaW4gPSB0aGlzLnRhYmxlLm9wdGlvbnMuY2xpcGJvYXJkQ29weUZvcm1hdHRlcihcInBsYWluXCIsIHBsYWluKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ZWxzZSB7XG5cblx0XHRcdFx0XHRcdGxpc3QgPSB0aGlzLnRhYmxlLm1vZHVsZXMuZXhwb3J0LmdlbmVyYXRlRXhwb3J0TGlzdCh0aGlzLnRhYmxlLm9wdGlvbnMuY2xpcGJvYXJkQ29weUNvbmZpZywgdGhpcy50YWJsZS5vcHRpb25zLmNsaXBib2FyZENvcHlTdHlsZWQsIHRoaXMucm93UmFuZ2UsIFwiY2xpcGJvYXJkXCIpO1xuXG5cdFx0XHRcdFx0XHRodG1sID0gdGhpcy50YWJsZS5tb2R1bGVzLmV4cG9ydC5nZW5lcmF0ZUhUTUxUYWJsZShsaXN0KTtcblx0XHRcdFx0XHRcdHBsYWluID0gaHRtbCA/IHRoaXMuZ2VuZXJhdGVQbGFpbkNvbnRlbnQobGlzdCkgOiBcIlwiO1xuXG5cdFx0XHRcdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuY2xpcGJvYXJkQ29weUZvcm1hdHRlcil7XG5cdFx0XHRcdFx0XHRcdHBsYWluID0gdGhpcy50YWJsZS5vcHRpb25zLmNsaXBib2FyZENvcHlGb3JtYXR0ZXIoXCJwbGFpblwiLCBwbGFpbik7XG5cdFx0XHRcdFx0XHRcdGh0bWwgPSB0aGlzLnRhYmxlLm9wdGlvbnMuY2xpcGJvYXJkQ29weUZvcm1hdHRlcihcImh0bWxcIiwgaHRtbCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKHdpbmRvdy5jbGlwYm9hcmREYXRhICYmIHdpbmRvdy5jbGlwYm9hcmREYXRhLnNldERhdGEpIHtcblx0XHRcdFx0XHRcdHdpbmRvdy5jbGlwYm9hcmREYXRhLnNldERhdGEoJ1RleHQnLCBwbGFpbik7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChlLmNsaXBib2FyZERhdGEgJiYgZS5jbGlwYm9hcmREYXRhLnNldERhdGEpIHtcblx0XHRcdFx0XHRcdGUuY2xpcGJvYXJkRGF0YS5zZXREYXRhKCd0ZXh0L3BsYWluJywgcGxhaW4pO1xuXHRcdFx0XHRcdFx0aWYoaHRtbCl7XG5cdFx0XHRcdFx0XHRcdGUuY2xpcGJvYXJkRGF0YS5zZXREYXRhKCd0ZXh0L2h0bWwnLCBodG1sKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2UgaWYgKGUub3JpZ2luYWxFdmVudCAmJiBlLm9yaWdpbmFsRXZlbnQuY2xpcGJvYXJkRGF0YS5zZXREYXRhKSB7XG5cdFx0XHRcdFx0XHRlLm9yaWdpbmFsRXZlbnQuY2xpcGJvYXJkRGF0YS5zZXREYXRhKCd0ZXh0L3BsYWluJywgcGxhaW4pO1xuXHRcdFx0XHRcdFx0aWYoaHRtbCl7XG5cdFx0XHRcdFx0XHRcdGUub3JpZ2luYWxFdmVudC5jbGlwYm9hcmREYXRhLnNldERhdGEoJ3RleHQvaHRtbCcsIGh0bWwpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcImNsaXBib2FyZENvcGllZFwiLCBwbGFpbiwgaHRtbCk7XG5cblx0XHRcdFx0XHR0aGlzLnJlc2V0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmKHRoaXMubW9kZSA9PT0gdHJ1ZSB8fCB0aGlzLm1vZGUgPT09IFwicGFzdGVcIil7XG5cdFx0XHR0aGlzLnRhYmxlLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInBhc3RlXCIsIChlKSA9PiB7XG5cdFx0XHRcdHRoaXMucGFzdGUoZSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHR0aGlzLnNldFBhc3RlUGFyc2VyKHRoaXMudGFibGUub3B0aW9ucy5jbGlwYm9hcmRQYXN0ZVBhcnNlcik7XG5cdFx0dGhpcy5zZXRQYXN0ZUFjdGlvbih0aGlzLnRhYmxlLm9wdGlvbnMuY2xpcGJvYXJkUGFzdGVBY3Rpb24pO1xuXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJjb3B5VG9DbGlwYm9hcmRcIiwgdGhpcy5jb3B5LmJpbmQodGhpcykpO1xuXHR9XG5cblx0cmVzZXQoKXtcblx0XHR0aGlzLmJsb2NrZWQgPSB0cnVlO1xuXHRcdHRoaXMuY3VzdG9tU2VsZWN0aW9uID0gZmFsc2U7XG5cdH1cblxuXHRnZW5lcmF0ZVBsYWluQ29udGVudCAobGlzdCkge1xuXHRcdHZhciBvdXRwdXQgPSBbXTtcblxuXHRcdGxpc3QuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHR2YXIgcm93RGF0YSA9IFtdO1xuXG5cdFx0XHRyb3cuY29sdW1ucy5mb3JFYWNoKChjb2wpID0+IHtcblx0XHRcdFx0dmFyIHZhbHVlID0gXCJcIjtcblxuXHRcdFx0XHRpZihjb2wpe1xuXG5cdFx0XHRcdFx0aWYocm93LnR5cGUgPT09IFwiZ3JvdXBcIil7XG5cdFx0XHRcdFx0XHRjb2wudmFsdWUgPSBjb2wuY29tcG9uZW50LmdldEtleSgpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmKGNvbC52YWx1ZSA9PT0gbnVsbCl7XG5cdFx0XHRcdFx0XHR2YWx1ZSA9IFwiXCI7XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0c3dpdGNoKHR5cGVvZiBjb2wudmFsdWUpe1xuXHRcdFx0XHRcdFx0XHRjYXNlIFwib2JqZWN0XCI6XG5cdFx0XHRcdFx0XHRcdFx0dmFsdWUgPSBKU09OLnN0cmluZ2lmeShjb2wudmFsdWUpO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgXCJ1bmRlZmluZWRcIjpcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZSA9IFwiXCI7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZSA9IGNvbC52YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyb3dEYXRhLnB1c2godmFsdWUpO1xuXHRcdFx0fSk7XG5cblx0XHRcdG91dHB1dC5wdXNoKHJvd0RhdGEuam9pbihcIlxcdFwiKSk7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gb3V0cHV0LmpvaW4oXCJcXG5cIik7XG5cdH1cblxuXHRjb3B5IChyYW5nZSwgaW50ZXJuYWwpIHtcblx0XHR2YXIgc2VsLCB0ZXh0UmFuZ2U7XG5cdFx0dGhpcy5ibG9ja2VkID0gZmFsc2U7XG5cdFx0dGhpcy5jdXN0b21TZWxlY3Rpb24gPSBmYWxzZTtcblxuXHRcdGlmICh0aGlzLm1vZGUgPT09IHRydWUgfHwgdGhpcy5tb2RlID09PSBcImNvcHlcIikge1xuXG5cdFx0XHR0aGlzLnJvd1JhbmdlID0gcmFuZ2UgfHwgdGhpcy50YWJsZS5vcHRpb25zLmNsaXBib2FyZENvcHlSb3dSYW5nZTtcblxuXHRcdFx0aWYgKHR5cGVvZiB3aW5kb3cuZ2V0U2VsZWN0aW9uICE9IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZVJhbmdlICE9IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdFx0cmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuXHRcdFx0XHRyYW5nZS5zZWxlY3ROb2RlQ29udGVudHModGhpcy50YWJsZS5lbGVtZW50KTtcblx0XHRcdFx0c2VsID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuXG5cdFx0XHRcdGlmIChzZWwudG9TdHJpbmcoKSAmJiBpbnRlcm5hbCkge1xuXHRcdFx0XHRcdHRoaXMuY3VzdG9tU2VsZWN0aW9uID0gc2VsLnRvU3RyaW5nKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzZWwucmVtb3ZlQWxsUmFuZ2VzKCk7XG5cdFx0XHRcdHNlbC5hZGRSYW5nZShyYW5nZSk7XG5cdFx0XHR9IGVsc2UgaWYgKHR5cGVvZiBkb2N1bWVudC5zZWxlY3Rpb24gIT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgZG9jdW1lbnQuYm9keS5jcmVhdGVUZXh0UmFuZ2UgIT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0XHR0ZXh0UmFuZ2UgPSBkb2N1bWVudC5ib2R5LmNyZWF0ZVRleHRSYW5nZSgpO1xuXHRcdFx0XHR0ZXh0UmFuZ2UubW92ZVRvRWxlbWVudFRleHQodGhpcy50YWJsZS5lbGVtZW50KTtcblx0XHRcdFx0dGV4dFJhbmdlLnNlbGVjdCgpO1xuXHRcdFx0fVxuXG5cdFx0XHRkb2N1bWVudC5leGVjQ29tbWFuZCgnY29weScpO1xuXG5cdFx0XHRpZiAoc2VsKSB7XG5cdFx0XHRcdHNlbC5yZW1vdmVBbGxSYW5nZXMoKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvL1BBU1RFIEVWRU5UIEhBTkRMSU5HXG5cdHNldFBhc3RlQWN0aW9uKGFjdGlvbil7XG5cblx0XHRzd2l0Y2godHlwZW9mIGFjdGlvbil7XG5cdFx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRcdHRoaXMucGFzdGVBY3Rpb24gPSBDbGlwYm9hcmQucGFzdGVBY3Rpb25zW2FjdGlvbl07XG5cblx0XHRcdFx0aWYoIXRoaXMucGFzdGVBY3Rpb24pe1xuXHRcdFx0XHRcdGNvbnNvbGUud2FybihcIkNsaXBib2FyZCBFcnJvciAtIE5vIHN1Y2ggcGFzdGUgYWN0aW9uIGZvdW5kOlwiLCBhY3Rpb24pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwiZnVuY3Rpb25cIjpcblx0XHRcdFx0dGhpcy5wYXN0ZUFjdGlvbiA9IGFjdGlvbjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0c2V0UGFzdGVQYXJzZXIocGFyc2VyKXtcblx0XHRzd2l0Y2godHlwZW9mIHBhcnNlcil7XG5cdFx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRcdHRoaXMucGFzdGVQYXJzZXIgPSBDbGlwYm9hcmQucGFzdGVQYXJzZXJzW3BhcnNlcl07XG5cblx0XHRcdFx0aWYoIXRoaXMucGFzdGVQYXJzZXIpe1xuXHRcdFx0XHRcdGNvbnNvbGUud2FybihcIkNsaXBib2FyZCBFcnJvciAtIE5vIHN1Y2ggcGFzdGUgcGFyc2VyIGZvdW5kOlwiLCBwYXJzZXIpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwiZnVuY3Rpb25cIjpcblx0XHRcdFx0dGhpcy5wYXN0ZVBhcnNlciA9IHBhcnNlcjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0cGFzdGUoZSl7XG5cdFx0dmFyIGRhdGEsIHJvd0RhdGEsIHJvd3M7XG5cblx0XHRpZih0aGlzLmNoZWNrUGFzZU9yaWdpbihlKSl7XG5cblx0XHRcdGRhdGEgPSB0aGlzLmdldFBhc3RlRGF0YShlKTtcblxuXHRcdFx0cm93RGF0YSA9IHRoaXMucGFzdGVQYXJzZXIuY2FsbCh0aGlzLCBkYXRhKTtcblxuXHRcdFx0aWYocm93RGF0YSl7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0XHRpZih0aGlzLnRhYmxlLm1vZEV4aXN0cyhcIm11dGF0b3JcIikpe1xuXHRcdFx0XHRcdHJvd0RhdGEgPSB0aGlzLm11dGF0ZURhdGEocm93RGF0YSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyb3dzID0gdGhpcy5wYXN0ZUFjdGlvbi5jYWxsKHRoaXMsIHJvd0RhdGEpO1xuXG5cdFx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcImNsaXBib2FyZFBhc3RlZFwiLCBkYXRhLCByb3dEYXRhLCByb3dzKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwiY2xpcGJvYXJkUGFzdGVFcnJvclwiLCBkYXRhKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRtdXRhdGVEYXRhKGRhdGEpe1xuXHRcdHZhciBvdXRwdXQgPSBbXTtcblxuXHRcdGlmKEFycmF5LmlzQXJyYXkoZGF0YSkpe1xuXHRcdFx0ZGF0YS5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdFx0b3V0cHV0LnB1c2godGhpcy50YWJsZS5tb2R1bGVzLm11dGF0b3IudHJhbnNmb3JtUm93KHJvdywgXCJjbGlwYm9hcmRcIikpO1xuXHRcdFx0fSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0b3V0cHV0ID0gZGF0YTtcblx0XHR9XG5cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cblxuXHRjaGVja1Bhc2VPcmlnaW4oZSl7XG5cdFx0dmFyIHZhbGlkID0gdHJ1ZTtcblxuXHRcdGlmKGUudGFyZ2V0LnRhZ05hbWUgIT0gXCJESVZcIiB8fCB0aGlzLnRhYmxlLm1vZHVsZXMuZWRpdC5jdXJyZW50Q2VsbCl7XG5cdFx0XHR2YWxpZCA9IGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWxpZDtcblx0fVxuXG5cdGdldFBhc3RlRGF0YShlKXtcblx0XHR2YXIgZGF0YTtcblxuXHRcdGlmICh3aW5kb3cuY2xpcGJvYXJkRGF0YSAmJiB3aW5kb3cuY2xpcGJvYXJkRGF0YS5nZXREYXRhKSB7XG5cdFx0XHRkYXRhID0gd2luZG93LmNsaXBib2FyZERhdGEuZ2V0RGF0YSgnVGV4dCcpO1xuXHRcdH0gZWxzZSBpZiAoZS5jbGlwYm9hcmREYXRhICYmIGUuY2xpcGJvYXJkRGF0YS5nZXREYXRhKSB7XG5cdFx0XHRkYXRhID0gZS5jbGlwYm9hcmREYXRhLmdldERhdGEoJ3RleHQvcGxhaW4nKTtcblx0XHR9IGVsc2UgaWYgKGUub3JpZ2luYWxFdmVudCAmJiBlLm9yaWdpbmFsRXZlbnQuY2xpcGJvYXJkRGF0YS5nZXREYXRhKSB7XG5cdFx0XHRkYXRhID0gZS5vcmlnaW5hbEV2ZW50LmNsaXBib2FyZERhdGEuZ2V0RGF0YSgndGV4dC9wbGFpbicpO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXHR9XG59XG5cbkNsaXBib2FyZC5tb2R1bGVOYW1lID0gXCJjbGlwYm9hcmRcIjtcblxuLy9sb2FkIGRlZmF1bHRzXG5DbGlwYm9hcmQucGFzdGVBY3Rpb25zID0gZGVmYXVsdFBhc3RlQWN0aW9ucztcbkNsaXBib2FyZC5wYXN0ZVBhcnNlcnMgPSBkZWZhdWx0UGFzdGVQYXJzZXJzO1xuXG5jbGFzcyBDYWxjQ29tcG9uZW50e1xuXHRjb25zdHJ1Y3RvciAocm93KXtcblx0XHR0aGlzLl9yb3cgPSByb3c7XG5cblx0XHRyZXR1cm4gbmV3IFByb3h5KHRoaXMsIHtcblx0XHRcdGdldDogZnVuY3Rpb24odGFyZ2V0LCBuYW1lLCByZWNlaXZlcikge1xuXHRcdFx0XHRpZiAodHlwZW9mIHRhcmdldFtuYW1lXSAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0XHRcdHJldHVybiB0YXJnZXRbbmFtZV07XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRyZXR1cm4gdGFyZ2V0Ll9yb3cudGFibGUuY29tcG9uZW50RnVuY3Rpb25CaW5kZXIuaGFuZGxlKFwicm93XCIsIHRhcmdldC5fcm93LCBuYW1lKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0Z2V0RGF0YSh0cmFuc2Zvcm0pe1xuXHRcdHJldHVybiB0aGlzLl9yb3cuZ2V0RGF0YSh0cmFuc2Zvcm0pO1xuXHR9XG5cblx0Z2V0RWxlbWVudCgpe1xuXHRcdHJldHVybiB0aGlzLl9yb3cuZ2V0RWxlbWVudCgpO1xuXHR9XG5cblx0Z2V0VGFibGUoKXtcblx0XHRyZXR1cm4gdGhpcy5fcm93LnRhYmxlO1xuXHR9XG5cblx0Z2V0Q2VsbHMoKXtcblx0XHR2YXIgY2VsbHMgPSBbXTtcblxuXHRcdHRoaXMuX3Jvdy5nZXRDZWxscygpLmZvckVhY2goZnVuY3Rpb24oY2VsbCl7XG5cdFx0XHRjZWxscy5wdXNoKGNlbGwuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIGNlbGxzO1xuXHR9XG5cblx0Z2V0Q2VsbChjb2x1bW4pe1xuXHRcdHZhciBjZWxsID0gdGhpcy5fcm93LmdldENlbGwoY29sdW1uKTtcblx0XHRyZXR1cm4gY2VsbCA/IGNlbGwuZ2V0Q29tcG9uZW50KCkgOiBmYWxzZTtcblx0fVxuXG5cdF9nZXRTZWxmKCl7XG5cdFx0cmV0dXJuIHRoaXMuX3Jvdztcblx0fVxufVxuXG4vL3B1YmxpYyBjZWxsIG9iamVjdFxuY2xhc3MgQ2VsbENvbXBvbmVudCB7XG5cblx0Y29uc3RydWN0b3IgKGNlbGwpe1xuXHRcdHRoaXMuX2NlbGwgPSBjZWxsO1xuXG5cdFx0cmV0dXJuIG5ldyBQcm94eSh0aGlzLCB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKHRhcmdldCwgbmFtZSwgcmVjZWl2ZXIpIHtcblx0XHRcdFx0aWYgKHR5cGVvZiB0YXJnZXRbbmFtZV0gIT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdFx0XHRyZXR1cm4gdGFyZ2V0W25hbWVdO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRhcmdldC5fY2VsbC50YWJsZS5jb21wb25lbnRGdW5jdGlvbkJpbmRlci5oYW5kbGUoXCJjZWxsXCIsIHRhcmdldC5fY2VsbCwgbmFtZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdGdldFZhbHVlKCl7XG5cdFx0cmV0dXJuIHRoaXMuX2NlbGwuZ2V0VmFsdWUoKTtcblx0fVxuXG5cdGdldE9sZFZhbHVlKCl7XG5cdFx0cmV0dXJuIHRoaXMuX2NlbGwuZ2V0T2xkVmFsdWUoKTtcblx0fVxuXG5cdGdldEluaXRpYWxWYWx1ZSgpe1xuXHRcdHJldHVybiB0aGlzLl9jZWxsLmluaXRpYWxWYWx1ZTtcblx0fVxuXG5cdGdldEVsZW1lbnQoKXtcblx0XHRyZXR1cm4gdGhpcy5fY2VsbC5nZXRFbGVtZW50KCk7XG5cdH1cblxuXHRnZXRSb3coKXtcblx0XHRyZXR1cm4gdGhpcy5fY2VsbC5yb3cuZ2V0Q29tcG9uZW50KCk7XG5cdH1cblxuXHRnZXREYXRhKHRyYW5zZm9ybSl7XG5cdFx0cmV0dXJuIHRoaXMuX2NlbGwucm93LmdldERhdGEodHJhbnNmb3JtKTtcblx0fVxuXHRnZXRUeXBlKCl7XG5cdFx0cmV0dXJuIFwiY2VsbFwiO1xuXHR9XG5cdGdldEZpZWxkKCl7XG5cdFx0cmV0dXJuIHRoaXMuX2NlbGwuY29sdW1uLmdldEZpZWxkKCk7XG5cdH1cblxuXHRnZXRDb2x1bW4oKXtcblx0XHRyZXR1cm4gdGhpcy5fY2VsbC5jb2x1bW4uZ2V0Q29tcG9uZW50KCk7XG5cdH1cblxuXHRzZXRWYWx1ZSh2YWx1ZSwgbXV0YXRlKXtcblx0XHRpZih0eXBlb2YgbXV0YXRlID09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0bXV0YXRlID0gdHJ1ZTtcblx0XHR9XG5cblx0XHR0aGlzLl9jZWxsLnNldFZhbHVlKHZhbHVlLCBtdXRhdGUpO1xuXHR9XG5cblx0cmVzdG9yZU9sZFZhbHVlKCl7XG5cdFx0dGhpcy5fY2VsbC5zZXRWYWx1ZUFjdHVhbCh0aGlzLl9jZWxsLmdldE9sZFZhbHVlKCkpO1xuXHR9XG5cblx0cmVzdG9yZUluaXRpYWxWYWx1ZSgpe1xuXHRcdHRoaXMuX2NlbGwuc2V0VmFsdWVBY3R1YWwodGhpcy5fY2VsbC5pbml0aWFsVmFsdWUpO1xuXHR9XG5cblx0Y2hlY2tIZWlnaHQoKXtcblx0XHR0aGlzLl9jZWxsLmNoZWNrSGVpZ2h0KCk7XG5cdH1cblxuXHRnZXRUYWJsZSgpe1xuXHRcdHJldHVybiB0aGlzLl9jZWxsLnRhYmxlO1xuXHR9XG5cblx0X2dldFNlbGYoKXtcblx0XHRyZXR1cm4gdGhpcy5fY2VsbDtcblx0fVxufVxuXG5jbGFzcyBDZWxsIGV4dGVuZHMgQ29yZUZlYXR1cmV7XG5cdGNvbnN0cnVjdG9yKGNvbHVtbiwgcm93KXtcblx0XHRzdXBlcihjb2x1bW4udGFibGUpO1xuXG5cdFx0dGhpcy50YWJsZSA9IGNvbHVtbi50YWJsZTtcblx0XHR0aGlzLmNvbHVtbiA9IGNvbHVtbjtcblx0XHR0aGlzLnJvdyA9IHJvdztcblx0XHR0aGlzLmVsZW1lbnQgPSBudWxsO1xuXHRcdHRoaXMudmFsdWUgPSBudWxsO1xuXHRcdHRoaXMuaW5pdGlhbFZhbHVlO1xuXHRcdHRoaXMub2xkVmFsdWUgPSBudWxsO1xuXHRcdHRoaXMubW9kdWxlcyA9IHt9O1xuXG5cdFx0dGhpcy5oZWlnaHQgPSBudWxsO1xuXHRcdHRoaXMud2lkdGggPSBudWxsO1xuXHRcdHRoaXMubWluV2lkdGggPSBudWxsO1xuXG5cdFx0dGhpcy5jb21wb25lbnQgPSBudWxsO1xuXG5cdFx0dGhpcy5sb2FkZWQgPSBmYWxzZTsgLy90cmFjayBpZiB0aGUgY2VsbCBoYXMgYmVlbiBhZGRlZCB0byB0aGUgRE9NIHlldFxuXG5cdFx0dGhpcy5idWlsZCgpO1xuXHR9XG5cblx0Ly8vLy8vLy8vLy8vLy8vLyBTZXR1cCBGdW5jdGlvbnMgLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly9nZW5lcmF0ZSBlbGVtZW50XG5cdGJ1aWxkKCl7XG5cdFx0dGhpcy5nZW5lcmF0ZUVsZW1lbnQoKTtcblxuXHRcdHRoaXMuc2V0V2lkdGgoKTtcblxuXHRcdHRoaXMuX2NvbmZpZ3VyZUNlbGwoKTtcblxuXHRcdHRoaXMuc2V0VmFsdWVBY3R1YWwodGhpcy5jb2x1bW4uZ2V0RmllbGRWYWx1ZSh0aGlzLnJvdy5kYXRhKSk7XG5cblx0XHR0aGlzLmluaXRpYWxWYWx1ZSA9IHRoaXMudmFsdWU7XG5cdH1cblxuXHRnZW5lcmF0ZUVsZW1lbnQoKXtcblx0XHR0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0XHR0aGlzLmVsZW1lbnQuY2xhc3NOYW1lID0gXCJ0YWJ1bGF0b3ItY2VsbFwiO1xuXHRcdHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwiZ3JpZGNlbGxcIik7XG5cdH1cblxuXHRfY29uZmlndXJlQ2VsbCgpe1xuXHRcdHZhciBlbGVtZW50ID0gdGhpcy5lbGVtZW50LFxuXHRcdGZpZWxkID0gdGhpcy5jb2x1bW4uZ2V0RmllbGQoKSxcblx0XHR2ZXJ0QWxpZ25zID0ge1xuXHRcdFx0dG9wOlwiZmxleC1zdGFydFwiLFxuXHRcdFx0Ym90dG9tOlwiZmxleC1lbmRcIixcblx0XHRcdG1pZGRsZTpcImNlbnRlclwiLFxuXHRcdH0sXG5cdFx0aG96QWxpZ25zID0ge1xuXHRcdFx0bGVmdDpcImZsZXgtc3RhcnRcIixcblx0XHRcdHJpZ2h0OlwiZmxleC1lbmRcIixcblx0XHRcdGNlbnRlcjpcImNlbnRlclwiLFxuXHRcdH07XG5cblx0XHQvL3NldCB0ZXh0IGFsaWdubWVudFxuXHRcdGVsZW1lbnQuc3R5bGUudGV4dEFsaWduID0gdGhpcy5jb2x1bW4uaG96QWxpZ247XG5cblx0XHRpZih0aGlzLmNvbHVtbi52ZXJ0QWxpZ24pe1xuXHRcdFx0ZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtZmxleFwiO1xuXG5cdFx0XHRlbGVtZW50LnN0eWxlLmFsaWduSXRlbXMgPSB2ZXJ0QWxpZ25zW3RoaXMuY29sdW1uLnZlcnRBbGlnbl0gfHwgXCJcIjtcblxuXHRcdFx0aWYodGhpcy5jb2x1bW4uaG96QWxpZ24pe1xuXHRcdFx0XHRlbGVtZW50LnN0eWxlLmp1c3RpZnlDb250ZW50ID0gaG96QWxpZ25zW3RoaXMuY29sdW1uLmhvekFsaWduXSB8fCBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmKGZpZWxkKXtcblx0XHRcdGVsZW1lbnQuc2V0QXR0cmlidXRlKFwidGFidWxhdG9yLWZpZWxkXCIsIGZpZWxkKTtcblx0XHR9XG5cblx0XHQvL2FkZCBjbGFzcyB0byBjZWxsIGlmIG5lZWRlZFxuXHRcdGlmKHRoaXMuY29sdW1uLmRlZmluaXRpb24uY3NzQ2xhc3Mpe1xuXHRcdFx0dmFyIGNsYXNzTmFtZXMgPSB0aGlzLmNvbHVtbi5kZWZpbml0aW9uLmNzc0NsYXNzLnNwbGl0KFwiIFwiKTtcblx0XHRcdGNsYXNzTmFtZXMuZm9yRWFjaCgoY2xhc3NOYW1lKSA9PiB7XG5cdFx0XHRcdGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5kaXNwYXRjaChcImNlbGwtaW5pdFwiLCB0aGlzKTtcblxuXHRcdC8vaGlkZSBjZWxsIGlmIG5vdCB2aXNpYmxlXG5cdFx0aWYoIXRoaXMuY29sdW1uLnZpc2libGUpe1xuXHRcdFx0dGhpcy5oaWRlKCk7XG5cdFx0fVxuXHR9XG5cblx0Ly9nZW5lcmF0ZSBjZWxsIGNvbnRlbnRzXG5cdF9nZW5lcmF0ZUNvbnRlbnRzKCl7XG5cdFx0dmFyIHZhbDtcblxuXHRcdHZhbCA9IHRoaXMuY2hhaW4oXCJjZWxsLWZvcm1hdFwiLCB0aGlzLCBudWxsLCAoKSA9PiB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lbGVtZW50LmlubmVySFRNTCA9IHRoaXMudmFsdWU7XG5cdFx0fSk7XG5cblx0XHRzd2l0Y2godHlwZW9mIHZhbCl7XG5cdFx0XHRjYXNlIFwib2JqZWN0XCI6XG5cdFx0XHRcdGlmKHZhbCBpbnN0YW5jZW9mIE5vZGUpe1xuXG5cdFx0XHRcdFx0Ly9jbGVhciBwcmV2aW91cyBjZWxsIGNvbnRlbnRzXG5cdFx0XHRcdFx0d2hpbGUodGhpcy5lbGVtZW50LmZpcnN0Q2hpbGQpIHRoaXMuZWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQuZmlyc3RDaGlsZCk7XG5cblx0XHRcdFx0XHR0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodmFsKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuZWxlbWVudC5pbm5lckhUTUwgPSBcIlwiO1xuXG5cdFx0XHRcdFx0aWYodmFsICE9IG51bGwpe1xuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiRm9ybWF0IEVycm9yIC0gRm9ybWF0dGVyIGhhcyByZXR1cm5lZCBhIHR5cGUgb2Ygb2JqZWN0LCB0aGUgb25seSB2YWxpZCBmb3JtYXR0ZXIgb2JqZWN0IHJldHVybiBpcyBhbiBpbnN0YW5jZSBvZiBOb2RlLCB0aGUgZm9ybWF0dGVyIHJldHVybmVkOlwiLCB2YWwpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJ1bmRlZmluZWRcIjpcblx0XHRcdFx0dGhpcy5lbGVtZW50LmlubmVySFRNTCA9IFwiXCI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0dGhpcy5lbGVtZW50LmlubmVySFRNTCA9IHZhbDtcblx0XHR9XG5cdH1cblxuXHRjZWxsUmVuZGVyZWQoKXtcblx0XHR0aGlzLmRpc3BhdGNoKFwiY2VsbC1yZW5kZXJlZFwiLCB0aGlzKTtcblx0fVxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vIEdldHRlcnMgLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Z2V0RWxlbWVudChjb250YWluZXJPbmx5KXtcblx0XHRpZighdGhpcy5sb2FkZWQpe1xuXHRcdFx0dGhpcy5sb2FkZWQgPSB0cnVlO1xuXHRcdFx0aWYoIWNvbnRhaW5lck9ubHkpe1xuXHRcdFx0XHR0aGlzLmxheW91dEVsZW1lbnQoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lbGVtZW50O1xuXHR9XG5cblx0Z2V0VmFsdWUoKXtcblx0XHRyZXR1cm4gdGhpcy52YWx1ZTtcblx0fVxuXG5cdGdldE9sZFZhbHVlKCl7XG5cdFx0cmV0dXJuIHRoaXMub2xkVmFsdWU7XG5cdH1cblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLyBBY3Rpb25zIC8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdHNldFZhbHVlKHZhbHVlLCBtdXRhdGUsIGZvcmNlKXtcblx0XHR2YXIgY2hhbmdlZCA9IHRoaXMuc2V0VmFsdWVQcm9jZXNzRGF0YSh2YWx1ZSwgbXV0YXRlLCBmb3JjZSk7XG5cblx0XHRpZihjaGFuZ2VkKXtcblx0XHRcdHRoaXMuZGlzcGF0Y2goXCJjZWxsLXZhbHVlLXVwZGF0ZWRcIiwgdGhpcyk7XG5cblx0XHRcdHRoaXMuY2VsbFJlbmRlcmVkKCk7XG5cblx0XHRcdGlmKHRoaXMuY29sdW1uLmRlZmluaXRpb24uY2VsbEVkaXRlZCl7XG5cdFx0XHRcdHRoaXMuY29sdW1uLmRlZmluaXRpb24uY2VsbEVkaXRlZC5jYWxsKHRoaXMudGFibGUsIHRoaXMuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJjZWxsRWRpdGVkXCIsIHRoaXMuZ2V0Q29tcG9uZW50KCkpO1xuXG5cdFx0XHRpZih0aGlzLnN1YnNjcmliZWRFeHRlcm5hbChcImRhdGFDaGFuZ2VkXCIpKXtcblx0XHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwiZGF0YUNoYW5nZWRcIiwgdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldERhdGEoKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0c2V0VmFsdWVQcm9jZXNzRGF0YSh2YWx1ZSwgbXV0YXRlLCBmb3JjZSl7XG5cdFx0dmFyIGNoYW5nZWQgPSBmYWxzZTtcblxuXHRcdGlmKHRoaXMudmFsdWUgIT09IHZhbHVlIHx8IGZvcmNlKXtcblxuXHRcdFx0Y2hhbmdlZCA9IHRydWU7XG5cblx0XHRcdGlmKG11dGF0ZSl7XG5cdFx0XHRcdHZhbHVlID0gdGhpcy5jaGFpbihcImNlbGwtdmFsdWUtY2hhbmdpbmdcIiwgW3RoaXMsIHZhbHVlXSwgbnVsbCwgdmFsdWUpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMuc2V0VmFsdWVBY3R1YWwodmFsdWUpO1xuXG5cdFx0aWYoY2hhbmdlZCl7XG5cdFx0XHR0aGlzLmRpc3BhdGNoKFwiY2VsbC12YWx1ZS1jaGFuZ2VkXCIsIHRoaXMpO1xuXHRcdH1cblxuXHRcdHJldHVybiBjaGFuZ2VkO1xuXHR9XG5cblx0c2V0VmFsdWVBY3R1YWwodmFsdWUpe1xuXHRcdHRoaXMub2xkVmFsdWUgPSB0aGlzLnZhbHVlO1xuXG5cdFx0dGhpcy52YWx1ZSA9IHZhbHVlO1xuXG5cdFx0dGhpcy5kaXNwYXRjaChcImNlbGwtdmFsdWUtc2F2ZS1iZWZvcmVcIiwgdGhpcyk7XG5cblx0XHR0aGlzLmNvbHVtbi5zZXRGaWVsZFZhbHVlKHRoaXMucm93LmRhdGEsIHZhbHVlKTtcblxuXHRcdHRoaXMuZGlzcGF0Y2goXCJjZWxsLXZhbHVlLXNhdmUtYWZ0ZXJcIiwgdGhpcyk7XG5cblx0XHRpZih0aGlzLmxvYWRlZCl7XG5cdFx0XHR0aGlzLmxheW91dEVsZW1lbnQoKTtcblx0XHR9XG5cdH1cblxuXHRsYXlvdXRFbGVtZW50KCl7XG5cdFx0dGhpcy5fZ2VuZXJhdGVDb250ZW50cygpO1xuXG5cdFx0dGhpcy5kaXNwYXRjaChcImNlbGwtbGF5b3V0XCIsIHRoaXMpO1xuXHR9XG5cblx0c2V0V2lkdGgoKXtcblx0XHR0aGlzLndpZHRoID0gdGhpcy5jb2x1bW4ud2lkdGg7XG5cdFx0dGhpcy5lbGVtZW50LnN0eWxlLndpZHRoID0gdGhpcy5jb2x1bW4ud2lkdGhTdHlsZWQ7XG5cdH1cblxuXHRjbGVhcldpZHRoKCl7XG5cdFx0dGhpcy53aWR0aCA9IFwiXCI7XG5cdFx0dGhpcy5lbGVtZW50LnN0eWxlLndpZHRoID0gXCJcIjtcblx0fVxuXG5cdGdldFdpZHRoKCl7XG5cdFx0cmV0dXJuIHRoaXMud2lkdGggfHwgdGhpcy5lbGVtZW50Lm9mZnNldFdpZHRoO1xuXHR9XG5cblx0c2V0TWluV2lkdGgoKXtcblx0XHR0aGlzLm1pbldpZHRoID0gdGhpcy5jb2x1bW4ubWluV2lkdGg7XG5cdFx0dGhpcy5lbGVtZW50LnN0eWxlLm1pbldpZHRoID0gdGhpcy5jb2x1bW4ubWluV2lkdGhTdHlsZWQ7XG5cdH1cblxuXHRzZXRNYXhXaWR0aCgpe1xuXHRcdHRoaXMubWF4V2lkdGggPSB0aGlzLmNvbHVtbi5tYXhXaWR0aDtcblx0XHR0aGlzLmVsZW1lbnQuc3R5bGUubWF4V2lkdGggPSB0aGlzLmNvbHVtbi5tYXhXaWR0aFN0eWxlZDtcblx0fVxuXG5cdGNoZWNrSGVpZ2h0KCl7XG5cdFx0Ly8gdmFyIGhlaWdodCA9IHRoaXMuZWxlbWVudC5jc3MoXCJoZWlnaHRcIik7XG5cdFx0dGhpcy5yb3cucmVpbml0aWFsaXplSGVpZ2h0KCk7XG5cdH1cblxuXHRjbGVhckhlaWdodCgpe1xuXHRcdHRoaXMuZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBcIlwiO1xuXHRcdHRoaXMuaGVpZ2h0ID0gbnVsbDtcblxuXHRcdHRoaXMuZGlzcGF0Y2goXCJjZWxsLWhlaWdodFwiLCB0aGlzLCBcIlwiKTtcblx0fVxuXG5cdHNldEhlaWdodCgpe1xuXHRcdHRoaXMuaGVpZ2h0ID0gdGhpcy5yb3cuaGVpZ2h0O1xuXHRcdHRoaXMuZWxlbWVudC5zdHlsZS5oZWlnaHQgPSB0aGlzLnJvdy5oZWlnaHRTdHlsZWQ7XG5cblx0XHR0aGlzLmRpc3BhdGNoKFwiY2VsbC1oZWlnaHRcIiwgdGhpcywgdGhpcy5yb3cuaGVpZ2h0U3R5bGVkKTtcblx0fVxuXG5cdGdldEhlaWdodCgpe1xuXHRcdHJldHVybiB0aGlzLmhlaWdodCB8fCB0aGlzLmVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuXHR9XG5cblx0c2hvdygpe1xuXHRcdHRoaXMuZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gdGhpcy5jb2x1bW4udmVydEFsaWduID8gXCJpbmxpbmUtZmxleFwiIDogXCJcIjtcblx0fVxuXG5cdGhpZGUoKXtcblx0XHR0aGlzLmVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuXHR9XG5cblx0ZGVsZXRlKCl7XG5cdFx0dGhpcy5kaXNwYXRjaChcImNlbGwtZGVsZXRlXCIsIHRoaXMpO1xuXG5cdFx0aWYoIXRoaXMudGFibGUucm93TWFuYWdlci5yZWRyYXdCbG9jayAmJiB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZSl7XG5cdFx0XHR0aGlzLmVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQpO1xuXHRcdH1cblxuXHRcdHRoaXMuZWxlbWVudCA9IGZhbHNlO1xuXHRcdHRoaXMuY29sdW1uLmRlbGV0ZUNlbGwodGhpcyk7XG5cdFx0dGhpcy5yb3cuZGVsZXRlQ2VsbCh0aGlzKTtcblx0XHR0aGlzLmNhbGNzID0ge307XG5cdH1cblxuXHRnZXRJbmRleCgpe1xuXHRcdHJldHVybiB0aGlzLnJvdy5nZXRDZWxsSW5kZXgodGhpcyk7XG5cdH1cblxuXHQvLy8vLy8vLy8vLy8vLy8vIE9iamVjdCBHZW5lcmF0aW9uIC8vLy8vLy8vLy8vLy8vLy8vXG5cdGdldENvbXBvbmVudCgpe1xuXHRcdGlmKCF0aGlzLmNvbXBvbmVudCl7XG5cdFx0XHR0aGlzLmNvbXBvbmVudCA9IG5ldyBDZWxsQ29tcG9uZW50KHRoaXMpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmNvbXBvbmVudDtcblx0fVxufVxuXG4vL3B1YmxpYyBjb2x1bW4gb2JqZWN0XG5jbGFzcyBDb2x1bW5Db21wb25lbnQge1xuXHRjb25zdHJ1Y3RvciAoY29sdW1uKXtcblx0XHR0aGlzLl9jb2x1bW4gPSBjb2x1bW47XG5cdFx0dGhpcy50eXBlID0gXCJDb2x1bW5Db21wb25lbnRcIjtcblxuXHRcdHJldHVybiBuZXcgUHJveHkodGhpcywge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbih0YXJnZXQsIG5hbWUsIHJlY2VpdmVyKSB7XG5cdFx0XHRcdGlmICh0eXBlb2YgdGFyZ2V0W25hbWVdICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRhcmdldFtuYW1lXTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiB0YXJnZXQuX2NvbHVtbi50YWJsZS5jb21wb25lbnRGdW5jdGlvbkJpbmRlci5oYW5kbGUoXCJjb2x1bW5cIiwgdGFyZ2V0Ll9jb2x1bW4sIG5hbWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRnZXRFbGVtZW50KCl7XG5cdFx0cmV0dXJuIHRoaXMuX2NvbHVtbi5nZXRFbGVtZW50KCk7XG5cdH1cblxuXHRnZXREZWZpbml0aW9uKCl7XG5cdFx0cmV0dXJuIHRoaXMuX2NvbHVtbi5nZXREZWZpbml0aW9uKCk7XG5cdH1cblxuXHRnZXRGaWVsZCgpe1xuXHRcdHJldHVybiB0aGlzLl9jb2x1bW4uZ2V0RmllbGQoKTtcblx0fVxuXG5cdGdldFRpdGxlRG93bmxvYWQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2NvbHVtbi5nZXRUaXRsZURvd25sb2FkKCk7XG5cdH1cblxuXHRnZXRDZWxscygpe1xuXHRcdHZhciBjZWxscyA9IFtdO1xuXG5cdFx0dGhpcy5fY29sdW1uLmNlbGxzLmZvckVhY2goZnVuY3Rpb24oY2VsbCl7XG5cdFx0XHRjZWxscy5wdXNoKGNlbGwuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIGNlbGxzO1xuXHR9XG5cblx0aXNWaXNpYmxlKCl7XG5cdFx0cmV0dXJuIHRoaXMuX2NvbHVtbi52aXNpYmxlO1xuXHR9XG5cblx0c2hvdygpe1xuXHRcdGlmKHRoaXMuX2NvbHVtbi5pc0dyb3VwKXtcblx0XHRcdHRoaXMuX2NvbHVtbi5jb2x1bW5zLmZvckVhY2goZnVuY3Rpb24oY29sdW1uKXtcblx0XHRcdFx0Y29sdW1uLnNob3coKTtcblx0XHRcdH0pO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuX2NvbHVtbi5zaG93KCk7XG5cdFx0fVxuXHR9XG5cblx0aGlkZSgpe1xuXHRcdGlmKHRoaXMuX2NvbHVtbi5pc0dyb3VwKXtcblx0XHRcdHRoaXMuX2NvbHVtbi5jb2x1bW5zLmZvckVhY2goZnVuY3Rpb24oY29sdW1uKXtcblx0XHRcdFx0Y29sdW1uLmhpZGUoKTtcblx0XHRcdH0pO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuX2NvbHVtbi5oaWRlKCk7XG5cdFx0fVxuXHR9XG5cblx0dG9nZ2xlKCl7XG5cdFx0aWYodGhpcy5fY29sdW1uLnZpc2libGUpe1xuXHRcdFx0dGhpcy5oaWRlKCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5zaG93KCk7XG5cdFx0fVxuXHR9XG5cblx0ZGVsZXRlKCl7XG5cdFx0cmV0dXJuIHRoaXMuX2NvbHVtbi5kZWxldGUoKTtcblx0fVxuXG5cdGdldFN1YkNvbHVtbnMoKXtcblx0XHR2YXIgb3V0cHV0ID0gW107XG5cblx0XHRpZih0aGlzLl9jb2x1bW4uY29sdW1ucy5sZW5ndGgpe1xuXHRcdFx0dGhpcy5fY29sdW1uLmNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihjb2x1bW4pe1xuXHRcdFx0XHRvdXRwdXQucHVzaChjb2x1bW4uZ2V0Q29tcG9uZW50KCkpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdGdldFBhcmVudENvbHVtbigpe1xuXHRcdHJldHVybiB0aGlzLl9jb2x1bW4ucGFyZW50IGluc3RhbmNlb2YgQ29sdW1uID8gdGhpcy5fY29sdW1uLnBhcmVudC5nZXRDb21wb25lbnQoKSA6IGZhbHNlO1xuXHR9XG5cblx0X2dldFNlbGYoKXtcblx0XHRyZXR1cm4gdGhpcy5fY29sdW1uO1xuXHR9XG5cblx0c2Nyb2xsVG8ocG9zaXRpb24sIGlmVmlzaWJsZSl7XG5cdFx0cmV0dXJuIHRoaXMuX2NvbHVtbi50YWJsZS5jb2x1bW5NYW5hZ2VyLnNjcm9sbFRvQ29sdW1uKHRoaXMuX2NvbHVtbiwgcG9zaXRpb24sIGlmVmlzaWJsZSk7XG5cdH1cblxuXHRnZXRUYWJsZSgpe1xuXHRcdHJldHVybiB0aGlzLl9jb2x1bW4udGFibGU7XG5cdH1cblxuXHRtb3ZlKHRvLCBhZnRlcil7XG5cdFx0dmFyIHRvQ29sdW1uID0gdGhpcy5fY29sdW1uLnRhYmxlLmNvbHVtbk1hbmFnZXIuZmluZENvbHVtbih0byk7XG5cblx0XHRpZih0b0NvbHVtbil7XG5cdFx0XHR0aGlzLl9jb2x1bW4udGFibGUuY29sdW1uTWFuYWdlci5tb3ZlQ29sdW1uKHRoaXMuX2NvbHVtbiwgdG9Db2x1bW4sIGFmdGVyKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJNb3ZlIEVycm9yIC0gTm8gbWF0Y2hpbmcgY29sdW1uIGZvdW5kOlwiLCB0b0NvbHVtbik7XG5cdFx0fVxuXHR9XG5cblx0Z2V0TmV4dENvbHVtbigpe1xuXHRcdHZhciBuZXh0Q29sID0gdGhpcy5fY29sdW1uLm5leHRDb2x1bW4oKTtcblxuXHRcdHJldHVybiBuZXh0Q29sID8gbmV4dENvbC5nZXRDb21wb25lbnQoKSA6IGZhbHNlO1xuXHR9XG5cblx0Z2V0UHJldkNvbHVtbigpe1xuXHRcdHZhciBwcmV2Q29sID0gdGhpcy5fY29sdW1uLnByZXZDb2x1bW4oKTtcblxuXHRcdHJldHVybiBwcmV2Q29sID8gcHJldkNvbC5nZXRDb21wb25lbnQoKSA6IGZhbHNlO1xuXHR9XG5cblx0dXBkYXRlRGVmaW5pdGlvbih1cGRhdGVzKXtcblx0XHRyZXR1cm4gdGhpcy5fY29sdW1uLnVwZGF0ZURlZmluaXRpb24odXBkYXRlcyk7XG5cdH1cblxuXHRnZXRXaWR0aCgpe1xuXHRcdHJldHVybiB0aGlzLl9jb2x1bW4uZ2V0V2lkdGgoKTtcblx0fVxuXG5cdHNldFdpZHRoKHdpZHRoKXtcblx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0aWYod2lkdGggPT09IHRydWUpe1xuXHRcdFx0cmVzdWx0ID0gIHRoaXMuX2NvbHVtbi5yZWluaXRpYWxpemVXaWR0aCh0cnVlKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSAgdGhpcy5fY29sdW1uLnNldFdpZHRoKHdpZHRoKTtcblx0XHR9XG5cblx0XHR0aGlzLl9jb2x1bW4udGFibGUuY29sdW1uTWFuYWdlci5yZXJlbmRlckNvbHVtbnModHJ1ZSk7XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG59XG5cbnZhciBkZWZhdWx0Q29sdW1uT3B0aW9ucyA9IHtcblx0XCJ0aXRsZVwiOiB1bmRlZmluZWQsXG5cdFwiZmllbGRcIjogdW5kZWZpbmVkLFxuXHRcImNvbHVtbnNcIjogdW5kZWZpbmVkLFxuXHRcInZpc2libGVcIjogdW5kZWZpbmVkLFxuXHRcImhvekFsaWduXCI6IHVuZGVmaW5lZCxcblx0XCJ2ZXJ0QWxpZ25cIjogdW5kZWZpbmVkLFxuXHRcIndpZHRoXCI6IHVuZGVmaW5lZCxcblx0XCJtaW5XaWR0aFwiOiA0MCxcblx0XCJtYXhXaWR0aFwiOiB1bmRlZmluZWQsXG5cdFwibWF4SW5pdGlhbFdpZHRoXCI6IHVuZGVmaW5lZCxcblx0XCJjc3NDbGFzc1wiOiB1bmRlZmluZWQsXG5cdFwidmFyaWFibGVIZWlnaHRcIjogdW5kZWZpbmVkLFxuXHRcImhlYWRlclZlcnRpY2FsXCI6IHVuZGVmaW5lZCxcblx0XCJoZWFkZXJIb3pBbGlnblwiOiB1bmRlZmluZWQsXG5cdFwiaGVhZGVyV29yZFdyYXBcIjogZmFsc2UsXG5cdFwiZWRpdGFibGVUaXRsZVwiOiB1bmRlZmluZWQsXG59O1xuXG5jbGFzcyBDb2x1bW4gZXh0ZW5kcyBDb3JlRmVhdHVyZXtcblxuXHRjb25zdHJ1Y3RvcihkZWYsIHBhcmVudCl7XG5cdFx0c3VwZXIocGFyZW50LnRhYmxlKTtcblxuXHRcdHRoaXMuZGVmaW5pdGlvbiA9IGRlZjsgLy9jb2x1bW4gZGVmaW5pdGlvblxuXHRcdHRoaXMucGFyZW50ID0gcGFyZW50OyAvL2hvbGQgcGFyZW50IG9iamVjdFxuXHRcdHRoaXMudHlwZSA9IFwiY29sdW1uXCI7IC8vdHlwZSBvZiBlbGVtZW50XG5cdFx0dGhpcy5jb2x1bW5zID0gW107IC8vY2hpbGQgY29sdW1uc1xuXHRcdHRoaXMuY2VsbHMgPSBbXTsgLy9jZWxscyBib3VuZCB0byB0aGlzIGNvbHVtblxuXHRcdHRoaXMuZWxlbWVudCA9IHRoaXMuY3JlYXRlRWxlbWVudCgpOyAvL2NvbHVtbiBoZWFkZXIgZWxlbWVudFxuXHRcdHRoaXMuY29udGVudEVsZW1lbnQgPSBmYWxzZTtcblx0XHR0aGlzLnRpdGxlSG9sZGVyRWxlbWVudCA9IGZhbHNlO1xuXHRcdHRoaXMudGl0bGVFbGVtZW50ID0gZmFsc2U7XG5cdFx0dGhpcy5ncm91cEVsZW1lbnQgPSB0aGlzLmNyZWF0ZUdyb3VwRWxlbWVudCgpOyAvL2NvbHVtbiBncm91cCBob2xkZXIgZWxlbWVudFxuXHRcdHRoaXMuaXNHcm91cCA9IGZhbHNlO1xuXHRcdHRoaXMuaG96QWxpZ24gPSBcIlwiOyAvL2hvcml6b250YWwgdGV4dCBhbGlnbm1lbnRcblx0XHR0aGlzLnZlcnRBbGlnbiA9IFwiXCI7IC8vdmVydCB0ZXh0IGFsaWdubWVudFxuXG5cdFx0Ly9tdWx0aSBkaW1lbnNpb25hbCBmaWxlZCBoYW5kbGluZ1xuXHRcdHRoaXMuZmllbGQgPVwiXCI7XG5cdFx0dGhpcy5maWVsZFN0cnVjdHVyZSA9IFwiXCI7XG5cdFx0dGhpcy5nZXRGaWVsZFZhbHVlID0gXCJcIjtcblx0XHR0aGlzLnNldEZpZWxkVmFsdWUgPSBcIlwiO1xuXG5cdFx0dGhpcy50aXRsZURvd25sb2FkID0gbnVsbDtcblx0XHR0aGlzLnRpdGxlRm9ybWF0dGVyUmVuZGVyZWQgPSBmYWxzZTtcblxuXHRcdHRoaXMubWFwRGVmaW5pdGlvbnMoKTtcblxuXHRcdHRoaXMuc2V0RmllbGQodGhpcy5kZWZpbml0aW9uLmZpZWxkKTtcblxuXHRcdHRoaXMubW9kdWxlcyA9IHt9OyAvL2hvbGQgbW9kdWxlIHZhcmlhYmxlcztcblxuXHRcdHRoaXMud2lkdGggPSBudWxsOyAvL2NvbHVtbiB3aWR0aFxuXHRcdHRoaXMud2lkdGhTdHlsZWQgPSBcIlwiOyAvL2NvbHVtbiB3aWR0aCBwcmUtc3R5bGVkIHRvIGltcHJvdmUgcmVuZGVyIGVmZmljaWVuY3lcblx0XHR0aGlzLm1heFdpZHRoID0gbnVsbDsgLy9jb2x1bW4gbWF4aW11bSB3aWR0aFxuXHRcdHRoaXMubWF4V2lkdGhTdHlsZWQgPSBcIlwiOyAvL2NvbHVtbiBtYXhpbXVtIHByZS1zdHlsZWQgdG8gaW1wcm92ZSByZW5kZXIgZWZmaWNpZW5jeVxuXHRcdHRoaXMubWF4SW5pdGlhbFdpZHRoID0gbnVsbDtcblx0XHR0aGlzLm1pbldpZHRoID0gbnVsbDsgLy9jb2x1bW4gbWluaW11bSB3aWR0aFxuXHRcdHRoaXMubWluV2lkdGhTdHlsZWQgPSBcIlwiOyAvL2NvbHVtbiBtaW5pbXVtIHByZS1zdHlsZWQgdG8gaW1wcm92ZSByZW5kZXIgZWZmaWNpZW5jeVxuXHRcdHRoaXMud2lkdGhGaXhlZCA9IGZhbHNlOyAvL3VzZXIgaGFzIHNwZWNpZmllZCBhIHdpZHRoIGZvciB0aGlzIGNvbHVtblxuXG5cdFx0dGhpcy52aXNpYmxlID0gdHJ1ZTsgLy9kZWZhdWx0IHZpc2libGUgc3RhdGVcblxuXHRcdHRoaXMuY29tcG9uZW50ID0gbnVsbDtcblxuXHRcdC8vaW5pdGlhbGl6ZSBjb2x1bW5cblx0XHRpZih0aGlzLmRlZmluaXRpb24uY29sdW1ucyl7XG5cblx0XHRcdHRoaXMuaXNHcm91cCA9IHRydWU7XG5cblx0XHRcdHRoaXMuZGVmaW5pdGlvbi5jb2x1bW5zLmZvckVhY2goKGRlZiwgaSkgPT4ge1xuXHRcdFx0XHR2YXIgbmV3Q29sID0gbmV3IENvbHVtbihkZWYsIHRoaXMpO1xuXHRcdFx0XHR0aGlzLmF0dGFjaENvbHVtbihuZXdDb2wpO1xuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMuY2hlY2tDb2x1bW5WaXNpYmlsaXR5KCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0cGFyZW50LnJlZ2lzdGVyQ29sdW1uRmllbGQodGhpcyk7XG5cdFx0fVxuXG5cdFx0dGhpcy5faW5pdGlhbGl6ZSgpO1xuXHR9XG5cblx0Y3JlYXRlRWxlbWVudCAoKXtcblx0XHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXG5cdFx0ZWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1jb2xcIik7XG5cdFx0ZWwuc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcImNvbHVtbmhlYWRlclwiKTtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoXCJhcmlhLXNvcnRcIiwgXCJub25lXCIpO1xuXG5cdFx0c3dpdGNoKHRoaXMudGFibGUub3B0aW9ucy5jb2x1bW5IZWFkZXJWZXJ0QWxpZ24pe1xuXHRcdFx0Y2FzZSBcIm1pZGRsZVwiOlxuXHRcdFx0XHRlbC5zdHlsZS5qdXN0aWZ5Q29udGVudCA9IFwiY2VudGVyXCI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcImJvdHRvbVwiOlxuXHRcdFx0XHRlbC5zdHlsZS5qdXN0aWZ5Q29udGVudCA9IFwiZmxleC1lbmRcIjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsO1xuXHR9XG5cblx0Y3JlYXRlR3JvdXBFbGVtZW50ICgpe1xuXHRcdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cblx0XHRlbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWNvbC1ncm91cC1jb2xzXCIpO1xuXG5cdFx0cmV0dXJuIGVsO1xuXHR9XG5cblx0bWFwRGVmaW5pdGlvbnMoKXtcblx0XHR2YXIgZGVmYXVsdHMgPSB0aGlzLnRhYmxlLm9wdGlvbnMuY29sdW1uRGVmYXVsdHM7XG5cblx0XHQvL21hcCBjb2x1bW5EZWZhdWx0cyBvbnRvIGNvbHVtbiBkZWZpbml0aW9uc1xuXHRcdGlmKGRlZmF1bHRzKXtcblx0XHRcdGZvcihsZXQga2V5IGluIGRlZmF1bHRzKXtcblx0XHRcdFx0aWYodHlwZW9mIHRoaXMuZGVmaW5pdGlvbltrZXldID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdFx0XHR0aGlzLmRlZmluaXRpb25ba2V5XSA9IGRlZmF1bHRzW2tleV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLmRlZmluaXRpb24gPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIub3B0aW9uc0xpc3QuZ2VuZXJhdGUoQ29sdW1uLmRlZmF1bHRPcHRpb25MaXN0LCB0aGlzLmRlZmluaXRpb24pO1xuXHR9XG5cblx0Y2hlY2tEZWZpbml0aW9uKCl7XG5cdFx0T2JqZWN0LmtleXModGhpcy5kZWZpbml0aW9uKS5mb3JFYWNoKChrZXkpID0+IHtcblx0XHRcdGlmKENvbHVtbi5kZWZhdWx0T3B0aW9uTGlzdC5pbmRleE9mKGtleSkgPT09IC0xKXtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiSW52YWxpZCBjb2x1bW4gZGVmaW5pdGlvbiBvcHRpb24gaW4gJ1wiICsgKHRoaXMuZmllbGQgfHwgdGhpcy5kZWZpbml0aW9uLnRpdGxlKSArIFwiJyBjb2x1bW46XCIsIGtleSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRzZXRGaWVsZChmaWVsZCl7XG5cdFx0dGhpcy5maWVsZCA9IGZpZWxkO1xuXHRcdHRoaXMuZmllbGRTdHJ1Y3R1cmUgPSBmaWVsZCA/ICh0aGlzLnRhYmxlLm9wdGlvbnMubmVzdGVkRmllbGRTZXBhcmF0b3IgPyBmaWVsZC5zcGxpdCh0aGlzLnRhYmxlLm9wdGlvbnMubmVzdGVkRmllbGRTZXBhcmF0b3IpIDogW2ZpZWxkXSkgOiBbXTtcblx0XHR0aGlzLmdldEZpZWxkVmFsdWUgPSB0aGlzLmZpZWxkU3RydWN0dXJlLmxlbmd0aCA+IDEgPyB0aGlzLl9nZXROZXN0ZWREYXRhIDogdGhpcy5fZ2V0RmxhdERhdGE7XG5cdFx0dGhpcy5zZXRGaWVsZFZhbHVlID0gdGhpcy5maWVsZFN0cnVjdHVyZS5sZW5ndGggPiAxID8gdGhpcy5fc2V0TmVzdGVkRGF0YSA6IHRoaXMuX3NldEZsYXREYXRhO1xuXHR9XG5cblx0Ly9yZWdpc3RlciBjb2x1bW4gcG9zaXRpb24gd2l0aCBjb2x1bW4gbWFuYWdlclxuXHRyZWdpc3RlckNvbHVtblBvc2l0aW9uKGNvbHVtbil7XG5cdFx0dGhpcy5wYXJlbnQucmVnaXN0ZXJDb2x1bW5Qb3NpdGlvbihjb2x1bW4pO1xuXHR9XG5cblx0Ly9yZWdpc3RlciBjb2x1bW4gcG9zaXRpb24gd2l0aCBjb2x1bW4gbWFuYWdlclxuXHRyZWdpc3RlckNvbHVtbkZpZWxkKGNvbHVtbil7XG5cdFx0dGhpcy5wYXJlbnQucmVnaXN0ZXJDb2x1bW5GaWVsZChjb2x1bW4pO1xuXHR9XG5cblx0Ly90cmlnZ2VyIHBvc2l0aW9uIHJlZ2lzdHJhdGlvblxuXHRyZVJlZ2lzdGVyUG9zaXRpb24oKXtcblx0XHRpZih0aGlzLmlzR3JvdXApe1xuXHRcdFx0dGhpcy5jb2x1bW5zLmZvckVhY2goZnVuY3Rpb24oY29sdW1uKXtcblx0XHRcdFx0Y29sdW1uLnJlUmVnaXN0ZXJQb3NpdGlvbigpO1xuXHRcdFx0fSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5yZWdpc3RlckNvbHVtblBvc2l0aW9uKHRoaXMpO1xuXHRcdH1cblx0fVxuXG5cdC8vYnVpbGQgaGVhZGVyIGVsZW1lbnRcblx0X2luaXRpYWxpemUoKXtcblx0XHR2YXIgZGVmID0gdGhpcy5kZWZpbml0aW9uO1xuXG5cdFx0d2hpbGUodGhpcy5lbGVtZW50LmZpcnN0Q2hpbGQpIHRoaXMuZWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQuZmlyc3RDaGlsZCk7XG5cblx0XHRpZihkZWYuaGVhZGVyVmVydGljYWwpe1xuXHRcdFx0dGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItY29sLXZlcnRpY2FsXCIpO1xuXG5cdFx0XHRpZihkZWYuaGVhZGVyVmVydGljYWwgPT09IFwiZmxpcFwiKXtcblx0XHRcdFx0dGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItY29sLXZlcnRpY2FsLWZsaXBcIik7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy5jb250ZW50RWxlbWVudCA9IHRoaXMuX2J1aWxkQ29sdW1uSGVhZGVyQ29udGVudCgpO1xuXG5cdFx0dGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuY29udGVudEVsZW1lbnQpO1xuXG5cdFx0aWYodGhpcy5pc0dyb3VwKXtcblx0XHRcdHRoaXMuX2J1aWxkR3JvdXBIZWFkZXIoKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLl9idWlsZENvbHVtbkhlYWRlcigpO1xuXHRcdH1cblxuXHRcdHRoaXMuZGlzcGF0Y2goXCJjb2x1bW4taW5pdFwiLCB0aGlzKTtcblx0fVxuXG5cdC8vYnVpbGQgaGVhZGVyIGVsZW1lbnQgZm9yIGhlYWRlclxuXHRfYnVpbGRDb2x1bW5IZWFkZXIoKXtcblx0XHR2YXIgZGVmID0gdGhpcy5kZWZpbml0aW9uO1xuXG5cdFx0dGhpcy5kaXNwYXRjaChcImNvbHVtbi1sYXlvdXRcIiwgdGhpcyk7XG5cblx0XHQvL3NldCBjb2x1bW4gdmlzaWJpbGl0eVxuXHRcdGlmKHR5cGVvZiBkZWYudmlzaWJsZSAhPSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdGlmKGRlZi52aXNpYmxlKXtcblx0XHRcdFx0dGhpcy5zaG93KHRydWUpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmhpZGUodHJ1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly9hc3NpZ24gYWRkaXRpb25hbCBjc3MgY2xhc3NlcyB0byBjb2x1bW4gaGVhZGVyXG5cdFx0aWYoZGVmLmNzc0NsYXNzKXtcblx0XHRcdHZhciBjbGFzc05hbWVzID0gZGVmLmNzc0NsYXNzLnNwbGl0KFwiIFwiKTtcblx0XHRcdGNsYXNzTmFtZXMuZm9yRWFjaCgoY2xhc3NOYW1lKSA9PiB7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZihkZWYuZmllbGQpe1xuXHRcdFx0dGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZShcInRhYnVsYXRvci1maWVsZFwiLCBkZWYuZmllbGQpO1xuXHRcdH1cblxuXHRcdC8vc2V0IG1pbiB3aWR0aCBpZiBwcmVzZW50XG5cdFx0dGhpcy5zZXRNaW5XaWR0aChwYXJzZUludChkZWYubWluV2lkdGgpKTtcblxuXHRcdGlmIChkZWYubWF4SW5pdGlhbFdpZHRoKSB7XG5cdFx0XHR0aGlzLm1heEluaXRpYWxXaWR0aCA9IHBhcnNlSW50KGRlZi5tYXhJbml0aWFsV2lkdGgpO1xuXHRcdH1cblx0XHRcblx0XHRpZihkZWYubWF4V2lkdGgpe1xuXHRcdFx0dGhpcy5zZXRNYXhXaWR0aChwYXJzZUludChkZWYubWF4V2lkdGgpKTtcblx0XHR9XG5cblx0XHR0aGlzLnJlaW5pdGlhbGl6ZVdpZHRoKCk7XG5cblx0XHQvL3NldCBob3Jpem9udGFsIHRleHQgYWxpZ25tZW50XG5cdFx0dGhpcy5ob3pBbGlnbiA9IHRoaXMuZGVmaW5pdGlvbi5ob3pBbGlnbjtcblx0XHR0aGlzLnZlcnRBbGlnbiA9IHRoaXMuZGVmaW5pdGlvbi52ZXJ0QWxpZ247XG5cblx0XHR0aGlzLnRpdGxlRWxlbWVudC5zdHlsZS50ZXh0QWxpZ24gPSB0aGlzLmRlZmluaXRpb24uaGVhZGVySG96QWxpZ247XG5cdH1cblxuXHRfYnVpbGRDb2x1bW5IZWFkZXJDb250ZW50KCl7XG5cdFx0dmFyIGNvbnRlbnRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRjb250ZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWNvbC1jb250ZW50XCIpO1xuXG5cdFx0dGhpcy50aXRsZUhvbGRlckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdHRoaXMudGl0bGVIb2xkZXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItY29sLXRpdGxlLWhvbGRlclwiKTtcblxuXHRcdGNvbnRlbnRFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMudGl0bGVIb2xkZXJFbGVtZW50KTtcblxuXHRcdHRoaXMudGl0bGVFbGVtZW50ID0gdGhpcy5fYnVpbGRDb2x1bW5IZWFkZXJUaXRsZSgpO1xuXG5cdFx0dGhpcy50aXRsZUhvbGRlckVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy50aXRsZUVsZW1lbnQpO1xuXG5cdFx0cmV0dXJuIGNvbnRlbnRFbGVtZW50O1xuXHR9XG5cblx0Ly9idWlsZCB0aXRsZSBlbGVtZW50IG9mIGNvbHVtblxuXHRfYnVpbGRDb2x1bW5IZWFkZXJUaXRsZSgpe1xuXHRcdHZhciBkZWYgPSB0aGlzLmRlZmluaXRpb247XG5cblx0XHR2YXIgdGl0bGVIb2xkZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHR0aXRsZUhvbGRlckVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1jb2wtdGl0bGVcIik7XG5cdFx0XG5cdFx0aWYoZGVmLmhlYWRlcldvcmRXcmFwKXtcblx0XHRcdHRpdGxlSG9sZGVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWNvbC10aXRsZS13cmFwXCIpO1xuXHRcdH1cblxuXHRcdGlmKGRlZi5lZGl0YWJsZVRpdGxlKXtcblx0XHRcdHZhciB0aXRsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFx0XHR0aXRsZUVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci10aXRsZS1lZGl0b3JcIik7XG5cblx0XHRcdHRpdGxlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcblx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0dGl0bGVFbGVtZW50LmZvY3VzKCk7XG5cdFx0XHR9KTtcblxuXHRcdFx0dGl0bGVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgKCkgPT4ge1xuXHRcdFx0XHRkZWYudGl0bGUgPSB0aXRsZUVsZW1lbnQudmFsdWU7XG5cdFx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcImNvbHVtblRpdGxlQ2hhbmdlZFwiLCB0aGlzLmdldENvbXBvbmVudCgpKTtcblx0XHRcdH0pO1xuXG5cdFx0XHR0aXRsZUhvbGRlckVsZW1lbnQuYXBwZW5kQ2hpbGQodGl0bGVFbGVtZW50KTtcblxuXHRcdFx0aWYoZGVmLmZpZWxkKXtcblx0XHRcdFx0dGhpcy5sYW5nQmluZChcImNvbHVtbnN8XCIgKyBkZWYuZmllbGQsICh0ZXh0KSA9PiB7XG5cdFx0XHRcdFx0dGl0bGVFbGVtZW50LnZhbHVlID0gdGV4dCB8fCAoZGVmLnRpdGxlIHx8IFwiJm5ic3A7XCIpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGl0bGVFbGVtZW50LnZhbHVlICA9IGRlZi50aXRsZSB8fCBcIiZuYnNwO1wiO1xuXHRcdFx0fVxuXG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYoZGVmLmZpZWxkKXtcblx0XHRcdFx0dGhpcy5sYW5nQmluZChcImNvbHVtbnN8XCIgKyBkZWYuZmllbGQsICh0ZXh0KSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5fZm9ybWF0Q29sdW1uSGVhZGVyVGl0bGUodGl0bGVIb2xkZXJFbGVtZW50LCB0ZXh0IHx8IChkZWYudGl0bGUgfHwgXCImbmJzcDtcIikpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5fZm9ybWF0Q29sdW1uSGVhZGVyVGl0bGUodGl0bGVIb2xkZXJFbGVtZW50LCBkZWYudGl0bGUgfHwgXCImbmJzcDtcIik7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRpdGxlSG9sZGVyRWxlbWVudDtcblx0fVxuXG5cdF9mb3JtYXRDb2x1bW5IZWFkZXJUaXRsZShlbCwgdGl0bGUpe1xuXHRcdHZhciBjb250ZW50cyA9IHRoaXMuY2hhaW4oXCJjb2x1bW4tZm9ybWF0XCIsIFt0aGlzLCB0aXRsZSwgZWxdLCBudWxsLCAoKSA9PiB7XG5cdFx0XHRyZXR1cm4gdGl0bGU7XG5cdFx0fSk7XG5cblx0XHRzd2l0Y2godHlwZW9mIGNvbnRlbnRzKXtcblx0XHRcdGNhc2UgXCJvYmplY3RcIjpcblx0XHRcdFx0aWYoY29udGVudHMgaW5zdGFuY2VvZiBOb2RlKXtcblx0XHRcdFx0XHRlbC5hcHBlbmRDaGlsZChjb250ZW50cyk7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRlbC5pbm5lckhUTUwgPSBcIlwiO1xuXHRcdFx0XHRcdGNvbnNvbGUud2FybihcIkZvcm1hdCBFcnJvciAtIFRpdGxlIGZvcm1hdHRlciBoYXMgcmV0dXJuZWQgYSB0eXBlIG9mIG9iamVjdCwgdGhlIG9ubHkgdmFsaWQgZm9ybWF0dGVyIG9iamVjdCByZXR1cm4gaXMgYW4gaW5zdGFuY2Ugb2YgTm9kZSwgdGhlIGZvcm1hdHRlciByZXR1cm5lZDpcIiwgY29udGVudHMpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcInVuZGVmaW5lZFwiOlxuXHRcdFx0XHRlbC5pbm5lckhUTUwgPSBcIlwiO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGVsLmlubmVySFRNTCA9IGNvbnRlbnRzO1xuXHRcdH1cblx0fVxuXG5cdC8vYnVpbGQgaGVhZGVyIGVsZW1lbnQgZm9yIGNvbHVtbiBncm91cFxuXHRfYnVpbGRHcm91cEhlYWRlcigpe1xuXHRcdHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWNvbC1ncm91cFwiKTtcblx0XHR0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcImNvbHVtbmdyb3VwXCIpO1xuXHRcdHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLXRpdGxlXCIsIHRoaXMuZGVmaW5pdGlvbi50aXRsZSk7XG5cblx0XHQvL2FzaWduIGFkZGl0aW9uYWwgY3NzIGNsYXNzZXMgdG8gY29sdW1uIGhlYWRlclxuXHRcdGlmKHRoaXMuZGVmaW5pdGlvbi5jc3NDbGFzcyl7XG5cdFx0XHR2YXIgY2xhc3NOYW1lcyA9IHRoaXMuZGVmaW5pdGlvbi5jc3NDbGFzcy5zcGxpdChcIiBcIik7XG5cdFx0XHRjbGFzc05hbWVzLmZvckVhY2goKGNsYXNzTmFtZSkgPT4ge1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0dGhpcy50aXRsZUVsZW1lbnQuc3R5bGUudGV4dEFsaWduID0gdGhpcy5kZWZpbml0aW9uLmhlYWRlckhvekFsaWduO1xuXG5cdFx0dGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuZ3JvdXBFbGVtZW50KTtcblx0fVxuXG5cdC8vZmxhdCBmaWVsZCBsb29rdXBcblx0X2dldEZsYXREYXRhKGRhdGEpe1xuXHRcdHJldHVybiBkYXRhW3RoaXMuZmllbGRdO1xuXHR9XG5cblx0Ly9uZXN0ZWQgZmllbGQgbG9va3VwXG5cdF9nZXROZXN0ZWREYXRhKGRhdGEpe1xuXHRcdHZhciBkYXRhT2JqID0gZGF0YSxcblx0XHRzdHJ1Y3R1cmUgPSB0aGlzLmZpZWxkU3RydWN0dXJlLFxuXHRcdGxlbmd0aCA9IHN0cnVjdHVyZS5sZW5ndGgsXG5cdFx0b3V0cHV0O1xuXG5cdFx0Zm9yKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKXtcblxuXHRcdFx0ZGF0YU9iaiA9IGRhdGFPYmpbc3RydWN0dXJlW2ldXTtcblxuXHRcdFx0b3V0cHV0ID0gZGF0YU9iajtcblxuXHRcdFx0aWYoIWRhdGFPYmope1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cblx0Ly9mbGF0IGZpZWxkIHNldFxuXHRfc2V0RmxhdERhdGEoZGF0YSwgdmFsdWUpe1xuXHRcdGlmKHRoaXMuZmllbGQpe1xuXHRcdFx0ZGF0YVt0aGlzLmZpZWxkXSA9IHZhbHVlO1xuXHRcdH1cblx0fVxuXG5cdC8vbmVzdGVkIGZpZWxkIHNldFxuXHRfc2V0TmVzdGVkRGF0YShkYXRhLCB2YWx1ZSl7XG5cdFx0dmFyIGRhdGFPYmogPSBkYXRhLFxuXHRcdHN0cnVjdHVyZSA9IHRoaXMuZmllbGRTdHJ1Y3R1cmUsXG5cdFx0bGVuZ3RoID0gc3RydWN0dXJlLmxlbmd0aDtcblxuXHRcdGZvcihsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKyl7XG5cblx0XHRcdGlmKGkgPT0gbGVuZ3RoIC0xKXtcblx0XHRcdFx0ZGF0YU9ialtzdHJ1Y3R1cmVbaV1dID0gdmFsdWU7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlmKCFkYXRhT2JqW3N0cnVjdHVyZVtpXV0pe1xuXHRcdFx0XHRcdGlmKHR5cGVvZiB2YWx1ZSAhPT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRcdFx0XHRkYXRhT2JqW3N0cnVjdHVyZVtpXV0gPSB7fTtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkYXRhT2JqID0gZGF0YU9ialtzdHJ1Y3R1cmVbaV1dO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vYXR0YWNoIGNvbHVtbiB0byB0aGlzIGdyb3VwXG5cdGF0dGFjaENvbHVtbihjb2x1bW4pe1xuXHRcdGlmKHRoaXMuZ3JvdXBFbGVtZW50KXtcblx0XHRcdHRoaXMuY29sdW1ucy5wdXNoKGNvbHVtbik7XG5cdFx0XHR0aGlzLmdyb3VwRWxlbWVudC5hcHBlbmRDaGlsZChjb2x1bW4uZ2V0RWxlbWVudCgpKTtcblxuXHRcdFx0Y29sdW1uLmNvbHVtblJlbmRlcmVkKCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiQ29sdW1uIFdhcm5pbmcgLSBDb2x1bW4gYmVpbmcgYXR0YWNoZWQgdG8gYW5vdGhlciBjb2x1bW4gaW5zdGVhZCBvZiBjb2x1bW4gZ3JvdXBcIik7XG5cdFx0fVxuXHR9XG5cblx0Ly92ZXJ0aWNhbGx5IGFsaWduIGhlYWRlciBpbiBjb2x1bW5cblx0dmVydGljYWxBbGlnbihhbGlnbm1lbnQsIGhlaWdodCl7XG5cblx0XHQvL2NhbGN1bGF0ZSBoZWlnaHQgb2YgY29sdW1uIGhlYWRlciBhbmQgZ3JvdXAgaG9sZGVyIGVsZW1lbnRcblx0XHR2YXIgcGFyZW50SGVpZ2h0ID0gdGhpcy5wYXJlbnQuaXNHcm91cCA/IHRoaXMucGFyZW50LmdldEdyb3VwRWxlbWVudCgpLmNsaWVudEhlaWdodCA6IChoZWlnaHQgfHwgdGhpcy5wYXJlbnQuZ2V0SGVhZGVyc0VsZW1lbnQoKS5jbGllbnRIZWlnaHQpO1xuXHRcdC8vIHZhciBwYXJlbnRIZWlnaHQgPSB0aGlzLnBhcmVudC5pc0dyb3VwID8gdGhpcy5wYXJlbnQuZ2V0R3JvdXBFbGVtZW50KCkuY2xpZW50SGVpZ2h0IDogdGhpcy5wYXJlbnQuZ2V0SGVhZGVyc0VsZW1lbnQoKS5jbGllbnRIZWlnaHQ7XG5cblx0XHR0aGlzLmVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gcGFyZW50SGVpZ2h0ICsgXCJweFwiO1xuXG5cdFx0dGhpcy5kaXNwYXRjaChcImNvbHVtbi1oZWlnaHRcIiwgdGhpcywgdGhpcy5lbGVtZW50LnN0eWxlLmhlaWdodCk7XG5cblx0XHRpZih0aGlzLmlzR3JvdXApe1xuXHRcdFx0dGhpcy5ncm91cEVsZW1lbnQuc3R5bGUubWluSGVpZ2h0ID0gKHBhcmVudEhlaWdodCAtIHRoaXMuY29udGVudEVsZW1lbnQub2Zmc2V0SGVpZ2h0KSArIFwicHhcIjtcblx0XHR9XG5cblx0XHQvL3ZlcnRpY2FsbHkgYWxpZ24gY2VsbCBjb250ZW50c1xuXHRcdC8vIGlmKCF0aGlzLmlzR3JvdXAgJiYgYWxpZ25tZW50ICE9PSBcInRvcFwiKXtcblx0XHQvLyBcdGlmKGFsaWdubWVudCA9PT0gXCJib3R0b21cIil7XG5cdFx0Ly8gXHRcdHRoaXMuZWxlbWVudC5zdHlsZS5wYWRkaW5nVG9wID0gKHRoaXMuZWxlbWVudC5jbGllbnRIZWlnaHQgLSB0aGlzLmNvbnRlbnRFbGVtZW50Lm9mZnNldEhlaWdodCkgKyBcInB4XCI7XG5cdFx0Ly8gXHR9ZWxzZXtcblx0XHQvLyBcdFx0dGhpcy5lbGVtZW50LnN0eWxlLnBhZGRpbmdUb3AgPSAoKHRoaXMuZWxlbWVudC5jbGllbnRIZWlnaHQgLSB0aGlzLmNvbnRlbnRFbGVtZW50Lm9mZnNldEhlaWdodCkgLyAyKSArIFwicHhcIjtcblx0XHQvLyBcdH1cblx0XHQvLyB9XG5cblx0XHR0aGlzLmNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihjb2x1bW4pe1xuXHRcdFx0Y29sdW1uLnZlcnRpY2FsQWxpZ24oYWxpZ25tZW50KTtcblx0XHR9KTtcblx0fVxuXG5cdC8vY2xlYXIgdmVydGljYWwgYWxpZ25tZW50XG5cdGNsZWFyVmVydGljYWxBbGlnbigpe1xuXHRcdHRoaXMuZWxlbWVudC5zdHlsZS5wYWRkaW5nVG9wID0gXCJcIjtcblx0XHR0aGlzLmVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gXCJcIjtcblx0XHR0aGlzLmVsZW1lbnQuc3R5bGUubWluSGVpZ2h0ID0gXCJcIjtcblx0XHR0aGlzLmdyb3VwRWxlbWVudC5zdHlsZS5taW5IZWlnaHQgPSBcIlwiO1xuXG5cdFx0dGhpcy5jb2x1bW5zLmZvckVhY2goZnVuY3Rpb24oY29sdW1uKXtcblx0XHRcdGNvbHVtbi5jbGVhclZlcnRpY2FsQWxpZ24oKTtcblx0XHR9KTtcblxuXHRcdHRoaXMuZGlzcGF0Y2goXCJjb2x1bW4taGVpZ2h0XCIsIHRoaXMsIFwiXCIpO1xuXHR9XG5cblx0Ly8vLyBSZXRyaWV2ZSBDb2x1bW4gSW5mb3JtYXRpb24gLy8vL1xuXHQvL3JldHVybiBjb2x1bW4gaGVhZGVyIGVsZW1lbnRcblx0Z2V0RWxlbWVudCgpe1xuXHRcdHJldHVybiB0aGlzLmVsZW1lbnQ7XG5cdH1cblxuXHQvL3JldHVybiBjb2x1bW4gZ3JvdXAgZWxlbWVudFxuXHRnZXRHcm91cEVsZW1lbnQoKXtcblx0XHRyZXR1cm4gdGhpcy5ncm91cEVsZW1lbnQ7XG5cdH1cblxuXHQvL3JldHVybiBmaWVsZCBuYW1lXG5cdGdldEZpZWxkKCl7XG5cdFx0cmV0dXJuIHRoaXMuZmllbGQ7XG5cdH1cblxuXHRnZXRUaXRsZURvd25sb2FkKCkge1xuXHRcdHJldHVybiB0aGlzLnRpdGxlRG93bmxvYWQ7XG5cdH1cblxuXHQvL3JldHVybiB0aGUgZmlyc3QgY29sdW1uIGluIGEgZ3JvdXBcblx0Z2V0Rmlyc3RDb2x1bW4oKXtcblx0XHRpZighdGhpcy5pc0dyb3VwKXtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1lbHNlIHtcblx0XHRcdGlmKHRoaXMuY29sdW1ucy5sZW5ndGgpe1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb2x1bW5zWzBdLmdldEZpcnN0Q29sdW1uKCk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvL3JldHVybiB0aGUgbGFzdCBjb2x1bW4gaW4gYSBncm91cFxuXHRnZXRMYXN0Q29sdW1uKCl7XG5cdFx0aWYoIXRoaXMuaXNHcm91cCl7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9ZWxzZSB7XG5cdFx0XHRpZih0aGlzLmNvbHVtbnMubGVuZ3RoKXtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29sdW1uc1t0aGlzLmNvbHVtbnMubGVuZ3RoIC0xXS5nZXRMYXN0Q29sdW1uKCk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvL3JldHVybiBhbGwgY29sdW1ucyBpbiBhIGdyb3VwXG5cdGdldENvbHVtbnModHJhdmVyc2Upe1xuXHRcdHZhciBjb2x1bW5zID0gW107XG5cblx0XHRpZih0cmF2ZXJzZSl7XG5cdFx0XHR0aGlzLmNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG5cdFx0XHRcdGNvbHVtbnMucHVzaChjb2x1bW4pO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRjb2x1bW5zID0gY29sdW1ucy5jb25jYXQoY29sdW1uLmdldENvbHVtbnModHJ1ZSkpO1xuXHRcdFx0fSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29sdW1ucyA9IHRoaXMuY29sdW1ucztcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIGNvbHVtbnM7XG5cdH1cblxuXHQvL3JldHVybiBhbGwgY29sdW1ucyBpbiBhIGdyb3VwXG5cdGdldENlbGxzKCl7XG5cdFx0cmV0dXJuIHRoaXMuY2VsbHM7XG5cdH1cblxuXHQvL3JldHJpZXZlIHRoZSB0b3AgY29sdW1uIGluIGEgZ3JvdXAgb2YgY29sdW1uc1xuXHRnZXRUb3BDb2x1bW4oKXtcblx0XHRpZih0aGlzLnBhcmVudC5pc0dyb3VwKXtcblx0XHRcdHJldHVybiB0aGlzLnBhcmVudC5nZXRUb3BDb2x1bW4oKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdH1cblxuXHQvL3JldHVybiBjb2x1bW4gZGVmaW5pdGlvbiBvYmplY3Rcblx0Z2V0RGVmaW5pdGlvbih1cGRhdGVCcmFuY2hlcyl7XG5cdFx0dmFyIGNvbERlZnMgPSBbXTtcblxuXHRcdGlmKHRoaXMuaXNHcm91cCAmJiB1cGRhdGVCcmFuY2hlcyl7XG5cdFx0XHR0aGlzLmNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihjb2x1bW4pe1xuXHRcdFx0XHRjb2xEZWZzLnB1c2goY29sdW1uLmdldERlZmluaXRpb24odHJ1ZSkpO1xuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMuZGVmaW5pdGlvbi5jb2x1bW5zID0gY29sRGVmcztcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5kZWZpbml0aW9uO1xuXHR9XG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8gQWN0aW9ucyAvLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRjaGVja0NvbHVtblZpc2liaWxpdHkoKXtcblx0XHR2YXIgdmlzaWJsZSA9IGZhbHNlO1xuXG5cdFx0dGhpcy5jb2x1bW5zLmZvckVhY2goZnVuY3Rpb24oY29sdW1uKXtcblx0XHRcdGlmKGNvbHVtbi52aXNpYmxlKXtcblx0XHRcdFx0dmlzaWJsZSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRpZih2aXNpYmxlKXtcblx0XHRcdHRoaXMuc2hvdygpO1xuXHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwiY29sdW1uVmlzaWJpbGl0eUNoYW5nZWRcIiwgdGhpcy5nZXRDb21wb25lbnQoKSwgZmFsc2UpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuaGlkZSgpO1xuXHRcdH1cblx0fVxuXG5cdC8vc2hvdyBjb2x1bW5cblx0c2hvdyhzaWxlbnQsIHJlc3BvbnNpdmVUb2dnbGUpe1xuXHRcdGlmKCF0aGlzLnZpc2libGUpe1xuXHRcdFx0dGhpcy52aXNpYmxlID0gdHJ1ZTtcblxuXHRcdFx0dGhpcy5lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXG5cdFx0XHRpZih0aGlzLnBhcmVudC5pc0dyb3VwKXtcblx0XHRcdFx0dGhpcy5wYXJlbnQuY2hlY2tDb2x1bW5WaXNpYmlsaXR5KCk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuY2VsbHMuZm9yRWFjaChmdW5jdGlvbihjZWxsKXtcblx0XHRcdFx0Y2VsbC5zaG93KCk7XG5cdFx0XHR9KTtcblxuXHRcdFx0aWYoIXRoaXMuaXNHcm91cCAmJiB0aGlzLndpZHRoID09PSBudWxsKXtcblx0XHRcdFx0dGhpcy5yZWluaXRpYWxpemVXaWR0aCgpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIudmVydGljYWxBbGlnbkhlYWRlcnMoKTtcblxuXHRcdFx0dGhpcy5kaXNwYXRjaChcImNvbHVtbi1zaG93XCIsIHRoaXMsIHJlc3BvbnNpdmVUb2dnbGUpO1xuXG5cdFx0XHRpZighc2lsZW50KXtcblx0XHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwiY29sdW1uVmlzaWJpbGl0eUNoYW5nZWRcIiwgdGhpcy5nZXRDb21wb25lbnQoKSwgdHJ1ZSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmKHRoaXMucGFyZW50LmlzR3JvdXApe1xuXHRcdFx0XHR0aGlzLnBhcmVudC5tYXRjaENoaWxkV2lkdGhzKCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmKCF0aGlzLnNpbGVudCl7XG5cdFx0XHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5yZXJlbmRlckNvbHVtbnMoKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvL2hpZGUgY29sdW1uXG5cdGhpZGUoc2lsZW50LCByZXNwb25zaXZlVG9nZ2xlKXtcblx0XHRpZih0aGlzLnZpc2libGUpe1xuXHRcdFx0dGhpcy52aXNpYmxlID0gZmFsc2U7XG5cblx0XHRcdHRoaXMuZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG5cblx0XHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci52ZXJ0aWNhbEFsaWduSGVhZGVycygpO1xuXG5cdFx0XHRpZih0aGlzLnBhcmVudC5pc0dyb3VwKXtcblx0XHRcdFx0dGhpcy5wYXJlbnQuY2hlY2tDb2x1bW5WaXNpYmlsaXR5KCk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuY2VsbHMuZm9yRWFjaChmdW5jdGlvbihjZWxsKXtcblx0XHRcdFx0Y2VsbC5oaWRlKCk7XG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy5kaXNwYXRjaChcImNvbHVtbi1oaWRlXCIsIHRoaXMsIHJlc3BvbnNpdmVUb2dnbGUpO1xuXG5cdFx0XHRpZighc2lsZW50KXtcblx0XHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwiY29sdW1uVmlzaWJpbGl0eUNoYW5nZWRcIiwgdGhpcy5nZXRDb21wb25lbnQoKSwgZmFsc2UpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZih0aGlzLnBhcmVudC5pc0dyb3VwKXtcblx0XHRcdFx0dGhpcy5wYXJlbnQubWF0Y2hDaGlsZFdpZHRocygpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZighdGhpcy5zaWxlbnQpe1xuXHRcdFx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIucmVyZW5kZXJDb2x1bW5zKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0bWF0Y2hDaGlsZFdpZHRocygpe1xuXHRcdHZhciBjaGlsZFdpZHRoID0gMDtcblxuXHRcdGlmKHRoaXMuY29udGVudEVsZW1lbnQgJiYgdGhpcy5jb2x1bW5zLmxlbmd0aCl7XG5cdFx0XHR0aGlzLmNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihjb2x1bW4pe1xuXHRcdFx0XHRpZihjb2x1bW4udmlzaWJsZSl7XG5cdFx0XHRcdFx0Y2hpbGRXaWR0aCArPSBjb2x1bW4uZ2V0V2lkdGgoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMuY29udGVudEVsZW1lbnQuc3R5bGUubWF4V2lkdGggPSAoY2hpbGRXaWR0aCAtIDEpICsgXCJweFwiO1xuXG5cdFx0XHRpZih0aGlzLnBhcmVudC5pc0dyb3VwKXtcblx0XHRcdFx0dGhpcy5wYXJlbnQubWF0Y2hDaGlsZFdpZHRocygpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJlbW92ZUNoaWxkKGNoaWxkKXtcblx0XHR2YXIgaW5kZXggPSB0aGlzLmNvbHVtbnMuaW5kZXhPZihjaGlsZCk7XG5cblx0XHRpZihpbmRleCA+IC0xKXtcblx0XHRcdHRoaXMuY29sdW1ucy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdH1cblxuXHRcdGlmKCF0aGlzLmNvbHVtbnMubGVuZ3RoKXtcblx0XHRcdHRoaXMuZGVsZXRlKCk7XG5cdFx0fVxuXHR9XG5cblx0c2V0V2lkdGgod2lkdGgpe1xuXHRcdHRoaXMud2lkdGhGaXhlZCA9IHRydWU7XG5cdFx0dGhpcy5zZXRXaWR0aEFjdHVhbCh3aWR0aCk7XG5cdH1cblxuXHRzZXRXaWR0aEFjdHVhbCh3aWR0aCl7XG5cdFx0aWYoaXNOYU4od2lkdGgpKXtcblx0XHRcdHdpZHRoID0gTWF0aC5mbG9vcigodGhpcy50YWJsZS5lbGVtZW50LmNsaWVudFdpZHRoLzEwMCkgKiBwYXJzZUludCh3aWR0aCkpO1xuXHRcdH1cblxuXHRcdHdpZHRoID0gTWF0aC5tYXgodGhpcy5taW5XaWR0aCwgd2lkdGgpO1xuXG5cdFx0aWYodGhpcy5tYXhXaWR0aCl7XG5cdFx0XHR3aWR0aCA9IE1hdGgubWluKHRoaXMubWF4V2lkdGgsIHdpZHRoKTtcblx0XHR9XG5cblx0XHR0aGlzLndpZHRoID0gd2lkdGg7XG5cdFx0dGhpcy53aWR0aFN0eWxlZCA9IHdpZHRoID8gd2lkdGggKyBcInB4XCIgOiBcIlwiO1xuXG5cdFx0dGhpcy5lbGVtZW50LnN0eWxlLndpZHRoID0gdGhpcy53aWR0aFN0eWxlZDtcblxuXHRcdGlmKCF0aGlzLmlzR3JvdXApe1xuXHRcdFx0dGhpcy5jZWxscy5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwpe1xuXHRcdFx0XHRjZWxsLnNldFdpZHRoKCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZih0aGlzLnBhcmVudC5pc0dyb3VwKXtcblx0XHRcdHRoaXMucGFyZW50Lm1hdGNoQ2hpbGRXaWR0aHMoKTtcblx0XHR9XG5cblx0XHR0aGlzLmRpc3BhdGNoKFwiY29sdW1uLXdpZHRoXCIsIHRoaXMpO1xuXHR9XG5cblx0Y2hlY2tDZWxsSGVpZ2h0cygpe1xuXHRcdHZhciByb3dzID0gW107XG5cblx0XHR0aGlzLmNlbGxzLmZvckVhY2goZnVuY3Rpb24oY2VsbCl7XG5cdFx0XHRpZihjZWxsLnJvdy5oZWlnaHRJbml0aWFsaXplZCl7XG5cdFx0XHRcdGlmKGNlbGwucm93LmdldEVsZW1lbnQoKS5vZmZzZXRQYXJlbnQgIT09IG51bGwpe1xuXHRcdFx0XHRcdHJvd3MucHVzaChjZWxsLnJvdyk7XG5cdFx0XHRcdFx0Y2VsbC5yb3cuY2xlYXJDZWxsSGVpZ2h0KCk7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRjZWxsLnJvdy5oZWlnaHRJbml0aWFsaXplZCA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyb3dzLmZvckVhY2goZnVuY3Rpb24ocm93KXtcblx0XHRcdHJvdy5jYWxjSGVpZ2h0KCk7XG5cdFx0fSk7XG5cblx0XHRyb3dzLmZvckVhY2goZnVuY3Rpb24ocm93KXtcblx0XHRcdHJvdy5zZXRDZWxsSGVpZ2h0KCk7XG5cdFx0fSk7XG5cdH1cblxuXHRnZXRXaWR0aCgpe1xuXHRcdHZhciB3aWR0aCA9IDA7XG5cblx0XHRpZih0aGlzLmlzR3JvdXApe1xuXHRcdFx0dGhpcy5jb2x1bW5zLmZvckVhY2goZnVuY3Rpb24oY29sdW1uKXtcblx0XHRcdFx0aWYoY29sdW1uLnZpc2libGUpe1xuXHRcdFx0XHRcdHdpZHRoICs9IGNvbHVtbi5nZXRXaWR0aCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR3aWR0aCA9IHRoaXMud2lkdGg7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHdpZHRoO1xuXHR9XG5cblx0Z2V0TGVmdE9mZnNldCgpe1xuXHRcdHZhciBvZmZzZXQgPSB0aGlzLmVsZW1lbnQub2Zmc2V0TGVmdDtcblxuXHRcdGlmKHRoaXMucGFyZW50LmlzR3JvdXApe1xuXHRcdFx0b2Zmc2V0ICs9IHRoaXMucGFyZW50LmdldExlZnRPZmZzZXQoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gb2Zmc2V0O1xuXHR9XG5cblx0Z2V0SGVpZ2h0KCl7XG5cdFx0cmV0dXJuIE1hdGguY2VpbCh0aGlzLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0KTtcblx0fVxuXG5cdHNldE1pbldpZHRoKG1pbldpZHRoKXtcblx0XHRpZih0aGlzLm1heFdpZHRoICYmIG1pbldpZHRoID4gdGhpcy5tYXhXaWR0aCl7XG5cdFx0XHRtaW5XaWR0aCA9IHRoaXMubWF4V2lkdGg7XG5cblx0XHRcdGNvbnNvbGUud2FybihcInRoZSBtaW5XaWR0aCAoXCIrIG1pbldpZHRoICsgXCJweCkgZm9yIGNvbHVtbiAnXCIgKyB0aGlzLmZpZWxkICsgXCInIGNhbm5vdCBiZSBiaWdnZXIgdGhhdCBpdHMgbWF4V2lkdGggKFwiKyB0aGlzLm1heFdpZHRoU3R5bGVkICsgXCIpXCIpO1xuXHRcdH1cblxuXHRcdHRoaXMubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHR0aGlzLm1pbldpZHRoU3R5bGVkID0gbWluV2lkdGggPyBtaW5XaWR0aCArIFwicHhcIiA6IFwiXCI7XG5cblx0XHR0aGlzLmVsZW1lbnQuc3R5bGUubWluV2lkdGggPSB0aGlzLm1pbldpZHRoU3R5bGVkO1xuXG5cdFx0dGhpcy5jZWxscy5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwpe1xuXHRcdFx0Y2VsbC5zZXRNaW5XaWR0aCgpO1xuXHRcdH0pO1xuXHR9XG5cblx0c2V0TWF4V2lkdGgobWF4V2lkdGgpe1xuXHRcdGlmKHRoaXMubWluV2lkdGggJiYgbWF4V2lkdGggPCB0aGlzLm1pbldpZHRoKXtcblx0XHRcdG1heFdpZHRoID0gdGhpcy5taW5XaWR0aDtcblxuXHRcdFx0Y29uc29sZS53YXJuKFwidGhlIG1heFdpZHRoIChcIisgbWF4V2lkdGggKyBcInB4KSBmb3IgY29sdW1uICdcIiArIHRoaXMuZmllbGQgKyBcIicgY2Fubm90IGJlIHNtYWxsZXIgdGhhdCBpdHMgbWluV2lkdGggKFwiKyB0aGlzLm1pbldpZHRoU3R5bGVkICsgXCIpXCIpO1xuXHRcdH1cblxuXHRcdHRoaXMubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR0aGlzLm1heFdpZHRoU3R5bGVkID0gbWF4V2lkdGggPyBtYXhXaWR0aCArIFwicHhcIiA6IFwiXCI7XG5cblx0XHR0aGlzLmVsZW1lbnQuc3R5bGUubWF4V2lkdGggPSB0aGlzLm1heFdpZHRoU3R5bGVkO1xuXG5cdFx0dGhpcy5jZWxscy5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwpe1xuXHRcdFx0Y2VsbC5zZXRNYXhXaWR0aCgpO1xuXHRcdH0pO1xuXHR9XG5cblx0ZGVsZXRlKCl7XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdGlmKHRoaXMuaXNHcm91cCl7XG5cdFx0XHRcdHRoaXMuY29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uKGNvbHVtbil7XG5cdFx0XHRcdFx0Y29sdW1uLmRlbGV0ZSgpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5kaXNwYXRjaChcImNvbHVtbi1kZWxldGVcIiwgdGhpcyk7XG5cblx0XHRcdHZhciBjZWxsQ291bnQgPSB0aGlzLmNlbGxzLmxlbmd0aDtcblxuXHRcdFx0Zm9yKGxldCBpID0gMDsgaSA8IGNlbGxDb3VudDsgaSsrKXtcblx0XHRcdFx0dGhpcy5jZWxsc1swXS5kZWxldGUoKTtcblx0XHRcdH1cblxuXHRcdFx0aWYodGhpcy5lbGVtZW50LnBhcmVudE5vZGUpe1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmVsZW1lbnQgPSBmYWxzZTtcblx0XHRcdHRoaXMuY29udGVudEVsZW1lbnQgPSBmYWxzZTtcblx0XHRcdHRoaXMudGl0bGVFbGVtZW50ID0gZmFsc2U7XG5cdFx0XHR0aGlzLmdyb3VwRWxlbWVudCA9IGZhbHNlO1xuXG5cdFx0XHRpZih0aGlzLnBhcmVudC5pc0dyb3VwKXtcblx0XHRcdFx0dGhpcy5wYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5kZXJlZ2lzdGVyQ29sdW1uKHRoaXMpO1xuXG5cdFx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIucmVyZW5kZXJDb2x1bW5zKHRydWUpO1xuXG5cdFx0XHRyZXNvbHZlKCk7XG5cdFx0fSk7XG5cdH1cblxuXHRjb2x1bW5SZW5kZXJlZCgpe1xuXHRcdGlmKHRoaXMudGl0bGVGb3JtYXR0ZXJSZW5kZXJlZCl7XG5cdFx0XHR0aGlzLnRpdGxlRm9ybWF0dGVyUmVuZGVyZWQoKTtcblx0XHR9XG5cblx0XHR0aGlzLmRpc3BhdGNoKFwiY29sdW1uLXJlbmRlcmVkXCIsIHRoaXMpO1xuXHR9XG5cblx0Ly8vLy8vLy8vLy8vLy8vLyBDZWxsIE1hbmFnZW1lbnQgLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly9nZW5lcmF0ZSBjZWxsIGZvciB0aGlzIGNvbHVtblxuXHRnZW5lcmF0ZUNlbGwocm93KXtcblx0XHR2YXIgY2VsbCA9IG5ldyBDZWxsKHRoaXMsIHJvdyk7XG5cblx0XHR0aGlzLmNlbGxzLnB1c2goY2VsbCk7XG5cblx0XHRyZXR1cm4gY2VsbDtcblx0fVxuXG5cdG5leHRDb2x1bW4oKXtcblx0XHR2YXIgaW5kZXggPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZmluZENvbHVtbkluZGV4KHRoaXMpO1xuXHRcdHJldHVybiBpbmRleCA+IC0xID8gdGhpcy5fbmV4dFZpc2libGVDb2x1bW4oaW5kZXggKyAxKSA6IGZhbHNlO1xuXHR9XG5cblx0X25leHRWaXNpYmxlQ29sdW1uKGluZGV4KXtcblx0XHR2YXIgY29sdW1uID0gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmdldENvbHVtbkJ5SW5kZXgoaW5kZXgpO1xuXHRcdHJldHVybiAhY29sdW1uIHx8IGNvbHVtbi52aXNpYmxlID8gY29sdW1uIDogdGhpcy5fbmV4dFZpc2libGVDb2x1bW4oaW5kZXggKyAxKTtcblx0fVxuXG5cdHByZXZDb2x1bW4oKXtcblx0XHR2YXIgaW5kZXggPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZmluZENvbHVtbkluZGV4KHRoaXMpO1xuXHRcdHJldHVybiBpbmRleCA+IC0xID8gdGhpcy5fcHJldlZpc2libGVDb2x1bW4oaW5kZXggLSAxKSA6IGZhbHNlO1xuXHR9XG5cblx0X3ByZXZWaXNpYmxlQ29sdW1uKGluZGV4KXtcblx0XHR2YXIgY29sdW1uID0gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmdldENvbHVtbkJ5SW5kZXgoaW5kZXgpO1xuXHRcdHJldHVybiAhY29sdW1uIHx8IGNvbHVtbi52aXNpYmxlID8gY29sdW1uIDogdGhpcy5fcHJldlZpc2libGVDb2x1bW4oaW5kZXggLSAxKTtcblx0fVxuXG5cdHJlaW5pdGlhbGl6ZVdpZHRoKGZvcmNlKXtcblx0XHR0aGlzLndpZHRoRml4ZWQgPSBmYWxzZTtcblxuXHRcdC8vc2V0IHdpZHRoIGlmIHByZXNlbnRcblx0XHRpZih0eXBlb2YgdGhpcy5kZWZpbml0aW9uLndpZHRoICE9PSBcInVuZGVmaW5lZFwiICYmICFmb3JjZSl7XG5cdFx0XHQvLyBtYXhJbml0aWFsV2lkdGggaWdub3JlZCBoZXJlIGFzIHdpZHRoIHNwZWNpZmllZFxuXHRcdFx0dGhpcy5zZXRXaWR0aCh0aGlzLmRlZmluaXRpb24ud2lkdGgpO1xuXHRcdH1cblxuXHRcdHRoaXMuZGlzcGF0Y2goXCJjb2x1bW4td2lkdGgtZml0LWJlZm9yZVwiLCB0aGlzKTtcblxuXHRcdHRoaXMuZml0VG9EYXRhKGZvcmNlKTtcblxuXHRcdHRoaXMuZGlzcGF0Y2goXCJjb2x1bW4td2lkdGgtZml0LWFmdGVyXCIsIHRoaXMpO1xuXHR9XG5cblx0Ly9zZXQgY29sdW1uIHdpZHRoIHRvIG1heGltdW0gY2VsbCB3aWR0aCBmb3Igbm9uIGdyb3VwIGNvbHVtbnNcblx0Zml0VG9EYXRhKGZvcmNlKXtcblx0XHRpZih0aGlzLmlzR3JvdXApe1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmKCF0aGlzLndpZHRoRml4ZWQpe1xuXHRcdFx0dGhpcy5lbGVtZW50LnN0eWxlLndpZHRoID0gXCJcIjtcblxuXHRcdFx0dGhpcy5jZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG5cdFx0XHRcdGNlbGwuY2xlYXJXaWR0aCgpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0dmFyIG1heFdpZHRoID0gdGhpcy5lbGVtZW50Lm9mZnNldFdpZHRoO1xuXG5cdFx0aWYoIXRoaXMud2lkdGggfHwgIXRoaXMud2lkdGhGaXhlZCl7XG5cdFx0XHR0aGlzLmNlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcblx0XHRcdFx0dmFyIHdpZHRoID0gY2VsbC5nZXRXaWR0aCgpO1xuXG5cdFx0XHRcdGlmKHdpZHRoID4gbWF4V2lkdGgpe1xuXHRcdFx0XHRcdG1heFdpZHRoID0gd2lkdGg7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRpZihtYXhXaWR0aCl7XG5cdFx0XHRcdHZhciBzZXRUbyA9IG1heFdpZHRoICsgMTtcblx0XHRcdFx0aWYgKHRoaXMubWF4SW5pdGlhbFdpZHRoICYmICFmb3JjZSkge1xuXHRcdFx0XHRcdHNldFRvID0gTWF0aC5taW4oc2V0VG8sIHRoaXMubWF4SW5pdGlhbFdpZHRoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLnNldFdpZHRoQWN0dWFsKHNldFRvKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHR1cGRhdGVEZWZpbml0aW9uKHVwZGF0ZXMpe1xuXHRcdHZhciBkZWZpbml0aW9uO1xuXG5cdFx0aWYoIXRoaXMuaXNHcm91cCl7XG5cdFx0XHRpZighdGhpcy5wYXJlbnQuaXNHcm91cCl7XG5cdFx0XHRcdGRlZmluaXRpb24gPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmdldERlZmluaXRpb24oKSk7XG5cdFx0XHRcdGRlZmluaXRpb24gPSBPYmplY3QuYXNzaWduKGRlZmluaXRpb24sIHVwZGF0ZXMpO1xuXG5cdFx0XHRcdHJldHVybiB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuYWRkQ29sdW1uKGRlZmluaXRpb24sIGZhbHNlLCB0aGlzKVxuXHRcdFx0XHRcdC50aGVuKChjb2x1bW4pID0+IHtcblxuXHRcdFx0XHRcdFx0aWYoZGVmaW5pdGlvbi5maWVsZCA9PSB0aGlzLmZpZWxkKXtcblx0XHRcdFx0XHRcdFx0dGhpcy5maWVsZCA9IGZhbHNlOyAvL2NsZWFyIGZpZWxkIG5hbWUgdG8gcHJldmVudCBkZWxldGlvbiBvZiBkdXBsaWNhdGUgY29sdW1uIGZyb20gYXJyYXlzXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmRlbGV0ZSgpXG5cdFx0XHRcdFx0XHRcdC50aGVuKCgpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gY29sdW1uLmdldENvbXBvbmVudCgpO1xuXHRcdFx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKFwiQ29sdW1uIFVwZGF0ZSBFcnJvciAtIFRoZSB1cGRhdGVEZWZpbml0aW9uIGZ1bmN0aW9uIGlzIG9ubHkgYXZhaWxhYmxlIG9uIHVuZ3JvdXBlZCBjb2x1bW5zXCIpO1xuXHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoXCJDb2x1bW4gVXBkYXRlIEVycm9yIC0gVGhlIHVwZGF0ZURlZmluaXRpb24gZnVuY3Rpb24gaXMgb25seSBhdmFpbGFibGUgb24gY29sdW1ucywgbm90IGNvbHVtbiBncm91cHNcIik7XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS5lcnJvcihcIkNvbHVtbiBVcGRhdGUgRXJyb3IgLSBUaGUgdXBkYXRlRGVmaW5pdGlvbiBmdW5jdGlvbiBpcyBvbmx5IGF2YWlsYWJsZSBvbiB1bmdyb3VwZWQgY29sdW1uc1wiKTtcblx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChcIkNvbHVtbiBVcGRhdGUgRXJyb3IgLSBUaGUgdXBkYXRlRGVmaW5pdGlvbiBmdW5jdGlvbiBpcyBvbmx5IGF2YWlsYWJsZSBvbiBjb2x1bW5zLCBub3QgY29sdW1uIGdyb3Vwc1wiKTtcblx0XHR9XG5cdH1cblxuXHRkZWxldGVDZWxsKGNlbGwpe1xuXHRcdHZhciBpbmRleCA9IHRoaXMuY2VsbHMuaW5kZXhPZihjZWxsKTtcblxuXHRcdGlmKGluZGV4ID4gLTEpe1xuXHRcdFx0dGhpcy5jZWxscy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdH1cblx0fVxuXG5cdC8vLy8vLy8vLy8vLy8vLy8gT2JqZWN0IEdlbmVyYXRpb24gLy8vLy8vLy8vLy8vLy8vLy9cblx0Z2V0Q29tcG9uZW50KCl7XG5cdFx0aWYoIXRoaXMuY29tcG9uZW50KXtcblx0XHRcdHRoaXMuY29tcG9uZW50ID0gbmV3IENvbHVtbkNvbXBvbmVudCh0aGlzKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5jb21wb25lbnQ7XG5cdH1cbn1cblxuQ29sdW1uLmRlZmF1bHRPcHRpb25MaXN0ID0gZGVmYXVsdENvbHVtbk9wdGlvbnM7XG5cbi8vcHVibGljIHJvdyBvYmplY3RcbmNsYXNzIFJvd0NvbXBvbmVudCB7XG5cblx0Y29uc3RydWN0b3IgKHJvdyl7XG5cdFx0dGhpcy5fcm93ID0gcm93O1xuXG5cdFx0cmV0dXJuIG5ldyBQcm94eSh0aGlzLCB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKHRhcmdldCwgbmFtZSwgcmVjZWl2ZXIpIHtcblx0XHRcdFx0aWYgKHR5cGVvZiB0YXJnZXRbbmFtZV0gIT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdFx0XHRyZXR1cm4gdGFyZ2V0W25hbWVdO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRhcmdldC5fcm93LnRhYmxlLmNvbXBvbmVudEZ1bmN0aW9uQmluZGVyLmhhbmRsZShcInJvd1wiLCB0YXJnZXQuX3JvdywgbmFtZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdGdldERhdGEodHJhbnNmb3JtKXtcblx0XHRyZXR1cm4gdGhpcy5fcm93LmdldERhdGEodHJhbnNmb3JtKTtcblx0fVxuXG5cdGdldEVsZW1lbnQoKXtcblx0XHRyZXR1cm4gdGhpcy5fcm93LmdldEVsZW1lbnQoKTtcblx0fVxuXG5cdGdldENlbGxzKCl7XG5cdFx0dmFyIGNlbGxzID0gW107XG5cblx0XHR0aGlzLl9yb3cuZ2V0Q2VsbHMoKS5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwpe1xuXHRcdFx0Y2VsbHMucHVzaChjZWxsLmdldENvbXBvbmVudCgpKTtcblx0XHR9KTtcblxuXHRcdHJldHVybiBjZWxscztcblx0fVxuXG5cdGdldENlbGwoY29sdW1uKXtcblx0XHR2YXIgY2VsbCA9IHRoaXMuX3Jvdy5nZXRDZWxsKGNvbHVtbik7XG5cdFx0cmV0dXJuIGNlbGwgPyBjZWxsLmdldENvbXBvbmVudCgpIDogZmFsc2U7XG5cdH1cblxuXHRnZXRJbmRleCgpe1xuXHRcdHJldHVybiB0aGlzLl9yb3cuZ2V0RGF0YShcImRhdGFcIilbdGhpcy5fcm93LnRhYmxlLm9wdGlvbnMuaW5kZXhdO1xuXHR9XG5cblx0Z2V0UG9zaXRpb24oKXtcblx0XHRyZXR1cm4gdGhpcy5fcm93LmdldFBvc2l0aW9uKCk7XG5cdH1cblxuXHR3YXRjaFBvc2l0aW9uKGNhbGxiYWNrKXtcblx0XHRyZXR1cm4gdGhpcy5fcm93LndhdGNoUG9zaXRpb24oY2FsbGJhY2spO1xuXHR9XG5cblx0ZGVsZXRlKCl7XG5cdFx0cmV0dXJuIHRoaXMuX3Jvdy5kZWxldGUoKTtcblx0fVxuXG5cdHNjcm9sbFRvKHBvc2l0aW9uLCBpZlZpc2libGUpe1xuXHRcdHJldHVybiB0aGlzLl9yb3cudGFibGUucm93TWFuYWdlci5zY3JvbGxUb1Jvdyh0aGlzLl9yb3csIHBvc2l0aW9uLCBpZlZpc2libGUpO1xuXHR9XG5cblx0bW92ZSh0bywgYWZ0ZXIpe1xuXHRcdHRoaXMuX3Jvdy5tb3ZlVG9Sb3codG8sIGFmdGVyKTtcblx0fVxuXG5cdHVwZGF0ZShkYXRhKXtcblx0XHRyZXR1cm4gdGhpcy5fcm93LnVwZGF0ZURhdGEoZGF0YSk7XG5cdH1cblxuXHRub3JtYWxpemVIZWlnaHQoKXtcblx0XHR0aGlzLl9yb3cubm9ybWFsaXplSGVpZ2h0KHRydWUpO1xuXHR9XG5cblx0X2dldFNlbGYoKXtcblx0XHRyZXR1cm4gdGhpcy5fcm93O1xuXHR9XG5cblx0cmVmb3JtYXQoKXtcblx0XHRyZXR1cm4gdGhpcy5fcm93LnJlaW5pdGlhbGl6ZSgpO1xuXHR9XG5cblx0Z2V0VGFibGUoKXtcblx0XHRyZXR1cm4gdGhpcy5fcm93LnRhYmxlO1xuXHR9XG5cblx0Z2V0TmV4dFJvdygpe1xuXHRcdHZhciByb3cgPSB0aGlzLl9yb3cubmV4dFJvdygpO1xuXHRcdHJldHVybiByb3cgPyByb3cuZ2V0Q29tcG9uZW50KCkgOiByb3c7XG5cdH1cblxuXHRnZXRQcmV2Um93KCl7XG5cdFx0dmFyIHJvdyA9IHRoaXMuX3Jvdy5wcmV2Um93KCk7XG5cdFx0cmV0dXJuIHJvdyA/IHJvdy5nZXRDb21wb25lbnQoKSA6IHJvdztcblx0fVxufVxuXG5jbGFzcyBSb3cgZXh0ZW5kcyBDb3JlRmVhdHVyZXtcblx0Y29uc3RydWN0b3IgKGRhdGEsIHBhcmVudCwgdHlwZSA9IFwicm93XCIpe1xuXHRcdHN1cGVyKHBhcmVudC50YWJsZSk7XG5cdFx0XG5cdFx0dGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG5cdFx0dGhpcy5kYXRhID0ge307XG5cdFx0dGhpcy50eXBlID0gdHlwZTsgLy90eXBlIG9mIGVsZW1lbnRcblx0XHR0aGlzLmVsZW1lbnQgPSBmYWxzZTtcblx0XHR0aGlzLm1vZHVsZXMgPSB7fTsgLy9ob2xkIG1vZHVsZSB2YXJpYWJsZXM7XG5cdFx0dGhpcy5jZWxscyA9IFtdO1xuXHRcdHRoaXMuaGVpZ2h0ID0gMDsgLy9ob2xkIGVsZW1lbnQgaGVpZ2h0XG5cdFx0dGhpcy5oZWlnaHRTdHlsZWQgPSBcIlwiOyAvL2hvbGQgZWxlbWVudCBoZWlnaHQgcHJlLXN0eWxlZCB0byBpbXByb3ZlIHJlbmRlciBlZmZpY2llbmN5XG5cdFx0dGhpcy5tYW51YWxIZWlnaHQgPSBmYWxzZTsgLy91c2VyIGhhcyBtYW51YWxseSBzZXQgcm93IGhlaWdodFxuXHRcdHRoaXMub3V0ZXJIZWlnaHQgPSAwOyAvL2hvbGQgZWxlbWVudHMgb3V0ZXIgaGVpZ2h0XG5cdFx0dGhpcy5pbml0aWFsaXplZCA9IGZhbHNlOyAvL2VsZW1lbnQgaGFzIGJlZW4gcmVuZGVyZWRcblx0XHR0aGlzLmhlaWdodEluaXRpYWxpemVkID0gZmFsc2U7IC8vZWxlbWVudCBoYXMgcmVzaXplZCBjZWxscyB0byBmaXRcblx0XHR0aGlzLnBvc2l0aW9uID0gMDsgLy9zdG9yZSBwb3NpdGlvbiBvZiBlbGVtZW50IGluIHJvdyBsaXN0XG5cdFx0dGhpcy5wb3NpdGlvbldhdGNoZXJzID0gW107XG5cdFx0XG5cdFx0dGhpcy5jb21wb25lbnQgPSBudWxsO1xuXHRcdFxuXHRcdHRoaXMuY3JlYXRlZCA9IGZhbHNlO1xuXHRcdFxuXHRcdHRoaXMuc2V0RGF0YShkYXRhKTtcblx0fVxuXHRcblx0Y3JlYXRlKCl7XG5cdFx0aWYoIXRoaXMuY3JlYXRlZCl7XG5cdFx0XHR0aGlzLmNyZWF0ZWQgPSB0cnVlO1xuXHRcdFx0dGhpcy5nZW5lcmF0ZUVsZW1lbnQoKTtcblx0XHR9XG5cdH1cblx0XG5cdGNyZWF0ZUVsZW1lbnQgKCl7XG5cdFx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcblx0XHRlbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXJvd1wiKTtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwicm93XCIpO1xuXHRcdFxuXHRcdHRoaXMuZWxlbWVudCA9IGVsO1xuXHR9XG5cdFxuXHRnZXRFbGVtZW50KCl7XG5cdFx0dGhpcy5jcmVhdGUoKTtcblx0XHRyZXR1cm4gdGhpcy5lbGVtZW50O1xuXHR9XG5cdFxuXHRkZXRhY2hFbGVtZW50KCl7XG5cdFx0aWYgKHRoaXMuZWxlbWVudCAmJiB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZSl7XG5cdFx0XHR0aGlzLmVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQpO1xuXHRcdH1cblx0fVxuXHRcblx0Z2VuZXJhdGVFbGVtZW50KCl7XG5cdFx0dGhpcy5jcmVhdGVFbGVtZW50KCk7XG5cdFx0dGhpcy5kaXNwYXRjaChcInJvdy1pbml0XCIsIHRoaXMpO1xuXHR9XG5cdFxuXHRnZW5lcmF0ZUNlbGxzKCl7XG5cdFx0dGhpcy5jZWxscyA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5nZW5lcmF0ZUNlbGxzKHRoaXMpO1xuXHR9XG5cdFxuXHQvL2Z1bmN0aW9ucyB0byBzZXR1cCBvbiBmaXJzdCByZW5kZXJcblx0aW5pdGlhbGl6ZShmb3JjZSwgaW5GcmFnbWVudCl7XG5cdFx0dGhpcy5jcmVhdGUoKTtcblx0XHRcblx0XHRpZighdGhpcy5pbml0aWFsaXplZCB8fCBmb3JjZSl7XG5cdFx0XHRcblx0XHRcdHRoaXMuZGVsZXRlQ2VsbHMoKTtcblx0XHRcdFxuXHRcdFx0d2hpbGUodGhpcy5lbGVtZW50LmZpcnN0Q2hpbGQpIHRoaXMuZWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQuZmlyc3RDaGlsZCk7XG5cdFx0XHRcblx0XHRcdHRoaXMuZGlzcGF0Y2goXCJyb3ctbGF5b3V0LWJlZm9yZVwiLCB0aGlzKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5nZW5lcmF0ZUNlbGxzKCk7XG5cdFx0XHRcblx0XHRcdHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIucmVuZGVyZXIucmVuZGVyUm93Q2VsbHModGhpcywgaW5GcmFnbWVudCk7XG5cdFx0XHRcblx0XHRcdGlmKGZvcmNlKXtcblx0XHRcdFx0dGhpcy5ub3JtYWxpemVIZWlnaHQoKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5kaXNwYXRjaChcInJvdy1sYXlvdXRcIiwgdGhpcyk7XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5yb3dGb3JtYXR0ZXIpe1xuXHRcdFx0XHR0aGlzLnRhYmxlLm9wdGlvbnMucm93Rm9ybWF0dGVyKHRoaXMuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLmRpc3BhdGNoKFwicm93LWxheW91dC1hZnRlclwiLCB0aGlzKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIucmVuZGVyZXIucmVyZW5kZXJSb3dDZWxscyh0aGlzLCBpbkZyYWdtZW50KTtcblx0XHR9XG5cdH1cblxuXHRyZW5kZXJlZCgpe1xuXHRcdHRoaXMuY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuXHRcdFx0Y2VsbC5jZWxsUmVuZGVyZWQoKTtcblx0XHR9KTtcblx0fVxuXHRcblx0cmVpbml0aWFsaXplSGVpZ2h0KCl7XG5cdFx0dGhpcy5oZWlnaHRJbml0aWFsaXplZCA9IGZhbHNlO1xuXHRcdFxuXHRcdGlmKHRoaXMuZWxlbWVudCAmJiB0aGlzLmVsZW1lbnQub2Zmc2V0UGFyZW50ICE9PSBudWxsKXtcblx0XHRcdHRoaXMubm9ybWFsaXplSGVpZ2h0KHRydWUpO1xuXHRcdH1cblx0fVxuXG5cdGRlaW5pdGlhbGl6ZSgpe1xuXHRcdHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblx0fVxuXHRcblx0ZGVpbml0aWFsaXplSGVpZ2h0KCl7XG5cdFx0dGhpcy5oZWlnaHRJbml0aWFsaXplZCA9IGZhbHNlO1xuXHR9XG5cdFxuXHRyZWluaXRpYWxpemUoY2hpbGRyZW4pe1xuXHRcdHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblx0XHR0aGlzLmhlaWdodEluaXRpYWxpemVkID0gZmFsc2U7XG5cdFx0XG5cdFx0aWYoIXRoaXMubWFudWFsSGVpZ2h0KXtcblx0XHRcdHRoaXMuaGVpZ2h0ID0gMDtcblx0XHRcdHRoaXMuaGVpZ2h0U3R5bGVkID0gXCJcIjtcblx0XHR9XG5cdFx0XG5cdFx0aWYodGhpcy5lbGVtZW50ICYmIHRoaXMuZWxlbWVudC5vZmZzZXRQYXJlbnQgIT09IG51bGwpe1xuXHRcdFx0dGhpcy5pbml0aWFsaXplKHRydWUpO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLmRpc3BhdGNoKFwicm93LXJlbGF5b3V0XCIsIHRoaXMpO1xuXHR9XG5cdFxuXHQvL2dldCBoZWlnaHRzIHdoZW4gZG9pbmcgYnVsayByb3cgc3R5bGUgY2FsY3MgaW4gdmlydHVhbCBET01cblx0Y2FsY0hlaWdodChmb3JjZSl7XG5cdFx0dmFyIG1heEhlaWdodCA9IDAsXG5cdFx0bWluSGVpZ2h0O1xuXHRcdFxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5yb3dIZWlnaHQpe1xuXHRcdFx0dGhpcy5oZWlnaHQgPSB0aGlzLnRhYmxlLm9wdGlvbnMucm93SGVpZ2h0O1xuXHRcdH1lbHNlIHtcblx0XHRcdG1pbkhlaWdodCA9IHRoaXMudGFibGUub3B0aW9ucy5yZXNpemFibGVSb3dzID8gdGhpcy5lbGVtZW50LmNsaWVudEhlaWdodCA6IDA7XG5cdFx0XHRcblx0XHRcdHRoaXMuY2VsbHMuZm9yRWFjaChmdW5jdGlvbihjZWxsKXtcblx0XHRcdFx0dmFyIGhlaWdodCA9IGNlbGwuZ2V0SGVpZ2h0KCk7XG5cdFx0XHRcdGlmKGhlaWdodCA+IG1heEhlaWdodCl7XG5cdFx0XHRcdFx0bWF4SGVpZ2h0ID0gaGVpZ2h0O1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0aWYoZm9yY2Upe1xuXHRcdFx0XHR0aGlzLmhlaWdodCA9IE1hdGgubWF4KG1heEhlaWdodCwgbWluSGVpZ2h0KTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5oZWlnaHQgPSB0aGlzLm1hbnVhbEhlaWdodCA/IHRoaXMuaGVpZ2h0IDogTWF0aC5tYXgobWF4SGVpZ2h0LCBtaW5IZWlnaHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHR0aGlzLmhlaWdodFN0eWxlZCA9IHRoaXMuaGVpZ2h0ID8gdGhpcy5oZWlnaHQgKyBcInB4XCIgOiBcIlwiO1xuXHRcdHRoaXMub3V0ZXJIZWlnaHQgPSB0aGlzLmVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuXHR9XG5cdFxuXHQvL3NldCBvZiBjZWxsc1xuXHRzZXRDZWxsSGVpZ2h0KCl7XG5cdFx0dGhpcy5jZWxscy5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwpe1xuXHRcdFx0Y2VsbC5zZXRIZWlnaHQoKTtcblx0XHR9KTtcblx0XHRcblx0XHR0aGlzLmhlaWdodEluaXRpYWxpemVkID0gdHJ1ZTtcblx0fVxuXHRcblx0Y2xlYXJDZWxsSGVpZ2h0KCl7XG5cdFx0dGhpcy5jZWxscy5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwpe1xuXHRcdFx0Y2VsbC5jbGVhckhlaWdodCgpO1xuXHRcdH0pO1xuXHR9XG5cdFxuXHQvL25vcm1hbGl6ZSB0aGUgaGVpZ2h0IG9mIGVsZW1lbnRzIGluIHRoZSByb3dcblx0bm9ybWFsaXplSGVpZ2h0KGZvcmNlKXtcblx0XHRpZihmb3JjZSAmJiAhdGhpcy50YWJsZS5vcHRpb25zLnJvd0hlaWdodCl7XG5cdFx0XHR0aGlzLmNsZWFyQ2VsbEhlaWdodCgpO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLmNhbGNIZWlnaHQoZm9yY2UpO1xuXHRcdFxuXHRcdHRoaXMuc2V0Q2VsbEhlaWdodCgpO1xuXHR9XG5cdFxuXHQvL3NldCBoZWlnaHQgb2Ygcm93c1xuXHRzZXRIZWlnaHQoaGVpZ2h0LCBmb3JjZSl7XG5cdFx0aWYodGhpcy5oZWlnaHQgIT0gaGVpZ2h0IHx8IGZvcmNlKXtcblx0XHRcdFxuXHRcdFx0dGhpcy5tYW51YWxIZWlnaHQgPSB0cnVlO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmhlaWdodCA9IGhlaWdodDtcblx0XHRcdHRoaXMuaGVpZ2h0U3R5bGVkID0gaGVpZ2h0ID8gaGVpZ2h0ICsgXCJweFwiIDogXCJcIjtcblx0XHRcdFxuXHRcdFx0dGhpcy5zZXRDZWxsSGVpZ2h0KCk7XG5cdFx0XHRcblx0XHRcdC8vIHRoaXMub3V0ZXJIZWlnaHQgPSB0aGlzLmVsZW1lbnQub3V0ZXJIZWlnaHQoKTtcblx0XHRcdHRoaXMub3V0ZXJIZWlnaHQgPSB0aGlzLmVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuXHRcdH1cblx0fVxuXHRcblx0Ly9yZXR1cm4gcm93cyBvdXRlciBoZWlnaHRcblx0Z2V0SGVpZ2h0KCl7XG5cdFx0cmV0dXJuIHRoaXMub3V0ZXJIZWlnaHQ7XG5cdH1cblx0XG5cdC8vcmV0dXJuIHJvd3Mgb3V0ZXIgV2lkdGhcblx0Z2V0V2lkdGgoKXtcblx0XHRyZXR1cm4gdGhpcy5lbGVtZW50Lm9mZnNldFdpZHRoO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vIENlbGwgTWFuYWdlbWVudCAvLy8vLy8vLy8vLy8vLy8vL1xuXHRkZWxldGVDZWxsKGNlbGwpe1xuXHRcdHZhciBpbmRleCA9IHRoaXMuY2VsbHMuaW5kZXhPZihjZWxsKTtcblx0XHRcblx0XHRpZihpbmRleCA+IC0xKXtcblx0XHRcdHRoaXMuY2VsbHMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHR9XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8gRGF0YSBNYW5hZ2VtZW50IC8vLy8vLy8vLy8vLy8vLy8vXG5cdHNldERhdGEoZGF0YSl7XG5cdFx0dGhpcy5kYXRhID0gdGhpcy5jaGFpbihcInJvdy1kYXRhLWluaXQtYmVmb3JlXCIsIFt0aGlzLCBkYXRhXSwgdW5kZWZpbmVkLCBkYXRhKTtcblx0XHRcblx0XHR0aGlzLmRpc3BhdGNoKFwicm93LWRhdGEtaW5pdC1hZnRlclwiLCB0aGlzKTtcblx0fVxuXHRcblx0Ly91cGRhdGUgdGhlIHJvd3MgZGF0YVxuXHR1cGRhdGVEYXRhKHVwZGF0ZWREYXRhKXtcblx0XHR2YXIgdmlzaWJsZSA9IHRoaXMuZWxlbWVudCAmJiBIZWxwZXJzLmVsVmlzaWJsZSh0aGlzLmVsZW1lbnQpLFxuXHRcdHRlbXBEYXRhID0ge30sXG5cdFx0bmV3Um93RGF0YTtcblx0XHRcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0XG5cdFx0XHRpZih0eXBlb2YgdXBkYXRlZERhdGEgPT09IFwic3RyaW5nXCIpe1xuXHRcdFx0XHR1cGRhdGVkRGF0YSA9IEpTT04ucGFyc2UodXBkYXRlZERhdGEpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLmRpc3BhdGNoKFwicm93LWRhdGEtc2F2ZS1iZWZvcmVcIiwgdGhpcyk7XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMuc3Vic2NyaWJlZChcInJvdy1kYXRhLWNoYW5naW5nXCIpKXtcblx0XHRcdFx0dGVtcERhdGEgPSBPYmplY3QuYXNzaWduKHRlbXBEYXRhLCB0aGlzLmRhdGEpO1xuXHRcdFx0XHR0ZW1wRGF0YSA9IE9iamVjdC5hc3NpZ24odGVtcERhdGEsIHVwZGF0ZWREYXRhKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0bmV3Um93RGF0YSA9IHRoaXMuY2hhaW4oXCJyb3ctZGF0YS1jaGFuZ2luZ1wiLCBbdGhpcywgdGVtcERhdGEsIHVwZGF0ZWREYXRhXSwgbnVsbCwgdXBkYXRlZERhdGEpO1xuXHRcdFx0XG5cdFx0XHQvL3NldCBkYXRhXG5cdFx0XHRmb3IgKGxldCBhdHRybmFtZSBpbiBuZXdSb3dEYXRhKSB7XG5cdFx0XHRcdHRoaXMuZGF0YVthdHRybmFtZV0gPSBuZXdSb3dEYXRhW2F0dHJuYW1lXTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5kaXNwYXRjaChcInJvdy1kYXRhLXNhdmUtYWZ0ZXJcIiwgdGhpcyk7XG5cdFx0XHRcblx0XHRcdC8vdXBkYXRlIGFmZmVjdGVkIGNlbGxzIG9ubHlcblx0XHRcdGZvciAobGV0IGF0dHJuYW1lIGluIHVwZGF0ZWREYXRhKSB7XG5cdFx0XHRcdFxuXHRcdFx0XHRsZXQgY29sdW1ucyA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5nZXRDb2x1bW5zQnlGaWVsZFJvb3QoYXR0cm5hbWUpO1xuXHRcdFx0XHRcblx0XHRcdFx0Y29sdW1ucy5mb3JFYWNoKChjb2x1bW4pID0+IHtcblx0XHRcdFx0XHRsZXQgY2VsbCA9IHRoaXMuZ2V0Q2VsbChjb2x1bW4uZ2V0RmllbGQoKSk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYoY2VsbCl7XG5cdFx0XHRcdFx0XHRsZXQgdmFsdWUgPSBjb2x1bW4uZ2V0RmllbGRWYWx1ZShuZXdSb3dEYXRhKTtcblx0XHRcdFx0XHRcdGlmKGNlbGwuZ2V0VmFsdWUoKSAhPT0gdmFsdWUpe1xuXHRcdFx0XHRcdFx0XHRjZWxsLnNldFZhbHVlUHJvY2Vzc0RhdGEodmFsdWUpO1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0aWYodmlzaWJsZSl7XG5cdFx0XHRcdFx0XHRcdFx0Y2VsbC5jZWxsUmVuZGVyZWQoKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdC8vUGFydGlhbCByZWluaXRpYWxpemF0aW9uIGlmIHZpc2libGVcblx0XHRcdGlmKHZpc2libGUpe1xuXHRcdFx0XHR0aGlzLm5vcm1hbGl6ZUhlaWdodCh0cnVlKTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5yb3dGb3JtYXR0ZXIpe1xuXHRcdFx0XHRcdHRoaXMudGFibGUub3B0aW9ucy5yb3dGb3JtYXR0ZXIodGhpcy5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuXHRcdFx0XHR0aGlzLmhlaWdodCA9IDA7XG5cdFx0XHRcdHRoaXMuaGVpZ2h0U3R5bGVkID0gXCJcIjtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5kaXNwYXRjaChcInJvdy1kYXRhLWNoYW5nZWRcIiwgdGhpcywgdmlzaWJsZSwgdXBkYXRlZERhdGEpO1xuXHRcdFx0XG5cdFx0XHQvL3RoaXMucmVpbml0aWFsaXplKCk7XG5cdFx0XHRcblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInJvd1VwZGF0ZWRcIiwgdGhpcy5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMuc3Vic2NyaWJlZEV4dGVybmFsKFwiZGF0YUNoYW5nZWRcIikpe1xuXHRcdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJkYXRhQ2hhbmdlZFwiLCB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0RGF0YSgpKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0cmVzb2x2ZSgpO1xuXHRcdH0pO1xuXHR9XG5cdFxuXHRnZXREYXRhKHRyYW5zZm9ybSl7XG5cdFx0aWYodHJhbnNmb3JtKXtcblx0XHRcdHJldHVybiB0aGlzLmNoYWluKFwicm93LWRhdGEtcmV0cmlldmVcIiwgW3RoaXMsIHRyYW5zZm9ybV0sIG51bGwsIHRoaXMuZGF0YSk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiB0aGlzLmRhdGE7XG5cdH1cblx0XG5cdGdldENlbGwoY29sdW1uKXtcblx0XHR2YXIgbWF0Y2ggPSBmYWxzZTtcblx0XHRcblx0XHRjb2x1bW4gPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZmluZENvbHVtbihjb2x1bW4pO1xuXHRcdFxuXHRcdGlmKCF0aGlzLmluaXRpYWxpemVkICYmIHRoaXMuY2VsbHMubGVuZ3RoID09PSAwKXtcblx0XHRcdHRoaXMuZ2VuZXJhdGVDZWxscygpO1xuXHRcdH1cblx0XHRcblx0XHRtYXRjaCA9IHRoaXMuY2VsbHMuZmluZChmdW5jdGlvbihjZWxsKXtcblx0XHRcdHJldHVybiBjZWxsLmNvbHVtbiA9PT0gY29sdW1uO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiBtYXRjaDtcblx0fVxuXHRcblx0Z2V0Q2VsbEluZGV4KGZpbmRDZWxsKXtcblx0XHRyZXR1cm4gdGhpcy5jZWxscy5maW5kSW5kZXgoZnVuY3Rpb24oY2VsbCl7XG5cdFx0XHRyZXR1cm4gY2VsbCA9PT0gZmluZENlbGw7XG5cdFx0fSk7XG5cdH1cblx0XG5cdGZpbmRDZWxsKHN1YmplY3Qpe1xuXHRcdHJldHVybiB0aGlzLmNlbGxzLmZpbmQoKGNlbGwpID0+IHtcblx0XHRcdHJldHVybiBjZWxsLmVsZW1lbnQgPT09IHN1YmplY3Q7XG5cdFx0fSk7XG5cdH1cblx0XG5cdGdldENlbGxzKCl7XG5cdFx0aWYoIXRoaXMuaW5pdGlhbGl6ZWQgJiYgdGhpcy5jZWxscy5sZW5ndGggPT09IDApe1xuXHRcdFx0dGhpcy5nZW5lcmF0ZUNlbGxzKCk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiB0aGlzLmNlbGxzO1xuXHR9XG5cdFxuXHRuZXh0Um93KCl7XG5cdFx0dmFyIHJvdyA9IHRoaXMudGFibGUucm93TWFuYWdlci5uZXh0RGlzcGxheVJvdyh0aGlzLCB0cnVlKTtcblx0XHRyZXR1cm4gcm93IHx8IGZhbHNlO1xuXHR9XG5cdFxuXHRwcmV2Um93KCl7XG5cdFx0dmFyIHJvdyA9IHRoaXMudGFibGUucm93TWFuYWdlci5wcmV2RGlzcGxheVJvdyh0aGlzLCB0cnVlKTtcblx0XHRyZXR1cm4gcm93IHx8IGZhbHNlO1xuXHR9XG5cdFxuXHRtb3ZlVG9Sb3codG8sIGJlZm9yZSl7XG5cdFx0dmFyIHRvUm93ID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmZpbmRSb3codG8pO1xuXHRcdFxuXHRcdGlmKHRvUm93KXtcblx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5tb3ZlUm93QWN0dWFsKHRoaXMsIHRvUm93LCAhYmVmb3JlKTtcblx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5yZWZyZXNoQWN0aXZlRGF0YShcImRpc3BsYXlcIiwgZmFsc2UsIHRydWUpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIk1vdmUgRXJyb3IgLSBObyBtYXRjaGluZyByb3cgZm91bmQ6XCIsIHRvKTtcblx0XHR9XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLyBBY3Rpb25zICAvLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0ZGVsZXRlKCl7XG5cdFx0dGhpcy5kaXNwYXRjaChcInJvdy1kZWxldGVcIiwgdGhpcyk7XG5cdFx0XG5cdFx0dGhpcy5kZWxldGVBY3R1YWwoKTtcblx0XHRcblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cdH1cblx0XG5cdGRlbGV0ZUFjdHVhbChibG9ja1JlZHJhdyl7XG5cdFx0dGhpcy5kZXRhY2hNb2R1bGVzKCk7XG5cdFx0XG5cdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLmRlbGV0ZVJvdyh0aGlzLCBibG9ja1JlZHJhdyk7XG5cdFx0XG5cdFx0dGhpcy5kZWxldGVDZWxscygpO1xuXHRcdFxuXHRcdHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblx0XHR0aGlzLmhlaWdodEluaXRpYWxpemVkID0gZmFsc2U7XG5cdFx0dGhpcy5lbGVtZW50ID0gZmFsc2U7XG5cdFx0XG5cdFx0dGhpcy5kaXNwYXRjaChcInJvdy1kZWxldGVkXCIsIHRoaXMpO1xuXHR9XG5cdFxuXHRkZXRhY2hNb2R1bGVzKCl7XG5cdFx0dGhpcy5kaXNwYXRjaChcInJvdy1kZWxldGluZ1wiLCB0aGlzKTtcblx0fVxuXHRcblx0ZGVsZXRlQ2VsbHMoKXtcblx0XHR2YXIgY2VsbENvdW50ID0gdGhpcy5jZWxscy5sZW5ndGg7XG5cdFx0XG5cdFx0Zm9yKGxldCBpID0gMDsgaSA8IGNlbGxDb3VudDsgaSsrKXtcblx0XHRcdHRoaXMuY2VsbHNbMF0uZGVsZXRlKCk7XG5cdFx0fVxuXHR9XG5cdFxuXHR3aXBlKCl7XG5cdFx0dGhpcy5kZXRhY2hNb2R1bGVzKCk7XG5cdFx0dGhpcy5kZWxldGVDZWxscygpO1xuXHRcdFxuXHRcdGlmKHRoaXMuZWxlbWVudCl7XG5cdFx0XHR3aGlsZSh0aGlzLmVsZW1lbnQuZmlyc3RDaGlsZCkgdGhpcy5lbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudC5maXJzdENoaWxkKTtcblx0XHRcdFxuXHRcdFx0aWYodGhpcy5lbGVtZW50LnBhcmVudE5vZGUpe1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHR0aGlzLmVsZW1lbnQgPSBmYWxzZTtcblx0XHR0aGlzLm1vZHVsZXMgPSB7fTtcblx0fVxuXG5cdGlzRGlzcGxheWVkKCl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUucm93TWFuYWdlci5nZXREaXNwbGF5Um93cygpLmluY2x1ZGVzKHRoaXMpO1xuXHR9XG5cblx0Z2V0UG9zaXRpb24oKXtcblx0XHRyZXR1cm4gdGhpcy5pc0Rpc3BsYXllZCgpID8gdGhpcy5wb3NpdGlvbiA6IGZhbHNlO1xuXHR9XG5cblx0c2V0UG9zaXRpb24ocG9zaXRpb24pe1xuXHRcdGlmKHBvc2l0aW9uICE9IHRoaXMucG9zaXRpb24pe1xuXHRcdFx0dGhpcy5wb3NpdGlvbiA9IHBvc2l0aW9uO1xuXG5cdFx0XHR0aGlzLnBvc2l0aW9uV2F0Y2hlcnMuZm9yRWFjaCgoY2FsbGJhY2spID0+IHtcblx0XHRcdFx0Y2FsbGJhY2sodGhpcy5wb3NpdGlvbik7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHR3YXRjaFBvc2l0aW9uKGNhbGxiYWNrKXtcblx0XHR0aGlzLnBvc2l0aW9uV2F0Y2hlcnMucHVzaChjYWxsYmFjayk7XG5cblx0XHRjYWxsYmFjayh0aGlzLnBvc2l0aW9uKTtcblx0fVxuXHRcblx0Z2V0R3JvdXAoKXtcblx0XHRyZXR1cm4gdGhpcy5tb2R1bGVzLmdyb3VwIHx8IGZhbHNlO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vIE9iamVjdCBHZW5lcmF0aW9uIC8vLy8vLy8vLy8vLy8vLy8vXG5cdGdldENvbXBvbmVudCgpe1xuXHRcdGlmKCF0aGlzLmNvbXBvbmVudCl7XG5cdFx0XHR0aGlzLmNvbXBvbmVudCA9IG5ldyBSb3dDb21wb25lbnQodGhpcyk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiB0aGlzLmNvbXBvbmVudDtcblx0fVxufVxuXG52YXIgZGVmYXVsdENhbGN1bGF0aW9ucyA9IHtcblx0XCJhdmdcIjpmdW5jdGlvbih2YWx1ZXMsIGRhdGEsIGNhbGNQYXJhbXMpe1xuXHRcdHZhciBvdXRwdXQgPSAwLFxuXHRcdHByZWNpc2lvbiA9IHR5cGVvZiBjYWxjUGFyYW1zLnByZWNpc2lvbiAhPT0gXCJ1bmRlZmluZWRcIiA/IGNhbGNQYXJhbXMucHJlY2lzaW9uIDogMjtcblxuXHRcdGlmKHZhbHVlcy5sZW5ndGgpe1xuXHRcdFx0b3V0cHV0ID0gdmFsdWVzLnJlZHVjZShmdW5jdGlvbihzdW0sIHZhbHVlKXtcblx0XHRcdFx0cmV0dXJuIE51bWJlcihzdW0pICsgTnVtYmVyKHZhbHVlKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRvdXRwdXQgPSBvdXRwdXQgLyB2YWx1ZXMubGVuZ3RoO1xuXG5cdFx0XHRvdXRwdXQgPSBwcmVjaXNpb24gIT09IGZhbHNlID8gb3V0cHV0LnRvRml4ZWQocHJlY2lzaW9uKSA6IG91dHB1dDtcblx0XHR9XG5cblx0XHRyZXR1cm4gcGFyc2VGbG9hdChvdXRwdXQpLnRvU3RyaW5nKCk7XG5cdH0sXG5cdFwibWF4XCI6ZnVuY3Rpb24odmFsdWVzLCBkYXRhLCBjYWxjUGFyYW1zKXtcblx0XHR2YXIgb3V0cHV0ID0gbnVsbCxcblx0XHRwcmVjaXNpb24gPSB0eXBlb2YgY2FsY1BhcmFtcy5wcmVjaXNpb24gIT09IFwidW5kZWZpbmVkXCIgPyBjYWxjUGFyYW1zLnByZWNpc2lvbiA6IGZhbHNlO1xuXG5cdFx0dmFsdWVzLmZvckVhY2goZnVuY3Rpb24odmFsdWUpe1xuXG5cdFx0XHR2YWx1ZSA9IE51bWJlcih2YWx1ZSk7XG5cblx0XHRcdGlmKHZhbHVlID4gb3V0cHV0IHx8IG91dHB1dCA9PT0gbnVsbCl7XG5cdFx0XHRcdG91dHB1dCA9IHZhbHVlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIG91dHB1dCAhPT0gbnVsbCA/IChwcmVjaXNpb24gIT09IGZhbHNlID8gb3V0cHV0LnRvRml4ZWQocHJlY2lzaW9uKSA6IG91dHB1dCkgOiBcIlwiO1xuXHR9LFxuXHRcIm1pblwiOmZ1bmN0aW9uKHZhbHVlcywgZGF0YSwgY2FsY1BhcmFtcyl7XG5cdFx0dmFyIG91dHB1dCA9IG51bGwsXG5cdFx0cHJlY2lzaW9uID0gdHlwZW9mIGNhbGNQYXJhbXMucHJlY2lzaW9uICE9PSBcInVuZGVmaW5lZFwiID8gY2FsY1BhcmFtcy5wcmVjaXNpb24gOiBmYWxzZTtcblxuXHRcdHZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKXtcblxuXHRcdFx0dmFsdWUgPSBOdW1iZXIodmFsdWUpO1xuXG5cdFx0XHRpZih2YWx1ZSA8IG91dHB1dCB8fCBvdXRwdXQgPT09IG51bGwpe1xuXHRcdFx0XHRvdXRwdXQgPSB2YWx1ZTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHJldHVybiBvdXRwdXQgIT09IG51bGwgPyAocHJlY2lzaW9uICE9PSBmYWxzZSA/IG91dHB1dC50b0ZpeGVkKHByZWNpc2lvbikgOiBvdXRwdXQpIDogXCJcIjtcblx0fSxcblx0XCJzdW1cIjpmdW5jdGlvbih2YWx1ZXMsIGRhdGEsIGNhbGNQYXJhbXMpe1xuXHRcdHZhciBvdXRwdXQgPSAwLFxuXHRcdHByZWNpc2lvbiA9IHR5cGVvZiBjYWxjUGFyYW1zLnByZWNpc2lvbiAhPT0gXCJ1bmRlZmluZWRcIiA/IGNhbGNQYXJhbXMucHJlY2lzaW9uIDogZmFsc2U7XG5cblx0XHRpZih2YWx1ZXMubGVuZ3RoKXtcblx0XHRcdHZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKXtcblx0XHRcdFx0dmFsdWUgPSBOdW1iZXIodmFsdWUpO1xuXG5cdFx0XHRcdG91dHB1dCArPSAhaXNOYU4odmFsdWUpID8gTnVtYmVyKHZhbHVlKSA6IDA7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcHJlY2lzaW9uICE9PSBmYWxzZSA/IG91dHB1dC50b0ZpeGVkKHByZWNpc2lvbikgOiBvdXRwdXQ7XG5cdH0sXG5cdFwiY29uY2F0XCI6ZnVuY3Rpb24odmFsdWVzLCBkYXRhLCBjYWxjUGFyYW1zKXtcblx0XHR2YXIgb3V0cHV0ID0gMDtcblxuXHRcdGlmKHZhbHVlcy5sZW5ndGgpe1xuXHRcdFx0b3V0cHV0ID0gdmFsdWVzLnJlZHVjZShmdW5jdGlvbihzdW0sIHZhbHVlKXtcblx0XHRcdFx0cmV0dXJuIFN0cmluZyhzdW0pICsgU3RyaW5nKHZhbHVlKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH0sXG5cdFwiY291bnRcIjpmdW5jdGlvbih2YWx1ZXMsIGRhdGEsIGNhbGNQYXJhbXMpe1xuXHRcdHZhciBvdXRwdXQgPSAwO1xuXG5cdFx0aWYodmFsdWVzLmxlbmd0aCl7XG5cdFx0XHR2YWx1ZXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSl7XG5cdFx0XHRcdGlmKHZhbHVlKXtcblx0XHRcdFx0XHRvdXRwdXQgKys7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH0sXG5cdFwidW5pcXVlXCI6ZnVuY3Rpb24odmFsdWVzLCBkYXRhLCBjYWxjUGFyYW1zKXtcblx0XHR2YXIgdW5pcXVlID0gdmFsdWVzLmZpbHRlcigodmFsdWUsIGluZGV4KSA9PiB7XG5cdFx0XHRyZXR1cm4gKHZhbHVlcyB8fCB2YWx1ZSA9PT0gMCkgJiYgdmFsdWVzLmluZGV4T2YodmFsdWUpID09PSBpbmRleDtcblx0XHR9KTtcblxuXHRcdHJldHVybiB1bmlxdWUubGVuZ3RoO1xuXHR9LFxufTtcblxuY2xhc3MgQ29sdW1uQ2FsY3MgZXh0ZW5kcyBNb2R1bGV7XG5cdFxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXHRcdFxuXHRcdHRoaXMudG9wQ2FsY3MgPSBbXTtcblx0XHR0aGlzLmJvdENhbGNzID0gW107XG5cdFx0dGhpcy5nZW5Db2x1bW4gPSBmYWxzZTtcblx0XHR0aGlzLnRvcEVsZW1lbnQgPSB0aGlzLmNyZWF0ZUVsZW1lbnQoKTtcblx0XHR0aGlzLmJvdEVsZW1lbnQgPSB0aGlzLmNyZWF0ZUVsZW1lbnQoKTtcblx0XHR0aGlzLnRvcFJvdyA9IGZhbHNlO1xuXHRcdHRoaXMuYm90Um93ID0gZmFsc2U7XG5cdFx0dGhpcy50b3BJbml0aWFsaXplZCA9IGZhbHNlO1xuXHRcdHRoaXMuYm90SW5pdGlhbGl6ZWQgPSBmYWxzZTtcblx0XHRcblx0XHR0aGlzLmJsb2NrZWQgPSBmYWxzZTtcblx0XHR0aGlzLnJlY2FsY0FmdGVyQmxvY2sgPSBmYWxzZTtcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJjb2x1bW5DYWxjc1wiLCB0cnVlKTtcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwidG9wQ2FsY1wiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwidG9wQ2FsY1BhcmFtc1wiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwidG9wQ2FsY0Zvcm1hdHRlclwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwidG9wQ2FsY0Zvcm1hdHRlclBhcmFtc1wiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiYm90dG9tQ2FsY1wiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiYm90dG9tQ2FsY1BhcmFtc1wiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiYm90dG9tQ2FsY0Zvcm1hdHRlclwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiYm90dG9tQ2FsY0Zvcm1hdHRlclBhcmFtc1wiKTtcblx0fVxuXHRcblx0Y3JlYXRlRWxlbWVudCAoKXtcblx0XHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdGVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItY2FsY3MtaG9sZGVyXCIpO1xuXHRcdHJldHVybiBlbDtcblx0fVxuXHRcblx0aW5pdGlhbGl6ZSgpe1xuXHRcdHRoaXMuZ2VuQ29sdW1uID0gbmV3IENvbHVtbih7ZmllbGQ6XCJ2YWx1ZVwifSwgdGhpcyk7XG5cdFx0XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjZWxsLXZhbHVlLWNoYW5nZWRcIiwgdGhpcy5jZWxsVmFsdWVDaGFuZ2VkLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWluaXRcIiwgdGhpcy5pbml0aWFsaXplQ29sdW1uQ2hlY2suYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctZGVsZXRlZFwiLCB0aGlzLnJvd3NVcGRhdGVkLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwic2Nyb2xsLWhvcml6b250YWxcIiwgdGhpcy5zY3JvbGxIb3Jpem9udGFsLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWFkZGVkXCIsIHRoaXMucm93c1VwZGF0ZWQuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tbW92ZWRcIiwgdGhpcy5yZWNhbGNBY3RpdmVSb3dzLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWFkZFwiLCB0aGlzLnJlY2FsY0FjdGl2ZVJvd3MuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJkYXRhLXJlZnJlc2hlZFwiLCB0aGlzLnJlY2FsY0FjdGl2ZVJvd3NSZWZyZXNoLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwidGFibGUtcmVkcmF3XCIsIHRoaXMudGFibGVSZWRyYXcuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3dzLXZpc2libGVcIiwgdGhpcy52aXNpYmxlUm93cy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcInNjcm9sbGJhci12ZXJ0aWNhbFwiLCB0aGlzLmFkanVzdEZvclNjcm9sbGJhci5iaW5kKHRoaXMpKTtcblx0XHRcblx0XHR0aGlzLnN1YnNjcmliZShcInJlZHJhdy1ibG9ja2VkXCIsIHRoaXMuYmxvY2tSZWRyYXcuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJyZWRyYXctcmVzdG9yZWRcIiwgdGhpcy5yZXN0b3JlUmVkcmF3LmJpbmQodGhpcykpO1xuXG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJ0YWJsZS1yZWRyYXdpbmdcIiwgdGhpcy5yZXNpemVIb2xkZXJXaWR0aC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1yZXNpemVkXCIsIHRoaXMucmVzaXplSG9sZGVyV2lkdGguYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tc2hvd1wiLCB0aGlzLnJlc2l6ZUhvbGRlcldpZHRoLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWhpZGVcIiwgdGhpcy5yZXNpemVIb2xkZXJXaWR0aC5iaW5kKHRoaXMpKTtcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcImdldENhbGNSZXN1bHRzXCIsIHRoaXMuZ2V0UmVzdWx0cy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcInJlY2FsY1wiLCB0aGlzLnVzZXJSZWNhbGMuYmluZCh0aGlzKSk7XG5cblxuXHRcdHRoaXMucmVzaXplSG9sZGVyV2lkdGgoKTtcblx0fVxuXG5cdHJlc2l6ZUhvbGRlcldpZHRoKCl7XG5cdFx0dGhpcy50b3BFbGVtZW50LnN0eWxlLm1pbldpZHRoID0gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmhlYWRlcnNFbGVtZW50Lm9mZnNldFdpZHRoICsgXCJweFwiO1xuXHR9XG5cblx0XG5cdHRhYmxlUmVkcmF3KGZvcmNlKXtcblx0XHR0aGlzLnJlY2FsYyh0aGlzLnRhYmxlLnJvd01hbmFnZXIuYWN0aXZlUm93cyk7XG5cdFx0XG5cdFx0aWYoZm9yY2Upe1xuXHRcdFx0dGhpcy5yZWRyYXcoKTtcblx0XHR9XG5cdH1cblx0XG5cdGJsb2NrUmVkcmF3KCl7XG5cdFx0dGhpcy5ibG9ja2VkID0gdHJ1ZTtcblx0XHR0aGlzLnJlY2FsY0FmdGVyQmxvY2sgPSBmYWxzZTtcblx0fVxuXHRcblx0XG5cdHJlc3RvcmVSZWRyYXcoKXtcblx0XHR0aGlzLmJsb2NrZWQgPSBmYWxzZTtcblx0XHRcblx0XHRpZih0aGlzLnJlY2FsY0FmdGVyQmxvY2spe1xuXHRcdFx0dGhpcy5yZWNhbGNBZnRlckJsb2NrID0gZmFsc2U7XG5cdFx0XHR0aGlzLnJlY2FsY0FjdGl2ZVJvd3NSZWZyZXNoKCk7XG5cdFx0fVxuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8gVGFibGUgRnVuY3Rpb25zIC8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHR1c2VyUmVjYWxjKCl7XG5cdFx0dGhpcy5yZWNhbGModGhpcy50YWJsZS5yb3dNYW5hZ2VyLmFjdGl2ZVJvd3MpO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8gSW50ZXJuYWwgTG9naWMgLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0YmxvY2tDaGVjaygpe1xuXHRcdGlmKHRoaXMuYmxvY2tlZCl7XG5cdFx0XHR0aGlzLnJlY2FsY0FmdGVyQmxvY2sgPSB0cnVlO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gdGhpcy5ibG9ja2VkO1xuXHR9XG5cdFxuXHR2aXNpYmxlUm93cyh2aWV3YWJsZSwgcm93cyl7XG5cdFx0aWYodGhpcy50b3BSb3cpe1xuXHRcdFx0cm93cy51bnNoaWZ0KHRoaXMudG9wUm93KTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodGhpcy5ib3RSb3cpe1xuXHRcdFx0cm93cy5wdXNoKHRoaXMuYm90Um93KTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHJvd3M7XG5cdH1cblx0XG5cdHJvd3NVcGRhdGVkKHJvdyl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQnkpe1xuXHRcdFx0dGhpcy5yZWNhbGNSb3dHcm91cChyb3cpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMucmVjYWxjQWN0aXZlUm93cygpO1xuXHRcdH1cblx0fVxuXHRcblx0cmVjYWxjQWN0aXZlUm93c1JlZnJlc2goKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBCeSAmJiB0aGlzLnRhYmxlLm9wdGlvbnMuZGF0YVRyZWVTdGFydEV4cGFuZGVkICYmIHRoaXMudGFibGUub3B0aW9ucy5kYXRhVHJlZSl7XG5cdFx0XHR0aGlzLnJlY2FsY0FsbCgpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMucmVjYWxjQWN0aXZlUm93cygpO1xuXHRcdH1cblx0fVxuXHRcblx0cmVjYWxjQWN0aXZlUm93cygpe1xuXHRcdHRoaXMucmVjYWxjKHRoaXMudGFibGUucm93TWFuYWdlci5hY3RpdmVSb3dzKTtcblx0fVxuXHRcblx0Y2VsbFZhbHVlQ2hhbmdlZChjZWxsKXtcblx0XHRpZihjZWxsLmNvbHVtbi5kZWZpbml0aW9uLnRvcENhbGMgfHwgY2VsbC5jb2x1bW4uZGVmaW5pdGlvbi5ib3R0b21DYWxjKXtcblx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5ncm91cEJ5KXtcblx0XHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmNvbHVtbkNhbGNzID09IFwidGFibGVcIiB8fCB0aGlzLnRhYmxlLm9wdGlvbnMuY29sdW1uQ2FsY3MgPT0gXCJib3RoXCIpe1xuXHRcdFx0XHRcdHRoaXMucmVjYWxjQWN0aXZlUm93cygpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuY29sdW1uQ2FsY3MgIT0gXCJ0YWJsZVwiKXtcblx0XHRcdFx0XHR0aGlzLnJlY2FsY1Jvd0dyb3VwKGNlbGwucm93KTtcblx0XHRcdFx0fVxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLnJlY2FsY0FjdGl2ZVJvd3MoKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdGluaXRpYWxpemVDb2x1bW5DaGVjayhjb2x1bW4pe1xuXHRcdGlmKGNvbHVtbi5kZWZpbml0aW9uLnRvcENhbGMgfHwgY29sdW1uLmRlZmluaXRpb24uYm90dG9tQ2FsYyl7XG5cdFx0XHR0aGlzLmluaXRpYWxpemVDb2x1bW4oY29sdW1uKTtcblx0XHR9XG5cdH1cblx0XG5cdC8vaW5pdGlhbGl6ZSBjb2x1bW4gY2FsY3Ncblx0aW5pdGlhbGl6ZUNvbHVtbihjb2x1bW4pe1xuXHRcdHZhciBkZWYgPSBjb2x1bW4uZGVmaW5pdGlvbjtcblx0XHRcblx0XHR2YXIgY29uZmlnID0ge1xuXHRcdFx0dG9wQ2FsY1BhcmFtczpkZWYudG9wQ2FsY1BhcmFtcyB8fCB7fSxcblx0XHRcdGJvdENhbGNQYXJhbXM6ZGVmLmJvdHRvbUNhbGNQYXJhbXMgfHwge30sXG5cdFx0fTtcblx0XHRcblx0XHRpZihkZWYudG9wQ2FsYyl7XG5cdFx0XHRcblx0XHRcdHN3aXRjaCh0eXBlb2YgZGVmLnRvcENhbGMpe1xuXHRcdFx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRcdFx0aWYoQ29sdW1uQ2FsY3MuY2FsY3VsYXRpb25zW2RlZi50b3BDYWxjXSl7XG5cdFx0XHRcdFx0XHRjb25maWcudG9wQ2FsYyA9IENvbHVtbkNhbGNzLmNhbGN1bGF0aW9uc1tkZWYudG9wQ2FsY107XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiQ29sdW1uIENhbGMgRXJyb3IgLSBObyBzdWNoIGNhbGN1bGF0aW9uIGZvdW5kLCBpZ25vcmluZzogXCIsIGRlZi50b3BDYWxjKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFxuXHRcdFx0XHRjYXNlIFwiZnVuY3Rpb25cIjpcblx0XHRcdFx0XHRjb25maWcudG9wQ2FsYyA9IGRlZi50b3BDYWxjO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoY29uZmlnLnRvcENhbGMpe1xuXHRcdFx0XHRjb2x1bW4ubW9kdWxlcy5jb2x1bW5DYWxjcyA9IGNvbmZpZztcblx0XHRcdFx0dGhpcy50b3BDYWxjcy5wdXNoKGNvbHVtbik7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuY29sdW1uQ2FsY3MgIT0gXCJncm91cFwiKXtcblx0XHRcdFx0XHR0aGlzLmluaXRpYWxpemVUb3BSb3coKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGRlZi5ib3R0b21DYWxjKXtcblx0XHRcdHN3aXRjaCh0eXBlb2YgZGVmLmJvdHRvbUNhbGMpe1xuXHRcdFx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRcdFx0aWYoQ29sdW1uQ2FsY3MuY2FsY3VsYXRpb25zW2RlZi5ib3R0b21DYWxjXSl7XG5cdFx0XHRcdFx0XHRjb25maWcuYm90Q2FsYyA9IENvbHVtbkNhbGNzLmNhbGN1bGF0aW9uc1tkZWYuYm90dG9tQ2FsY107XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiQ29sdW1uIENhbGMgRXJyb3IgLSBObyBzdWNoIGNhbGN1bGF0aW9uIGZvdW5kLCBpZ25vcmluZzogXCIsIGRlZi5ib3R0b21DYWxjKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFxuXHRcdFx0XHRjYXNlIFwiZnVuY3Rpb25cIjpcblx0XHRcdFx0XHRjb25maWcuYm90Q2FsYyA9IGRlZi5ib3R0b21DYWxjO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoY29uZmlnLmJvdENhbGMpe1xuXHRcdFx0XHRjb2x1bW4ubW9kdWxlcy5jb2x1bW5DYWxjcyA9IGNvbmZpZztcblx0XHRcdFx0dGhpcy5ib3RDYWxjcy5wdXNoKGNvbHVtbik7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuY29sdW1uQ2FsY3MgIT0gXCJncm91cFwiKXtcblx0XHRcdFx0XHR0aGlzLmluaXRpYWxpemVCb3R0b21Sb3coKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0fVxuXHRcblx0Ly9kdW1teSBmdW5jdGlvbnMgdG8gaGFuZGxlIGJlaW5nIG1vY2sgY29sdW1uIG1hbmFnZXJcblx0cmVnaXN0ZXJDb2x1bW5GaWVsZCgpe31cblx0XG5cdHJlbW92ZUNhbGNzKCl7XG5cdFx0dmFyIGNoYW5nZWQgPSBmYWxzZTtcblx0XHRcblx0XHRpZih0aGlzLnRvcEluaXRpYWxpemVkKXtcblx0XHRcdHRoaXMudG9wSW5pdGlhbGl6ZWQgPSBmYWxzZTtcblx0XHRcdHRoaXMudG9wRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMudG9wRWxlbWVudCk7XG5cdFx0XHRjaGFuZ2VkID0gdHJ1ZTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodGhpcy5ib3RJbml0aWFsaXplZCl7XG5cdFx0XHR0aGlzLmJvdEluaXRpYWxpemVkID0gZmFsc2U7XG5cdFx0XHR0aGlzLmZvb3RlclJlbW92ZSh0aGlzLmJvdEVsZW1lbnQpO1xuXHRcdFx0Y2hhbmdlZCA9IHRydWU7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGNoYW5nZWQpe1xuXHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLmFkanVzdFRhYmxlU2l6ZSgpO1xuXHRcdH1cblx0fVxuXHRcblx0cmVpbml0aWFsaXplQ2FsY3MoKXtcblx0XHRpZih0aGlzLnRvcENhbGNzLmxlbmd0aCl7XG5cdFx0XHR0aGlzLmluaXRpYWxpemVUb3BSb3coKTtcblx0XHR9XG5cblx0XHRpZih0aGlzLmJvdENhbGNzLmxlbmd0aCl7XG5cdFx0XHR0aGlzLmluaXRpYWxpemVCb3R0b21Sb3coKTtcblx0XHR9XG5cdH1cblx0XG5cdGluaXRpYWxpemVUb3BSb3coKXtcblx0XHRpZighdGhpcy50b3BJbml0aWFsaXplZCl7XG5cdFx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0Q29udGVudHNFbGVtZW50KCkuaW5zZXJ0QmVmb3JlKHRoaXMudG9wRWxlbWVudCwgdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmhlYWRlcnNFbGVtZW50Lm5leHRTaWJsaW5nKTtcblx0XHRcdHRoaXMudG9wSW5pdGlhbGl6ZWQgPSB0cnVlO1xuXHRcdH1cblx0fVxuXHRcblx0aW5pdGlhbGl6ZUJvdHRvbVJvdygpe1xuXHRcdGlmKCF0aGlzLmJvdEluaXRpYWxpemVkKXtcblx0XHRcdHRoaXMuZm9vdGVyUHJlcGVuZCh0aGlzLmJvdEVsZW1lbnQpO1xuXHRcdFx0dGhpcy5ib3RJbml0aWFsaXplZCA9IHRydWU7XG5cdFx0fVxuXHR9XG5cdFxuXHRzY3JvbGxIb3Jpem9udGFsKGxlZnQpe1xuXHRcdGlmKHRoaXMuYm90SW5pdGlhbGl6ZWQgJiYgdGhpcy5ib3RSb3cpe1xuXHRcdFx0dGhpcy5ib3RFbGVtZW50LnNjcm9sbExlZnQgPSBsZWZ0O1xuXHRcdH1cblx0fVxuXHRcblx0cmVjYWxjKHJvd3Mpe1xuXHRcdHZhciBkYXRhLCByb3c7XG5cdFx0XG5cdFx0aWYoIXRoaXMuYmxvY2tDaGVjaygpKXtcblx0XHRcdGlmKHRoaXMudG9wSW5pdGlhbGl6ZWQgfHwgdGhpcy5ib3RJbml0aWFsaXplZCl7XG5cdFx0XHRcdGRhdGEgPSB0aGlzLnJvd3NUb0RhdGEocm93cyk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih0aGlzLnRvcEluaXRpYWxpemVkKXtcblx0XHRcdFx0XHRpZih0aGlzLnRvcFJvdyl7XG5cdFx0XHRcdFx0XHR0aGlzLnRvcFJvdy5kZWxldGVDZWxscygpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHRyb3cgPSB0aGlzLmdlbmVyYXRlUm93KFwidG9wXCIsIGRhdGEpO1xuXHRcdFx0XHRcdHRoaXMudG9wUm93ID0gcm93O1xuXHRcdFx0XHRcdHdoaWxlKHRoaXMudG9wRWxlbWVudC5maXJzdENoaWxkKSB0aGlzLnRvcEVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy50b3BFbGVtZW50LmZpcnN0Q2hpbGQpO1xuXHRcdFx0XHRcdHRoaXMudG9wRWxlbWVudC5hcHBlbmRDaGlsZChyb3cuZ2V0RWxlbWVudCgpKTtcblx0XHRcdFx0XHRyb3cuaW5pdGlhbGl6ZSh0cnVlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0aWYodGhpcy5ib3RJbml0aWFsaXplZCl7XG5cdFx0XHRcdFx0aWYodGhpcy5ib3RSb3cpe1xuXHRcdFx0XHRcdFx0dGhpcy5ib3RSb3cuZGVsZXRlQ2VsbHMoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0cm93ID0gdGhpcy5nZW5lcmF0ZVJvdyhcImJvdHRvbVwiLCBkYXRhKTtcblx0XHRcdFx0XHR0aGlzLmJvdFJvdyA9IHJvdztcblx0XHRcdFx0XHR3aGlsZSh0aGlzLmJvdEVsZW1lbnQuZmlyc3RDaGlsZCkgdGhpcy5ib3RFbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMuYm90RWxlbWVudC5maXJzdENoaWxkKTtcblx0XHRcdFx0XHR0aGlzLmJvdEVsZW1lbnQuYXBwZW5kQ2hpbGQocm93LmdldEVsZW1lbnQoKSk7XG5cdFx0XHRcdFx0cm93LmluaXRpYWxpemUodHJ1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5hZGp1c3RUYWJsZVNpemUoKTtcblx0XHRcdFx0XG5cdFx0XHRcdC8vc2V0IHJlc2l6YWJsZSBoYW5kbGVzXG5cdFx0XHRcdGlmKHRoaXMudGFibGUubW9kRXhpc3RzKFwiZnJvemVuQ29sdW1uc1wiKSl7XG5cdFx0XHRcdFx0dGhpcy50YWJsZS5tb2R1bGVzLmZyb3plbkNvbHVtbnMubGF5b3V0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdHJlY2FsY1Jvd0dyb3VwKHJvdyl7XG5cdFx0dGhpcy5yZWNhbGNHcm91cCh0aGlzLnRhYmxlLm1vZHVsZXMuZ3JvdXBSb3dzLmdldFJvd0dyb3VwKHJvdykpO1xuXHR9XG5cdFxuXHRyZWNhbGNBbGwoKXtcblx0XHRpZih0aGlzLnRvcENhbGNzLmxlbmd0aCB8fCB0aGlzLmJvdENhbGNzLmxlbmd0aCl7XG5cdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuY29sdW1uQ2FsY3MgIT09IFwiZ3JvdXBcIil7XG5cdFx0XHRcdHRoaXMucmVjYWxjQWN0aXZlUm93cygpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBCeSAmJiB0aGlzLnRhYmxlLm9wdGlvbnMuY29sdW1uQ2FsY3MgIT09IFwidGFibGVcIil7XG5cdFx0XHRcdFxuXHRcdFx0XHR2YXIgZ3JvdXBzID0gdGhpcy50YWJsZS5tb2R1bGVzLmdyb3VwUm93cy5nZXRDaGlsZEdyb3VwcygpO1xuXHRcdFx0XHRcblx0XHRcdFx0Z3JvdXBzLmZvckVhY2goKGdyb3VwKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5yZWNhbGNHcm91cChncm91cCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0cmVjYWxjR3JvdXAoZ3JvdXApe1xuXHRcdHZhciBkYXRhLCByb3dEYXRhO1xuXHRcdFxuXHRcdGlmKCF0aGlzLmJsb2NrQ2hlY2soKSl7XG5cdFx0XHRpZihncm91cCl7XG5cdFx0XHRcdGlmKGdyb3VwLmNhbGNzKXtcblx0XHRcdFx0XHRpZihncm91cC5jYWxjcy5ib3R0b20pe1xuXHRcdFx0XHRcdFx0ZGF0YSA9IHRoaXMucm93c1RvRGF0YShncm91cC5yb3dzKTtcblx0XHRcdFx0XHRcdHJvd0RhdGEgPSB0aGlzLmdlbmVyYXRlUm93RGF0YShcImJvdHRvbVwiLCBkYXRhKTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0Z3JvdXAuY2FsY3MuYm90dG9tLnVwZGF0ZURhdGEocm93RGF0YSk7XG5cdFx0XHRcdFx0XHRncm91cC5jYWxjcy5ib3R0b20ucmVpbml0aWFsaXplKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKGdyb3VwLmNhbGNzLnRvcCl7XG5cdFx0XHRcdFx0XHRkYXRhID0gdGhpcy5yb3dzVG9EYXRhKGdyb3VwLnJvd3MpO1xuXHRcdFx0XHRcdFx0cm93RGF0YSA9IHRoaXMuZ2VuZXJhdGVSb3dEYXRhKFwidG9wXCIsIGRhdGEpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRncm91cC5jYWxjcy50b3AudXBkYXRlRGF0YShyb3dEYXRhKTtcblx0XHRcdFx0XHRcdGdyb3VwLmNhbGNzLnRvcC5yZWluaXRpYWxpemUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdC8vZ2VuZXJhdGUgdG9wIHN0YXRzIHJvd1xuXHRnZW5lcmF0ZVRvcFJvdyhyb3dzKXtcblx0XHRyZXR1cm4gdGhpcy5nZW5lcmF0ZVJvdyhcInRvcFwiLCB0aGlzLnJvd3NUb0RhdGEocm93cykpO1xuXHR9XG5cdC8vZ2VuZXJhdGUgYm90dG9tIHN0YXRzIHJvd1xuXHRnZW5lcmF0ZUJvdHRvbVJvdyhyb3dzKXtcblx0XHRyZXR1cm4gdGhpcy5nZW5lcmF0ZVJvdyhcImJvdHRvbVwiLCB0aGlzLnJvd3NUb0RhdGEocm93cykpO1xuXHR9XG5cdFxuXHRyb3dzVG9EYXRhKHJvd3Mpe1xuXHRcdHZhciBkYXRhID0gW107XG5cdFx0XG5cdFx0cm93cy5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdGRhdGEucHVzaChyb3cuZ2V0RGF0YSgpKTtcblx0XHRcdFxuXHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmRhdGFUcmVlICYmIHRoaXMudGFibGUub3B0aW9ucy5kYXRhVHJlZUNoaWxkQ29sdW1uQ2FsY3Mpe1xuXHRcdFx0XHRpZihyb3cubW9kdWxlcy5kYXRhVHJlZSAmJiByb3cubW9kdWxlcy5kYXRhVHJlZS5vcGVuKXtcblx0XHRcdFx0XHR2YXIgY2hpbGRyZW4gPSB0aGlzLnJvd3NUb0RhdGEodGhpcy50YWJsZS5tb2R1bGVzLmRhdGFUcmVlLmdldEZpbHRlcmVkVHJlZUNoaWxkcmVuKHJvdykpO1xuXHRcdFx0XHRcdGRhdGEgPSBkYXRhLmNvbmNhdChjaGlsZHJlbik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gZGF0YTtcblx0fVxuXHRcblx0Ly9nZW5lcmF0ZSBzdGF0cyByb3dcblx0Z2VuZXJhdGVSb3cocG9zLCBkYXRhKXtcblx0XHR2YXIgcm93RGF0YSA9IHRoaXMuZ2VuZXJhdGVSb3dEYXRhKHBvcywgZGF0YSksXG5cdFx0cm93O1xuXHRcdFxuXHRcdGlmKHRoaXMudGFibGUubW9kRXhpc3RzKFwibXV0YXRvclwiKSl7XG5cdFx0XHR0aGlzLnRhYmxlLm1vZHVsZXMubXV0YXRvci5kaXNhYmxlKCk7XG5cdFx0fVxuXHRcdFxuXHRcdHJvdyA9IG5ldyBSb3cocm93RGF0YSwgdGhpcywgXCJjYWxjXCIpO1xuXHRcdFxuXHRcdGlmKHRoaXMudGFibGUubW9kRXhpc3RzKFwibXV0YXRvclwiKSl7XG5cdFx0XHR0aGlzLnRhYmxlLm1vZHVsZXMubXV0YXRvci5lbmFibGUoKTtcblx0XHR9XG5cdFx0XG5cdFx0cm93LmdldEVsZW1lbnQoKS5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWNhbGNzXCIsIFwidGFidWxhdG9yLWNhbGNzLVwiICsgcG9zKTtcblx0XHRcblx0XHRyb3cuY29tcG9uZW50ID0gZmFsc2U7XG5cdFx0XG5cdFx0cm93LmdldENvbXBvbmVudCA9ICgpID0+IHtcblx0XHRcdGlmKCFyb3cuY29tcG9uZW50KXtcblx0XHRcdFx0cm93LmNvbXBvbmVudCA9IG5ldyBDYWxjQ29tcG9uZW50KHJvdyk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHJldHVybiByb3cuY29tcG9uZW50O1xuXHRcdH07XG5cdFx0XG5cdFx0cm93LmdlbmVyYXRlQ2VsbHMgPSAoKSA9PiB7XG5cdFx0XHRcblx0XHRcdHZhciBjZWxscyA9IFtdO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuY29sdW1uc0J5SW5kZXguZm9yRWFjaCgoY29sdW1uKSA9PiB7XG5cdFx0XHRcdFxuXHRcdFx0XHQvL3NldCBmaWVsZCBuYW1lIG9mIG1vY2sgY29sdW1uXG5cdFx0XHRcdHRoaXMuZ2VuQ29sdW1uLnNldEZpZWxkKGNvbHVtbi5nZXRGaWVsZCgpKTtcblx0XHRcdFx0dGhpcy5nZW5Db2x1bW4uaG96QWxpZ24gPSBjb2x1bW4uaG96QWxpZ247XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihjb2x1bW4uZGVmaW5pdGlvbltwb3MgKyBcIkNhbGNGb3JtYXR0ZXJcIl0gJiYgdGhpcy50YWJsZS5tb2RFeGlzdHMoXCJmb3JtYXRcIikpe1xuXHRcdFx0XHRcdHRoaXMuZ2VuQ29sdW1uLm1vZHVsZXMuZm9ybWF0ID0ge1xuXHRcdFx0XHRcdFx0Zm9ybWF0dGVyOiB0aGlzLnRhYmxlLm1vZHVsZXMuZm9ybWF0LmdldEZvcm1hdHRlcihjb2x1bW4uZGVmaW5pdGlvbltwb3MgKyBcIkNhbGNGb3JtYXR0ZXJcIl0pLFxuXHRcdFx0XHRcdFx0cGFyYW1zOiBjb2x1bW4uZGVmaW5pdGlvbltwb3MgKyBcIkNhbGNGb3JtYXR0ZXJQYXJhbXNcIl0gfHwge30sXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuZ2VuQ29sdW1uLm1vZHVsZXMuZm9ybWF0ID0ge1xuXHRcdFx0XHRcdFx0Zm9ybWF0dGVyOiB0aGlzLnRhYmxlLm1vZHVsZXMuZm9ybWF0LmdldEZvcm1hdHRlcihcInBsYWludGV4dFwiKSxcblx0XHRcdFx0XHRcdHBhcmFtczp7fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdC8vZW5zdXJlIGNzcyBjbGFzcyBkZWZpbml0aW9uIGlzIHJlcGxpY2F0ZWQgdG8gY2FsY3VsYXRpb24gY2VsbFxuXHRcdFx0XHR0aGlzLmdlbkNvbHVtbi5kZWZpbml0aW9uLmNzc0NsYXNzID0gY29sdW1uLmRlZmluaXRpb24uY3NzQ2xhc3M7XG5cdFx0XHRcdFxuXHRcdFx0XHQvL2dlbmVyYXRlIGNlbGwgYW5kIGFzc2lnbiB0byBjb3JyZWN0IGNvbHVtblxuXHRcdFx0XHR2YXIgY2VsbCA9IG5ldyBDZWxsKHRoaXMuZ2VuQ29sdW1uLCByb3cpO1xuXHRcdFx0XHRjZWxsLmdldEVsZW1lbnQoKTtcblx0XHRcdFx0Y2VsbC5jb2x1bW4gPSBjb2x1bW47XG5cdFx0XHRcdGNlbGwuc2V0V2lkdGgoKTtcblx0XHRcdFx0XG5cdFx0XHRcdGNvbHVtbi5jZWxscy5wdXNoKGNlbGwpO1xuXHRcdFx0XHRjZWxscy5wdXNoKGNlbGwpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoIWNvbHVtbi52aXNpYmxlKXtcblx0XHRcdFx0XHRjZWxsLmhpZGUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdHJvdy5jZWxscyA9IGNlbGxzO1xuXHRcdH07XG5cdFx0XG5cdFx0cmV0dXJuIHJvdztcblx0fVxuXHRcblx0Ly9nZW5lcmF0ZSBzdGF0cyByb3dcblx0Z2VuZXJhdGVSb3dEYXRhKHBvcywgZGF0YSl7XG5cdFx0dmFyIHJvd0RhdGEgPSB7fSxcblx0XHRjYWxjcyA9IHBvcyA9PSBcInRvcFwiID8gdGhpcy50b3BDYWxjcyA6IHRoaXMuYm90Q2FsY3MsXG5cdFx0dHlwZSA9IHBvcyA9PSBcInRvcFwiID8gXCJ0b3BDYWxjXCIgOiBcImJvdENhbGNcIixcblx0XHRwYXJhbXMsIHBhcmFtS2V5O1xuXHRcdFxuXHRcdGNhbGNzLmZvckVhY2goZnVuY3Rpb24oY29sdW1uKXtcblx0XHRcdHZhciB2YWx1ZXMgPSBbXTtcblx0XHRcdFxuXHRcdFx0aWYoY29sdW1uLm1vZHVsZXMuY29sdW1uQ2FsY3MgJiYgY29sdW1uLm1vZHVsZXMuY29sdW1uQ2FsY3NbdHlwZV0pe1xuXHRcdFx0XHRkYXRhLmZvckVhY2goZnVuY3Rpb24oaXRlbSl7XG5cdFx0XHRcdFx0dmFsdWVzLnB1c2goY29sdW1uLmdldEZpZWxkVmFsdWUoaXRlbSkpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0XG5cdFx0XHRcdHBhcmFtS2V5ID0gdHlwZSArIFwiUGFyYW1zXCI7XG5cdFx0XHRcdHBhcmFtcyA9IHR5cGVvZiBjb2x1bW4ubW9kdWxlcy5jb2x1bW5DYWxjc1twYXJhbUtleV0gPT09IFwiZnVuY3Rpb25cIiA/IGNvbHVtbi5tb2R1bGVzLmNvbHVtbkNhbGNzW3BhcmFtS2V5XSh2YWx1ZXMsIGRhdGEpIDogY29sdW1uLm1vZHVsZXMuY29sdW1uQ2FsY3NbcGFyYW1LZXldO1xuXHRcdFx0XHRcblx0XHRcdFx0Y29sdW1uLnNldEZpZWxkVmFsdWUocm93RGF0YSwgY29sdW1uLm1vZHVsZXMuY29sdW1uQ2FsY3NbdHlwZV0odmFsdWVzLCBkYXRhLCBwYXJhbXMpKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gcm93RGF0YTtcblx0fVxuXHRcblx0aGFzVG9wQ2FsY3MoKXtcblx0XHRyZXR1cm5cdCEhKHRoaXMudG9wQ2FsY3MubGVuZ3RoKTtcblx0fVxuXHRcblx0aGFzQm90dG9tQ2FsY3MoKXtcblx0XHRyZXR1cm5cdCEhKHRoaXMuYm90Q2FsY3MubGVuZ3RoKTtcblx0fVxuXHRcblx0Ly9oYW5kbGUgdGFibGUgcmVkcmF3XG5cdHJlZHJhdygpe1xuXHRcdGlmKHRoaXMudG9wUm93KXtcblx0XHRcdHRoaXMudG9wUm93Lm5vcm1hbGl6ZUhlaWdodCh0cnVlKTtcblx0XHR9XG5cdFx0aWYodGhpcy5ib3RSb3cpe1xuXHRcdFx0dGhpcy5ib3RSb3cubm9ybWFsaXplSGVpZ2h0KHRydWUpO1xuXHRcdH1cblx0fVxuXHRcblx0Ly9yZXR1cm4gdGhlIGNhbGN1bGF0ZWRcblx0Z2V0UmVzdWx0cygpe1xuXHRcdHZhciByZXN1bHRzID0ge30sXG5cdFx0Z3JvdXBzO1xuXHRcdFxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5ncm91cEJ5ICYmIHRoaXMudGFibGUubW9kRXhpc3RzKFwiZ3JvdXBSb3dzXCIpKXtcblx0XHRcdGdyb3VwcyA9IHRoaXMudGFibGUubW9kdWxlcy5ncm91cFJvd3MuZ2V0R3JvdXBzKHRydWUpO1xuXHRcdFx0XG5cdFx0XHRncm91cHMuZm9yRWFjaCgoZ3JvdXApID0+IHtcblx0XHRcdFx0cmVzdWx0c1tncm91cC5nZXRLZXkoKV0gPSB0aGlzLmdldEdyb3VwUmVzdWx0cyhncm91cCk7XG5cdFx0XHR9KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRyZXN1bHRzID0ge1xuXHRcdFx0XHR0b3A6IHRoaXMudG9wUm93ID8gdGhpcy50b3BSb3cuZ2V0RGF0YSgpIDoge30sXG5cdFx0XHRcdGJvdHRvbTogdGhpcy5ib3RSb3cgPyB0aGlzLmJvdFJvdy5nZXREYXRhKCkgOiB7fSxcblx0XHRcdH07XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cdFxuXHQvL2dldCByZXN1bHRzIGZyb20gYSBncm91cFxuXHRnZXRHcm91cFJlc3VsdHMoZ3JvdXApe1xuXHRcdHZhciBncm91cE9iaiA9IGdyb3VwLl9nZXRTZWxmKCksXG5cdFx0c3ViR3JvdXBzID0gZ3JvdXAuZ2V0U3ViR3JvdXBzKCksXG5cdFx0c3ViR3JvdXBSZXN1bHRzID0ge30sXG5cdFx0cmVzdWx0cyA9IHt9O1xuXHRcdFxuXHRcdHN1Ykdyb3Vwcy5mb3JFYWNoKChzdWJncm91cCkgPT4ge1xuXHRcdFx0c3ViR3JvdXBSZXN1bHRzW3N1Ymdyb3VwLmdldEtleSgpXSA9IHRoaXMuZ2V0R3JvdXBSZXN1bHRzKHN1Ymdyb3VwKTtcblx0XHR9KTtcblx0XHRcblx0XHRyZXN1bHRzID0ge1xuXHRcdFx0dG9wOiBncm91cE9iai5jYWxjcy50b3AgPyBncm91cE9iai5jYWxjcy50b3AuZ2V0RGF0YSgpIDoge30sXG5cdFx0XHRib3R0b206IGdyb3VwT2JqLmNhbGNzLmJvdHRvbSA/IGdyb3VwT2JqLmNhbGNzLmJvdHRvbS5nZXREYXRhKCkgOiB7fSxcblx0XHRcdGdyb3Vwczogc3ViR3JvdXBSZXN1bHRzLFxuXHRcdH07XG5cdFx0XG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblx0XG5cdGFkanVzdEZvclNjcm9sbGJhcih3aWR0aCl7XG5cdFx0aWYodGhpcy5ib3RSb3cpe1xuXHRcdFx0aWYodGhpcy50YWJsZS5ydGwpe1xuXHRcdFx0XHR0aGlzLmJvdEVsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQgPSB3aWR0aCArIFwicHhcIjtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5ib3RFbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9IHdpZHRoICsgXCJweFwiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5Db2x1bW5DYWxjcy5tb2R1bGVOYW1lID0gXCJjb2x1bW5DYWxjc1wiO1xuXG4vL2xvYWQgZGVmYXVsdHNcbkNvbHVtbkNhbGNzLmNhbGN1bGF0aW9ucyA9IGRlZmF1bHRDYWxjdWxhdGlvbnM7XG5cbmNsYXNzIERhdGFUcmVlIGV4dGVuZHMgTW9kdWxle1xuXG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cblx0XHR0aGlzLmluZGVudCA9IDEwO1xuXHRcdHRoaXMuZmllbGQgPSBcIlwiO1xuXHRcdHRoaXMuY29sbGFwc2VFbCA9IG51bGw7XG5cdFx0dGhpcy5leHBhbmRFbCA9IG51bGw7XG5cdFx0dGhpcy5icmFuY2hFbCA9IG51bGw7XG5cdFx0dGhpcy5lbGVtZW50RmllbGQgPSBmYWxzZTtcblxuXHRcdHRoaXMuc3RhcnRPcGVuID0gZnVuY3Rpb24oKXt9O1xuXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZGF0YVRyZWVcIiwgZmFsc2UpOyAvL2VuYWJsZSBkYXRhIHRyZWVcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJkYXRhVHJlZUZpbHRlclwiLCB0cnVlKTsgLy9maWx0ZXIgY2hpbGQgcm93c1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImRhdGFUcmVlU29ydFwiLCB0cnVlKTsgLy9zb3J0IGNoaWxkIHJvd3Ncblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJkYXRhVHJlZUVsZW1lbnRDb2x1bW5cIiwgZmFsc2UpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImRhdGFUcmVlQnJhbmNoRWxlbWVudFwiLCB0cnVlKTsvL3Nob3cgZGF0YSB0cmVlIGJyYW5jaCBlbGVtZW50XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZGF0YVRyZWVDaGlsZEluZGVudFwiLCA5KTsgLy9kYXRhIHRyZWUgY2hpbGQgaW5kZW50IGluIHB4XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZGF0YVRyZWVDaGlsZEZpZWxkXCIsIFwiX2NoaWxkcmVuXCIpOy8vZGF0YSB0cmUgY29sdW1uIGZpZWxkIHRvIGxvb2sgZm9yIGNoaWxkIHJvd3Ncblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJkYXRhVHJlZUNvbGxhcHNlRWxlbWVudFwiLCBmYWxzZSk7Ly9kYXRhIHRyZWUgcm93IGNvbGxhcHNlIGVsZW1lbnRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJkYXRhVHJlZUV4cGFuZEVsZW1lbnRcIiwgZmFsc2UpOy8vZGF0YSB0cmVlIHJvdyBleHBhbmQgZWxlbWVudFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImRhdGFUcmVlU3RhcnRFeHBhbmRlZFwiLCBmYWxzZSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZGF0YVRyZWVDaGlsZENvbHVtbkNhbGNzXCIsIGZhbHNlKTsvL2luY2x1ZGUgdmlzaWJsZSBkYXRhIHRyZWUgcm93cyBpbiBjb2x1bW4gY2FsY3VsYXRpb25zXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZGF0YVRyZWVTZWxlY3RQcm9wYWdhdGVcIiwgZmFsc2UpOy8vc2VsZWN0aW5nIGEgcGFyZW50IHJvdyBzZWxlY3RzIGl0cyBjaGlsZHJlblxuXG5cdFx0Ly9yZWdpc3RlciBjb21wb25lbnQgZnVuY3Rpb25zXG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwicm93XCIsIFwidHJlZUNvbGxhcHNlXCIsIHRoaXMuY29sbGFwc2VSb3cuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwicm93XCIsIFwidHJlZUV4cGFuZFwiLCB0aGlzLmV4cGFuZFJvdy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJyb3dcIiwgXCJ0cmVlVG9nZ2xlXCIsIHRoaXMudG9nZ2xlUm93LmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcInJvd1wiLCBcImdldFRyZWVQYXJlbnRcIiwgdGhpcy5nZXRUcmVlUGFyZW50LmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcInJvd1wiLCBcImdldFRyZWVDaGlsZHJlblwiLCB0aGlzLmdldFJvd0NoaWxkcmVuLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcInJvd1wiLCBcImFkZFRyZWVDaGlsZFwiLCB0aGlzLmFkZFRyZWVDaGlsZFJvdy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJyb3dcIiwgXCJpc1RyZWVFeHBhbmRlZFwiLCB0aGlzLmlzUm93RXhwYW5kZWQuYmluZCh0aGlzKSk7XG5cdH1cblxuXHRpbml0aWFsaXplKCl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmRhdGFUcmVlKXtcblx0XHRcdHZhciBkdW1teUVsID0gbnVsbCxcblx0XHRcdG9wdGlvbnMgPSB0aGlzLnRhYmxlLm9wdGlvbnM7XG5cblx0XHRcdHRoaXMuZmllbGQgPSBvcHRpb25zLmRhdGFUcmVlQ2hpbGRGaWVsZDtcblx0XHRcdHRoaXMuaW5kZW50ID0gb3B0aW9ucy5kYXRhVHJlZUNoaWxkSW5kZW50O1xuXG5cdFx0XHRpZih0aGlzLm9wdGlvbnMoXCJtb3ZhYmxlUm93c1wiKSl7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIlRoZSBtb3ZhYmxlUm93cyBvcHRpb24gaXMgbm90IGF2YWlsYWJsZSB3aXRoIGRhdGFUcmVlIGVuYWJsZWQsIG1vdmluZyBvZiBjaGlsZCByb3dzIGNvdWxkIHJlc3VsdCBpbiB1bnByZWRpY3RhYmxlIGJlaGF2aW9yXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZihvcHRpb25zLmRhdGFUcmVlQnJhbmNoRWxlbWVudCl7XG5cblx0XHRcdFx0aWYob3B0aW9ucy5kYXRhVHJlZUJyYW5jaEVsZW1lbnQgPT09IHRydWUpe1xuXHRcdFx0XHRcdHRoaXMuYnJhbmNoRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdFx0XHRcdHRoaXMuYnJhbmNoRWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1kYXRhLXRyZWUtYnJhbmNoXCIpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0aWYodHlwZW9mIG9wdGlvbnMuZGF0YVRyZWVCcmFuY2hFbGVtZW50ID09PSBcInN0cmluZ1wiKXtcblx0XHRcdFx0XHRcdGR1bW15RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdFx0XHRcdFx0ZHVtbXlFbC5pbm5lckhUTUwgPSBvcHRpb25zLmRhdGFUcmVlQnJhbmNoRWxlbWVudDtcblx0XHRcdFx0XHRcdHRoaXMuYnJhbmNoRWwgPSBkdW1teUVsLmZpcnN0Q2hpbGQ7XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0dGhpcy5icmFuY2hFbCA9IG9wdGlvbnMuZGF0YVRyZWVCcmFuY2hFbGVtZW50O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmJyYW5jaEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcdFx0dGhpcy5icmFuY2hFbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWRhdGEtdHJlZS1icmFuY2gtZW1wdHlcIik7XG5cdFx0XHR9XG5cblx0XHRcdGlmKG9wdGlvbnMuZGF0YVRyZWVDb2xsYXBzZUVsZW1lbnQpe1xuXHRcdFx0XHRpZih0eXBlb2Ygb3B0aW9ucy5kYXRhVHJlZUNvbGxhcHNlRWxlbWVudCA9PT0gXCJzdHJpbmdcIil7XG5cdFx0XHRcdFx0ZHVtbXlFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XHRcdFx0ZHVtbXlFbC5pbm5lckhUTUwgPSBvcHRpb25zLmRhdGFUcmVlQ29sbGFwc2VFbGVtZW50O1xuXHRcdFx0XHRcdHRoaXMuY29sbGFwc2VFbCA9IGR1bW15RWwuZmlyc3RDaGlsZDtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuY29sbGFwc2VFbCA9IG9wdGlvbnMuZGF0YVRyZWVDb2xsYXBzZUVsZW1lbnQ7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5jb2xsYXBzZUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcdFx0dGhpcy5jb2xsYXBzZUVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2xcIik7XG5cdFx0XHRcdHRoaXMuY29sbGFwc2VFbC50YWJJbmRleCA9IDA7XG5cdFx0XHRcdHRoaXMuY29sbGFwc2VFbC5pbm5lckhUTUwgPSBcIjxkaXYgY2xhc3M9J3RhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbC1jb2xsYXBzZSc+PC9kaXY+XCI7XG5cdFx0XHR9XG5cblx0XHRcdGlmKG9wdGlvbnMuZGF0YVRyZWVFeHBhbmRFbGVtZW50KXtcblx0XHRcdFx0aWYodHlwZW9mIG9wdGlvbnMuZGF0YVRyZWVFeHBhbmRFbGVtZW50ID09PSBcInN0cmluZ1wiKXtcblx0XHRcdFx0XHRkdW1teUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcdFx0XHRkdW1teUVsLmlubmVySFRNTCA9IG9wdGlvbnMuZGF0YVRyZWVFeHBhbmRFbGVtZW50O1xuXHRcdFx0XHRcdHRoaXMuZXhwYW5kRWwgPSBkdW1teUVsLmZpcnN0Q2hpbGQ7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHR0aGlzLmV4cGFuZEVsID0gb3B0aW9ucy5kYXRhVHJlZUV4cGFuZEVsZW1lbnQ7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5leHBhbmRFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XHRcdHRoaXMuZXhwYW5kRWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1kYXRhLXRyZWUtY29udHJvbFwiKTtcblx0XHRcdFx0dGhpcy5leHBhbmRFbC50YWJJbmRleCA9IDA7XG5cdFx0XHRcdHRoaXMuZXhwYW5kRWwuaW5uZXJIVE1MID0gXCI8ZGl2IGNsYXNzPSd0YWJ1bGF0b3ItZGF0YS10cmVlLWNvbnRyb2wtZXhwYW5kJz48L2Rpdj5cIjtcblx0XHRcdH1cblxuXG5cdFx0XHRzd2l0Y2godHlwZW9mIG9wdGlvbnMuZGF0YVRyZWVTdGFydEV4cGFuZGVkKXtcblx0XHRcdFx0Y2FzZSBcImJvb2xlYW5cIjpcblx0XHRcdFx0XHR0aGlzLnN0YXJ0T3BlbiA9IGZ1bmN0aW9uKHJvdywgaW5kZXgpe1xuXHRcdFx0XHRcdFx0cmV0dXJuIG9wdGlvbnMuZGF0YVRyZWVTdGFydEV4cGFuZGVkO1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHRcdFx0dGhpcy5zdGFydE9wZW4gPSBvcHRpb25zLmRhdGFUcmVlU3RhcnRFeHBhbmRlZDtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHRoaXMuc3RhcnRPcGVuID0gZnVuY3Rpb24ocm93LCBpbmRleCl7XG5cdFx0XHRcdFx0XHRyZXR1cm4gb3B0aW9ucy5kYXRhVHJlZVN0YXJ0RXhwYW5kZWRbaW5kZXhdO1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWluaXRcIiwgdGhpcy5pbml0aWFsaXplUm93LmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctbGF5b3V0LWFmdGVyXCIsIHRoaXMubGF5b3V0Um93LmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctZGVsZXRlZFwiLCB0aGlzLnJvd0RlbGV0ZS5iaW5kKHRoaXMpLDApO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctZGF0YS1jaGFuZ2VkXCIsIHRoaXMucm93RGF0YUNoYW5nZWQuYmluZCh0aGlzKSwgMTApO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjZWxsLXZhbHVlLXVwZGF0ZWRcIiwgdGhpcy5jZWxsVmFsdWVDaGFuZ2VkLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJlZGl0LWNhbmNlbGxlZFwiLCB0aGlzLmNlbGxWYWx1ZUNoYW5nZWQuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1tb3Zpbmctcm93c1wiLCB0aGlzLmNvbHVtbk1vdmluZy5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwidGFibGUtYnVpbHRcIiwgdGhpcy5pbml0aWFsaXplRWxlbWVudEZpZWxkLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJ0YWJsZS1yZWRyYXdpbmdcIiwgdGhpcy50YWJsZVJlZHJhd2luZy5iaW5kKHRoaXMpKTtcblxuXHRcdFx0dGhpcy5yZWdpc3RlckRpc3BsYXlIYW5kbGVyKHRoaXMuZ2V0Um93cy5iaW5kKHRoaXMpLCAzMCk7XG5cdFx0fVxuXHR9XG5cblx0dGFibGVSZWRyYXdpbmcoZm9yY2Upe1xuXHRcdHZhciByb3dzO1xuXG5cdFx0aWYoZm9yY2Upe1xuXHRcdFx0cm93cyA9IHRoaXMudGFibGUucm93TWFuYWdlci5nZXRSb3dzKCk7XG5cdFx0XHRcblx0XHRcdHJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRcdHRoaXMucmVpbml0aWFsaXplUm93Q2hpbGRyZW4ocm93KTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdGluaXRpYWxpemVFbGVtZW50RmllbGQoKXtcblx0XHR2YXIgZmlyc3RDb2wgPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0Rmlyc3RWaXNpYmxlQ29sdW1uKCk7XG5cblx0XHR0aGlzLmVsZW1lbnRGaWVsZCA9IHRoaXMudGFibGUub3B0aW9ucy5kYXRhVHJlZUVsZW1lbnRDb2x1bW4gfHwgKGZpcnN0Q29sID8gZmlyc3RDb2wuZmllbGQgOiBmYWxzZSk7XG5cdH1cblx0XG5cdGdldFJvd0NoaWxkcmVuKHJvdyl7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0VHJlZUNoaWxkcmVuKHJvdywgdHJ1ZSk7XG5cdH1cblxuXHRjb2x1bW5Nb3ZpbmcoKXtcblx0XHR2YXIgcm93cyA9IFtdO1xuXG5cdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRyb3dzID0gcm93cy5jb25jYXQodGhpcy5nZXRUcmVlQ2hpbGRyZW4ocm93LCBmYWxzZSwgdHJ1ZSkpO1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIHJvd3M7XG5cdH1cblxuXHRyb3dEYXRhQ2hhbmdlZChyb3csIHZpc2libGUsIHVwZGF0ZWREYXRhKXtcblx0XHRpZih0aGlzLnJlZHJhd05lZWRlZCh1cGRhdGVkRGF0YSkpe1xuXHRcdFx0dGhpcy5pbml0aWFsaXplUm93KHJvdyk7XG5cblx0XHRcdGlmKHZpc2libGUpe1xuXHRcdFx0XHR0aGlzLmxheW91dFJvdyhyb3cpO1xuXHRcdFx0XHR0aGlzLnJlZnJlc2hEYXRhKHRydWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGNlbGxWYWx1ZUNoYW5nZWQoY2VsbCl7XG5cdFx0dmFyIGZpZWxkID0gY2VsbC5jb2x1bW4uZ2V0RmllbGQoKTtcblxuXHRcdGlmKGZpZWxkID09PSB0aGlzLmVsZW1lbnRGaWVsZCl7XG5cdFx0XHR0aGlzLmxheW91dFJvdyhjZWxsLnJvdyk7XG5cdFx0fVxuXHR9XG5cblx0aW5pdGlhbGl6ZVJvdyhyb3cpe1xuXHRcdHZhciBjaGlsZEFycmF5ID0gcm93LmdldERhdGEoKVt0aGlzLmZpZWxkXTtcblx0XHR2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkoY2hpbGRBcnJheSk7XG5cblx0XHR2YXIgY2hpbGRyZW4gPSBpc0FycmF5IHx8ICghaXNBcnJheSAmJiB0eXBlb2YgY2hpbGRBcnJheSA9PT0gXCJvYmplY3RcIiAmJiBjaGlsZEFycmF5ICE9PSBudWxsKTtcblxuXHRcdGlmKCFjaGlsZHJlbiAmJiByb3cubW9kdWxlcy5kYXRhVHJlZSAmJiByb3cubW9kdWxlcy5kYXRhVHJlZS5icmFuY2hFbCl7XG5cdFx0XHRyb3cubW9kdWxlcy5kYXRhVHJlZS5icmFuY2hFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHJvdy5tb2R1bGVzLmRhdGFUcmVlLmJyYW5jaEVsKTtcblx0XHR9XG5cblx0XHRpZighY2hpbGRyZW4gJiYgcm93Lm1vZHVsZXMuZGF0YVRyZWUgJiYgcm93Lm1vZHVsZXMuZGF0YVRyZWUuY29udHJvbEVsKXtcblx0XHRcdHJvdy5tb2R1bGVzLmRhdGFUcmVlLmNvbnRyb2xFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHJvdy5tb2R1bGVzLmRhdGFUcmVlLmNvbnRyb2xFbCk7XG5cdFx0fVxuXG5cdFx0cm93Lm1vZHVsZXMuZGF0YVRyZWUgPSB7XG5cdFx0XHRpbmRleDogcm93Lm1vZHVsZXMuZGF0YVRyZWUgPyByb3cubW9kdWxlcy5kYXRhVHJlZS5pbmRleCA6IDAsXG5cdFx0XHRvcGVuOiBjaGlsZHJlbiA/IChyb3cubW9kdWxlcy5kYXRhVHJlZSA/IHJvdy5tb2R1bGVzLmRhdGFUcmVlLm9wZW4gOiB0aGlzLnN0YXJ0T3Blbihyb3cuZ2V0Q29tcG9uZW50KCksIDApKSA6IGZhbHNlLFxuXHRcdFx0Y29udHJvbEVsOiByb3cubW9kdWxlcy5kYXRhVHJlZSAmJiBjaGlsZHJlbiA/IHJvdy5tb2R1bGVzLmRhdGFUcmVlLmNvbnRyb2xFbCA6IGZhbHNlLFxuXHRcdFx0YnJhbmNoRWw6IHJvdy5tb2R1bGVzLmRhdGFUcmVlICYmIGNoaWxkcmVuID8gcm93Lm1vZHVsZXMuZGF0YVRyZWUuYnJhbmNoRWwgOiBmYWxzZSxcblx0XHRcdHBhcmVudDogcm93Lm1vZHVsZXMuZGF0YVRyZWUgPyByb3cubW9kdWxlcy5kYXRhVHJlZS5wYXJlbnQgOiBmYWxzZSxcblx0XHRcdGNoaWxkcmVuOmNoaWxkcmVuLFxuXHRcdH07XG5cdH1cblxuXHRyZWluaXRpYWxpemVSb3dDaGlsZHJlbihyb3cpe1xuXHRcdHZhciBjaGlsZHJlbiA9IHRoaXMuZ2V0VHJlZUNoaWxkcmVuKHJvdywgZmFsc2UsIHRydWUpO1xuXG5cdFx0Y2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbihjaGlsZCl7XG5cdFx0XHRjaGlsZC5yZWluaXRpYWxpemUodHJ1ZSk7XG5cdFx0fSk7XG5cdH1cblxuXHRsYXlvdXRSb3cocm93KXtcblx0XHR2YXIgY2VsbCA9IHRoaXMuZWxlbWVudEZpZWxkID8gcm93LmdldENlbGwodGhpcy5lbGVtZW50RmllbGQpIDogcm93LmdldENlbGxzKClbMF0sXG5cdFx0ZWwgPSBjZWxsLmdldEVsZW1lbnQoKSxcblx0XHRjb25maWcgPSByb3cubW9kdWxlcy5kYXRhVHJlZTtcblxuXHRcdGlmKGNvbmZpZy5icmFuY2hFbCl7XG5cdFx0XHRpZihjb25maWcuYnJhbmNoRWwucGFyZW50Tm9kZSl7XG5cdFx0XHRcdGNvbmZpZy5icmFuY2hFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNvbmZpZy5icmFuY2hFbCk7XG5cdFx0XHR9XG5cdFx0XHRjb25maWcuYnJhbmNoRWwgPSBmYWxzZTtcblx0XHR9XG5cblx0XHRpZihjb25maWcuY29udHJvbEVsKXtcblx0XHRcdGlmKGNvbmZpZy5jb250cm9sRWwucGFyZW50Tm9kZSl7XG5cdFx0XHRcdGNvbmZpZy5jb250cm9sRWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjb25maWcuY29udHJvbEVsKTtcblx0XHRcdH1cblx0XHRcdGNvbmZpZy5jb250cm9sRWwgPSBmYWxzZTtcblx0XHR9XG5cblx0XHR0aGlzLmdlbmVyYXRlQ29udHJvbEVsZW1lbnQocm93LCBlbCk7XG5cblx0XHRyb3cuZ2V0RWxlbWVudCgpLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItdHJlZS1sZXZlbC1cIiArIGNvbmZpZy5pbmRleCk7XG5cblx0XHRpZihjb25maWcuaW5kZXgpe1xuXHRcdFx0aWYodGhpcy5icmFuY2hFbCl7XG5cdFx0XHRcdGNvbmZpZy5icmFuY2hFbCA9IHRoaXMuYnJhbmNoRWwuY2xvbmVOb2RlKHRydWUpO1xuXHRcdFx0XHRlbC5pbnNlcnRCZWZvcmUoY29uZmlnLmJyYW5jaEVsLCBlbC5maXJzdENoaWxkKTtcblxuXHRcdFx0XHRpZih0aGlzLnRhYmxlLnJ0bCl7XG5cdFx0XHRcdFx0Y29uZmlnLmJyYW5jaEVsLnN0eWxlLm1hcmdpblJpZ2h0ID0gKCgoY29uZmlnLmJyYW5jaEVsLm9mZnNldFdpZHRoICsgY29uZmlnLmJyYW5jaEVsLnN0eWxlLm1hcmdpbkxlZnQpICogKGNvbmZpZy5pbmRleCAtIDEpKSArIChjb25maWcuaW5kZXggKiB0aGlzLmluZGVudCkpICsgXCJweFwiO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0Y29uZmlnLmJyYW5jaEVsLnN0eWxlLm1hcmdpbkxlZnQgPSAoKChjb25maWcuYnJhbmNoRWwub2Zmc2V0V2lkdGggKyBjb25maWcuYnJhbmNoRWwuc3R5bGUubWFyZ2luUmlnaHQpICogKGNvbmZpZy5pbmRleCAtIDEpKSArIChjb25maWcuaW5kZXggKiB0aGlzLmluZGVudCkpICsgXCJweFwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSB7XG5cblx0XHRcdFx0aWYodGhpcy50YWJsZS5ydGwpe1xuXHRcdFx0XHRcdGVsLnN0eWxlLnBhZGRpbmdSaWdodCA9IHBhcnNlSW50KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKCdwYWRkaW5nLXJpZ2h0JykpICsgKGNvbmZpZy5pbmRleCAqIHRoaXMuaW5kZW50KSArIFwicHhcIjtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGVsLnN0eWxlLnBhZGRpbmdMZWZ0ID0gcGFyc2VJbnQod2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctbGVmdCcpKSArIChjb25maWcuaW5kZXggKiB0aGlzLmluZGVudCkgKyBcInB4XCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRnZW5lcmF0ZUNvbnRyb2xFbGVtZW50KHJvdywgZWwpe1xuXHRcdHZhciBjb25maWcgPSByb3cubW9kdWxlcy5kYXRhVHJlZSxcblx0XHRvbGRDb250cm9sID0gY29uZmlnLmNvbnRyb2xFbDtcblxuXHRcdGVsID0gZWwgfHwgcm93LmdldENlbGxzKClbMF0uZ2V0RWxlbWVudCgpO1xuXG5cdFx0aWYoY29uZmlnLmNoaWxkcmVuICE9PSBmYWxzZSl7XG5cblx0XHRcdGlmKGNvbmZpZy5vcGVuKXtcblx0XHRcdFx0Y29uZmlnLmNvbnRyb2xFbCA9IHRoaXMuY29sbGFwc2VFbC5jbG9uZU5vZGUodHJ1ZSk7XG5cdFx0XHRcdGNvbmZpZy5jb250cm9sRWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG5cdFx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHR0aGlzLmNvbGxhcHNlUm93KHJvdyk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb25maWcuY29udHJvbEVsID0gdGhpcy5leHBhbmRFbC5jbG9uZU5vZGUodHJ1ZSk7XG5cdFx0XHRcdGNvbmZpZy5jb250cm9sRWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG5cdFx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHR0aGlzLmV4cGFuZFJvdyhyb3cpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0Y29uZmlnLmNvbnRyb2xFbC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIChlKSA9PiB7XG5cdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHR9KTtcblxuXHRcdFx0aWYob2xkQ29udHJvbCAmJiBvbGRDb250cm9sLnBhcmVudE5vZGUgPT09IGVsKXtcblx0XHRcdFx0b2xkQ29udHJvbC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChjb25maWcuY29udHJvbEVsLG9sZENvbnRyb2wpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRlbC5pbnNlcnRCZWZvcmUoY29uZmlnLmNvbnRyb2xFbCwgZWwuZmlyc3RDaGlsZCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Z2V0Um93cyhyb3dzKXtcblx0XHR2YXIgb3V0cHV0ID0gW107XG5cblx0XHRyb3dzLmZvckVhY2goKHJvdywgaSkgPT4ge1xuXHRcdFx0dmFyIGNvbmZpZywgY2hpbGRyZW47XG5cblx0XHRcdG91dHB1dC5wdXNoKHJvdyk7XG5cblx0XHRcdGlmKHJvdyBpbnN0YW5jZW9mIFJvdyl7XG5cblx0XHRcdFx0cm93LmNyZWF0ZSgpO1xuXG5cdFx0XHRcdGNvbmZpZyA9IHJvdy5tb2R1bGVzLmRhdGFUcmVlO1xuXG5cdFx0XHRcdGlmKCFjb25maWcuaW5kZXggJiYgY29uZmlnLmNoaWxkcmVuICE9PSBmYWxzZSl7XG5cdFx0XHRcdFx0Y2hpbGRyZW4gPSB0aGlzLmdldENoaWxkcmVuKHJvdyk7XG5cblx0XHRcdFx0XHRjaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4ge1xuXHRcdFx0XHRcdFx0Y2hpbGQuY3JlYXRlKCk7XG5cdFx0XHRcdFx0XHRvdXRwdXQucHVzaChjaGlsZCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblxuXHRnZXRDaGlsZHJlbihyb3csIGFsbENoaWxkcmVuKXtcblx0XHR2YXIgY29uZmlnID0gcm93Lm1vZHVsZXMuZGF0YVRyZWUsXG5cdFx0Y2hpbGRyZW4gPSBbXSxcblx0XHRvdXRwdXQgPSBbXTtcblxuXHRcdGlmKGNvbmZpZy5jaGlsZHJlbiAhPT0gZmFsc2UgJiYgKGNvbmZpZy5vcGVuIHx8IGFsbENoaWxkcmVuKSl7XG5cdFx0XHRpZighQXJyYXkuaXNBcnJheShjb25maWcuY2hpbGRyZW4pKXtcblx0XHRcdFx0Y29uZmlnLmNoaWxkcmVuID0gdGhpcy5nZW5lcmF0ZUNoaWxkcmVuKHJvdyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmKHRoaXMudGFibGUubW9kRXhpc3RzKFwiZmlsdGVyXCIpICYmIHRoaXMudGFibGUub3B0aW9ucy5kYXRhVHJlZUZpbHRlcil7XG5cdFx0XHRcdGNoaWxkcmVuID0gdGhpcy50YWJsZS5tb2R1bGVzLmZpbHRlci5maWx0ZXIoY29uZmlnLmNoaWxkcmVuKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0Y2hpbGRyZW4gPSBjb25maWcuY2hpbGRyZW47XG5cdFx0XHR9XG5cblx0XHRcdGlmKHRoaXMudGFibGUubW9kRXhpc3RzKFwic29ydFwiKSAmJiB0aGlzLnRhYmxlLm9wdGlvbnMuZGF0YVRyZWVTb3J0KXtcblx0XHRcdFx0dGhpcy50YWJsZS5tb2R1bGVzLnNvcnQuc29ydChjaGlsZHJlbik7XG5cdFx0XHR9XG5cblx0XHRcdGNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiB7XG5cdFx0XHRcdG91dHB1dC5wdXNoKGNoaWxkKTtcblxuXHRcdFx0XHR2YXIgc3ViQ2hpbGRyZW4gPSB0aGlzLmdldENoaWxkcmVuKGNoaWxkKTtcblxuXHRcdFx0XHRzdWJDaGlsZHJlbi5mb3JFYWNoKChzdWIpID0+IHtcblx0XHRcdFx0XHRvdXRwdXQucHVzaChzdWIpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblxuXHRnZW5lcmF0ZUNoaWxkcmVuKHJvdyl7XG5cdFx0dmFyIGNoaWxkcmVuID0gW107XG5cblx0XHR2YXIgY2hpbGRBcnJheSA9IHJvdy5nZXREYXRhKClbdGhpcy5maWVsZF07XG5cblx0XHRpZighQXJyYXkuaXNBcnJheShjaGlsZEFycmF5KSl7XG5cdFx0XHRjaGlsZEFycmF5ID0gW2NoaWxkQXJyYXldO1xuXHRcdH1cblxuXHRcdGNoaWxkQXJyYXkuZm9yRWFjaCgoY2hpbGREYXRhKSA9PiB7XG5cdFx0XHR2YXIgY2hpbGRSb3cgPSBuZXcgUm93KGNoaWxkRGF0YSB8fCB7fSwgdGhpcy50YWJsZS5yb3dNYW5hZ2VyKTtcblxuXHRcdFx0Y2hpbGRSb3cuY3JlYXRlKCk7XG5cblx0XHRcdGNoaWxkUm93Lm1vZHVsZXMuZGF0YVRyZWUuaW5kZXggPSByb3cubW9kdWxlcy5kYXRhVHJlZS5pbmRleCArIDE7XG5cdFx0XHRjaGlsZFJvdy5tb2R1bGVzLmRhdGFUcmVlLnBhcmVudCA9IHJvdztcblxuXHRcdFx0aWYoY2hpbGRSb3cubW9kdWxlcy5kYXRhVHJlZS5jaGlsZHJlbil7XG5cdFx0XHRcdGNoaWxkUm93Lm1vZHVsZXMuZGF0YVRyZWUub3BlbiA9IHRoaXMuc3RhcnRPcGVuKGNoaWxkUm93LmdldENvbXBvbmVudCgpLCBjaGlsZFJvdy5tb2R1bGVzLmRhdGFUcmVlLmluZGV4KTtcblx0XHRcdH1cblx0XHRcdGNoaWxkcmVuLnB1c2goY2hpbGRSb3cpO1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIGNoaWxkcmVuO1xuXHR9XG5cblx0ZXhwYW5kUm93KHJvdywgc2lsZW50KXtcblx0XHR2YXIgY29uZmlnID0gcm93Lm1vZHVsZXMuZGF0YVRyZWU7XG5cblx0XHRpZihjb25maWcuY2hpbGRyZW4gIT09IGZhbHNlKXtcblx0XHRcdGNvbmZpZy5vcGVuID0gdHJ1ZTtcblxuXHRcdFx0cm93LnJlaW5pdGlhbGl6ZSgpO1xuXG5cdFx0XHR0aGlzLnJlZnJlc2hEYXRhKHRydWUpO1xuXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJkYXRhVHJlZVJvd0V4cGFuZGVkXCIsIHJvdy5nZXRDb21wb25lbnQoKSwgcm93Lm1vZHVsZXMuZGF0YVRyZWUuaW5kZXgpO1xuXHRcdH1cblx0fVxuXG5cdGNvbGxhcHNlUm93KHJvdyl7XG5cdFx0dmFyIGNvbmZpZyA9IHJvdy5tb2R1bGVzLmRhdGFUcmVlO1xuXG5cdFx0aWYoY29uZmlnLmNoaWxkcmVuICE9PSBmYWxzZSl7XG5cdFx0XHRjb25maWcub3BlbiA9IGZhbHNlO1xuXG5cdFx0XHRyb3cucmVpbml0aWFsaXplKCk7XG5cblx0XHRcdHRoaXMucmVmcmVzaERhdGEodHJ1ZSk7XG5cblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcImRhdGFUcmVlUm93Q29sbGFwc2VkXCIsIHJvdy5nZXRDb21wb25lbnQoKSwgcm93Lm1vZHVsZXMuZGF0YVRyZWUuaW5kZXgpO1xuXHRcdH1cblx0fVxuXG5cdHRvZ2dsZVJvdyhyb3cpe1xuXHRcdHZhciBjb25maWcgPSByb3cubW9kdWxlcy5kYXRhVHJlZTtcblxuXHRcdGlmKGNvbmZpZy5jaGlsZHJlbiAhPT0gZmFsc2Upe1xuXHRcdFx0aWYoY29uZmlnLm9wZW4pe1xuXHRcdFx0XHR0aGlzLmNvbGxhcHNlUm93KHJvdyk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMuZXhwYW5kUm93KHJvdyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aXNSb3dFeHBhbmRlZChyb3cpe1xuXHRcdHJldHVybiByb3cubW9kdWxlcy5kYXRhVHJlZS5vcGVuO1xuXHR9XG5cblx0Z2V0VHJlZVBhcmVudChyb3cpe1xuXHRcdHJldHVybiByb3cubW9kdWxlcy5kYXRhVHJlZS5wYXJlbnQgPyByb3cubW9kdWxlcy5kYXRhVHJlZS5wYXJlbnQuZ2V0Q29tcG9uZW50KCkgOiBmYWxzZTtcblx0fVxuXG5cdGdldFRyZWVQYXJlbnRSb290KHJvdyl7XG5cdFx0cmV0dXJuIHJvdy5tb2R1bGVzLmRhdGFUcmVlICYmIHJvdy5tb2R1bGVzLmRhdGFUcmVlLnBhcmVudCA/IHRoaXMuZ2V0VHJlZVBhcmVudFJvb3Qocm93Lm1vZHVsZXMuZGF0YVRyZWUucGFyZW50KSA6IHJvdztcblx0fVxuXG5cdGdldEZpbHRlcmVkVHJlZUNoaWxkcmVuKHJvdyl7XG5cdFx0dmFyIGNvbmZpZyA9IHJvdy5tb2R1bGVzLmRhdGFUcmVlLFxuXHRcdG91dHB1dCA9IFtdLCBjaGlsZHJlbjtcblxuXHRcdGlmKGNvbmZpZy5jaGlsZHJlbil7XG5cblx0XHRcdGlmKCFBcnJheS5pc0FycmF5KGNvbmZpZy5jaGlsZHJlbikpe1xuXHRcdFx0XHRjb25maWcuY2hpbGRyZW4gPSB0aGlzLmdlbmVyYXRlQ2hpbGRyZW4ocm93KTtcblx0XHRcdH1cblxuXHRcdFx0aWYodGhpcy50YWJsZS5tb2RFeGlzdHMoXCJmaWx0ZXJcIikgJiYgdGhpcy50YWJsZS5vcHRpb25zLmRhdGFUcmVlRmlsdGVyKXtcblx0XHRcdFx0Y2hpbGRyZW4gPSB0aGlzLnRhYmxlLm1vZHVsZXMuZmlsdGVyLmZpbHRlcihjb25maWcuY2hpbGRyZW4pO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjaGlsZHJlbiA9IGNvbmZpZy5jaGlsZHJlbjtcblx0XHRcdH1cblxuXHRcdFx0Y2hpbGRyZW4uZm9yRWFjaCgoY2hpbGRSb3cpID0+IHtcblx0XHRcdFx0aWYoY2hpbGRSb3cgaW5zdGFuY2VvZiBSb3cpe1xuXHRcdFx0XHRcdG91dHB1dC5wdXNoKGNoaWxkUm93KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdHJvd0RlbGV0ZShyb3cpe1xuXHRcdHZhciBwYXJlbnQgPSByb3cubW9kdWxlcy5kYXRhVHJlZS5wYXJlbnQsXG5cdFx0Y2hpbGRJbmRleDtcblxuXHRcdGlmKHBhcmVudCl7XG5cdFx0XHRjaGlsZEluZGV4ID0gdGhpcy5maW5kQ2hpbGRJbmRleChyb3csIHBhcmVudCk7XG5cblx0XHRcdGlmKGNoaWxkSW5kZXggIT09IGZhbHNlKXtcblx0XHRcdFx0cGFyZW50LmRhdGFbdGhpcy5maWVsZF0uc3BsaWNlKGNoaWxkSW5kZXgsIDEpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZighcGFyZW50LmRhdGFbdGhpcy5maWVsZF0ubGVuZ3RoKXtcblx0XHRcdFx0ZGVsZXRlIHBhcmVudC5kYXRhW3RoaXMuZmllbGRdO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmluaXRpYWxpemVSb3cocGFyZW50KTtcblx0XHRcdHRoaXMubGF5b3V0Um93KHBhcmVudCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5yZWZyZXNoRGF0YSh0cnVlKTtcblx0fVxuXG5cdGFkZFRyZWVDaGlsZFJvdyhyb3csIGRhdGEsIHRvcCwgaW5kZXgpe1xuXHRcdHZhciBjaGlsZEluZGV4ID0gZmFsc2U7XG5cblx0XHRpZih0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIil7XG5cdFx0XHRkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcblx0XHR9XG5cblx0XHRpZighQXJyYXkuaXNBcnJheShyb3cuZGF0YVt0aGlzLmZpZWxkXSkpe1xuXHRcdFx0cm93LmRhdGFbdGhpcy5maWVsZF0gPSBbXTtcblxuXHRcdFx0cm93Lm1vZHVsZXMuZGF0YVRyZWUub3BlbiA9IHRoaXMuc3RhcnRPcGVuKHJvdy5nZXRDb21wb25lbnQoKSwgcm93Lm1vZHVsZXMuZGF0YVRyZWUuaW5kZXgpO1xuXHRcdH1cblxuXHRcdGlmKHR5cGVvZiBpbmRleCAhPT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRjaGlsZEluZGV4ID0gdGhpcy5maW5kQ2hpbGRJbmRleChpbmRleCwgcm93KTtcblxuXHRcdFx0aWYoY2hpbGRJbmRleCAhPT0gZmFsc2Upe1xuXHRcdFx0XHRyb3cuZGF0YVt0aGlzLmZpZWxkXS5zcGxpY2UoKHRvcCA/IGNoaWxkSW5kZXggOiBjaGlsZEluZGV4ICsgMSksIDAsIGRhdGEpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmKGNoaWxkSW5kZXggPT09IGZhbHNlKXtcblx0XHRcdGlmKHRvcCl7XG5cdFx0XHRcdHJvdy5kYXRhW3RoaXMuZmllbGRdLnVuc2hpZnQoZGF0YSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHJvdy5kYXRhW3RoaXMuZmllbGRdLnB1c2goZGF0YSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy5pbml0aWFsaXplUm93KHJvdyk7XG5cdFx0dGhpcy5sYXlvdXRSb3cocm93KTtcblxuXHRcdHRoaXMucmVmcmVzaERhdGEodHJ1ZSk7XG5cdH1cblxuXHRmaW5kQ2hpbGRJbmRleChzdWJqZWN0LCBwYXJlbnQpe1xuXHRcdHZhciBtYXRjaCA9IGZhbHNlO1xuXG5cdFx0aWYodHlwZW9mIHN1YmplY3QgPT0gXCJvYmplY3RcIil7XG5cblx0XHRcdGlmKHN1YmplY3QgaW5zdGFuY2VvZiBSb3cpe1xuXHRcdFx0XHQvL3N1YmplY3QgaXMgcm93IGVsZW1lbnRcblx0XHRcdFx0bWF0Y2ggPSBzdWJqZWN0LmRhdGE7XG5cdFx0XHR9ZWxzZSBpZihzdWJqZWN0IGluc3RhbmNlb2YgUm93Q29tcG9uZW50KXtcblx0XHRcdFx0Ly9zdWJqZWN0IGlzIHB1YmxpYyByb3cgY29tcG9uZW50XG5cdFx0XHRcdG1hdGNoID0gc3ViamVjdC5fZ2V0U2VsZigpLmRhdGE7XG5cdFx0XHR9ZWxzZSBpZih0eXBlb2YgSFRNTEVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgc3ViamVjdCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KXtcblx0XHRcdFx0aWYocGFyZW50Lm1vZHVsZXMuZGF0YVRyZWUpe1xuXHRcdFx0XHRcdG1hdGNoID0gcGFyZW50Lm1vZHVsZXMuZGF0YVRyZWUuY2hpbGRyZW4uZmluZCgoY2hpbGRSb3cpID0+IHtcblx0XHRcdFx0XHRcdHJldHVybiBjaGlsZFJvdyBpbnN0YW5jZW9mIFJvdyA/IGNoaWxkUm93LmVsZW1lbnQgPT09IHN1YmplY3QgOiBmYWxzZTtcblx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdGlmKG1hdGNoKXtcblx0XHRcdFx0XHRcdG1hdGNoID0gbWF0Y2guZGF0YTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIGlmKHN1YmplY3QgPT09IG51bGwpe1xuXHRcdFx0XHRtYXRjaCA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0fWVsc2UgaWYodHlwZW9mIHN1YmplY3QgPT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRtYXRjaCA9IGZhbHNlO1xuXHRcdH1lbHNlIHtcblx0XHRcdC8vc3ViamVjdCBzaG91bGQgYmUgdHJlYXRlZCBhcyB0aGUgaW5kZXggb2YgdGhlIHJvd1xuXHRcdFx0bWF0Y2ggPSBwYXJlbnQuZGF0YVt0aGlzLmZpZWxkXS5maW5kKChyb3cpID0+IHtcblx0XHRcdFx0cmV0dXJuIHJvdy5kYXRhW3RoaXMudGFibGUub3B0aW9ucy5pbmRleF0gPT0gc3ViamVjdDtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmKG1hdGNoKXtcblxuXHRcdFx0aWYoQXJyYXkuaXNBcnJheShwYXJlbnQuZGF0YVt0aGlzLmZpZWxkXSkpe1xuXHRcdFx0XHRtYXRjaCA9IHBhcmVudC5kYXRhW3RoaXMuZmllbGRdLmluZGV4T2YobWF0Y2gpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZihtYXRjaCA9PSAtMSl7XG5cdFx0XHRcdG1hdGNoID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly9jYXRjaCBhbGwgZm9yIGFueSBvdGhlciB0eXBlIG9mIGlucHV0XG5cblx0XHRyZXR1cm4gbWF0Y2g7XG5cdH1cblxuXHRnZXRUcmVlQ2hpbGRyZW4ocm93LCBjb21wb25lbnQsIHJlY3Vyc2Upe1xuXHRcdHZhciBjb25maWcgPSByb3cubW9kdWxlcy5kYXRhVHJlZSxcblx0XHRvdXRwdXQgPSBbXTtcblxuXHRcdGlmKGNvbmZpZyAmJiBjb25maWcuY2hpbGRyZW4pe1xuXG5cdFx0XHRpZighQXJyYXkuaXNBcnJheShjb25maWcuY2hpbGRyZW4pKXtcblx0XHRcdFx0Y29uZmlnLmNoaWxkcmVuID0gdGhpcy5nZW5lcmF0ZUNoaWxkcmVuKHJvdyk7XG5cdFx0XHR9XG5cblx0XHRcdGNvbmZpZy5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZFJvdykgPT4ge1xuXHRcdFx0XHRpZihjaGlsZFJvdyBpbnN0YW5jZW9mIFJvdyl7XG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goY29tcG9uZW50ID8gY2hpbGRSb3cuZ2V0Q29tcG9uZW50KCkgOiBjaGlsZFJvdyk7XG5cblx0XHRcdFx0XHRpZihyZWN1cnNlKXtcblx0XHRcdFx0XHRcdG91dHB1dCA9IG91dHB1dC5jb25jYXQodGhpcy5nZXRUcmVlQ2hpbGRyZW4oY2hpbGRSb3csIGNvbXBvbmVudCwgcmVjdXJzZSkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdGdldENoaWxkRmllbGQoKXtcblx0XHRyZXR1cm4gdGhpcy5maWVsZDtcblx0fVxuXG5cdHJlZHJhd05lZWRlZChkYXRhKXtcblx0XHRyZXR1cm4gKHRoaXMuZmllbGQgPyB0eXBlb2YgZGF0YVt0aGlzLmZpZWxkXSAhPT0gXCJ1bmRlZmluZWRcIiA6IGZhbHNlKSB8fCAodGhpcy5lbGVtZW50RmllbGQgPyB0eXBlb2YgZGF0YVt0aGlzLmVsZW1lbnRGaWVsZF0gIT09IFwidW5kZWZpbmVkXCIgOiBmYWxzZSk7XG5cdH1cbn1cblxuRGF0YVRyZWUubW9kdWxlTmFtZSA9IFwiZGF0YVRyZWVcIjtcblxuZnVuY3Rpb24gY3N2KGxpc3QsIG9wdGlvbnMgPSB7fSwgc2V0RmlsZUNvbnRlbnRzKXtcblx0dmFyIGRlbGltaXRlciA9IG9wdGlvbnMuZGVsaW1pdGVyID8gb3B0aW9ucy5kZWxpbWl0ZXIgOiBcIixcIixcblx0ZmlsZUNvbnRlbnRzID0gW10sXG5cdGhlYWRlcnMgPSBbXTtcblxuXHRsaXN0LmZvckVhY2goKHJvdykgPT4ge1xuXHRcdHZhciBpdGVtID0gW107XG5cblx0XHRzd2l0Y2gocm93LnR5cGUpe1xuXHRcdFx0Y2FzZSBcImdyb3VwXCI6XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIkRvd25sb2FkIFdhcm5pbmcgLSBDU1YgZG93bmxvYWRlciBjYW5ub3QgcHJvY2VzcyByb3cgZ3JvdXBzXCIpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcImNhbGNcIjpcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiRG93bmxvYWQgV2FybmluZyAtIENTViBkb3dubG9hZGVyIGNhbm5vdCBwcm9jZXNzIGNvbHVtbiBjYWxjdWxhdGlvbnNcIik7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwiaGVhZGVyXCI6XG5cdFx0XHRcdHJvdy5jb2x1bW5zLmZvckVhY2goKGNvbCwgaSkgPT4ge1xuXHRcdFx0XHRcdGlmKGNvbCAmJiBjb2wuZGVwdGggPT09IDEpe1xuXHRcdFx0XHRcdFx0aGVhZGVyc1tpXSA9IHR5cGVvZiBjb2wudmFsdWUgPT0gXCJ1bmRlZmluZWRcIiAgfHwgY29sLnZhbHVlID09PSBudWxsID8gXCJcIiA6ICgnXCInICsgU3RyaW5nKGNvbC52YWx1ZSkuc3BsaXQoJ1wiJykuam9pbignXCJcIicpICsgJ1wiJyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgXCJyb3dcIjpcblx0XHRcdFx0cm93LmNvbHVtbnMuZm9yRWFjaCgoY29sKSA9PiB7XG5cblx0XHRcdFx0XHRpZihjb2wpe1xuXG5cdFx0XHRcdFx0XHRzd2l0Y2godHlwZW9mIGNvbC52YWx1ZSl7XG5cdFx0XHRcdFx0XHRcdGNhc2UgXCJvYmplY3RcIjpcblx0XHRcdFx0XHRcdFx0XHRjb2wudmFsdWUgPSBjb2wudmFsdWUgIT09IG51bGwgPyBKU09OLnN0cmluZ2lmeShjb2wudmFsdWUpIDogXCJcIjtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0XHRjYXNlIFwidW5kZWZpbmVkXCI6XG5cdFx0XHRcdFx0XHRcdFx0Y29sLnZhbHVlID0gXCJcIjtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aXRlbS5wdXNoKCdcIicgKyBTdHJpbmcoY29sLnZhbHVlKS5zcGxpdCgnXCInKS5qb2luKCdcIlwiJykgKyAnXCInKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGZpbGVDb250ZW50cy5wdXNoKGl0ZW0uam9pbihkZWxpbWl0ZXIpKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9KTtcblxuXHRpZihoZWFkZXJzLmxlbmd0aCl7XG5cdFx0ZmlsZUNvbnRlbnRzLnVuc2hpZnQoaGVhZGVycy5qb2luKGRlbGltaXRlcikpO1xuXHR9XG5cblx0ZmlsZUNvbnRlbnRzID0gZmlsZUNvbnRlbnRzLmpvaW4oXCJcXG5cIik7XG5cblx0aWYob3B0aW9ucy5ib20pe1xuXHRcdGZpbGVDb250ZW50cyA9IFwiXFx1ZmVmZlwiICsgZmlsZUNvbnRlbnRzO1xuXHR9XG5cblx0c2V0RmlsZUNvbnRlbnRzKGZpbGVDb250ZW50cywgXCJ0ZXh0L2NzdlwiKTtcbn1cblxuZnVuY3Rpb24ganNvbihsaXN0LCBvcHRpb25zLCBzZXRGaWxlQ29udGVudHMpe1xuXHR2YXIgZmlsZUNvbnRlbnRzID0gW107XG5cblx0bGlzdC5mb3JFYWNoKChyb3cpID0+IHtcblx0XHR2YXIgaXRlbSA9IHt9O1xuXG5cdFx0c3dpdGNoKHJvdy50eXBlKXtcblx0XHRcdGNhc2UgXCJoZWFkZXJcIjpcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgXCJncm91cFwiOlxuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJEb3dubG9hZCBXYXJuaW5nIC0gSlNPTiBkb3dubG9hZGVyIGNhbm5vdCBwcm9jZXNzIHJvdyBncm91cHNcIik7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwiY2FsY1wiOlxuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJEb3dubG9hZCBXYXJuaW5nIC0gSlNPTiBkb3dubG9hZGVyIGNhbm5vdCBwcm9jZXNzIGNvbHVtbiBjYWxjdWxhdGlvbnNcIik7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwicm93XCI6XG5cdFx0XHRcdHJvdy5jb2x1bW5zLmZvckVhY2goKGNvbCkgPT4ge1xuXHRcdFx0XHRcdGlmKGNvbCl7XG5cdFx0XHRcdFx0XHRpdGVtW2NvbC5jb21wb25lbnQuZ2V0VGl0bGVEb3dubG9hZCgpIHx8IGNvbC5jb21wb25lbnQuZ2V0RmllbGQoKV0gPSBjb2wudmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRmaWxlQ29udGVudHMucHVzaChpdGVtKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9KTtcblxuXHRmaWxlQ29udGVudHMgPSBKU09OLnN0cmluZ2lmeShmaWxlQ29udGVudHMsIG51bGwsICdcXHQnKTtcblxuXHRzZXRGaWxlQ29udGVudHMoZmlsZUNvbnRlbnRzLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XG59XG5cbmZ1bmN0aW9uIHBkZihsaXN0LCBvcHRpb25zID0ge30sIHNldEZpbGVDb250ZW50cyl7XG5cdHZhciBoZWFkZXIgPSBbXSxcblx0Ym9keSA9IFtdLFxuXHRhdXRvVGFibGVQYXJhbXMgPSB7fSxcblx0cm93R3JvdXBTdHlsZXMgPSBvcHRpb25zLnJvd0dyb3VwU3R5bGVzIHx8IHtcblx0XHRmb250U3R5bGU6IFwiYm9sZFwiLFxuXHRcdGZvbnRTaXplOiAxMixcblx0XHRjZWxsUGFkZGluZzogNixcblx0XHRmaWxsQ29sb3I6IDIyMCxcblx0fSxcblx0cm93Q2FsY1N0eWxlcyA9IG9wdGlvbnMucm93Q2FsY1N0eWxlcyB8fCB7XG5cdFx0Zm9udFN0eWxlOiBcImJvbGRcIixcblx0XHRmb250U2l6ZTogMTAsXG5cdFx0Y2VsbFBhZGRpbmc6IDQsXG5cdFx0ZmlsbENvbG9yOiAyMzIsXG5cdH0sXG5cdGpzUERGUGFyYW1zID0gb3B0aW9ucy5qc1BERiB8fCB7fSxcblx0dGl0bGUgPSBvcHRpb25zLnRpdGxlID8gb3B0aW9ucy50aXRsZSA6IFwiXCI7XG5cblx0aWYoIWpzUERGUGFyYW1zLm9yaWVudGF0aW9uKXtcblx0XHRqc1BERlBhcmFtcy5vcmllbnRhdGlvbiA9IG9wdGlvbnMub3JpZW50YXRpb24gfHwgXCJsYW5kc2NhcGVcIjtcblx0fVxuXG5cdGlmKCFqc1BERlBhcmFtcy51bml0KXtcblx0XHRqc1BERlBhcmFtcy51bml0ID0gXCJwdFwiO1xuXHR9XG5cblx0Ly9wYXJzZSByb3cgbGlzdFxuXHRsaXN0LmZvckVhY2goKHJvdykgPT4ge1xuXHRcdHN3aXRjaChyb3cudHlwZSl7XG5cdFx0XHRjYXNlIFwiaGVhZGVyXCI6XG5cdFx0XHRcdGhlYWRlci5wdXNoKHBhcnNlUm93KHJvdykpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcImdyb3VwXCI6XG5cdFx0XHRcdGJvZHkucHVzaChwYXJzZVJvdyhyb3csIHJvd0dyb3VwU3R5bGVzKSk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwiY2FsY1wiOlxuXHRcdFx0XHRib2R5LnB1c2gocGFyc2VSb3cocm93LCByb3dDYWxjU3R5bGVzKSk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwicm93XCI6XG5cdFx0XHRcdGJvZHkucHVzaChwYXJzZVJvdyhyb3cpKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9KTtcblxuXHRmdW5jdGlvbiBwYXJzZVJvdyhyb3csIHN0eWxlcyl7XG5cdFx0dmFyIHJvd0RhdGEgPSBbXTtcblxuXHRcdHJvdy5jb2x1bW5zLmZvckVhY2goKGNvbCkgPT57XG5cdFx0XHR2YXIgY2VsbDtcblxuXHRcdFx0aWYoY29sKXtcblx0XHRcdFx0c3dpdGNoKHR5cGVvZiBjb2wudmFsdWUpe1xuXHRcdFx0XHRcdGNhc2UgXCJvYmplY3RcIjpcblx0XHRcdFx0XHRcdGNvbC52YWx1ZSA9IGNvbC52YWx1ZSAhPT0gbnVsbCA/IEpTT04uc3RyaW5naWZ5KGNvbC52YWx1ZSkgOiBcIlwiO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlIFwidW5kZWZpbmVkXCI6XG5cdFx0XHRcdFx0XHRjb2wudmFsdWUgPSBcIlwiO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjZWxsID0ge1xuXHRcdFx0XHRcdGNvbnRlbnQ6Y29sLnZhbHVlLFxuXHRcdFx0XHRcdGNvbFNwYW46Y29sLndpZHRoLFxuXHRcdFx0XHRcdHJvd1NwYW46Y29sLmhlaWdodCxcblx0XHRcdFx0fTtcblxuXHRcdFx0XHRpZihzdHlsZXMpe1xuXHRcdFx0XHRcdGNlbGwuc3R5bGVzID0gc3R5bGVzO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cm93RGF0YS5wdXNoKGNlbGwpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIHJvd0RhdGE7XG5cdH1cblxuXG5cdC8vY29uZmlndXJlIFBERlxuXHR2YXIgZG9jID0gbmV3IGpzcGRmLmpzUERGKGpzUERGUGFyYW1zKTsgLy9zZXQgZG9jdW1lbnQgdG8gbGFuZHNjYXBlLCBiZXR0ZXIgZm9yIG1vc3QgdGFibGVzXG5cblx0aWYob3B0aW9ucy5hdXRvVGFibGUpe1xuXHRcdGlmKHR5cGVvZiBvcHRpb25zLmF1dG9UYWJsZSA9PT0gXCJmdW5jdGlvblwiKXtcblx0XHRcdGF1dG9UYWJsZVBhcmFtcyA9IG9wdGlvbnMuYXV0b1RhYmxlKGRvYykgfHwge307XG5cdFx0fWVsc2Uge1xuXHRcdFx0YXV0b1RhYmxlUGFyYW1zID0gb3B0aW9ucy5hdXRvVGFibGU7XG5cdFx0fVxuXHR9XG5cblx0aWYodGl0bGUpe1xuXHRcdGF1dG9UYWJsZVBhcmFtcy5kaWREcmF3UGFnZSA9IGZ1bmN0aW9uKGRhdGEpIHtcblx0XHRcdGRvYy50ZXh0KHRpdGxlLCA0MCwgMzApO1xuXHRcdH07XG5cdH1cblxuXHRhdXRvVGFibGVQYXJhbXMuaGVhZCA9IGhlYWRlcjtcblx0YXV0b1RhYmxlUGFyYW1zLmJvZHkgPSBib2R5O1xuXG5cdGRvYy5hdXRvVGFibGUoYXV0b1RhYmxlUGFyYW1zKTtcblxuXHRpZihvcHRpb25zLmRvY3VtZW50UHJvY2Vzc2luZyl7XG5cdFx0b3B0aW9ucy5kb2N1bWVudFByb2Nlc3NpbmcoZG9jKTtcblx0fVxuXG5cdHNldEZpbGVDb250ZW50cyhkb2Mub3V0cHV0KFwiYXJyYXlidWZmZXJcIiksIFwiYXBwbGljYXRpb24vcGRmXCIpO1xufVxuXG5mdW5jdGlvbiB4bHN4KGxpc3QsIG9wdGlvbnMsIHNldEZpbGVDb250ZW50cyl7XG5cdHZhciBzZWxmID0gdGhpcyxcblx0c2hlZXROYW1lID0gb3B0aW9ucy5zaGVldE5hbWUgfHwgXCJTaGVldDFcIixcblx0d29ya2Jvb2sgPSBYTFNYLnV0aWxzLmJvb2tfbmV3KCksXG5cdHRhYmxlRmVhdHVyZXMgPSBuZXcgQ29yZUZlYXR1cmUodGhpcyksXG5cdGNvbXByZXNzaW9uID0gICdjb21wcmVzcycgaW4gb3B0aW9ucyA/IG9wdGlvbnMuY29tcHJlc3MgOiB0cnVlLFxuXHR3cml0ZU9wdGlvbnMgPSBvcHRpb25zLndyaXRlT3B0aW9ucyB8fCB7Ym9va1R5cGU6J3hsc3gnLCBib29rU1NUOnRydWUsIGNvbXByZXNzaW9ufSxcblx0b3V0cHV0O1xuXG5cdHdyaXRlT3B0aW9ucy50eXBlID0gJ2JpbmFyeSc7XG5cblx0d29ya2Jvb2suU2hlZXROYW1lcyA9IFtdO1xuXHR3b3JrYm9vay5TaGVldHMgPSB7fTtcblxuXHRmdW5jdGlvbiBnZW5lcmF0ZVNoZWV0KCl7XG5cdFx0dmFyIHJvd3MgPSBbXSxcblx0XHRtZXJnZXMgPSBbXSxcblx0XHR3b3Jrc2hlZXQgPSB7fSxcblx0XHRyYW5nZSA9IHtzOiB7YzowLCByOjB9LCBlOiB7YzoobGlzdFswXSA/IGxpc3RbMF0uY29sdW1ucy5yZWR1Y2UoKGEsIGIpID0+IGEgKyAoYiAmJiBiLndpZHRoID8gYi53aWR0aCA6IDEpLCAwKSA6IDApLCByOmxpc3QubGVuZ3RoIH19O1xuXG5cdFx0Ly9wYXJzZSByb3cgbGlzdFxuXHRcdGxpc3QuZm9yRWFjaCgocm93LCBpKSA9PiB7XG5cdFx0XHR2YXIgcm93RGF0YSA9IFtdO1xuXG5cdFx0XHRyb3cuY29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uKGNvbCwgail7XG5cblx0XHRcdFx0aWYoY29sKXtcblx0XHRcdFx0XHRyb3dEYXRhLnB1c2goIShjb2wudmFsdWUgaW5zdGFuY2VvZiBEYXRlKSAmJiB0eXBlb2YgY29sLnZhbHVlID09PSBcIm9iamVjdFwiID8gSlNPTi5zdHJpbmdpZnkoY29sLnZhbHVlKSA6IGNvbC52YWx1ZSk7XG5cblx0XHRcdFx0XHRpZihjb2wud2lkdGggPiAxIHx8IGNvbC5oZWlnaHQgPiAtMSl7XG5cdFx0XHRcdFx0XHRpZihjb2wuaGVpZ2h0ID4gMSB8fCBjb2wud2lkdGggPiAxKXtcblx0XHRcdFx0XHRcdFx0bWVyZ2VzLnB1c2goe3M6e3I6aSxjOmp9LGU6e3I6aSArIGNvbC5oZWlnaHQgLSAxLGM6aiArIGNvbC53aWR0aCAtIDF9fSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0cm93RGF0YS5wdXNoKFwiXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0cm93cy5wdXNoKHJvd0RhdGEpO1xuXHRcdH0pO1xuXG5cdFx0Ly9jb252ZXJ0IHJvd3MgdG8gd29ya3NoZWV0XG5cdFx0WExTWC51dGlscy5zaGVldF9hZGRfYW9hKHdvcmtzaGVldCwgcm93cyk7XG5cblx0XHR3b3Jrc2hlZXRbJyFyZWYnXSA9IFhMU1gudXRpbHMuZW5jb2RlX3JhbmdlKHJhbmdlKTtcblxuXHRcdGlmKG1lcmdlcy5sZW5ndGgpe1xuXHRcdFx0d29ya3NoZWV0W1wiIW1lcmdlc1wiXSA9IG1lcmdlcztcblx0XHR9XG5cblx0XHRyZXR1cm4gd29ya3NoZWV0O1xuXHR9XG5cblx0aWYob3B0aW9ucy5zaGVldE9ubHkpe1xuXHRcdHNldEZpbGVDb250ZW50cyhnZW5lcmF0ZVNoZWV0KCkpO1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGlmKG9wdGlvbnMuc2hlZXRzKXtcblx0XHRmb3IodmFyIHNoZWV0IGluIG9wdGlvbnMuc2hlZXRzKXtcblxuXHRcdFx0aWYob3B0aW9ucy5zaGVldHNbc2hlZXRdID09PSB0cnVlKXtcblx0XHRcdFx0d29ya2Jvb2suU2hlZXROYW1lcy5wdXNoKHNoZWV0KTtcblx0XHRcdFx0d29ya2Jvb2suU2hlZXRzW3NoZWV0XSA9IGdlbmVyYXRlU2hlZXQoKTtcblx0XHRcdH1lbHNlIHtcblxuXHRcdFx0XHR3b3JrYm9vay5TaGVldE5hbWVzLnB1c2goc2hlZXQpO1xuXG5cdFx0XHRcdHRhYmxlRmVhdHVyZXMuY29tbXNTZW5kKG9wdGlvbnMuc2hlZXRzW3NoZWV0XSwgXCJkb3dubG9hZFwiLCBcImludGVyY2VwdFwiLHtcblx0XHRcdFx0XHR0eXBlOlwieGxzeFwiLFxuXHRcdFx0XHRcdG9wdGlvbnM6e3NoZWV0T25seTp0cnVlfSxcblx0XHRcdFx0XHRhY3RpdmU6c2VsZi5hY3RpdmUsXG5cdFx0XHRcdFx0aW50ZXJjZXB0OmZ1bmN0aW9uKGRhdGEpe1xuXHRcdFx0XHRcdFx0d29ya2Jvb2suU2hlZXRzW3NoZWV0XSA9IGRhdGE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cdH1lbHNlIHtcblx0XHR3b3JrYm9vay5TaGVldE5hbWVzLnB1c2goc2hlZXROYW1lKTtcblx0XHR3b3JrYm9vay5TaGVldHNbc2hlZXROYW1lXSA9IGdlbmVyYXRlU2hlZXQoKTtcblx0fVxuXG5cdGlmKG9wdGlvbnMuZG9jdW1lbnRQcm9jZXNzaW5nKXtcblx0XHR3b3JrYm9vayA9IG9wdGlvbnMuZG9jdW1lbnRQcm9jZXNzaW5nKHdvcmtib29rKTtcblx0fVxuXG5cdC8vY29udmVydCB3b3JrYm9vayB0byBiaW5hcnkgYXJyYXlcblx0ZnVuY3Rpb24gczJhYihzKSB7XG5cdFx0dmFyIGJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcihzLmxlbmd0aCk7XG5cdFx0dmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYpO1xuXHRcdGZvciAodmFyIGk9MDsgaSE9cy5sZW5ndGg7ICsraSkgdmlld1tpXSA9IHMuY2hhckNvZGVBdChpKSAmIDB4RkY7XG5cdFx0cmV0dXJuIGJ1Zjtcblx0fVxuXG5cdG91dHB1dCA9IFhMU1gud3JpdGUod29ya2Jvb2ssIHdyaXRlT3B0aW9ucyk7XG5cblx0c2V0RmlsZUNvbnRlbnRzKHMyYWIob3V0cHV0KSwgXCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIik7XG59XG5cbmZ1bmN0aW9uIGh0bWwobGlzdCwgb3B0aW9ucywgc2V0RmlsZUNvbnRlbnRzKXtcblx0aWYodGhpcy5tb2RFeGlzdHMoXCJleHBvcnRcIiwgdHJ1ZSkpe1xuXHRcdHNldEZpbGVDb250ZW50cyh0aGlzLm1vZHVsZXMuZXhwb3J0LmdlbmVyYXRlSFRNTFRhYmxlKGxpc3QpLCBcInRleHQvaHRtbFwiKTtcblx0fVxufVxuXG5mdW5jdGlvbiBqc29uTGluZXMgKGxpc3QsIG9wdGlvbnMsIHNldEZpbGVDb250ZW50cykge1xuXHRjb25zdCBmaWxlQ29udGVudHMgPSBbXTtcblxuXHRsaXN0LmZvckVhY2goKHJvdykgPT4ge1xuXHRcdGNvbnN0IGl0ZW0gPSB7fTtcblxuXHRcdHN3aXRjaCAocm93LnR5cGUpIHtcblx0XHRcdGNhc2UgXCJoZWFkZXJcIjpcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgXCJncm91cFwiOlxuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJEb3dubG9hZCBXYXJuaW5nIC0gSlNPTiBkb3dubG9hZGVyIGNhbm5vdCBwcm9jZXNzIHJvdyBncm91cHNcIik7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwiY2FsY1wiOlxuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJEb3dubG9hZCBXYXJuaW5nIC0gSlNPTiBkb3dubG9hZGVyIGNhbm5vdCBwcm9jZXNzIGNvbHVtbiBjYWxjdWxhdGlvbnNcIik7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwicm93XCI6XG5cdFx0XHRcdHJvdy5jb2x1bW5zLmZvckVhY2goKGNvbCkgPT4ge1xuXHRcdFx0XHRcdGlmIChjb2wpIHtcblx0XHRcdFx0XHRcdGl0ZW1bY29sLmNvbXBvbmVudC5nZXRUaXRsZURvd25sb2FkKCkgfHwgY29sLmNvbXBvbmVudC5nZXRGaWVsZCgpXSA9IGNvbC52YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGZpbGVDb250ZW50cy5wdXNoKEpTT04uc3RyaW5naWZ5KGl0ZW0pKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9KTtcblxuXHRzZXRGaWxlQ29udGVudHMoZmlsZUNvbnRlbnRzLmpvaW4oXCJcXG5cIiksIFwiYXBwbGljYXRpb24veC1uZGpzb25cIik7XG59XG5cbnZhciBkZWZhdWx0RG93bmxvYWRlcnMgPSB7XG5cdGNzdjpjc3YsXG5cdGpzb246anNvbixcblx0anNvbkxpbmVzOmpzb25MaW5lcyxcblx0cGRmOnBkZixcblx0eGxzeDp4bHN4LFxuXHRodG1sOmh0bWwsXG59O1xuXG5jbGFzcyBEb3dubG9hZCBleHRlbmRzIE1vZHVsZXtcblxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZG93bmxvYWRFbmNvZGVyXCIsIGZ1bmN0aW9uKGRhdGEsIG1pbWVUeXBlKXtcblx0XHRcdHJldHVybiBuZXcgQmxvYihbZGF0YV0se3R5cGU6bWltZVR5cGV9KTtcblx0XHR9KTsgLy9mdW5jdGlvbiB0byBtYW5pcHVsYXRlIGRvd25sb2FkIGRhdGFcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJkb3dubG9hZFJlYWR5XCIsIHVuZGVmaW5lZCk7IC8vd2FybiBvZiBmdW5jdGlvbiBkZXByZWNhdGlvblxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImRvd25sb2FkQ29uZmlnXCIsIHt9KTsgLy9kb3dubG9hZCBjb25maWdcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJkb3dubG9hZFJvd1JhbmdlXCIsIFwiYWN0aXZlXCIpOyAvL3Jlc3RyaWN0IGRvd25sb2FkIHRvIGFjdGl2ZSByb3dzIG9ubHlcblxuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJkb3dubG9hZFwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwidGl0bGVEb3dubG9hZFwiKTtcblx0fVxuXG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLmRlcHJlY2F0ZWRPcHRpb25zQ2hlY2soKTtcblxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiZG93bmxvYWRcIiwgdGhpcy5kb3dubG9hZC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcImRvd25sb2FkVG9UYWJcIiwgdGhpcy5kb3dubG9hZFRvVGFiLmJpbmQodGhpcykpO1xuXHR9XG5cblx0ZGVwcmVjYXRlZE9wdGlvbnNDaGVjaygpe1xuXHRcdHRoaXMuZGVwcmVjYXRpb25DaGVjayhcImRvd25sb2FkUmVhZHlcIiwgXCJkb3dubG9hZEVuY29kZXJcIik7XG5cdH1cdFxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLyBUYWJsZSBGdW5jdGlvbnMgLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0ZG93bmxvYWRUb1RhYih0eXBlLCBmaWxlbmFtZSwgb3B0aW9ucywgYWN0aXZlKXtcblx0XHR0aGlzLmRvd25sb2FkKHR5cGUsIGZpbGVuYW1lLCBvcHRpb25zLCBhY3RpdmUsIHRydWUpO1xuXHR9XG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vIEludGVybmFsIExvZ2ljIC8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXHQvL3RyaWdnZXIgZmlsZSBkb3dubG9hZFxuXHRkb3dubG9hZCh0eXBlLCBmaWxlbmFtZSwgb3B0aW9ucywgcmFuZ2UsIGludGVyY2VwdENhbGxiYWNrKXtcblx0XHR2YXIgZG93bmxvYWRGdW5jID0gZmFsc2U7XG5cblx0XHRmdW5jdGlvbiBidWlsZExpbmsoZGF0YSwgbWltZSl7XG5cdFx0XHRpZihpbnRlcmNlcHRDYWxsYmFjayl7XG5cdFx0XHRcdGlmKGludGVyY2VwdENhbGxiYWNrID09PSB0cnVlKXtcblx0XHRcdFx0XHR0aGlzLnRyaWdnZXJEb3dubG9hZChkYXRhLCBtaW1lLCB0eXBlLCBmaWxlbmFtZSwgdHJ1ZSk7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRpbnRlcmNlcHRDYWxsYmFjayhkYXRhKTtcblx0XHRcdFx0fVxuXG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMudHJpZ2dlckRvd25sb2FkKGRhdGEsIG1pbWUsIHR5cGUsIGZpbGVuYW1lKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZih0eXBlb2YgdHlwZSA9PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0ZG93bmxvYWRGdW5jID0gdHlwZTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRpZihEb3dubG9hZC5kb3dubG9hZGVyc1t0eXBlXSl7XG5cdFx0XHRcdGRvd25sb2FkRnVuYyA9IERvd25sb2FkLmRvd25sb2FkZXJzW3R5cGVdO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJEb3dubG9hZCBFcnJvciAtIE5vIHN1Y2ggZG93bmxvYWQgdHlwZSBmb3VuZDogXCIsIHR5cGUpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmKGRvd25sb2FkRnVuYyl7XG5cdFx0XHR2YXIgbGlzdCA9IHRoaXMuZ2VuZXJhdGVFeHBvcnRMaXN0KHJhbmdlKTtcblxuXHRcdFx0ZG93bmxvYWRGdW5jLmNhbGwodGhpcy50YWJsZSwgbGlzdCAsIG9wdGlvbnMgfHwge30sIGJ1aWxkTGluay5iaW5kKHRoaXMpKTtcblx0XHR9XG5cdH1cblxuXHRnZW5lcmF0ZUV4cG9ydExpc3QocmFuZ2Upe1xuXHRcdHZhciBsaXN0ID0gdGhpcy50YWJsZS5tb2R1bGVzLmV4cG9ydC5nZW5lcmF0ZUV4cG9ydExpc3QodGhpcy50YWJsZS5vcHRpb25zLmRvd25sb2FkQ29uZmlnLCBmYWxzZSwgcmFuZ2UgfHwgdGhpcy50YWJsZS5vcHRpb25zLmRvd25sb2FkUm93UmFuZ2UsIFwiZG93bmxvYWRcIik7XG5cblx0XHQvL2Fzc2lnbiBncm91cCBoZWFkZXIgZm9ybWF0dGVyXG5cdFx0dmFyIGdyb3VwSGVhZGVyID0gdGhpcy50YWJsZS5vcHRpb25zLmdyb3VwSGVhZGVyRG93bmxvYWQ7XG5cblx0XHRpZihncm91cEhlYWRlciAmJiAhQXJyYXkuaXNBcnJheShncm91cEhlYWRlcikpe1xuXHRcdFx0Z3JvdXBIZWFkZXIgPSBbZ3JvdXBIZWFkZXJdO1xuXHRcdH1cblxuXHRcdGxpc3QuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHR2YXIgZ3JvdXA7XG5cblx0XHRcdGlmKHJvdy50eXBlID09PSBcImdyb3VwXCIpe1xuXHRcdFx0XHRncm91cCA9IHJvdy5jb2x1bW5zWzBdO1xuXG5cdFx0XHRcdGlmKGdyb3VwSGVhZGVyICYmIGdyb3VwSGVhZGVyW3Jvdy5pbmRlbnRdKXtcblx0XHRcdFx0XHRncm91cC52YWx1ZSA9IGdyb3VwSGVhZGVyW3Jvdy5pbmRlbnRdKGdyb3VwLnZhbHVlLCByb3cuY29tcG9uZW50Ll9ncm91cC5nZXRSb3dDb3VudCgpLCByb3cuY29tcG9uZW50Ll9ncm91cC5nZXREYXRhKCksIHJvdy5jb21wb25lbnQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gbGlzdDtcblx0fVxuXG5cdHRyaWdnZXJEb3dubG9hZChkYXRhLCBtaW1lLCB0eXBlLCBmaWxlbmFtZSwgbmV3VGFiKXtcblx0XHR2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKSxcblx0XHRibG9iID0gdGhpcy50YWJsZS5vcHRpb25zLmRvd25sb2FkRW5jb2RlcihkYXRhLCBtaW1lKTtcblxuXHRcdGlmKGJsb2Ipe1xuXHRcdFx0aWYobmV3VGFiKXtcblx0XHRcdFx0d2luZG93Lm9wZW4od2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYikpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRmaWxlbmFtZSA9IGZpbGVuYW1lIHx8IFwiVGFidWxhdG9yLlwiICsgKHR5cGVvZiB0eXBlID09PSBcImZ1bmN0aW9uXCIgPyBcInR4dFwiIDogdHlwZSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihuYXZpZ2F0b3IubXNTYXZlT3JPcGVuQmxvYil7XG5cdFx0XHRcdFx0bmF2aWdhdG9yLm1zU2F2ZU9yT3BlbkJsb2IoYmxvYiwgZmlsZW5hbWUpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKSk7XG5cblx0XHRcdFx0XHQvL3NldCBmaWxlIHRpdGxlXG5cdFx0XHRcdFx0ZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2Rvd25sb2FkJywgZmlsZW5hbWUpO1xuXG5cdFx0XHRcdFx0Ly90cmlnZ2VyIGRvd25sb2FkXG5cdFx0XHRcdFx0ZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXHRcdFx0XHRcdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG5cdFx0XHRcdFx0ZWxlbWVudC5jbGljaygpO1xuXG5cdFx0XHRcdFx0Ly9yZW1vdmUgdGVtcG9yYXJ5IGxpbmsgZWxlbWVudFxuXHRcdFx0XHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwiZG93bmxvYWRDb21wbGV0ZVwiKTtcblx0XHR9XG5cdH1cblxuXHRjb21tc1JlY2VpdmVkKHRhYmxlLCBhY3Rpb24sIGRhdGEpe1xuXHRcdHN3aXRjaChhY3Rpb24pe1xuXHRcdFx0Y2FzZSBcImludGVyY2VwdFwiOlxuXHRcdFx0XHR0aGlzLmRvd25sb2FkKGRhdGEudHlwZSwgXCJcIiwgZGF0YS5vcHRpb25zLCBkYXRhLmFjdGl2ZSwgZGF0YS5pbnRlcmNlcHQpO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH1cbn1cblxuRG93bmxvYWQubW9kdWxlTmFtZSA9IFwiZG93bmxvYWRcIjtcblxuLy9sb2FkIGRlZmF1bHRzXG5Eb3dubG9hZC5kb3dubG9hZGVycyA9IGRlZmF1bHREb3dubG9hZGVycztcblxuZnVuY3Rpb24gbWFza0lucHV0KGVsLCBvcHRpb25zKXtcblx0dmFyIG1hc2sgPSBvcHRpb25zLm1hc2ssXG5cdG1hc2tMZXR0ZXIgPSB0eXBlb2Ygb3B0aW9ucy5tYXNrTGV0dGVyQ2hhciAhPT0gXCJ1bmRlZmluZWRcIiA/IG9wdGlvbnMubWFza0xldHRlckNoYXIgOiBcIkFcIixcblx0bWFza051bWJlciA9IHR5cGVvZiBvcHRpb25zLm1hc2tOdW1iZXJDaGFyICE9PSBcInVuZGVmaW5lZFwiID8gb3B0aW9ucy5tYXNrTnVtYmVyQ2hhciA6IFwiOVwiLFxuXHRtYXNrV2lsZGNhcmQgPSB0eXBlb2Ygb3B0aW9ucy5tYXNrV2lsZGNhcmRDaGFyICE9PSBcInVuZGVmaW5lZFwiID8gb3B0aW9ucy5tYXNrV2lsZGNhcmRDaGFyIDogXCIqXCI7XG5cblx0ZnVuY3Rpb24gZmlsbFN5bWJvbHMoaW5kZXgpe1xuXHRcdHZhciBzeW1ib2wgPSBtYXNrW2luZGV4XTtcblx0XHRpZih0eXBlb2Ygc3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIHN5bWJvbCAhPT0gbWFza1dpbGRjYXJkICYmIHN5bWJvbCAhPT0gbWFza0xldHRlciAmJiBzeW1ib2wgIT09IG1hc2tOdW1iZXIpe1xuXHRcdFx0ZWwudmFsdWUgPSBlbC52YWx1ZSArIFwiXCIgKyBzeW1ib2w7XG5cdFx0XHRmaWxsU3ltYm9scyhpbmRleCsxKTtcblx0XHR9XG5cdH1cblxuXHRlbC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCAoZSkgPT4ge1xuXHRcdHZhciBpbmRleCA9IGVsLnZhbHVlLmxlbmd0aCxcblx0XHRjaGFyID0gZS5rZXk7XG5cblx0XHRpZihlLmtleUNvZGUgPiA0NiAmJiAhZS5jdHJsS2V5ICYmICFlLm1ldGFLZXkpe1xuXHRcdFx0aWYoaW5kZXggPj0gbWFzay5sZW5ndGgpe1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0c3dpdGNoKG1hc2tbaW5kZXhdKXtcblx0XHRcdFx0XHRjYXNlIG1hc2tMZXR0ZXI6XG5cdFx0XHRcdFx0XHRpZihjaGFyLnRvVXBwZXJDYXNlKCkgPT0gY2hhci50b0xvd2VyQ2FzZSgpKXtcblx0XHRcdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgbWFza051bWJlcjpcblx0XHRcdFx0XHRcdGlmKGlzTmFOKGNoYXIpKXtcblx0XHRcdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgbWFza1dpbGRjYXJkOlxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0aWYoY2hhciAhPT0gbWFza1tpbmRleF0pe1xuXHRcdFx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybjtcblx0fSk7XG5cblx0ZWwuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIChlKSA9PiB7XG5cdFx0aWYoZS5rZXlDb2RlID4gNDYpe1xuXHRcdFx0aWYob3B0aW9ucy5tYXNrQXV0b0ZpbGwpe1xuXHRcdFx0XHRmaWxsU3ltYm9scyhlbC52YWx1ZS5sZW5ndGgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblxuXHRpZighZWwucGxhY2Vob2xkZXIpe1xuXHRcdGVsLnBsYWNlaG9sZGVyID0gbWFzaztcblx0fVxuXG5cdGlmKG9wdGlvbnMubWFza0F1dG9GaWxsKXtcblx0XHRmaWxsU3ltYm9scyhlbC52YWx1ZS5sZW5ndGgpO1xuXHR9XG59XG5cbi8vaW5wdXQgZWxlbWVudFxuZnVuY3Rpb24gaW5wdXQoY2VsbCwgb25SZW5kZXJlZCwgc3VjY2VzcywgY2FuY2VsLCBlZGl0b3JQYXJhbXMpe1xuXHQvL2NyZWF0ZSBhbmQgc3R5bGUgaW5wdXRcblx0dmFyIGNlbGxWYWx1ZSA9IGNlbGwuZ2V0VmFsdWUoKSxcblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cblx0aW5wdXQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBlZGl0b3JQYXJhbXMuc2VhcmNoID8gXCJzZWFyY2hcIiA6IFwidGV4dFwiKTtcblxuXHRpbnB1dC5zdHlsZS5wYWRkaW5nID0gXCI0cHhcIjtcblx0aW5wdXQuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcblx0aW5wdXQuc3R5bGUuYm94U2l6aW5nID0gXCJib3JkZXItYm94XCI7XG5cblx0aWYoZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzICYmIHR5cGVvZiBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXMgPT0gXCJvYmplY3RcIil7XG5cdFx0Zm9yIChsZXQga2V5IGluIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlcyl7XG5cdFx0XHRpZihrZXkuY2hhckF0KDApID09IFwiK1wiKXtcblx0XHRcdFx0a2V5ID0ga2V5LnNsaWNlKDEpO1xuXHRcdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoa2V5LCBpbnB1dC5nZXRBdHRyaWJ1dGUoa2V5KSArIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlc1tcIitcIiArIGtleV0pO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoa2V5LCBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXNba2V5XSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aW5wdXQudmFsdWUgPSB0eXBlb2YgY2VsbFZhbHVlICE9PSBcInVuZGVmaW5lZFwiID8gY2VsbFZhbHVlIDogXCJcIjtcblxuXHRvblJlbmRlcmVkKGZ1bmN0aW9uKCl7XG5cdFx0aWYoY2VsbC5nZXRUeXBlKCkgPT09IFwiY2VsbFwiKXtcblx0XHRcdGlucHV0LmZvY3VzKHtwcmV2ZW50U2Nyb2xsOiB0cnVlfSk7XG5cdFx0XHRpbnB1dC5zdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcblxuXHRcdFx0aWYoZWRpdG9yUGFyYW1zLnNlbGVjdENvbnRlbnRzKXtcblx0XHRcdFx0aW5wdXQuc2VsZWN0KCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHRmdW5jdGlvbiBvbkNoYW5nZShlKXtcblx0XHRpZigoKGNlbGxWYWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgY2VsbFZhbHVlID09PSBcInVuZGVmaW5lZFwiKSAmJiBpbnB1dC52YWx1ZSAhPT0gXCJcIikgfHwgaW5wdXQudmFsdWUgIT09IGNlbGxWYWx1ZSl7XG5cdFx0XHRpZihzdWNjZXNzKGlucHV0LnZhbHVlKSl7XG5cdFx0XHRcdGNlbGxWYWx1ZSA9IGlucHV0LnZhbHVlOyAvL3BlcnNpc3QgdmFsdWUgaWYgc3VjY2Vzc2Z1bGx5IHZhbGlkYXRlZCBpbmNhc2UgZWRpdG9yIGlzIHVzZWQgYXMgaGVhZGVyIGZpbHRlclxuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGNhbmNlbCgpO1xuXHRcdH1cblx0fVxuXG5cdC8vc3VibWl0IG5ldyB2YWx1ZSBvbiBibHVyIG9yIGNoYW5nZVxuXHRpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIG9uQ2hhbmdlKTtcblx0aW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgb25DaGFuZ2UpO1xuXG5cdC8vc3VibWl0IG5ldyB2YWx1ZSBvbiBlbnRlclxuXHRpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBmdW5jdGlvbihlKXtcblx0XHRzd2l0Y2goZS5rZXlDb2RlKXtcblx0XHRcdC8vIGNhc2UgOTpcblx0XHRcdGNhc2UgMTM6XG5cdFx0XHRcdG9uQ2hhbmdlKCk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDI3OlxuXHRcdFx0XHRjYW5jZWwoKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMzU6XG5cdFx0XHRjYXNlIDM2OlxuXHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH0pO1xuXG5cdGlmKGVkaXRvclBhcmFtcy5tYXNrKXtcblx0XHRtYXNrSW5wdXQoaW5wdXQsIGVkaXRvclBhcmFtcyk7XG5cdH1cblxuXHRyZXR1cm4gaW5wdXQ7XG59XG5cbi8vcmVzaXphYmxlIHRleHQgYXJlYSBlbGVtZW50XG5mdW5jdGlvbiB0ZXh0YXJlYShjZWxsLCBvblJlbmRlcmVkLCBzdWNjZXNzLCBjYW5jZWwsIGVkaXRvclBhcmFtcyl7XG5cdHZhciBjZWxsVmFsdWUgPSBjZWxsLmdldFZhbHVlKCksXG5cdHZlcnROYXYgPSBlZGl0b3JQYXJhbXMudmVydGljYWxOYXZpZ2F0aW9uIHx8IFwiaHlicmlkXCIsXG5cdHZhbHVlID0gU3RyaW5nKGNlbGxWYWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgY2VsbFZhbHVlICE9PSBcInVuZGVmaW5lZFwiICA/IGNlbGxWYWx1ZSA6IFwiXCIpLFxuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0YXJlYVwiKSxcblx0c2Nyb2xsSGVpZ2h0ID0gMDtcblxuXHQvL2NyZWF0ZSBhbmQgc3R5bGUgaW5wdXRcblx0aW5wdXQuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0aW5wdXQuc3R5bGUucGFkZGluZyA9IFwiMnB4XCI7XG5cdGlucHV0LnN0eWxlLmhlaWdodCA9IFwiMTAwJVwiO1xuXHRpbnB1dC5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xuXHRpbnB1dC5zdHlsZS5ib3hTaXppbmcgPSBcImJvcmRlci1ib3hcIjtcblx0aW5wdXQuc3R5bGUud2hpdGVTcGFjZSA9IFwicHJlLXdyYXBcIjtcblx0aW5wdXQuc3R5bGUucmVzaXplID0gXCJub25lXCI7XG5cblx0aWYoZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzICYmIHR5cGVvZiBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXMgPT0gXCJvYmplY3RcIil7XG5cdFx0Zm9yIChsZXQga2V5IGluIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlcyl7XG5cdFx0XHRpZihrZXkuY2hhckF0KDApID09IFwiK1wiKXtcblx0XHRcdFx0a2V5ID0ga2V5LnNsaWNlKDEpO1xuXHRcdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoa2V5LCBpbnB1dC5nZXRBdHRyaWJ1dGUoa2V5KSArIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlc1tcIitcIiArIGtleV0pO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoa2V5LCBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXNba2V5XSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aW5wdXQudmFsdWUgPSB2YWx1ZTtcblxuXHRvblJlbmRlcmVkKGZ1bmN0aW9uKCl7XG5cdFx0aWYoY2VsbC5nZXRUeXBlKCkgPT09IFwiY2VsbFwiKXtcblx0XHRcdGlucHV0LmZvY3VzKHtwcmV2ZW50U2Nyb2xsOiB0cnVlfSk7XG5cdFx0XHRpbnB1dC5zdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcblxuXHRcdFx0aW5wdXQuc2Nyb2xsSGVpZ2h0O1xuXHRcdFx0aW5wdXQuc3R5bGUuaGVpZ2h0ID0gaW5wdXQuc2Nyb2xsSGVpZ2h0ICsgXCJweFwiO1xuXHRcdFx0Y2VsbC5nZXRSb3coKS5ub3JtYWxpemVIZWlnaHQoKTtcblxuXHRcdFx0aWYoZWRpdG9yUGFyYW1zLnNlbGVjdENvbnRlbnRzKXtcblx0XHRcdFx0aW5wdXQuc2VsZWN0KCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHRmdW5jdGlvbiBvbkNoYW5nZShlKXtcblxuXHRcdGlmKCgoY2VsbFZhbHVlID09PSBudWxsIHx8IHR5cGVvZiBjZWxsVmFsdWUgPT09IFwidW5kZWZpbmVkXCIpICYmIGlucHV0LnZhbHVlICE9PSBcIlwiKSB8fCBpbnB1dC52YWx1ZSAhPT0gY2VsbFZhbHVlKXtcblxuXHRcdFx0aWYoc3VjY2VzcyhpbnB1dC52YWx1ZSkpe1xuXHRcdFx0XHRjZWxsVmFsdWUgPSBpbnB1dC52YWx1ZTsgLy9wZXJzaXN0IHZhbHVlIGlmIHN1Y2Nlc3NmdWxseSB2YWxpZGF0ZWQgaW5jYXNlIGVkaXRvciBpcyB1c2VkIGFzIGhlYWRlciBmaWx0ZXJcblx0XHRcdH1cblxuXHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpe1xuXHRcdFx0XHRjZWxsLmdldFJvdygpLm5vcm1hbGl6ZUhlaWdodCgpO1xuXHRcdFx0fSwzMDApO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNhbmNlbCgpO1xuXHRcdH1cblx0fVxuXG5cdC8vc3VibWl0IG5ldyB2YWx1ZSBvbiBibHVyIG9yIGNoYW5nZVxuXHRpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIG9uQ2hhbmdlKTtcblx0aW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgb25DaGFuZ2UpO1xuXG5cdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCBmdW5jdGlvbigpe1xuXG5cdFx0aW5wdXQuc3R5bGUuaGVpZ2h0ID0gXCJcIjtcblxuXHRcdHZhciBoZWlnaHROb3cgPSBpbnB1dC5zY3JvbGxIZWlnaHQ7XG5cblx0XHRpbnB1dC5zdHlsZS5oZWlnaHQgPSBoZWlnaHROb3cgKyBcInB4XCI7XG5cblx0XHRpZihoZWlnaHROb3cgIT0gc2Nyb2xsSGVpZ2h0KXtcblx0XHRcdHNjcm9sbEhlaWdodCA9IGhlaWdodE5vdztcblx0XHRcdGNlbGwuZ2V0Um93KCkubm9ybWFsaXplSGVpZ2h0KCk7XG5cdFx0fVxuXHR9KTtcblxuXHRpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBmdW5jdGlvbihlKXtcblxuXHRcdHN3aXRjaChlLmtleUNvZGUpe1xuXG5cdFx0XHRjYXNlIDEzOlxuXHRcdFx0XHRpZihlLnNoaWZ0S2V5ICYmIGVkaXRvclBhcmFtcy5zaGlmdEVudGVyU3VibWl0KXtcblx0XHRcdFx0XHRvbkNoYW5nZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDI3OlxuXHRcdFx0XHRjYW5jZWwoKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMzg6IC8vdXAgYXJyb3dcblx0XHRcdFx0aWYodmVydE5hdiA9PSBcImVkaXRvclwiIHx8ICh2ZXJ0TmF2ID09IFwiaHlicmlkXCIgJiYgaW5wdXQuc2VsZWN0aW9uU3RhcnQpKXtcblx0XHRcdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSA0MDogLy9kb3duIGFycm93XG5cdFx0XHRcdGlmKHZlcnROYXYgPT0gXCJlZGl0b3JcIiB8fCAodmVydE5hdiA9PSBcImh5YnJpZFwiICYmIGlucHV0LnNlbGVjdGlvblN0YXJ0ICE9PSBpbnB1dC52YWx1ZS5sZW5ndGgpKXtcblx0XHRcdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMzU6XG5cdFx0XHRjYXNlIDM2OlxuXHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH0pO1xuXG5cdGlmKGVkaXRvclBhcmFtcy5tYXNrKXtcblx0XHRtYXNrSW5wdXQoaW5wdXQsIGVkaXRvclBhcmFtcyk7XG5cdH1cblxuXHRyZXR1cm4gaW5wdXQ7XG59XG5cbi8vaW5wdXQgZWxlbWVudCB3aXRoIHR5cGUgb2YgbnVtYmVyXG5mdW5jdGlvbiBudW1iZXIoY2VsbCwgb25SZW5kZXJlZCwgc3VjY2VzcywgY2FuY2VsLCBlZGl0b3JQYXJhbXMpe1xuXHR2YXIgY2VsbFZhbHVlID0gY2VsbC5nZXRWYWx1ZSgpLFxuXHR2ZXJ0TmF2ID0gZWRpdG9yUGFyYW1zLnZlcnRpY2FsTmF2aWdhdGlvbiB8fCBcImVkaXRvclwiLFxuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwibnVtYmVyXCIpO1xuXG5cdGlmKHR5cGVvZiBlZGl0b3JQYXJhbXMubWF4ICE9IFwidW5kZWZpbmVkXCIpe1xuXHRcdGlucHV0LnNldEF0dHJpYnV0ZShcIm1heFwiLCBlZGl0b3JQYXJhbXMubWF4KTtcblx0fVxuXG5cdGlmKHR5cGVvZiBlZGl0b3JQYXJhbXMubWluICE9IFwidW5kZWZpbmVkXCIpe1xuXHRcdGlucHV0LnNldEF0dHJpYnV0ZShcIm1pblwiLCBlZGl0b3JQYXJhbXMubWluKTtcblx0fVxuXG5cdGlmKHR5cGVvZiBlZGl0b3JQYXJhbXMuc3RlcCAhPSBcInVuZGVmaW5lZFwiKXtcblx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoXCJzdGVwXCIsIGVkaXRvclBhcmFtcy5zdGVwKTtcblx0fVxuXG5cdC8vY3JlYXRlIGFuZCBzdHlsZSBpbnB1dFxuXHRpbnB1dC5zdHlsZS5wYWRkaW5nID0gXCI0cHhcIjtcblx0aW5wdXQuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcblx0aW5wdXQuc3R5bGUuYm94U2l6aW5nID0gXCJib3JkZXItYm94XCI7XG5cblx0aWYoZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzICYmIHR5cGVvZiBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXMgPT0gXCJvYmplY3RcIil7XG5cdFx0Zm9yIChsZXQga2V5IGluIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlcyl7XG5cdFx0XHRpZihrZXkuY2hhckF0KDApID09IFwiK1wiKXtcblx0XHRcdFx0a2V5ID0ga2V5LnNsaWNlKDEpO1xuXHRcdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoa2V5LCBpbnB1dC5nZXRBdHRyaWJ1dGUoa2V5KSArIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlc1tcIitcIiArIGtleV0pO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoa2V5LCBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXNba2V5XSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aW5wdXQudmFsdWUgPSBjZWxsVmFsdWU7XG5cblx0dmFyIGJsdXJGdW5jID0gZnVuY3Rpb24oZSl7XG5cdFx0b25DaGFuZ2UoKTtcblx0fTtcblxuXHRvblJlbmRlcmVkKGZ1bmN0aW9uICgpIHtcblx0XHRpZihjZWxsLmdldFR5cGUoKSA9PT0gXCJjZWxsXCIpe1xuXHRcdFx0Ly9zdWJtaXQgbmV3IHZhbHVlIG9uIGJsdXJcblx0XHRcdGlucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIGJsdXJGdW5jKTtcblxuXHRcdFx0aW5wdXQuZm9jdXMoe3ByZXZlbnRTY3JvbGw6IHRydWV9KTtcblx0XHRcdGlucHV0LnN0eWxlLmhlaWdodCA9IFwiMTAwJVwiO1xuXG5cdFx0XHQvL3N1Ym1pdCBuZXcgdmFsdWUgb24gYmx1clxuXHRcdFx0aW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgYmx1ckZ1bmMpO1xuXG5cdFx0XHRpZihlZGl0b3JQYXJhbXMuc2VsZWN0Q29udGVudHMpe1xuXHRcdFx0XHRpbnB1dC5zZWxlY3QoKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdGZ1bmN0aW9uIG9uQ2hhbmdlKCl7XG5cdFx0dmFyIHZhbHVlID0gaW5wdXQudmFsdWU7XG5cblx0XHRpZighaXNOYU4odmFsdWUpICYmIHZhbHVlICE9PVwiXCIpe1xuXHRcdFx0dmFsdWUgPSBOdW1iZXIodmFsdWUpO1xuXHRcdH1cblxuXHRcdGlmKHZhbHVlICE9PSBjZWxsVmFsdWUpe1xuXHRcdFx0aWYoc3VjY2Vzcyh2YWx1ZSkpe1xuXHRcdFx0XHRjZWxsVmFsdWUgPSB2YWx1ZTsgLy9wZXJzaXN0IHZhbHVlIGlmIHN1Y2Nlc3NmdWxseSB2YWxpZGF0ZWQgaW5jYXNlIGVkaXRvciBpcyB1c2VkIGFzIGhlYWRlciBmaWx0ZXJcblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRjYW5jZWwoKTtcblx0XHR9XG5cdH1cblxuXHQvL3N1Ym1pdCBuZXcgdmFsdWUgb24gZW50ZXJcblx0aW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZnVuY3Rpb24oZSl7XG5cdFx0c3dpdGNoKGUua2V5Q29kZSl7XG5cdFx0XHRjYXNlIDEzOlxuXHRcdFx0Ly8gY2FzZSA5OlxuXHRcdFx0XHRvbkNoYW5nZSgpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAyNzpcblx0XHRcdFx0Y2FuY2VsKCk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDM4OiAvL3VwIGFycm93XG5cdFx0XHRjYXNlIDQwOiAvL2Rvd24gYXJyb3dcblx0XHRcdFx0aWYodmVydE5hdiA9PSBcImVkaXRvclwiKXtcblx0XHRcdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMzU6XG5cdFx0XHRjYXNlIDM2OlxuXHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH0pO1xuXG5cdGlmKGVkaXRvclBhcmFtcy5tYXNrKXtcblx0XHRtYXNrSW5wdXQoaW5wdXQsIGVkaXRvclBhcmFtcyk7XG5cdH1cblxuXHRyZXR1cm4gaW5wdXQ7XG59XG5cbi8vaW5wdXQgZWxlbWVudCB3aXRoIHR5cGUgb2YgbnVtYmVyXG5mdW5jdGlvbiByYW5nZShjZWxsLCBvblJlbmRlcmVkLCBzdWNjZXNzLCBjYW5jZWwsIGVkaXRvclBhcmFtcyl7XG5cdHZhciBjZWxsVmFsdWUgPSBjZWxsLmdldFZhbHVlKCksXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXHRcblx0aW5wdXQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInJhbmdlXCIpO1xuXHRcblx0aWYgKHR5cGVvZiBlZGl0b3JQYXJhbXMubWF4ICE9IFwidW5kZWZpbmVkXCIpIHtcblx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoXCJtYXhcIiwgZWRpdG9yUGFyYW1zLm1heCk7XG5cdH1cblx0XG5cdGlmICh0eXBlb2YgZWRpdG9yUGFyYW1zLm1pbiAhPSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0aW5wdXQuc2V0QXR0cmlidXRlKFwibWluXCIsIGVkaXRvclBhcmFtcy5taW4pO1xuXHR9XG5cdFxuXHRpZiAodHlwZW9mIGVkaXRvclBhcmFtcy5zdGVwICE9IFwidW5kZWZpbmVkXCIpIHtcblx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoXCJzdGVwXCIsIGVkaXRvclBhcmFtcy5zdGVwKTtcblx0fVxuXHRcblx0Ly9jcmVhdGUgYW5kIHN0eWxlIGlucHV0XG5cdGlucHV0LnN0eWxlLnBhZGRpbmcgPSBcIjRweFwiO1xuXHRpbnB1dC5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xuXHRpbnB1dC5zdHlsZS5ib3hTaXppbmcgPSBcImJvcmRlci1ib3hcIjtcblx0XG5cdGlmKGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlcyAmJiB0eXBlb2YgZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzID09IFwib2JqZWN0XCIpe1xuXHRcdGZvciAobGV0IGtleSBpbiBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXMpe1xuXHRcdFx0aWYoa2V5LmNoYXJBdCgwKSA9PSBcIitcIil7XG5cdFx0XHRcdGtleSA9IGtleS5zbGljZSgxKTtcblx0XHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKGtleSwgaW5wdXQuZ2V0QXR0cmlidXRlKGtleSkgKyBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXNbXCIrXCIgKyBrZXldKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKGtleSwgZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzW2tleV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0aW5wdXQudmFsdWUgPSBjZWxsVmFsdWU7XG5cdFxuXHRvblJlbmRlcmVkKGZ1bmN0aW9uICgpIHtcblx0XHRpZihjZWxsLmdldFR5cGUoKSA9PT0gXCJjZWxsXCIpe1xuXHRcdFx0aW5wdXQuZm9jdXMoe3ByZXZlbnRTY3JvbGw6IHRydWV9KTtcblx0XHRcdGlucHV0LnN0eWxlLmhlaWdodCA9IFwiMTAwJVwiO1xuXHRcdH1cblx0fSk7XG5cdFxuXHRmdW5jdGlvbiBvbkNoYW5nZSgpe1xuXHRcdHZhciB2YWx1ZSA9IGlucHV0LnZhbHVlO1xuXHRcdFxuXHRcdGlmKCFpc05hTih2YWx1ZSkgJiYgdmFsdWUgIT09XCJcIil7XG5cdFx0XHR2YWx1ZSA9IE51bWJlcih2YWx1ZSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHZhbHVlICE9IGNlbGxWYWx1ZSl7XG5cdFx0XHRpZihzdWNjZXNzKHZhbHVlKSl7XG5cdFx0XHRcdGNlbGxWYWx1ZSA9IHZhbHVlOyAvL3BlcnNpc3QgdmFsdWUgaWYgc3VjY2Vzc2Z1bGx5IHZhbGlkYXRlZCBpbmNhc2UgZWRpdG9yIGlzIHVzZWQgYXMgaGVhZGVyIGZpbHRlclxuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGNhbmNlbCgpO1xuXHRcdH1cblx0fVxuXHRcblx0Ly9zdWJtaXQgbmV3IHZhbHVlIG9uIGJsdXJcblx0aW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgZnVuY3Rpb24oZSl7XG5cdFx0b25DaGFuZ2UoKTtcblx0fSk7XG5cdFxuXHQvL3N1Ym1pdCBuZXcgdmFsdWUgb24gZW50ZXJcblx0aW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZnVuY3Rpb24oZSl7XG5cdFx0c3dpdGNoKGUua2V5Q29kZSl7XG5cdFx0XHRjYXNlIDEzOlxuXHRcdFx0Ly8gY2FzZSA5OlxuXHRcdFx0XHRvbkNoYW5nZSgpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0Y2FzZSAyNzpcblx0XHRcdFx0Y2FuY2VsKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fSk7XG5cdFxuXHRyZXR1cm4gaW5wdXQ7XG59XG5cbi8vaW5wdXQgZWxlbWVudFxuZnVuY3Rpb24gZGF0ZShjZWxsLCBvblJlbmRlcmVkLCBzdWNjZXNzLCBjYW5jZWwsIGVkaXRvclBhcmFtcyl7XG5cdHZhciBpbnB1dEZvcm1hdCA9IGVkaXRvclBhcmFtcy5mb3JtYXQsXG5cdHZlcnROYXYgPSBlZGl0b3JQYXJhbXMudmVydGljYWxOYXZpZ2F0aW9uIHx8IFwiZWRpdG9yXCIsXG5cdERUID0gaW5wdXRGb3JtYXQgPyAod2luZG93LkRhdGVUaW1lIHx8IGx1eG9uLkRhdGVUaW1lKSA6IG51bGw7XG5cdFxuXHQvL2NyZWF0ZSBhbmQgc3R5bGUgaW5wdXRcblx0dmFyIGNlbGxWYWx1ZSA9IGNlbGwuZ2V0VmFsdWUoKSxcblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFxuXHRmdW5jdGlvbiBjb252ZXJ0RGF0ZSh2YWx1ZSl7XG5cdFx0dmFyIG5ld0RhdGV0aW1lO1xuXHRcdFxuXHRcdGlmKERULmlzRGF0ZVRpbWUodmFsdWUpKXtcblx0XHRcdG5ld0RhdGV0aW1lID0gdmFsdWU7XG5cdFx0fWVsc2UgaWYoaW5wdXRGb3JtYXQgPT09IFwiaXNvXCIpe1xuXHRcdFx0bmV3RGF0ZXRpbWUgPSBEVC5mcm9tSVNPKFN0cmluZyh2YWx1ZSkpO1xuXHRcdH1lbHNlIHtcblx0XHRcdG5ld0RhdGV0aW1lID0gRFQuZnJvbUZvcm1hdChTdHJpbmcodmFsdWUpLCBpbnB1dEZvcm1hdCk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBuZXdEYXRldGltZS50b0Zvcm1hdChcInl5eXktTU0tZGRcIik7XG5cdH1cblx0XG5cdGlucHV0LnR5cGUgPSBcImRhdGVcIjtcblx0aW5wdXQuc3R5bGUucGFkZGluZyA9IFwiNHB4XCI7XG5cdGlucHV0LnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG5cdGlucHV0LnN0eWxlLmJveFNpemluZyA9IFwiYm9yZGVyLWJveFwiO1xuXG5cdGlmKGVkaXRvclBhcmFtcy5tYXgpe1xuXHRcdGlucHV0LnNldEF0dHJpYnV0ZShcIm1heFwiLCBpbnB1dEZvcm1hdCA/IGNvbnZlcnREYXRlKGVkaXRvclBhcmFtcy5tYXgpIDogZWRpdG9yUGFyYW1zLm1heCk7XG5cdH1cblxuXHRpZihlZGl0b3JQYXJhbXMubWluKXtcblx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoXCJtaW5cIiwgaW5wdXRGb3JtYXQgPyBjb252ZXJ0RGF0ZShlZGl0b3JQYXJhbXMubWluKSA6IGVkaXRvclBhcmFtcy5taW4pO1xuXHR9XG5cdFxuXHRpZihlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXMgJiYgdHlwZW9mIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlcyA9PSBcIm9iamVjdFwiKXtcblx0XHRmb3IgKGxldCBrZXkgaW4gZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzKXtcblx0XHRcdGlmKGtleS5jaGFyQXQoMCkgPT0gXCIrXCIpe1xuXHRcdFx0XHRrZXkgPSBrZXkuc2xpY2UoMSk7XG5cdFx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZShrZXksIGlucHV0LmdldEF0dHJpYnV0ZShrZXkpICsgZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzW1wiK1wiICsga2V5XSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZShrZXksIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlc1trZXldKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdGNlbGxWYWx1ZSA9IHR5cGVvZiBjZWxsVmFsdWUgIT09IFwidW5kZWZpbmVkXCIgPyBjZWxsVmFsdWUgOiBcIlwiO1xuXHRcblx0aWYoaW5wdXRGb3JtYXQpe1xuXHRcdGlmKERUKXtcdFx0XG5cdFx0XHRjZWxsVmFsdWUgPSBjb252ZXJ0RGF0ZShjZWxsVmFsdWUpO1x0XHRcdFxuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoXCJFZGl0b3IgRXJyb3IgLSAnZGF0ZScgZWRpdG9yICdmb3JtYXQnIHBhcmFtIGlzIGRlcGVuZGFudCBvbiBsdXhvbi5qc1wiKTtcblx0XHR9XG5cdH1cblx0XG5cdGlucHV0LnZhbHVlID0gY2VsbFZhbHVlO1xuXHRcblx0b25SZW5kZXJlZChmdW5jdGlvbigpe1xuXHRcdGlmKGNlbGwuZ2V0VHlwZSgpID09PSBcImNlbGxcIil7XG5cdFx0XHRpbnB1dC5mb2N1cyh7cHJldmVudFNjcm9sbDogdHJ1ZX0pO1xuXHRcdFx0aW5wdXQuc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XG5cdFx0XHRcblx0XHRcdGlmKGVkaXRvclBhcmFtcy5zZWxlY3RDb250ZW50cyl7XG5cdFx0XHRcdGlucHV0LnNlbGVjdCgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cdFxuXHRmdW5jdGlvbiBvbkNoYW5nZSgpe1xuXHRcdHZhciB2YWx1ZSA9IGlucHV0LnZhbHVlLFxuXHRcdGx1eERhdGU7XG5cdFx0XG5cdFx0aWYoKChjZWxsVmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIGNlbGxWYWx1ZSA9PT0gXCJ1bmRlZmluZWRcIikgJiYgdmFsdWUgIT09IFwiXCIpIHx8IHZhbHVlICE9PSBjZWxsVmFsdWUpe1xuXHRcdFx0XG5cdFx0XHRpZih2YWx1ZSAmJiBpbnB1dEZvcm1hdCl7XG5cdFx0XHRcdGx1eERhdGUgPSBEVC5mcm9tRm9ybWF0KFN0cmluZyh2YWx1ZSksIFwieXl5eS1NTS1kZFwiKTtcblxuXHRcdFx0XHRzd2l0Y2goaW5wdXRGb3JtYXQpe1xuXHRcdFx0XHRcdGNhc2UgdHJ1ZTpcblx0XHRcdFx0XHRcdHZhbHVlID0gbHV4RGF0ZTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSBcImlzb1wiOlxuXHRcdFx0XHRcdFx0dmFsdWUgPSBsdXhEYXRlLnRvSVNPKCk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGx1eERhdGUudG9Gb3JtYXQoaW5wdXRGb3JtYXQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKHN1Y2Nlc3ModmFsdWUpKXtcblx0XHRcdFx0Y2VsbFZhbHVlID0gaW5wdXQudmFsdWU7IC8vcGVyc2lzdCB2YWx1ZSBpZiBzdWNjZXNzZnVsbHkgdmFsaWRhdGVkIGluY2FzZSBlZGl0b3IgaXMgdXNlZCBhcyBoZWFkZXIgZmlsdGVyXG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y2FuY2VsKCk7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL3N1Ym1pdCBuZXcgdmFsdWUgb24gYmx1clxuXHRpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCBmdW5jdGlvbihlKSB7XG5cdFx0aWYgKGUucmVsYXRlZFRhcmdldCB8fCBlLnJhbmdlUGFyZW50IHx8IGUuZXhwbGljaXRPcmlnaW5hbFRhcmdldCAhPT0gaW5wdXQpIHtcblx0XHRcdG9uQ2hhbmdlKCk7IC8vIG9ubHkgb24gYSBcInRydWVcIiBibHVyOyBub3Qgd2hlbiBmb2N1c2luZyBicm93c2VyJ3MgZGF0ZS90aW1lIHBpY2tlclxuXHRcdH1cblx0fSk7XG5cdFxuXHQvL3N1Ym1pdCBuZXcgdmFsdWUgb24gZW50ZXJcblx0aW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZnVuY3Rpb24oZSl7XG5cdFx0c3dpdGNoKGUua2V5Q29kZSl7XG5cdFx0XHQvLyBjYXNlIDk6XG5cdFx0XHRjYXNlIDEzOlxuXHRcdFx0XHRvbkNoYW5nZSgpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0Y2FzZSAyNzpcblx0XHRcdFx0Y2FuY2VsKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRjYXNlIDM1OlxuXHRcdFx0Y2FzZSAzNjpcblx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGNhc2UgMzg6IC8vdXAgYXJyb3dcblx0XHRcdGNhc2UgNDA6IC8vZG93biBhcnJvd1xuXHRcdFx0XHRpZih2ZXJ0TmF2ID09IFwiZWRpdG9yXCIpe1xuXHRcdFx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH0pO1xuXHRcblx0cmV0dXJuIGlucHV0O1xufVxuXG4vL2lucHV0IGVsZW1lbnRcbmZ1bmN0aW9uIHRpbWUoY2VsbCwgb25SZW5kZXJlZCwgc3VjY2VzcywgY2FuY2VsLCBlZGl0b3JQYXJhbXMpe1xuXHR2YXIgaW5wdXRGb3JtYXQgPSBlZGl0b3JQYXJhbXMuZm9ybWF0LFxuXHR2ZXJ0TmF2ID0gZWRpdG9yUGFyYW1zLnZlcnRpY2FsTmF2aWdhdGlvbiB8fCBcImVkaXRvclwiLFxuXHREVCA9IGlucHV0Rm9ybWF0ID8gKHdpbmRvdy5EYXRlVGltZSB8fCBsdXhvbi5EYXRlVGltZSkgOiBudWxsLCBcblx0bmV3RGF0ZXRpbWU7XG5cdFxuXHQvL2NyZWF0ZSBhbmQgc3R5bGUgaW5wdXRcblx0dmFyIGNlbGxWYWx1ZSA9IGNlbGwuZ2V0VmFsdWUoKSxcblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFxuXHRpbnB1dC50eXBlID0gXCJ0aW1lXCI7XG5cdGlucHV0LnN0eWxlLnBhZGRpbmcgPSBcIjRweFwiO1xuXHRpbnB1dC5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xuXHRpbnB1dC5zdHlsZS5ib3hTaXppbmcgPSBcImJvcmRlci1ib3hcIjtcblx0XG5cdGlmKGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlcyAmJiB0eXBlb2YgZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzID09IFwib2JqZWN0XCIpe1xuXHRcdGZvciAobGV0IGtleSBpbiBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXMpe1xuXHRcdFx0aWYoa2V5LmNoYXJBdCgwKSA9PSBcIitcIil7XG5cdFx0XHRcdGtleSA9IGtleS5zbGljZSgxKTtcblx0XHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKGtleSwgaW5wdXQuZ2V0QXR0cmlidXRlKGtleSkgKyBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXNbXCIrXCIgKyBrZXldKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKGtleSwgZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzW2tleV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0Y2VsbFZhbHVlID0gdHlwZW9mIGNlbGxWYWx1ZSAhPT0gXCJ1bmRlZmluZWRcIiA/IGNlbGxWYWx1ZSA6IFwiXCI7XG5cdFxuXHRpZihpbnB1dEZvcm1hdCl7XG5cdFx0aWYoRFQpe1xuXHRcdFx0aWYoRFQuaXNEYXRlVGltZShjZWxsVmFsdWUpKXtcblx0XHRcdFx0bmV3RGF0ZXRpbWUgPSBjZWxsVmFsdWU7XG5cdFx0XHR9ZWxzZSBpZihpbnB1dEZvcm1hdCA9PT0gXCJpc29cIil7XG5cdFx0XHRcdG5ld0RhdGV0aW1lID0gRFQuZnJvbUlTTyhTdHJpbmcoY2VsbFZhbHVlKSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdG5ld0RhdGV0aW1lID0gRFQuZnJvbUZvcm1hdChTdHJpbmcoY2VsbFZhbHVlKSwgaW5wdXRGb3JtYXQpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRjZWxsVmFsdWUgPSBuZXdEYXRldGltZS50b0Zvcm1hdChcImhoOm1tXCIpO1xuXHRcdFx0XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS5lcnJvcihcIkVkaXRvciBFcnJvciAtICdkYXRlJyBlZGl0b3IgJ2Zvcm1hdCcgcGFyYW0gaXMgZGVwZW5kYW50IG9uIGx1eG9uLmpzXCIpO1xuXHRcdH1cblx0fVxuXHRcblx0aW5wdXQudmFsdWUgPSBjZWxsVmFsdWU7XG5cdFxuXHRvblJlbmRlcmVkKGZ1bmN0aW9uKCl7XG5cdFx0aWYoY2VsbC5nZXRUeXBlKCkgPT0gXCJjZWxsXCIpe1xuXHRcdFx0aW5wdXQuZm9jdXMoe3ByZXZlbnRTY3JvbGw6IHRydWV9KTtcblx0XHRcdGlucHV0LnN0eWxlLmhlaWdodCA9IFwiMTAwJVwiO1xuXHRcdFx0XG5cdFx0XHRpZihlZGl0b3JQYXJhbXMuc2VsZWN0Q29udGVudHMpe1xuXHRcdFx0XHRpbnB1dC5zZWxlY3QoKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXHRcblx0ZnVuY3Rpb24gb25DaGFuZ2UoKXtcblx0XHR2YXIgdmFsdWUgPSBpbnB1dC52YWx1ZSxcblx0XHRsdXhUaW1lO1xuXHRcdFxuXHRcdGlmKCgoY2VsbFZhbHVlID09PSBudWxsIHx8IHR5cGVvZiBjZWxsVmFsdWUgPT09IFwidW5kZWZpbmVkXCIpICYmIHZhbHVlICE9PSBcIlwiKSB8fCB2YWx1ZSAhPT0gY2VsbFZhbHVlKXtcblx0XHRcdFxuXHRcdFx0aWYodmFsdWUgJiYgaW5wdXRGb3JtYXQpe1xuXHRcdFx0XHRsdXhUaW1lID0gRFQuZnJvbUZvcm1hdChTdHJpbmcodmFsdWUpLCBcImhoOm1tXCIpO1xuXG5cdFx0XHRcdHN3aXRjaChpbnB1dEZvcm1hdCl7XG5cdFx0XHRcdFx0Y2FzZSB0cnVlOlxuXHRcdFx0XHRcdFx0dmFsdWUgPSBsdXhUaW1lO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlIFwiaXNvXCI6XG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGx1eFRpbWUudG9JU08oKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdHZhbHVlID0gbHV4VGltZS50b0Zvcm1hdChpbnB1dEZvcm1hdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoc3VjY2Vzcyh2YWx1ZSkpe1xuXHRcdFx0XHRjZWxsVmFsdWUgPSBpbnB1dC52YWx1ZTsgLy9wZXJzaXN0IHZhbHVlIGlmIHN1Y2Nlc3NmdWxseSB2YWxpZGF0ZWQgaW5jYXNlIGVkaXRvciBpcyB1c2VkIGFzIGhlYWRlciBmaWx0ZXJcblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRjYW5jZWwoKTtcblx0XHR9XG5cdH1cblx0XG5cdC8vc3VibWl0IG5ldyB2YWx1ZSBvbiBibHVyXG5cdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIGZ1bmN0aW9uKGUpIHtcblx0XHRpZiAoZS5yZWxhdGVkVGFyZ2V0IHx8IGUucmFuZ2VQYXJlbnQgfHwgZS5leHBsaWNpdE9yaWdpbmFsVGFyZ2V0ICE9PSBpbnB1dCkge1xuXHRcdFx0b25DaGFuZ2UoKTsgLy8gb25seSBvbiBhIFwidHJ1ZVwiIGJsdXI7IG5vdCB3aGVuIGZvY3VzaW5nIGJyb3dzZXIncyBkYXRlL3RpbWUgcGlja2VyXG5cdFx0fVxuXHR9KTtcblx0XG5cdC8vc3VibWl0IG5ldyB2YWx1ZSBvbiBlbnRlclxuXHRpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBmdW5jdGlvbihlKXtcblx0XHRzd2l0Y2goZS5rZXlDb2RlKXtcblx0XHRcdC8vIGNhc2UgOTpcblx0XHRcdGNhc2UgMTM6XG5cdFx0XHRcdG9uQ2hhbmdlKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRjYXNlIDI3OlxuXHRcdFx0XHRjYW5jZWwoKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGNhc2UgMzU6XG5cdFx0XHRjYXNlIDM2OlxuXHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAzODogLy91cCBhcnJvd1xuXHRcdFx0Y2FzZSA0MDogLy9kb3duIGFycm93XG5cdFx0XHRcdGlmKHZlcnROYXYgPT0gXCJlZGl0b3JcIil7XG5cdFx0XHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fSk7XG5cdFxuXHRyZXR1cm4gaW5wdXQ7XG59XG5cbi8vaW5wdXQgZWxlbWVudFxuZnVuY3Rpb24gZGF0ZXRpbWUoY2VsbCwgb25SZW5kZXJlZCwgc3VjY2VzcywgY2FuY2VsLCBlZGl0b3JQYXJhbXMpe1xuXHR2YXIgaW5wdXRGb3JtYXQgPSBlZGl0b3JQYXJhbXMuZm9ybWF0LFxuXHR2ZXJ0TmF2ID0gZWRpdG9yUGFyYW1zLnZlcnRpY2FsTmF2aWdhdGlvbiB8fCBcImVkaXRvclwiLFxuXHREVCA9IGlucHV0Rm9ybWF0ID8gKHdpbmRvdy5EYXRlVGltZSB8fCBsdXhvbi5EYXRlVGltZSkgOiBudWxsLCBcblx0bmV3RGF0ZXRpbWU7XG5cdFxuXHQvL2NyZWF0ZSBhbmQgc3R5bGUgaW5wdXRcblx0dmFyIGNlbGxWYWx1ZSA9IGNlbGwuZ2V0VmFsdWUoKSxcblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFxuXHRpbnB1dC50eXBlID0gXCJkYXRldGltZS1sb2NhbFwiO1xuXHRpbnB1dC5zdHlsZS5wYWRkaW5nID0gXCI0cHhcIjtcblx0aW5wdXQuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcblx0aW5wdXQuc3R5bGUuYm94U2l6aW5nID0gXCJib3JkZXItYm94XCI7XG5cdFxuXHRpZihlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXMgJiYgdHlwZW9mIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlcyA9PSBcIm9iamVjdFwiKXtcblx0XHRmb3IgKGxldCBrZXkgaW4gZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzKXtcblx0XHRcdGlmKGtleS5jaGFyQXQoMCkgPT0gXCIrXCIpe1xuXHRcdFx0XHRrZXkgPSBrZXkuc2xpY2UoMSk7XG5cdFx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZShrZXksIGlucHV0LmdldEF0dHJpYnV0ZShrZXkpICsgZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzW1wiK1wiICsga2V5XSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZShrZXksIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlc1trZXldKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdGNlbGxWYWx1ZSA9IHR5cGVvZiBjZWxsVmFsdWUgIT09IFwidW5kZWZpbmVkXCIgPyBjZWxsVmFsdWUgOiBcIlwiO1xuXHRcblx0aWYoaW5wdXRGb3JtYXQpe1xuXHRcdGlmKERUKXtcblx0XHRcdGlmKERULmlzRGF0ZVRpbWUoY2VsbFZhbHVlKSl7XG5cdFx0XHRcdG5ld0RhdGV0aW1lID0gY2VsbFZhbHVlO1xuXHRcdFx0fWVsc2UgaWYoaW5wdXRGb3JtYXQgPT09IFwiaXNvXCIpe1xuXHRcdFx0XHRuZXdEYXRldGltZSA9IERULmZyb21JU08oU3RyaW5nKGNlbGxWYWx1ZSkpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRuZXdEYXRldGltZSA9IERULmZyb21Gb3JtYXQoU3RyaW5nKGNlbGxWYWx1ZSksIGlucHV0Rm9ybWF0KTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Y2VsbFZhbHVlID0gbmV3RGF0ZXRpbWUudG9Gb3JtYXQoXCJ5eXl5LU1NLWRkXCIpICArIFwiVFwiICsgbmV3RGF0ZXRpbWUudG9Gb3JtYXQoXCJoaDptbVwiKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKFwiRWRpdG9yIEVycm9yIC0gJ2RhdGUnIGVkaXRvciAnZm9ybWF0JyBwYXJhbSBpcyBkZXBlbmRhbnQgb24gbHV4b24uanNcIik7XG5cdFx0fVxuXHR9XG5cdFxuXHRpbnB1dC52YWx1ZSA9IGNlbGxWYWx1ZTtcblx0XG5cdG9uUmVuZGVyZWQoZnVuY3Rpb24oKXtcblx0XHRpZihjZWxsLmdldFR5cGUoKSA9PT0gXCJjZWxsXCIpe1xuXHRcdFx0aW5wdXQuZm9jdXMoe3ByZXZlbnRTY3JvbGw6IHRydWV9KTtcblx0XHRcdGlucHV0LnN0eWxlLmhlaWdodCA9IFwiMTAwJVwiO1xuXHRcdFx0XG5cdFx0XHRpZihlZGl0b3JQYXJhbXMuc2VsZWN0Q29udGVudHMpe1xuXHRcdFx0XHRpbnB1dC5zZWxlY3QoKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXHRcblx0ZnVuY3Rpb24gb25DaGFuZ2UoKXtcblx0XHR2YXIgdmFsdWUgPSBpbnB1dC52YWx1ZSxcblx0XHRsdXhEYXRlVGltZTtcblx0XHRcblx0XHRpZigoKGNlbGxWYWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgY2VsbFZhbHVlID09PSBcInVuZGVmaW5lZFwiKSAmJiB2YWx1ZSAhPT0gXCJcIikgfHwgdmFsdWUgIT09IGNlbGxWYWx1ZSl7XG5cblx0XHRcdGlmKHZhbHVlICYmIGlucHV0Rm9ybWF0KXtcblx0XHRcdFx0bHV4RGF0ZVRpbWUgPSBEVC5mcm9tSVNPKFN0cmluZyh2YWx1ZSkpO1xuXG5cdFx0XHRcdHN3aXRjaChpbnB1dEZvcm1hdCl7XG5cdFx0XHRcdFx0Y2FzZSB0cnVlOlxuXHRcdFx0XHRcdFx0dmFsdWUgPSBsdXhEYXRlVGltZTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSBcImlzb1wiOlxuXHRcdFx0XHRcdFx0dmFsdWUgPSBsdXhEYXRlVGltZS50b0lTTygpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0dmFsdWUgPSBsdXhEYXRlVGltZS50b0Zvcm1hdChpbnB1dEZvcm1hdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoc3VjY2Vzcyh2YWx1ZSkpe1xuXHRcdFx0XHRjZWxsVmFsdWUgPSBpbnB1dC52YWx1ZTsgLy9wZXJzaXN0IHZhbHVlIGlmIHN1Y2Nlc3NmdWxseSB2YWxpZGF0ZWQgaW5jYXNlIGVkaXRvciBpcyB1c2VkIGFzIGhlYWRlciBmaWx0ZXJcblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRjYW5jZWwoKTtcblx0XHR9XG5cdH1cblx0XG5cdC8vc3VibWl0IG5ldyB2YWx1ZSBvbiBibHVyXG5cdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIGZ1bmN0aW9uKGUpIHtcblx0XHRpZiAoZS5yZWxhdGVkVGFyZ2V0IHx8IGUucmFuZ2VQYXJlbnQgfHwgZS5leHBsaWNpdE9yaWdpbmFsVGFyZ2V0ICE9PSBpbnB1dCkge1xuXHRcdFx0b25DaGFuZ2UoKTsgLy8gb25seSBvbiBhIFwidHJ1ZVwiIGJsdXI7IG5vdCB3aGVuIGZvY3VzaW5nIGJyb3dzZXIncyBkYXRlL3RpbWUgcGlja2VyXG5cdFx0fVxuXHR9KTtcblx0XG5cdC8vc3VibWl0IG5ldyB2YWx1ZSBvbiBlbnRlclxuXHRpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBmdW5jdGlvbihlKXtcblx0XHRzd2l0Y2goZS5rZXlDb2RlKXtcblx0XHRcdC8vIGNhc2UgOTpcblx0XHRcdGNhc2UgMTM6XG5cdFx0XHRcdG9uQ2hhbmdlKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRjYXNlIDI3OlxuXHRcdFx0XHRjYW5jZWwoKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGNhc2UgMzU6XG5cdFx0XHRjYXNlIDM2OlxuXHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAzODogLy91cCBhcnJvd1xuXHRcdFx0Y2FzZSA0MDogLy9kb3duIGFycm93XG5cdFx0XHRcdGlmKHZlcnROYXYgPT0gXCJlZGl0b3JcIil7XG5cdFx0XHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fSk7XG5cdFxuXHRyZXR1cm4gaW5wdXQ7XG59XG5cbmNsYXNzIEVkaXR7XG5cdGNvbnN0cnVjdG9yKGVkaXRvciwgY2VsbCwgb25SZW5kZXJlZCwgc3VjY2VzcywgY2FuY2VsLCBlZGl0b3JQYXJhbXMpe1xuXHRcdHRoaXMuZWRpdCA9IGVkaXRvcjtcblx0XHR0aGlzLnRhYmxlID0gZWRpdG9yLnRhYmxlO1xuXHRcdHRoaXMuY2VsbCA9IGNlbGw7XG5cdFx0dGhpcy5wYXJhbXMgPSB0aGlzLl9pbml0aWFsaXplUGFyYW1zKGVkaXRvclBhcmFtcyk7XG5cdFx0XG5cdFx0dGhpcy5kYXRhID0gW107XG5cdFx0dGhpcy5kaXNwbGF5SXRlbXMgPSBbXTtcblx0XHR0aGlzLmN1cnJlbnRJdGVtcyA9IFtdO1xuXHRcdHRoaXMuZm9jdXNlZEl0ZW0gPSBudWxsO1xuXHRcdFxuXHRcdHRoaXMuaW5wdXQgPSB0aGlzLl9jcmVhdGVJbnB1dEVsZW1lbnQoKTtcblx0XHR0aGlzLmxpc3RFbCA9IHRoaXMuX2NyZWF0ZUxpc3RFbGVtZW50KCk7XG5cdFx0XG5cdFx0dGhpcy5pbml0aWFsVmFsdWVzID0gbnVsbDsgXG5cdFx0XG5cdFx0dGhpcy5pc0ZpbHRlciA9IGNlbGwuZ2V0VHlwZSgpID09PSBcImhlYWRlclwiO1xuXHRcdFxuXHRcdHRoaXMuZmlsdGVyVGltZW91dCA9IG51bGw7XG5cdFx0dGhpcy5maWx0ZXJlZCA9IGZhbHNlO1xuXHRcdHRoaXMudHlwaW5nID0gZmFsc2U7XG5cdFx0XG5cdFx0dGhpcy52YWx1ZXMgPSBbXTsgXG5cdFx0dGhpcy5wb3B1cCA9IG51bGw7ICBcblx0XHRcblx0XHR0aGlzLmxpc3RJdGVyYXRpb24gPSAwO1xuXHRcdFxuXHRcdHRoaXMubGFzdEFjdGlvbj1cIlwiO1xuXHRcdHRoaXMuZmlsdGVyVGVybT1cIlwiO1xuXHRcdFxuXHRcdHRoaXMuYmx1cmFibGUgPSB0cnVlO1xuXHRcdFxuXHRcdHRoaXMuYWN0aW9ucyA9IHtcblx0XHRcdHN1Y2Nlc3M6c3VjY2Vzcyxcblx0XHRcdGNhbmNlbDpjYW5jZWxcblx0XHR9O1xuXHRcdFxuXHRcdHRoaXMuX2RlcHJlY2F0ZWRPcHRpb25zQ2hlY2soKTtcblx0XHR0aGlzLl9pbml0aWFsaXplVmFsdWUoKTtcblx0XHRcblx0XHRvblJlbmRlcmVkKHRoaXMuX29uUmVuZGVyZWQuYmluZCh0aGlzKSk7XG5cdH1cblx0XG5cdF9kZXByZWNhdGVkT3B0aW9uc0NoZWNrKCl7XG5cdFx0aWYodGhpcy5wYXJhbXMubGlzdEl0ZW1Gb3JtYXR0ZXIpe1xuXHRcdFx0dGhpcy5jZWxsLmdldFRhYmxlKCkuZGVwcmVjYXRpb25BZHZpc29yLm1zZyhcIlRoZSBsaXN0SXRlbUZvcm1hdHRlciBlZGl0b3IgcGFyYW0gaGFzIGJlZW4gZGVwcmVjYXRlZCwgcGxlYXNlIHNlZSB0aGUgbGF0ZXN0IGVkaXRvciBkb2N1bWVudGF0aW9uIGZvciB1cGRhdGVkIG9wdGlvbnNcIik7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRoaXMucGFyYW1zLnNvcnRWYWx1ZXNMaXN0KXtcblx0XHRcdHRoaXMuY2VsbC5nZXRUYWJsZSgpLmRlcHJlY2F0aW9uQWR2aXNvci5tc2coXCJUaGUgc29ydFZhbHVlc0xpc3QgZWRpdG9yIHBhcmFtIGhhcyBiZWVuIGRlcHJlY2F0ZWQsIHBsZWFzZSBzZWUgdGhlIGxhdGVzdCBlZGl0b3IgZG9jdW1lbnRhdGlvbiBmb3IgdXBkYXRlZCBvcHRpb25zXCIpO1xuXHRcdH1cblx0XHRcblx0XHRpZih0aGlzLnBhcmFtcy5zZWFyY2hGdW5jKXtcblx0XHRcdHRoaXMuY2VsbC5nZXRUYWJsZSgpLmRlcHJlY2F0aW9uQWR2aXNvci5tc2coXCJUaGUgc2VhcmNoRnVuYyBlZGl0b3IgcGFyYW0gaGFzIGJlZW4gZGVwcmVjYXRlZCwgcGxlYXNlIHNlZSB0aGUgbGF0ZXN0IGVkaXRvciBkb2N1bWVudGF0aW9uIGZvciB1cGRhdGVkIG9wdGlvbnNcIik7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRoaXMucGFyYW1zLnNlYXJjaGluZ1BsYWNlaG9sZGVyKXtcblx0XHRcdHRoaXMuY2VsbC5nZXRUYWJsZSgpLmRlcHJlY2F0aW9uQWR2aXNvci5tc2coXCJUaGUgc2VhcmNoaW5nUGxhY2Vob2xkZXIgZWRpdG9yIHBhcmFtIGhhcyBiZWVuIGRlcHJlY2F0ZWQsIHBsZWFzZSBzZWUgdGhlIGxhdGVzdCBlZGl0b3IgZG9jdW1lbnRhdGlvbiBmb3IgdXBkYXRlZCBvcHRpb25zXCIpO1xuXHRcdH1cblx0fVxuXHRcblx0X2luaXRpYWxpemVWYWx1ZSgpe1xuXHRcdHZhciBpbml0aWFsVmFsdWUgPSB0aGlzLmNlbGwuZ2V0VmFsdWUoKTtcblx0XHRcblx0XHRpZih0eXBlb2YgaW5pdGlhbFZhbHVlID09PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB0aGlzLnBhcmFtcy5kZWZhdWx0VmFsdWUgIT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0aW5pdGlhbFZhbHVlID0gdGhpcy5wYXJhbXMuZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLmluaXRpYWxWYWx1ZXMgPSB0aGlzLnBhcmFtcy5tdWx0aXNlbGVjdCA/IGluaXRpYWxWYWx1ZSA6IFtpbml0aWFsVmFsdWVdO1xuXHRcdFxuXHRcdGlmKHRoaXMuaXNGaWx0ZXIpe1xuXHRcdFx0dGhpcy5pbnB1dC52YWx1ZSA9IHRoaXMuaW5pdGlhbFZhbHVlcyA/IHRoaXMuaW5pdGlhbFZhbHVlcy5qb2luKFwiLFwiKSA6IFwiXCI7XG5cdFx0XHR0aGlzLmhlYWRlckZpbHRlckluaXRpYWxMaXN0R2VuKCk7ICAgICAgICAgICAgXG5cdFx0fVxuXHR9XG5cdFxuXHRfb25SZW5kZXJlZCgpe1xuXHRcdHZhciBjZWxsRWwgPSB0aGlzLmNlbGwuZ2V0RWxlbWVudCgpO1xuXHRcdFxuXHRcdGZ1bmN0aW9uIGNsaWNrU3RvcChlKXtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVx0XG5cdFx0XG5cdFx0aWYoIXRoaXMuaXNGaWx0ZXIpe1xuXHRcdFx0dGhpcy5pbnB1dC5zdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcblx0XHRcdHRoaXMuaW5wdXQuZm9jdXMoe3ByZXZlbnRTY3JvbGw6IHRydWV9KTtcblx0XHR9XG5cdFx0XG5cdFx0XG5cdFx0Y2VsbEVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBjbGlja1N0b3ApO1xuXHRcdFxuXHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0Y2VsbEVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBjbGlja1N0b3ApO1xuXHRcdH0sIDEwMDApO1xuXHRcdFxuXHRcdHRoaXMuaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCB0aGlzLl9wcmV2ZW50UG9wdXBCbHVyLmJpbmQodGhpcykpO1xuXHR9XG5cdFxuXHRfY3JlYXRlTGlzdEVsZW1lbnQoKXtcblx0XHR2YXIgbGlzdEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRsaXN0RWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1lZGl0LWxpc3RcIik7XG5cdFx0XG5cdFx0bGlzdEVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5fcHJldmVudEJsdXIuYmluZCh0aGlzKSk7XG5cdFx0bGlzdEVsLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2lucHV0S2V5RG93bi5iaW5kKHRoaXMpKTtcblx0XHRcblx0XHRyZXR1cm4gbGlzdEVsO1xuXHR9XG5cdFxuXHRfc2V0TGlzdFdpZHRoKCl7XG5cdFx0dmFyIGVsZW1lbnQgPSB0aGlzLmlzRmlsdGVyID8gdGhpcy5pbnB1dCA6IHRoaXMuY2VsbC5nZXRFbGVtZW50KCk7XG5cdFx0XG5cdFx0dGhpcy5saXN0RWwuc3R5bGUubWluV2lkdGggPSBlbGVtZW50Lm9mZnNldFdpZHRoICsgXCJweFwiO1xuXHRcdFxuXHRcdGlmKHRoaXMucGFyYW1zLm1heFdpZHRoKXtcblx0XHRcdGlmKHRoaXMucGFyYW1zLm1heFdpZHRoID09PSB0cnVlKXtcblx0XHRcdFx0dGhpcy5saXN0RWwuc3R5bGUubWF4V2lkdGggPSBlbGVtZW50Lm9mZnNldFdpZHRoICsgXCJweFwiO1xuXHRcdFx0fWVsc2UgaWYodHlwZW9mIHRoaXMucGFyYW1zLm1heFdpZHRoID09PSBcIm51bWJlclwiKXtcblx0XHRcdFx0dGhpcy5saXN0RWwuc3R5bGUubWF4V2lkdGggPSB0aGlzLnBhcmFtcy5tYXhXaWR0aCArIFwicHhcIjtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5saXN0RWwuc3R5bGUubWF4V2lkdGggPSB0aGlzLnBhcmFtcy5tYXhXaWR0aDtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdH1cblx0XG5cdF9jcmVhdGVJbnB1dEVsZW1lbnQoKXtcblx0XHR2YXIgYXR0cmlicyA9IHRoaXMucGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzO1xuXHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XHRcblx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIHRoaXMucGFyYW1zLmNsZWFyYWJsZSA/IFwic2VhcmNoXCIgOiBcInRleHRcIik7XG5cdFx0XG5cdFx0aW5wdXQuc3R5bGUucGFkZGluZyA9IFwiNHB4XCI7XG5cdFx0aW5wdXQuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcblx0XHRpbnB1dC5zdHlsZS5ib3hTaXppbmcgPSBcImJvcmRlci1ib3hcIjtcblx0XHRcblx0XHRpZighdGhpcy5wYXJhbXMuYXV0b2NvbXBsZXRlKXtcblx0XHRcdGlucHV0LnN0eWxlLmN1cnNvciA9IFwiZGVmYXVsdFwiO1xuXHRcdFx0aW5wdXQuc3R5bGUuY2FyZXRDb2xvciA9IFwidHJhbnNwYXJlbnRcIjtcblx0XHRcdC8vIGlucHV0LnJlYWRPbmx5ID0gKHRoaXMuZWRpdC5jdXJyZW50Q2VsbCAhPSBmYWxzZSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGF0dHJpYnMgJiYgdHlwZW9mIGF0dHJpYnMgPT0gXCJvYmplY3RcIil7XG5cdFx0XHRmb3IgKGxldCBrZXkgaW4gYXR0cmlicyl7XG5cdFx0XHRcdGlmKGtleS5jaGFyQXQoMCkgPT0gXCIrXCIpe1xuXHRcdFx0XHRcdGtleSA9IGtleS5zbGljZSgxKTtcblx0XHRcdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoa2V5LCBpbnB1dC5nZXRBdHRyaWJ1dGUoa2V5KSArIGF0dHJpYnNbXCIrXCIgKyBrZXldKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnNba2V5XSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0aWYodGhpcy5wYXJhbXMubWFzayl7XG5cdFx0XHRtYXNrSW5wdXQoaW5wdXQsIHRoaXMucGFyYW1zKTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5fYmluZElucHV0RXZlbnRzKGlucHV0KTtcblx0XHRcblx0XHRyZXR1cm4gaW5wdXQ7XG5cdH1cblx0XG5cdF9pbml0aWFsaXplUGFyYW1zKHBhcmFtcyl7XG5cdFx0dmFyIHZhbHVlS2V5cyA9IFtcInZhbHVlc1wiLCBcInZhbHVlc1VSTFwiLCBcInZhbHVlc0xvb2t1cFwiXSxcblx0XHR2YWx1ZUNoZWNrO1xuXHRcdFxuXHRcdHBhcmFtcyA9IE9iamVjdC5hc3NpZ24oe30sIHBhcmFtcyk7XG5cdFx0XG5cdFx0cGFyYW1zLnZlcnRpY2FsTmF2aWdhdGlvbiA9IHBhcmFtcy52ZXJ0aWNhbE5hdmlnYXRpb24gfHwgXCJlZGl0b3JcIjtcblx0XHRwYXJhbXMucGxhY2Vob2xkZXJMb2FkaW5nID0gdHlwZW9mIHBhcmFtcy5wbGFjZWhvbGRlckxvYWRpbmcgPT09IFwidW5kZWZpbmVkXCIgPyBcIlNlYXJjaGluZyAuLi5cIiA6IHBhcmFtcy5wbGFjZWhvbGRlckxvYWRpbmc7XG5cdFx0cGFyYW1zLnBsYWNlaG9sZGVyRW1wdHkgPSB0eXBlb2YgcGFyYW1zLnBsYWNlaG9sZGVyRW1wdHkgPT09IFwidW5kZWZpbmVkXCIgPyBcIk5vIFJlc3VsdHMgRm91bmRcIiA6IHBhcmFtcy5wbGFjZWhvbGRlckVtcHR5O1xuXHRcdHBhcmFtcy5maWx0ZXJEZWxheSA9IHR5cGVvZiBwYXJhbXMuZmlsdGVyRGVsYXkgPT09IFwidW5kZWZpbmVkXCIgPyAzMDAgOiBwYXJhbXMuZmlsdGVyRGVsYXk7XG5cdFx0XG5cdFx0cGFyYW1zLmVtcHR5VmFsdWUgPSBPYmplY3Qua2V5cyhwYXJhbXMpLmluY2x1ZGVzKFwiZW1wdHlWYWx1ZVwiKSA/IHBhcmFtcy5lbXB0eVZhbHVlIDogXCJcIjtcblx0XHRcblx0XHR2YWx1ZUNoZWNrID0gT2JqZWN0LmtleXMocGFyYW1zKS5maWx0ZXIoa2V5ID0+IHZhbHVlS2V5cy5pbmNsdWRlcyhrZXkpKS5sZW5ndGg7XG5cdFx0XG5cdFx0aWYoIXZhbHVlQ2hlY2spe1xuXHRcdFx0Y29uc29sZS53YXJuKFwibGlzdCBlZGl0b3IgY29uZmlnIGVycm9yIC0gZWl0aGVyIHRoZSB2YWx1ZXMsIHZhbHVlc1VSTCwgb3IgdmFsdWVzTG9va3VwIG9wdGlvbiBtdXN0IGJlIHNldFwiKTtcblx0XHR9ZWxzZSBpZih2YWx1ZUNoZWNrID4gMSl7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJsaXN0IGVkaXRvciBjb25maWcgZXJyb3IgLSBvbmx5IG9uZSBvZiB0aGUgdmFsdWVzLCB2YWx1ZXNVUkwsIG9yIHZhbHVlc0xvb2t1cCBvcHRpb25zIGNhbiBiZSBzZXQgb24gdGhlIHNhbWUgZWRpdG9yXCIpO1xuXHRcdH1cblx0XHRcblx0XHRpZihwYXJhbXMuYXV0b2NvbXBsZXRlKXtcblx0XHRcdGlmKHBhcmFtcy5tdWx0aXNlbGVjdCl7XG5cdFx0XHRcdHBhcmFtcy5tdWx0aXNlbGVjdCA9IGZhbHNlO1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJsaXN0IGVkaXRvciBjb25maWcgZXJyb3IgLSBtdWx0aXNlbGVjdCBvcHRpb24gaXMgbm90IGF2YWlsYWJsZSB3aGVuIGF1dG9jb21wbGV0ZSBpcyBlbmFibGVkXCIpO1xuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGlmKHBhcmFtcy5mcmVldGV4dCl7XG5cdFx0XHRcdHBhcmFtcy5mcmVldGV4dCA9IGZhbHNlO1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJsaXN0IGVkaXRvciBjb25maWcgZXJyb3IgLSBmcmVldGV4dCBvcHRpb24gaXMgb25seSBhdmFpbGFibGUgd2hlbiBhdXRvY29tcGxldGUgaXMgZW5hYmxlZFwiKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYocGFyYW1zLmZpbHRlckZ1bmMpe1xuXHRcdFx0XHRwYXJhbXMuZmlsdGVyRnVuYyA9IGZhbHNlO1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJsaXN0IGVkaXRvciBjb25maWcgZXJyb3IgLSBmaWx0ZXJGdW5jIG9wdGlvbiBpcyBvbmx5IGF2YWlsYWJsZSB3aGVuIGF1dG9jb21wbGV0ZSBpcyBlbmFibGVkXCIpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihwYXJhbXMuZmlsdGVyUmVtb3RlKXtcblx0XHRcdFx0cGFyYW1zLmZpbHRlclJlbW90ZSA9IGZhbHNlO1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJsaXN0IGVkaXRvciBjb25maWcgZXJyb3IgLSBmaWx0ZXJSZW1vdGUgb3B0aW9uIGlzIG9ubHkgYXZhaWxhYmxlIHdoZW4gYXV0b2NvbXBsZXRlIGlzIGVuYWJsZWRcIik7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKHBhcmFtcy5tYXNrKXtcblx0XHRcdFx0cGFyYW1zLm1hc2sgPSBmYWxzZTtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwibGlzdCBlZGl0b3IgY29uZmlnIGVycm9yIC0gbWFzayBvcHRpb24gaXMgb25seSBhdmFpbGFibGUgd2hlbiBhdXRvY29tcGxldGUgaXMgZW5hYmxlZFwiKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYocGFyYW1zLmFsbG93RW1wdHkpe1xuXHRcdFx0XHRwYXJhbXMuYWxsb3dFbXB0eSA9IGZhbHNlO1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJsaXN0IGVkaXRvciBjb25maWcgZXJyb3IgLSBhbGxvd0VtcHR5IG9wdGlvbiBpcyBvbmx5IGF2YWlsYWJsZSB3aGVuIGF1dG9jb21wbGV0ZSBpcyBlbmFibGVkXCIpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihwYXJhbXMubGlzdE9uRW1wdHkpe1xuXHRcdFx0XHRwYXJhbXMubGlzdE9uRW1wdHkgPSBmYWxzZTtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwibGlzdCBlZGl0b3IgY29uZmlnIGVycm9yIC0gbGlzdE9uRW1wdHkgb3B0aW9uIGlzIG9ubHkgYXZhaWxhYmxlIHdoZW4gYXV0b2NvbXBsZXRlIGlzIGVuYWJsZWRcIik7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHBhcmFtcy5maWx0ZXJSZW1vdGUgJiYgISh0eXBlb2YgcGFyYW1zLnZhbHVlc0xvb2t1cCA9PT0gXCJmdW5jdGlvblwiIHx8IHBhcmFtcy52YWx1ZXNVUkwpKXtcblx0XHRcdHBhcmFtcy5maWx0ZXJSZW1vdGUgPSBmYWxzZTtcblx0XHRcdGNvbnNvbGUud2FybihcImxpc3QgZWRpdG9yIGNvbmZpZyBlcnJvciAtIGZpbHRlclJlbW90ZSBvcHRpb24gc2hvdWxkIG9ubHkgYmUgdXNlZCB3aGVuIHZhbHVlcyBsaXN0IGlzIHBvcHVsYXRlZCBmcm9tIGEgcmVtb3RlIHNvdXJjZVwiKTtcblx0XHR9XG5cdFx0cmV0dXJuIHBhcmFtcztcblx0fVxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vIEV2ZW50IEhhbmRsaW5nIC8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0X2JpbmRJbnB1dEV2ZW50cyhpbnB1dCl7XG5cdFx0aW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIHRoaXMuX2lucHV0Rm9jdXMuYmluZCh0aGlzKSk7XG5cdFx0aW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuX2lucHV0Q2xpY2suYmluZCh0aGlzKSk7XG5cdFx0aW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgdGhpcy5faW5wdXRCbHVyLmJpbmQodGhpcykpO1xuXHRcdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2lucHV0S2V5RG93bi5iaW5kKHRoaXMpKTtcblx0XHRpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwic2VhcmNoXCIsIHRoaXMuX2lucHV0U2VhcmNoLmJpbmQodGhpcykpO1xuXHRcdFxuXHRcdGlmKHRoaXMucGFyYW1zLmF1dG9jb21wbGV0ZSl7XG5cdFx0XHRpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgdGhpcy5faW5wdXRLZXlVcC5iaW5kKHRoaXMpKTtcblx0XHR9XG5cdH1cblx0XG5cdFxuXHRfaW5wdXRGb2N1cyhlKXtcblx0XHR0aGlzLnJlYnVpbGRPcHRpb25zTGlzdCgpO1xuXHR9XG5cdFxuXHRfZmlsdGVyKCl7XG5cdFx0aWYodGhpcy5wYXJhbXMuZmlsdGVyUmVtb3RlKXtcblx0XHRcdGNsZWFyVGltZW91dCh0aGlzLmZpbHRlclRpbWVvdXQpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmZpbHRlclRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0dGhpcy5yZWJ1aWxkT3B0aW9uc0xpc3QoKTtcblx0XHRcdH0sIHRoaXMucGFyYW1zLmZpbHRlckRlbGF5KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLl9maWx0ZXJMaXN0KCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRfaW5wdXRDbGljayhlKXtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9XG5cdFxuXHRfaW5wdXRCbHVyKGUpe1xuXHRcdGlmKHRoaXMuYmx1cmFibGUpe1xuXHRcdFx0aWYodGhpcy5wb3B1cCl7XG5cdFx0XHRcdHRoaXMucG9wdXAuaGlkZSgpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLl9yZXNvbHZlVmFsdWUodHJ1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRfaW5wdXRTZWFyY2goKXtcblx0XHR0aGlzLl9jbGVhckNob2ljZXMoKTtcblx0fVxuXHRcblx0X2lucHV0S2V5RG93bihlKXtcblx0XHRzd2l0Y2goZS5rZXlDb2RlKXtcblx0XHRcdFxuXHRcdFx0Y2FzZSAzODogLy91cCBhcnJvd1xuXHRcdFx0XHR0aGlzLl9rZXlVcChlKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGNhc2UgNDA6IC8vZG93biBhcnJvd1xuXHRcdFx0XHR0aGlzLl9rZXlEb3duKGUpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0Y2FzZSAzNzogLy9sZWZ0IGFycm93XG5cdFx0XHRjYXNlIDM5OiAvL3JpZ2h0IGFycm93XG5cdFx0XHRcdHRoaXMuX2tleVNpZGUoZSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRjYXNlIDEzOiAvL2VudGVyXG5cdFx0XHRcdHRoaXMuX2tleUVudGVyKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRjYXNlIDI3OiAvL2VzY2FwZVxuXHRcdFx0XHR0aGlzLl9rZXlFc2MoKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGNhc2UgMzY6IC8vaG9tZVxuXHRcdFx0Y2FzZSAzNTogLy9lbmRcblx0XHRcdFx0dGhpcy5fa2V5SG9tZUVuZChlKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGNhc2UgOTogLy90YWJcblx0XHRcdFx0dGhpcy5fa2V5VGFiKGUpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0dGhpcy5fa2V5U2VsZWN0TGV0dGVyKGUpO1xuXHRcdH1cblx0fVxuXHRcblx0X2lucHV0S2V5VXAoZSl7XG5cdFx0c3dpdGNoKGUua2V5Q29kZSl7XG5cdFx0XHRjYXNlIDM4OiAvL3VwIGFycm93XG5cdFx0XHRjYXNlIDM3OiAvL2xlZnQgYXJyb3dcblx0XHRcdGNhc2UgMzk6IC8vdXAgYXJyb3dcblx0XHRcdGNhc2UgNDA6IC8vcmlnaHQgYXJyb3dcblx0XHRcdGNhc2UgMTM6IC8vZW50ZXJcblx0XHRcdGNhc2UgMjc6IC8vZXNjYXBlXG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHR0aGlzLl9rZXlBdXRvQ29tcExldHRlcihlKTtcblx0XHR9XG5cdH1cblx0XG5cdF9wcmV2ZW50UG9wdXBCbHVyKCl7XG5cdFx0aWYodGhpcy5wb3B1cCl7XG5cdFx0XHR0aGlzLnBvcHVwLmJsb2NrSGlkZSgpO1xuXHRcdH1cblx0XHRcblx0XHRzZXRUaW1lb3V0KCgpID0+e1xuXHRcdFx0aWYodGhpcy5wb3B1cCl7XG5cdFx0XHRcdHRoaXMucG9wdXAucmVzdG9yZUhpZGUoKTtcblx0XHRcdH1cblx0XHR9LCAxMCk7XG5cdH1cblx0XG5cdF9wcmV2ZW50Qmx1cigpe1xuXHRcdHRoaXMuYmx1cmFibGUgPSBmYWxzZTtcblx0XHRcblx0XHRzZXRUaW1lb3V0KCgpID0+e1xuXHRcdFx0dGhpcy5ibHVyYWJsZSA9IHRydWU7XG5cdFx0fSwgMTApO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLyBLZXlib2FyZCBOYXZpZ2F0aW9uIC8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0X2tleVRhYihlKXtcblx0XHRpZih0aGlzLnBhcmFtcy5hdXRvY29tcGxldGUgJiYgdGhpcy5sYXN0QWN0aW9uID09PSBcInR5cGluZ1wiKXtcblx0XHRcdHRoaXMuX3Jlc29sdmVWYWx1ZSh0cnVlKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRpZih0aGlzLmZvY3VzZWRJdGVtKXtcblx0XHRcdFx0dGhpcy5fY2hvb3NlSXRlbSh0aGlzLmZvY3VzZWRJdGVtLCB0cnVlKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdF9rZXlVcChlKXtcblx0XHR2YXIgaW5kZXggPSB0aGlzLmRpc3BsYXlJdGVtcy5pbmRleE9mKHRoaXMuZm9jdXNlZEl0ZW0pO1xuXHRcdFxuXHRcdGlmKHRoaXMucGFyYW1zLnZlcnRpY2FsTmF2aWdhdGlvbiA9PSBcImVkaXRvclwiIHx8ICh0aGlzLnBhcmFtcy52ZXJ0aWNhbE5hdmlnYXRpb24gPT0gXCJoeWJyaWRcIiAmJiBpbmRleCkpe1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcblx0XHRcdGlmKGluZGV4ID4gMCl7XG5cdFx0XHRcdHRoaXMuX2ZvY3VzSXRlbSh0aGlzLmRpc3BsYXlJdGVtc1tpbmRleCAtIDFdKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdF9rZXlEb3duKGUpe1xuXHRcdHZhciBpbmRleCA9IHRoaXMuZGlzcGxheUl0ZW1zLmluZGV4T2YodGhpcy5mb2N1c2VkSXRlbSk7XG5cdFx0XG5cdFx0aWYodGhpcy5wYXJhbXMudmVydGljYWxOYXZpZ2F0aW9uID09IFwiZWRpdG9yXCIgfHwgKHRoaXMucGFyYW1zLnZlcnRpY2FsTmF2aWdhdGlvbiA9PSBcImh5YnJpZFwiICYmIGluZGV4IDwgdGhpcy5kaXNwbGF5SXRlbXMubGVuZ3RoIC0gMSkpe1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcblx0XHRcdGlmKGluZGV4IDwgdGhpcy5kaXNwbGF5SXRlbXMubGVuZ3RoIC0gMSl7XG5cdFx0XHRcdGlmKGluZGV4ID09IC0xKXtcblx0XHRcdFx0XHR0aGlzLl9mb2N1c0l0ZW0odGhpcy5kaXNwbGF5SXRlbXNbMF0pO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5fZm9jdXNJdGVtKHRoaXMuZGlzcGxheUl0ZW1zW2luZGV4ICsgMV0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRfa2V5U2lkZShlKXtcblx0XHRpZighdGhpcy5wYXJhbXMuYXV0b2NvbXBsZXRlKXtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fVxuXHRcblx0X2tleUVudGVyKGUpe1xuXHRcdGlmKHRoaXMucGFyYW1zLmF1dG9jb21wbGV0ZSAmJiB0aGlzLmxhc3RBY3Rpb24gPT09IFwidHlwaW5nXCIpe1xuXHRcdFx0dGhpcy5fcmVzb2x2ZVZhbHVlKHRydWUpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGlmKHRoaXMuZm9jdXNlZEl0ZW0pe1xuXHRcdFx0XHR0aGlzLl9jaG9vc2VJdGVtKHRoaXMuZm9jdXNlZEl0ZW0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0X2tleUVzYyhlKXtcblx0XHR0aGlzLl9jYW5jZWwoKTtcblx0fVxuXHRcblx0X2tleUhvbWVFbmQoZSl7XG5cdFx0aWYodGhpcy5wYXJhbXMuYXV0b2NvbXBsZXRlKXtcblx0XHRcdC8vcHJldmVudCB0YWJsZSBuYXZpZ2F0aW9uIHdoaWxlIHVzaW5nIGlucHV0IGVsZW1lbnRcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRfa2V5U2VsZWN0TGV0dGVyKGUpe1xuXHRcdGlmKCF0aGlzLnBhcmFtcy5hdXRvY29tcGxldGUpe1xuXHRcdFx0Ly8gaWYodGhpcy5lZGl0LmN1cnJlbnRDZWxsID09PSBmYWxzZSl7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHQvLyB9XG5cdFx0XHRcblx0XHRcdGlmKGUua2V5Q29kZSA+PSAzOCAmJiBlLmtleUNvZGUgPD0gOTApe1xuXHRcdFx0XHR0aGlzLl9zY3JvbGxUb1ZhbHVlKGUua2V5Q29kZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRfa2V5QXV0b0NvbXBMZXR0ZXIoZSl7XG5cdFx0dGhpcy5fZmlsdGVyKCk7XG5cdFx0dGhpcy5sYXN0QWN0aW9uID0gXCJ0eXBpbmdcIjtcblx0XHR0aGlzLnR5cGluZyA9IHRydWU7XG5cdH1cblx0XG5cdFxuXHRfc2Nyb2xsVG9WYWx1ZShjaGFyKXtcblx0XHRjbGVhclRpbWVvdXQodGhpcy5maWx0ZXJUaW1lb3V0KTtcblx0XHRcblx0XHR2YXIgY2hhcmFjdGVyID0gU3RyaW5nLmZyb21DaGFyQ29kZShjaGFyKS50b0xvd2VyQ2FzZSgpO1xuXHRcdHRoaXMuZmlsdGVyVGVybSArPSBjaGFyYWN0ZXIudG9Mb3dlckNhc2UoKTtcblx0XHRcblx0XHR2YXIgbWF0Y2ggPSB0aGlzLmRpc3BsYXlJdGVtcy5maW5kKChpdGVtKSA9PiB7XG5cdFx0XHRyZXR1cm4gdHlwZW9mIGl0ZW0ubGFiZWwgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlbS5sYWJlbC50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgodGhpcy5maWx0ZXJUZXJtKTtcblx0XHR9KTtcblx0XHRcblx0XHRpZihtYXRjaCl7XG5cdFx0XHR0aGlzLl9mb2N1c0l0ZW0obWF0Y2gpO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLmZpbHRlclRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdHRoaXMuZmlsdGVyVGVybSA9IFwiXCI7XG5cdFx0fSwgODAwKTtcblx0fVxuXHRcblx0X2ZvY3VzSXRlbShpdGVtKXtcblx0XHR0aGlzLmxhc3RBY3Rpb24gPSBcImZvY3VzXCI7XG5cdFx0XG5cdFx0aWYodGhpcy5mb2N1c2VkSXRlbSAmJiB0aGlzLmZvY3VzZWRJdGVtLmVsZW1lbnQpe1xuXHRcdFx0dGhpcy5mb2N1c2VkSXRlbS5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJmb2N1c2VkXCIpO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLmZvY3VzZWRJdGVtID0gaXRlbTtcblx0XHRcblx0XHRpZihpdGVtICYmIGl0ZW0uZWxlbWVudCl7XG5cdFx0XHRpdGVtLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImZvY3VzZWRcIik7XG5cdFx0XHRpdGVtLmVsZW1lbnQuc2Nyb2xsSW50b1ZpZXcoe2JlaGF2aW9yOiAnc21vb3RoJywgYmxvY2s6ICduZWFyZXN0JywgaW5saW5lOiAnc3RhcnQnfSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLyBEYXRhIExpc3QgR2VuZXJhdGlvbiAvLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0aGVhZGVyRmlsdGVySW5pdGlhbExpc3RHZW4oKXtcblx0XHR0aGlzLl9nZW5lcmF0ZU9wdGlvbnModHJ1ZSk7XG5cdH1cblx0XG5cdHJlYnVpbGRPcHRpb25zTGlzdCgpe1xuXHRcdHRoaXMuX2dlbmVyYXRlT3B0aW9ucygpXG5cdFx0XHQudGhlbih0aGlzLl9zb3J0T3B0aW9ucy5iaW5kKHRoaXMpKVxuXHRcdFx0LnRoZW4odGhpcy5fYnVpbGRMaXN0LmJpbmQodGhpcykpXG5cdFx0XHQudGhlbih0aGlzLl9zaG93TGlzdC5iaW5kKHRoaXMpKVxuXHRcdFx0LmNhdGNoKChlKSA9PiB7XG5cdFx0XHRcdGlmKCFOdW1iZXIuaXNJbnRlZ2VyKGUpKXtcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKFwiTGlzdCBnZW5lcmF0aW9uIGVycm9yXCIsIGUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0fVxuXHRcblx0X2ZpbHRlckxpc3QoKXtcblx0XHR0aGlzLl9idWlsZExpc3QodGhpcy5fZmlsdGVyT3B0aW9ucygpKTtcblx0XHR0aGlzLl9zaG93TGlzdCgpO1xuXHR9XG5cdFxuXHRfZ2VuZXJhdGVPcHRpb25zKHNpbGVudCl7XG5cdFx0dmFyIHZhbHVlcyA9IFtdO1xuXHRcdHZhciBpdGVyYXRpb24gPSArKyB0aGlzLmxpc3RJdGVyYXRpb247XG5cdFx0XG5cdFx0dGhpcy5maWx0ZXJlZCA9IGZhbHNlO1xuXHRcdFxuXHRcdGlmKHRoaXMucGFyYW1zLnZhbHVlcyl7XG5cdFx0XHR2YWx1ZXMgPSB0aGlzLnBhcmFtcy52YWx1ZXM7XG5cdFx0fWVsc2UgaWYgKHRoaXMucGFyYW1zLnZhbHVlc1VSTCl7XG5cdFx0XHR2YWx1ZXMgPSB0aGlzLl9hamF4UmVxdWVzdCh0aGlzLnBhcmFtcy52YWx1ZXNVUkwsIHRoaXMuaW5wdXQudmFsdWUpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGlmKHR5cGVvZiB0aGlzLnBhcmFtcy52YWx1ZXNMb29rdXAgPT09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRcdHZhbHVlcyA9IHRoaXMucGFyYW1zLnZhbHVlc0xvb2t1cCh0aGlzLmNlbGwsIHRoaXMuaW5wdXQudmFsdWUpO1xuXHRcdFx0fWVsc2UgaWYodGhpcy5wYXJhbXMudmFsdWVzTG9va3VwKXtcblx0XHRcdFx0dmFsdWVzID0gdGhpcy5fdW5pcXVlQ29sdW1uVmFsdWVzKHRoaXMucGFyYW1zLnZhbHVlc0xvb2t1cEZpZWxkKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0aWYodmFsdWVzIGluc3RhbmNlb2YgUHJvbWlzZSl7XG5cdFx0XHRpZighc2lsZW50KXtcblx0XHRcdFx0dGhpcy5fYWRkUGxhY2Vob2xkZXIodGhpcy5wYXJhbXMucGxhY2Vob2xkZXJMb2FkaW5nKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0cmV0dXJuIHZhbHVlcy50aGVuKClcblx0XHRcdFx0LnRoZW4oKHJlc3BvbnNlVmFsdWVzKSA9PiB7XG5cdFx0XHRcdFx0aWYodGhpcy5saXN0SXRlcmF0aW9uID09PSBpdGVyYXRpb24pe1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuX3BhcnNlTGlzdChyZXNwb25zZVZhbHVlcyk7XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGl0ZXJhdGlvbik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX3BhcnNlTGlzdCh2YWx1ZXMpKTtcblx0XHR9XG5cdH1cblx0XG5cdF9hZGRQbGFjZWhvbGRlcihjb250ZW50cyl7XG5cdFx0dmFyIHBsYWNlaG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcblx0XHRpZih0eXBlb2YgY29udGVudHMgPT09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRjb250ZW50cyA9IGNvbnRlbnRzKHRoaXMuY2VsbC5nZXRDb21wb25lbnQoKSwgdGhpcy5saXN0RWwpO1xuXHRcdH1cblx0XHRcblx0XHRpZihjb250ZW50cyl7XG5cdFx0XHR0aGlzLl9jbGVhckxpc3QoKTtcblx0XHRcdFxuXHRcdFx0aWYoY29udGVudHMgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCl7XG5cdFx0XHRcdHBsYWNlaG9sZGVyID0gY29udGVudHM7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHBsYWNlaG9sZGVyLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItZWRpdC1saXN0LXBsYWNlaG9sZGVyXCIpO1xuXHRcdFx0XHRwbGFjZWhvbGRlci5pbm5lckhUTUwgPSBjb250ZW50cztcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5saXN0RWwuYXBwZW5kQ2hpbGQocGxhY2Vob2xkZXIpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLl9zaG93TGlzdCgpO1xuXHRcdH1cblx0fVxuXHRcblx0X2FqYXhSZXF1ZXN0KHVybCwgdGVybSl7XG5cdFx0dmFyIHBhcmFtcyA9IHRoaXMucGFyYW1zLmZpbHRlclJlbW90ZSA/IHt0ZXJtOnRlcm19IDoge307XG5cdFx0dXJsID0gdXJsQnVpbGRlcih1cmwsIHt9LCBwYXJhbXMpO1xuXHRcdFxuXHRcdHJldHVybiBmZXRjaCh1cmwpXG5cdFx0XHQudGhlbigocmVzcG9uc2UpPT57XG5cdFx0XHRcdGlmKHJlc3BvbnNlLm9rKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlLmpzb24oKVxuXHRcdFx0XHRcdFx0LmNhdGNoKChlcnJvcik9Pntcblx0XHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiTGlzdCBBamF4IExvYWQgRXJyb3IgLSBJbnZhbGlkIEpTT04gcmV0dXJuZWRcIiwgZXJyb3IpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKFwiTGlzdCBBamF4IExvYWQgRXJyb3IgLSBDb25uZWN0aW9uIEVycm9yOiBcIiArIHJlc3BvbnNlLnN0YXR1cywgcmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG5cdFx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KHJlc3BvbnNlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSlcblx0XHRcdC5jYXRjaCgoZXJyb3IpPT57XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJMaXN0IEFqYXggTG9hZCBFcnJvciAtIENvbm5lY3Rpb24gRXJyb3I6IFwiLCBlcnJvcik7XG5cdFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG5cdFx0XHR9KTtcblx0fVxuXHRcblx0X3VuaXF1ZUNvbHVtblZhbHVlcyhmaWVsZCl7XG5cdFx0dmFyIG91dHB1dCA9IHt9LFxuXHRcdGRhdGEgPSB0aGlzLnRhYmxlLmdldERhdGEodGhpcy5wYXJhbXMudmFsdWVzTG9va3VwKSxcblx0XHRjb2x1bW47XG5cdFx0XG5cdFx0aWYoZmllbGQpe1xuXHRcdFx0Y29sdW1uID0gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmdldENvbHVtbkJ5RmllbGQoZmllbGQpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbHVtbiA9IHRoaXMuY2VsbC5nZXRDb2x1bW4oKS5fZ2V0U2VsZigpO1xuXHRcdH1cblx0XHRcblx0XHRpZihjb2x1bW4pe1xuXHRcdFx0ZGF0YS5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdFx0dmFyIHZhbCA9IGNvbHVtbi5nZXRGaWVsZFZhbHVlKHJvdyk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiB2YWwgIT09IFwiXCIpe1xuXHRcdFx0XHRcdG91dHB1dFt2YWxdID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwidW5hYmxlIHRvIGZpbmQgbWF0Y2hpbmcgY29sdW1uIHRvIGNyZWF0ZSBzZWxlY3QgbG9va3VwIGxpc3Q6XCIsIGZpZWxkKTtcblx0XHRcdG91dHB1dCA9IFtdO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gT2JqZWN0LmtleXMob3V0cHV0KTtcblx0fVxuXHRcblx0XG5cdF9wYXJzZUxpc3QoaW5wdXRWYWx1ZXMpe1xuXHRcdHZhciBkYXRhID0gW107XG5cdFx0XG5cdFx0aWYoIUFycmF5LmlzQXJyYXkoaW5wdXRWYWx1ZXMpKXtcblx0XHRcdGlucHV0VmFsdWVzID0gT2JqZWN0LmVudHJpZXMoaW5wdXRWYWx1ZXMpLm1hcCgoW2tleSwgdmFsdWVdKSA9PiB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bGFiZWw6dmFsdWUsXG5cdFx0XHRcdFx0dmFsdWU6a2V5LFxuXHRcdFx0XHR9O1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlucHV0VmFsdWVzLmZvckVhY2goKHZhbHVlKSA9PiB7XG5cdFx0XHRpZih0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIpe1xuXHRcdFx0XHR2YWx1ZSA9IHtcblx0XHRcdFx0XHRsYWJlbDp2YWx1ZSxcblx0XHRcdFx0XHR2YWx1ZTp2YWx1ZSxcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5fcGFyc2VMaXN0SXRlbSh2YWx1ZSwgZGF0YSwgMCk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0aWYoIXRoaXMuY3VycmVudEl0ZW1zLmxlbmd0aCAmJiB0aGlzLnBhcmFtcy5mcmVldGV4dCl7XG5cdFx0XHR0aGlzLmlucHV0LnZhbHVlID0gdGhpcy5pbml0aWFsVmFsdWVzO1xuXHRcdFx0dGhpcy50eXBpbmcgPSB0cnVlO1xuXHRcdFx0dGhpcy5sYXN0QWN0aW9uID0gXCJ0eXBpbmdcIjtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5kYXRhID0gZGF0YTtcblx0XHRcblx0XHRyZXR1cm4gZGF0YTsgICAgXG5cdH1cblx0XG5cdF9wYXJzZUxpc3RJdGVtKG9wdGlvbiwgZGF0YSwgbGV2ZWwpe1xuXHRcdHZhciBpdGVtID0ge307XG5cdFx0XG5cdFx0aWYob3B0aW9uLm9wdGlvbnMpe1xuXHRcdFx0aXRlbSA9IHRoaXMuX3BhcnNlTGlzdEdyb3VwKG9wdGlvbiwgbGV2ZWwgKyAxKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRpdGVtID0ge1xuXHRcdFx0XHRsYWJlbDpvcHRpb24ubGFiZWwsXG5cdFx0XHRcdHZhbHVlOm9wdGlvbi52YWx1ZSxcblx0XHRcdFx0aXRlbVBhcmFtczpvcHRpb24uaXRlbVBhcmFtcyxcblx0XHRcdFx0ZWxlbWVudEF0dHJpYnV0ZXM6IG9wdGlvbi5lbGVtZW50QXR0cmlidXRlcyxcblx0XHRcdFx0ZWxlbWVudDpmYWxzZSxcblx0XHRcdFx0c2VsZWN0ZWQ6ZmFsc2UsXG5cdFx0XHRcdHZpc2libGU6dHJ1ZSxcblx0XHRcdFx0bGV2ZWw6bGV2ZWwsXG5cdFx0XHRcdG9yaWdpbmFsOm9wdGlvbixcblx0XHRcdH07XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMuaW5pdGlhbFZhbHVlcyAmJiB0aGlzLmluaXRpYWxWYWx1ZXMuaW5kZXhPZihvcHRpb24udmFsdWUpID4gLTEpe1xuXHRcdFx0XHR0aGlzLl9jaG9vc2VJdGVtKGl0ZW0sIHRydWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRkYXRhLnB1c2goaXRlbSk7XG5cdH1cblx0XG5cdF9wYXJzZUxpc3RHcm91cChvcHRpb24sIGxldmVsKXtcblx0XHR2YXIgaXRlbSA9IHtcblx0XHRcdGxhYmVsOm9wdGlvbi5sYWJlbCxcblx0XHRcdGdyb3VwOnRydWUsXG5cdFx0XHRpdGVtUGFyYW1zOm9wdGlvbi5pdGVtUGFyYW1zLFxuXHRcdFx0ZWxlbWVudEF0dHJpYnV0ZXM6b3B0aW9uLmVsZW1lbnRBdHRyaWJ1dGVzLFxuXHRcdFx0ZWxlbWVudDpmYWxzZSxcblx0XHRcdHZpc2libGU6dHJ1ZSxcblx0XHRcdGxldmVsOmxldmVsLFxuXHRcdFx0b3B0aW9uczpbXSxcblx0XHRcdG9yaWdpbmFsOm9wdGlvbixcblx0XHR9O1xuXHRcdFxuXHRcdG9wdGlvbi5vcHRpb25zLmZvckVhY2goKGNoaWxkKSA9PiB7XG5cdFx0XHR0aGlzLl9wYXJzZUxpc3RJdGVtKGNoaWxkLCBpdGVtLm9wdGlvbnMsIGxldmVsKTtcblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gaXRlbTtcblx0fVxuXHRcblx0X3NvcnRPcHRpb25zKG9wdGlvbnMpe1xuXHRcdHZhciBzb3J0ZXI7XG5cdFx0XG5cdFx0aWYodGhpcy5wYXJhbXMuc29ydCl7XG5cdFx0XHRzb3J0ZXIgPSB0eXBlb2YgdGhpcy5wYXJhbXMuc29ydCA9PT0gXCJmdW5jdGlvblwiID8gdGhpcy5wYXJhbXMuc29ydCA6IHRoaXMuX2RlZmF1bHRTb3J0RnVuY3Rpb24uYmluZCh0aGlzKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5fc29ydEdyb3VwKHNvcnRlciwgb3B0aW9ucyk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBvcHRpb25zO1xuXHR9XG5cdFxuXHRfc29ydEdyb3VwKHNvcnRlciwgb3B0aW9ucyl7XG5cdFx0b3B0aW9ucy5zb3J0KChhLGIpID0+IHtcblx0XHRcdHJldHVybiBzb3J0ZXIoYS5sYWJlbCwgYi5sYWJlbCwgYS52YWx1ZSwgYi52YWx1ZSwgYS5vcmlnaW5hbCwgYi5vcmlnaW5hbCk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0b3B0aW9ucy5mb3JFYWNoKChvcHRpb24pID0+IHtcblx0XHRcdGlmKG9wdGlvbi5ncm91cCl7XG5cdFx0XHRcdHRoaXMuX3NvcnRHcm91cChzb3J0ZXIsIG9wdGlvbi5vcHRpb25zKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRcblx0X2RlZmF1bHRTb3J0RnVuY3Rpb24oYXMsIGJzKXtcblx0XHR2YXIgYSwgYiwgYTEsIGIxLCBpPSAwLCBMLCByeCA9IC8oXFxkKyl8KFxcRCspL2csIHJkID0gL1xcZC87XG5cdFx0dmFyIGVtcHR5QWxpZ24gPSAwO1xuXHRcdFxuXHRcdGlmKHRoaXMucGFyYW1zLnNvcnQgPT09IFwiZGVzY1wiKXtcblx0XHRcdFthcywgYnNdID0gW2JzLCBhc107XG5cdFx0fVxuXHRcdFxuXHRcdC8vaGFuZGxlIGVtcHR5IHZhbHVlc1xuXHRcdGlmKCFhcyAmJiBhcyE9PSAwKXtcblx0XHRcdGVtcHR5QWxpZ24gPSAgIWJzICYmIGJzIT09IDAgPyAwIDogLTE7XG5cdFx0fWVsc2UgaWYoIWJzICYmIGJzIT09IDApe1xuXHRcdFx0ZW1wdHlBbGlnbiA9ICAxO1xuXHRcdH1lbHNlIHtcblx0XHRcdGlmKGlzRmluaXRlKGFzKSAmJiBpc0Zpbml0ZShicykpIHJldHVybiBhcyAtIGJzO1xuXHRcdFx0YSA9IFN0cmluZyhhcykudG9Mb3dlckNhc2UoKTtcblx0XHRcdGIgPSBTdHJpbmcoYnMpLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRpZihhID09PSBiKSByZXR1cm4gMDtcblx0XHRcdGlmKCEocmQudGVzdChhKSAmJiByZC50ZXN0KGIpKSkgcmV0dXJuIGEgPiBiID8gMSA6IC0xO1xuXHRcdFx0YSA9IGEubWF0Y2gocngpO1xuXHRcdFx0YiA9IGIubWF0Y2gocngpO1xuXHRcdFx0TCA9IGEubGVuZ3RoID4gYi5sZW5ndGggPyBiLmxlbmd0aCA6IGEubGVuZ3RoO1xuXHRcdFx0d2hpbGUoaSA8IEwpe1xuXHRcdFx0XHRhMT0gYVtpXTtcblx0XHRcdFx0YjE9IGJbaSsrXTtcblx0XHRcdFx0aWYoYTEgIT09IGIxKXtcblx0XHRcdFx0XHRpZihpc0Zpbml0ZShhMSkgJiYgaXNGaW5pdGUoYjEpKXtcblx0XHRcdFx0XHRcdGlmKGExLmNoYXJBdCgwKSA9PT0gXCIwXCIpIGExID0gXCIuXCIgKyBhMTtcblx0XHRcdFx0XHRcdGlmKGIxLmNoYXJBdCgwKSA9PT0gXCIwXCIpIGIxID0gXCIuXCIgKyBiMTtcblx0XHRcdFx0XHRcdHJldHVybiBhMSAtIGIxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIHJldHVybiBhMSA+IGIxID8gMSA6IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHJldHVybiBhLmxlbmd0aCA+IGIubGVuZ3RoO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gZW1wdHlBbGlnbjtcblx0fVxuXHRcblx0X2ZpbHRlck9wdGlvbnMoKXtcblx0XHR2YXIgZmlsdGVyRnVuYyA9IHRoaXMucGFyYW1zLmZpbHRlckZ1bmMgfHwgdGhpcy5fZGVmYXVsdEZpbHRlckZ1bmMsXG5cdFx0dGVybSA9IHRoaXMuaW5wdXQudmFsdWU7XG5cdFx0XG5cdFx0aWYodGVybSl7XG5cdFx0XHR0aGlzLmZpbHRlcmVkID0gdHJ1ZTtcblx0XHRcdFxuXHRcdFx0dGhpcy5kYXRhLmZvckVhY2goKGl0ZW0pID0+IHtcblx0XHRcdFx0dGhpcy5fZmlsdGVySXRlbShmaWx0ZXJGdW5jLCB0ZXJtLCBpdGVtKTtcblx0XHRcdH0pO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuZmlsdGVyZWQgPSBmYWxzZTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHRoaXMuZGF0YTtcblx0fVxuXHRcblx0X2ZpbHRlckl0ZW0oZnVuYywgdGVybSwgaXRlbSl7XG5cdFx0dmFyIG1hdGNoZXMgPSBmYWxzZTtcblx0XHRcblx0XHRpZighaXRlbS5ncm91cCl7XG5cdFx0XHRpdGVtLnZpc2libGUgPSBmdW5jKHRlcm0sIGl0ZW0ubGFiZWwsIGl0ZW0udmFsdWUsIGl0ZW0ub3JpZ2luYWwpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGl0ZW0ub3B0aW9ucy5mb3JFYWNoKChvcHRpb24pID0+IHtcblx0XHRcdFx0aWYodGhpcy5fZmlsdGVySXRlbShmdW5jLCB0ZXJtLCBvcHRpb24pKXtcblx0XHRcdFx0XHRtYXRjaGVzID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdGl0ZW0udmlzaWJsZSA9IG1hdGNoZXM7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBpdGVtLnZpc2libGU7XG5cdH1cblx0XG5cdF9kZWZhdWx0RmlsdGVyRnVuYyh0ZXJtLCBsYWJlbCwgdmFsdWUsIGl0ZW0pe1xuXHRcdHRlcm0gPSBTdHJpbmcodGVybSkudG9Mb3dlckNhc2UoKTtcblx0XHRcblx0XHRpZihsYWJlbCAhPT0gbnVsbCAmJiB0eXBlb2YgbGFiZWwgIT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0aWYoU3RyaW5nKGxhYmVsKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YodGVybSkgPiAtMSB8fCBTdHJpbmcodmFsdWUpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZih0ZXJtKSA+IC0xKXtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8gRGlzcGxheSBMaXN0IC8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdF9jbGVhckxpc3QoKXtcblx0XHR3aGlsZSh0aGlzLmxpc3RFbC5maXJzdENoaWxkKSB0aGlzLmxpc3RFbC5yZW1vdmVDaGlsZCh0aGlzLmxpc3RFbC5maXJzdENoaWxkKTtcblx0XHRcblx0XHR0aGlzLmRpc3BsYXlJdGVtcyA9IFtdO1xuXHR9XG5cdFxuXHRfYnVpbGRMaXN0KGRhdGEpe1xuXHRcdHRoaXMuX2NsZWFyTGlzdCgpO1xuXHRcdFxuXHRcdGRhdGEuZm9yRWFjaCgob3B0aW9uKSA9PiB7XG5cdFx0XHR0aGlzLl9idWlsZEl0ZW0ob3B0aW9uKTtcblx0XHR9KTtcblx0XHRcblx0XHRpZighdGhpcy5kaXNwbGF5SXRlbXMubGVuZ3RoKXtcblx0XHRcdHRoaXMuX2FkZFBsYWNlaG9sZGVyKHRoaXMucGFyYW1zLnBsYWNlaG9sZGVyRW1wdHkpO1xuXHRcdH0gIFxuXHR9XG5cdFxuXHRfYnVpbGRJdGVtKGl0ZW0pe1xuXHRcdHZhciBlbCA9IGl0ZW0uZWxlbWVudCxcblx0XHRjb250ZW50cztcblx0XHRcblx0XHRpZighdGhpcy5maWx0ZXJlZCB8fCBpdGVtLnZpc2libGUpe1xuXHRcdFx0XG5cdFx0XHRpZighZWwpe1xuXHRcdFx0XHRlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XHRcdGVsLnRhYkluZGV4ID0gMDtcblx0XHRcdFx0XG5cdFx0XHRcdGNvbnRlbnRzID0gdGhpcy5wYXJhbXMuaXRlbUZvcm1hdHRlciA/IHRoaXMucGFyYW1zLml0ZW1Gb3JtYXR0ZXIoaXRlbS5sYWJlbCwgaXRlbS52YWx1ZSwgaXRlbS5vcmlnaW5hbCwgZWwpIDogaXRlbS5sYWJlbDtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKGNvbnRlbnRzIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpe1xuXHRcdFx0XHRcdGVsLmFwcGVuZENoaWxkKGNvbnRlbnRzKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGVsLmlubmVySFRNTCA9IGNvbnRlbnRzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihpdGVtLmdyb3VwKXtcblx0XHRcdFx0XHRlbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWVkaXQtbGlzdC1ncm91cFwiKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItZWRpdC1saXN0LWl0ZW1cIik7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItZWRpdC1saXN0LWdyb3VwLWxldmVsLVwiICsgaXRlbS5sZXZlbCk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihpdGVtLmVsZW1lbnRBdHRyaWJ1dGVzICYmIHR5cGVvZiBpdGVtLmVsZW1lbnRBdHRyaWJ1dGVzID09IFwib2JqZWN0XCIpe1xuXHRcdFx0XHRcdGZvciAobGV0IGtleSBpbiBpdGVtLmVsZW1lbnRBdHRyaWJ1dGVzKXtcblx0XHRcdFx0XHRcdGlmKGtleS5jaGFyQXQoMCkgPT0gXCIrXCIpe1xuXHRcdFx0XHRcdFx0XHRrZXkgPSBrZXkuc2xpY2UoMSk7XG5cdFx0XHRcdFx0XHRcdGVsLnNldEF0dHJpYnV0ZShrZXksIHRoaXMuaW5wdXQuZ2V0QXR0cmlidXRlKGtleSkgKyBpdGVtLmVsZW1lbnRBdHRyaWJ1dGVzW1wiK1wiICsga2V5XSk7XG5cdFx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGVsLnNldEF0dHJpYnV0ZShrZXksIGl0ZW0uZWxlbWVudEF0dHJpYnV0ZXNba2V5XSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihpdGVtLmdyb3VwKXtcblx0XHRcdFx0XHRlbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5fZ3JvdXBDbGljay5iaW5kKHRoaXMsIGl0ZW0pKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLl9pdGVtQ2xpY2suYmluZCh0aGlzLCBpdGVtKSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5fcHJldmVudEJsdXIuYmluZCh0aGlzKSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpdGVtLmVsZW1lbnQgPSBlbDtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5fc3R5bGVJdGVtKGl0ZW0pO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmxpc3RFbC5hcHBlbmRDaGlsZChlbCk7XG5cdFx0XHRcblx0XHRcdGlmKGl0ZW0uZ3JvdXApe1xuXHRcdFx0XHRpdGVtLm9wdGlvbnMuZm9yRWFjaCgob3B0aW9uKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5fYnVpbGRJdGVtKG9wdGlvbik7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmRpc3BsYXlJdGVtcy5wdXNoKGl0ZW0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0X3Nob3dMaXN0KCl7XG5cdFx0dmFyIHN0YXJ0VmlzID0gdGhpcy5wb3B1cCAmJiB0aGlzLnBvcHVwLmlzVmlzaWJsZSgpO1xuXHRcdFxuXHRcdGlmKHRoaXMuaW5wdXQucGFyZW50Tm9kZSl7XG5cdFx0XHRpZih0aGlzLnBhcmFtcy5hdXRvY29tcGxldGUgJiYgdGhpcy5pbnB1dC52YWx1ZSA9PT0gXCJcIiAmJiAhdGhpcy5wYXJhbXMubGlzdE9uRW1wdHkpe1xuXHRcdFx0XHRpZih0aGlzLnBvcHVwKXtcblx0XHRcdFx0XHR0aGlzLnBvcHVwLmhpZGUodHJ1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLl9zZXRMaXN0V2lkdGgoKTtcblx0XHRcdFxuXHRcdFx0aWYoIXRoaXMucG9wdXApe1xuXHRcdFx0XHR0aGlzLnBvcHVwID0gdGhpcy5lZGl0LnBvcHVwKHRoaXMubGlzdEVsKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5wb3B1cC5zaG93KHRoaXMuY2VsbC5nZXRFbGVtZW50KCksIFwiYm90dG9tXCIpO1xuXHRcdFx0XG5cdFx0XHRpZighc3RhcnRWaXMpe1xuXHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0XHR0aGlzLnBvcHVwLmhpZGVPbkJsdXIodGhpcy5fcmVzb2x2ZVZhbHVlLmJpbmQodGhpcywgdHJ1ZSkpO1xuXHRcdFx0XHR9LCAxMCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRfc3R5bGVJdGVtKGl0ZW0pe1xuXHRcdGlmKGl0ZW0gJiYgaXRlbS5lbGVtZW50KXtcblx0XHRcdGlmKGl0ZW0uc2VsZWN0ZWQpe1xuXHRcdFx0XHRpdGVtLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aXRlbS5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8gVXNlciBJbnRlcmFjdGlvbiAvLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0X2l0ZW1DbGljayhpdGVtLCBlKXtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFxuXHRcdHRoaXMuX2Nob29zZUl0ZW0oaXRlbSk7XG5cdH1cblx0XG5cdF9ncm91cENsaWNrKGl0ZW0sIGUpe1xuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cblx0XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8gQ3VycmVudCBJdGVtIE1hbmFnZW1lbnQgLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0X2NhbmNlbCgpe1xuXHRcdHRoaXMucG9wdXAuaGlkZSh0cnVlKTtcblx0XHR0aGlzLmFjdGlvbnMuY2FuY2VsKCk7XG5cdH1cblx0XG5cdF9jbGVhckNob2ljZXMoKXtcblx0XHR0aGlzLnR5cGluZyA9IHRydWU7XG5cdFx0XG5cdFx0dGhpcy5jdXJyZW50SXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuXHRcdFx0aXRlbS5zZWxlY3RlZCA9IGZhbHNlO1xuXHRcdFx0dGhpcy5fc3R5bGVJdGVtKGl0ZW0pO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHRoaXMuY3VycmVudEl0ZW1zID0gW107XG5cdFx0XG5cdFx0dGhpcy5mb2N1c2VkSXRlbSA9IG51bGw7XG5cdH1cblx0XG5cdF9jaG9vc2VJdGVtKGl0ZW0sIHNpbGVudCl7XG5cdFx0dmFyIGluZGV4O1xuXHRcdFxuXHRcdHRoaXMudHlwaW5nID0gZmFsc2U7XG5cdFx0XG5cdFx0aWYodGhpcy5wYXJhbXMubXVsdGlzZWxlY3Qpe1xuXHRcdFx0aW5kZXggPSB0aGlzLmN1cnJlbnRJdGVtcy5pbmRleE9mKGl0ZW0pO1xuXHRcdFx0XG5cdFx0XHRpZihpbmRleCA+IC0xKXtcblx0XHRcdFx0dGhpcy5jdXJyZW50SXRlbXMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdFx0aXRlbS5zZWxlY3RlZCA9IGZhbHNlO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmN1cnJlbnRJdGVtcy5wdXNoKGl0ZW0pO1xuXHRcdFx0XHRpdGVtLnNlbGVjdGVkID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5pbnB1dC52YWx1ZSA9IHRoaXMuY3VycmVudEl0ZW1zLm1hcChpdGVtID0+IGl0ZW0ubGFiZWwpLmpvaW4oXCIsXCIpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLl9zdHlsZUl0ZW0oaXRlbSk7XG5cdFx0XHRcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLmN1cnJlbnRJdGVtcyA9IFtpdGVtXTtcblx0XHRcdGl0ZW0uc2VsZWN0ZWQgPSB0cnVlO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmlucHV0LnZhbHVlID0gaXRlbS5sYWJlbDtcblx0XHRcdFxuXHRcdFx0dGhpcy5fc3R5bGVJdGVtKGl0ZW0pO1xuXHRcdFx0XG5cdFx0XHRpZighc2lsZW50KXtcblx0XHRcdFx0dGhpcy5fcmVzb2x2ZVZhbHVlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuX2ZvY3VzSXRlbShpdGVtKTtcblx0fVxuXHRcblx0X3Jlc29sdmVWYWx1ZShibHVyKXtcblx0XHR2YXIgb3V0cHV0LCBpbml0aWFsVmFsdWU7XG5cdFx0XG5cdFx0aWYodGhpcy5wb3B1cCl7XG5cdFx0XHR0aGlzLnBvcHVwLmhpZGUodHJ1ZSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRoaXMucGFyYW1zLm11bHRpc2VsZWN0KXtcblx0XHRcdG91dHB1dCA9IHRoaXMuY3VycmVudEl0ZW1zLm1hcChpdGVtID0+IGl0ZW0udmFsdWUpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGlmKGJsdXIgJiYgdGhpcy5wYXJhbXMuYXV0b2NvbXBsZXRlICYmIHRoaXMudHlwaW5nKXtcblx0XHRcdFx0aWYodGhpcy5wYXJhbXMuZnJlZXRleHQgfHwgKHRoaXMucGFyYW1zLmFsbG93RW1wdHkgJiYgdGhpcy5pbnB1dC52YWx1ZSA9PT0gXCJcIikpe1xuXHRcdFx0XHRcdG91dHB1dCA9IHRoaXMuaW5wdXQudmFsdWU7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHR0aGlzLmFjdGlvbnMuY2FuY2VsKCk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlmKHRoaXMuY3VycmVudEl0ZW1zWzBdKXtcblx0XHRcdFx0XHRvdXRwdXQgPSB0aGlzLmN1cnJlbnRJdGVtc1swXS52YWx1ZTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGluaXRpYWxWYWx1ZSA9IEFycmF5LmlzQXJyYXkodGhpcy5pbml0aWFsVmFsdWVzKSA/IHRoaXMuaW5pdGlhbFZhbHVlc1swXSA6IHRoaXMuaW5pdGlhbFZhbHVlcztcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZihpbml0aWFsVmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIGluaXRpYWxWYWx1ZSA9PT0gXCJ1bmRlZmluZWRcIiB8fCBpbml0aWFsVmFsdWUgPT09IFwiXCIpe1xuXHRcdFx0XHRcdFx0b3V0cHV0ID0gaW5pdGlhbFZhbHVlO1xuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdG91dHB1dCA9IHRoaXMucGFyYW1zLmVtcHR5VmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRpZihvdXRwdXQgPT09IFwiXCIpe1xuXHRcdFx0b3V0cHV0ID0gdGhpcy5wYXJhbXMuZW1wdHlWYWx1ZTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5hY3Rpb25zLnN1Y2Nlc3Mob3V0cHV0KTtcblx0XHRcblx0XHRpZih0aGlzLmlzRmlsdGVyKXtcblx0XHRcdHRoaXMuaW5pdGlhbFZhbHVlcyA9IG91dHB1dCAmJiAhQXJyYXkuaXNBcnJheShvdXRwdXQpID8gW291dHB1dF0gOiBvdXRwdXQ7XG5cdFx0XHR0aGlzLmN1cnJlbnRJdGVtcyA9IFtdO1xuXHRcdH1cblx0fVxuXHRcbn1cblxuZnVuY3Rpb24gc2VsZWN0KGNlbGwsIG9uUmVuZGVyZWQsIHN1Y2Nlc3MsIGNhbmNlbCwgZWRpdG9yUGFyYW1zKXtcblxuXHR0aGlzLmRlcHJlY2F0aW9uTXNnKFwiVGhlIHNlbGVjdCBlZGl0b3IgaGFzIGJlZW4gZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSB0aGUgbmV3IGxpc3QgZWRpdG9yXCIpO1xuXG5cdHZhciBsaXN0ID0gbmV3IEVkaXQodGhpcywgY2VsbCwgb25SZW5kZXJlZCwgc3VjY2VzcywgY2FuY2VsLCBlZGl0b3JQYXJhbXMpO1xuXG5cdHJldHVybiBsaXN0LmlucHV0O1xufVxuXG5mdW5jdGlvbiBsaXN0KGNlbGwsIG9uUmVuZGVyZWQsIHN1Y2Nlc3MsIGNhbmNlbCwgZWRpdG9yUGFyYW1zKXtcblx0dmFyIGxpc3QgPSBuZXcgRWRpdCh0aGlzLCBjZWxsLCBvblJlbmRlcmVkLCBzdWNjZXNzLCBjYW5jZWwsIGVkaXRvclBhcmFtcyk7XG5cblx0cmV0dXJuIGxpc3QuaW5wdXQ7XG59XG5cbmZ1bmN0aW9uIGF1dG9jb21wbGV0ZShjZWxsLCBvblJlbmRlcmVkLCBzdWNjZXNzLCBjYW5jZWwsIGVkaXRvclBhcmFtcyl7XG5cblx0dGhpcy5kZXByZWNhdGlvbk1zZyhcIlRoZSBhdXRvY29tcGxldGUgZWRpdG9yIGhhcyBiZWVuIGRlcHJlY2F0ZWQsIHBsZWFzZSB1c2UgdGhlIG5ldyBsaXN0IGVkaXRvciB3aXRoIHRoZSAnYXV0b2NvbXBsZXRlJyBlZGl0b3JQYXJhbVwiKTtcblxuXHRlZGl0b3JQYXJhbXMuYXV0b2NvbXBsZXRlID0gdHJ1ZTtcblxuXHR2YXIgbGlzdCA9IG5ldyBFZGl0KHRoaXMsIGNlbGwsIG9uUmVuZGVyZWQsIHN1Y2Nlc3MsIGNhbmNlbCwgZWRpdG9yUGFyYW1zKTtcblxuXHRyZXR1cm4gbGlzdC5pbnB1dDtcbn1cblxuLy9zdGFyIHJhdGluZ1xuZnVuY3Rpb24gc3RhcihjZWxsLCBvblJlbmRlcmVkLCBzdWNjZXNzLCBjYW5jZWwsIGVkaXRvclBhcmFtcyl7XG5cdHZhciBzZWxmID0gdGhpcyxcblx0ZWxlbWVudCA9IGNlbGwuZ2V0RWxlbWVudCgpLFxuXHR2YWx1ZSA9IGNlbGwuZ2V0VmFsdWUoKSxcblx0bWF4U3RhcnMgPSBlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic3ZnXCIpLmxlbmd0aCB8fCA1LFxuXHRzaXplID0gZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInN2Z1wiKVswXSA/IGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzdmdcIilbMF0uZ2V0QXR0cmlidXRlKFwid2lkdGhcIikgOiAxNCxcblx0c3RhcnMgPSBbXSxcblx0c3RhcnNIb2xkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFxuXHRzdGFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsIFwic3ZnXCIpO1xuXG5cblx0Ly9jaGFuZ2Ugc3RhciB0eXBlXG5cdGZ1bmN0aW9uIHN0YXJDaGFuZ2UodmFsKXtcblx0XHRzdGFycy5mb3JFYWNoKGZ1bmN0aW9uKHN0YXIsIGkpe1xuXHRcdFx0aWYoaSA8IHZhbCl7XG5cdFx0XHRcdGlmKHNlbGYudGFibGUuYnJvd3NlciA9PSBcImllXCIpe1xuXHRcdFx0XHRcdHN0YXIuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJ0YWJ1bGF0b3Itc3Rhci1hY3RpdmVcIik7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRzdGFyLmNsYXNzTGlzdC5yZXBsYWNlKFwidGFidWxhdG9yLXN0YXItaW5hY3RpdmVcIiwgXCJ0YWJ1bGF0b3Itc3Rhci1hY3RpdmVcIik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzdGFyLmlubmVySFRNTCA9ICc8cG9seWdvbiBmaWxsPVwiIzQ4OENFOVwiIHN0cm9rZT1cIiMwMTRBQUVcIiBzdHJva2Utd2lkdGg9XCIzNy42MTUyXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgc3Ryb2tlLW1pdGVybGltaXQ9XCIxMFwiIHBvaW50cz1cIjI1OS4yMTYsMjkuOTQyIDMzMC4yNywxNzMuOTE5IDQ4OS4xNiwxOTcuMDA3IDM3NC4xODUsMzA5LjA4IDQwMS4zMyw0NjcuMzEgMjU5LjIxNiwzOTIuNjEyIDExNy4xMDQsNDY3LjMxIDE0NC4yNSwzMDkuMDggMjkuMjc0LDE5Ny4wMDcgMTg4LjE2NSwxNzMuOTE5IFwiLz4nO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRpZihzZWxmLnRhYmxlLmJyb3dzZXIgPT0gXCJpZVwiKXtcblx0XHRcdFx0XHRzdGFyLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwidGFidWxhdG9yLXN0YXItaW5hY3RpdmVcIik7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRzdGFyLmNsYXNzTGlzdC5yZXBsYWNlKFwidGFidWxhdG9yLXN0YXItYWN0aXZlXCIsIFwidGFidWxhdG9yLXN0YXItaW5hY3RpdmVcIik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzdGFyLmlubmVySFRNTCA9ICc8cG9seWdvbiBmaWxsPVwiIzAxMDE1NVwiIHN0cm9rZT1cIiM2ODY4NjhcIiBzdHJva2Utd2lkdGg9XCIzNy42MTUyXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgc3Ryb2tlLW1pdGVybGltaXQ9XCIxMFwiIHBvaW50cz1cIjI1OS4yMTYsMjkuOTQyIDMzMC4yNywxNzMuOTE5IDQ4OS4xNiwxOTcuMDA3IDM3NC4xODUsMzA5LjA4IDQwMS4zMyw0NjcuMzEgMjU5LjIxNiwzOTIuNjEyIDExNy4xMDQsNDY3LjMxIDE0NC4yNSwzMDkuMDggMjkuMjc0LDE5Ny4wMDcgMTg4LjE2NSwxNzMuOTE5IFwiLz4nO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0Ly9idWlsZCBzdGFyc1xuXHRmdW5jdGlvbiBidWlsZFN0YXIoaSl7XG5cblx0XHR2YXIgc3RhckhvbGRlciA9ICBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcblx0XHR2YXIgbmV4dFN0YXIgPSBzdGFyLmNsb25lTm9kZSh0cnVlKTtcblxuXHRcdHN0YXJzLnB1c2gobmV4dFN0YXIpO1xuXG5cdFx0c3RhckhvbGRlci5hZGRFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLCBmdW5jdGlvbihlKXtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0c3RhckNoYW5nZShpKTtcblx0XHR9KTtcblxuXHRcdHN0YXJIb2xkZXIuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBmdW5jdGlvbihlKXtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH0pO1xuXG5cdFx0c3RhckhvbGRlci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSl7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdHN1Y2Nlc3MoaSk7XG5cdFx0XHRlbGVtZW50LmJsdXIoKTtcblx0XHR9KTtcblxuXHRcdHN0YXJIb2xkZXIuYXBwZW5kQ2hpbGQobmV4dFN0YXIpO1xuXHRcdHN0YXJzSG9sZGVyLmFwcGVuZENoaWxkKHN0YXJIb2xkZXIpO1xuXG5cdH1cblxuXHQvL2hhbmRsZSBrZXlib2FyZCBuYXZpZ2F0aW9uIHZhbHVlIGNoYW5nZVxuXHRmdW5jdGlvbiBjaGFuZ2VWYWx1ZSh2YWwpe1xuXHRcdHZhbHVlID0gdmFsO1xuXHRcdHN0YXJDaGFuZ2UodmFsKTtcblx0fVxuXG5cdC8vc3R5bGUgY2VsbFxuXHRlbGVtZW50LnN0eWxlLndoaXRlU3BhY2UgPSBcIm5vd3JhcFwiO1xuXHRlbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0ZWxlbWVudC5zdHlsZS50ZXh0T3ZlcmZsb3cgPSBcImVsbGlwc2lzXCI7XG5cblx0Ly9zdHlsZSBob2xkaW5nIGVsZW1lbnRcblx0c3RhcnNIb2xkZXIuc3R5bGUudmVydGljYWxBbGlnbiA9IFwibWlkZGxlXCI7XG5cdHN0YXJzSG9sZGVyLnN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRzdGFyc0hvbGRlci5zdHlsZS5wYWRkaW5nID0gXCI0cHhcIjtcblxuXHQvL3N0eWxlIHN0YXJcblx0c3Rhci5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCBzaXplKTtcblx0c3Rhci5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgc2l6ZSk7XG5cdHN0YXIuc2V0QXR0cmlidXRlKFwidmlld0JveFwiLCBcIjAgMCA1MTIgNTEyXCIpO1xuXHRzdGFyLnNldEF0dHJpYnV0ZShcInhtbDpzcGFjZVwiLCBcInByZXNlcnZlXCIpO1xuXHRzdGFyLnN0eWxlLnBhZGRpbmcgPSBcIjAgMXB4XCI7XG5cblx0aWYoZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzICYmIHR5cGVvZiBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXMgPT0gXCJvYmplY3RcIil7XG5cdFx0Zm9yIChsZXQga2V5IGluIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlcyl7XG5cdFx0XHRpZihrZXkuY2hhckF0KDApID09IFwiK1wiKXtcblx0XHRcdFx0a2V5ID0ga2V5LnNsaWNlKDEpO1xuXHRcdFx0XHRzdGFyc0hvbGRlci5zZXRBdHRyaWJ1dGUoa2V5LCBzdGFyc0hvbGRlci5nZXRBdHRyaWJ1dGUoa2V5KSArIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlc1tcIitcIiArIGtleV0pO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRzdGFyc0hvbGRlci5zZXRBdHRyaWJ1dGUoa2V5LCBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXNba2V5XSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly9jcmVhdGUgY29ycmVjdCBudW1iZXIgb2Ygc3RhcnNcblx0Zm9yKHZhciBpPTE7aTw9IG1heFN0YXJzO2krKyl7XG5cdFx0YnVpbGRTdGFyKGkpO1xuXHR9XG5cblx0Ly9lbnN1cmUgdmFsdWUgZG9lcyBub3QgZXhjZWVkIG51bWJlciBvZiBzdGFyc1xuXHR2YWx1ZSA9IE1hdGgubWluKHBhcnNlSW50KHZhbHVlKSwgbWF4U3RhcnMpO1xuXG5cdC8vIHNldCBpbml0aWFsIHN0eWxpbmcgb2Ygc3RhcnNcblx0c3RhckNoYW5nZSh2YWx1ZSk7XG5cblx0c3RhcnNIb2xkZXIuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBmdW5jdGlvbihlKXtcblx0XHRzdGFyQ2hhbmdlKDApO1xuXHR9KTtcblxuXHRzdGFyc0hvbGRlci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSl7XG5cdFx0c3VjY2VzcygwKTtcblx0fSk7XG5cblx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCBmdW5jdGlvbihlKXtcblx0XHRjYW5jZWwoKTtcblx0fSk7XG5cblx0Ly9hbGxvdyBrZXkgYmFzZWQgbmF2aWdhdGlvblxuXHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdHN3aXRjaChlLmtleUNvZGUpe1xuXHRcdFx0Y2FzZSAzOTogLy9yaWdodCBhcnJvd1xuXHRcdFx0XHRjaGFuZ2VWYWx1ZSh2YWx1ZSArIDEpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAzNzogLy9sZWZ0IGFycm93XG5cdFx0XHRcdGNoYW5nZVZhbHVlKHZhbHVlIC0gMSk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDEzOiAvL2VudGVyXG5cdFx0XHRcdHN1Y2Nlc3ModmFsdWUpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAyNzogLy9lc2NhcGVcblx0XHRcdFx0Y2FuY2VsKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fSk7XG5cblx0cmV0dXJuIHN0YXJzSG9sZGVyO1xufVxuXG4vL2RyYWdnYWJsZSBwcm9ncmVzcyBiYXJcbmZ1bmN0aW9uIHByb2dyZXNzKGNlbGwsIG9uUmVuZGVyZWQsIHN1Y2Nlc3MsIGNhbmNlbCwgZWRpdG9yUGFyYW1zKXtcblx0dmFyIGVsZW1lbnQgPSBjZWxsLmdldEVsZW1lbnQoKSxcblx0bWF4ID0gdHlwZW9mIGVkaXRvclBhcmFtcy5tYXggPT09IFwidW5kZWZpbmVkXCIgPyAoKGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJkaXZcIilbMF0gJiYgZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImRpdlwiKVswXS5nZXRBdHRyaWJ1dGUoXCJtYXhcIikpIHx8IDEwMCkgOiBlZGl0b3JQYXJhbXMubWF4LFxuXHRtaW4gPSB0eXBlb2YgZWRpdG9yUGFyYW1zLm1pbiA9PT0gXCJ1bmRlZmluZWRcIiA/ICgoZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImRpdlwiKVswXSAmJiBlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiZGl2XCIpWzBdLmdldEF0dHJpYnV0ZShcIm1pblwiKSkgfHwgMCkgOiBlZGl0b3JQYXJhbXMubWluLFxuXHRwZXJjZW50ID0gKG1heCAtIG1pbikgLyAxMDAsXG5cdHZhbHVlID0gY2VsbC5nZXRWYWx1ZSgpIHx8IDAsXG5cdGhhbmRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksXG5cdGJhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksXG5cdG1vdXNlRHJhZywgbW91c2VEcmFnV2lkdGg7XG5cblx0Ly9zZXQgbmV3IHZhbHVlXG5cdGZ1bmN0aW9uIHVwZGF0ZVZhbHVlKCl7XG5cdFx0dmFyIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgbnVsbCk7XG5cblx0XHR2YXIgY2FsY1ZhbCA9IChwZXJjZW50ICogTWF0aC5yb3VuZChiYXIub2Zmc2V0V2lkdGggLyAoKGVsZW1lbnQuY2xpZW50V2lkdGggLSBwYXJzZUludChzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKFwicGFkZGluZy1sZWZ0XCIpKSAtIHBhcnNlSW50KHN0eWxlLmdldFByb3BlcnR5VmFsdWUoXCJwYWRkaW5nLXJpZ2h0XCIpKSkvMTAwKSkpICsgbWluO1xuXHRcdHN1Y2Nlc3MoY2FsY1ZhbCk7XG5cdFx0ZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLXZhbHVlbm93XCIsIGNhbGNWYWwpO1xuXHRcdGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCB2YWx1ZSk7XG5cdH1cblxuXHQvL3N0eWxlIGhhbmRsZVxuXHRoYW5kbGUuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cdGhhbmRsZS5zdHlsZS5yaWdodCA9IFwiMFwiO1xuXHRoYW5kbGUuc3R5bGUudG9wID0gXCIwXCI7XG5cdGhhbmRsZS5zdHlsZS5ib3R0b20gPSBcIjBcIjtcblx0aGFuZGxlLnN0eWxlLndpZHRoID0gXCI1cHhcIjtcblx0aGFuZGxlLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItcHJvZ3Jlc3MtaGFuZGxlXCIpO1xuXG5cdC8vc3R5bGUgYmFyXG5cdGJhci5zdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0YmFyLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHQvLyBiYXIuc3R5bGUudG9wID0gXCI4cHhcIjtcblx0Ly8gYmFyLnN0eWxlLmJvdHRvbSA9IFwiOHB4XCI7XG5cdC8vIGJhci5zdHlsZS5sZWZ0ID0gXCI0cHhcIjtcblx0Ly8gYmFyLnN0eWxlLm1hcmdpblJpZ2h0ID0gXCI0cHhcIjtcblx0YmFyLnN0eWxlLmhlaWdodCA9IFwiMTAwJVwiO1xuXHRiYXIuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCIjNDg4Q0U5XCI7XG5cdGJhci5zdHlsZS5tYXhXaWR0aCA9IFwiMTAwJVwiO1xuXHRiYXIuc3R5bGUubWluV2lkdGggPSBcIjAlXCI7XG5cblx0aWYoZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzICYmIHR5cGVvZiBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXMgPT0gXCJvYmplY3RcIil7XG5cdFx0Zm9yIChsZXQga2V5IGluIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlcyl7XG5cdFx0XHRpZihrZXkuY2hhckF0KDApID09IFwiK1wiKXtcblx0XHRcdFx0a2V5ID0ga2V5LnNsaWNlKDEpO1xuXHRcdFx0XHRiYXIuc2V0QXR0cmlidXRlKGtleSwgYmFyLmdldEF0dHJpYnV0ZShrZXkpICsgZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzW1wiK1wiICsga2V5XSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGJhci5zZXRBdHRyaWJ1dGUoa2V5LCBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXNba2V5XSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly9zdHlsZSBjZWxsXG5cdGVsZW1lbnQuc3R5bGUucGFkZGluZyA9IFwiNHB4IDRweFwiO1xuXG5cdC8vbWFrZSBzdXJlIHZhbHVlIGlzIGluIHJhbmdlXG5cdHZhbHVlID0gTWF0aC5taW4ocGFyc2VGbG9hdCh2YWx1ZSksIG1heCk7XG5cdHZhbHVlID0gTWF0aC5tYXgocGFyc2VGbG9hdCh2YWx1ZSksIG1pbik7XG5cblx0Ly93b3Jrb3V0IHBlcmNlbnRhZ2Vcblx0dmFsdWUgPSBNYXRoLnJvdW5kKCh2YWx1ZSAtIG1pbikgLyBwZXJjZW50KTtcblx0Ly8gYmFyLnN0eWxlLnJpZ2h0ID0gdmFsdWUgKyBcIiVcIjtcblx0YmFyLnN0eWxlLndpZHRoID0gdmFsdWUgKyBcIiVcIjtcblxuXHRlbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtdmFsdWVtaW5cIiwgbWluKTtcblx0ZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLXZhbHVlbWF4XCIsIG1heCk7XG5cblx0YmFyLmFwcGVuZENoaWxkKGhhbmRsZSk7XG5cblx0aGFuZGxlLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgZnVuY3Rpb24oZSl7XG5cdFx0bW91c2VEcmFnID0gZS5zY3JlZW5YO1xuXHRcdG1vdXNlRHJhZ1dpZHRoID0gYmFyLm9mZnNldFdpZHRoO1xuXHR9KTtcblxuXHRoYW5kbGUuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbigpe1xuXHRcdGhhbmRsZS5zdHlsZS5jdXJzb3IgPSBcImV3LXJlc2l6ZVwiO1xuXHR9KTtcblxuXHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgZnVuY3Rpb24oZSl7XG5cdFx0aWYobW91c2VEcmFnKXtcblx0XHRcdGJhci5zdHlsZS53aWR0aCA9IChtb3VzZURyYWdXaWR0aCArIGUuc2NyZWVuWCAtIG1vdXNlRHJhZykgKyBcInB4XCI7XG5cdFx0fVxuXHR9KTtcblxuXHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdGlmKG1vdXNlRHJhZyl7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblxuXHRcdFx0bW91c2VEcmFnID0gZmFsc2U7XG5cdFx0XHRtb3VzZURyYWdXaWR0aCA9IGZhbHNlO1xuXG5cdFx0XHR1cGRhdGVWYWx1ZSgpO1xuXHRcdH1cblx0fSk7XG5cblx0Ly9hbGxvdyBrZXkgYmFzZWQgbmF2aWdhdGlvblxuXHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdHN3aXRjaChlLmtleUNvZGUpe1xuXHRcdFx0Y2FzZSAzOTogLy9yaWdodCBhcnJvd1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdGJhci5zdHlsZS53aWR0aCA9IChiYXIuY2xpZW50V2lkdGggKyBlbGVtZW50LmNsaWVudFdpZHRoLzEwMCkgKyBcInB4XCI7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDM3OiAvL2xlZnQgYXJyb3dcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRiYXIuc3R5bGUud2lkdGggPSAoYmFyLmNsaWVudFdpZHRoIC0gZWxlbWVudC5jbGllbnRXaWR0aC8xMDApICsgXCJweFwiO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSA5OiAvL3RhYlxuXHRcdFx0Y2FzZSAxMzogLy9lbnRlclxuXHRcdFx0XHR1cGRhdGVWYWx1ZSgpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAyNzogLy9lc2NhcGVcblx0XHRcdFx0Y2FuY2VsKCk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0fVxuXHR9KTtcblxuXHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIGZ1bmN0aW9uKCl7XG5cdFx0Y2FuY2VsKCk7XG5cdH0pO1xuXG5cdHJldHVybiBiYXI7XG59XG5cbi8vY2hlY2tib3hcbmZ1bmN0aW9uIHRpY2tDcm9zcyhjZWxsLCBvblJlbmRlcmVkLCBzdWNjZXNzLCBjYW5jZWwsIGVkaXRvclBhcmFtcyl7XG5cdHZhciB2YWx1ZSA9IGNlbGwuZ2V0VmFsdWUoKSxcblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiksXG5cdHRyaXN0YXRlID0gZWRpdG9yUGFyYW1zLnRyaXN0YXRlLFxuXHRpbmRldGVybVZhbHVlID0gdHlwZW9mIGVkaXRvclBhcmFtcy5pbmRldGVybWluYXRlVmFsdWUgPT09IFwidW5kZWZpbmVkXCIgPyBudWxsIDogZWRpdG9yUGFyYW1zLmluZGV0ZXJtaW5hdGVWYWx1ZSxcblx0aW5kZXRlcm1TdGF0ZSA9IGZhbHNlLFxuXHR0cnVlVmFsdWVTZXQgPSBPYmplY3Qua2V5cyhlZGl0b3JQYXJhbXMpLmluY2x1ZGVzKFwidHJ1ZVZhbHVlXCIpLFxuXHRmYWxzZVZhbHVlU2V0ID0gT2JqZWN0LmtleXMoZWRpdG9yUGFyYW1zKS5pbmNsdWRlcyhcImZhbHNlVmFsdWVcIik7XG5cdFxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwiY2hlY2tib3hcIik7XG5cdGlucHV0LnN0eWxlLm1hcmdpblRvcCA9IFwiNXB4XCI7XG5cdGlucHV0LnN0eWxlLmJveFNpemluZyA9IFwiYm9yZGVyLWJveFwiO1xuXHRcblx0aWYoZWRpdG9yUGFyYW1zLmVsZW1lbnRBdHRyaWJ1dGVzICYmIHR5cGVvZiBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXMgPT0gXCJvYmplY3RcIil7XG5cdFx0Zm9yIChsZXQga2V5IGluIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlcyl7XG5cdFx0XHRpZihrZXkuY2hhckF0KDApID09IFwiK1wiKXtcblx0XHRcdFx0a2V5ID0ga2V5LnNsaWNlKDEpO1xuXHRcdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoa2V5LCBpbnB1dC5nZXRBdHRyaWJ1dGUoa2V5KSArIGVkaXRvclBhcmFtcy5lbGVtZW50QXR0cmlidXRlc1tcIitcIiArIGtleV0pO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoa2V5LCBlZGl0b3JQYXJhbXMuZWxlbWVudEF0dHJpYnV0ZXNba2V5XSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRpbnB1dC52YWx1ZSA9IHZhbHVlO1xuXHRcblx0aWYodHJpc3RhdGUgJiYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIiB8fCB2YWx1ZSA9PT0gaW5kZXRlcm1WYWx1ZSB8fCB2YWx1ZSA9PT0gXCJcIikpe1xuXHRcdGluZGV0ZXJtU3RhdGUgPSB0cnVlO1xuXHRcdGlucHV0LmluZGV0ZXJtaW5hdGUgPSB0cnVlO1xuXHR9XG5cdFxuXHRpZih0aGlzLnRhYmxlLmJyb3dzZXIgIT0gXCJmaXJlZm94XCIgJiYgdGhpcy50YWJsZS5icm93c2VyICE9IFwic2FmYXJpXCIpeyAvL3ByZXZlbnQgYmx1ciBpc3N1ZSBvbiBtYWMgZmlyZWZveFxuXHRcdG9uUmVuZGVyZWQoZnVuY3Rpb24oKXtcblx0XHRcdGlmKGNlbGwuZ2V0VHlwZSgpID09PSBcImNlbGxcIil7XG5cdFx0XHRcdGlucHV0LmZvY3VzKHtwcmV2ZW50U2Nyb2xsOiB0cnVlfSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0XG5cdGlucHV0LmNoZWNrZWQgPSB0cnVlVmFsdWVTZXQgPyB2YWx1ZSA9PT0gZWRpdG9yUGFyYW1zLnRydWVWYWx1ZSA6ICh2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gXCJ0cnVlXCIgfHwgdmFsdWUgPT09IFwiVHJ1ZVwiIHx8IHZhbHVlID09PSAxKTtcblx0XG5cdGZ1bmN0aW9uIHNldFZhbHVlKGJsdXIpe1xuXHRcdHZhciBjaGVja2VkVmFsdWUgPSBpbnB1dC5jaGVja2VkO1xuXHRcdFxuXHRcdGlmKHRydWVWYWx1ZVNldCAmJiBjaGVja2VkVmFsdWUpe1xuXHRcdFx0Y2hlY2tlZFZhbHVlID0gZWRpdG9yUGFyYW1zLnRydWVWYWx1ZTtcblx0XHR9ZWxzZSBpZihmYWxzZVZhbHVlU2V0ICYmICFjaGVja2VkVmFsdWUpe1xuXHRcdFx0Y2hlY2tlZFZhbHVlID0gZWRpdG9yUGFyYW1zLmZhbHNlVmFsdWU7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRyaXN0YXRlKXtcblx0XHRcdGlmKCFibHVyKXtcblx0XHRcdFx0aWYoaW5wdXQuY2hlY2tlZCAmJiAhaW5kZXRlcm1TdGF0ZSl7XG5cdFx0XHRcdFx0aW5wdXQuY2hlY2tlZCA9IGZhbHNlO1xuXHRcdFx0XHRcdGlucHV0LmluZGV0ZXJtaW5hdGUgPSB0cnVlO1xuXHRcdFx0XHRcdGluZGV0ZXJtU3RhdGUgPSB0cnVlO1xuXHRcdFx0XHRcdHJldHVybiBpbmRldGVybVZhbHVlO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0aW5kZXRlcm1TdGF0ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHJldHVybiBjaGVja2VkVmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aWYoaW5kZXRlcm1TdGF0ZSl7XG5cdFx0XHRcdFx0cmV0dXJuIGluZGV0ZXJtVmFsdWU7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRyZXR1cm4gY2hlY2tlZFZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0cmV0dXJuIGNoZWNrZWRWYWx1ZTtcblx0XHR9XG5cdH1cblx0XG5cdC8vc3VibWl0IG5ldyB2YWx1ZSBvbiBibHVyXG5cdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZnVuY3Rpb24oZSl7XG5cdFx0c3VjY2VzcyhzZXRWYWx1ZSgpKTtcblx0fSk7XG5cblx0aW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgZnVuY3Rpb24oZSl7XG5cdFx0c3VjY2VzcyhzZXRWYWx1ZSh0cnVlKSk7XG5cdH0pO1xuXHRcblx0Ly9zdWJtaXQgbmV3IHZhbHVlIG9uIGVudGVyXG5cdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdGlmKGUua2V5Q29kZSA9PSAxMyl7XG5cdFx0XHRzdWNjZXNzKHNldFZhbHVlKCkpO1xuXHRcdH1cblx0XHRpZihlLmtleUNvZGUgPT0gMjcpe1xuXHRcdFx0Y2FuY2VsKCk7XG5cdFx0fVxuXHR9KTtcblx0XG5cdHJldHVybiBpbnB1dDtcbn1cblxudmFyIGRlZmF1bHRFZGl0b3JzID0ge1xuXHRpbnB1dDppbnB1dCxcblx0dGV4dGFyZWE6dGV4dGFyZWEsXG5cdG51bWJlcjpudW1iZXIsXG5cdHJhbmdlOnJhbmdlLFxuXHRkYXRlOmRhdGUsXG5cdHRpbWU6dGltZSxcblx0ZGF0ZXRpbWU6ZGF0ZXRpbWUsXG5cdHNlbGVjdDpzZWxlY3QsXG5cdGxpc3Q6bGlzdCxcblx0YXV0b2NvbXBsZXRlOmF1dG9jb21wbGV0ZSxcblx0c3RhcjpzdGFyLFxuXHRwcm9ncmVzczpwcm9ncmVzcyxcblx0dGlja0Nyb3NzOnRpY2tDcm9zcyxcbn07XG5cbmNsYXNzIEVkaXQkMSBleHRlbmRzIE1vZHVsZXtcblx0XG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cdFx0XG5cdFx0dGhpcy5jdXJyZW50Q2VsbCA9IGZhbHNlOyAvL2hvbGQgY3VycmVudGx5IGVkaXRpbmcgY2VsbFxuXHRcdHRoaXMubW91c2VDbGljayA9IGZhbHNlOyAvL2hvbGQgbW91c2Vkb3duIHN0YXRlIHRvIHByZXZlbnQgY2xpY2sgYmluZGluZyBiZWluZyBvdmVycmlkZGVuIGJ5IGVkaXRvciBvcGVuaW5nXG5cdFx0dGhpcy5yZWN1cnNpb25CbG9jayA9IGZhbHNlOyAvL3ByZXZlbnQgZm9jdXMgcmVjdXJzaW9uXG5cdFx0dGhpcy5pbnZhbGlkRWRpdCA9IGZhbHNlO1xuXHRcdHRoaXMuZWRpdGVkQ2VsbHMgPSBbXTtcblx0XHRcblx0XHR0aGlzLmVkaXRvcnMgPSBFZGl0JDEuZWRpdG9ycztcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiZWRpdGFibGVcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImVkaXRvclwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiZWRpdG9yUGFyYW1zXCIpO1xuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJjZWxsRWRpdGluZ1wiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiY2VsbEVkaXRlZFwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiY2VsbEVkaXRDYW5jZWxsZWRcIik7XG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJnZXRFZGl0ZWRDZWxsc1wiLCB0aGlzLmdldEVkaXRlZENlbGxzLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiY2xlYXJDZWxsRWRpdGVkXCIsIHRoaXMuY2xlYXJDZWxsRWRpdGVkLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwibmF2aWdhdGVQcmV2XCIsIHRoaXMubmF2aWdhdGVQcmV2LmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwibmF2aWdhdGVOZXh0XCIsIHRoaXMubmF2aWdhdGVOZXh0LmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwibmF2aWdhdGVMZWZ0XCIsIHRoaXMubmF2aWdhdGVMZWZ0LmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwibmF2aWdhdGVSaWdodFwiLCB0aGlzLm5hdmlnYXRlUmlnaHQuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJuYXZpZ2F0ZVVwXCIsIHRoaXMubmF2aWdhdGVVcC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcIm5hdmlnYXRlRG93blwiLCB0aGlzLm5hdmlnYXRlRG93bi5iaW5kKHRoaXMpKTtcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJjZWxsXCIsIFwiaXNFZGl0ZWRcIiwgdGhpcy5jZWxsSXNFZGl0ZWQuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwiY2VsbFwiLCBcImNsZWFyRWRpdGVkXCIsIHRoaXMuY2xlYXJFZGl0ZWQuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwiY2VsbFwiLCBcImVkaXRcIiwgdGhpcy5lZGl0Q2VsbC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJjZWxsXCIsIFwiY2FuY2VsRWRpdFwiLCB0aGlzLmNlbGxDYW5jZWxFZGl0LmJpbmQodGhpcykpO1xuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcImNlbGxcIiwgXCJuYXZpZ2F0ZVByZXZcIiwgdGhpcy5uYXZpZ2F0ZVByZXYuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwiY2VsbFwiLCBcIm5hdmlnYXRlTmV4dFwiLCB0aGlzLm5hdmlnYXRlTmV4dC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJjZWxsXCIsIFwibmF2aWdhdGVMZWZ0XCIsIHRoaXMubmF2aWdhdGVMZWZ0LmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcImNlbGxcIiwgXCJuYXZpZ2F0ZVJpZ2h0XCIsIHRoaXMubmF2aWdhdGVSaWdodC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJjZWxsXCIsIFwibmF2aWdhdGVVcFwiLCB0aGlzLm5hdmlnYXRlVXAuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwiY2VsbFwiLCBcIm5hdmlnYXRlRG93blwiLCB0aGlzLm5hdmlnYXRlRG93bi5iaW5kKHRoaXMpKTtcblx0fVxuXHRcblx0aW5pdGlhbGl6ZSgpe1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY2VsbC1pbml0XCIsIHRoaXMuYmluZEVkaXRvci5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImNlbGwtZGVsZXRlXCIsIHRoaXMuY2xlYXJFZGl0ZWQuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjZWxsLXZhbHVlLWNoYW5nZWRcIiwgdGhpcy51cGRhdGVDZWxsQ2xhc3MuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tbGF5b3V0XCIsIHRoaXMuaW5pdGlhbGl6ZUNvbHVtbkNoZWNrLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWRlbGV0ZVwiLCB0aGlzLmNvbHVtbkRlbGV0ZUNoZWNrLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWRlbGV0aW5nXCIsIHRoaXMucm93RGVsZXRlQ2hlY2suYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctbGF5b3V0XCIsIHRoaXMucm93RWRpdGFibGVDaGVjay5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImRhdGEtcmVmcmVzaGluZ1wiLCB0aGlzLmNhbmNlbEVkaXQuYmluZCh0aGlzKSk7XG5cdFx0XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJrZXliaW5kaW5nLW5hdi1wcmV2XCIsIHRoaXMubmF2aWdhdGVQcmV2LmJpbmQodGhpcywgdW5kZWZpbmVkKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJrZXliaW5kaW5nLW5hdi1uZXh0XCIsIHRoaXMua2V5YmluZGluZ05hdmlnYXRlTmV4dC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImtleWJpbmRpbmctbmF2LWxlZnRcIiwgdGhpcy5uYXZpZ2F0ZUxlZnQuYmluZCh0aGlzLCB1bmRlZmluZWQpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImtleWJpbmRpbmctbmF2LXJpZ2h0XCIsIHRoaXMubmF2aWdhdGVSaWdodC5iaW5kKHRoaXMsIHVuZGVmaW5lZCkpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwia2V5YmluZGluZy1uYXYtdXBcIiwgdGhpcy5uYXZpZ2F0ZVVwLmJpbmQodGhpcywgdW5kZWZpbmVkKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJrZXliaW5kaW5nLW5hdi1kb3duXCIsIHRoaXMubmF2aWdhdGVEb3duLmJpbmQodGhpcywgdW5kZWZpbmVkKSk7XG5cdH1cblx0XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8gS2V5YmluZGluZyBGdW5jdGlvbnMgLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0a2V5YmluZGluZ05hdmlnYXRlTmV4dChlKXtcblx0XHR2YXIgY2VsbCA9IHRoaXMuY3VycmVudENlbGwsXG5cdFx0bmV3Um93ID0gdGhpcy5vcHRpb25zKFwidGFiRW5kTmV3Um93XCIpO1xuXHRcdFxuXHRcdGlmKGNlbGwpe1xuXHRcdFx0aWYoIXRoaXMubmF2aWdhdGVOZXh0KGNlbGwsIGUpKXtcblx0XHRcdFx0aWYobmV3Um93KXtcblx0XHRcdFx0XHRjZWxsLmdldEVsZW1lbnQoKS5maXJzdENoaWxkLmJsdXIoKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZihuZXdSb3cgPT09IHRydWUpe1xuXHRcdFx0XHRcdFx0bmV3Um93ID0gdGhpcy50YWJsZS5hZGRSb3coe30pO1xuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdGlmKHR5cGVvZiBuZXdSb3cgPT0gXCJmdW5jdGlvblwiKXtcblx0XHRcdFx0XHRcdFx0bmV3Um93ID0gdGhpcy50YWJsZS5hZGRSb3cobmV3Um93KGNlbGwucm93LmdldENvbXBvbmVudCgpKSk7XG5cdFx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRcdG5ld1JvdyA9IHRoaXMudGFibGUuYWRkUm93KE9iamVjdC5hc3NpZ24oe30sIG5ld1JvdykpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHRuZXdSb3cudGhlbigoKSA9PiB7XG5cdFx0XHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0XHRcdFx0Y2VsbC5nZXRDb21wb25lbnQoKS5uYXZpZ2F0ZU5leHQoKTtcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8gQ2VsbCBGdW5jdGlvbnMgLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0Y2VsbElzRWRpdGVkKGNlbGwpe1xuXHRcdHJldHVybiAhISBjZWxsLm1vZHVsZXMuZWRpdCAmJiBjZWxsLm1vZHVsZXMuZWRpdC5lZGl0ZWQ7XG5cdH1cblx0XG5cdGNlbGxDYW5jZWxFZGl0KGNlbGwpe1xuXHRcdGlmKGNlbGwgPT09IHRoaXMuY3VycmVudENlbGwpe1xuXHRcdFx0dGhpcy50YWJsZS5tb2R1bGVzLmVkaXQuY2FuY2VsRWRpdCgpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkNhbmNlbCBFZGl0b3IgRXJyb3IgLSBUaGlzIGNlbGwgaXMgbm90IGN1cnJlbnRseSBiZWluZyBlZGl0ZWQgXCIpO1xuXHRcdH1cblx0fVxuXHRcblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLyBUYWJsZSBGdW5jdGlvbnMgLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdHVwZGF0ZUNlbGxDbGFzcyhjZWxsKXtcblx0XHRpZih0aGlzLmFsbG93RWRpdChjZWxsKSkge1xuXHRcdFx0Y2VsbC5nZXRFbGVtZW50KCkuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1lZGl0YWJsZVwiKTtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHRjZWxsLmdldEVsZW1lbnQoKS5jbGFzc0xpc3QucmVtb3ZlKFwidGFidWxhdG9yLWVkaXRhYmxlXCIpO1xuXHRcdH1cblx0fVxuXHRcblx0Y2xlYXJDZWxsRWRpdGVkKGNlbGxzKXtcblx0XHRpZighY2VsbHMpe1xuXHRcdFx0Y2VsbHMgPSB0aGlzLnRhYmxlLm1vZHVsZXMuZWRpdC5nZXRFZGl0ZWRDZWxscygpO1xuXHRcdH1cblx0XHRcblx0XHRpZighQXJyYXkuaXNBcnJheShjZWxscykpe1xuXHRcdFx0Y2VsbHMgPSBbY2VsbHNdO1xuXHRcdH1cblx0XHRcblx0XHRjZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG5cdFx0XHR0aGlzLnRhYmxlLm1vZHVsZXMuZWRpdC5jbGVhckVkaXRlZChjZWxsLl9nZXRTZWxmKCkpO1xuXHRcdH0pO1xuXHR9XG5cdFxuXHRuYXZpZ2F0ZVByZXYoY2VsbCA9IHRoaXMuY3VycmVudENlbGwsIGUpe1xuXHRcdHZhciBuZXh0Q2VsbCwgcHJldlJvdztcblx0XHRcblx0XHRpZihjZWxsKXtcblx0XHRcdFxuXHRcdFx0aWYoZSl7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0bmV4dENlbGwgPSB0aGlzLm5hdmlnYXRlTGVmdCgpO1xuXHRcdFx0XG5cdFx0XHRpZihuZXh0Q2VsbCl7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRwcmV2Um93ID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLnByZXZEaXNwbGF5Um93KGNlbGwucm93LCB0cnVlKTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKHByZXZSb3cpe1xuXHRcdFx0XHRcdG5leHRDZWxsID0gdGhpcy5maW5kUHJldkVkaXRhYmxlQ2VsbChwcmV2Um93LCBwcmV2Um93LmNlbGxzLmxlbmd0aCk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYobmV4dENlbGwpe1xuXHRcdFx0XHRcdFx0bmV4dENlbGwuZ2V0Q29tcG9uZW50KCkuZWRpdCgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRcblx0bmF2aWdhdGVOZXh0KGNlbGwgPSB0aGlzLmN1cnJlbnRDZWxsLCBlKXtcblx0XHR2YXIgbmV4dENlbGwsIG5leHRSb3c7XG5cdFx0XG5cdFx0aWYoY2VsbCl7XG5cdFx0XHRcblx0XHRcdGlmKGUpe1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdG5leHRDZWxsID0gdGhpcy5uYXZpZ2F0ZVJpZ2h0KCk7XG5cdFx0XHRcblx0XHRcdGlmKG5leHRDZWxsKXtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdG5leHRSb3cgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIubmV4dERpc3BsYXlSb3coY2VsbC5yb3csIHRydWUpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYobmV4dFJvdyl7XG5cdFx0XHRcdFx0bmV4dENlbGwgPSB0aGlzLmZpbmROZXh0RWRpdGFibGVDZWxsKG5leHRSb3csIC0xKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZihuZXh0Q2VsbCl7XG5cdFx0XHRcdFx0XHRuZXh0Q2VsbC5nZXRDb21wb25lbnQoKS5lZGl0KCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdFxuXHRuYXZpZ2F0ZUxlZnQoY2VsbCA9IHRoaXMuY3VycmVudENlbGwsIGUpe1xuXHRcdHZhciBpbmRleCwgbmV4dENlbGw7XG5cdFx0XG5cdFx0aWYoY2VsbCl7XG5cdFx0XHRcblx0XHRcdGlmKGUpe1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGluZGV4ID0gY2VsbC5nZXRJbmRleCgpO1xuXHRcdFx0bmV4dENlbGwgPSB0aGlzLmZpbmRQcmV2RWRpdGFibGVDZWxsKGNlbGwucm93LCBpbmRleCk7XG5cdFx0XHRcblx0XHRcdGlmKG5leHRDZWxsKXtcblx0XHRcdFx0bmV4dENlbGwuZ2V0Q29tcG9uZW50KCkuZWRpdCgpO1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdFxuXHRuYXZpZ2F0ZVJpZ2h0KGNlbGwgPSB0aGlzLmN1cnJlbnRDZWxsLCBlKXtcblx0XHR2YXIgaW5kZXgsIG5leHRDZWxsO1xuXHRcdFxuXHRcdGlmKGNlbGwpe1xuXHRcdFx0XG5cdFx0XHRpZihlKXtcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpbmRleCA9IGNlbGwuZ2V0SW5kZXgoKTtcblx0XHRcdG5leHRDZWxsID0gdGhpcy5maW5kTmV4dEVkaXRhYmxlQ2VsbChjZWxsLnJvdywgaW5kZXgpO1xuXHRcdFx0XG5cdFx0XHRpZihuZXh0Q2VsbCl7XG5cdFx0XHRcdG5leHRDZWxsLmdldENvbXBvbmVudCgpLmVkaXQoKTtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRcblx0bmF2aWdhdGVVcChjZWxsID0gdGhpcy5jdXJyZW50Q2VsbCwgZSl7XG5cdFx0dmFyIGluZGV4LCBuZXh0Um93O1xuXHRcdFxuXHRcdGlmKGNlbGwpe1xuXHRcdFx0XG5cdFx0XHRpZihlKXtcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpbmRleCA9IGNlbGwuZ2V0SW5kZXgoKTtcblx0XHRcdG5leHRSb3cgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIucHJldkRpc3BsYXlSb3coY2VsbC5yb3csIHRydWUpO1xuXHRcdFx0XG5cdFx0XHRpZihuZXh0Um93KXtcblx0XHRcdFx0bmV4dFJvdy5jZWxsc1tpbmRleF0uZ2V0Q29tcG9uZW50KCkuZWRpdCgpO1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdFxuXHRuYXZpZ2F0ZURvd24oY2VsbCA9IHRoaXMuY3VycmVudENlbGwsIGUpe1xuXHRcdHZhciBpbmRleCwgbmV4dFJvdztcblx0XHRcblx0XHRpZihjZWxsKXtcblx0XHRcdFxuXHRcdFx0aWYoZSl7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aW5kZXggPSBjZWxsLmdldEluZGV4KCk7XG5cdFx0XHRuZXh0Um93ID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLm5leHREaXNwbGF5Um93KGNlbGwucm93LCB0cnVlKTtcblx0XHRcdFxuXHRcdFx0aWYobmV4dFJvdyl7XG5cdFx0XHRcdG5leHRSb3cuY2VsbHNbaW5kZXhdLmdldENvbXBvbmVudCgpLmVkaXQoKTtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRcblx0ZmluZE5leHRFZGl0YWJsZUNlbGwocm93LCBpbmRleCl7XG5cdFx0dmFyIG5leHRDZWxsID0gZmFsc2U7XG5cdFx0XG5cdFx0aWYoaW5kZXggPCByb3cuY2VsbHMubGVuZ3RoLTEpe1xuXHRcdFx0Zm9yKHZhciBpID0gaW5kZXgrMTsgaSA8IHJvdy5jZWxscy5sZW5ndGg7IGkrKyl7XG5cdFx0XHRcdGxldCBjZWxsID0gcm93LmNlbGxzW2ldO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoY2VsbC5jb2x1bW4ubW9kdWxlcy5lZGl0ICYmIEhlbHBlcnMuZWxWaXNpYmxlKGNlbGwuZ2V0RWxlbWVudCgpKSl7XG5cdFx0XHRcdFx0bGV0IGFsbG93RWRpdCA9IHRoaXMuYWxsb3dFZGl0KGNlbGwpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKGFsbG93RWRpdCl7XG5cdFx0XHRcdFx0XHRuZXh0Q2VsbCA9IGNlbGw7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIG5leHRDZWxsO1xuXHR9XG5cdFxuXHRmaW5kUHJldkVkaXRhYmxlQ2VsbChyb3csIGluZGV4KXtcblx0XHR2YXIgcHJldkNlbGwgPSBmYWxzZTtcblx0XHRcblx0XHRpZihpbmRleCA+IDApe1xuXHRcdFx0Zm9yKHZhciBpID0gaW5kZXgtMTsgaSA+PSAwOyBpLS0pe1xuXHRcdFx0XHRsZXQgY2VsbCA9IHJvdy5jZWxsc1tpXTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKGNlbGwuY29sdW1uLm1vZHVsZXMuZWRpdCAmJiBIZWxwZXJzLmVsVmlzaWJsZShjZWxsLmdldEVsZW1lbnQoKSkpe1xuXHRcdFx0XHRcdGxldCBhbGxvd0VkaXQgPSB0aGlzLmFsbG93RWRpdChjZWxsKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZihhbGxvd0VkaXQpe1xuXHRcdFx0XHRcdFx0cHJldkNlbGwgPSBjZWxsO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBwcmV2Q2VsbDtcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vIEludGVybmFsIExvZ2ljIC8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdGluaXRpYWxpemVDb2x1bW5DaGVjayhjb2x1bW4pe1xuXHRcdGlmKHR5cGVvZiBjb2x1bW4uZGVmaW5pdGlvbi5lZGl0b3IgIT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0dGhpcy5pbml0aWFsaXplQ29sdW1uKGNvbHVtbik7XG5cdFx0fVxuXHR9XG5cdFxuXHRjb2x1bW5EZWxldGVDaGVjayhjb2x1bW4pe1xuXHRcdGlmKHRoaXMuY3VycmVudENlbGwgJiYgdGhpcy5jdXJyZW50Q2VsbC5jb2x1bW4gPT09IGNvbHVtbil7XG5cdFx0XHR0aGlzLmNhbmNlbEVkaXQoKTtcblx0XHR9XG5cdH1cblx0XG5cdHJvd0RlbGV0ZUNoZWNrKHJvdyl7XG5cdFx0aWYodGhpcy5jdXJyZW50Q2VsbCAmJiB0aGlzLmN1cnJlbnRDZWxsLnJvdyA9PT0gcm93KXtcblx0XHRcdHRoaXMuY2FuY2VsRWRpdCgpO1xuXHRcdH1cblx0fVxuXG5cdHJvd0VkaXRhYmxlQ2hlY2socm93KXtcblx0XHRyb3cuZ2V0Q2VsbHMoKS5mb3JFYWNoKChjZWxsKSA9PiB7XG5cdFx0XHRpZihjZWxsLmNvbHVtbi5tb2R1bGVzLmVkaXQgJiYgdHlwZW9mIGNlbGwuY29sdW1uLm1vZHVsZXMuZWRpdC5jaGVjayA9PT0gXCJmdW5jdGlvblwiKXtcblx0XHRcdFx0dGhpcy51cGRhdGVDZWxsQ2xhc3MoY2VsbCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0XG5cdC8vaW5pdGlhbGl6ZSBjb2x1bW4gZWRpdG9yXG5cdGluaXRpYWxpemVDb2x1bW4oY29sdW1uKXtcblx0XHR2YXIgY29uZmlnID0ge1xuXHRcdFx0ZWRpdG9yOmZhbHNlLFxuXHRcdFx0YmxvY2tlZDpmYWxzZSxcblx0XHRcdGNoZWNrOmNvbHVtbi5kZWZpbml0aW9uLmVkaXRhYmxlLFxuXHRcdFx0cGFyYW1zOmNvbHVtbi5kZWZpbml0aW9uLmVkaXRvclBhcmFtcyB8fCB7fVxuXHRcdH07XG5cdFx0XG5cdFx0Ly9zZXQgY29sdW1uIGVkaXRvclxuXHRcdHN3aXRjaCh0eXBlb2YgY29sdW1uLmRlZmluaXRpb24uZWRpdG9yKXtcblx0XHRcdGNhc2UgXCJzdHJpbmdcIjpcblx0XHRcdFx0aWYodGhpcy5lZGl0b3JzW2NvbHVtbi5kZWZpbml0aW9uLmVkaXRvcl0pe1xuXHRcdFx0XHRcdGNvbmZpZy5lZGl0b3IgPSB0aGlzLmVkaXRvcnNbY29sdW1uLmRlZmluaXRpb24uZWRpdG9yXTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGNvbnNvbGUud2FybihcIkVkaXRvciBFcnJvciAtIE5vIHN1Y2ggZWRpdG9yIGZvdW5kOiBcIiwgY29sdW1uLmRlZmluaXRpb24uZWRpdG9yKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHRcdGNvbmZpZy5lZGl0b3IgPSBjb2x1bW4uZGVmaW5pdGlvbi5lZGl0b3I7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRjYXNlIFwiYm9vbGVhblwiOlxuXHRcdFx0XHRpZihjb2x1bW4uZGVmaW5pdGlvbi5lZGl0b3IgPT09IHRydWUpe1xuXHRcdFx0XHRcdGlmKHR5cGVvZiBjb2x1bW4uZGVmaW5pdGlvbi5mb3JtYXR0ZXIgIT09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRcdFx0XHRpZih0aGlzLmVkaXRvcnNbY29sdW1uLmRlZmluaXRpb24uZm9ybWF0dGVyXSl7XG5cdFx0XHRcdFx0XHRcdGNvbmZpZy5lZGl0b3IgPSB0aGlzLmVkaXRvcnNbY29sdW1uLmRlZmluaXRpb24uZm9ybWF0dGVyXTtcblx0XHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdFx0Y29uZmlnLmVkaXRvciA9IHRoaXMuZWRpdG9yc1tcImlucHV0XCJdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybihcIkVkaXRvciBFcnJvciAtIENhbm5vdCBhdXRvIGxvb2t1cCBlZGl0b3IgZm9yIGEgY3VzdG9tIGZvcm1hdHRlcjogXCIsIGNvbHVtbi5kZWZpbml0aW9uLmZvcm1hdHRlcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRcblx0XHRpZihjb25maWcuZWRpdG9yKXtcblx0XHRcdGNvbHVtbi5tb2R1bGVzLmVkaXQgPSBjb25maWc7XG5cdFx0fVxuXHR9XG5cdFxuXHRnZXRDdXJyZW50Q2VsbCgpe1xuXHRcdHJldHVybiB0aGlzLmN1cnJlbnRDZWxsID8gdGhpcy5jdXJyZW50Q2VsbC5nZXRDb21wb25lbnQoKSA6IGZhbHNlO1xuXHR9XG5cdFxuXHRjbGVhckVkaXRvcihjYW5jZWwpe1xuXHRcdHZhciBjZWxsID0gdGhpcy5jdXJyZW50Q2VsbCxcblx0XHRjZWxsRWw7XG5cdFx0XG5cdFx0dGhpcy5pbnZhbGlkRWRpdCA9IGZhbHNlO1xuXHRcdFxuXHRcdGlmKGNlbGwpe1xuXHRcdFx0dGhpcy5jdXJyZW50Q2VsbCA9IGZhbHNlO1xuXHRcdFx0XG5cdFx0XHRjZWxsRWwgPSBjZWxsLmdldEVsZW1lbnQoKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5kaXNwYXRjaChcImVkaXQtZWRpdG9yLWNsZWFyXCIsIGNlbGwsIGNhbmNlbCk7XG5cdFx0XHRcblx0XHRcdGNlbGxFbC5jbGFzc0xpc3QucmVtb3ZlKFwidGFidWxhdG9yLWVkaXRpbmdcIik7XG5cdFx0XHRcblx0XHRcdHdoaWxlKGNlbGxFbC5maXJzdENoaWxkKSBjZWxsRWwucmVtb3ZlQ2hpbGQoY2VsbEVsLmZpcnN0Q2hpbGQpO1xuXHRcdFx0XG5cdFx0XHRjZWxsLnJvdy5nZXRFbGVtZW50KCkuY2xhc3NMaXN0LnJlbW92ZShcInRhYnVsYXRvci1lZGl0aW5nXCIpO1xuXHRcdFx0XG5cdFx0XHRjZWxsLnRhYmxlLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcInRhYnVsYXRvci1lZGl0aW5nXCIpO1xuXHRcdH1cblx0fVxuXHRcblx0Y2FuY2VsRWRpdCgpe1xuXHRcdGlmKHRoaXMuY3VycmVudENlbGwpe1xuXHRcdFx0dmFyIGNlbGwgPSB0aGlzLmN1cnJlbnRDZWxsO1xuXHRcdFx0dmFyIGNvbXBvbmVudCA9IHRoaXMuY3VycmVudENlbGwuZ2V0Q29tcG9uZW50KCk7XG5cdFx0XHRcblx0XHRcdHRoaXMuY2xlYXJFZGl0b3IodHJ1ZSk7XG5cdFx0XHRjZWxsLnNldFZhbHVlQWN0dWFsKGNlbGwuZ2V0VmFsdWUoKSk7XG5cdFx0XHRjZWxsLmNlbGxSZW5kZXJlZCgpO1xuXHRcdFx0XG5cdFx0XHRpZihjZWxsLmNvbHVtbi5kZWZpbml0aW9uLmVkaXRvciA9PSBcInRleHRhcmVhXCIgfHwgY2VsbC5jb2x1bW4uZGVmaW5pdGlvbi52YXJpYWJsZUhlaWdodCl7XG5cdFx0XHRcdGNlbGwucm93Lm5vcm1hbGl6ZUhlaWdodCh0cnVlKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoY2VsbC5jb2x1bW4uZGVmaW5pdGlvbi5jZWxsRWRpdENhbmNlbGxlZCl7XG5cdFx0XHRcdGNlbGwuY29sdW1uLmRlZmluaXRpb24uY2VsbEVkaXRDYW5jZWxsZWQuY2FsbCh0aGlzLnRhYmxlLCBjb21wb25lbnQpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLmRpc3BhdGNoKFwiZWRpdC1jYW5jZWxsZWRcIiwgY2VsbCk7XG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJjZWxsRWRpdENhbmNlbGxlZFwiLCBjb21wb25lbnQpO1xuXHRcdH1cblx0fVxuXHRcblx0Ly9yZXR1cm4gYSBmb3JtYXR0ZWQgdmFsdWUgZm9yIGEgY2VsbFxuXHRiaW5kRWRpdG9yKGNlbGwpe1xuXHRcdGlmKGNlbGwuY29sdW1uLm1vZHVsZXMuZWRpdCl7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0XHRlbGVtZW50ID0gY2VsbC5nZXRFbGVtZW50KHRydWUpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnVwZGF0ZUNlbGxDbGFzcyhjZWxsKTtcblx0XHRcdGVsZW1lbnQuc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIiwgMCk7XG5cdFx0XHRcblx0XHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRpZighZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJ0YWJ1bGF0b3ItZWRpdGluZ1wiKSl7XG5cdFx0XHRcdFx0ZWxlbWVudC5mb2N1cyh7cHJldmVudFNjcm9sbDogdHJ1ZX0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRpZiAoZS5idXR0b24gPT09IDIpIHtcblx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRzZWxmLm1vdXNlQ2xpY2sgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgZnVuY3Rpb24oZSl7XG5cdFx0XHRcdGlmKCFzZWxmLnJlY3Vyc2lvbkJsb2NrKXtcblx0XHRcdFx0XHRzZWxmLmVkaXQoY2VsbCwgZSwgZmFsc2UpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblx0XG5cdGZvY3VzQ2VsbE5vRXZlbnQoY2VsbCwgYmxvY2spe1xuXHRcdHRoaXMucmVjdXJzaW9uQmxvY2sgPSB0cnVlO1xuXHRcdFxuXHRcdGlmKCEoYmxvY2sgJiYgdGhpcy50YWJsZS5icm93c2VyID09PSBcImllXCIpKXtcblx0XHRcdGNlbGwuZ2V0RWxlbWVudCgpLmZvY3VzKHtwcmV2ZW50U2Nyb2xsOiB0cnVlfSk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMucmVjdXJzaW9uQmxvY2sgPSBmYWxzZTtcblx0fVxuXHRcblx0ZWRpdENlbGwoY2VsbCwgZm9yY2VFZGl0KXtcblx0XHR0aGlzLmZvY3VzQ2VsbE5vRXZlbnQoY2VsbCk7XG5cdFx0dGhpcy5lZGl0KGNlbGwsIGZhbHNlLCBmb3JjZUVkaXQpO1xuXHR9XG5cdFxuXHRmb2N1c1Njcm9sbEFkanVzdChjZWxsKXtcblx0XHRpZih0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0UmVuZGVyTW9kZSgpID09IFwidmlydHVhbFwiKXtcblx0XHRcdHZhciB0b3BFZGdlID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQuc2Nyb2xsVG9wLFxuXHRcdFx0Ym90dG9tRWRnZSA9IHRoaXMudGFibGUucm93TWFuYWdlci5lbGVtZW50LmNsaWVudEhlaWdodCArIHRoaXMudGFibGUucm93TWFuYWdlci5lbGVtZW50LnNjcm9sbFRvcCxcblx0XHRcdHJvd0VsID0gY2VsbC5yb3cuZ2V0RWxlbWVudCgpO1xuXHRcdFx0XG5cdFx0XHRpZihyb3dFbC5vZmZzZXRUb3AgPCB0b3BFZGdlKXtcblx0XHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQuc2Nyb2xsVG9wIC09ICh0b3BFZGdlIC0gcm93RWwub2Zmc2V0VG9wKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aWYocm93RWwub2Zmc2V0VG9wICsgcm93RWwub2Zmc2V0SGVpZ2h0ICA+IGJvdHRvbUVkZ2Upe1xuXHRcdFx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5lbGVtZW50LnNjcm9sbFRvcCArPSAocm93RWwub2Zmc2V0VG9wICsgcm93RWwub2Zmc2V0SGVpZ2h0IC0gYm90dG9tRWRnZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dmFyIGxlZnRFZGdlID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQuc2Nyb2xsTGVmdCxcblx0XHRcdHJpZ2h0RWRnZSA9IHRoaXMudGFibGUucm93TWFuYWdlci5lbGVtZW50LmNsaWVudFdpZHRoICsgdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQuc2Nyb2xsTGVmdCxcblx0XHRcdGNlbGxFbCA9IGNlbGwuZ2V0RWxlbWVudCgpO1xuXHRcdFx0XG5cdFx0XHRpZih0aGlzLnRhYmxlLm1vZEV4aXN0cyhcImZyb3plbkNvbHVtbnNcIikpe1xuXHRcdFx0XHRsZWZ0RWRnZSArPSBwYXJzZUludCh0aGlzLnRhYmxlLm1vZHVsZXMuZnJvemVuQ29sdW1ucy5sZWZ0TWFyZ2luIHx8IDApO1xuXHRcdFx0XHRyaWdodEVkZ2UgLT0gcGFyc2VJbnQodGhpcy50YWJsZS5tb2R1bGVzLmZyb3plbkNvbHVtbnMucmlnaHRNYXJnaW4gfHwgMCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5yZW5kZXJIb3Jpem9udGFsID09PSBcInZpcnR1YWxcIil7XG5cdFx0XHRcdGxlZnRFZGdlIC09IHBhcnNlSW50KHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5yZW5kZXJlci52RG9tUGFkTGVmdCk7XG5cdFx0XHRcdHJpZ2h0RWRnZSAtPSBwYXJzZUludCh0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIucmVuZGVyZXIudkRvbVBhZExlZnQpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihjZWxsRWwub2Zmc2V0TGVmdCA8IGxlZnRFZGdlKXtcblx0XHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQuc2Nyb2xsTGVmdCAtPSAobGVmdEVkZ2UgLSBjZWxsRWwub2Zmc2V0TGVmdCk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlmKGNlbGxFbC5vZmZzZXRMZWZ0ICsgY2VsbEVsLm9mZnNldFdpZHRoICA+IHJpZ2h0RWRnZSl7XG5cdFx0XHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQuc2Nyb2xsTGVmdCArPSAoY2VsbEVsLm9mZnNldExlZnQgKyBjZWxsRWwub2Zmc2V0V2lkdGggLSByaWdodEVkZ2UpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRhbGxvd0VkaXQoY2VsbCkge1xuXHRcdHZhciBjaGVjayA9IGNlbGwuY29sdW1uLm1vZHVsZXMuZWRpdCA/IHRydWUgOiBmYWxzZTtcblxuXHRcdGlmKGNlbGwuY29sdW1uLm1vZHVsZXMuZWRpdCl7XG5cdFx0XHRzd2l0Y2godHlwZW9mIGNlbGwuY29sdW1uLm1vZHVsZXMuZWRpdC5jaGVjayl7XG5cdFx0XHRcdGNhc2UgXCJmdW5jdGlvblwiOlxuXHRcdFx0XHRcdGlmKGNlbGwucm93LmluaXRpYWxpemVkKXtcblx0XHRcdFx0XHRcdGNoZWNrID0gY2VsbC5jb2x1bW4ubW9kdWxlcy5lZGl0LmNoZWNrKGNlbGwuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRcdFx0Y2hlY2sgPSAhIWNlbGwucm93LmRhdGFbY2VsbC5jb2x1bW4ubW9kdWxlcy5lZGl0LmNoZWNrXTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIFwiYm9vbGVhblwiOlxuXHRcdFx0XHRcdGNoZWNrID0gY2VsbC5jb2x1bW4ubW9kdWxlcy5lZGl0LmNoZWNrO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjaGVjaztcblx0fVxuXHRcblx0ZWRpdChjZWxsLCBlLCBmb3JjZUVkaXQpe1xuXHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHRhbGxvd0VkaXQgPSB0cnVlLFxuXHRcdHJlbmRlcmVkID0gZnVuY3Rpb24oKXt9LFxuXHRcdGVsZW1lbnQgPSBjZWxsLmdldEVsZW1lbnQoKSxcblx0XHRjZWxsRWRpdG9yLCBjb21wb25lbnQsIHBhcmFtcztcblx0XHRcblx0XHQvL3ByZXZlbnQgZWRpdGluZyBpZiBhbm90aGVyIGNlbGwgaXMgcmVmdXNpbmcgdG8gbGVhdmUgZm9jdXMgKGVnLiB2YWxpZGF0aW9uIGZhaWwpXG5cblx0XHRpZih0aGlzLmN1cnJlbnRDZWxsKXtcblx0XHRcdGlmKCF0aGlzLmludmFsaWRFZGl0ICYmIHRoaXMuY3VycmVudENlbGwgIT09IGNlbGwpe1xuXHRcdFx0XHR0aGlzLmNhbmNlbEVkaXQoKTtcblx0XHRcdH1cblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0XG5cdFx0Ly9oYW5kbGUgc3VjY2Vzc2Z1bCB2YWx1ZSBjaGFuZ2Vcblx0XHRmdW5jdGlvbiBzdWNjZXNzKHZhbHVlKXtcblx0XHRcdGlmKHNlbGYuY3VycmVudENlbGwgPT09IGNlbGwpe1xuXHRcdFx0XHR2YXIgdmFsaWQgPSBzZWxmLmNoYWluKFwiZWRpdC1zdWNjZXNzXCIsIFtjZWxsLCB2YWx1ZV0sIHRydWUsIHRydWUpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYodmFsaWQgPT09IHRydWUgfHwgc2VsZi50YWJsZS5vcHRpb25zLnZhbGlkYXRpb25Nb2RlID09PSBcImhpZ2hsaWdodFwiKXtcblx0XHRcdFx0XHRzZWxmLmNsZWFyRWRpdG9yKCk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYoIWNlbGwubW9kdWxlcy5lZGl0KXtcblx0XHRcdFx0XHRcdGNlbGwubW9kdWxlcy5lZGl0ID0ge307XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGNlbGwubW9kdWxlcy5lZGl0LmVkaXRlZCA9IHRydWU7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYoc2VsZi5lZGl0ZWRDZWxscy5pbmRleE9mKGNlbGwpID09IC0xKXtcblx0XHRcdFx0XHRcdHNlbGYuZWRpdGVkQ2VsbHMucHVzaChjZWxsKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Y2VsbC5zZXRWYWx1ZSh2YWx1ZSwgdHJ1ZSk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0cmV0dXJuIHZhbGlkID09PSB0cnVlO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0c2VsZi5pbnZhbGlkRWRpdCA9IHRydWU7XG5cdFx0XHRcdFx0c2VsZi5mb2N1c0NlbGxOb0V2ZW50KGNlbGwsIHRydWUpO1xuXHRcdFx0XHRcdHJlbmRlcmVkKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdC8vaGFuZGxlIGFib3J0ZWQgZWRpdFxuXHRcdGZ1bmN0aW9uIGNhbmNlbCgpe1xuXHRcdFx0aWYoc2VsZi5jdXJyZW50Q2VsbCA9PT0gY2VsbCl7XG5cdFx0XHRcdHNlbGYuY2FuY2VsRWRpdCgpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRmdW5jdGlvbiBvblJlbmRlcmVkKGNhbGxiYWNrKXtcblx0XHRcdHJlbmRlcmVkID0gY2FsbGJhY2s7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKCFjZWxsLmNvbHVtbi5tb2R1bGVzLmVkaXQuYmxvY2tlZCl7XG5cdFx0XHRpZihlKXtcblx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0YWxsb3dFZGl0ID0gdGhpcy5hbGxvd0VkaXQoY2VsbCk7XG5cdFx0XHRcblx0XHRcdGlmKGFsbG93RWRpdCB8fCBmb3JjZUVkaXQpe1xuXHRcdFx0XHRcblx0XHRcdFx0c2VsZi5jYW5jZWxFZGl0KCk7XG5cdFx0XHRcdFxuXHRcdFx0XHRzZWxmLmN1cnJlbnRDZWxsID0gY2VsbDtcblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMuZm9jdXNTY3JvbGxBZGp1c3QoY2VsbCk7XG5cdFx0XHRcdFxuXHRcdFx0XHRjb21wb25lbnQgPSBjZWxsLmdldENvbXBvbmVudCgpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYodGhpcy5tb3VzZUNsaWNrKXtcblx0XHRcdFx0XHR0aGlzLm1vdXNlQ2xpY2sgPSBmYWxzZTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZihjZWxsLmNvbHVtbi5kZWZpbml0aW9uLmNlbGxDbGljayl7XG5cdFx0XHRcdFx0XHRjZWxsLmNvbHVtbi5kZWZpbml0aW9uLmNlbGxDbGljay5jYWxsKHRoaXMudGFibGUsIGUsIGNvbXBvbmVudCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihjZWxsLmNvbHVtbi5kZWZpbml0aW9uLmNlbGxFZGl0aW5nKXtcblx0XHRcdFx0XHRjZWxsLmNvbHVtbi5kZWZpbml0aW9uLmNlbGxFZGl0aW5nLmNhbGwodGhpcy50YWJsZSwgY29tcG9uZW50KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5kaXNwYXRjaChcImNlbGwtZWRpdGluZ1wiLCBjZWxsKTtcblx0XHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwiY2VsbEVkaXRpbmdcIiwgY29tcG9uZW50KTtcblx0XHRcdFx0XG5cdFx0XHRcdHBhcmFtcyA9IHR5cGVvZiBjZWxsLmNvbHVtbi5tb2R1bGVzLmVkaXQucGFyYW1zID09PSBcImZ1bmN0aW9uXCIgPyBjZWxsLmNvbHVtbi5tb2R1bGVzLmVkaXQucGFyYW1zKGNvbXBvbmVudCkgOiBjZWxsLmNvbHVtbi5tb2R1bGVzLmVkaXQucGFyYW1zO1xuXHRcdFx0XHRcblx0XHRcdFx0Y2VsbEVkaXRvciA9IGNlbGwuY29sdW1uLm1vZHVsZXMuZWRpdC5lZGl0b3IuY2FsbChzZWxmLCBjb21wb25lbnQsIG9uUmVuZGVyZWQsIHN1Y2Nlc3MsIGNhbmNlbCwgcGFyYW1zKTtcblx0XHRcdFx0XG5cdFx0XHRcdC8vaWYgZWRpdG9yIHJldHVybmVkLCBhZGQgdG8gRE9NLCBpZiBmYWxzZSwgYWJvcnQgZWRpdFxuXHRcdFx0XHRpZih0aGlzLmN1cnJlbnRDZWxsICYmIGNlbGxFZGl0b3IgIT09IGZhbHNlKXtcblx0XHRcdFx0XHRpZihjZWxsRWRpdG9yIGluc3RhbmNlb2YgTm9kZSl7XG5cdFx0XHRcdFx0XHRlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItZWRpdGluZ1wiKTtcblx0XHRcdFx0XHRcdGNlbGwucm93LmdldEVsZW1lbnQoKS5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWVkaXRpbmdcIik7XG5cdFx0XHRcdFx0XHRjZWxsLnRhYmxlLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1lZGl0aW5nXCIpO1xuXHRcdFx0XHRcdFx0d2hpbGUoZWxlbWVudC5maXJzdENoaWxkKSBlbGVtZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQuZmlyc3RDaGlsZCk7XG5cdFx0XHRcdFx0XHRlbGVtZW50LmFwcGVuZENoaWxkKGNlbGxFZGl0b3IpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHQvL3RyaWdnZXIgb25SZW5kZXJlZCBDYWxsYmFja1xuXHRcdFx0XHRcdFx0cmVuZGVyZWQoKTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0Ly9wcmV2ZW50IGVkaXRpbmcgZnJvbSB0cmlnZ2VyaW5nIHJvd0NsaWNrIGV2ZW50XG5cdFx0XHRcdFx0XHR2YXIgY2hpbGRyZW4gPSBlbGVtZW50LmNoaWxkcmVuO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRcdGNoaWxkcmVuW2ldLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbihlKXtcblx0XHRcdFx0XHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJFZGl0IEVycm9yIC0gRWRpdG9yIHNob3VsZCByZXR1cm4gYW4gaW5zdGFuY2Ugb2YgTm9kZSwgdGhlIGVkaXRvciByZXR1cm5lZDpcIiwgY2VsbEVkaXRvcik7XG5cdFx0XHRcdFx0XHRlbGVtZW50LmJsdXIoKTtcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRlbGVtZW50LmJsdXIoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLm1vdXNlQ2xpY2sgPSBmYWxzZTtcblx0XHRcdFx0ZWxlbWVudC5ibHVyKCk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLm1vdXNlQ2xpY2sgPSBmYWxzZTtcblx0XHRcdGVsZW1lbnQuYmx1cigpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXHRcblx0Z2V0RWRpdGVkQ2VsbHMoKXtcblx0XHR2YXIgb3V0cHV0ID0gW107XG5cdFx0XG5cdFx0dGhpcy5lZGl0ZWRDZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG5cdFx0XHRvdXRwdXQucHVzaChjZWxsLmdldENvbXBvbmVudCgpKTtcblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cdFxuXHRjbGVhckVkaXRlZChjZWxsKXtcblx0XHR2YXIgZWRpdEluZGV4O1xuXHRcdFxuXHRcdGlmKGNlbGwubW9kdWxlcy5lZGl0ICYmIGNlbGwubW9kdWxlcy5lZGl0LmVkaXRlZCl7XG5cdFx0XHRjZWxsLm1vZHVsZXMuZWRpdC5lZGl0ZWQgPSBmYWxzZTtcblx0XHRcdFxuXHRcdFx0dGhpcy5kaXNwYXRjaChcImVkaXQtZWRpdGVkLWNsZWFyXCIsIGNlbGwpO1xuXHRcdH1cblx0XHRcblx0XHRlZGl0SW5kZXggPSB0aGlzLmVkaXRlZENlbGxzLmluZGV4T2YoY2VsbCk7XG5cdFx0XG5cdFx0aWYoZWRpdEluZGV4ID4gLTEpe1xuXHRcdFx0dGhpcy5lZGl0ZWRDZWxscy5zcGxpY2UoZWRpdEluZGV4LCAxKTtcblx0XHR9XG5cdH1cbn1cblxuRWRpdCQxLm1vZHVsZU5hbWUgPSBcImVkaXRcIjtcblxuLy9sb2FkIGRlZmF1bHRzXG5FZGl0JDEuZWRpdG9ycyA9IGRlZmF1bHRFZGl0b3JzO1xuXG5jbGFzcyBFeHBvcnRSb3d7XG5cdGNvbnN0cnVjdG9yKHR5cGUsIGNvbHVtbnMsIGNvbXBvbmVudCwgaW5kZW50KXtcblx0XHR0aGlzLnR5cGUgPSB0eXBlO1xuXHRcdHRoaXMuY29sdW1ucyA9IGNvbHVtbnM7XG5cdFx0dGhpcy5jb21wb25lbnQgPSBjb21wb25lbnQgfHwgZmFsc2U7XG5cdFx0dGhpcy5pbmRlbnQgPSBpbmRlbnQgfHwgMDtcblx0fVxufVxuXG5jbGFzcyBFeHBvcnRDb2x1bW57XG5cdGNvbnN0cnVjdG9yKHZhbHVlLCBjb21wb25lbnQsIHdpZHRoLCBoZWlnaHQsIGRlcHRoKXtcblx0XHR0aGlzLnZhbHVlID0gdmFsdWU7XG5cdFx0dGhpcy5jb21wb25lbnQgPSBjb21wb25lbnQgfHwgZmFsc2U7XG5cdFx0dGhpcy53aWR0aCA9IHdpZHRoO1xuXHRcdHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXHRcdHRoaXMuZGVwdGggPSBkZXB0aDtcblx0fVxufVxuXG5jbGFzcyBFeHBvcnQgZXh0ZW5kcyBNb2R1bGV7XG5cdFxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXHRcdFxuXHRcdHRoaXMuY29uZmlnID0ge307XG5cdFx0dGhpcy5jbG9uZVRhYmxlU3R5bGUgPSB0cnVlO1xuXHRcdHRoaXMuY29sVmlzUHJvcCA9IFwiXCI7XG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiaHRtbE91dHB1dENvbmZpZ1wiLCBmYWxzZSk7IC8vaHRtbCBvdXRwdXQgY29uZmlnXG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImh0bWxPdXRwdXRcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcInRpdGxlSHRtbE91dHB1dFwiKTtcblx0fVxuXHRcblx0aW5pdGlhbGl6ZSgpe1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiZ2V0SHRtbFwiLCB0aGlzLmdldEh0bWwuYmluZCh0aGlzKSk7XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLyBUYWJsZSBGdW5jdGlvbnMgLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vIEludGVybmFsIExvZ2ljIC8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdGdlbmVyYXRlRXhwb3J0TGlzdChjb25maWcsIHN0eWxlLCByYW5nZSwgY29sVmlzUHJvcCl7XG5cdFx0dGhpcy5jbG9uZVRhYmxlU3R5bGUgPSBzdHlsZTtcblx0XHR0aGlzLmNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcblx0XHR0aGlzLmNvbFZpc1Byb3AgPSBjb2xWaXNQcm9wO1xuXHRcdFxuXHRcdHZhciBoZWFkZXJzID0gdGhpcy5jb25maWcuY29sdW1uSGVhZGVycyAhPT0gZmFsc2UgPyB0aGlzLmhlYWRlcnNUb0V4cG9ydFJvd3ModGhpcy5nZW5lcmF0ZUNvbHVtbkdyb3VwSGVhZGVycygpKSA6IFtdO1xuXHRcdHZhciBib2R5ID0gdGhpcy5ib2R5VG9FeHBvcnRSb3dzKHRoaXMucm93TG9va3VwKHJhbmdlKSk7XG5cdFx0XG5cdFx0cmV0dXJuIGhlYWRlcnMuY29uY2F0KGJvZHkpO1xuXHR9XG5cdFxuXHRnZW5lcmF0ZVRhYmxlKGNvbmZpZywgc3R5bGUsIHJhbmdlLCBjb2xWaXNQcm9wKXtcblx0XHR2YXIgbGlzdCA9IHRoaXMuZ2VuZXJhdGVFeHBvcnRMaXN0KGNvbmZpZywgc3R5bGUsIHJhbmdlLCBjb2xWaXNQcm9wKTtcblx0XHRcblx0XHRyZXR1cm4gdGhpcy5nZW5lcmF0ZVRhYmxlRWxlbWVudChsaXN0KTtcblx0fVxuXHRcblx0cm93TG9va3VwKHJhbmdlKXtcblx0XHR2YXIgcm93cyA9IFtdO1xuXHRcdFxuXHRcdGlmKHR5cGVvZiByYW5nZSA9PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0cmFuZ2UuY2FsbCh0aGlzLnRhYmxlKS5mb3JFYWNoKChyb3cpID0+e1xuXHRcdFx0XHRyb3cgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZmluZFJvdyhyb3cpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYocm93KXtcblx0XHRcdFx0XHRyb3dzLnB1c2gocm93KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0c3dpdGNoKHJhbmdlKXtcblx0XHRcdFx0Y2FzZSB0cnVlOlxuXHRcdFx0XHRjYXNlIFwidmlzaWJsZVwiOlxuXHRcdFx0XHRcdHJvd3MgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0VmlzaWJsZVJvd3MoZmFsc2UsIHRydWUpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcblx0XHRcdFx0Y2FzZSBcImFsbFwiOlxuXHRcdFx0XHRcdHJvd3MgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIucm93cztcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XG5cdFx0XHRcdGNhc2UgXCJzZWxlY3RlZFwiOlxuXHRcdFx0XHRcdHJvd3MgPSB0aGlzLnRhYmxlLm1vZHVsZXMuc2VsZWN0Um93LnNlbGVjdGVkUm93cztcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XG5cdFx0XHRcdGNhc2UgXCJhY3RpdmVcIjpcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucGFnaW5hdGlvbil7XG5cdFx0XHRcdFx0XHRyb3dzID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldERpc3BsYXlSb3dzKHRoaXMudGFibGUucm93TWFuYWdlci5kaXNwbGF5Um93cy5sZW5ndGggLSAyKTtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRyb3dzID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldERpc3BsYXlSb3dzKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gT2JqZWN0LmFzc2lnbihbXSwgcm93cyk7XG5cdH1cblx0XG5cdGdlbmVyYXRlQ29sdW1uR3JvdXBIZWFkZXJzKCl7XG5cdFx0dmFyIG91dHB1dCA9IFtdO1xuXHRcdFxuXHRcdHZhciBjb2x1bW5zID0gdGhpcy5jb25maWcuY29sdW1uR3JvdXBzICE9PSBmYWxzZSA/IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5jb2x1bW5zIDogdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmNvbHVtbnNCeUluZGV4O1xuXHRcdFxuXHRcdGNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG5cdFx0XHR2YXIgY29sRGF0YSA9IHRoaXMucHJvY2Vzc0NvbHVtbkdyb3VwKGNvbHVtbik7XG5cdFx0XHRcblx0XHRcdGlmKGNvbERhdGEpe1xuXHRcdFx0XHRvdXRwdXQucHVzaChjb2xEYXRhKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cdFxuXHRwcm9jZXNzQ29sdW1uR3JvdXAoY29sdW1uKXtcblx0XHR2YXIgc3ViR3JvdXBzID0gY29sdW1uLmNvbHVtbnMsXG5cdFx0bWF4RGVwdGggPSAwLFxuXHRcdHRpdGxlID0gY29sdW1uLmRlZmluaXRpb25bXCJ0aXRsZVwiICsgKHRoaXMuY29sVmlzUHJvcC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHRoaXMuY29sVmlzUHJvcC5zbGljZSgxKSldIHx8IGNvbHVtbi5kZWZpbml0aW9uLnRpdGxlO1xuXHRcdFxuXHRcdHZhciBncm91cERhdGEgPSB7XG5cdFx0XHR0aXRsZTp0aXRsZSxcblx0XHRcdGNvbHVtbjpjb2x1bW4sXG5cdFx0XHRkZXB0aDoxLFxuXHRcdH07XG5cdFx0XG5cdFx0aWYoc3ViR3JvdXBzLmxlbmd0aCl7XG5cdFx0XHRncm91cERhdGEuc3ViR3JvdXBzID0gW107XG5cdFx0XHRncm91cERhdGEud2lkdGggPSAwO1xuXHRcdFx0XG5cdFx0XHRzdWJHcm91cHMuZm9yRWFjaCgoc3ViR3JvdXApID0+IHtcblx0XHRcdFx0dmFyIHN1Ykdyb3VwRGF0YSA9IHRoaXMucHJvY2Vzc0NvbHVtbkdyb3VwKHN1Ykdyb3VwKTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKHN1Ykdyb3VwRGF0YSl7XG5cdFx0XHRcdFx0Z3JvdXBEYXRhLndpZHRoICs9IHN1Ykdyb3VwRGF0YS53aWR0aDtcblx0XHRcdFx0XHRncm91cERhdGEuc3ViR3JvdXBzLnB1c2goc3ViR3JvdXBEYXRhKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZihzdWJHcm91cERhdGEuZGVwdGggPiBtYXhEZXB0aCl7XG5cdFx0XHRcdFx0XHRtYXhEZXB0aCA9IHN1Ykdyb3VwRGF0YS5kZXB0aDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHRncm91cERhdGEuZGVwdGggKz0gbWF4RGVwdGg7XG5cdFx0XHRcblx0XHRcdGlmKCFncm91cERhdGEud2lkdGgpe1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYodGhpcy5jb2x1bW5WaXNDaGVjayhjb2x1bW4pKXtcblx0XHRcdFx0Z3JvdXBEYXRhLndpZHRoID0gMTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gZ3JvdXBEYXRhO1xuXHR9XG5cdFxuXHRjb2x1bW5WaXNDaGVjayhjb2x1bW4pe1xuXHRcdHZhciB2aXNQcm9wID0gY29sdW1uLmRlZmluaXRpb25bdGhpcy5jb2xWaXNQcm9wXTtcblx0XHRcblx0XHRpZih0eXBlb2YgdmlzUHJvcCA9PT0gXCJmdW5jdGlvblwiKXtcblx0XHRcdHZpc1Byb3AgPSB2aXNQcm9wLmNhbGwodGhpcy50YWJsZSwgY29sdW1uLmdldENvbXBvbmVudCgpKTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHZpc1Byb3AgIT09IGZhbHNlICYmIChjb2x1bW4udmlzaWJsZSB8fCAoIWNvbHVtbi52aXNpYmxlICYmIHZpc1Byb3ApKTtcblx0fVxuXHRcblx0aGVhZGVyc1RvRXhwb3J0Um93cyhjb2x1bW5zKXtcblx0XHR2YXIgaGVhZGVycyA9IFtdLFxuXHRcdGhlYWRlckRlcHRoID0gMCxcblx0XHRleHBvcnRSb3dzID0gW107XG5cdFx0XG5cdFx0ZnVuY3Rpb24gcGFyc2VDb2x1bW5Hcm91cChjb2x1bW4sIGxldmVsKXtcblx0XHRcdFxuXHRcdFx0dmFyIGRlcHRoID0gaGVhZGVyRGVwdGggLSBsZXZlbDtcblx0XHRcdFxuXHRcdFx0aWYodHlwZW9mIGhlYWRlcnNbbGV2ZWxdID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdFx0aGVhZGVyc1tsZXZlbF0gPSBbXTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Y29sdW1uLmhlaWdodCA9IGNvbHVtbi5zdWJHcm91cHMgPyAxIDogKGRlcHRoIC0gY29sdW1uLmRlcHRoKSArIDE7XG5cdFx0XHRcblx0XHRcdGhlYWRlcnNbbGV2ZWxdLnB1c2goY29sdW1uKTtcblx0XHRcdFxuXHRcdFx0aWYoY29sdW1uLmhlaWdodCA+IDEpe1xuXHRcdFx0XHRmb3IobGV0IGkgPSAxOyBpIDwgY29sdW1uLmhlaWdodDsgaSArKyl7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYodHlwZW9mIGhlYWRlcnNbbGV2ZWwgKyBpXSA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRcdFx0XHRoZWFkZXJzW2xldmVsICsgaV0gPSBbXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aGVhZGVyc1tsZXZlbCArIGldLnB1c2goZmFsc2UpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKGNvbHVtbi53aWR0aCA+IDEpe1xuXHRcdFx0XHRmb3IobGV0IGkgPSAxOyBpIDwgY29sdW1uLndpZHRoOyBpICsrKXtcblx0XHRcdFx0XHRoZWFkZXJzW2xldmVsXS5wdXNoKGZhbHNlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihjb2x1bW4uc3ViR3JvdXBzKXtcblx0XHRcdFx0Y29sdW1uLnN1Ykdyb3Vwcy5mb3JFYWNoKGZ1bmN0aW9uKHN1Ykdyb3VwKXtcblx0XHRcdFx0XHRwYXJzZUNvbHVtbkdyb3VwKHN1Ykdyb3VwLCBsZXZlbCsxKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdC8vY2FsY3VsYXRlIG1heGltdW0gaGVhZGVyIGRlcHRoXG5cdFx0Y29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uKGNvbHVtbil7XG5cdFx0XHRpZihjb2x1bW4uZGVwdGggPiBoZWFkZXJEZXB0aCl7XG5cdFx0XHRcdGhlYWRlckRlcHRoID0gY29sdW1uLmRlcHRoO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdGNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihjb2x1bW4pe1xuXHRcdFx0cGFyc2VDb2x1bW5Hcm91cChjb2x1bW4sMCk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0aGVhZGVycy5mb3JFYWNoKChoZWFkZXIpID0+IHtcblx0XHRcdHZhciBjb2x1bW5zID0gW107XG5cdFx0XHRcblx0XHRcdGhlYWRlci5mb3JFYWNoKChjb2wpID0+IHtcblx0XHRcdFx0aWYoY29sKXtcblx0XHRcdFx0XHRsZXQgdGl0bGUgPSB0eXBlb2YgY29sLnRpdGxlID09PSBcInVuZGVmaW5lZFwiID8gXCJcIiA6IGNvbC50aXRsZTtcblx0XHRcdFx0XHRjb2x1bW5zLnB1c2gobmV3IEV4cG9ydENvbHVtbih0aXRsZSwgY29sLmNvbHVtbi5nZXRDb21wb25lbnQoKSwgY29sLndpZHRoLCBjb2wuaGVpZ2h0LCBjb2wuZGVwdGgpKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGNvbHVtbnMucHVzaChudWxsKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdGV4cG9ydFJvd3MucHVzaChuZXcgRXhwb3J0Um93KFwiaGVhZGVyXCIsIGNvbHVtbnMpKTtcblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gZXhwb3J0Um93cztcblx0fVxuXHRcblx0Ym9keVRvRXhwb3J0Um93cyhyb3dzKXtcblx0XHRcblx0XHR2YXIgY29sdW1ucyA9IFtdO1xuXHRcdHZhciBleHBvcnRSb3dzID0gW107XG5cdFx0XG5cdFx0dGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmNvbHVtbnNCeUluZGV4LmZvckVhY2goKGNvbHVtbikgPT4ge1xuXHRcdFx0aWYgKHRoaXMuY29sdW1uVmlzQ2hlY2soY29sdW1uKSkge1xuXHRcdFx0XHRjb2x1bW5zLnB1c2goY29sdW1uLmdldENvbXBvbmVudCgpKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0XHRpZih0aGlzLmNvbmZpZy5jb2x1bW5DYWxjcyAhPT0gZmFsc2UgJiYgdGhpcy50YWJsZS5tb2RFeGlzdHMoXCJjb2x1bW5DYWxjc1wiKSl7XG5cdFx0XHRpZih0aGlzLnRhYmxlLm1vZHVsZXMuY29sdW1uQ2FsY3MudG9wSW5pdGlhbGl6ZWQpe1xuXHRcdFx0XHRyb3dzLnVuc2hpZnQodGhpcy50YWJsZS5tb2R1bGVzLmNvbHVtbkNhbGNzLnRvcFJvdyk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMudGFibGUubW9kdWxlcy5jb2x1bW5DYWxjcy5ib3RJbml0aWFsaXplZCl7XG5cdFx0XHRcdHJvd3MucHVzaCh0aGlzLnRhYmxlLm1vZHVsZXMuY29sdW1uQ2FsY3MuYm90Um93KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0cm93cyA9IHJvd3MuZmlsdGVyKChyb3cpID0+IHtcblx0XHRcdHN3aXRjaChyb3cudHlwZSl7XG5cdFx0XHRcdGNhc2UgXCJncm91cFwiOlxuXHRcdFx0XHRcdHJldHVybiB0aGlzLmNvbmZpZy5yb3dHcm91cHMgIT09IGZhbHNlO1xuXHRcdFx0XHRcblx0XHRcdFx0Y2FzZSBcImNhbGNcIjpcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5jb25maWcuY29sdW1uQ2FsY3MgIT09IGZhbHNlO1xuXHRcdFx0XHRcblx0XHRcdFx0Y2FzZSBcInJvd1wiOlxuXHRcdFx0XHRcdHJldHVybiAhKHRoaXMudGFibGUub3B0aW9ucy5kYXRhVHJlZSAmJiB0aGlzLmNvbmZpZy5kYXRhVHJlZSA9PT0gZmFsc2UgJiYgcm93Lm1vZHVsZXMuZGF0YVRyZWUucGFyZW50KTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSk7XG5cdFx0XG5cdFx0cm93cy5mb3JFYWNoKChyb3csIGkpID0+IHtcblx0XHRcdHZhciByb3dEYXRhID0gcm93LmdldERhdGEodGhpcy5jb2xWaXNQcm9wKTtcblx0XHRcdHZhciBleHBvcnRDb2xzID0gW107XG5cdFx0XHR2YXIgaW5kZW50ID0gMDtcblx0XHRcdFxuXHRcdFx0c3dpdGNoKHJvdy50eXBlKXtcblx0XHRcdFx0Y2FzZSBcImdyb3VwXCI6XG5cdFx0XHRcdFx0aW5kZW50ID0gcm93LmxldmVsO1xuXHRcdFx0XHRcdGV4cG9ydENvbHMucHVzaChuZXcgRXhwb3J0Q29sdW1uKHJvdy5rZXksIHJvdy5nZXRDb21wb25lbnQoKSwgY29sdW1ucy5sZW5ndGgsIDEpKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XG5cdFx0XHRcdGNhc2UgXCJjYWxjXCIgOlxuXHRcdFx0XHRjYXNlIFwicm93XCIgOlxuXHRcdFx0XHRcdGNvbHVtbnMuZm9yRWFjaCgoY29sKSA9PiB7XG5cdFx0XHRcdFx0XHRleHBvcnRDb2xzLnB1c2gobmV3IEV4cG9ydENvbHVtbihjb2wuX2NvbHVtbi5nZXRGaWVsZFZhbHVlKHJvd0RhdGEpLCBjb2wsIDEsIDEpKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XG5cdFx0XHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmRhdGFUcmVlICYmIHRoaXMuY29uZmlnLmRhdGFUcmVlICE9PSBmYWxzZSl7XG5cdFx0XHRcdFx0XHRpbmRlbnQgPSByb3cubW9kdWxlcy5kYXRhVHJlZS5pbmRleDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGV4cG9ydFJvd3MucHVzaChuZXcgRXhwb3J0Um93KHJvdy50eXBlLCBleHBvcnRDb2xzLCByb3cuZ2V0Q29tcG9uZW50KCksIGluZGVudCkpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiBleHBvcnRSb3dzO1xuXHR9XG5cdFxuXHRnZW5lcmF0ZVRhYmxlRWxlbWVudChsaXN0KXtcblx0XHR2YXIgdGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGFibGVcIiksXG5cdFx0aGVhZGVyRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGhlYWRcIiksXG5cdFx0Ym9keUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRib2R5XCIpLFxuXHRcdHN0eWxlcyA9IHRoaXMubG9va3VwVGFibGVTdHlsZXMoKSxcblx0XHRyb3dGb3JtYXR0ZXIgPSB0aGlzLnRhYmxlLm9wdGlvbnNbXCJyb3dGb3JtYXR0ZXJcIiArICh0aGlzLmNvbFZpc1Byb3AuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0aGlzLmNvbFZpc1Byb3Auc2xpY2UoMSkpXSxcblx0XHRzZXR1cCA9IHt9O1xuXHRcdFxuXHRcdHNldHVwLnJvd0Zvcm1hdHRlciA9IHJvd0Zvcm1hdHRlciAhPT0gbnVsbCA/IHJvd0Zvcm1hdHRlciA6IHRoaXMudGFibGUub3B0aW9ucy5yb3dGb3JtYXR0ZXI7XG5cdFx0XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmRhdGFUcmVlICYmdGhpcy5jb25maWcuZGF0YVRyZWUgIT09IGZhbHNlICYmIHRoaXMudGFibGUubW9kRXhpc3RzKFwiY29sdW1uQ2FsY3NcIikpe1xuXHRcdFx0c2V0dXAudHJlZUVsZW1lbnRGaWVsZCA9IHRoaXMudGFibGUubW9kdWxlcy5kYXRhVHJlZS5lbGVtZW50RmllbGQ7XG5cdFx0fVxuXHRcdFxuXHRcdC8vYXNzaWduIGdyb3VwIGhlYWRlciBmb3JtYXR0ZXJcblx0XHRzZXR1cC5ncm91cEhlYWRlciA9IHRoaXMudGFibGUub3B0aW9uc1tcImdyb3VwSGVhZGVyXCIgKyAodGhpcy5jb2xWaXNQcm9wLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdGhpcy5jb2xWaXNQcm9wLnNsaWNlKDEpKV07XG5cdFx0XG5cdFx0aWYoc2V0dXAuZ3JvdXBIZWFkZXIgJiYgIUFycmF5LmlzQXJyYXkoc2V0dXAuZ3JvdXBIZWFkZXIpKXtcblx0XHRcdHNldHVwLmdyb3VwSGVhZGVyID0gW3NldHVwLmdyb3VwSGVhZGVyXTtcblx0XHR9XG5cdFx0XG5cdFx0dGFibGUuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1wcmludC10YWJsZVwiKTtcblx0XHRcblx0XHR0aGlzLm1hcEVsZW1lbnRTdHlsZXModGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmdldEhlYWRlcnNFbGVtZW50KCksIGhlYWRlckVsLCBbXCJib3JkZXItdG9wXCIsIFwiYm9yZGVyLWxlZnRcIiwgXCJib3JkZXItcmlnaHRcIiwgXCJib3JkZXItYm90dG9tXCIsIFwiYmFja2dyb3VuZC1jb2xvclwiLCBcImNvbG9yXCIsIFwiZm9udC13ZWlnaHRcIiwgXCJmb250LWZhbWlseVwiLCBcImZvbnQtc2l6ZVwiXSk7XG5cdFx0XG5cdFx0XG5cdFx0aWYobGlzdC5sZW5ndGggPiAxMDAwKXtcblx0XHRcdGNvbnNvbGUud2FybihcIkl0IG1heSB0YWtlIGEgbG9uZyB0aW1lIHRvIHJlbmRlciBhbiBIVE1MIHRhYmxlIHdpdGggbW9yZSB0aGFuIDEwMDAgcm93c1wiKTtcblx0XHR9XG5cdFx0XG5cdFx0bGlzdC5mb3JFYWNoKChyb3csIGkpID0+IHtcblx0XHRcdGxldCByb3dFbDtcblx0XHRcdFxuXHRcdFx0c3dpdGNoKHJvdy50eXBlKXtcblx0XHRcdFx0Y2FzZSBcImhlYWRlclwiOlxuXHRcdFx0XHRcdGhlYWRlckVsLmFwcGVuZENoaWxkKHRoaXMuZ2VuZXJhdGVIZWFkZXJFbGVtZW50KHJvdywgc2V0dXAsIHN0eWxlcykpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcblx0XHRcdFx0Y2FzZSBcImdyb3VwXCI6XG5cdFx0XHRcdFx0Ym9keUVsLmFwcGVuZENoaWxkKHRoaXMuZ2VuZXJhdGVHcm91cEVsZW1lbnQocm93LCBzZXR1cCwgc3R5bGVzKSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFxuXHRcdFx0XHRjYXNlIFwiY2FsY1wiOlxuXHRcdFx0XHRcdGJvZHlFbC5hcHBlbmRDaGlsZCh0aGlzLmdlbmVyYXRlQ2FsY0VsZW1lbnQocm93LCBzZXR1cCwgc3R5bGVzKSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFxuXHRcdFx0XHRjYXNlIFwicm93XCI6XG5cdFx0XHRcdFx0cm93RWwgPSB0aGlzLmdlbmVyYXRlUm93RWxlbWVudChyb3csIHNldHVwLCBzdHlsZXMpO1xuXHRcdFx0XHRcblx0XHRcdFx0XHR0aGlzLm1hcEVsZW1lbnRTdHlsZXMoKChpICUgMikgJiYgc3R5bGVzLmV2ZW5Sb3cpID8gc3R5bGVzLmV2ZW5Sb3cgOiBzdHlsZXMub2RkUm93LCByb3dFbCwgW1wiYm9yZGVyLXRvcFwiLCBcImJvcmRlci1sZWZ0XCIsIFwiYm9yZGVyLXJpZ2h0XCIsIFwiYm9yZGVyLWJvdHRvbVwiLCBcImNvbG9yXCIsIFwiZm9udC13ZWlnaHRcIiwgXCJmb250LWZhbWlseVwiLCBcImZvbnQtc2l6ZVwiLCBcImJhY2tncm91bmQtY29sb3JcIl0pO1xuXHRcdFx0XHRcdGJvZHlFbC5hcHBlbmRDaGlsZChyb3dFbCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0aWYoaGVhZGVyRWwuaW5uZXJIVE1MKXtcblx0XHRcdHRhYmxlLmFwcGVuZENoaWxkKGhlYWRlckVsKTtcblx0XHR9XG5cdFx0XG5cdFx0dGFibGUuYXBwZW5kQ2hpbGQoYm9keUVsKTtcblx0XHRcblx0XHRcblx0XHR0aGlzLm1hcEVsZW1lbnRTdHlsZXModGhpcy50YWJsZS5lbGVtZW50LCB0YWJsZSwgW1wiYm9yZGVyLXRvcFwiLCBcImJvcmRlci1sZWZ0XCIsIFwiYm9yZGVyLXJpZ2h0XCIsIFwiYm9yZGVyLWJvdHRvbVwiXSk7XG5cdFx0cmV0dXJuIHRhYmxlO1xuXHR9XG5cdFxuXHRsb29rdXBUYWJsZVN0eWxlcygpe1xuXHRcdHZhciBzdHlsZXMgPSB7fTtcblx0XHRcblx0XHQvL2xvb2t1cCByb3cgc3R5bGVzXG5cdFx0aWYodGhpcy5jbG9uZVRhYmxlU3R5bGUgJiYgd2luZG93LmdldENvbXB1dGVkU3R5bGUpe1xuXHRcdFx0c3R5bGVzLm9kZFJvdyA9IHRoaXMudGFibGUuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRhYnVsYXRvci1yb3ctb2RkOm5vdCgudGFidWxhdG9yLWdyb3VwKTpub3QoLnRhYnVsYXRvci1jYWxjcylcIik7XG5cdFx0XHRzdHlsZXMuZXZlblJvdyA9IHRoaXMudGFibGUuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRhYnVsYXRvci1yb3ctZXZlbjpub3QoLnRhYnVsYXRvci1ncm91cCk6bm90KC50YWJ1bGF0b3ItY2FsY3MpXCIpO1xuXHRcdFx0c3R5bGVzLmNhbGNSb3cgPSB0aGlzLnRhYmxlLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi50YWJ1bGF0b3Itcm93LnRhYnVsYXRvci1jYWxjc1wiKTtcblx0XHRcdHN0eWxlcy5maXJzdFJvdyA9IHRoaXMudGFibGUuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnRhYnVsYXRvci1yb3c6bm90KC50YWJ1bGF0b3ItZ3JvdXApOm5vdCgudGFidWxhdG9yLWNhbGNzKVwiKTtcblx0XHRcdHN0eWxlcy5maXJzdEdyb3VwID0gdGhpcy50YWJsZS5lbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJ0YWJ1bGF0b3ItZ3JvdXBcIilbMF07XG5cdFx0XHRcblx0XHRcdGlmKHN0eWxlcy5maXJzdFJvdyl7XG5cdFx0XHRcdHN0eWxlcy5zdHlsZUNlbGxzID0gc3R5bGVzLmZpcnN0Um93LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJ0YWJ1bGF0b3ItY2VsbFwiKTtcblx0XHRcdFx0c3R5bGVzLmZpcnN0Q2VsbCA9IHN0eWxlcy5zdHlsZUNlbGxzWzBdO1xuXHRcdFx0XHRzdHlsZXMubGFzdENlbGwgPSBzdHlsZXMuc3R5bGVDZWxsc1tzdHlsZXMuc3R5bGVDZWxscy5sZW5ndGggLSAxXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHN0eWxlcztcblx0fVxuXHRcblx0Z2VuZXJhdGVIZWFkZXJFbGVtZW50KHJvdywgc2V0dXAsIHN0eWxlcyl7XG5cdFx0dmFyIHJvd0VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRyXCIpO1xuXHRcdFxuXHRcdHJvdy5jb2x1bW5zLmZvckVhY2goKGNvbHVtbikgPT4ge1xuXHRcdFx0aWYoY29sdW1uKXtcblx0XHRcdFx0dmFyIGNlbGxFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0aFwiKTtcblx0XHRcdFx0dmFyIGNsYXNzTmFtZXMgPSBjb2x1bW4uY29tcG9uZW50Ll9jb2x1bW4uZGVmaW5pdGlvbi5jc3NDbGFzcyA/IGNvbHVtbi5jb21wb25lbnQuX2NvbHVtbi5kZWZpbml0aW9uLmNzc0NsYXNzLnNwbGl0KFwiIFwiKSA6IFtdO1xuXHRcdFx0XHRcblx0XHRcdFx0Y2VsbEVsLmNvbFNwYW4gPSBjb2x1bW4ud2lkdGg7XG5cdFx0XHRcdGNlbGxFbC5yb3dTcGFuID0gY29sdW1uLmhlaWdodDtcblx0XHRcdFx0XG5cdFx0XHRcdGNlbGxFbC5pbm5lckhUTUwgPSBjb2x1bW4udmFsdWU7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih0aGlzLmNsb25lVGFibGVTdHlsZSl7XG5cdFx0XHRcdFx0Y2VsbEVsLnN0eWxlLmJveFNpemluZyA9IFwiYm9yZGVyLWJveFwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRjbGFzc05hbWVzLmZvckVhY2goZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG5cdFx0XHRcdFx0Y2VsbEVsLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLm1hcEVsZW1lbnRTdHlsZXMoY29sdW1uLmNvbXBvbmVudC5nZXRFbGVtZW50KCksIGNlbGxFbCwgW1widGV4dC1hbGlnblwiLCBcImJvcmRlci10b3BcIiwgXCJib3JkZXItbGVmdFwiLCBcImJvcmRlci1yaWdodFwiLCBcImJvcmRlci1ib3R0b21cIiwgXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIFwiY29sb3JcIiwgXCJmb250LXdlaWdodFwiLCBcImZvbnQtZmFtaWx5XCIsIFwiZm9udC1zaXplXCJdKTtcblx0XHRcdFx0dGhpcy5tYXBFbGVtZW50U3R5bGVzKGNvbHVtbi5jb21wb25lbnQuX2NvbHVtbi5jb250ZW50RWxlbWVudCwgY2VsbEVsLCBbXCJwYWRkaW5nLXRvcFwiLCBcInBhZGRpbmctbGVmdFwiLCBcInBhZGRpbmctcmlnaHRcIiwgXCJwYWRkaW5nLWJvdHRvbVwiXSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihjb2x1bW4uY29tcG9uZW50Ll9jb2x1bW4udmlzaWJsZSl7XG5cdFx0XHRcdFx0dGhpcy5tYXBFbGVtZW50U3R5bGVzKGNvbHVtbi5jb21wb25lbnQuZ2V0RWxlbWVudCgpLCBjZWxsRWwsIFtcIndpZHRoXCJdKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGlmKGNvbHVtbi5jb21wb25lbnQuX2NvbHVtbi5kZWZpbml0aW9uLndpZHRoKXtcblx0XHRcdFx0XHRcdGNlbGxFbC5zdHlsZS53aWR0aCA9IGNvbHVtbi5jb21wb25lbnQuX2NvbHVtbi5kZWZpbml0aW9uLndpZHRoICsgXCJweFwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0aWYoY29sdW1uLmNvbXBvbmVudC5fY29sdW1uLnBhcmVudCl7XG5cdFx0XHRcdFx0dGhpcy5tYXBFbGVtZW50U3R5bGVzKGNvbHVtbi5jb21wb25lbnQuX2NvbHVtbi5wYXJlbnQuZ3JvdXBFbGVtZW50LCBjZWxsRWwsIFtcImJvcmRlci10b3BcIl0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRyb3dFbC5hcHBlbmRDaGlsZChjZWxsRWwpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiByb3dFbDtcblx0fVxuXHRcblx0Z2VuZXJhdGVHcm91cEVsZW1lbnQocm93LCBzZXR1cCwgc3R5bGVzKXtcblx0XHRcblx0XHR2YXIgcm93RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidHJcIiksXG5cdFx0Y2VsbEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpLFxuXHRcdGdyb3VwID0gcm93LmNvbHVtbnNbMF07XG5cdFx0XG5cdFx0cm93RWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1wcmludC10YWJsZS1yb3dcIik7XG5cdFx0XG5cdFx0aWYoc2V0dXAuZ3JvdXBIZWFkZXIgJiYgc2V0dXAuZ3JvdXBIZWFkZXJbcm93LmluZGVudF0pe1xuXHRcdFx0Z3JvdXAudmFsdWUgPSBzZXR1cC5ncm91cEhlYWRlcltyb3cuaW5kZW50XShncm91cC52YWx1ZSwgcm93LmNvbXBvbmVudC5fZ3JvdXAuZ2V0Um93Q291bnQoKSwgcm93LmNvbXBvbmVudC5fZ3JvdXAuZ2V0RGF0YSgpLCByb3cuY29tcG9uZW50KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRpZihzZXR1cC5ncm91cEhlYWRlciAhPT0gZmFsc2Upe1xuXHRcdFx0XHRncm91cC52YWx1ZSA9IHJvdy5jb21wb25lbnQuX2dyb3VwLmdlbmVyYXRvcihncm91cC52YWx1ZSwgcm93LmNvbXBvbmVudC5fZ3JvdXAuZ2V0Um93Q291bnQoKSwgcm93LmNvbXBvbmVudC5fZ3JvdXAuZ2V0RGF0YSgpLCByb3cuY29tcG9uZW50KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0Y2VsbEVsLmNvbFNwYW4gPSBncm91cC53aWR0aDtcblx0XHRjZWxsRWwuaW5uZXJIVE1MID0gZ3JvdXAudmFsdWU7XG5cdFx0XG5cdFx0cm93RWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1wcmludC10YWJsZS1ncm91cFwiKTtcblx0XHRyb3dFbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWdyb3VwLWxldmVsLVwiICsgcm93LmluZGVudCk7XG5cdFx0XG5cdFx0aWYoZ3JvdXAuY29tcG9uZW50LmlzVmlzaWJsZSgpKXtcblx0XHRcdHJvd0VsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItZ3JvdXAtdmlzaWJsZVwiKTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5tYXBFbGVtZW50U3R5bGVzKHN0eWxlcy5maXJzdEdyb3VwLCByb3dFbCwgW1wiYm9yZGVyLXRvcFwiLCBcImJvcmRlci1sZWZ0XCIsIFwiYm9yZGVyLXJpZ2h0XCIsIFwiYm9yZGVyLWJvdHRvbVwiLCBcImNvbG9yXCIsIFwiZm9udC13ZWlnaHRcIiwgXCJmb250LWZhbWlseVwiLCBcImZvbnQtc2l6ZVwiLCBcImJhY2tncm91bmQtY29sb3JcIl0pO1xuXHRcdHRoaXMubWFwRWxlbWVudFN0eWxlcyhzdHlsZXMuZmlyc3RHcm91cCwgY2VsbEVsLCBbXCJwYWRkaW5nLXRvcFwiLCBcInBhZGRpbmctbGVmdFwiLCBcInBhZGRpbmctcmlnaHRcIiwgXCJwYWRkaW5nLWJvdHRvbVwiXSk7XG5cdFx0XG5cdFx0cm93RWwuYXBwZW5kQ2hpbGQoY2VsbEVsKTtcblx0XHRcblx0XHRyZXR1cm4gcm93RWw7XG5cdH1cblx0XG5cdGdlbmVyYXRlQ2FsY0VsZW1lbnQocm93LCBzZXR1cCwgc3R5bGVzKXtcblx0XHR2YXIgcm93RWwgPSB0aGlzLmdlbmVyYXRlUm93RWxlbWVudChyb3csIHNldHVwLCBzdHlsZXMpO1xuXHRcdFxuXHRcdHJvd0VsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItcHJpbnQtdGFibGUtY2FsY3NcIik7XG5cdFx0dGhpcy5tYXBFbGVtZW50U3R5bGVzKHN0eWxlcy5jYWxjUm93LCByb3dFbCwgW1wiYm9yZGVyLXRvcFwiLCBcImJvcmRlci1sZWZ0XCIsIFwiYm9yZGVyLXJpZ2h0XCIsIFwiYm9yZGVyLWJvdHRvbVwiLCBcImNvbG9yXCIsIFwiZm9udC13ZWlnaHRcIiwgXCJmb250LWZhbWlseVwiLCBcImZvbnQtc2l6ZVwiLCBcImJhY2tncm91bmQtY29sb3JcIl0pO1xuXHRcdFxuXHRcdHJldHVybiByb3dFbDtcblx0fVxuXHRcblx0Z2VuZXJhdGVSb3dFbGVtZW50KHJvdywgc2V0dXAsIHN0eWxlcyl7XG5cdFx0dmFyIHJvd0VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRyXCIpO1xuXHRcdFxuXHRcdHJvd0VsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItcHJpbnQtdGFibGUtcm93XCIpO1xuXHRcdFxuXHRcdHJvdy5jb2x1bW5zLmZvckVhY2goKGNvbCwgaSkgPT4ge1xuXHRcdFx0aWYoY29sKXtcblx0XHRcdFx0dmFyIGNlbGxFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKSxcblx0XHRcdFx0Y29sdW1uID0gY29sLmNvbXBvbmVudC5fY29sdW1uLFxuXHRcdFx0XHRpbmRleCA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5maW5kQ29sdW1uSW5kZXgoY29sdW1uKSxcblx0XHRcdFx0dmFsdWUgPSBjb2wudmFsdWUsXG5cdFx0XHRcdGNlbGxTdHlsZTtcblx0XHRcdFx0XG5cdFx0XHRcdHZhciBjZWxsV3JhcHBlciA9IHtcblx0XHRcdFx0XHRtb2R1bGVzOnt9LFxuXHRcdFx0XHRcdGdldFZhbHVlOmZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRnZXRGaWVsZDpmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0cmV0dXJuIGNvbHVtbi5kZWZpbml0aW9uLmZpZWxkO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0Z2V0RWxlbWVudDpmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0cmV0dXJuIGNlbGxFbDtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGdldFR5cGU6ZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdHJldHVybiBcImNlbGxcIjtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGdldENvbHVtbjpmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0cmV0dXJuIGNvbHVtbi5nZXRDb21wb25lbnQoKTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGdldERhdGE6ZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdHJldHVybiByb3cuY29tcG9uZW50LmdldERhdGEoKTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGdldFJvdzpmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJvdy5jb21wb25lbnQ7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRnZXRDb21wb25lbnQ6ZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdHJldHVybiBjZWxsV3JhcHBlcjtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGNvbHVtbjpjb2x1bW4sXG5cdFx0XHRcdH07XG5cdFx0XHRcdFxuXHRcdFx0XHR2YXIgY2xhc3NOYW1lcyA9IGNvbHVtbi5kZWZpbml0aW9uLmNzc0NsYXNzID8gY29sdW1uLmRlZmluaXRpb24uY3NzQ2xhc3Muc3BsaXQoXCIgXCIpIDogW107XG5cdFx0XHRcdFxuXHRcdFx0XHRjbGFzc05hbWVzLmZvckVhY2goZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG5cdFx0XHRcdFx0Y2VsbEVsLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih0aGlzLnRhYmxlLm1vZEV4aXN0cyhcImZvcm1hdFwiKSAmJiB0aGlzLmNvbmZpZy5mb3JtYXRDZWxscyAhPT0gZmFsc2Upe1xuXHRcdFx0XHRcdHZhbHVlID0gdGhpcy50YWJsZS5tb2R1bGVzLmZvcm1hdC5mb3JtYXRFeHBvcnRWYWx1ZShjZWxsV3JhcHBlciwgdGhpcy5jb2xWaXNQcm9wKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHN3aXRjaCh0eXBlb2YgdmFsdWUpe1xuXHRcdFx0XHRcdFx0Y2FzZSBcIm9iamVjdFwiOlxuXHRcdFx0XHRcdFx0XHR2YWx1ZSA9IHZhbHVlICE9PSBudWxsID8gSlNPTi5zdHJpbmdpZnkodmFsdWUpIDogXCJcIjtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGNhc2UgXCJ1bmRlZmluZWRcIjpcblx0XHRcdFx0XHRcdFx0dmFsdWUgPSBcIlwiO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGlmKHZhbHVlIGluc3RhbmNlb2YgTm9kZSl7XG5cdFx0XHRcdFx0Y2VsbEVsLmFwcGVuZENoaWxkKHZhbHVlKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGNlbGxFbC5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0Y2VsbFN0eWxlID0gc3R5bGVzLnN0eWxlQ2VsbHMgJiYgc3R5bGVzLnN0eWxlQ2VsbHNbaW5kZXhdID8gc3R5bGVzLnN0eWxlQ2VsbHNbaW5kZXhdIDogc3R5bGVzLmZpcnN0Q2VsbDtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKGNlbGxTdHlsZSl7XG5cdFx0XHRcdFx0dGhpcy5tYXBFbGVtZW50U3R5bGVzKGNlbGxTdHlsZSwgY2VsbEVsLCBbXCJwYWRkaW5nLXRvcFwiLCBcInBhZGRpbmctbGVmdFwiLCBcInBhZGRpbmctcmlnaHRcIiwgXCJwYWRkaW5nLWJvdHRvbVwiLCBcImJvcmRlci10b3BcIiwgXCJib3JkZXItbGVmdFwiLCBcImJvcmRlci1yaWdodFwiLCBcImJvcmRlci1ib3R0b21cIiwgXCJjb2xvclwiLCBcImZvbnQtd2VpZ2h0XCIsIFwiZm9udC1mYW1pbHlcIiwgXCJmb250LXNpemVcIiwgXCJ0ZXh0LWFsaWduXCJdKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZihjb2x1bW4uZGVmaW5pdGlvbi5hbGlnbil7XG5cdFx0XHRcdFx0XHRjZWxsRWwuc3R5bGUudGV4dEFsaWduID0gY29sdW1uLmRlZmluaXRpb24uYWxpZ247XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZGF0YVRyZWUgJiYgdGhpcy5jb25maWcuZGF0YVRyZWUgIT09IGZhbHNlKXtcblx0XHRcdFx0XHRpZigoc2V0dXAudHJlZUVsZW1lbnRGaWVsZCAmJiBzZXR1cC50cmVlRWxlbWVudEZpZWxkID09IGNvbHVtbi5maWVsZCkgfHwgKCFzZXR1cC50cmVlRWxlbWVudEZpZWxkICYmIGkgPT0gMCkpe1xuXHRcdFx0XHRcdFx0aWYocm93LmNvbXBvbmVudC5fcm93Lm1vZHVsZXMuZGF0YVRyZWUuY29udHJvbEVsKXtcblx0XHRcdFx0XHRcdFx0Y2VsbEVsLmluc2VydEJlZm9yZShyb3cuY29tcG9uZW50Ll9yb3cubW9kdWxlcy5kYXRhVHJlZS5jb250cm9sRWwuY2xvbmVOb2RlKHRydWUpLCBjZWxsRWwuZmlyc3RDaGlsZCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZihyb3cuY29tcG9uZW50Ll9yb3cubW9kdWxlcy5kYXRhVHJlZS5icmFuY2hFbCl7XG5cdFx0XHRcdFx0XHRcdGNlbGxFbC5pbnNlcnRCZWZvcmUocm93LmNvbXBvbmVudC5fcm93Lm1vZHVsZXMuZGF0YVRyZWUuYnJhbmNoRWwuY2xvbmVOb2RlKHRydWUpLCBjZWxsRWwuZmlyc3RDaGlsZCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRyb3dFbC5hcHBlbmRDaGlsZChjZWxsRWwpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoY2VsbFdyYXBwZXIubW9kdWxlcy5mb3JtYXQgJiYgY2VsbFdyYXBwZXIubW9kdWxlcy5mb3JtYXQucmVuZGVyZWRDYWxsYmFjayl7XG5cdFx0XHRcdFx0Y2VsbFdyYXBwZXIubW9kdWxlcy5mb3JtYXQucmVuZGVyZWRDYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0aWYoc2V0dXAucm93Rm9ybWF0dGVyICYmIHJvdy50eXBlID09PSBcInJvd1wiICYmIHRoaXMuY29uZmlnLmZvcm1hdENlbGxzICE9PSBmYWxzZSl7XG5cdFx0XHRsZXQgZm9ybWF0Q29tcG9uZW50ID0gT2JqZWN0LmFzc2lnbihyb3cuY29tcG9uZW50KTtcblxuXHRcdFx0Zm9ybWF0Q29tcG9uZW50LmdldEVsZW1lbnQgPSBmdW5jdGlvbigpe3JldHVybiByb3dFbDt9O1xuXG5cdFx0XHRzZXR1cC5yb3dGb3JtYXR0ZXIocm93LmNvbXBvbmVudCk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiByb3dFbDtcblx0fVxuXHRcblx0Z2VuZXJhdGVIVE1MVGFibGUobGlzdCl7XG5cdFx0dmFyIGhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XG5cdFx0aG9sZGVyLmFwcGVuZENoaWxkKHRoaXMuZ2VuZXJhdGVUYWJsZUVsZW1lbnQobGlzdCkpO1xuXHRcdFxuXHRcdHJldHVybiBob2xkZXIuaW5uZXJIVE1MO1xuXHR9XG5cdFxuXHRnZXRIdG1sKHZpc2libGUsIHN0eWxlLCBjb25maWcsIGNvbFZpc1Byb3Ape1xuXHRcdHZhciBsaXN0ID0gdGhpcy5nZW5lcmF0ZUV4cG9ydExpc3QoY29uZmlnIHx8IHRoaXMudGFibGUub3B0aW9ucy5odG1sT3V0cHV0Q29uZmlnLCBzdHlsZSwgdmlzaWJsZSwgY29sVmlzUHJvcCB8fCBcImh0bWxPdXRwdXRcIik7XG5cdFx0XG5cdFx0cmV0dXJuIHRoaXMuZ2VuZXJhdGVIVE1MVGFibGUobGlzdCk7XG5cdH1cblx0XG5cdG1hcEVsZW1lbnRTdHlsZXMoZnJvbSwgdG8sIHByb3BzKXtcblx0XHRpZih0aGlzLmNsb25lVGFibGVTdHlsZSAmJiBmcm9tICYmIHRvKXtcblx0XHRcdFxuXHRcdFx0dmFyIGxvb2t1cCA9IHtcblx0XHRcdFx0XCJiYWNrZ3JvdW5kLWNvbG9yXCIgOiBcImJhY2tncm91bmRDb2xvclwiLFxuXHRcdFx0XHRcImNvbG9yXCIgOiBcImZvbnRDb2xvclwiLFxuXHRcdFx0XHRcIndpZHRoXCIgOiBcIndpZHRoXCIsXG5cdFx0XHRcdFwiZm9udC13ZWlnaHRcIiA6IFwiZm9udFdlaWdodFwiLFxuXHRcdFx0XHRcImZvbnQtZmFtaWx5XCIgOiBcImZvbnRGYW1pbHlcIixcblx0XHRcdFx0XCJmb250LXNpemVcIiA6IFwiZm9udFNpemVcIixcblx0XHRcdFx0XCJ0ZXh0LWFsaWduXCIgOiBcInRleHRBbGlnblwiLFxuXHRcdFx0XHRcImJvcmRlci10b3BcIiA6IFwiYm9yZGVyVG9wXCIsXG5cdFx0XHRcdFwiYm9yZGVyLWxlZnRcIiA6IFwiYm9yZGVyTGVmdFwiLFxuXHRcdFx0XHRcImJvcmRlci1yaWdodFwiIDogXCJib3JkZXJSaWdodFwiLFxuXHRcdFx0XHRcImJvcmRlci1ib3R0b21cIiA6IFwiYm9yZGVyQm90dG9tXCIsXG5cdFx0XHRcdFwicGFkZGluZy10b3BcIiA6IFwicGFkZGluZ1RvcFwiLFxuXHRcdFx0XHRcInBhZGRpbmctbGVmdFwiIDogXCJwYWRkaW5nTGVmdFwiLFxuXHRcdFx0XHRcInBhZGRpbmctcmlnaHRcIiA6IFwicGFkZGluZ1JpZ2h0XCIsXG5cdFx0XHRcdFwicGFkZGluZy1ib3R0b21cIiA6IFwicGFkZGluZ0JvdHRvbVwiLFxuXHRcdFx0fTtcblx0XHRcdFxuXHRcdFx0aWYod2luZG93LmdldENvbXB1dGVkU3R5bGUpe1xuXHRcdFx0XHR2YXIgZnJvbVN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZnJvbSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRwcm9wcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3Ape1xuXHRcdFx0XHRcdGlmKCF0by5zdHlsZVtsb29rdXBbcHJvcF1dKXtcblx0XHRcdFx0XHRcdHRvLnN0eWxlW2xvb2t1cFtwcm9wXV0gPSBmcm9tU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShwcm9wKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5FeHBvcnQubW9kdWxlTmFtZSA9IFwiZXhwb3J0XCI7XG5cbnZhciBkZWZhdWx0RmlsdGVycyA9IHtcblxuXHQvL2VxdWFsIHRvXG5cdFwiPVwiOmZ1bmN0aW9uKGZpbHRlclZhbCwgcm93VmFsLCByb3dEYXRhLCBmaWx0ZXJQYXJhbXMpe1xuXHRcdHJldHVybiByb3dWYWwgPT0gZmlsdGVyVmFsID8gdHJ1ZSA6IGZhbHNlO1xuXHR9LFxuXG5cdC8vbGVzcyB0aGFuXG5cdFwiPFwiOmZ1bmN0aW9uKGZpbHRlclZhbCwgcm93VmFsLCByb3dEYXRhLCBmaWx0ZXJQYXJhbXMpe1xuXHRcdHJldHVybiByb3dWYWwgPCBmaWx0ZXJWYWwgPyB0cnVlIDogZmFsc2U7XG5cdH0sXG5cblx0Ly9sZXNzIHRoYW4gb3IgZXF1YWwgdG9cblx0XCI8PVwiOmZ1bmN0aW9uKGZpbHRlclZhbCwgcm93VmFsLCByb3dEYXRhLCBmaWx0ZXJQYXJhbXMpe1xuXHRcdHJldHVybiByb3dWYWwgPD0gZmlsdGVyVmFsID8gdHJ1ZSA6IGZhbHNlO1xuXHR9LFxuXG5cdC8vZ3JlYXRlciB0aGFuXG5cdFwiPlwiOmZ1bmN0aW9uKGZpbHRlclZhbCwgcm93VmFsLCByb3dEYXRhLCBmaWx0ZXJQYXJhbXMpe1xuXHRcdHJldHVybiByb3dWYWwgPiBmaWx0ZXJWYWwgPyB0cnVlIDogZmFsc2U7XG5cdH0sXG5cblx0Ly9ncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG9cblx0XCI+PVwiOmZ1bmN0aW9uKGZpbHRlclZhbCwgcm93VmFsLCByb3dEYXRhLCBmaWx0ZXJQYXJhbXMpe1xuXHRcdHJldHVybiByb3dWYWwgPj0gZmlsdGVyVmFsID8gdHJ1ZSA6IGZhbHNlO1xuXHR9LFxuXG5cdC8vbm90IGVxdWFsIHRvXG5cdFwiIT1cIjpmdW5jdGlvbihmaWx0ZXJWYWwsIHJvd1ZhbCwgcm93RGF0YSwgZmlsdGVyUGFyYW1zKXtcblx0XHRyZXR1cm4gcm93VmFsICE9IGZpbHRlclZhbCA/IHRydWUgOiBmYWxzZTtcblx0fSxcblxuXHRcInJlZ2V4XCI6ZnVuY3Rpb24oZmlsdGVyVmFsLCByb3dWYWwsIHJvd0RhdGEsIGZpbHRlclBhcmFtcyl7XG5cblx0XHRpZih0eXBlb2YgZmlsdGVyVmFsID09IFwic3RyaW5nXCIpe1xuXHRcdFx0ZmlsdGVyVmFsID0gbmV3IFJlZ0V4cChmaWx0ZXJWYWwpO1xuXHRcdH1cblxuXHRcdHJldHVybiBmaWx0ZXJWYWwudGVzdChyb3dWYWwpO1xuXHR9LFxuXG5cdC8vY29udGFpbnMgdGhlIHN0cmluZ1xuXHRcImxpa2VcIjpmdW5jdGlvbihmaWx0ZXJWYWwsIHJvd1ZhbCwgcm93RGF0YSwgZmlsdGVyUGFyYW1zKXtcblx0XHRpZihmaWx0ZXJWYWwgPT09IG51bGwgfHwgdHlwZW9mIGZpbHRlclZhbCA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRyZXR1cm4gcm93VmFsID09PSBmaWx0ZXJWYWwgPyB0cnVlIDogZmFsc2U7XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYodHlwZW9mIHJvd1ZhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgcm93VmFsICE9PSBudWxsKXtcblx0XHRcdFx0cmV0dXJuIFN0cmluZyhyb3dWYWwpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihmaWx0ZXJWYWwudG9Mb3dlckNhc2UoKSkgPiAtMTtcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vY29udGFpbnMgdGhlIGtleXdvcmRzXG5cdFwia2V5d29yZHNcIjpmdW5jdGlvbihmaWx0ZXJWYWwsIHJvd1ZhbCwgcm93RGF0YSwgZmlsdGVyUGFyYW1zKXtcblx0XHR2YXIga2V5d29yZHMgPSBmaWx0ZXJWYWwudG9Mb3dlckNhc2UoKS5zcGxpdCh0eXBlb2YgZmlsdGVyUGFyYW1zLnNlcGFyYXRvciA9PT0gXCJ1bmRlZmluZWRcIiA/IFwiIFwiIDogZmlsdGVyUGFyYW1zLnNlcGFyYXRvciksXG5cdFx0dmFsdWUgPSBTdHJpbmcocm93VmFsID09PSBudWxsIHx8IHR5cGVvZiByb3dWYWwgPT09IFwidW5kZWZpbmVkXCIgPyBcIlwiIDogcm93VmFsKS50b0xvd2VyQ2FzZSgpLFxuXHRcdG1hdGNoZXMgPSBbXTtcblxuXHRcdGtleXdvcmRzLmZvckVhY2goKGtleXdvcmQpID0+e1xuXHRcdFx0aWYodmFsdWUuaW5jbHVkZXMoa2V5d29yZCkpe1xuXHRcdFx0XHRtYXRjaGVzLnB1c2godHJ1ZSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gZmlsdGVyUGFyYW1zLm1hdGNoQWxsID8gbWF0Y2hlcy5sZW5ndGggPT09IGtleXdvcmRzLmxlbmd0aCA6ICEhbWF0Y2hlcy5sZW5ndGg7XG5cdH0sXG5cblx0Ly9zdGFydHMgd2l0aCB0aGUgc3RyaW5nXG5cdFwic3RhcnRzXCI6ZnVuY3Rpb24oZmlsdGVyVmFsLCByb3dWYWwsIHJvd0RhdGEsIGZpbHRlclBhcmFtcyl7XG5cdFx0aWYoZmlsdGVyVmFsID09PSBudWxsIHx8IHR5cGVvZiBmaWx0ZXJWYWwgPT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0cmV0dXJuIHJvd1ZhbCA9PT0gZmlsdGVyVmFsID8gdHJ1ZSA6IGZhbHNlO1xuXHRcdH1lbHNlIHtcblx0XHRcdGlmKHR5cGVvZiByb3dWYWwgIT09ICd1bmRlZmluZWQnICYmIHJvd1ZhbCAhPT0gbnVsbCl7XG5cdFx0XHRcdHJldHVybiBTdHJpbmcocm93VmFsKS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoZmlsdGVyVmFsLnRvTG93ZXJDYXNlKCkpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly9lbmRzIHdpdGggdGhlIHN0cmluZ1xuXHRcImVuZHNcIjpmdW5jdGlvbihmaWx0ZXJWYWwsIHJvd1ZhbCwgcm93RGF0YSwgZmlsdGVyUGFyYW1zKXtcblx0XHRpZihmaWx0ZXJWYWwgPT09IG51bGwgfHwgdHlwZW9mIGZpbHRlclZhbCA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRyZXR1cm4gcm93VmFsID09PSBmaWx0ZXJWYWwgPyB0cnVlIDogZmFsc2U7XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYodHlwZW9mIHJvd1ZhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgcm93VmFsICE9PSBudWxsKXtcblx0XHRcdFx0cmV0dXJuIFN0cmluZyhyb3dWYWwpLnRvTG93ZXJDYXNlKCkuZW5kc1dpdGgoZmlsdGVyVmFsLnRvTG93ZXJDYXNlKCkpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly9pbiBhcnJheVxuXHRcImluXCI6ZnVuY3Rpb24oZmlsdGVyVmFsLCByb3dWYWwsIHJvd0RhdGEsIGZpbHRlclBhcmFtcyl7XG5cdFx0aWYoQXJyYXkuaXNBcnJheShmaWx0ZXJWYWwpKXtcblx0XHRcdHJldHVybiBmaWx0ZXJWYWwubGVuZ3RoID8gZmlsdGVyVmFsLmluZGV4T2Yocm93VmFsKSA+IC0xIDogdHJ1ZTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJGaWx0ZXIgRXJyb3IgLSBmaWx0ZXIgdmFsdWUgaXMgbm90IGFuIGFycmF5OlwiLCBmaWx0ZXJWYWwpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fSxcbn07XG5cbmNsYXNzIEZpbHRlciBleHRlbmRzIE1vZHVsZXtcblxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXG5cdFx0dGhpcy5maWx0ZXJMaXN0ID0gW107IC8vaG9sZCBmaWx0ZXIgbGlzdFxuXHRcdHRoaXMuaGVhZGVyRmlsdGVycyA9IHt9OyAvL2hvbGQgY29sdW1uIGZpbHRlcnNcblx0XHR0aGlzLmhlYWRlckZpbHRlckNvbHVtbnMgPSBbXTsgLy9ob2xkIGNvbHVtbnMgdGhhdCB1c2UgaGVhZGVyIGZpbHRlcnNcblxuXHRcdHRoaXMucHJldkhlYWRlckZpbHRlckNoYW5nZUNoZWNrID0gXCJcIjtcblx0XHR0aGlzLnByZXZIZWFkZXJGaWx0ZXJDaGFuZ2VDaGVjayA9IFwie31cIjtcblxuXHRcdHRoaXMuY2hhbmdlZCA9IGZhbHNlOyAvL2hhcyBmaWx0ZXJpbmcgY2hhbmdlZCBzaW5jZSBsYXN0IHJlbmRlclxuXHRcdHRoaXMudGFibGVJbml0aWFsaXplZCA9IGZhbHNlO1xuXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZmlsdGVyTW9kZVwiLCBcImxvY2FsXCIpOyAvL2xvY2FsIG9yIHJlbW90ZSBmaWx0ZXJpbmdcblxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImluaXRpYWxGaWx0ZXJcIiwgZmFsc2UpOyAvL2luaXRpYWwgZmlsdGVyaW5nIGNyaXRlcmlhXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiaW5pdGlhbEhlYWRlckZpbHRlclwiLCBmYWxzZSk7IC8vaW5pdGlhbCBoZWFkZXIgZmlsdGVyaW5nIGNyaXRlcmlhXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiaGVhZGVyRmlsdGVyTGl2ZUZpbHRlckRlbGF5XCIsIDMwMCk7IC8vZGVsYXkgYmVmb3JlIHVwZGF0aW5nIGNvbHVtbiBhZnRlciB1c2VyIHR5cGVzIGluIGhlYWRlciBmaWx0ZXJcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJwbGFjZWhvbGRlckhlYWRlckZpbHRlclwiLCBmYWxzZSk7IC8vcGxhY2Vob2xkZXIgd2hlbiBoZWFkZXIgZmlsdGVyIGlzIGVtcHR5XG5cblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiaGVhZGVyRmlsdGVyXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJGaWx0ZXJQbGFjZWhvbGRlclwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiaGVhZGVyRmlsdGVyUGFyYW1zXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJGaWx0ZXJFbXB0eUNoZWNrXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJGaWx0ZXJGdW5jXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJGaWx0ZXJGdW5jUGFyYW1zXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJGaWx0ZXJMaXZlRmlsdGVyXCIpO1xuXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJzZWFyY2hSb3dzXCIsIHRoaXMuc2VhcmNoUm93cy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcInNlYXJjaERhdGFcIiwgdGhpcy5zZWFyY2hEYXRhLmJpbmQodGhpcykpO1xuXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJzZXRGaWx0ZXJcIiwgdGhpcy51c2VyU2V0RmlsdGVyLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwicmVmcmVzaEZpbHRlclwiLCB0aGlzLnVzZXJSZWZyZXNoRmlsdGVyLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiYWRkRmlsdGVyXCIsIHRoaXMudXNlckFkZEZpbHRlci5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcImdldEZpbHRlcnNcIiwgdGhpcy5nZXRGaWx0ZXJzLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwic2V0SGVhZGVyRmlsdGVyRm9jdXNcIiwgdGhpcy51c2VyU2V0SGVhZGVyRmlsdGVyRm9jdXMuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJnZXRIZWFkZXJGaWx0ZXJWYWx1ZVwiLCB0aGlzLnVzZXJHZXRIZWFkZXJGaWx0ZXJWYWx1ZS5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcInNldEhlYWRlckZpbHRlclZhbHVlXCIsIHRoaXMudXNlclNldEhlYWRlckZpbHRlclZhbHVlLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiZ2V0SGVhZGVyRmlsdGVyc1wiLCB0aGlzLmdldEhlYWRlckZpbHRlcnMuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJyZW1vdmVGaWx0ZXJcIiwgdGhpcy51c2VyUmVtb3ZlRmlsdGVyLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiY2xlYXJGaWx0ZXJcIiwgdGhpcy51c2VyQ2xlYXJGaWx0ZXIuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJjbGVhckhlYWRlckZpbHRlclwiLCB0aGlzLnVzZXJDbGVhckhlYWRlckZpbHRlci5iaW5kKHRoaXMpKTtcblxuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcImNvbHVtblwiLCBcImhlYWRlckZpbHRlckZvY3VzXCIsIHRoaXMuc2V0SGVhZGVyRmlsdGVyRm9jdXMuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwiY29sdW1uXCIsIFwicmVsb2FkSGVhZGVyRmlsdGVyXCIsIHRoaXMucmVsb2FkSGVhZGVyRmlsdGVyLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcImNvbHVtblwiLCBcImdldEhlYWRlckZpbHRlclZhbHVlXCIsIHRoaXMuZ2V0SGVhZGVyRmlsdGVyVmFsdWUuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwiY29sdW1uXCIsIFwic2V0SGVhZGVyRmlsdGVyVmFsdWVcIiwgdGhpcy5zZXRIZWFkZXJGaWx0ZXJWYWx1ZS5iaW5kKHRoaXMpKTtcblx0fVxuXG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1pbml0XCIsIHRoaXMuaW5pdGlhbGl6ZUNvbHVtbkhlYWRlckZpbHRlci5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi13aWR0aC1maXQtYmVmb3JlXCIsIHRoaXMuaGlkZUhlYWRlckZpbHRlckVsZW1lbnRzLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLXdpZHRoLWZpdC1hZnRlclwiLCB0aGlzLnNob3dIZWFkZXJGaWx0ZXJFbGVtZW50cy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcInRhYmxlLWJ1aWx0XCIsIHRoaXMudGFibGVCdWlsdC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcInBsYWNlaG9sZGVyXCIsIHRoaXMuZ2VuZXJhdGVQbGFjZWhvbGRlci5iaW5kKHRoaXMpKTtcblxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5maWx0ZXJNb2RlID09PSBcInJlbW90ZVwiKXtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiZGF0YS1wYXJhbXNcIiwgdGhpcy5yZW1vdGVGaWx0ZXJQYXJhbXMuYmluZCh0aGlzKSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5yZWdpc3RlckRhdGFIYW5kbGVyKHRoaXMuZmlsdGVyLmJpbmQodGhpcyksIDEwKTtcblx0fVxuXG5cdHRhYmxlQnVpbHQoKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuaW5pdGlhbEZpbHRlcil7XG5cdFx0XHR0aGlzLnNldEZpbHRlcih0aGlzLnRhYmxlLm9wdGlvbnMuaW5pdGlhbEZpbHRlcik7XG5cdFx0fVxuXG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmluaXRpYWxIZWFkZXJGaWx0ZXIpe1xuXHRcdFx0dGhpcy50YWJsZS5vcHRpb25zLmluaXRpYWxIZWFkZXJGaWx0ZXIuZm9yRWFjaCgoaXRlbSkgPT4ge1xuXG5cdFx0XHRcdHZhciBjb2x1bW4gPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZmluZENvbHVtbihpdGVtLmZpZWxkKTtcblxuXHRcdFx0XHRpZihjb2x1bW4pe1xuXHRcdFx0XHRcdHRoaXMuc2V0SGVhZGVyRmlsdGVyVmFsdWUoY29sdW1uLCBpdGVtLnZhbHVlKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGNvbnNvbGUud2FybihcIkNvbHVtbiBGaWx0ZXIgRXJyb3IgLSBObyBtYXRjaGluZyBjb2x1bW4gZm91bmQ6XCIsIGl0ZW0uZmllbGQpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0dGhpcy50YWJsZUluaXRpYWxpemVkID0gdHJ1ZTtcblx0fVxuXG5cdHJlbW90ZUZpbHRlclBhcmFtcyhkYXRhLCBjb25maWcsIHNpbGVudCwgcGFyYW1zKXtcblx0XHRwYXJhbXMuZmlsdGVyID0gdGhpcy5nZXRGaWx0ZXJzKHRydWUsIHRydWUpO1xuXHRcdHJldHVybiBwYXJhbXM7XG5cdH1cblxuXHRnZW5lcmF0ZVBsYWNlaG9sZGVyKHRleHQpe1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5wbGFjZWhvbGRlckhlYWRlckZpbHRlciAmJiBPYmplY3Qua2V5cyh0aGlzLmhlYWRlckZpbHRlcnMpLmxlbmd0aCl7XG5cdFx0XHRyZXR1cm4gdGhpcy50YWJsZS5vcHRpb25zLnBsYWNlaG9sZGVySGVhZGVyRmlsdGVyO1xuXHRcdH1cblx0fVxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLyBUYWJsZSBGdW5jdGlvbnMgLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0Ly9zZXQgc3RhbmRhcmQgZmlsdGVyc1xuXHR1c2VyU2V0RmlsdGVyKGZpZWxkLCB0eXBlLCB2YWx1ZSwgcGFyYW1zKXtcblx0XHR0aGlzLnNldEZpbHRlcihmaWVsZCwgdHlwZSwgdmFsdWUsIHBhcmFtcyk7XG5cdFx0dGhpcy5yZWZyZXNoRmlsdGVyKCk7XG5cdH1cblxuXHQvL3NldCBzdGFuZGFyZCBmaWx0ZXJzXG5cdHVzZXJSZWZyZXNoRmlsdGVyKCl7XG5cdFx0dGhpcy5yZWZyZXNoRmlsdGVyKCk7XG5cdH1cblxuXHQvL2FkZCBmaWx0ZXIgdG8gYXJyYXlcblx0dXNlckFkZEZpbHRlcihmaWVsZCwgdHlwZSwgdmFsdWUsIHBhcmFtcyl7XG5cdFx0dGhpcy5hZGRGaWx0ZXIoZmllbGQsIHR5cGUsIHZhbHVlLCBwYXJhbXMpO1xuXHRcdHRoaXMucmVmcmVzaEZpbHRlcigpO1xuXHR9XG5cblx0dXNlclNldEhlYWRlckZpbHRlckZvY3VzKGZpZWxkKXtcblx0XHR2YXIgY29sdW1uID0gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmZpbmRDb2x1bW4oZmllbGQpO1xuXG5cdFx0aWYoY29sdW1uKXtcblx0XHRcdHRoaXMuc2V0SGVhZGVyRmlsdGVyRm9jdXMoY29sdW1uKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJDb2x1bW4gRmlsdGVyIEZvY3VzIEVycm9yIC0gTm8gbWF0Y2hpbmcgY29sdW1uIGZvdW5kOlwiLCBmaWVsZCk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0dXNlckdldEhlYWRlckZpbHRlclZhbHVlKGZpZWxkKSB7XG5cdFx0dmFyIGNvbHVtbiA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5maW5kQ29sdW1uKGZpZWxkKTtcblxuXHRcdGlmKGNvbHVtbil7XG5cdFx0XHRyZXR1cm4gdGhpcy5nZXRIZWFkZXJGaWx0ZXJWYWx1ZShjb2x1bW4pO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkNvbHVtbiBGaWx0ZXIgRXJyb3IgLSBObyBtYXRjaGluZyBjb2x1bW4gZm91bmQ6XCIsIGZpZWxkKTtcblx0XHR9XG5cdH1cblxuXHR1c2VyU2V0SGVhZGVyRmlsdGVyVmFsdWUoZmllbGQsIHZhbHVlKXtcblx0XHR2YXIgY29sdW1uID0gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmZpbmRDb2x1bW4oZmllbGQpO1xuXG5cdFx0aWYoY29sdW1uKXtcblx0XHRcdHRoaXMuc2V0SGVhZGVyRmlsdGVyVmFsdWUoY29sdW1uLCB2YWx1ZSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiQ29sdW1uIEZpbHRlciBFcnJvciAtIE5vIG1hdGNoaW5nIGNvbHVtbiBmb3VuZDpcIiwgZmllbGQpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXG5cdC8vcmVtb3ZlIGZpbHRlciBmcm9tIGFycmF5XG5cdHVzZXJSZW1vdmVGaWx0ZXIoZmllbGQsIHR5cGUsIHZhbHVlKXtcblx0XHR0aGlzLnJlbW92ZUZpbHRlcihmaWVsZCwgdHlwZSwgdmFsdWUpO1xuXHRcdHRoaXMucmVmcmVzaEZpbHRlcigpO1xuXHR9XG5cblx0Ly9jbGVhciBmaWx0ZXJzXG5cdHVzZXJDbGVhckZpbHRlcihhbGwpe1xuXHRcdHRoaXMuY2xlYXJGaWx0ZXIoYWxsKTtcblx0XHR0aGlzLnJlZnJlc2hGaWx0ZXIoKTtcblx0fVxuXG5cdC8vY2xlYXIgaGVhZGVyIGZpbHRlcnNcblx0dXNlckNsZWFySGVhZGVyRmlsdGVyKCl7XG5cdFx0dGhpcy5jbGVhckhlYWRlckZpbHRlcigpO1xuXHRcdHRoaXMucmVmcmVzaEZpbHRlcigpO1xuXHR9XG5cblxuXHQvL3NlYXJjaCBmb3Igc3BlY2lmaWMgcm93IGNvbXBvbmVudHNcblx0c2VhcmNoUm93cyhmaWVsZCwgdHlwZSwgdmFsdWUpe1xuXHRcdHJldHVybiB0aGlzLnNlYXJjaChcInJvd3NcIiwgZmllbGQsIHR5cGUsIHZhbHVlKTtcblx0fVxuXG5cdC8vc2VhcmNoIGZvciBzcGVjaWZpYyBkYXRhXG5cdHNlYXJjaERhdGEoZmllbGQsIHR5cGUsIHZhbHVlKXtcblx0XHRyZXR1cm4gdGhpcy5zZWFyY2goXCJkYXRhXCIsIGZpZWxkLCB0eXBlLCB2YWx1ZSk7XG5cdH1cblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8gSW50ZXJuYWwgTG9naWMgLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdGluaXRpYWxpemVDb2x1bW5IZWFkZXJGaWx0ZXIoY29sdW1uKXtcblx0XHR2YXIgZGVmID0gY29sdW1uLmRlZmluaXRpb247XG5cblx0XHRpZihkZWYuaGVhZGVyRmlsdGVyKXtcblx0XHRcdHRoaXMuaW5pdGlhbGl6ZUNvbHVtbihjb2x1bW4pO1xuXHRcdH1cblx0fVxuXG5cdC8vaW5pdGlhbGl6ZSBjb2x1bW4gaGVhZGVyIGZpbHRlclxuXHRpbml0aWFsaXplQ29sdW1uKGNvbHVtbiwgdmFsdWUpe1xuXHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHRmaWVsZCA9IGNvbHVtbi5nZXRGaWVsZCgpO1xuXG5cdFx0Ly9oYW5kbGUgc3VjY2Vzc2Z1bGx5IHZhbHVlIGNoYW5nZVxuXHRcdGZ1bmN0aW9uIHN1Y2Nlc3ModmFsdWUpe1xuXHRcdFx0dmFyIGZpbHRlclR5cGUgPSAoY29sdW1uLm1vZHVsZXMuZmlsdGVyLnRhZ1R5cGUgPT0gXCJpbnB1dFwiICYmIGNvbHVtbi5tb2R1bGVzLmZpbHRlci5hdHRyVHlwZSA9PSBcInRleHRcIikgfHwgY29sdW1uLm1vZHVsZXMuZmlsdGVyLnRhZ1R5cGUgPT0gXCJ0ZXh0YXJlYVwiID8gXCJwYXJ0aWFsXCIgOiBcIm1hdGNoXCIsXG5cdFx0XHR0eXBlID0gXCJcIixcblx0XHRcdGZpbHRlckNoYW5nZUNoZWNrID0gXCJcIixcblx0XHRcdGZpbHRlckZ1bmM7XG5cblx0XHRcdGlmKHR5cGVvZiBjb2x1bW4ubW9kdWxlcy5maWx0ZXIucHJldlN1Y2Nlc3MgPT09IFwidW5kZWZpbmVkXCIgfHwgY29sdW1uLm1vZHVsZXMuZmlsdGVyLnByZXZTdWNjZXNzICE9PSB2YWx1ZSl7XG5cblx0XHRcdFx0Y29sdW1uLm1vZHVsZXMuZmlsdGVyLnByZXZTdWNjZXNzID0gdmFsdWU7XG5cblx0XHRcdFx0aWYoIWNvbHVtbi5tb2R1bGVzLmZpbHRlci5lbXB0eUZ1bmModmFsdWUpKXtcblx0XHRcdFx0XHRjb2x1bW4ubW9kdWxlcy5maWx0ZXIudmFsdWUgPSB2YWx1ZTtcblxuXHRcdFx0XHRcdHN3aXRjaCh0eXBlb2YgY29sdW1uLmRlZmluaXRpb24uaGVhZGVyRmlsdGVyRnVuYyl7XG5cdFx0XHRcdFx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRcdFx0XHRcdGlmKEZpbHRlci5maWx0ZXJzW2NvbHVtbi5kZWZpbml0aW9uLmhlYWRlckZpbHRlckZ1bmNdKXtcblx0XHRcdFx0XHRcdFx0XHR0eXBlID0gY29sdW1uLmRlZmluaXRpb24uaGVhZGVyRmlsdGVyRnVuYztcblx0XHRcdFx0XHRcdFx0XHRmaWx0ZXJGdW5jID0gZnVuY3Rpb24oZGF0YSl7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcGFyYW1zID0gY29sdW1uLmRlZmluaXRpb24uaGVhZGVyRmlsdGVyRnVuY1BhcmFtcyB8fCB7fTtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciBmaWVsZFZhbCA9IGNvbHVtbi5nZXRGaWVsZFZhbHVlKGRhdGEpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRwYXJhbXMgPSB0eXBlb2YgcGFyYW1zID09PSBcImZ1bmN0aW9uXCIgPyBwYXJhbXModmFsdWUsIGZpZWxkVmFsLCBkYXRhKSA6IHBhcmFtcztcblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIEZpbHRlci5maWx0ZXJzW2NvbHVtbi5kZWZpbml0aW9uLmhlYWRlckZpbHRlckZ1bmNdKHZhbHVlLCBmaWVsZFZhbCwgZGF0YSwgcGFyYW1zKTtcblx0XHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiSGVhZGVyIEZpbHRlciBFcnJvciAtIE1hdGNoaW5nIGZpbHRlciBmdW5jdGlvbiBub3QgZm91bmQ6IFwiLCBjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJGaWx0ZXJGdW5jKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHRcdFx0XHRcdGZpbHRlckZ1bmMgPSBmdW5jdGlvbihkYXRhKXtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcGFyYW1zID0gY29sdW1uLmRlZmluaXRpb24uaGVhZGVyRmlsdGVyRnVuY1BhcmFtcyB8fCB7fTtcblx0XHRcdFx0XHRcdFx0XHR2YXIgZmllbGRWYWwgPSBjb2x1bW4uZ2V0RmllbGRWYWx1ZShkYXRhKTtcblxuXHRcdFx0XHRcdFx0XHRcdHBhcmFtcyA9IHR5cGVvZiBwYXJhbXMgPT09IFwiZnVuY3Rpb25cIiA/IHBhcmFtcyh2YWx1ZSwgZmllbGRWYWwsIGRhdGEpIDogcGFyYW1zO1xuXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGNvbHVtbi5kZWZpbml0aW9uLmhlYWRlckZpbHRlckZ1bmModmFsdWUsIGZpZWxkVmFsLCBkYXRhLCBwYXJhbXMpO1xuXHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdHR5cGUgPSBmaWx0ZXJGdW5jO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZighZmlsdGVyRnVuYyl7XG5cdFx0XHRcdFx0XHRzd2l0Y2goZmlsdGVyVHlwZSl7XG5cdFx0XHRcdFx0XHRcdGNhc2UgXCJwYXJ0aWFsXCI6XG5cdFx0XHRcdFx0XHRcdFx0ZmlsdGVyRnVuYyA9IGZ1bmN0aW9uKGRhdGEpe1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIGNvbFZhbCA9IGNvbHVtbi5nZXRGaWVsZFZhbHVlKGRhdGEpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZih0eXBlb2YgY29sVmFsICE9PSAndW5kZWZpbmVkJyAmJiBjb2xWYWwgIT09IG51bGwpe1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gU3RyaW5nKGNvbFZhbCkudG9Mb3dlckNhc2UoKS5pbmRleE9mKFN0cmluZyh2YWx1ZSkudG9Mb3dlckNhc2UoKSkgPiAtMTtcblx0XHRcdFx0XHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHRcdFx0dHlwZSA9IFwibGlrZVwiO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdFx0ZmlsdGVyRnVuYyA9IGZ1bmN0aW9uKGRhdGEpe1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGNvbHVtbi5nZXRGaWVsZFZhbHVlKGRhdGEpID09IHZhbHVlO1xuXHRcdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHRcdFx0dHlwZSA9IFwiPVwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHNlbGYuaGVhZGVyRmlsdGVyc1tmaWVsZF0gPSB7dmFsdWU6dmFsdWUsIGZ1bmM6ZmlsdGVyRnVuYywgdHlwZTp0eXBlfTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGRlbGV0ZSBzZWxmLmhlYWRlckZpbHRlcnNbZmllbGRdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29sdW1uLm1vZHVsZXMuZmlsdGVyLnZhbHVlID0gdmFsdWU7XG5cblx0XHRcdFx0ZmlsdGVyQ2hhbmdlQ2hlY2sgPSBKU09OLnN0cmluZ2lmeShzZWxmLmhlYWRlckZpbHRlcnMpO1xuXG5cdFx0XHRcdGlmKHNlbGYucHJldkhlYWRlckZpbHRlckNoYW5nZUNoZWNrICE9PSBmaWx0ZXJDaGFuZ2VDaGVjayl7XG5cdFx0XHRcdFx0c2VsZi5wcmV2SGVhZGVyRmlsdGVyQ2hhbmdlQ2hlY2sgPSBmaWx0ZXJDaGFuZ2VDaGVjaztcblxuXHRcdFx0XHRcdHNlbGYudHJhY2tDaGFuZ2VzKCk7XG5cdFx0XHRcdFx0c2VsZi5yZWZyZXNoRmlsdGVyKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Y29sdW1uLm1vZHVsZXMuZmlsdGVyID0ge1xuXHRcdFx0c3VjY2VzczpzdWNjZXNzLFxuXHRcdFx0YXR0clR5cGU6ZmFsc2UsXG5cdFx0XHR0YWdUeXBlOmZhbHNlLFxuXHRcdFx0ZW1wdHlGdW5jOmZhbHNlLFxuXHRcdH07XG5cblx0XHR0aGlzLmdlbmVyYXRlSGVhZGVyRmlsdGVyRWxlbWVudChjb2x1bW4pO1xuXHR9XG5cblx0Z2VuZXJhdGVIZWFkZXJGaWx0ZXJFbGVtZW50KGNvbHVtbiwgaW5pdGlhbFZhbHVlLCByZWluaXRpYWxpemUpe1xuXHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHRzdWNjZXNzID0gY29sdW1uLm1vZHVsZXMuZmlsdGVyLnN1Y2Nlc3MsXG5cdFx0ZmllbGQgPSBjb2x1bW4uZ2V0RmllbGQoKSxcblx0XHRmaWx0ZXJFbGVtZW50LCBlZGl0b3IsIGVkaXRvckVsZW1lbnQsIGNlbGxXcmFwcGVyLCB0eXBpbmdUaW1lciwgc2VhcmNoVHJpZ2dlciwgcGFyYW1zLCBvblJlbmRlcmVkQ2FsbGJhY2s7XG5cblx0XHRjb2x1bW4ubW9kdWxlcy5maWx0ZXIudmFsdWUgPSBpbml0aWFsVmFsdWU7XG5cblx0XHQvL2hhbmRsZSBhYm9ydGVkIGVkaXRcblx0XHRmdW5jdGlvbiBjYW5jZWwoKXt9XG5cblx0XHRmdW5jdGlvbiBvblJlbmRlcmVkKGNhbGxiYWNrKXtcblx0XHRcdG9uUmVuZGVyZWRDYWxsYmFjayA9IGNhbGxiYWNrO1xuXHRcdH1cblxuXHRcdGlmKGNvbHVtbi5tb2R1bGVzLmZpbHRlci5oZWFkZXJFbGVtZW50ICYmIGNvbHVtbi5tb2R1bGVzLmZpbHRlci5oZWFkZXJFbGVtZW50LnBhcmVudE5vZGUpe1xuXHRcdFx0Y29sdW1uLmNvbnRlbnRFbGVtZW50LnJlbW92ZUNoaWxkKGNvbHVtbi5tb2R1bGVzLmZpbHRlci5oZWFkZXJFbGVtZW50LnBhcmVudE5vZGUpO1xuXHRcdH1cblxuXHRcdGlmKGZpZWxkKXtcblxuXHRcdFx0Ly9zZXQgZW1wdHkgdmFsdWUgZnVuY3Rpb25cblx0XHRcdGNvbHVtbi5tb2R1bGVzLmZpbHRlci5lbXB0eUZ1bmMgPSBjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJGaWx0ZXJFbXB0eUNoZWNrIHx8IGZ1bmN0aW9uKHZhbHVlKXtcblx0XHRcdFx0cmV0dXJuICF2YWx1ZSAmJiB2YWx1ZSAhPT0gMDtcblx0XHRcdH07XG5cblx0XHRcdGZpbHRlckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdFx0ZmlsdGVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWhlYWRlci1maWx0ZXJcIik7XG5cblx0XHRcdC8vc2V0IGNvbHVtbiBlZGl0b3Jcblx0XHRcdHN3aXRjaCh0eXBlb2YgY29sdW1uLmRlZmluaXRpb24uaGVhZGVyRmlsdGVyKXtcblx0XHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0XHRcdGlmKHNlbGYudGFibGUubW9kdWxlcy5lZGl0LmVkaXRvcnNbY29sdW1uLmRlZmluaXRpb24uaGVhZGVyRmlsdGVyXSl7XG5cdFx0XHRcdFx0XHRlZGl0b3IgPSBzZWxmLnRhYmxlLm1vZHVsZXMuZWRpdC5lZGl0b3JzW2NvbHVtbi5kZWZpbml0aW9uLmhlYWRlckZpbHRlcl07XG5cblx0XHRcdFx0XHRcdGlmKChjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJGaWx0ZXIgPT09IFwidGlja1wiIHx8IGNvbHVtbi5kZWZpbml0aW9uLmhlYWRlckZpbHRlciA9PT0gXCJ0aWNrQ3Jvc3NcIikgJiYgIWNvbHVtbi5kZWZpbml0aW9uLmhlYWRlckZpbHRlckVtcHR5Q2hlY2spe1xuXHRcdFx0XHRcdFx0XHRjb2x1bW4ubW9kdWxlcy5maWx0ZXIuZW1wdHlGdW5jID0gZnVuY3Rpb24odmFsdWUpe1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdHJ1ZSAmJiB2YWx1ZSAhPT0gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiRmlsdGVyIEVycm9yIC0gQ2Fubm90IGJ1aWxkIGhlYWRlciBmaWx0ZXIsIE5vIHN1Y2ggZWRpdG9yIGZvdW5kOiBcIiwgY29sdW1uLmRlZmluaXRpb24uZWRpdG9yKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHRcdFx0ZWRpdG9yID0gY29sdW1uLmRlZmluaXRpb24uaGVhZGVyRmlsdGVyO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgXCJib29sZWFuXCI6XG5cdFx0XHRcdFx0aWYoY29sdW1uLm1vZHVsZXMuZWRpdCAmJiBjb2x1bW4ubW9kdWxlcy5lZGl0LmVkaXRvcil7XG5cdFx0XHRcdFx0XHRlZGl0b3IgPSBjb2x1bW4ubW9kdWxlcy5lZGl0LmVkaXRvcjtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRpZihjb2x1bW4uZGVmaW5pdGlvbi5mb3JtYXR0ZXIgJiYgc2VsZi50YWJsZS5tb2R1bGVzLmVkaXQuZWRpdG9yc1tjb2x1bW4uZGVmaW5pdGlvbi5mb3JtYXR0ZXJdKXtcblx0XHRcdFx0XHRcdFx0ZWRpdG9yID0gc2VsZi50YWJsZS5tb2R1bGVzLmVkaXQuZWRpdG9yc1tjb2x1bW4uZGVmaW5pdGlvbi5mb3JtYXR0ZXJdO1xuXG5cdFx0XHRcdFx0XHRcdGlmKChjb2x1bW4uZGVmaW5pdGlvbi5mb3JtYXR0ZXIgPT09IFwidGlja1wiIHx8IGNvbHVtbi5kZWZpbml0aW9uLmZvcm1hdHRlciA9PT0gXCJ0aWNrQ3Jvc3NcIikgJiYgIWNvbHVtbi5kZWZpbml0aW9uLmhlYWRlckZpbHRlckVtcHR5Q2hlY2spe1xuXHRcdFx0XHRcdFx0XHRcdGNvbHVtbi5tb2R1bGVzLmZpbHRlci5lbXB0eUZ1bmMgPSBmdW5jdGlvbih2YWx1ZSl7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgIT09IHRydWUgJiYgdmFsdWUgIT09IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdFx0ZWRpdG9yID0gc2VsZi50YWJsZS5tb2R1bGVzLmVkaXQuZWRpdG9yc1tcImlucHV0XCJdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblxuXHRcdFx0aWYoZWRpdG9yKXtcblxuXHRcdFx0XHRjZWxsV3JhcHBlciA9IHtcblx0XHRcdFx0XHRnZXRWYWx1ZTpmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0cmV0dXJuIHR5cGVvZiBpbml0aWFsVmFsdWUgIT09IFwidW5kZWZpbmVkXCIgPyBpbml0aWFsVmFsdWUgOiBcIlwiO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0Z2V0RmllbGQ6ZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdHJldHVybiBjb2x1bW4uZGVmaW5pdGlvbi5maWVsZDtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGdldEVsZW1lbnQ6ZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdHJldHVybiBmaWx0ZXJFbGVtZW50O1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0Z2V0Q29sdW1uOmZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRyZXR1cm4gY29sdW1uLmdldENvbXBvbmVudCgpO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0Z2V0VGFibGU6KCkgPT4ge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMudGFibGU7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRnZXRUeXBlOigpID0+IHtcblx0XHRcdFx0XHRcdHJldHVybiBcImhlYWRlclwiO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0Z2V0Um93OmZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRub3JtYWxpemVIZWlnaHQ6ZnVuY3Rpb24oKXtcblxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblxuXHRcdFx0XHRwYXJhbXMgPSBjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJGaWx0ZXJQYXJhbXMgfHwge307XG5cblx0XHRcdFx0cGFyYW1zID0gdHlwZW9mIHBhcmFtcyA9PT0gXCJmdW5jdGlvblwiID8gcGFyYW1zLmNhbGwoc2VsZi50YWJsZSwgY2VsbFdyYXBwZXIpIDogcGFyYW1zO1xuXG5cdFx0XHRcdGVkaXRvckVsZW1lbnQgPSBlZGl0b3IuY2FsbCh0aGlzLnRhYmxlLm1vZHVsZXMuZWRpdCwgY2VsbFdyYXBwZXIsIG9uUmVuZGVyZWQsIHN1Y2Nlc3MsIGNhbmNlbCwgcGFyYW1zKTtcblxuXHRcdFx0XHRpZighZWRpdG9yRWxlbWVudCl7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiRmlsdGVyIEVycm9yIC0gQ2Fubm90IGFkZCBmaWx0ZXIgdG8gXCIgKyBmaWVsZCArIFwiIGNvbHVtbiwgZWRpdG9yIHJldHVybmVkIGEgdmFsdWUgb2YgZmFsc2VcIik7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYoIShlZGl0b3JFbGVtZW50IGluc3RhbmNlb2YgTm9kZSkpe1xuXHRcdFx0XHRcdGNvbnNvbGUud2FybihcIkZpbHRlciBFcnJvciAtIENhbm5vdCBhZGQgZmlsdGVyIHRvIFwiICsgZmllbGQgKyBcIiBjb2x1bW4sIGVkaXRvciBzaG91bGQgcmV0dXJuIGFuIGluc3RhbmNlIG9mIE5vZGUsIHRoZSBlZGl0b3IgcmV0dXJuZWQ6XCIsIGVkaXRvckVsZW1lbnQpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vc2V0IFBsYWNlaG9sZGVyIFRleHRcblx0XHRcdFx0c2VsZi5sYW5nQmluZChcImhlYWRlckZpbHRlcnN8Y29sdW1uc3xcIiArIGNvbHVtbi5kZWZpbml0aW9uLmZpZWxkLCBmdW5jdGlvbih2YWx1ZSl7XG5cdFx0XHRcdFx0ZWRpdG9yRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJwbGFjZWhvbGRlclwiLCB0eXBlb2YgdmFsdWUgIT09IFwidW5kZWZpbmVkXCIgJiYgdmFsdWUgPyB2YWx1ZSA6IChjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJGaWx0ZXJQbGFjZWhvbGRlciB8fCBzZWxmLmxhbmdUZXh0KFwiaGVhZGVyRmlsdGVyc3xkZWZhdWx0XCIpKSk7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdC8vZm9jdXMgb24gZWxlbWVudCBvbiBjbGlja1xuXHRcdFx0XHRlZGl0b3JFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbihlKXtcblx0XHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdGVkaXRvckVsZW1lbnQuZm9jdXMoKTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0ZWRpdG9yRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgKGUpID0+IHtcblx0XHRcdFx0XHR2YXIgbGVmdCA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5jb250ZW50c0VsZW1lbnQuc2Nyb2xsTGVmdDtcblxuXHRcdFx0XHRcdHZhciBoZWFkZXJQb3MgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5zY3JvbGxMZWZ0O1xuXG5cdFx0XHRcdFx0aWYobGVmdCAhPT0gaGVhZGVyUG9zKXtcblx0XHRcdFx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5zY3JvbGxIb3Jpem9udGFsKGxlZnQpO1xuXHRcdFx0XHRcdFx0dGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLnNjcm9sbEhvcml6b250YWwobGVmdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHQvL2xpdmUgdXBkYXRlIGZpbHRlcnMgYXMgdXNlciB0eXBlc1xuXHRcdFx0XHR0eXBpbmdUaW1lciA9IGZhbHNlO1xuXG5cdFx0XHRcdHNlYXJjaFRyaWdnZXIgPSBmdW5jdGlvbihlKXtcblx0XHRcdFx0XHRpZih0eXBpbmdUaW1lcil7XG5cdFx0XHRcdFx0XHRjbGVhclRpbWVvdXQodHlwaW5nVGltZXIpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHR5cGluZ1RpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0c3VjY2VzcyhlZGl0b3JFbGVtZW50LnZhbHVlKTtcblx0XHRcdFx0XHR9LHNlbGYudGFibGUub3B0aW9ucy5oZWFkZXJGaWx0ZXJMaXZlRmlsdGVyRGVsYXkpO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGNvbHVtbi5tb2R1bGVzLmZpbHRlci5oZWFkZXJFbGVtZW50ID0gZWRpdG9yRWxlbWVudDtcblx0XHRcdFx0Y29sdW1uLm1vZHVsZXMuZmlsdGVyLmF0dHJUeXBlID0gZWRpdG9yRWxlbWVudC5oYXNBdHRyaWJ1dGUoXCJ0eXBlXCIpID8gZWRpdG9yRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpLnRvTG93ZXJDYXNlKCkgOiBcIlwiIDtcblx0XHRcdFx0Y29sdW1uLm1vZHVsZXMuZmlsdGVyLnRhZ1R5cGUgPSBlZGl0b3JFbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0XHRpZihjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJGaWx0ZXJMaXZlRmlsdGVyICE9PSBmYWxzZSl7XG5cblx0XHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0XHQhKFxuXHRcdFx0XHRcdFx0XHRjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJGaWx0ZXIgPT09ICdhdXRvY29tcGxldGUnIHx8XG5cdFx0XHRcdFx0XHRcdGNvbHVtbi5kZWZpbml0aW9uLmhlYWRlckZpbHRlciA9PT0gJ3RpY2tDcm9zcycgfHxcblx0XHRcdFx0XHRcdFx0KChjb2x1bW4uZGVmaW5pdGlvbi5lZGl0b3IgPT09ICdhdXRvY29tcGxldGUnIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29sdW1uLmRlZmluaXRpb24uZWRpdG9yID09PSAndGlja0Nyb3NzJykgJiZcblx0XHRcdFx0XHRcdFx0Y29sdW1uLmRlZmluaXRpb24uaGVhZGVyRmlsdGVyID09PSB0cnVlKVxuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0ZWRpdG9yRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgc2VhcmNoVHJpZ2dlcik7XG5cdFx0XHRcdFx0XHRlZGl0b3JFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzZWFyY2hcIiwgc2VhcmNoVHJpZ2dlcik7XG5cblxuXHRcdFx0XHRcdFx0Ly91cGRhdGUgbnVtYmVyIGZpbHRlcmVkIGNvbHVtbnMgb24gY2hhbmdlXG5cdFx0XHRcdFx0XHRpZihjb2x1bW4ubW9kdWxlcy5maWx0ZXIuYXR0clR5cGUgPT0gXCJudW1iZXJcIil7XG5cdFx0XHRcdFx0XHRcdGVkaXRvckVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBmdW5jdGlvbihlKXtcblx0XHRcdFx0XHRcdFx0XHRzdWNjZXNzKGVkaXRvckVsZW1lbnQudmFsdWUpO1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly9jaGFuZ2UgdGV4dCBpbnB1dHMgdG8gc2VhcmNoIGlucHV0cyB0byBhbGxvdyBmb3IgY2xlYXJpbmcgb2YgZmllbGRcblx0XHRcdFx0XHRcdGlmKGNvbHVtbi5tb2R1bGVzLmZpbHRlci5hdHRyVHlwZSA9PSBcInRleHRcIiAmJiB0aGlzLnRhYmxlLmJyb3dzZXIgIT09IFwiaWVcIil7XG5cdFx0XHRcdFx0XHRcdGVkaXRvckVsZW1lbnQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInNlYXJjaFwiKTtcblx0XHRcdFx0XHRcdC8vIGVkaXRvckVsZW1lbnQub2ZmKFwiY2hhbmdlIGJsdXJcIik7IC8vcHJldmVudCBibHVyIGZyb20gdHJpZ2dlcmluZyBmaWx0ZXIgYW5kIHByZXZlbnRpbmcgc2VsZWN0aW9uIGNsaWNrXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvL3ByZXZlbnQgaW5wdXQgYW5kIHNlbGVjdCBlbGVtZW50cyBmcm9tIHByb3BhZ2F0aW5nIGNsaWNrIHRvIGNvbHVtbiBzb3J0ZXJzIGV0Y1xuXHRcdFx0XHRcdGlmKGNvbHVtbi5tb2R1bGVzLmZpbHRlci50YWdUeXBlID09IFwiaW5wdXRcIiB8fCBjb2x1bW4ubW9kdWxlcy5maWx0ZXIudGFnVHlwZSA9PSBcInNlbGVjdFwiIHx8IGNvbHVtbi5tb2R1bGVzLmZpbHRlci50YWdUeXBlID09IFwidGV4dGFyZWFcIil7XG5cdFx0XHRcdFx0XHRlZGl0b3JFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIixmdW5jdGlvbihlKXtcblx0XHRcdFx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZpbHRlckVsZW1lbnQuYXBwZW5kQ2hpbGQoZWRpdG9yRWxlbWVudCk7XG5cblx0XHRcdFx0Y29sdW1uLmNvbnRlbnRFbGVtZW50LmFwcGVuZENoaWxkKGZpbHRlckVsZW1lbnQpO1xuXG5cdFx0XHRcdGlmKCFyZWluaXRpYWxpemUpe1xuXHRcdFx0XHRcdHNlbGYuaGVhZGVyRmlsdGVyQ29sdW1ucy5wdXNoKGNvbHVtbik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZihvblJlbmRlcmVkQ2FsbGJhY2spe1xuXHRcdFx0XHRcdG9uUmVuZGVyZWRDYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiRmlsdGVyIEVycm9yIC0gQ2Fubm90IGFkZCBoZWFkZXIgZmlsdGVyLCBjb2x1bW4gaGFzIG5vIGZpZWxkIHNldDpcIiwgY29sdW1uLmRlZmluaXRpb24udGl0bGUpO1xuXHRcdH1cblx0fVxuXG5cdC8vaGlkZSBhbGwgaGVhZGVyIGZpbHRlciBlbGVtZW50cyAodXNlZCB0byBlbnN1cmUgY29ycmVjdCBjb2x1bW4gd2lkdGhzIGluIFwiZml0RGF0YVwiIGxheW91dCBtb2RlKVxuXHRoaWRlSGVhZGVyRmlsdGVyRWxlbWVudHMoKXtcblx0XHR0aGlzLmhlYWRlckZpbHRlckNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihjb2x1bW4pe1xuXHRcdFx0aWYoY29sdW1uLm1vZHVsZXMuZmlsdGVyICYmIGNvbHVtbi5tb2R1bGVzLmZpbHRlci5oZWFkZXJFbGVtZW50KXtcblx0XHRcdFx0Y29sdW1uLm1vZHVsZXMuZmlsdGVyLmhlYWRlckVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdC8vc2hvdyBhbGwgaGVhZGVyIGZpbHRlciBlbGVtZW50cyAodXNlZCB0byBlbnN1cmUgY29ycmVjdCBjb2x1bW4gd2lkdGhzIGluIFwiZml0RGF0YVwiIGxheW91dCBtb2RlKVxuXHRzaG93SGVhZGVyRmlsdGVyRWxlbWVudHMoKXtcblx0XHR0aGlzLmhlYWRlckZpbHRlckNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihjb2x1bW4pe1xuXHRcdFx0aWYoY29sdW1uLm1vZHVsZXMuZmlsdGVyICYmIGNvbHVtbi5tb2R1bGVzLmZpbHRlci5oZWFkZXJFbGVtZW50KXtcblx0XHRcdFx0Y29sdW1uLm1vZHVsZXMuZmlsdGVyLmhlYWRlckVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICcnO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0Ly9wcm9ncmFtbWF0aWNhbGx5IHNldCBmb2N1cyBvZiBoZWFkZXIgZmlsdGVyXG5cdHNldEhlYWRlckZpbHRlckZvY3VzKGNvbHVtbil7XG5cdFx0aWYoY29sdW1uLm1vZHVsZXMuZmlsdGVyICYmIGNvbHVtbi5tb2R1bGVzLmZpbHRlci5oZWFkZXJFbGVtZW50KXtcblx0XHRcdGNvbHVtbi5tb2R1bGVzLmZpbHRlci5oZWFkZXJFbGVtZW50LmZvY3VzKCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiQ29sdW1uIEZpbHRlciBGb2N1cyBFcnJvciAtIE5vIGhlYWRlciBmaWx0ZXIgc2V0IG9uIGNvbHVtbjpcIiwgY29sdW1uLmdldEZpZWxkKCkpO1xuXHRcdH1cblx0fVxuXG5cdC8vcHJvZ3JhbW1hdGljYWxseSBnZXQgdmFsdWUgb2YgaGVhZGVyIGZpbHRlclxuXHRnZXRIZWFkZXJGaWx0ZXJWYWx1ZShjb2x1bW4pe1xuXHRcdGlmKGNvbHVtbi5tb2R1bGVzLmZpbHRlciAmJiBjb2x1bW4ubW9kdWxlcy5maWx0ZXIuaGVhZGVyRWxlbWVudCl7XG5cdFx0XHRyZXR1cm4gY29sdW1uLm1vZHVsZXMuZmlsdGVyLnZhbHVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJDb2x1bW4gRmlsdGVyIEVycm9yIC0gTm8gaGVhZGVyIGZpbHRlciBzZXQgb24gY29sdW1uOlwiLCBjb2x1bW4uZ2V0RmllbGQoKSk7XG5cdFx0fVxuXHR9XG5cblx0Ly9wcm9ncmFtbWF0aWNhbGx5IHNldCB2YWx1ZSBvZiBoZWFkZXIgZmlsdGVyXG5cdHNldEhlYWRlckZpbHRlclZhbHVlKGNvbHVtbiwgdmFsdWUpe1xuXHRcdGlmIChjb2x1bW4pe1xuXHRcdFx0aWYoY29sdW1uLm1vZHVsZXMuZmlsdGVyICYmIGNvbHVtbi5tb2R1bGVzLmZpbHRlci5oZWFkZXJFbGVtZW50KXtcblx0XHRcdFx0dGhpcy5nZW5lcmF0ZUhlYWRlckZpbHRlckVsZW1lbnQoY29sdW1uLCB2YWx1ZSwgdHJ1ZSk7XG5cdFx0XHRcdGNvbHVtbi5tb2R1bGVzLmZpbHRlci5zdWNjZXNzKHZhbHVlKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiQ29sdW1uIEZpbHRlciBFcnJvciAtIE5vIGhlYWRlciBmaWx0ZXIgc2V0IG9uIGNvbHVtbjpcIiwgY29sdW1uLmdldEZpZWxkKCkpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJlbG9hZEhlYWRlckZpbHRlcihjb2x1bW4pe1xuXHRcdGlmIChjb2x1bW4pe1xuXHRcdFx0aWYoY29sdW1uLm1vZHVsZXMuZmlsdGVyICYmIGNvbHVtbi5tb2R1bGVzLmZpbHRlci5oZWFkZXJFbGVtZW50KXtcblx0XHRcdFx0dGhpcy5nZW5lcmF0ZUhlYWRlckZpbHRlckVsZW1lbnQoY29sdW1uLCBjb2x1bW4ubW9kdWxlcy5maWx0ZXIudmFsdWUsIHRydWUpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJDb2x1bW4gRmlsdGVyIEVycm9yIC0gTm8gaGVhZGVyIGZpbHRlciBzZXQgb24gY29sdW1uOlwiLCBjb2x1bW4uZ2V0RmllbGQoKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmVmcmVzaEZpbHRlcigpe1xuXHRcdGlmKHRoaXMudGFibGVJbml0aWFsaXplZCl7XG5cdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZmlsdGVyTW9kZSA9PT0gXCJyZW1vdGVcIil7XG5cdFx0XHRcdHRoaXMucmVsb2FkRGF0YShudWxsLCBmYWxzZSwgZmFsc2UpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLnJlZnJlc2hEYXRhKHRydWUpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vVE9ETyAtIFBlcnNpc3QgbGVmdCBwb3NpdGlvbiBvZiByb3cgbWFuYWdlclxuXHRcdC8vIGxlZnQgPSB0aGlzLnNjcm9sbExlZnQ7XG5cdFx0Ly8gdGhpcy5zY3JvbGxIb3Jpem9udGFsKGxlZnQpO1xuXHR9XG5cblx0Ly9jaGVjayBpZiB0aGUgZmlsdGVycyBoYXMgY2hhbmdlZCBzaW5jZSBsYXN0IHVzZVxuXHR0cmFja0NoYW5nZXMoKXtcblx0XHR0aGlzLmNoYW5nZWQgPSB0cnVlO1xuXHRcdHRoaXMuZGlzcGF0Y2goXCJmaWx0ZXItY2hhbmdlZFwiKTtcblx0fVxuXG5cdC8vY2hlY2sgaWYgdGhlIGZpbHRlcnMgaGFzIGNoYW5nZWQgc2luY2UgbGFzdCB1c2Vcblx0aGFzQ2hhbmdlZCgpe1xuXHRcdHZhciBjaGFuZ2VkID0gdGhpcy5jaGFuZ2VkO1xuXHRcdHRoaXMuY2hhbmdlZCA9IGZhbHNlO1xuXHRcdHJldHVybiBjaGFuZ2VkO1xuXHR9XG5cblx0Ly9zZXQgc3RhbmRhcmQgZmlsdGVyc1xuXHRzZXRGaWx0ZXIoZmllbGQsIHR5cGUsIHZhbHVlLCBwYXJhbXMpe1xuXHRcdHRoaXMuZmlsdGVyTGlzdCA9IFtdO1xuXG5cdFx0aWYoIUFycmF5LmlzQXJyYXkoZmllbGQpKXtcblx0XHRcdGZpZWxkID0gW3tmaWVsZDpmaWVsZCwgdHlwZTp0eXBlLCB2YWx1ZTp2YWx1ZSwgcGFyYW1zOnBhcmFtc31dO1xuXHRcdH1cblxuXHRcdHRoaXMuYWRkRmlsdGVyKGZpZWxkKTtcblx0fVxuXG5cdC8vYWRkIGZpbHRlciB0byBhcnJheVxuXHRhZGRGaWx0ZXIoZmllbGQsIHR5cGUsIHZhbHVlLCBwYXJhbXMpe1xuXHRcdHZhciBjaGFuZ2VkID0gZmFsc2U7XG5cblx0XHRpZighQXJyYXkuaXNBcnJheShmaWVsZCkpe1xuXHRcdFx0ZmllbGQgPSBbe2ZpZWxkOmZpZWxkLCB0eXBlOnR5cGUsIHZhbHVlOnZhbHVlLCBwYXJhbXM6cGFyYW1zfV07XG5cdFx0fVxuXG5cdFx0ZmllbGQuZm9yRWFjaCgoZmlsdGVyKSA9PiB7XG5cdFx0XHRmaWx0ZXIgPSB0aGlzLmZpbmRGaWx0ZXIoZmlsdGVyKTtcblxuXHRcdFx0aWYoZmlsdGVyKXtcblx0XHRcdFx0dGhpcy5maWx0ZXJMaXN0LnB1c2goZmlsdGVyKTtcblx0XHRcdFx0Y2hhbmdlZCA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRpZihjaGFuZ2VkKXtcblx0XHRcdHRoaXMudHJhY2tDaGFuZ2VzKCk7XG5cdFx0fVxuXHR9XG5cblx0ZmluZEZpbHRlcihmaWx0ZXIpe1xuXHRcdHZhciBjb2x1bW47XG5cblx0XHRpZihBcnJheS5pc0FycmF5KGZpbHRlcikpe1xuXHRcdFx0cmV0dXJuIHRoaXMuZmluZFN1YkZpbHRlcnMoZmlsdGVyKTtcblx0XHR9XG5cblx0XHR2YXIgZmlsdGVyRnVuYyA9IGZhbHNlO1xuXG5cdFx0aWYodHlwZW9mIGZpbHRlci5maWVsZCA9PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0ZmlsdGVyRnVuYyA9IGZ1bmN0aW9uKGRhdGEpe1xuXHRcdFx0XHRyZXR1cm4gZmlsdGVyLmZpZWxkKGRhdGEsIGZpbHRlci50eXBlIHx8IHt9KTsvLyBwYXNzIHBhcmFtcyB0byBjdXN0b20gZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHR9O1xuXHRcdH1lbHNlIHtcblxuXHRcdFx0aWYoRmlsdGVyLmZpbHRlcnNbZmlsdGVyLnR5cGVdKXtcblxuXHRcdFx0XHRjb2x1bW4gPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0Q29sdW1uQnlGaWVsZChmaWx0ZXIuZmllbGQpO1xuXG5cdFx0XHRcdGlmKGNvbHVtbil7XG5cdFx0XHRcdFx0ZmlsdGVyRnVuYyA9IGZ1bmN0aW9uKGRhdGEpe1xuXHRcdFx0XHRcdFx0cmV0dXJuIEZpbHRlci5maWx0ZXJzW2ZpbHRlci50eXBlXShmaWx0ZXIudmFsdWUsIGNvbHVtbi5nZXRGaWVsZFZhbHVlKGRhdGEpLCBkYXRhLCBmaWx0ZXIucGFyYW1zIHx8IHt9KTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0ZmlsdGVyRnVuYyA9IGZ1bmN0aW9uKGRhdGEpe1xuXHRcdFx0XHRcdFx0cmV0dXJuIEZpbHRlci5maWx0ZXJzW2ZpbHRlci50eXBlXShmaWx0ZXIudmFsdWUsIGRhdGFbZmlsdGVyLmZpZWxkXSwgZGF0YSwgZmlsdGVyLnBhcmFtcyB8fCB7fSk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiRmlsdGVyIEVycm9yIC0gTm8gc3VjaCBmaWx0ZXIgdHlwZSBmb3VuZCwgaWdub3Jpbmc6IFwiLCBmaWx0ZXIudHlwZSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0ZmlsdGVyLmZ1bmMgPSBmaWx0ZXJGdW5jO1xuXG5cdFx0cmV0dXJuIGZpbHRlci5mdW5jID8gZmlsdGVyIDogZmFsc2U7XG5cdH1cblxuXHRmaW5kU3ViRmlsdGVycyhmaWx0ZXJzKXtcblx0XHR2YXIgb3V0cHV0ID0gW107XG5cblx0XHRmaWx0ZXJzLmZvckVhY2goKGZpbHRlcikgPT4ge1xuXHRcdFx0ZmlsdGVyID0gdGhpcy5maW5kRmlsdGVyKGZpbHRlcik7XG5cblx0XHRcdGlmKGZpbHRlcil7XG5cdFx0XHRcdG91dHB1dC5wdXNoKGZpbHRlcik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gb3V0cHV0Lmxlbmd0aCA/IG91dHB1dCA6IGZhbHNlO1xuXHR9XG5cblx0Ly9nZXQgYWxsIGZpbHRlcnNcblx0Z2V0RmlsdGVycyhhbGwsIGFqYXgpe1xuXHRcdHZhciBvdXRwdXQgPSBbXTtcblxuXHRcdGlmKGFsbCl7XG5cdFx0XHRvdXRwdXQgPSB0aGlzLmdldEhlYWRlckZpbHRlcnMoKTtcblx0XHR9XG5cblx0XHRpZihhamF4KXtcblx0XHRcdG91dHB1dC5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pe1xuXHRcdFx0XHRpZih0eXBlb2YgaXRlbS50eXBlID09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRcdFx0aXRlbS50eXBlID0gXCJmdW5jdGlvblwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRvdXRwdXQgPSBvdXRwdXQuY29uY2F0KHRoaXMuZmlsdGVyc1RvQXJyYXkodGhpcy5maWx0ZXJMaXN0LCBhamF4KSk7XG5cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cblx0Ly9maWx0ZXIgdG8gT2JqZWN0XG5cdGZpbHRlcnNUb0FycmF5KGZpbHRlckxpc3QsIGFqYXgpe1xuXHRcdHZhciBvdXRwdXQgPSBbXTtcblxuXHRcdGZpbHRlckxpc3QuZm9yRWFjaCgoZmlsdGVyKSA9PiB7XG5cdFx0XHR2YXIgaXRlbTtcblxuXHRcdFx0aWYoQXJyYXkuaXNBcnJheShmaWx0ZXIpKXtcblx0XHRcdFx0b3V0cHV0LnB1c2godGhpcy5maWx0ZXJzVG9BcnJheShmaWx0ZXIsIGFqYXgpKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aXRlbSA9IHtmaWVsZDpmaWx0ZXIuZmllbGQsIHR5cGU6ZmlsdGVyLnR5cGUsIHZhbHVlOmZpbHRlci52YWx1ZX07XG5cblx0XHRcdFx0aWYoYWpheCl7XG5cdFx0XHRcdFx0aWYodHlwZW9mIGl0ZW0udHlwZSA9PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0XHRcdFx0aXRlbS50eXBlID0gXCJmdW5jdGlvblwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdG91dHB1dC5wdXNoKGl0ZW0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdC8vZ2V0IGFsbCBmaWx0ZXJzXG5cdGdldEhlYWRlckZpbHRlcnMoKXtcblx0XHR2YXIgb3V0cHV0ID0gW107XG5cblx0XHRmb3IodmFyIGtleSBpbiB0aGlzLmhlYWRlckZpbHRlcnMpe1xuXHRcdFx0b3V0cHV0LnB1c2goe2ZpZWxkOmtleSwgdHlwZTp0aGlzLmhlYWRlckZpbHRlcnNba2V5XS50eXBlLCB2YWx1ZTp0aGlzLmhlYWRlckZpbHRlcnNba2V5XS52YWx1ZX0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblxuXHQvL3JlbW92ZSBmaWx0ZXIgZnJvbSBhcnJheVxuXHRyZW1vdmVGaWx0ZXIoZmllbGQsIHR5cGUsIHZhbHVlKXtcblx0XHRpZighQXJyYXkuaXNBcnJheShmaWVsZCkpe1xuXHRcdFx0ZmllbGQgPSBbe2ZpZWxkOmZpZWxkLCB0eXBlOnR5cGUsIHZhbHVlOnZhbHVlfV07XG5cdFx0fVxuXG5cdFx0ZmllbGQuZm9yRWFjaCgoZmlsdGVyKSA9PiB7XG5cdFx0XHR2YXIgaW5kZXggPSAtMTtcblxuXHRcdFx0aWYodHlwZW9mIGZpbHRlci5maWVsZCA9PSBcIm9iamVjdFwiKXtcblx0XHRcdFx0aW5kZXggPSB0aGlzLmZpbHRlckxpc3QuZmluZEluZGV4KChlbGVtZW50KSA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuIGZpbHRlciA9PT0gZWxlbWVudDtcblx0XHRcdFx0fSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGluZGV4ID0gdGhpcy5maWx0ZXJMaXN0LmZpbmRJbmRleCgoZWxlbWVudCkgPT4ge1xuXHRcdFx0XHRcdHJldHVybiBmaWx0ZXIuZmllbGQgPT09IGVsZW1lbnQuZmllbGQgJiYgZmlsdGVyLnR5cGUgPT09IGVsZW1lbnQudHlwZSAgJiYgZmlsdGVyLnZhbHVlID09PSBlbGVtZW50LnZhbHVlO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0aWYoaW5kZXggPiAtMSl7XG5cdFx0XHRcdHRoaXMuZmlsdGVyTGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJGaWx0ZXIgRXJyb3IgLSBObyBtYXRjaGluZyBmaWx0ZXIgdHlwZSBmb3VuZCwgaWdub3Jpbmc6IFwiLCBmaWx0ZXIudHlwZSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHR0aGlzLnRyYWNrQ2hhbmdlcygpO1xuXHR9XG5cblx0Ly9jbGVhciBmaWx0ZXJzXG5cdGNsZWFyRmlsdGVyKGFsbCl7XG5cdFx0dGhpcy5maWx0ZXJMaXN0ID0gW107XG5cblx0XHRpZihhbGwpe1xuXHRcdFx0dGhpcy5jbGVhckhlYWRlckZpbHRlcigpO1xuXHRcdH1cblxuXHRcdHRoaXMudHJhY2tDaGFuZ2VzKCk7XG5cdH1cblxuXHQvL2NsZWFyIGhlYWRlciBmaWx0ZXJzXG5cdGNsZWFySGVhZGVyRmlsdGVyKCl7XG5cdFx0dGhpcy5oZWFkZXJGaWx0ZXJzID0ge307XG5cdFx0dGhpcy5wcmV2SGVhZGVyRmlsdGVyQ2hhbmdlQ2hlY2sgPSBcInt9XCI7XG5cblx0XHR0aGlzLmhlYWRlckZpbHRlckNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG5cdFx0XHRpZih0eXBlb2YgY29sdW1uLm1vZHVsZXMuZmlsdGVyLnZhbHVlICE9PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdFx0ZGVsZXRlIGNvbHVtbi5tb2R1bGVzLmZpbHRlci52YWx1ZTtcblx0XHRcdH1cblx0XHRcdGNvbHVtbi5tb2R1bGVzLmZpbHRlci5wcmV2U3VjY2VzcyA9IHVuZGVmaW5lZDtcblx0XHRcdHRoaXMucmVsb2FkSGVhZGVyRmlsdGVyKGNvbHVtbik7XG5cdFx0fSk7XG5cblx0XHR0aGlzLnRyYWNrQ2hhbmdlcygpO1xuXHR9XG5cblx0Ly9zZWFyY2ggZGF0YSBhbmQgcmV0dXJuIG1hdGNoaW5nIHJvd3Ncblx0c2VhcmNoIChzZWFyY2hUeXBlLCBmaWVsZCwgdHlwZSwgdmFsdWUpe1xuXHRcdHZhciBhY3RpdmVSb3dzID0gW10sXG5cdFx0ZmlsdGVyTGlzdCA9IFtdO1xuXG5cdFx0aWYoIUFycmF5LmlzQXJyYXkoZmllbGQpKXtcblx0XHRcdGZpZWxkID0gW3tmaWVsZDpmaWVsZCwgdHlwZTp0eXBlLCB2YWx1ZTp2YWx1ZX1dO1xuXHRcdH1cblxuXHRcdGZpZWxkLmZvckVhY2goKGZpbHRlcikgPT4ge1xuXHRcdFx0ZmlsdGVyID0gdGhpcy5maW5kRmlsdGVyKGZpbHRlcik7XG5cblx0XHRcdGlmKGZpbHRlcil7XG5cdFx0XHRcdGZpbHRlckxpc3QucHVzaChmaWx0ZXIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHR2YXIgbWF0Y2ggPSB0cnVlO1xuXG5cdFx0XHRmaWx0ZXJMaXN0LmZvckVhY2goKGZpbHRlcikgPT4ge1xuXHRcdFx0XHRpZighdGhpcy5maWx0ZXJSZWN1cnNlKGZpbHRlciwgcm93LmdldERhdGEoKSkpe1xuXHRcdFx0XHRcdG1hdGNoID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRpZihtYXRjaCl7XG5cdFx0XHRcdGFjdGl2ZVJvd3MucHVzaChzZWFyY2hUeXBlID09PSBcImRhdGFcIiA/IHJvdy5nZXREYXRhKFwiZGF0YVwiKSA6IHJvdy5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHR9XG5cblx0XHR9KTtcblxuXHRcdHJldHVybiBhY3RpdmVSb3dzO1xuXHR9XG5cblx0Ly9maWx0ZXIgcm93IGFycmF5XG5cdGZpbHRlcihyb3dMaXN0LCBmaWx0ZXJzKXtcblx0XHR2YXIgYWN0aXZlUm93cyA9IFtdLFxuXHRcdGFjdGl2ZVJvd0NvbXBvbmVudHMgPSBbXTtcblxuXHRcdGlmKHRoaXMuc3Vic2NyaWJlZEV4dGVybmFsKFwiZGF0YUZpbHRlcmluZ1wiKSl7XG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJkYXRhRmlsdGVyaW5nXCIsIHRoaXMuZ2V0RmlsdGVycyh0cnVlKSk7XG5cdFx0fVxuXG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmZpbHRlck1vZGUgIT09IFwicmVtb3RlXCIgJiYgKHRoaXMuZmlsdGVyTGlzdC5sZW5ndGggfHwgT2JqZWN0LmtleXModGhpcy5oZWFkZXJGaWx0ZXJzKS5sZW5ndGgpKXtcblxuXHRcdFx0cm93TGlzdC5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdFx0aWYodGhpcy5maWx0ZXJSb3cocm93KSl7XG5cdFx0XHRcdFx0YWN0aXZlUm93cy5wdXNoKHJvdyk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0fWVsc2Uge1xuXHRcdFx0YWN0aXZlUm93cyA9IHJvd0xpc3Quc2xpY2UoMCk7XG5cdFx0fVxuXG5cdFx0aWYodGhpcy5zdWJzY3JpYmVkRXh0ZXJuYWwoXCJkYXRhRmlsdGVyZWRcIikpe1xuXG5cdFx0XHRhY3RpdmVSb3dzLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0XHRhY3RpdmVSb3dDb21wb25lbnRzLnB1c2gocm93LmdldENvbXBvbmVudCgpKTtcblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJkYXRhRmlsdGVyZWRcIiwgdGhpcy5nZXRGaWx0ZXJzKHRydWUpLCBhY3RpdmVSb3dDb21wb25lbnRzKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWN0aXZlUm93cztcblx0fVxuXG5cdC8vZmlsdGVyIGluZGl2aWR1YWwgcm93XG5cdGZpbHRlclJvdyhyb3csIGZpbHRlcnMpe1xuXHRcdHZhciBtYXRjaCA9IHRydWUsXG5cdFx0ZGF0YSA9IHJvdy5nZXREYXRhKCk7XG5cblx0XHR0aGlzLmZpbHRlckxpc3QuZm9yRWFjaCgoZmlsdGVyKSA9PiB7XG5cdFx0XHRpZighdGhpcy5maWx0ZXJSZWN1cnNlKGZpbHRlciwgZGF0YSkpe1xuXHRcdFx0XHRtYXRjaCA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cblx0XHRmb3IodmFyIGZpZWxkIGluIHRoaXMuaGVhZGVyRmlsdGVycyl7XG5cdFx0XHRpZighdGhpcy5oZWFkZXJGaWx0ZXJzW2ZpZWxkXS5mdW5jKGRhdGEpKXtcblx0XHRcdFx0bWF0Y2ggPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2g7XG5cdH1cblxuXHRmaWx0ZXJSZWN1cnNlKGZpbHRlciwgZGF0YSl7XG5cdFx0dmFyIG1hdGNoID0gZmFsc2U7XG5cblx0XHRpZihBcnJheS5pc0FycmF5KGZpbHRlcikpe1xuXHRcdFx0ZmlsdGVyLmZvckVhY2goKHN1YkZpbHRlcikgPT4ge1xuXHRcdFx0XHRpZih0aGlzLmZpbHRlclJlY3Vyc2Uoc3ViRmlsdGVyLCBkYXRhKSl7XG5cdFx0XHRcdFx0bWF0Y2ggPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRtYXRjaCA9IGZpbHRlci5mdW5jKGRhdGEpO1xuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaDtcblx0fVxufVxuXG5GaWx0ZXIubW9kdWxlTmFtZSA9IFwiZmlsdGVyXCI7XG5cbi8vbG9hZCBkZWZhdWx0c1xuRmlsdGVyLmZpbHRlcnMgPSBkZWZhdWx0RmlsdGVycztcblxuZnVuY3Rpb24gcGxhaW50ZXh0KGNlbGwsIGZvcm1hdHRlclBhcmFtcywgb25SZW5kZXJlZCl7XG5cdHJldHVybiB0aGlzLmVtcHR5VG9TcGFjZSh0aGlzLnNhbml0aXplSFRNTChjZWxsLmdldFZhbHVlKCkpKTtcbn1cblxuZnVuY3Rpb24gaHRtbCQxKGNlbGwsIGZvcm1hdHRlclBhcmFtcywgb25SZW5kZXJlZCl7XG5cdHJldHVybiBjZWxsLmdldFZhbHVlKCk7XG59XG5cbmZ1bmN0aW9uIHRleHRhcmVhJDEoY2VsbCwgZm9ybWF0dGVyUGFyYW1zLCBvblJlbmRlcmVkKXtcblx0Y2VsbC5nZXRFbGVtZW50KCkuc3R5bGUud2hpdGVTcGFjZSA9IFwicHJlLXdyYXBcIjtcblx0cmV0dXJuIHRoaXMuZW1wdHlUb1NwYWNlKHRoaXMuc2FuaXRpemVIVE1MKGNlbGwuZ2V0VmFsdWUoKSkpO1xufVxuXG5mdW5jdGlvbiBtb25leShjZWxsLCBmb3JtYXR0ZXJQYXJhbXMsIG9uUmVuZGVyZWQpe1xuXHR2YXIgZmxvYXRWYWwgPSBwYXJzZUZsb2F0KGNlbGwuZ2V0VmFsdWUoKSksXG5cdHNpZ24gPSBcIlwiLFxuXHRudW1iZXIsIGludGVnZXIsIGRlY2ltYWwsIHJneCwgdmFsdWU7XG5cblx0dmFyIGRlY2ltYWxTeW0gPSBmb3JtYXR0ZXJQYXJhbXMuZGVjaW1hbCB8fCBcIi5cIjtcblx0dmFyIHRob3VzYW5kU3ltID0gZm9ybWF0dGVyUGFyYW1zLnRob3VzYW5kIHx8IFwiLFwiO1xuXHR2YXIgbmVnYXRpdmVTaWduID0gZm9ybWF0dGVyUGFyYW1zLm5lZ2F0aXZlU2lnbiB8fCBcIi1cIjtcblx0dmFyIHN5bWJvbCA9IGZvcm1hdHRlclBhcmFtcy5zeW1ib2wgfHwgXCJcIjtcblx0dmFyIGFmdGVyID0gISFmb3JtYXR0ZXJQYXJhbXMuc3ltYm9sQWZ0ZXI7XG5cdHZhciBwcmVjaXNpb24gPSB0eXBlb2YgZm9ybWF0dGVyUGFyYW1zLnByZWNpc2lvbiAhPT0gXCJ1bmRlZmluZWRcIiA/IGZvcm1hdHRlclBhcmFtcy5wcmVjaXNpb24gOiAyO1xuXG5cdGlmKGlzTmFOKGZsb2F0VmFsKSl7XG5cdFx0cmV0dXJuIHRoaXMuZW1wdHlUb1NwYWNlKHRoaXMuc2FuaXRpemVIVE1MKGNlbGwuZ2V0VmFsdWUoKSkpO1xuXHR9XG5cblx0aWYoZmxvYXRWYWwgPCAwKXtcblx0XHRmbG9hdFZhbCA9IE1hdGguYWJzKGZsb2F0VmFsKTtcblx0XHRzaWduID0gbmVnYXRpdmVTaWduO1xuXHR9XG5cblx0bnVtYmVyID0gcHJlY2lzaW9uICE9PSBmYWxzZSA/IGZsb2F0VmFsLnRvRml4ZWQocHJlY2lzaW9uKSA6IGZsb2F0VmFsO1xuXHRudW1iZXIgPSBTdHJpbmcobnVtYmVyKS5zcGxpdChcIi5cIik7XG5cblx0aW50ZWdlciA9IG51bWJlclswXTtcblx0ZGVjaW1hbCA9IG51bWJlci5sZW5ndGggPiAxID8gZGVjaW1hbFN5bSArIG51bWJlclsxXSA6IFwiXCI7XG5cblx0aWYgKGZvcm1hdHRlclBhcmFtcy50aG91c2FuZCAhPT0gZmFsc2UpIHtcblx0XHRyZ3ggPSAvKFxcZCspKFxcZHszfSkvO1xuXG5cdFx0d2hpbGUgKHJneC50ZXN0KGludGVnZXIpKXtcblx0XHRcdGludGVnZXIgPSBpbnRlZ2VyLnJlcGxhY2Uocmd4LCBcIiQxXCIgKyB0aG91c2FuZFN5bSArIFwiJDJcIik7XG5cdFx0fVxuXHR9XG5cblx0dmFsdWUgPSBpbnRlZ2VyICsgZGVjaW1hbDtcblx0XG5cdGlmKHNpZ24gPT09IHRydWUpe1xuXHRcdHZhbHVlID0gXCIoXCIgKyB2YWx1ZSAgKyBcIilcIjtcblx0XHRyZXR1cm4gYWZ0ZXIgPyB2YWx1ZSArIHN5bWJvbCA6IHN5bWJvbCArIHZhbHVlO1xuXHR9ZWxzZSB7XG5cdFx0cmV0dXJuIGFmdGVyID8gc2lnbiArIHZhbHVlICsgc3ltYm9sIDogc2lnbiArIHN5bWJvbCArIHZhbHVlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGxpbmsoY2VsbCwgZm9ybWF0dGVyUGFyYW1zLCBvblJlbmRlcmVkKXtcblx0dmFyIHZhbHVlID0gY2VsbC5nZXRWYWx1ZSgpLFxuXHR1cmxQcmVmaXggPSBmb3JtYXR0ZXJQYXJhbXMudXJsUHJlZml4IHx8IFwiXCIsXG5cdGRvd25sb2FkID0gZm9ybWF0dGVyUGFyYW1zLmRvd25sb2FkLFxuXHRsYWJlbCA9IHZhbHVlLFxuXHRlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpLFxuXHRkYXRhO1xuXG5cdGZ1bmN0aW9uIGxhYmVsVHJhdmVyc2UocGF0aCwgZGF0YSl7XG5cdFx0dmFyIGl0ZW0gPSBwYXRoLnNoaWZ0KCksXG5cdFx0dmFsdWUgPSBkYXRhW2l0ZW1dO1xuXHRcdFxuXHRcdGlmKHBhdGgubGVuZ3RoICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIil7XG5cdFx0XHRyZXR1cm4gbGFiZWxUcmF2ZXJzZShwYXRoLCB2YWx1ZSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cblx0aWYoZm9ybWF0dGVyUGFyYW1zLmxhYmVsRmllbGQpe1xuXHRcdGRhdGEgPSBjZWxsLmdldERhdGEoKTtcblx0XHRsYWJlbCA9IGxhYmVsVHJhdmVyc2UoZm9ybWF0dGVyUGFyYW1zLmxhYmVsRmllbGQuc3BsaXQodGhpcy50YWJsZS5vcHRpb25zLm5lc3RlZEZpZWxkU2VwYXJhdG9yKSwgZGF0YSk7XG5cdH1cblxuXHRpZihmb3JtYXR0ZXJQYXJhbXMubGFiZWwpe1xuXHRcdHN3aXRjaCh0eXBlb2YgZm9ybWF0dGVyUGFyYW1zLmxhYmVsKXtcblx0XHRcdGNhc2UgXCJzdHJpbmdcIjpcblx0XHRcdFx0bGFiZWwgPSBmb3JtYXR0ZXJQYXJhbXMubGFiZWw7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwiZnVuY3Rpb25cIjpcblx0XHRcdFx0bGFiZWwgPSBmb3JtYXR0ZXJQYXJhbXMubGFiZWwoY2VsbCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdGlmKGxhYmVsKXtcblx0XHRpZihmb3JtYXR0ZXJQYXJhbXMudXJsRmllbGQpe1xuXHRcdFx0ZGF0YSA9IGNlbGwuZ2V0RGF0YSgpO1xuXHRcdFx0dmFsdWUgPSBkYXRhW2Zvcm1hdHRlclBhcmFtcy51cmxGaWVsZF07XG5cdFx0fVxuXG5cdFx0aWYoZm9ybWF0dGVyUGFyYW1zLnVybCl7XG5cdFx0XHRzd2l0Y2godHlwZW9mIGZvcm1hdHRlclBhcmFtcy51cmwpe1xuXHRcdFx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRcdFx0dmFsdWUgPSBmb3JtYXR0ZXJQYXJhbXMudXJsO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgXCJmdW5jdGlvblwiOlxuXHRcdFx0XHRcdHZhbHVlID0gZm9ybWF0dGVyUGFyYW1zLnVybChjZWxsKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cblx0XHRlbC5zZXRBdHRyaWJ1dGUoXCJocmVmXCIsIHVybFByZWZpeCArIHZhbHVlKTtcblxuXHRcdGlmKGZvcm1hdHRlclBhcmFtcy50YXJnZXQpe1xuXHRcdFx0ZWwuc2V0QXR0cmlidXRlKFwidGFyZ2V0XCIsIGZvcm1hdHRlclBhcmFtcy50YXJnZXQpO1xuXHRcdH1cblxuXHRcdGlmKGZvcm1hdHRlclBhcmFtcy5kb3dubG9hZCl7XG5cblx0XHRcdGlmKHR5cGVvZiBkb3dubG9hZCA9PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0XHRkb3dubG9hZCA9IGRvd25sb2FkKGNlbGwpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRkb3dubG9hZCA9IGRvd25sb2FkID09PSB0cnVlID8gXCJcIiA6IGRvd25sb2FkO1xuXHRcdFx0fVxuXG5cdFx0XHRlbC5zZXRBdHRyaWJ1dGUoXCJkb3dubG9hZFwiLCBkb3dubG9hZCk7XG5cdFx0fVxuXG5cdFx0ZWwuaW5uZXJIVE1MID0gdGhpcy5lbXB0eVRvU3BhY2UodGhpcy5zYW5pdGl6ZUhUTUwobGFiZWwpKTtcblxuXHRcdHJldHVybiBlbDtcblx0fWVsc2Uge1xuXHRcdHJldHVybiBcIiZuYnNwO1wiO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGltYWdlKGNlbGwsIGZvcm1hdHRlclBhcmFtcywgb25SZW5kZXJlZCl7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIiksXG5cdHNyYyA9IGNlbGwuZ2V0VmFsdWUoKTtcblxuXHRpZihmb3JtYXR0ZXJQYXJhbXMudXJsUHJlZml4KXtcblx0XHRzcmMgPSBmb3JtYXR0ZXJQYXJhbXMudXJsUHJlZml4ICsgY2VsbC5nZXRWYWx1ZSgpO1xuXHR9XG5cblx0aWYoZm9ybWF0dGVyUGFyYW1zLnVybFN1ZmZpeCl7XG5cdFx0c3JjID0gc3JjICsgZm9ybWF0dGVyUGFyYW1zLnVybFN1ZmZpeDtcblx0fVxuXG5cdGVsLnNldEF0dHJpYnV0ZShcInNyY1wiLCBzcmMpO1xuXG5cdHN3aXRjaCh0eXBlb2YgZm9ybWF0dGVyUGFyYW1zLmhlaWdodCl7XG5cdFx0Y2FzZSBcIm51bWJlclwiOlxuXHRcdFx0ZWwuc3R5bGUuaGVpZ2h0ID0gZm9ybWF0dGVyUGFyYW1zLmhlaWdodCArIFwicHhcIjtcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0ZWwuc3R5bGUuaGVpZ2h0ID0gZm9ybWF0dGVyUGFyYW1zLmhlaWdodDtcblx0XHRcdGJyZWFrO1xuXHR9XG5cblx0c3dpdGNoKHR5cGVvZiBmb3JtYXR0ZXJQYXJhbXMud2lkdGgpe1xuXHRcdGNhc2UgXCJudW1iZXJcIjpcblx0XHRcdGVsLnN0eWxlLndpZHRoID0gZm9ybWF0dGVyUGFyYW1zLndpZHRoICsgXCJweFwiO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRlbC5zdHlsZS53aWR0aCA9IGZvcm1hdHRlclBhcmFtcy53aWR0aDtcblx0XHRcdGJyZWFrO1xuXHR9XG5cblx0ZWwuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZnVuY3Rpb24oKXtcblx0XHRjZWxsLmdldFJvdygpLm5vcm1hbGl6ZUhlaWdodCgpO1xuXHR9KTtcblxuXHRyZXR1cm4gZWw7XG59XG5cbmZ1bmN0aW9uIHRpY2tDcm9zcyQxKGNlbGwsIGZvcm1hdHRlclBhcmFtcywgb25SZW5kZXJlZCl7XG5cdHZhciB2YWx1ZSA9IGNlbGwuZ2V0VmFsdWUoKSxcblx0ZWxlbWVudCA9IGNlbGwuZ2V0RWxlbWVudCgpLFxuXHRlbXB0eSA9IGZvcm1hdHRlclBhcmFtcy5hbGxvd0VtcHR5LFxuXHR0cnV0aHkgPSBmb3JtYXR0ZXJQYXJhbXMuYWxsb3dUcnV0aHksXG5cdHRydWVWYWx1ZVNldCA9IE9iamVjdC5rZXlzKGZvcm1hdHRlclBhcmFtcykuaW5jbHVkZXMoXCJ0cnVlVmFsdWVcIiksXG5cdHRpY2sgPSB0eXBlb2YgZm9ybWF0dGVyUGFyYW1zLnRpY2tFbGVtZW50ICE9PSBcInVuZGVmaW5lZFwiID8gZm9ybWF0dGVyUGFyYW1zLnRpY2tFbGVtZW50IDogJzxzdmcgZW5hYmxlLWJhY2tncm91bmQ9XCJuZXcgMCAwIDI0IDI0XCIgaGVpZ2h0PVwiMTRcIiB3aWR0aD1cIjE0XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIHhtbDpzcGFjZT1cInByZXNlcnZlXCIgPjxwYXRoIGZpbGw9XCIjMkRDMjE0XCIgY2xpcC1ydWxlPVwiZXZlbm9kZFwiIGQ9XCJNMjEuNjUyLDMuMjExYy0wLjI5My0wLjI5NS0wLjc3LTAuMjk1LTEuMDYxLDBMOS40MSwxNC4zNCAgYy0wLjI5MywwLjI5Ny0wLjc3MSwwLjI5Ny0xLjA2MiwwTDMuNDQ5LDkuMzUxQzMuMzA0LDkuMjAzLDMuMTE0LDkuMTMsMi45MjMsOS4xMjlDMi43Myw5LjEyOCwyLjUzNCw5LjIwMSwyLjM4Nyw5LjM1MSAgbC0yLjE2NSwxLjk0NkMwLjA3OCwxMS40NDUsMCwxMS42MywwLDExLjgyM2MwLDAuMTk0LDAuMDc4LDAuMzk3LDAuMjIzLDAuNTQ0bDQuOTQsNS4xODRjMC4yOTIsMC4yOTYsMC43NzEsMC43NzYsMS4wNjIsMS4wNyAgbDIuMTI0LDIuMTQxYzAuMjkyLDAuMjkzLDAuNzY5LDAuMjkzLDEuMDYyLDBsMTQuMzY2LTE0LjM0YzAuMjkzLTAuMjk0LDAuMjkzLTAuNzc3LDAtMS4wNzFMMjEuNjUyLDMuMjExelwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIi8+PC9zdmc+Jyxcblx0Y3Jvc3MgPSB0eXBlb2YgZm9ybWF0dGVyUGFyYW1zLmNyb3NzRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIiA/IGZvcm1hdHRlclBhcmFtcy5jcm9zc0VsZW1lbnQgOiAnPHN2ZyBlbmFibGUtYmFja2dyb3VuZD1cIm5ldyAwIDAgMjQgMjRcIiBoZWlnaHQ9XCIxNFwiIHdpZHRoPVwiMTRcIiAgdmlld0JveD1cIjAgMCAyNCAyNFwiIHhtbDpzcGFjZT1cInByZXNlcnZlXCIgPjxwYXRoIGZpbGw9XCIjQ0UxNTE1XCIgZD1cIk0yMi4yNDUsNC4wMTVjMC4zMTMsMC4zMTMsMC4zMTMsMC44MjYsMCwxLjEzOWwtNi4yNzYsNi4yN2MtMC4zMTMsMC4zMTItMC4zMTMsMC44MjYsMCwxLjE0bDYuMjczLDYuMjcyICBjMC4zMTMsMC4zMTMsMC4zMTMsMC44MjYsMCwxLjE0bC0yLjI4NSwyLjI3N2MtMC4zMTQsMC4zMTItMC44MjgsMC4zMTItMS4xNDIsMGwtNi4yNzEtNi4yNzFjLTAuMzEzLTAuMzEzLTAuODI4LTAuMzEzLTEuMTQxLDAgIGwtNi4yNzYsNi4yNjdjLTAuMzEzLDAuMzEzLTAuODI4LDAuMzEzLTEuMTQxLDBsLTIuMjgyLTIuMjhjLTAuMzEzLTAuMzEzLTAuMzEzLTAuODI2LDAtMS4xNGw2LjI3OC02LjI2OSAgYzAuMzEzLTAuMzEyLDAuMzEzLTAuODI2LDAtMS4xNEwxLjcwOSw1LjE0N2MtMC4zMTQtMC4zMTMtMC4zMTQtMC44MjcsMC0xLjE0bDIuMjg0LTIuMjc4QzQuMzA4LDEuNDE3LDQuODIxLDEuNDE3LDUuMTM1LDEuNzMgIEwxMS40MDUsOGMwLjMxNCwwLjMxNCwwLjgyOCwwLjMxNCwxLjE0MSwwLjAwMWw2LjI3Ni02LjI2N2MwLjMxMi0wLjMxMiwwLjgyNi0wLjMxMiwxLjE0MSwwTDIyLjI0NSw0LjAxNXpcIi8+PC9zdmc+JztcblxuXHRpZigodHJ1ZVZhbHVlU2V0ICYmIHZhbHVlID09PSBmb3JtYXR0ZXJQYXJhbXMudHJ1ZVZhbHVlKSB8fCAoIXRydWVWYWx1ZVNldCAmJiAoKHRydXRoeSAmJiB2YWx1ZSkgfHwgKHZhbHVlID09PSB0cnVlIHx8IHZhbHVlID09PSBcInRydWVcIiB8fCB2YWx1ZSA9PT0gXCJUcnVlXCIgfHwgdmFsdWUgPT09IDEgfHwgdmFsdWUgPT09IFwiMVwiKSkpKXtcblx0XHRlbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtY2hlY2tlZFwiLCB0cnVlKTtcblx0XHRyZXR1cm4gdGljayB8fCBcIlwiO1xuXHR9ZWxzZSB7XG5cdFx0aWYoZW1wdHkgJiYgKHZhbHVlID09PSBcIm51bGxcIiB8fCB2YWx1ZSA9PT0gXCJcIiB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIpKXtcblx0XHRcdGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1jaGVja2VkXCIsIFwibWl4ZWRcIik7XG5cdFx0XHRyZXR1cm4gXCJcIjtcblx0XHR9ZWxzZSB7XG5cdFx0XHRlbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtY2hlY2tlZFwiLCBmYWxzZSk7XG5cdFx0XHRyZXR1cm4gY3Jvc3MgfHwgXCJcIjtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZGF0ZXRpbWUkMShjZWxsLCBmb3JtYXR0ZXJQYXJhbXMsIG9uUmVuZGVyZWQpe1xuXHR2YXIgRFQgPSB3aW5kb3cuRGF0ZVRpbWUgfHwgbHV4b24uRGF0ZVRpbWU7XG5cdHZhciBpbnB1dEZvcm1hdCA9IGZvcm1hdHRlclBhcmFtcy5pbnB1dEZvcm1hdCB8fCBcInl5eXktTU0tZGQgSEg6bW06c3NcIjtcblx0dmFyXHRvdXRwdXRGb3JtYXQgPSBmb3JtYXR0ZXJQYXJhbXMub3V0cHV0Rm9ybWF0IHx8IFwiZGQvTU0veXl5eSBISDptbTpzc1wiO1xuXHR2YXJcdGludmFsaWQgPSB0eXBlb2YgZm9ybWF0dGVyUGFyYW1zLmludmFsaWRQbGFjZWhvbGRlciAhPT0gXCJ1bmRlZmluZWRcIiA/IGZvcm1hdHRlclBhcmFtcy5pbnZhbGlkUGxhY2Vob2xkZXIgOiBcIlwiO1xuXHR2YXIgdmFsdWUgPSBjZWxsLmdldFZhbHVlKCk7XG5cblx0aWYodHlwZW9mIERUICE9IFwidW5kZWZpbmVkXCIpe1xuXHRcdHZhciBuZXdEYXRldGltZTtcblxuXHRcdGlmKERULmlzRGF0ZVRpbWUodmFsdWUpKXtcblx0XHRcdG5ld0RhdGV0aW1lID0gdmFsdWU7XG5cdFx0fWVsc2UgaWYoaW5wdXRGb3JtYXQgPT09IFwiaXNvXCIpe1xuXHRcdFx0bmV3RGF0ZXRpbWUgPSBEVC5mcm9tSVNPKFN0cmluZyh2YWx1ZSkpO1xuXHRcdH1lbHNlIHtcblx0XHRcdG5ld0RhdGV0aW1lID0gRFQuZnJvbUZvcm1hdChTdHJpbmcodmFsdWUpLCBpbnB1dEZvcm1hdCk7XG5cdFx0fVxuXG5cdFx0aWYobmV3RGF0ZXRpbWUuaXNWYWxpZCl7XG5cdFx0XHRpZihmb3JtYXR0ZXJQYXJhbXMudGltZXpvbmUpe1xuXHRcdFx0XHRuZXdEYXRldGltZSA9IG5ld0RhdGV0aW1lLnNldFpvbmUoZm9ybWF0dGVyUGFyYW1zLnRpbWV6b25lKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG5ld0RhdGV0aW1lLnRvRm9ybWF0KG91dHB1dEZvcm1hdCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYoaW52YWxpZCA9PT0gdHJ1ZSB8fCAhdmFsdWUpe1xuXHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHR9ZWxzZSBpZih0eXBlb2YgaW52YWxpZCA9PT0gXCJmdW5jdGlvblwiKXtcblx0XHRcdFx0cmV0dXJuIGludmFsaWQodmFsdWUpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gaW52YWxpZDtcblx0XHRcdH1cblx0XHR9XG5cdH1lbHNlIHtcblx0XHRjb25zb2xlLmVycm9yKFwiRm9ybWF0IEVycm9yIC0gJ2RhdGV0aW1lJyBmb3JtYXR0ZXIgaXMgZGVwZW5kYW50IG9uIGx1eG9uLmpzXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRhdGV0aW1lZGlmZiAoY2VsbCwgZm9ybWF0dGVyUGFyYW1zLCBvblJlbmRlcmVkKSB7XG5cdHZhciBEVCA9IHdpbmRvdy5EYXRlVGltZSB8fCBsdXhvbi5EYXRlVGltZTtcblx0dmFyIGlucHV0Rm9ybWF0ID0gZm9ybWF0dGVyUGFyYW1zLmlucHV0Rm9ybWF0IHx8IFwieXl5eS1NTS1kZCBISDptbTpzc1wiO1xuXHR2YXIgaW52YWxpZCA9IHR5cGVvZiBmb3JtYXR0ZXJQYXJhbXMuaW52YWxpZFBsYWNlaG9sZGVyICE9PSBcInVuZGVmaW5lZFwiID8gZm9ybWF0dGVyUGFyYW1zLmludmFsaWRQbGFjZWhvbGRlciA6IFwiXCI7XG5cdHZhciBzdWZmaXggPSB0eXBlb2YgZm9ybWF0dGVyUGFyYW1zLnN1ZmZpeCAhPT0gXCJ1bmRlZmluZWRcIiA/IGZvcm1hdHRlclBhcmFtcy5zdWZmaXggOiBmYWxzZTtcblx0dmFyIHVuaXQgPSB0eXBlb2YgZm9ybWF0dGVyUGFyYW1zLnVuaXQgIT09IFwidW5kZWZpbmVkXCIgPyBmb3JtYXR0ZXJQYXJhbXMudW5pdCA6IFwiZGF5c1wiO1xuXHR2YXIgaHVtYW5pemUgPSB0eXBlb2YgZm9ybWF0dGVyUGFyYW1zLmh1bWFuaXplICE9PSBcInVuZGVmaW5lZFwiID8gZm9ybWF0dGVyUGFyYW1zLmh1bWFuaXplIDogZmFsc2U7XG5cdHZhciBkYXRlID0gdHlwZW9mIGZvcm1hdHRlclBhcmFtcy5kYXRlICE9PSBcInVuZGVmaW5lZFwiID8gZm9ybWF0dGVyUGFyYW1zLmRhdGUgOiBEVC5ub3coKTtcblx0dmFyIHZhbHVlID0gY2VsbC5nZXRWYWx1ZSgpO1xuXG5cdGlmKHR5cGVvZiBEVCAhPSBcInVuZGVmaW5lZFwiKXtcblx0XHR2YXIgbmV3RGF0ZXRpbWU7XG5cblx0XHRpZihEVC5pc0RhdGVUaW1lKHZhbHVlKSl7XG5cdFx0XHRuZXdEYXRldGltZSA9IHZhbHVlO1xuXHRcdH1lbHNlIGlmKGlucHV0Rm9ybWF0ID09PSBcImlzb1wiKXtcblx0XHRcdG5ld0RhdGV0aW1lID0gRFQuZnJvbUlTTyhTdHJpbmcodmFsdWUpKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRuZXdEYXRldGltZSA9IERULmZyb21Gb3JtYXQoU3RyaW5nKHZhbHVlKSwgaW5wdXRGb3JtYXQpO1xuXHRcdH1cblxuXHRcdGlmIChuZXdEYXRldGltZS5pc1ZhbGlkKXtcblx0XHRcdGlmKGh1bWFuaXplKXtcblx0XHRcdFx0cmV0dXJuIG5ld0RhdGV0aW1lLmRpZmYoZGF0ZSwgdW5pdCkudG9IdW1hbigpICArIChzdWZmaXggPyBcIiBcIiArIHN1ZmZpeCA6IFwiXCIpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQobmV3RGF0ZXRpbWUuZGlmZihkYXRlLCB1bml0KVt1bml0XSkgKyAoc3VmZml4ID8gXCIgXCIgKyBzdWZmaXggOiBcIlwiKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRpZiAoaW52YWxpZCA9PT0gdHJ1ZSkge1xuXHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHR9IGVsc2UgaWYgKHR5cGVvZiBpbnZhbGlkID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0cmV0dXJuIGludmFsaWQodmFsdWUpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGludmFsaWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ZWxzZSB7XG5cdFx0Y29uc29sZS5lcnJvcihcIkZvcm1hdCBFcnJvciAtICdkYXRldGltZWRpZmYnIGZvcm1hdHRlciBpcyBkZXBlbmRhbnQgb24gbHV4b24uanNcIik7XG5cdH1cbn1cblxuZnVuY3Rpb24gbG9va3VwIChjZWxsLCBmb3JtYXR0ZXJQYXJhbXMsIG9uUmVuZGVyZWQpIHtcblx0dmFyIHZhbHVlID0gY2VsbC5nZXRWYWx1ZSgpO1xuXG5cdGlmICh0eXBlb2YgZm9ybWF0dGVyUGFyYW1zW3ZhbHVlXSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdGNvbnNvbGUud2FybignTWlzc2luZyBkaXNwbGF5IHZhbHVlIGZvciAnICsgdmFsdWUpO1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXG5cdHJldHVybiBmb3JtYXR0ZXJQYXJhbXNbdmFsdWVdO1xufVxuXG5mdW5jdGlvbiBzdGFyJDEoY2VsbCwgZm9ybWF0dGVyUGFyYW1zLCBvblJlbmRlcmVkKXtcblx0dmFyIHZhbHVlID0gY2VsbC5nZXRWYWx1ZSgpLFxuXHRlbGVtZW50ID0gY2VsbC5nZXRFbGVtZW50KCksXG5cdG1heFN0YXJzID0gZm9ybWF0dGVyUGFyYW1zICYmIGZvcm1hdHRlclBhcmFtcy5zdGFycyA/IGZvcm1hdHRlclBhcmFtcy5zdGFycyA6IDUsXG5cdHN0YXJzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIiksXG5cdHN0YXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgXCJzdmdcIiksXG5cdHN0YXJBY3RpdmUgPSAnPHBvbHlnb24gZmlsbD1cIiNGRkVBMDBcIiBzdHJva2U9XCIjQzFBQjYwXCIgc3Ryb2tlLXdpZHRoPVwiMzcuNjE1MlwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS1taXRlcmxpbWl0PVwiMTBcIiBwb2ludHM9XCIyNTkuMjE2LDI5Ljk0MiAzMzAuMjcsMTczLjkxOSA0ODkuMTYsMTk3LjAwNyAzNzQuMTg1LDMwOS4wOCA0MDEuMzMsNDY3LjMxIDI1OS4yMTYsMzkyLjYxMiAxMTcuMTA0LDQ2Ny4zMSAxNDQuMjUsMzA5LjA4IDI5LjI3NCwxOTcuMDA3IDE4OC4xNjUsMTczLjkxOSBcIi8+Jyxcblx0c3RhckluYWN0aXZlID0gJzxwb2x5Z29uIGZpbGw9XCIjRDJEMkQyXCIgc3Ryb2tlPVwiIzY4Njg2OFwiIHN0cm9rZS13aWR0aD1cIjM3LjYxNTJcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBzdHJva2UtbWl0ZXJsaW1pdD1cIjEwXCIgcG9pbnRzPVwiMjU5LjIxNiwyOS45NDIgMzMwLjI3LDE3My45MTkgNDg5LjE2LDE5Ny4wMDcgMzc0LjE4NSwzMDkuMDggNDAxLjMzLDQ2Ny4zMSAyNTkuMjE2LDM5Mi42MTIgMTE3LjEwNCw0NjcuMzEgMTQ0LjI1LDMwOS4wOCAyOS4yNzQsMTk3LjAwNyAxODguMTY1LDE3My45MTkgXCIvPic7XG5cblx0Ly9zdHlsZSBzdGFycyBob2xkZXJcblx0c3RhcnMuc3R5bGUudmVydGljYWxBbGlnbiA9IFwibWlkZGxlXCI7XG5cblx0Ly9zdHlsZSBzdGFyXG5cdHN0YXIuc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgXCIxNFwiKTtcblx0c3Rhci5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgXCIxNFwiKTtcblx0c3Rhci5zZXRBdHRyaWJ1dGUoXCJ2aWV3Qm94XCIsIFwiMCAwIDUxMiA1MTJcIik7XG5cdHN0YXIuc2V0QXR0cmlidXRlKFwieG1sOnNwYWNlXCIsIFwicHJlc2VydmVcIik7XG5cdHN0YXIuc3R5bGUucGFkZGluZyA9IFwiMCAxcHhcIjtcblxuXHR2YWx1ZSA9IHZhbHVlICYmICFpc05hTih2YWx1ZSkgPyBwYXJzZUludCh2YWx1ZSkgOiAwO1xuXG5cdHZhbHVlID0gTWF0aC5tYXgoMCwgTWF0aC5taW4odmFsdWUsIG1heFN0YXJzKSk7XG5cblx0Zm9yKHZhciBpPTE7aTw9IG1heFN0YXJzO2krKyl7XG5cdFx0dmFyIG5leHRTdGFyID0gc3Rhci5jbG9uZU5vZGUodHJ1ZSk7XG5cdFx0bmV4dFN0YXIuaW5uZXJIVE1MID0gaSA8PSB2YWx1ZSA/IHN0YXJBY3RpdmUgOiBzdGFySW5hY3RpdmU7XG5cblx0XHRzdGFycy5hcHBlbmRDaGlsZChuZXh0U3Rhcik7XG5cdH1cblxuXHRlbGVtZW50LnN0eWxlLndoaXRlU3BhY2UgPSBcIm5vd3JhcFwiO1xuXHRlbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0ZWxlbWVudC5zdHlsZS50ZXh0T3ZlcmZsb3cgPSBcImVsbGlwc2lzXCI7XG5cblx0ZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIHZhbHVlKTtcblxuXHRyZXR1cm4gc3RhcnM7XG59XG5cbmZ1bmN0aW9uIHRyYWZmaWMoY2VsbCwgZm9ybWF0dGVyUGFyYW1zLCBvblJlbmRlcmVkKXtcblx0dmFyIHZhbHVlID0gdGhpcy5zYW5pdGl6ZUhUTUwoY2VsbC5nZXRWYWx1ZSgpKSB8fCAwLFxuXHRlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpLFxuXHRtYXggPSBmb3JtYXR0ZXJQYXJhbXMgJiYgZm9ybWF0dGVyUGFyYW1zLm1heCA/IGZvcm1hdHRlclBhcmFtcy5tYXggOiAxMDAsXG5cdG1pbiA9IGZvcm1hdHRlclBhcmFtcyAmJiBmb3JtYXR0ZXJQYXJhbXMubWluID8gZm9ybWF0dGVyUGFyYW1zLm1pbiA6IDAsXG5cdGNvbG9ycyA9IGZvcm1hdHRlclBhcmFtcyAmJiB0eXBlb2YgZm9ybWF0dGVyUGFyYW1zLmNvbG9yICE9PSBcInVuZGVmaW5lZFwiID8gZm9ybWF0dGVyUGFyYW1zLmNvbG9yIDogW1wicmVkXCIsIFwib3JhbmdlXCIsIFwiZ3JlZW5cIl0sXG5cdGNvbG9yID0gXCIjNjY2NjY2XCIsXG5cdHBlcmNlbnQsIHBlcmNlbnRWYWx1ZTtcblxuXHRpZihpc05hTih2YWx1ZSkgfHwgdHlwZW9mIGNlbGwuZ2V0VmFsdWUoKSA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0ZWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci10cmFmZmljLWxpZ2h0XCIpO1xuXG5cdC8vbWFrZSBzdXJlIHZhbHVlIGlzIGluIHJhbmdlXG5cdHBlcmNlbnRWYWx1ZSA9IHBhcnNlRmxvYXQodmFsdWUpIDw9IG1heCA/IHBhcnNlRmxvYXQodmFsdWUpIDogbWF4O1xuXHRwZXJjZW50VmFsdWUgPSBwYXJzZUZsb2F0KHBlcmNlbnRWYWx1ZSkgPj0gbWluID8gcGFyc2VGbG9hdChwZXJjZW50VmFsdWUpIDogbWluO1xuXG5cdC8vd29ya291dCBwZXJjZW50YWdlXG5cdHBlcmNlbnQgPSAobWF4IC0gbWluKSAvIDEwMDtcblx0cGVyY2VudFZhbHVlID0gTWF0aC5yb3VuZCgocGVyY2VudFZhbHVlIC0gbWluKSAvIHBlcmNlbnQpO1xuXG5cdC8vc2V0IGNvbG9yXG5cdHN3aXRjaCh0eXBlb2YgY29sb3JzKXtcblx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRjb2xvciA9IGNvbG9ycztcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgXCJmdW5jdGlvblwiOlxuXHRcdFx0Y29sb3IgPSBjb2xvcnModmFsdWUpO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBcIm9iamVjdFwiOlxuXHRcdFx0aWYoQXJyYXkuaXNBcnJheShjb2xvcnMpKXtcblx0XHRcdFx0dmFyIHVuaXQgPSAxMDAgLyBjb2xvcnMubGVuZ3RoO1xuXHRcdFx0XHR2YXIgaW5kZXggPSBNYXRoLmZsb29yKHBlcmNlbnRWYWx1ZSAvIHVuaXQpO1xuXG5cdFx0XHRcdGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIGNvbG9ycy5sZW5ndGggLSAxKTtcblx0XHRcdFx0aW5kZXggPSBNYXRoLm1heChpbmRleCwgMCk7XG5cdFx0XHRcdGNvbG9yID0gY29sb3JzW2luZGV4XTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdH1cblxuXHRlbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvcjtcblxuXHRyZXR1cm4gZWw7XG59XG5cbmZ1bmN0aW9uIHByb2dyZXNzJDEoY2VsbCwgZm9ybWF0dGVyUGFyYW1zID0ge30sIG9uUmVuZGVyZWQpeyAvL3Byb2dyZXNzIGJhclxuXHR2YXIgdmFsdWUgPSB0aGlzLnNhbml0aXplSFRNTChjZWxsLmdldFZhbHVlKCkpIHx8IDAsXG5cdGVsZW1lbnQgPSBjZWxsLmdldEVsZW1lbnQoKSxcblx0bWF4ID0gZm9ybWF0dGVyUGFyYW1zLm1heCA/IGZvcm1hdHRlclBhcmFtcy5tYXggOiAxMDAsXG5cdG1pbiA9IGZvcm1hdHRlclBhcmFtcy5taW4gPyBmb3JtYXR0ZXJQYXJhbXMubWluIDogMCxcblx0bGVnZW5kQWxpZ24gPSBmb3JtYXR0ZXJQYXJhbXMubGVnZW5kQWxpZ24gPyBmb3JtYXR0ZXJQYXJhbXMubGVnZW5kQWxpZ24gOiBcImNlbnRlclwiLFxuXHRwZXJjZW50LCBwZXJjZW50VmFsdWUsIGNvbG9yLCBsZWdlbmQsIGxlZ2VuZENvbG9yO1xuXG5cdC8vbWFrZSBzdXJlIHZhbHVlIGlzIGluIHJhbmdlXG5cdHBlcmNlbnRWYWx1ZSA9IHBhcnNlRmxvYXQodmFsdWUpIDw9IG1heCA/IHBhcnNlRmxvYXQodmFsdWUpIDogbWF4O1xuXHRwZXJjZW50VmFsdWUgPSBwYXJzZUZsb2F0KHBlcmNlbnRWYWx1ZSkgPj0gbWluID8gcGFyc2VGbG9hdChwZXJjZW50VmFsdWUpIDogbWluO1xuXG5cdC8vd29ya291dCBwZXJjZW50YWdlXG5cdHBlcmNlbnQgPSAobWF4IC0gbWluKSAvIDEwMDtcblx0cGVyY2VudFZhbHVlID0gTWF0aC5yb3VuZCgocGVyY2VudFZhbHVlIC0gbWluKSAvIHBlcmNlbnQpO1xuXG5cdC8vc2V0IGJhciBjb2xvclxuXHRzd2l0Y2godHlwZW9mIGZvcm1hdHRlclBhcmFtcy5jb2xvcil7XG5cdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0Y29sb3IgPSBmb3JtYXR0ZXJQYXJhbXMuY29sb3I7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIFwiZnVuY3Rpb25cIjpcblx0XHRcdGNvbG9yID0gZm9ybWF0dGVyUGFyYW1zLmNvbG9yKHZhbHVlKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgXCJvYmplY3RcIjpcblx0XHRcdGlmKEFycmF5LmlzQXJyYXkoZm9ybWF0dGVyUGFyYW1zLmNvbG9yKSl7XG5cdFx0XHRcdGxldCB1bml0ID0gMTAwIC8gZm9ybWF0dGVyUGFyYW1zLmNvbG9yLmxlbmd0aDtcblx0XHRcdFx0bGV0IGluZGV4ID0gTWF0aC5mbG9vcihwZXJjZW50VmFsdWUgLyB1bml0KTtcblxuXHRcdFx0XHRpbmRleCA9IE1hdGgubWluKGluZGV4LCBmb3JtYXR0ZXJQYXJhbXMuY29sb3IubGVuZ3RoIC0gMSk7XG5cdFx0XHRcdGluZGV4ID0gTWF0aC5tYXgoaW5kZXgsIDApO1xuXHRcdFx0XHRjb2xvciA9IGZvcm1hdHRlclBhcmFtcy5jb2xvcltpbmRleF07XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdGRlZmF1bHQ6XG5cdFx0XHRjb2xvciA9IFwiIzJEQzIxNFwiO1xuXHR9XG5cblx0Ly9nZW5lcmF0ZSBsZWdlbmRcblx0c3dpdGNoKHR5cGVvZiBmb3JtYXR0ZXJQYXJhbXMubGVnZW5kKXtcblx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRsZWdlbmQgPSBmb3JtYXR0ZXJQYXJhbXMubGVnZW5kO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHRsZWdlbmQgPSBmb3JtYXR0ZXJQYXJhbXMubGVnZW5kKHZhbHVlKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgXCJib29sZWFuXCI6XG5cdFx0XHRsZWdlbmQgPSB2YWx1ZTtcblx0XHRcdGJyZWFrO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRsZWdlbmQgPSBmYWxzZTtcblx0fVxuXG5cdC8vc2V0IGxlZ2VuZCBjb2xvclxuXHRzd2l0Y2godHlwZW9mIGZvcm1hdHRlclBhcmFtcy5sZWdlbmRDb2xvcil7XG5cdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0bGVnZW5kQ29sb3IgPSBmb3JtYXR0ZXJQYXJhbXMubGVnZW5kQ29sb3I7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIFwiZnVuY3Rpb25cIjpcblx0XHRcdGxlZ2VuZENvbG9yID0gZm9ybWF0dGVyUGFyYW1zLmxlZ2VuZENvbG9yKHZhbHVlKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgXCJvYmplY3RcIjpcblx0XHRcdGlmKEFycmF5LmlzQXJyYXkoZm9ybWF0dGVyUGFyYW1zLmxlZ2VuZENvbG9yKSl7XG5cdFx0XHRcdGxldCB1bml0ID0gMTAwIC8gZm9ybWF0dGVyUGFyYW1zLmxlZ2VuZENvbG9yLmxlbmd0aDtcblx0XHRcdFx0bGV0IGluZGV4ID0gTWF0aC5mbG9vcihwZXJjZW50VmFsdWUgLyB1bml0KTtcblxuXHRcdFx0XHRpbmRleCA9IE1hdGgubWluKGluZGV4LCBmb3JtYXR0ZXJQYXJhbXMubGVnZW5kQ29sb3IubGVuZ3RoIC0gMSk7XG5cdFx0XHRcdGluZGV4ID0gTWF0aC5tYXgoaW5kZXgsIDApO1xuXHRcdFx0XHRsZWdlbmRDb2xvciA9IGZvcm1hdHRlclBhcmFtcy5sZWdlbmRDb2xvcltpbmRleF07XG5cdFx0XHR9XG5cdFx0XHRicmVhaztcblx0XHRkZWZhdWx0OlxuXHRcdFx0bGVnZW5kQ29sb3IgPSBcIiMwMDBcIjtcblx0fVxuXG5cdGVsZW1lbnQuc3R5bGUubWluV2lkdGggPSBcIjMwcHhcIjtcblx0ZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblxuXHRlbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgcGVyY2VudFZhbHVlKTtcblxuXHR2YXIgYmFyRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRiYXJFbC5zdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0YmFyRWwuc3R5bGUud2lkdGggPSBwZXJjZW50VmFsdWUgKyBcIiVcIjtcblx0YmFyRWwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gY29sb3I7XG5cdGJhckVsLnN0eWxlLmhlaWdodCA9IFwiMTAwJVwiO1xuXG5cdGJhckVsLnNldEF0dHJpYnV0ZSgnZGF0YS1tYXgnLCBtYXgpO1xuXHRiYXJFbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtbWluJywgbWluKTtcblxuXHR2YXIgYmFyQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0YmFyQ29udGFpbmVyLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRiYXJDb250YWluZXIuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcblx0YmFyQ29udGFpbmVyLnN0eWxlLmhlaWdodCA9IFwiMTAwJVwiO1xuXG5cdGlmKGxlZ2VuZCl7XG5cdFx0dmFyIGxlZ2VuZEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRsZWdlbmRFbC5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRsZWdlbmRFbC5zdHlsZS50b3AgPSAwO1xuXHRcdGxlZ2VuZEVsLnN0eWxlLmxlZnQgPSAwO1xuXHRcdGxlZ2VuZEVsLnN0eWxlLnRleHRBbGlnbiA9IGxlZ2VuZEFsaWduO1xuXHRcdGxlZ2VuZEVsLnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG5cdFx0bGVnZW5kRWwuc3R5bGUuY29sb3IgPSBsZWdlbmRDb2xvcjtcblx0XHRsZWdlbmRFbC5pbm5lckhUTUwgPSBsZWdlbmQ7XG5cdH1cblxuXHRvblJlbmRlcmVkKGZ1bmN0aW9uKCl7XG5cblx0XHQvL2hhbmRsZSBjdXN0b20gZWxlbWVudCBuZWVkZWQgaWYgZm9ybWF0dGVyIGlzIHRvIGJlIGluY2x1ZGVkIGluIHByaW50ZWQvZG93bmxvYWRlZCBvdXRwdXRcblx0XHRpZighKGNlbGwgaW5zdGFuY2VvZiBDZWxsQ29tcG9uZW50KSl7XG5cdFx0XHR2YXIgaG9sZGVyRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdFx0aG9sZGVyRWwuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cdFx0XHRob2xkZXJFbC5zdHlsZS50b3AgPSBcIjRweFwiO1xuXHRcdFx0aG9sZGVyRWwuc3R5bGUuYm90dG9tID0gXCI0cHhcIjtcblx0XHRcdGhvbGRlckVsLnN0eWxlLmxlZnQgPSBcIjRweFwiO1xuXHRcdFx0aG9sZGVyRWwuc3R5bGUucmlnaHQgPSBcIjRweFwiO1xuXG5cdFx0XHRlbGVtZW50LmFwcGVuZENoaWxkKGhvbGRlckVsKTtcblxuXHRcdFx0ZWxlbWVudCA9IGhvbGRlckVsO1xuXHRcdH1cblxuXHRcdGVsZW1lbnQuYXBwZW5kQ2hpbGQoYmFyQ29udGFpbmVyKTtcblx0XHRiYXJDb250YWluZXIuYXBwZW5kQ2hpbGQoYmFyRWwpO1xuXG5cdFx0aWYobGVnZW5kKXtcblx0XHRcdGJhckNvbnRhaW5lci5hcHBlbmRDaGlsZChsZWdlbmRFbCk7XG5cdFx0fVxuXHR9KTtcblxuXHRyZXR1cm4gXCJcIjtcbn1cblxuZnVuY3Rpb24gY29sb3IoY2VsbCwgZm9ybWF0dGVyUGFyYW1zLCBvblJlbmRlcmVkKXtcblx0Y2VsbC5nZXRFbGVtZW50KCkuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gdGhpcy5zYW5pdGl6ZUhUTUwoY2VsbC5nZXRWYWx1ZSgpKTtcblx0cmV0dXJuIFwiXCI7XG59XG5cbmZ1bmN0aW9uIGJ1dHRvblRpY2soY2VsbCwgZm9ybWF0dGVyUGFyYW1zLCBvblJlbmRlcmVkKXtcblx0cmV0dXJuICc8c3ZnIGVuYWJsZS1iYWNrZ3JvdW5kPVwibmV3IDAgMCAyNCAyNFwiIGhlaWdodD1cIjE0XCIgd2lkdGg9XCIxNFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiID48cGF0aCBmaWxsPVwiIzJEQzIxNFwiIGNsaXAtcnVsZT1cImV2ZW5vZGRcIiBkPVwiTTIxLjY1MiwzLjIxMWMtMC4yOTMtMC4yOTUtMC43Ny0wLjI5NS0xLjA2MSwwTDkuNDEsMTQuMzQgIGMtMC4yOTMsMC4yOTctMC43NzEsMC4yOTctMS4wNjIsMEwzLjQ0OSw5LjM1MUMzLjMwNCw5LjIwMywzLjExNCw5LjEzLDIuOTIzLDkuMTI5QzIuNzMsOS4xMjgsMi41MzQsOS4yMDEsMi4zODcsOS4zNTEgIGwtMi4xNjUsMS45NDZDMC4wNzgsMTEuNDQ1LDAsMTEuNjMsMCwxMS44MjNjMCwwLjE5NCwwLjA3OCwwLjM5NywwLjIyMywwLjU0NGw0Ljk0LDUuMTg0YzAuMjkyLDAuMjk2LDAuNzcxLDAuNzc2LDEuMDYyLDEuMDcgIGwyLjEyNCwyLjE0MWMwLjI5MiwwLjI5MywwLjc2OSwwLjI5MywxLjA2MiwwbDE0LjM2Ni0xNC4zNGMwLjI5My0wLjI5NCwwLjI5My0wLjc3NywwLTEuMDcxTDIxLjY1MiwzLjIxMXpcIiBmaWxsLXJ1bGU9XCJldmVub2RkXCIvPjwvc3ZnPic7XG59XG5cbmZ1bmN0aW9uIGJ1dHRvbkNyb3NzKGNlbGwsIGZvcm1hdHRlclBhcmFtcywgb25SZW5kZXJlZCl7XG5cdHJldHVybiAnPHN2ZyBlbmFibGUtYmFja2dyb3VuZD1cIm5ldyAwIDAgMjQgMjRcIiBoZWlnaHQ9XCIxNFwiIHdpZHRoPVwiMTRcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIiA+PHBhdGggZmlsbD1cIiNDRTE1MTVcIiBkPVwiTTIyLjI0NSw0LjAxNWMwLjMxMywwLjMxMywwLjMxMywwLjgyNiwwLDEuMTM5bC02LjI3Niw2LjI3Yy0wLjMxMywwLjMxMi0wLjMxMywwLjgyNiwwLDEuMTRsNi4yNzMsNi4yNzIgIGMwLjMxMywwLjMxMywwLjMxMywwLjgyNiwwLDEuMTRsLTIuMjg1LDIuMjc3Yy0wLjMxNCwwLjMxMi0wLjgyOCwwLjMxMi0xLjE0MiwwbC02LjI3MS02LjI3MWMtMC4zMTMtMC4zMTMtMC44MjgtMC4zMTMtMS4xNDEsMCAgbC02LjI3Niw2LjI2N2MtMC4zMTMsMC4zMTMtMC44MjgsMC4zMTMtMS4xNDEsMGwtMi4yODItMi4yOGMtMC4zMTMtMC4zMTMtMC4zMTMtMC44MjYsMC0xLjE0bDYuMjc4LTYuMjY5ICBjMC4zMTMtMC4zMTIsMC4zMTMtMC44MjYsMC0xLjE0TDEuNzA5LDUuMTQ3Yy0wLjMxNC0wLjMxMy0wLjMxNC0wLjgyNywwLTEuMTRsMi4yODQtMi4yNzhDNC4zMDgsMS40MTcsNC44MjEsMS40MTcsNS4xMzUsMS43MyAgTDExLjQwNSw4YzAuMzE0LDAuMzE0LDAuODI4LDAuMzE0LDEuMTQxLDAuMDAxbDYuMjc2LTYuMjY3YzAuMzEyLTAuMzEyLDAuODI2LTAuMzEyLDEuMTQxLDBMMjIuMjQ1LDQuMDE1elwiLz48L3N2Zz4nO1xufVxuXG5mdW5jdGlvbiByb3dudW0oY2VsbCwgZm9ybWF0dGVyUGFyYW1zLCBvblJlbmRlcmVkKXtcblx0dmFyIGNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcblx0dmFyIHJvdyA9IGNlbGwuZ2V0Um93KCk7XG5cblx0cm93LndhdGNoUG9zaXRpb24oKHBvc2l0aW9uKSA9PiB7XG5cdFx0Y29udGVudC5pbm5lclRleHQgPSBwb3NpdGlvbjtcblx0fSk7XG5cdFxuXHRyZXR1cm4gY29udGVudDtcbn1cblxuZnVuY3Rpb24gaGFuZGxlKGNlbGwsIGZvcm1hdHRlclBhcmFtcywgb25SZW5kZXJlZCl7XG5cdGNlbGwuZ2V0RWxlbWVudCgpLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3Itcm93LWhhbmRsZVwiKTtcblx0cmV0dXJuIFwiPGRpdiBjbGFzcz0ndGFidWxhdG9yLXJvdy1oYW5kbGUtYm94Jz48ZGl2IGNsYXNzPSd0YWJ1bGF0b3Itcm93LWhhbmRsZS1iYXInPjwvZGl2PjxkaXYgY2xhc3M9J3RhYnVsYXRvci1yb3ctaGFuZGxlLWJhcic+PC9kaXY+PGRpdiBjbGFzcz0ndGFidWxhdG9yLXJvdy1oYW5kbGUtYmFyJz48L2Rpdj48L2Rpdj5cIjtcbn1cblxuZnVuY3Rpb24gcmVzcG9uc2l2ZUNvbGxhcHNlKGNlbGwsIGZvcm1hdHRlclBhcmFtcywgb25SZW5kZXJlZCl7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksXG5cdGNvbmZpZyA9IGNlbGwuZ2V0Um93KCkuX3Jvdy5tb2R1bGVzLnJlc3BvbnNpdmVMYXlvdXQ7XG5cblx0ZWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1yZXNwb25zaXZlLWNvbGxhcHNlLXRvZ2dsZVwiKTtcblx0XG5cdGVsLmlubmVySFRNTCA9IGA8c3ZnIGNsYXNzPSd0YWJ1bGF0b3ItcmVzcG9uc2l2ZS1jb2xsYXBzZS10b2dnbGUtb3Blbicgdmlld2JveD1cIjAgMCAyNCAyNFwiPlxuICA8bGluZSB4MT1cIjdcIiB5MT1cIjEyXCIgeDI9XCIxN1wiIHkyPVwiMTJcIiBmaWxsPVwibm9uZVwiIHN0cm9rZS13aWR0aD1cIjNcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgLz5cbiAgPGxpbmUgeTE9XCI3XCIgeDE9XCIxMlwiIHkyPVwiMTdcIiB4Mj1cIjEyXCIgZmlsbD1cIm5vbmVcIiBzdHJva2Utd2lkdGg9XCIzXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIC8+XG48L3N2Zz5cblxuPHN2ZyBjbGFzcz0ndGFidWxhdG9yLXJlc3BvbnNpdmUtY29sbGFwc2UtdG9nZ2xlLWNsb3NlJyB2aWV3Ym94PVwiMCAwIDI0IDI0XCI+XG4gIDxsaW5lIHgxPVwiN1wiIHkxPVwiMTJcIiB4Mj1cIjE3XCIgeTI9XCIxMlwiICBmaWxsPVwibm9uZVwiIHN0cm9rZS13aWR0aD1cIjNcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgLz5cbjwvc3ZnPmA7XG5cblx0Y2VsbC5nZXRFbGVtZW50KCkuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1yb3ctaGFuZGxlXCIpO1xuXG5cdGZ1bmN0aW9uIHRvZ2dsZUxpc3QoaXNPcGVuKXtcblx0XHR2YXIgY29sbGFwc2VFbCA9IGNvbmZpZy5lbGVtZW50O1xuXG5cdFx0Y29uZmlnLm9wZW4gPSBpc09wZW47XG5cblx0XHRpZihjb2xsYXBzZUVsKXtcblxuXHRcdFx0aWYoY29uZmlnLm9wZW4pe1xuXHRcdFx0XHRlbC5jbGFzc0xpc3QuYWRkKFwib3BlblwiKTtcblx0XHRcdFx0Y29sbGFwc2VFbC5zdHlsZS5kaXNwbGF5ID0gJyc7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGVsLmNsYXNzTGlzdC5yZW1vdmUoXCJvcGVuXCIpO1xuXHRcdFx0XHRjb2xsYXBzZUVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0ZWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0dG9nZ2xlTGlzdCghY29uZmlnLm9wZW4pO1xuXHRcdGNlbGwuZ2V0VGFibGUoKS5yb3dNYW5hZ2VyLmFkanVzdFRhYmxlU2l6ZSgpO1xuXHR9KTtcblxuXHR0b2dnbGVMaXN0KGNvbmZpZy5vcGVuKTtcblxuXHRyZXR1cm4gZWw7XG59XG5cbmZ1bmN0aW9uIHJvd1NlbGVjdGlvbihjZWxsLCBmb3JtYXR0ZXJQYXJhbXMsIG9uUmVuZGVyZWQpe1xuXHR2YXIgY2hlY2tib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdHZhciBibG9ja2VkID0gZmFsc2U7XG5cblx0Y2hlY2tib3gudHlwZSA9ICdjaGVja2JveCc7XG5cblx0Y2hlY2tib3guc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCBcIlNlbGVjdCBSb3dcIik7XG5cdFxuXHRpZih0aGlzLnRhYmxlLm1vZEV4aXN0cyhcInNlbGVjdFJvd1wiLCB0cnVlKSl7XG5cblx0XHRjaGVja2JveC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fSk7XG5cblx0XHRpZih0eXBlb2YgY2VsbC5nZXRSb3cgPT0gJ2Z1bmN0aW9uJyl7XG5cdFx0XHR2YXIgcm93ID0gY2VsbC5nZXRSb3coKTtcblxuXHRcdFx0aWYocm93IGluc3RhbmNlb2YgUm93Q29tcG9uZW50KXtcblxuXHRcdFx0XHRjaGVja2JveC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIChlKSA9PiB7XG5cdFx0XHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnNlbGVjdGFibGVSYW5nZU1vZGUgPT09IFwiY2xpY2tcIil7XG5cdFx0XHRcdFx0XHRpZighYmxvY2tlZCl7XG5cdFx0XHRcdFx0XHRcdHJvdy50b2dnbGVTZWxlY3QoKTtcblx0XHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdFx0YmxvY2tlZCA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdHJvdy50b2dnbGVTZWxlY3QoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5zZWxlY3RhYmxlUmFuZ2VNb2RlID09PSBcImNsaWNrXCIpe1xuXHRcdFx0XHRcdGNoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuXHRcdFx0XHRcdFx0YmxvY2tlZCA9IHRydWU7XG5cdFx0XHRcdFx0XHR0aGlzLnRhYmxlLm1vZHVsZXMuc2VsZWN0Um93LmhhbmRsZUNvbXBsZXhSb3dDbGljayhyb3cuX3JvdywgZSk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjaGVja2JveC5jaGVja2VkID0gcm93LmlzU2VsZWN0ZWQgJiYgcm93LmlzU2VsZWN0ZWQoKTtcblx0XHRcdFx0dGhpcy50YWJsZS5tb2R1bGVzLnNlbGVjdFJvdy5yZWdpc3RlclJvd1NlbGVjdENoZWNrYm94KHJvdywgY2hlY2tib3gpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjaGVja2JveCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCAoZSkgPT4ge1xuXHRcdFx0XHRpZih0aGlzLnRhYmxlLm1vZHVsZXMuc2VsZWN0Um93LnNlbGVjdGVkUm93cy5sZW5ndGgpe1xuXHRcdFx0XHRcdHRoaXMudGFibGUuZGVzZWxlY3RSb3coKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHRoaXMudGFibGUuc2VsZWN0Um93KGZvcm1hdHRlclBhcmFtcy5yb3dSYW5nZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLnRhYmxlLm1vZHVsZXMuc2VsZWN0Um93LnJlZ2lzdGVySGVhZGVyU2VsZWN0Q2hlY2tib3goY2hlY2tib3gpO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjaGVja2JveDtcbn1cblxudmFyIGRlZmF1bHRGb3JtYXR0ZXJzID0ge1xuXHRwbGFpbnRleHQ6cGxhaW50ZXh0LFxuXHRodG1sOmh0bWwkMSxcblx0dGV4dGFyZWE6dGV4dGFyZWEkMSxcblx0bW9uZXk6bW9uZXksXG5cdGxpbms6bGluayxcblx0aW1hZ2U6aW1hZ2UsXG5cdHRpY2tDcm9zczp0aWNrQ3Jvc3MkMSxcblx0ZGF0ZXRpbWU6ZGF0ZXRpbWUkMSxcblx0ZGF0ZXRpbWVkaWZmOmRhdGV0aW1lZGlmZixcblx0bG9va3VwOmxvb2t1cCxcblx0c3RhcjpzdGFyJDEsXG5cdHRyYWZmaWM6dHJhZmZpYyxcblx0cHJvZ3Jlc3M6cHJvZ3Jlc3MkMSxcblx0Y29sb3I6Y29sb3IsXG5cdGJ1dHRvblRpY2s6YnV0dG9uVGljayxcblx0YnV0dG9uQ3Jvc3M6YnV0dG9uQ3Jvc3MsXG5cdHJvd251bTpyb3dudW0sXG5cdGhhbmRsZTpoYW5kbGUsXG5cdHJlc3BvbnNpdmVDb2xsYXBzZTpyZXNwb25zaXZlQ29sbGFwc2UsXG5cdHJvd1NlbGVjdGlvbjpyb3dTZWxlY3Rpb24sXG59O1xuXG5jbGFzcyBGb3JtYXQgZXh0ZW5kcyBNb2R1bGV7XG5cdFxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJmb3JtYXR0ZXJcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImZvcm1hdHRlclBhcmFtc1wiKTtcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiZm9ybWF0dGVyUHJpbnRcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImZvcm1hdHRlclByaW50UGFyYW1zXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJmb3JtYXR0ZXJDbGlwYm9hcmRcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImZvcm1hdHRlckNsaXBib2FyZFBhcmFtc1wiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiZm9ybWF0dGVySHRtbE91dHB1dFwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiZm9ybWF0dGVySHRtbE91dHB1dFBhcmFtc1wiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwidGl0bGVGb3JtYXR0ZXJcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcInRpdGxlRm9ybWF0dGVyUGFyYW1zXCIpO1xuXHR9XG5cdFxuXHRpbml0aWFsaXplKCl7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjZWxsLWZvcm1hdFwiLCB0aGlzLmZvcm1hdFZhbHVlLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY2VsbC1yZW5kZXJlZFwiLCB0aGlzLmNlbGxSZW5kZXJlZC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1sYXlvdXRcIiwgdGhpcy5pbml0aWFsaXplQ29sdW1uLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWZvcm1hdFwiLCB0aGlzLmZvcm1hdEhlYWRlci5iaW5kKHRoaXMpKTtcblx0fVxuXHRcblx0Ly9pbml0aWFsaXplIGNvbHVtbiBmb3JtYXR0ZXJcblx0aW5pdGlhbGl6ZUNvbHVtbihjb2x1bW4pe1xuXHRcdGNvbHVtbi5tb2R1bGVzLmZvcm1hdCA9IHRoaXMubG9va3VwRm9ybWF0dGVyKGNvbHVtbiwgXCJcIik7XG5cdFx0XG5cdFx0aWYodHlwZW9mIGNvbHVtbi5kZWZpbml0aW9uLmZvcm1hdHRlclByaW50ICE9PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdGNvbHVtbi5tb2R1bGVzLmZvcm1hdC5wcmludCA9IHRoaXMubG9va3VwRm9ybWF0dGVyKGNvbHVtbiwgXCJQcmludFwiKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodHlwZW9mIGNvbHVtbi5kZWZpbml0aW9uLmZvcm1hdHRlckNsaXBib2FyZCAhPT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRjb2x1bW4ubW9kdWxlcy5mb3JtYXQuY2xpcGJvYXJkID0gdGhpcy5sb29rdXBGb3JtYXR0ZXIoY29sdW1uLCBcIkNsaXBib2FyZFwiKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodHlwZW9mIGNvbHVtbi5kZWZpbml0aW9uLmZvcm1hdHRlckh0bWxPdXRwdXQgIT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0Y29sdW1uLm1vZHVsZXMuZm9ybWF0Lmh0bWxPdXRwdXQgPSB0aGlzLmxvb2t1cEZvcm1hdHRlcihjb2x1bW4sIFwiSHRtbE91dHB1dFwiKTtcblx0XHR9XG5cdH1cblx0XG5cdGxvb2t1cEZvcm1hdHRlcihjb2x1bW4sIHR5cGUpe1xuXHRcdHZhciBjb25maWcgPSB7cGFyYW1zOmNvbHVtbi5kZWZpbml0aW9uW1wiZm9ybWF0dGVyXCIgKyB0eXBlICsgXCJQYXJhbXNcIl0gfHwge319LFxuXHRcdGZvcm1hdHRlciA9IGNvbHVtbi5kZWZpbml0aW9uW1wiZm9ybWF0dGVyXCIgKyB0eXBlXTtcblx0XHRcblx0XHQvL3NldCBjb2x1bW4gZm9ybWF0dGVyXG5cdFx0c3dpdGNoKHR5cGVvZiBmb3JtYXR0ZXIpe1xuXHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0XHRpZihGb3JtYXQuZm9ybWF0dGVyc1tmb3JtYXR0ZXJdKXtcblx0XHRcdFx0XHRjb25maWcuZm9ybWF0dGVyID0gRm9ybWF0LmZvcm1hdHRlcnNbZm9ybWF0dGVyXTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGNvbnNvbGUud2FybihcIkZvcm1hdHRlciBFcnJvciAtIE5vIHN1Y2ggZm9ybWF0dGVyIGZvdW5kOiBcIiwgZm9ybWF0dGVyKTtcblx0XHRcdFx0XHRjb25maWcuZm9ybWF0dGVyID0gRm9ybWF0LmZvcm1hdHRlcnMucGxhaW50ZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRjYXNlIFwiZnVuY3Rpb25cIjpcblx0XHRcdFx0Y29uZmlnLmZvcm1hdHRlciA9IGZvcm1hdHRlcjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGNvbmZpZy5mb3JtYXR0ZXIgPSBGb3JtYXQuZm9ybWF0dGVycy5wbGFpbnRleHQ7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gY29uZmlnO1xuXHR9XG5cdFxuXHRjZWxsUmVuZGVyZWQoY2VsbCl7XG5cdFx0aWYoY2VsbC5tb2R1bGVzLmZvcm1hdCAmJiBjZWxsLm1vZHVsZXMuZm9ybWF0LnJlbmRlcmVkQ2FsbGJhY2sgJiYgIWNlbGwubW9kdWxlcy5mb3JtYXQucmVuZGVyZWQpe1xuXHRcdFx0Y2VsbC5tb2R1bGVzLmZvcm1hdC5yZW5kZXJlZENhbGxiYWNrKCk7XG5cdFx0XHRjZWxsLm1vZHVsZXMuZm9ybWF0LnJlbmRlcmVkID0gdHJ1ZTtcblx0XHR9XG5cdH1cblx0XG5cdC8vcmV0dXJuIGEgZm9ybWF0dGVkIHZhbHVlIGZvciBhIGNvbHVtbiBoZWFkZXJcblx0Zm9ybWF0SGVhZGVyKGNvbHVtbiwgdGl0bGUsIGVsKXtcblx0XHR2YXIgZm9ybWF0dGVyLCBwYXJhbXMsIG9uUmVuZGVyZWQsIG1vY2tDZWxsO1xuXHRcdFxuXHRcdGlmKGNvbHVtbi5kZWZpbml0aW9uLnRpdGxlRm9ybWF0dGVyKXtcblx0XHRcdGZvcm1hdHRlciA9IHRoaXMuZ2V0Rm9ybWF0dGVyKGNvbHVtbi5kZWZpbml0aW9uLnRpdGxlRm9ybWF0dGVyKTtcblx0XHRcdFxuXHRcdFx0b25SZW5kZXJlZCA9IChjYWxsYmFjaykgPT4ge1xuXHRcdFx0XHRjb2x1bW4udGl0bGVGb3JtYXR0ZXJSZW5kZXJlZCA9IGNhbGxiYWNrO1xuXHRcdFx0fTtcblx0XHRcdFxuXHRcdFx0bW9ja0NlbGwgPSB7XG5cdFx0XHRcdGdldFZhbHVlOmZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0cmV0dXJuIHRpdGxlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRnZXRFbGVtZW50OmZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0cmV0dXJuIGVsO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRnZXRUeXBlOmZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0cmV0dXJuIFwiaGVhZGVyXCI7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGdldENvbHVtbjpmdW5jdGlvbigpe1xuXHRcdFx0XHRcdHJldHVybiBjb2x1bW4uZ2V0Q29tcG9uZW50KCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGdldFRhYmxlOigpID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy50YWJsZTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdFxuXHRcdFx0cGFyYW1zID0gY29sdW1uLmRlZmluaXRpb24udGl0bGVGb3JtYXR0ZXJQYXJhbXMgfHwge307XG5cdFx0XHRcblx0XHRcdHBhcmFtcyA9IHR5cGVvZiBwYXJhbXMgPT09IFwiZnVuY3Rpb25cIiA/IHBhcmFtcygpIDogcGFyYW1zO1xuXHRcdFx0XG5cdFx0XHRyZXR1cm4gZm9ybWF0dGVyLmNhbGwodGhpcywgbW9ja0NlbGwsIHBhcmFtcywgb25SZW5kZXJlZCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0cmV0dXJuIHRpdGxlO1xuXHRcdH1cblx0fVxuXHRcblx0XG5cdC8vcmV0dXJuIGEgZm9ybWF0dGVkIHZhbHVlIGZvciBhIGNlbGxcblx0Zm9ybWF0VmFsdWUoY2VsbCl7XG5cdFx0dmFyIGNvbXBvbmVudCA9IGNlbGwuZ2V0Q29tcG9uZW50KCksXG5cdFx0cGFyYW1zID0gdHlwZW9mIGNlbGwuY29sdW1uLm1vZHVsZXMuZm9ybWF0LnBhcmFtcyA9PT0gXCJmdW5jdGlvblwiID8gY2VsbC5jb2x1bW4ubW9kdWxlcy5mb3JtYXQucGFyYW1zKGNvbXBvbmVudCkgOiBjZWxsLmNvbHVtbi5tb2R1bGVzLmZvcm1hdC5wYXJhbXM7XG5cdFx0XG5cdFx0ZnVuY3Rpb24gb25SZW5kZXJlZChjYWxsYmFjayl7XG5cdFx0XHRpZighY2VsbC5tb2R1bGVzLmZvcm1hdCl7XG5cdFx0XHRcdGNlbGwubW9kdWxlcy5mb3JtYXQgPSB7fTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Y2VsbC5tb2R1bGVzLmZvcm1hdC5yZW5kZXJlZENhbGxiYWNrID0gY2FsbGJhY2s7XG5cdFx0XHRjZWxsLm1vZHVsZXMuZm9ybWF0LnJlbmRlcmVkID0gZmFsc2U7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBjZWxsLmNvbHVtbi5tb2R1bGVzLmZvcm1hdC5mb3JtYXR0ZXIuY2FsbCh0aGlzLCBjb21wb25lbnQsIHBhcmFtcywgb25SZW5kZXJlZCk7XG5cdH1cblx0XG5cdGZvcm1hdEV4cG9ydFZhbHVlKGNlbGwsIHR5cGUpe1xuXHRcdHZhciBmb3JtYXR0ZXIgPSBjZWxsLmNvbHVtbi5tb2R1bGVzLmZvcm1hdFt0eXBlXSxcblx0XHRwYXJhbXM7XG5cdFx0XG5cdFx0aWYoZm9ybWF0dGVyKXtcblx0XHRcdHBhcmFtcyA9IHR5cGVvZiBmb3JtYXR0ZXIucGFyYW1zID09PSBcImZ1bmN0aW9uXCIgPyBmb3JtYXR0ZXIucGFyYW1zKGNlbGwuZ2V0Q29tcG9uZW50KCkpIDogZm9ybWF0dGVyLnBhcmFtcztcblx0XHRcdFxuXHRcdFx0ZnVuY3Rpb24gb25SZW5kZXJlZChjYWxsYmFjayl7XG5cdFx0XHRcdGlmKCFjZWxsLm1vZHVsZXMuZm9ybWF0KXtcblx0XHRcdFx0XHRjZWxsLm1vZHVsZXMuZm9ybWF0ID0ge307XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGNlbGwubW9kdWxlcy5mb3JtYXQucmVuZGVyZWRDYWxsYmFjayA9IGNhbGxiYWNrO1xuXHRcdFx0XHRjZWxsLm1vZHVsZXMuZm9ybWF0LnJlbmRlcmVkID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHJldHVybiBmb3JtYXR0ZXIuZm9ybWF0dGVyLmNhbGwodGhpcywgY2VsbC5nZXRDb21wb25lbnQoKSwgcGFyYW1zLCBvblJlbmRlcmVkKTtcblx0XHRcdFxuXHRcdH1lbHNlIHtcblx0XHRcdHJldHVybiB0aGlzLmZvcm1hdFZhbHVlKGNlbGwpO1xuXHRcdH1cblx0fVxuXHRcblx0c2FuaXRpemVIVE1MKHZhbHVlKXtcblx0XHRpZih2YWx1ZSl7XG5cdFx0XHR2YXIgZW50aXR5TWFwID0ge1xuXHRcdFx0XHQnJic6ICcmYW1wOycsXG5cdFx0XHRcdCc8JzogJyZsdDsnLFxuXHRcdFx0XHQnPic6ICcmZ3Q7Jyxcblx0XHRcdFx0J1wiJzogJyZxdW90OycsXG5cdFx0XHRcdFwiJ1wiOiAnJiMzOTsnLFxuXHRcdFx0XHQnLyc6ICcmI3gyRjsnLFxuXHRcdFx0XHQnYCc6ICcmI3g2MDsnLFxuXHRcdFx0XHQnPSc6ICcmI3gzRDsnXG5cdFx0XHR9O1xuXHRcdFx0XG5cdFx0XHRyZXR1cm4gU3RyaW5nKHZhbHVlKS5yZXBsYWNlKC9bJjw+XCInYD0vXS9nLCBmdW5jdGlvbiAocykge1xuXHRcdFx0XHRyZXR1cm4gZW50aXR5TWFwW3NdO1xuXHRcdFx0fSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblx0fVxuXHRcblx0ZW1wdHlUb1NwYWNlKHZhbHVlKXtcblx0XHRyZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiIHx8IHZhbHVlID09PSBcIlwiID8gXCImbmJzcDtcIiA6IHZhbHVlO1xuXHR9XG5cdFxuXHQvL2dldCBmb3JtYXR0ZXIgZm9yIGNlbGxcblx0Z2V0Rm9ybWF0dGVyKGZvcm1hdHRlcil7XG5cdFx0c3dpdGNoKHR5cGVvZiBmb3JtYXR0ZXIpe1xuXHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0XHRpZihGb3JtYXQuZm9ybWF0dGVyc1tmb3JtYXR0ZXJdKXtcblx0XHRcdFx0XHRmb3JtYXR0ZXIgPSBGb3JtYXQuZm9ybWF0dGVyc1tmb3JtYXR0ZXJdO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiRm9ybWF0dGVyIEVycm9yIC0gTm8gc3VjaCBmb3JtYXR0ZXIgZm91bmQ6IFwiLCBmb3JtYXR0ZXIpO1xuXHRcdFx0XHRcdGZvcm1hdHRlciA9IEZvcm1hdC5mb3JtYXR0ZXJzLnBsYWludGV4dDtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHQvL0N1c3RvbSBmb3JtYXR0ZXIgRnVuY3Rpb24sIGRvIG5vdGhpbmdcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGZvcm1hdHRlciA9IEZvcm1hdC5mb3JtYXR0ZXJzLnBsYWludGV4dDtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBmb3JtYXR0ZXI7XG5cdH1cbn1cblxuRm9ybWF0Lm1vZHVsZU5hbWUgPSBcImZvcm1hdFwiO1xuXG4vL2xvYWQgZGVmYXVsdHNcbkZvcm1hdC5mb3JtYXR0ZXJzID0gZGVmYXVsdEZvcm1hdHRlcnM7XG5cbmNsYXNzIEZyb3plbkNvbHVtbnMgZXh0ZW5kcyBNb2R1bGV7XG5cdFxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXHRcdFxuXHRcdHRoaXMubGVmdENvbHVtbnMgPSBbXTtcblx0XHR0aGlzLnJpZ2h0Q29sdW1ucyA9IFtdO1xuXHRcdHRoaXMuaW5pdGlhbGl6YXRpb25Nb2RlID0gXCJsZWZ0XCI7XG5cdFx0dGhpcy5hY3RpdmUgPSBmYWxzZTtcblx0XHR0aGlzLmJsb2NrZWQgPSB0cnVlO1xuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJmcm96ZW5cIik7XG5cdH1cblx0XG5cdC8vcmVzZXQgaW5pdGlhbCBzdGF0ZVxuXHRyZXNldCgpe1xuXHRcdHRoaXMuaW5pdGlhbGl6YXRpb25Nb2RlID0gXCJsZWZ0XCI7XG5cdFx0dGhpcy5sZWZ0Q29sdW1ucyA9IFtdO1xuXHRcdHRoaXMucmlnaHRDb2x1bW5zID0gW107XG5cdFx0dGhpcy5hY3RpdmUgPSBmYWxzZTtcblx0fVxuXHRcblx0aW5pdGlhbGl6ZSgpe1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY2VsbC1sYXlvdXRcIiwgdGhpcy5sYXlvdXRDZWxsLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWluaXRcIiwgdGhpcy5pbml0aWFsaXplQ29sdW1uLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLXdpZHRoXCIsIHRoaXMubGF5b3V0LmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWxheW91dC1hZnRlclwiLCB0aGlzLmxheW91dFJvdy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcInRhYmxlLWxheW91dFwiLCB0aGlzLmxheW91dC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbnMtbG9hZGluZ1wiLCB0aGlzLnJlc2V0LmJpbmQodGhpcykpO1xuXHRcdFxuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWFkZFwiLCB0aGlzLnJlaW5pdGlhbGl6ZUNvbHVtbnMuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tZGVsZXRlXCIsIHRoaXMucmVpbml0aWFsaXplQ29sdW1ucy5iaW5kKHRoaXMpKTtcblx0XHRcblx0XHR0aGlzLnN1YnNjcmliZShcInRhYmxlLXJlZHJhd1wiLCB0aGlzLmxheW91dC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImxheW91dC1yZWZyZXNoaW5nXCIsIHRoaXMuYmxvY2tMYXlvdXQuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJsYXlvdXQtcmVmcmVzaGVkXCIsIHRoaXMudW5ibG9ja0xheW91dC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcInNjcm9sbGJhci12ZXJ0aWNhbFwiLCB0aGlzLmFkanVzdEZvclNjcm9sbGJhci5iaW5kKHRoaXMpKTtcblx0fVxuXHRcblx0YmxvY2tMYXlvdXQoKXtcblx0XHR0aGlzLmJsb2NrZWQgPSB0cnVlO1xuXHR9XG5cdFxuXHR1bmJsb2NrTGF5b3V0KCl7XG5cdFx0dGhpcy5ibG9ja2VkID0gZmFsc2U7XG5cdH1cblx0XG5cdGxheW91dENlbGwoY2VsbCl7XG5cdFx0dGhpcy5sYXlvdXRFbGVtZW50KGNlbGwuZWxlbWVudCwgY2VsbC5jb2x1bW4pO1xuXHR9XG5cdFxuXHRyZWluaXRpYWxpemVDb2x1bW5zKCl7XG5cdFx0dGhpcy5yZXNldCgpO1xuXHRcdFxuXHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5jb2x1bW5zQnlJbmRleC5mb3JFYWNoKChjb2x1bW4pID0+IHtcblx0XHRcdHRoaXMuaW5pdGlhbGl6ZUNvbHVtbihjb2x1bW4pO1xuXHRcdH0pO1xuXHR9XG5cdFxuXHQvL2luaXRpYWxpemUgc3BlY2lmaWMgY29sdW1uXG5cdGluaXRpYWxpemVDb2x1bW4oY29sdW1uKXtcblx0XHR2YXIgY29uZmlnID0ge21hcmdpbjowLCBlZGdlOmZhbHNlfTtcblx0XHRcblx0XHRpZighY29sdW1uLmlzR3JvdXApe1xuXHRcdFx0XG5cdFx0XHRpZih0aGlzLmZyb3plbkNoZWNrKGNvbHVtbikpe1xuXHRcdFx0XHRcblx0XHRcdFx0Y29uZmlnLnBvc2l0aW9uID0gdGhpcy5pbml0aWFsaXphdGlvbk1vZGU7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih0aGlzLmluaXRpYWxpemF0aW9uTW9kZSA9PSBcImxlZnRcIil7XG5cdFx0XHRcdFx0dGhpcy5sZWZ0Q29sdW1ucy5wdXNoKGNvbHVtbik7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHR0aGlzLnJpZ2h0Q29sdW1ucy51bnNoaWZ0KGNvbHVtbik7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMuYWN0aXZlID0gdHJ1ZTtcblx0XHRcdFx0XG5cdFx0XHRcdGNvbHVtbi5tb2R1bGVzLmZyb3plbiA9IGNvbmZpZztcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5pbml0aWFsaXphdGlvbk1vZGUgPSBcInJpZ2h0XCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRmcm96ZW5DaGVjayhjb2x1bW4pe1xuXHRcdGlmKGNvbHVtbi5wYXJlbnQuaXNHcm91cCAmJiBjb2x1bW4uZGVmaW5pdGlvbi5mcm96ZW4pe1xuXHRcdFx0Y29uc29sZS53YXJuKFwiRnJvemVuIENvbHVtbiBFcnJvciAtIFBhcmVudCBjb2x1bW4gZ3JvdXAgbXVzdCBiZSBmcm96ZW4sIG5vdCBpbmRpdmlkdWFsIGNvbHVtbnMgb3Igc3ViIGNvbHVtbiBncm91cHNcIik7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGNvbHVtbi5wYXJlbnQuaXNHcm91cCl7XG5cdFx0XHRyZXR1cm4gdGhpcy5mcm96ZW5DaGVjayhjb2x1bW4ucGFyZW50KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRyZXR1cm4gY29sdW1uLmRlZmluaXRpb24uZnJvemVuO1xuXHRcdH1cblx0fVxuXHRcblx0Ly9sYXlvdXQgY2FsY3VsYXRpb24gcm93c1xuXHRsYXlvdXRDYWxjUm93cygpe1xuXHRcdGlmKHRoaXMudGFibGUubW9kRXhpc3RzKFwiY29sdW1uQ2FsY3NcIikpe1xuXHRcdFx0aWYodGhpcy50YWJsZS5tb2R1bGVzLmNvbHVtbkNhbGNzLnRvcEluaXRpYWxpemVkICYmIHRoaXMudGFibGUubW9kdWxlcy5jb2x1bW5DYWxjcy50b3BSb3cpe1xuXHRcdFx0XHR0aGlzLmxheW91dFJvdyh0aGlzLnRhYmxlLm1vZHVsZXMuY29sdW1uQ2FsY3MudG9wUm93KTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYodGhpcy50YWJsZS5tb2R1bGVzLmNvbHVtbkNhbGNzLmJvdEluaXRpYWxpemVkICYmIHRoaXMudGFibGUubW9kdWxlcy5jb2x1bW5DYWxjcy5ib3RSb3cpe1xuXHRcdFx0XHR0aGlzLmxheW91dFJvdyh0aGlzLnRhYmxlLm1vZHVsZXMuY29sdW1uQ2FsY3MuYm90Um93KTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYodGhpcy50YWJsZS5tb2RFeGlzdHMoXCJncm91cFJvd3NcIikpe1xuXHRcdFx0XHR0aGlzLmxheW91dEdyb3VwQ2FsY3ModGhpcy50YWJsZS5tb2R1bGVzLmdyb3VwUm93cy5nZXRHcm91cHMoKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRsYXlvdXRHcm91cENhbGNzKGdyb3Vwcyl7XG5cdFx0Z3JvdXBzLmZvckVhY2goKGdyb3VwKSA9PiB7XG5cdFx0XHRpZihncm91cC5jYWxjcy50b3Ape1xuXHRcdFx0XHR0aGlzLmxheW91dFJvdyhncm91cC5jYWxjcy50b3ApO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihncm91cC5jYWxjcy5ib3R0b20pe1xuXHRcdFx0XHR0aGlzLmxheW91dFJvdyhncm91cC5jYWxjcy5ib3R0b20pO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihncm91cC5ncm91cExpc3QgJiYgZ3JvdXAuZ3JvdXBMaXN0Lmxlbmd0aCl7XG5cdFx0XHRcdHRoaXMubGF5b3V0R3JvdXBDYWxjcyhncm91cC5ncm91cExpc3QpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cdFxuXHQvL2NhbGN1bGF0ZSBjb2x1bW4gcG9zaXRpb25zIGFuZCBsYXlvdXQgaGVhZGVyc1xuXHRsYXlvdXRDb2x1bW5Qb3NpdGlvbihhbGxDZWxscyl7XG5cdFx0dmFyIGxlZnRQYXJlbnRzID0gW107XG5cdFx0XG5cdFx0dmFyIGxlZnRNYXJnaW4gPSAwO1xuXHRcdHZhciByaWdodE1hcmdpbiA9IDA7XG5cdFx0XG5cdFx0dGhpcy5sZWZ0Q29sdW1ucy5mb3JFYWNoKChjb2x1bW4sIGkpID0+IHtcdFxuXHRcdFx0Y29sdW1uLm1vZHVsZXMuZnJvemVuLm1hcmdpblZhbHVlID0gbGVmdE1hcmdpbjtcblx0XHRcdGNvbHVtbi5tb2R1bGVzLmZyb3plbi5tYXJnaW4gPSBjb2x1bW4ubW9kdWxlcy5mcm96ZW4ubWFyZ2luVmFsdWUgKyBcInB4XCI7XG5cdFx0XHRcblx0XHRcdGlmKGNvbHVtbi52aXNpYmxlKXtcblx0XHRcdFx0bGVmdE1hcmdpbiArPSBjb2x1bW4uZ2V0V2lkdGgoKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoaSA9PSB0aGlzLmxlZnRDb2x1bW5zLmxlbmd0aCAtIDEpe1xuXHRcdFx0XHRjb2x1bW4ubW9kdWxlcy5mcm96ZW4uZWRnZSA9IHRydWU7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGNvbHVtbi5tb2R1bGVzLmZyb3plbi5lZGdlID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKGNvbHVtbi5wYXJlbnQuaXNHcm91cCl7XG5cdFx0XHRcdHZhciBwYXJlbnRFbCA9IHRoaXMuZ2V0Q29sR3JvdXBQYXJlbnRFbGVtZW50KGNvbHVtbik7XG5cdFx0XHRcdGlmKCFsZWZ0UGFyZW50cy5pbmNsdWRlcyhwYXJlbnRFbCkpe1xuXHRcdFx0XHRcdHRoaXMubGF5b3V0RWxlbWVudChwYXJlbnRFbCwgY29sdW1uKTtcblx0XHRcdFx0XHRsZWZ0UGFyZW50cy5wdXNoKHBhcmVudEVsKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0aWYoY29sdW1uLm1vZHVsZXMuZnJvemVuLmVkZ2Upe1xuXHRcdFx0XHRcdHBhcmVudEVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItZnJvemVuLVwiICsgY29sdW1uLm1vZHVsZXMuZnJvemVuLnBvc2l0aW9uKTtcblx0XHRcdFx0fVxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmxheW91dEVsZW1lbnQoY29sdW1uLmdldEVsZW1lbnQoKSwgY29sdW1uKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoYWxsQ2VsbHMpe1xuXHRcdFx0XHRjb2x1bW4uY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMubGF5b3V0RWxlbWVudChjZWxsLmdldEVsZW1lbnQodHJ1ZSksIGNvbHVtbik7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdHRoaXMucmlnaHRDb2x1bW5zLmZvckVhY2goKGNvbHVtbiwgaSkgPT4ge1xuXHRcdFx0XG5cdFx0XHRjb2x1bW4ubW9kdWxlcy5mcm96ZW4ubWFyZ2luVmFsdWUgPSByaWdodE1hcmdpbjtcblx0XHRcdGNvbHVtbi5tb2R1bGVzLmZyb3plbi5tYXJnaW4gPSBjb2x1bW4ubW9kdWxlcy5mcm96ZW4ubWFyZ2luVmFsdWUgKyBcInB4XCI7XG5cdFx0XHRcblx0XHRcdGlmKGNvbHVtbi52aXNpYmxlKXtcblx0XHRcdFx0cmlnaHRNYXJnaW4gKz0gY29sdW1uLmdldFdpZHRoKCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKGkgPT0gdGhpcy5yaWdodENvbHVtbnMubGVuZ3RoIC0gMSl7XG5cdFx0XHRcdGNvbHVtbi5tb2R1bGVzLmZyb3plbi5lZGdlID0gdHJ1ZTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0Y29sdW1uLm1vZHVsZXMuZnJvemVuLmVkZ2UgPSBmYWxzZTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoY29sdW1uLnBhcmVudC5pc0dyb3VwKXtcblx0XHRcdFx0dGhpcy5sYXlvdXRFbGVtZW50KHRoaXMuZ2V0Q29sR3JvdXBQYXJlbnRFbGVtZW50KGNvbHVtbiksIGNvbHVtbik7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMubGF5b3V0RWxlbWVudChjb2x1bW4uZ2V0RWxlbWVudCgpLCBjb2x1bW4pO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihhbGxDZWxscyl7XG5cdFx0XHRcdGNvbHVtbi5jZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5sYXlvdXRFbGVtZW50KGNlbGwuZ2V0RWxlbWVudCh0cnVlKSwgY29sdW1uKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0XG5cdGdldENvbEdyb3VwUGFyZW50RWxlbWVudChjb2x1bW4pe1xuXHRcdHJldHVybiBjb2x1bW4ucGFyZW50LmlzR3JvdXAgPyB0aGlzLmdldENvbEdyb3VwUGFyZW50RWxlbWVudChjb2x1bW4ucGFyZW50KSA6IGNvbHVtbi5nZXRFbGVtZW50KCk7XG5cdH1cblx0XG5cdC8vbGF5b3V0IGNvbHVtbnMgYXBwcm9wcmlhdGVseVxuXHRsYXlvdXQoKXtcdFxuXHRcdGlmKHRoaXMuYWN0aXZlICYmICF0aGlzLmJsb2NrZWQpe1xuXHRcdFxuXHRcdFx0Ly9jYWxjdWxhdGUgbGVmdCBjb2x1bW5zXG5cdFx0XHR0aGlzLmxheW91dENvbHVtblBvc2l0aW9uKCk7XG5cdFx0XHRcblx0XHRcdHRoaXMucmVpbml0aWFsaXplUm93cygpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmxheW91dENhbGNSb3dzKCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRyZWluaXRpYWxpemVSb3dzKCl7XG5cdFx0dmFyIHZpc2libGVSb3dzID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldFZpc2libGVSb3dzKHRydWUpO1xuXHRcdHZhciBvdGhlclJvd3MgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0Um93cygpLmZpbHRlcihyb3cgPT4gIXZpc2libGVSb3dzLmluY2x1ZGVzKHJvdykpO1xuXHRcdFxuXHRcdG90aGVyUm93cy5mb3JFYWNoKChyb3cpID0+e1xuXHRcdFx0cm93LmRlaW5pdGlhbGl6ZSgpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHZpc2libGVSb3dzLmZvckVhY2goKHJvdykgPT57XG5cdFx0XHRpZihyb3cudHlwZSA9PT0gXCJyb3dcIil7XG5cdFx0XHRcdHRoaXMubGF5b3V0Um93KHJvdyk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0XG5cdGxheW91dFJvdyhyb3cpe1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5sYXlvdXQgPT09IFwiZml0RGF0YUZpbGxcIiAmJiB0aGlzLnJpZ2h0Q29sdW1ucy5sZW5ndGgpe1xuXHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldFRhYmxlRWxlbWVudCgpLnN0eWxlLm1pbldpZHRoID0gXCJjYWxjKDEwMCUgLSBcIiArIHRoaXMucmlnaHRNYXJnaW4gKyBcIilcIjtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5sZWZ0Q29sdW1ucy5mb3JFYWNoKChjb2x1bW4pID0+IHtcblx0XHRcdHZhciBjZWxsID0gcm93LmdldENlbGwoY29sdW1uKTtcblx0XHRcdFxuXHRcdFx0aWYoY2VsbCl7XG5cdFx0XHRcdHRoaXMubGF5b3V0RWxlbWVudChjZWxsLmdldEVsZW1lbnQodHJ1ZSksIGNvbHVtbik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0dGhpcy5yaWdodENvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG5cdFx0XHR2YXIgY2VsbCA9IHJvdy5nZXRDZWxsKGNvbHVtbik7XG5cdFx0XHRcblx0XHRcdGlmKGNlbGwpe1xuXHRcdFx0XHR0aGlzLmxheW91dEVsZW1lbnQoY2VsbC5nZXRFbGVtZW50KHRydWUpLCBjb2x1bW4pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cdFxuXHRsYXlvdXRFbGVtZW50KGVsZW1lbnQsIGNvbHVtbil7XG5cdFx0dmFyIHBvc2l0aW9uO1xuXHRcdFxuXHRcdGlmKGNvbHVtbi5tb2R1bGVzLmZyb3plbiAmJiBlbGVtZW50KXtcblx0XHRcdGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSBcInN0aWNreVwiO1xuXG5cdFx0XHRpZih0aGlzLnRhYmxlLnJ0bCl7XG5cdFx0XHRcdHBvc2l0aW9uID0gY29sdW1uLm1vZHVsZXMuZnJvemVuLnBvc2l0aW9uID09PSBcImxlZnRcIiA/IFwicmlnaHRcIiA6IFwibGVmdFwiO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRwb3NpdGlvbiA9IGNvbHVtbi5tb2R1bGVzLmZyb3plbi5wb3NpdGlvbjtcblx0XHRcdH1cblx0XHRcblx0XHRcdGVsZW1lbnQuc3R5bGVbcG9zaXRpb25dID0gY29sdW1uLm1vZHVsZXMuZnJvemVuLm1hcmdpbjtcblxuXHRcdFx0ZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWZyb3plblwiKTtcblx0XHRcdFxuXHRcdFx0aWYoY29sdW1uLm1vZHVsZXMuZnJvemVuLmVkZ2Upe1xuXHRcdFx0XHRlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItZnJvemVuLVwiICsgY29sdW1uLm1vZHVsZXMuZnJvemVuLnBvc2l0aW9uKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRhZGp1c3RGb3JTY3JvbGxiYXIod2lkdGgpe1xuXHRcdGlmKHRoaXMucmlnaHRDb2x1bW5zLmxlbmd0aCl7XG5cdFx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0Q29udGVudHNFbGVtZW50KCkuc3R5bGUud2lkdGggPSBcImNhbGMoMTAwJSAtIFwiICsgd2lkdGggKyBcInB4KVwiO1xuXHRcdH1cblx0fVxuXHRcblx0X2NhbGNTcGFjZShjb2x1bW5zLCBpbmRleCl7XG5cdFx0dmFyIHdpZHRoID0gMDtcblx0XHRcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGluZGV4OyBpKyspe1xuXHRcdFx0aWYoY29sdW1uc1tpXS52aXNpYmxlKXtcblx0XHRcdFx0d2lkdGggKz0gY29sdW1uc1tpXS5nZXRXaWR0aCgpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gd2lkdGg7XG5cdH1cbn1cblxuRnJvemVuQ29sdW1ucy5tb2R1bGVOYW1lID0gXCJmcm96ZW5Db2x1bW5zXCI7XG5cbmNsYXNzIEZyb3plblJvd3MgZXh0ZW5kcyBNb2R1bGV7XG5cblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblxuXHRcdHRoaXMudG9wRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0dGhpcy5yb3dzID0gW107XG5cblx0XHQvL3JlZ2lzdGVyIGNvbXBvbmVudCBmdW5jdGlvbnNcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJyb3dcIiwgXCJmcmVlemVcIiwgdGhpcy5mcmVlemVSb3cuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwicm93XCIsIFwidW5mcmVlemVcIiwgdGhpcy51bmZyZWV6ZVJvdy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJyb3dcIiwgXCJpc0Zyb3plblwiLCB0aGlzLmlzUm93RnJvemVuLmJpbmQodGhpcykpO1xuXG5cdFx0Ly9yZWdpc3RlciB0YWJsZSBvcHRpb25zXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZnJvemVuUm93c0ZpZWxkXCIsIFwiaWRcIik7IC8vZmllbGQgdG8gY2hvb3NlIGZyb3plbiByb3dzIGJ5XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZnJvemVuUm93c1wiLCBmYWxzZSk7IC8vaG9sZGVyIGZvciBmcm96ZW4gcm93IGlkZW50aWZpZXJzXG5cdH1cblxuXHRpbml0aWFsaXplKCl7XG5cdFx0dGhpcy5yb3dzID0gW107XG5cblx0XHR0aGlzLnRvcEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1mcm96ZW4tcm93cy1ob2xkZXJcIik7XG5cblx0XHQvLyB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZWxlbWVudC5hcHBlbmQodGhpcy50b3BFbGVtZW50KTtcblx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0Q29udGVudHNFbGVtZW50KCkuaW5zZXJ0QmVmb3JlKHRoaXMudG9wRWxlbWVudCwgdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmhlYWRlcnNFbGVtZW50Lm5leHRTaWJsaW5nKTtcblxuXHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWRlbGV0aW5nXCIsIHRoaXMuZGV0YWNoUm93LmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwicm93cy12aXNpYmxlXCIsIHRoaXMudmlzaWJsZVJvd3MuYmluZCh0aGlzKSk7XG5cblx0XHR0aGlzLnJlZ2lzdGVyRGlzcGxheUhhbmRsZXIodGhpcy5nZXRSb3dzLmJpbmQodGhpcyksIDEwKTtcblxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5mcm96ZW5Sb3dzKXtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiZGF0YS1wcm9jZXNzZWRcIiwgdGhpcy5pbml0aWFsaXplUm93cy5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWFkZGVkXCIsIHRoaXMuaW5pdGlhbGl6ZVJvdy5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwidGFibGUtcmVkcmF3aW5nXCIsIHRoaXMucmVzaXplSG9sZGVyV2lkdGguYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1yZXNpemVkXCIsIHRoaXMucmVzaXplSG9sZGVyV2lkdGguYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1zaG93XCIsIHRoaXMucmVzaXplSG9sZGVyV2lkdGguYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1oaWRlXCIsIHRoaXMucmVzaXplSG9sZGVyV2lkdGguYmluZCh0aGlzKSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5yZXNpemVIb2xkZXJXaWR0aCgpO1xuXHR9XG5cblx0cmVzaXplSG9sZGVyV2lkdGgoKXtcblx0XHR0aGlzLnRvcEVsZW1lbnQuc3R5bGUubWluV2lkdGggPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuaGVhZGVyc0VsZW1lbnQub2Zmc2V0V2lkdGggKyBcInB4XCI7XG5cdH1cblxuXHRpbml0aWFsaXplUm93cygpe1xuXHRcdHRoaXMudGFibGUucm93TWFuYWdlci5nZXRSb3dzKCkuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHR0aGlzLmluaXRpYWxpemVSb3cocm93KTtcblx0XHR9KTtcblx0fVxuXG5cdGluaXRpYWxpemVSb3cocm93KXtcblx0XHR2YXIgZnJvemVuUm93cyA9IHRoaXMudGFibGUub3B0aW9ucy5mcm96ZW5Sb3dzLFxuXHRcdHJvd1R5cGUgPSB0eXBlb2YgZnJvemVuUm93cztcblxuXHRcdGlmKHJvd1R5cGUgPT09IFwibnVtYmVyXCIpe1xuXHRcdFx0aWYocm93LmdldFBvc2l0aW9uKCkgJiYgKHJvdy5nZXRQb3NpdGlvbigpICsgdGhpcy5yb3dzLmxlbmd0aCkgPD0gZnJvemVuUm93cyl7XG5cdFx0XHRcdHRoaXMuZnJlZXplUm93KHJvdyk7XG5cdFx0XHR9XG5cdFx0fWVsc2UgaWYocm93VHlwZSA9PT0gXCJmdW5jdGlvblwiKXtcblx0XHRcdGlmKGZyb3plblJvd3MuY2FsbCh0aGlzLnRhYmxlLCByb3cuZ2V0Q29tcG9uZW50KCkpKXtcblx0XHRcdFx0dGhpcy5mcmVlemVSb3cocm93KTtcblx0XHRcdH1cblx0XHR9ZWxzZSBpZihBcnJheS5pc0FycmF5KGZyb3plblJvd3MpKXtcblx0XHRcdGlmKGZyb3plblJvd3MuaW5jbHVkZXMocm93LmRhdGFbdGhpcy5vcHRpb25zKFwiZnJvemVuUm93c0ZpZWxkXCIpXSkpe1xuXHRcdFx0XHR0aGlzLmZyZWV6ZVJvdyhyb3cpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlzUm93RnJvemVuKHJvdyl7XG5cdFx0dmFyIGluZGV4ID0gdGhpcy5yb3dzLmluZGV4T2Yocm93KTtcblx0XHRyZXR1cm4gaW5kZXggPiAtMTtcblx0fVxuXG5cdGlzRnJvemVuKCl7XG5cdFx0cmV0dXJuICEhdGhpcy5yb3dzLmxlbmd0aDtcblx0fVxuXG5cdHZpc2libGVSb3dzKHZpZXdhYmxlLCByb3dzKXtcblx0XHR0aGlzLnJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRyb3dzLnB1c2gocm93KTtcblx0XHR9KTtcblxuXHRcdHJldHVybiByb3dzO1xuXHR9XG5cblx0Ly9maWx0ZXIgZnJvemVuIHJvd3Mgb3V0IG9mIGRpc3BsYXkgZGF0YVxuXHRnZXRSb3dzKHJvd3Mpe1xuXHRcdHZhciBvdXRwdXQgPSByb3dzLnNsaWNlKDApO1xuXG5cdFx0dGhpcy5yb3dzLmZvckVhY2goZnVuY3Rpb24ocm93KXtcblx0XHRcdHZhciBpbmRleCA9IG91dHB1dC5pbmRleE9mKHJvdyk7XG5cblx0XHRcdGlmKGluZGV4ID4gLTEpe1xuXHRcdFx0XHRvdXRwdXQuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblxuXHRmcmVlemVSb3cocm93KXtcblx0XHRpZighcm93Lm1vZHVsZXMuZnJvemVuKXtcblx0XHRcdHJvdy5tb2R1bGVzLmZyb3plbiA9IHRydWU7XG5cdFx0XHR0aGlzLnRvcEVsZW1lbnQuYXBwZW5kQ2hpbGQocm93LmdldEVsZW1lbnQoKSk7XG5cdFx0XHRyb3cuaW5pdGlhbGl6ZSgpO1xuXHRcdFx0cm93Lm5vcm1hbGl6ZUhlaWdodCgpO1xuXHRcdFxuXHRcdFx0dGhpcy5yb3dzLnB1c2gocm93KTtcblxuXHRcdFx0dGhpcy5yZWZyZXNoRGF0YShmYWxzZSwgXCJkaXNwbGF5XCIpO1xuXG5cdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuYWRqdXN0VGFibGVTaXplKCk7XG5cblx0XHRcdHRoaXMuc3R5bGVSb3dzKCk7XG5cblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJGcmVlemUgRXJyb3IgLSBSb3cgaXMgYWxyZWFkeSBmcm96ZW5cIik7XG5cdFx0fVxuXHR9XG5cblx0dW5mcmVlemVSb3cocm93KXtcblx0XHRpZihyb3cubW9kdWxlcy5mcm96ZW4pe1xuXG5cdFx0XHRyb3cubW9kdWxlcy5mcm96ZW4gPSBmYWxzZTtcblxuXHRcdFx0dGhpcy5kZXRhY2hSb3cocm93KTtcblxuXHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLmFkanVzdFRhYmxlU2l6ZSgpO1xuXG5cdFx0XHR0aGlzLnJlZnJlc2hEYXRhKGZhbHNlLCBcImRpc3BsYXlcIik7XG5cblx0XHRcdGlmKHRoaXMucm93cy5sZW5ndGgpe1xuXHRcdFx0XHR0aGlzLnN0eWxlUm93cygpO1xuXHRcdFx0fVxuXG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiRnJlZXplIEVycm9yIC0gUm93IGlzIGFscmVhZHkgdW5mcm96ZW5cIik7XG5cdFx0fVxuXHR9XG5cblx0ZGV0YWNoUm93KHJvdyl7XG5cdFx0dmFyIGluZGV4ID0gdGhpcy5yb3dzLmluZGV4T2Yocm93KTtcblxuXHRcdGlmKGluZGV4ID4gLTEpe1xuXHRcdFx0dmFyIHJvd0VsID0gcm93LmdldEVsZW1lbnQoKTtcblxuXHRcdFx0aWYocm93RWwucGFyZW50Tm9kZSl7XG5cdFx0XHRcdHJvd0VsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocm93RWwpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnJvd3Muc3BsaWNlKGluZGV4LCAxKTtcblx0XHR9XG5cdH1cblxuXHRzdHlsZVJvd3Mocm93KXtcblx0XHR0aGlzLnJvd3MuZm9yRWFjaCgocm93LCBpKSA9PiB7XG5cdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuc3R5bGVSb3cocm93LCBpKTtcblx0XHR9KTtcblx0fVxufVxuXG5Gcm96ZW5Sb3dzLm1vZHVsZU5hbWUgPSBcImZyb3plblJvd3NcIjtcblxuLy9wdWJsaWMgZ3JvdXAgb2JqZWN0XG5jbGFzcyBHcm91cENvbXBvbmVudCB7XG5cdGNvbnN0cnVjdG9yIChncm91cCl7XG5cdFx0dGhpcy5fZ3JvdXAgPSBncm91cDtcblx0XHR0aGlzLnR5cGUgPSBcIkdyb3VwQ29tcG9uZW50XCI7XG5cblx0XHRyZXR1cm4gbmV3IFByb3h5KHRoaXMsIHtcblx0XHRcdGdldDogZnVuY3Rpb24odGFyZ2V0LCBuYW1lLCByZWNlaXZlcikge1xuXHRcdFx0XHRpZiAodHlwZW9mIHRhcmdldFtuYW1lXSAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0XHRcdHJldHVybiB0YXJnZXRbbmFtZV07XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRyZXR1cm4gdGFyZ2V0Ll9ncm91cC5ncm91cE1hbmFnZXIudGFibGUuY29tcG9uZW50RnVuY3Rpb25CaW5kZXIuaGFuZGxlKFwiZ3JvdXBcIiwgdGFyZ2V0Ll9ncm91cCwgbmFtZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdGdldEtleSgpe1xuXHRcdHJldHVybiB0aGlzLl9ncm91cC5rZXk7XG5cdH1cblxuXHRnZXRGaWVsZCgpe1xuXHRcdHJldHVybiB0aGlzLl9ncm91cC5maWVsZDtcblx0fVxuXG5cdGdldEVsZW1lbnQoKXtcblx0XHRyZXR1cm4gdGhpcy5fZ3JvdXAuZWxlbWVudDtcblx0fVxuXG5cdGdldFJvd3MoKXtcblx0XHRyZXR1cm4gdGhpcy5fZ3JvdXAuZ2V0Um93cyh0cnVlKTtcblx0fVxuXG5cdGdldFN1Ykdyb3Vwcygpe1xuXHRcdHJldHVybiB0aGlzLl9ncm91cC5nZXRTdWJHcm91cHModHJ1ZSk7XG5cdH1cblxuXHRnZXRQYXJlbnRHcm91cCgpe1xuXHRcdHJldHVybiB0aGlzLl9ncm91cC5wYXJlbnQgPyB0aGlzLl9ncm91cC5wYXJlbnQuZ2V0Q29tcG9uZW50KCkgOiBmYWxzZTtcblx0fVxuXG5cdGlzVmlzaWJsZSgpe1xuXHRcdHJldHVybiB0aGlzLl9ncm91cC52aXNpYmxlO1xuXHR9XG5cblx0c2hvdygpe1xuXHRcdHRoaXMuX2dyb3VwLnNob3coKTtcblx0fVxuXG5cdGhpZGUoKXtcblx0XHR0aGlzLl9ncm91cC5oaWRlKCk7XG5cdH1cblxuXHR0b2dnbGUoKXtcblx0XHR0aGlzLl9ncm91cC50b2dnbGVWaXNpYmlsaXR5KCk7XG5cdH1cblxuXHRzY3JvbGxUbyhwb3NpdGlvbiwgaWZWaXNpYmxlKXtcblx0XHRyZXR1cm4gdGhpcy5fZ3JvdXAuZ3JvdXBNYW5hZ2VyLnRhYmxlLnJvd01hbmFnZXIuc2Nyb2xsVG9Sb3codGhpcy5fZ3JvdXAsIHBvc2l0aW9uLCBpZlZpc2libGUpO1xuXHR9XG5cblx0X2dldFNlbGYoKXtcblx0XHRyZXR1cm4gdGhpcy5fZ3JvdXA7XG5cdH1cblxuXHRnZXRUYWJsZSgpe1xuXHRcdHJldHVybiB0aGlzLl9ncm91cC5ncm91cE1hbmFnZXIudGFibGU7XG5cdH1cbn1cblxuLy9Hcm91cCBmdW5jdGlvbnNcbmNsYXNzIEdyb3Vwe1xuXHRcblx0Y29uc3RydWN0b3IoZ3JvdXBNYW5hZ2VyLCBwYXJlbnQsIGxldmVsLCBrZXksIGZpZWxkLCBnZW5lcmF0b3IsIG9sZEdyb3VwKXtcblx0XHR0aGlzLmdyb3VwTWFuYWdlciA9IGdyb3VwTWFuYWdlcjtcblx0XHR0aGlzLnBhcmVudCA9IHBhcmVudDtcblx0XHR0aGlzLmtleSA9IGtleTtcblx0XHR0aGlzLmxldmVsID0gbGV2ZWw7XG5cdFx0dGhpcy5maWVsZCA9IGZpZWxkO1xuXHRcdHRoaXMuaGFzU3ViR3JvdXBzID0gbGV2ZWwgPCAoZ3JvdXBNYW5hZ2VyLmdyb3VwSURMb29rdXBzLmxlbmd0aCAtIDEpO1xuXHRcdHRoaXMuYWRkUm93ID0gdGhpcy5oYXNTdWJHcm91cHMgPyB0aGlzLl9hZGRSb3dUb0dyb3VwIDogdGhpcy5fYWRkUm93O1xuXHRcdHRoaXMudHlwZSA9IFwiZ3JvdXBcIjsgLy90eXBlIG9mIGVsZW1lbnRcblx0XHR0aGlzLm9sZCA9IG9sZEdyb3VwO1xuXHRcdHRoaXMucm93cyA9IFtdO1xuXHRcdHRoaXMuZ3JvdXBzID0gW107XG5cdFx0dGhpcy5ncm91cExpc3QgPSBbXTtcblx0XHR0aGlzLmdlbmVyYXRvciA9IGdlbmVyYXRvcjtcblx0XHR0aGlzLmVsZW1lbnQgPSBmYWxzZTtcblx0XHR0aGlzLmVsZW1lbnRDb250ZW50cyA9IGZhbHNlO1xuXHRcdHRoaXMuaGVpZ2h0ID0gMDtcblx0XHR0aGlzLm91dGVySGVpZ2h0ID0gMDtcblx0XHR0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG5cdFx0dGhpcy5jYWxjcyA9IHt9O1xuXHRcdHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblx0XHR0aGlzLm1vZHVsZXMgPSB7fTtcblx0XHR0aGlzLmFycm93RWxlbWVudCA9IGZhbHNlO1xuXHRcdFxuXHRcdHRoaXMudmlzaWJsZSA9IG9sZEdyb3VwID8gb2xkR3JvdXAudmlzaWJsZSA6ICh0eXBlb2YgZ3JvdXBNYW5hZ2VyLnN0YXJ0T3BlbltsZXZlbF0gIT09IFwidW5kZWZpbmVkXCIgPyBncm91cE1hbmFnZXIuc3RhcnRPcGVuW2xldmVsXSA6IGdyb3VwTWFuYWdlci5zdGFydE9wZW5bMF0pO1xuXHRcdFxuXHRcdHRoaXMuY29tcG9uZW50ID0gbnVsbDtcblx0XHRcblx0XHR0aGlzLmNyZWF0ZUVsZW1lbnRzKCk7XG5cdFx0dGhpcy5hZGRCaW5kaW5ncygpO1xuXHRcdFxuXHRcdHRoaXMuY3JlYXRlVmFsdWVHcm91cHMoKTtcblx0fVxuXHRcblx0d2lwZShlbGVtZW50c09ubHkpe1xuXHRcdGlmKCFlbGVtZW50c09ubHkpe1xuXHRcdFx0aWYodGhpcy5ncm91cExpc3QubGVuZ3RoKXtcblx0XHRcdFx0dGhpcy5ncm91cExpc3QuZm9yRWFjaChmdW5jdGlvbihncm91cCl7XG5cdFx0XHRcdFx0Z3JvdXAud2lwZSgpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5yb3dzLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0XHRcdGlmKHJvdy5tb2R1bGVzKXtcblx0XHRcdFx0XHRcdGRlbGV0ZSByb3cubW9kdWxlcy5ncm91cDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHR0aGlzLmVsZW1lbnQgPSBmYWxzZTtcblx0XHR0aGlzLmFycm93RWxlbWVudCA9IGZhbHNlO1xuXHRcdHRoaXMuZWxlbWVudENvbnRlbnRzID0gZmFsc2U7XG5cdH1cblx0XG5cdGNyZWF0ZUVsZW1lbnRzKCl7XG5cdFx0dmFyIGFycm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRhcnJvdy5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWFycm93XCIpO1xuXHRcdFxuXHRcdHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0dGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3Itcm93XCIpO1xuXHRcdHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWdyb3VwXCIpO1xuXHRcdHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWdyb3VwLWxldmVsLVwiICsgdGhpcy5sZXZlbCk7XG5cdFx0dGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJyb3dncm91cFwiKTtcblx0XHRcblx0XHR0aGlzLmFycm93RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0dGhpcy5hcnJvd0VsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1ncm91cC10b2dnbGVcIik7XG5cdFx0dGhpcy5hcnJvd0VsZW1lbnQuYXBwZW5kQ2hpbGQoYXJyb3cpO1xuXHRcdFxuXHRcdC8vc2V0dXAgbW92YWJsZSByb3dzXG5cdFx0aWYodGhpcy5ncm91cE1hbmFnZXIudGFibGUub3B0aW9ucy5tb3ZhYmxlUm93cyAhPT0gZmFsc2UgJiYgdGhpcy5ncm91cE1hbmFnZXIudGFibGUubW9kRXhpc3RzKFwibW92ZVJvd1wiKSl7XG5cdFx0XHR0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5tb2R1bGVzLm1vdmVSb3cuaW5pdGlhbGl6ZUdyb3VwSGVhZGVyKHRoaXMpO1xuXHRcdH1cblx0fVxuXHRcblx0Y3JlYXRlVmFsdWVHcm91cHMoKXtcblx0XHR2YXIgbGV2ZWwgPSB0aGlzLmxldmVsICsgMTtcblx0XHRpZih0aGlzLmdyb3VwTWFuYWdlci5hbGxvd2VkVmFsdWVzICYmIHRoaXMuZ3JvdXBNYW5hZ2VyLmFsbG93ZWRWYWx1ZXNbbGV2ZWxdKXtcblx0XHRcdHRoaXMuZ3JvdXBNYW5hZ2VyLmFsbG93ZWRWYWx1ZXNbbGV2ZWxdLmZvckVhY2goKHZhbHVlKSA9PiB7XG5cdFx0XHRcdHRoaXMuX2NyZWF0ZUdyb3VwKHZhbHVlLCBsZXZlbCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblx0XG5cdGFkZEJpbmRpbmdzKCl7XG5cdFx0dmFyIHRvZ2dsZUVsZW1lbnQ7XG5cdFx0XG5cdFx0aWYodGhpcy5ncm91cE1hbmFnZXIudGFibGUub3B0aW9ucy5ncm91cFRvZ2dsZUVsZW1lbnQpe1xuXHRcdFx0dG9nZ2xlRWxlbWVudCA9IHRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLm9wdGlvbnMuZ3JvdXBUb2dnbGVFbGVtZW50ID09IFwiYXJyb3dcIiA/IHRoaXMuYXJyb3dFbGVtZW50IDogdGhpcy5lbGVtZW50O1xuXHRcdFx0XG5cdFx0XHR0b2dnbGVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuXHRcdFx0XHRpZih0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5vcHRpb25zLmdyb3VwVG9nZ2xlRWxlbWVudCA9PT0gXCJhcnJvd1wiKXtcblx0XHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvL2FsbG93IGNsaWNrIGV2ZW50IHRvIHByb3BhZ2F0ZSBiZWZvcmUgdG9nZ2xpbmcgdmlzaWJpbGl0eVxuXHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0XHR0aGlzLnRvZ2dsZVZpc2liaWxpdHkoKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblx0XG5cdF9jcmVhdGVHcm91cChncm91cElELCBsZXZlbCl7XG5cdFx0dmFyIGdyb3VwS2V5ID0gbGV2ZWwgKyBcIl9cIiArIGdyb3VwSUQ7XG5cdFx0dmFyIGdyb3VwID0gbmV3IEdyb3VwKHRoaXMuZ3JvdXBNYW5hZ2VyLCB0aGlzLCBsZXZlbCwgZ3JvdXBJRCwgIHRoaXMuZ3JvdXBNYW5hZ2VyLmdyb3VwSURMb29rdXBzW2xldmVsXS5maWVsZCwgdGhpcy5ncm91cE1hbmFnZXIuaGVhZGVyR2VuZXJhdG9yW2xldmVsXSB8fCB0aGlzLmdyb3VwTWFuYWdlci5oZWFkZXJHZW5lcmF0b3JbMF0sIHRoaXMub2xkID8gdGhpcy5vbGQuZ3JvdXBzW2dyb3VwS2V5XSA6IGZhbHNlKTtcblx0XHRcblx0XHR0aGlzLmdyb3Vwc1tncm91cEtleV0gPSBncm91cDtcblx0XHR0aGlzLmdyb3VwTGlzdC5wdXNoKGdyb3VwKTtcblx0fVxuXHRcblx0X2FkZFJvd1RvR3JvdXAocm93KXtcblx0XHRcblx0XHR2YXIgbGV2ZWwgPSB0aGlzLmxldmVsICsgMTtcblx0XHRcblx0XHRpZih0aGlzLmhhc1N1Ykdyb3Vwcyl7XG5cdFx0XHR2YXIgZ3JvdXBJRCA9IHRoaXMuZ3JvdXBNYW5hZ2VyLmdyb3VwSURMb29rdXBzW2xldmVsXS5mdW5jKHJvdy5nZXREYXRhKCkpLFxuXHRcdFx0Z3JvdXBLZXkgPSBsZXZlbCArIFwiX1wiICsgZ3JvdXBJRDtcblx0XHRcdFxuXHRcdFx0aWYodGhpcy5ncm91cE1hbmFnZXIuYWxsb3dlZFZhbHVlcyAmJiB0aGlzLmdyb3VwTWFuYWdlci5hbGxvd2VkVmFsdWVzW2xldmVsXSl7XG5cdFx0XHRcdGlmKHRoaXMuZ3JvdXBzW2dyb3VwS2V5XSl7XG5cdFx0XHRcdFx0dGhpcy5ncm91cHNbZ3JvdXBLZXldLmFkZFJvdyhyb3cpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlmKCF0aGlzLmdyb3Vwc1tncm91cEtleV0pe1xuXHRcdFx0XHRcdHRoaXMuX2NyZWF0ZUdyb3VwKGdyb3VwSUQsIGxldmVsKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5ncm91cHNbZ3JvdXBLZXldLmFkZFJvdyhyb3cpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0X2FkZFJvdyhyb3cpe1xuXHRcdHRoaXMucm93cy5wdXNoKHJvdyk7XG5cdFx0cm93Lm1vZHVsZXMuZ3JvdXAgPSB0aGlzO1xuXHR9XG5cdFxuXHRpbnNlcnRSb3cocm93LCB0bywgYWZ0ZXIpe1xuXHRcdHZhciBkYXRhID0gdGhpcy5jb25mb3JtUm93RGF0YSh7fSk7XG5cdFx0XG5cdFx0cm93LnVwZGF0ZURhdGEoZGF0YSk7XG5cdFx0XG5cdFx0dmFyIHRvSW5kZXggPSB0aGlzLnJvd3MuaW5kZXhPZih0byk7XG5cdFx0XG5cdFx0aWYodG9JbmRleCA+IC0xKXtcblx0XHRcdGlmKGFmdGVyKXtcblx0XHRcdFx0dGhpcy5yb3dzLnNwbGljZSh0b0luZGV4KzEsIDAsIHJvdyk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMucm93cy5zcGxpY2UodG9JbmRleCwgMCwgcm93KTtcblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRpZihhZnRlcil7XG5cdFx0XHRcdHRoaXMucm93cy5wdXNoKHJvdyk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMucm93cy51bnNoaWZ0KHJvdyk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHJvdy5tb2R1bGVzLmdyb3VwID0gdGhpcztcblx0XHRcblx0XHQvLyB0aGlzLmdlbmVyYXRlR3JvdXBIZWFkZXJDb250ZW50cygpO1xuXHRcdFxuXHRcdGlmKHRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLm1vZEV4aXN0cyhcImNvbHVtbkNhbGNzXCIpICYmIHRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLm9wdGlvbnMuY29sdW1uQ2FsY3MgIT0gXCJ0YWJsZVwiKXtcblx0XHRcdHRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLm1vZHVsZXMuY29sdW1uQ2FsY3MucmVjYWxjR3JvdXAodGhpcyk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuZ3JvdXBNYW5hZ2VyLnVwZGF0ZUdyb3VwUm93cyh0cnVlKTtcblx0fVxuXHRcblx0c2Nyb2xsSGVhZGVyKGxlZnQpe1xuXHRcdGlmKHRoaXMuYXJyb3dFbGVtZW50KXtcblx0XHRcdHRoaXMuYXJyb3dFbGVtZW50LnN0eWxlLm1hcmdpbkxlZnQgPSBsZWZ0O1xuXHRcdFx0XG5cdFx0XHR0aGlzLmdyb3VwTGlzdC5mb3JFYWNoKGZ1bmN0aW9uKGNoaWxkKXtcblx0XHRcdFx0Y2hpbGQuc2Nyb2xsSGVhZGVyKGxlZnQpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRnZXRSb3dJbmRleChyb3cpe31cblx0XG5cdC8vdXBkYXRlIHJvdyBkYXRhIHRvIG1hdGNoIGdyb3VwaW5nIGNvbnN0cmFpbnRzXG5cdGNvbmZvcm1Sb3dEYXRhKGRhdGEpe1xuXHRcdGlmKHRoaXMuZmllbGQpe1xuXHRcdFx0ZGF0YVt0aGlzLmZpZWxkXSA9IHRoaXMua2V5O1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkRhdGEgQ29uZm9ybWluZyBFcnJvciAtIENhbm5vdCBjb25mb3JtIHJvdyBkYXRhIHRvIG1hdGNoIG5ldyBncm91cCBhcyBncm91cEJ5IGlzIGEgZnVuY3Rpb25cIik7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRoaXMucGFyZW50KXtcblx0XHRcdGRhdGEgPSB0aGlzLnBhcmVudC5jb25mb3JtUm93RGF0YShkYXRhKTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIGRhdGE7XG5cdH1cblx0XG5cdHJlbW92ZVJvdyhyb3cpe1xuXHRcdHZhciBpbmRleCA9IHRoaXMucm93cy5pbmRleE9mKHJvdyk7XG5cdFx0dmFyIGVsID0gcm93LmdldEVsZW1lbnQoKTtcblx0XHRcblx0XHRpZihpbmRleCA+IC0xKXtcblx0XHRcdHRoaXMucm93cy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdH1cblx0XHRcblx0XHRpZighdGhpcy5ncm91cE1hbmFnZXIudGFibGUub3B0aW9ucy5ncm91cFZhbHVlcyAmJiAhdGhpcy5yb3dzLmxlbmd0aCl7XG5cdFx0XHRpZih0aGlzLnBhcmVudCl7XG5cdFx0XHRcdHRoaXMucGFyZW50LnJlbW92ZUdyb3VwKHRoaXMpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmdyb3VwTWFuYWdlci5yZW1vdmVHcm91cCh0aGlzKTtcblx0XHRcdH1cdFx0XG5cdFx0XHRcblx0XHRcdHRoaXMuZ3JvdXBNYW5hZ2VyLnVwZGF0ZUdyb3VwUm93cyh0cnVlKTtcblx0XHRcdFxuXHRcdH1lbHNlIHtcblx0XHRcdFxuXHRcdFx0aWYoZWwucGFyZW50Tm9kZSl7XG5cdFx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZighdGhpcy5ncm91cE1hbmFnZXIuYmxvY2tSZWRyYXcpe1xuXHRcdFx0XHR0aGlzLmdlbmVyYXRlR3JvdXBIZWFkZXJDb250ZW50cygpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYodGhpcy5ncm91cE1hbmFnZXIudGFibGUubW9kRXhpc3RzKFwiY29sdW1uQ2FsY3NcIikgJiYgdGhpcy5ncm91cE1hbmFnZXIudGFibGUub3B0aW9ucy5jb2x1bW5DYWxjcyAhPSBcInRhYmxlXCIpe1xuXHRcdFx0XHRcdHRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLm1vZHVsZXMuY29sdW1uQ2FsY3MucmVjYWxjR3JvdXAodGhpcyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdH1cblx0fVxuXHRcblx0cmVtb3ZlR3JvdXAoZ3JvdXApe1xuXHRcdHZhciBncm91cEtleSA9IGdyb3VwLmxldmVsICsgXCJfXCIgKyBncm91cC5rZXksXG5cdFx0aW5kZXg7XG5cdFx0XG5cdFx0aWYodGhpcy5ncm91cHNbZ3JvdXBLZXldKXtcblx0XHRcdGRlbGV0ZSB0aGlzLmdyb3Vwc1tncm91cEtleV07XG5cdFx0XHRcblx0XHRcdGluZGV4ID0gdGhpcy5ncm91cExpc3QuaW5kZXhPZihncm91cCk7XG5cdFx0XHRcblx0XHRcdGlmKGluZGV4ID4gLTEpe1xuXHRcdFx0XHR0aGlzLmdyb3VwTGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZighdGhpcy5ncm91cExpc3QubGVuZ3RoKXtcblx0XHRcdFx0aWYodGhpcy5wYXJlbnQpe1xuXHRcdFx0XHRcdHRoaXMucGFyZW50LnJlbW92ZUdyb3VwKHRoaXMpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5ncm91cE1hbmFnZXIucmVtb3ZlR3JvdXAodGhpcyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdGdldEhlYWRlcnNBbmRSb3dzKCl7XG5cdFx0dmFyIG91dHB1dCA9IFtdO1xuXHRcdFxuXHRcdG91dHB1dC5wdXNoKHRoaXMpO1xuXHRcdFxuXHRcdHRoaXMuX3Zpc1NldCgpO1xuXHRcdFxuXHRcdFxuXHRcdGlmKHRoaXMuY2FsY3MudG9wKXtcblx0XHRcdHRoaXMuY2FsY3MudG9wLmRldGFjaEVsZW1lbnQoKTtcblx0XHRcdHRoaXMuY2FsY3MudG9wLmRlbGV0ZUNlbGxzKCk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRoaXMuY2FsY3MuYm90dG9tKXtcblx0XHRcdHRoaXMuY2FsY3MuYm90dG9tLmRldGFjaEVsZW1lbnQoKTtcblx0XHRcdHRoaXMuY2FsY3MuYm90dG9tLmRlbGV0ZUNlbGxzKCk7XG5cdFx0fVxuXHRcdFxuXHRcdFxuXHRcdFxuXHRcdGlmKHRoaXMudmlzaWJsZSl7XG5cdFx0XHRpZih0aGlzLmdyb3VwTGlzdC5sZW5ndGgpe1xuXHRcdFx0XHR0aGlzLmdyb3VwTGlzdC5mb3JFYWNoKGZ1bmN0aW9uKGdyb3VwKXtcblx0XHRcdFx0XHRvdXRwdXQgPSBvdXRwdXQuY29uY2F0KGdyb3VwLmdldEhlYWRlcnNBbmRSb3dzKCkpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlmKHRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLm9wdGlvbnMuY29sdW1uQ2FsY3MgIT0gXCJ0YWJsZVwiICYmIHRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLm1vZEV4aXN0cyhcImNvbHVtbkNhbGNzXCIpICYmIHRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLm1vZHVsZXMuY29sdW1uQ2FsY3MuaGFzVG9wQ2FsY3MoKSl7XG5cdFx0XHRcdFx0dGhpcy5jYWxjcy50b3AgPSB0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5tb2R1bGVzLmNvbHVtbkNhbGNzLmdlbmVyYXRlVG9wUm93KHRoaXMucm93cyk7XG5cdFx0XHRcdFx0b3V0cHV0LnB1c2godGhpcy5jYWxjcy50b3ApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRvdXRwdXQgPSBvdXRwdXQuY29uY2F0KHRoaXMucm93cyk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZih0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5vcHRpb25zLmNvbHVtbkNhbGNzICE9IFwidGFibGVcIiAmJiAgdGhpcy5ncm91cE1hbmFnZXIudGFibGUubW9kRXhpc3RzKFwiY29sdW1uQ2FsY3NcIikgJiYgdGhpcy5ncm91cE1hbmFnZXIudGFibGUubW9kdWxlcy5jb2x1bW5DYWxjcy5oYXNCb3R0b21DYWxjcygpKXtcblx0XHRcdFx0XHR0aGlzLmNhbGNzLmJvdHRvbSA9IHRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLm1vZHVsZXMuY29sdW1uQ2FsY3MuZ2VuZXJhdGVCb3R0b21Sb3codGhpcy5yb3dzKTtcblx0XHRcdFx0XHRvdXRwdXQucHVzaCh0aGlzLmNhbGNzLmJvdHRvbSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRpZighdGhpcy5ncm91cExpc3QubGVuZ3RoICYmIHRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLm9wdGlvbnMuY29sdW1uQ2FsY3MgIT0gXCJ0YWJsZVwiKXtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKHRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLm1vZEV4aXN0cyhcImNvbHVtbkNhbGNzXCIpKXtcblx0XHRcdFx0XHRpZih0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5tb2R1bGVzLmNvbHVtbkNhbGNzLmhhc1RvcENhbGNzKCkpe1xuXHRcdFx0XHRcdFx0aWYodGhpcy5ncm91cE1hbmFnZXIudGFibGUub3B0aW9ucy5ncm91cENsb3NlZFNob3dDYWxjcyl7XG5cdFx0XHRcdFx0XHRcdHRoaXMuY2FsY3MudG9wID0gdGhpcy5ncm91cE1hbmFnZXIudGFibGUubW9kdWxlcy5jb2x1bW5DYWxjcy5nZW5lcmF0ZVRvcFJvdyh0aGlzLnJvd3MpO1xuXHRcdFx0XHRcdFx0XHRvdXRwdXQucHVzaCh0aGlzLmNhbGNzLnRvcCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKHRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLm1vZHVsZXMuY29sdW1uQ2FsY3MuaGFzQm90dG9tQ2FsY3MoKSl7XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRpZih0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5vcHRpb25zLmdyb3VwQ2xvc2VkU2hvd0NhbGNzKXtcblx0XHRcdFx0XHRcdFx0dGhpcy5jYWxjcy5ib3R0b20gPSB0aGlzLmdyb3VwTWFuYWdlci50YWJsZS5tb2R1bGVzLmNvbHVtbkNhbGNzLmdlbmVyYXRlQm90dG9tUm93KHRoaXMucm93cyk7XG5cdFx0XHRcdFx0XHRcdG91dHB1dC5wdXNoKHRoaXMuY2FsY3MuYm90dG9tKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cdFxuXHRnZXREYXRhKHZpc2libGUsIHRyYW5zZm9ybSl7XG5cdFx0dmFyIG91dHB1dCA9IFtdO1xuXHRcdFxuXHRcdHRoaXMuX3Zpc1NldCgpO1xuXHRcdFxuXHRcdGlmKCF2aXNpYmxlIHx8ICh2aXNpYmxlICYmIHRoaXMudmlzaWJsZSkpe1xuXHRcdFx0dGhpcy5yb3dzLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0XHRvdXRwdXQucHVzaChyb3cuZ2V0RGF0YSh0cmFuc2Zvcm0gfHwgXCJkYXRhXCIpKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cdFxuXHRnZXRSb3dDb3VudCgpe1xuXHRcdHZhciBjb3VudCA9IDA7XG5cdFx0XG5cdFx0aWYodGhpcy5ncm91cExpc3QubGVuZ3RoKXtcblx0XHRcdHRoaXMuZ3JvdXBMaXN0LmZvckVhY2goKGdyb3VwKSA9PiB7XG5cdFx0XHRcdGNvdW50ICs9IGdyb3VwLmdldFJvd0NvdW50KCk7XG5cdFx0XHR9KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb3VudCA9IHRoaXMucm93cy5sZW5ndGg7XG5cdFx0fVxuXHRcdHJldHVybiBjb3VudDtcblx0fVxuXG5cdFxuXHR0b2dnbGVWaXNpYmlsaXR5KCl7XG5cdFx0aWYodGhpcy52aXNpYmxlKXtcblx0XHRcdHRoaXMuaGlkZSgpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuc2hvdygpO1xuXHRcdH1cblx0fVxuXHRcblx0aGlkZSgpe1xuXHRcdHRoaXMudmlzaWJsZSA9IGZhbHNlO1xuXHRcdFxuXHRcdGlmKHRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLnJvd01hbmFnZXIuZ2V0UmVuZGVyTW9kZSgpID09IFwiYmFzaWNcIiAmJiAhdGhpcy5ncm91cE1hbmFnZXIudGFibGUub3B0aW9ucy5wYWdpbmF0aW9uKXtcblx0XHRcdFxuXHRcdFx0dGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJ0YWJ1bGF0b3ItZ3JvdXAtdmlzaWJsZVwiKTtcblx0XHRcdFxuXHRcdFx0aWYodGhpcy5ncm91cExpc3QubGVuZ3RoKXtcblx0XHRcdFx0dGhpcy5ncm91cExpc3QuZm9yRWFjaCgoZ3JvdXApID0+IHtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHR2YXIgcm93cyA9IGdyb3VwLmdldEhlYWRlcnNBbmRSb3dzKCk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0cm93cy5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdFx0XHRcdHJvdy5kZXRhY2hFbGVtZW50KCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5yb3dzLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0XHRcdHZhciByb3dFbCA9IHJvdy5nZXRFbGVtZW50KCk7XG5cdFx0XHRcdFx0cm93RWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChyb3dFbCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLmdyb3VwTWFuYWdlci51cGRhdGVHcm91cFJvd3ModHJ1ZSk7XG5cdFx0XHRcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLmdyb3VwTWFuYWdlci51cGRhdGVHcm91cFJvd3ModHJ1ZSk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLmV4dGVybmFsRXZlbnRzLmRpc3BhdGNoKFwiZ3JvdXBWaXNpYmlsaXR5Q2hhbmdlZFwiLCB0aGlzLmdldENvbXBvbmVudCgpLCBmYWxzZSk7XG5cdH1cblx0XG5cdHNob3coKXtcblx0XHR0aGlzLnZpc2libGUgPSB0cnVlO1xuXHRcdFxuXHRcdGlmKHRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLnJvd01hbmFnZXIuZ2V0UmVuZGVyTW9kZSgpID09IFwiYmFzaWNcIiAmJiAhdGhpcy5ncm91cE1hbmFnZXIudGFibGUub3B0aW9ucy5wYWdpbmF0aW9uKXtcblx0XHRcdFxuXHRcdFx0dGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItZ3JvdXAtdmlzaWJsZVwiKTtcblx0XHRcdFxuXHRcdFx0dmFyIHByZXYgPSB0aGlzLmdlbmVyYXRlRWxlbWVudCgpO1xuXHRcdFx0XG5cdFx0XHRpZih0aGlzLmdyb3VwTGlzdC5sZW5ndGgpe1xuXHRcdFx0XHR0aGlzLmdyb3VwTGlzdC5mb3JFYWNoKChncm91cCkgPT4ge1xuXHRcdFx0XHRcdHZhciByb3dzID0gZ3JvdXAuZ2V0SGVhZGVyc0FuZFJvd3MoKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRyb3dzLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0XHRcdFx0dmFyIHJvd0VsID0gcm93LmdldEVsZW1lbnQoKTtcblx0XHRcdFx0XHRcdHByZXYucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUocm93RWwsIHByZXYubmV4dFNpYmxpbmcpO1xuXHRcdFx0XHRcdFx0cm93LmluaXRpYWxpemUoKTtcblx0XHRcdFx0XHRcdHByZXYgPSByb3dFbDtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdFxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLnJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRcdFx0dmFyIHJvd0VsID0gcm93LmdldEVsZW1lbnQoKTtcblx0XHRcdFx0XHRwcmV2LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHJvd0VsLCBwcmV2Lm5leHRTaWJsaW5nKTtcblx0XHRcdFx0XHRyb3cuaW5pdGlhbGl6ZSgpO1xuXHRcdFx0XHRcdHByZXYgPSByb3dFbDtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHRoaXMuZ3JvdXBNYW5hZ2VyLnVwZGF0ZUdyb3VwUm93cyh0cnVlKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLmdyb3VwTWFuYWdlci51cGRhdGVHcm91cFJvd3ModHJ1ZSk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuZ3JvdXBNYW5hZ2VyLnRhYmxlLmV4dGVybmFsRXZlbnRzLmRpc3BhdGNoKFwiZ3JvdXBWaXNpYmlsaXR5Q2hhbmdlZFwiLCB0aGlzLmdldENvbXBvbmVudCgpLCB0cnVlKTtcblx0fVxuXHRcblx0X3Zpc1NldCgpe1xuXHRcdHZhciBkYXRhID0gW107XG5cdFx0XG5cdFx0aWYodHlwZW9mIHRoaXMudmlzaWJsZSA9PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0XG5cdFx0XHR0aGlzLnJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3cpe1xuXHRcdFx0XHRkYXRhLnB1c2gocm93LmdldERhdGEoKSk7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0dGhpcy52aXNpYmxlID0gdGhpcy52aXNpYmxlKHRoaXMua2V5LCB0aGlzLmdldFJvd0NvdW50KCksIGRhdGEsIHRoaXMuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdH1cblx0fVxuXHRcblx0Z2V0Um93R3JvdXAocm93KXtcblx0XHR2YXIgbWF0Y2ggPSBmYWxzZTtcblx0XHRpZih0aGlzLmdyb3VwTGlzdC5sZW5ndGgpe1xuXHRcdFx0dGhpcy5ncm91cExpc3QuZm9yRWFjaChmdW5jdGlvbihncm91cCl7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBncm91cC5nZXRSb3dHcm91cChyb3cpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYocmVzdWx0KXtcblx0XHRcdFx0XHRtYXRjaCA9IHJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYodGhpcy5yb3dzLmZpbmQoZnVuY3Rpb24oaXRlbSl7XG5cdFx0XHRcdHJldHVybiBpdGVtID09PSByb3c7XG5cdFx0XHR9KSl7XG5cdFx0XHRcdG1hdGNoID0gdGhpcztcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIG1hdGNoO1xuXHR9XG5cdFxuXHRnZXRTdWJHcm91cHMoY29tcG9uZW50KXtcblx0XHR2YXIgb3V0cHV0ID0gW107XG5cdFx0XG5cdFx0dGhpcy5ncm91cExpc3QuZm9yRWFjaChmdW5jdGlvbihjaGlsZCl7XG5cdFx0XHRvdXRwdXQucHVzaChjb21wb25lbnQgPyBjaGlsZC5nZXRDb21wb25lbnQoKSA6IGNoaWxkKTtcblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cdFxuXHRnZXRSb3dzKGNvbXBvbmVudCwgaW5jbHVkZUNoaWxkcmVuKXtcblx0XHR2YXIgb3V0cHV0ID0gW107XG5cdFx0XG5cdFx0aWYoaW5jbHVkZUNoaWxkcmVuICYmIHRoaXMuZ3JvdXBMaXN0Lmxlbmd0aCl7XG5cdFx0XHR0aGlzLmdyb3VwTGlzdC5mb3JFYWNoKChncm91cCkgPT4ge1xuXHRcdFx0XHRvdXRwdXQgPSBvdXRwdXQuY29uY2F0KGdyb3VwLmdldFJvd3MoY29tcG9uZW50LCBpbmNsdWRlQ2hpbGRyZW4pKTtcblx0XHRcdH0pO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMucm93cy5mb3JFYWNoKGZ1bmN0aW9uKHJvdyl7XG5cdFx0XHRcdG91dHB1dC5wdXNoKGNvbXBvbmVudCA/IHJvdy5nZXRDb21wb25lbnQoKSA6IHJvdyk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXHRcblx0Z2VuZXJhdGVHcm91cEhlYWRlckNvbnRlbnRzKCl7XG5cdFx0dmFyIGRhdGEgPSBbXTtcblx0XHRcblx0XHR2YXIgcm93cyA9IHRoaXMuZ2V0Um93cyhmYWxzZSwgdHJ1ZSk7XG5cdFx0XG5cdFx0cm93cy5mb3JFYWNoKGZ1bmN0aW9uKHJvdyl7XG5cdFx0XHRkYXRhLnB1c2gocm93LmdldERhdGEoKSk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0dGhpcy5lbGVtZW50Q29udGVudHMgPSB0aGlzLmdlbmVyYXRvcih0aGlzLmtleSwgdGhpcy5nZXRSb3dDb3VudCgpLCBkYXRhLCB0aGlzLmdldENvbXBvbmVudCgpKTtcblx0XHRcblx0XHR3aGlsZSh0aGlzLmVsZW1lbnQuZmlyc3RDaGlsZCkgdGhpcy5lbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudC5maXJzdENoaWxkKTtcblx0XHRcblx0XHRpZih0eXBlb2YgdGhpcy5lbGVtZW50Q29udGVudHMgPT09IFwic3RyaW5nXCIpe1xuXHRcdFx0dGhpcy5lbGVtZW50LmlubmVySFRNTCA9IHRoaXMuZWxlbWVudENvbnRlbnRzO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmVsZW1lbnRDb250ZW50cyk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuZWxlbWVudC5pbnNlcnRCZWZvcmUodGhpcy5hcnJvd0VsZW1lbnQsIHRoaXMuZWxlbWVudC5maXJzdENoaWxkKTtcblx0fVxuXHRcblx0Z2V0UGF0aChwYXRoID0gW10pIHtcblx0XHRwYXRoLnVuc2hpZnQodGhpcy5rZXkpO1xuXHRcdGlmKHRoaXMucGFyZW50KSB7XG5cdFx0XHR0aGlzLnBhcmVudC5nZXRQYXRoKHBhdGgpO1xuXHRcdH1cblx0XHRyZXR1cm4gcGF0aDtcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8gU3RhbmRhcmQgUm93IEZ1bmN0aW9ucyAvLy8vLy8vLy8vLy8vL1xuXHRcblx0Z2V0RWxlbWVudCgpe1xuXHRcdHJldHVybiB0aGlzLmVsZW1lbnRDb250ZW50cyA/IHRoaXMuZWxlbWVudCA6IHRoaXMuZ2VuZXJhdGVFbGVtZW50KCk7XG5cdH1cblx0XG5cdGdlbmVyYXRlRWxlbWVudCgpe1xuXHRcdHRoaXMuYWRkQmluZGluZ3MgPSBmYWxzZTtcblx0XHRcblx0XHR0aGlzLl92aXNTZXQoKTtcblx0XHRcblx0XHRpZih0aGlzLnZpc2libGUpe1xuXHRcdFx0dGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItZ3JvdXAtdmlzaWJsZVwiKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcInRhYnVsYXRvci1ncm91cC12aXNpYmxlXCIpO1xuXHRcdH1cblx0XHRcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5lbGVtZW50LmNoaWxkTm9kZXMubGVuZ3RoOyArK2kpe1xuXHRcdFx0dGhpcy5lbGVtZW50LmNoaWxkTm9kZXNbaV0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQuY2hpbGROb2Rlc1tpXSk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuZ2VuZXJhdGVHcm91cEhlYWRlckNvbnRlbnRzKCk7XG5cdFx0XG5cdFx0Ly8gdGhpcy5hZGRCaW5kaW5ncygpO1xuXHRcdFxuXHRcdHJldHVybiB0aGlzLmVsZW1lbnQ7XG5cdH1cblx0XG5cdGRldGFjaEVsZW1lbnQoKXtcblx0XHRpZiAodGhpcy5lbGVtZW50ICYmIHRoaXMuZWxlbWVudC5wYXJlbnROb2RlKXtcblx0XHRcdHRoaXMuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCk7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL25vcm1hbGl6ZSB0aGUgaGVpZ2h0IG9mIGVsZW1lbnRzIGluIHRoZSByb3dcblx0bm9ybWFsaXplSGVpZ2h0KCl7XG5cdFx0dGhpcy5zZXRIZWlnaHQodGhpcy5lbGVtZW50LmNsaWVudEhlaWdodCk7XG5cdH1cblx0XG5cdGluaXRpYWxpemUoZm9yY2Upe1xuXHRcdGlmKCF0aGlzLmluaXRpYWxpemVkIHx8IGZvcmNlKXtcblx0XHRcdHRoaXMubm9ybWFsaXplSGVpZ2h0KCk7XG5cdFx0XHR0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcblx0XHR9XG5cdH1cblx0XG5cdHJlaW5pdGlhbGl6ZSgpe1xuXHRcdHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblx0XHR0aGlzLmhlaWdodCA9IDA7XG5cdFx0XG5cdFx0aWYoSGVscGVycy5lbFZpc2libGUodGhpcy5lbGVtZW50KSl7XG5cdFx0XHR0aGlzLmluaXRpYWxpemUodHJ1ZSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRzZXRIZWlnaHQoaGVpZ2h0KXtcblx0XHRpZih0aGlzLmhlaWdodCAhPSBoZWlnaHQpe1xuXHRcdFx0dGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG5cdFx0XHR0aGlzLm91dGVySGVpZ2h0ID0gdGhpcy5lbGVtZW50Lm9mZnNldEhlaWdodDtcblx0XHR9XG5cdH1cblx0XG5cdC8vcmV0dXJuIHJvd3Mgb3V0ZXIgaGVpZ2h0XG5cdGdldEhlaWdodCgpe1xuXHRcdHJldHVybiB0aGlzLm91dGVySGVpZ2h0O1xuXHR9XG5cdFxuXHRnZXRHcm91cCgpe1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cdFxuXHRyZWluaXRpYWxpemVIZWlnaHQoKXt9XG5cdFxuXHRjYWxjSGVpZ2h0KCl7fVxuXHRcblx0c2V0Q2VsbEhlaWdodCgpe31cblx0XG5cdGNsZWFyQ2VsbEhlaWdodCgpe31cblx0XG5cdGRlaW5pdGlhbGl6ZUhlaWdodCgpe31cblxuXHRyZW5kZXJlZCgpe31cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8gT2JqZWN0IEdlbmVyYXRpb24gLy8vLy8vLy8vLy8vLy8vLy9cblx0Z2V0Q29tcG9uZW50KCl7XG5cdFx0aWYoIXRoaXMuY29tcG9uZW50KXtcblx0XHRcdHRoaXMuY29tcG9uZW50ID0gbmV3IEdyb3VwQ29tcG9uZW50KHRoaXMpO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gdGhpcy5jb21wb25lbnQ7XG5cdH1cbn1cblxuY2xhc3MgR3JvdXBSb3dzIGV4dGVuZHMgTW9kdWxle1xuXHRcblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblx0XHRcblx0XHR0aGlzLmdyb3VwSURMb29rdXBzID0gZmFsc2U7IC8vZW5hYmxlIHRhYmxlIGdyb3VwaW5nIGFuZCBzZXQgZmllbGQgdG8gZ3JvdXAgYnlcblx0XHR0aGlzLnN0YXJ0T3BlbiA9IFtmdW5jdGlvbigpe3JldHVybiBmYWxzZTt9XTsgLy9zdGFydGluZyBzdGF0ZSBvZiBncm91cFxuXHRcdHRoaXMuaGVhZGVyR2VuZXJhdG9yID0gW2Z1bmN0aW9uKCl7cmV0dXJuIFwiXCI7fV07XG5cdFx0dGhpcy5ncm91cExpc3QgPSBbXTsgLy9vcmRlcmVkIGxpc3Qgb2YgZ3JvdXBzXG5cdFx0dGhpcy5hbGxvd2VkVmFsdWVzID0gZmFsc2U7XG5cdFx0dGhpcy5ncm91cHMgPSB7fTsgLy9ob2xkIHJvdyBncm91cHNcblx0XHRcblx0XHR0aGlzLmRpc3BsYXlIYW5kbGVyID0gdGhpcy5nZXRSb3dzLmJpbmQodGhpcyk7XG5cblx0XHR0aGlzLmJsb2NrUmVkcmF3ID0gZmFsc2U7XG5cdFx0XG5cdFx0Ly9yZWdpc3RlciB0YWJsZSBvcHRpb25zXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZ3JvdXBCeVwiLCBmYWxzZSk7IC8vZW5hYmxlIHRhYmxlIGdyb3VwaW5nIGFuZCBzZXQgZmllbGQgdG8gZ3JvdXAgYnlcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJncm91cFN0YXJ0T3BlblwiLCB0cnVlKTsgLy9zdGFydGluZyBzdGF0ZSBvZiBncm91cFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImdyb3VwVmFsdWVzXCIsIGZhbHNlKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJncm91cFVwZGF0ZU9uQ2VsbEVkaXRcIiwgZmFsc2UpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImdyb3VwSGVhZGVyXCIsIGZhbHNlKTsgLy9oZWFkZXIgZ2VuZXJhdGlvbiBmdW5jdGlvblxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImdyb3VwSGVhZGVyUHJpbnRcIiwgbnVsbCk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZ3JvdXBIZWFkZXJDbGlwYm9hcmRcIiwgbnVsbCk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZ3JvdXBIZWFkZXJIdG1sT3V0cHV0XCIsIG51bGwpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImdyb3VwSGVhZGVyRG93bmxvYWRcIiwgbnVsbCk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZ3JvdXBUb2dnbGVFbGVtZW50XCIsIFwiYXJyb3dcIik7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZ3JvdXBDbG9zZWRTaG93Q2FsY3NcIiwgZmFsc2UpO1xuXHRcdFxuXHRcdC8vcmVnaXN0ZXIgdGFibGUgZnVuY3Rpb25zXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJzZXRHcm91cEJ5XCIsIHRoaXMuc2V0R3JvdXBCeS5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcInNldEdyb3VwVmFsdWVzXCIsIHRoaXMuc2V0R3JvdXBWYWx1ZXMuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJzZXRHcm91cFN0YXJ0T3BlblwiLCB0aGlzLnNldEdyb3VwU3RhcnRPcGVuLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwic2V0R3JvdXBIZWFkZXJcIiwgdGhpcy5zZXRHcm91cEhlYWRlci5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcImdldEdyb3Vwc1wiLCB0aGlzLnVzZXJHZXRHcm91cHMuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJnZXRHcm91cGVkRGF0YVwiLCB0aGlzLnVzZXJHZXRHcm91cGVkRGF0YS5iaW5kKHRoaXMpKTtcblx0XHRcblx0XHQvL3JlZ2lzdGVyIGNvbXBvbmVudCBmdW5jdGlvbnNcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJyb3dcIiwgXCJnZXRHcm91cFwiLCB0aGlzLnJvd0dldEdyb3VwLmJpbmQodGhpcykpO1xuXHR9XG5cdFxuXHQvL2luaXRpYWxpemUgZ3JvdXAgY29uZmlndXJhdGlvblxuXHRpbml0aWFsaXplKCl7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJ0YWJsZS1kZXN0cm95XCIsIHRoaXMuX2Jsb2NrUmVkcmF3aW5nLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwicm93cy13aXBlXCIsIHRoaXMuX2Jsb2NrUmVkcmF3aW5nLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwicm93cy13aXBlZFwiLCB0aGlzLl9yZXN0b3JlX3JlZHJhd2luZy5iaW5kKHRoaXMpKTtcblxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5ncm91cEJ5KXtcblx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5ncm91cFVwZGF0ZU9uQ2VsbEVkaXQpe1xuXHRcdFx0XHR0aGlzLnN1YnNjcmliZShcImNlbGwtdmFsdWUtdXBkYXRlZFwiLCB0aGlzLmNlbGxVcGRhdGVkLmJpbmQodGhpcykpO1xuXHRcdFx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1kYXRhLWNoYW5nZWRcIiwgdGhpcy5yZWFzc2lnblJvd1RvR3JvdXAuYmluZCh0aGlzKSwgMCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwidGFibGUtYnVpbHRcIiwgdGhpcy5jb25maWd1cmVHcm91cFNldHVwLmJpbmQodGhpcykpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1kZWxldGluZ1wiLCB0aGlzLnJvd0RlbGV0aW5nLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctZGVsZXRlZFwiLCB0aGlzLnJvd3NVcGRhdGVkLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJzY3JvbGwtaG9yaXpvbnRhbFwiLCB0aGlzLnNjcm9sbEhlYWRlcnMuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInJvd3Mtd2lwZVwiLCB0aGlzLndpcGUuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInJvd3MtYWRkZWRcIiwgdGhpcy5yb3dzVXBkYXRlZC5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LW1vdmluZ1wiLCB0aGlzLnJvd01vdmluZy5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWFkZGluZy1pbmRleFwiLCB0aGlzLnJvd0FkZGluZ0luZGV4LmJpbmQodGhpcykpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInJvd3Mtc2FtcGxlXCIsIHRoaXMucm93U2FtcGxlLmJpbmQodGhpcykpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInJlbmRlci12aXJ0dWFsLWZpbGxcIiwgdGhpcy52aXJ0dWFsUmVuZGVyRmlsbC5iaW5kKHRoaXMpKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5yZWdpc3RlckRpc3BsYXlIYW5kbGVyKHRoaXMuZGlzcGxheUhhbmRsZXIsIDIwKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG5cdFx0fVxuXHR9XG5cdFxuXHRfYmxvY2tSZWRyYXdpbmcoKXtcblx0XHR0aGlzLmJsb2NrUmVkcmF3ID0gdHJ1ZTtcblx0fVxuXG5cdF9yZXN0b3JlX3JlZHJhd2luZygpe1xuXHRcdHRoaXMuYmxvY2tSZWRyYXcgPSBmYWxzZTtcblx0fVxuXG5cdGNvbmZpZ3VyZUdyb3VwU2V0dXAoKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBCeSl7XG5cdFx0XHR2YXIgZ3JvdXBCeSA9IHRoaXMudGFibGUub3B0aW9ucy5ncm91cEJ5LFxuXHRcdFx0c3RhcnRPcGVuID0gdGhpcy50YWJsZS5vcHRpb25zLmdyb3VwU3RhcnRPcGVuLFxuXHRcdFx0Z3JvdXBIZWFkZXIgPSB0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBIZWFkZXI7XG5cdFx0XHRcblx0XHRcdHRoaXMuYWxsb3dlZFZhbHVlcyA9IHRoaXMudGFibGUub3B0aW9ucy5ncm91cFZhbHVlcztcblx0XHRcdFxuXHRcdFx0aWYoQXJyYXkuaXNBcnJheShncm91cEJ5KSAmJiBBcnJheS5pc0FycmF5KGdyb3VwSGVhZGVyKSAmJiBncm91cEJ5Lmxlbmd0aCA+IGdyb3VwSGVhZGVyLmxlbmd0aCl7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIkVycm9yIGNyZWF0aW5nIGdyb3VwIGhlYWRlcnMsIGdyb3VwSGVhZGVyIGFycmF5IGlzIHNob3J0ZXIgdGhhbiBncm91cEJ5IGFycmF5XCIpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLmhlYWRlckdlbmVyYXRvciA9IFtmdW5jdGlvbigpe3JldHVybiBcIlwiO31dO1xuXHRcdFx0dGhpcy5zdGFydE9wZW4gPSBbZnVuY3Rpb24oKXtyZXR1cm4gZmFsc2U7fV07IC8vc3RhcnRpbmcgc3RhdGUgb2YgZ3JvdXBcblx0XHRcdFxuXHRcdFx0dGhpcy5sYW5nQmluZChcImdyb3Vwc3xpdGVtXCIsIChsYW5nVmFsdWUsIGxhbmcpID0+IHtcblx0XHRcdFx0dGhpcy5oZWFkZXJHZW5lcmF0b3JbMF0gPSAodmFsdWUsIGNvdW50LCBkYXRhKSA9PiB7IC8vaGVhZGVyIGxheW91dCBmdW5jdGlvblxuXHRcdFx0XHRcdHJldHVybiAodHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiID8gXCJcIiA6IHZhbHVlKSArIFwiPHNwYW4+KFwiICsgY291bnQgKyBcIiBcIiArICgoY291bnQgPT09IDEpID8gbGFuZ1ZhbHVlIDogbGFuZy5ncm91cHMuaXRlbXMpICsgXCIpPC9zcGFuPlwiO1xuXHRcdFx0XHR9O1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdHRoaXMuZ3JvdXBJRExvb2t1cHMgPSBbXTtcblx0XHRcdFxuXHRcdFx0aWYoZ3JvdXBCeSl7XG5cdFx0XHRcdGlmKHRoaXMudGFibGUubW9kRXhpc3RzKFwiY29sdW1uQ2FsY3NcIikgJiYgdGhpcy50YWJsZS5vcHRpb25zLmNvbHVtbkNhbGNzICE9IFwidGFibGVcIiAmJiB0aGlzLnRhYmxlLm9wdGlvbnMuY29sdW1uQ2FsY3MgIT0gXCJib3RoXCIpe1xuXHRcdFx0XHRcdHRoaXMudGFibGUubW9kdWxlcy5jb2x1bW5DYWxjcy5yZW1vdmVDYWxjcygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlmKHRoaXMudGFibGUubW9kRXhpc3RzKFwiY29sdW1uQ2FsY3NcIikgJiYgdGhpcy50YWJsZS5vcHRpb25zLmNvbHVtbkNhbGNzICE9IFwiZ3JvdXBcIil7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0dmFyIGNvbHMgPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0UmVhbENvbHVtbnMoKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRjb2xzLmZvckVhY2goKGNvbCkgPT4ge1xuXHRcdFx0XHRcdFx0aWYoY29sLmRlZmluaXRpb24udG9wQ2FsYyl7XG5cdFx0XHRcdFx0XHRcdHRoaXMudGFibGUubW9kdWxlcy5jb2x1bW5DYWxjcy5pbml0aWFsaXplVG9wUm93KCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGlmKGNvbC5kZWZpbml0aW9uLmJvdHRvbUNhbGMpe1xuXHRcdFx0XHRcdFx0XHR0aGlzLnRhYmxlLm1vZHVsZXMuY29sdW1uQ2FsY3MuaW5pdGlhbGl6ZUJvdHRvbVJvdygpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKCFBcnJheS5pc0FycmF5KGdyb3VwQnkpKXtcblx0XHRcdFx0Z3JvdXBCeSA9IFtncm91cEJ5XTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Z3JvdXBCeS5mb3JFYWNoKChncm91cCwgaSkgPT4ge1xuXHRcdFx0XHR2YXIgbG9va3VwRnVuYywgY29sdW1uO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYodHlwZW9mIGdyb3VwID09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRcdFx0bG9va3VwRnVuYyA9IGdyb3VwO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0Y29sdW1uID0gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmdldENvbHVtbkJ5RmllbGQoZ3JvdXApO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKGNvbHVtbil7XG5cdFx0XHRcdFx0XHRsb29rdXBGdW5jID0gZnVuY3Rpb24oZGF0YSl7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBjb2x1bW4uZ2V0RmllbGRWYWx1ZShkYXRhKTtcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0bG9va3VwRnVuYyA9IGZ1bmN0aW9uKGRhdGEpe1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZGF0YVtncm91cF07XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5ncm91cElETG9va3Vwcy5wdXNoKHtcblx0XHRcdFx0XHRmaWVsZDogdHlwZW9mIGdyb3VwID09PSBcImZ1bmN0aW9uXCIgPyBmYWxzZSA6IGdyb3VwLFxuXHRcdFx0XHRcdGZ1bmM6bG9va3VwRnVuYyxcblx0XHRcdFx0XHR2YWx1ZXM6dGhpcy5hbGxvd2VkVmFsdWVzID8gdGhpcy5hbGxvd2VkVmFsdWVzW2ldIDogZmFsc2UsXG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdGlmKHN0YXJ0T3Blbil7XG5cdFx0XHRcdGlmKCFBcnJheS5pc0FycmF5KHN0YXJ0T3Blbikpe1xuXHRcdFx0XHRcdHN0YXJ0T3BlbiA9IFtzdGFydE9wZW5dO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRzdGFydE9wZW4uZm9yRWFjaCgobGV2ZWwpID0+IHtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLnN0YXJ0T3BlbiA9IHN0YXJ0T3Blbjtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoZ3JvdXBIZWFkZXIpe1xuXHRcdFx0XHR0aGlzLmhlYWRlckdlbmVyYXRvciA9IEFycmF5LmlzQXJyYXkoZ3JvdXBIZWFkZXIpID8gZ3JvdXBIZWFkZXIgOiBbZ3JvdXBIZWFkZXJdO1xuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuZ3JvdXBMaXN0ID0gW107XG5cdFx0XHR0aGlzLmdyb3VwcyA9IHt9O1xuXHRcdH1cblx0fVxuXHRcblx0cm93U2FtcGxlKHJvd3MsIHByZXZWYWx1ZSl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQnkpe1xuXHRcdFx0dmFyIGdyb3VwID0gdGhpcy5nZXRHcm91cHMoZmFsc2UpWzBdO1xuXHRcdFx0XG5cdFx0XHRwcmV2VmFsdWUucHVzaChncm91cC5nZXRSb3dzKGZhbHNlKVswXSk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBwcmV2VmFsdWU7XG5cdH1cblx0XG5cdHZpcnR1YWxSZW5kZXJGaWxsKCl7XG5cdFx0dmFyIGVsID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLnRhYmxlRWxlbWVudDtcblx0XHR2YXIgcm93cyA9IHRoaXMudGFibGUucm93TWFuYWdlci5nZXRWaXNpYmxlUm93cygpO1xuXHRcdFxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5ncm91cEJ5KXtcblx0XHRcdHJvd3MgPSByb3dzLmZpbHRlcigocm93KSA9PiB7XG5cdFx0XHRcdHJldHVybiByb3cudHlwZSAhPT0gXCJncm91cFwiO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdGVsLnN0eWxlLm1pbldpZHRoID0gIXJvd3MubGVuZ3RoID8gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmdldFdpZHRoKCkgKyBcInB4XCIgOiBcIlwiO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJldHVybiByb3dzO1xuXHRcdH1cblx0fVxuXHRcblx0cm93QWRkaW5nSW5kZXgocm93LCBpbmRleCwgdG9wKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBCeSl7XG5cdFx0XHR0aGlzLmFzc2lnblJvd1RvR3JvdXAocm93KTtcblx0XHRcdFxuXHRcdFx0dmFyIGdyb3VwUm93cyA9IHJvdy5tb2R1bGVzLmdyb3VwLnJvd3M7XG5cdFx0XHRcblx0XHRcdGlmKGdyb3VwUm93cy5sZW5ndGggPiAxKXtcblx0XHRcdFx0aWYoIWluZGV4IHx8IChpbmRleCAmJiBncm91cFJvd3MuaW5kZXhPZihpbmRleCkgPT0gLTEpKXtcblx0XHRcdFx0XHRpZih0b3Ape1xuXHRcdFx0XHRcdFx0aWYoZ3JvdXBSb3dzWzBdICE9PSByb3cpe1xuXHRcdFx0XHRcdFx0XHRpbmRleCA9IGdyb3VwUm93c1swXTtcblx0XHRcdFx0XHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLm1vdmVSb3dJbkFycmF5KHJvdy5tb2R1bGVzLmdyb3VwLnJvd3MsIHJvdywgaW5kZXgsICF0b3ApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdGlmKGdyb3VwUm93c1tncm91cFJvd3MubGVuZ3RoIC0xXSAhPT0gcm93KXtcblx0XHRcdFx0XHRcdFx0aW5kZXggPSBncm91cFJvd3NbZ3JvdXBSb3dzLmxlbmd0aCAtMV07XG5cdFx0XHRcdFx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5tb3ZlUm93SW5BcnJheShyb3cubW9kdWxlcy5ncm91cC5yb3dzLCByb3csIGluZGV4LCAhdG9wKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIubW92ZVJvd0luQXJyYXkocm93Lm1vZHVsZXMuZ3JvdXAucm93cywgcm93LCBpbmRleCwgIXRvcCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0cmV0dXJuIGluZGV4O1xuXHRcdH1cblx0fVxuXHRcblx0dHJhY2tDaGFuZ2VzKCl7XG5cdFx0dGhpcy5kaXNwYXRjaChcImdyb3VwLWNoYW5nZWRcIik7XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLyBUYWJsZSBGdW5jdGlvbnMgLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHRzZXRHcm91cEJ5KGdyb3Vwcyl7XG5cdFx0dGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQnkgPSBncm91cHM7XG5cdFx0XG5cdFx0aWYoIXRoaXMuaW5pdGlhbGl6ZWQpe1xuXHRcdFx0dGhpcy5pbml0aWFsaXplKCk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuY29uZmlndXJlR3JvdXBTZXR1cCgpO1xuXG5cdFx0aWYoIWdyb3VwcyAmJiB0aGlzLnRhYmxlLm1vZEV4aXN0cyhcImNvbHVtbkNhbGNzXCIpICYmIHRoaXMudGFibGUub3B0aW9ucy5jb2x1bW5DYWxjcyA9PT0gdHJ1ZSl7XG5cdFx0XHR0aGlzLnRhYmxlLm1vZHVsZXMuY29sdW1uQ2FsY3MucmVpbml0aWFsaXplQ2FsY3MoKTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5yZWZyZXNoRGF0YSgpO1xuXHRcdFxuXHRcdHRoaXMudHJhY2tDaGFuZ2VzKCk7XG5cdH1cblx0XG5cdHNldEdyb3VwVmFsdWVzKGdyb3VwVmFsdWVzKXtcblx0XHR0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBWYWx1ZXMgPSBncm91cFZhbHVlcztcblx0XHR0aGlzLmNvbmZpZ3VyZUdyb3VwU2V0dXAoKTtcblx0XHR0aGlzLnJlZnJlc2hEYXRhKCk7XG5cdFx0XG5cdFx0dGhpcy50cmFja0NoYW5nZXMoKTtcblx0fVxuXHRcblx0c2V0R3JvdXBTdGFydE9wZW4odmFsdWVzKXtcblx0XHR0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBTdGFydE9wZW4gPSB2YWx1ZXM7XG5cdFx0dGhpcy5jb25maWd1cmVHcm91cFNldHVwKCk7XG5cdFx0XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQnkpe1xuXHRcdFx0dGhpcy5yZWZyZXNoRGF0YSgpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnRyYWNrQ2hhbmdlcygpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkdyb3VwaW5nIFVwZGF0ZSAtIGNhbnQgcmVmcmVzaCB2aWV3LCBubyBncm91cHMgaGF2ZSBiZWVuIHNldFwiKTtcblx0XHR9XG5cdH1cblx0XG5cdHNldEdyb3VwSGVhZGVyKHZhbHVlcyl7XG5cdFx0dGhpcy50YWJsZS5vcHRpb25zLmdyb3VwSGVhZGVyID0gdmFsdWVzO1xuXHRcdHRoaXMuY29uZmlndXJlR3JvdXBTZXR1cCgpO1xuXHRcdFxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5ncm91cEJ5KXtcblx0XHRcdHRoaXMucmVmcmVzaERhdGEoKTtcblx0XHRcdFxuXHRcdFx0dGhpcy50cmFja0NoYW5nZXMoKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJHcm91cGluZyBVcGRhdGUgLSBjYW50IHJlZnJlc2ggdmlldywgbm8gZ3JvdXBzIGhhdmUgYmVlbiBzZXRcIik7XG5cdFx0fVxuXHR9XG5cdFxuXHR1c2VyR2V0R3JvdXBzKHZhbHVlcyl7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0R3JvdXBzKHRydWUpO1xuXHR9XG5cdFxuXHQvLyBnZXQgZ3JvdXBlZCB0YWJsZSBkYXRhIGluIHRoZSBzYW1lIGZvcm1hdCBhcyBnZXREYXRhKClcblx0dXNlckdldEdyb3VwZWREYXRhKCl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUub3B0aW9ucy5ncm91cEJ5ID8gdGhpcy5nZXRHcm91cGVkRGF0YSgpIDogdGhpcy5nZXREYXRhKCk7XG5cdH1cblx0XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vIENvbXBvbmVudCBGdW5jdGlvbnMgLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0cm93R2V0R3JvdXAocm93KXtcblx0XHRyZXR1cm4gcm93Lm1vZHVsZXMuZ3JvdXAgPyByb3cubW9kdWxlcy5ncm91cC5nZXRDb21wb25lbnQoKSA6IGZhbHNlO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8gSW50ZXJuYWwgTG9naWMgLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0cm93TW92aW5nKGZyb20sIHRvLCBhZnRlcil7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQnkpe1xuXHRcdFx0aWYoIWFmdGVyICYmIHRvIGluc3RhbmNlb2YgR3JvdXApe1xuXHRcdFx0XHR0byA9IHRoaXMudGFibGUucm93TWFuYWdlci5wcmV2RGlzcGxheVJvdyhmcm9tKSB8fCB0bztcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dmFyIHRvR3JvdXAgPSB0byBpbnN0YW5jZW9mIEdyb3VwID8gdG8gOiB0by5tb2R1bGVzLmdyb3VwO1xuXHRcdFx0dmFyIGZyb21Hcm91cCA9IGZyb20gaW5zdGFuY2VvZiBHcm91cCA/IGZyb20gOiBmcm9tLm1vZHVsZXMuZ3JvdXA7XG5cdFx0XHRcblx0XHRcdGlmKHRvR3JvdXAgPT09IGZyb21Hcm91cCl7XG5cdFx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5tb3ZlUm93SW5BcnJheSh0b0dyb3VwLnJvd3MsIGZyb20sIHRvLCBhZnRlcik7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlmKGZyb21Hcm91cCl7XG5cdFx0XHRcdFx0ZnJvbUdyb3VwLnJlbW92ZVJvdyhmcm9tKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0dG9Hcm91cC5pbnNlcnRSb3coZnJvbSwgdG8sIGFmdGVyKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdFxuXHRyb3dEZWxldGluZyhyb3cpe1xuXHRcdC8vcmVtb3ZlIGZyb20gZ3JvdXBcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBCeSAmJiByb3cubW9kdWxlcy5ncm91cCl7XG5cdFx0XHRyb3cubW9kdWxlcy5ncm91cC5yZW1vdmVSb3cocm93KTtcblx0XHR9XG5cdH1cblx0XG5cdHJvd3NVcGRhdGVkKHJvdyl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQnkpe1xuXHRcdFx0dGhpcy51cGRhdGVHcm91cFJvd3ModHJ1ZSk7XG5cdFx0fVx0XG5cdH1cblx0XG5cdGNlbGxVcGRhdGVkKGNlbGwpe1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5ncm91cEJ5KXtcblx0XHRcdHRoaXMucmVhc3NpZ25Sb3dUb0dyb3VwKGNlbGwucm93KTtcblx0XHR9XG5cdH1cblx0XG5cdC8vcmV0dXJuIGFwcHJvcHJpYXRlIHJvd3Mgd2l0aCBncm91cCBoZWFkZXJzXG5cdGdldFJvd3Mocm93cyl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQnkgJiYgdGhpcy5ncm91cElETG9va3Vwcy5sZW5ndGgpe1xuXHRcdFx0XG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJkYXRhR3JvdXBpbmdcIik7XG5cdFx0XHRcblx0XHRcdHRoaXMuZ2VuZXJhdGVHcm91cHMocm93cyk7XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMuc3Vic2NyaWJlZEV4dGVybmFsKFwiZGF0YUdyb3VwZWRcIikpe1xuXHRcdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJkYXRhR3JvdXBlZFwiLCB0aGlzLmdldEdyb3Vwcyh0cnVlKSk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHJldHVybiB0aGlzLnVwZGF0ZUdyb3VwUm93cygpO1xuXHRcdFx0XG5cdFx0fWVsc2Uge1xuXHRcdFx0cmV0dXJuIHJvd3Muc2xpY2UoMCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRnZXRHcm91cHMoY29tcG9uZW50KXtcblx0XHR2YXIgZ3JvdXBDb21wb25lbnRzID0gW107XG5cdFx0XG5cdFx0dGhpcy5ncm91cExpc3QuZm9yRWFjaChmdW5jdGlvbihncm91cCl7XG5cdFx0XHRncm91cENvbXBvbmVudHMucHVzaChjb21wb25lbnQgPyBncm91cC5nZXRDb21wb25lbnQoKSA6IGdyb3VwKTtcblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gZ3JvdXBDb21wb25lbnRzO1xuXHR9XG5cdFxuXHRnZXRDaGlsZEdyb3Vwcyhncm91cCl7XG5cdFx0dmFyIGdyb3VwQ29tcG9uZW50cyA9IFtdO1xuXHRcdFxuXHRcdGlmKCFncm91cCl7XG5cdFx0XHRncm91cCA9IHRoaXM7XG5cdFx0fVxuXHRcdFxuXHRcdGdyb3VwLmdyb3VwTGlzdC5mb3JFYWNoKChjaGlsZCkgPT4ge1xuXHRcdFx0aWYoY2hpbGQuZ3JvdXBMaXN0Lmxlbmd0aCl7XG5cdFx0XHRcdGdyb3VwQ29tcG9uZW50cyA9IGdyb3VwQ29tcG9uZW50cy5jb25jYXQodGhpcy5nZXRDaGlsZEdyb3VwcyhjaGlsZCkpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRncm91cENvbXBvbmVudHMucHVzaChjaGlsZCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0cmV0dXJuIGdyb3VwQ29tcG9uZW50cztcblx0fVxuXHRcblx0d2lwZSgpe1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5ncm91cEJ5KXtcblx0XHRcdHRoaXMuZ3JvdXBMaXN0LmZvckVhY2goZnVuY3Rpb24oZ3JvdXApe1xuXHRcdFx0XHRncm91cC53aXBlKCk7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0dGhpcy5ncm91cExpc3QgPSBbXTtcblx0XHRcdHRoaXMuZ3JvdXBzID0ge307XG5cdFx0fVxuXHR9XG5cdFxuXHRwdWxsR3JvdXBMaXN0RGF0YShncm91cExpc3QpIHtcblx0XHR2YXIgZ3JvdXBMaXN0RGF0YSA9IFtdO1xuXHRcdFxuXHRcdGdyb3VwTGlzdC5mb3JFYWNoKChncm91cCkgPT4ge1xuXHRcdFx0dmFyIGdyb3VwSGVhZGVyID0ge307XG5cdFx0XHRncm91cEhlYWRlci5sZXZlbCA9IDA7XG5cdFx0XHRncm91cEhlYWRlci5yb3dDb3VudCA9IDA7XG5cdFx0XHRncm91cEhlYWRlci5oZWFkZXJDb250ZW50ID0gXCJcIjtcblx0XHRcdHZhciBjaGlsZERhdGEgPSBbXTtcblx0XHRcdFxuXHRcdFx0aWYgKGdyb3VwLmhhc1N1Ykdyb3Vwcykge1xuXHRcdFx0XHRjaGlsZERhdGEgPSB0aGlzLnB1bGxHcm91cExpc3REYXRhKGdyb3VwLmdyb3VwTGlzdCk7XG5cdFx0XHRcdFxuXHRcdFx0XHRncm91cEhlYWRlci5sZXZlbCA9IGdyb3VwLmxldmVsO1xuXHRcdFx0XHRncm91cEhlYWRlci5yb3dDb3VudCA9IGNoaWxkRGF0YS5sZW5ndGggLSBncm91cC5ncm91cExpc3QubGVuZ3RoOyAvLyBkYXRhIGxlbmd0aCBtaW51cyBudW1iZXIgb2Ygc3ViLWhlYWRlcnNcblx0XHRcdFx0Z3JvdXBIZWFkZXIuaGVhZGVyQ29udGVudCA9IGdyb3VwLmdlbmVyYXRvcihncm91cC5rZXksIGdyb3VwSGVhZGVyLnJvd0NvdW50LCBncm91cC5yb3dzLCBncm91cCk7XG5cdFx0XHRcdFxuXHRcdFx0XHRncm91cExpc3REYXRhLnB1c2goZ3JvdXBIZWFkZXIpO1xuXHRcdFx0XHRncm91cExpc3REYXRhID0gZ3JvdXBMaXN0RGF0YS5jb25jYXQoY2hpbGREYXRhKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdGdyb3VwSGVhZGVyLmxldmVsID0gZ3JvdXAubGV2ZWw7XG5cdFx0XHRcdGdyb3VwSGVhZGVyLmhlYWRlckNvbnRlbnQgPSBncm91cC5nZW5lcmF0b3IoZ3JvdXAua2V5LCBncm91cC5yb3dzLmxlbmd0aCwgZ3JvdXAucm93cywgZ3JvdXApO1xuXHRcdFx0XHRncm91cEhlYWRlci5yb3dDb3VudCA9IGdyb3VwLmdldFJvd3MoKS5sZW5ndGg7XG5cdFx0XHRcdFxuXHRcdFx0XHRncm91cExpc3REYXRhLnB1c2goZ3JvdXBIZWFkZXIpO1xuXHRcdFx0XHRcblx0XHRcdFx0Z3JvdXAuZ2V0Um93cygpLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0XHRcdGdyb3VwTGlzdERhdGEucHVzaChyb3cuZ2V0RGF0YShcImRhdGFcIikpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gZ3JvdXBMaXN0RGF0YTtcblx0fVxuXHRcblx0Z2V0R3JvdXBlZERhdGEoKXtcblx0XHRcblx0XHRyZXR1cm4gdGhpcy5wdWxsR3JvdXBMaXN0RGF0YSh0aGlzLmdyb3VwTGlzdCk7XG5cdH1cblx0XG5cdGdldFJvd0dyb3VwKHJvdyl7XG5cdFx0dmFyIG1hdGNoID0gZmFsc2U7XG5cdFx0XG5cdFx0aWYodGhpcy5vcHRpb25zKFwiZGF0YVRyZWVcIikpe1xuXHRcdFx0cm93ID0gdGhpcy50YWJsZS5tb2R1bGVzLmRhdGFUcmVlLmdldFRyZWVQYXJlbnRSb290KHJvdyk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuZ3JvdXBMaXN0LmZvckVhY2goKGdyb3VwKSA9PiB7XG5cdFx0XHR2YXIgcmVzdWx0ID0gZ3JvdXAuZ2V0Um93R3JvdXAocm93KTtcblx0XHRcdFxuXHRcdFx0aWYocmVzdWx0KXtcblx0XHRcdFx0bWF0Y2ggPSByZXN1bHQ7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0cmV0dXJuIG1hdGNoO1xuXHR9XG5cdFxuXHRjb3VudEdyb3Vwcygpe1xuXHRcdHJldHVybiB0aGlzLmdyb3VwTGlzdC5sZW5ndGg7XG5cdH1cblx0XG5cdGdlbmVyYXRlR3JvdXBzKHJvd3Mpe1xuXHRcdHZhciBvbGRHcm91cHMgPSB0aGlzLmdyb3Vwcztcblx0XHRcblx0XHR0aGlzLmdyb3VwcyA9IHt9O1xuXHRcdHRoaXMuZ3JvdXBMaXN0ID0gW107XG5cdFx0XG5cdFx0aWYodGhpcy5hbGxvd2VkVmFsdWVzICYmIHRoaXMuYWxsb3dlZFZhbHVlc1swXSl7XG5cdFx0XHR0aGlzLmFsbG93ZWRWYWx1ZXNbMF0uZm9yRWFjaCgodmFsdWUpID0+IHtcblx0XHRcdFx0dGhpcy5jcmVhdGVHcm91cCh2YWx1ZSwgMCwgb2xkR3JvdXBzKTtcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHRyb3dzLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0XHR0aGlzLmFzc2lnblJvd1RvRXhpc3RpbmdHcm91cChyb3csIG9sZEdyb3Vwcyk7XG5cdFx0XHR9KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRyb3dzLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0XHR0aGlzLmFzc2lnblJvd1RvR3JvdXAocm93LCBvbGRHcm91cHMpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdFxuXHRcdE9iamVjdC52YWx1ZXMob2xkR3JvdXBzKS5mb3JFYWNoKChncm91cCkgPT4ge1xuXHRcdFx0Z3JvdXAud2lwZSh0cnVlKTtcblx0XHR9KTtcdFxuXHR9XG5cdFxuXHRcblx0Y3JlYXRlR3JvdXAoZ3JvdXBJRCwgbGV2ZWwsIG9sZEdyb3Vwcyl7XG5cdFx0dmFyIGdyb3VwS2V5ID0gbGV2ZWwgKyBcIl9cIiArIGdyb3VwSUQsXG5cdFx0Z3JvdXA7XG5cdFx0XG5cdFx0b2xkR3JvdXBzID0gb2xkR3JvdXBzIHx8IFtdO1xuXHRcdFxuXHRcdGdyb3VwID0gbmV3IEdyb3VwKHRoaXMsIGZhbHNlLCBsZXZlbCwgZ3JvdXBJRCwgdGhpcy5ncm91cElETG9va3Vwc1swXS5maWVsZCwgdGhpcy5oZWFkZXJHZW5lcmF0b3JbMF0sIG9sZEdyb3Vwc1tncm91cEtleV0pO1xuXHRcdFxuXHRcdHRoaXMuZ3JvdXBzW2dyb3VwS2V5XSA9IGdyb3VwO1xuXHRcdHRoaXMuZ3JvdXBMaXN0LnB1c2goZ3JvdXApO1xuXHR9XG5cdFxuXHRhc3NpZ25Sb3dUb0V4aXN0aW5nR3JvdXAocm93LCBvbGRHcm91cHMpe1xuXHRcdHZhciBncm91cElEID0gdGhpcy5ncm91cElETG9va3Vwc1swXS5mdW5jKHJvdy5nZXREYXRhKCkpLFxuXHRcdGdyb3VwS2V5ID0gXCIwX1wiICsgZ3JvdXBJRDtcblx0XHRcblx0XHRpZih0aGlzLmdyb3Vwc1tncm91cEtleV0pe1xuXHRcdFx0dGhpcy5ncm91cHNbZ3JvdXBLZXldLmFkZFJvdyhyb3cpO1xuXHRcdH1cblx0fVxuXHRcblx0YXNzaWduUm93VG9Hcm91cChyb3csIG9sZEdyb3Vwcyl7XG5cdFx0dmFyIGdyb3VwSUQgPSB0aGlzLmdyb3VwSURMb29rdXBzWzBdLmZ1bmMocm93LmdldERhdGEoKSksXG5cdFx0bmV3R3JvdXBOZWVkZWQgPSAhdGhpcy5ncm91cHNbXCIwX1wiICsgZ3JvdXBJRF07XG5cdFx0XG5cdFx0aWYobmV3R3JvdXBOZWVkZWQpe1xuXHRcdFx0dGhpcy5jcmVhdGVHcm91cChncm91cElELCAwLCBvbGRHcm91cHMpO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLmdyb3Vwc1tcIjBfXCIgKyBncm91cElEXS5hZGRSb3cocm93KTtcblx0XHRcblx0XHRyZXR1cm4gIW5ld0dyb3VwTmVlZGVkO1xuXHR9XG5cdFxuXHRyZWFzc2lnblJvd1RvR3JvdXAocm93KXtcblx0XHRpZihyb3cudHlwZSA9PT0gXCJyb3dcIil7XG5cdFx0XHR2YXIgb2xkUm93R3JvdXAgPSByb3cubW9kdWxlcy5ncm91cCxcblx0XHRcdG9sZEdyb3VwUGF0aCA9IG9sZFJvd0dyb3VwLmdldFBhdGgoKSxcblx0XHRcdG5ld0dyb3VwUGF0aCA9IHRoaXMuZ2V0RXhwZWN0ZWRQYXRoKHJvdyksXG5cdFx0XHRzYW1lUGF0aDtcblx0XHRcdFxuXHRcdFx0Ly8gZmlndXJlIG91dCBpZiBuZXcgZ3JvdXAgcGF0aCBpcyB0aGUgc2FtZSBhcyBvbGQgZ3JvdXAgcGF0aFxuXHRcdFx0c2FtZVBhdGggPSAob2xkR3JvdXBQYXRoLmxlbmd0aCA9PSBuZXdHcm91cFBhdGgubGVuZ3RoKSAmJiBvbGRHcm91cFBhdGguZXZlcnkoKGVsZW1lbnQsIGluZGV4KSA9PiB7XG5cdFx0XHRcdHJldHVybiBlbGVtZW50ID09PSBuZXdHcm91cFBhdGhbaW5kZXhdO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdC8vIHJlZnJlc2ggaWYgdGhleSBuZXcgcGF0aCBhbmQgb2xkIHBhdGggYXJlbid0IHRoZSBzYW1lIChha2EgdGhlIHJvdydzIGdyb3VwaW5ncyBoYXZlIGNoYW5nZWQpXG5cdFx0XHRpZighc2FtZVBhdGgpIHtcblx0XHRcdFx0b2xkUm93R3JvdXAucmVtb3ZlUm93KHJvdyk7XG5cdFx0XHRcdHRoaXMuYXNzaWduUm93VG9Hcm91cChyb3csIHRoaXMuZ3JvdXBzKTtcblx0XHRcdFx0dGhpcy5yZWZyZXNoRGF0YSh0cnVlKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdGdldEV4cGVjdGVkUGF0aChyb3cpIHtcblx0XHR2YXIgZ3JvdXBQYXRoID0gW10sIHJvd0RhdGEgPSByb3cuZ2V0RGF0YSgpO1xuXHRcdFxuXHRcdHRoaXMuZ3JvdXBJRExvb2t1cHMuZm9yRWFjaCgoZ3JvdXBJZCkgPT4ge1xuXHRcdFx0Z3JvdXBQYXRoLnB1c2goZ3JvdXBJZC5mdW5jKHJvd0RhdGEpKTtcblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gZ3JvdXBQYXRoO1xuXHR9XG5cdFxuXHR1cGRhdGVHcm91cFJvd3MoZm9yY2Upe1xuXHRcdHZhciBvdXRwdXQgPSBbXTtcblxuXHRcdGlmKCF0aGlzLmJsb2NrUmVkcmF3KXtcblx0XHRcdHRoaXMuZ3JvdXBMaXN0LmZvckVhY2goKGdyb3VwKSA9PiB7XG5cdFx0XHRcdG91dHB1dCA9IG91dHB1dC5jb25jYXQoZ3JvdXAuZ2V0SGVhZGVyc0FuZFJvd3MoKSk7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0aWYoZm9yY2Upe1xuXHRcdFx0XHR0aGlzLnJlZnJlc2hEYXRhKHRydWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cdFxuXHRzY3JvbGxIZWFkZXJzKGxlZnQpe1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5ncm91cEJ5KXtcblx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5yZW5kZXJIb3Jpem9udGFsID09PSBcInZpcnR1YWxcIil7XG5cdFx0XHRcdGxlZnQgLT0gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLnJlbmRlcmVyLnZEb21QYWRMZWZ0O1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRsZWZ0ID0gbGVmdCArIFwicHhcIjtcblx0XHRcdFxuXHRcdFx0dGhpcy5ncm91cExpc3QuZm9yRWFjaCgoZ3JvdXApID0+IHtcblx0XHRcdFx0Z3JvdXAuc2Nyb2xsSGVhZGVyKGxlZnQpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRyZW1vdmVHcm91cChncm91cCl7XG5cdFx0dmFyIGdyb3VwS2V5ID0gZ3JvdXAubGV2ZWwgKyBcIl9cIiArIGdyb3VwLmtleSxcblx0XHRpbmRleDtcblx0XHRcblx0XHRpZih0aGlzLmdyb3Vwc1tncm91cEtleV0pe1xuXHRcdFx0ZGVsZXRlIHRoaXMuZ3JvdXBzW2dyb3VwS2V5XTtcblx0XHRcdFxuXHRcdFx0aW5kZXggPSB0aGlzLmdyb3VwTGlzdC5pbmRleE9mKGdyb3VwKTtcblx0XHRcdFxuXHRcdFx0aWYoaW5kZXggPiAtMSl7XG5cdFx0XHRcdHRoaXMuZ3JvdXBMaXN0LnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRjaGVja0Jhc2ljTW9kZUdyb3VwSGVhZGVyV2lkdGgoKXtcblx0XHR2YXIgZWxlbWVudCA9IHRoaXMudGFibGUucm93TWFuYWdlci50YWJsZUVsZW1lbnQsXG5cdFx0b25seUdyb3VwSGVhZGVycyA9IHRydWU7XG5cdFx0XG5cdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldERpc3BsYXlSb3dzKCkuZm9yRWFjaCgocm93LCBpbmRleCkgPT57XG5cdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuc3R5bGVSb3cocm93LCBpbmRleCk7XG5cdFx0XHRlbGVtZW50LmFwcGVuZENoaWxkKHJvdy5nZXRFbGVtZW50KCkpO1xuXHRcdFx0cm93LmluaXRpYWxpemUodHJ1ZSk7XG5cdFx0XHRcblx0XHRcdGlmKHJvdy50eXBlICE9PSBcImdyb3VwXCIpe1xuXHRcdFx0XHRvbmx5R3JvdXBIZWFkZXJzID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0aWYob25seUdyb3VwSGVhZGVycyl7XG5cdFx0XHRlbGVtZW50LnN0eWxlLm1pbldpZHRoID0gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmdldFdpZHRoKCkgKyBcInB4XCI7XG5cdFx0fWVsc2Uge1xuXHRcdFx0ZWxlbWVudC5zdHlsZS5taW5XaWR0aCA9IFwiXCI7XG5cdFx0fVxuXHR9XG5cdFxufVxuXG5Hcm91cFJvd3MubW9kdWxlTmFtZSA9IFwiZ3JvdXBSb3dzXCI7XG5cbnZhciBkZWZhdWx0VW5kb2VycyA9IHtcblx0Y2VsbEVkaXQ6IGZ1bmN0aW9uKGFjdGlvbil7XG5cdFx0YWN0aW9uLmNvbXBvbmVudC5zZXRWYWx1ZVByb2Nlc3NEYXRhKGFjdGlvbi5kYXRhLm9sZFZhbHVlKTtcblx0XHRhY3Rpb24uY29tcG9uZW50LmNlbGxSZW5kZXJlZCgpO1xuXHR9LFxuXG5cdHJvd0FkZDogZnVuY3Rpb24oYWN0aW9uKXtcblx0XHRhY3Rpb24uY29tcG9uZW50LmRlbGV0ZUFjdHVhbCgpO1xuXHR9LFxuXG5cdHJvd0RlbGV0ZTogZnVuY3Rpb24oYWN0aW9uKXtcblx0XHR2YXIgbmV3Um93ID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmFkZFJvd0FjdHVhbChhY3Rpb24uZGF0YS5kYXRhLCBhY3Rpb24uZGF0YS5wb3MsIGFjdGlvbi5kYXRhLmluZGV4KTtcblxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5ncm91cEJ5ICYmIHRoaXMudGFibGUubW9kRXhpc3RzKFwiZ3JvdXBSb3dzXCIpKXtcblx0XHRcdHRoaXMudGFibGUubW9kdWxlcy5ncm91cFJvd3MudXBkYXRlR3JvdXBSb3dzKHRydWUpO1xuXHRcdH1cblxuXHRcdHRoaXMuX3JlYmluZFJvdyhhY3Rpb24uY29tcG9uZW50LCBuZXdSb3cpO1xuXHR9LFxuXG5cdHJvd01vdmU6IGZ1bmN0aW9uKGFjdGlvbil7XG5cdFx0dmFyIGFmdGVyID0gKGFjdGlvbi5kYXRhLnBvc0Zyb20gIC0gYWN0aW9uLmRhdGEucG9zVG8pID4gMDtcblxuXHRcdHRoaXMudGFibGUucm93TWFuYWdlci5tb3ZlUm93QWN0dWFsKGFjdGlvbi5jb21wb25lbnQsIHRoaXMudGFibGUucm93TWFuYWdlci5nZXRSb3dGcm9tUG9zaXRpb24oYWN0aW9uLmRhdGEucG9zRnJvbSksIGFmdGVyKTtcblxuXHRcdHRoaXMudGFibGUucm93TWFuYWdlci5yZWdlbmVyYXRlUm93UG9zaXRpb25zKCk7XG5cdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnJlUmVuZGVySW5Qb3NpdGlvbigpO1xuXHR9LFxufTtcblxudmFyIGRlZmF1bHRSZWRvZXJzID0ge1xuXHRjZWxsRWRpdDogZnVuY3Rpb24oYWN0aW9uKXtcblx0XHRhY3Rpb24uY29tcG9uZW50LnNldFZhbHVlUHJvY2Vzc0RhdGEoYWN0aW9uLmRhdGEubmV3VmFsdWUpO1xuXHRcdGFjdGlvbi5jb21wb25lbnQuY2VsbFJlbmRlcmVkKCk7XG5cdH0sXG5cblx0cm93QWRkOiBmdW5jdGlvbihhY3Rpb24pe1xuXHRcdHZhciBuZXdSb3cgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuYWRkUm93QWN0dWFsKGFjdGlvbi5kYXRhLmRhdGEsIGFjdGlvbi5kYXRhLnBvcywgYWN0aW9uLmRhdGEuaW5kZXgpO1xuXG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQnkgJiYgdGhpcy50YWJsZS5tb2RFeGlzdHMoXCJncm91cFJvd3NcIikpe1xuXHRcdFx0dGhpcy50YWJsZS5tb2R1bGVzLmdyb3VwUm93cy51cGRhdGVHcm91cFJvd3ModHJ1ZSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fcmViaW5kUm93KGFjdGlvbi5jb21wb25lbnQsIG5ld1Jvdyk7XG5cdH0sXG5cblx0cm93RGVsZXRlOmZ1bmN0aW9uKGFjdGlvbil7XG5cdFx0YWN0aW9uLmNvbXBvbmVudC5kZWxldGVBY3R1YWwoKTtcblx0fSxcblxuXHRyb3dNb3ZlOiBmdW5jdGlvbihhY3Rpb24pe1xuXHRcdHRoaXMudGFibGUucm93TWFuYWdlci5tb3ZlUm93QWN0dWFsKGFjdGlvbi5jb21wb25lbnQsIHRoaXMudGFibGUucm93TWFuYWdlci5nZXRSb3dGcm9tUG9zaXRpb24oYWN0aW9uLmRhdGEucG9zVG8pLCBhY3Rpb24uZGF0YS5hZnRlcik7XG5cdFx0XG5cdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnJlZ2VuZXJhdGVSb3dQb3NpdGlvbnMoKTtcblx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIucmVSZW5kZXJJblBvc2l0aW9uKCk7XG5cdH0sXG59O1xuXG5jbGFzcyBIaXN0b3J5IGV4dGVuZHMgTW9kdWxle1xuXG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cblx0XHR0aGlzLmhpc3RvcnkgPSBbXTtcblx0XHR0aGlzLmluZGV4ID0gLTE7XG5cblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJoaXN0b3J5XCIsIGZhbHNlKTsgLy9lbmFibGUgZWRpdCBoaXN0b3J5XG5cdH1cblxuXHRpbml0aWFsaXplKCl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmhpc3Rvcnkpe1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjZWxsLXZhbHVlLXVwZGF0ZWRcIiwgdGhpcy5jZWxsVXBkYXRlZC5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY2VsbC1kZWxldGVcIiwgdGhpcy5jbGVhckNvbXBvbmVudEhpc3RvcnkuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1kZWxldGVcIiwgdGhpcy5yb3dEZWxldGVkLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3dzLXdpcGVcIiwgdGhpcy5jbGVhci5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWFkZGVkXCIsIHRoaXMucm93QWRkZWQuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1tb3ZlXCIsIHRoaXMucm93TW92ZWQuYmluZCh0aGlzKSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJ1bmRvXCIsIHRoaXMudW5kby5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcInJlZG9cIiwgdGhpcy5yZWRvLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiZ2V0SGlzdG9yeVVuZG9TaXplXCIsIHRoaXMuZ2V0SGlzdG9yeVVuZG9TaXplLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiZ2V0SGlzdG9yeVJlZG9TaXplXCIsIHRoaXMuZ2V0SGlzdG9yeVJlZG9TaXplLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiY2xlYXJIaXN0b3J5XCIsIHRoaXMuY2xlYXIuYmluZCh0aGlzKSk7XG5cdH1cblxuXHRyb3dNb3ZlZChmcm9tLCB0bywgYWZ0ZXIpe1xuXHRcdHRoaXMuYWN0aW9uKFwicm93TW92ZVwiLCBmcm9tLCB7cG9zRnJvbTpmcm9tLmdldFBvc2l0aW9uKCksIHBvc1RvOnRvLmdldFBvc2l0aW9uKCksIHRvOnRvLCBhZnRlcjphZnRlcn0pO1xuXHR9XG5cblx0cm93QWRkZWQocm93LCBkYXRhLCBwb3MsIGluZGV4KXtcblx0XHR0aGlzLmFjdGlvbihcInJvd0FkZFwiLCByb3csIHtkYXRhOmRhdGEsIHBvczpwb3MsIGluZGV4OmluZGV4fSk7XG5cdH1cblxuXHRyb3dEZWxldGVkKHJvdyl7XG5cdFx0dmFyIGluZGV4LCByb3dzO1xuXG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQnkpe1xuXG5cdFx0XHRyb3dzID0gcm93LmdldENvbXBvbmVudCgpLmdldEdyb3VwKCkuX2dldFNlbGYoKS5yb3dzO1xuXHRcdFx0aW5kZXggPSByb3dzLmluZGV4T2Yocm93KTtcblxuXHRcdFx0aWYoaW5kZXgpe1xuXHRcdFx0XHRpbmRleCA9IHJvd3NbaW5kZXgtMV07XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0aW5kZXggPSByb3cudGFibGUucm93TWFuYWdlci5nZXRSb3dJbmRleChyb3cpO1xuXG5cdFx0XHRpZihpbmRleCl7XG5cdFx0XHRcdGluZGV4ID0gcm93LnRhYmxlLnJvd01hbmFnZXIucm93c1tpbmRleC0xXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLmFjdGlvbihcInJvd0RlbGV0ZVwiLCByb3csIHtkYXRhOnJvdy5nZXREYXRhKCksIHBvczohaW5kZXgsIGluZGV4OmluZGV4fSk7XG5cdH1cblxuXHRjZWxsVXBkYXRlZChjZWxsKXtcblx0XHR0aGlzLmFjdGlvbihcImNlbGxFZGl0XCIsIGNlbGwsIHtvbGRWYWx1ZTpjZWxsLm9sZFZhbHVlLCBuZXdWYWx1ZTpjZWxsLnZhbHVlfSk7XG5cdH1cblxuXHRjbGVhcigpe1xuXHRcdHRoaXMuaGlzdG9yeSA9IFtdO1xuXHRcdHRoaXMuaW5kZXggPSAtMTtcblx0fVxuXG5cdGFjdGlvbih0eXBlLCBjb21wb25lbnQsIGRhdGEpe1xuXHRcdHRoaXMuaGlzdG9yeSA9IHRoaXMuaGlzdG9yeS5zbGljZSgwLCB0aGlzLmluZGV4ICsgMSk7XG5cblx0XHR0aGlzLmhpc3RvcnkucHVzaCh7XG5cdFx0XHR0eXBlOnR5cGUsXG5cdFx0XHRjb21wb25lbnQ6Y29tcG9uZW50LFxuXHRcdFx0ZGF0YTpkYXRhLFxuXHRcdH0pO1xuXG5cdFx0dGhpcy5pbmRleCArKztcblx0fVxuXG5cdGdldEhpc3RvcnlVbmRvU2l6ZSgpe1xuXHRcdHJldHVybiB0aGlzLmluZGV4ICsgMTtcblx0fVxuXG5cdGdldEhpc3RvcnlSZWRvU2l6ZSgpe1xuXHRcdHJldHVybiB0aGlzLmhpc3RvcnkubGVuZ3RoIC0gKHRoaXMuaW5kZXggKyAxKTtcblx0fVxuXG5cdGNsZWFyQ29tcG9uZW50SGlzdG9yeShjb21wb25lbnQpe1xuXHRcdHZhciBpbmRleCA9IHRoaXMuaGlzdG9yeS5maW5kSW5kZXgoZnVuY3Rpb24oaXRlbSl7XG5cdFx0XHRyZXR1cm4gaXRlbS5jb21wb25lbnQgPT09IGNvbXBvbmVudDtcblx0XHR9KTtcblxuXHRcdGlmKGluZGV4ID4gLTEpe1xuXHRcdFx0dGhpcy5oaXN0b3J5LnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRpZihpbmRleCA8PSB0aGlzLmluZGV4KXtcblx0XHRcdFx0dGhpcy5pbmRleC0tO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmNsZWFyQ29tcG9uZW50SGlzdG9yeShjb21wb25lbnQpO1xuXHRcdH1cblx0fVxuXG5cdHVuZG8oKXtcblx0XHRpZih0aGlzLmluZGV4ID4gLTEpe1xuXHRcdFx0bGV0IGFjdGlvbiA9IHRoaXMuaGlzdG9yeVt0aGlzLmluZGV4XTtcblxuXHRcdFx0SGlzdG9yeS51bmRvZXJzW2FjdGlvbi50eXBlXS5jYWxsKHRoaXMsIGFjdGlvbik7XG5cblx0XHRcdHRoaXMuaW5kZXgtLTtcblxuXHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwiaGlzdG9yeVVuZG9cIiwgYWN0aW9uLnR5cGUsIGFjdGlvbi5jb21wb25lbnQuZ2V0Q29tcG9uZW50KCksIGFjdGlvbi5kYXRhKTtcblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiSGlzdG9yeSBVbmRvIEVycm9yIC0gTm8gbW9yZSBoaXN0b3J5IHRvIHVuZG9cIik7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0cmVkbygpe1xuXHRcdGlmKHRoaXMuaGlzdG9yeS5sZW5ndGgtMSA+IHRoaXMuaW5kZXgpe1xuXG5cdFx0XHR0aGlzLmluZGV4Kys7XG5cblx0XHRcdGxldCBhY3Rpb24gPSB0aGlzLmhpc3RvcnlbdGhpcy5pbmRleF07XG5cblx0XHRcdEhpc3RvcnkucmVkb2Vyc1thY3Rpb24udHlwZV0uY2FsbCh0aGlzLCBhY3Rpb24pO1xuXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJoaXN0b3J5UmVkb1wiLCBhY3Rpb24udHlwZSwgYWN0aW9uLmNvbXBvbmVudC5nZXRDb21wb25lbnQoKSwgYWN0aW9uLmRhdGEpO1xuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJIaXN0b3J5IFJlZG8gRXJyb3IgLSBObyBtb3JlIGhpc3RvcnkgdG8gcmVkb1wiKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblxuXHQvL3JlYmluZCByb3dzIHRvIG5ldyBlbGVtZW50IGFmdGVyIGRlbGV0aW9uXG5cdF9yZWJpbmRSb3cob2xkUm93LCBuZXdSb3cpe1xuXHRcdHRoaXMuaGlzdG9yeS5mb3JFYWNoKGZ1bmN0aW9uKGFjdGlvbil7XG5cdFx0XHRpZihhY3Rpb24uY29tcG9uZW50IGluc3RhbmNlb2YgUm93KXtcblx0XHRcdFx0aWYoYWN0aW9uLmNvbXBvbmVudCA9PT0gb2xkUm93KXtcblx0XHRcdFx0XHRhY3Rpb24uY29tcG9uZW50ID0gbmV3Um93O1xuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSBpZihhY3Rpb24uY29tcG9uZW50IGluc3RhbmNlb2YgQ2VsbCl7XG5cdFx0XHRcdGlmKGFjdGlvbi5jb21wb25lbnQucm93ID09PSBvbGRSb3cpe1xuXHRcdFx0XHRcdHZhciBmaWVsZCA9IGFjdGlvbi5jb21wb25lbnQuY29sdW1uLmdldEZpZWxkKCk7XG5cblx0XHRcdFx0XHRpZihmaWVsZCl7XG5cdFx0XHRcdFx0XHRhY3Rpb24uY29tcG9uZW50ID0gbmV3Um93LmdldENlbGwoZmllbGQpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cbn1cblxuSGlzdG9yeS5tb2R1bGVOYW1lID0gXCJoaXN0b3J5XCI7XG5cbi8vbG9hZCBkZWZhdWx0c1xuSGlzdG9yeS51bmRvZXJzID0gZGVmYXVsdFVuZG9lcnM7XG5IaXN0b3J5LnJlZG9lcnMgPSBkZWZhdWx0UmVkb2VycztcblxuY2xhc3MgSHRtbFRhYmxlSW1wb3J0IGV4dGVuZHMgTW9kdWxle1xuXG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cblx0XHR0aGlzLmZpZWxkSW5kZXggPSBbXTtcblx0XHR0aGlzLmhhc0luZGV4ID0gZmFsc2U7XG5cdH1cblxuXHRpbml0aWFsaXplKCl7XG5cdFx0dGhpcy50YWJsZUVsZW1lbnRDaGVjaygpO1xuXHR9XG5cblx0dGFibGVFbGVtZW50Q2hlY2soKXtcblx0XHRpZih0aGlzLnRhYmxlLm9yaWdpbmFsRWxlbWVudCAmJiB0aGlzLnRhYmxlLm9yaWdpbmFsRWxlbWVudC50YWdOYW1lID09PSBcIlRBQkxFXCIpe1xuXHRcdFx0aWYodGhpcy50YWJsZS5vcmlnaW5hbEVsZW1lbnQuY2hpbGROb2Rlcy5sZW5ndGgpe1xuXHRcdFx0XHR0aGlzLnBhcnNlVGFibGUoKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiVW5hYmxlIHRvIHBhcnNlIGRhdGEgZnJvbSBlbXB0eSB0YWJsZSB0YWcsIFRhYnVsYXRvciBzaG91bGQgYmUgaW5pdGlhbGl6ZWQgb24gYSBkaXYgdGFnIHVubGVzcyBpbXBvcnRpbmcgZGF0YSBmcm9tIGEgdGFibGUgZWxlbWVudC5cIik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VUYWJsZSgpe1xuXHRcdHZhciBlbGVtZW50ID0gdGhpcy50YWJsZS5vcmlnaW5hbEVsZW1lbnQsXG5cdFx0b3B0aW9ucyA9IHRoaXMudGFibGUub3B0aW9ucyxcblx0XHRoZWFkZXJzID0gZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRoXCIpLFxuXHRcdHJvd3MgPSBlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidGJvZHlcIilbMF0sXG5cdFx0ZGF0YSA9IFtdO1xuXG5cdFx0dGhpcy5oYXNJbmRleCA9IGZhbHNlO1xuXG5cdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwiaHRtbEltcG9ydGluZ1wiKTtcblxuXHRcdHJvd3MgPSByb3dzID8gcm93cy5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRyXCIpIDogW107XG5cblx0XHQvL2NoZWNrIGZvciBUYWJ1bGF0b3IgaW5saW5lIG9wdGlvbnNcblx0XHR0aGlzLl9leHRyYWN0T3B0aW9ucyhlbGVtZW50LCBvcHRpb25zKTtcblxuXHRcdGlmKGhlYWRlcnMubGVuZ3RoKXtcblx0XHRcdHRoaXMuX2V4dHJhY3RIZWFkZXJzKGhlYWRlcnMsIHJvd3MpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuX2dlbmVyYXRlQmxhbmtIZWFkZXJzKGhlYWRlcnMsIHJvd3MpO1xuXHRcdH1cblxuXHRcdC8vaXRlcmF0ZSB0aHJvdWdoIHRhYmxlIHJvd3MgYW5kIGJ1aWxkIGRhdGEgc2V0XG5cdFx0Zm9yKHZhciBpbmRleCA9IDA7IGluZGV4IDwgcm93cy5sZW5ndGg7IGluZGV4Kyspe1xuXHRcdFx0dmFyIHJvdyA9IHJvd3NbaW5kZXhdLFxuXHRcdFx0Y2VsbHMgPSByb3cuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ0ZFwiKSxcblx0XHRcdGl0ZW0gPSB7fTtcblxuXHRcdFx0Ly9jcmVhdGUgaW5kZXggaWYgdGhlIGRvbid0IGV4aXN0IGluIHRhYmxlXG5cdFx0XHRpZighdGhpcy5oYXNJbmRleCl7XG5cdFx0XHRcdGl0ZW1bb3B0aW9ucy5pbmRleF0gPSBpbmRleDtcblx0XHRcdH1cblxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGNlbGxzLmxlbmd0aDsgaSsrKXtcblx0XHRcdFx0dmFyIGNlbGwgPSBjZWxsc1tpXTtcblx0XHRcdFx0aWYodHlwZW9mIHRoaXMuZmllbGRJbmRleFtpXSAhPT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRcdFx0aXRlbVt0aGlzLmZpZWxkSW5kZXhbaV1dID0gY2VsbC5pbm5lckhUTUw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly9hZGQgcm93IGRhdGEgdG8gaXRlbVxuXHRcdFx0ZGF0YS5wdXNoKGl0ZW0pO1xuXHRcdH1cblxuXHRcdG9wdGlvbnMuZGF0YSA9IGRhdGE7XG5cblx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJodG1sSW1wb3J0ZWRcIik7XG5cdH1cblxuXHQvL2V4dHJhY3QgdGFidWxhdG9yIGF0dHJpYnV0ZSBvcHRpb25zXG5cdF9leHRyYWN0T3B0aW9ucyhlbGVtZW50LCBvcHRpb25zLCBkZWZhdWx0T3B0aW9ucyl7XG5cdFx0dmFyIGF0dHJpYnV0ZXMgPSBlbGVtZW50LmF0dHJpYnV0ZXM7XG5cdFx0dmFyIG9wdGlvbnNBcnIgPSBkZWZhdWx0T3B0aW9ucyA/IE9iamVjdC5rZXlzKGRlZmF1bHRPcHRpb25zKSA6IE9iamVjdC5rZXlzKG9wdGlvbnMpO1xuXHRcdHZhciBvcHRpb25zTGlzdCA9IHt9O1xuXG5cdFx0b3B0aW9uc0Fyci5mb3JFYWNoKChpdGVtKSA9PiB7XG5cdFx0XHRvcHRpb25zTGlzdFtpdGVtLnRvTG93ZXJDYXNlKCldID0gaXRlbTtcblx0XHR9KTtcblxuXHRcdGZvcih2YXIgaW5kZXggaW4gYXR0cmlidXRlcyl7XG5cdFx0XHR2YXIgYXR0cmliID0gYXR0cmlidXRlc1tpbmRleF07XG5cdFx0XHR2YXIgbmFtZTtcblxuXHRcdFx0aWYoYXR0cmliICYmIHR5cGVvZiBhdHRyaWIgPT0gXCJvYmplY3RcIiAmJiBhdHRyaWIubmFtZSAmJiBhdHRyaWIubmFtZS5pbmRleE9mKFwidGFidWxhdG9yLVwiKSA9PT0gMCl7XG5cdFx0XHRcdG5hbWUgPSBhdHRyaWIubmFtZS5yZXBsYWNlKFwidGFidWxhdG9yLVwiLCBcIlwiKTtcblxuXHRcdFx0XHRpZih0eXBlb2Ygb3B0aW9uc0xpc3RbbmFtZV0gIT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0XHRcdG9wdGlvbnNbb3B0aW9uc0xpc3RbbmFtZV1dID0gdGhpcy5fYXR0cmliVmFsdWUoYXR0cmliLnZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vZ2V0IHZhbHVlIG9mIGF0dHJpYnV0ZVxuXHRfYXR0cmliVmFsdWUodmFsdWUpe1xuXHRcdGlmKHZhbHVlID09PSBcInRydWVcIil7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZih2YWx1ZSA9PT0gXCJmYWxzZVwiKXtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblxuXHQvL2ZpbmQgY29sdW1uIGlmIGl0IGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZFxuXHRfZmluZENvbCh0aXRsZSl7XG5cdFx0dmFyIG1hdGNoID0gdGhpcy50YWJsZS5vcHRpb25zLmNvbHVtbnMuZmluZCgoY29sdW1uKSA9PiB7XG5cdFx0XHRyZXR1cm4gY29sdW1uLnRpdGxlID09PSB0aXRsZTtcblx0XHR9KTtcblxuXHRcdHJldHVybiBtYXRjaCB8fCBmYWxzZTtcblx0fVxuXG5cdC8vZXh0cmFjdCBjb2x1bW4gZnJvbSBoZWFkZXJzXG5cdF9leHRyYWN0SGVhZGVycyhoZWFkZXJzLCByb3dzKXtcblx0XHRmb3IodmFyIGluZGV4ID0gMDsgaW5kZXggPCBoZWFkZXJzLmxlbmd0aDsgaW5kZXgrKyl7XG5cdFx0XHR2YXIgaGVhZGVyID0gaGVhZGVyc1tpbmRleF0sXG5cdFx0XHRleGlzdHMgPSBmYWxzZSxcblx0XHRcdGNvbCA9IHRoaXMuX2ZpbmRDb2woaGVhZGVyLnRleHRDb250ZW50KSxcblx0XHRcdHdpZHRoO1xuXG5cdFx0XHRpZihjb2wpe1xuXHRcdFx0XHRleGlzdHMgPSB0cnVlO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb2wgPSB7dGl0bGU6aGVhZGVyLnRleHRDb250ZW50LnRyaW0oKX07XG5cdFx0XHR9XG5cblx0XHRcdGlmKCFjb2wuZmllbGQpIHtcblx0XHRcdFx0Y29sLmZpZWxkID0gaGVhZGVyLnRleHRDb250ZW50LnRyaW0oKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2VBbGwoXCIgXCIsIFwiX1wiKTtcblx0XHRcdH1cblxuXHRcdFx0d2lkdGggPSBoZWFkZXIuZ2V0QXR0cmlidXRlKFwid2lkdGhcIik7XG5cblx0XHRcdGlmKHdpZHRoICYmICFjb2wud2lkdGgpXHR7XG5cdFx0XHRcdGNvbC53aWR0aCA9IHdpZHRoO1xuXHRcdFx0fVxuXG5cdFx0XHQvL2NoZWNrIGZvciBUYWJ1bGF0b3IgaW5saW5lIG9wdGlvbnNcblx0XHRcdHRoaXMuX2V4dHJhY3RPcHRpb25zKGhlYWRlciwgY29sLCB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIub3B0aW9uc0xpc3QucmVnaXN0ZXJlZERlZmF1bHRzKTtcblxuXHRcdFx0dGhpcy5maWVsZEluZGV4W2luZGV4XSA9IGNvbC5maWVsZDtcblxuXHRcdFx0aWYoY29sLmZpZWxkID09IHRoaXMudGFibGUub3B0aW9ucy5pbmRleCl7XG5cdFx0XHRcdHRoaXMuaGFzSW5kZXggPSB0cnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZighZXhpc3RzKXtcblx0XHRcdFx0dGhpcy50YWJsZS5vcHRpb25zLmNvbHVtbnMucHVzaChjb2wpO1xuXHRcdFx0fVxuXG5cdFx0fVxuXHR9XG5cblx0Ly9nZW5lcmF0ZSBibGFuayBoZWFkZXJzXG5cdF9nZW5lcmF0ZUJsYW5rSGVhZGVycyhoZWFkZXJzLCByb3dzKXtcblx0XHRmb3IodmFyIGluZGV4ID0gMDsgaW5kZXggPCBoZWFkZXJzLmxlbmd0aDsgaW5kZXgrKyl7XG5cdFx0XHR2YXIgaGVhZGVyID0gaGVhZGVyc1tpbmRleF0sXG5cdFx0XHRjb2wgPSB7dGl0bGU6XCJcIiwgZmllbGQ6XCJjb2xcIiArIGluZGV4fTtcblxuXHRcdFx0dGhpcy5maWVsZEluZGV4W2luZGV4XSA9IGNvbC5maWVsZDtcblxuXHRcdFx0dmFyIHdpZHRoID0gaGVhZGVyLmdldEF0dHJpYnV0ZShcIndpZHRoXCIpO1xuXG5cdFx0XHRpZih3aWR0aCl7XG5cdFx0XHRcdGNvbC53aWR0aCA9IHdpZHRoO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnRhYmxlLm9wdGlvbnMuY29sdW1ucy5wdXNoKGNvbCk7XG5cdFx0fVxuXHR9XG59XG5cbkh0bWxUYWJsZUltcG9ydC5tb2R1bGVOYW1lID0gXCJodG1sVGFibGVJbXBvcnRcIjtcblxuZnVuY3Rpb24gY3N2SW1wb3J0ZXIoaW5wdXQpe1xuXHR2YXIgZGF0YSA9IFtdLFxuXHRyb3cgPSAwLCBcblx0Y29sID0gMCxcblx0aW5RdW90ZSA9IGZhbHNlO1xuICAgIFxuXHQvL0l0ZXJhdGUgb3ZlciBlYWNoIGNoYXJhY3RlclxuXHRmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgaW5wdXQubGVuZ3RoOyBpbmRleCsrKSB7XG5cdFx0bGV0IGNoYXIgPSBpbnB1dFtpbmRleF0sIFxuXHRcdG5leHRDaGFyID0gaW5wdXRbaW5kZXgrMV07ICAgICAgXG4gICAgICAgIFxuXHRcdC8vSW5pdGlhbGl6ZSBlbXB0eSByb3dcblx0XHRpZighZGF0YVtyb3ddKXtcblx0XHRcdGRhdGFbcm93XSA9IFtdO1xuXHRcdH1cblxuXHRcdC8vSW5pdGlhbGl6ZSBlbXB0eSBjb2x1bW5cblx0XHRpZighZGF0YVtyb3ddW2NvbF0pe1xuXHRcdFx0ZGF0YVtyb3ddW2NvbF0gPSBcIlwiO1xuXHRcdH1cbiAgICAgICAgXG5cdFx0Ly9IYW5kbGUgcXVvdGF0aW9uIG1hcmsgaW5zaWRlIHN0cmluZ1xuXHRcdGlmIChjaGFyID09ICdcIicgJiYgaW5RdW90ZSAmJiBuZXh0Q2hhciA9PSAnXCInKSB7IFxuXHRcdFx0ZGF0YVtyb3ddW2NvbF0gKz0gY2hhcjsgXG5cdFx0XHRpbmRleCsrO1xuXHRcdFx0Y29udGludWU7IFxuXHRcdH1cbiAgICAgICAgXG5cdFx0Ly9CZWdpbiAvIEVuZCBRdW90ZVxuXHRcdGlmIChjaGFyID09ICdcIicpIHsgXG5cdFx0XHRpblF1b3RlID0gIWluUXVvdGU7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG4gICAgICAgIFxuXHRcdC8vTmV4dCBjb2x1bW4gKGlmIG5vdCBpbiBxdW90ZSlcblx0XHRpZiAoY2hhciA9PSAnLCcgJiYgIWluUXVvdGUpIHsgXG5cdFx0XHRjb2wrKztcblx0XHRcdGNvbnRpbnVlOyBcblx0XHR9XG4gICAgICAgIFxuXHRcdC8vTmV3IHJvdyBpZiBuZXcgbGluZSBhbmQgbm90IGluIHF1b3RlIChDUkxGKSBcblx0XHRpZiAoY2hhciA9PSAnXFxyJyAmJiBuZXh0Q2hhciA9PSAnXFxuJyAmJiAhaW5RdW90ZSkgeyBcblx0XHRcdGNvbCA9IDA7IFxuXHRcdFx0cm93Kys7IFxuXHRcdFx0aW5kZXgrKzsgXG5cdFx0XHRjb250aW51ZTsgXG5cdFx0fVxuICAgICAgICBcblx0XHQvL05ldyByb3cgaWYgbmV3IGxpbmUgYW5kIG5vdCBpbiBxdW90ZSAoQ1Igb3IgTEYpIFxuXHRcdGlmICgoY2hhciA9PSAnXFxyJyB8fCBjaGFyID09ICdcXG4nKSAmJiAhaW5RdW90ZSkgeyBcblx0XHRcdGNvbCA9IDA7XG5cdFx0XHRyb3crKztcblx0XHRcdGNvbnRpbnVlOyBcblx0XHR9XG5cblx0XHQvL05vcm1hbCBDaGFyYWN0ZXIsIGFwcGVuZCB0byBjb2x1bW5cblx0XHRkYXRhW3Jvd11bY29sXSArPSBjaGFyO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGpzb24kMShpbnB1dCl7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoaW5wdXQpO1xuXHR9IGNhdGNoKGUpIHtcblx0XHRjb25zb2xlLndhcm4oXCJKU09OIEltcG9ydCBFcnJvciAtIEZpbGUgY29udGVudHMgaXMgaW52YWxpZCBKU09OXCIsIGUpO1xuXHRcdHJldHVybiBQcm9taXNlLnJlamVjdCgpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGFycmF5SW1wb3J0ZXIoaW5wdXQpe1xuXHRyZXR1cm4gaW5wdXQ7XG59XG5cbnZhciBkZWZhdWx0SW1wb3J0ZXJzID0ge1xuXHRjc3Y6Y3N2SW1wb3J0ZXIsXG5cdGpzb246anNvbiQxLFxuXHRhcnJheTphcnJheUltcG9ydGVyLFxufTtcblxuY2xhc3MgSW1wb3J0IGV4dGVuZHMgTW9kdWxle1xuICAgIFxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuICAgICAgICBcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJpbXBvcnRGb3JtYXRcIik7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiaW1wb3J0UmVhZGVyXCIsIFwidGV4dFwiKTtcblx0fVxuICAgIFxuXHRpbml0aWFsaXplKCl7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJpbXBvcnRcIiwgdGhpcy5pbXBvcnRGcm9tRmlsZS5iaW5kKHRoaXMpKTtcblxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5pbXBvcnRGb3JtYXQpe1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJkYXRhLWxvYWRpbmdcIiwgdGhpcy5sb2FkRGF0YUNoZWNrLmJpbmQodGhpcyksIDEwKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiZGF0YS1sb2FkXCIsIHRoaXMubG9hZERhdGEuYmluZCh0aGlzKSwgMTApO1xuXHRcdH1cblx0fVxuXG5cdGxvYWREYXRhQ2hlY2soZGF0YSl7XG5cdFx0cmV0dXJuIHRoaXMudGFibGUub3B0aW9ucy5pbXBvcnRGb3JtYXQgJiYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiIHx8IChBcnJheS5pc0FycmF5KGRhdGEpICYmIGRhdGEubGVuZ3RoICYmIEFycmF5LmlzQXJyYXkoZGF0YSkpKTtcblx0fVxuXG5cdGxvYWREYXRhKGRhdGEsIHBhcmFtcywgY29uZmlnLCBzaWxlbnQsIHByZXZpb3VzRGF0YSl7XG5cdFx0cmV0dXJuIHRoaXMuaW1wb3J0RGF0YSh0aGlzLmxvb2t1cEltcG9ydGVyKCksIGRhdGEpXG5cdFx0XHQudGhlbih0aGlzLnN0cnVjdHVyZURhdGEuYmluZCh0aGlzKSlcblx0XHRcdC5jYXRjaCgoZXJyKSA9PiB7XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJJbXBvcnQgRXJyb3I6XCIsIGVyciB8fCBcIlVuYWJsZSB0byBpbXBvcnQgZGF0YVwiKTtcblx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG5cdFx0XHR9KTtcblx0fVxuXG5cdGxvb2t1cEltcG9ydGVyKGltcG9ydEZvcm1hdCl7XG5cdFx0dmFyIGltcG9ydGVyO1xuICAgICAgICBcblx0XHRpZighaW1wb3J0Rm9ybWF0KXtcblx0XHRcdGltcG9ydEZvcm1hdCA9IHRoaXMudGFibGUub3B0aW9ucy5pbXBvcnRGb3JtYXQ7XG5cdFx0fVxuICAgICAgICBcblx0XHRpZih0eXBlb2YgaW1wb3J0Rm9ybWF0ID09PSBcInN0cmluZ1wiKXtcblx0XHRcdGltcG9ydGVyID0gSW1wb3J0LmltcG9ydGVyc1tpbXBvcnRGb3JtYXRdO1xuXHRcdH1lbHNlIHtcblx0XHRcdGltcG9ydGVyID0gaW1wb3J0Rm9ybWF0O1xuXHRcdH1cblxuXHRcdGlmKCFpbXBvcnRlcil7XG5cdFx0XHRjb25zb2xlLmVycm9yKFwiSW1wb3J0IEVycm9yIC0gSW1wb3J0ZXIgbm90IGZvdW5kOlwiLCBpbXBvcnRGb3JtYXQpO1xuXHRcdH1cbiAgICAgICAgXG5cdFx0cmV0dXJuIGltcG9ydGVyO1xuXHR9XG4gICAgXG5cdGltcG9ydEZyb21GaWxlKGltcG9ydEZvcm1hdCwgZXh0ZW5zaW9uKXtcblx0XHR2YXIgaW1wb3J0ZXIgPSB0aGlzLmxvb2t1cEltcG9ydGVyKGltcG9ydEZvcm1hdCk7XG4gICAgICAgIFxuXHRcdGlmKGltcG9ydGVyKXtcblx0XHRcdHJldHVybiB0aGlzLnBpY2tGaWxlKGV4dGVuc2lvbilcblx0XHRcdFx0LnRoZW4odGhpcy5pbXBvcnREYXRhLmJpbmQodGhpcywgaW1wb3J0ZXIpKVxuXHRcdFx0XHQudGhlbih0aGlzLnN0cnVjdHVyZURhdGEuYmluZCh0aGlzKSlcblx0XHRcdFx0LnRoZW4odGhpcy5zZXREYXRhLmJpbmQodGhpcykpXG5cdFx0XHRcdC5jYXRjaCgoZXJyKSA9PiB7XG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcihcIkltcG9ydCBFcnJvcjpcIiwgZXJyIHx8IFwiVW5hYmxlIHRvIGltcG9ydCBmaWxlXCIpO1xuXHRcdFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuXHRcdFx0XHR9KTtcblx0XHR9XG5cdH1cbiAgICBcblx0cGlja0ZpbGUoZXh0ZW5zaW9ucyl7XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XHRcdGlucHV0LnR5cGUgPSBcImZpbGVcIjtcblx0XHRcdGlucHV0LmFjY2VwdCA9IGV4dGVuc2lvbnM7XG4gICAgICAgICAgICBcblx0XHRcdGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgKGUpID0+IHtcblx0XHRcdFx0dmFyIGZpbGUgPSBpbnB1dC5maWxlc1swXSxcblx0XHRcdFx0cmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgICAgICAgICAgICBcblx0XHRcdFx0c3dpdGNoKHRoaXMudGFibGUub3B0aW9ucy5pbXBvcnRSZWFkZXIpe1xuXHRcdFx0XHRcdGNhc2UgXCJidWZmZXJcIjpcblx0XHRcdFx0XHRcdHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihmaWxlKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSBcImJpbmFyeVwiOlxuXHRcdFx0XHRcdFx0cmVhZGVyLnJlYWRBc0JpbmFyeVN0cmluZyhmaWxlKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSBcInVybFwiOlxuXHRcdFx0XHRcdFx0cmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgXCJ0ZXh0XCI6XG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdHJlYWRlci5yZWFkQXNUZXh0KGZpbGUpO1xuXHRcdFx0XHR9XG4gICAgICAgICAgICAgICAgICBcblx0XHRcdFx0cmVhZGVyLm9ubG9hZCA9IChlKSA9PiB7XG5cdFx0XHRcdFx0cmVzb2x2ZShyZWFkZXIucmVzdWx0KTtcblx0XHRcdFx0fTtcbiAgICAgICAgICAgICAgICBcblx0XHRcdFx0cmVhZGVyLm9uZXJyb3IgPSAoZSkgPT4ge1xuXHRcdFx0XHRcdGNvbnNvbGUud2FybihcIkZpbGUgTG9hZCBFcnJvciAtIFVuYWJsZSB0byByZWFkIGZpbGVcIik7XG5cdFx0XHRcdFx0cmVqZWN0KCk7XG5cdFx0XHRcdH07XG5cdFx0XHR9KTtcbiAgICAgICAgICAgIFxuXHRcdFx0aW5wdXQuY2xpY2soKTtcblx0XHR9KTtcblx0fVxuICAgIFxuXHRpbXBvcnREYXRhKGltcG9ydGVyLCBmaWxlQ29udGVudHMpe1xuXHRcdHZhciBkYXRhID0gaW1wb3J0ZXIuY2FsbCh0aGlzLnRhYmxlLCBmaWxlQ29udGVudHMpO1xuICAgICAgICBcblx0XHRpZihkYXRhIGluc3RhbmNlb2YgUHJvbWlzZSl7XG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRyZXR1cm4gZGF0YSA/IFByb21pc2UucmVzb2x2ZShkYXRhKSA6IFByb21pc2UucmVqZWN0KCk7XG5cdFx0fVxuXHR9XG5cblx0c3RydWN0dXJlRGF0YShwYXJzZWREYXRhKXtcblx0XHR2YXIgZGF0YSA9IFtdO1xuICAgICAgICBcblx0XHRpZihBcnJheS5pc0FycmF5KHBhcnNlZERhdGEpICYmIHBhcnNlZERhdGEubGVuZ3RoICYmIEFycmF5LmlzQXJyYXkocGFyc2VkRGF0YVswXSkpe1xuXHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmF1dG9Db2x1bW5zKXtcblx0XHRcdFx0ZGF0YSA9IHRoaXMuc3RydWN0dXJlQXJyYXlUb09iamVjdChwYXJzZWREYXRhKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0ZGF0YSA9IHRoaXMuc3RydWN0dXJlQXJyYXlUb0NvbHVtbnMocGFyc2VkRGF0YSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJldHVybiBwYXJzZWREYXRhO1xuXHRcdH1cblx0fVxuXG5cdHN0cnVjdHVyZUFycmF5VG9PYmplY3QocGFyc2VkRGF0YSl7XG5cdFx0dmFyIGNvbHVtbnMgPSBwYXJzZWREYXRhLnNoaWZ0KCk7XG5cblx0XHR2YXIgZGF0YSA9IHBhcnNlZERhdGEubWFwKCh2YWx1ZXMpID0+IHtcblx0XHRcdHZhciByb3cgPSB7fTtcblxuXHRcdFx0Y29sdW1ucy5mb3JFYWNoKChrZXksIGkpID0+IHtcblx0XHRcdFx0cm93W2tleV0gPSB2YWx1ZXNbaV07XG5cdFx0XHR9KTtcblxuXHRcdFx0cmV0dXJuIHJvdztcblx0XHR9KTtcblxuXHRcdHJldHVybiBkYXRhO1xuXHR9XG5cblx0c3RydWN0dXJlQXJyYXlUb0NvbHVtbnMocGFyc2VkRGF0YSl7XG5cdFx0dmFyIGRhdGEgPSBbXSxcblx0XHRjb2x1bW5zID0gdGhpcy50YWJsZS5nZXRDb2x1bW5zKCk7XG5cblx0XHQvL3JlbW92ZSBmaXJzdCByb3cgaWYgaXQgaXMgdGhlIGNvbHVtbiBuYW1lc1xuXHRcdGlmKGNvbHVtbnNbMF0gJiYgcGFyc2VkRGF0YVswXVswXSl7XG5cdFx0XHRpZihjb2x1bW5zWzBdLmdldERlZmluaXRpb24oKS50aXRsZSA9PT0gcGFyc2VkRGF0YVswXVswXSl7XG5cdFx0XHRcdHBhcnNlZERhdGEuc2hpZnQoKTtcblx0XHRcdH1cblx0XHR9XG4gICAgICAgIFxuXHRcdC8vY29udmVydCByb3cgYXJyYXlzIHRvIG9iamVjdHNcblx0XHRwYXJzZWREYXRhLmZvckVhY2goKHJvd0RhdGEpID0+IHtcblx0XHRcdHZhciByb3cgPSB7fTtcblxuXHRcdFx0cm93RGF0YS5mb3JFYWNoKCh2YWx1ZSwgaW5kZXgpID0+IHtcblx0XHRcdFx0dmFyIGNvbHVtbiA9IGNvbHVtbnNbaW5kZXhdO1xuXG5cdFx0XHRcdGlmKGNvbHVtbil7XG5cdFx0XHRcdFx0cm93W2NvbHVtbi5nZXRGaWVsZCgpXSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0ZGF0YS5wdXNoKHJvdyk7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblx0fVxuICAgIFxuXHRzZXREYXRhKGRhdGEpe1xuXHRcdHJldHVybiB0aGlzLnRhYmxlLnNldERhdGEoZGF0YSk7XG5cdH1cbn1cblxuSW1wb3J0Lm1vZHVsZU5hbWUgPSBcImltcG9ydFwiO1xuXG4vL2xvYWQgZGVmYXVsdHNcbkltcG9ydC5pbXBvcnRlcnMgPSBkZWZhdWx0SW1wb3J0ZXJzO1xuXG5jbGFzcyBJbnRlcmFjdGlvbiBleHRlbmRzIE1vZHVsZXtcblxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXG5cdFx0dGhpcy5ldmVudE1hcCA9IHtcblx0XHRcdC8vcm93IGV2ZW50c1xuXHRcdFx0cm93Q2xpY2s6XCJyb3ctY2xpY2tcIixcblx0XHRcdHJvd0RibENsaWNrOlwicm93LWRibGNsaWNrXCIsXG5cdFx0XHRyb3dDb250ZXh0Olwicm93LWNvbnRleHRtZW51XCIsXG5cdFx0XHRyb3dNb3VzZUVudGVyOlwicm93LW1vdXNlZW50ZXJcIixcblx0XHRcdHJvd01vdXNlTGVhdmU6XCJyb3ctbW91c2VsZWF2ZVwiLFxuXHRcdFx0cm93TW91c2VPdmVyOlwicm93LW1vdXNlb3ZlclwiLFxuXHRcdFx0cm93TW91c2VPdXQ6XCJyb3ctbW91c2VvdXRcIixcblx0XHRcdHJvd01vdXNlTW92ZTpcInJvdy1tb3VzZW1vdmVcIixcblx0XHRcdHJvd01vdXNlRG93bjpcInJvdy1tb3VzZWRvd25cIixcblx0XHRcdHJvd01vdXNlVXA6XCJyb3ctbW91c2V1cFwiLFxuXHRcdFx0cm93VGFwOlwicm93XCIsXG5cdFx0XHRyb3dEYmxUYXA6XCJyb3dcIixcblx0XHRcdHJvd1RhcEhvbGQ6XCJyb3dcIixcblxuXHRcdFx0Ly9jZWxsIGV2ZW50c1xuXHRcdFx0Y2VsbENsaWNrOlwiY2VsbC1jbGlja1wiLFxuXHRcdFx0Y2VsbERibENsaWNrOlwiY2VsbC1kYmxjbGlja1wiLFxuXHRcdFx0Y2VsbENvbnRleHQ6XCJjZWxsLWNvbnRleHRtZW51XCIsXG5cdFx0XHRjZWxsTW91c2VFbnRlcjpcImNlbGwtbW91c2VlbnRlclwiLFxuXHRcdFx0Y2VsbE1vdXNlTGVhdmU6XCJjZWxsLW1vdXNlbGVhdmVcIixcblx0XHRcdGNlbGxNb3VzZU92ZXI6XCJjZWxsLW1vdXNlb3ZlclwiLFxuXHRcdFx0Y2VsbE1vdXNlT3V0OlwiY2VsbC1tb3VzZW91dFwiLFxuXHRcdFx0Y2VsbE1vdXNlTW92ZTpcImNlbGwtbW91c2Vtb3ZlXCIsXG5cdFx0XHRjZWxsTW91c2VEb3duOlwiY2VsbC1tb3VzZWRvd25cIixcblx0XHRcdGNlbGxNb3VzZVVwOlwiY2VsbC1tb3VzZXVwXCIsXG5cdFx0XHRjZWxsVGFwOlwiY2VsbFwiLFxuXHRcdFx0Y2VsbERibFRhcDpcImNlbGxcIixcblx0XHRcdGNlbGxUYXBIb2xkOlwiY2VsbFwiLFxuXG5cdFx0XHQvL2NvbHVtbiBoZWFkZXIgZXZlbnRzXG5cdFx0XHRoZWFkZXJDbGljazpcImNvbHVtbi1jbGlja1wiLFxuXHRcdFx0aGVhZGVyRGJsQ2xpY2s6XCJjb2x1bW4tZGJsY2xpY2tcIixcblx0XHRcdGhlYWRlckNvbnRleHQ6XCJjb2x1bW4tY29udGV4dG1lbnVcIixcblx0XHRcdGhlYWRlck1vdXNlRW50ZXI6XCJjb2x1bW4tbW91c2VlbnRlclwiLFxuXHRcdFx0aGVhZGVyTW91c2VMZWF2ZTpcImNvbHVtbi1tb3VzZWxlYXZlXCIsXG5cdFx0XHRoZWFkZXJNb3VzZU92ZXI6XCJjb2x1bW4tbW91c2VvdmVyXCIsXG5cdFx0XHRoZWFkZXJNb3VzZU91dDpcImNvbHVtbi1tb3VzZW91dFwiLFxuXHRcdFx0aGVhZGVyTW91c2VNb3ZlOlwiY29sdW1uLW1vdXNlbW92ZVwiLFxuXHRcdFx0aGVhZGVyTW91c2VEb3duOlwiY29sdW1uLW1vdXNlZG93blwiLFxuXHRcdFx0aGVhZGVyTW91c2VVcDpcImNvbHVtbi1tb3VzZXVwXCIsXG5cdFx0XHRoZWFkZXJUYXA6XCJjb2x1bW5cIixcblx0XHRcdGhlYWRlckRibFRhcDpcImNvbHVtblwiLFxuXHRcdFx0aGVhZGVyVGFwSG9sZDpcImNvbHVtblwiLFxuXG5cdFx0XHQvL2dyb3VwIGhlYWRlclxuXHRcdFx0Z3JvdXBDbGljazpcImdyb3VwLWNsaWNrXCIsXG5cdFx0XHRncm91cERibENsaWNrOlwiZ3JvdXAtZGJsY2xpY2tcIixcblx0XHRcdGdyb3VwQ29udGV4dDpcImdyb3VwLWNvbnRleHRtZW51XCIsXG5cdFx0XHRncm91cE1vdXNlRW50ZXI6XCJncm91cC1tb3VzZWVudGVyXCIsXG5cdFx0XHRncm91cE1vdXNlTGVhdmU6XCJncm91cC1tb3VzZWxlYXZlXCIsXG5cdFx0XHRncm91cE1vdXNlT3ZlcjpcImdyb3VwLW1vdXNlb3ZlclwiLFxuXHRcdFx0Z3JvdXBNb3VzZU91dDpcImdyb3VwLW1vdXNlb3V0XCIsXG5cdFx0XHRncm91cE1vdXNlTW92ZTpcImdyb3VwLW1vdXNlbW92ZVwiLFxuXHRcdFx0Z3JvdXBNb3VzZURvd246XCJncm91cC1tb3VzZWRvd25cIixcblx0XHRcdGdyb3VwTW91c2VVcDpcImdyb3VwLW1vdXNldXBcIixcblx0XHRcdGdyb3VwVGFwOlwiZ3JvdXBcIixcblx0XHRcdGdyb3VwRGJsVGFwOlwiZ3JvdXBcIixcblx0XHRcdGdyb3VwVGFwSG9sZDpcImdyb3VwXCIsXG5cdFx0fTtcblxuXHRcdHRoaXMuc3Vic2NyaWJlcnMgPSB7fTtcblxuXHRcdHRoaXMudG91Y2hTdWJzY3JpYmVycyA9IHt9O1xuXG5cdFx0dGhpcy5jb2x1bW5TdWJzY3JpYmVycyA9IHt9O1xuXG5cdFx0dGhpcy50b3VjaFdhdGNoZXJzID0ge1xuXHRcdFx0cm93Ontcblx0XHRcdFx0dGFwOm51bGwsXG5cdFx0XHRcdHRhcERibDpudWxsLFxuXHRcdFx0XHR0YXBIb2xkOm51bGwsXG5cdFx0XHR9LFxuXHRcdFx0Y2VsbDp7XG5cdFx0XHRcdHRhcDpudWxsLFxuXHRcdFx0XHR0YXBEYmw6bnVsbCxcblx0XHRcdFx0dGFwSG9sZDpudWxsLFxuXHRcdFx0fSxcblx0XHRcdGNvbHVtbjp7XG5cdFx0XHRcdHRhcDpudWxsLFxuXHRcdFx0XHR0YXBEYmw6bnVsbCxcblx0XHRcdFx0dGFwSG9sZDpudWxsLFxuXHRcdFx0fSxcblx0XHRcdGdyb3VwOntcblx0XHRcdFx0dGFwOm51bGwsXG5cdFx0XHRcdHRhcERibDpudWxsLFxuXHRcdFx0XHR0YXBIb2xkOm51bGwsXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJDbGlja1wiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiaGVhZGVyRGJsQ2xpY2tcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImhlYWRlckNvbnRleHRcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImhlYWRlck1vdXNlRW50ZXJcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImhlYWRlck1vdXNlTGVhdmVcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImhlYWRlck1vdXNlT3ZlclwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiaGVhZGVyTW91c2VPdXRcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImhlYWRlck1vdXNlTW92ZVwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiaGVhZGVyTW91c2VEb3duXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJNb3VzZVVwXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJUYXBcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImhlYWRlckRibFRhcFwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiaGVhZGVyVGFwSG9sZFwiKTtcblxuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJjZWxsQ2xpY2tcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImNlbGxEYmxDbGlja1wiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiY2VsbENvbnRleHRcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImNlbGxNb3VzZUVudGVyXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJjZWxsTW91c2VMZWF2ZVwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiY2VsbE1vdXNlT3ZlclwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiY2VsbE1vdXNlT3V0XCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJjZWxsTW91c2VNb3ZlXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJjZWxsTW91c2VEb3duXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJjZWxsTW91c2VVcFwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiY2VsbFRhcFwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiY2VsbERibFRhcFwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiY2VsbFRhcEhvbGRcIik7XG5cblx0fVxuXG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLmluaXRpYWxpemVFeHRlcm5hbEV2ZW50cygpO1xuXG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4taW5pdFwiLCB0aGlzLmluaXRpYWxpemVDb2x1bW4uYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjZWxsLWRibGNsaWNrXCIsIHRoaXMuY2VsbENvbnRlbnRzU2VsZWN0aW9uRml4ZXIuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJzY3JvbGwtaG9yaXpvbnRhbFwiLCB0aGlzLmNsZWFyVG91Y2hXYXRjaGVycy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcInNjcm9sbC12ZXJ0aWNhbFwiLCB0aGlzLmNsZWFyVG91Y2hXYXRjaGVycy5iaW5kKHRoaXMpKTtcblx0fVxuXG5cdGNsZWFyVG91Y2hXYXRjaGVycygpe1xuXHRcdHZhciB0eXBlcyA9IE9iamVjdC52YWx1ZXModGhpcy50b3VjaFdhdGNoZXJzKTtcblxuXHRcdHR5cGVzLmZvckVhY2goKHR5cGUpID0+IHtcblx0XHRcdGZvcihsZXQga2V5IGluIHR5cGUpe1xuXHRcdFx0XHR0eXBlW2tleV0gPSBudWxsO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cdFx0XG5cdGNlbGxDb250ZW50c1NlbGVjdGlvbkZpeGVyKGUsIGNlbGwpe1xuXHRcdHZhciByYW5nZTtcblxuXHRcdGlmKHRoaXMudGFibGUubW9kRXhpc3RzKFwiZWRpdFwiKSl7XG5cdFx0XHRpZiAodGhpcy50YWJsZS5tb2R1bGVzLmVkaXQuY3VycmVudENlbGwgPT09IGNlbGwpe1xuXHRcdFx0XHRyZXR1cm47IC8vcHJldmVudCBpbnN0YW50IHNlbGVjdGlvbiBvZiBlZGl0b3IgY29udGVudFxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGUucHJldmVudERlZmF1bHQoKTtcblxuXHRcdHRyeXtcblx0XHRcdGlmIChkb2N1bWVudC5zZWxlY3Rpb24pIHsgLy8gSUVcblx0XHRcdFx0cmFuZ2UgPSBkb2N1bWVudC5ib2R5LmNyZWF0ZVRleHRSYW5nZSgpO1xuXHRcdFx0XHRyYW5nZS5tb3ZlVG9FbGVtZW50VGV4dChjZWxsLmdldEVsZW1lbnQoKSk7XG5cdFx0XHRcdHJhbmdlLnNlbGVjdCgpO1xuXHRcdFx0fSBlbHNlIGlmICh3aW5kb3cuZ2V0U2VsZWN0aW9uKSB7XG5cdFx0XHRcdHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcblx0XHRcdFx0cmFuZ2Uuc2VsZWN0Tm9kZShjZWxsLmdldEVsZW1lbnQoKSk7XG5cdFx0XHRcdHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5yZW1vdmVBbGxSYW5nZXMoKTtcblx0XHRcdFx0d2luZG93LmdldFNlbGVjdGlvbigpLmFkZFJhbmdlKHJhbmdlKTtcblx0XHRcdH1cblx0XHR9Y2F0Y2goZSl7fVxuXHR9XG5cblx0aW5pdGlhbGl6ZUV4dGVybmFsRXZlbnRzKCl7XG5cdFx0Zm9yKGxldCBrZXkgaW4gdGhpcy5ldmVudE1hcCl7XG5cdFx0XHR0aGlzLnN1YnNjcmlwdGlvbkNoYW5nZUV4dGVybmFsKGtleSwgdGhpcy5zdWJzY3JpcHRpb25DaGFuZ2VkLmJpbmQodGhpcywga2V5KSk7XG5cdFx0fVxuXHR9XG5cblx0c3Vic2NyaXB0aW9uQ2hhbmdlZChrZXksIGFkZGVkKXtcblx0XHRpZihhZGRlZCl7XG5cdFx0XHRpZighdGhpcy5zdWJzY3JpYmVyc1trZXldKXtcblx0XHRcdFx0aWYodGhpcy5ldmVudE1hcFtrZXldLmluY2x1ZGVzKFwiLVwiKSl7XG5cdFx0XHRcdFx0dGhpcy5zdWJzY3JpYmVyc1trZXldID0gdGhpcy5oYW5kbGUuYmluZCh0aGlzLCBrZXkpO1xuXHRcdFx0XHRcdHRoaXMuc3Vic2NyaWJlKHRoaXMuZXZlbnRNYXBba2V5XSwgdGhpcy5zdWJzY3JpYmVyc1trZXldKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuc3Vic2NyaWJlVG91Y2hFdmVudHMoa2V5KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGlmKHRoaXMuZXZlbnRNYXBba2V5XS5pbmNsdWRlcyhcIi1cIikpe1xuXHRcdFx0XHRpZih0aGlzLnN1YnNjcmliZXJzW2tleV0gJiYgIXRoaXMuY29sdW1uU3Vic2NyaWJlcnNba2V5XSAgJiYgIXRoaXMuc3Vic2NyaWJlZEV4dGVybmFsKGtleSkpe1xuXHRcdFx0XHRcdHRoaXMudW5zdWJzY3JpYmUodGhpcy5ldmVudE1hcFtrZXldLCB0aGlzLnN1YnNjcmliZXJzW2tleV0pO1xuXHRcdFx0XHRcdGRlbGV0ZSB0aGlzLnN1YnNjcmliZXJzW2tleV07XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy51bnN1YnNjcmliZVRvdWNoRXZlbnRzKGtleSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblxuXHRzdWJzY3JpYmVUb3VjaEV2ZW50cyhrZXkpe1xuXHRcdHZhciB0eXBlID0gdGhpcy5ldmVudE1hcFtrZXldO1xuXG5cdFx0aWYoIXRoaXMudG91Y2hTdWJzY3JpYmVyc1t0eXBlICsgXCItdG91Y2hzdGFydFwiXSl7XG5cdFx0XHR0aGlzLnRvdWNoU3Vic2NyaWJlcnNbdHlwZSArIFwiLXRvdWNoc3RhcnRcIl0gPSB0aGlzLmhhbmRsZVRvdWNoLmJpbmQodGhpcywgdHlwZSwgXCJzdGFydFwiKTtcblx0XHRcdHRoaXMudG91Y2hTdWJzY3JpYmVyc1t0eXBlICsgXCItdG91Y2hlbmRcIl0gPSB0aGlzLmhhbmRsZVRvdWNoLmJpbmQodGhpcywgdHlwZSwgXCJlbmRcIik7XG5cblx0XHRcdHRoaXMuc3Vic2NyaWJlKHR5cGUgKyBcIi10b3VjaHN0YXJ0XCIsIHRoaXMudG91Y2hTdWJzY3JpYmVyc1t0eXBlICsgXCItdG91Y2hzdGFydFwiXSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZSh0eXBlICsgXCItdG91Y2hlbmRcIiwgdGhpcy50b3VjaFN1YnNjcmliZXJzW3R5cGUgKyBcIi10b3VjaGVuZFwiXSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdWJzY3JpYmVyc1trZXldID0gdHJ1ZTtcblx0fVxuXG5cdHVuc3Vic2NyaWJlVG91Y2hFdmVudHMoa2V5KXtcblx0XHR2YXIgbm9Ub3VjaCA9IHRydWUsXG5cdFx0dHlwZSA9IHRoaXMuZXZlbnRNYXBba2V5XTtcblxuXHRcdGlmKHRoaXMuc3Vic2NyaWJlcnNba2V5XSAmJiAhdGhpcy5zdWJzY3JpYmVkRXh0ZXJuYWwoa2V5KSl7XG5cdFx0XHRkZWxldGUgdGhpcy5zdWJzY3JpYmVyc1trZXldO1xuXG5cdFx0XHRmb3IobGV0IGkgaW4gdGhpcy5ldmVudE1hcCl7XG5cdFx0XHRcdGlmKHRoaXMuZXZlbnRNYXBbaV0gPT09IHR5cGUpe1xuXHRcdFx0XHRcdGlmKHRoaXMuc3Vic2NyaWJlcnNbaV0pe1xuXHRcdFx0XHRcdFx0bm9Ub3VjaCA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZihub1RvdWNoKXtcblx0XHRcdFx0dGhpcy51bnN1YnNjcmliZSh0eXBlICsgXCItdG91Y2hzdGFydFwiLCB0aGlzLnRvdWNoU3Vic2NyaWJlcnNbdHlwZSArIFwiLXRvdWNoc3RhcnRcIl0pO1xuXHRcdFx0XHR0aGlzLnVuc3Vic2NyaWJlKHR5cGUgKyBcIi10b3VjaGVuZFwiLCB0aGlzLnRvdWNoU3Vic2NyaWJlcnNbdHlwZSArIFwiLXRvdWNoZW5kXCJdKTtcblxuXHRcdFx0XHRkZWxldGUgdGhpcy50b3VjaFN1YnNjcmliZXJzW3R5cGUgKyBcIi10b3VjaHN0YXJ0XCJdO1xuXHRcdFx0XHRkZWxldGUgdGhpcy50b3VjaFN1YnNjcmliZXJzW3R5cGUgKyBcIi10b3VjaGVuZFwiXTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpbml0aWFsaXplQ29sdW1uKGNvbHVtbil7XG5cdFx0dmFyIGRlZiA9IGNvbHVtbi5kZWZpbml0aW9uO1xuXG5cdFx0Zm9yKGxldCBrZXkgaW4gdGhpcy5ldmVudE1hcCl7XG5cdFx0XHRpZihkZWZba2V5XSl7XG5cdFx0XHRcdHRoaXMuc3Vic2NyaXB0aW9uQ2hhbmdlZChrZXksIHRydWUpO1xuXG5cdFx0XHRcdGlmKCF0aGlzLmNvbHVtblN1YnNjcmliZXJzW2tleV0pe1xuXHRcdFx0XHRcdHRoaXMuY29sdW1uU3Vic2NyaWJlcnNba2V5XSA9IFtdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5jb2x1bW5TdWJzY3JpYmVyc1trZXldLnB1c2goY29sdW1uKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRoYW5kbGUoYWN0aW9uLCBlLCBjb21wb25lbnQpe1xuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudChhY3Rpb24sIGUsIGNvbXBvbmVudCk7XG5cdH1cblxuXHRoYW5kbGVUb3VjaCh0eXBlLCBhY3Rpb24sIGUsIGNvbXBvbmVudCl7XG5cdFx0dmFyIHdhdGNoZXJzID0gdGhpcy50b3VjaFdhdGNoZXJzW3R5cGVdO1xuXG5cdFx0aWYodHlwZSA9PT0gXCJjb2x1bW5cIil7XG5cdFx0XHR0eXBlID0gXCJoZWFkZXJcIjtcblx0XHR9XG5cblx0XHRzd2l0Y2goYWN0aW9uKXtcblx0XHRcdGNhc2UgXCJzdGFydFwiOlxuXHRcdFx0XHR3YXRjaGVycy50YXAgPSB0cnVlO1xuXG5cdFx0XHRcdGNsZWFyVGltZW91dCh3YXRjaGVycy50YXBIb2xkKTtcblxuXHRcdFx0XHR3YXRjaGVycy50YXBIb2xkID0gc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdFx0Y2xlYXJUaW1lb3V0KHdhdGNoZXJzLnRhcEhvbGQpO1xuXHRcdFx0XHRcdHdhdGNoZXJzLnRhcEhvbGQgPSBudWxsO1xuXG5cdFx0XHRcdFx0d2F0Y2hlcnMudGFwID0gbnVsbDtcblx0XHRcdFx0XHRjbGVhclRpbWVvdXQod2F0Y2hlcnMudGFwRGJsKTtcblx0XHRcdFx0XHR3YXRjaGVycy50YXBEYmwgPSBudWxsO1xuXG5cdFx0XHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KHR5cGUgKyBcIlRhcEhvbGRcIiwgZSwgIGNvbXBvbmVudCk7XG5cdFx0XHRcdH0sIDEwMDApO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcImVuZFwiOlxuXHRcdFx0XHRpZih3YXRjaGVycy50YXApe1xuXG5cdFx0XHRcdFx0d2F0Y2hlcnMudGFwID0gbnVsbDtcblx0XHRcdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQodHlwZSArIFwiVGFwXCIsIGUsICBjb21wb25lbnQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYod2F0Y2hlcnMudGFwRGJsKXtcblx0XHRcdFx0XHRjbGVhclRpbWVvdXQod2F0Y2hlcnMudGFwRGJsKTtcblx0XHRcdFx0XHR3YXRjaGVycy50YXBEYmwgPSBudWxsO1xuXG5cdFx0XHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KHR5cGUgKyBcIkRibFRhcFwiLCBlLCAgY29tcG9uZW50KTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHdhdGNoZXJzLnRhcERibCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRcdFx0Y2xlYXJUaW1lb3V0KHdhdGNoZXJzLnRhcERibCk7XG5cdFx0XHRcdFx0XHR3YXRjaGVycy50YXBEYmwgPSBudWxsO1xuXHRcdFx0XHRcdH0sIDMwMCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjbGVhclRpbWVvdXQod2F0Y2hlcnMudGFwSG9sZCk7XG5cdFx0XHRcdHdhdGNoZXJzLnRhcEhvbGQgPSBudWxsO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHRkaXNwYXRjaEV2ZW50KGFjdGlvbiwgZSwgY29tcG9uZW50KXtcblx0XHR2YXIgY29tcG9uZW50T2JqID0gY29tcG9uZW50LmdldENvbXBvbmVudCgpLFxuXHRcdGNhbGxiYWNrO1xuXG5cdFx0aWYodGhpcy5jb2x1bW5TdWJzY3JpYmVyc1thY3Rpb25dKXtcblxuXHRcdFx0aWYoY29tcG9uZW50IGluc3RhbmNlb2YgQ2VsbCl7XG5cdFx0XHRcdGNhbGxiYWNrID0gY29tcG9uZW50LmNvbHVtbi5kZWZpbml0aW9uW2FjdGlvbl07XG5cdFx0XHR9ZWxzZSBpZihjb21wb25lbnQgaW5zdGFuY2VvZiBDb2x1bW4pe1xuXHRcdFx0XHRjYWxsYmFjayA9IGNvbXBvbmVudC5kZWZpbml0aW9uW2FjdGlvbl07XG5cdFx0XHR9XG5cblx0XHRcdGlmKGNhbGxiYWNrKXtcblx0XHRcdFx0Y2FsbGJhY2soZSwgY29tcG9uZW50T2JqKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoYWN0aW9uLCBlLCBjb21wb25lbnRPYmopO1xuXHR9XG59XG5cbkludGVyYWN0aW9uLm1vZHVsZU5hbWUgPSBcImludGVyYWN0aW9uXCI7XG5cbnZhciBkZWZhdWx0QmluZGluZ3MgPSB7XG5cdG5hdlByZXY6XCJzaGlmdCArIDlcIixcblx0bmF2TmV4dDo5LFxuXHRuYXZVcDozOCxcblx0bmF2RG93bjo0MCxcblx0c2Nyb2xsUGFnZVVwOjMzLFxuXHRzY3JvbGxQYWdlRG93bjozNCxcblx0c2Nyb2xsVG9TdGFydDozNixcblx0c2Nyb2xsVG9FbmQ6MzUsXG5cdHVuZG86W1wiY3RybCArIDkwXCIsIFwibWV0YSArIDkwXCJdLFxuXHRyZWRvOltcImN0cmwgKyA4OVwiLCBcIm1ldGEgKyA4OVwiXSxcblx0Y29weVRvQ2xpcGJvYXJkOltcImN0cmwgKyA2N1wiLCBcIm1ldGEgKyA2N1wiXSxcbn07XG5cbnZhciBkZWZhdWx0QWN0aW9ucyA9IHtcblx0a2V5QmxvY2s6ZnVuY3Rpb24oZSl7XG5cdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdH0sXG5cdHNjcm9sbFBhZ2VVcDpmdW5jdGlvbihlKXtcblx0XHR2YXIgcm93TWFuYWdlciA9IHRoaXMudGFibGUucm93TWFuYWdlcixcblx0XHRuZXdQb3MgPSByb3dNYW5hZ2VyLnNjcm9sbFRvcCAtIHJvd01hbmFnZXIuZWxlbWVudC5jbGllbnRIZWlnaHQ7XG5cblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRpZihyb3dNYW5hZ2VyLmRpc3BsYXlSb3dzQ291bnQpe1xuXHRcdFx0aWYobmV3UG9zID49IDApe1xuXHRcdFx0XHRyb3dNYW5hZ2VyLmVsZW1lbnQuc2Nyb2xsVG9wID0gbmV3UG9zO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRyb3dNYW5hZ2VyLnNjcm9sbFRvUm93KHJvd01hbmFnZXIuZ2V0RGlzcGxheVJvd3MoKVswXSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy50YWJsZS5lbGVtZW50LmZvY3VzKCk7XG5cdH0sXG5cdHNjcm9sbFBhZ2VEb3duOmZ1bmN0aW9uKGUpe1xuXHRcdHZhciByb3dNYW5hZ2VyID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLFxuXHRcdG5ld1BvcyA9IHJvd01hbmFnZXIuc2Nyb2xsVG9wICsgcm93TWFuYWdlci5lbGVtZW50LmNsaWVudEhlaWdodCxcblx0XHRzY3JvbGxNYXggPSByb3dNYW5hZ2VyLmVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xuXG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0aWYocm93TWFuYWdlci5kaXNwbGF5Um93c0NvdW50KXtcblx0XHRcdGlmKG5ld1BvcyA8PSBzY3JvbGxNYXgpe1xuXHRcdFx0XHRyb3dNYW5hZ2VyLmVsZW1lbnQuc2Nyb2xsVG9wID0gbmV3UG9zO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRyb3dNYW5hZ2VyLnNjcm9sbFRvUm93KHJvd01hbmFnZXIuZ2V0RGlzcGxheVJvd3MoKVtyb3dNYW5hZ2VyLmRpc3BsYXlSb3dzQ291bnQgLSAxXSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy50YWJsZS5lbGVtZW50LmZvY3VzKCk7XG5cblx0fSxcblx0c2Nyb2xsVG9TdGFydDpmdW5jdGlvbihlKXtcblx0XHR2YXIgcm93TWFuYWdlciA9IHRoaXMudGFibGUucm93TWFuYWdlcjtcblxuXHRcdGUucHJldmVudERlZmF1bHQoKTtcblxuXHRcdGlmKHJvd01hbmFnZXIuZGlzcGxheVJvd3NDb3VudCl7XG5cdFx0XHRyb3dNYW5hZ2VyLnNjcm9sbFRvUm93KHJvd01hbmFnZXIuZ2V0RGlzcGxheVJvd3MoKVswXSk7XG5cdFx0fVxuXG5cdFx0dGhpcy50YWJsZS5lbGVtZW50LmZvY3VzKCk7XG5cdH0sXG5cdHNjcm9sbFRvRW5kOmZ1bmN0aW9uKGUpe1xuXHRcdHZhciByb3dNYW5hZ2VyID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyO1xuXG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0aWYocm93TWFuYWdlci5kaXNwbGF5Um93c0NvdW50KXtcblx0XHRcdHJvd01hbmFnZXIuc2Nyb2xsVG9Sb3cocm93TWFuYWdlci5nZXREaXNwbGF5Um93cygpW3Jvd01hbmFnZXIuZGlzcGxheVJvd3NDb3VudCAtIDFdKTtcblx0XHR9XG5cblx0XHR0aGlzLnRhYmxlLmVsZW1lbnQuZm9jdXMoKTtcblx0fSxcblx0bmF2UHJldjpmdW5jdGlvbihlKXtcblx0XHR0aGlzLmRpc3BhdGNoKFwia2V5YmluZGluZy1uYXYtcHJldlwiLCBlKTtcblx0fSxcblxuXHRuYXZOZXh0OmZ1bmN0aW9uKGUpe1xuXHRcdHRoaXMuZGlzcGF0Y2goXCJrZXliaW5kaW5nLW5hdi1uZXh0XCIsIGUpO1xuXHR9LFxuXG5cdG5hdkxlZnQ6ZnVuY3Rpb24oZSl7XG5cdFx0dGhpcy5kaXNwYXRjaChcImtleWJpbmRpbmctbmF2LWxlZnRcIiwgZSk7XG5cdH0sXG5cblx0bmF2UmlnaHQ6ZnVuY3Rpb24oZSl7XG5cdFx0dGhpcy5kaXNwYXRjaChcImtleWJpbmRpbmctbmF2LXJpZ2h0XCIsIGUpO1xuXHR9LFxuXG5cdG5hdlVwOmZ1bmN0aW9uKGUpe1xuXHRcdHRoaXMuZGlzcGF0Y2goXCJrZXliaW5kaW5nLW5hdi11cFwiLCBlKTtcblx0fSxcblxuXHRuYXZEb3duOmZ1bmN0aW9uKGUpe1xuXHRcdHRoaXMuZGlzcGF0Y2goXCJrZXliaW5kaW5nLW5hdi1kb3duXCIsIGUpO1xuXHR9LFxuXG5cdHVuZG86ZnVuY3Rpb24oZSl7XG5cdFx0dmFyIGNlbGwgPSBmYWxzZTtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuaGlzdG9yeSAmJiB0aGlzLnRhYmxlLm1vZEV4aXN0cyhcImhpc3RvcnlcIikgJiYgdGhpcy50YWJsZS5tb2RFeGlzdHMoXCJlZGl0XCIpKXtcblxuXHRcdFx0Y2VsbCA9IHRoaXMudGFibGUubW9kdWxlcy5lZGl0LmN1cnJlbnRDZWxsO1xuXG5cdFx0XHRpZighY2VsbCl7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0dGhpcy50YWJsZS5tb2R1bGVzLmhpc3RvcnkudW5kbygpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZWRvOmZ1bmN0aW9uKGUpe1xuXHRcdHZhciBjZWxsID0gZmFsc2U7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmhpc3RvcnkgJiYgdGhpcy50YWJsZS5tb2RFeGlzdHMoXCJoaXN0b3J5XCIpICYmIHRoaXMudGFibGUubW9kRXhpc3RzKFwiZWRpdFwiKSl7XG5cblx0XHRcdGNlbGwgPSB0aGlzLnRhYmxlLm1vZHVsZXMuZWRpdC5jdXJyZW50Q2VsbDtcblxuXHRcdFx0aWYoIWNlbGwpe1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdHRoaXMudGFibGUubW9kdWxlcy5oaXN0b3J5LnJlZG8oKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Y29weVRvQ2xpcGJvYXJkOmZ1bmN0aW9uKGUpe1xuXHRcdGlmKCF0aGlzLnRhYmxlLm1vZHVsZXMuZWRpdC5jdXJyZW50Q2VsbCl7XG5cdFx0XHRpZih0aGlzLnRhYmxlLm1vZEV4aXN0cyhcImNsaXBib2FyZFwiLCB0cnVlKSl7XG5cdFx0XHRcdHRoaXMudGFibGUubW9kdWxlcy5jbGlwYm9hcmQuY29weShmYWxzZSwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxufTtcblxuY2xhc3MgS2V5YmluZGluZ3MgZXh0ZW5kcyBNb2R1bGV7XG5cblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblxuXHRcdHRoaXMud2F0Y2hLZXlzID0gbnVsbDtcblx0XHR0aGlzLnByZXNzZWRLZXlzID0gbnVsbDtcblx0XHR0aGlzLmtleXVwQmluZGluZyA9IGZhbHNlO1xuXHRcdHRoaXMua2V5ZG93bkJpbmRpbmcgPSBmYWxzZTtcblxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImtleWJpbmRpbmdzXCIsIHt9KTsgLy9hcnJheSBmb3Iga2V5YmluZGluZ3Ncblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJ0YWJFbmROZXdSb3dcIiwgZmFsc2UpOyAvL2NyZWF0ZSBuZXcgcm93IHdoZW4gdGFiIHRvIGVuZCBvZiB0YWJsZVxuXHR9XG5cblx0aW5pdGlhbGl6ZSgpe1xuXHRcdHZhciBiaW5kaW5ncyA9IHRoaXMudGFibGUub3B0aW9ucy5rZXliaW5kaW5ncyxcblx0XHRtZXJnZWRCaW5kaW5ncyA9IHt9O1xuXG5cdFx0dGhpcy53YXRjaEtleXMgPSB7fTtcblx0XHR0aGlzLnByZXNzZWRLZXlzID0gW107XG5cblx0XHRpZihiaW5kaW5ncyAhPT0gZmFsc2Upe1xuXHRcdFx0T2JqZWN0LmFzc2lnbihtZXJnZWRCaW5kaW5ncywgS2V5YmluZGluZ3MuYmluZGluZ3MpO1xuXHRcdFx0T2JqZWN0LmFzc2lnbihtZXJnZWRCaW5kaW5ncywgYmluZGluZ3MpO1xuXG5cdFx0XHR0aGlzLm1hcEJpbmRpbmdzKG1lcmdlZEJpbmRpbmdzKTtcblx0XHRcdHRoaXMuYmluZEV2ZW50cygpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3Vic2NyaWJlKFwidGFibGUtZGVzdHJveVwiLCB0aGlzLmNsZWFyQmluZGluZ3MuYmluZCh0aGlzKSk7XG5cdH1cblxuXHRtYXBCaW5kaW5ncyhiaW5kaW5ncyl7XG5cdFx0Zm9yKGxldCBrZXkgaW4gYmluZGluZ3Mpe1xuXHRcdFx0aWYoS2V5YmluZGluZ3MuYWN0aW9uc1trZXldKXtcblx0XHRcdFx0aWYoYmluZGluZ3Nba2V5XSl7XG5cdFx0XHRcdFx0aWYodHlwZW9mIGJpbmRpbmdzW2tleV0gIT09IFwib2JqZWN0XCIpe1xuXHRcdFx0XHRcdFx0YmluZGluZ3Nba2V5XSA9IFtiaW5kaW5nc1trZXldXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRiaW5kaW5nc1trZXldLmZvckVhY2goKGJpbmRpbmcpID0+IHtcblx0XHRcdFx0XHRcdHZhciBiaW5kaW5nTGlzdCA9IEFycmF5LmlzQXJyYXkoYmluZGluZykgPyAgYmluZGluZyA6IFtiaW5kaW5nXTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0YmluZGluZ0xpc3QuZm9yRWFjaCgoaXRlbSkgPT4ge1xuXHRcdFx0XHRcdFx0XHR0aGlzLm1hcEJpbmRpbmcoa2V5LCBpdGVtKTtcblx0XHRcdFx0XHRcdH0pO1x0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIktleSBCaW5kaW5nIEVycm9yIC0gbm8gc3VjaCBhY3Rpb246XCIsIGtleSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0bWFwQmluZGluZyhhY3Rpb24sIHN5bWJvbHNMaXN0KXtcblx0XHR2YXIgYmluZGluZyA9IHtcblx0XHRcdGFjdGlvbjogS2V5YmluZGluZ3MuYWN0aW9uc1thY3Rpb25dLFxuXHRcdFx0a2V5czogW10sXG5cdFx0XHRjdHJsOiBmYWxzZSxcblx0XHRcdHNoaWZ0OiBmYWxzZSxcblx0XHRcdG1ldGE6IGZhbHNlLFxuXHRcdH07XG5cblx0XHR2YXIgc3ltYm9scyA9IHN5bWJvbHNMaXN0LnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKS5zcGxpdChcIiBcIikuam9pbihcIlwiKS5zcGxpdChcIitcIik7XG5cblx0XHRzeW1ib2xzLmZvckVhY2goKHN5bWJvbCkgPT4ge1xuXHRcdFx0c3dpdGNoKHN5bWJvbCl7XG5cdFx0XHRcdGNhc2UgXCJjdHJsXCI6XG5cdFx0XHRcdFx0YmluZGluZy5jdHJsID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIFwic2hpZnRcIjpcblx0XHRcdFx0XHRiaW5kaW5nLnNoaWZ0ID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIFwibWV0YVwiOlxuXHRcdFx0XHRcdGJpbmRpbmcubWV0YSA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRzeW1ib2wgPSBpc05hTihzeW1ib2wpID8gc3ltYm9sLnRvVXBwZXJDYXNlKCkuY2hhckNvZGVBdCgwKSA6IHBhcnNlSW50KHN5bWJvbCk7XG5cdFx0XHRcdFx0YmluZGluZy5rZXlzLnB1c2goc3ltYm9sKTtcblxuXHRcdFx0XHRcdGlmKCF0aGlzLndhdGNoS2V5c1tzeW1ib2xdKXtcblx0XHRcdFx0XHRcdHRoaXMud2F0Y2hLZXlzW3N5bWJvbF0gPSBbXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0aGlzLndhdGNoS2V5c1tzeW1ib2xdLnB1c2goYmluZGluZyk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRiaW5kRXZlbnRzKCl7XG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0dGhpcy5rZXl1cEJpbmRpbmcgPSBmdW5jdGlvbihlKXtcblx0XHRcdHZhciBjb2RlID0gZS5rZXlDb2RlO1xuXHRcdFx0dmFyIGJpbmRpbmdzID0gc2VsZi53YXRjaEtleXNbY29kZV07XG5cblx0XHRcdGlmKGJpbmRpbmdzKXtcblxuXHRcdFx0XHRzZWxmLnByZXNzZWRLZXlzLnB1c2goY29kZSk7XG5cblx0XHRcdFx0YmluZGluZ3MuZm9yRWFjaChmdW5jdGlvbihiaW5kaW5nKXtcblx0XHRcdFx0XHRzZWxmLmNoZWNrQmluZGluZyhlLCBiaW5kaW5nKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHRoaXMua2V5ZG93bkJpbmRpbmcgPSBmdW5jdGlvbihlKXtcblx0XHRcdHZhciBjb2RlID0gZS5rZXlDb2RlO1xuXHRcdFx0dmFyIGJpbmRpbmdzID0gc2VsZi53YXRjaEtleXNbY29kZV07XG5cblx0XHRcdGlmKGJpbmRpbmdzKXtcblxuXHRcdFx0XHR2YXIgaW5kZXggPSBzZWxmLnByZXNzZWRLZXlzLmluZGV4T2YoY29kZSk7XG5cblx0XHRcdFx0aWYoaW5kZXggPiAtMSl7XG5cdFx0XHRcdFx0c2VsZi5wcmVzc2VkS2V5cy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHRoaXMudGFibGUuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLmtleXVwQmluZGluZyk7XG5cblx0XHR0aGlzLnRhYmxlLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIHRoaXMua2V5ZG93bkJpbmRpbmcpO1xuXHR9XG5cblx0Y2xlYXJCaW5kaW5ncygpe1xuXHRcdGlmKHRoaXMua2V5dXBCaW5kaW5nKXtcblx0XHRcdHRoaXMudGFibGUuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLmtleXVwQmluZGluZyk7XG5cdFx0fVxuXG5cdFx0aWYodGhpcy5rZXlkb3duQmluZGluZyl7XG5cdFx0XHR0aGlzLnRhYmxlLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIHRoaXMua2V5ZG93bkJpbmRpbmcpO1xuXHRcdH1cblx0fVxuXG5cdGNoZWNrQmluZGluZyhlLCBiaW5kaW5nKXtcblx0XHR2YXIgbWF0Y2ggPSB0cnVlO1xuXG5cdFx0aWYoZS5jdHJsS2V5ID09IGJpbmRpbmcuY3RybCAmJiBlLnNoaWZ0S2V5ID09IGJpbmRpbmcuc2hpZnQgJiYgZS5tZXRhS2V5ID09IGJpbmRpbmcubWV0YSl7XG5cdFx0XHRiaW5kaW5nLmtleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG5cdFx0XHRcdHZhciBpbmRleCA9IHRoaXMucHJlc3NlZEtleXMuaW5kZXhPZihrZXkpO1xuXG5cdFx0XHRcdGlmKGluZGV4ID09IC0xKXtcblx0XHRcdFx0XHRtYXRjaCA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0aWYobWF0Y2gpe1xuXHRcdFx0XHRiaW5kaW5nLmFjdGlvbi5jYWxsKHRoaXMsIGUpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxuS2V5YmluZGluZ3MubW9kdWxlTmFtZSA9IFwia2V5YmluZGluZ3NcIjtcblxuLy9sb2FkIGRlZmF1bHRzXG5LZXliaW5kaW5ncy5iaW5kaW5ncyA9IGRlZmF1bHRCaW5kaW5ncztcbktleWJpbmRpbmdzLmFjdGlvbnMgPSBkZWZhdWx0QWN0aW9ucztcblxuY2xhc3MgTWVudSBleHRlbmRzIE1vZHVsZXtcblx0XG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cdFx0XG5cdFx0dGhpcy5tZW51Q29udGFpbmVyID0gbnVsbDtcblx0XHR0aGlzLm5lc3RlZE1lbnVCbG9jayA9IGZhbHNlO1xuXHRcdFxuXHRcdHRoaXMuY3VycmVudENvbXBvbmVudCA9IG51bGw7XG5cdFx0dGhpcy5yb290UG9wdXAgPSBudWxsO1xuXHRcdFxuXHRcdHRoaXMuY29sdW1uU3Vic2NyaWJlcnMgPSB7fTtcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJtZW51Q29udGFpbmVyXCIsIHVuZGVmaW5lZCk7IC8vZGVwcmVjYXRlZFxuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInJvd0NvbnRleHRNZW51XCIsIGZhbHNlKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJyb3dDbGlja01lbnVcIiwgZmFsc2UpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInJvd0RibENsaWNrTWVudVwiLCBmYWxzZSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZ3JvdXBDb250ZXh0TWVudVwiLCBmYWxzZSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZ3JvdXBDbGlja01lbnVcIiwgZmFsc2UpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImdyb3VwRGJsQ2xpY2tNZW51XCIsIGZhbHNlKTtcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiaGVhZGVyQ29udGV4dE1lbnVcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImhlYWRlckNsaWNrTWVudVwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiaGVhZGVyRGJsQ2xpY2tNZW51XCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJNZW51XCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJNZW51SWNvblwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiY29udGV4dE1lbnVcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImNsaWNrTWVudVwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiZGJsQ2xpY2tNZW51XCIpO1xuXHRcdFxuXHR9XG5cdFxuXHRpbml0aWFsaXplKCl7XG5cdFx0dGhpcy5kZXByZWNhdGVkT3B0aW9uc0NoZWNrKCk7XG5cdFx0dGhpcy5pbml0aWFsaXplUm93V2F0Y2hlcnMoKTtcblx0XHR0aGlzLmluaXRpYWxpemVHcm91cFdhdGNoZXJzKCk7XG5cdFx0XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4taW5pdFwiLCB0aGlzLmluaXRpYWxpemVDb2x1bW4uYmluZCh0aGlzKSk7XG5cdH1cblx0XG5cdGRlcHJlY2F0ZWRPcHRpb25zQ2hlY2soKXtcblx0XHRpZighdGhpcy5kZXByZWNhdGlvbkNoZWNrKFwibWVudUNvbnRhaW5lclwiLCBcInBvcHVwQ29udGFpbmVyXCIpKXtcblx0XHRcdHRoaXMudGFibGUub3B0aW9ucy5wb3B1cENvbnRhaW5lciA9IHRoaXMudGFibGUub3B0aW9ucy5tZW51Q29udGFpbmVyO1xuXHRcdH1cblx0fVx0XG5cdFxuXHRpbml0aWFsaXplUm93V2F0Y2hlcnMoKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucm93Q29udGV4dE1lbnUpe1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctY29udGV4dG1lbnVcIiwgdGhpcy5sb2FkTWVudUV2ZW50LmJpbmQodGhpcywgdGhpcy50YWJsZS5vcHRpb25zLnJvd0NvbnRleHRNZW51KSk7XG5cdFx0XHR0aGlzLnRhYmxlLm9uKFwicm93VGFwSG9sZFwiLCB0aGlzLmxvYWRNZW51RXZlbnQuYmluZCh0aGlzLCB0aGlzLnRhYmxlLm9wdGlvbnMucm93Q29udGV4dE1lbnUpKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnJvd0NsaWNrTWVudSl7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1jbGlja1wiLCB0aGlzLmxvYWRNZW51RXZlbnQuYmluZCh0aGlzLCB0aGlzLnRhYmxlLm9wdGlvbnMucm93Q2xpY2tNZW51KSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5yb3dEYmxDbGlja01lbnUpe1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctZGJsY2xpY2tcIiwgdGhpcy5sb2FkTWVudUV2ZW50LmJpbmQodGhpcywgdGhpcy50YWJsZS5vcHRpb25zLnJvd0RibENsaWNrTWVudSkpO1xuXHRcdH1cblx0fVxuXHRcblx0aW5pdGlhbGl6ZUdyb3VwV2F0Y2hlcnMoKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBDb250ZXh0TWVudSl7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImdyb3VwLWNvbnRleHRtZW51XCIsIHRoaXMubG9hZE1lbnVFdmVudC5iaW5kKHRoaXMsIHRoaXMudGFibGUub3B0aW9ucy5ncm91cENvbnRleHRNZW51KSk7XG5cdFx0XHR0aGlzLnRhYmxlLm9uKFwiZ3JvdXBUYXBIb2xkXCIsIHRoaXMubG9hZE1lbnVFdmVudC5iaW5kKHRoaXMsIHRoaXMudGFibGUub3B0aW9ucy5ncm91cENvbnRleHRNZW51KSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5ncm91cENsaWNrTWVudSl7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImdyb3VwLWNsaWNrXCIsIHRoaXMubG9hZE1lbnVFdmVudC5iaW5kKHRoaXMsIHRoaXMudGFibGUub3B0aW9ucy5ncm91cENsaWNrTWVudSkpO1xuXHRcdH1cblx0XHRcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBEYmxDbGlja01lbnUpe1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJncm91cC1kYmxjbGlja1wiLCB0aGlzLmxvYWRNZW51RXZlbnQuYmluZCh0aGlzLCB0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBEYmxDbGlja01lbnUpKTtcblx0XHR9XG5cdH1cblx0XG5cdGluaXRpYWxpemVDb2x1bW4oY29sdW1uKXtcblx0XHR2YXJcdGRlZiA9IGNvbHVtbi5kZWZpbml0aW9uO1xuXHRcdFxuXHRcdC8vaGFuZGxlIGNvbHVtbiBldmVudHNcblx0XHRpZihkZWYuaGVhZGVyQ29udGV4dE1lbnUgJiYgIXRoaXMuY29sdW1uU3Vic2NyaWJlcnMuaGVhZGVyQ29udGV4dE1lbnUpe1xuXHRcdFx0dGhpcy5jb2x1bW5TdWJzY3JpYmVycy5oZWFkZXJDb250ZXh0TWVudSA9IHRoaXMubG9hZE1lbnVUYWJsZUNvbHVtbkV2ZW50LmJpbmQodGhpcywgXCJoZWFkZXJDb250ZXh0TWVudVwiKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWNvbnRleHRtZW51XCIsIHRoaXMuY29sdW1uU3Vic2NyaWJlcnMuaGVhZGVyQ29udGV4dE1lbnUpO1xuXHRcdFx0dGhpcy50YWJsZS5vbihcImhlYWRlclRhcEhvbGRcIiwgdGhpcy5sb2FkTWVudVRhYmxlQ29sdW1uRXZlbnQuYmluZCh0aGlzLCBcImhlYWRlckNvbnRleHRNZW51XCIpKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYoZGVmLmhlYWRlckNsaWNrTWVudSAmJiAhdGhpcy5jb2x1bW5TdWJzY3JpYmVycy5oZWFkZXJDbGlja01lbnUpe1xuXHRcdFx0dGhpcy5jb2x1bW5TdWJzY3JpYmVycy5oZWFkZXJDbGlja01lbnUgPSB0aGlzLmxvYWRNZW51VGFibGVDb2x1bW5FdmVudC5iaW5kKHRoaXMsIFwiaGVhZGVyQ2xpY2tNZW51XCIpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tY2xpY2tcIiwgdGhpcy5jb2x1bW5TdWJzY3JpYmVycy5oZWFkZXJDbGlja01lbnUpO1xuXHRcdH1cblx0XHRcblx0XHRpZihkZWYuaGVhZGVyRGJsQ2xpY2tNZW51ICYmICF0aGlzLmNvbHVtblN1YnNjcmliZXJzLmhlYWRlckRibENsaWNrTWVudSl7XG5cdFx0XHR0aGlzLmNvbHVtblN1YnNjcmliZXJzLmhlYWRlckRibENsaWNrTWVudSA9IHRoaXMubG9hZE1lbnVUYWJsZUNvbHVtbkV2ZW50LmJpbmQodGhpcywgXCJoZWFkZXJEYmxDbGlja01lbnVcIik7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1kYmxjbGlja1wiLCB0aGlzLmNvbHVtblN1YnNjcmliZXJzLmhlYWRlckRibENsaWNrTWVudSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGRlZi5oZWFkZXJNZW51KXtcblx0XHRcdHRoaXMuaW5pdGlhbGl6ZUNvbHVtbkhlYWRlck1lbnUoY29sdW1uKTtcblx0XHR9XG5cdFx0XG5cdFx0Ly9oYW5kbGUgY2VsbCBldmVudHNcblx0XHRpZihkZWYuY29udGV4dE1lbnUgJiYgIXRoaXMuY29sdW1uU3Vic2NyaWJlcnMuY29udGV4dE1lbnUpe1xuXHRcdFx0dGhpcy5jb2x1bW5TdWJzY3JpYmVycy5jb250ZXh0TWVudSA9IHRoaXMubG9hZE1lbnVUYWJsZUNlbGxFdmVudC5iaW5kKHRoaXMsIFwiY29udGV4dE1lbnVcIik7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNlbGwtY29udGV4dG1lbnVcIiwgdGhpcy5jb2x1bW5TdWJzY3JpYmVycy5jb250ZXh0TWVudSk7XG5cdFx0XHR0aGlzLnRhYmxlLm9uKFwiY2VsbFRhcEhvbGRcIiwgdGhpcy5sb2FkTWVudVRhYmxlQ2VsbEV2ZW50LmJpbmQodGhpcywgXCJjb250ZXh0TWVudVwiKSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGRlZi5jbGlja01lbnUgJiYgIXRoaXMuY29sdW1uU3Vic2NyaWJlcnMuY2xpY2tNZW51KXtcblx0XHRcdHRoaXMuY29sdW1uU3Vic2NyaWJlcnMuY2xpY2tNZW51ID0gdGhpcy5sb2FkTWVudVRhYmxlQ2VsbEV2ZW50LmJpbmQodGhpcywgXCJjbGlja01lbnVcIik7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNlbGwtY2xpY2tcIiwgdGhpcy5jb2x1bW5TdWJzY3JpYmVycy5jbGlja01lbnUpO1xuXHRcdH1cblx0XHRcblx0XHRpZihkZWYuZGJsQ2xpY2tNZW51ICYmICF0aGlzLmNvbHVtblN1YnNjcmliZXJzLmRibENsaWNrTWVudSl7XG5cdFx0XHR0aGlzLmNvbHVtblN1YnNjcmliZXJzLmRibENsaWNrTWVudSA9IHRoaXMubG9hZE1lbnVUYWJsZUNlbGxFdmVudC5iaW5kKHRoaXMsIFwiZGJsQ2xpY2tNZW51XCIpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjZWxsLWRibGNsaWNrXCIsIHRoaXMuY29sdW1uU3Vic2NyaWJlcnMuZGJsQ2xpY2tNZW51KTtcblx0XHR9XG5cdH1cblx0XG5cdGluaXRpYWxpemVDb2x1bW5IZWFkZXJNZW51KGNvbHVtbil7XG5cdFx0dmFyIGljb24gPSBjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJNZW51SWNvbixcblx0XHRoZWFkZXJNZW51RWw7XG5cdFx0XG5cdFx0aGVhZGVyTWVudUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG5cdFx0aGVhZGVyTWVudUVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItaGVhZGVyLXBvcHVwLWJ1dHRvblwiKTtcblx0XHRcblx0XHRpZihpY29uKXtcblx0XHRcdGlmKHR5cGVvZiBpY29uID09PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0XHRpY29uID0gaWNvbihjb2x1bW4uZ2V0Q29tcG9uZW50KCkpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihpY29uIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpe1xuXHRcdFx0XHRoZWFkZXJNZW51RWwuYXBwZW5kQ2hpbGQoaWNvbik7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGhlYWRlck1lbnVFbC5pbm5lckhUTUwgPSBpY29uO1xuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGhlYWRlck1lbnVFbC5pbm5lckhUTUwgPSBcIiZ2ZWxsaXA7XCI7XG5cdFx0fVxuXHRcdFxuXHRcdGhlYWRlck1lbnVFbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcblx0XHRcdHRoaXMubG9hZE1lbnVFdmVudChjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJNZW51LCBlLCBjb2x1bW4pO1xuXHRcdH0pO1xuXHRcdFxuXHRcdGNvbHVtbi50aXRsZUVsZW1lbnQuaW5zZXJ0QmVmb3JlKGhlYWRlck1lbnVFbCwgY29sdW1uLnRpdGxlRWxlbWVudC5maXJzdENoaWxkKTtcblx0fVxuXHRcblx0bG9hZE1lbnVUYWJsZUNlbGxFdmVudChvcHRpb24sIGUsIGNlbGwpe1xuXHRcdGlmKGNlbGwuX2NlbGwpe1xuXHRcdFx0Y2VsbCA9IGNlbGwuX2NlbGw7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGNlbGwuY29sdW1uLmRlZmluaXRpb25bb3B0aW9uXSl7XG5cdFx0XHR0aGlzLmxvYWRNZW51RXZlbnQoY2VsbC5jb2x1bW4uZGVmaW5pdGlvbltvcHRpb25dLCBlLCBjZWxsKTtcblx0XHR9XG5cdH1cblx0XG5cdGxvYWRNZW51VGFibGVDb2x1bW5FdmVudChvcHRpb24sIGUsIGNvbHVtbil7XG5cdFx0aWYoY29sdW1uLl9jb2x1bW4pe1xuXHRcdFx0Y29sdW1uID0gY29sdW1uLl9jb2x1bW47XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGNvbHVtbi5kZWZpbml0aW9uW29wdGlvbl0pe1xuXHRcdFx0dGhpcy5sb2FkTWVudUV2ZW50KGNvbHVtbi5kZWZpbml0aW9uW29wdGlvbl0sIGUsIGNvbHVtbik7XG5cdFx0fVxuXHR9XG5cdFxuXHRsb2FkTWVudUV2ZW50KG1lbnUsIGUsIGNvbXBvbmVudCl7XG5cdFx0aWYoY29tcG9uZW50Ll9ncm91cCl7XG5cdFx0XHRjb21wb25lbnQgPSBjb21wb25lbnQuX2dyb3VwO1xuXHRcdH1lbHNlIGlmKGNvbXBvbmVudC5fcm93KXtcblx0XHRcdGNvbXBvbmVudCA9IGNvbXBvbmVudC5fcm93O1xuXHRcdH1cblx0XHRcblx0XHRtZW51ID0gdHlwZW9mIG1lbnUgPT0gXCJmdW5jdGlvblwiID8gbWVudS5jYWxsKHRoaXMudGFibGUsIGUsIGNvbXBvbmVudC5nZXRDb21wb25lbnQoKSkgOiBtZW51O1xuXHRcdFxuXHRcdHRoaXMubG9hZE1lbnUoZSwgY29tcG9uZW50LCBtZW51KTtcblx0fVxuXHRcblx0bG9hZE1lbnUoZSwgY29tcG9uZW50LCBtZW51LCBwYXJlbnRFbCwgcGFyZW50UG9wdXApe1xuXHRcdHZhciB0b3VjaCA9ICEoZSBpbnN0YW5jZW9mIE1vdXNlRXZlbnQpLFx0XHRcblx0XHRtZW51RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFxuXHRcdHBvcHVwO1xuXHRcdFxuXHRcdG1lbnVFbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLW1lbnVcIik7XG5cdFx0XG5cdFx0aWYoIXRvdWNoKXtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdFx0XG5cdFx0Ly9hYm9ydCBpZiBubyBtZW51IHNldFxuXHRcdGlmKCFtZW51IHx8ICFtZW51Lmxlbmd0aCl7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdFxuXHRcdGlmKCFwYXJlbnRFbCl7XG5cdFx0XHRpZih0aGlzLm5lc3RlZE1lbnVCbG9jayl7XG5cdFx0XHRcdC8vYWJvcnQgaWYgY2hpbGQgbWVudSBhbHJlYWR5IG9wZW5cblx0XHRcdFx0aWYodGhpcy5yb290UG9wdXApe1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLm5lc3RlZE1lbnVCbG9jayA9IHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMubmVzdGVkTWVudUJsb2NrID0gZmFsc2U7XG5cdFx0XHRcdH0sIDEwMCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMucm9vdFBvcHVwKXtcblx0XHRcdFx0dGhpcy5yb290UG9wdXAuaGlkZSgpO1x0XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHRoaXMucm9vdFBvcHVwID0gcG9wdXAgPSB0aGlzLnBvcHVwKG1lbnVFbCk7XG5cdFx0XHRcblx0XHR9ZWxzZSB7XG5cdFx0XHRwb3B1cCA9IHBhcmVudFBvcHVwLmNoaWxkKG1lbnVFbCk7XG5cdFx0fVxuXHRcdFxuXHRcdG1lbnUuZm9yRWFjaCgoaXRlbSkgPT4ge1xuXHRcdFx0dmFyIGl0ZW1FbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksXG5cdFx0XHRsYWJlbCA9IGl0ZW0ubGFiZWwsXG5cdFx0XHRkaXNhYmxlZCA9IGl0ZW0uZGlzYWJsZWQ7XG5cdFx0XHRcblx0XHRcdGlmKGl0ZW0uc2VwYXJhdG9yKXtcblx0XHRcdFx0aXRlbUVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItbWVudS1zZXBhcmF0b3JcIik7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGl0ZW1FbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLW1lbnUtaXRlbVwiKTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKHR5cGVvZiBsYWJlbCA9PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0XHRcdGxhYmVsID0gbGFiZWwuY2FsbCh0aGlzLnRhYmxlLCBjb21wb25lbnQuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihsYWJlbCBpbnN0YW5jZW9mIE5vZGUpe1xuXHRcdFx0XHRcdGl0ZW1FbC5hcHBlbmRDaGlsZChsYWJlbCk7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRpdGVtRWwuaW5uZXJIVE1MID0gbGFiZWw7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGlmKHR5cGVvZiBkaXNhYmxlZCA9PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0XHRcdGRpc2FibGVkID0gZGlzYWJsZWQuY2FsbCh0aGlzLnRhYmxlLCBjb21wb25lbnQuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihkaXNhYmxlZCl7XG5cdFx0XHRcdFx0aXRlbUVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItbWVudS1pdGVtLWRpc2FibGVkXCIpO1xuXHRcdFx0XHRcdGl0ZW1FbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcblx0XHRcdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRpZihpdGVtLm1lbnUgJiYgaXRlbS5tZW51Lmxlbmd0aCl7XG5cdFx0XHRcdFx0XHRpdGVtRWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG5cdFx0XHRcdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRcdHRoaXMubG9hZE1lbnUoZSwgY29tcG9uZW50LCBpdGVtLm1lbnUsIGl0ZW1FbCwgcG9wdXApO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0aWYoaXRlbS5hY3Rpb24pe1xuXHRcdFx0XHRcdFx0XHRpdGVtRWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0aXRlbS5hY3Rpb24oZSwgY29tcG9uZW50LmdldENvbXBvbmVudCgpKTtcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihpdGVtLm1lbnUgJiYgaXRlbS5tZW51Lmxlbmd0aCl7XG5cdFx0XHRcdFx0aXRlbUVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItbWVudS1pdGVtLXN1Ym1lbnVcIik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0bWVudUVsLmFwcGVuZENoaWxkKGl0ZW1FbCk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0bWVudUVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuXHRcdFx0aWYodGhpcy5yb290UG9wdXApe1xuXHRcdFx0XHR0aGlzLnJvb3RQb3B1cC5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0cG9wdXAuc2hvdyhwYXJlbnRFbCB8fCBlKTtcblx0XHRcblx0XHRpZihwb3B1cCA9PT0gdGhpcy5yb290UG9wdXApe1xuXHRcdFx0dGhpcy5yb290UG9wdXAuaGlkZU9uQmx1cigoKSA9PiB7XG5cdFx0XHRcdHRoaXMucm9vdFBvcHVwID0gbnVsbDtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKHRoaXMuY3VycmVudENvbXBvbmVudCl7XG5cdFx0XHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwibWVudUNsb3NlZFwiLCB0aGlzLmN1cnJlbnRDb21wb25lbnQuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdFx0XHRcdHRoaXMuY3VycmVudENvbXBvbmVudCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmN1cnJlbnRDb21wb25lbnQgPSBjb21wb25lbnQ7XG5cdFx0XHRcblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcIm1lbnVPcGVuZWRcIiwgY29tcG9uZW50LmdldENvbXBvbmVudCgpKTtcblx0XHR9XG5cdH1cbn1cblxuTWVudS5tb2R1bGVOYW1lID0gXCJtZW51XCI7XG5cbmNsYXNzIE1vdmVDb2x1bW5zIGV4dGVuZHMgTW9kdWxle1xuXHRcblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblx0XHRcblx0XHR0aGlzLnBsYWNlaG9sZGVyRWxlbWVudCA9IHRoaXMuY3JlYXRlUGxhY2Vob2xkZXJFbGVtZW50KCk7XG5cdFx0dGhpcy5ob3ZlckVsZW1lbnQgPSBmYWxzZTsgLy9mbG9hdGluZyBjb2x1bW4gaGVhZGVyIGVsZW1lbnRcblx0XHR0aGlzLmNoZWNrVGltZW91dCA9IGZhbHNlOyAvL2NsaWNrIGNoZWNrIHRpbWVvdXQgaG9sZGVyXG5cdFx0dGhpcy5jaGVja1BlcmlvZCA9IDI1MDsgLy9wZXJpb2QgdG8gd2FpdCBvbiBtb3VzZWRvd24gdG8gY29uc2lkZXIgdGhpcyBhIG1vdmUgYW5kIG5vdCBhIGNsaWNrXG5cdFx0dGhpcy5tb3ZpbmcgPSBmYWxzZTsgLy9jdXJyZW50bHkgbW92aW5nIGNvbHVtblxuXHRcdHRoaXMudG9Db2wgPSBmYWxzZTsgLy9kZXN0aW5hdGlvbiBjb2x1bW5cblx0XHR0aGlzLnRvQ29sQWZ0ZXIgPSBmYWxzZTsgLy9wb3NpdGlvbiBvZiBtb3ZpbmcgY29sdW1uIHJlbGF0aXZlIHRvIHRoZSBkZXN0aW5hdGlvbiBjb2x1bW5cblx0XHR0aGlzLnN0YXJ0WCA9IDA7IC8vc3RhcnRpbmcgcG9zaXRpb24gd2l0aGluIGhlYWRlciBlbGVtZW50XG5cdFx0dGhpcy5hdXRvU2Nyb2xsTWFyZ2luID0gNDA7IC8vYXV0byBzY3JvbGwgb24gZWRnZSB3aGVuIHdpdGhpbiBtYXJnaW5cblx0XHR0aGlzLmF1dG9TY3JvbGxTdGVwID0gNTsgLy9hdXRvIHNjcm9sbCBkaXN0YW5jZSBpbiBwaXhlbHNcblx0XHR0aGlzLmF1dG9TY3JvbGxUaW1lb3V0ID0gZmFsc2U7IC8vYXV0byBzY3JvbGwgdGltZW91dFxuXHRcdHRoaXMudG91Y2hNb3ZlID0gZmFsc2U7XG5cdFx0XG5cdFx0dGhpcy5tb3ZlSG92ZXIgPSB0aGlzLm1vdmVIb3Zlci5iaW5kKHRoaXMpO1xuXHRcdHRoaXMuZW5kTW92ZSA9IHRoaXMuZW5kTW92ZS5iaW5kKHRoaXMpO1xuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcIm1vdmFibGVDb2x1bW5zXCIsIGZhbHNlKTsgLy9lbmFibGUgbW92YWJsZSBjb2x1bW5zXG5cdH1cblx0XG5cdGNyZWF0ZVBsYWNlaG9sZGVyRWxlbWVudCgpe1xuXHRcdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XG5cdFx0ZWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1jb2xcIik7XG5cdFx0ZWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1jb2wtcGxhY2Vob2xkZXJcIik7XG5cdFx0XG5cdFx0cmV0dXJuIGVsO1xuXHR9XG5cdFxuXHRpbml0aWFsaXplKCl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLm1vdmFibGVDb2x1bW5zKXtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWluaXRcIiwgdGhpcy5pbml0aWFsaXplQ29sdW1uLmJpbmQodGhpcykpO1xuXHRcdH1cblx0fVxuXHRcblx0aW5pdGlhbGl6ZUNvbHVtbihjb2x1bW4pe1xuXHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHRjb25maWcgPSB7fSxcblx0XHRjb2xFbDtcblx0XHRcblx0XHRpZighY29sdW1uLm1vZHVsZXMuZnJvemVuICYmICFjb2x1bW4uaXNHcm91cCl7XG5cdFx0XHRjb2xFbCA9IGNvbHVtbi5nZXRFbGVtZW50KCk7XG5cdFx0XHRcblx0XHRcdGNvbmZpZy5tb3VzZW1vdmUgPSBmdW5jdGlvbihlKXtcblx0XHRcdFx0aWYoY29sdW1uLnBhcmVudCA9PT0gc2VsZi5tb3ZpbmcucGFyZW50KXtcblx0XHRcdFx0XHRpZigoKChzZWxmLnRvdWNoTW92ZSA/IGUudG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVgpIC0gSGVscGVycy5lbE9mZnNldChjb2xFbCkubGVmdCkgKyBzZWxmLnRhYmxlLmNvbHVtbk1hbmFnZXIuY29udGVudHNFbGVtZW50LnNjcm9sbExlZnQpID4gKGNvbHVtbi5nZXRXaWR0aCgpIC8gMikpe1xuXHRcdFx0XHRcdFx0aWYoc2VsZi50b0NvbCAhPT0gY29sdW1uIHx8ICFzZWxmLnRvQ29sQWZ0ZXIpe1xuXHRcdFx0XHRcdFx0XHRjb2xFbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzZWxmLnBsYWNlaG9sZGVyRWxlbWVudCwgY29sRWwubmV4dFNpYmxpbmcpO1xuXHRcdFx0XHRcdFx0XHRzZWxmLm1vdmVDb2x1bW4oY29sdW1uLCB0cnVlKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRpZihzZWxmLnRvQ29sICE9PSBjb2x1bW4gfHwgc2VsZi50b0NvbEFmdGVyKXtcblx0XHRcdFx0XHRcdFx0Y29sRWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc2VsZi5wbGFjZWhvbGRlckVsZW1lbnQsIGNvbEVsKTtcblx0XHRcdFx0XHRcdFx0c2VsZi5tb3ZlQ29sdW1uKGNvbHVtbiwgZmFsc2UpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fS5iaW5kKHNlbGYpO1xuXHRcdFx0XG5cdFx0XHRjb2xFbC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRzZWxmLnRvdWNoTW92ZSA9IGZhbHNlO1xuXHRcdFx0XHRpZihlLndoaWNoID09PSAxKXtcblx0XHRcdFx0XHRzZWxmLmNoZWNrVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdHNlbGYuc3RhcnRNb3ZlKGUsIGNvbHVtbik7XG5cdFx0XHRcdFx0fSwgc2VsZi5jaGVja1BlcmlvZCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHRjb2xFbC5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBmdW5jdGlvbihlKXtcblx0XHRcdFx0aWYoZS53aGljaCA9PT0gMSl7XG5cdFx0XHRcdFx0aWYoc2VsZi5jaGVja1RpbWVvdXQpe1xuXHRcdFx0XHRcdFx0Y2xlYXJUaW1lb3V0KHNlbGYuY2hlY2tUaW1lb3V0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHRzZWxmLmJpbmRUb3VjaEV2ZW50cyhjb2x1bW4pO1xuXHRcdH1cblx0XHRcblx0XHRjb2x1bW4ubW9kdWxlcy5tb3ZlQ29sdW1uID0gY29uZmlnO1xuXHR9XG5cdFxuXHRiaW5kVG91Y2hFdmVudHMoY29sdW1uKXtcblx0XHR2YXIgY29sRWwgPSBjb2x1bW4uZ2V0RWxlbWVudCgpLFxuXHRcdHN0YXJ0WE1vdmUgPSBmYWxzZSwgLy9zaGlmdGluZyBjZW50ZXIgcG9zaXRpb24gb2YgdGhlIGNlbGxcblx0XHRuZXh0Q29sLCBwcmV2Q29sLCBuZXh0Q29sV2lkdGgsIHByZXZDb2xXaWR0aCwgbmV4dENvbFdpZHRoTGFzdCwgcHJldkNvbFdpZHRoTGFzdDtcblx0XHRcblx0XHRjb2xFbC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCAoZSkgPT4ge1xuXHRcdFx0dGhpcy5jaGVja1RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0dGhpcy50b3VjaE1vdmUgPSB0cnVlO1xuXHRcdFx0XHRuZXh0Q29sID0gY29sdW1uLm5leHRDb2x1bW4oKTtcblx0XHRcdFx0bmV4dENvbFdpZHRoID0gbmV4dENvbCA/IG5leHRDb2wuZ2V0V2lkdGgoKS8yIDogMDtcblx0XHRcdFx0cHJldkNvbCA9IGNvbHVtbi5wcmV2Q29sdW1uKCk7XG5cdFx0XHRcdHByZXZDb2xXaWR0aCA9IHByZXZDb2wgPyBwcmV2Q29sLmdldFdpZHRoKCkvMiA6IDA7XG5cdFx0XHRcdG5leHRDb2xXaWR0aExhc3QgPSAwO1xuXHRcdFx0XHRwcmV2Q29sV2lkdGhMYXN0ID0gMDtcblx0XHRcdFx0c3RhcnRYTW92ZSA9IGZhbHNlO1xuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5zdGFydE1vdmUoZSwgY29sdW1uKTtcblx0XHRcdH0sIHRoaXMuY2hlY2tQZXJpb2QpO1xuXHRcdH0sIHtwYXNzaXZlOiB0cnVlfSk7XG5cdFx0XG5cdFx0Y29sRWwuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCAoZSkgPT4ge1xuXHRcdFx0dmFyIGRpZmYsIG1vdmVUb0NvbDtcblx0XHRcdFxuXHRcdFx0aWYodGhpcy5tb3Zpbmcpe1xuXHRcdFx0XHR0aGlzLm1vdmVIb3ZlcihlKTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKCFzdGFydFhNb3ZlKXtcblx0XHRcdFx0XHRzdGFydFhNb3ZlID0gZS50b3VjaGVzWzBdLnBhZ2VYO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRkaWZmID0gZS50b3VjaGVzWzBdLnBhZ2VYIC0gc3RhcnRYTW92ZTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKGRpZmYgPiAwKXtcblx0XHRcdFx0XHRpZihuZXh0Q29sICYmIGRpZmYgLSBuZXh0Q29sV2lkdGhMYXN0ID4gbmV4dENvbFdpZHRoKXtcblx0XHRcdFx0XHRcdG1vdmVUb0NvbCA9IG5leHRDb2w7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGlmKG1vdmVUb0NvbCAhPT0gY29sdW1uKXtcblx0XHRcdFx0XHRcdFx0c3RhcnRYTW92ZSA9IGUudG91Y2hlc1swXS5wYWdlWDtcblx0XHRcdFx0XHRcdFx0bW92ZVRvQ29sLmdldEVsZW1lbnQoKS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLnBsYWNlaG9sZGVyRWxlbWVudCwgbW92ZVRvQ29sLmdldEVsZW1lbnQoKS5uZXh0U2libGluZyk7XG5cdFx0XHRcdFx0XHRcdHRoaXMubW92ZUNvbHVtbihtb3ZlVG9Db2wsIHRydWUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGlmKHByZXZDb2wgJiYgLWRpZmYgLSBwcmV2Q29sV2lkdGhMYXN0ID4gIHByZXZDb2xXaWR0aCl7XG5cdFx0XHRcdFx0XHRtb3ZlVG9Db2wgPSBwcmV2Q29sO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRpZihtb3ZlVG9Db2wgIT09IGNvbHVtbil7XG5cdFx0XHRcdFx0XHRcdHN0YXJ0WE1vdmUgPSBlLnRvdWNoZXNbMF0ucGFnZVg7XG5cdFx0XHRcdFx0XHRcdG1vdmVUb0NvbC5nZXRFbGVtZW50KCkucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5wbGFjZWhvbGRlckVsZW1lbnQsIG1vdmVUb0NvbC5nZXRFbGVtZW50KCkpO1xuXHRcdFx0XHRcdFx0XHR0aGlzLm1vdmVDb2x1bW4obW92ZVRvQ29sLCBmYWxzZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihtb3ZlVG9Db2wpe1xuXHRcdFx0XHRcdG5leHRDb2wgPSBtb3ZlVG9Db2wubmV4dENvbHVtbigpO1xuXHRcdFx0XHRcdG5leHRDb2xXaWR0aExhc3QgPSBuZXh0Q29sV2lkdGg7XG5cdFx0XHRcdFx0bmV4dENvbFdpZHRoID0gbmV4dENvbCA/IG5leHRDb2wuZ2V0V2lkdGgoKSAvIDIgOiAwO1xuXHRcdFx0XHRcdHByZXZDb2wgPSBtb3ZlVG9Db2wucHJldkNvbHVtbigpO1xuXHRcdFx0XHRcdHByZXZDb2xXaWR0aExhc3QgPSBwcmV2Q29sV2lkdGg7XG5cdFx0XHRcdFx0cHJldkNvbFdpZHRoID0gcHJldkNvbCA/IHByZXZDb2wuZ2V0V2lkdGgoKSAvIDIgOiAwO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSwge3Bhc3NpdmU6IHRydWV9KTtcblx0XHRcblx0XHRjb2xFbC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgKGUpID0+IHtcblx0XHRcdGlmKHRoaXMuY2hlY2tUaW1lb3V0KXtcblx0XHRcdFx0Y2xlYXJUaW1lb3V0KHRoaXMuY2hlY2tUaW1lb3V0KTtcblx0XHRcdH1cblx0XHRcdGlmKHRoaXMubW92aW5nKXtcblx0XHRcdFx0dGhpcy5lbmRNb3ZlKGUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cdFxuXHRzdGFydE1vdmUoZSwgY29sdW1uKXtcblx0XHR2YXIgZWxlbWVudCA9IGNvbHVtbi5nZXRFbGVtZW50KCksXG5cdFx0aGVhZGVyRWxlbWVudCA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5nZXRDb250ZW50c0VsZW1lbnQoKSxcblx0XHRoZWFkZXJzRWxlbWVudCA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5nZXRIZWFkZXJzRWxlbWVudCgpO1xuXHRcdFxuXHRcdHRoaXMubW92aW5nID0gY29sdW1uO1xuXHRcdHRoaXMuc3RhcnRYID0gKHRoaXMudG91Y2hNb3ZlID8gZS50b3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWCkgLSBIZWxwZXJzLmVsT2Zmc2V0KGVsZW1lbnQpLmxlZnQ7XG5cdFx0XG5cdFx0dGhpcy50YWJsZS5lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItYmxvY2stc2VsZWN0XCIpO1xuXHRcdFxuXHRcdC8vY3JlYXRlIHBsYWNlaG9sZGVyXG5cdFx0dGhpcy5wbGFjZWhvbGRlckVsZW1lbnQuc3R5bGUud2lkdGggPSBjb2x1bW4uZ2V0V2lkdGgoKSArIFwicHhcIjtcblx0XHR0aGlzLnBsYWNlaG9sZGVyRWxlbWVudC5zdHlsZS5oZWlnaHQgPSBjb2x1bW4uZ2V0SGVpZ2h0KCkgKyBcInB4XCI7XG5cdFx0XG5cdFx0ZWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLnBsYWNlaG9sZGVyRWxlbWVudCwgZWxlbWVudCk7XG5cdFx0ZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsZW1lbnQpO1xuXHRcdFxuXHRcdC8vY3JlYXRlIGhvdmVyIGVsZW1lbnRcblx0XHR0aGlzLmhvdmVyRWxlbWVudCA9IGVsZW1lbnQuY2xvbmVOb2RlKHRydWUpO1xuXHRcdHRoaXMuaG92ZXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItbW92aW5nXCIpO1xuXHRcdFxuXHRcdGhlYWRlckVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5ob3ZlckVsZW1lbnQpO1xuXHRcdFxuXHRcdHRoaXMuaG92ZXJFbGVtZW50LnN0eWxlLmxlZnQgPSBcIjBcIjtcblx0XHR0aGlzLmhvdmVyRWxlbWVudC5zdHlsZS5ib3R0b20gPSAoaGVhZGVyRWxlbWVudC5jbGllbnRIZWlnaHQgLSBoZWFkZXJzRWxlbWVudC5vZmZzZXRIZWlnaHQpICsgXCJweFwiO1xuXHRcdFxuXHRcdGlmKCF0aGlzLnRvdWNoTW92ZSl7XG5cdFx0XHR0aGlzLl9iaW5kTW91c2VNb3ZlKCk7XG5cdFx0XHRcblx0XHRcdGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLm1vdmVIb3Zlcik7XG5cdFx0XHRkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMuZW5kTW92ZSk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMubW92ZUhvdmVyKGUpO1xuXHR9XG5cdFxuXHRfYmluZE1vdXNlTW92ZSgpe1xuXHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5jb2x1bW5zQnlJbmRleC5mb3JFYWNoKGZ1bmN0aW9uKGNvbHVtbil7XG5cdFx0XHRpZihjb2x1bW4ubW9kdWxlcy5tb3ZlQ29sdW1uLm1vdXNlbW92ZSl7XG5cdFx0XHRcdGNvbHVtbi5nZXRFbGVtZW50KCkuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBjb2x1bW4ubW9kdWxlcy5tb3ZlQ29sdW1uLm1vdXNlbW92ZSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0XG5cdF91bmJpbmRNb3VzZU1vdmUoKXtcblx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuY29sdW1uc0J5SW5kZXguZm9yRWFjaChmdW5jdGlvbihjb2x1bW4pe1xuXHRcdFx0aWYoY29sdW1uLm1vZHVsZXMubW92ZUNvbHVtbi5tb3VzZW1vdmUpe1xuXHRcdFx0XHRjb2x1bW4uZ2V0RWxlbWVudCgpLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgY29sdW1uLm1vZHVsZXMubW92ZUNvbHVtbi5tb3VzZW1vdmUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cdFxuXHRtb3ZlQ29sdW1uKGNvbHVtbiwgYWZ0ZXIpe1xuXHRcdHZhciBtb3ZpbmdDZWxscyA9IHRoaXMubW92aW5nLmdldENlbGxzKCk7XG5cdFx0XG5cdFx0dGhpcy50b0NvbCA9IGNvbHVtbjtcblx0XHR0aGlzLnRvQ29sQWZ0ZXIgPSBhZnRlcjtcblx0XHRcblx0XHRpZihhZnRlcil7XG5cdFx0XHRjb2x1bW4uZ2V0Q2VsbHMoKS5mb3JFYWNoKGZ1bmN0aW9uKGNlbGwsIGkpe1xuXHRcdFx0XHR2YXIgY2VsbEVsID0gY2VsbC5nZXRFbGVtZW50KHRydWUpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoY2VsbEVsLnBhcmVudE5vZGUgJiYgbW92aW5nQ2VsbHNbaV0pe1xuXHRcdFx0XHRcdGNlbGxFbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShtb3ZpbmdDZWxsc1tpXS5nZXRFbGVtZW50KCksIGNlbGxFbC5uZXh0U2libGluZyk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbHVtbi5nZXRDZWxscygpLmZvckVhY2goZnVuY3Rpb24oY2VsbCwgaSl7XG5cdFx0XHRcdHZhciBjZWxsRWwgPSBjZWxsLmdldEVsZW1lbnQodHJ1ZSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihjZWxsRWwucGFyZW50Tm9kZSAmJiBtb3ZpbmdDZWxsc1tpXSl7XG5cdFx0XHRcdFx0Y2VsbEVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG1vdmluZ0NlbGxzW2ldLmdldEVsZW1lbnQoKSwgY2VsbEVsKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRlbmRNb3ZlKGUpe1xuXHRcdGlmKGUud2hpY2ggPT09IDEgfHwgdGhpcy50b3VjaE1vdmUpe1xuXHRcdFx0dGhpcy5fdW5iaW5kTW91c2VNb3ZlKCk7XG5cdFx0XHRcblx0XHRcdHRoaXMucGxhY2Vob2xkZXJFbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMubW92aW5nLmdldEVsZW1lbnQoKSwgdGhpcy5wbGFjZWhvbGRlckVsZW1lbnQubmV4dFNpYmxpbmcpO1xuXHRcdFx0dGhpcy5wbGFjZWhvbGRlckVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnBsYWNlaG9sZGVyRWxlbWVudCk7XG5cdFx0XHR0aGlzLmhvdmVyRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuaG92ZXJFbGVtZW50KTtcblx0XHRcdFxuXHRcdFx0dGhpcy50YWJsZS5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJ0YWJ1bGF0b3ItYmxvY2stc2VsZWN0XCIpO1xuXHRcdFx0XG5cdFx0XHRpZih0aGlzLnRvQ29sKXtcblx0XHRcdFx0dGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLm1vdmVDb2x1bW5BY3R1YWwodGhpcy5tb3ZpbmcsIHRoaXMudG9Db2wsIHRoaXMudG9Db2xBZnRlcik7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHRoaXMubW92aW5nID0gZmFsc2U7XG5cdFx0XHR0aGlzLnRvQ29sID0gZmFsc2U7XG5cdFx0XHR0aGlzLnRvQ29sQWZ0ZXIgPSBmYWxzZTtcblx0XHRcdFxuXHRcdFx0aWYoIXRoaXMudG91Y2hNb3ZlKXtcblx0XHRcdFx0ZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMubW92ZUhvdmVyKTtcblx0XHRcdFx0ZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLmVuZE1vdmUpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0bW92ZUhvdmVyKGUpe1xuXHRcdHZhciBjb2x1bW5Ib2xkZXIgPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0Q29udGVudHNFbGVtZW50KCksXG5cdFx0c2Nyb2xsTGVmdCA9IGNvbHVtbkhvbGRlci5zY3JvbGxMZWZ0LFxuXHRcdHhQb3MgPSAoKHRoaXMudG91Y2hNb3ZlID8gZS50b3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWCkgLSBIZWxwZXJzLmVsT2Zmc2V0KGNvbHVtbkhvbGRlcikubGVmdCkgKyBzY3JvbGxMZWZ0LFxuXHRcdHNjcm9sbFBvcztcblx0XHRcblx0XHR0aGlzLmhvdmVyRWxlbWVudC5zdHlsZS5sZWZ0ID0gKHhQb3MgLSB0aGlzLnN0YXJ0WCkgKyBcInB4XCI7XG5cdFx0XG5cdFx0aWYoeFBvcyAtIHNjcm9sbExlZnQgPCB0aGlzLmF1dG9TY3JvbGxNYXJnaW4pe1xuXHRcdFx0aWYoIXRoaXMuYXV0b1Njcm9sbFRpbWVvdXQpe1xuXHRcdFx0XHR0aGlzLmF1dG9TY3JvbGxUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdFx0c2Nyb2xsUG9zID0gTWF0aC5tYXgoMCxzY3JvbGxMZWZ0LTUpO1xuXHRcdFx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5nZXRFbGVtZW50KCkuc2Nyb2xsTGVmdCA9IHNjcm9sbFBvcztcblx0XHRcdFx0XHR0aGlzLmF1dG9TY3JvbGxUaW1lb3V0ID0gZmFsc2U7XG5cdFx0XHRcdH0sIDEpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRpZihzY3JvbGxMZWZ0ICsgY29sdW1uSG9sZGVyLmNsaWVudFdpZHRoIC0geFBvcyA8IHRoaXMuYXV0b1Njcm9sbE1hcmdpbil7XG5cdFx0XHRpZighdGhpcy5hdXRvU2Nyb2xsVGltZW91dCl7XG5cdFx0XHRcdHRoaXMuYXV0b1Njcm9sbFRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0XHRzY3JvbGxQb3MgPSBNYXRoLm1pbihjb2x1bW5Ib2xkZXIuY2xpZW50V2lkdGgsIHNjcm9sbExlZnQrNSk7XG5cdFx0XHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldEVsZW1lbnQoKS5zY3JvbGxMZWZ0ID0gc2Nyb2xsUG9zO1xuXHRcdFx0XHRcdHRoaXMuYXV0b1Njcm9sbFRpbWVvdXQgPSBmYWxzZTtcblx0XHRcdFx0fSwgMSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbk1vdmVDb2x1bW5zLm1vZHVsZU5hbWUgPSBcIm1vdmVDb2x1bW5cIjtcblxuY2xhc3MgTW92ZVJvd3MgZXh0ZW5kcyBNb2R1bGV7XG5cblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblxuXHRcdHRoaXMucGxhY2Vob2xkZXJFbGVtZW50ID0gdGhpcy5jcmVhdGVQbGFjZWhvbGRlckVsZW1lbnQoKTtcblx0XHR0aGlzLmhvdmVyRWxlbWVudCA9IGZhbHNlOyAvL2Zsb2F0aW5nIHJvdyBoZWFkZXIgZWxlbWVudFxuXHRcdHRoaXMuY2hlY2tUaW1lb3V0ID0gZmFsc2U7IC8vY2xpY2sgY2hlY2sgdGltZW91dCBob2xkZXJcblx0XHR0aGlzLmNoZWNrUGVyaW9kID0gMTUwOyAvL3BlcmlvZCB0byB3YWl0IG9uIG1vdXNlZG93biB0byBjb25zaWRlciB0aGlzIGEgbW92ZSBhbmQgbm90IGEgY2xpY2tcblx0XHR0aGlzLm1vdmluZyA9IGZhbHNlOyAvL2N1cnJlbnRseSBtb3Zpbmcgcm93XG5cdFx0dGhpcy50b1JvdyA9IGZhbHNlOyAvL2Rlc3RpbmF0aW9uIHJvd1xuXHRcdHRoaXMudG9Sb3dBZnRlciA9IGZhbHNlOyAvL3Bvc2l0aW9uIG9mIG1vdmluZyByb3cgcmVsYXRpdmUgdG8gdGhlIGRlc3RpbmF0aW9uIHJvd1xuXHRcdHRoaXMuaGFzSGFuZGxlID0gZmFsc2U7IC8vcm93IGhhcyBoYW5kbGUgaW5zdGVhZCBvZiBmdWxseSBtb3ZhYmxlIHJvd1xuXHRcdHRoaXMuc3RhcnRZID0gMDsgLy9zdGFydGluZyBZIHBvc2l0aW9uIHdpdGhpbiBoZWFkZXIgZWxlbWVudFxuXHRcdHRoaXMuc3RhcnRYID0gMDsgLy9zdGFydGluZyBYIHBvc2l0aW9uIHdpdGhpbiBoZWFkZXIgZWxlbWVudFxuXG5cdFx0dGhpcy5tb3ZlSG92ZXIgPSB0aGlzLm1vdmVIb3Zlci5iaW5kKHRoaXMpO1xuXHRcdHRoaXMuZW5kTW92ZSA9IHRoaXMuZW5kTW92ZS5iaW5kKHRoaXMpO1xuXHRcdHRoaXMudGFibGVSb3dEcm9wRXZlbnQgPSBmYWxzZTtcblxuXHRcdHRoaXMudG91Y2hNb3ZlID0gZmFsc2U7XG5cblx0XHR0aGlzLmNvbm5lY3Rpb24gPSBmYWxzZTtcblx0XHR0aGlzLmNvbm5lY3Rpb25TZWxlY3RvcnNUYWJsZXMgPSBmYWxzZTtcblx0XHR0aGlzLmNvbm5lY3Rpb25TZWxlY3RvcnNFbGVtZW50cyA9IGZhbHNlO1xuXHRcdHRoaXMuY29ubmVjdGlvbkVsZW1lbnRzID0gW107XG5cdFx0dGhpcy5jb25uZWN0aW9ucyA9IFtdO1xuXG5cdFx0dGhpcy5jb25uZWN0ZWRUYWJsZSA9IGZhbHNlO1xuXHRcdHRoaXMuY29ubmVjdGVkUm93ID0gZmFsc2U7XG5cblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJtb3ZhYmxlUm93c1wiLCBmYWxzZSk7IC8vZW5hYmxlIG1vdmFibGUgcm93c1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcIm1vdmFibGVSb3dzQ29ubmVjdGVkVGFibGVzXCIsIGZhbHNlKTsgLy90YWJsZXMgZm9yIG1vdmFibGUgcm93cyB0byBiZSBjb25uZWN0ZWQgdG9cblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJtb3ZhYmxlUm93c0Nvbm5lY3RlZEVsZW1lbnRzXCIsIGZhbHNlKTsgLy9vdGhlciBlbGVtZW50cyBmb3IgbW92YWJsZSByb3dzIHRvIGJlIGNvbm5lY3RlZCB0b1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcIm1vdmFibGVSb3dzU2VuZGVyXCIsIGZhbHNlKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJtb3ZhYmxlUm93c1JlY2VpdmVyXCIsIFwiaW5zZXJ0XCIpO1xuXG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcInJvd0hhbmRsZVwiKTtcblx0fVxuXG5cdGNyZWF0ZVBsYWNlaG9sZGVyRWxlbWVudCgpe1xuXHRcdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cblx0XHRlbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXJvd1wiKTtcblx0XHRlbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXJvdy1wbGFjZWhvbGRlclwiKTtcblxuXHRcdHJldHVybiBlbDtcblx0fVxuXG5cdGluaXRpYWxpemUoKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMubW92YWJsZVJvd3Mpe1xuXHRcdFx0dGhpcy5jb25uZWN0aW9uU2VsZWN0b3JzVGFibGVzID0gdGhpcy50YWJsZS5vcHRpb25zLm1vdmFibGVSb3dzQ29ubmVjdGVkVGFibGVzO1xuXHRcdFx0dGhpcy5jb25uZWN0aW9uU2VsZWN0b3JzRWxlbWVudHMgPSB0aGlzLnRhYmxlLm9wdGlvbnMubW92YWJsZVJvd3NDb25uZWN0ZWRFbGVtZW50cztcblxuXHRcdFx0dGhpcy5jb25uZWN0aW9uID0gdGhpcy5jb25uZWN0aW9uU2VsZWN0b3JzVGFibGVzIHx8IHRoaXMuY29ubmVjdGlvblNlbGVjdG9yc0VsZW1lbnRzO1xuXG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNlbGwtaW5pdFwiLCB0aGlzLmluaXRpYWxpemVDZWxsLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4taW5pdFwiLCB0aGlzLmluaXRpYWxpemVDb2x1bW4uYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1pbml0XCIsIHRoaXMuaW5pdGlhbGl6ZVJvdy5iaW5kKHRoaXMpKTtcblx0XHR9XG5cdH1cblxuXHRpbml0aWFsaXplR3JvdXBIZWFkZXIoZ3JvdXApe1xuXHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHRjb25maWcgPSB7fTtcblxuXHRcdC8vaW50ZXIgdGFibGUgZHJhZyBkcm9wXG5cdFx0Y29uZmlnLm1vdXNldXAgPSBmdW5jdGlvbihlKXtcblx0XHRcdHNlbGYudGFibGVSb3dEcm9wKGUsIGdyb3VwKTtcblx0XHR9LmJpbmQoc2VsZik7XG5cblx0XHQvL3NhbWUgdGFibGUgZHJhZyBkcm9wXG5cdFx0Y29uZmlnLm1vdXNlbW92ZSA9IGZ1bmN0aW9uKGUpe1xuXHRcdFx0dmFyIHJvd0VsO1xuXG5cdFx0XHRpZigoKGUucGFnZVkgLSBIZWxwZXJzLmVsT2Zmc2V0KGdyb3VwLmVsZW1lbnQpLnRvcCkgKyBzZWxmLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5zY3JvbGxUb3ApID4gKGdyb3VwLmdldEhlaWdodCgpIC8gMikpe1xuXHRcdFx0XHRpZihzZWxmLnRvUm93ICE9PSBncm91cCB8fCAhc2VsZi50b1Jvd0FmdGVyKXtcblx0XHRcdFx0XHRyb3dFbCA9IGdyb3VwLmdldEVsZW1lbnQoKTtcblx0XHRcdFx0XHRyb3dFbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzZWxmLnBsYWNlaG9sZGVyRWxlbWVudCwgcm93RWwubmV4dFNpYmxpbmcpO1xuXHRcdFx0XHRcdHNlbGYubW92ZVJvdyhncm91cCwgdHJ1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aWYoc2VsZi50b1JvdyAhPT0gZ3JvdXAgfHwgc2VsZi50b1Jvd0FmdGVyKXtcblx0XHRcdFx0XHRyb3dFbCA9IGdyb3VwLmdldEVsZW1lbnQoKTtcblx0XHRcdFx0XHRpZihyb3dFbC5wcmV2aW91c1NpYmxpbmcpe1xuXHRcdFx0XHRcdFx0cm93RWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc2VsZi5wbGFjZWhvbGRlckVsZW1lbnQsIHJvd0VsKTtcblx0XHRcdFx0XHRcdHNlbGYubW92ZVJvdyhncm91cCwgZmFsc2UpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0uYmluZChzZWxmKTtcblxuXHRcdGdyb3VwLm1vZHVsZXMubW92ZVJvdyA9IGNvbmZpZztcblx0fVxuXG5cdGluaXRpYWxpemVSb3cocm93KXtcblx0XHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0Y29uZmlnID0ge30sXG5cdFx0cm93RWw7XG5cblx0XHQvL2ludGVyIHRhYmxlIGRyYWcgZHJvcFxuXHRcdGNvbmZpZy5tb3VzZXVwID0gZnVuY3Rpb24oZSl7XG5cdFx0XHRzZWxmLnRhYmxlUm93RHJvcChlLCByb3cpO1xuXHRcdH0uYmluZChzZWxmKTtcblxuXHRcdC8vc2FtZSB0YWJsZSBkcmFnIGRyb3Bcblx0XHRjb25maWcubW91c2Vtb3ZlID0gZnVuY3Rpb24oZSl7XG5cdFx0XHR2YXIgcm93RWwgPSByb3cuZ2V0RWxlbWVudCgpO1xuXG5cdFx0XHRpZigoKGUucGFnZVkgLSBIZWxwZXJzLmVsT2Zmc2V0KHJvd0VsKS50b3ApICsgc2VsZi50YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQuc2Nyb2xsVG9wKSA+IChyb3cuZ2V0SGVpZ2h0KCkgLyAyKSl7XG5cdFx0XHRcdGlmKHNlbGYudG9Sb3cgIT09IHJvdyB8fCAhc2VsZi50b1Jvd0FmdGVyKXtcblx0XHRcdFx0XHRyb3dFbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzZWxmLnBsYWNlaG9sZGVyRWxlbWVudCwgcm93RWwubmV4dFNpYmxpbmcpO1xuXHRcdFx0XHRcdHNlbGYubW92ZVJvdyhyb3csIHRydWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlmKHNlbGYudG9Sb3cgIT09IHJvdyB8fCBzZWxmLnRvUm93QWZ0ZXIpe1xuXHRcdFx0XHRcdHJvd0VsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHNlbGYucGxhY2Vob2xkZXJFbGVtZW50LCByb3dFbCk7XG5cdFx0XHRcdFx0c2VsZi5tb3ZlUm93KHJvdywgZmFsc2UpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fS5iaW5kKHNlbGYpO1xuXG5cblx0XHRpZighdGhpcy5oYXNIYW5kbGUpe1xuXG5cdFx0XHRyb3dFbCA9IHJvdy5nZXRFbGVtZW50KCk7XG5cblx0XHRcdHJvd0VsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgZnVuY3Rpb24oZSl7XG5cdFx0XHRcdGlmKGUud2hpY2ggPT09IDEpe1xuXHRcdFx0XHRcdHNlbGYuY2hlY2tUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuXHRcdFx0XHRcdFx0c2VsZi5zdGFydE1vdmUoZSwgcm93KTtcblx0XHRcdFx0XHR9LCBzZWxmLmNoZWNrUGVyaW9kKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHJvd0VsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRpZihlLndoaWNoID09PSAxKXtcblx0XHRcdFx0XHRpZihzZWxmLmNoZWNrVGltZW91dCl7XG5cdFx0XHRcdFx0XHRjbGVhclRpbWVvdXQoc2VsZi5jaGVja1RpbWVvdXQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMuYmluZFRvdWNoRXZlbnRzKHJvdywgcm93LmdldEVsZW1lbnQoKSk7XG5cdFx0fVxuXG5cdFx0cm93Lm1vZHVsZXMubW92ZVJvdyA9IGNvbmZpZztcblx0fVxuXG5cdGluaXRpYWxpemVDb2x1bW4oY29sdW1uKXtcblx0XHRpZihjb2x1bW4uZGVmaW5pdGlvbi5yb3dIYW5kbGUgJiYgdGhpcy50YWJsZS5vcHRpb25zLm1vdmFibGVSb3dzICE9PSBmYWxzZSl7XG5cdFx0XHR0aGlzLmhhc0hhbmRsZSA9IHRydWU7XG5cdFx0fVxuXHR9XG5cblx0aW5pdGlhbGl6ZUNlbGwoY2VsbCl7XG5cdFx0aWYoY2VsbC5jb2x1bW4uZGVmaW5pdGlvbi5yb3dIYW5kbGUgJiYgdGhpcy50YWJsZS5vcHRpb25zLm1vdmFibGVSb3dzICE9PSBmYWxzZSl7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0XHRjZWxsRWwgPSBjZWxsLmdldEVsZW1lbnQodHJ1ZSk7XG5cblx0XHRcdGNlbGxFbC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRpZihlLndoaWNoID09PSAxKXtcblx0XHRcdFx0XHRzZWxmLmNoZWNrVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdHNlbGYuc3RhcnRNb3ZlKGUsIGNlbGwucm93KTtcblx0XHRcdFx0XHR9LCBzZWxmLmNoZWNrUGVyaW9kKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdGNlbGxFbC5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBmdW5jdGlvbihlKXtcblx0XHRcdFx0aWYoZS53aGljaCA9PT0gMSl7XG5cdFx0XHRcdFx0aWYoc2VsZi5jaGVja1RpbWVvdXQpe1xuXHRcdFx0XHRcdFx0Y2xlYXJUaW1lb3V0KHNlbGYuY2hlY2tUaW1lb3V0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLmJpbmRUb3VjaEV2ZW50cyhjZWxsLnJvdywgY2VsbEVsKTtcblx0XHR9XG5cdH1cblxuXHRiaW5kVG91Y2hFdmVudHMocm93LCBlbGVtZW50KXtcblx0XHR2YXIgc3RhcnRZTW92ZSA9IGZhbHNlLCAvL3NoaWZ0aW5nIGNlbnRlciBwb3NpdGlvbiBvZiB0aGUgY2VsbFxuXHRcdG5leHRSb3csIHByZXZSb3csIG5leHRSb3dIZWlnaHQsIHByZXZSb3dIZWlnaHQsIG5leHRSb3dIZWlnaHRMYXN0LCBwcmV2Um93SGVpZ2h0TGFzdDtcblxuXHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgKGUpID0+IHtcblx0XHRcdHRoaXMuY2hlY2tUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdHRoaXMudG91Y2hNb3ZlID0gdHJ1ZTtcblx0XHRcdFx0bmV4dFJvdyA9IHJvdy5uZXh0Um93KCk7XG5cdFx0XHRcdG5leHRSb3dIZWlnaHQgPSBuZXh0Um93ID8gbmV4dFJvdy5nZXRIZWlnaHQoKS8yIDogMDtcblx0XHRcdFx0cHJldlJvdyA9IHJvdy5wcmV2Um93KCk7XG5cdFx0XHRcdHByZXZSb3dIZWlnaHQgPSBwcmV2Um93ID8gcHJldlJvdy5nZXRIZWlnaHQoKS8yIDogMDtcblx0XHRcdFx0bmV4dFJvd0hlaWdodExhc3QgPSAwO1xuXHRcdFx0XHRwcmV2Um93SGVpZ2h0TGFzdCA9IDA7XG5cdFx0XHRcdHN0YXJ0WU1vdmUgPSBmYWxzZTtcblxuXHRcdFx0XHR0aGlzLnN0YXJ0TW92ZShlLCByb3cpO1xuXHRcdFx0fSwgdGhpcy5jaGVja1BlcmlvZCk7XG5cdFx0fSwge3Bhc3NpdmU6IHRydWV9KTtcblx0XHR0aGlzLm1vdmluZywgdGhpcy50b1JvdywgdGhpcy50b1Jvd0FmdGVyO1xuXHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCAoZSkgPT4ge1xuXG5cdFx0XHR2YXIgZGlmZiwgbW92ZVRvUm93O1xuXG5cdFx0XHRpZih0aGlzLm1vdmluZyl7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0XHR0aGlzLm1vdmVIb3ZlcihlKTtcblxuXHRcdFx0XHRpZighc3RhcnRZTW92ZSl7XG5cdFx0XHRcdFx0c3RhcnRZTW92ZSA9IGUudG91Y2hlc1swXS5wYWdlWTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRpZmYgPSBlLnRvdWNoZXNbMF0ucGFnZVkgLSBzdGFydFlNb3ZlO1xuXG5cdFx0XHRcdGlmKGRpZmYgPiAwKXtcblx0XHRcdFx0XHRpZihuZXh0Um93ICYmIGRpZmYgLSBuZXh0Um93SGVpZ2h0TGFzdCA+IG5leHRSb3dIZWlnaHQpe1xuXHRcdFx0XHRcdFx0bW92ZVRvUm93ID0gbmV4dFJvdztcblxuXHRcdFx0XHRcdFx0aWYobW92ZVRvUm93ICE9PSByb3cpe1xuXHRcdFx0XHRcdFx0XHRzdGFydFlNb3ZlID0gZS50b3VjaGVzWzBdLnBhZ2VZO1xuXHRcdFx0XHRcdFx0XHRtb3ZlVG9Sb3cuZ2V0RWxlbWVudCgpLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMucGxhY2Vob2xkZXJFbGVtZW50LCBtb3ZlVG9Sb3cuZ2V0RWxlbWVudCgpLm5leHRTaWJsaW5nKTtcblx0XHRcdFx0XHRcdFx0dGhpcy5tb3ZlUm93KG1vdmVUb1JvdywgdHJ1ZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0aWYocHJldlJvdyAmJiAtZGlmZiAtIHByZXZSb3dIZWlnaHRMYXN0ID4gIHByZXZSb3dIZWlnaHQpe1xuXHRcdFx0XHRcdFx0bW92ZVRvUm93ID0gcHJldlJvdztcblxuXHRcdFx0XHRcdFx0aWYobW92ZVRvUm93ICE9PSByb3cpe1xuXHRcdFx0XHRcdFx0XHRzdGFydFlNb3ZlID0gZS50b3VjaGVzWzBdLnBhZ2VZO1xuXHRcdFx0XHRcdFx0XHRtb3ZlVG9Sb3cuZ2V0RWxlbWVudCgpLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMucGxhY2Vob2xkZXJFbGVtZW50LCBtb3ZlVG9Sb3cuZ2V0RWxlbWVudCgpKTtcblx0XHRcdFx0XHRcdFx0dGhpcy5tb3ZlUm93KG1vdmVUb1JvdywgZmFsc2UpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmKG1vdmVUb1Jvdyl7XG5cdFx0XHRcdFx0bmV4dFJvdyA9IG1vdmVUb1Jvdy5uZXh0Um93KCk7XG5cdFx0XHRcdFx0bmV4dFJvd0hlaWdodExhc3QgPSBuZXh0Um93SGVpZ2h0O1xuXHRcdFx0XHRcdG5leHRSb3dIZWlnaHQgPSBuZXh0Um93ID8gbmV4dFJvdy5nZXRIZWlnaHQoKSAvIDIgOiAwO1xuXHRcdFx0XHRcdHByZXZSb3cgPSBtb3ZlVG9Sb3cucHJldlJvdygpO1xuXHRcdFx0XHRcdHByZXZSb3dIZWlnaHRMYXN0ID0gcHJldlJvd0hlaWdodDtcblx0XHRcdFx0XHRwcmV2Um93SGVpZ2h0ID0gcHJldlJvdyA/IHByZXZSb3cuZ2V0SGVpZ2h0KCkgLyAyIDogMDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgKGUpID0+IHtcblx0XHRcdGlmKHRoaXMuY2hlY2tUaW1lb3V0KXtcblx0XHRcdFx0Y2xlYXJUaW1lb3V0KHRoaXMuY2hlY2tUaW1lb3V0KTtcblx0XHRcdH1cblx0XHRcdGlmKHRoaXMubW92aW5nKXtcblx0XHRcdFx0dGhpcy5lbmRNb3ZlKGUpO1xuXHRcdFx0XHR0aGlzLnRvdWNoTW92ZSA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0X2JpbmRNb3VzZU1vdmUoKXtcblx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0RGlzcGxheVJvd3MoKS5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdGlmKChyb3cudHlwZSA9PT0gXCJyb3dcIiB8fCByb3cudHlwZSA9PT0gXCJncm91cFwiKSAmJiByb3cubW9kdWxlcy5tb3ZlUm93ICYmIHJvdy5tb2R1bGVzLm1vdmVSb3cubW91c2Vtb3ZlKXtcblx0XHRcdFx0cm93LmdldEVsZW1lbnQoKS5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHJvdy5tb2R1bGVzLm1vdmVSb3cubW91c2Vtb3ZlKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdF91bmJpbmRNb3VzZU1vdmUoKXtcblx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0RGlzcGxheVJvd3MoKS5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdGlmKChyb3cudHlwZSA9PT0gXCJyb3dcIiB8fCByb3cudHlwZSA9PT0gXCJncm91cFwiKSAmJiByb3cubW9kdWxlcy5tb3ZlUm93ICYmIHJvdy5tb2R1bGVzLm1vdmVSb3cubW91c2Vtb3ZlKXtcblx0XHRcdFx0cm93LmdldEVsZW1lbnQoKS5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHJvdy5tb2R1bGVzLm1vdmVSb3cubW91c2Vtb3ZlKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdHN0YXJ0TW92ZShlLCByb3cpe1xuXHRcdHZhciBlbGVtZW50ID0gcm93LmdldEVsZW1lbnQoKTtcblxuXHRcdHRoaXMuc2V0U3RhcnRQb3NpdGlvbihlLCByb3cpO1xuXG5cdFx0dGhpcy5tb3ZpbmcgPSByb3c7XG5cblx0XHR0aGlzLnRhYmxlLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1ibG9jay1zZWxlY3RcIik7XG5cblx0XHQvL2NyZWF0ZSBwbGFjZWhvbGRlclxuXHRcdHRoaXMucGxhY2Vob2xkZXJFbGVtZW50LnN0eWxlLndpZHRoID0gcm93LmdldFdpZHRoKCkgKyBcInB4XCI7XG5cdFx0dGhpcy5wbGFjZWhvbGRlckVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gcm93LmdldEhlaWdodCgpICsgXCJweFwiO1xuXG5cdFx0aWYoIXRoaXMuY29ubmVjdGlvbil7XG5cdFx0XHRlbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMucGxhY2Vob2xkZXJFbGVtZW50LCBlbGVtZW50KTtcblx0XHRcdGVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtZW50KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLnRhYmxlLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1tb3Zpbmdyb3ctc2VuZGluZ1wiKTtcblx0XHRcdHRoaXMuY29ubmVjdFRvVGFibGVzKHJvdyk7XG5cdFx0fVxuXG5cdFx0Ly9jcmVhdGUgaG92ZXIgZWxlbWVudFxuXHRcdHRoaXMuaG92ZXJFbGVtZW50ID0gZWxlbWVudC5jbG9uZU5vZGUodHJ1ZSk7XG5cdFx0dGhpcy5ob3ZlckVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1tb3ZpbmdcIik7XG5cblx0XHRpZih0aGlzLmNvbm5lY3Rpb24pe1xuXHRcdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmhvdmVyRWxlbWVudCk7XG5cdFx0XHR0aGlzLmhvdmVyRWxlbWVudC5zdHlsZS5sZWZ0ID0gXCIwXCI7XG5cdFx0XHR0aGlzLmhvdmVyRWxlbWVudC5zdHlsZS50b3AgPSBcIjBcIjtcblx0XHRcdHRoaXMuaG92ZXJFbGVtZW50LnN0eWxlLndpZHRoID0gdGhpcy50YWJsZS5lbGVtZW50LmNsaWVudFdpZHRoICsgXCJweFwiO1xuXHRcdFx0dGhpcy5ob3ZlckVsZW1lbnQuc3R5bGUud2hpdGVTcGFjZSA9IFwibm93cmFwXCI7XG5cdFx0XHR0aGlzLmhvdmVyRWxlbWVudC5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0XHR0aGlzLmhvdmVyRWxlbWVudC5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJub25lXCI7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldFRhYmxlRWxlbWVudCgpLmFwcGVuZENoaWxkKHRoaXMuaG92ZXJFbGVtZW50KTtcblxuXHRcdFx0dGhpcy5ob3ZlckVsZW1lbnQuc3R5bGUubGVmdCA9IFwiMFwiO1xuXHRcdFx0dGhpcy5ob3ZlckVsZW1lbnQuc3R5bGUudG9wID0gXCIwXCI7XG5cblx0XHRcdHRoaXMuX2JpbmRNb3VzZU1vdmUoKTtcblx0XHR9XG5cblx0XHRkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5tb3ZlSG92ZXIpO1xuXHRcdGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy5lbmRNb3ZlKTtcblxuXHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInJvd01vdmluZ1wiLCByb3cuZ2V0Q29tcG9uZW50KCkpO1xuXG5cdFx0dGhpcy5tb3ZlSG92ZXIoZSk7XG5cdH1cblxuXHRzZXRTdGFydFBvc2l0aW9uKGUsIHJvdyl7XG5cdFx0dmFyIHBhZ2VYID0gdGhpcy50b3VjaE1vdmUgPyBlLnRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYLFxuXHRcdHBhZ2VZID0gdGhpcy50b3VjaE1vdmUgPyBlLnRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZLFxuXHRcdGVsZW1lbnQsIHBvc2l0aW9uO1xuXG5cdFx0ZWxlbWVudCA9IHJvdy5nZXRFbGVtZW50KCk7XG5cdFx0aWYodGhpcy5jb25uZWN0aW9uKXtcblx0XHRcdHBvc2l0aW9uID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdFx0dGhpcy5zdGFydFggPSBwb3NpdGlvbi5sZWZ0IC0gcGFnZVggKyB3aW5kb3cucGFnZVhPZmZzZXQ7XG5cdFx0XHR0aGlzLnN0YXJ0WSA9IHBvc2l0aW9uLnRvcCAtIHBhZ2VZICsgd2luZG93LnBhZ2VZT2Zmc2V0O1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuc3RhcnRZID0gKHBhZ2VZIC0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3ApO1xuXHRcdH1cblx0fVxuXG5cdGVuZE1vdmUoZSl7XG5cdFx0aWYoIWUgfHwgZS53aGljaCA9PT0gMSB8fCB0aGlzLnRvdWNoTW92ZSl7XG5cdFx0XHR0aGlzLl91bmJpbmRNb3VzZU1vdmUoKTtcblxuXHRcdFx0aWYoIXRoaXMuY29ubmVjdGlvbil7XG5cdFx0XHRcdHRoaXMucGxhY2Vob2xkZXJFbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMubW92aW5nLmdldEVsZW1lbnQoKSwgdGhpcy5wbGFjZWhvbGRlckVsZW1lbnQubmV4dFNpYmxpbmcpO1xuXHRcdFx0XHR0aGlzLnBsYWNlaG9sZGVyRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMucGxhY2Vob2xkZXJFbGVtZW50KTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5ob3ZlckVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmhvdmVyRWxlbWVudCk7XG5cblx0XHRcdHRoaXMudGFibGUuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwidGFidWxhdG9yLWJsb2NrLXNlbGVjdFwiKTtcblxuXHRcdFx0aWYodGhpcy50b1Jvdyl7XG5cdFx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5tb3ZlUm93KHRoaXMubW92aW5nLCB0aGlzLnRvUm93LCB0aGlzLnRvUm93QWZ0ZXIpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJyb3dNb3ZlQ2FuY2VsbGVkXCIsIHRoaXMubW92aW5nLmdldENvbXBvbmVudCgpKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5tb3ZpbmcgPSBmYWxzZTtcblx0XHRcdHRoaXMudG9Sb3cgPSBmYWxzZTtcblx0XHRcdHRoaXMudG9Sb3dBZnRlciA9IGZhbHNlO1xuXG5cdFx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5tb3ZlSG92ZXIpO1xuXHRcdFx0ZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLmVuZE1vdmUpO1xuXG5cdFx0XHRpZih0aGlzLmNvbm5lY3Rpb24pe1xuXHRcdFx0XHR0aGlzLnRhYmxlLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcInRhYnVsYXRvci1tb3Zpbmdyb3ctc2VuZGluZ1wiKTtcblx0XHRcdFx0dGhpcy5kaXNjb25uZWN0RnJvbVRhYmxlcygpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdG1vdmVSb3cocm93LCBhZnRlcil7XG5cdFx0dGhpcy50b1JvdyA9IHJvdztcblx0XHR0aGlzLnRvUm93QWZ0ZXIgPSBhZnRlcjtcblx0fVxuXG5cdG1vdmVIb3ZlcihlKXtcblx0XHRpZih0aGlzLmNvbm5lY3Rpb24pe1xuXHRcdFx0dGhpcy5tb3ZlSG92ZXJDb25uZWN0aW9ucy5jYWxsKHRoaXMsIGUpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMubW92ZUhvdmVyVGFibGUuY2FsbCh0aGlzLCBlKTtcblx0XHR9XG5cdH1cblxuXHRtb3ZlSG92ZXJUYWJsZShlKXtcblx0XHR2YXIgcm93SG9sZGVyID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldEVsZW1lbnQoKSxcblx0XHRzY3JvbGxUb3AgPSByb3dIb2xkZXIuc2Nyb2xsVG9wLFxuXHRcdHlQb3MgPSAoKHRoaXMudG91Y2hNb3ZlID8gZS50b3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWSkgLSByb3dIb2xkZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wKSArIHNjcm9sbFRvcDtcblx0XHRcblx0XHR0aGlzLmhvdmVyRWxlbWVudC5zdHlsZS50b3AgPSBNYXRoLm1pbih5UG9zIC0gdGhpcy5zdGFydFksIHRoaXMudGFibGUucm93TWFuYWdlci5lbGVtZW50LnNjcm9sbEhlaWdodCAtIHRoaXMuaG92ZXJFbGVtZW50Lm9mZnNldEhlaWdodCkgKyBcInB4XCI7XG5cdH1cblxuXHRtb3ZlSG92ZXJDb25uZWN0aW9ucyhlKXtcblx0XHR0aGlzLmhvdmVyRWxlbWVudC5zdHlsZS5sZWZ0ID0gKHRoaXMuc3RhcnRYICsgKHRoaXMudG91Y2hNb3ZlID8gZS50b3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWCkpICsgXCJweFwiO1xuXHRcdHRoaXMuaG92ZXJFbGVtZW50LnN0eWxlLnRvcCA9ICh0aGlzLnN0YXJ0WSArICh0aGlzLnRvdWNoTW92ZSA/IGUudG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVkpKSArIFwicHhcIjtcblx0fVxuXG5cdGVsZW1lbnRSb3dEcm9wKGUsIGVsZW1lbnQsIHJvdyl7XG5cdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwibW92YWJsZVJvd3NFbGVtZW50RHJvcFwiLCBlLCBlbGVtZW50LCByb3cgPyByb3cuZ2V0Q29tcG9uZW50KCkgOiBmYWxzZSk7XG5cdH1cblxuXHQvL2VzdGFibGlzaCBjb25uZWN0aW9uIHdpdGggb3RoZXIgdGFibGVzXG5cdGNvbm5lY3RUb1RhYmxlcyhyb3cpe1xuXHRcdHZhciBjb25uZWN0aW9uVGFibGVzO1xuXG5cdFx0aWYodGhpcy5jb25uZWN0aW9uU2VsZWN0b3JzVGFibGVzKXtcblx0XHRcdGNvbm5lY3Rpb25UYWJsZXMgPSB0aGlzLmNvbW1zQ29ubmVjdGlvbnModGhpcy5jb25uZWN0aW9uU2VsZWN0b3JzVGFibGVzKTtcblxuXHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwibW92YWJsZVJvd3NTZW5kaW5nU3RhcnRcIiwgY29ubmVjdGlvblRhYmxlcyk7XG5cblx0XHRcdHRoaXMuY29tbXNTZW5kKHRoaXMuY29ubmVjdGlvblNlbGVjdG9yc1RhYmxlcywgXCJtb3ZlUm93XCIsIFwiY29ubmVjdFwiLCB7XG5cdFx0XHRcdHJvdzpyb3csXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZih0aGlzLmNvbm5lY3Rpb25TZWxlY3RvcnNFbGVtZW50cyl7XG5cblx0XHRcdHRoaXMuY29ubmVjdGlvbkVsZW1lbnRzID0gW107XG5cblx0XHRcdGlmKCFBcnJheS5pc0FycmF5KHRoaXMuY29ubmVjdGlvblNlbGVjdG9yc0VsZW1lbnRzKSl7XG5cdFx0XHRcdHRoaXMuY29ubmVjdGlvblNlbGVjdG9yc0VsZW1lbnRzID0gW3RoaXMuY29ubmVjdGlvblNlbGVjdG9yc0VsZW1lbnRzXTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5jb25uZWN0aW9uU2VsZWN0b3JzRWxlbWVudHMuZm9yRWFjaCgocXVlcnkpID0+IHtcblx0XHRcdFx0aWYodHlwZW9mIHF1ZXJ5ID09PSBcInN0cmluZ1wiKXtcblx0XHRcdFx0XHR0aGlzLmNvbm5lY3Rpb25FbGVtZW50cyA9IHRoaXMuY29ubmVjdGlvbkVsZW1lbnRzLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHF1ZXJ5KSkpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5jb25uZWN0aW9uRWxlbWVudHMucHVzaChxdWVyeSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLmNvbm5lY3Rpb25FbGVtZW50cy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG5cdFx0XHRcdHZhciBkcm9wRXZlbnQgPSAoZSkgPT4ge1xuXHRcdFx0XHRcdHRoaXMuZWxlbWVudFJvd0Ryb3AoZSwgZWxlbWVudCwgdGhpcy5tb3ZpbmcpO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgZHJvcEV2ZW50KTtcblx0XHRcdFx0ZWxlbWVudC50YWJ1bGF0b3JFbGVtZW50RHJvcEV2ZW50ID0gZHJvcEV2ZW50O1xuXG5cdFx0XHRcdGVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1tb3Zpbmdyb3ctcmVjZWl2aW5nXCIpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0Ly9kaXNjb25uZWN0IGZyb20gb3RoZXIgdGFibGVzXG5cdGRpc2Nvbm5lY3RGcm9tVGFibGVzKCl7XG5cdFx0dmFyIGNvbm5lY3Rpb25UYWJsZXM7XG5cblx0XHRpZih0aGlzLmNvbm5lY3Rpb25TZWxlY3RvcnNUYWJsZXMpe1xuXHRcdFx0Y29ubmVjdGlvblRhYmxlcyA9IHRoaXMuY29tbXNDb25uZWN0aW9ucyh0aGlzLmNvbm5lY3Rpb25TZWxlY3RvcnNUYWJsZXMpO1xuXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJtb3ZhYmxlUm93c1NlbmRpbmdTdG9wXCIsIGNvbm5lY3Rpb25UYWJsZXMpO1xuXG5cdFx0XHR0aGlzLmNvbW1zU2VuZCh0aGlzLmNvbm5lY3Rpb25TZWxlY3RvcnNUYWJsZXMsIFwibW92ZVJvd1wiLCBcImRpc2Nvbm5lY3RcIik7XG5cdFx0fVxuXG5cdFx0dGhpcy5jb25uZWN0aW9uRWxlbWVudHMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuXHRcdFx0ZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwidGFidWxhdG9yLW1vdmluZ3Jvdy1yZWNlaXZpbmdcIik7XG5cdFx0XHRlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIGVsZW1lbnQudGFidWxhdG9yRWxlbWVudERyb3BFdmVudCk7XG5cdFx0XHRkZWxldGUgZWxlbWVudC50YWJ1bGF0b3JFbGVtZW50RHJvcEV2ZW50O1xuXHRcdH0pO1xuXHR9XG5cblx0Ly9hY2NlcHQgaW5jb21taW5nIGNvbm5lY3Rpb25cblx0Y29ubmVjdCh0YWJsZSwgcm93KXtcblx0XHRpZighdGhpcy5jb25uZWN0ZWRUYWJsZSl7XG5cdFx0XHR0aGlzLmNvbm5lY3RlZFRhYmxlID0gdGFibGU7XG5cdFx0XHR0aGlzLmNvbm5lY3RlZFJvdyA9IHJvdztcblxuXHRcdFx0dGhpcy50YWJsZS5lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItbW92aW5ncm93LXJlY2VpdmluZ1wiKTtcblxuXHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldERpc3BsYXlSb3dzKCkuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRcdGlmKHJvdy50eXBlID09PSBcInJvd1wiICYmIHJvdy5tb2R1bGVzLm1vdmVSb3cgJiYgcm93Lm1vZHVsZXMubW92ZVJvdy5tb3VzZXVwKXtcblx0XHRcdFx0XHRyb3cuZ2V0RWxlbWVudCgpLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHJvdy5tb2R1bGVzLm1vdmVSb3cubW91c2V1cCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLnRhYmxlUm93RHJvcEV2ZW50ID0gdGhpcy50YWJsZVJvd0Ryb3AuYmluZCh0aGlzKTtcblxuXHRcdFx0dGhpcy50YWJsZS5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMudGFibGVSb3dEcm9wRXZlbnQpO1xuXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJtb3ZhYmxlUm93c1JlY2VpdmluZ1N0YXJ0XCIsIHJvdywgdGFibGUpO1xuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJNb3ZlIFJvdyBFcnJvciAtIFRhYmxlIGNhbm5vdCBhY2NlcHQgY29ubmVjdGlvbiwgYWxyZWFkeSBjb25uZWN0ZWQgdG8gdGFibGU6XCIsIHRoaXMuY29ubmVjdGVkVGFibGUpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXG5cdC8vY2xvc2UgaW5jb21pbmcgY29ubmVjdGlvblxuXHRkaXNjb25uZWN0KHRhYmxlKXtcblx0XHRpZih0YWJsZSA9PT0gdGhpcy5jb25uZWN0ZWRUYWJsZSl7XG5cdFx0XHR0aGlzLmNvbm5lY3RlZFRhYmxlID0gZmFsc2U7XG5cdFx0XHR0aGlzLmNvbm5lY3RlZFJvdyA9IGZhbHNlO1xuXG5cdFx0XHR0aGlzLnRhYmxlLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcInRhYnVsYXRvci1tb3Zpbmdyb3ctcmVjZWl2aW5nXCIpO1xuXG5cdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0RGlzcGxheVJvd3MoKS5mb3JFYWNoKChyb3cpID0+e1xuXHRcdFx0XHRpZihyb3cudHlwZSA9PT0gXCJyb3dcIiAmJiByb3cubW9kdWxlcy5tb3ZlUm93ICYmIHJvdy5tb2R1bGVzLm1vdmVSb3cubW91c2V1cCl7XG5cdFx0XHRcdFx0cm93LmdldEVsZW1lbnQoKS5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCByb3cubW9kdWxlcy5tb3ZlUm93Lm1vdXNldXApO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy50YWJsZS5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMudGFibGVSb3dEcm9wRXZlbnQpO1xuXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJtb3ZhYmxlUm93c1JlY2VpdmluZ1N0b3BcIiwgdGFibGUpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIk1vdmUgUm93IEVycm9yIC0gdHJ5aW5nIHRvIGRpc2Nvbm5lY3QgZnJvbSBub24gY29ubmVjdGVkIHRhYmxlXCIpO1xuXHRcdH1cblx0fVxuXG5cdGRyb3BDb21wbGV0ZSh0YWJsZSwgcm93LCBzdWNjZXNzKXtcblx0XHR2YXIgc2VuZGVyID0gZmFsc2U7XG5cblx0XHRpZihzdWNjZXNzKXtcblxuXHRcdFx0c3dpdGNoKHR5cGVvZiB0aGlzLnRhYmxlLm9wdGlvbnMubW92YWJsZVJvd3NTZW5kZXIpe1xuXHRcdFx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRcdFx0c2VuZGVyID0gdGhpcy5zZW5kZXJzW3RoaXMudGFibGUub3B0aW9ucy5tb3ZhYmxlUm93c1NlbmRlcl07XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHRcdFx0c2VuZGVyID0gdGhpcy50YWJsZS5vcHRpb25zLm1vdmFibGVSb3dzU2VuZGVyO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXG5cdFx0XHRpZihzZW5kZXIpe1xuXHRcdFx0XHRzZW5kZXIuY2FsbCh0aGlzLCB0aGlzLm1vdmluZyA/IHRoaXMubW92aW5nLmdldENvbXBvbmVudCgpIDogdW5kZWZpbmVkLCByb3cgPyByb3cuZ2V0Q29tcG9uZW50KCkgOiB1bmRlZmluZWQsIHRhYmxlKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLm1vdmFibGVSb3dzU2VuZGVyKXtcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJNb3ZlciBSb3cgRXJyb3IgLSBubyBtYXRjaGluZyBzZW5kZXIgZm91bmQ6XCIsIHRoaXMudGFibGUub3B0aW9ucy5tb3ZhYmxlUm93c1NlbmRlcik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwibW92YWJsZVJvd3NTZW50XCIsIHRoaXMubW92aW5nLmdldENvbXBvbmVudCgpLCByb3cgPyByb3cuZ2V0Q29tcG9uZW50KCkgOiB1bmRlZmluZWQsIHRhYmxlKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJtb3ZhYmxlUm93c1NlbnRGYWlsZWRcIiwgdGhpcy5tb3ZpbmcuZ2V0Q29tcG9uZW50KCksIHJvdyA/IHJvdy5nZXRDb21wb25lbnQoKSA6IHVuZGVmaW5lZCwgdGFibGUpO1xuXHRcdH1cblxuXHRcdHRoaXMuZW5kTW92ZSgpO1xuXHR9XG5cblx0dGFibGVSb3dEcm9wKGUsIHJvdyl7XG5cdFx0dmFyIHJlY2VpdmVyID0gZmFsc2UsXG5cdFx0c3VjY2VzcyA9IGZhbHNlO1xuXG5cdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblxuXHRcdHN3aXRjaCh0eXBlb2YgdGhpcy50YWJsZS5vcHRpb25zLm1vdmFibGVSb3dzUmVjZWl2ZXIpe1xuXHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0XHRyZWNlaXZlciA9IHRoaXMucmVjZWl2ZXJzW3RoaXMudGFibGUub3B0aW9ucy5tb3ZhYmxlUm93c1JlY2VpdmVyXTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgXCJmdW5jdGlvblwiOlxuXHRcdFx0XHRyZWNlaXZlciA9IHRoaXMudGFibGUub3B0aW9ucy5tb3ZhYmxlUm93c1JlY2VpdmVyO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cblx0XHRpZihyZWNlaXZlcil7XG5cdFx0XHRzdWNjZXNzID0gcmVjZWl2ZXIuY2FsbCh0aGlzLCB0aGlzLmNvbm5lY3RlZFJvdy5nZXRDb21wb25lbnQoKSwgcm93ID8gcm93LmdldENvbXBvbmVudCgpIDogdW5kZWZpbmVkLCB0aGlzLmNvbm5lY3RlZFRhYmxlKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJNb3ZlciBSb3cgRXJyb3IgLSBubyBtYXRjaGluZyByZWNlaXZlciBmb3VuZDpcIiwgdGhpcy50YWJsZS5vcHRpb25zLm1vdmFibGVSb3dzUmVjZWl2ZXIpO1xuXHRcdH1cblxuXHRcdGlmKHN1Y2Nlc3Mpe1xuXHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwibW92YWJsZVJvd3NSZWNlaXZlZFwiLCB0aGlzLmNvbm5lY3RlZFJvdy5nZXRDb21wb25lbnQoKSwgcm93ID8gcm93LmdldENvbXBvbmVudCgpIDogdW5kZWZpbmVkLCB0aGlzLmNvbm5lY3RlZFRhYmxlKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJtb3ZhYmxlUm93c1JlY2VpdmVkRmFpbGVkXCIsIHRoaXMuY29ubmVjdGVkUm93LmdldENvbXBvbmVudCgpLCByb3cgPyByb3cuZ2V0Q29tcG9uZW50KCkgOiB1bmRlZmluZWQsIHRoaXMuY29ubmVjdGVkVGFibGUpO1xuXHRcdH1cblxuXHRcdHRoaXMuY29tbXNTZW5kKHRoaXMuY29ubmVjdGVkVGFibGUsIFwibW92ZVJvd1wiLCBcImRyb3Bjb21wbGV0ZVwiLCB7XG5cdFx0XHRyb3c6cm93LFxuXHRcdFx0c3VjY2VzczpzdWNjZXNzLFxuXHRcdH0pO1xuXHR9XG5cblx0Y29tbXNSZWNlaXZlZCh0YWJsZSwgYWN0aW9uLCBkYXRhKXtcblx0XHRzd2l0Y2goYWN0aW9uKXtcblx0XHRcdGNhc2UgXCJjb25uZWN0XCI6XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbm5lY3QodGFibGUsIGRhdGEucm93KTtcblxuXHRcdFx0Y2FzZSBcImRpc2Nvbm5lY3RcIjpcblx0XHRcdFx0cmV0dXJuIHRoaXMuZGlzY29ubmVjdCh0YWJsZSk7XG5cblx0XHRcdGNhc2UgXCJkcm9wY29tcGxldGVcIjpcblx0XHRcdFx0cmV0dXJuIHRoaXMuZHJvcENvbXBsZXRlKHRhYmxlLCBkYXRhLnJvdywgZGF0YS5zdWNjZXNzKTtcblx0XHR9XG5cdH1cbn1cblxuTW92ZVJvd3MucHJvdG90eXBlLnJlY2VpdmVycyA9IHtcblx0aW5zZXJ0OmZ1bmN0aW9uKGZyb21Sb3csIHRvUm93LCBmcm9tVGFibGUpe1xuXHRcdHRoaXMudGFibGUuYWRkUm93KGZyb21Sb3cuZ2V0RGF0YSgpLCB1bmRlZmluZWQsIHRvUm93KTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHRhZGQ6ZnVuY3Rpb24oZnJvbVJvdywgdG9Sb3csIGZyb21UYWJsZSl7XG5cdFx0dGhpcy50YWJsZS5hZGRSb3coZnJvbVJvdy5nZXREYXRhKCkpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdHVwZGF0ZTpmdW5jdGlvbihmcm9tUm93LCB0b1JvdywgZnJvbVRhYmxlKXtcblx0XHRpZih0b1Jvdyl7XG5cdFx0XHR0b1Jvdy51cGRhdGUoZnJvbVJvdy5nZXREYXRhKCkpO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9LFxuXG5cdHJlcGxhY2U6ZnVuY3Rpb24oZnJvbVJvdywgdG9Sb3csIGZyb21UYWJsZSl7XG5cdFx0aWYodG9Sb3cpe1xuXHRcdFx0dGhpcy50YWJsZS5hZGRSb3coZnJvbVJvdy5nZXREYXRhKCksIHVuZGVmaW5lZCwgdG9Sb3cpO1xuXHRcdFx0dG9Sb3cuZGVsZXRlKCk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0sXG59O1xuXG5Nb3ZlUm93cy5wcm90b3R5cGUuc2VuZGVycyA9IHtcblx0ZGVsZXRlOmZ1bmN0aW9uKGZyb21Sb3csIHRvUm93LCB0b1RhYmxlKXtcblx0XHRmcm9tUm93LmRlbGV0ZSgpO1xuXHR9XG59O1xuXG5Nb3ZlUm93cy5tb2R1bGVOYW1lID0gXCJtb3ZlUm93XCI7XG5cbnZhciBkZWZhdWx0TXV0YXRvcnMgPSB7fTtcblxuY2xhc3MgTXV0YXRvciBleHRlbmRzIE1vZHVsZXtcblxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXG5cdFx0dGhpcy5hbGxvd2VkVHlwZXMgPSBbXCJcIiwgXCJkYXRhXCIsIFwiZWRpdFwiLCBcImNsaXBib2FyZFwiXTsgLy9saXN0IG9mIG11dGF0aW9uIHR5cGVzXG5cdFx0dGhpcy5lbmFibGVkID0gdHJ1ZTtcblxuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJtdXRhdG9yXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJtdXRhdG9yUGFyYW1zXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJtdXRhdG9yRGF0YVwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwibXV0YXRvckRhdGFQYXJhbXNcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcIm11dGF0b3JFZGl0XCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJtdXRhdG9yRWRpdFBhcmFtc1wiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwibXV0YXRvckNsaXBib2FyZFwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwibXV0YXRvckNsaXBib2FyZFBhcmFtc1wiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwibXV0YXRlTGlua1wiKTtcblx0fVxuXG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLnN1YnNjcmliZShcImNlbGwtdmFsdWUtY2hhbmdpbmdcIiwgdGhpcy50cmFuc2Zvcm1DZWxsLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY2VsbC12YWx1ZS1jaGFuZ2VkXCIsIHRoaXMubXV0YXRlTGluay5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1sYXlvdXRcIiwgdGhpcy5pbml0aWFsaXplQ29sdW1uLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWRhdGEtaW5pdC1iZWZvcmVcIiwgdGhpcy5yb3dEYXRhQ2hhbmdlZC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1kYXRhLWNoYW5naW5nXCIsIHRoaXMucm93RGF0YUNoYW5nZWQuYmluZCh0aGlzKSk7XG5cdH1cblxuXHRyb3dEYXRhQ2hhbmdlZChyb3csIHRlbXBEYXRhLCB1cGRhdGVkRGF0YSl7XG5cdFx0cmV0dXJuIHRoaXMudHJhbnNmb3JtUm93KHRlbXBEYXRhLCBcImRhdGFcIiwgdXBkYXRlZERhdGEpO1xuXHR9XG5cblx0Ly9pbml0aWFsaXplIGNvbHVtbiBtdXRhdG9yXG5cdGluaXRpYWxpemVDb2x1bW4oY29sdW1uKXtcblx0XHR2YXIgbWF0Y2ggPSBmYWxzZSxcblx0XHRjb25maWcgPSB7fTtcblxuXHRcdHRoaXMuYWxsb3dlZFR5cGVzLmZvckVhY2goKHR5cGUpID0+IHtcblx0XHRcdHZhciBrZXkgPSBcIm11dGF0b3JcIiArICh0eXBlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdHlwZS5zbGljZSgxKSksXG5cdFx0XHRtdXRhdG9yO1xuXG5cdFx0XHRpZihjb2x1bW4uZGVmaW5pdGlvbltrZXldKXtcblx0XHRcdFx0bXV0YXRvciA9IHRoaXMubG9va3VwTXV0YXRvcihjb2x1bW4uZGVmaW5pdGlvbltrZXldKTtcblxuXHRcdFx0XHRpZihtdXRhdG9yKXtcblx0XHRcdFx0XHRtYXRjaCA9IHRydWU7XG5cblx0XHRcdFx0XHRjb25maWdba2V5XSA9IHtcblx0XHRcdFx0XHRcdG11dGF0b3I6bXV0YXRvcixcblx0XHRcdFx0XHRcdHBhcmFtczogY29sdW1uLmRlZmluaXRpb25ba2V5ICsgXCJQYXJhbXNcIl0gfHwge30sXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0aWYobWF0Y2gpe1xuXHRcdFx0Y29sdW1uLm1vZHVsZXMubXV0YXRlID0gY29uZmlnO1xuXHRcdH1cblx0fVxuXG5cdGxvb2t1cE11dGF0b3IodmFsdWUpe1xuXHRcdHZhciBtdXRhdG9yID0gZmFsc2U7XG5cblx0XHQvL3NldCBjb2x1bW4gbXV0YXRvclxuXHRcdHN3aXRjaCh0eXBlb2YgdmFsdWUpe1xuXHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0XHRpZihNdXRhdG9yLm11dGF0b3JzW3ZhbHVlXSl7XG5cdFx0XHRcdFx0bXV0YXRvciA9IE11dGF0b3IubXV0YXRvcnNbdmFsdWVdO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiTXV0YXRvciBFcnJvciAtIE5vIHN1Y2ggbXV0YXRvciBmb3VuZCwgaWdub3Jpbmc6IFwiLCB2YWx1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgXCJmdW5jdGlvblwiOlxuXHRcdFx0XHRtdXRhdG9yID0gdmFsdWU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblxuXHRcdHJldHVybiBtdXRhdG9yO1xuXHR9XG5cblx0Ly9hcHBseSBtdXRhdG9yIHRvIHJvd1xuXHR0cmFuc2Zvcm1Sb3coZGF0YSwgdHlwZSwgdXBkYXRlZERhdGEpe1xuXHRcdHZhciBrZXkgPSBcIm11dGF0b3JcIiArICh0eXBlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdHlwZS5zbGljZSgxKSksXG5cdFx0dmFsdWU7XG5cblx0XHRpZih0aGlzLmVuYWJsZWQpe1xuXG5cdFx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIudHJhdmVyc2UoKGNvbHVtbikgPT4ge1xuXHRcdFx0XHR2YXIgbXV0YXRvciwgcGFyYW1zLCBjb21wb25lbnQ7XG5cblx0XHRcdFx0aWYoY29sdW1uLm1vZHVsZXMubXV0YXRlKXtcblx0XHRcdFx0XHRtdXRhdG9yID0gY29sdW1uLm1vZHVsZXMubXV0YXRlW2tleV0gfHwgY29sdW1uLm1vZHVsZXMubXV0YXRlLm11dGF0b3IgfHwgZmFsc2U7XG5cblx0XHRcdFx0XHRpZihtdXRhdG9yKXtcblx0XHRcdFx0XHRcdHZhbHVlID0gY29sdW1uLmdldEZpZWxkVmFsdWUodHlwZW9mIHVwZGF0ZWREYXRhICE9PSBcInVuZGVmaW5lZFwiID8gdXBkYXRlZERhdGEgOiBkYXRhKTtcblxuXHRcdFx0XHRcdFx0aWYoKHR5cGUgPT0gXCJkYXRhXCIgJiYgIXVwZGF0ZWREYXRhKXx8IHR5cGVvZiB2YWx1ZSAhPT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRcdFx0XHRcdGNvbXBvbmVudCA9IGNvbHVtbi5nZXRDb21wb25lbnQoKTtcblx0XHRcdFx0XHRcdFx0cGFyYW1zID0gdHlwZW9mIG11dGF0b3IucGFyYW1zID09PSBcImZ1bmN0aW9uXCIgPyBtdXRhdG9yLnBhcmFtcyh2YWx1ZSwgZGF0YSwgdHlwZSwgY29tcG9uZW50KSA6IG11dGF0b3IucGFyYW1zO1xuXHRcdFx0XHRcdFx0XHRjb2x1bW4uc2V0RmllbGRWYWx1ZShkYXRhLCBtdXRhdG9yLm11dGF0b3IodmFsdWUsIGRhdGEsIHR5cGUsIHBhcmFtcywgY29tcG9uZW50KSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YTtcblx0fVxuXG5cdC8vYXBwbHkgbXV0YXRvciB0byBuZXcgY2VsbCB2YWx1ZVxuXHR0cmFuc2Zvcm1DZWxsKGNlbGwsIHZhbHVlKXtcblx0XHRpZihjZWxsLmNvbHVtbi5tb2R1bGVzLm11dGF0ZSl7XG5cdFx0XHR2YXIgbXV0YXRvciA9IGNlbGwuY29sdW1uLm1vZHVsZXMubXV0YXRlLm11dGF0b3JFZGl0IHx8IGNlbGwuY29sdW1uLm1vZHVsZXMubXV0YXRlLm11dGF0b3IgfHwgZmFsc2UsXG5cdFx0XHR0ZW1wRGF0YSA9IHt9O1xuXG5cdFx0XHRpZihtdXRhdG9yKXtcblx0XHRcdFx0dGVtcERhdGEgPSBPYmplY3QuYXNzaWduKHRlbXBEYXRhLCBjZWxsLnJvdy5nZXREYXRhKCkpO1xuXHRcdFx0XHRjZWxsLmNvbHVtbi5zZXRGaWVsZFZhbHVlKHRlbXBEYXRhLCB2YWx1ZSk7XG5cdFx0XHRcdHJldHVybiBtdXRhdG9yLm11dGF0b3IodmFsdWUsIHRlbXBEYXRhLCBcImVkaXRcIiwgbXV0YXRvci5wYXJhbXMsIGNlbGwuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXG5cdG11dGF0ZUxpbmsoY2VsbCl7XG5cdFx0dmFyIGxpbmtzID0gY2VsbC5jb2x1bW4uZGVmaW5pdGlvbi5tdXRhdGVMaW5rO1xuXG5cdFx0aWYobGlua3Mpe1xuXHRcdFx0aWYoIUFycmF5LmlzQXJyYXkobGlua3MpKXtcblx0XHRcdFx0bGlua3MgPSBbbGlua3NdO1xuXHRcdFx0fVxuXG5cdFx0XHRsaW5rcy5mb3JFYWNoKChsaW5rKSA9PiB7XG5cdFx0XHRcdHZhciBsaW5rQ2VsbCA9IGNlbGwucm93LmdldENlbGwobGluayk7XG5cblx0XHRcdFx0aWYobGlua0NlbGwpe1xuXHRcdFx0XHRcdGxpbmtDZWxsLnNldFZhbHVlKGxpbmtDZWxsLmdldFZhbHVlKCksIHRydWUsIHRydWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHRlbmFibGUoKXtcblx0XHR0aGlzLmVuYWJsZWQgPSB0cnVlO1xuXHR9XG5cblx0ZGlzYWJsZSgpe1xuXHRcdHRoaXMuZW5hYmxlZCA9IGZhbHNlO1xuXHR9XG59XG5cbk11dGF0b3IubW9kdWxlTmFtZSA9IFwibXV0YXRvclwiO1xuXG4vL2xvYWQgZGVmYXVsdHNcbk11dGF0b3IubXV0YXRvcnMgPSBkZWZhdWx0TXV0YXRvcnM7XG5cbmZ1bmN0aW9uIHJvd3MocGFnZVNpemUsIGN1cnJlbnRSb3csIGN1cnJlbnRQYWdlLCB0b3RhbFJvd3MsIHRvdGFsUGFnZXMpe1xuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKSxcblx0c2hvd2luZ0VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIiksXG5cdHZhbHVlRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKSxcblx0b2ZFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpLFxuXHR0b3RhbEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIiksXG5cdHJvd3NFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuXG5cdHRoaXMudGFibGUubW9kdWxlcy5sb2NhbGl6ZS5sYW5nQmluZChcInBhZ2luYXRpb258Y291bnRlcnxzaG93aW5nXCIsICh2YWx1ZSkgPT4ge1xuXHRcdHNob3dpbmdFbC5pbm5lckhUTUwgPSB2YWx1ZTtcblx0fSk7XG5cblx0dGhpcy50YWJsZS5tb2R1bGVzLmxvY2FsaXplLmxhbmdCaW5kKFwicGFnaW5hdGlvbnxjb3VudGVyfG9mXCIsICh2YWx1ZSkgPT4ge1xuXHRcdG9mRWwuaW5uZXJIVE1MID0gdmFsdWU7XG5cdH0pO1xuXG5cdHRoaXMudGFibGUubW9kdWxlcy5sb2NhbGl6ZS5sYW5nQmluZChcInBhZ2luYXRpb258Y291bnRlcnxyb3dzXCIsICh2YWx1ZSkgPT4ge1xuXHRcdHJvd3NFbC5pbm5lckhUTUwgPSB2YWx1ZTtcblx0fSk7XG5cblx0aWYodG90YWxSb3dzKXtcblx0XHR2YWx1ZUVsLmlubmVySFRNTCA9IFwiIFwiICsgY3VycmVudFJvdyArIFwiLVwiICsgTWF0aC5taW4oKGN1cnJlbnRSb3cgKyBwYWdlU2l6ZSAtIDEpLCB0b3RhbFJvd3MpICsgXCIgXCI7XG5cdFx0XG5cdFx0dG90YWxFbC5pbm5lckhUTUwgPSBcIiBcIiArIHRvdGFsUm93cyArIFwiIFwiO1xuXHRcdFxuXHRcdGVsLmFwcGVuZENoaWxkKHNob3dpbmdFbCk7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQodmFsdWVFbCk7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQob2ZFbCk7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQodG90YWxFbCk7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQocm93c0VsKTtcblx0fWVsc2Uge1xuXHRcdHZhbHVlRWwuaW5uZXJIVE1MID0gXCIgMCBcIjtcblxuXHRcdGVsLmFwcGVuZENoaWxkKHNob3dpbmdFbCk7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQodmFsdWVFbCk7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQocm93c0VsKTtcblx0fVxuXHRcblx0cmV0dXJuIGVsO1xufVxuXG5mdW5jdGlvbiBwYWdlcyhwYWdlU2l6ZSwgY3VycmVudFJvdywgY3VycmVudFBhZ2UsIHRvdGFsUm93cywgdG90YWxQYWdlcyl7XG5cblx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIiksXG5cdHNob3dpbmdFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpLFxuXHR2YWx1ZUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIiksXG5cdG9mRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKSxcblx0dG90YWxFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpLFxuXHRyb3dzRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcblx0XG5cdHRoaXMudGFibGUubW9kdWxlcy5sb2NhbGl6ZS5sYW5nQmluZChcInBhZ2luYXRpb258Y291bnRlcnxzaG93aW5nXCIsICh2YWx1ZSkgPT4ge1xuXHRcdHNob3dpbmdFbC5pbm5lckhUTUwgPSB2YWx1ZTtcblx0fSk7XG5cdFxuXHR2YWx1ZUVsLmlubmVySFRNTCA9IFwiIFwiICsgY3VycmVudFBhZ2UgKyBcIiBcIjtcblx0XG5cdHRoaXMudGFibGUubW9kdWxlcy5sb2NhbGl6ZS5sYW5nQmluZChcInBhZ2luYXRpb258Y291bnRlcnxvZlwiLCAodmFsdWUpID0+IHtcblx0XHRvZkVsLmlubmVySFRNTCA9IHZhbHVlO1xuXHR9KTtcblx0XG5cdHRvdGFsRWwuaW5uZXJIVE1MID0gXCIgXCIgKyB0b3RhbFBhZ2VzICsgXCIgXCI7XG5cdFxuXHR0aGlzLnRhYmxlLm1vZHVsZXMubG9jYWxpemUubGFuZ0JpbmQoXCJwYWdpbmF0aW9ufGNvdW50ZXJ8cGFnZXNcIiwgKHZhbHVlKSA9PiB7XG5cdFx0cm93c0VsLmlubmVySFRNTCA9IHZhbHVlO1xuXHR9KTtcblx0XG5cdGVsLmFwcGVuZENoaWxkKHNob3dpbmdFbCk7XG5cdGVsLmFwcGVuZENoaWxkKHZhbHVlRWwpO1xuXHRlbC5hcHBlbmRDaGlsZChvZkVsKTtcblx0ZWwuYXBwZW5kQ2hpbGQodG90YWxFbCk7XG5cdGVsLmFwcGVuZENoaWxkKHJvd3NFbCk7XG5cdFxuXHRyZXR1cm4gZWw7XG59XG5cbnZhciBkZWZhdWx0UGFnZUNvdW50ZXJzID0ge1xuXHRyb3dzOnJvd3MsXG5cdHBhZ2VzOnBhZ2VzLFxufTtcblxuY2xhc3MgUGFnZSBleHRlbmRzIE1vZHVsZXtcblx0XG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cdFx0XG5cdFx0dGhpcy5tb2RlID0gXCJsb2NhbFwiO1xuXHRcdHRoaXMucHJvZ3Jlc3NpdmVMb2FkID0gZmFsc2U7XG5cdFx0XG5cdFx0dGhpcy5lbGVtZW50ID0gbnVsbDtcblx0XHR0aGlzLnBhZ2VDb3VudGVyRWxlbWVudCA9IG51bGw7XG5cdFx0dGhpcy5wYWdlQ291bnRlciA9IG51bGw7XG5cdFx0XG5cdFx0dGhpcy5zaXplID0gMDtcblx0XHR0aGlzLnBhZ2UgPSAxO1xuXHRcdHRoaXMuY291bnQgPSA1O1xuXHRcdHRoaXMubWF4ID0gMTtcblxuXHRcdHRoaXMucmVtb3RlUm93Q291bnRFc3RpbWF0ZSA9IG51bGw7XG5cdFx0XG5cdFx0dGhpcy5pbml0aWFsTG9hZCA9IHRydWU7XG5cdFx0dGhpcy5kYXRhQ2hhbmdpbmcgPSBmYWxzZTsgLy9mbGFnIHRvIGNoZWNrIGlmIGRhdGEgaXMgYmVpbmcgY2hhbmdlZCBieSB0aGlzIG1vZHVsZVxuXHRcdFxuXHRcdHRoaXMucGFnZVNpemVzID0gW107XG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicGFnaW5hdGlvblwiLCBmYWxzZSk7IC8vc2V0IHBhZ2luYXRpb24gdHlwZVxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInBhZ2luYXRpb25Nb2RlXCIsIFwibG9jYWxcIik7IC8vbG9jYWwgb3IgcmVtb3RlIHBhZ2luYXRpb25cblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJwYWdpbmF0aW9uU2l6ZVwiLCBmYWxzZSk7IC8vc2V0IG51bWJlciBvZiByb3dzIHRvIGEgcGFnZVxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInBhZ2luYXRpb25Jbml0aWFsUGFnZVwiLCAxKTsgLy9pbml0aWFsIHBhZ2UgdG8gc2hvdyBvbiBsb2FkXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicGFnaW5hdGlvbkNvdW50ZXJcIiwgZmFsc2UpOyAgLy8gc2V0IHBhZ2luYXRpb24gY291bnRlclxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInBhZ2luYXRpb25Db3VudGVyRWxlbWVudFwiLCBmYWxzZSk7ICAvLyBzZXQgcGFnaW5hdGlvbiBjb3VudGVyXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicGFnaW5hdGlvbkJ1dHRvbkNvdW50XCIsIDUpOyAgLy8gc2V0IGNvdW50IG9mIHBhZ2UgYnV0dG9uXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicGFnaW5hdGlvblNpemVTZWxlY3RvclwiLCBmYWxzZSk7IC8vYWRkIHBhZ2luYXRpb24gc2l6ZSBzZWxlY3RvciBlbGVtZW50XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicGFnaW5hdGlvbkVsZW1lbnRcIiwgZmFsc2UpOyAvL2VsZW1lbnQgdG8gaG9sZCBwYWdpbmF0aW9uIG51bWJlcnNcblx0XHQvLyB0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJwYWdpbmF0aW9uRGF0YVNlbnRcIiwge30pOyAvL3BhZ2luYXRpb24gZGF0YSBzZW50IHRvIHRoZSBzZXJ2ZXJcblx0XHQvLyB0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJwYWdpbmF0aW9uRGF0YVJlY2VpdmVkXCIsIHt9KTsgLy9wYWdpbmF0aW9uIGRhdGEgcmVjZWl2ZWQgZnJvbSB0aGUgc2VydmVyXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicGFnaW5hdGlvbkFkZFJvd1wiLCBcInBhZ2VcIik7IC8vYWRkIHJvd3Mgb24gdGFibGUgb3IgcGFnZVxuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInByb2dyZXNzaXZlTG9hZFwiLCBmYWxzZSk7IC8vcHJvZ3Jlc3NpdmUgbG9hZGluZ1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInByb2dyZXNzaXZlTG9hZERlbGF5XCIsIDApOyAvL2RlbGF5IGJldHdlZW4gcmVxdWVzdHNcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJwcm9ncmVzc2l2ZUxvYWRTY3JvbGxNYXJnaW5cIiwgMCk7IC8vbWFyZ2luIGJlZm9yZSBzY3JvbGwgYmVnaW5zXG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJzZXRNYXhQYWdlXCIsIHRoaXMuc2V0TWF4UGFnZS5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcInNldFBhZ2VcIiwgdGhpcy5zZXRQYWdlLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwic2V0UGFnZVRvUm93XCIsIHRoaXMudXNlclNldFBhZ2VUb1Jvdy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcInNldFBhZ2VTaXplXCIsIHRoaXMudXNlclNldFBhZ2VTaXplLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiZ2V0UGFnZVNpemVcIiwgdGhpcy5nZXRQYWdlU2l6ZS5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcInByZXZpb3VzUGFnZVwiLCB0aGlzLnByZXZpb3VzUGFnZS5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcIm5leHRQYWdlXCIsIHRoaXMubmV4dFBhZ2UuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJnZXRQYWdlXCIsIHRoaXMuZ2V0UGFnZS5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcImdldFBhZ2VNYXhcIiwgdGhpcy5nZXRQYWdlTWF4LmJpbmQodGhpcykpO1xuXHRcdFxuXHRcdC8vcmVnaXN0ZXIgY29tcG9uZW50IGZ1bmN0aW9uc1xuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcInJvd1wiLCBcInBhZ2VUb1wiLCB0aGlzLnNldFBhZ2VUb1Jvdy5iaW5kKHRoaXMpKTtcblx0fVxuXHRcblx0aW5pdGlhbGl6ZSgpe1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5wYWdpbmF0aW9uKXtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWRlbGV0ZWRcIiwgdGhpcy5yb3dzVXBkYXRlZC5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWFkZGVkXCIsIHRoaXMucm93c1VwZGF0ZWQuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImRhdGEtcHJvY2Vzc2VkXCIsIHRoaXMuaW5pdGlhbExvYWRDb21wbGV0ZS5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwidGFibGUtYnVpbHRcIiwgdGhpcy5jYWxjdWxhdGVQYWdlU2l6ZXMuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImZvb3Rlci1yZWRyYXdcIiwgdGhpcy5mb290ZXJSZWRyYXcuYmluZCh0aGlzKSk7XG5cblx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5wYWdpbmF0aW9uQWRkUm93ID09IFwicGFnZVwiKXtcblx0XHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3ctYWRkaW5nLXBvc2l0aW9uXCIsIHRoaXMucm93QWRkaW5nUG9zaXRpb24uYmluZCh0aGlzKSk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5wYWdpbmF0aW9uTW9kZSA9PT0gXCJyZW1vdGVcIil7XG5cdFx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiZGF0YS1wYXJhbXNcIiwgdGhpcy5yZW1vdGVQYWdlUGFyYW1zLmJpbmQodGhpcykpO1xuXHRcdFx0XHR0aGlzLnN1YnNjcmliZShcImRhdGEtbG9hZGVkXCIsIHRoaXMuX3BhcnNlUmVtb3RlRGF0YS5iaW5kKHRoaXMpKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnByb2dyZXNzaXZlTG9hZCl7XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJQcm9ncmVzc2l2ZSBMb2FkIEVycm9yIC0gUGFnaW5hdGlvbiBhbmQgcHJvZ3Jlc3NpdmUgbG9hZCBjYW5ub3QgYmUgdXNlZCBhdCB0aGUgc2FtZSB0aW1lXCIpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLnJlZ2lzdGVyRGlzcGxheUhhbmRsZXIodGhpcy5yZXN0T25SZW5kZXJCZWZvcmUuYmluZCh0aGlzKSwgNDApO1xuXHRcdFx0dGhpcy5yZWdpc3RlckRpc3BsYXlIYW5kbGVyKHRoaXMuZ2V0Um93cy5iaW5kKHRoaXMpLCA1MCk7XG5cdFx0XHRcblx0XHRcdHRoaXMuY3JlYXRlRWxlbWVudHMoKTtcblx0XHRcdHRoaXMuaW5pdGlhbGl6ZVBhZ2VDb3VudGVyKCk7XG5cdFx0XHR0aGlzLmluaXRpYWxpemVQYWdpbmF0b3IoKTtcblx0XHR9ZWxzZSBpZih0aGlzLnRhYmxlLm9wdGlvbnMucHJvZ3Jlc3NpdmVMb2FkKXtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiZGF0YS1wYXJhbXNcIiwgdGhpcy5yZW1vdGVQYWdlUGFyYW1zLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJkYXRhLWxvYWRlZFwiLCB0aGlzLl9wYXJzZVJlbW90ZURhdGEuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInRhYmxlLWJ1aWx0XCIsIHRoaXMuY2FsY3VsYXRlUGFnZVNpemVzLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJkYXRhLXByb2Nlc3NlZFwiLCB0aGlzLmluaXRpYWxMb2FkQ29tcGxldGUuYmluZCh0aGlzKSk7XG5cdFx0XHRcblx0XHRcdHRoaXMuaW5pdGlhbGl6ZVByb2dyZXNzaXZlKHRoaXMudGFibGUub3B0aW9ucy5wcm9ncmVzc2l2ZUxvYWQpO1xuXHRcdFx0XG5cdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucHJvZ3Jlc3NpdmVMb2FkID09PSBcInNjcm9sbFwiKXtcblx0XHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJzY3JvbGwtdmVydGljYWxcIiwgdGhpcy5zY3JvbGxWZXJ0aWNhbC5iaW5kKHRoaXMpKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdHJvd0FkZGluZ1Bvc2l0aW9uKHJvdywgdG9wKXtcblx0XHR2YXIgcm93TWFuYWdlciA9IHRoaXMudGFibGUucm93TWFuYWdlcixcblx0XHRkaXNwbGF5Um93cyA9IHJvd01hbmFnZXIuZ2V0RGlzcGxheVJvd3MoKSxcblx0XHRpbmRleDtcblx0XHRcblx0XHRpZih0b3Ape1xuXHRcdFx0aWYoZGlzcGxheVJvd3MubGVuZ3RoKXtcblx0XHRcdFx0aW5kZXggPSBkaXNwbGF5Um93c1swXTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aWYocm93TWFuYWdlci5hY3RpdmVSb3dzLmxlbmd0aCl7XG5cdFx0XHRcdFx0aW5kZXggPSByb3dNYW5hZ2VyLmFjdGl2ZVJvd3Nbcm93TWFuYWdlci5hY3RpdmVSb3dzLmxlbmd0aC0xXTtcblx0XHRcdFx0XHR0b3AgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGlmKGRpc3BsYXlSb3dzLmxlbmd0aCl7XG5cdFx0XHRcdGluZGV4ID0gZGlzcGxheVJvd3NbZGlzcGxheVJvd3MubGVuZ3RoIC0gMV07XG5cdFx0XHRcdHRvcCA9IGRpc3BsYXlSb3dzLmxlbmd0aCA8IHRoaXMuc2l6ZSA/IGZhbHNlIDogdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHtpbmRleCwgdG9wfTtcblx0fVxuXHRcblx0Y2FsY3VsYXRlUGFnZVNpemVzKCl7XG5cdFx0dmFyIHRlc3RFbFJvdywgdGVzdEVsQ2VsbDtcblx0XHRcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucGFnaW5hdGlvblNpemUpe1xuXHRcdFx0dGhpcy5zaXplID0gdGhpcy50YWJsZS5vcHRpb25zLnBhZ2luYXRpb25TaXplO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRlc3RFbFJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XHR0ZXN0RWxSb3cuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1yb3dcIik7XG5cdFx0XHR0ZXN0RWxSb3cuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG5cdFx0XHRcblx0XHRcdHRlc3RFbENlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdFx0dGVzdEVsQ2VsbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWNlbGxcIik7XG5cdFx0XHR0ZXN0RWxDZWxsLmlubmVySFRNTCA9IFwiUGFnZSBSb3cgVGVzdFwiO1xuXHRcdFx0XG5cdFx0XHR0ZXN0RWxSb3cuYXBwZW5kQ2hpbGQodGVzdEVsQ2VsbCk7XG5cdFx0XHRcblx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5nZXRUYWJsZUVsZW1lbnQoKS5hcHBlbmRDaGlsZCh0ZXN0RWxSb3cpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnNpemUgPSBNYXRoLmZsb29yKHRoaXMudGFibGUucm93TWFuYWdlci5nZXRFbGVtZW50KCkuY2xpZW50SGVpZ2h0IC8gdGVzdEVsUm93Lm9mZnNldEhlaWdodCk7XG5cdFx0XHRcblx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5nZXRUYWJsZUVsZW1lbnQoKS5yZW1vdmVDaGlsZCh0ZXN0RWxSb3cpO1xuXHRcdH1cblxuXHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInBhZ2VTaXplQ2hhbmdlZFwiLCB0aGlzLnNpemUpO1xuXHRcdFxuXHRcdHRoaXMuZ2VuZXJhdGVQYWdlU2l6ZVNlbGVjdExpc3QoKTtcblx0fVxuXHRcblx0aW5pdGlhbExvYWRDb21wbGV0ZSgpe1xuXHRcdHRoaXMuaW5pdGlhbExvYWQgPSBmYWxzZTtcblx0fVxuXHRcblx0cmVtb3RlUGFnZVBhcmFtcyhkYXRhLCBjb25maWcsIHNpbGVudCwgcGFyYW1zKXtcblx0XHRpZighdGhpcy5pbml0aWFsTG9hZCl7XG5cdFx0XHRpZigodGhpcy5wcm9ncmVzc2l2ZUxvYWQgJiYgIXNpbGVudCkgfHwgKCF0aGlzLnByb2dyZXNzaXZlTG9hZCAmJiAhdGhpcy5kYXRhQ2hhbmdpbmcpKXtcblx0XHRcdFx0dGhpcy5yZXNldCh0cnVlKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0Ly9jb25maWd1cmUgcmVxdWVzdCBwYXJhbXNcblx0XHRwYXJhbXMucGFnZSA9IHRoaXMucGFnZTtcblx0XHRcblx0XHQvL3NldCBwYWdlIHNpemUgaWYgZGVmaW5lZFxuXHRcdGlmKHRoaXMuc2l6ZSl7XG5cdFx0XHRwYXJhbXMuc2l6ZSA9IHRoaXMuc2l6ZTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHBhcmFtcztcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vIFRhYmxlIEZ1bmN0aW9ucyAvLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdHVzZXJTZXRQYWdlVG9Sb3cocm93KXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucGFnaW5hdGlvbil7XG5cdFx0XHRyb3cgPSB0aGlzLnJvd01hbmFnZXIuZmluZFJvdyhyb3cpO1xuXHRcdFx0XG5cdFx0XHRpZihyb3cpe1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5zZXRQYWdlVG9Sb3cocm93KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KCk7XG5cdH1cblx0XG5cdHVzZXJTZXRQYWdlU2l6ZShzaXplKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucGFnaW5hdGlvbil7XG5cdFx0XHR0aGlzLnNldFBhZ2VTaXplKHNpemUpO1xuXHRcdFx0cmV0dXJuIHRoaXMuc2V0UGFnZSgxKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLyBJbnRlcm5hbCBMb2dpYyAvLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHRzY3JvbGxWZXJ0aWNhbCh0b3AsIGRpcil7XG5cdFx0dmFyIGVsZW1lbnQsIGRpZmYsIG1hcmdpbjtcblx0XHRpZighZGlyICYmICF0aGlzLnRhYmxlLmRhdGFMb2FkZXIubG9hZGluZyl7XG5cdFx0XHRlbGVtZW50ID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldEVsZW1lbnQoKTtcblx0XHRcdGRpZmYgPSBlbGVtZW50LnNjcm9sbEhlaWdodCAtIGVsZW1lbnQuY2xpZW50SGVpZ2h0IC0gdG9wO1xuXHRcdFx0bWFyZ2luID0gdGhpcy50YWJsZS5vcHRpb25zLnByb2dyZXNzaXZlTG9hZFNjcm9sbE1hcmdpbiB8fCAoZWxlbWVudC5jbGllbnRIZWlnaHQgKiAyKTtcblx0XHRcdFxuXHRcdFx0aWYoZGlmZiA8IG1hcmdpbil7XG5cdFx0XHRcdHRoaXMubmV4dFBhZ2UoKVxuXHRcdFx0XHRcdC5jYXRjaCgoKSA9PiB7fSk7IC8vY29uc3VtZSB0aGUgZXhjZXB0aW9uIHRocm93biB3aGVuIG9uIHRoZSBsYXN0IHBhZ2Vcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdHJlc3RPblJlbmRlckJlZm9yZShyb3dzLCByZW5kZXJJblBvc2l0aW9uKXtcblx0XHRpZighcmVuZGVySW5Qb3NpdGlvbil7XG5cdFx0XHRpZih0aGlzLm1vZGUgPT09IFwibG9jYWxcIil7XG5cdFx0XHRcdHRoaXMucmVzZXQoKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHJvd3M7XG5cdH1cblx0XG5cdHJvd3NVcGRhdGVkKCl7XG5cdFx0dGhpcy5yZWZyZXNoRGF0YSh0cnVlLCBcImFsbFwiKTtcblx0fVxuXHRcblx0Y3JlYXRlRWxlbWVudHMoKXtcblx0XHR2YXIgYnV0dG9uO1xuXHRcdFxuXHRcdHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuXHRcdHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXBhZ2luYXRvclwiKTtcblx0XHRcblx0XHR0aGlzLnBhZ2VzRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuXHRcdHRoaXMucGFnZXNFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItcGFnZXNcIik7XG5cdFx0XG5cdFx0YnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcblx0XHRidXR0b24uY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1wYWdlXCIpO1xuXHRcdGJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwiYnV0dG9uXCIpO1xuXHRcdGJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwiYnV0dG9uXCIpO1xuXHRcdGJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIFwiXCIpO1xuXHRcdGJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiLCBcIlwiKTtcblx0XHRcblx0XHR0aGlzLmZpcnN0QnV0ID0gYnV0dG9uLmNsb25lTm9kZSh0cnVlKTtcblx0XHR0aGlzLmZpcnN0QnV0LnNldEF0dHJpYnV0ZShcImRhdGEtcGFnZVwiLCBcImZpcnN0XCIpO1xuXHRcdFxuXHRcdHRoaXMucHJldkJ1dCA9IGJ1dHRvbi5jbG9uZU5vZGUodHJ1ZSk7XG5cdFx0dGhpcy5wcmV2QnV0LnNldEF0dHJpYnV0ZShcImRhdGEtcGFnZVwiLCBcInByZXZcIik7XG5cdFx0XG5cdFx0dGhpcy5uZXh0QnV0ID0gYnV0dG9uLmNsb25lTm9kZSh0cnVlKTtcblx0XHR0aGlzLm5leHRCdXQuc2V0QXR0cmlidXRlKFwiZGF0YS1wYWdlXCIsIFwibmV4dFwiKTtcblx0XHRcblx0XHR0aGlzLmxhc3RCdXQgPSBidXR0b24uY2xvbmVOb2RlKHRydWUpO1xuXHRcdHRoaXMubGFzdEJ1dC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXBhZ2VcIiwgXCJsYXN0XCIpO1xuXHRcdFxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5wYWdpbmF0aW9uU2l6ZVNlbGVjdG9yKXtcblx0XHRcdHRoaXMucGFnZVNpemVTZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIpO1xuXHRcdFx0dGhpcy5wYWdlU2l6ZVNlbGVjdC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXBhZ2Utc2l6ZVwiKTtcblx0XHR9XG5cdH1cblx0XG5cdGdlbmVyYXRlUGFnZVNpemVTZWxlY3RMaXN0KCl7XG5cdFx0dmFyIHBhZ2VTaXplcyA9IFtdO1xuXHRcdFxuXHRcdGlmKHRoaXMucGFnZVNpemVTZWxlY3Qpe1xuXHRcdFx0XG5cdFx0XHRpZihBcnJheS5pc0FycmF5KHRoaXMudGFibGUub3B0aW9ucy5wYWdpbmF0aW9uU2l6ZVNlbGVjdG9yKSl7XG5cdFx0XHRcdHBhZ2VTaXplcyA9IHRoaXMudGFibGUub3B0aW9ucy5wYWdpbmF0aW9uU2l6ZVNlbGVjdG9yO1xuXHRcdFx0XHR0aGlzLnBhZ2VTaXplcyA9IHBhZ2VTaXplcztcblx0XHRcdFx0XG5cdFx0XHRcdGlmKHRoaXMucGFnZVNpemVzLmluZGV4T2YodGhpcy5zaXplKSA9PSAtMSl7XG5cdFx0XHRcdFx0cGFnZVNpemVzLnVuc2hpZnQodGhpcy5zaXplKTtcblx0XHRcdFx0fVxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcblx0XHRcdFx0aWYodGhpcy5wYWdlU2l6ZXMuaW5kZXhPZih0aGlzLnNpemUpID09IC0xKXtcblx0XHRcdFx0XHRwYWdlU2l6ZXMgPSBbXTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRmb3IgKGxldCBpID0gMTsgaSA8IDU7IGkrKyl7XG5cdFx0XHRcdFx0XHRwYWdlU2l6ZXMucHVzaCh0aGlzLnNpemUgKiBpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0dGhpcy5wYWdlU2l6ZXMgPSBwYWdlU2l6ZXM7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRwYWdlU2l6ZXMgPSB0aGlzLnBhZ2VTaXplcztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR3aGlsZSh0aGlzLnBhZ2VTaXplU2VsZWN0LmZpcnN0Q2hpbGQpIHRoaXMucGFnZVNpemVTZWxlY3QucmVtb3ZlQ2hpbGQodGhpcy5wYWdlU2l6ZVNlbGVjdC5maXJzdENoaWxkKTtcblx0XHRcdFxuXHRcdFx0cGFnZVNpemVzLmZvckVhY2goKGl0ZW0pID0+IHtcblx0XHRcdFx0dmFyIGl0ZW1FbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG5cdFx0XHRcdGl0ZW1FbC52YWx1ZSA9IGl0ZW07XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihpdGVtID09PSB0cnVlKXtcblx0XHRcdFx0XHR0aGlzLmxhbmdCaW5kKFwicGFnaW5hdGlvbnxhbGxcIiwgZnVuY3Rpb24odmFsdWUpe1xuXHRcdFx0XHRcdFx0aXRlbUVsLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0aXRlbUVsLmlubmVySFRNTCA9IGl0ZW07XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdFxuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5wYWdlU2l6ZVNlbGVjdC5hcHBlbmRDaGlsZChpdGVtRWwpO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdHRoaXMucGFnZVNpemVTZWxlY3QudmFsdWUgPSB0aGlzLnNpemU7XG5cdFx0fVxuXHR9XG5cdFxuXHRpbml0aWFsaXplUGFnZUNvdW50ZXIoKXtcblx0XHR2YXIgY291bnRlciA9IHRoaXMudGFibGUub3B0aW9ucy5wYWdpbmF0aW9uQ291bnRlcixcblx0XHRwYWdlQ291bnRlciA9IG51bGw7XG5cdFx0XG5cdFx0aWYoY291bnRlcil7XG5cdFx0XHRpZih0eXBlb2YgY291bnRlciA9PT0gXCJmdW5jdGlvblwiKXtcblx0XHRcdFx0cGFnZUNvdW50ZXIgPSBjb3VudGVyO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRwYWdlQ291bnRlciA9IFBhZ2UucGFnZUNvdW50ZXJzW2NvdW50ZXJdO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihwYWdlQ291bnRlcil7XG5cdFx0XHRcdHRoaXMucGFnZUNvdW50ZXIgPSBwYWdlQ291bnRlcjtcblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMucGFnZUNvdW50ZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG5cdFx0XHRcdHRoaXMucGFnZUNvdW50ZXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItcGFnZS1jb3VudGVyXCIpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJQYWdpbmF0aW9uIEVycm9yIC0gTm8gc3VjaCBwYWdlIGNvdW50ZXIgZm91bmQ6IFwiLCBjb3VudGVyKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdC8vc2V0dXAgcGFnaW5hdGlvblxuXHRpbml0aWFsaXplUGFnaW5hdG9yKGhpZGRlbil7XG5cdFx0dmFyIHBhZ2VTZWxlY3RMYWJlbCwgcGFnaW5hdGlvbkNvdW50ZXJIb2xkZXI7XG5cdFx0XG5cdFx0aWYoIWhpZGRlbil7XG5cdFx0XHQvL2J1aWxkIHBhZ2luYXRpb24gZWxlbWVudFxuXHRcdFx0XG5cdFx0XHQvL2JpbmQgbG9jYWxpemF0aW9uc1xuXHRcdFx0dGhpcy5sYW5nQmluZChcInBhZ2luYXRpb258Zmlyc3RcIiwgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdHRoaXMuZmlyc3RCdXQuaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0dGhpcy5sYW5nQmluZChcInBhZ2luYXRpb258Zmlyc3RfdGl0bGVcIiwgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdHRoaXMuZmlyc3RCdXQuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCB2YWx1ZSk7XG5cdFx0XHRcdHRoaXMuZmlyc3RCdXQuc2V0QXR0cmlidXRlKFwidGl0bGVcIiwgdmFsdWUpO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdHRoaXMubGFuZ0JpbmQoXCJwYWdpbmF0aW9ufHByZXZcIiwgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdHRoaXMucHJldkJ1dC5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmxhbmdCaW5kKFwicGFnaW5hdGlvbnxwcmV2X3RpdGxlXCIsICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHR0aGlzLnByZXZCdXQuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCB2YWx1ZSk7XG5cdFx0XHRcdHRoaXMucHJldkJ1dC5zZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiLCB2YWx1ZSk7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0dGhpcy5sYW5nQmluZChcInBhZ2luYXRpb258bmV4dFwiLCAodmFsdWUpID0+IHtcblx0XHRcdFx0dGhpcy5uZXh0QnV0LmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdHRoaXMubGFuZ0JpbmQoXCJwYWdpbmF0aW9ufG5leHRfdGl0bGVcIiwgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdHRoaXMubmV4dEJ1dC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIHZhbHVlKTtcblx0XHRcdFx0dGhpcy5uZXh0QnV0LnNldEF0dHJpYnV0ZShcInRpdGxlXCIsIHZhbHVlKTtcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmxhbmdCaW5kKFwicGFnaW5hdGlvbnxsYXN0XCIsICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHR0aGlzLmxhc3RCdXQuaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0dGhpcy5sYW5nQmluZChcInBhZ2luYXRpb258bGFzdF90aXRsZVwiLCAodmFsdWUpID0+IHtcblx0XHRcdFx0dGhpcy5sYXN0QnV0LnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgdmFsdWUpO1xuXHRcdFx0XHR0aGlzLmxhc3RCdXQuc2V0QXR0cmlidXRlKFwidGl0bGVcIiwgdmFsdWUpO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdC8vY2xpY2sgYmluZGluZ3Ncblx0XHRcdHRoaXMuZmlyc3RCdXQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcblx0XHRcdFx0dGhpcy5zZXRQYWdlKDEpO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdHRoaXMucHJldkJ1dC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuXHRcdFx0XHR0aGlzLnByZXZpb3VzUGFnZSgpO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdHRoaXMubmV4dEJ1dC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuXHRcdFx0XHR0aGlzLm5leHRQYWdlKCk7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0dGhpcy5sYXN0QnV0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG5cdFx0XHRcdHRoaXMuc2V0UGFnZSh0aGlzLm1heCk7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnBhZ2luYXRpb25FbGVtZW50KXtcblx0XHRcdFx0dGhpcy5lbGVtZW50ID0gdGhpcy50YWJsZS5vcHRpb25zLnBhZ2luYXRpb25FbGVtZW50O1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZih0aGlzLnBhZ2VTaXplU2VsZWN0KXtcblx0XHRcdFx0cGFnZVNlbGVjdExhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5sYW5nQmluZChcInBhZ2luYXRpb258cGFnZV9zaXplXCIsICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdHRoaXMucGFnZVNpemVTZWxlY3Quc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCB2YWx1ZSk7XG5cdFx0XHRcdFx0dGhpcy5wYWdlU2l6ZVNlbGVjdC5zZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiLCB2YWx1ZSk7XG5cdFx0XHRcdFx0cGFnZVNlbGVjdExhYmVsLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZChwYWdlU2VsZWN0TGFiZWwpO1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5wYWdlU2l6ZVNlbGVjdCk7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLnBhZ2VTaXplU2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgKGUpID0+IHtcblx0XHRcdFx0XHR0aGlzLnNldFBhZ2VTaXplKHRoaXMucGFnZVNpemVTZWxlY3QudmFsdWUgPT0gXCJ0cnVlXCIgPyB0cnVlIDogdGhpcy5wYWdlU2l6ZVNlbGVjdC52YWx1ZSk7XG5cdFx0XHRcdFx0dGhpcy5zZXRQYWdlKDEpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Ly9hcHBlbmQgdG8gRE9NXG5cdFx0XHR0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5maXJzdEJ1dCk7XG5cdFx0XHR0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5wcmV2QnV0KTtcblx0XHRcdHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLnBhZ2VzRWxlbWVudCk7XG5cdFx0XHR0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5uZXh0QnV0KTtcblx0XHRcdHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmxhc3RCdXQpO1xuXHRcdFx0XG5cdFx0XHRpZighdGhpcy50YWJsZS5vcHRpb25zLnBhZ2luYXRpb25FbGVtZW50KXtcblx0XHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnBhZ2luYXRpb25Db3VudGVyKXtcblxuXHRcdFx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5wYWdpbmF0aW9uQ291bnRlckVsZW1lbnQpe1xuXHRcdFx0XHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnBhZ2luYXRpb25Db3VudGVyRWxlbWVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KXtcblx0XHRcdFx0XHRcdFx0dGhpcy50YWJsZS5vcHRpb25zLnBhZ2luYXRpb25Db3VudGVyRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLnBhZ2VDb3VudGVyRWxlbWVudCk7XG5cdFx0XHRcdFx0XHR9ZWxzZSBpZih0eXBlb2YgdGhpcy50YWJsZS5vcHRpb25zLnBhZ2luYXRpb25Db3VudGVyRWxlbWVudCA9PT0gXCJzdHJpbmdcIil7XG5cdFx0XHRcdFx0XHRcdHBhZ2luYXRpb25Db3VudGVySG9sZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLnRhYmxlLm9wdGlvbnMucGFnaW5hdGlvbkNvdW50ZXJFbGVtZW50KTtcblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdGlmKHBhZ2luYXRpb25Db3VudGVySG9sZGVyKXtcblx0XHRcdFx0XHRcdFx0XHRwYWdpbmF0aW9uQ291bnRlckhvbGRlci5hcHBlbmRDaGlsZCh0aGlzLnBhZ2VDb3VudGVyRWxlbWVudCk7XG5cdFx0XHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJQYWdpbmF0aW9uIEVycm9yIC0gVW5hYmxlIHRvIGZpbmQgZWxlbWVudCBtYXRjaGluZyBwYWdpbmF0aW9uQ291bnRlckVsZW1lbnQgc2VsZWN0b3I6XCIsIHRoaXMudGFibGUub3B0aW9ucy5wYWdpbmF0aW9uQ291bnRlckVsZW1lbnQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0dGhpcy5mb290ZXJBcHBlbmQodGhpcy5wYWdlQ291bnRlckVsZW1lbnQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5mb290ZXJBcHBlbmQodGhpcy5lbGVtZW50KTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5wYWdlID0gdGhpcy50YWJsZS5vcHRpb25zLnBhZ2luYXRpb25Jbml0aWFsUGFnZTtcblx0XHRcdHRoaXMuY291bnQgPSB0aGlzLnRhYmxlLm9wdGlvbnMucGFnaW5hdGlvbkJ1dHRvbkNvdW50O1xuXHRcdH1cblx0XHRcblx0XHQvL3NldCBkZWZhdWx0IHZhbHVlc1xuXHRcdHRoaXMubW9kZSA9IHRoaXMudGFibGUub3B0aW9ucy5wYWdpbmF0aW9uTW9kZTtcblx0fVxuXHRcblx0aW5pdGlhbGl6ZVByb2dyZXNzaXZlKG1vZGUpe1xuXHRcdHRoaXMuaW5pdGlhbGl6ZVBhZ2luYXRvcih0cnVlKTtcblx0XHR0aGlzLm1vZGUgPSBcInByb2dyZXNzaXZlX1wiICsgbW9kZTtcblx0XHR0aGlzLnByb2dyZXNzaXZlTG9hZCA9IHRydWU7XG5cdH1cblx0XG5cdHRyYWNrQ2hhbmdlcygpe1xuXHRcdHRoaXMuZGlzcGF0Y2goXCJwYWdlLWNoYW5nZWRcIik7XG5cdH1cblx0XG5cdC8vY2FsY3VsYXRlIG1heGltdW0gcGFnZSBmcm9tIG51bWJlciBvZiByb3dzXG5cdHNldE1heFJvd3Mocm93Q291bnQpe1xuXHRcdGlmKCFyb3dDb3VudCl7XG5cdFx0XHR0aGlzLm1heCA9IDE7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5tYXggPSB0aGlzLnNpemUgPT09IHRydWUgPyAgMSA6IE1hdGguY2VpbChyb3dDb3VudC90aGlzLnNpemUpO1xuXHRcdH1cblx0XHRcblx0XHRpZih0aGlzLnBhZ2UgPiB0aGlzLm1heCl7XG5cdFx0XHR0aGlzLnBhZ2UgPSB0aGlzLm1heDtcblx0XHR9XG5cdH1cblx0XG5cdC8vcmVzZXQgdG8gZmlyc3QgcGFnZSB3aXRob3V0IHRyaWdnZXJpbmcgYWN0aW9uXG5cdHJlc2V0KGZvcmNlKXtcblx0XHRpZighdGhpcy5pbml0aWFsTG9hZCl7XG5cdFx0XHRpZih0aGlzLm1vZGUgPT0gXCJsb2NhbFwiIHx8IGZvcmNlKXtcblx0XHRcdFx0dGhpcy5wYWdlID0gMTtcblx0XHRcdFx0dGhpcy50cmFja0NoYW5nZXMoKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdC8vc2V0IHRoZSBtYXhpbXVtIHBhZ2Vcblx0c2V0TWF4UGFnZShtYXgpe1xuXHRcdFxuXHRcdG1heCA9IHBhcnNlSW50KG1heCk7XG5cdFx0XG5cdFx0dGhpcy5tYXggPSBtYXggfHwgMTtcblx0XHRcblx0XHRpZih0aGlzLnBhZ2UgPiB0aGlzLm1heCl7XG5cdFx0XHR0aGlzLnBhZ2UgPSB0aGlzLm1heDtcblx0XHRcdHRoaXMudHJpZ2dlcigpO1xuXHRcdH1cblx0fVxuXHRcblx0Ly9zZXQgY3VycmVudCBwYWdlIG51bWJlclxuXHRzZXRQYWdlKHBhZ2Upe1xuXHRcdHN3aXRjaChwYWdlKXtcblx0XHRcdGNhc2UgXCJmaXJzdFwiOlxuXHRcdFx0XHRyZXR1cm4gdGhpcy5zZXRQYWdlKDEpO1xuXHRcblx0XHRcdGNhc2UgXCJwcmV2XCI6XG5cdFx0XHRcdHJldHVybiB0aGlzLnByZXZpb3VzUGFnZSgpO1xuXHRcdFx0XG5cdFx0XHRjYXNlIFwibmV4dFwiOlxuXHRcdFx0XHRyZXR1cm4gdGhpcy5uZXh0UGFnZSgpO1xuXHRcdFx0XG5cdFx0XHRjYXNlIFwibGFzdFwiOlxuXHRcdFx0XHRyZXR1cm4gdGhpcy5zZXRQYWdlKHRoaXMubWF4KTtcblx0XHR9XG5cdFx0XG5cdFx0cGFnZSA9IHBhcnNlSW50KHBhZ2UpO1xuXHRcdFxuXHRcdGlmKChwYWdlID4gMCAmJiBwYWdlIDw9IHRoaXMubWF4KSB8fCB0aGlzLm1vZGUgIT09IFwibG9jYWxcIil7XG5cdFx0XHR0aGlzLnBhZ2UgPSBwYWdlO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnRyYWNrQ2hhbmdlcygpO1xuXHRcdFx0XG5cdFx0XHRyZXR1cm4gdGhpcy50cmlnZ2VyKCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiUGFnaW5hdGlvbiBFcnJvciAtIFJlcXVlc3RlZCBwYWdlIGlzIG91dCBvZiByYW5nZSBvZiAxIC0gXCIgKyB0aGlzLm1heCArIFwiOlwiLCBwYWdlKTtcblx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdCgpO1xuXHRcdH1cblx0fVxuXHRcblx0c2V0UGFnZVRvUm93KHJvdyl7XG5cdFx0dmFyIHJvd3MgPSB0aGlzLmRpc3BsYXlSb3dzKC0xKTtcblx0XHR2YXIgaW5kZXggPSByb3dzLmluZGV4T2Yocm93KTtcblx0XG5cdFx0aWYoaW5kZXggPiAtMSl7XG5cdFx0XHR2YXIgcGFnZSA9IHRoaXMuc2l6ZSA9PT0gdHJ1ZSA/IDEgOiBNYXRoLmNlaWwoKGluZGV4ICsgMSkgLyB0aGlzLnNpemUpO1xuXHRcdFx0XG5cdFx0XHRyZXR1cm4gdGhpcy5zZXRQYWdlKHBhZ2UpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIlBhZ2luYXRpb24gRXJyb3IgLSBSZXF1ZXN0ZWQgcm93IGlzIG5vdCB2aXNpYmxlXCIpO1xuXHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRzZXRQYWdlU2l6ZShzaXplKXtcblx0XHRpZihzaXplICE9PSB0cnVlKXtcblx0XHRcdHNpemUgPSBwYXJzZUludChzaXplKTtcblx0XHR9XG5cblx0XHRpZihzaXplID4gMCl7XG5cdFx0XHR0aGlzLnNpemUgPSBzaXplO1xuXHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwicGFnZVNpemVDaGFuZ2VkXCIsIHNpemUpO1xuXHRcdH1cblx0XHRcblx0XHRpZih0aGlzLnBhZ2VTaXplU2VsZWN0KXtcblx0XHRcdC8vIHRoaXMucGFnZVNpemVTZWxlY3QudmFsdWUgPSBzaXplO1xuXHRcdFx0dGhpcy5nZW5lcmF0ZVBhZ2VTaXplU2VsZWN0TGlzdCgpO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLnRyYWNrQ2hhbmdlcygpO1xuXHR9XG5cdFxuXHRfc2V0UGFnZUNvdW50ZXIodG90YWxSb3dzLCBzaXplLCBjdXJyZW50Um93KXtcblx0XHR2YXIgY29udGVudDtcblx0XHRcblx0XHRpZih0aGlzLnBhZ2VDb3VudGVyKXtcblxuXHRcdFx0aWYodGhpcy5tb2RlID09PSBcInJlbW90ZVwiKXtcblx0XHRcdFx0c2l6ZSA9IHRoaXMuc2l6ZTtcblx0XHRcdFx0Y3VycmVudFJvdyA9ICgodGhpcy5wYWdlIC0gMSkgKiB0aGlzLnNpemUpICsgMTtcblx0XHRcdFx0dG90YWxSb3dzID0gdGhpcy5yZW1vdGVSb3dDb3VudEVzdGltYXRlO1xuXHRcdFx0fVxuXG5cdFx0XHRjb250ZW50ID0gdGhpcy5wYWdlQ291bnRlci5jYWxsKHRoaXMsIHNpemUsIGN1cnJlbnRSb3csIHRoaXMucGFnZSwgdG90YWxSb3dzLCB0aGlzLm1heCk7XG5cdFx0XHRcblx0XHRcdHN3aXRjaCh0eXBlb2YgY29udGVudCl7XG5cdFx0XHRcdGNhc2UgXCJvYmplY3RcIjpcblx0XHRcdFx0XHRpZihjb250ZW50IGluc3RhbmNlb2YgTm9kZSl7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHQvL2NsZWFyIHByZXZpb3VzIGNlbGwgY29udGVudHNcblx0XHRcdFx0XHRcdHdoaWxlKHRoaXMucGFnZUNvdW50ZXJFbGVtZW50LmZpcnN0Q2hpbGQpIHRoaXMucGFnZUNvdW50ZXJFbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMucGFnZUNvdW50ZXJFbGVtZW50LmZpcnN0Q2hpbGQpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0dGhpcy5wYWdlQ291bnRlckVsZW1lbnQuYXBwZW5kQ2hpbGQoY29udGVudCk7XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0dGhpcy5wYWdlQ291bnRlckVsZW1lbnQuaW5uZXJIVE1MID0gXCJcIjtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGlmKGNvbnRlbnQgIT0gbnVsbCl7XG5cdFx0XHRcdFx0XHRcdGNvbnNvbGUud2FybihcIlBhZ2UgQ291bnRlciBFcnJvciAtIFBhZ2UgQ291bnRlciBoYXMgcmV0dXJuZWQgYSB0eXBlIG9mIG9iamVjdCwgdGhlIG9ubHkgdmFsaWQgcGFnZSBjb3VudGVyIG9iamVjdCByZXR1cm4gaXMgYW4gaW5zdGFuY2Ugb2YgTm9kZSwgdGhlIHBhZ2UgY291bnRlciByZXR1cm5lZDpcIiwgY29udGVudCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwidW5kZWZpbmVkXCI6XG5cdFx0XHRcdFx0dGhpcy5wYWdlQ291bnRlckVsZW1lbnQuaW5uZXJIVE1MID0gXCJcIjtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHR0aGlzLnBhZ2VDb3VudGVyRWxlbWVudC5pbm5lckhUTUwgPSBjb250ZW50O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0Ly9zZXR1cCB0aGUgcGFnaW5hdGlvbiBidXR0b25zXG5cdF9zZXRQYWdlQnV0dG9ucygpe1xuXHRcdGxldCBsZWZ0U2l6ZSA9IE1hdGguZmxvb3IoKHRoaXMuY291bnQtMSkgLyAyKTtcblx0XHRsZXQgcmlnaHRTaXplID0gTWF0aC5jZWlsKCh0aGlzLmNvdW50LTEpIC8gMik7XG5cdFx0bGV0IG1pbiA9IHRoaXMubWF4IC0gdGhpcy5wYWdlICsgbGVmdFNpemUgKyAxIDwgdGhpcy5jb3VudCA/IHRoaXMubWF4LXRoaXMuY291bnQrMTogTWF0aC5tYXgodGhpcy5wYWdlLWxlZnRTaXplLDEpO1xuXHRcdGxldCBtYXggPSB0aGlzLnBhZ2UgPD0gcmlnaHRTaXplPyBNYXRoLm1pbih0aGlzLmNvdW50LCB0aGlzLm1heCkgOk1hdGgubWluKHRoaXMucGFnZStyaWdodFNpemUsIHRoaXMubWF4KTtcblx0XHRcblx0XHR3aGlsZSh0aGlzLnBhZ2VzRWxlbWVudC5maXJzdENoaWxkKSB0aGlzLnBhZ2VzRWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLnBhZ2VzRWxlbWVudC5maXJzdENoaWxkKTtcblx0XHRcblx0XHRpZih0aGlzLnBhZ2UgPT0gMSl7XG5cdFx0XHR0aGlzLmZpcnN0QnV0LmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdHRoaXMucHJldkJ1dC5kaXNhYmxlZCA9IHRydWU7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5maXJzdEJ1dC5kaXNhYmxlZCA9IGZhbHNlO1xuXHRcdFx0dGhpcy5wcmV2QnV0LmRpc2FibGVkID0gZmFsc2U7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRoaXMucGFnZSA9PSB0aGlzLm1heCl7XG5cdFx0XHR0aGlzLmxhc3RCdXQuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdFx0dGhpcy5uZXh0QnV0LmRpc2FibGVkID0gdHJ1ZTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLmxhc3RCdXQuZGlzYWJsZWQgPSBmYWxzZTtcblx0XHRcdHRoaXMubmV4dEJ1dC5kaXNhYmxlZCA9IGZhbHNlO1xuXHRcdH1cblx0XHRcblx0XHRmb3IobGV0IGkgPSBtaW47IGkgPD0gbWF4OyBpKyspe1xuXHRcdFx0aWYoaT4wICYmIGkgPD0gdGhpcy5tYXgpe1xuXHRcdFx0XHR0aGlzLnBhZ2VzRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLl9nZW5lcmF0ZVBhZ2VCdXR0b24oaSkpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHR0aGlzLmZvb3RlclJlZHJhdygpO1xuXHR9XG5cdFxuXHRfZ2VuZXJhdGVQYWdlQnV0dG9uKHBhZ2Upe1xuXHRcdHZhciBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuXHRcdFxuXHRcdGJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXBhZ2VcIik7XG5cdFx0aWYocGFnZSA9PSB0aGlzLnBhZ2Upe1xuXHRcdFx0YnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XG5cdFx0fVxuXHRcdFxuXHRcdGJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwiYnV0dG9uXCIpO1xuXHRcdGJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwiYnV0dG9uXCIpO1xuXHRcdFxuXHRcdHRoaXMubGFuZ0JpbmQoXCJwYWdpbmF0aW9ufHBhZ2VfdGl0bGVcIiwgKHZhbHVlKSA9PiB7XG5cdFx0XHRidXR0b24uc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCB2YWx1ZSArIFwiIFwiICsgcGFnZSk7XG5cdFx0XHRidXR0b24uc2V0QXR0cmlidXRlKFwidGl0bGVcIiwgdmFsdWUgKyBcIiBcIiArIHBhZ2UpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdGJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJkYXRhLXBhZ2VcIiwgcGFnZSk7XG5cdFx0YnV0dG9uLnRleHRDb250ZW50ID0gcGFnZTtcblx0XHRcblx0XHRidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG5cdFx0XHR0aGlzLnNldFBhZ2UocGFnZSk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0cmV0dXJuIGJ1dHRvbjtcblx0fVxuXHRcblx0Ly9wcmV2aW91cyBwYWdlXG5cdHByZXZpb3VzUGFnZSgpe1xuXHRcdGlmKHRoaXMucGFnZSA+IDEpe1xuXHRcdFx0dGhpcy5wYWdlLS07XG5cdFx0XHRcblx0XHRcdHRoaXMudHJhY2tDaGFuZ2VzKCk7XG5cdFx0XHRcblx0XHRcdHJldHVybiB0aGlzLnRyaWdnZXIoKTtcblx0XHRcdFxuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIlBhZ2luYXRpb24gRXJyb3IgLSBQcmV2aW91cyBwYWdlIHdvdWxkIGJlIGxlc3MgdGhhbiBwYWdlIDE6XCIsIDApO1xuXHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KCk7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL25leHQgcGFnZVxuXHRuZXh0UGFnZSgpe1xuXHRcdGlmKHRoaXMucGFnZSA8IHRoaXMubWF4KXtcblx0XHRcdHRoaXMucGFnZSsrO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnRyYWNrQ2hhbmdlcygpO1xuXHRcdFx0XG5cdFx0XHRyZXR1cm4gdGhpcy50cmlnZ2VyKCk7XG5cdFx0XHRcblx0XHR9ZWxzZSB7XG5cdFx0XHRpZighdGhpcy5wcm9ncmVzc2l2ZUxvYWQpe1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJQYWdpbmF0aW9uIEVycm9yIC0gTmV4dCBwYWdlIHdvdWxkIGJlIGdyZWF0ZXIgdGhhbiBtYXhpbXVtIHBhZ2Ugb2YgXCIgKyB0aGlzLm1heCArIFwiOlwiLCB0aGlzLm1heCArIDEpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KCk7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL3JldHVybiBjdXJyZW50IHBhZ2UgbnVtYmVyXG5cdGdldFBhZ2UoKXtcblx0XHRyZXR1cm4gdGhpcy5wYWdlO1xuXHR9XG5cdFxuXHQvL3JldHVybiBtYXggcGFnZSBudW1iZXJcblx0Z2V0UGFnZU1heCgpe1xuXHRcdHJldHVybiB0aGlzLm1heDtcblx0fVxuXHRcblx0Z2V0UGFnZVNpemUoc2l6ZSl7XG5cdFx0cmV0dXJuIHRoaXMuc2l6ZTtcblx0fVxuXHRcblx0Z2V0TW9kZSgpe1xuXHRcdHJldHVybiB0aGlzLm1vZGU7XG5cdH1cblx0XG5cdC8vcmV0dXJuIGFwcHJvcHJpYXRlIHJvd3MgZm9yIGN1cnJlbnQgcGFnZVxuXHRnZXRSb3dzKGRhdGEpe1xuXHRcdHZhciBhY3R1YWxSb3dQYWdlU2l6ZSA9IDAsXG5cdFx0b3V0cHV0LCBzdGFydCwgZW5kLCBhY3R1YWxTdGFydFJvdztcblxuXHRcdHZhciBhY3R1YWxSb3dzID0gZGF0YS5maWx0ZXIoKHJvdykgPT4ge1xuXHRcdFx0cmV0dXJuIHJvdy50eXBlID09PSBcInJvd1wiO1xuXHRcdH0pO1xuXHRcdFxuXHRcdGlmKHRoaXMubW9kZSA9PSBcImxvY2FsXCIpe1xuXHRcdFx0b3V0cHV0ID0gW107XG5cdFx0XHRcblx0XHRcdHRoaXMuc2V0TWF4Um93cyhkYXRhLmxlbmd0aCk7XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMuc2l6ZSA9PT0gdHJ1ZSl7XG5cdFx0XHRcdHN0YXJ0ID0gMDtcblx0XHRcdFx0ZW5kID0gZGF0YS5sZW5ndGg7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHN0YXJ0ID0gdGhpcy5zaXplICogKHRoaXMucGFnZSAtIDEpO1xuXHRcdFx0XHRlbmQgPSBzdGFydCArIHBhcnNlSW50KHRoaXMuc2l6ZSk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHRoaXMuX3NldFBhZ2VCdXR0b25zKCk7XG5cdFx0XHRcblx0XHRcdGZvcihsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspe1xuXHRcdFx0XHRsZXQgcm93ID0gZGF0YVtpXTtcblxuXHRcdFx0XHRpZihyb3cpe1xuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHJvdyk7XG5cblx0XHRcdFx0XHRpZihyb3cudHlwZSA9PT0gXCJyb3dcIil7XG5cdFx0XHRcdFx0XHRpZighYWN0dWFsU3RhcnRSb3cpe1xuXHRcdFx0XHRcdFx0XHRhY3R1YWxTdGFydFJvdyA9IHJvdztcblx0XHRcdFx0XHRcdH1cdFxuXG5cdFx0XHRcdFx0XHRhY3R1YWxSb3dQYWdlU2l6ZSsrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLl9zZXRQYWdlQ291bnRlcihhY3R1YWxSb3dzLmxlbmd0aCwgYWN0dWFsUm93UGFnZVNpemUsIGFjdHVhbFN0YXJ0Um93ID8gKGFjdHVhbFJvd3MuaW5kZXhPZihhY3R1YWxTdGFydFJvdykgKyAxKSA6IDApO1xuXHRcdFx0XG5cdFx0XHRyZXR1cm4gb3V0cHV0O1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuX3NldFBhZ2VCdXR0b25zKCk7XG5cdFx0XHR0aGlzLl9zZXRQYWdlQ291bnRlcihhY3R1YWxSb3dzLmxlbmd0aCk7XG5cdFx0XHRcblx0XHRcdHJldHVybiBkYXRhLnNsaWNlKDApO1xuXHRcdH1cblx0fVxuXHRcblx0dHJpZ2dlcigpe1xuXHRcdHZhciBsZWZ0O1xuXHRcdFxuXHRcdHN3aXRjaCh0aGlzLm1vZGUpe1xuXHRcdFx0Y2FzZSBcImxvY2FsXCI6XG5cdFx0XHRcdGxlZnQgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuc2Nyb2xsTGVmdDtcblx0XHRcdFxuXHRcdFx0XHR0aGlzLnJlZnJlc2hEYXRhKCk7XG5cdFx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5zY3JvbGxIb3Jpem9udGFsKGxlZnQpO1xuXHRcdFx0XG5cdFx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInBhZ2VMb2FkZWRcIiwgdGhpcy5nZXRQYWdlKCkpO1xuXHRcdFx0XG5cdFx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcblx0XHRcdFxuXHRcdFx0Y2FzZSBcInJlbW90ZVwiOlxuXHRcdFx0XHR0aGlzLmRhdGFDaGFuZ2luZyA9IHRydWU7XG5cdFx0XHRcdHJldHVybiB0aGlzLnJlbG9hZERhdGEobnVsbClcblx0XHRcdFx0XHQuZmluYWxseSgoKSA9PiB7XG5cdFx0XHRcdFx0XHR0aGlzLmRhdGFDaGFuZ2luZyA9IGZhbHNlO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHRjYXNlIFwicHJvZ3Jlc3NpdmVfbG9hZFwiOlxuXHRcdFx0Y2FzZSBcInByb2dyZXNzaXZlX3Njcm9sbFwiOlxuXHRcdFx0XHRyZXR1cm4gdGhpcy5yZWxvYWREYXRhKG51bGwsIHRydWUpO1xuXHRcdFx0XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJQYWdpbmF0aW9uIEVycm9yIC0gbm8gc3VjaCBwYWdpbmF0aW9uIG1vZGU6XCIsIHRoaXMubW9kZSk7XG5cdFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdCgpO1xuXHRcdH1cblx0fVxuXHRcblx0X3BhcnNlUmVtb3RlRGF0YShkYXRhKXtcblx0XHR2YXIgbWFyZ2luO1xuXHRcdFxuXHRcdGlmKHR5cGVvZiBkYXRhLmxhc3RfcGFnZSA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJSZW1vdGUgUGFnaW5hdGlvbiBFcnJvciAtIFNlcnZlciByZXNwb25zZSBtaXNzaW5nICdcIiArICh0aGlzLm9wdGlvbnMoXCJkYXRhUmVjZWl2ZVBhcmFtc1wiKS5sYXN0X3BhZ2UgfHwgXCJsYXN0X3BhZ2VcIikgKyBcIicgcHJvcGVydHlcIik7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGRhdGEuZGF0YSl7XG5cdFx0XHR0aGlzLm1heCA9IHBhcnNlSW50KGRhdGEubGFzdF9wYWdlKSB8fCAxO1xuXG5cdFx0XHR0aGlzLnJlbW90ZVJvd0NvdW50RXN0aW1hdGUgPSB0eXBlb2YgZGF0YS5sYXN0X3JvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IGRhdGEubGFzdF9yb3cgOiAoZGF0YS5sYXN0X3BhZ2UgKiB0aGlzLnNpemUgLSAodGhpcy5wYWdlID09IGRhdGEubGFzdF9wYWdlID8gKHRoaXMuc2l6ZSAtIGRhdGEuZGF0YS5sZW5ndGgpIDogMCkpO1xuXHRcdFx0XG5cdFx0XHRpZih0aGlzLnByb2dyZXNzaXZlTG9hZCl7XG5cdFx0XHRcdHN3aXRjaCh0aGlzLm1vZGUpe1xuXHRcdFx0XHRcdGNhc2UgXCJwcm9ncmVzc2l2ZV9sb2FkXCI6XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRpZih0aGlzLnBhZ2UgPT0gMSl7XG5cdFx0XHRcdFx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5zZXREYXRhKGRhdGEuZGF0YSwgZmFsc2UsIHRoaXMucGFnZSA9PSAxKTtcblx0XHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLmFkZFJvd3MoZGF0YS5kYXRhKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGlmKHRoaXMucGFnZSA8IHRoaXMubWF4KXtcblx0XHRcdFx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5uZXh0UGFnZSgpO1xuXHRcdFx0XHRcdFx0XHR9LCB0aGlzLnRhYmxlLm9wdGlvbnMucHJvZ3Jlc3NpdmVMb2FkRGVsYXkpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Y2FzZSBcInByb2dyZXNzaXZlX3Njcm9sbFwiOlxuXHRcdFx0XHRcdFx0ZGF0YSA9IHRoaXMucGFnZSA9PT0gMSA/IGRhdGEuZGF0YSA6IHRoaXMudGFibGUucm93TWFuYWdlci5nZXREYXRhKCkuY29uY2F0KGRhdGEuZGF0YSk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuc2V0RGF0YShkYXRhLCB0aGlzLnBhZ2UgIT09IDEsIHRoaXMucGFnZSA9PSAxKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdG1hcmdpbiA9IHRoaXMudGFibGUub3B0aW9ucy5wcm9ncmVzc2l2ZUxvYWRTY3JvbGxNYXJnaW4gfHwgKHRoaXMudGFibGUucm93TWFuYWdlci5lbGVtZW50LmNsaWVudEhlaWdodCAqIDIpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0aWYodGhpcy50YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQuc2Nyb2xsSGVpZ2h0IDw9ICh0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5jbGllbnRIZWlnaHQgKyBtYXJnaW4pKXtcblx0XHRcdFx0XHRcdFx0aWYodGhpcy5wYWdlIDwgdGhpcy5tYXgpe1xuXHRcdFx0XHRcdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdFx0dGhpcy5uZXh0UGFnZSgpO1xuXHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHQvLyBsZWZ0ID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLnNjcm9sbExlZnQ7XG5cdFx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInBhZ2VMb2FkZWRcIiwgIHRoaXMuZ2V0UGFnZSgpKTtcblx0XHRcdFx0Ly8gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLnNjcm9sbEhvcml6b250YWwobGVmdCk7XG5cdFx0XHRcdC8vIHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5zY3JvbGxIb3Jpem9udGFsKGxlZnQpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiUmVtb3RlIFBhZ2luYXRpb24gRXJyb3IgLSBTZXJ2ZXIgcmVzcG9uc2UgbWlzc2luZyAnXCIgKyAodGhpcy5vcHRpb25zKFwiZGF0YVJlY2VpdmVQYXJhbXNcIikuZGF0YSB8fCBcImRhdGFcIikgKyBcIicgcHJvcGVydHlcIik7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBkYXRhLmRhdGE7XG5cdH1cblx0XG5cdC8vaGFuZGxlIHRoZSBmb290ZXIgZWxlbWVudCBiZWluZyByZWRyYXduXG5cdGZvb3RlclJlZHJhdygpe1xuXHRcdHZhciBmb290ZXIgPSB0aGlzLnRhYmxlLmZvb3Rlck1hbmFnZXIuY29udGFpbmVyRWxlbWVudDtcblxuXHRcdGlmKChNYXRoLmNlaWwoZm9vdGVyLmNsaWVudFdpZHRoKSAtIGZvb3Rlci5zY3JvbGxXaWR0aCkgPCAwKXtcblx0XHRcdHRoaXMucGFnZXNFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5wYWdlc0VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICcnO1xuXHRcdFx0XG5cdFx0XHRpZigoTWF0aC5jZWlsKGZvb3Rlci5jbGllbnRXaWR0aCkgLSBmb290ZXIuc2Nyb2xsV2lkdGgpIDwgMCl7XG5cdFx0XHRcdHRoaXMucGFnZXNFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cblBhZ2UubW9kdWxlTmFtZSA9IFwicGFnZVwiO1xuXG4vL2xvYWQgZGVmYXVsdHNcblBhZ2UucGFnZUNvdW50ZXJzID0gZGVmYXVsdFBhZ2VDb3VudGVycztcblxuLy8gcmVhZCBwZXJzaXN0YW5jZSBpbmZvcm1hdGlvbiBmcm9tIHN0b3JhZ2VcbnZhciBkZWZhdWx0UmVhZGVycyA9IHtcblx0bG9jYWw6ZnVuY3Rpb24oaWQsIHR5cGUpe1xuXHRcdHZhciBkYXRhID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oaWQgKyBcIi1cIiArIHR5cGUpO1xuXG5cdFx0cmV0dXJuIGRhdGEgPyBKU09OLnBhcnNlKGRhdGEpIDogZmFsc2U7XG5cdH0sXG5cdGNvb2tpZTpmdW5jdGlvbihpZCwgdHlwZSl7XG5cdFx0dmFyIGNvb2tpZSA9IGRvY3VtZW50LmNvb2tpZSxcblx0XHRrZXkgPSBpZCArIFwiLVwiICsgdHlwZSxcblx0XHRjb29raWVQb3MgPSBjb29raWUuaW5kZXhPZihrZXkgKyBcIj1cIiksXG5cdFx0ZW5kLCBkYXRhO1xuXG5cdFx0Ly9pZiBjb29raWUgZXhpc3RzLCBkZWNvZGUgYW5kIGxvYWQgY29sdW1uIGRhdGEgaW50byB0YWJ1bGF0b3Jcblx0XHRpZihjb29raWVQb3MgPiAtMSl7XG5cdFx0XHRjb29raWUgPSBjb29raWUuc2xpY2UoY29va2llUG9zKTtcblxuXHRcdFx0ZW5kID0gY29va2llLmluZGV4T2YoXCI7XCIpO1xuXG5cdFx0XHRpZihlbmQgPiAtMSl7XG5cdFx0XHRcdGNvb2tpZSA9IGNvb2tpZS5zbGljZSgwLCBlbmQpO1xuXHRcdFx0fVxuXG5cdFx0XHRkYXRhID0gY29va2llLnJlcGxhY2Uoa2V5ICsgXCI9XCIsIFwiXCIpO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID8gSlNPTi5wYXJzZShkYXRhKSA6IGZhbHNlO1xuXHR9XG59O1xuXG4vL3dyaXRlIHBlcnNpc3RlbmNlIGluZm9ybWF0aW9uIHRvIHN0b3JhZ2VcbnZhciBkZWZhdWx0V3JpdGVycyA9IHtcblx0bG9jYWw6ZnVuY3Rpb24oaWQsIHR5cGUsIGRhdGEpe1xuXHRcdGxvY2FsU3RvcmFnZS5zZXRJdGVtKGlkICsgXCItXCIgKyB0eXBlLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG5cdH0sXG5cdGNvb2tpZTpmdW5jdGlvbihpZCwgdHlwZSwgZGF0YSl7XG5cdFx0dmFyIGV4cGlyZURhdGUgPSBuZXcgRGF0ZSgpO1xuXG5cdFx0ZXhwaXJlRGF0ZS5zZXREYXRlKGV4cGlyZURhdGUuZ2V0RGF0ZSgpICsgMTAwMDApO1xuXG5cdFx0ZG9jdW1lbnQuY29va2llID0gaWQgKyBcIi1cIiArIHR5cGUgKyBcIj1cIiArIEpTT04uc3RyaW5naWZ5KGRhdGEpICsgXCI7IGV4cGlyZXM9XCIgKyBleHBpcmVEYXRlLnRvVVRDU3RyaW5nKCk7XG5cdH1cbn07XG5cbmNsYXNzIFBlcnNpc3RlbmNlIGV4dGVuZHMgTW9kdWxle1xuXG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cblx0XHR0aGlzLm1vZGUgPSBcIlwiO1xuXHRcdHRoaXMuaWQgPSBcIlwiO1xuXHRcdC8vIHRoaXMucGVyc2lzdFByb3BzID0gW1wiZmllbGRcIiwgXCJ3aWR0aFwiLCBcInZpc2libGVcIl07XG5cdFx0dGhpcy5kZWZXYXRjaGVyQmxvY2sgPSBmYWxzZTtcblx0XHR0aGlzLmNvbmZpZyA9IHt9O1xuXHRcdHRoaXMucmVhZEZ1bmMgPSBmYWxzZTtcblx0XHR0aGlzLndyaXRlRnVuYyA9IGZhbHNlO1xuXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicGVyc2lzdGVuY2VcIiwgZmFsc2UpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInBlcnNpc3RlbmNlSURcIiwgXCJcIik7IC8va2V5IGZvciBwZXJzaXN0ZW50IHN0b3JhZ2Vcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJwZXJzaXN0ZW5jZU1vZGVcIiwgdHJ1ZSk7IC8vbW9kZSBmb3Igc3RvcmluZyBwZXJzaXN0ZW5jZSBpbmZvcm1hdGlvblxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInBlcnNpc3RlbmNlUmVhZGVyRnVuY1wiLCBmYWxzZSk7IC8vZnVuY3Rpb24gZm9yIGhhbmRsaW5nIHBlcnNpc3RlbmNlIGRhdGEgcmVhZGluZ1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInBlcnNpc3RlbmNlV3JpdGVyRnVuY1wiLCBmYWxzZSk7IC8vZnVuY3Rpb24gZm9yIGhhbmRsaW5nIHBlcnNpc3RlbmNlIGRhdGEgd3JpdGluZ1xuXHR9XG5cblx0Ly8gVGVzdCBmb3Igd2hldGhlciBsb2NhbFN0b3JhZ2UgaXMgYXZhaWxhYmxlIGZvciB1c2UuXG5cdGxvY2FsU3RvcmFnZVRlc3QoKSB7XG5cdFx0dmFyICB0ZXN0S2V5ID0gIFwiX3RhYnVsYXRvcl90ZXN0XCI7XG5cblx0XHR0cnkge1xuXHRcdFx0d2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKCB0ZXN0S2V5LCB0ZXN0S2V5KTtcblx0XHRcdHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSggdGVzdEtleSApO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0Ly9zZXR1cCBwYXJhbWV0ZXJzXG5cdGluaXRpYWxpemUoKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucGVyc2lzdGVuY2Upe1xuXHRcdFx0Ly9kZXRlcm1pbmUgcGVyc2lzdGVudCBsYXlvdXQgc3RvcmFnZSB0eXBlXG5cdFx0XHR2YXIgbW9kZSA9IHRoaXMudGFibGUub3B0aW9ucy5wZXJzaXN0ZW5jZU1vZGUsXG5cdFx0XHRpZCA9IHRoaXMudGFibGUub3B0aW9ucy5wZXJzaXN0ZW5jZUlELFxuXHRcdFx0cmV0cmlldmVkRGF0YTtcblxuXHRcdFx0dGhpcy5tb2RlID0gbW9kZSAhPT0gdHJ1ZSA/ICBtb2RlIDogKHRoaXMubG9jYWxTdG9yYWdlVGVzdCgpID8gXCJsb2NhbFwiIDogXCJjb29raWVcIik7XG5cblx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5wZXJzaXN0ZW5jZVJlYWRlckZ1bmMpe1xuXHRcdFx0XHRpZih0eXBlb2YgdGhpcy50YWJsZS5vcHRpb25zLnBlcnNpc3RlbmNlUmVhZGVyRnVuYyA9PT0gXCJmdW5jdGlvblwiKXtcblx0XHRcdFx0XHR0aGlzLnJlYWRGdW5jID0gdGhpcy50YWJsZS5vcHRpb25zLnBlcnNpc3RlbmNlUmVhZGVyRnVuYztcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGlmKFBlcnNpc3RlbmNlLnJlYWRlcnNbdGhpcy50YWJsZS5vcHRpb25zLnBlcnNpc3RlbmNlUmVhZGVyRnVuY10pe1xuXHRcdFx0XHRcdFx0dGhpcy5yZWFkRnVuYyA9IFBlcnNpc3RlbmNlLnJlYWRlcnNbdGhpcy50YWJsZS5vcHRpb25zLnBlcnNpc3RlbmNlUmVhZGVyRnVuY107XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiUGVyc2lzdGVuY2UgUmVhZCBFcnJvciAtIGludmFsaWQgcmVhZGVyIHNldFwiLCB0aGlzLnRhYmxlLm9wdGlvbnMucGVyc2lzdGVuY2VSZWFkZXJGdW5jKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aWYoUGVyc2lzdGVuY2UucmVhZGVyc1t0aGlzLm1vZGVdKXtcblx0XHRcdFx0XHR0aGlzLnJlYWRGdW5jID0gUGVyc2lzdGVuY2UucmVhZGVyc1t0aGlzLm1vZGVdO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiUGVyc2lzdGVuY2UgUmVhZCBFcnJvciAtIGludmFsaWQgcmVhZGVyIHNldFwiLCB0aGlzLm1vZGUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5wZXJzaXN0ZW5jZVdyaXRlckZ1bmMpe1xuXHRcdFx0XHRpZih0eXBlb2YgdGhpcy50YWJsZS5vcHRpb25zLnBlcnNpc3RlbmNlV3JpdGVyRnVuYyA9PT0gXCJmdW5jdGlvblwiKXtcblx0XHRcdFx0XHR0aGlzLndyaXRlRnVuYyA9IHRoaXMudGFibGUub3B0aW9ucy5wZXJzaXN0ZW5jZVdyaXRlckZ1bmM7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRpZihQZXJzaXN0ZW5jZS53cml0ZXJzW3RoaXMudGFibGUub3B0aW9ucy5wZXJzaXN0ZW5jZVdyaXRlckZ1bmNdKXtcblx0XHRcdFx0XHRcdHRoaXMud3JpdGVGdW5jID0gUGVyc2lzdGVuY2Uud3JpdGVyc1t0aGlzLnRhYmxlLm9wdGlvbnMucGVyc2lzdGVuY2VXcml0ZXJGdW5jXTtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJQZXJzaXN0ZW5jZSBXcml0ZSBFcnJvciAtIGludmFsaWQgcmVhZGVyIHNldFwiLCB0aGlzLnRhYmxlLm9wdGlvbnMucGVyc2lzdGVuY2VXcml0ZXJGdW5jKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aWYoUGVyc2lzdGVuY2Uud3JpdGVyc1t0aGlzLm1vZGVdKXtcblx0XHRcdFx0XHR0aGlzLndyaXRlRnVuYyA9IFBlcnNpc3RlbmNlLndyaXRlcnNbdGhpcy5tb2RlXTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGNvbnNvbGUud2FybihcIlBlcnNpc3RlbmNlIFdyaXRlIEVycm9yIC0gaW52YWxpZCB3cml0ZXIgc2V0XCIsIHRoaXMubW9kZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly9zZXQgc3RvcmFnZSB0YWdcblx0XHRcdHRoaXMuaWQgPSBcInRhYnVsYXRvci1cIiArIChpZCB8fCAodGhpcy50YWJsZS5lbGVtZW50LmdldEF0dHJpYnV0ZShcImlkXCIpIHx8IFwiXCIpKTtcblxuXHRcdFx0dGhpcy5jb25maWcgPSB7XG5cdFx0XHRcdHNvcnQ6dGhpcy50YWJsZS5vcHRpb25zLnBlcnNpc3RlbmNlID09PSB0cnVlIHx8IHRoaXMudGFibGUub3B0aW9ucy5wZXJzaXN0ZW5jZS5zb3J0LFxuXHRcdFx0XHRmaWx0ZXI6dGhpcy50YWJsZS5vcHRpb25zLnBlcnNpc3RlbmNlID09PSB0cnVlIHx8IHRoaXMudGFibGUub3B0aW9ucy5wZXJzaXN0ZW5jZS5maWx0ZXIsXG5cdFx0XHRcdGhlYWRlckZpbHRlcjp0aGlzLnRhYmxlLm9wdGlvbnMucGVyc2lzdGVuY2UgPT09IHRydWUgfHwgdGhpcy50YWJsZS5vcHRpb25zLnBlcnNpc3RlbmNlLmhlYWRlckZpbHRlcixcblx0XHRcdFx0Z3JvdXA6dGhpcy50YWJsZS5vcHRpb25zLnBlcnNpc3RlbmNlID09PSB0cnVlIHx8IHRoaXMudGFibGUub3B0aW9ucy5wZXJzaXN0ZW5jZS5ncm91cCxcblx0XHRcdFx0cGFnZTp0aGlzLnRhYmxlLm9wdGlvbnMucGVyc2lzdGVuY2UgPT09IHRydWUgfHwgdGhpcy50YWJsZS5vcHRpb25zLnBlcnNpc3RlbmNlLnBhZ2UsXG5cdFx0XHRcdGNvbHVtbnM6dGhpcy50YWJsZS5vcHRpb25zLnBlcnNpc3RlbmNlID09PSB0cnVlID8gW1widGl0bGVcIiwgXCJ3aWR0aFwiLCBcInZpc2libGVcIl0gOiB0aGlzLnRhYmxlLm9wdGlvbnMucGVyc2lzdGVuY2UuY29sdW1ucyxcblx0XHRcdH07XG5cblx0XHRcdC8vbG9hZCBwYWdpbmF0aW9uIGRhdGEgaWYgbmVlZGVkXG5cdFx0XHRpZih0aGlzLmNvbmZpZy5wYWdlKXtcblx0XHRcdFx0cmV0cmlldmVkRGF0YSA9IHRoaXMucmV0cmlldmVEYXRhKFwicGFnZVwiKTtcblxuXHRcdFx0XHRpZihyZXRyaWV2ZWREYXRhKXtcblx0XHRcdFx0XHRpZih0eXBlb2YgcmV0cmlldmVkRGF0YS5wYWdpbmF0aW9uU2l6ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiAodGhpcy5jb25maWcucGFnZSA9PT0gdHJ1ZSB8fCB0aGlzLmNvbmZpZy5wYWdlLnNpemUpKXtcblx0XHRcdFx0XHRcdHRoaXMudGFibGUub3B0aW9ucy5wYWdpbmF0aW9uU2l6ZSA9IHJldHJpZXZlZERhdGEucGFnaW5hdGlvblNpemU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYodHlwZW9mIHJldHJpZXZlZERhdGEucGFnaW5hdGlvbkluaXRpYWxQYWdlICE9PSBcInVuZGVmaW5lZFwiICYmICh0aGlzLmNvbmZpZy5wYWdlID09PSB0cnVlIHx8IHRoaXMuY29uZmlnLnBhZ2UucGFnZSkpe1xuXHRcdFx0XHRcdFx0dGhpcy50YWJsZS5vcHRpb25zLnBhZ2luYXRpb25Jbml0aWFsUGFnZSA9IHJldHJpZXZlZERhdGEucGFnaW5hdGlvbkluaXRpYWxQYWdlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvL2xvYWQgZ3JvdXAgZGF0YSBpZiBuZWVkZWRcblx0XHRcdGlmKHRoaXMuY29uZmlnLmdyb3VwKXtcblx0XHRcdFx0cmV0cmlldmVkRGF0YSA9IHRoaXMucmV0cmlldmVEYXRhKFwiZ3JvdXBcIik7XG5cblx0XHRcdFx0aWYocmV0cmlldmVkRGF0YSl7XG5cdFx0XHRcdFx0aWYodHlwZW9mIHJldHJpZXZlZERhdGEuZ3JvdXBCeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiAodGhpcy5jb25maWcuZ3JvdXAgPT09IHRydWUgfHwgdGhpcy5jb25maWcuZ3JvdXAuZ3JvdXBCeSkpe1xuXHRcdFx0XHRcdFx0dGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQnkgPSByZXRyaWV2ZWREYXRhLmdyb3VwQnk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmKHR5cGVvZiByZXRyaWV2ZWREYXRhLmdyb3VwU3RhcnRPcGVuICE9PSBcInVuZGVmaW5lZFwiICYmICh0aGlzLmNvbmZpZy5ncm91cCA9PT0gdHJ1ZSB8fCB0aGlzLmNvbmZpZy5ncm91cC5ncm91cFN0YXJ0T3Blbikpe1xuXHRcdFx0XHRcdFx0dGhpcy50YWJsZS5vcHRpb25zLmdyb3VwU3RhcnRPcGVuID0gcmV0cmlldmVkRGF0YS5ncm91cFN0YXJ0T3Blbjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYodHlwZW9mIHJldHJpZXZlZERhdGEuZ3JvdXBIZWFkZXIgIT09IFwidW5kZWZpbmVkXCIgJiYgKHRoaXMuY29uZmlnLmdyb3VwID09PSB0cnVlIHx8IHRoaXMuY29uZmlnLmdyb3VwLmdyb3VwSGVhZGVyKSl7XG5cdFx0XHRcdFx0XHR0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBIZWFkZXIgPSByZXRyaWV2ZWREYXRhLmdyb3VwSGVhZGVyO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZih0aGlzLmNvbmZpZy5jb2x1bW5zKXtcblx0XHRcdFx0dGhpcy50YWJsZS5vcHRpb25zLmNvbHVtbnMgPSB0aGlzLmxvYWQoXCJjb2x1bW5zXCIsIHRoaXMudGFibGUub3B0aW9ucy5jb2x1bW5zKTtcblx0XHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4taW5pdFwiLCB0aGlzLmluaXRpYWxpemVDb2x1bW4uYmluZCh0aGlzKSk7XG5cdFx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLXNob3dcIiwgdGhpcy5zYXZlLmJpbmQodGhpcywgXCJjb2x1bW5zXCIpKTtcblx0XHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4taGlkZVwiLCB0aGlzLnNhdmUuYmluZCh0aGlzLCBcImNvbHVtbnNcIikpO1xuXHRcdFx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1tb3ZlZFwiLCB0aGlzLnNhdmUuYmluZCh0aGlzLCBcImNvbHVtbnNcIikpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInRhYmxlLWJ1aWx0XCIsIHRoaXMudGFibGVCdWlsdC5iaW5kKHRoaXMpLCAwKTtcblxuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJ0YWJsZS1yZWRyYXdcIiwgdGhpcy50YWJsZVJlZHJhdy5iaW5kKHRoaXMpKTtcblxuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJmaWx0ZXItY2hhbmdlZFwiLCB0aGlzLmV2ZW50U2F2ZS5iaW5kKHRoaXMsIFwiZmlsdGVyXCIpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiZmlsdGVyLWNoYW5nZWRcIiwgdGhpcy5ldmVudFNhdmUuYmluZCh0aGlzLCBcImhlYWRlckZpbHRlclwiKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInNvcnQtY2hhbmdlZFwiLCB0aGlzLmV2ZW50U2F2ZS5iaW5kKHRoaXMsIFwic29ydFwiKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImdyb3VwLWNoYW5nZWRcIiwgdGhpcy5ldmVudFNhdmUuYmluZCh0aGlzLCBcImdyb3VwXCIpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicGFnZS1jaGFuZ2VkXCIsIHRoaXMuZXZlbnRTYXZlLmJpbmQodGhpcywgXCJwYWdlXCIpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLXJlc2l6ZWRcIiwgdGhpcy5ldmVudFNhdmUuYmluZCh0aGlzLCBcImNvbHVtbnNcIikpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4td2lkdGhcIiwgdGhpcy5ldmVudFNhdmUuYmluZCh0aGlzLCBcImNvbHVtbnNcIikpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJsYXlvdXQtcmVmcmVzaGVkXCIsIHRoaXMuZXZlbnRTYXZlLmJpbmQodGhpcywgXCJjb2x1bW5zXCIpKTtcblx0XHR9XG5cblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcImdldENvbHVtbkxheW91dFwiLCB0aGlzLmdldENvbHVtbkxheW91dC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcInNldENvbHVtbkxheW91dFwiLCB0aGlzLnNldENvbHVtbkxheW91dC5iaW5kKHRoaXMpKTtcblx0fVxuXG5cdGV2ZW50U2F2ZSh0eXBlKXtcblx0XHRpZih0aGlzLmNvbmZpZ1t0eXBlXSl7XG5cdFx0XHR0aGlzLnNhdmUodHlwZSk7XG5cdFx0fVxuXHR9XG5cblx0dGFibGVCdWlsdCgpe1xuXHRcdHZhciBzb3J0ZXJzLCBmaWx0ZXJzLCBoZWFkZXJGaWx0ZXJzO1xuXG5cdFx0aWYodGhpcy5jb25maWcuc29ydCl7XG5cdFx0XHRzb3J0ZXJzID0gdGhpcy5sb2FkKFwic29ydFwiKTtcblxuXHRcdFx0aWYoIXNvcnRlcnMgPT09IGZhbHNlKXtcblx0XHRcdFx0dGhpcy50YWJsZS5vcHRpb25zLmluaXRpYWxTb3J0ID0gc29ydGVycztcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZih0aGlzLmNvbmZpZy5maWx0ZXIpe1xuXHRcdFx0ZmlsdGVycyA9IHRoaXMubG9hZChcImZpbHRlclwiKTtcblxuXHRcdFx0aWYoIWZpbHRlcnMgPT09IGZhbHNlKXtcblx0XHRcdFx0dGhpcy50YWJsZS5vcHRpb25zLmluaXRpYWxGaWx0ZXIgPSBmaWx0ZXJzO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZih0aGlzLmNvbmZpZy5oZWFkZXJGaWx0ZXIpe1xuXHRcdFx0aGVhZGVyRmlsdGVycyA9IHRoaXMubG9hZChcImhlYWRlckZpbHRlclwiKTtcblxuXHRcdFx0aWYoIWhlYWRlckZpbHRlcnMgPT09IGZhbHNlKXtcblx0XHRcdFx0dGhpcy50YWJsZS5vcHRpb25zLmluaXRpYWxIZWFkZXJGaWx0ZXIgPSBoZWFkZXJGaWx0ZXJzO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0fVxuXG5cdHRhYmxlUmVkcmF3KGZvcmNlKXtcblx0XHRpZihmb3JjZSAmJiB0aGlzLmNvbmZpZy5jb2x1bW5zKXtcblx0XHRcdHRoaXMuc2F2ZShcImNvbHVtbnNcIik7XG5cdFx0fVxuXHR9XG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vIFRhYmxlIEZ1bmN0aW9ucyAvLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXHRnZXRDb2x1bW5MYXlvdXQoKXtcblx0XHRyZXR1cm4gdGhpcy5wYXJzZUNvbHVtbnModGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmdldENvbHVtbnMoKSk7XG5cdH1cblxuXHRzZXRDb2x1bW5MYXlvdXQobGF5b3V0KXtcblx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuc2V0Q29sdW1ucyh0aGlzLm1lcmdlRGVmaW5pdGlvbih0aGlzLnRhYmxlLm9wdGlvbnMuY29sdW1ucywgbGF5b3V0KSk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8gSW50ZXJuYWwgTG9naWMgLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdGluaXRpYWxpemVDb2x1bW4oY29sdW1uKXtcblx0XHR2YXIgZGVmLCBrZXlzO1xuXG5cdFx0aWYodGhpcy5jb25maWcuY29sdW1ucyl7XG5cdFx0XHR0aGlzLmRlZldhdGNoZXJCbG9jayA9IHRydWU7XG5cblx0XHRcdGRlZiA9IGNvbHVtbi5nZXREZWZpbml0aW9uKCk7XG5cblx0XHRcdGtleXMgPSB0aGlzLmNvbmZpZy5jb2x1bW5zID09PSB0cnVlID8gT2JqZWN0LmtleXMoZGVmKSA6IHRoaXMuY29uZmlnLmNvbHVtbnM7XG5cblx0XHRcdGtleXMuZm9yRWFjaCgoa2V5KT0+e1xuXHRcdFx0XHR2YXIgcHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGRlZiwga2V5KTtcblx0XHRcdFx0dmFyIHZhbHVlID0gZGVmW2tleV07XG5cblx0XHRcdFx0aWYocHJvcHMpe1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkZWYsIGtleSwge1xuXHRcdFx0XHRcdFx0c2V0OiAobmV3VmFsdWUpID0+IHtcblx0XHRcdFx0XHRcdFx0dmFsdWUgPSBuZXdWYWx1ZTtcblxuXHRcdFx0XHRcdFx0XHRpZighdGhpcy5kZWZXYXRjaGVyQmxvY2spe1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuc2F2ZShcImNvbHVtbnNcIik7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpZihwcm9wcy5zZXQpe1xuXHRcdFx0XHRcdFx0XHRcdHByb3BzLnNldChuZXdWYWx1ZSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRnZXQ6KCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRpZihwcm9wcy5nZXQpe1xuXHRcdFx0XHRcdFx0XHRcdHByb3BzLmdldCgpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMuZGVmV2F0Y2hlckJsb2NrID0gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0Ly9sb2FkIHNhdmVkIGRlZmluaXRpb25zXG5cdGxvYWQodHlwZSwgY3VycmVudCl7XG5cdFx0dmFyIGRhdGEgPSB0aGlzLnJldHJpZXZlRGF0YSh0eXBlKTtcblxuXHRcdGlmKGN1cnJlbnQpe1xuXHRcdFx0ZGF0YSA9IGRhdGEgPyB0aGlzLm1lcmdlRGVmaW5pdGlvbihjdXJyZW50LCBkYXRhKSA6IGN1cnJlbnQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cdH1cblxuXHQvL3JldHJpZXZlIGRhdGEgZnJvbSBtZW1vcnlcblx0cmV0cmlldmVEYXRhKHR5cGUpe1xuXHRcdHJldHVybiB0aGlzLnJlYWRGdW5jID8gdGhpcy5yZWFkRnVuYyh0aGlzLmlkLCB0eXBlKSA6IGZhbHNlO1xuXHR9XG5cblx0Ly9tZXJnZSBvbGQgYW5kIG5ldyBjb2x1bW4gZGVmaW5pdGlvbnNcblx0bWVyZ2VEZWZpbml0aW9uKG9sZENvbHMsIG5ld0NvbHMpe1xuXHRcdHZhciBvdXRwdXQgPSBbXTtcblxuXHRcdG5ld0NvbHMgPSBuZXdDb2xzIHx8IFtdO1xuXG5cdFx0bmV3Q29scy5mb3JFYWNoKChjb2x1bW4sIHRvKSA9PiB7XG5cdFx0XHR2YXIgZnJvbSA9IHRoaXMuX2ZpbmRDb2x1bW4ob2xkQ29scywgY29sdW1uKSxcblx0XHRcdGtleXM7XG5cblx0XHRcdGlmKGZyb20pe1xuXHRcdFx0XHRpZih0aGlzLmNvbmZpZy5jb2x1bW5zID09PSB0cnVlIHx8IHRoaXMuY29uZmlnLmNvbHVtbnMgPT0gdW5kZWZpbmVkKXtcblx0XHRcdFx0XHRrZXlzID0gIE9iamVjdC5rZXlzKGZyb20pO1xuXHRcdFx0XHRcdGtleXMucHVzaChcIndpZHRoXCIpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0a2V5cyA9IHRoaXMuY29uZmlnLmNvbHVtbnM7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRrZXlzLmZvckVhY2goKGtleSk9Pntcblx0XHRcdFx0XHRpZihrZXkgIT09IFwiY29sdW1uc1wiICYmIHR5cGVvZiBjb2x1bW5ba2V5XSAhPT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRcdFx0XHRmcm9tW2tleV0gPSBjb2x1bW5ba2V5XTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGlmKGZyb20uY29sdW1ucyl7XG5cdFx0XHRcdFx0ZnJvbS5jb2x1bW5zID0gdGhpcy5tZXJnZURlZmluaXRpb24oZnJvbS5jb2x1bW5zLCBjb2x1bW4uY29sdW1ucyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRvdXRwdXQucHVzaChmcm9tKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdG9sZENvbHMuZm9yRWFjaCgoY29sdW1uLCBpKSA9PiB7XG5cdFx0XHR2YXIgZnJvbSA9IHRoaXMuX2ZpbmRDb2x1bW4obmV3Q29scywgY29sdW1uKTtcblxuXHRcdFx0aWYgKCFmcm9tKSB7XG5cdFx0XHRcdGlmKG91dHB1dC5sZW5ndGg+aSl7XG5cdFx0XHRcdFx0b3V0cHV0LnNwbGljZShpLCAwLCBjb2x1bW4pO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goY29sdW1uKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdC8vZmluZCBtYXRjaGluZyBjb2x1bW5zXG5cdF9maW5kQ29sdW1uKGNvbHVtbnMsIHN1YmplY3Qpe1xuXHRcdHZhciB0eXBlID0gc3ViamVjdC5jb2x1bW5zID8gXCJncm91cFwiIDogKHN1YmplY3QuZmllbGQgPyBcImZpZWxkXCIgOiBcIm9iamVjdFwiKTtcblxuXHRcdHJldHVybiBjb2x1bW5zLmZpbmQoZnVuY3Rpb24oY29sKXtcblx0XHRcdHN3aXRjaCh0eXBlKXtcblx0XHRcdFx0Y2FzZSBcImdyb3VwXCI6XG5cdFx0XHRcdFx0cmV0dXJuIGNvbC50aXRsZSA9PT0gc3ViamVjdC50aXRsZSAmJiBjb2wuY29sdW1ucy5sZW5ndGggPT09IHN1YmplY3QuY29sdW1ucy5sZW5ndGg7XG5cblx0XHRcdFx0Y2FzZSBcImZpZWxkXCI6XG5cdFx0XHRcdFx0cmV0dXJuIGNvbC5maWVsZCA9PT0gc3ViamVjdC5maWVsZDtcblxuXHRcdFx0XHRjYXNlIFwib2JqZWN0XCI6XG5cdFx0XHRcdFx0cmV0dXJuIGNvbCA9PT0gc3ViamVjdDtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdC8vc2F2ZSBkYXRhXG5cdHNhdmUodHlwZSl7XG5cdFx0dmFyIGRhdGEgPSB7fTtcblxuXHRcdHN3aXRjaCh0eXBlKXtcblx0XHRcdGNhc2UgXCJjb2x1bW5zXCI6XG5cdFx0XHRcdGRhdGEgPSB0aGlzLnBhcnNlQ29sdW1ucyh0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0Q29sdW1ucygpKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgXCJmaWx0ZXJcIjpcblx0XHRcdFx0ZGF0YSA9IHRoaXMudGFibGUubW9kdWxlcy5maWx0ZXIuZ2V0RmlsdGVycygpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcImhlYWRlckZpbHRlclwiOlxuXHRcdFx0XHRkYXRhID0gdGhpcy50YWJsZS5tb2R1bGVzLmZpbHRlci5nZXRIZWFkZXJGaWx0ZXJzKCk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwic29ydFwiOlxuXHRcdFx0XHRkYXRhID0gdGhpcy52YWxpZGF0ZVNvcnRlcnModGhpcy50YWJsZS5tb2R1bGVzLnNvcnQuZ2V0U29ydCgpKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgXCJncm91cFwiOlxuXHRcdFx0XHRkYXRhID0gdGhpcy5nZXRHcm91cENvbmZpZygpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcInBhZ2VcIjpcblx0XHRcdFx0ZGF0YSA9IHRoaXMuZ2V0UGFnZUNvbmZpZygpO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cblx0XHRpZih0aGlzLndyaXRlRnVuYyl7XG5cdFx0XHR0aGlzLndyaXRlRnVuYyh0aGlzLmlkLCB0eXBlLCBkYXRhKTtcblx0XHR9XG5cblx0fVxuXG5cdC8vZW5zdXJlIHNvcnRlcnMgY29udGFpbiBubyBmdW5jdGlvbiBkYXRhXG5cdHZhbGlkYXRlU29ydGVycyhkYXRhKXtcblx0XHRkYXRhLmZvckVhY2goZnVuY3Rpb24oaXRlbSl7XG5cdFx0XHRpdGVtLmNvbHVtbiA9IGl0ZW0uZmllbGQ7XG5cdFx0XHRkZWxldGUgaXRlbS5maWVsZDtcblx0XHR9KTtcblxuXHRcdHJldHVybiBkYXRhO1xuXHR9XG5cblx0Z2V0R3JvdXBDb25maWcoKXtcblx0XHR2YXIgZGF0YSA9IHt9O1xuXG5cdFx0aWYodGhpcy5jb25maWcuZ3JvdXApe1xuXHRcdFx0aWYodGhpcy5jb25maWcuZ3JvdXAgPT09IHRydWUgfHwgdGhpcy5jb25maWcuZ3JvdXAuZ3JvdXBCeSl7XG5cdFx0XHRcdGRhdGEuZ3JvdXBCeSA9IHRoaXMudGFibGUub3B0aW9ucy5ncm91cEJ5O1xuXHRcdFx0fVxuXG5cdFx0XHRpZih0aGlzLmNvbmZpZy5ncm91cCA9PT0gdHJ1ZSB8fCB0aGlzLmNvbmZpZy5ncm91cC5ncm91cFN0YXJ0T3Blbil7XG5cdFx0XHRcdGRhdGEuZ3JvdXBTdGFydE9wZW4gPSB0aGlzLnRhYmxlLm9wdGlvbnMuZ3JvdXBTdGFydE9wZW47XG5cdFx0XHR9XG5cblx0XHRcdGlmKHRoaXMuY29uZmlnLmdyb3VwID09PSB0cnVlIHx8IHRoaXMuY29uZmlnLmdyb3VwLmdyb3VwSGVhZGVyKXtcblx0XHRcdFx0ZGF0YS5ncm91cEhlYWRlciA9IHRoaXMudGFibGUub3B0aW9ucy5ncm91cEhlYWRlcjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YTtcblx0fVxuXG5cdGdldFBhZ2VDb25maWcoKXtcblx0XHR2YXIgZGF0YSA9IHt9O1xuXG5cdFx0aWYodGhpcy5jb25maWcucGFnZSl7XG5cdFx0XHRpZih0aGlzLmNvbmZpZy5wYWdlID09PSB0cnVlIHx8IHRoaXMuY29uZmlnLnBhZ2Uuc2l6ZSl7XG5cdFx0XHRcdGRhdGEucGFnaW5hdGlvblNpemUgPSB0aGlzLnRhYmxlLm1vZHVsZXMucGFnZS5nZXRQYWdlU2l6ZSgpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZih0aGlzLmNvbmZpZy5wYWdlID09PSB0cnVlIHx8IHRoaXMuY29uZmlnLnBhZ2UucGFnZSl7XG5cdFx0XHRcdGRhdGEucGFnaW5hdGlvbkluaXRpYWxQYWdlID0gdGhpcy50YWJsZS5tb2R1bGVzLnBhZ2UuZ2V0UGFnZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXHR9XG5cblxuXHQvL3BhcnNlIGNvbHVtbnMgZm9yIGRhdGEgdG8gc3RvcmVcblx0cGFyc2VDb2x1bW5zKGNvbHVtbnMpe1xuXHRcdHZhciBkZWZpbml0aW9ucyA9IFtdLFxuXHRcdGV4Y2x1ZGVkS2V5cyA9IFtcImhlYWRlckNvbnRleHRNZW51XCIsIFwiaGVhZGVyTWVudVwiLCBcImNvbnRleHRNZW51XCIsIFwiY2xpY2tNZW51XCJdO1xuXG5cdFx0Y29sdW1ucy5mb3JFYWNoKChjb2x1bW4pID0+IHtcblx0XHRcdHZhciBkZWZTdG9yZSA9IHt9LFxuXHRcdFx0Y29sRGVmID0gY29sdW1uLmdldERlZmluaXRpb24oKSxcblx0XHRcdGtleXM7XG5cblx0XHRcdGlmKGNvbHVtbi5pc0dyb3VwKXtcblx0XHRcdFx0ZGVmU3RvcmUudGl0bGUgPSBjb2xEZWYudGl0bGU7XG5cdFx0XHRcdGRlZlN0b3JlLmNvbHVtbnMgPSB0aGlzLnBhcnNlQ29sdW1ucyhjb2x1bW4uZ2V0Q29sdW1ucygpKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0ZGVmU3RvcmUuZmllbGQgPSBjb2x1bW4uZ2V0RmllbGQoKTtcblxuXHRcdFx0XHRpZih0aGlzLmNvbmZpZy5jb2x1bW5zID09PSB0cnVlIHx8IHRoaXMuY29uZmlnLmNvbHVtbnMgPT0gdW5kZWZpbmVkKXtcblx0XHRcdFx0XHRrZXlzID0gIE9iamVjdC5rZXlzKGNvbERlZik7XG5cdFx0XHRcdFx0a2V5cy5wdXNoKFwid2lkdGhcIik7XG5cdFx0XHRcdFx0a2V5cy5wdXNoKFwidmlzaWJsZVwiKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGtleXMgPSB0aGlzLmNvbmZpZy5jb2x1bW5zO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0a2V5cy5mb3JFYWNoKChrZXkpPT57XG5cdFx0XHRcdFx0c3dpdGNoKGtleSl7XG5cdFx0XHRcdFx0XHRjYXNlIFwid2lkdGhcIjpcblx0XHRcdFx0XHRcdFx0ZGVmU3RvcmUud2lkdGggPSBjb2x1bW4uZ2V0V2lkdGgoKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlIFwidmlzaWJsZVwiOlxuXHRcdFx0XHRcdFx0XHRkZWZTdG9yZS52aXNpYmxlID0gY29sdW1uLnZpc2libGU7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRpZih0eXBlb2YgY29sRGVmW2tleV0gIT09IFwiZnVuY3Rpb25cIiAmJiBleGNsdWRlZEtleXMuaW5kZXhPZihrZXkpID09PSAtMSl7XG5cdFx0XHRcdFx0XHRcdFx0ZGVmU3RvcmVba2V5XSA9IGNvbERlZltrZXldO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmaW5pdGlvbnMucHVzaChkZWZTdG9yZSk7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gZGVmaW5pdGlvbnM7XG5cdH1cbn1cblxuUGVyc2lzdGVuY2UubW9kdWxlTmFtZSA9IFwicGVyc2lzdGVuY2VcIjtcblxuUGVyc2lzdGVuY2UubW9kdWxlSW5pdE9yZGVyID0gLTEwO1xuXG4vL2xvYWQgZGVmYXVsdHNcblBlcnNpc3RlbmNlLnJlYWRlcnMgPSBkZWZhdWx0UmVhZGVycztcblBlcnNpc3RlbmNlLndyaXRlcnMgPSBkZWZhdWx0V3JpdGVycztcblxuY2xhc3MgUG9wdXAkMSBleHRlbmRzIE1vZHVsZXtcblx0XG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cdFx0XG5cdFx0dGhpcy5jb2x1bW5TdWJzY3JpYmVycyA9IHt9O1xuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInJvd0NvbnRleHRQb3B1cFwiLCBmYWxzZSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicm93Q2xpY2tQb3B1cFwiLCBmYWxzZSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicm93RGJsQ2xpY2tQb3B1cFwiLCBmYWxzZSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZ3JvdXBDb250ZXh0UG9wdXBcIiwgZmFsc2UpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImdyb3VwQ2xpY2tQb3B1cFwiLCBmYWxzZSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiZ3JvdXBEYmxDbGlja1BvcHVwXCIsIGZhbHNlKTtcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiaGVhZGVyQ29udGV4dFBvcHVwXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJDbGlja1BvcHVwXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJEYmxDbGlja1BvcHVwXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJQb3B1cFwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiaGVhZGVyUG9wdXBJY29uXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJjb250ZXh0UG9wdXBcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImNsaWNrUG9wdXBcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImRibENsaWNrUG9wdXBcIik7XG5cblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJjZWxsXCIsIFwicG9wdXBcIiwgdGhpcy5fY29tcG9uZW50UG9wdXBDYWxsLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcImNvbHVtblwiLCBcInBvcHVwXCIsIHRoaXMuX2NvbXBvbmVudFBvcHVwQ2FsbC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJyb3dcIiwgXCJwb3B1cFwiLCB0aGlzLl9jb21wb25lbnRQb3B1cENhbGwuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwiZ3JvdXBcIiwgXCJwb3B1cFwiLCB0aGlzLl9jb21wb25lbnRQb3B1cENhbGwuYmluZCh0aGlzKSk7XG5cdFx0XG5cdH1cblx0XG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLmluaXRpYWxpemVSb3dXYXRjaGVycygpO1xuXHRcdHRoaXMuaW5pdGlhbGl6ZUdyb3VwV2F0Y2hlcnMoKTtcblx0XHRcblx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1pbml0XCIsIHRoaXMuaW5pdGlhbGl6ZUNvbHVtbi5iaW5kKHRoaXMpKTtcblx0fVxuXG5cdF9jb21wb25lbnRQb3B1cENhbGwoY29tcG9uZW50LCBjb250ZW50cywgcG9zaXRpb24pe1xuXHRcdHRoaXMubG9hZFBvcHVwRXZlbnQoY29udGVudHMsIG51bGwsIGNvbXBvbmVudCwgcG9zaXRpb24pO1xuXHR9XG5cdFxuXHRpbml0aWFsaXplUm93V2F0Y2hlcnMoKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucm93Q29udGV4dFBvcHVwKXtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWNvbnRleHRtZW51XCIsIHRoaXMubG9hZFBvcHVwRXZlbnQuYmluZCh0aGlzLCB0aGlzLnRhYmxlLm9wdGlvbnMucm93Q29udGV4dFBvcHVwKSk7XG5cdFx0XHR0aGlzLnRhYmxlLm9uKFwicm93VGFwSG9sZFwiLCB0aGlzLmxvYWRQb3B1cEV2ZW50LmJpbmQodGhpcywgdGhpcy50YWJsZS5vcHRpb25zLnJvd0NvbnRleHRQb3B1cCkpO1xuXHRcdH1cblx0XHRcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucm93Q2xpY2tQb3B1cCl7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1jbGlja1wiLCB0aGlzLmxvYWRQb3B1cEV2ZW50LmJpbmQodGhpcywgdGhpcy50YWJsZS5vcHRpb25zLnJvd0NsaWNrUG9wdXApKTtcblx0XHR9XG5cblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucm93RGJsQ2xpY2tQb3B1cCl7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1kYmxjbGlja1wiLCB0aGlzLmxvYWRQb3B1cEV2ZW50LmJpbmQodGhpcywgdGhpcy50YWJsZS5vcHRpb25zLnJvd0RibENsaWNrUG9wdXApKTtcblx0XHR9XG5cdH1cblx0XG5cdGluaXRpYWxpemVHcm91cFdhdGNoZXJzKCl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQ29udGV4dFBvcHVwKXtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiZ3JvdXAtY29udGV4dG1lbnVcIiwgdGhpcy5sb2FkUG9wdXBFdmVudC5iaW5kKHRoaXMsIHRoaXMudGFibGUub3B0aW9ucy5ncm91cENvbnRleHRQb3B1cCkpO1xuXHRcdFx0dGhpcy50YWJsZS5vbihcImdyb3VwVGFwSG9sZFwiLCB0aGlzLmxvYWRQb3B1cEV2ZW50LmJpbmQodGhpcywgdGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQ29udGV4dFBvcHVwKSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5ncm91cENsaWNrUG9wdXApe1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJncm91cC1jbGlja1wiLCB0aGlzLmxvYWRQb3B1cEV2ZW50LmJpbmQodGhpcywgdGhpcy50YWJsZS5vcHRpb25zLmdyb3VwQ2xpY2tQb3B1cCkpO1xuXHRcdH1cblxuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5ncm91cERibENsaWNrUG9wdXApe1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJncm91cC1kYmxjbGlja1wiLCB0aGlzLmxvYWRQb3B1cEV2ZW50LmJpbmQodGhpcywgdGhpcy50YWJsZS5vcHRpb25zLmdyb3VwRGJsQ2xpY2tQb3B1cCkpO1xuXHRcdH1cblx0fVxuXHRcblx0aW5pdGlhbGl6ZUNvbHVtbihjb2x1bW4pe1xuXHRcdHZhciBkZWYgPSBjb2x1bW4uZGVmaW5pdGlvbjtcblx0XHRcblx0XHQvL2hhbmRsZSBjb2x1bW4gZXZlbnRzXG5cdFx0aWYoZGVmLmhlYWRlckNvbnRleHRQb3B1cCAmJiAhdGhpcy5jb2x1bW5TdWJzY3JpYmVycy5oZWFkZXJDb250ZXh0UG9wdXApe1xuXHRcdFx0dGhpcy5jb2x1bW5TdWJzY3JpYmVycy5oZWFkZXJDb250ZXh0UG9wdXAgPSB0aGlzLmxvYWRQb3B1cFRhYmxlQ29sdW1uRXZlbnQuYmluZCh0aGlzLCBcImhlYWRlckNvbnRleHRQb3B1cFwiKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWNvbnRleHRtZW51XCIsIHRoaXMuY29sdW1uU3Vic2NyaWJlcnMuaGVhZGVyQ29udGV4dFBvcHVwKTtcblx0XHRcdHRoaXMudGFibGUub24oXCJoZWFkZXJUYXBIb2xkXCIsIHRoaXMubG9hZFBvcHVwVGFibGVDb2x1bW5FdmVudC5iaW5kKHRoaXMsIFwiaGVhZGVyQ29udGV4dFBvcHVwXCIpKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYoZGVmLmhlYWRlckNsaWNrUG9wdXAgJiYgIXRoaXMuY29sdW1uU3Vic2NyaWJlcnMuaGVhZGVyQ2xpY2tQb3B1cCl7XG5cdFx0XHR0aGlzLmNvbHVtblN1YnNjcmliZXJzLmhlYWRlckNsaWNrUG9wdXAgPSB0aGlzLmxvYWRQb3B1cFRhYmxlQ29sdW1uRXZlbnQuYmluZCh0aGlzLCBcImhlYWRlckNsaWNrUG9wdXBcIik7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1jbGlja1wiLCB0aGlzLmNvbHVtblN1YnNjcmliZXJzLmhlYWRlckNsaWNrUG9wdXApO1xuXHRcdFxuXHRcdFxuXHRcdH1pZihkZWYuaGVhZGVyRGJsQ2xpY2tQb3B1cCAmJiAhdGhpcy5jb2x1bW5TdWJzY3JpYmVycy5oZWFkZXJEYmxDbGlja1BvcHVwKXtcblx0XHRcdHRoaXMuY29sdW1uU3Vic2NyaWJlcnMuaGVhZGVyRGJsQ2xpY2tQb3B1cCA9IHRoaXMubG9hZFBvcHVwVGFibGVDb2x1bW5FdmVudC5iaW5kKHRoaXMsIFwiaGVhZGVyRGJsQ2xpY2tQb3B1cFwiKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWRibGNsaWNrXCIsIHRoaXMuY29sdW1uU3Vic2NyaWJlcnMuaGVhZGVyRGJsQ2xpY2tQb3B1cCk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGRlZi5oZWFkZXJQb3B1cCl7XG5cdFx0XHR0aGlzLmluaXRpYWxpemVDb2x1bW5IZWFkZXJQb3B1cChjb2x1bW4pO1xuXHRcdH1cblx0XHRcblx0XHQvL2hhbmRsZSBjZWxsIGV2ZW50c1xuXHRcdGlmKGRlZi5jb250ZXh0UG9wdXAgJiYgIXRoaXMuY29sdW1uU3Vic2NyaWJlcnMuY29udGV4dFBvcHVwKXtcblx0XHRcdHRoaXMuY29sdW1uU3Vic2NyaWJlcnMuY29udGV4dFBvcHVwID0gdGhpcy5sb2FkUG9wdXBUYWJsZUNlbGxFdmVudC5iaW5kKHRoaXMsIFwiY29udGV4dFBvcHVwXCIpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjZWxsLWNvbnRleHRtZW51XCIsIHRoaXMuY29sdW1uU3Vic2NyaWJlcnMuY29udGV4dFBvcHVwKTtcblx0XHRcdHRoaXMudGFibGUub24oXCJjZWxsVGFwSG9sZFwiLCB0aGlzLmxvYWRQb3B1cFRhYmxlQ2VsbEV2ZW50LmJpbmQodGhpcywgXCJjb250ZXh0UG9wdXBcIikpO1xuXHRcdH1cblx0XHRcblx0XHRpZihkZWYuY2xpY2tQb3B1cCAmJiAhdGhpcy5jb2x1bW5TdWJzY3JpYmVycy5jbGlja1BvcHVwKXtcblx0XHRcdHRoaXMuY29sdW1uU3Vic2NyaWJlcnMuY2xpY2tQb3B1cCA9IHRoaXMubG9hZFBvcHVwVGFibGVDZWxsRXZlbnQuYmluZCh0aGlzLCBcImNsaWNrUG9wdXBcIik7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNlbGwtY2xpY2tcIiwgdGhpcy5jb2x1bW5TdWJzY3JpYmVycy5jbGlja1BvcHVwKTtcblx0XHR9XG5cblx0XHRpZihkZWYuZGJsQ2xpY2tQb3B1cCAmJiAhdGhpcy5jb2x1bW5TdWJzY3JpYmVycy5kYmxDbGlja1BvcHVwKXtcblx0XHRcdHRoaXMuY29sdW1uU3Vic2NyaWJlcnMuZGJsQ2xpY2tQb3B1cCA9IHRoaXMubG9hZFBvcHVwVGFibGVDZWxsRXZlbnQuYmluZCh0aGlzLCBcImRibENsaWNrUG9wdXBcIik7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNlbGwtY2xpY2tcIiwgdGhpcy5jb2x1bW5TdWJzY3JpYmVycy5kYmxDbGlja1BvcHVwKTtcblx0XHR9XG5cdH1cblx0XG5cdGluaXRpYWxpemVDb2x1bW5IZWFkZXJQb3B1cChjb2x1bW4pe1xuXHRcdHZhciBpY29uID0gY29sdW1uLmRlZmluaXRpb24uaGVhZGVyUG9wdXBJY29uLFxuXHRcdGhlYWRlclBvcHVwRWw7XG5cdFx0XG5cdFx0aGVhZGVyUG9wdXBFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuXHRcdGhlYWRlclBvcHVwRWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1oZWFkZXItcG9wdXAtYnV0dG9uXCIpO1xuXG5cdFx0aWYoaWNvbil7XG5cdFx0XHRpZih0eXBlb2YgaWNvbiA9PT0gXCJmdW5jdGlvblwiKXtcblx0XHRcdFx0aWNvbiA9IGljb24oY29sdW1uLmdldENvbXBvbmVudCgpKTtcblx0XHRcdH1cblxuXHRcdFx0aWYoaWNvbiBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KXtcblx0XHRcdFx0aGVhZGVyUG9wdXBFbC5hcHBlbmRDaGlsZChpY29uKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aGVhZGVyUG9wdXBFbC5pbm5lckhUTUwgPSBpY29uO1xuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGhlYWRlclBvcHVwRWwuaW5uZXJIVE1MID0gXCImdmVsbGlwO1wiO1xuXHRcdH1cblx0XHRcblx0XHRoZWFkZXJQb3B1cEVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5sb2FkUG9wdXBFdmVudChjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJQb3B1cCwgZSwgY29sdW1uKTtcblx0XHR9KTtcblx0XHRcblx0XHRjb2x1bW4udGl0bGVFbGVtZW50Lmluc2VydEJlZm9yZShoZWFkZXJQb3B1cEVsLCBjb2x1bW4udGl0bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuXHR9XG5cdFxuXHRsb2FkUG9wdXBUYWJsZUNlbGxFdmVudChvcHRpb24sIGUsIGNlbGwpe1xuXHRcdGlmKGNlbGwuX2NlbGwpe1xuXHRcdFx0Y2VsbCA9IGNlbGwuX2NlbGw7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGNlbGwuY29sdW1uLmRlZmluaXRpb25bb3B0aW9uXSl7XG5cdFx0XHR0aGlzLmxvYWRQb3B1cEV2ZW50KGNlbGwuY29sdW1uLmRlZmluaXRpb25bb3B0aW9uXSwgZSwgY2VsbCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRsb2FkUG9wdXBUYWJsZUNvbHVtbkV2ZW50KG9wdGlvbiwgZSwgY29sdW1uKXtcblx0XHRpZihjb2x1bW4uX2NvbHVtbil7XG5cdFx0XHRjb2x1bW4gPSBjb2x1bW4uX2NvbHVtbjtcblx0XHR9XG5cdFx0XG5cdFx0aWYoY29sdW1uLmRlZmluaXRpb25bb3B0aW9uXSl7XG5cdFx0XHR0aGlzLmxvYWRQb3B1cEV2ZW50KGNvbHVtbi5kZWZpbml0aW9uW29wdGlvbl0sIGUsIGNvbHVtbik7XG5cdFx0fVxuXHR9XG5cdFxuXHRsb2FkUG9wdXBFdmVudChjb250ZW50cywgZSwgY29tcG9uZW50LCBwb3NpdGlvbil7XG5cdFx0dmFyIHJlbmRlcmVkQ2FsbGJhY2s7XG5cblx0XHRmdW5jdGlvbiBvblJlbmRlcmVkKGNhbGxiYWNrKXtcblx0XHRcdHJlbmRlcmVkQ2FsbGJhY2sgPSBjYWxsYmFjaztcblx0XHR9XG5cdFx0XG5cdFx0aWYoY29tcG9uZW50Ll9ncm91cCl7XG5cdFx0XHRjb21wb25lbnQgPSBjb21wb25lbnQuX2dyb3VwO1xuXHRcdH1lbHNlIGlmKGNvbXBvbmVudC5fcm93KXtcblx0XHRcdGNvbXBvbmVudCA9IGNvbXBvbmVudC5fcm93O1xuXHRcdH1cblx0XHRcblx0XHRjb250ZW50cyA9IHR5cGVvZiBjb250ZW50cyA9PSBcImZ1bmN0aW9uXCIgPyBjb250ZW50cy5jYWxsKHRoaXMudGFibGUsIGUsIGNvbXBvbmVudC5nZXRDb21wb25lbnQoKSwgIG9uUmVuZGVyZWQpIDogY29udGVudHM7XG5cdFx0XG5cdFx0dGhpcy5sb2FkUG9wdXAoZSwgY29tcG9uZW50LCBjb250ZW50cywgcmVuZGVyZWRDYWxsYmFjaywgcG9zaXRpb24pO1xuXHR9XG5cdFxuXHRsb2FkUG9wdXAoZSwgY29tcG9uZW50LCBjb250ZW50cywgcmVuZGVyZWRDYWxsYmFjaywgcG9zaXRpb24pe1xuXHRcdHZhciB0b3VjaCA9ICEoZSBpbnN0YW5jZW9mIE1vdXNlRXZlbnQpLFxuXHRcdGNvbnRlbnRzRWwsIHBvcHVwO1xuXHRcdFxuXHRcdGlmKGNvbnRlbnRzIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpe1xuXHRcdFx0Y29udGVudHNFbCA9IGNvbnRlbnRzO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnRlbnRzRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdFx0Y29udGVudHNFbC5pbm5lckhUTUwgPSBjb250ZW50cztcblx0XHR9XG5cdFx0XG5cdFx0Y29udGVudHNFbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXBvcHVwXCIpO1xuXG5cdFx0Y29udGVudHNFbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+e1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9KTtcblxuXHRcdGlmKCF0b3VjaCl7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHRcdFxuXHRcdHBvcHVwID0gdGhpcy5wb3B1cChjb250ZW50c0VsKTtcblxuXHRcdGlmKHR5cGVvZiByZW5kZXJlZENhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0cG9wdXAucmVuZGVyQ2FsbGJhY2socmVuZGVyZWRDYWxsYmFjayk7XG5cdFx0fVxuXG5cdFx0aWYoZSl7XG5cdFx0XHRwb3B1cC5zaG93KGUpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHBvcHVwLnNob3coY29tcG9uZW50LmdldEVsZW1lbnQoKSwgcG9zaXRpb24gfHwgXCJjZW50ZXJcIik7XG5cdFx0fVxuXG5cdFx0XG5cdFx0cG9wdXAuaGlkZU9uQmx1cigoKSA9PiB7XG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJwb3B1cENsb3NlZFwiLCBjb21wb25lbnQuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdH0pO1xuXG5cblxuXHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInBvcHVwT3BlbmVkXCIsIGNvbXBvbmVudC5nZXRDb21wb25lbnQoKSk7XG5cdH1cbn1cblxuUG9wdXAkMS5tb2R1bGVOYW1lID0gXCJwb3B1cFwiO1xuXG5jbGFzcyBQcmludCBleHRlbmRzIE1vZHVsZXtcblxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXG5cdFx0dGhpcy5lbGVtZW50ID0gZmFsc2U7XG5cdFx0dGhpcy5tYW51YWxCbG9jayA9IGZhbHNlO1xuXHRcdHRoaXMuYmVmb3JlcHJpbnRFdmVudEhhbmRsZXIgPSBudWxsO1xuXHRcdHRoaXMuYWZ0ZXJwcmludEV2ZW50SGFuZGxlciA9IG51bGw7XG5cblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJwcmludEFzSHRtbFwiLCBmYWxzZSk7IC8vZW5hYmxlIHByaW50IGFzIGh0bWxcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJwcmludEZvcm1hdHRlclwiLCBmYWxzZSk7IC8vcHJpbnRpbmcgcGFnZSBmb3JtYXR0ZXJcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJwcmludEhlYWRlclwiLCBmYWxzZSk7IC8vcGFnZSBoZWFkZXIgY29udGVudHNcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJwcmludEZvb3RlclwiLCBmYWxzZSk7IC8vcGFnZSBmb290ZXIgY29udGVudHNcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJwcmludFN0eWxlZFwiLCB0cnVlKTsgLy9lbmFibGUgcHJpbnQgYXMgaHRtbCBzdHlsaW5nXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicHJpbnRSb3dSYW5nZVwiLCBcInZpc2libGVcIik7IC8vcmVzdHJpY3QgcHJpbnQgdG8gdmlzaWJsZSByb3dzIG9ubHlcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJwcmludENvbmZpZ1wiLCB7fSk7IC8vcHJpbnQgY29uZmlnIG9wdGlvbnNcblxuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJwcmludFwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwidGl0bGVQcmludFwiKTtcblx0fVxuXG5cdGluaXRpYWxpemUoKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucHJpbnRBc0h0bWwpe1xuXHRcdFx0dGhpcy5iZWZvcmVwcmludEV2ZW50SGFuZGxlciA9IHRoaXMucmVwbGFjZVRhYmxlLmJpbmQodGhpcyk7XG5cdFx0XHR0aGlzLmFmdGVycHJpbnRFdmVudEhhbmRsZXIgPSB0aGlzLmNsZWFudXAuYmluZCh0aGlzKTtcblxuXHRcdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmVwcmludFwiLCB0aGlzLmJlZm9yZXByaW50RXZlbnRIYW5kbGVyICk7XG5cdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImFmdGVycHJpbnRcIiwgdGhpcy5hZnRlcnByaW50RXZlbnRIYW5kbGVyKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwidGFibGUtZGVzdHJveVwiLCB0aGlzLmRlc3Ryb3kuYmluZCh0aGlzKSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJwcmludFwiLCB0aGlzLnByaW50RnVsbHNjcmVlbi5iaW5kKHRoaXMpKTtcblx0fVxuXG5cdGRlc3Ryb3koKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucHJpbnRBc0h0bWwpe1xuXHRcdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiYmVmb3JlcHJpbnRcIiwgdGhpcy5iZWZvcmVwcmludEV2ZW50SGFuZGxlciApO1xuXHRcdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiYWZ0ZXJwcmludFwiLCB0aGlzLmFmdGVycHJpbnRFdmVudEhhbmRsZXIgKTtcblx0XHR9XG5cdH1cblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8gVGFibGUgRnVuY3Rpb25zIC8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLyBJbnRlcm5hbCBMb2dpYyAvLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0cmVwbGFjZVRhYmxlKCl7XG5cdFx0aWYoIXRoaXMubWFudWFsQmxvY2spe1xuXHRcdFx0dGhpcy5lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcdHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXByaW50LXRhYmxlXCIpO1xuXG5cdFx0XHR0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy50YWJsZS5tb2R1bGVzLmV4cG9ydC5nZW5lcmF0ZVRhYmxlKHRoaXMudGFibGUub3B0aW9ucy5wcmludENvbmZpZywgdGhpcy50YWJsZS5vcHRpb25zLnByaW50U3R5bGVkLCB0aGlzLnRhYmxlLm9wdGlvbnMucHJpbnRSb3dSYW5nZSwgXCJwcmludFwiKSk7XG5cblx0XHRcdHRoaXMudGFibGUuZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG5cblx0XHRcdHRoaXMudGFibGUuZWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLmVsZW1lbnQsIHRoaXMudGFibGUuZWxlbWVudCk7XG5cdFx0fVxuXHR9XG5cblx0Y2xlYW51cCgpe1xuXHRcdGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShcInRhYnVsYXRvci1wcmludC1mdWxsc2NyZWVuLWhpZGVcIik7XG5cblx0XHRpZih0aGlzLmVsZW1lbnQgJiYgdGhpcy5lbGVtZW50LnBhcmVudE5vZGUpe1xuXHRcdFx0dGhpcy5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50KTtcblx0XHRcdHRoaXMudGFibGUuZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHR9XG5cdH1cblxuXHRwcmludEZ1bGxzY3JlZW4odmlzaWJsZSwgc3R5bGUsIGNvbmZpZyl7XG5cdFx0dmFyIHNjcm9sbFggPSB3aW5kb3cuc2Nyb2xsWCxcblx0XHRzY3JvbGxZID0gd2luZG93LnNjcm9sbFksXG5cdFx0aGVhZGVyRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFxuXHRcdGZvb3RlckVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxcblx0XHR0YWJsZUVsID0gdGhpcy50YWJsZS5tb2R1bGVzLmV4cG9ydC5nZW5lcmF0ZVRhYmxlKHR5cGVvZiBjb25maWcgIT0gXCJ1bmRlZmluZWRcIiA/IGNvbmZpZyA6IHRoaXMudGFibGUub3B0aW9ucy5wcmludENvbmZpZywgdHlwZW9mIHN0eWxlICE9IFwidW5kZWZpbmVkXCIgPyBzdHlsZSA6IHRoaXMudGFibGUub3B0aW9ucy5wcmludFN0eWxlZCwgdmlzaWJsZSB8fCB0aGlzLnRhYmxlLm9wdGlvbnMucHJpbnRSb3dSYW5nZSwgXCJwcmludFwiKSxcblx0XHRoZWFkZXJDb250ZW50LCBmb290ZXJDb250ZW50O1xuXG5cdFx0dGhpcy5tYW51YWxCbG9jayA9IHRydWU7XG5cblx0XHR0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXByaW50LWZ1bGxzY3JlZW5cIik7XG5cblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucHJpbnRIZWFkZXIpe1xuXHRcdFx0aGVhZGVyRWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1wcmludC1oZWFkZXJcIik7XG5cblx0XHRcdGhlYWRlckNvbnRlbnQgPSB0eXBlb2YgdGhpcy50YWJsZS5vcHRpb25zLnByaW50SGVhZGVyID09IFwiZnVuY3Rpb25cIiA/IHRoaXMudGFibGUub3B0aW9ucy5wcmludEhlYWRlci5jYWxsKHRoaXMudGFibGUpIDogdGhpcy50YWJsZS5vcHRpb25zLnByaW50SGVhZGVyO1xuXG5cdFx0XHRpZih0eXBlb2YgaGVhZGVyQ29udGVudCA9PSBcInN0cmluZ1wiKXtcblx0XHRcdFx0aGVhZGVyRWwuaW5uZXJIVE1MID0gaGVhZGVyQ29udGVudDtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aGVhZGVyRWwuYXBwZW5kQ2hpbGQoaGVhZGVyQ29udGVudCk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZChoZWFkZXJFbCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHRhYmxlRWwpO1xuXG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnByaW50Rm9vdGVyKXtcblx0XHRcdGZvb3RlckVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItcHJpbnQtZm9vdGVyXCIpO1xuXG5cdFx0XHRmb290ZXJDb250ZW50ID0gdHlwZW9mIHRoaXMudGFibGUub3B0aW9ucy5wcmludEZvb3RlciA9PSBcImZ1bmN0aW9uXCIgPyB0aGlzLnRhYmxlLm9wdGlvbnMucHJpbnRGb290ZXIuY2FsbCh0aGlzLnRhYmxlKSA6IHRoaXMudGFibGUub3B0aW9ucy5wcmludEZvb3RlcjtcblxuXG5cdFx0XHRpZih0eXBlb2YgZm9vdGVyQ29udGVudCA9PSBcInN0cmluZ1wiKXtcblx0XHRcdFx0Zm9vdGVyRWwuaW5uZXJIVE1MID0gZm9vdGVyQ29udGVudDtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0Zm9vdGVyRWwuYXBwZW5kQ2hpbGQoZm9vdGVyQ29udGVudCk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZChmb290ZXJFbCk7XG5cdFx0fVxuXG5cdFx0ZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXByaW50LWZ1bGxzY3JlZW4taGlkZVwiKTtcblx0XHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudCk7XG5cblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucHJpbnRGb3JtYXR0ZXIpe1xuXHRcdFx0dGhpcy50YWJsZS5vcHRpb25zLnByaW50Rm9ybWF0dGVyKHRoaXMuZWxlbWVudCwgdGFibGVFbCk7XG5cdFx0fVxuXG5cdFx0d2luZG93LnByaW50KCk7XG5cblx0XHR0aGlzLmNsZWFudXAoKTtcblxuXHRcdHdpbmRvdy5zY3JvbGxUbyhzY3JvbGxYLCBzY3JvbGxZKTtcblxuXHRcdHRoaXMubWFudWFsQmxvY2sgPSBmYWxzZTtcblx0fVxufVxuXG5QcmludC5tb2R1bGVOYW1lID0gXCJwcmludFwiO1xuXG5jbGFzcyBSZWFjdGl2ZURhdGEgZXh0ZW5kcyBNb2R1bGV7XG5cdFxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXHRcdFxuXHRcdHRoaXMuZGF0YSA9IGZhbHNlO1xuXHRcdHRoaXMuYmxvY2tlZCA9IGZhbHNlOyAvL2Jsb2NrIHJlYWN0aXZpdHkgd2hpbGUgcGVyZm9ybWluZyB1cGRhdGVcblx0XHR0aGlzLm9yaWdGdW5jcyA9IHt9OyAvLyBob2xkIG9yaWdpbmFsIGRhdGEgYXJyYXkgZnVuY3Rpb25zIHRvIGFsbG93IHJlcGxhY2VtZW50IGFmdGVyIGRhdGEgaXMgZG9uZSB3aXRoXG5cdFx0dGhpcy5jdXJyZW50VmVyc2lvbiA9IDA7XG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicmVhY3RpdmVEYXRhXCIsIGZhbHNlKTsgLy9lbmFibGUgZGF0YSByZWFjdGl2aXR5XG5cdH1cblx0XG5cdGluaXRpYWxpemUoKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucmVhY3RpdmVEYXRhKXtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY2VsbC12YWx1ZS1zYXZlLWJlZm9yZVwiLCB0aGlzLmJsb2NrLmJpbmQodGhpcywgXCJjZWxsc2F2ZVwiKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNlbGwtdmFsdWUtc2F2ZS1hZnRlclwiLCB0aGlzLnVuYmxvY2suYmluZCh0aGlzLCBcImNlbGxzYXZlXCIpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWRhdGEtc2F2ZS1iZWZvcmVcIiwgdGhpcy5ibG9jay5iaW5kKHRoaXMsIFwicm93c2F2ZVwiKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1kYXRhLXNhdmUtYWZ0ZXJcIiwgdGhpcy51bmJsb2NrLmJpbmQodGhpcywgXCJyb3dzYXZlXCIpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWRhdGEtaW5pdC1hZnRlclwiLCB0aGlzLndhdGNoUm93LmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJkYXRhLXByb2Nlc3NpbmdcIiwgdGhpcy53YXRjaERhdGEuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInRhYmxlLWRlc3Ryb3lcIiwgdGhpcy51bndhdGNoRGF0YS5iaW5kKHRoaXMpKTtcblx0XHR9XG5cdH1cblx0XG5cdHdhdGNoRGF0YShkYXRhKXtcblx0XHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0dmVyc2lvbjtcblx0XHRcblx0XHR0aGlzLmN1cnJlbnRWZXJzaW9uICsrO1xuXHRcdFxuXHRcdHZlcnNpb24gPSB0aGlzLmN1cnJlbnRWZXJzaW9uO1xuXHRcdFxuXHRcdHRoaXMudW53YXRjaERhdGEoKTtcblx0XHRcblx0XHR0aGlzLmRhdGEgPSBkYXRhO1xuXHRcdFxuXHRcdC8vb3ZlcnJpZGUgYXJyYXkgcHVzaCBmdW5jdGlvblxuXHRcdHRoaXMub3JpZ0Z1bmNzLnB1c2ggPSBkYXRhLnB1c2g7XG5cdFx0XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMuZGF0YSwgXCJwdXNoXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uKCl7XG5cdFx0XHRcdHZhciBhcmdzID0gQXJyYXkuZnJvbShhcmd1bWVudHMpLFxuXHRcdFx0XHRyZXN1bHQ7XG5cblx0XHRcdFx0aWYoIXNlbGYuYmxvY2tlZCAmJiB2ZXJzaW9uID09PSBzZWxmLmN1cnJlbnRWZXJzaW9uKXtcdFxuXHRcdFx0XHRcdHNlbGYuYmxvY2soXCJkYXRhLXB1c2hcIik7XG5cblx0XHRcdFx0XHRhcmdzLmZvckVhY2goKGFyZykgPT4ge1xuXHRcdFx0XHRcdFx0c2VsZi50YWJsZS5yb3dNYW5hZ2VyLmFkZFJvd0FjdHVhbChhcmcsIGZhbHNlKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRyZXN1bHQgPSBzZWxmLm9yaWdGdW5jcy5wdXNoLmFwcGx5KGRhdGEsIGFyZ3VtZW50cyk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0c2VsZi51bmJsb2NrKFwiZGF0YS1wdXNoXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdC8vb3ZlcnJpZGUgYXJyYXkgdW5zaGlmdCBmdW5jdGlvblxuXHRcdHRoaXMub3JpZ0Z1bmNzLnVuc2hpZnQgPSBkYXRhLnVuc2hpZnQ7XG5cdFx0XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMuZGF0YSwgXCJ1bnNoaWZ0XCIsIHtcblx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uKCl7XG5cdFx0XHRcdHZhciBhcmdzID0gQXJyYXkuZnJvbShhcmd1bWVudHMpLFxuXHRcdFx0XHRyZXN1bHQ7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZighc2VsZi5ibG9ja2VkICYmIHZlcnNpb24gPT09IHNlbGYuY3VycmVudFZlcnNpb24pe1xuXHRcdFx0XHRcdHNlbGYuYmxvY2soXCJkYXRhLXVuc2hpZnRcIik7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0YXJncy5mb3JFYWNoKChhcmcpID0+IHtcblx0XHRcdFx0XHRcdHNlbGYudGFibGUucm93TWFuYWdlci5hZGRSb3dBY3R1YWwoYXJnLCB0cnVlKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRyZXN1bHQgPSBzZWxmLm9yaWdGdW5jcy51bnNoaWZ0LmFwcGx5KGRhdGEsIGFyZ3VtZW50cyk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0c2VsZi51bmJsb2NrKFwiZGF0YS11bnNoaWZ0XCIpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdFxuXHRcdC8vb3ZlcnJpZGUgYXJyYXkgc2hpZnQgZnVuY3Rpb25cblx0XHR0aGlzLm9yaWdGdW5jcy5zaGlmdCA9IGRhdGEuc2hpZnQ7XG5cdFx0XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMuZGF0YSwgXCJzaGlmdFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdHZhbHVlOiBmdW5jdGlvbigpe1xuXHRcdFx0XHR2YXIgcm93LCByZXN1bHQ7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZighc2VsZi5ibG9ja2VkICYmIHZlcnNpb24gPT09IHNlbGYuY3VycmVudFZlcnNpb24pe1xuXHRcdFx0XHRcdHNlbGYuYmxvY2soXCJkYXRhLXNoaWZ0XCIpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKHNlbGYuZGF0YS5sZW5ndGgpe1xuXHRcdFx0XHRcdFx0cm93ID0gc2VsZi50YWJsZS5yb3dNYW5hZ2VyLmdldFJvd0Zyb21EYXRhT2JqZWN0KHNlbGYuZGF0YVswXSk7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGlmKHJvdyl7XG5cdFx0XHRcdFx0XHRcdHJvdy5kZWxldGVBY3R1YWwoKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXN1bHQgPSBzZWxmLm9yaWdGdW5jcy5zaGlmdC5jYWxsKGRhdGEpO1xuXG5cdFx0XHRcdFx0c2VsZi51bmJsb2NrKFwiZGF0YS1zaGlmdFwiKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0XHQvL292ZXJyaWRlIGFycmF5IHBvcCBmdW5jdGlvblxuXHRcdHRoaXMub3JpZ0Z1bmNzLnBvcCA9IGRhdGEucG9wO1xuXHRcdFxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLmRhdGEsIFwicG9wXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uKCl7XG5cdFx0XHRcdHZhciByb3csIHJlc3VsdDtcblx0XHRcdFxuXHRcdFx0XHRpZighc2VsZi5ibG9ja2VkICYmIHZlcnNpb24gPT09IHNlbGYuY3VycmVudFZlcnNpb24pe1xuXHRcdFx0XHRcdHNlbGYuYmxvY2soXCJkYXRhLXBvcFwiKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZihzZWxmLmRhdGEubGVuZ3RoKXtcblx0XHRcdFx0XHRcdHJvdyA9IHNlbGYudGFibGUucm93TWFuYWdlci5nZXRSb3dGcm9tRGF0YU9iamVjdChzZWxmLmRhdGFbc2VsZi5kYXRhLmxlbmd0aCAtIDFdKTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0aWYocm93KXtcblx0XHRcdFx0XHRcdFx0cm93LmRlbGV0ZUFjdHVhbCgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJlc3VsdCA9IHNlbGYub3JpZ0Z1bmNzLnBvcC5jYWxsKGRhdGEpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHNlbGYudW5ibG9jayhcImRhdGEtcG9wXCIpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0XHRcblx0XHQvL292ZXJyaWRlIGFycmF5IHNwbGljZSBmdW5jdGlvblxuXHRcdHRoaXMub3JpZ0Z1bmNzLnNwbGljZSA9IGRhdGEuc3BsaWNlO1xuXHRcdFxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLmRhdGEsIFwic3BsaWNlXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uKCl7XG5cdFx0XHRcdHZhciBhcmdzID0gQXJyYXkuZnJvbShhcmd1bWVudHMpLFxuXHRcdFx0XHRzdGFydCA9IGFyZ3NbMF0gPCAwID8gZGF0YS5sZW5ndGggKyBhcmdzWzBdIDogYXJnc1swXSxcblx0XHRcdFx0ZW5kID0gYXJnc1sxXSxcblx0XHRcdFx0bmV3Um93cyA9IGFyZ3NbMl0gPyBhcmdzLnNsaWNlKDIpIDogZmFsc2UsXG5cdFx0XHRcdHN0YXJ0Um93LCByZXN1bHQ7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZighc2VsZi5ibG9ja2VkICYmIHZlcnNpb24gPT09IHNlbGYuY3VycmVudFZlcnNpb24pe1xuXHRcdFx0XHRcdHNlbGYuYmxvY2soXCJkYXRhLXNwbGljZVwiKTtcblx0XHRcdFx0XHQvL2FkZCBuZXcgcm93c1xuXHRcdFx0XHRcdGlmKG5ld1Jvd3Mpe1xuXHRcdFx0XHRcdFx0c3RhcnRSb3cgPSBkYXRhW3N0YXJ0XSA/IHNlbGYudGFibGUucm93TWFuYWdlci5nZXRSb3dGcm9tRGF0YU9iamVjdChkYXRhW3N0YXJ0XSkgOiBmYWxzZTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0aWYoc3RhcnRSb3cpe1xuXHRcdFx0XHRcdFx0XHRuZXdSb3dzLmZvckVhY2goKHJvd0RhdGEpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRzZWxmLnRhYmxlLnJvd01hbmFnZXIuYWRkUm93QWN0dWFsKHJvd0RhdGEsIHRydWUsIHN0YXJ0Um93LCB0cnVlKTtcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRcdG5ld1Jvd3MgPSBuZXdSb3dzLnNsaWNlKCkucmV2ZXJzZSgpO1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0bmV3Um93cy5mb3JFYWNoKChyb3dEYXRhKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0c2VsZi50YWJsZS5yb3dNYW5hZ2VyLmFkZFJvd0FjdHVhbChyb3dEYXRhLCB0cnVlLCBmYWxzZSwgdHJ1ZSk7XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHQvL2RlbGV0ZSByZW1vdmVkIHJvd3Ncblx0XHRcdFx0XHRpZihlbmQgIT09IDApe1xuXHRcdFx0XHRcdFx0dmFyIG9sZFJvd3MgPSBkYXRhLnNsaWNlKHN0YXJ0LCB0eXBlb2YgYXJnc1sxXSA9PT0gXCJ1bmRlZmluZWRcIiA/IGFyZ3NbMV0gOiBzdGFydCArIGVuZCk7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdG9sZFJvd3MuZm9yRWFjaCgocm93RGF0YSwgaSkgPT4ge1xuXHRcdFx0XHRcdFx0XHR2YXIgcm93ID0gc2VsZi50YWJsZS5yb3dNYW5hZ2VyLmdldFJvd0Zyb21EYXRhT2JqZWN0KHJvd0RhdGEpO1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0aWYocm93KXtcblx0XHRcdFx0XHRcdFx0XHRyb3cuZGVsZXRlQWN0dWFsKGkgIT09IG9sZFJvd3MubGVuZ3RoIC0gMSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZihuZXdSb3dzIHx8IGVuZCAhPT0gMCl7XG5cdFx0XHRcdFx0XHRzZWxmLnRhYmxlLnJvd01hbmFnZXIucmVSZW5kZXJJblBvc2l0aW9uKCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmVzdWx0ID0gc2VsZi5vcmlnRnVuY3Muc3BsaWNlLmFwcGx5KGRhdGEsIGFyZ3VtZW50cyk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0c2VsZi51bmJsb2NrKFwiZGF0YS1zcGxpY2VcIik7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdHJldHVybiByZXN1bHQgO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cdFxuXHR1bndhdGNoRGF0YSgpe1xuXHRcdGlmKHRoaXMuZGF0YSAhPT0gZmFsc2Upe1xuXHRcdFx0Zm9yKHZhciBrZXkgaW4gdGhpcy5vcmlnRnVuY3Mpe1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5kYXRhLCBrZXksIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTp0cnVlLFxuXHRcdFx0XHRcdHdyaXRhYmxlOnRydWUsXG5cdFx0XHRcdFx0dmFsdWU6IHRoaXMub3JpZ0Z1bmNzLmtleSxcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHR3YXRjaFJvdyhyb3cpe1xuXHRcdHZhciBkYXRhID0gcm93LmdldERhdGEoKTtcblx0XHRcblx0XHRmb3IodmFyIGtleSBpbiBkYXRhKXtcblx0XHRcdHRoaXMud2F0Y2hLZXkocm93LCBkYXRhLCBrZXkpO1xuXHRcdH1cblx0XHRcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZGF0YVRyZWUpe1xuXHRcdFx0dGhpcy53YXRjaFRyZWVDaGlsZHJlbihyb3cpO1xuXHRcdH1cblx0fVxuXHRcblx0d2F0Y2hUcmVlQ2hpbGRyZW4gKHJvdyl7XG5cdFx0dmFyIHNlbGYgPSB0aGlzLFxuXHRcdGNoaWxkRmllbGQgPSByb3cuZ2V0RGF0YSgpW3RoaXMudGFibGUub3B0aW9ucy5kYXRhVHJlZUNoaWxkRmllbGRdLFxuXHRcdG9yaWdGdW5jcyA9IHt9O1xuXHRcdFxuXHRcdGlmKGNoaWxkRmllbGQpe1xuXHRcdFx0XG5cdFx0XHRvcmlnRnVuY3MucHVzaCA9IGNoaWxkRmllbGQucHVzaDtcblx0XHRcdFxuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGNoaWxkRmllbGQsIFwicHVzaFwiLCB7XG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiAoKSA9PiB7XG5cdFx0XHRcdFx0aWYoIXNlbGYuYmxvY2tlZCl7XG5cdFx0XHRcdFx0XHRzZWxmLmJsb2NrKFwidHJlZS1wdXNoXCIpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHR2YXIgcmVzdWx0ID0gb3JpZ0Z1bmNzLnB1c2guYXBwbHkoY2hpbGRGaWVsZCwgYXJndW1lbnRzKTtcblx0XHRcdFx0XHRcdHRoaXMucmVidWlsZFRyZWUocm93KTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0c2VsZi51bmJsb2NrKFwidHJlZS1wdXNoXCIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0b3JpZ0Z1bmNzLnVuc2hpZnQgPSBjaGlsZEZpZWxkLnVuc2hpZnQ7XG5cdFx0XHRcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjaGlsZEZpZWxkLCBcInVuc2hpZnRcIiwge1xuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogKCkgPT4ge1xuXHRcdFx0XHRcdGlmKCFzZWxmLmJsb2NrZWQpe1xuXHRcdFx0XHRcdFx0c2VsZi5ibG9jayhcInRyZWUtdW5zaGlmdFwiKTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0dmFyIHJlc3VsdCA9ICBvcmlnRnVuY3MudW5zaGlmdC5hcHBseShjaGlsZEZpZWxkLCBhcmd1bWVudHMpO1xuXHRcdFx0XHRcdFx0dGhpcy5yZWJ1aWxkVHJlZShyb3cpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRzZWxmLnVuYmxvY2soXCJ0cmVlLXVuc2hpZnRcIik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHRvcmlnRnVuY3Muc2hpZnQgPSBjaGlsZEZpZWxkLnNoaWZ0O1xuXHRcdFx0XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoY2hpbGRGaWVsZCwgXCJzaGlmdFwiLCB7XG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiAoKSA9PiB7XG5cdFx0XHRcdFx0aWYoIXNlbGYuYmxvY2tlZCl7XG5cdFx0XHRcdFx0XHRzZWxmLmJsb2NrKFwidHJlZS1zaGlmdFwiKTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0dmFyIHJlc3VsdCA9ICBvcmlnRnVuY3Muc2hpZnQuY2FsbChjaGlsZEZpZWxkKTtcblx0XHRcdFx0XHRcdHRoaXMucmVidWlsZFRyZWUocm93KTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0c2VsZi51bmJsb2NrKFwidHJlZS1zaGlmdFwiKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdG9yaWdGdW5jcy5wb3AgPSBjaGlsZEZpZWxkLnBvcDtcblx0XHRcdFxuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGNoaWxkRmllbGQsIFwicG9wXCIsIHtcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6ICgpID0+IHtcblx0XHRcdFx0XHRpZighc2VsZi5ibG9ja2VkKXtcblx0XHRcdFx0XHRcdHNlbGYuYmxvY2soXCJ0cmVlLXBvcFwiKTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0dmFyIHJlc3VsdCA9ICBvcmlnRnVuY3MucG9wLmNhbGwoY2hpbGRGaWVsZCk7XG5cdFx0XHRcdFx0XHR0aGlzLnJlYnVpbGRUcmVlKHJvdyk7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdHNlbGYudW5ibG9jayhcInRyZWUtcG9wXCIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0b3JpZ0Z1bmNzLnNwbGljZSA9IGNoaWxkRmllbGQuc3BsaWNlO1xuXHRcdFx0XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoY2hpbGRGaWVsZCwgXCJzcGxpY2VcIiwge1xuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogKCkgPT4ge1xuXHRcdFx0XHRcdGlmKCFzZWxmLmJsb2NrZWQpe1xuXHRcdFx0XHRcdFx0c2VsZi5ibG9jayhcInRyZWUtc3BsaWNlXCIpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHR2YXIgcmVzdWx0ID0gIG9yaWdGdW5jcy5zcGxpY2UuYXBwbHkoY2hpbGRGaWVsZCwgYXJndW1lbnRzKTtcblx0XHRcdFx0XHRcdHRoaXMucmVidWlsZFRyZWUocm93KTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0c2VsZi51bmJsb2NrKFwidHJlZS1zcGxpY2VcIik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXHRcblx0cmVidWlsZFRyZWUocm93KXtcblx0XHR0aGlzLnRhYmxlLm1vZHVsZXMuZGF0YVRyZWUuaW5pdGlhbGl6ZVJvdyhyb3cpO1xuXHRcdHRoaXMudGFibGUubW9kdWxlcy5kYXRhVHJlZS5sYXlvdXRSb3cocm93KTtcblx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIucmVmcmVzaEFjdGl2ZURhdGEoXCJ0cmVlXCIsIGZhbHNlLCB0cnVlKTtcblx0fVxuXHRcblx0d2F0Y2hLZXkocm93LCBkYXRhLCBrZXkpe1xuXHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHRwcm9wcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZGF0YSwga2V5KSxcblx0XHR2YWx1ZSA9IGRhdGFba2V5XSxcblx0XHR2ZXJzaW9uID0gdGhpcy5jdXJyZW50VmVyc2lvbjtcblx0XHRcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZGF0YSwga2V5LCB7XG5cdFx0XHRzZXQ6IChuZXdWYWx1ZSkgPT4ge1xuXHRcdFx0XHR2YWx1ZSA9IG5ld1ZhbHVlO1xuXHRcdFx0XHRpZighc2VsZi5ibG9ja2VkICYmIHZlcnNpb24gPT09IHNlbGYuY3VycmVudFZlcnNpb24pe1xuXHRcdFx0XHRcdHNlbGYuYmxvY2soXCJrZXlcIik7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0dmFyIHVwZGF0ZSA9IHt9O1xuXHRcdFx0XHRcdHVwZGF0ZVtrZXldID0gbmV3VmFsdWU7XG5cdFx0XHRcdFx0cm93LnVwZGF0ZURhdGEodXBkYXRlKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRzZWxmLnVuYmxvY2soXCJrZXlcIik7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGlmKHByb3BzLnNldCl7XG5cdFx0XHRcdFx0cHJvcHMuc2V0KG5ld1ZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGdldDooKSA9PiB7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihwcm9wcy5nZXQpe1xuXHRcdFx0XHRcdHByb3BzLmdldCgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0XG5cdHVud2F0Y2hSb3cocm93KXtcblx0XHR2YXIgZGF0YSA9IHJvdy5nZXREYXRhKCk7XG5cdFx0XG5cdFx0Zm9yKHZhciBrZXkgaW4gZGF0YSl7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZGF0YSwga2V5LCB7XG5cdFx0XHRcdHZhbHVlOmRhdGFba2V5XSxcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXHRcblx0YmxvY2soa2V5KXtcblx0XHRpZighdGhpcy5ibG9ja2VkKXtcblx0XHRcdHRoaXMuYmxvY2tlZCA9IGtleTtcblx0XHR9XG5cdH1cblx0XG5cdHVuYmxvY2soa2V5KXtcblx0XHRpZih0aGlzLmJsb2NrZWQgPT09IGtleSl7XG5cdFx0XHR0aGlzLmJsb2NrZWQgPSBmYWxzZTtcblx0XHR9XG5cdH1cbn1cblxuUmVhY3RpdmVEYXRhLm1vZHVsZU5hbWUgPSBcInJlYWN0aXZlRGF0YVwiO1xuXG5jbGFzcyBSZXNpemVDb2x1bW5zIGV4dGVuZHMgTW9kdWxle1xuXHRcblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblx0XHRcblx0XHR0aGlzLnN0YXJ0Q29sdW1uID0gZmFsc2U7XG5cdFx0dGhpcy5zdGFydFggPSBmYWxzZTtcblx0XHR0aGlzLnN0YXJ0V2lkdGggPSBmYWxzZTtcblx0XHR0aGlzLmxhdGVzdFggPSBmYWxzZTtcblx0XHR0aGlzLmhhbmRsZSA9IG51bGw7XG5cdFx0dGhpcy5pbml0aWFsTmV4dENvbHVtbiA9IG51bGw7XG5cdFx0dGhpcy5uZXh0Q29sdW1uID0gbnVsbDtcblx0XHRcblx0XHR0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcInJlc2l6YWJsZVwiLCB0cnVlKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJyZXNpemFibGVDb2x1bW5GaXRcIiwgZmFsc2UpO1xuXHR9XG5cdFxuXHRpbml0aWFsaXplKCl7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tcmVuZGVyZWRcIiwgdGhpcy5sYXlvdXRDb2x1bW5IZWFkZXIuYmluZCh0aGlzKSk7XG5cdH1cblx0XG5cdGluaXRpYWxpemVFdmVudFdhdGNoZXJzKCl7XG5cdFx0aWYoIXRoaXMuaW5pdGlhbGl6ZWQpe1xuXHRcdFx0XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNlbGwtcmVuZGVyZWRcIiwgdGhpcy5sYXlvdXRDZWxsSGFuZGxlcy5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY2VsbC1kZWxldGVcIiwgdGhpcy5kZUluaXRpYWxpemVDb21wb25lbnQuYmluZCh0aGlzKSk7XG5cdFx0XHRcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY2VsbC1oZWlnaHRcIiwgdGhpcy5yZXNpemVIYW5kbGUuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1tb3ZlZFwiLCB0aGlzLmNvbHVtbkxheW91dFVwZGF0ZWQuYmluZCh0aGlzKSk7XG5cdFx0XHRcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWhpZGVcIiwgdGhpcy5kZUluaXRpYWxpemVDb2x1bW4uYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1zaG93XCIsIHRoaXMuY29sdW1uTGF5b3V0VXBkYXRlZC5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLXdpZHRoXCIsIHRoaXMuY29sdW1uV2lkdGhVcGRhdGVkLmJpbmQodGhpcykpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1kZWxldGVcIiwgdGhpcy5kZUluaXRpYWxpemVDb21wb25lbnQuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1oZWlnaHRcIiwgdGhpcy5yZXNpemVIYW5kbGUuYmluZCh0aGlzKSk7XG5cdFx0XHRcblx0XHRcdHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuXHRcdH1cblx0fVxuXHRcblx0XG5cdGxheW91dENlbGxIYW5kbGVzKGNlbGwpe1xuXHRcdGlmKGNlbGwucm93LnR5cGUgPT09IFwicm93XCIpe1xuXHRcdFx0dGhpcy5kZUluaXRpYWxpemVDb21wb25lbnQoY2VsbCk7XG5cdFx0XHR0aGlzLmluaXRpYWxpemVDb2x1bW4oXCJjZWxsXCIsIGNlbGwsIGNlbGwuY29sdW1uLCBjZWxsLmVsZW1lbnQpO1xuXHRcdH1cblx0fVxuXHRcblx0bGF5b3V0Q29sdW1uSGVhZGVyKGNvbHVtbil7XG5cdFx0aWYoY29sdW1uLmRlZmluaXRpb24ucmVzaXphYmxlKXtcblx0XHRcdHRoaXMuaW5pdGlhbGl6ZUV2ZW50V2F0Y2hlcnMoKTtcblx0XHRcdHRoaXMuZGVJbml0aWFsaXplQ29tcG9uZW50KGNvbHVtbik7XG5cdFx0XHR0aGlzLmluaXRpYWxpemVDb2x1bW4oXCJoZWFkZXJcIiwgY29sdW1uLCBjb2x1bW4sIGNvbHVtbi5lbGVtZW50KTtcblx0XHR9XG5cdH1cblx0XG5cdGNvbHVtbkxheW91dFVwZGF0ZWQoY29sdW1uKXtcblx0XHR2YXIgcHJldiA9IGNvbHVtbi5wcmV2Q29sdW1uKCk7XG5cdFx0XG5cdFx0dGhpcy5yZWluaXRpYWxpemVDb2x1bW4oY29sdW1uKTtcblx0XHRcblx0XHRpZihwcmV2KXtcblx0XHRcdHRoaXMucmVpbml0aWFsaXplQ29sdW1uKHByZXYpO1xuXHRcdH1cblx0fVxuXHRcblx0Y29sdW1uV2lkdGhVcGRhdGVkKGNvbHVtbil7XG5cdFx0aWYoY29sdW1uLm1vZHVsZXMuZnJvemVuKXtcblx0XHRcdGlmKHRoaXMudGFibGUubW9kdWxlcy5mcm96ZW5Db2x1bW5zLmxlZnRDb2x1bW5zLmluY2x1ZGVzKGNvbHVtbikpe1xuXHRcdFx0XHR0aGlzLnRhYmxlLm1vZHVsZXMuZnJvemVuQ29sdW1ucy5sZWZ0Q29sdW1ucy5mb3JFYWNoKChjb2wpID0+IHtcblx0XHRcdFx0XHR0aGlzLnJlaW5pdGlhbGl6ZUNvbHVtbihjb2wpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1lbHNlIGlmKHRoaXMudGFibGUubW9kdWxlcy5mcm96ZW5Db2x1bW5zLnJpZ2h0Q29sdW1ucy5pbmNsdWRlcyhjb2x1bW4pKXtcblx0XHRcdFx0dGhpcy50YWJsZS5tb2R1bGVzLmZyb3plbkNvbHVtbnMucmlnaHRDb2x1bW5zLmZvckVhY2goKGNvbCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMucmVpbml0aWFsaXplQ29sdW1uKGNvbCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGZyb3plbkNvbHVtbk9mZnNldChjb2x1bW4pe1xuXHRcdHZhciBvZmZzZXQgPSBmYWxzZTtcblxuXHRcdGlmKGNvbHVtbi5tb2R1bGVzLmZyb3plbil7XG5cdFx0XHRvZmZzZXQgPSBjb2x1bW4ubW9kdWxlcy5mcm96ZW4ubWFyZ2luVmFsdWU7IFxuXG5cdFx0XHRpZihjb2x1bW4ubW9kdWxlcy5mcm96ZW4ucG9zaXRpb24gPT09IFwibGVmdFwiKXtcblx0XHRcdFx0b2Zmc2V0ICs9IGNvbHVtbi5nZXRXaWR0aCgpIC0gMztcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aWYob2Zmc2V0KXtcblx0XHRcdFx0XHRvZmZzZXQgLT0gMztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvZmZzZXQgIT09IGZhbHNlID8gb2Zmc2V0ICsgXCJweFwiIDogZmFsc2U7XG5cdH1cblx0XG5cdHJlaW5pdGlhbGl6ZUNvbHVtbihjb2x1bW4pe1xuXHRcdHZhciBmcm96ZW5PZmZzZXQgPSB0aGlzLmZyb3plbkNvbHVtbk9mZnNldChjb2x1bW4pO1xuXHRcdFxuXHRcdGNvbHVtbi5jZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG5cdFx0XHRpZihjZWxsLm1vZHVsZXMucmVzaXplICYmIGNlbGwubW9kdWxlcy5yZXNpemUuaGFuZGxlRWwpe1xuXHRcdFx0XHRpZihmcm96ZW5PZmZzZXQpe1xuXHRcdFx0XHRcdGNlbGwubW9kdWxlcy5yZXNpemUuaGFuZGxlRWwuc3R5bGVbY29sdW1uLm1vZHVsZXMuZnJvemVuLnBvc2l0aW9uXSA9IGZyb3plbk9mZnNldDtcblx0XHRcdFx0XHRjZWxsLm1vZHVsZXMucmVzaXplLmhhbmRsZUVsLnN0eWxlW1wiei1pbmRleFwiXSA9IDExO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRjZWxsLmVsZW1lbnQuYWZ0ZXIoY2VsbC5tb2R1bGVzLnJlc2l6ZS5oYW5kbGVFbCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0aWYoY29sdW1uLm1vZHVsZXMucmVzaXplICYmIGNvbHVtbi5tb2R1bGVzLnJlc2l6ZS5oYW5kbGVFbCl7XG5cdFx0XHRpZihmcm96ZW5PZmZzZXQpe1xuXHRcdFx0XHRjb2x1bW4ubW9kdWxlcy5yZXNpemUuaGFuZGxlRWwuc3R5bGVbY29sdW1uLm1vZHVsZXMuZnJvemVuLnBvc2l0aW9uXSA9IGZyb3plbk9mZnNldDtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Y29sdW1uLmVsZW1lbnQuYWZ0ZXIoY29sdW1uLm1vZHVsZXMucmVzaXplLmhhbmRsZUVsKTtcblx0XHR9XG5cdH1cblx0XG5cdGluaXRpYWxpemVDb2x1bW4odHlwZSwgY29tcG9uZW50LCBjb2x1bW4sIGVsZW1lbnQpe1xuXHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHR2YXJpYWJsZUhlaWdodCA9IGZhbHNlLFxuXHRcdG1vZGUgPSBjb2x1bW4uZGVmaW5pdGlvbi5yZXNpemFibGUsXG5cdFx0Y29uZmlnID0ge30sXG5cdFx0bmVhcmVzdENvbHVtbiA9IGNvbHVtbi5nZXRMYXN0Q29sdW1uKCk7XG5cdFx0XG5cdFx0Ly9zZXQgY29sdW1uIHJlc2l6ZSBtb2RlXG5cdFx0aWYodHlwZSA9PT0gXCJoZWFkZXJcIil7XG5cdFx0XHR2YXJpYWJsZUhlaWdodCA9IGNvbHVtbi5kZWZpbml0aW9uLmZvcm1hdHRlciA9PSBcInRleHRhcmVhXCIgfHwgY29sdW1uLmRlZmluaXRpb24udmFyaWFibGVIZWlnaHQ7XG5cdFx0XHRjb25maWcgPSB7dmFyaWFibGVIZWlnaHQ6dmFyaWFibGVIZWlnaHR9O1xuXHRcdH1cblx0XHRcblx0XHRpZigobW9kZSA9PT0gdHJ1ZSB8fCBtb2RlID09IHR5cGUpICYmIHRoaXMuX2NoZWNrUmVzaXphYmlsaXR5KG5lYXJlc3RDb2x1bW4pKXtcblx0XHRcdFxuXHRcdFx0dmFyIGhhbmRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcblx0XHRcdGhhbmRsZS5jbGFzc05hbWUgPSBcInRhYnVsYXRvci1jb2wtcmVzaXplLWhhbmRsZVwiO1xuXHRcdFx0XG5cdFx0XHRoYW5kbGUuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdHZhciBoYW5kbGVEb3duID0gZnVuY3Rpb24oZSl7XG5cdFx0XHRcdHNlbGYuc3RhcnRDb2x1bW4gPSBjb2x1bW47XG5cdFx0XHRcdHNlbGYuaW5pdGlhbE5leHRDb2x1bW4gPSBzZWxmLm5leHRDb2x1bW4gPSBuZWFyZXN0Q29sdW1uLm5leHRDb2x1bW4oKTtcblx0XHRcdFx0c2VsZi5fbW91c2VEb3duKGUsIG5lYXJlc3RDb2x1bW4sIGhhbmRsZSk7XG5cdFx0XHR9O1xuXHRcdFx0XG5cdFx0XHRoYW5kbGUuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBoYW5kbGVEb3duKTtcblx0XHRcdGhhbmRsZS5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCBoYW5kbGVEb3duLCB7cGFzc2l2ZTogdHJ1ZX0pO1xuXHRcdFx0XG5cdFx0XHQvL3Jlc2l6ZSBjb2x1bW4gb24gIGRvdWJsZSBjbGlja1xuXHRcdFx0aGFuZGxlLmFkZEV2ZW50TGlzdGVuZXIoXCJkYmxjbGlja1wiLCAoZSkgPT4ge1xuXHRcdFx0XHR2YXIgb2xkV2lkdGggPSBuZWFyZXN0Q29sdW1uLmdldFdpZHRoKCk7XG5cdFx0XHRcdFxuXHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRuZWFyZXN0Q29sdW1uLnJlaW5pdGlhbGl6ZVdpZHRoKHRydWUpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYob2xkV2lkdGggIT09IG5lYXJlc3RDb2x1bW4uZ2V0V2lkdGgoKSl7XG5cdFx0XHRcdFx0c2VsZi5kaXNwYXRjaChcImNvbHVtbi1yZXNpemVkXCIsIG5lYXJlc3RDb2x1bW4pO1xuXHRcdFx0XHRcdHNlbGYudGFibGUuZXh0ZXJuYWxFdmVudHMuZGlzcGF0Y2goXCJjb2x1bW5SZXNpemVkXCIsIG5lYXJlc3RDb2x1bW4uZ2V0Q29tcG9uZW50KCkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0aWYoY29sdW1uLm1vZHVsZXMuZnJvemVuKXtcblx0XHRcdFx0aGFuZGxlLnN0eWxlLnBvc2l0aW9uID0gXCJzdGlja3lcIjtcblx0XHRcdFx0aGFuZGxlLnN0eWxlW2NvbHVtbi5tb2R1bGVzLmZyb3plbi5wb3NpdGlvbl0gPSB0aGlzLmZyb3plbkNvbHVtbk9mZnNldChjb2x1bW4pO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRjb25maWcuaGFuZGxlRWwgPSBoYW5kbGU7XG5cdFx0XHRcblx0XHRcdGlmKGVsZW1lbnQucGFyZW50Tm9kZSAmJiBjb2x1bW4udmlzaWJsZSl7XG5cdFx0XHRcdGVsZW1lbnQuYWZ0ZXIoaGFuZGxlKTtcdFx0XHRcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0Y29tcG9uZW50Lm1vZHVsZXMucmVzaXplID0gY29uZmlnO1xuXHR9XG5cdFxuXHRkZUluaXRpYWxpemVDb2x1bW4oY29sdW1uKXtcblx0XHR0aGlzLmRlSW5pdGlhbGl6ZUNvbXBvbmVudChjb2x1bW4pO1xuXHRcdFxuXHRcdGNvbHVtbi5jZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG5cdFx0XHR0aGlzLmRlSW5pdGlhbGl6ZUNvbXBvbmVudChjZWxsKTtcblx0XHR9KTtcblx0fVxuXHRcblx0ZGVJbml0aWFsaXplQ29tcG9uZW50KGNvbXBvbmVudCl7XG5cdFx0dmFyIGhhbmRsZUVsO1xuXHRcdFxuXHRcdGlmKGNvbXBvbmVudC5tb2R1bGVzLnJlc2l6ZSl7XG5cdFx0XHRoYW5kbGVFbCA9IGNvbXBvbmVudC5tb2R1bGVzLnJlc2l6ZS5oYW5kbGVFbDtcblx0XHRcdFxuXHRcdFx0aWYoaGFuZGxlRWwgJiYgaGFuZGxlRWwucGFyZW50RWxlbWVudCl7XG5cdFx0XHRcdGhhbmRsZUVsLnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoaGFuZGxlRWwpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0cmVzaXplSGFuZGxlKGNvbXBvbmVudCwgaGVpZ2h0KXtcblx0XHRpZihjb21wb25lbnQubW9kdWxlcy5yZXNpemUgJiYgY29tcG9uZW50Lm1vZHVsZXMucmVzaXplLmhhbmRsZUVsKXtcblx0XHRcdGNvbXBvbmVudC5tb2R1bGVzLnJlc2l6ZS5oYW5kbGVFbC5zdHlsZS5oZWlnaHQgPSBoZWlnaHQ7XG5cdFx0fVxuXHR9XG5cdFxuXHRfY2hlY2tSZXNpemFiaWxpdHkoY29sdW1uKXtcblx0XHRyZXR1cm4gY29sdW1uLmRlZmluaXRpb24ucmVzaXphYmxlO1xuXHR9XG5cdFxuXHRfbW91c2VEb3duKGUsIGNvbHVtbiwgaGFuZGxlKXtcblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0XG5cdFx0c2VsZi50YWJsZS5lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItYmxvY2stc2VsZWN0XCIpO1xuXHRcdFxuXHRcdGZ1bmN0aW9uIG1vdXNlTW92ZShlKXtcblx0XHRcdHZhciB4ID0gdHlwZW9mIGUuc2NyZWVuWCA9PT0gXCJ1bmRlZmluZWRcIiA/IGUudG91Y2hlc1swXS5zY3JlZW5YIDogZS5zY3JlZW5YLFxuXHRcdFx0c3RhcnREaWZmID0geCAtIHNlbGYuc3RhcnRYLFxuXHRcdFx0bW92ZURpZmYgPSB4IC0gc2VsZi5sYXRlc3RYLFxuXHRcdFx0YmxvY2tlZEJlZm9yZSwgYmxvY2tlZEFmdGVyO1xuXHRcdFx0XG5cdFx0XHRzZWxmLmxhdGVzdFggPSB4O1xuXHRcdFx0XG5cdFx0XHRpZihzZWxmLnRhYmxlLnJ0bCl7XG5cdFx0XHRcdHN0YXJ0RGlmZiA9IC1zdGFydERpZmY7XG5cdFx0XHRcdG1vdmVEaWZmID0gLW1vdmVEaWZmO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRibG9ja2VkQmVmb3JlID0gY29sdW1uLndpZHRoID09IGNvbHVtbi5taW5XaWR0aCB8fCBjb2x1bW4ud2lkdGggPT0gY29sdW1uLm1heFdpZHRoO1xuXHRcdFx0XG5cdFx0XHRjb2x1bW4uc2V0V2lkdGgoc2VsZi5zdGFydFdpZHRoICsgc3RhcnREaWZmKTtcblx0XHRcdFxuXHRcdFx0YmxvY2tlZEFmdGVyID0gY29sdW1uLndpZHRoID09IGNvbHVtbi5taW5XaWR0aCB8fCBjb2x1bW4ud2lkdGggPT0gY29sdW1uLm1heFdpZHRoO1xuXHRcdFx0XG5cdFx0XHRpZihtb3ZlRGlmZiA8IDApe1xuXHRcdFx0XHRzZWxmLm5leHRDb2x1bW4gPSBzZWxmLmluaXRpYWxOZXh0Q29sdW1uO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihzZWxmLnRhYmxlLm9wdGlvbnMucmVzaXphYmxlQ29sdW1uRml0ICYmIHNlbGYubmV4dENvbHVtbiAmJiAhKGJsb2NrZWRCZWZvcmUgJiYgYmxvY2tlZEFmdGVyKSl7XG5cdFx0XHRcdGxldCBjb2xXaWR0aCA9IHNlbGYubmV4dENvbHVtbi5nZXRXaWR0aCgpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYobW92ZURpZmYgPiAwKXtcblx0XHRcdFx0XHRpZihjb2xXaWR0aCA8PSBzZWxmLm5leHRDb2x1bW4ubWluV2lkdGgpe1xuXHRcdFx0XHRcdFx0c2VsZi5uZXh0Q29sdW1uID0gc2VsZi5uZXh0Q29sdW1uLm5leHRDb2x1bW4oKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGlmKHNlbGYubmV4dENvbHVtbil7XG5cdFx0XHRcdFx0c2VsZi5uZXh0Q29sdW1uLnNldFdpZHRoKHNlbGYubmV4dENvbHVtbi5nZXRXaWR0aCgpIC0gbW92ZURpZmYpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHNlbGYudGFibGUuY29sdW1uTWFuYWdlci5yZXJlbmRlckNvbHVtbnModHJ1ZSk7XG5cdFx0XHRcblx0XHRcdGlmKCFzZWxmLnRhYmxlLmJyb3dzZXJTbG93ICYmIGNvbHVtbi5tb2R1bGVzLnJlc2l6ZSAmJiBjb2x1bW4ubW9kdWxlcy5yZXNpemUudmFyaWFibGVIZWlnaHQpe1xuXHRcdFx0XHRjb2x1bW4uY2hlY2tDZWxsSGVpZ2h0cygpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRmdW5jdGlvbiBtb3VzZVVwKGUpe1xuXHRcdFx0XG5cdFx0XHQvL2Jsb2NrIGVkaXRvciBmcm9tIHRha2luZyBhY3Rpb24gd2hpbGUgcmVzaXppbmcgaXMgdGFraW5nIHBsYWNlXG5cdFx0XHRpZihzZWxmLnN0YXJ0Q29sdW1uLm1vZHVsZXMuZWRpdCl7XG5cdFx0XHRcdHNlbGYuc3RhcnRDb2x1bW4ubW9kdWxlcy5lZGl0LmJsb2NrZWQgPSBmYWxzZTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoc2VsZi50YWJsZS5icm93c2VyU2xvdyAmJiBjb2x1bW4ubW9kdWxlcy5yZXNpemUgJiYgY29sdW1uLm1vZHVsZXMucmVzaXplLnZhcmlhYmxlSGVpZ2h0KXtcblx0XHRcdFx0Y29sdW1uLmNoZWNrQ2VsbEhlaWdodHMoKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0ZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBtb3VzZVVwKTtcblx0XHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBtb3VzZU1vdmUpO1xuXHRcdFx0XG5cdFx0XHRoYW5kbGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCBtb3VzZU1vdmUpO1xuXHRcdFx0aGFuZGxlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCBtb3VzZVVwKTtcblx0XHRcdFxuXHRcdFx0c2VsZi50YWJsZS5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJ0YWJ1bGF0b3ItYmxvY2stc2VsZWN0XCIpO1xuXHRcdFx0XG5cdFx0XHRpZihzZWxmLnN0YXJ0V2lkdGggIT09IGNvbHVtbi5nZXRXaWR0aCgpKXtcblx0XHRcdFx0c2VsZi50YWJsZS5jb2x1bW5NYW5hZ2VyLnZlcnRpY2FsQWxpZ25IZWFkZXJzKCk7XG5cblx0XHRcdFx0c2VsZi5kaXNwYXRjaChcImNvbHVtbi1yZXNpemVkXCIsIGNvbHVtbik7XG5cdFx0XHRcdHNlbGYudGFibGUuZXh0ZXJuYWxFdmVudHMuZGlzcGF0Y2goXCJjb2x1bW5SZXNpemVkXCIsIGNvbHVtbi5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7IC8vcHJldmVudCByZXNpemUgZnJvbSBpbnRlcmZlcmluZyB3aXRoIG1vdmFibGUgY29sdW1uc1xuXHRcdFxuXHRcdC8vYmxvY2sgZWRpdG9yIGZyb20gdGFraW5nIGFjdGlvbiB3aGlsZSByZXNpemluZyBpcyB0YWtpbmcgcGxhY2Vcblx0XHRpZihzZWxmLnN0YXJ0Q29sdW1uLm1vZHVsZXMuZWRpdCl7XG5cdFx0XHRzZWxmLnN0YXJ0Q29sdW1uLm1vZHVsZXMuZWRpdC5ibG9ja2VkID0gdHJ1ZTtcblx0XHR9XG5cdFx0XG5cdFx0c2VsZi5zdGFydFggPSB0eXBlb2YgZS5zY3JlZW5YID09PSBcInVuZGVmaW5lZFwiID8gZS50b3VjaGVzWzBdLnNjcmVlblggOiBlLnNjcmVlblg7XG5cdFx0c2VsZi5sYXRlc3RYID0gc2VsZi5zdGFydFg7XG5cdFx0c2VsZi5zdGFydFdpZHRoID0gY29sdW1uLmdldFdpZHRoKCk7XG5cdFx0XG5cdFx0ZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIG1vdXNlTW92ZSk7XG5cdFx0ZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBtb3VzZVVwKTtcblx0XHRoYW5kbGUuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCBtb3VzZU1vdmUsIHtwYXNzaXZlOiB0cnVlfSk7XG5cdFx0aGFuZGxlLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCBtb3VzZVVwKTtcblx0fVxufVxuXG5SZXNpemVDb2x1bW5zLm1vZHVsZU5hbWUgPSBcInJlc2l6ZUNvbHVtbnNcIjtcblxuY2xhc3MgUmVzaXplUm93cyBleHRlbmRzIE1vZHVsZXtcblxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXG5cdFx0dGhpcy5zdGFydENvbHVtbiA9IGZhbHNlO1xuXHRcdHRoaXMuc3RhcnRZID0gZmFsc2U7XG5cdFx0dGhpcy5zdGFydEhlaWdodCA9IGZhbHNlO1xuXHRcdHRoaXMuaGFuZGxlID0gbnVsbDtcblx0XHR0aGlzLnByZXZIYW5kbGUgPSBudWxsO1xuXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicmVzaXphYmxlUm93c1wiLCBmYWxzZSk7IC8vcmVzaXphYmxlIHJvd3Ncblx0fVxuXG5cdGluaXRpYWxpemUoKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucmVzaXphYmxlUm93cyl7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1sYXlvdXQtYWZ0ZXJcIiwgdGhpcy5pbml0aWFsaXplUm93LmJpbmQodGhpcykpO1xuXHRcdH1cblx0fVxuXG5cdGluaXRpYWxpemVSb3cocm93KXtcblx0XHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0cm93RWwgPSByb3cuZ2V0RWxlbWVudCgpO1xuXG5cdFx0dmFyIGhhbmRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHRcdGhhbmRsZS5jbGFzc05hbWUgPSBcInRhYnVsYXRvci1yb3ctcmVzaXplLWhhbmRsZVwiO1xuXG5cdFx0dmFyIHByZXZIYW5kbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0XHRwcmV2SGFuZGxlLmNsYXNzTmFtZSA9IFwidGFidWxhdG9yLXJvdy1yZXNpemUtaGFuZGxlIHByZXZcIjtcblxuXHRcdGhhbmRsZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSl7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH0pO1xuXG5cdFx0dmFyIGhhbmRsZURvd24gPSBmdW5jdGlvbihlKXtcblx0XHRcdHNlbGYuc3RhcnRSb3cgPSByb3c7XG5cdFx0XHRzZWxmLl9tb3VzZURvd24oZSwgcm93LCBoYW5kbGUpO1xuXHRcdH07XG5cblx0XHRoYW5kbGUuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBoYW5kbGVEb3duKTtcblx0XHRoYW5kbGUuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgaGFuZGxlRG93biwge3Bhc3NpdmU6IHRydWV9KTtcblxuXHRcdHByZXZIYW5kbGUuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9KTtcblxuXHRcdHZhciBwcmV2SGFuZGxlRG93biA9ICBmdW5jdGlvbihlKXtcblx0XHRcdHZhciBwcmV2Um93ID0gc2VsZi50YWJsZS5yb3dNYW5hZ2VyLnByZXZEaXNwbGF5Um93KHJvdyk7XG5cblx0XHRcdGlmKHByZXZSb3cpe1xuXHRcdFx0XHRzZWxmLnN0YXJ0Um93ID0gcHJldlJvdztcblx0XHRcdFx0c2VsZi5fbW91c2VEb3duKGUsIHByZXZSb3csIHByZXZIYW5kbGUpO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRwcmV2SGFuZGxlLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIixwcmV2SGFuZGxlRG93bik7XG5cdFx0cHJldkhhbmRsZS5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLHByZXZIYW5kbGVEb3duLCB7cGFzc2l2ZTogdHJ1ZX0pO1xuXG5cdFx0cm93RWwuYXBwZW5kQ2hpbGQoaGFuZGxlKTtcblx0XHRyb3dFbC5hcHBlbmRDaGlsZChwcmV2SGFuZGxlKTtcblx0fVxuXG5cdF9tb3VzZURvd24oZSwgcm93LCBoYW5kbGUpe1xuXHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdHNlbGYudGFibGUuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWJsb2NrLXNlbGVjdFwiKTtcblxuXHRcdGZ1bmN0aW9uIG1vdXNlTW92ZShlKXtcblx0XHRcdHJvdy5zZXRIZWlnaHQoc2VsZi5zdGFydEhlaWdodCArICgodHlwZW9mIGUuc2NyZWVuWSA9PT0gXCJ1bmRlZmluZWRcIiA/IGUudG91Y2hlc1swXS5zY3JlZW5ZIDogZS5zY3JlZW5ZKSAtIHNlbGYuc3RhcnRZKSk7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gbW91c2VVcChlKXtcblxuXHRcdFx0Ly8gLy9ibG9jayBlZGl0b3IgZnJvbSB0YWtpbmcgYWN0aW9uIHdoaWxlIHJlc2l6aW5nIGlzIHRha2luZyBwbGFjZVxuXHRcdFx0Ly8gaWYoc2VsZi5zdGFydENvbHVtbi5tb2R1bGVzLmVkaXQpe1xuXHRcdFx0Ly8gXHRzZWxmLnN0YXJ0Q29sdW1uLm1vZHVsZXMuZWRpdC5ibG9ja2VkID0gZmFsc2U7XG5cdFx0XHQvLyB9XG5cblx0XHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgbW91c2VNb3ZlKTtcblx0XHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBtb3VzZU1vdmUpO1xuXG5cdFx0XHRoYW5kbGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCBtb3VzZU1vdmUpO1xuXHRcdFx0aGFuZGxlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCBtb3VzZVVwKTtcblxuXHRcdFx0c2VsZi50YWJsZS5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJ0YWJ1bGF0b3ItYmxvY2stc2VsZWN0XCIpO1xuXG5cdFx0XHRzZWxmLmRpc3BhdGNoRXh0ZXJuYWwoXCJyb3dSZXNpemVkXCIsIHJvdy5nZXRDb21wb25lbnQoKSk7XG5cdFx0fVxuXG5cdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTsgLy9wcmV2ZW50IHJlc2l6ZSBmcm9tIGludGVyZmVyaW5nIHdpdGggbW92YWJsZSBjb2x1bW5zXG5cblx0XHQvL2Jsb2NrIGVkaXRvciBmcm9tIHRha2luZyBhY3Rpb24gd2hpbGUgcmVzaXppbmcgaXMgdGFraW5nIHBsYWNlXG5cdFx0Ly8gaWYoc2VsZi5zdGFydENvbHVtbi5tb2R1bGVzLmVkaXQpe1xuXHRcdC8vIFx0c2VsZi5zdGFydENvbHVtbi5tb2R1bGVzLmVkaXQuYmxvY2tlZCA9IHRydWU7XG5cdFx0Ly8gfVxuXG5cdFx0c2VsZi5zdGFydFkgPSB0eXBlb2YgZS5zY3JlZW5ZID09PSBcInVuZGVmaW5lZFwiID8gZS50b3VjaGVzWzBdLnNjcmVlblkgOiBlLnNjcmVlblk7XG5cdFx0c2VsZi5zdGFydEhlaWdodCA9IHJvdy5nZXRIZWlnaHQoKTtcblxuXHRcdGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBtb3VzZU1vdmUpO1xuXHRcdGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgbW91c2VVcCk7XG5cblx0XHRoYW5kbGUuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCBtb3VzZU1vdmUsIHtwYXNzaXZlOiB0cnVlfSk7XG5cdFx0aGFuZGxlLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCBtb3VzZVVwKTtcblx0fVxufVxuXG5SZXNpemVSb3dzLm1vZHVsZU5hbWUgPSBcInJlc2l6ZVJvd3NcIjtcblxuY2xhc3MgUmVzaXplVGFibGUgZXh0ZW5kcyBNb2R1bGV7XG5cdFxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXHRcdFxuXHRcdHRoaXMuYmluZGluZyA9IGZhbHNlO1xuXHRcdHRoaXMudmlzaWJpbGl0eU9ic2VydmVyID0gZmFsc2U7XG5cdFx0dGhpcy5yZXNpemVPYnNlcnZlciA9IGZhbHNlO1xuXHRcdHRoaXMuY29udGFpbmVyT2JzZXJ2ZXIgPSBmYWxzZTtcblx0XHRcblx0XHR0aGlzLnRhYmxlSGVpZ2h0ID0gMDtcblx0XHR0aGlzLnRhYmxlV2lkdGggPSAwO1xuXHRcdHRoaXMuY29udGFpbmVySGVpZ2h0ID0gMDtcblx0XHR0aGlzLmNvbnRhaW5lcldpZHRoID0gMDtcblx0XHRcblx0XHR0aGlzLmF1dG9SZXNpemUgPSBmYWxzZTtcblx0XHRcblx0XHR0aGlzLnZpc2libGUgPSBmYWxzZTtcblx0XHRcblx0XHR0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG5cdFx0dGhpcy5pbml0aWFsUmVkcmF3ID0gZmFsc2U7XG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiYXV0b1Jlc2l6ZVwiLCB0cnVlKTsgLy9hdXRvIHJlc2l6ZSB0YWJsZVxuXHR9XG5cdFxuXHRpbml0aWFsaXplKCl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmF1dG9SZXNpemUpe1xuXHRcdFx0dmFyIHRhYmxlID0gdGhpcy50YWJsZSxcblx0XHRcdHRhYmxlU3R5bGU7XG5cdFx0XHRcblx0XHRcdHRoaXMudGFibGVIZWlnaHQgPSB0YWJsZS5lbGVtZW50LmNsaWVudEhlaWdodDtcblx0XHRcdHRoaXMudGFibGVXaWR0aCA9IHRhYmxlLmVsZW1lbnQuY2xpZW50V2lkdGg7XG5cdFx0XHRcblx0XHRcdGlmKHRhYmxlLmVsZW1lbnQucGFyZW50Tm9kZSl7XG5cdFx0XHRcdHRoaXMuY29udGFpbmVySGVpZ2h0ID0gdGFibGUuZWxlbWVudC5wYXJlbnROb2RlLmNsaWVudEhlaWdodDtcblx0XHRcdFx0dGhpcy5jb250YWluZXJXaWR0aCA9IHRhYmxlLmVsZW1lbnQucGFyZW50Tm9kZS5jbGllbnRXaWR0aDtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYodHlwZW9mIEludGVyc2VjdGlvbk9ic2VydmVyICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBSZXNpemVPYnNlcnZlciAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0YWJsZS5yb3dNYW5hZ2VyLmdldFJlbmRlck1vZGUoKSA9PT0gXCJ2aXJ0dWFsXCIpe1xuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5pbml0aWFsaXplVmlzaWJpbGl0eU9ic2VydmVyKCk7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLmF1dG9SZXNpemUgPSB0cnVlO1xuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5yZXNpemVPYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcigoZW50cnkpID0+IHtcblx0XHRcdFx0XHRpZighdGFibGUuYnJvd3Nlck1vYmlsZSB8fCAodGFibGUuYnJvd3Nlck1vYmlsZSAmJiF0YWJsZS5tb2R1bGVzLmVkaXQuY3VycmVudENlbGwpKXtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0dmFyIG5vZGVIZWlnaHQgPSBNYXRoLmZsb29yKGVudHJ5WzBdLmNvbnRlbnRSZWN0LmhlaWdodCk7XG5cdFx0XHRcdFx0XHR2YXIgbm9kZVdpZHRoID0gTWF0aC5mbG9vcihlbnRyeVswXS5jb250ZW50UmVjdC53aWR0aCk7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGlmKHRoaXMudGFibGVIZWlnaHQgIT0gbm9kZUhlaWdodCB8fCB0aGlzLnRhYmxlV2lkdGggIT0gbm9kZVdpZHRoKXtcblx0XHRcdFx0XHRcdFx0dGhpcy50YWJsZUhlaWdodCA9IG5vZGVIZWlnaHQ7XG5cdFx0XHRcdFx0XHRcdHRoaXMudGFibGVXaWR0aCA9IG5vZGVXaWR0aDtcblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdGlmKHRhYmxlLmVsZW1lbnQucGFyZW50Tm9kZSl7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5jb250YWluZXJIZWlnaHQgPSB0YWJsZS5lbGVtZW50LnBhcmVudE5vZGUuY2xpZW50SGVpZ2h0O1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuY29udGFpbmVyV2lkdGggPSB0YWJsZS5lbGVtZW50LnBhcmVudE5vZGUuY2xpZW50V2lkdGg7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdHRoaXMucmVkcmF3VGFibGUoKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5yZXNpemVPYnNlcnZlci5vYnNlcnZlKHRhYmxlLmVsZW1lbnQpO1xuXHRcdFx0XHRcblx0XHRcdFx0dGFibGVTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRhYmxlLmVsZW1lbnQpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYodGhpcy50YWJsZS5lbGVtZW50LnBhcmVudE5vZGUgJiYgIXRoaXMudGFibGUucm93TWFuYWdlci5maXhlZEhlaWdodCAmJiAodGFibGVTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKFwibWF4LWhlaWdodFwiKSB8fCB0YWJsZVN0eWxlLmdldFByb3BlcnR5VmFsdWUoXCJtaW4taGVpZ2h0XCIpKSl7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0dGhpcy5jb250YWluZXJPYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcigoZW50cnkpID0+IHtcblx0XHRcdFx0XHRcdGlmKCF0YWJsZS5icm93c2VyTW9iaWxlIHx8ICh0YWJsZS5icm93c2VyTW9iaWxlICYmIXRhYmxlLm1vZHVsZXMuZWRpdC5jdXJyZW50Q2VsbCkpe1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0dmFyIG5vZGVIZWlnaHQgPSBNYXRoLmZsb29yKGVudHJ5WzBdLmNvbnRlbnRSZWN0LmhlaWdodCk7XG5cdFx0XHRcdFx0XHRcdHZhciBub2RlV2lkdGggPSBNYXRoLmZsb29yKGVudHJ5WzBdLmNvbnRlbnRSZWN0LndpZHRoKTtcblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdGlmKHRoaXMuY29udGFpbmVySGVpZ2h0ICE9IG5vZGVIZWlnaHQgfHwgdGhpcy5jb250YWluZXJXaWR0aCAhPSBub2RlV2lkdGgpe1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuY29udGFpbmVySGVpZ2h0ID0gbm9kZUhlaWdodDtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmNvbnRhaW5lcldpZHRoID0gbm9kZVdpZHRoO1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMudGFibGVIZWlnaHQgPSB0YWJsZS5lbGVtZW50LmNsaWVudEhlaWdodDtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLnRhYmxlV2lkdGggPSB0YWJsZS5lbGVtZW50LmNsaWVudFdpZHRoO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHR0aGlzLnJlZHJhd1RhYmxlKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0dGhpcy5jb250YWluZXJPYnNlcnZlci5vYnNlcnZlKHRoaXMudGFibGUuZWxlbWVudC5wYXJlbnROb2RlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJ0YWJsZS1yZXNpemVcIiwgdGhpcy50YWJsZVJlc2l6ZWQuYmluZCh0aGlzKSk7XG5cdFx0XHRcdFxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmJpbmRpbmcgPSBmdW5jdGlvbigpe1xuXHRcdFx0XHRcdGlmKCF0YWJsZS5icm93c2VyTW9iaWxlIHx8ICh0YWJsZS5icm93c2VyTW9iaWxlICYmICF0YWJsZS5tb2R1bGVzLmVkaXQuY3VycmVudENlbGwpKXtcblx0XHRcdFx0XHRcdHRhYmxlLmNvbHVtbk1hbmFnZXIucmVyZW5kZXJDb2x1bW5zKHRydWUpO1xuXHRcdFx0XHRcdFx0dGFibGUucmVkcmF3KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0XHRcblx0XHRcdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5iaW5kaW5nKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJ0YWJsZS1kZXN0cm95XCIsIHRoaXMuY2xlYXJCaW5kaW5ncy5iaW5kKHRoaXMpKTtcblx0XHR9XG5cdH1cblx0XG5cdGluaXRpYWxpemVWaXNpYmlsaXR5T2JzZXJ2ZXIoKXtcblx0XHR0aGlzLnZpc2liaWxpdHlPYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcigoZW50cmllcykgPT4ge1xuXHRcdFx0dGhpcy52aXNpYmxlID0gZW50cmllc1swXS5pc0ludGVyc2VjdGluZztcblx0XHRcdFxuXHRcdFx0aWYoIXRoaXMuaW5pdGlhbGl6ZWQpe1xuXHRcdFx0XHR0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcblx0XHRcdFx0dGhpcy5pbml0aWFsUmVkcmF3ID0gIXRoaXMudmlzaWJsZTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aWYodGhpcy52aXNpYmxlKXtcblx0XHRcdFx0XHR0aGlzLnJlZHJhd1RhYmxlKHRoaXMuaW5pdGlhbFJlZHJhdyk7XG5cdFx0XHRcdFx0dGhpcy5pbml0aWFsUmVkcmF3ID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0XHR0aGlzLnZpc2liaWxpdHlPYnNlcnZlci5vYnNlcnZlKHRoaXMudGFibGUuZWxlbWVudCk7XG5cdH1cblx0XG5cdHJlZHJhd1RhYmxlKGZvcmNlKXtcblx0XHRpZih0aGlzLmluaXRpYWxpemVkICYmIHRoaXMudmlzaWJsZSl7XG5cdFx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIucmVyZW5kZXJDb2x1bW5zKHRydWUpO1xuXHRcdFx0dGhpcy50YWJsZS5yZWRyYXcoZm9yY2UpO1xuXHRcdH1cblx0fVxuXHRcblx0dGFibGVSZXNpemVkKCl7XG5cdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnJlZHJhdygpO1xuXHR9XG5cdFxuXHRjbGVhckJpbmRpbmdzKCl7XG5cdFx0aWYodGhpcy5iaW5kaW5nKXtcblx0XHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMuYmluZGluZyk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRoaXMucmVzaXplT2JzZXJ2ZXIpe1xuXHRcdFx0dGhpcy5yZXNpemVPYnNlcnZlci51bm9ic2VydmUodGhpcy50YWJsZS5lbGVtZW50KTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodGhpcy52aXNpYmlsaXR5T2JzZXJ2ZXIpe1xuXHRcdFx0dGhpcy52aXNpYmlsaXR5T2JzZXJ2ZXIudW5vYnNlcnZlKHRoaXMudGFibGUuZWxlbWVudCk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRoaXMuY29udGFpbmVyT2JzZXJ2ZXIpe1xuXHRcdFx0dGhpcy5jb250YWluZXJPYnNlcnZlci51bm9ic2VydmUodGhpcy50YWJsZS5lbGVtZW50LnBhcmVudE5vZGUpO1xuXHRcdH1cblx0fVxufVxuXG5SZXNpemVUYWJsZS5tb2R1bGVOYW1lID0gXCJyZXNpemVUYWJsZVwiO1xuXG5jbGFzcyBSZXNwb25zaXZlTGF5b3V0IGV4dGVuZHMgTW9kdWxle1xuXG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cblx0XHR0aGlzLmNvbHVtbnMgPSBbXTtcblx0XHR0aGlzLmhpZGRlbkNvbHVtbnMgPSBbXTtcblx0XHR0aGlzLm1vZGUgPSBcIlwiO1xuXHRcdHRoaXMuaW5kZXggPSAwO1xuXHRcdHRoaXMuY29sbGFwc2VGb3JtYXR0ZXIgPSBbXTtcblx0XHR0aGlzLmNvbGxhcHNlU3RhcnRPcGVuID0gdHJ1ZTtcblx0XHR0aGlzLmNvbGxhcHNlSGFuZGxlQ29sdW1uID0gZmFsc2U7XG5cblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJyZXNwb25zaXZlTGF5b3V0XCIsIGZhbHNlKTsgLy9yZXNwb25zaXZlIGxheW91dCBmbGFnc1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInJlc3BvbnNpdmVMYXlvdXRDb2xsYXBzZVN0YXJ0T3BlblwiLCB0cnVlKTsgLy9zdGFydCBzaG93aW5nIGNvbGxhcHNlZCBkYXRhXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwicmVzcG9uc2l2ZUxheW91dENvbGxhcHNlVXNlRm9ybWF0dGVyc1wiLCB0cnVlKTsgLy9yZXNwb25zaXZlIGxheW91dCBjb2xsYXBzZSBmb3JtYXR0ZXJcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJyZXNwb25zaXZlTGF5b3V0Q29sbGFwc2VGb3JtYXR0ZXJcIiwgZmFsc2UpOyAvL3Jlc3BvbnNpdmUgbGF5b3V0IGNvbGxhcHNlIGZvcm1hdHRlclxuXG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcInJlc3BvbnNpdmVcIik7XG5cdH1cblxuXHQvL2dlbmVyYXRlIHJlc3BvbnNpdmUgY29sdW1ucyBsaXN0XG5cdGluaXRpYWxpemUoKXtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucmVzcG9uc2l2ZUxheW91dCl7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1sYXlvdXRcIiwgdGhpcy5pbml0aWFsaXplQ29sdW1uLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tc2hvd1wiLCB0aGlzLnVwZGF0ZUNvbHVtblZpc2liaWxpdHkuYmluZCh0aGlzKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNvbHVtbi1oaWRlXCIsIHRoaXMudXBkYXRlQ29sdW1uVmlzaWJpbGl0eS5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1ucy1sb2FkZWRcIiwgdGhpcy5pbml0aWFsaXplUmVzcG9uc2l2aXR5LmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tbW92ZWRcIiwgdGhpcy5pbml0aWFsaXplUmVzcG9uc2l2aXR5LmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tYWRkXCIsIHRoaXMuaW5pdGlhbGl6ZVJlc3BvbnNpdml0eS5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWRlbGV0ZVwiLCB0aGlzLmluaXRpYWxpemVSZXNwb25zaXZpdHkuYmluZCh0aGlzKSk7XG5cblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwidGFibGUtcmVkcmF3aW5nXCIsIHRoaXMudGFibGVSZWRyYXcuYmluZCh0aGlzKSk7XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5yZXNwb25zaXZlTGF5b3V0ID09PSBcImNvbGxhcHNlXCIpe1xuXHRcdFx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1kYXRhLWNoYW5nZWRcIiwgdGhpcy5nZW5lcmF0ZUNvbGxhcHNlZFJvd0NvbnRlbnQuYmluZCh0aGlzKSk7XG5cdFx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWluaXRcIiwgdGhpcy5pbml0aWFsaXplUm93LmJpbmQodGhpcykpO1xuXHRcdFx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1sYXlvdXRcIiwgdGhpcy5sYXlvdXRSb3cuYmluZCh0aGlzKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0dGFibGVSZWRyYXcoZm9yY2Upe1xuXHRcdGlmKFtcImZpdENvbHVtbnNcIiwgXCJmaXREYXRhU3RyZXRjaFwiXS5pbmRleE9mKHRoaXMubGF5b3V0TW9kZSgpKSA9PT0gLTEpe1xuXHRcdFx0aWYoIWZvcmNlKXtcblx0XHRcdFx0dGhpcy51cGRhdGUoKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpbml0aWFsaXplUmVzcG9uc2l2aXR5KCl7XG5cdFx0dmFyIGNvbHVtbnMgPSBbXTtcblxuXHRcdHRoaXMubW9kZSA9IHRoaXMudGFibGUub3B0aW9ucy5yZXNwb25zaXZlTGF5b3V0O1xuXHRcdHRoaXMuY29sbGFwc2VGb3JtYXR0ZXIgPSB0aGlzLnRhYmxlLm9wdGlvbnMucmVzcG9uc2l2ZUxheW91dENvbGxhcHNlRm9ybWF0dGVyIHx8IHRoaXMuZm9ybWF0Q29sbGFwc2VkRGF0YTtcblx0XHR0aGlzLmNvbGxhcHNlU3RhcnRPcGVuID0gdGhpcy50YWJsZS5vcHRpb25zLnJlc3BvbnNpdmVMYXlvdXRDb2xsYXBzZVN0YXJ0T3Blbjtcblx0XHR0aGlzLmhpZGRlbkNvbHVtbnMgPSBbXTtcblxuXHRcdC8vZGV0ZXJtaW5lIGxldmVsIG9mIHJlc3BvbnNpdml0eSBmb3IgZWFjaCBjb2x1bW5cblx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuY29sdW1uc0J5SW5kZXguZm9yRWFjaCgoY29sdW1uLCBpKSA9PiB7XG5cdFx0XHRpZihjb2x1bW4ubW9kdWxlcy5yZXNwb25zaXZlKXtcblx0XHRcdFx0aWYoY29sdW1uLm1vZHVsZXMucmVzcG9uc2l2ZS5vcmRlciAmJiBjb2x1bW4ubW9kdWxlcy5yZXNwb25zaXZlLnZpc2libGUpe1xuXHRcdFx0XHRcdGNvbHVtbi5tb2R1bGVzLnJlc3BvbnNpdmUuaW5kZXggPSBpO1xuXHRcdFx0XHRcdGNvbHVtbnMucHVzaChjb2x1bW4pO1xuXG5cdFx0XHRcdFx0aWYoIWNvbHVtbi52aXNpYmxlICYmIHRoaXMubW9kZSA9PT0gXCJjb2xsYXBzZVwiKXtcblx0XHRcdFx0XHRcdHRoaXMuaGlkZGVuQ29sdW1ucy5wdXNoKGNvbHVtbik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHQvL3NvcnQgbGlzdCBieSByZXNwb25zaXZpdHlcblx0XHRjb2x1bW5zID0gY29sdW1ucy5yZXZlcnNlKCk7XG5cdFx0Y29sdW1ucyA9IGNvbHVtbnMuc29ydCgoYSwgYikgPT4ge1xuXHRcdFx0dmFyIGRpZmYgPSBiLm1vZHVsZXMucmVzcG9uc2l2ZS5vcmRlciAtIGEubW9kdWxlcy5yZXNwb25zaXZlLm9yZGVyO1xuXHRcdFx0cmV0dXJuIGRpZmYgfHwgKGIubW9kdWxlcy5yZXNwb25zaXZlLmluZGV4IC0gYS5tb2R1bGVzLnJlc3BvbnNpdmUuaW5kZXgpO1xuXHRcdH0pO1xuXG5cdFx0dGhpcy5jb2x1bW5zID0gY29sdW1ucztcblxuXHRcdGlmKHRoaXMubW9kZSA9PT0gXCJjb2xsYXBzZVwiKXtcblx0XHRcdHRoaXMuZ2VuZXJhdGVDb2xsYXBzZWRDb250ZW50KCk7XG5cdFx0fVxuXG5cdFx0Ly9hc3NpZ24gY29sbGFwc2UgY29sdW1uXG5cdFx0Zm9yIChsZXQgY29sIG9mIHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5jb2x1bW5zQnlJbmRleCl7XG5cdFx0XHRpZihjb2wuZGVmaW5pdGlvbi5mb3JtYXR0ZXIgPT0gXCJyZXNwb25zaXZlQ29sbGFwc2VcIil7XG5cdFx0XHRcdHRoaXMuY29sbGFwc2VIYW5kbGVDb2x1bW4gPSBjb2w7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmKHRoaXMuY29sbGFwc2VIYW5kbGVDb2x1bW4pe1xuXHRcdFx0aWYodGhpcy5oaWRkZW5Db2x1bW5zLmxlbmd0aCl7XG5cdFx0XHRcdHRoaXMuY29sbGFwc2VIYW5kbGVDb2x1bW4uc2hvdygpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmNvbGxhcHNlSGFuZGxlQ29sdW1uLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvL2RlZmluZSBsYXlvdXQgaW5mb3JtYXRpb25cblx0aW5pdGlhbGl6ZUNvbHVtbihjb2x1bW4pe1xuXHRcdHZhciBkZWYgPSBjb2x1bW4uZ2V0RGVmaW5pdGlvbigpO1xuXG5cdFx0Y29sdW1uLm1vZHVsZXMucmVzcG9uc2l2ZSA9IHtvcmRlcjogdHlwZW9mIGRlZi5yZXNwb25zaXZlID09PSBcInVuZGVmaW5lZFwiID8gMSA6IGRlZi5yZXNwb25zaXZlLCB2aXNpYmxlOmRlZi52aXNpYmxlID09PSBmYWxzZSA/IGZhbHNlIDogdHJ1ZX07XG5cdH1cblxuXHRpbml0aWFsaXplUm93KHJvdyl7XG5cdFx0dmFyIGVsO1xuXG5cdFx0aWYocm93LnR5cGUgIT09IFwiY2FsY1wiKXtcblx0XHRcdGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcdGVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItcmVzcG9uc2l2ZS1jb2xsYXBzZVwiKTtcblxuXHRcdFx0cm93Lm1vZHVsZXMucmVzcG9uc2l2ZUxheW91dCA9IHtcblx0XHRcdFx0ZWxlbWVudDplbCxcblx0XHRcdFx0b3Blbjp0aGlzLmNvbGxhcHNlU3RhcnRPcGVuLFxuXHRcdFx0fTtcblxuXHRcdFx0aWYoIXRoaXMuY29sbGFwc2VTdGFydE9wZW4pe1xuXHRcdFx0XHRlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGxheW91dFJvdyhyb3cpe1xuXHRcdHZhciByb3dFbCA9IHJvdy5nZXRFbGVtZW50KCk7XG5cblx0XHRpZihyb3cubW9kdWxlcy5yZXNwb25zaXZlTGF5b3V0KXtcblx0XHRcdHJvd0VsLmFwcGVuZENoaWxkKHJvdy5tb2R1bGVzLnJlc3BvbnNpdmVMYXlvdXQuZWxlbWVudCk7XG5cdFx0XHR0aGlzLmdlbmVyYXRlQ29sbGFwc2VkUm93Q29udGVudChyb3cpO1xuXHRcdH1cblx0fVxuXG5cdC8vdXBkYXRlIGNvbHVtbiB2aXNpYmlsaXR5XG5cdHVwZGF0ZUNvbHVtblZpc2liaWxpdHkoY29sdW1uLCByZXNwb25zaXZlVG9nZ2xlKXtcblx0XHRpZighcmVzcG9uc2l2ZVRvZ2dsZSAmJiBjb2x1bW4ubW9kdWxlcy5yZXNwb25zaXZlKXtcblx0XHRcdGNvbHVtbi5tb2R1bGVzLnJlc3BvbnNpdmUudmlzaWJsZSA9IGNvbHVtbi52aXNpYmxlO1xuXHRcdFx0dGhpcy5pbml0aWFsaXplUmVzcG9uc2l2aXR5KCk7XG5cdFx0fVxuXHR9XG5cblx0aGlkZUNvbHVtbihjb2x1bW4pe1xuXHRcdHZhciBjb2xDb3VudCA9IHRoaXMuaGlkZGVuQ29sdW1ucy5sZW5ndGg7XG5cblx0XHRjb2x1bW4uaGlkZShmYWxzZSwgdHJ1ZSk7XG5cblx0XHRpZih0aGlzLm1vZGUgPT09IFwiY29sbGFwc2VcIil7XG5cdFx0XHR0aGlzLmhpZGRlbkNvbHVtbnMudW5zaGlmdChjb2x1bW4pO1xuXHRcdFx0dGhpcy5nZW5lcmF0ZUNvbGxhcHNlZENvbnRlbnQoKTtcblxuXHRcdFx0aWYodGhpcy5jb2xsYXBzZUhhbmRsZUNvbHVtbiAmJiAhY29sQ291bnQpe1xuXHRcdFx0XHR0aGlzLmNvbGxhcHNlSGFuZGxlQ29sdW1uLnNob3coKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRzaG93Q29sdW1uKGNvbHVtbil7XG5cdFx0dmFyIGluZGV4O1xuXG5cdFx0Y29sdW1uLnNob3coZmFsc2UsIHRydWUpO1xuXHRcdC8vc2V0IGNvbHVtbiB3aWR0aCB0byBwcmV2ZW50IGNhbGN1bGF0aW9uIGxvb3BzIG9uIHVuaW5pdGlhbGl6ZWQgY29sdW1uc1xuXHRcdGNvbHVtbi5zZXRXaWR0aChjb2x1bW4uZ2V0V2lkdGgoKSk7XG5cblx0XHRpZih0aGlzLm1vZGUgPT09IFwiY29sbGFwc2VcIil7XG5cdFx0XHRpbmRleCA9IHRoaXMuaGlkZGVuQ29sdW1ucy5pbmRleE9mKGNvbHVtbik7XG5cblx0XHRcdGlmKGluZGV4ID4gLTEpe1xuXHRcdFx0XHR0aGlzLmhpZGRlbkNvbHVtbnMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5nZW5lcmF0ZUNvbGxhcHNlZENvbnRlbnQoKTtcblxuXHRcdFx0aWYodGhpcy5jb2xsYXBzZUhhbmRsZUNvbHVtbiAmJiAhdGhpcy5oaWRkZW5Db2x1bW5zLmxlbmd0aCl7XG5cdFx0XHRcdHRoaXMuY29sbGFwc2VIYW5kbGVDb2x1bW4uaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vcmVkcmF3IGNvbHVtbnMgdG8gZml0IHNwYWNlXG5cdHVwZGF0ZSgpe1xuXHRcdHZhciB3b3JraW5nID0gdHJ1ZTtcblxuXHRcdHdoaWxlKHdvcmtpbmcpe1xuXG5cdFx0XHRsZXQgd2lkdGggPSB0aGlzLnRhYmxlLm1vZHVsZXMubGF5b3V0LmdldE1vZGUoKSA9PSBcImZpdENvbHVtbnNcIiA/IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5nZXRGbGV4QmFzZVdpZHRoKCkgOiB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0V2lkdGgoKTtcblxuXHRcdFx0bGV0IGRpZmYgPSAodGhpcy50YWJsZS5vcHRpb25zLmhlYWRlclZpc2libGUgPyB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZWxlbWVudC5jbGllbnRXaWR0aCA6IHRoaXMudGFibGUuZWxlbWVudC5jbGllbnRXaWR0aCkgLSB3aWR0aDtcblxuXHRcdFx0aWYoZGlmZiA8IDApe1xuXHRcdFx0XHQvL3RhYmxlIGlzIHRvbyB3aWRlXG5cdFx0XHRcdGxldCBjb2x1bW4gPSB0aGlzLmNvbHVtbnNbdGhpcy5pbmRleF07XG5cblx0XHRcdFx0aWYoY29sdW1uKXtcblx0XHRcdFx0XHR0aGlzLmhpZGVDb2x1bW4oY29sdW1uKTtcblx0XHRcdFx0XHR0aGlzLmluZGV4ICsrO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0d29ya2luZyA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdH1lbHNlIHtcblxuXHRcdFx0XHQvL3RhYmxlIGhhcyBzcGFyZSBzcGFjZVxuXHRcdFx0XHRsZXQgY29sdW1uID0gdGhpcy5jb2x1bW5zW3RoaXMuaW5kZXggLTFdO1xuXG5cdFx0XHRcdGlmKGNvbHVtbil7XG5cdFx0XHRcdFx0aWYoZGlmZiA+IDApe1xuXHRcdFx0XHRcdFx0aWYoZGlmZiA+PSBjb2x1bW4uZ2V0V2lkdGgoKSl7XG5cdFx0XHRcdFx0XHRcdHRoaXMuc2hvd0NvbHVtbihjb2x1bW4pO1xuXHRcdFx0XHRcdFx0XHR0aGlzLmluZGV4IC0tO1xuXHRcdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0XHR3b3JraW5nID0gZmFsc2U7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0d29ya2luZyA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHdvcmtpbmcgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZighdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmFjdGl2ZVJvd3NDb3VudCl7XG5cdFx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5yZW5kZXJFbXB0eVNjcm9sbCgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGdlbmVyYXRlQ29sbGFwc2VkQ29udGVudCgpe1xuXHRcdHZhciByb3dzID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldERpc3BsYXlSb3dzKCk7XG5cblx0XHRyb3dzLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0dGhpcy5nZW5lcmF0ZUNvbGxhcHNlZFJvd0NvbnRlbnQocm93KTtcblx0XHR9KTtcblx0fVxuXG5cdGdlbmVyYXRlQ29sbGFwc2VkUm93Q29udGVudChyb3cpe1xuXHRcdHZhciBlbCwgY29udGVudHM7XG5cblx0XHRpZihyb3cubW9kdWxlcy5yZXNwb25zaXZlTGF5b3V0KXtcblx0XHRcdGVsID0gcm93Lm1vZHVsZXMucmVzcG9uc2l2ZUxheW91dC5lbGVtZW50O1xuXG5cdFx0XHR3aGlsZShlbC5maXJzdENoaWxkKSBlbC5yZW1vdmVDaGlsZChlbC5maXJzdENoaWxkKTtcblxuXHRcdFx0Y29udGVudHMgPSB0aGlzLmNvbGxhcHNlRm9ybWF0dGVyKHRoaXMuZ2VuZXJhdGVDb2xsYXBzZWRSb3dEYXRhKHJvdykpO1xuXHRcdFx0aWYoY29udGVudHMpe1xuXHRcdFx0XHRlbC5hcHBlbmRDaGlsZChjb250ZW50cyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Z2VuZXJhdGVDb2xsYXBzZWRSb3dEYXRhKHJvdyl7XG5cdFx0dmFyIGRhdGEgPSByb3cuZ2V0RGF0YSgpLFxuXHRcdG91dHB1dCA9IFtdLFxuXHRcdG1vY2tDZWxsQ29tcG9uZW50O1xuXG5cdFx0dGhpcy5oaWRkZW5Db2x1bW5zLmZvckVhY2goKGNvbHVtbikgPT4ge1xuXHRcdFx0dmFyIHZhbHVlID0gY29sdW1uLmdldEZpZWxkVmFsdWUoZGF0YSk7XG5cblx0XHRcdGlmKGNvbHVtbi5kZWZpbml0aW9uLnRpdGxlICYmIGNvbHVtbi5maWVsZCl7XG5cdFx0XHRcdGlmKGNvbHVtbi5tb2R1bGVzLmZvcm1hdCAmJiB0aGlzLnRhYmxlLm9wdGlvbnMucmVzcG9uc2l2ZUxheW91dENvbGxhcHNlVXNlRm9ybWF0dGVycyl7XG5cblx0XHRcdFx0XHRtb2NrQ2VsbENvbXBvbmVudCA9IHtcblx0XHRcdFx0XHRcdHZhbHVlOmZhbHNlLFxuXHRcdFx0XHRcdFx0ZGF0YTp7fSxcblx0XHRcdFx0XHRcdGdldFZhbHVlOmZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRnZXREYXRhOmZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdGdldFR5cGU6ZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFwiY2VsbFwiO1xuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdGdldEVsZW1lbnQ6ZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0Z2V0Um93OmZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByb3cuZ2V0Q29tcG9uZW50KCk7XG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0Z2V0Q29sdW1uOmZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBjb2x1bW4uZ2V0Q29tcG9uZW50KCk7XG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0Z2V0VGFibGU6KCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy50YWJsZTtcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdGZ1bmN0aW9uIG9uUmVuZGVyZWQoY2FsbGJhY2spe1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRvdXRwdXQucHVzaCh7XG5cdFx0XHRcdFx0XHRmaWVsZDogY29sdW1uLmZpZWxkLFxuXHRcdFx0XHRcdFx0dGl0bGU6IGNvbHVtbi5kZWZpbml0aW9uLnRpdGxlLFxuXHRcdFx0XHRcdFx0dmFsdWU6IGNvbHVtbi5tb2R1bGVzLmZvcm1hdC5mb3JtYXR0ZXIuY2FsbCh0aGlzLnRhYmxlLm1vZHVsZXMuZm9ybWF0LCBtb2NrQ2VsbENvbXBvbmVudCwgY29sdW1uLm1vZHVsZXMuZm9ybWF0LnBhcmFtcywgb25SZW5kZXJlZClcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHtcblx0XHRcdFx0XHRcdGZpZWxkOiBjb2x1bW4uZmllbGQsXG5cdFx0XHRcdFx0XHR0aXRsZTogY29sdW1uLmRlZmluaXRpb24udGl0bGUsXG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdGZvcm1hdENvbGxhcHNlZERhdGEoZGF0YSl7XG5cdFx0dmFyIGxpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGFibGVcIik7XG5cblx0XHRkYXRhLmZvckVhY2goZnVuY3Rpb24oaXRlbSl7XG5cdFx0XHR2YXIgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRyXCIpO1xuXHRcdFx0dmFyIHRpdGxlRGF0YSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcblx0XHRcdHZhciB2YWx1ZURhdGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XG5cdFx0XHR2YXIgbm9kZV9jb250ZW50O1xuXG5cdFx0XHR2YXIgdGl0bGVIaWdobGlnaHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3Ryb25nXCIpO1xuXHRcdFx0dGl0bGVEYXRhLmFwcGVuZENoaWxkKHRpdGxlSGlnaGxpZ2h0KTtcblx0XHRcdHRoaXMubGFuZ0JpbmQoXCJjb2x1bW5zfFwiICsgaXRlbS5maWVsZCwgZnVuY3Rpb24odGV4dCl7XG5cdFx0XHRcdHRpdGxlSGlnaGxpZ2h0LmlubmVySFRNTCA9IHRleHQgfHwgaXRlbS50aXRsZTtcblx0XHRcdH0pO1xuXG5cdFx0XHRpZihpdGVtLnZhbHVlIGluc3RhbmNlb2YgTm9kZSl7XG5cdFx0XHRcdG5vZGVfY29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XHRcdG5vZGVfY29udGVudC5hcHBlbmRDaGlsZChpdGVtLnZhbHVlKTtcblx0XHRcdFx0dmFsdWVEYXRhLmFwcGVuZENoaWxkKG5vZGVfY29udGVudCk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHZhbHVlRGF0YS5pbm5lckhUTUwgPSBpdGVtLnZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHRyb3cuYXBwZW5kQ2hpbGQodGl0bGVEYXRhKTtcblx0XHRcdHJvdy5hcHBlbmRDaGlsZCh2YWx1ZURhdGEpO1xuXHRcdFx0bGlzdC5hcHBlbmRDaGlsZChyb3cpO1xuXHRcdH0sIHRoaXMpO1xuXG5cdFx0cmV0dXJuIE9iamVjdC5rZXlzKGRhdGEpLmxlbmd0aCA/IGxpc3QgOiBcIlwiO1xuXHR9XG59XG5cblJlc3BvbnNpdmVMYXlvdXQubW9kdWxlTmFtZSA9IFwicmVzcG9uc2l2ZUxheW91dFwiO1xuXG5jbGFzcyBTZWxlY3RSb3cgZXh0ZW5kcyBNb2R1bGV7XG5cdFxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXHRcdFxuXHRcdHRoaXMuc2VsZWN0aW5nID0gZmFsc2U7IC8vZmxhZyBzZWxlY3RpbmcgaW4gcHJvZ3Jlc3Ncblx0XHR0aGlzLmxhc3RDbGlja2VkUm93ID0gZmFsc2U7IC8vbGFzdCBjbGlja2VkIHJvd1xuXHRcdHRoaXMuc2VsZWN0UHJldiA9IFtdOyAvL2hvbGQgcHJldmlvdXNseSBzZWxlY3RlZCBlbGVtZW50IGZvciBkcmFnIGRyb3Agc2VsZWN0aW9uXG5cdFx0dGhpcy5zZWxlY3RlZFJvd3MgPSBbXTsgLy9ob2xkIHNlbGVjdGVkIHJvd3Ncblx0XHR0aGlzLmhlYWRlckNoZWNrYm94RWxlbWVudCA9IG51bGw7IC8vIGhvbGQgaGVhZGVyIHNlbGVjdCBlbGVtZW50XG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwic2VsZWN0YWJsZVwiLCBcImhpZ2hsaWdodFwiKTsgLy9oaWdobGlnaHQgcm93cyBvbiBob3ZlclxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInNlbGVjdGFibGVSYW5nZU1vZGVcIiwgXCJkcmFnXCIpOyAgLy9oaWdobGlnaHQgcm93cyBvbiBob3ZlclxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInNlbGVjdGFibGVSb2xsaW5nU2VsZWN0aW9uXCIsIHRydWUpOyAvL3JvbGwgc2VsZWN0aW9uIG9uY2UgbWF4aW11bSBudW1iZXIgb2Ygc2VsZWN0YWJsZSByb3dzIGlzIHJlYWNoZWRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJzZWxlY3RhYmxlUGVyc2lzdGVuY2VcIiwgdHJ1ZSk7IC8vIG1haW50YWluIHNlbGVjdGlvbiB3aGVuIHRhYmxlIHZpZXcgaXMgdXBkYXRlZFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInNlbGVjdGFibGVDaGVja1wiLCBmdW5jdGlvbihkYXRhLCByb3cpe3JldHVybiB0cnVlO30pOyAvL2NoZWNrIHdoZXRoZXIgcm93IGlzIHNlbGVjdGFibGVcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcInNlbGVjdFJvd1wiLCB0aGlzLnNlbGVjdFJvd3MuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJkZXNlbGVjdFJvd1wiLCB0aGlzLmRlc2VsZWN0Um93cy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcInRvZ2dsZVNlbGVjdFJvd1wiLCB0aGlzLnRvZ2dsZVJvdy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcImdldFNlbGVjdGVkUm93c1wiLCB0aGlzLmdldFNlbGVjdGVkUm93cy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcImdldFNlbGVjdGVkRGF0YVwiLCB0aGlzLmdldFNlbGVjdGVkRGF0YS5iaW5kKHRoaXMpKTtcblx0XHRcblx0XHQvL3JlZ2lzdGVyIGNvbXBvbmVudCBmdW5jdGlvbnNcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJyb3dcIiwgXCJzZWxlY3RcIiwgdGhpcy5zZWxlY3RSb3dzLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcInJvd1wiLCBcImRlc2VsZWN0XCIsIHRoaXMuZGVzZWxlY3RSb3dzLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcInJvd1wiLCBcInRvZ2dsZVNlbGVjdFwiLCB0aGlzLnRvZ2dsZVJvdy5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJyb3dcIiwgXCJpc1NlbGVjdGVkXCIsIHRoaXMuaXNSb3dTZWxlY3RlZC5iaW5kKHRoaXMpKTtcblx0fVxuXHRcblx0aW5pdGlhbGl6ZSgpe1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5zZWxlY3RhYmxlICE9PSBmYWxzZSl7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcInJvdy1pbml0XCIsIHRoaXMuaW5pdGlhbGl6ZVJvdy5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93LWRlbGV0aW5nXCIsIHRoaXMucm93RGVsZXRlZC5iaW5kKHRoaXMpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwicm93cy13aXBlXCIsIHRoaXMuY2xlYXJTZWxlY3Rpb25EYXRhLmJpbmQodGhpcykpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJyb3dzLXJldHJpZXZlXCIsIHRoaXMucm93UmV0cmlldmUuYmluZCh0aGlzKSk7XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5zZWxlY3RhYmxlICYmICF0aGlzLnRhYmxlLm9wdGlvbnMuc2VsZWN0YWJsZVBlcnNpc3RlbmNlKXtcblx0XHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJkYXRhLXJlZnJlc2hpbmdcIiwgdGhpcy5kZXNlbGVjdFJvd3MuYmluZCh0aGlzKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRyb3dSZXRyaWV2ZSh0eXBlLCBwcmV2VmFsdWUpe1xuXHRcdHJldHVybiB0eXBlID09PSBcInNlbGVjdGVkXCIgPyB0aGlzLnNlbGVjdGVkUm93cyA6IHByZXZWYWx1ZTtcblx0fVxuXHRcblx0cm93RGVsZXRlZChyb3cpe1xuXHRcdHRoaXMuX2Rlc2VsZWN0Um93KHJvdywgdHJ1ZSk7XG5cdH1cblx0XG5cdGNsZWFyU2VsZWN0aW9uRGF0YShzaWxlbnQpe1xuXHRcdHZhciBwcmV2U2VsZWN0ZWQgPSB0aGlzLnNlbGVjdGVkUm93cy5sZW5ndGg7XG5cblx0XHR0aGlzLnNlbGVjdGluZyA9IGZhbHNlO1xuXHRcdHRoaXMubGFzdENsaWNrZWRSb3cgPSBmYWxzZTtcblx0XHR0aGlzLnNlbGVjdFByZXYgPSBbXTtcblx0XHR0aGlzLnNlbGVjdGVkUm93cyA9IFtdO1xuXHRcdFxuXHRcdGlmKHByZXZTZWxlY3RlZCAmJiBzaWxlbnQgIT09IHRydWUpe1xuXHRcdFx0dGhpcy5fcm93U2VsZWN0aW9uQ2hhbmdlZCgpO1xuXHRcdH1cblx0fVxuXHRcblx0aW5pdGlhbGl6ZVJvdyhyb3cpe1xuXHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHRlbGVtZW50ID0gcm93LmdldEVsZW1lbnQoKTtcblx0XHRcblx0XHQvLyB0cmlnZ2VyIGVuZCBvZiByb3cgc2VsZWN0aW9uXG5cdFx0dmFyIGVuZFNlbGVjdCA9IGZ1bmN0aW9uKCl7XG5cdFx0XHRcblx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblx0XHRcdFx0c2VsZi5zZWxlY3RpbmcgPSBmYWxzZTtcblx0XHRcdH0sIDUwKTtcblx0XHRcdFxuXHRcdFx0ZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBlbmRTZWxlY3QpO1xuXHRcdH07XG5cdFx0XG5cdFx0cm93Lm1vZHVsZXMuc2VsZWN0ID0ge3NlbGVjdGVkOmZhbHNlfTtcblx0XHRcblx0XHQvL3NldCByb3cgc2VsZWN0aW9uIGNsYXNzXG5cdFx0aWYoc2VsZi5jaGVja1Jvd1NlbGVjdGFiaWxpdHkocm93KSl7XG5cdFx0XHRlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3Itc2VsZWN0YWJsZVwiKTtcblx0XHRcdGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcInRhYnVsYXRvci11bnNlbGVjdGFibGVcIik7XG5cdFx0XHRcblx0XHRcdGlmKHNlbGYudGFibGUub3B0aW9ucy5zZWxlY3RhYmxlICYmIHNlbGYudGFibGUub3B0aW9ucy5zZWxlY3RhYmxlICE9IFwiaGlnaGxpZ2h0XCIpe1xuXHRcdFx0XHRpZihzZWxmLnRhYmxlLm9wdGlvbnMuc2VsZWN0YWJsZVJhbmdlTW9kZSA9PT0gXCJjbGlja1wiKXtcblx0XHRcdFx0XHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmhhbmRsZUNvbXBsZXhSb3dDbGljay5iaW5kKHRoaXMsIHJvdykpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSl7XG5cdFx0XHRcdFx0XHRpZighc2VsZi50YWJsZS5tb2RFeGlzdHMoXCJlZGl0XCIpIHx8ICFzZWxmLnRhYmxlLm1vZHVsZXMuZWRpdC5nZXRDdXJyZW50Q2VsbCgpKXtcblx0XHRcdFx0XHRcdFx0c2VsZi50YWJsZS5fY2xlYXJTZWxlY3Rpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0aWYoIXNlbGYuc2VsZWN0aW5nKXtcblx0XHRcdFx0XHRcdFx0c2VsZi50b2dnbGVSb3cocm93KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgZnVuY3Rpb24oZSl7XG5cdFx0XHRcdFx0XHRpZihlLnNoaWZ0S2V5KXtcblx0XHRcdFx0XHRcdFx0c2VsZi50YWJsZS5fY2xlYXJTZWxlY3Rpb24oKTtcblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdHNlbGYuc2VsZWN0aW5nID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdHNlbGYuc2VsZWN0UHJldiA9IFtdO1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0ZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBlbmRTZWxlY3QpO1xuXHRcdFx0XHRcdFx0XHRkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCBlbmRTZWxlY3QpO1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0c2VsZi50b2dnbGVSb3cocm93KTtcblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsIGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRcdFx0aWYoc2VsZi5zZWxlY3Rpbmcpe1xuXHRcdFx0XHRcdFx0XHRzZWxmLnRhYmxlLl9jbGVhclNlbGVjdGlvbigpO1xuXHRcdFx0XHRcdFx0XHRzZWxmLnRvZ2dsZVJvdyhyb3cpO1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0aWYoc2VsZi5zZWxlY3RQcmV2WzFdID09IHJvdyl7XG5cdFx0XHRcdFx0XHRcdFx0c2VsZi50b2dnbGVSb3coc2VsZi5zZWxlY3RQcmV2WzBdKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKGUpe1xuXHRcdFx0XHRcdFx0aWYoc2VsZi5zZWxlY3Rpbmcpe1xuXHRcdFx0XHRcdFx0XHRzZWxmLnRhYmxlLl9jbGVhclNlbGVjdGlvbigpO1xuXHRcdFx0XHRcdFx0XHRzZWxmLnNlbGVjdFByZXYudW5zaGlmdChyb3cpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblx0XHR9ZWxzZSB7XG5cdFx0XHRlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItdW5zZWxlY3RhYmxlXCIpO1xuXHRcdFx0ZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwidGFidWxhdG9yLXNlbGVjdGFibGVcIik7XG5cdFx0fVxuXHR9XG5cdFxuXHRoYW5kbGVDb21wbGV4Um93Q2xpY2socm93LCBlKXtcblx0XHRpZihlLnNoaWZ0S2V5KXtcblx0XHRcdHRoaXMudGFibGUuX2NsZWFyU2VsZWN0aW9uKCk7XG5cdFx0XHR0aGlzLmxhc3RDbGlja2VkUm93ID0gdGhpcy5sYXN0Q2xpY2tlZFJvdyB8fCByb3c7XG5cdFx0XHRcblx0XHRcdHZhciBsYXN0Q2xpY2tlZFJvd0lkeCA9IHRoaXMudGFibGUucm93TWFuYWdlci5nZXREaXNwbGF5Um93SW5kZXgodGhpcy5sYXN0Q2xpY2tlZFJvdyk7XG5cdFx0XHR2YXIgcm93SWR4ID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldERpc3BsYXlSb3dJbmRleChyb3cpO1xuXHRcdFx0XG5cdFx0XHR2YXIgZnJvbVJvd0lkeCA9IGxhc3RDbGlja2VkUm93SWR4IDw9IHJvd0lkeCA/IGxhc3RDbGlja2VkUm93SWR4IDogcm93SWR4O1xuXHRcdFx0dmFyIHRvUm93SWR4ID0gbGFzdENsaWNrZWRSb3dJZHggPj0gcm93SWR4ID8gbGFzdENsaWNrZWRSb3dJZHggOiByb3dJZHg7XG5cdFx0XHRcblx0XHRcdHZhciByb3dzID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldERpc3BsYXlSb3dzKCkuc2xpY2UoMCk7XG5cdFx0XHR2YXIgdG9nZ2xlZFJvd3MgPSByb3dzLnNwbGljZShmcm9tUm93SWR4LCB0b1Jvd0lkeCAtIGZyb21Sb3dJZHggKyAxKTtcblx0XHRcdFxuXHRcdFx0aWYoZS5jdHJsS2V5IHx8IGUubWV0YUtleSl7XG5cdFx0XHRcdHRvZ2dsZWRSb3dzLmZvckVhY2goKHRvZ2dsZWRSb3cpPT57XG5cdFx0XHRcdFx0aWYodG9nZ2xlZFJvdyAhPT0gdGhpcy5sYXN0Q2xpY2tlZFJvdyl7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5zZWxlY3RhYmxlICE9PSB0cnVlICYmICF0aGlzLmlzUm93U2VsZWN0ZWQocm93KSl7XG5cdFx0XHRcdFx0XHRcdGlmKHRoaXMuc2VsZWN0ZWRSb3dzLmxlbmd0aCA8IHRoaXMudGFibGUub3B0aW9ucy5zZWxlY3RhYmxlKXtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLnRvZ2dsZVJvdyh0b2dnbGVkUm93KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0XHR0aGlzLnRvZ2dsZVJvdyh0b2dnbGVkUm93KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHR0aGlzLmxhc3RDbGlja2VkUm93ID0gcm93O1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmRlc2VsZWN0Um93cyh1bmRlZmluZWQsIHRydWUpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnNlbGVjdGFibGUgIT09IHRydWUpe1xuXHRcdFx0XHRcdGlmKHRvZ2dsZWRSb3dzLmxlbmd0aCA+IHRoaXMudGFibGUub3B0aW9ucy5zZWxlY3RhYmxlKXtcblx0XHRcdFx0XHRcdHRvZ2dsZWRSb3dzID0gdG9nZ2xlZFJvd3Muc2xpY2UoMCwgdGhpcy50YWJsZS5vcHRpb25zLnNlbGVjdGFibGUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5zZWxlY3RSb3dzKHRvZ2dsZWRSb3dzKTtcblx0XHRcdH1cblx0XHRcdHRoaXMudGFibGUuX2NsZWFyU2VsZWN0aW9uKCk7XG5cdFx0fVxuXHRcdGVsc2UgaWYoZS5jdHJsS2V5IHx8IGUubWV0YUtleSl7XG5cdFx0XHR0aGlzLnRvZ2dsZVJvdyhyb3cpO1xuXHRcdFx0dGhpcy5sYXN0Q2xpY2tlZFJvdyA9IHJvdztcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLmRlc2VsZWN0Um93cyh1bmRlZmluZWQsIHRydWUpO1xuXHRcdFx0dGhpcy5zZWxlY3RSb3dzKHJvdyk7XG5cdFx0XHR0aGlzLmxhc3RDbGlja2VkUm93ID0gcm93O1xuXHRcdH1cblx0fVxuXG5cdGNoZWNrUm93U2VsZWN0YWJpbGl0eShyb3cpe1xuXHRcdGlmKHJvdyAmJiByb3cudHlwZSA9PT0gXCJyb3dcIil7XG5cdFx0XHRyZXR1cm4gdGhpcy50YWJsZS5vcHRpb25zLnNlbGVjdGFibGVDaGVjay5jYWxsKHRoaXMudGFibGUsIHJvdy5nZXRDb21wb25lbnQoKSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdFxuXHQvL3RvZ2dsZSByb3cgc2VsZWN0aW9uXG5cdHRvZ2dsZVJvdyhyb3cpe1xuXHRcdGlmKHRoaXMuY2hlY2tSb3dTZWxlY3RhYmlsaXR5KHJvdykpe1xuXHRcdFx0aWYocm93Lm1vZHVsZXMuc2VsZWN0ICYmIHJvdy5tb2R1bGVzLnNlbGVjdC5zZWxlY3RlZCl7XG5cdFx0XHRcdHRoaXMuX2Rlc2VsZWN0Um93KHJvdyk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMuX3NlbGVjdFJvdyhyb3cpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0Ly9zZWxlY3QgYSBudW1iZXIgb2Ygcm93c1xuXHRzZWxlY3RSb3dzKHJvd3Mpe1xuXHRcdHZhciBjaGFuZ2VzID0gW10sIFxuXHRcdHJvd01hdGNoLCBjaGFuZ2U7XG5cdFx0XG5cdFx0c3dpdGNoKHR5cGVvZiByb3dzKXtcblx0XHRcdGNhc2UgXCJ1bmRlZmluZWRcIjpcblx0XHRcdFx0cm93TWF0Y2ggPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIucm93cztcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGNhc2UgXCJzdHJpbmdcIjpcblx0XHRcdFx0cm93TWF0Y2ggPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZmluZFJvdyhyb3dzKTtcblx0XHRcdFxuXHRcdFx0XHRpZighcm93TWF0Y2gpe1xuXHRcdFx0XHRcdHJvd01hdGNoID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldFJvd3Mocm93cyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJvd01hdGNoID0gcm93cztcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXG5cdFx0aWYoQXJyYXkuaXNBcnJheShyb3dNYXRjaCkpe1xuXHRcdFx0aWYocm93TWF0Y2gubGVuZ3RoKXtcblx0XHRcdFx0cm93TWF0Y2guZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRcdFx0Y2hhbmdlID0gdGhpcy5fc2VsZWN0Um93KHJvdywgdHJ1ZSwgdHJ1ZSk7XG5cblx0XHRcdFx0XHRpZihjaGFuZ2Upe1xuXHRcdFx0XHRcdFx0Y2hhbmdlcy5wdXNoKGNoYW5nZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHR0aGlzLl9yb3dTZWxlY3Rpb25DaGFuZ2VkKGZhbHNlLCBjaGFuZ2VzKTtcblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRpZihyb3dNYXRjaCl7XG5cdFx0XHRcdHRoaXMuX3NlbGVjdFJvdyhyb3dNYXRjaCwgZmFsc2UsIHRydWUpO1xuXHRcdFx0fVxuXHRcdH1cdFxuXHR9XG5cdFxuXHQvL3NlbGVjdCBhbiBpbmRpdmlkdWFsIHJvd1xuXHRfc2VsZWN0Um93KHJvd0luZm8sIHNpbGVudCwgZm9yY2Upe1xuXHRcdC8vaGFuZGxlIG1heCByb3cgY291bnRcblx0XHRpZighaXNOYU4odGhpcy50YWJsZS5vcHRpb25zLnNlbGVjdGFibGUpICYmIHRoaXMudGFibGUub3B0aW9ucy5zZWxlY3RhYmxlICE9PSB0cnVlICYmICFmb3JjZSl7XG5cdFx0XHRpZih0aGlzLnNlbGVjdGVkUm93cy5sZW5ndGggPj0gdGhpcy50YWJsZS5vcHRpb25zLnNlbGVjdGFibGUpe1xuXHRcdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuc2VsZWN0YWJsZVJvbGxpbmdTZWxlY3Rpb24pe1xuXHRcdFx0XHRcdHRoaXMuX2Rlc2VsZWN0Um93KHRoaXMuc2VsZWN0ZWRSb3dzWzBdKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHR2YXIgcm93ID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmZpbmRSb3cocm93SW5mbyk7XG5cdFx0XG5cdFx0aWYocm93KXtcblx0XHRcdGlmKHRoaXMuc2VsZWN0ZWRSb3dzLmluZGV4T2Yocm93KSA9PSAtMSl7XG5cdFx0XHRcdHJvdy5nZXRFbGVtZW50KCkuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1zZWxlY3RlZFwiKTtcblx0XHRcdFx0aWYoIXJvdy5tb2R1bGVzLnNlbGVjdCl7XG5cdFx0XHRcdFx0cm93Lm1vZHVsZXMuc2VsZWN0ID0ge307XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdHJvdy5tb2R1bGVzLnNlbGVjdC5zZWxlY3RlZCA9IHRydWU7XG5cdFx0XHRcdGlmKHJvdy5tb2R1bGVzLnNlbGVjdC5jaGVja2JveEVsKXtcblx0XHRcdFx0XHRyb3cubW9kdWxlcy5zZWxlY3QuY2hlY2tib3hFbC5jaGVja2VkID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5zZWxlY3RlZFJvd3MucHVzaChyb3cpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmRhdGFUcmVlU2VsZWN0UHJvcGFnYXRlKXtcblx0XHRcdFx0XHR0aGlzLmNoaWxkUm93U2VsZWN0aW9uKHJvdywgdHJ1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInJvd1NlbGVjdGVkXCIsIHJvdy5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLl9yb3dTZWxlY3Rpb25DaGFuZ2VkKHNpbGVudCwgcm93KTtcblxuXHRcdFx0XHRyZXR1cm4gcm93O1xuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGlmKCFzaWxlbnQpe1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJTZWxlY3Rpb24gRXJyb3IgLSBObyBzdWNoIHJvdyBmb3VuZCwgaWdub3Jpbmcgc2VsZWN0aW9uOlwiICsgcm93SW5mbyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRpc1Jvd1NlbGVjdGVkKHJvdyl7XG5cdFx0cmV0dXJuIHRoaXMuc2VsZWN0ZWRSb3dzLmluZGV4T2Yocm93KSAhPT0gLTE7XG5cdH1cblx0XG5cdC8vZGVzZWxlY3QgYSBudW1iZXIgb2Ygcm93c1xuXHRkZXNlbGVjdFJvd3Mocm93cywgc2lsZW50KXtcblx0XHR2YXIgY2hhbmdlcyA9IFtdLCBcblx0XHRyb3dNYXRjaCwgY2hhbmdlO1xuXHRcdFxuXHRcdHN3aXRjaCh0eXBlb2Ygcm93cyl7XG5cdFx0XHRjYXNlIFwidW5kZWZpbmVkXCI6XG5cdFx0XHRcdHJvd01hdGNoID0gT2JqZWN0LmFzc2lnbihbXSwgdGhpcy5zZWxlY3RlZFJvd3MpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0XHRyb3dNYXRjaCA9IHRoaXMudGFibGUucm93TWFuYWdlci5maW5kUm93KHJvd3MpO1xuXHRcdFx0XG5cdFx0XHRcdGlmKCFyb3dNYXRjaCl7XG5cdFx0XHRcdFx0cm93TWF0Y2ggPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0Um93cyhyb3dzKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0cm93TWF0Y2ggPSByb3dzO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cblx0XHRpZihBcnJheS5pc0FycmF5KHJvd01hdGNoKSl7XG5cdFx0XHRpZihyb3dNYXRjaC5sZW5ndGgpe1xuXHRcdFx0XHRyb3dNYXRjaC5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdFx0XHRjaGFuZ2UgPSB0aGlzLl9kZXNlbGVjdFJvdyhyb3csIHRydWUsIHRydWUpO1xuXG5cdFx0XHRcdFx0aWYoY2hhbmdlKXtcblx0XHRcdFx0XHRcdGNoYW5nZXMucHVzaChjaGFuZ2UpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0dGhpcy5fcm93U2VsZWN0aW9uQ2hhbmdlZChzaWxlbnQsIFtdLCBjaGFuZ2VzKTtcblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRpZihyb3dNYXRjaCl7XG5cdFx0XHRcdHRoaXMuX2Rlc2VsZWN0Um93KHJvd01hdGNoLCBzaWxlbnQsIHRydWUpO1xuXHRcdFx0fVxuXHRcdH1cdFxuXHR9XG5cdFxuXHQvL2Rlc2VsZWN0IGFuIGluZGl2aWR1YWwgcm93XG5cdF9kZXNlbGVjdFJvdyhyb3dJbmZvLCBzaWxlbnQpe1xuXHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHRyb3cgPSBzZWxmLnRhYmxlLnJvd01hbmFnZXIuZmluZFJvdyhyb3dJbmZvKSxcblx0XHRpbmRleCwgZWxlbWVudDtcblx0XHRcblx0XHRpZihyb3cpe1xuXHRcdFx0aW5kZXggPSBzZWxmLnNlbGVjdGVkUm93cy5maW5kSW5kZXgoZnVuY3Rpb24oc2VsZWN0ZWRSb3cpe1xuXHRcdFx0XHRyZXR1cm4gc2VsZWN0ZWRSb3cgPT0gcm93O1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdGlmKGluZGV4ID4gLTEpe1xuXG5cdFx0XHRcdGVsZW1lbnQgPSByb3cuZ2V0RWxlbWVudCgpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoZWxlbWVudCl7XG5cdFx0XHRcdFx0ZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwidGFidWxhdG9yLXNlbGVjdGVkXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRpZighcm93Lm1vZHVsZXMuc2VsZWN0KXtcblx0XHRcdFx0XHRyb3cubW9kdWxlcy5zZWxlY3QgPSB7fTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0cm93Lm1vZHVsZXMuc2VsZWN0LnNlbGVjdGVkID0gZmFsc2U7XG5cdFx0XHRcdGlmKHJvdy5tb2R1bGVzLnNlbGVjdC5jaGVja2JveEVsKXtcblx0XHRcdFx0XHRyb3cubW9kdWxlcy5zZWxlY3QuY2hlY2tib3hFbC5jaGVja2VkID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0c2VsZi5zZWxlY3RlZFJvd3Muc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5kYXRhVHJlZVNlbGVjdFByb3BhZ2F0ZSl7XG5cdFx0XHRcdFx0dGhpcy5jaGlsZFJvd1NlbGVjdGlvbihyb3csIGZhbHNlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwicm93RGVzZWxlY3RlZFwiLCByb3cuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdFx0XHRcblx0XHRcdFx0c2VsZi5fcm93U2VsZWN0aW9uQ2hhbmdlZChzaWxlbnQsIHVuZGVmaW5lZCwgcm93KTtcblxuXHRcdFx0XHRyZXR1cm4gcm93O1xuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGlmKCFzaWxlbnQpe1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJEZXNlbGVjdGlvbiBFcnJvciAtIE5vIHN1Y2ggcm93IGZvdW5kLCBpZ25vcmluZyBzZWxlY3Rpb246XCIgKyByb3dJbmZvKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdGdldFNlbGVjdGVkRGF0YSgpe1xuXHRcdHZhciBkYXRhID0gW107XG5cdFx0XG5cdFx0dGhpcy5zZWxlY3RlZFJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3cpe1xuXHRcdFx0ZGF0YS5wdXNoKHJvdy5nZXREYXRhKCkpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiBkYXRhO1xuXHR9XG5cdFxuXHRnZXRTZWxlY3RlZFJvd3MoKXtcblx0XHR2YXIgcm93cyA9IFtdO1xuXHRcdFxuXHRcdHRoaXMuc2VsZWN0ZWRSb3dzLmZvckVhY2goZnVuY3Rpb24ocm93KXtcblx0XHRcdHJvd3MucHVzaChyb3cuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiByb3dzO1xuXHR9XG5cdFxuXHRfcm93U2VsZWN0aW9uQ2hhbmdlZChzaWxlbnQsIHNlbGVjdGVkID0gW10sIGRlc2VsZWN0ZWQgPSBbXSl7XG5cdFx0aWYodGhpcy5oZWFkZXJDaGVja2JveEVsZW1lbnQpe1xuXHRcdFx0aWYodGhpcy5zZWxlY3RlZFJvd3MubGVuZ3RoID09PSAwKXtcblx0XHRcdFx0dGhpcy5oZWFkZXJDaGVja2JveEVsZW1lbnQuY2hlY2tlZCA9IGZhbHNlO1xuXHRcdFx0XHR0aGlzLmhlYWRlckNoZWNrYm94RWxlbWVudC5pbmRldGVybWluYXRlID0gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYodGhpcy50YWJsZS5yb3dNYW5hZ2VyLnJvd3MubGVuZ3RoID09PSB0aGlzLnNlbGVjdGVkUm93cy5sZW5ndGgpe1xuXHRcdFx0XHR0aGlzLmhlYWRlckNoZWNrYm94RWxlbWVudC5jaGVja2VkID0gdHJ1ZTtcblx0XHRcdFx0dGhpcy5oZWFkZXJDaGVja2JveEVsZW1lbnQuaW5kZXRlcm1pbmF0ZSA9IGZhbHNlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5oZWFkZXJDaGVja2JveEVsZW1lbnQuaW5kZXRlcm1pbmF0ZSA9IHRydWU7XG5cdFx0XHRcdHRoaXMuaGVhZGVyQ2hlY2tib3hFbGVtZW50LmNoZWNrZWQgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0aWYoIXNpbGVudCl7XG5cdFx0XHRpZighQXJyYXkuaXNBcnJheShzZWxlY3RlZCkpe1xuXHRcdFx0XHRzZWxlY3RlZCA9IFtzZWxlY3RlZF07XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdGVkID0gc2VsZWN0ZWQubWFwKHJvdyA9PiByb3cuZ2V0Q29tcG9uZW50KCkpO1xuXG5cdFx0XHRpZighQXJyYXkuaXNBcnJheShkZXNlbGVjdGVkKSl7XG5cdFx0XHRcdGRlc2VsZWN0ZWQgPSBbZGVzZWxlY3RlZF07XG5cdFx0XHR9XG5cblx0XHRcdGRlc2VsZWN0ZWQgPSBkZXNlbGVjdGVkLm1hcChyb3cgPT4gcm93LmdldENvbXBvbmVudCgpKTtcblxuXHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwicm93U2VsZWN0aW9uQ2hhbmdlZFwiLCB0aGlzLmdldFNlbGVjdGVkRGF0YSgpLCB0aGlzLmdldFNlbGVjdGVkUm93cygpLCBzZWxlY3RlZCwgZGVzZWxlY3RlZCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRyZWdpc3RlclJvd1NlbGVjdENoZWNrYm94IChyb3csIGVsZW1lbnQpIHtcblx0XHRpZighcm93Ll9yb3cubW9kdWxlcy5zZWxlY3Qpe1xuXHRcdFx0cm93Ll9yb3cubW9kdWxlcy5zZWxlY3QgPSB7fTtcblx0XHR9XG5cdFx0XG5cdFx0cm93Ll9yb3cubW9kdWxlcy5zZWxlY3QuY2hlY2tib3hFbCA9IGVsZW1lbnQ7XG5cdH1cblx0XG5cdHJlZ2lzdGVySGVhZGVyU2VsZWN0Q2hlY2tib3ggKGVsZW1lbnQpIHtcblx0XHR0aGlzLmhlYWRlckNoZWNrYm94RWxlbWVudCA9IGVsZW1lbnQ7XG5cdH1cblx0XG5cdGNoaWxkUm93U2VsZWN0aW9uKHJvdywgc2VsZWN0KXtcblx0XHR2YXIgY2hpbGRyZW4gPSB0aGlzLnRhYmxlLm1vZHVsZXMuZGF0YVRyZWUuZ2V0Q2hpbGRyZW4ocm93LCB0cnVlKTtcblx0XHRcblx0XHRpZihzZWxlY3Qpe1xuXHRcdFx0Zm9yKGxldCBjaGlsZCBvZiBjaGlsZHJlbil7XG5cdFx0XHRcdHRoaXMuX3NlbGVjdFJvdyhjaGlsZCwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0Zm9yKGxldCBjaGlsZCBvZiBjaGlsZHJlbil7XG5cdFx0XHRcdHRoaXMuX2Rlc2VsZWN0Um93KGNoaWxkLCB0cnVlKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuU2VsZWN0Um93Lm1vZHVsZU5hbWUgPSBcInNlbGVjdFJvd1wiO1xuXG4vL3NvcnQgbnVtYmVyc1xuZnVuY3Rpb24gbnVtYmVyJDEoYSwgYiwgYVJvdywgYlJvdywgY29sdW1uLCBkaXIsIHBhcmFtcyl7XG5cdHZhciBhbGlnbkVtcHR5VmFsdWVzID0gcGFyYW1zLmFsaWduRW1wdHlWYWx1ZXM7XG5cdHZhciBkZWNpbWFsID0gcGFyYW1zLmRlY2ltYWxTZXBhcmF0b3I7XG5cdHZhciB0aG91c2FuZCA9IHBhcmFtcy50aG91c2FuZFNlcGFyYXRvcjtcblx0dmFyIGVtcHR5QWxpZ24gPSAwO1xuXG5cdGEgPSBTdHJpbmcoYSk7XG5cdGIgPSBTdHJpbmcoYik7XG5cblx0aWYodGhvdXNhbmQpe1xuXHRcdGEgPSBhLnNwbGl0KHRob3VzYW5kKS5qb2luKFwiXCIpO1xuXHRcdGIgPSBiLnNwbGl0KHRob3VzYW5kKS5qb2luKFwiXCIpO1xuXHR9XG5cblx0aWYoZGVjaW1hbCl7XG5cdFx0YSA9IGEuc3BsaXQoZGVjaW1hbCkuam9pbihcIi5cIik7XG5cdFx0YiA9IGIuc3BsaXQoZGVjaW1hbCkuam9pbihcIi5cIik7XG5cdH1cblxuXHRhID0gcGFyc2VGbG9hdChhKTtcblx0YiA9IHBhcnNlRmxvYXQoYik7XG5cblx0Ly9oYW5kbGUgbm9uIG51bWVyaWMgdmFsdWVzXG5cdGlmKGlzTmFOKGEpKXtcblx0XHRlbXB0eUFsaWduID0gIGlzTmFOKGIpID8gMCA6IC0xO1xuXHR9ZWxzZSBpZihpc05hTihiKSl7XG5cdFx0ZW1wdHlBbGlnbiA9ICAxO1xuXHR9ZWxzZSB7XG5cdFx0Ly9jb21wYXJlIHZhbGlkIHZhbHVlc1xuXHRcdHJldHVybiBhIC0gYjtcblx0fVxuXG5cdC8vZml4IGVtcHR5IHZhbHVlcyBpbiBwb3NpdGlvblxuXHRpZigoYWxpZ25FbXB0eVZhbHVlcyA9PT0gXCJ0b3BcIiAmJiBkaXIgPT09IFwiZGVzY1wiKSB8fCAoYWxpZ25FbXB0eVZhbHVlcyA9PT0gXCJib3R0b21cIiAmJiBkaXIgPT09IFwiYXNjXCIpKXtcblx0XHRlbXB0eUFsaWduICo9IC0xO1xuXHR9XG5cblx0cmV0dXJuIGVtcHR5QWxpZ247XG59XG5cbi8vc29ydCBzdHJpbmdzXG5mdW5jdGlvbiBzdHJpbmcoYSwgYiwgYVJvdywgYlJvdywgY29sdW1uLCBkaXIsIHBhcmFtcyl7XG5cdHZhciBhbGlnbkVtcHR5VmFsdWVzID0gcGFyYW1zLmFsaWduRW1wdHlWYWx1ZXM7XG5cdHZhciBlbXB0eUFsaWduID0gMDtcblx0dmFyIGxvY2FsZTtcblxuXHQvL2hhbmRsZSBlbXB0eSB2YWx1ZXNcblx0aWYoIWEpe1xuXHRcdGVtcHR5QWxpZ24gPSAgIWIgPyAwIDogLTE7XG5cdH1lbHNlIGlmKCFiKXtcblx0XHRlbXB0eUFsaWduID0gIDE7XG5cdH1lbHNlIHtcblx0XHQvL2NvbXBhcmUgdmFsaWQgdmFsdWVzXG5cdFx0c3dpdGNoKHR5cGVvZiBwYXJhbXMubG9jYWxlKXtcblx0XHRcdGNhc2UgXCJib29sZWFuXCI6XG5cdFx0XHRcdGlmKHBhcmFtcy5sb2NhbGUpe1xuXHRcdFx0XHRcdGxvY2FsZSA9IHRoaXMubGFuZ0xvY2FsZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0XHRsb2NhbGUgPSBwYXJhbXMubG9jYWxlO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cblx0XHRyZXR1cm4gU3RyaW5nKGEpLnRvTG93ZXJDYXNlKCkubG9jYWxlQ29tcGFyZShTdHJpbmcoYikudG9Mb3dlckNhc2UoKSwgbG9jYWxlKTtcblx0fVxuXG5cdC8vZml4IGVtcHR5IHZhbHVlcyBpbiBwb3NpdGlvblxuXHRpZigoYWxpZ25FbXB0eVZhbHVlcyA9PT0gXCJ0b3BcIiAmJiBkaXIgPT09IFwiZGVzY1wiKSB8fCAoYWxpZ25FbXB0eVZhbHVlcyA9PT0gXCJib3R0b21cIiAmJiBkaXIgPT09IFwiYXNjXCIpKXtcblx0XHRlbXB0eUFsaWduICo9IC0xO1xuXHR9XG5cblx0cmV0dXJuIGVtcHR5QWxpZ247XG59XG5cbi8vc29ydCBkYXRldGltZVxuZnVuY3Rpb24gZGF0ZXRpbWUkMihhLCBiLCBhUm93LCBiUm93LCBjb2x1bW4sIGRpciwgcGFyYW1zKXtcblx0dmFyIERUID0gd2luZG93LkRhdGVUaW1lIHx8IGx1eG9uLkRhdGVUaW1lO1xuXHR2YXIgZm9ybWF0ID0gcGFyYW1zLmZvcm1hdCB8fCBcImRkL01NL3l5eXkgSEg6bW06c3NcIixcblx0YWxpZ25FbXB0eVZhbHVlcyA9IHBhcmFtcy5hbGlnbkVtcHR5VmFsdWVzLFxuXHRlbXB0eUFsaWduID0gMDtcblxuXHRpZih0eXBlb2YgRFQgIT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0aWYoIURULmlzRGF0ZVRpbWUoYSkpe1xuXHRcdFx0aWYoZm9ybWF0ID09PSBcImlzb1wiKXtcblx0XHRcdFx0YSA9IERULmZyb21JU08oU3RyaW5nKGEpKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0YSA9IERULmZyb21Gb3JtYXQoU3RyaW5nKGEpLCBmb3JtYXQpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmKCFEVC5pc0RhdGVUaW1lKGIpKXtcblx0XHRcdGlmKGZvcm1hdCA9PT0gXCJpc29cIil7XG5cdFx0XHRcdGIgPSBEVC5mcm9tSVNPKFN0cmluZyhiKSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGIgPSBEVC5mcm9tRm9ybWF0KFN0cmluZyhiKSwgZm9ybWF0KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZighYS5pc1ZhbGlkKXtcblx0XHRcdGVtcHR5QWxpZ24gPSAhYi5pc1ZhbGlkID8gMCA6IC0xO1xuXHRcdH1lbHNlIGlmKCFiLmlzVmFsaWQpe1xuXHRcdFx0ZW1wdHlBbGlnbiA9ICAxO1xuXHRcdH1lbHNlIHtcblx0XHRcdC8vY29tcGFyZSB2YWxpZCB2YWx1ZXNcblx0XHRcdHJldHVybiBhIC0gYjtcblx0XHR9XG5cblx0XHQvL2ZpeCBlbXB0eSB2YWx1ZXMgaW4gcG9zaXRpb25cblx0XHRpZigoYWxpZ25FbXB0eVZhbHVlcyA9PT0gXCJ0b3BcIiAmJiBkaXIgPT09IFwiZGVzY1wiKSB8fCAoYWxpZ25FbXB0eVZhbHVlcyA9PT0gXCJib3R0b21cIiAmJiBkaXIgPT09IFwiYXNjXCIpKXtcblx0XHRcdGVtcHR5QWxpZ24gKj0gLTE7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVtcHR5QWxpZ247XG5cblx0fWVsc2Uge1xuXHRcdGNvbnNvbGUuZXJyb3IoXCJTb3J0IEVycm9yIC0gJ2RhdGV0aW1lJyBzb3J0ZXIgaXMgZGVwZW5kYW50IG9uIGx1eG9uLmpzXCIpO1xuXHR9XG59XG5cbi8vc29ydCBkYXRlXG5mdW5jdGlvbiBkYXRlJDEoYSwgYiwgYVJvdywgYlJvdywgY29sdW1uLCBkaXIsIHBhcmFtcyl7XG5cdGlmKCFwYXJhbXMuZm9ybWF0KXtcblx0XHRwYXJhbXMuZm9ybWF0ID0gXCJkZC9NTS95eXl5XCI7XG5cdH1cblxuXHRyZXR1cm4gZGF0ZXRpbWUkMi5jYWxsKHRoaXMsIGEsIGIsIGFSb3csIGJSb3csIGNvbHVtbiwgZGlyLCBwYXJhbXMpO1xufVxuXG4vL3NvcnQgdGltZXNcbmZ1bmN0aW9uIHRpbWUkMShhLCBiLCBhUm93LCBiUm93LCBjb2x1bW4sIGRpciwgcGFyYW1zKXtcblx0aWYoIXBhcmFtcy5mb3JtYXQpe1xuXHRcdHBhcmFtcy5mb3JtYXQgPSBcIkhIOm1tXCI7XG5cdH1cblxuXHRyZXR1cm4gZGF0ZXRpbWUkMi5jYWxsKHRoaXMsIGEsIGIsIGFSb3csIGJSb3csIGNvbHVtbiwgZGlyLCBwYXJhbXMpO1xufVxuXG4vL3NvcnQgYm9vbGVhbnNcbmZ1bmN0aW9uIGJvb2xlYW4oYSwgYiwgYVJvdywgYlJvdywgY29sdW1uLCBkaXIsIHBhcmFtcyl7XG5cdHZhciBlbDEgPSBhID09PSB0cnVlIHx8IGEgPT09IFwidHJ1ZVwiIHx8IGEgPT09IFwiVHJ1ZVwiIHx8IGEgPT09IDEgPyAxIDogMDtcblx0dmFyIGVsMiA9IGIgPT09IHRydWUgfHwgYiA9PT0gXCJ0cnVlXCIgfHwgYiA9PT0gXCJUcnVlXCIgfHwgYiA9PT0gMSA/IDEgOiAwO1xuXG5cdHJldHVybiBlbDEgLSBlbDI7XG59XG5cbi8vc29ydCBpZiBlbGVtZW50IGNvbnRhaW5zIGFueSBkYXRhXG5mdW5jdGlvbiBhcnJheShhLCBiLCBhUm93LCBiUm93LCBjb2x1bW4sIGRpciwgcGFyYW1zKXtcblx0dmFyIHR5cGUgPSBwYXJhbXMudHlwZSB8fCBcImxlbmd0aFwiLFxuXHRhbGlnbkVtcHR5VmFsdWVzID0gcGFyYW1zLmFsaWduRW1wdHlWYWx1ZXMsXG5cdGVtcHR5QWxpZ24gPSAwO1xuXG5cdGZ1bmN0aW9uIGNhbGModmFsdWUpe1xuXHRcdHZhciByZXN1bHQ7XG5cblx0XHRzd2l0Y2godHlwZSl7XG5cdFx0XHRjYXNlIFwibGVuZ3RoXCI6XG5cdFx0XHRcdHJlc3VsdCA9IHZhbHVlLmxlbmd0aDtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgXCJzdW1cIjpcblx0XHRcdFx0cmVzdWx0ID0gdmFsdWUucmVkdWNlKGZ1bmN0aW9uKGMsIGQpe1xuXHRcdFx0XHRcdHJldHVybiBjICsgZDtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwibWF4XCI6XG5cdFx0XHRcdHJlc3VsdCA9IE1hdGgubWF4LmFwcGx5KG51bGwsIHZhbHVlKSA7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwibWluXCI6XG5cdFx0XHRcdHJlc3VsdCA9IE1hdGgubWluLmFwcGx5KG51bGwsIHZhbHVlKSA7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFwiYXZnXCI6XG5cdFx0XHRcdHJlc3VsdCA9IHZhbHVlLnJlZHVjZShmdW5jdGlvbihjLCBkKXtcblx0XHRcdFx0XHRyZXR1cm4gYyArIGQ7XG5cdFx0XHRcdH0pIC8gdmFsdWUubGVuZ3RoO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0Ly9oYW5kbGUgbm9uIGFycmF5IHZhbHVlc1xuXHRpZighQXJyYXkuaXNBcnJheShhKSl7XG5cdFx0ZW1wdHlBbGlnbiA9ICFBcnJheS5pc0FycmF5KGIpID8gMCA6IC0xO1xuXHR9ZWxzZSBpZighQXJyYXkuaXNBcnJheShiKSl7XG5cdFx0ZW1wdHlBbGlnbiA9IDE7XG5cdH1lbHNlIHtcblx0XHRyZXR1cm4gY2FsYyhiKSAtIGNhbGMoYSk7XG5cdH1cblxuXHQvL2ZpeCBlbXB0eSB2YWx1ZXMgaW4gcG9zaXRpb25cblx0aWYoKGFsaWduRW1wdHlWYWx1ZXMgPT09IFwidG9wXCIgJiYgZGlyID09PSBcImRlc2NcIikgfHwgKGFsaWduRW1wdHlWYWx1ZXMgPT09IFwiYm90dG9tXCIgJiYgZGlyID09PSBcImFzY1wiKSl7XG5cdFx0ZW1wdHlBbGlnbiAqPSAtMTtcblx0fVxuXG5cdHJldHVybiBlbXB0eUFsaWduO1xufVxuXG4vL3NvcnQgaWYgZWxlbWVudCBjb250YWlucyBhbnkgZGF0YVxuZnVuY3Rpb24gZXhpc3RzKGEsIGIsIGFSb3csIGJSb3csIGNvbHVtbiwgZGlyLCBwYXJhbXMpe1xuXHR2YXIgZWwxID0gdHlwZW9mIGEgPT0gXCJ1bmRlZmluZWRcIiA/IDAgOiAxO1xuXHR2YXIgZWwyID0gdHlwZW9mIGIgPT0gXCJ1bmRlZmluZWRcIiA/IDAgOiAxO1xuXG5cdHJldHVybiBlbDEgLSBlbDI7XG59XG5cbi8vc29ydCBhbHBoYSBudW1lcmljIHN0cmluZ3NcbmZ1bmN0aW9uIGFscGhhbnVtKGFzLCBicywgYVJvdywgYlJvdywgY29sdW1uLCBkaXIsIHBhcmFtcyl7XG5cdHZhciBhLCBiLCBhMSwgYjEsIGk9IDAsIEwsIHJ4ID0gLyhcXGQrKXwoXFxEKykvZywgcmQgPSAvXFxkLztcblx0dmFyIGFsaWduRW1wdHlWYWx1ZXMgPSBwYXJhbXMuYWxpZ25FbXB0eVZhbHVlcztcblx0dmFyIGVtcHR5QWxpZ24gPSAwO1xuXG5cdC8vaGFuZGxlIGVtcHR5IHZhbHVlc1xuXHRpZighYXMgJiYgYXMhPT0gMCl7XG5cdFx0ZW1wdHlBbGlnbiA9ICAhYnMgJiYgYnMhPT0gMCA/IDAgOiAtMTtcblx0fWVsc2UgaWYoIWJzICYmIGJzIT09IDApe1xuXHRcdGVtcHR5QWxpZ24gPSAgMTtcblx0fWVsc2Uge1xuXG5cdFx0aWYoaXNGaW5pdGUoYXMpICYmIGlzRmluaXRlKGJzKSkgcmV0dXJuIGFzIC0gYnM7XG5cdFx0YSA9IFN0cmluZyhhcykudG9Mb3dlckNhc2UoKTtcblx0XHRiID0gU3RyaW5nKGJzKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGlmKGEgPT09IGIpIHJldHVybiAwO1xuXHRcdGlmKCEocmQudGVzdChhKSAmJiByZC50ZXN0KGIpKSkgcmV0dXJuIGEgPiBiID8gMSA6IC0xO1xuXHRcdGEgPSBhLm1hdGNoKHJ4KTtcblx0XHRiID0gYi5tYXRjaChyeCk7XG5cdFx0TCA9IGEubGVuZ3RoID4gYi5sZW5ndGggPyBiLmxlbmd0aCA6IGEubGVuZ3RoO1xuXHRcdHdoaWxlKGkgPCBMKXtcblx0XHRcdGExPSBhW2ldO1xuXHRcdFx0YjE9IGJbaSsrXTtcblx0XHRcdGlmKGExICE9PSBiMSl7XG5cdFx0XHRcdGlmKGlzRmluaXRlKGExKSAmJiBpc0Zpbml0ZShiMSkpe1xuXHRcdFx0XHRcdGlmKGExLmNoYXJBdCgwKSA9PT0gXCIwXCIpIGExID0gXCIuXCIgKyBhMTtcblx0XHRcdFx0XHRpZihiMS5jaGFyQXQoMCkgPT09IFwiMFwiKSBiMSA9IFwiLlwiICsgYjE7XG5cdFx0XHRcdFx0cmV0dXJuIGExIC0gYjE7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSByZXR1cm4gYTEgPiBiMSA/IDEgOiAtMTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gYS5sZW5ndGggPiBiLmxlbmd0aDtcblx0fVxuXG5cdC8vZml4IGVtcHR5IHZhbHVlcyBpbiBwb3NpdGlvblxuXHRpZigoYWxpZ25FbXB0eVZhbHVlcyA9PT0gXCJ0b3BcIiAmJiBkaXIgPT09IFwiZGVzY1wiKSB8fCAoYWxpZ25FbXB0eVZhbHVlcyA9PT0gXCJib3R0b21cIiAmJiBkaXIgPT09IFwiYXNjXCIpKXtcblx0XHRlbXB0eUFsaWduICo9IC0xO1xuXHR9XG5cblx0cmV0dXJuIGVtcHR5QWxpZ247XG59XG5cbnZhciBkZWZhdWx0U29ydGVycyA9IHtcblx0bnVtYmVyOm51bWJlciQxLFxuXHRzdHJpbmc6c3RyaW5nLFxuXHRkYXRlOmRhdGUkMSxcblx0dGltZTp0aW1lJDEsXG5cdGRhdGV0aW1lOmRhdGV0aW1lJDIsXG5cdGJvb2xlYW46Ym9vbGVhbixcblx0YXJyYXk6YXJyYXksXG5cdGV4aXN0czpleGlzdHMsXG5cdGFscGhhbnVtOmFscGhhbnVtXG59O1xuXG5jbGFzcyBTb3J0IGV4dGVuZHMgTW9kdWxle1xuXG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cblx0XHR0aGlzLnNvcnRMaXN0ID0gW107IC8vaG9sZGVyIGN1cnJlbnQgc29ydFxuXHRcdHRoaXMuY2hhbmdlZCA9IGZhbHNlOyAvL2hhcyB0aGUgc29ydCBjaGFuZ2VkIHNpbmNlIGxhc3QgcmVuZGVyXG5cblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJzb3J0TW9kZVwiLCBcImxvY2FsXCIpOyAvL2xvY2FsIG9yIHJlbW90ZSBzb3J0aW5nXG5cblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJpbml0aWFsU29ydFwiLCBmYWxzZSk7IC8vaW5pdGlhbCBzb3J0aW5nIGNyaXRlcmlhXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwiY29sdW1uSGVhZGVyU29ydE11bHRpXCIsIHRydWUpOyAvL211bHRpcGxlIG9yIHNpbmdsZSBjb2x1bW4gc29ydGluZ1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInNvcnRPcmRlclJldmVyc2VcIiwgZmFsc2UpOyAvL3JldmVyc2UgaW50ZXJuYWwgc29ydCBvcmRlcmluZ1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImhlYWRlclNvcnRFbGVtZW50XCIsIFwiPGRpdiBjbGFzcz0ndGFidWxhdG9yLWFycm93Jz48L2Rpdj5cIik7IC8vaGVhZGVyIHNvcnQgZWxlbWVudFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImhlYWRlclNvcnRDbGlja0VsZW1lbnRcIiwgXCJoZWFkZXJcIik7IC8vZWxlbWVudCB3aGljaCB0cmlnZ2VycyBzb3J0IHdoZW4gY2xpY2tlZFxuXG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcInNvcnRlclwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwic29ydGVyUGFyYW1zXCIpO1xuXG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImhlYWRlclNvcnRcIiwgdHJ1ZSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcImhlYWRlclNvcnRTdGFydGluZ0RpclwiKTtcblx0XHR0aGlzLnJlZ2lzdGVyQ29sdW1uT3B0aW9uKFwiaGVhZGVyU29ydFRyaXN0YXRlXCIpO1xuXG5cdH1cblxuXHRpbml0aWFsaXplKCl7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4tbGF5b3V0XCIsIHRoaXMuaW5pdGlhbGl6ZUNvbHVtbi5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcInRhYmxlLWJ1aWx0XCIsIHRoaXMudGFibGVCdWlsdC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyRGF0YUhhbmRsZXIodGhpcy5zb3J0LmJpbmQodGhpcyksIDIwKTtcblxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwic2V0U29ydFwiLCB0aGlzLnVzZXJTZXRTb3J0LmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwiZ2V0U29ydGVyc1wiLCB0aGlzLmdldFNvcnQuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJjbGVhclNvcnRcIiwgdGhpcy5jbGVhclNvcnQuYmluZCh0aGlzKSk7XG5cblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuc29ydE1vZGUgPT09IFwicmVtb3RlXCIpe1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoXCJkYXRhLXBhcmFtc1wiLCB0aGlzLnJlbW90ZVNvcnRQYXJhbXMuYmluZCh0aGlzKSk7XG5cdFx0fVxuXHR9XG5cblx0dGFibGVCdWlsdCgpe1xuXHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5pbml0aWFsU29ydCl7XG5cdFx0XHR0aGlzLnNldFNvcnQodGhpcy50YWJsZS5vcHRpb25zLmluaXRpYWxTb3J0KTtcblx0XHR9XG5cdH1cblxuXHRyZW1vdGVTb3J0UGFyYW1zKGRhdGEsIGNvbmZpZywgc2lsZW50LCBwYXJhbXMpe1xuXHRcdHZhciBzb3J0ZXJzID0gdGhpcy5nZXRTb3J0KCk7XG5cblx0XHRzb3J0ZXJzLmZvckVhY2goKGl0ZW0pID0+IHtcblx0XHRcdGRlbGV0ZSBpdGVtLmNvbHVtbjtcblx0XHR9KTtcblxuXHRcdHBhcmFtcy5zb3J0ID0gc29ydGVycztcblxuXHRcdHJldHVybiBwYXJhbXM7XG5cdH1cblxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLyBUYWJsZSBGdW5jdGlvbnMgLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0dXNlclNldFNvcnQoc29ydExpc3QsIGRpcil7XG5cdFx0dGhpcy5zZXRTb3J0KHNvcnRMaXN0LCBkaXIpO1xuXHRcdC8vIHRoaXMudGFibGUucm93TWFuYWdlci5zb3J0ZXJSZWZyZXNoKCk7XG5cdFx0dGhpcy5yZWZyZXNoU29ydCgpO1xuXHR9XG5cblx0Y2xlYXJTb3J0KCl7XG5cdFx0dGhpcy5jbGVhcigpO1xuXHRcdC8vIHRoaXMudGFibGUucm93TWFuYWdlci5zb3J0ZXJSZWZyZXNoKCk7XG5cdFx0dGhpcy5yZWZyZXNoU29ydCgpO1xuXHR9XG5cblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8gSW50ZXJuYWwgTG9naWMgLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdC8vaW5pdGlhbGl6ZSBjb2x1bW4gaGVhZGVyIGZvciBzb3J0aW5nXG5cdGluaXRpYWxpemVDb2x1bW4oY29sdW1uKXtcblx0XHR2YXIgc29ydGVyID0gZmFsc2UsXG5cdFx0Y29sRWwsXG5cdFx0YXJyb3dFbDtcblxuXHRcdHN3aXRjaCh0eXBlb2YgY29sdW1uLmRlZmluaXRpb24uc29ydGVyKXtcblx0XHRcdGNhc2UgXCJzdHJpbmdcIjpcblx0XHRcdFx0aWYoU29ydC5zb3J0ZXJzW2NvbHVtbi5kZWZpbml0aW9uLnNvcnRlcl0pe1xuXHRcdFx0XHRcdHNvcnRlciA9IFNvcnQuc29ydGVyc1tjb2x1bW4uZGVmaW5pdGlvbi5zb3J0ZXJdO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiU29ydCBFcnJvciAtIE5vIHN1Y2ggc29ydGVyIGZvdW5kOiBcIiwgY29sdW1uLmRlZmluaXRpb24uc29ydGVyKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHRcdHNvcnRlciA9IGNvbHVtbi5kZWZpbml0aW9uLnNvcnRlcjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXG5cdFx0Y29sdW1uLm1vZHVsZXMuc29ydCA9IHtcblx0XHRcdHNvcnRlcjpzb3J0ZXIsIGRpcjpcIm5vbmVcIixcblx0XHRcdHBhcmFtczpjb2x1bW4uZGVmaW5pdGlvbi5zb3J0ZXJQYXJhbXMgfHwge30sXG5cdFx0XHRzdGFydGluZ0Rpcjpjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJTb3J0U3RhcnRpbmdEaXIgfHwgXCJhc2NcIixcblx0XHRcdHRyaXN0YXRlOiBjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJTb3J0VHJpc3RhdGUsXG5cdFx0fTtcblxuXHRcdGlmKGNvbHVtbi5kZWZpbml0aW9uLmhlYWRlclNvcnQgIT09IGZhbHNlKXtcblxuXHRcdFx0Y29sRWwgPSBjb2x1bW4uZ2V0RWxlbWVudCgpO1xuXG5cdFx0XHRjb2xFbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXNvcnRhYmxlXCIpO1xuXG5cdFx0XHRhcnJvd0VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcdGFycm93RWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1jb2wtc29ydGVyXCIpO1xuXG5cdFx0XHRzd2l0Y2godGhpcy50YWJsZS5vcHRpb25zLmhlYWRlclNvcnRDbGlja0VsZW1lbnQpe1xuXHRcdFx0XHRjYXNlIFwiaWNvblwiOlxuXHRcdFx0XHRcdGFycm93RWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1jb2wtc29ydGVyLWVsZW1lbnRcIik7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJoZWFkZXJcIjpcblx0XHRcdFx0XHRjb2xFbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWNvbC1zb3J0ZXItZWxlbWVudFwiKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRjb2xFbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWNvbC1zb3J0ZXItZWxlbWVudFwiKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblxuXHRcdFx0c3dpdGNoKHRoaXMudGFibGUub3B0aW9ucy5oZWFkZXJTb3J0RWxlbWVudCl7XG5cdFx0XHRcdGNhc2UgXCJmdW5jdGlvblwiOlxuXHRcdFx0XHRcdC8vZG8gbm90aGluZ1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgXCJvYmplY3RcIjpcblx0XHRcdFx0XHRhcnJvd0VsLmFwcGVuZENoaWxkKHRoaXMudGFibGUub3B0aW9ucy5oZWFkZXJTb3J0RWxlbWVudCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0YXJyb3dFbC5pbm5lckhUTUwgPSB0aGlzLnRhYmxlLm9wdGlvbnMuaGVhZGVyU29ydEVsZW1lbnQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vY3JlYXRlIHNvcnRlciBhcnJvd1xuXHRcdFx0Y29sdW1uLnRpdGxlSG9sZGVyRWxlbWVudC5hcHBlbmRDaGlsZChhcnJvd0VsKTtcblxuXHRcdFx0Y29sdW1uLm1vZHVsZXMuc29ydC5lbGVtZW50ID0gYXJyb3dFbDtcblxuXHRcdFx0dGhpcy5zZXRDb2x1bW5IZWFkZXJTb3J0SWNvbihjb2x1bW4sIFwibm9uZVwiKTtcblxuXHRcdFx0Ly9zb3J0IG9uIGNsaWNrXG5cdFx0XHQodGhpcy50YWJsZS5vcHRpb25zLmhlYWRlclNvcnRDbGlja0VsZW1lbnQgPT09IFwiaWNvblwiID8gYXJyb3dFbCA6IGNvbEVsKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcblx0XHRcdFx0dmFyIGRpciA9IFwiXCIsXG5cdFx0XHRcdHNvcnRlcnM9W10sXG5cdFx0XHRcdG1hdGNoID0gZmFsc2U7XG5cblx0XHRcdFx0aWYoY29sdW1uLm1vZHVsZXMuc29ydCl7XG5cdFx0XHRcdFx0aWYoY29sdW1uLm1vZHVsZXMuc29ydC50cmlzdGF0ZSl7XG5cdFx0XHRcdFx0XHRpZihjb2x1bW4ubW9kdWxlcy5zb3J0LmRpciA9PSBcIm5vbmVcIil7XG5cdFx0XHRcdFx0XHRcdGRpciA9IGNvbHVtbi5tb2R1bGVzLnNvcnQuc3RhcnRpbmdEaXI7XG5cdFx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGlmKGNvbHVtbi5tb2R1bGVzLnNvcnQuZGlyID09IGNvbHVtbi5tb2R1bGVzLnNvcnQuc3RhcnRpbmdEaXIpe1xuXHRcdFx0XHRcdFx0XHRcdGRpciA9IGNvbHVtbi5tb2R1bGVzLnNvcnQuZGlyID09IFwiYXNjXCIgPyBcImRlc2NcIiA6IFwiYXNjXCI7XG5cdFx0XHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRkaXIgPSBcIm5vbmVcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdHN3aXRjaChjb2x1bW4ubW9kdWxlcy5zb3J0LmRpcil7XG5cdFx0XHRcdFx0XHRcdGNhc2UgXCJhc2NcIjpcblx0XHRcdFx0XHRcdFx0XHRkaXIgPSBcImRlc2NcIjtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0XHRjYXNlIFwiZGVzY1wiOlxuXHRcdFx0XHRcdFx0XHRcdGRpciA9IFwiYXNjXCI7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0XHRkaXIgPSBjb2x1bW4ubW9kdWxlcy5zb3J0LnN0YXJ0aW5nRGlyO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICh0aGlzLnRhYmxlLm9wdGlvbnMuY29sdW1uSGVhZGVyU29ydE11bHRpICYmIChlLnNoaWZ0S2V5IHx8IGUuY3RybEtleSkpIHtcblx0XHRcdFx0XHRcdHNvcnRlcnMgPSB0aGlzLmdldFNvcnQoKTtcblxuXHRcdFx0XHRcdFx0bWF0Y2ggPSBzb3J0ZXJzLmZpbmRJbmRleCgoc29ydGVyKSA9PiB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBzb3J0ZXIuZmllbGQgPT09IGNvbHVtbi5nZXRGaWVsZCgpO1xuXHRcdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHRcdGlmKG1hdGNoID4gLTEpe1xuXHRcdFx0XHRcdFx0XHRzb3J0ZXJzW21hdGNoXS5kaXIgPSBkaXI7XG5cblx0XHRcdFx0XHRcdFx0bWF0Y2ggPSBzb3J0ZXJzLnNwbGljZShtYXRjaCwgMSlbMF07XG5cdFx0XHRcdFx0XHRcdGlmKGRpciAhPSBcIm5vbmVcIil7XG5cdFx0XHRcdFx0XHRcdFx0c29ydGVycy5wdXNoKG1hdGNoKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0XHRpZihkaXIgIT0gXCJub25lXCIpe1xuXHRcdFx0XHRcdFx0XHRcdHNvcnRlcnMucHVzaCh7Y29sdW1uOmNvbHVtbiwgZGlyOmRpcn0pO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vYWRkIHRvIGV4aXN0aW5nIHNvcnRcblx0XHRcdFx0XHRcdHRoaXMuc2V0U29ydChzb3J0ZXJzKTtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRpZihkaXIgPT0gXCJub25lXCIpe1xuXHRcdFx0XHRcdFx0XHR0aGlzLmNsZWFyKCk7XG5cdFx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vc29ydCBieSBjb2x1bW4gb25seVxuXHRcdFx0XHRcdFx0XHR0aGlzLnNldFNvcnQoY29sdW1uLCBkaXIpO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLnNvcnRlclJlZnJlc2goIXRoaXMuc29ydExpc3QubGVuZ3RoKTtcblx0XHRcdFx0XHR0aGlzLnJlZnJlc2hTb3J0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdHJlZnJlc2hTb3J0KCl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnNvcnRNb2RlID09PSBcInJlbW90ZVwiKXtcblx0XHRcdHRoaXMucmVsb2FkRGF0YShudWxsLCBmYWxzZSwgZmFsc2UpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMucmVmcmVzaERhdGEodHJ1ZSk7XG5cdFx0fVxuXG5cdFx0Ly9UT0RPIC0gUGVyc2lzdCBsZWZ0IHBvc2l0aW9uIG9mIHJvdyBtYW5hZ2VyXG5cdFx0Ly8gbGVmdCA9IHRoaXMuc2Nyb2xsTGVmdDtcblx0XHQvLyB0aGlzLnNjcm9sbEhvcml6b250YWwobGVmdCk7XG5cdH1cblxuXHQvL2NoZWNrIGlmIHRoZSBzb3J0ZXJzIGhhdmUgY2hhbmdlZCBzaW5jZSBsYXN0IHVzZVxuXHRoYXNDaGFuZ2VkKCl7XG5cdFx0dmFyIGNoYW5nZWQgPSB0aGlzLmNoYW5nZWQ7XG5cdFx0dGhpcy5jaGFuZ2VkID0gZmFsc2U7XG5cdFx0cmV0dXJuIGNoYW5nZWQ7XG5cdH1cblxuXHQvL3JldHVybiBjdXJyZW50IHNvcnRlcnNcblx0Z2V0U29ydCgpe1xuXHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHRzb3J0ZXJzID0gW107XG5cblx0XHRzZWxmLnNvcnRMaXN0LmZvckVhY2goZnVuY3Rpb24oaXRlbSl7XG5cdFx0XHRpZihpdGVtLmNvbHVtbil7XG5cdFx0XHRcdHNvcnRlcnMucHVzaCh7Y29sdW1uOml0ZW0uY29sdW1uLmdldENvbXBvbmVudCgpLCBmaWVsZDppdGVtLmNvbHVtbi5nZXRGaWVsZCgpLCBkaXI6aXRlbS5kaXJ9KTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHJldHVybiBzb3J0ZXJzO1xuXHR9XG5cblx0Ly9jaGFuZ2Ugc29ydCBsaXN0IGFuZCB0cmlnZ2VyIHNvcnRcblx0c2V0U29ydChzb3J0TGlzdCwgZGlyKXtcblx0XHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0bmV3U29ydExpc3QgPSBbXTtcblxuXHRcdGlmKCFBcnJheS5pc0FycmF5KHNvcnRMaXN0KSl7XG5cdFx0XHRzb3J0TGlzdCA9IFt7Y29sdW1uOiBzb3J0TGlzdCwgZGlyOmRpcn1dO1xuXHRcdH1cblxuXHRcdHNvcnRMaXN0LmZvckVhY2goZnVuY3Rpb24oaXRlbSl7XG5cdFx0XHR2YXIgY29sdW1uO1xuXG5cdFx0XHRjb2x1bW4gPSBzZWxmLnRhYmxlLmNvbHVtbk1hbmFnZXIuZmluZENvbHVtbihpdGVtLmNvbHVtbik7XG5cblx0XHRcdGlmKGNvbHVtbil7XG5cdFx0XHRcdGl0ZW0uY29sdW1uID0gY29sdW1uO1xuXHRcdFx0XHRuZXdTb3J0TGlzdC5wdXNoKGl0ZW0pO1xuXHRcdFx0XHRzZWxmLmNoYW5nZWQgPSB0cnVlO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJTb3J0IFdhcm5pbmcgLSBTb3J0IGZpZWxkIGRvZXMgbm90IGV4aXN0IGFuZCBpcyBiZWluZyBpZ25vcmVkOiBcIiwgaXRlbS5jb2x1bW4pO1xuXHRcdFx0fVxuXG5cdFx0fSk7XG5cblx0XHRzZWxmLnNvcnRMaXN0ID0gbmV3U29ydExpc3Q7XG5cblx0XHR0aGlzLmRpc3BhdGNoKFwic29ydC1jaGFuZ2VkXCIpO1xuXHR9XG5cblx0Ly9jbGVhciBzb3J0ZXJzXG5cdGNsZWFyKCl7XG5cdFx0dGhpcy5zZXRTb3J0KFtdKTtcblx0fVxuXG5cdC8vZmluZCBhcHByb3ByaWF0ZSBzb3J0ZXIgZm9yIGNvbHVtblxuXHRmaW5kU29ydGVyKGNvbHVtbil7XG5cdFx0dmFyIHJvdyA9IHRoaXMudGFibGUucm93TWFuYWdlci5hY3RpdmVSb3dzWzBdLFxuXHRcdHNvcnRlciA9IFwic3RyaW5nXCIsXG5cdFx0ZmllbGQsIHZhbHVlO1xuXG5cdFx0aWYocm93KXtcblx0XHRcdHJvdyA9IHJvdy5nZXREYXRhKCk7XG5cdFx0XHRmaWVsZCA9IGNvbHVtbi5nZXRGaWVsZCgpO1xuXG5cdFx0XHRpZihmaWVsZCl7XG5cblx0XHRcdFx0dmFsdWUgPSBjb2x1bW4uZ2V0RmllbGRWYWx1ZShyb3cpO1xuXG5cdFx0XHRcdHN3aXRjaCh0eXBlb2YgdmFsdWUpe1xuXHRcdFx0XHRcdGNhc2UgXCJ1bmRlZmluZWRcIjpcblx0XHRcdFx0XHRcdHNvcnRlciA9IFwic3RyaW5nXCI7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgXCJib29sZWFuXCI6XG5cdFx0XHRcdFx0XHRzb3J0ZXIgPSBcImJvb2xlYW5cIjtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdGlmKCFpc05hTih2YWx1ZSkgJiYgdmFsdWUgIT09IFwiXCIpe1xuXHRcdFx0XHRcdFx0XHRzb3J0ZXIgPSBcIm51bWJlclwiO1xuXHRcdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0XHRpZih2YWx1ZS5tYXRjaCgvKCheWzAtOV0rW2Etel0rKXwoXlthLXpdK1swLTldKykpKyQvaSkpe1xuXHRcdFx0XHRcdFx0XHRcdHNvcnRlciA9IFwiYWxwaGFudW1cIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gU29ydC5zb3J0ZXJzW3NvcnRlcl07XG5cdH1cblxuXHQvL3dvcmsgdGhyb3VnaCBzb3J0IGxpc3Qgc29ydGluZyBkYXRhXG5cdHNvcnQoZGF0YSl7XG5cdFx0dmFyIHNlbGYgPSB0aGlzLFxuXHRcdHNvcnRMaXN0ID0gdGhpcy50YWJsZS5vcHRpb25zLnNvcnRPcmRlclJldmVyc2UgPyBzZWxmLnNvcnRMaXN0LnNsaWNlKCkucmV2ZXJzZSgpIDogc2VsZi5zb3J0TGlzdCxcblx0XHRzb3J0TGlzdEFjdHVhbCA9IFtdLFxuXHRcdHJvd0NvbXBvbmVudHMgPSBbXTtcblxuXHRcdGlmKHRoaXMuc3Vic2NyaWJlZEV4dGVybmFsKFwiZGF0YVNvcnRpbmdcIikpe1xuXHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwiZGF0YVNvcnRpbmdcIiwgc2VsZi5nZXRTb3J0KCkpO1xuXHRcdH1cblxuXHRcdHNlbGYuY2xlYXJDb2x1bW5IZWFkZXJzKCk7XG5cblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuc29ydE1vZGUgIT09IFwicmVtb3RlXCIpe1xuXG5cdFx0XHQvL2J1aWxkIGxpc3Qgb2YgdmFsaWQgc29ydGVycyBhbmQgdHJpZ2dlciBjb2x1bW4gc3BlY2lmaWMgY2FsbGJhY2tzIGJlZm9yZSBzb3J0IGJlZ2luc1xuXHRcdFx0c29ydExpc3QuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpKXtcblx0XHRcdFx0dmFyIHNvcnRPYmo7XG5cblx0XHRcdFx0aWYoaXRlbS5jb2x1bW4pe1xuXHRcdFx0XHRcdHNvcnRPYmogPSBpdGVtLmNvbHVtbi5tb2R1bGVzLnNvcnQ7XG5cblx0XHRcdFx0XHRpZihzb3J0T2JqKXtcblxuXHRcdFx0XHRcdFx0Ly9pZiBubyBzb3J0ZXIgaGFzIGJlZW4gZGVmaW5lZCwgdGFrZSBhIGd1ZXNzXG5cdFx0XHRcdFx0XHRpZighc29ydE9iai5zb3J0ZXIpe1xuXHRcdFx0XHRcdFx0XHRzb3J0T2JqLnNvcnRlciA9IHNlbGYuZmluZFNvcnRlcihpdGVtLmNvbHVtbik7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGl0ZW0ucGFyYW1zID0gdHlwZW9mIHNvcnRPYmoucGFyYW1zID09PSBcImZ1bmN0aW9uXCIgPyBzb3J0T2JqLnBhcmFtcyhpdGVtLmNvbHVtbi5nZXRDb21wb25lbnQoKSwgaXRlbS5kaXIpIDogc29ydE9iai5wYXJhbXM7XG5cblx0XHRcdFx0XHRcdHNvcnRMaXN0QWN0dWFsLnB1c2goaXRlbSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0c2VsZi5zZXRDb2x1bW5IZWFkZXIoaXRlbS5jb2x1bW4sIGl0ZW0uZGlyKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdC8vc29ydCBkYXRhXG5cdFx0XHRpZiAoc29ydExpc3RBY3R1YWwubGVuZ3RoKSB7XG5cdFx0XHRcdHNlbGYuX3NvcnRJdGVtcyhkYXRhLCBzb3J0TGlzdEFjdHVhbCk7XG5cdFx0XHR9XG5cblx0XHR9ZWxzZSB7XG5cdFx0XHRzb3J0TGlzdC5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGkpe1xuXHRcdFx0XHRzZWxmLnNldENvbHVtbkhlYWRlcihpdGVtLmNvbHVtbiwgaXRlbS5kaXIpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYodGhpcy5zdWJzY3JpYmVkRXh0ZXJuYWwoXCJkYXRhU29ydGVkXCIpKXtcblx0XHRcdGRhdGEuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRcdHJvd0NvbXBvbmVudHMucHVzaChyb3cuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcImRhdGFTb3J0ZWRcIiwgc2VsZi5nZXRTb3J0KCksIHJvd0NvbXBvbmVudHMpO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXHR9XG5cblx0Ly9jbGVhciBzb3J0IGFycm93cyBvbiBjb2x1bW5zXG5cdGNsZWFyQ29sdW1uSGVhZGVycygpe1xuXHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5nZXRSZWFsQ29sdW1ucygpLmZvckVhY2goKGNvbHVtbikgPT4ge1xuXHRcdFx0aWYoY29sdW1uLm1vZHVsZXMuc29ydCl7XG5cdFx0XHRcdGNvbHVtbi5tb2R1bGVzLnNvcnQuZGlyID0gXCJub25lXCI7XG5cdFx0XHRcdGNvbHVtbi5nZXRFbGVtZW50KCkuc2V0QXR0cmlidXRlKFwiYXJpYS1zb3J0XCIsIFwibm9uZVwiKTtcblx0XHRcdFx0dGhpcy5zZXRDb2x1bW5IZWFkZXJTb3J0SWNvbihjb2x1bW4sIFwibm9uZVwiKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdC8vc2V0IHRoZSBjb2x1bW4gaGVhZGVyIHNvcnQgZGlyZWN0aW9uXG5cdHNldENvbHVtbkhlYWRlcihjb2x1bW4sIGRpcil7XG5cdFx0Y29sdW1uLm1vZHVsZXMuc29ydC5kaXIgPSBkaXI7XG5cdFx0Y29sdW1uLmdldEVsZW1lbnQoKS5zZXRBdHRyaWJ1dGUoXCJhcmlhLXNvcnRcIiwgZGlyID09PSBcImFzY1wiID8gXCJhc2NlbmRpbmdcIiA6IFwiZGVzY2VuZGluZ1wiKTtcblx0XHR0aGlzLnNldENvbHVtbkhlYWRlclNvcnRJY29uKGNvbHVtbiwgZGlyKTtcblx0fVxuXG5cdHNldENvbHVtbkhlYWRlclNvcnRJY29uKGNvbHVtbiwgZGlyKXtcblx0XHR2YXIgc29ydEVsID0gY29sdW1uLm1vZHVsZXMuc29ydC5lbGVtZW50LFxuXHRcdGFycm93RWw7XG5cblx0XHRpZihjb2x1bW4uZGVmaW5pdGlvbi5oZWFkZXJTb3J0ICYmIHR5cGVvZiB0aGlzLnRhYmxlLm9wdGlvbnMuaGVhZGVyU29ydEVsZW1lbnQgPT09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHR3aGlsZShzb3J0RWwuZmlyc3RDaGlsZCkgc29ydEVsLnJlbW92ZUNoaWxkKHNvcnRFbC5maXJzdENoaWxkKTtcblxuXHRcdFx0YXJyb3dFbCA9IHRoaXMudGFibGUub3B0aW9ucy5oZWFkZXJTb3J0RWxlbWVudC5jYWxsKHRoaXMudGFibGUsIGNvbHVtbi5nZXRDb21wb25lbnQoKSwgZGlyKTtcblx0XHRcdFxuXHRcdFx0aWYodHlwZW9mIGFycm93RWwgPT09IFwib2JqZWN0XCIpe1xuXHRcdFx0XHRzb3J0RWwuYXBwZW5kQ2hpbGQoYXJyb3dFbCk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHNvcnRFbC5pbm5lckhUTUwgPSBhcnJvd0VsO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vc29ydCBlYWNoIGl0ZW0gaW4gc29ydCBsaXN0XG5cdF9zb3J0SXRlbXMoZGF0YSwgc29ydExpc3Qpe1xuXHRcdHZhciBzb3J0ZXJDb3VudCA9IHNvcnRMaXN0Lmxlbmd0aCAtIDE7XG5cblx0XHRkYXRhLnNvcnQoKGEsIGIpID0+IHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdGZvcih2YXIgaSA9IHNvcnRlckNvdW50OyBpPj0gMDsgaS0tKXtcblx0XHRcdFx0bGV0IHNvcnRJdGVtID0gc29ydExpc3RbaV07XG5cblx0XHRcdFx0cmVzdWx0ID0gdGhpcy5fc29ydFJvdyhhLCBiLCBzb3J0SXRlbS5jb2x1bW4sIHNvcnRJdGVtLmRpciwgc29ydEl0ZW0ucGFyYW1zKTtcblxuXHRcdFx0XHRpZihyZXN1bHQgIT09IDApe1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fSk7XG5cdH1cblxuXHQvL3Byb2Nlc3MgaW5kaXZpZHVhbCByb3dzIGZvciBhIHNvcnQgZnVuY3Rpb24gb24gYWN0aXZlIGRhdGFcblx0X3NvcnRSb3coYSwgYiwgY29sdW1uLCBkaXIsIHBhcmFtcyl7XG5cdFx0dmFyIGVsMUNvbXAsIGVsMkNvbXA7XG5cblx0XHQvL3N3aXRjaCBlbGVtZW50cyBkZXBlbmRpbmcgb24gc2VhcmNoIGRpcmVjdGlvblxuXHRcdHZhciBlbDEgPSBkaXIgPT0gXCJhc2NcIiA/IGEgOiBiO1xuXHRcdHZhciBlbDIgPSBkaXIgPT0gXCJhc2NcIiA/IGIgOiBhO1xuXG5cdFx0YSA9IGNvbHVtbi5nZXRGaWVsZFZhbHVlKGVsMS5nZXREYXRhKCkpO1xuXHRcdGIgPSBjb2x1bW4uZ2V0RmllbGRWYWx1ZShlbDIuZ2V0RGF0YSgpKTtcblxuXHRcdGEgPSB0eXBlb2YgYSAhPT0gXCJ1bmRlZmluZWRcIiA/IGEgOiBcIlwiO1xuXHRcdGIgPSB0eXBlb2YgYiAhPT0gXCJ1bmRlZmluZWRcIiA/IGIgOiBcIlwiO1xuXG5cdFx0ZWwxQ29tcCA9IGVsMS5nZXRDb21wb25lbnQoKTtcblx0XHRlbDJDb21wID0gZWwyLmdldENvbXBvbmVudCgpO1xuXG5cdFx0cmV0dXJuIGNvbHVtbi5tb2R1bGVzLnNvcnQuc29ydGVyLmNhbGwodGhpcywgYSwgYiwgZWwxQ29tcCwgZWwyQ29tcCwgY29sdW1uLmdldENvbXBvbmVudCgpLCBkaXIsIHBhcmFtcyk7XG5cdH1cbn1cblxuU29ydC5tb2R1bGVOYW1lID0gXCJzb3J0XCI7XG5cbi8vbG9hZCBkZWZhdWx0c1xuU29ydC5zb3J0ZXJzID0gZGVmYXVsdFNvcnRlcnM7XG5cbmNsYXNzIFRvb2x0aXAgZXh0ZW5kcyBNb2R1bGV7XG5cdFxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXHRcdFxuXHRcdHRoaXMudG9vbHRpcFN1YnNjcmliZXIgPSBudWxsLFxuXHRcdHRoaXMuaGVhZGVyU3Vic2NyaWJlciA9IG51bGwsXG5cdFx0XG5cdFx0dGhpcy50aW1lb3V0ID0gbnVsbDtcblx0XHR0aGlzLnBvcHVwSW5zdGFuY2UgPSBudWxsO1xuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcInRvb2x0aXBHZW5lcmF0aW9uTW9kZVwiLCB1bmRlZmluZWQpOyAgLy9kZXByZWNhdGVkXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwidG9vbHRpcERlbGF5XCIsIDMwMCk7IFxuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJ0b29sdGlwXCIpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJoZWFkZXJUb29sdGlwXCIpO1xuXHR9XG5cdFxuXHRpbml0aWFsaXplKCl7XG5cdFx0dGhpcy5kZXByZWNhdGVkT3B0aW9uc0NoZWNrKCk7XG5cdFx0XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4taW5pdFwiLCB0aGlzLmluaXRpYWxpemVDb2x1bW4uYmluZCh0aGlzKSk7XG5cdH1cblx0XG5cdGRlcHJlY2F0ZWRPcHRpb25zQ2hlY2soKXtcblx0XHR0aGlzLmRlcHJlY2F0aW9uQ2hlY2tNc2coXCJ0b29sdGlwR2VuZXJhdGlvbk1vZGVcIiwgXCJUaGlzIG9wdGlvbiBpcyBubyBsb25nZXIgbmVlZGVkIGFzIHRvb2x0aXBzIGFyZSBhbHdheXMgZ2VuZXJhdGVkIG9uIGhvdmVyIG5vd1wiKTtcblx0fVx0XG5cdFxuXHRpbml0aWFsaXplQ29sdW1uKGNvbHVtbil7XG5cdFx0aWYoY29sdW1uLmRlZmluaXRpb24uaGVhZGVyVG9vbHRpcCAmJiAhdGhpcy5oZWFkZXJTdWJzY3JpYmVyKXtcblx0XHRcdHRoaXMuaGVhZGVyU3Vic2NyaWJlciA9IHRydWU7XG5cdFx0XHRcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLW1vdXNlbW92ZVwiLCB0aGlzLm1vdXNlbW92ZUNoZWNrLmJpbmQodGhpcywgXCJoZWFkZXJUb29sdGlwXCIpKTtcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLW1vdXNlb3V0XCIsIHRoaXMubW91c2VvdXRDaGVjay5iaW5kKHRoaXMsIFwiaGVhZGVyVG9vbHRpcFwiKSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGNvbHVtbi5kZWZpbml0aW9uLnRvb2x0aXAgJiYgIXRoaXMudG9vbHRpcFN1YnNjcmliZXIpe1xuXHRcdFx0dGhpcy50b29sdGlwU3Vic2NyaWJlciA9IHRydWU7XG5cdFx0XHRcblx0XHRcdHRoaXMuc3Vic2NyaWJlKFwiY2VsbC1tb3VzZW1vdmVcIiwgdGhpcy5tb3VzZW1vdmVDaGVjay5iaW5kKHRoaXMsIFwidG9vbHRpcFwiKSk7XG5cdFx0XHR0aGlzLnN1YnNjcmliZShcImNlbGwtbW91c2VvdXRcIiwgdGhpcy5tb3VzZW91dENoZWNrLmJpbmQodGhpcywgXCJ0b29sdGlwXCIpKTtcblx0XHR9XG5cdH1cblx0XG5cdG1vdXNlbW92ZUNoZWNrKGFjdGlvbiwgZSwgY29tcG9uZW50KXtcblx0XHR2YXIgdG9vbHRpcCA9IGFjdGlvbiA9PT0gXCJ0b29sdGlwXCIgPyBjb21wb25lbnQuY29sdW1uLmRlZmluaXRpb24udG9vbHRpcCA6IGNvbXBvbmVudC5kZWZpbml0aW9uLmhlYWRlclRvb2x0aXA7XG5cdFx0XG5cdFx0aWYodG9vbHRpcCl7XG5cdFx0XHR0aGlzLmNsZWFyUG9wdXAoKTtcblx0XHRcdHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQodGhpcy5sb2FkVG9vbHRpcC5iaW5kKHRoaXMsIGUsIGNvbXBvbmVudCwgdG9vbHRpcCksIHRoaXMudGFibGUub3B0aW9ucy50b29sdGlwRGVsYXkpO1xuXHRcdH1cblx0fVxuXG5cdG1vdXNlb3V0Q2hlY2soYWN0aW9uLCBlLCBjb21wb25lbnQpe1xuXHRcdGlmKCF0aGlzLnBvcHVwSW5zdGFuY2Upe1xuXHRcdFx0dGhpcy5jbGVhclBvcHVwKCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRjbGVhclBvcHVwKGFjdGlvbiwgZSwgY29tcG9uZW50KXtcblx0XHRjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcblx0XHR0aGlzLnRpbWVvdXQgPSBudWxsO1xuXHRcdFxuXHRcdGlmKHRoaXMucG9wdXBJbnN0YW5jZSl7XG5cdFx0XHR0aGlzLnBvcHVwSW5zdGFuY2UuaGlkZSgpO1xuXHRcdH1cblx0fVxuXHRcblx0bG9hZFRvb2x0aXAoZSwgY29tcG9uZW50LCB0b29sdGlwKXtcblx0XHR2YXIgY29udGVudHNFbCwgcmVuZGVyZWRDYWxsYmFjaywgY29vcmRzO1xuXG5cdFx0ZnVuY3Rpb24gb25SZW5kZXJlZChjYWxsYmFjayl7XG5cdFx0XHRyZW5kZXJlZENhbGxiYWNrID0gY2FsbGJhY2s7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHR5cGVvZiB0b29sdGlwID09PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0dG9vbHRpcCA9IHRvb2x0aXAoZSwgY29tcG9uZW50LmdldENvbXBvbmVudCgpLCBvblJlbmRlcmVkKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodG9vbHRpcCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KXtcblx0XHRcdGNvbnRlbnRzRWwgPSB0b29sdGlwO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnRlbnRzRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdFx0XG5cdFx0XHRpZih0b29sdGlwID09PSB0cnVlKXtcblx0XHRcdFx0aWYoY29tcG9uZW50IGluc3RhbmNlb2YgQ2VsbCl7XG5cdFx0XHRcdFx0dG9vbHRpcCA9IGNvbXBvbmVudC52YWx1ZTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGlmKGNvbXBvbmVudC5kZWZpbml0aW9uLmZpZWxkKXtcblx0XHRcdFx0XHRcdHRoaXMubGFuZ0JpbmQoXCJjb2x1bW5zfFwiICsgY29tcG9uZW50LmRlZmluaXRpb24uZmllbGQsICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdFx0XHRjb250ZW50c0VsLmlubmVySFRNTCA9IHRvb2x0aXAgPSB2YWx1ZSB8fCBjb21wb25lbnQuZGVmaW5pdGlvbi50aXRsZTtcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdHRvb2x0aXAgPSBjb21wb25lbnQuZGVmaW5pdGlvbi50aXRsZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Y29udGVudHNFbC5pbm5lckhUTUwgPSB0b29sdGlwO1xuXHRcdH1cblx0XHRcblx0XHRpZih0b29sdGlwIHx8IHRvb2x0aXAgPT09IDAgfHwgdG9vbHRpcCA9PT0gZmFsc2Upe1xuXHRcdFx0Y29udGVudHNFbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXRvb2x0aXBcIik7XG5cblx0XHRcdGNvbnRlbnRzRWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBlID0+IGUucHJldmVudERlZmF1bHQoKSk7XG5cdFx0XHRcblx0XHRcdHRoaXMucG9wdXBJbnN0YW5jZSA9IHRoaXMucG9wdXAoY29udGVudHNFbCk7XG5cdFx0XHRcblx0XHRcdGlmKHR5cGVvZiByZW5kZXJlZENhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0XHR0aGlzLnBvcHVwSW5zdGFuY2UucmVuZGVyQ2FsbGJhY2socmVuZGVyZWRDYWxsYmFjayk7XG5cdFx0XHR9XG5cblx0XHRcdGNvb3JkcyA9IHRoaXMucG9wdXBJbnN0YW5jZS5jb250YWluZXJFdmVudENvb3JkcyhlKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5wb3B1cEluc3RhbmNlLnNob3coY29vcmRzLnggKyAxNSwgY29vcmRzLnkgKyAxNSkuaGlkZU9uQmx1cigoKSA9PiB7XG5cdFx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcIlRvb2x0aXBDbG9zZWRcIiwgY29tcG9uZW50LmdldENvbXBvbmVudCgpKTtcblx0XHRcdFx0dGhpcy5wb3B1cEluc3RhbmNlID0gbnVsbDtcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJUb29sdGlwT3BlbmVkXCIsIGNvbXBvbmVudC5nZXRDb21wb25lbnQoKSk7XG5cdFx0fVxuXHR9XG59XG5cblRvb2x0aXAubW9kdWxlTmFtZSA9IFwidG9vbHRpcFwiO1xuXG52YXIgZGVmYXVsdFZhbGlkYXRvcnMgPSB7XG5cdC8vaXMgaW50ZWdlclxuXHRpbnRlZ2VyOiBmdW5jdGlvbihjZWxsLCB2YWx1ZSwgcGFyYW1ldGVycyl7XG5cdFx0aWYodmFsdWUgPT09IFwiXCIgfHwgdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdHZhbHVlID0gTnVtYmVyKHZhbHVlKTtcblxuXHRcdHJldHVybiAhaXNOYU4odmFsdWUpICYmIGlzRmluaXRlKHZhbHVlKSAmJiBNYXRoLmZsb29yKHZhbHVlKSA9PT0gdmFsdWU7XG5cdH0sXG5cblx0Ly9pcyBmbG9hdFxuXHRmbG9hdDogZnVuY3Rpb24oY2VsbCwgdmFsdWUsIHBhcmFtZXRlcnMpe1xuXHRcdGlmKHZhbHVlID09PSBcIlwiIHx8IHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0XG5cdFx0dmFsdWUgPSBOdW1iZXIodmFsdWUpO1xuXG5cdFx0cmV0dXJuICFpc05hTih2YWx1ZSkgJiYgaXNGaW5pdGUodmFsdWUpICYmIHZhbHVlICUgMSAhPT0gMDtcblx0fSxcblxuXHQvL211c3QgYmUgYSBudW1iZXJcblx0bnVtZXJpYzogZnVuY3Rpb24oY2VsbCwgdmFsdWUsIHBhcmFtZXRlcnMpe1xuXHRcdGlmKHZhbHVlID09PSBcIlwiIHx8IHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuICFpc05hTih2YWx1ZSk7XG5cdH0sXG5cblx0Ly9tdXN0IGJlIGEgc3RyaW5nXG5cdHN0cmluZzogZnVuY3Rpb24oY2VsbCwgdmFsdWUsIHBhcmFtZXRlcnMpe1xuXHRcdGlmKHZhbHVlID09PSBcIlwiIHx8IHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIGlzTmFOKHZhbHVlKTtcblx0fSxcblxuXHQvL21heGltdW0gdmFsdWVcblx0bWF4OiBmdW5jdGlvbihjZWxsLCB2YWx1ZSwgcGFyYW1ldGVycyl7XG5cdFx0aWYodmFsdWUgPT09IFwiXCIgfHwgdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSkgPD0gcGFyYW1ldGVycztcblx0fSxcblxuXHQvL21pbmltdW0gdmFsdWVcblx0bWluOiBmdW5jdGlvbihjZWxsLCB2YWx1ZSwgcGFyYW1ldGVycyl7XG5cdFx0aWYodmFsdWUgPT09IFwiXCIgfHwgdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSkgPj0gcGFyYW1ldGVycztcblx0fSxcblxuXHQvL3N0YXJ0cyB3aXRoICB2YWx1ZVxuXHRzdGFydHM6IGZ1bmN0aW9uKGNlbGwsIHZhbHVlLCBwYXJhbWV0ZXJzKXtcblx0XHRpZih2YWx1ZSA9PT0gXCJcIiB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiBTdHJpbmcodmFsdWUpLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChTdHJpbmcocGFyYW1ldGVycykudG9Mb3dlckNhc2UoKSk7XG5cdH0sXG5cblx0Ly9lbmRzIHdpdGggIHZhbHVlXG5cdGVuZHM6IGZ1bmN0aW9uKGNlbGwsIHZhbHVlLCBwYXJhbWV0ZXJzKXtcblx0XHRpZih2YWx1ZSA9PT0gXCJcIiB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiBTdHJpbmcodmFsdWUpLnRvTG93ZXJDYXNlKCkuZW5kc1dpdGgoU3RyaW5nKHBhcmFtZXRlcnMpLnRvTG93ZXJDYXNlKCkpO1xuXHR9LFxuXG5cblx0Ly9taW5pbXVtIHN0cmluZyBsZW5ndGhcblx0bWluTGVuZ3RoOiBmdW5jdGlvbihjZWxsLCB2YWx1ZSwgcGFyYW1ldGVycyl7XG5cdFx0aWYodmFsdWUgPT09IFwiXCIgfHwgdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gU3RyaW5nKHZhbHVlKS5sZW5ndGggPj0gcGFyYW1ldGVycztcblx0fSxcblxuXHQvL21heGltdW0gc3RyaW5nIGxlbmd0aFxuXHRtYXhMZW5ndGg6IGZ1bmN0aW9uKGNlbGwsIHZhbHVlLCBwYXJhbWV0ZXJzKXtcblx0XHRpZih2YWx1ZSA9PT0gXCJcIiB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiBTdHJpbmcodmFsdWUpLmxlbmd0aCA8PSBwYXJhbWV0ZXJzO1xuXHR9LFxuXG5cdC8vaW4gcHJvdmlkZWQgdmFsdWUgbGlzdFxuXHRpbjogZnVuY3Rpb24oY2VsbCwgdmFsdWUsIHBhcmFtZXRlcnMpe1xuXHRcdGlmKHZhbHVlID09PSBcIlwiIHx8IHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZih0eXBlb2YgcGFyYW1ldGVycyA9PSBcInN0cmluZ1wiKXtcblx0XHRcdHBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzLnNwbGl0KFwifFwiKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcGFyYW1ldGVycy5pbmRleE9mKHZhbHVlKSA+IC0xO1xuXHR9LFxuXG5cdC8vbXVzdCBtYXRjaCBwcm92aWRlZCByZWdleFxuXHRyZWdleDogZnVuY3Rpb24oY2VsbCwgdmFsdWUsIHBhcmFtZXRlcnMpe1xuXHRcdGlmKHZhbHVlID09PSBcIlwiIHx8IHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0dmFyIHJlZyA9IG5ldyBSZWdFeHAocGFyYW1ldGVycyk7XG5cblx0XHRyZXR1cm4gcmVnLnRlc3QodmFsdWUpO1xuXHR9LFxuXG5cdC8vdmFsdWUgbXVzdCBiZSB1bmlxdWUgaW4gdGhpcyBjb2x1bW5cblx0dW5pcXVlOiBmdW5jdGlvbihjZWxsLCB2YWx1ZSwgcGFyYW1ldGVycyl7XG5cdFx0aWYodmFsdWUgPT09IFwiXCIgfHwgdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHR2YXIgdW5pcXVlID0gdHJ1ZTtcblxuXHRcdHZhciBjZWxsRGF0YSA9IGNlbGwuZ2V0RGF0YSgpO1xuXHRcdHZhciBjb2x1bW4gPSBjZWxsLmdldENvbHVtbigpLl9nZXRTZWxmKCk7XG5cblx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIucm93cy5mb3JFYWNoKGZ1bmN0aW9uKHJvdyl7XG5cdFx0XHR2YXIgZGF0YSA9IHJvdy5nZXREYXRhKCk7XG5cblx0XHRcdGlmKGRhdGEgIT09IGNlbGxEYXRhKXtcblx0XHRcdFx0aWYodmFsdWUgPT0gY29sdW1uLmdldEZpZWxkVmFsdWUoZGF0YSkpe1xuXHRcdFx0XHRcdHVuaXF1ZSA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gdW5pcXVlO1xuXHR9LFxuXG5cdC8vbXVzdCBoYXZlIGEgdmFsdWVcblx0cmVxdWlyZWQ6ZnVuY3Rpb24oY2VsbCwgdmFsdWUsIHBhcmFtZXRlcnMpe1xuXHRcdHJldHVybiB2YWx1ZSAhPT0gXCJcIiAmJiB2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgIT09IFwidW5kZWZpbmVkXCI7XG5cdH0sXG59O1xuXG5jbGFzcyBWYWxpZGF0ZSBleHRlbmRzIE1vZHVsZXtcblx0XG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cdFx0XG5cdFx0dGhpcy5pbnZhbGlkQ2VsbHMgPSBbXTtcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVPcHRpb24oXCJ2YWxpZGF0aW9uTW9kZVwiLCBcImJsb2NraW5nXCIpO1xuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJ2YWxpZGF0b3JcIik7XG5cdFx0XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJnZXRJbnZhbGlkQ2VsbHNcIiwgdGhpcy5nZXRJbnZhbGlkQ2VsbHMuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJjbGVhckNlbGxWYWxpZGF0aW9uXCIsIHRoaXMudXNlckNsZWFyQ2VsbFZhbGlkYXRpb24uYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlRnVuY3Rpb24oXCJ2YWxpZGF0ZVwiLCB0aGlzLnVzZXJWYWxpZGF0ZS5iaW5kKHRoaXMpKTtcblx0XHRcblx0XHR0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RnVuY3Rpb24oXCJjZWxsXCIsIFwiaXNWYWxpZFwiLCB0aGlzLmNlbGxJc1ZhbGlkLmJpbmQodGhpcykpO1xuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcImNlbGxcIiwgXCJjbGVhclZhbGlkYXRpb25cIiwgdGhpcy5jbGVhclZhbGlkYXRpb24uYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwiY2VsbFwiLCBcInZhbGlkYXRlXCIsIHRoaXMuY2VsbFZhbGlkYXRlLmJpbmQodGhpcykpO1xuXHRcdFxuXHRcdHRoaXMucmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbihcImNvbHVtblwiLCBcInZhbGlkYXRlXCIsIHRoaXMuY29sdW1uVmFsaWRhdGUuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5yZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKFwicm93XCIsIFwidmFsaWRhdGVcIiwgdGhpcy5yb3dWYWxpZGF0ZS5iaW5kKHRoaXMpKTtcblx0fVxuXHRcblx0XG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLnN1YnNjcmliZShcImNlbGwtZGVsZXRlXCIsIHRoaXMuY2xlYXJWYWxpZGF0aW9uLmJpbmQodGhpcykpO1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwiY29sdW1uLWxheW91dFwiLCB0aGlzLmluaXRpYWxpemVDb2x1bW5DaGVjay5iaW5kKHRoaXMpKTtcblx0XHRcblx0XHR0aGlzLnN1YnNjcmliZShcImVkaXQtc3VjY2Vzc1wiLCB0aGlzLmVkaXRWYWxpZGF0ZS5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImVkaXQtZWRpdG9yLWNsZWFyXCIsIHRoaXMuZWRpdG9yQ2xlYXIuYmluZCh0aGlzKSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJlZGl0LWVkaXRlZC1jbGVhclwiLCB0aGlzLmVkaXRlZENsZWFyLmJpbmQodGhpcykpO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8gRXZlbnQgSGFuZGxpbmcgLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0ZWRpdFZhbGlkYXRlKGNlbGwsIHZhbHVlLCBwcmV2aW91c1ZhbHVlKXtcblx0XHR2YXIgdmFsaWQgPSB0aGlzLnRhYmxlLm9wdGlvbnMudmFsaWRhdGlvbk1vZGUgIT09IFwibWFudWFsXCIgPyB0aGlzLnZhbGlkYXRlKGNlbGwuY29sdW1uLm1vZHVsZXMudmFsaWRhdGUsIGNlbGwsIHZhbHVlKSA6IHRydWU7XG5cdFx0XG5cdFx0Ly8gYWxsb3cgdGltZSBmb3IgZWRpdG9yIHRvIG1ha2UgcmVuZGVyIGNoYW5nZXMgdGhlbiBzdHlsZSBjZWxsXG5cdFx0aWYodmFsaWQgIT09IHRydWUpe1xuXHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdGNlbGwuZ2V0RWxlbWVudCgpLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItdmFsaWRhdGlvbi1mYWlsXCIpO1xuXHRcdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJ2YWxpZGF0aW9uRmFpbGVkXCIsIGNlbGwuZ2V0Q29tcG9uZW50KCksIHZhbHVlLCB2YWxpZCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHZhbGlkO1xuXHR9XG5cdFxuXHRlZGl0b3JDbGVhcihjZWxsLCBjYW5jZWxsZWQpe1xuXHRcdGlmKGNhbmNlbGxlZCl7XG5cdFx0XHRpZihjZWxsLmNvbHVtbi5tb2R1bGVzLnZhbGlkYXRlKXtcblx0XHRcdFx0dGhpcy5jZWxsVmFsaWRhdGUoY2VsbCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Y2VsbC5nZXRFbGVtZW50KCkuY2xhc3NMaXN0LnJlbW92ZShcInRhYnVsYXRvci12YWxpZGF0aW9uLWZhaWxcIik7XG5cdH1cblx0XG5cdGVkaXRlZENsZWFyKGNlbGwpe1xuXHRcdGlmKGNlbGwubW9kdWxlcy52YWxpZGF0ZSl7XG5cdFx0XHRjZWxsLm1vZHVsZXMudmFsaWRhdGUuaW52YWxpZCA9IGZhbHNlO1xuXHRcdH1cblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLyBDZWxsIEZ1bmN0aW9ucyAvLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdGNlbGxJc1ZhbGlkKGNlbGwpe1xuXHRcdHJldHVybiBjZWxsLm1vZHVsZXMudmFsaWRhdGUgPyAoY2VsbC5tb2R1bGVzLnZhbGlkYXRlLmludmFsaWQgfHwgdHJ1ZSkgOiB0cnVlO1xuXHR9XG5cdFxuXHRjZWxsVmFsaWRhdGUoY2VsbCl7XG5cdFx0cmV0dXJuIHRoaXMudmFsaWRhdGUoY2VsbC5jb2x1bW4ubW9kdWxlcy52YWxpZGF0ZSwgY2VsbCwgY2VsbC5nZXRWYWx1ZSgpKTtcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vIENvbHVtbiBGdW5jdGlvbnMgLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdGNvbHVtblZhbGlkYXRlKGNvbHVtbil7XG5cdFx0dmFyIGludmFsaWQgPSBbXTtcblx0XHRcblx0XHRjb2x1bW4uY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuXHRcdFx0aWYodGhpcy5jZWxsVmFsaWRhdGUoY2VsbCkgIT09IHRydWUpe1xuXHRcdFx0XHRpbnZhbGlkLnB1c2goY2VsbC5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0cmV0dXJuIGludmFsaWQubGVuZ3RoID8gaW52YWxpZCA6IHRydWU7XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8gUm93IEZ1bmN0aW9ucyAvLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHRyb3dWYWxpZGF0ZShyb3cpe1xuXHRcdHZhciBpbnZhbGlkID0gW107XG5cdFx0XG5cdFx0cm93LmNlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcblx0XHRcdGlmKHRoaXMuY2VsbFZhbGlkYXRlKGNlbGwpICE9PSB0cnVlKXtcblx0XHRcdFx0aW52YWxpZC5wdXNoKGNlbGwuZ2V0Q29tcG9uZW50KCkpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiBpbnZhbGlkLmxlbmd0aCA/IGludmFsaWQgOiB0cnVlO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8gVGFibGUgRnVuY3Rpb25zIC8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0XG5cdHVzZXJDbGVhckNlbGxWYWxpZGF0aW9uKGNlbGxzKXtcblx0XHRpZighY2VsbHMpe1xuXHRcdFx0Y2VsbHMgPSB0aGlzLmdldEludmFsaWRDZWxscygpO1xuXHRcdH1cblx0XHRcblx0XHRpZighQXJyYXkuaXNBcnJheShjZWxscykpe1xuXHRcdFx0Y2VsbHMgPSBbY2VsbHNdO1xuXHRcdH1cblx0XHRcblx0XHRjZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG5cdFx0XHR0aGlzLmNsZWFyVmFsaWRhdGlvbihjZWxsLl9nZXRTZWxmKCkpO1xuXHRcdH0pO1xuXHR9XG5cdFxuXHR1c2VyVmFsaWRhdGUoY2VsbHMpe1xuXHRcdHZhciBvdXRwdXQgPSBbXTtcblx0XHRcblx0XHQvL2NsZWFyIHJvdyBkYXRhXG5cdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRyb3cgPSByb3cuZ2V0Q29tcG9uZW50KCk7XG5cdFx0XHRcblx0XHRcdHZhciB2YWxpZCA9IHJvdy52YWxpZGF0ZSgpO1xuXHRcdFx0XG5cdFx0XHRpZih2YWxpZCAhPT0gdHJ1ZSl7XG5cdFx0XHRcdG91dHB1dCA9IG91dHB1dC5jb25jYXQodmFsaWQpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiBvdXRwdXQubGVuZ3RoID8gb3V0cHV0IDogdHJ1ZTtcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vIEludGVybmFsIExvZ2ljIC8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdGluaXRpYWxpemVDb2x1bW5DaGVjayhjb2x1bW4pe1xuXHRcdGlmKHR5cGVvZiBjb2x1bW4uZGVmaW5pdGlvbi52YWxpZGF0b3IgIT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0dGhpcy5pbml0aWFsaXplQ29sdW1uKGNvbHVtbik7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL3ZhbGlkYXRlXG5cdGluaXRpYWxpemVDb2x1bW4oY29sdW1uKXtcblx0XHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0Y29uZmlnID0gW10sXG5cdFx0dmFsaWRhdG9yO1xuXHRcdFxuXHRcdGlmKGNvbHVtbi5kZWZpbml0aW9uLnZhbGlkYXRvcil7XG5cdFx0XHRcblx0XHRcdGlmKEFycmF5LmlzQXJyYXkoY29sdW1uLmRlZmluaXRpb24udmFsaWRhdG9yKSl7XG5cdFx0XHRcdGNvbHVtbi5kZWZpbml0aW9uLnZhbGlkYXRvci5mb3JFYWNoKChpdGVtKSA9PiB7XG5cdFx0XHRcdFx0dmFsaWRhdG9yID0gc2VsZi5fZXh0cmFjdFZhbGlkYXRvcihpdGVtKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZih2YWxpZGF0b3Ipe1xuXHRcdFx0XHRcdFx0Y29uZmlnLnB1c2godmFsaWRhdG9yKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dmFsaWRhdG9yID0gdGhpcy5fZXh0cmFjdFZhbGlkYXRvcihjb2x1bW4uZGVmaW5pdGlvbi52YWxpZGF0b3IpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYodmFsaWRhdG9yKXtcblx0XHRcdFx0XHRjb25maWcucHVzaCh2YWxpZGF0b3IpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGNvbHVtbi5tb2R1bGVzLnZhbGlkYXRlID0gY29uZmlnLmxlbmd0aCA/IGNvbmZpZyA6IGZhbHNlO1xuXHRcdH1cblx0fVxuXHRcblx0X2V4dHJhY3RWYWxpZGF0b3IodmFsdWUpe1xuXHRcdHZhciB0eXBlLCBwYXJhbXMsIHBvcztcblx0XHRcblx0XHRzd2l0Y2godHlwZW9mIHZhbHVlKXtcblx0XHRcdGNhc2UgXCJzdHJpbmdcIjpcblx0XHRcdFx0cG9zID0gdmFsdWUuaW5kZXhPZignOicpO1xuXHRcdFx0XG5cdFx0XHRcdGlmKHBvcyA+IC0xKXtcblx0XHRcdFx0XHR0eXBlID0gdmFsdWUuc3Vic3RyaW5nKDAscG9zKTtcblx0XHRcdFx0XHRwYXJhbXMgPSB2YWx1ZS5zdWJzdHJpbmcocG9zKzEpO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0dHlwZSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcblx0XHRcdFx0cmV0dXJuIHRoaXMuX2J1aWxkVmFsaWRhdG9yKHR5cGUsIHBhcmFtcyk7XG5cdFx0XHRcblx0XHRcdGNhc2UgXCJmdW5jdGlvblwiOlxuXHRcdFx0XHRyZXR1cm4gdGhpcy5fYnVpbGRWYWxpZGF0b3IodmFsdWUpO1xuXHRcdFx0XG5cdFx0XHRjYXNlIFwib2JqZWN0XCI6XG5cdFx0XHRcdHJldHVybiB0aGlzLl9idWlsZFZhbGlkYXRvcih2YWx1ZS50eXBlLCB2YWx1ZS5wYXJhbWV0ZXJzKTtcblx0XHR9XG5cdH1cblx0XG5cdF9idWlsZFZhbGlkYXRvcih0eXBlLCBwYXJhbXMpe1xuXHRcdFxuXHRcdHZhciBmdW5jID0gdHlwZW9mIHR5cGUgPT0gXCJmdW5jdGlvblwiID8gdHlwZSA6IFZhbGlkYXRlLnZhbGlkYXRvcnNbdHlwZV07XG5cdFx0XG5cdFx0aWYoIWZ1bmMpe1xuXHRcdFx0Y29uc29sZS53YXJuKFwiVmFsaWRhdG9yIFNldHVwIEVycm9yIC0gTm8gbWF0Y2hpbmcgdmFsaWRhdG9yIGZvdW5kOlwiLCB0eXBlKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR0eXBlOnR5cGVvZiB0eXBlID09IFwiZnVuY3Rpb25cIiA/IFwiZnVuY3Rpb25cIiA6IHR5cGUsXG5cdFx0XHRcdGZ1bmM6ZnVuYyxcblx0XHRcdFx0cGFyYW1zOnBhcmFtcyxcblx0XHRcdH07XG5cdFx0fVxuXHR9XG5cdFxuXHR2YWxpZGF0ZSh2YWxpZGF0b3JzLCBjZWxsLCB2YWx1ZSl7XG5cdFx0dmFyIHNlbGYgPSB0aGlzLFxuXHRcdGZhaWxlZFZhbGlkYXRvcnMgPSBbXSxcblx0XHRpbnZhbGlkSW5kZXggPSB0aGlzLmludmFsaWRDZWxscy5pbmRleE9mKGNlbGwpO1xuXHRcdFxuXHRcdGlmKHZhbGlkYXRvcnMpe1xuXHRcdFx0dmFsaWRhdG9ycy5mb3JFYWNoKChpdGVtKSA9PiB7XG5cdFx0XHRcdGlmKCFpdGVtLmZ1bmMuY2FsbChzZWxmLCBjZWxsLmdldENvbXBvbmVudCgpLCB2YWx1ZSwgaXRlbS5wYXJhbXMpKXtcblx0XHRcdFx0XHRmYWlsZWRWYWxpZGF0b3JzLnB1c2goe1xuXHRcdFx0XHRcdFx0dHlwZTppdGVtLnR5cGUsXG5cdFx0XHRcdFx0XHRwYXJhbWV0ZXJzOml0ZW0ucGFyYW1zXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblx0XHRcblx0XHRpZighY2VsbC5tb2R1bGVzLnZhbGlkYXRlKXtcblx0XHRcdGNlbGwubW9kdWxlcy52YWxpZGF0ZSA9IHt9O1xuXHRcdH1cblx0XHRcblx0XHRpZighZmFpbGVkVmFsaWRhdG9ycy5sZW5ndGgpe1xuXHRcdFx0Y2VsbC5tb2R1bGVzLnZhbGlkYXRlLmludmFsaWQgPSBmYWxzZTtcblx0XHRcdGNlbGwuZ2V0RWxlbWVudCgpLmNsYXNzTGlzdC5yZW1vdmUoXCJ0YWJ1bGF0b3ItdmFsaWRhdGlvbi1mYWlsXCIpO1xuXHRcdFx0XG5cdFx0XHRpZihpbnZhbGlkSW5kZXggPiAtMSl7XG5cdFx0XHRcdHRoaXMuaW52YWxpZENlbGxzLnNwbGljZShpbnZhbGlkSW5kZXgsIDEpO1xuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGNlbGwubW9kdWxlcy52YWxpZGF0ZS5pbnZhbGlkID0gZmFpbGVkVmFsaWRhdG9ycztcblx0XHRcdFxuXHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnZhbGlkYXRpb25Nb2RlICE9PSBcIm1hbnVhbFwiKXtcblx0XHRcdFx0Y2VsbC5nZXRFbGVtZW50KCkuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci12YWxpZGF0aW9uLWZhaWxcIik7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKGludmFsaWRJbmRleCA9PSAtMSl7XG5cdFx0XHRcdHRoaXMuaW52YWxpZENlbGxzLnB1c2goY2VsbCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBmYWlsZWRWYWxpZGF0b3JzLmxlbmd0aCA/IGZhaWxlZFZhbGlkYXRvcnMgOiB0cnVlO1xuXHR9XG5cdFxuXHRnZXRJbnZhbGlkQ2VsbHMoKXtcblx0XHR2YXIgb3V0cHV0ID0gW107XG5cdFx0XG5cdFx0dGhpcy5pbnZhbGlkQ2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuXHRcdFx0b3V0cHV0LnB1c2goY2VsbC5nZXRDb21wb25lbnQoKSk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXHRcblx0Y2xlYXJWYWxpZGF0aW9uKGNlbGwpe1xuXHRcdHZhciBpbnZhbGlkSW5kZXg7XG5cdFx0XG5cdFx0aWYoY2VsbC5tb2R1bGVzLnZhbGlkYXRlICYmIGNlbGwubW9kdWxlcy52YWxpZGF0ZS5pbnZhbGlkKXtcblx0XHRcdFxuXHRcdFx0Y2VsbC5nZXRFbGVtZW50KCkuY2xhc3NMaXN0LnJlbW92ZShcInRhYnVsYXRvci12YWxpZGF0aW9uLWZhaWxcIik7XG5cdFx0XHRjZWxsLm1vZHVsZXMudmFsaWRhdGUuaW52YWxpZCA9IGZhbHNlO1xuXHRcdFx0XG5cdFx0XHRpbnZhbGlkSW5kZXggPSB0aGlzLmludmFsaWRDZWxscy5pbmRleE9mKGNlbGwpO1xuXHRcdFx0XG5cdFx0XHRpZihpbnZhbGlkSW5kZXggPiAtMSl7XG5cdFx0XHRcdHRoaXMuaW52YWxpZENlbGxzLnNwbGljZShpbnZhbGlkSW5kZXgsIDEpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5WYWxpZGF0ZS5tb2R1bGVOYW1lID0gXCJ2YWxpZGF0ZVwiO1xuXG4vL2xvYWQgZGVmYXVsdHNcblZhbGlkYXRlLnZhbGlkYXRvcnMgPSBkZWZhdWx0VmFsaWRhdG9ycztcblxudmFyIG1vZHVsZXMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5cdF9fcHJvdG9fXzogbnVsbCxcblx0QWNjZXNzb3JNb2R1bGU6IEFjY2Vzc29yLFxuXHRBamF4TW9kdWxlOiBBamF4LFxuXHRDbGlwYm9hcmRNb2R1bGU6IENsaXBib2FyZCxcblx0Q29sdW1uQ2FsY3NNb2R1bGU6IENvbHVtbkNhbGNzLFxuXHREYXRhVHJlZU1vZHVsZTogRGF0YVRyZWUsXG5cdERvd25sb2FkTW9kdWxlOiBEb3dubG9hZCxcblx0RWRpdE1vZHVsZTogRWRpdCQxLFxuXHRFeHBvcnRNb2R1bGU6IEV4cG9ydCxcblx0RmlsdGVyTW9kdWxlOiBGaWx0ZXIsXG5cdEZvcm1hdE1vZHVsZTogRm9ybWF0LFxuXHRGcm96ZW5Db2x1bW5zTW9kdWxlOiBGcm96ZW5Db2x1bW5zLFxuXHRGcm96ZW5Sb3dzTW9kdWxlOiBGcm96ZW5Sb3dzLFxuXHRHcm91cFJvd3NNb2R1bGU6IEdyb3VwUm93cyxcblx0SGlzdG9yeU1vZHVsZTogSGlzdG9yeSxcblx0SHRtbFRhYmxlSW1wb3J0TW9kdWxlOiBIdG1sVGFibGVJbXBvcnQsXG5cdEltcG9ydE1vZHVsZTogSW1wb3J0LFxuXHRJbnRlcmFjdGlvbk1vZHVsZTogSW50ZXJhY3Rpb24sXG5cdEtleWJpbmRpbmdzTW9kdWxlOiBLZXliaW5kaW5ncyxcblx0TWVudU1vZHVsZTogTWVudSxcblx0TW92ZUNvbHVtbnNNb2R1bGU6IE1vdmVDb2x1bW5zLFxuXHRNb3ZlUm93c01vZHVsZTogTW92ZVJvd3MsXG5cdE11dGF0b3JNb2R1bGU6IE11dGF0b3IsXG5cdFBhZ2VNb2R1bGU6IFBhZ2UsXG5cdFBlcnNpc3RlbmNlTW9kdWxlOiBQZXJzaXN0ZW5jZSxcblx0UG9wdXBNb2R1bGU6IFBvcHVwJDEsXG5cdFByaW50TW9kdWxlOiBQcmludCxcblx0UmVhY3RpdmVEYXRhTW9kdWxlOiBSZWFjdGl2ZURhdGEsXG5cdFJlc2l6ZUNvbHVtbnNNb2R1bGU6IFJlc2l6ZUNvbHVtbnMsXG5cdFJlc2l6ZVJvd3NNb2R1bGU6IFJlc2l6ZVJvd3MsXG5cdFJlc2l6ZVRhYmxlTW9kdWxlOiBSZXNpemVUYWJsZSxcblx0UmVzcG9uc2l2ZUxheW91dE1vZHVsZTogUmVzcG9uc2l2ZUxheW91dCxcblx0U2VsZWN0Um93TW9kdWxlOiBTZWxlY3RSb3csXG5cdFNvcnRNb2R1bGU6IFNvcnQsXG5cdFRvb2x0aXBNb2R1bGU6IFRvb2x0aXAsXG5cdFZhbGlkYXRlTW9kdWxlOiBWYWxpZGF0ZVxufSk7XG5cbnZhciBkZWZhdWx0T3B0aW9ucyA9IHtcblxuXHRkZWJ1Z0V2ZW50c0V4dGVybmFsOmZhbHNlLCAvL2ZsYWcgdG8gY29uc29sZSBsb2cgZXZlbnRzXG5cdGRlYnVnRXZlbnRzSW50ZXJuYWw6ZmFsc2UsIC8vZmxhZyB0byBjb25zb2xlIGxvZyBldmVudHNcblx0ZGVidWdJbnZhbGlkT3B0aW9uczp0cnVlLCAvL2FsbG93IHRvZ2dsaW5nIG9mIGludmFsaWQgb3B0aW9uIHdhcm5pbmdzXG5cdGRlYnVnSW52YWxpZENvbXBvbmVudEZ1bmNzOnRydWUsIC8vYWxsb3cgdG9nZ2xpbmcgb2YgaW52YWxpZCBjb21wb25lbnQgd2FybmluZ3Ncblx0ZGVidWdJbml0aWFsaXphdGlvbjp0cnVlLCAvL2FsbG93IHRvZ2dsaW5nIG9mIHByZSBpbml0aWFsaXphdGlvbiBmdW5jdGlvbiBjYWxsIHdhcm5pbmdzXG5cdGRlYnVnRGVwcmVjYXRpb246dHJ1ZSwgLy9hbGxvdyB0b2dnbGluZyBvZiBkZXByZWNhdGlvbiB3YXJuaW5nc1xuXG5cdGhlaWdodDpmYWxzZSwgLy9oZWlnaHQgb2YgdGFidWxhdG9yXG5cdG1pbkhlaWdodDpmYWxzZSwgLy9taW5pbXVtIGhlaWdodCBvZiB0YWJ1bGF0b3Jcblx0bWF4SGVpZ2h0OmZhbHNlLCAvL21heGltdW0gaGVpZ2h0IG9mIHRhYnVsYXRvclxuXG5cdGNvbHVtbkhlYWRlclZlcnRBbGlnbjpcInRvcFwiLCAvL3ZlcnRpY2FsIGFsaWdubWVudCBvZiBjb2x1bW4gaGVhZGVyc1xuXG5cdHBvcHVwQ29udGFpbmVyOmZhbHNlLFxuXG5cdGNvbHVtbnM6W10sLy9zdG9yZSBmb3IgY29sdW0gaGVhZGVyIGluZm9cblx0Y29sdW1uRGVmYXVsdHM6e30sIC8vc3RvcmUgY29sdW1uIGRlZmF1bHQgcHJvcHNcblxuXHRkYXRhOmZhbHNlLCAvL2RlZmF1bHQgc3RhcnRpbmcgZGF0YVxuXG5cdGF1dG9Db2x1bW5zOmZhbHNlLCAvL2J1aWxkIGNvbHVtbnMgZnJvbSBkYXRhIHJvdyBzdHJ1Y3R1cmVcblx0YXV0b0NvbHVtbnNEZWZpbml0aW9uczpmYWxzZSxcblxuXHRuZXN0ZWRGaWVsZFNlcGFyYXRvcjpcIi5cIiwgLy9zZXBhcmF0b3IgZm9yIG5lc3RlZCBkYXRhXG5cblx0Zm9vdGVyRWxlbWVudDpmYWxzZSwgLy9ob2xkIGZvb3RlciBlbGVtZW50XG5cblx0aW5kZXg6XCJpZFwiLCAvL2ZpbGVkIGZvciByb3cgaW5kZXhcblxuXHR0ZXh0RGlyZWN0aW9uOlwiYXV0b1wiLFxuXG5cdGFkZFJvd1BvczpcImJvdHRvbVwiLCAvL3Bvc2l0aW9uIHRvIGluc2VydCBibGFuayByb3dzLCB0b3B8Ym90dG9tXG5cblx0aGVhZGVyVmlzaWJsZTp0cnVlLCAvL2hpZGUgaGVhZGVyXG5cblx0cmVuZGVyVmVydGljYWw6XCJ2aXJ0dWFsXCIsXG5cdHJlbmRlckhvcml6b250YWw6XCJiYXNpY1wiLFxuXHRyZW5kZXJWZXJ0aWNhbEJ1ZmZlcjowLCAvLyBzZXQgdmlydHVhbCBET00gYnVmZmVyIHNpemVcblxuXHRzY3JvbGxUb1Jvd1Bvc2l0aW9uOlwidG9wXCIsXG5cdHNjcm9sbFRvUm93SWZWaXNpYmxlOnRydWUsXG5cblx0c2Nyb2xsVG9Db2x1bW5Qb3NpdGlvbjpcImxlZnRcIixcblx0c2Nyb2xsVG9Db2x1bW5JZlZpc2libGU6dHJ1ZSxcblxuXHRyb3dGb3JtYXR0ZXI6ZmFsc2UsXG5cdHJvd0Zvcm1hdHRlclByaW50Om51bGwsXG5cdHJvd0Zvcm1hdHRlckNsaXBib2FyZDpudWxsLFxuXHRyb3dGb3JtYXR0ZXJIdG1sT3V0cHV0Om51bGwsXG5cblx0cm93SGVpZ2h0Om51bGwsXG5cblx0cGxhY2Vob2xkZXI6ZmFsc2UsXG5cblx0ZGF0YUxvYWRlcjp0cnVlLFxuXHRkYXRhTG9hZGVyTG9hZGluZzpmYWxzZSxcblx0ZGF0YUxvYWRlckVycm9yOmZhbHNlLFxuXHRkYXRhTG9hZGVyRXJyb3JUaW1lb3V0OjMwMDAsXG5cblx0ZGF0YVNlbmRQYXJhbXM6e30sXG5cblx0ZGF0YVJlY2VpdmVQYXJhbXM6e30sXG59O1xuXG5jbGFzcyBPcHRpb25zTGlzdCB7XG5cdGNvbnN0cnVjdG9yKHRhYmxlLCBtc2dUeXBlLCBkZWZhdWx0cyA9IHt9KXtcblx0XHR0aGlzLnRhYmxlID0gdGFibGU7XG5cdFx0dGhpcy5tc2dUeXBlID0gbXNnVHlwZTtcblx0XHR0aGlzLnJlZ2lzdGVyZWREZWZhdWx0cyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRzKTtcblx0fVxuXHRcblx0cmVnaXN0ZXIob3B0aW9uLCB2YWx1ZSl7XG5cdFx0dGhpcy5yZWdpc3RlcmVkRGVmYXVsdHNbb3B0aW9uXSA9IHZhbHVlO1xuXHR9XG5cdFxuXHRnZW5lcmF0ZShkZWZhdWx0T3B0aW9ucywgdXNlck9wdGlvbnMgPSB7fSl7XG5cdFx0dmFyIG91dHB1dCA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMucmVnaXN0ZXJlZERlZmF1bHRzKSxcblx0XHR3YXJuID0gdGhpcy50YWJsZS5vcHRpb25zLmRlYnVnSW52YWxpZE9wdGlvbnMgfHwgdXNlck9wdGlvbnMuZGVidWdJbnZhbGlkT3B0aW9ucyA9PT0gdHJ1ZTtcblx0XHRcblx0XHRPYmplY3QuYXNzaWduKG91dHB1dCwgZGVmYXVsdE9wdGlvbnMpO1xuXHRcdFxuXHRcdGZvciAobGV0IGtleSBpbiB1c2VyT3B0aW9ucyl7XG5cdFx0XHRpZighb3V0cHV0Lmhhc093blByb3BlcnR5KGtleSkpe1xuXHRcdFx0XHRpZih3YXJuKXtcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJJbnZhbGlkIFwiICsgdGhpcy5tc2dUeXBlICsgXCIgb3B0aW9uOlwiLCBrZXkpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0b3V0cHV0W2tleV0gPSB1c2VyT3B0aW9ucy5rZXk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHRcblx0XHRmb3IgKGxldCBrZXkgaW4gb3V0cHV0KXtcblx0XHRcdGlmKGtleSBpbiB1c2VyT3B0aW9ucyl7XG5cdFx0XHRcdG91dHB1dFtrZXldID0gdXNlck9wdGlvbnNba2V5XTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aWYoQXJyYXkuaXNBcnJheShvdXRwdXRba2V5XSkpe1xuXHRcdFx0XHRcdG91dHB1dFtrZXldID0gT2JqZWN0LmFzc2lnbihbXSwgb3V0cHV0W2tleV0pO1xuXHRcdFx0XHR9ZWxzZSBpZih0eXBlb2Ygb3V0cHV0W2tleV0gPT09IFwib2JqZWN0XCIgJiYgb3V0cHV0W2tleV0gIT09IG51bGwpe1xuXHRcdFx0XHRcdG91dHB1dFtrZXldID0gT2JqZWN0LmFzc2lnbih7fSwgb3V0cHV0W2tleV0pO1xuXHRcdFx0XHR9ZWxzZSBpZiAodHlwZW9mIG91dHB1dFtrZXldID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdFx0XHRkZWxldGUgb3V0cHV0W2tleV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxufVxuXG5jbGFzcyBSZW5kZXJlciBleHRlbmRzIENvcmVGZWF0dXJle1xuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXG5cdFx0dGhpcy5lbGVtZW50VmVydGljYWwgPSB0YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQ7XG5cdFx0dGhpcy5lbGVtZW50SG9yaXpvbnRhbCA9IHRhYmxlLmNvbHVtbk1hbmFnZXIuZWxlbWVudDtcblx0XHR0aGlzLnRhYmxlRWxlbWVudCA9ICB0YWJsZS5yb3dNYW5hZ2VyLnRhYmxlRWxlbWVudDtcblxuXHRcdHRoaXMudmVydGljYWxGaWxsTW9kZSA9IFwiZml0XCI7IC8vIHVzZWQgYnkgcm93IG1hbmFnZXIgdG8gZGV0ZXJtaW5lIGhvdyB0byBzaXplIHRoZSByZW5kZXIgYXJlYSAoXCJmaXRcIiAtIGZpdHMgY29udGFpbmVyIHRvIHRoZSBjb250ZW50cywgXCJmaWxsXCIgLSBmaWxscyB0aGUgY29udGFpbmVyIHdpdGhvdXQgcmVzaXppbmcgaXQpXG5cdH1cblxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8gSW50ZXJuYWwgQmluZGluZ3MgLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0aW5pdGlhbGl6ZSgpe1xuXHRcdC8vaW5pdGlhbGl6ZSBjb3JlIGZ1bmN0aW9uYWxpdHlcblx0fVxuXG5cdGNsZWFyUm93cygpe1xuXHRcdC8vY2xlYXIgZG93biBleGlzdGluZyByb3dzIGxheW91dFxuXHR9XG5cblx0Y2xlYXJDb2x1bW5zKCl7XG5cdFx0Ly9jbGVhciBkb3duIGV4aXN0aW5nIGNvbHVtbnMgbGF5b3V0XG5cdH1cblxuXG5cdHJlaW5pdGlhbGl6ZUNvbHVtbldpZHRocyhjb2x1bW5zKXtcblx0XHQvL3Jlc2l6ZSBjb2x1bW5zIHRvIGZpdCBkYXRhXG5cdH1cblxuXG5cdHJlbmRlclJvd3MoKXtcblx0XHQvL3JlbmRlciByb3dzIGZyb20gYSBjbGVhbiBzbGF0ZVxuXHR9XG5cblx0cmVuZGVyQ29sdW1ucygpe1xuXHRcdC8vcmVuZGVyIGNvbHVtbnMgZnJvbSBhIGNsZWFuIHNsYXRlXG5cdH1cblxuXHRyZXJlbmRlclJvd3MoY2FsbGJhY2spe1xuXHRcdC8vIHJlcmVuZGVyIHJvd3MgYW5kIGtlZXAgcG9zaXRpb25cblx0XHRpZihjYWxsYmFjayl7XG5cdFx0XHRjYWxsYmFjaygpO1xuXHRcdH1cblx0fVxuXG5cdHJlcmVuZGVyQ29sdW1ucyh1cGRhdGUsIGJsb2NrUmVkcmF3KXtcblx0XHQvL3JlcmVuZGVyIGNvbHVtbnNcblx0fVxuXG5cdHJlbmRlclJvd0NlbGxzKHJvdyl7XG5cdFx0Ly9yZW5kZXIgdGhlIGNlbGxzIGluIGEgcm93XG5cdH1cblxuXHRyZXJlbmRlclJvd0NlbGxzKHJvdywgZm9yY2Upe1xuXHRcdC8vcmVyZW5kZXIgdGhlIGNlbGxzIGluIGEgcm93XG5cdH1cblxuXHRzY3JvbGxDb2x1bW5zKGxlZnQsIGRpcil7XG5cdFx0Ly9oYW5kbGUgaG9yaXpvbnRhbCBzY3JvbGxpbmdcblx0fVxuXG5cdHNjcm9sbFJvd3ModG9wLCBkaXIpe1xuXHRcdC8vaGFuZGxlIHZlcnRpY2FsIHNjcm9sbGluZ1xuXHR9XG5cblx0cmVzaXplKCl7XG5cdFx0Ly9jb250YWluZXIgaGFzIHJlc2l6ZWQsIGNhcnJ5IG91dCBhbnkgbmVlZGVkIHJlY2FsY3VsYXRpb25zIChETyBOT1QgUkVSRU5ERVIgSU4gVEhJUyBGVU5DVElPTilcblx0fVxuXG5cdHNjcm9sbFRvUm93KHJvdyl7XG5cdFx0Ly9zY3JvbGwgdG8gYSBzcGVjaWZpYyByb3dcblx0fVxuXG5cdHNjcm9sbFRvUm93TmVhcmVzdFRvcChyb3cpe1xuXHRcdC8vZGV0ZXJtaW5lIHdlYXRoZXIgdGhlIHJvdyBpcyBuZWFyZXN0IHRoZSB0b3Agb3IgYm90dG9tIG9mIHRoZSB0YWJsZSwgcmV0dXJuIHRydWUgZm9yIHRvcCBvciBmYWxzZSBmb3IgYm90dG9tXG5cdH1cblxuXHR2aXNpYmxlUm93cyhpbmNsdWRpbmdCdWZmZXIpe1xuXHRcdC8vcmV0dXJuIHRoZSB2aXNpYmxlIHJvd3Ncblx0XHRyZXR1cm4gW107XG5cdH1cblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLyBIZWxwZXIgRnVuY3Rpb25zIC8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdHJvd3MoKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldERpc3BsYXlSb3dzKCk7XG5cdH1cblxuXHRzdHlsZVJvdyhyb3csIGluZGV4KXtcblx0XHR2YXIgcm93RWwgPSByb3cuZ2V0RWxlbWVudCgpO1xuXG5cdFx0aWYoaW5kZXggJSAyKXtcblx0XHRcdHJvd0VsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3Itcm93LWV2ZW5cIik7XG5cdFx0XHRyb3dFbC5jbGFzc0xpc3QucmVtb3ZlKFwidGFidWxhdG9yLXJvdy1vZGRcIik7XG5cdFx0fWVsc2Uge1xuXHRcdFx0cm93RWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1yb3ctb2RkXCIpO1xuXHRcdFx0cm93RWwuY2xhc3NMaXN0LnJlbW92ZShcInRhYnVsYXRvci1yb3ctZXZlblwiKTtcblx0XHR9XG5cdH1cblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vIEV4dGVybmFsIFRyaWdnZXJzIC8vLy8vLy8vL1xuXHQvLy8vLy8vIChETyBOT1QgT1ZFUlJJREUpIC8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdGNsZWFyKCl7XG5cdFx0Ly9jbGVhciBkb3duIGV4aXN0aW5nIGxheW91dFxuXHRcdHRoaXMuY2xlYXJSb3dzKCk7XG5cdFx0dGhpcy5jbGVhckNvbHVtbnMoKTtcblx0fVxuXG5cdHJlbmRlcigpe1xuXHRcdC8vcmVuZGVyIGZyb20gYSBjbGVhbiBzbGF0ZVxuXHRcdHRoaXMucmVuZGVyUm93cygpO1xuXHRcdHRoaXMucmVuZGVyQ29sdW1ucygpO1xuXHR9XG5cblx0cmVyZW5kZXIoY2FsbGJhY2spe1xuXHRcdC8vIHJlcmVuZGVyIGFuZCBrZWVwIHBvc2l0aW9uXG5cdFx0dGhpcy5yZXJlbmRlclJvd3MoKTtcblx0XHR0aGlzLnJlcmVuZGVyQ29sdW1ucygpO1xuXHR9XG5cblx0c2Nyb2xsVG9Sb3dQb3NpdGlvbihyb3csIHBvc2l0aW9uLCBpZlZpc2libGUpe1xuXHRcdHZhciByb3dJbmRleCA9IHRoaXMucm93cygpLmluZGV4T2Yocm93KSxcblx0XHRyb3dFbCA9IHJvdy5nZXRFbGVtZW50KCksXG5cdFx0b2Zmc2V0ID0gMDtcblxuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHRpZihyb3dJbmRleCA+IC0xKXtcblxuXHRcdFx0XHRpZih0eXBlb2YgaWZWaXNpYmxlID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdFx0XHRpZlZpc2libGUgPSB0aGlzLnRhYmxlLm9wdGlvbnMuc2Nyb2xsVG9Sb3dJZlZpc2libGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvL2NoZWNrIHJvdyB2aXNpYmlsaXR5XG5cdFx0XHRcdGlmKCFpZlZpc2libGUpe1xuXHRcdFx0XHRcdGlmKEhlbHBlcnMuZWxWaXNpYmxlKHJvd0VsKSl7XG5cdFx0XHRcdFx0XHRvZmZzZXQgPSBIZWxwZXJzLmVsT2Zmc2V0KHJvd0VsKS50b3AgLSBIZWxwZXJzLmVsT2Zmc2V0KHRoaXMuZWxlbWVudFZlcnRpY2FsKS50b3A7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGlmKG9mZnNldCA+IDAgJiYgb2Zmc2V0IDwgdGhpcy5lbGVtZW50VmVydGljYWwuY2xpZW50SGVpZ2h0IC0gcm93RWwub2Zmc2V0SGVpZ2h0KXtcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZSgpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYodHlwZW9mIHBvc2l0aW9uID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdFx0XHRwb3NpdGlvbiA9IHRoaXMudGFibGUub3B0aW9ucy5zY3JvbGxUb1Jvd1Bvc2l0aW9uO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYocG9zaXRpb24gPT09IFwibmVhcmVzdFwiKXtcblx0XHRcdFx0XHRwb3NpdGlvbiA9IHRoaXMuc2Nyb2xsVG9Sb3dOZWFyZXN0VG9wKHJvdykgPyBcInRvcFwiIDogXCJib3R0b21cIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vc2Nyb2xsIHRvIHJvd1xuXHRcdFx0XHR0aGlzLnNjcm9sbFRvUm93KHJvdyk7XG5cblx0XHRcdFx0Ly9hbGlnbiB0byBjb3JyZWN0IHBvc2l0aW9uXG5cdFx0XHRcdHN3aXRjaChwb3NpdGlvbil7XG5cdFx0XHRcdFx0Y2FzZSBcIm1pZGRsZVwiOlxuXHRcdFx0XHRcdGNhc2UgXCJjZW50ZXJcIjpcblxuXHRcdFx0XHRcdFx0aWYodGhpcy5lbGVtZW50VmVydGljYWwuc2Nyb2xsSGVpZ2h0IC0gdGhpcy5lbGVtZW50VmVydGljYWwuc2Nyb2xsVG9wID09IHRoaXMuZWxlbWVudFZlcnRpY2FsLmNsaWVudEhlaWdodCl7XG5cdFx0XHRcdFx0XHRcdHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbFRvcCA9IHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbFRvcCArIChyb3dFbC5vZmZzZXRUb3AgLSB0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxUb3ApIC0gKCh0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxIZWlnaHQgLSByb3dFbC5vZmZzZXRUb3ApIC8gMik7XG5cdFx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbFRvcCA9IHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbFRvcCAtICh0aGlzLmVsZW1lbnRWZXJ0aWNhbC5jbGllbnRIZWlnaHQgLyAyKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlIFwiYm90dG9tXCI6XG5cblx0XHRcdFx0XHRcdGlmKHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbEhlaWdodCAtIHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbFRvcCA9PSB0aGlzLmVsZW1lbnRWZXJ0aWNhbC5jbGllbnRIZWlnaHQpe1xuXHRcdFx0XHRcdFx0XHR0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxUb3AgPSB0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxUb3AgLSAodGhpcy5lbGVtZW50VmVydGljYWwuc2Nyb2xsSGVpZ2h0IC0gcm93RWwub2Zmc2V0VG9wKSArIHJvd0VsLm9mZnNldEhlaWdodDtcblx0XHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5lbGVtZW50VmVydGljYWwuc2Nyb2xsVG9wID0gdGhpcy5lbGVtZW50VmVydGljYWwuc2Nyb2xsVG9wIC0gdGhpcy5lbGVtZW50VmVydGljYWwuY2xpZW50SGVpZ2h0ICsgcm93RWwub2Zmc2V0SGVpZ2h0O1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgXCJ0b3BcIjpcblx0XHRcdFx0XHRcdHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbFRvcCA9IHJvd0VsLm9mZnNldFRvcDtcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc29sdmUoKTtcblxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJTY3JvbGwgRXJyb3IgLSBSb3cgbm90IHZpc2libGVcIik7XG5cdFx0XHRcdHJlamVjdChcIlNjcm9sbCBFcnJvciAtIFJvdyBub3QgdmlzaWJsZVwiKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxufVxuXG5jbGFzcyBCYXNpY0hvcml6b250YWwgZXh0ZW5kcyBSZW5kZXJlcntcblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblx0fVxuXHRcblx0cmVuZGVyUm93Q2VsbHMocm93LCBpbkZyYWdtZW50KSB7XG5cdFx0Y29uc3Qgcm93RnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblx0XHRyb3cuY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuXHRcdFx0cm93RnJhZy5hcHBlbmRDaGlsZChjZWxsLmdldEVsZW1lbnQoKSk7XG5cdFx0fSk7XG5cdFx0cm93LmVsZW1lbnQuYXBwZW5kQ2hpbGQocm93RnJhZyk7XG5cdFx0XG5cdFx0aWYoIWluRnJhZ21lbnQpe1xuXHRcdFx0cm93LmNlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcblx0XHRcdFx0Y2VsbC5jZWxsUmVuZGVyZWQoKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXHRcblx0cmVpbml0aWFsaXplQ29sdW1uV2lkdGhzKGNvbHVtbnMpe1xuXHRcdGNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihjb2x1bW4pe1xuXHRcdFx0Y29sdW1uLnJlaW5pdGlhbGl6ZVdpZHRoKCk7XG5cdFx0fSk7XG5cdH1cbn1cblxuY2xhc3MgVmlydHVhbERvbUhvcml6b250YWwgZXh0ZW5kcyBSZW5kZXJlcntcblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblx0XHRcblx0XHR0aGlzLmxlZnRDb2wgPSAwO1xuXHRcdHRoaXMucmlnaHRDb2wgPSAwO1xuXHRcdHRoaXMuc2Nyb2xsTGVmdCA9IDA7XG5cdFx0XG5cdFx0dGhpcy52RG9tU2Nyb2xsUG9zTGVmdCA9IDA7XG5cdFx0dGhpcy52RG9tU2Nyb2xsUG9zUmlnaHQgPSAwO1xuXHRcdFxuXHRcdHRoaXMudkRvbVBhZExlZnQgPSAwO1xuXHRcdHRoaXMudkRvbVBhZFJpZ2h0ID0gMDtcblx0XHRcblx0XHR0aGlzLmZpdERhdGFDb2xBdmcgPSAwO1xuXHRcdFxuXHRcdHRoaXMud2luZG93QnVmZmVyID0gMjAwOyAvL3BpeGVsIG1hcmdpbiB0byBtYWtlIGNvbHVtbiB2aXNpYmxlIGJlZm9yZSBpdCBpcyBzaG93biBvbiBzY3JlZW5cblx0XHRcblx0XHR0aGlzLnZpc2libGVSb3dzID0gbnVsbDtcblx0XHRcblx0XHR0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG5cdFx0dGhpcy5pc0ZpdERhdGEgPSBmYWxzZTtcblx0XHRcblx0XHR0aGlzLmNvbHVtbnMgPSBbXTtcblx0fVxuXHRcblx0aW5pdGlhbGl6ZSgpe1xuXHRcdHRoaXMuY29tcGF0aWJpbGl0eUNoZWNrKCk7XG5cdFx0dGhpcy5sYXlvdXRDaGVjaygpO1xuXHRcdHRoaXMudmVydFNjcm9sbExpc3RlbigpO1xuXHR9XG5cdFxuXHRjb21wYXRpYmlsaXR5Q2hlY2soKXtcdFx0XG5cdFx0aWYodGhpcy5vcHRpb25zKFwibGF5b3V0XCIpID09IFwiZml0RGF0YVRhYmxlXCIpe1xuXHRcdFx0Y29uc29sZS53YXJuKFwiSG9yaXpvbnRhbCBWaXJ0dWFsIERPTSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGZpdERhdGFUYWJsZSBsYXlvdXQgbW9kZVwiKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodGhpcy5vcHRpb25zKFwicmVzcG9uc2l2ZUxheW91dFwiKSl7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJIb3Jpem9udGFsIFZpcnR1YWwgRE9NIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggcmVzcG9uc2l2ZSBjb2x1bW5zXCIpO1xuXHRcdH1cblx0XHRcblx0XHRpZih0aGlzLm9wdGlvbnMoXCJydGxcIikpe1xuXHRcdFx0Y29uc29sZS53YXJuKFwiSG9yaXpvbnRhbCBWaXJ0dWFsIERPTSBpcyBub3QgY3VycmVudGx5IGNvbXBhdGlibGUgd2l0aCBSVEwgdGV4dCBkaXJlY3Rpb25cIik7XG5cdFx0fVxuXHR9XG5cdFxuXHRsYXlvdXRDaGVjaygpe1xuXHRcdHRoaXMuaXNGaXREYXRhID0gdGhpcy5vcHRpb25zKFwibGF5b3V0XCIpLnN0YXJ0c1dpdGgoJ2ZpdERhdGEnKTtcblx0fVxuXHRcblx0dmVydFNjcm9sbExpc3Rlbigpe1xuXHRcdHRoaXMuc3Vic2NyaWJlKFwic2Nyb2xsLXZlcnRpY2FsXCIsIHRoaXMuY2xlYXJWaXNSb3dDYWNoZS5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcImRhdGEtcmVmcmVzaGVkXCIsIHRoaXMuY2xlYXJWaXNSb3dDYWNoZS5iaW5kKHRoaXMpKTtcblx0fVxuXHRcblx0Y2xlYXJWaXNSb3dDYWNoZSgpe1xuXHRcdHRoaXMudmlzaWJsZVJvd3MgPSBudWxsO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8gUHVibGljIEZ1bmN0aW9ucyAvLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0cmVuZGVyQ29sdW1ucyhyb3csIGZvcmNlKXtcblx0XHR0aGlzLmRhdGFDaGFuZ2UoKTtcblx0fVxuXHRcblx0XG5cdHNjcm9sbENvbHVtbnMobGVmdCwgZGlyKXtcblx0XHRpZih0aGlzLnNjcm9sbExlZnQgIT0gbGVmdCl7XG5cdFx0XHR0aGlzLnNjcm9sbExlZnQgPSBsZWZ0O1xuXHRcdFx0XG5cdFx0XHR0aGlzLnNjcm9sbChsZWZ0IC0gKHRoaXMudkRvbVNjcm9sbFBvc0xlZnQgKyB0aGlzLndpbmRvd0J1ZmZlcikpO1xuXHRcdH1cblx0fVxuXHRcblx0Y2FsY1dpbmRvd0J1ZmZlcigpe1xuXHRcdHZhciBidWZmZXIgPSB0aGlzLmVsZW1lbnRWZXJ0aWNhbC5jbGllbnRXaWR0aDtcblx0XHRcblx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuY29sdW1uc0J5SW5kZXguZm9yRWFjaCgoY29sdW1uKSA9PiB7XG5cdFx0XHRpZihjb2x1bW4udmlzaWJsZSl7XG5cdFx0XHRcdHZhciB3aWR0aCA9IGNvbHVtbi5nZXRXaWR0aCgpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYod2lkdGggPiBidWZmZXIpe1xuXHRcdFx0XHRcdGJ1ZmZlciA9IHdpZHRoO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0dGhpcy53aW5kb3dCdWZmZXIgPSBidWZmZXIgKiAyO1xuXHR9XG5cdFxuXHRyZXJlbmRlckNvbHVtbnModXBkYXRlLCBibG9ja1JlZHJhdyl7XHRcdFxuXHRcdHZhciBvbGQgPSB7XG5cdFx0XHRjb2xzOnRoaXMuY29sdW1ucyxcblx0XHRcdGxlZnRDb2w6dGhpcy5sZWZ0Q29sLFxuXHRcdFx0cmlnaHRDb2w6dGhpcy5yaWdodENvbCxcblx0XHR9LFxuXHRcdGNvbFBvcyA9IDA7XG5cdFx0XG5cdFx0aWYodXBkYXRlICYmICF0aGlzLmluaXRpYWxpemVkKXtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5jbGVhcigpO1xuXHRcdFxuXHRcdHRoaXMuY2FsY1dpbmRvd0J1ZmZlcigpO1xuXHRcdFxuXHRcdHRoaXMuc2Nyb2xsTGVmdCA9IHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbExlZnQ7XG5cdFx0XG5cdFx0dGhpcy52RG9tU2Nyb2xsUG9zTGVmdCA9IHRoaXMuc2Nyb2xsTGVmdCAtIHRoaXMud2luZG93QnVmZmVyO1xuXHRcdHRoaXMudkRvbVNjcm9sbFBvc1JpZ2h0ID0gdGhpcy5zY3JvbGxMZWZ0ICsgdGhpcy5lbGVtZW50VmVydGljYWwuY2xpZW50V2lkdGggKyB0aGlzLndpbmRvd0J1ZmZlcjtcblx0XHRcblx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuY29sdW1uc0J5SW5kZXguZm9yRWFjaCgoY29sdW1uKSA9PiB7XG5cdFx0XHR2YXIgY29uZmlnID0ge30sXG5cdFx0XHR3aWR0aDtcblx0XHRcdFxuXHRcdFx0aWYoY29sdW1uLnZpc2libGUpe1xuXHRcdFx0XHRpZighY29sdW1uLm1vZHVsZXMuZnJvemVuKXtcdFx0XHRcblx0XHRcdFx0XHR3aWR0aCA9IGNvbHVtbi5nZXRXaWR0aCgpO1xuXG5cdFx0XHRcdFx0Y29uZmlnLmxlZnRQb3MgPSBjb2xQb3M7XG5cdFx0XHRcdFx0Y29uZmlnLnJpZ2h0UG9zID0gY29sUG9zICsgd2lkdGg7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Y29uZmlnLndpZHRoID0gd2lkdGg7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYgKHRoaXMuaXNGaXREYXRhKSB7XG5cdFx0XHRcdFx0XHRjb25maWcuZml0RGF0YUNoZWNrID0gY29sdW1uLm1vZHVsZXMudmRvbUhveiA/IGNvbHVtbi5tb2R1bGVzLnZkb21Ib3ouZml0RGF0YUNoZWNrIDogdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYoKGNvbFBvcyArIHdpZHRoID4gdGhpcy52RG9tU2Nyb2xsUG9zTGVmdCkgJiYgKGNvbFBvcyA8IHRoaXMudkRvbVNjcm9sbFBvc1JpZ2h0KSl7XG5cdFx0XHRcdFx0XHQvL2NvbHVtbiBpcyB2aXNpYmxlXG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGlmKHRoaXMubGVmdENvbCA9PSAtMSl7XG5cdFx0XHRcdFx0XHRcdHRoaXMubGVmdENvbCA9IHRoaXMuY29sdW1ucy5sZW5ndGg7XG5cdFx0XHRcdFx0XHRcdHRoaXMudkRvbVBhZExlZnQgPSBjb2xQb3M7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdHRoaXMucmlnaHRDb2wgPSB0aGlzLmNvbHVtbnMubGVuZ3RoO1xuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdC8vIGNvbHVtbiBpcyBoaWRkZW5cblx0XHRcdFx0XHRcdGlmKHRoaXMubGVmdENvbCAhPT0gLTEpe1xuXHRcdFx0XHRcdFx0XHR0aGlzLnZEb21QYWRSaWdodCArPSB3aWR0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0dGhpcy5jb2x1bW5zLnB1c2goY29sdW1uKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRjb2x1bW4ubW9kdWxlcy52ZG9tSG96ID0gY29uZmlnO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGNvbFBvcyArPSB3aWR0aDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdHRoaXMudGFibGVFbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0ID0gdGhpcy52RG9tUGFkTGVmdCArIFwicHhcIjtcblx0XHR0aGlzLnRhYmxlRWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSB0aGlzLnZEb21QYWRSaWdodCArIFwicHhcIjtcblx0XHRcblx0XHR0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcblx0XHRcblx0XHRpZighYmxvY2tSZWRyYXcpe1xuXHRcdFx0aWYoIXVwZGF0ZSB8fCB0aGlzLnJlaW5pdENoYW5nZWQob2xkKSl7XG5cdFx0XHRcdHRoaXMucmVpbml0aWFsaXplUm93cygpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHR0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxMZWZ0ID0gdGhpcy5zY3JvbGxMZWZ0O1xuXHR9XG5cdFxuXHRyZW5kZXJSb3dDZWxscyhyb3cpe1xuXHRcdGlmKHRoaXMuaW5pdGlhbGl6ZWQpe1xuXHRcdFx0dGhpcy5pbml0aWFsaXplUm93KHJvdyk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc3Qgcm93RnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblx0XHRcdHJvdy5jZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG5cdFx0XHRcdHJvd0ZyYWcuYXBwZW5kQ2hpbGQoY2VsbC5nZXRFbGVtZW50KCkpO1xuXHRcdFx0fSk7XG5cdFx0XHRyb3cuZWxlbWVudC5hcHBlbmRDaGlsZChyb3dGcmFnKTtcblxuXHRcdFx0cm93LmNlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcblx0XHRcdFx0Y2VsbC5jZWxsUmVuZGVyZWQoKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXHRcblx0cmVyZW5kZXJSb3dDZWxscyhyb3csIGZvcmNlKXtcblx0XHR0aGlzLnJlaW5pdGlhbGl6ZVJvdyhyb3csIGZvcmNlKTtcblx0fVxuXHRcblx0cmVpbml0aWFsaXplQ29sdW1uV2lkdGhzKGNvbHVtbnMpe1xuXHRcdGZvcihsZXQgaSA9IHRoaXMubGVmdENvbDsgaSA8PSB0aGlzLnJpZ2h0Q29sOyBpKyspe1xuXHRcdFx0dGhpcy5jb2x1bW5zW2ldLnJlaW5pdGlhbGl6ZVdpZHRoKCk7XG5cdFx0fVxuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLyBJbnRlcm5hbCBSZW5kZXJpbmcgLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0ZGVpbml0aWFsaXplKCl7XG5cdFx0dGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuXHR9XG5cdFxuXHRjbGVhcigpe1xuXHRcdHRoaXMuY29sdW1ucyA9IFtdO1xuXHRcdFxuXHRcdHRoaXMubGVmdENvbCA9IC0xO1xuXHRcdHRoaXMucmlnaHRDb2wgPSAwO1xuXHRcdFxuXHRcdHRoaXMudkRvbVNjcm9sbFBvc0xlZnQgPSAwO1xuXHRcdHRoaXMudkRvbVNjcm9sbFBvc1JpZ2h0ID0gMDtcblx0XHR0aGlzLnZEb21QYWRMZWZ0ID0gMDtcblx0XHR0aGlzLnZEb21QYWRSaWdodCA9IDA7XG5cdH1cblx0XG5cdGRhdGFDaGFuZ2UoKXtcblx0XHR2YXIgY2hhbmdlID0gZmFsc2UsXG5cdFx0cm93LCByb3dFbDtcblx0XHRcblx0XHRpZih0aGlzLmlzRml0RGF0YSl7XG5cdFx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuY29sdW1uc0J5SW5kZXguZm9yRWFjaCgoY29sdW1uKSA9PiB7XG5cdFx0XHRcdGlmKCFjb2x1bW4uZGVmaW5pdGlvbi53aWR0aCAmJiBjb2x1bW4udmlzaWJsZSl7XG5cdFx0XHRcdFx0Y2hhbmdlID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdGlmKGNoYW5nZSAmJiB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0RGlzcGxheVJvd3MoKS5sZW5ndGgpe1xuXHRcdFx0XHR0aGlzLnZEb21TY3JvbGxQb3NSaWdodCA9IHRoaXMuc2Nyb2xsTGVmdCArIHRoaXMuZWxlbWVudFZlcnRpY2FsLmNsaWVudFdpZHRoICsgdGhpcy53aW5kb3dCdWZmZXI7XG5cdFx0XHRcdFxuXHRcdFx0XHRyb3cgPSB0aGlzLmNoYWluKFwicm93cy1zYW1wbGVcIiwgWzFdLCBbXSwgKCkgPT4ge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0RGlzcGxheVJvd3MoKTtcblx0XHRcdFx0fSlbMF07XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihyb3cpe1xuXHRcdFx0XHRcdHJvd0VsID0gcm93LmdldEVsZW1lbnQoKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRyb3cuZ2VuZXJhdGVDZWxscygpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHRoaXMudGFibGVFbGVtZW50LmFwcGVuZENoaWxkKHJvd0VsKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRmb3IobGV0IGNvbEVuZCA9IDA7IGNvbEVuZCA8IHJvdy5jZWxscy5sZW5ndGg7IGNvbEVuZCsrKXtcblx0XHRcdFx0XHRcdGxldCBjZWxsID0gcm93LmNlbGxzW2NvbEVuZF07XG5cdFx0XHRcdFx0XHRyb3dFbC5hcHBlbmRDaGlsZChjZWxsLmdldEVsZW1lbnQoKSk7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGNlbGwuY29sdW1uLnJlaW5pdGlhbGl6ZVdpZHRoKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHJvd0VsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocm93RWwpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHRoaXMucmVyZW5kZXJDb2x1bW5zKGZhbHNlLCB0cnVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGlmKHRoaXMub3B0aW9ucyhcImxheW91dFwiKSA9PT0gXCJmaXRDb2x1bW5zXCIpe1xuXHRcdFx0XHR0aGlzLmxheW91dFJlZnJlc2goKTtcblx0XHRcdFx0dGhpcy5yZXJlbmRlckNvbHVtbnMoZmFsc2UsIHRydWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0cmVpbml0Q2hhbmdlZChvbGQpe1xuXHRcdHZhciBtYXRjaCA9IHRydWU7XG5cdFx0XG5cdFx0aWYob2xkLmNvbHMubGVuZ3RoICE9PSB0aGlzLmNvbHVtbnMubGVuZ3RoIHx8IG9sZC5sZWZ0Q29sICE9PSB0aGlzLmxlZnRDb2wgfHwgb2xkLnJpZ2h0Q29sICE9PSB0aGlzLnJpZ2h0Q29sKXtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRcblx0XHRvbGQuY29scy5mb3JFYWNoKChjb2wsIGkpID0+IHtcblx0XHRcdGlmKGNvbCAhPT0gdGhpcy5jb2x1bW5zW2ldKXtcblx0XHRcdFx0bWF0Y2ggPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gIW1hdGNoO1xuXHR9XG5cdFxuXHRyZWluaXRpYWxpemVSb3dzKCl7XG5cdFx0dmFyIHZpc2libGVSb3dzID0gdGhpcy5nZXRWaXNpYmxlUm93cygpLFxuXHRcdG90aGVyUm93cyA9IHRoaXMudGFibGUucm93TWFuYWdlci5nZXRSb3dzKCkuZmlsdGVyKHJvdyA9PiAhdmlzaWJsZVJvd3MuaW5jbHVkZXMocm93KSk7XG5cblx0XHR2aXNpYmxlUm93cy5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdHRoaXMucmVpbml0aWFsaXplUm93KHJvdywgdHJ1ZSk7XG5cdFx0fSk7XG5cblx0XHRvdGhlclJvd3MuZm9yRWFjaCgocm93KSA9Pntcblx0XHRcdHJvdy5kZWluaXRpYWxpemUoKTtcblx0XHR9KTtcblx0fVxuXHRcblx0Z2V0VmlzaWJsZVJvd3MoKXtcblx0XHRpZiAoIXRoaXMudmlzaWJsZVJvd3Mpe1xuXHRcdFx0dGhpcy52aXNpYmxlUm93cyA9IHRoaXMudGFibGUucm93TWFuYWdlci5nZXRWaXNpYmxlUm93cygpO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gdGhpcy52aXNpYmxlUm93cztcdFxuXHR9XG5cdFxuXHRzY3JvbGwoZGlmZil7XG5cdFx0dGhpcy52RG9tU2Nyb2xsUG9zTGVmdCArPSBkaWZmO1xuXHRcdHRoaXMudkRvbVNjcm9sbFBvc1JpZ2h0ICs9IGRpZmY7XG5cdFx0XG5cdFx0aWYoTWF0aC5hYnMoZGlmZikgPiAodGhpcy53aW5kb3dCdWZmZXIgLyAyKSl7XG5cdFx0XHR0aGlzLnJlcmVuZGVyQ29sdW1ucygpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGlmKGRpZmYgPiAwKXtcblx0XHRcdFx0Ly9zY3JvbGwgcmlnaHRcblx0XHRcdFx0dGhpcy5hZGRDb2xSaWdodCgpO1xuXHRcdFx0XHR0aGlzLnJlbW92ZUNvbExlZnQoKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0Ly9zY3JvbGwgbGVmdFxuXHRcdFx0XHR0aGlzLmFkZENvbExlZnQoKTtcblx0XHRcdFx0dGhpcy5yZW1vdmVDb2xSaWdodCgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0Y29sUG9zaXRpb25BZGp1c3QgKHN0YXJ0LCBlbmQsIGRpZmYpe1xuXHRcdGZvcihsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspe1xuXHRcdFx0bGV0IGNvbHVtbiA9IHRoaXMuY29sdW1uc1tpXTtcblx0XHRcdFxuXHRcdFx0Y29sdW1uLm1vZHVsZXMudmRvbUhvei5sZWZ0UG9zICs9IGRpZmY7XG5cdFx0XHRjb2x1bW4ubW9kdWxlcy52ZG9tSG96LnJpZ2h0UG9zICs9IGRpZmY7XG5cdFx0fVxuXHR9XG5cdFxuXHRhZGRDb2xSaWdodCgpe1xuXHRcdHZhciBjaGFuZ2VzID0gZmFsc2UsXG5cdFx0d29ya2luZyA9IHRydWU7XG5cdFx0XG5cdFx0d2hpbGUod29ya2luZyl7XG5cblx0XHRcdGxldCBjb2x1bW4gPSB0aGlzLmNvbHVtbnNbdGhpcy5yaWdodENvbCArIDFdO1xuXHRcdFx0XG5cdFx0XHRpZihjb2x1bW4pe1xuXHRcdFx0XHRpZihjb2x1bW4ubW9kdWxlcy52ZG9tSG96LmxlZnRQb3MgPD0gdGhpcy52RG9tU2Nyb2xsUG9zUmlnaHQpe1xuXHRcdFx0XHRcdGNoYW5nZXMgPSB0cnVlO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHRoaXMuZ2V0VmlzaWJsZVJvd3MoKS5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdFx0XHRcdGlmKHJvdy50eXBlICE9PSBcImdyb3VwXCIpe1xuXHRcdFx0XHRcdFx0XHR2YXIgY2VsbCA9IHJvdy5nZXRDZWxsKGNvbHVtbik7XG5cdFx0XHRcdFx0XHRcdHJvdy5nZXRFbGVtZW50KCkuaW5zZXJ0QmVmb3JlKGNlbGwuZ2V0RWxlbWVudCgpLCByb3cuZ2V0Q2VsbCh0aGlzLmNvbHVtbnNbdGhpcy5yaWdodENvbF0pLmdldEVsZW1lbnQoKS5uZXh0U2libGluZyk7XG5cdFx0XHRcdFx0XHRcdGNlbGwuY2VsbFJlbmRlcmVkKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0dGhpcy5maXREYXRhQ29sQWN0dWFsV2lkdGhDaGVjayhjb2x1bW4pO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHRoaXMucmlnaHRDb2wrKzsgLy8gRG9uJ3QgbW92ZSB0aGlzIGJlbG93IHRoZSA+PSBjaGVjayBiZWxvd1xuXG5cdFx0XHRcdFx0dGhpcy5nZXRWaXNpYmxlUm93cygpLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0XHRcdFx0aWYocm93LnR5cGUgIT09IFwiZ3JvdXBcIil7XG5cdFx0XHRcdFx0XHRcdHJvdy5tb2R1bGVzLnZkb21Ib3oucmlnaHRDb2wgPSB0aGlzLnJpZ2h0Q29sO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKHRoaXMucmlnaHRDb2wgPj0gKHRoaXMuY29sdW1ucy5sZW5ndGggLSAxKSl7XG5cdFx0XHRcdFx0XHR0aGlzLnZEb21QYWRSaWdodCA9IDA7XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0dGhpcy52RG9tUGFkUmlnaHQgLT0gY29sdW1uLmdldFdpZHRoKCk7XG5cdFx0XHRcdFx0fVx0XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHR3b3JraW5nID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0d29ya2luZyA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRpZihjaGFuZ2VzKXtcblx0XHRcdHRoaXMudGFibGVFbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9IHRoaXMudkRvbVBhZFJpZ2h0ICsgXCJweFwiO1xuXHRcdH1cblx0fVxuXHRcblx0YWRkQ29sTGVmdCgpe1xuXHRcdHZhciBjaGFuZ2VzID0gZmFsc2UsXG5cdFx0d29ya2luZyA9IHRydWU7XG5cdFx0XG5cdFx0d2hpbGUod29ya2luZyl7XG5cdFx0XHRsZXQgY29sdW1uID0gdGhpcy5jb2x1bW5zW3RoaXMubGVmdENvbCAtIDFdO1xuXHRcdFx0XG5cdFx0XHRpZihjb2x1bW4pe1xuXHRcdFx0XHRpZihjb2x1bW4ubW9kdWxlcy52ZG9tSG96LnJpZ2h0UG9zID49IHRoaXMudkRvbVNjcm9sbFBvc0xlZnQpe1xuXHRcdFx0XHRcdGNoYW5nZXMgPSB0cnVlO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHRoaXMuZ2V0VmlzaWJsZVJvd3MoKS5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdFx0XHRcdGlmKHJvdy50eXBlICE9PSBcImdyb3VwXCIpe1xuXHRcdFx0XHRcdFx0XHR2YXIgY2VsbCA9IHJvdy5nZXRDZWxsKGNvbHVtbik7XG5cdFx0XHRcdFx0XHRcdHJvdy5nZXRFbGVtZW50KCkuaW5zZXJ0QmVmb3JlKGNlbGwuZ2V0RWxlbWVudCgpLCByb3cuZ2V0Q2VsbCh0aGlzLmNvbHVtbnNbdGhpcy5sZWZ0Q29sXSkuZ2V0RWxlbWVudCgpKTtcblx0XHRcdFx0XHRcdFx0Y2VsbC5jZWxsUmVuZGVyZWQoKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHR0aGlzLmxlZnRDb2wtLTsgLy8gZG9uJ3QgbW92ZSB0aGlzIGJlbG93IHRoZSA8PSBjaGVjayBiZWxvd1xuXG5cdFx0XHRcdFx0dGhpcy5nZXRWaXNpYmxlUm93cygpLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0XHRcdFx0aWYocm93LnR5cGUgIT09IFwiZ3JvdXBcIil7XG5cdFx0XHRcdFx0XHRcdHJvdy5tb2R1bGVzLnZkb21Ib3oubGVmdENvbCA9IHRoaXMubGVmdENvbDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZih0aGlzLmxlZnRDb2wgPD0gMCl7IC8vIHJlcGxpY2F0aW5nIGxvZ2ljIGluIGFkZENvbFJpZ2h0XG5cdFx0XHRcdFx0XHR0aGlzLnZEb21QYWRMZWZ0ID0gMDtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHR0aGlzLnZEb21QYWRMZWZ0IC09IGNvbHVtbi5nZXRXaWR0aCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHRsZXQgZGlmZiA9IHRoaXMuZml0RGF0YUNvbEFjdHVhbFdpZHRoQ2hlY2soY29sdW1uKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZihkaWZmKXtcblx0XHRcdFx0XHRcdHRoaXMuc2Nyb2xsTGVmdCA9IHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbExlZnQgPSB0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxMZWZ0ICsgZGlmZjtcblx0XHRcdFx0XHRcdHRoaXMudkRvbVBhZFJpZ2h0IC09IGRpZmY7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0d29ya2luZyA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHdvcmtpbmcgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0aWYoY2hhbmdlcyl7XG5cdFx0XHR0aGlzLnRhYmxlRWxlbWVudC5zdHlsZS5wYWRkaW5nTGVmdCA9IHRoaXMudkRvbVBhZExlZnQgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG5cdFxuXHRyZW1vdmVDb2xSaWdodCgpe1xuXHRcdHZhciBjaGFuZ2VzID0gZmFsc2UsXG5cdFx0d29ya2luZyA9IHRydWU7XG5cdFx0XG5cdFx0d2hpbGUod29ya2luZyl7XG5cdFx0XHRsZXQgY29sdW1uID0gdGhpcy5jb2x1bW5zW3RoaXMucmlnaHRDb2xdO1xuXHRcdFx0XG5cdFx0XHRpZihjb2x1bW4pe1xuXHRcdFx0XHRpZihjb2x1bW4ubW9kdWxlcy52ZG9tSG96LmxlZnRQb3MgPiB0aGlzLnZEb21TY3JvbGxQb3NSaWdodCl7XG5cdFx0XHRcdFx0Y2hhbmdlcyA9IHRydWU7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0dGhpcy5nZXRWaXNpYmxlUm93cygpLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0XHRcdFx0aWYocm93LnR5cGUgIT09IFwiZ3JvdXBcIil7XG5cdFx0XHRcdFx0XHRcdHZhciBjZWxsID0gcm93LmdldENlbGwoY29sdW1uKTtcblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0cm93LmdldEVsZW1lbnQoKS5yZW1vdmVDaGlsZChjZWxsLmdldEVsZW1lbnQoKSk7XG5cdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKGV4KSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiQ291bGQgbm90IHJlbW92ZUNvbFJpZ2h0XCIsIGV4Lm1lc3NhZ2UpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0dGhpcy52RG9tUGFkUmlnaHQgKz0gY29sdW1uLmdldFdpZHRoKCk7XG5cdFx0XHRcdFx0dGhpcy5yaWdodENvbCAtLTtcblxuXHRcdFx0XHRcdHRoaXMuZ2V0VmlzaWJsZVJvd3MoKS5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdFx0XHRcdGlmKHJvdy50eXBlICE9PSBcImdyb3VwXCIpe1xuXHRcdFx0XHRcdFx0XHRyb3cubW9kdWxlcy52ZG9tSG96LnJpZ2h0Q29sID0gdGhpcy5yaWdodENvbDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHdvcmtpbmcgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR3b3JraW5nID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGNoYW5nZXMpe1xuXHRcdFx0dGhpcy50YWJsZUVsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gdGhpcy52RG9tUGFkUmlnaHQgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG5cdFxuXHRyZW1vdmVDb2xMZWZ0KCl7XG5cdFx0dmFyIGNoYW5nZXMgPSBmYWxzZSxcblx0XHR3b3JraW5nID0gdHJ1ZTtcblxuXHRcdHdoaWxlKHdvcmtpbmcpe1xuXHRcdFx0bGV0IGNvbHVtbiA9IHRoaXMuY29sdW1uc1t0aGlzLmxlZnRDb2xdO1xuXHRcdFx0XG5cdFx0XHRpZihjb2x1bW4pe1xuXHRcdFx0XHRpZihjb2x1bW4ubW9kdWxlcy52ZG9tSG96LnJpZ2h0UG9zIDwgdGhpcy52RG9tU2Nyb2xsUG9zTGVmdCl7XG5cdFx0XHRcdFx0Y2hhbmdlcyA9IHRydWU7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0dGhpcy5nZXRWaXNpYmxlUm93cygpLmZvckVhY2goKHJvdykgPT4ge1x0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGlmKHJvdy50eXBlICE9PSBcImdyb3VwXCIpe1xuXHRcdFx0XHRcdFx0XHR2YXIgY2VsbCA9IHJvdy5nZXRDZWxsKGNvbHVtbik7XG5cdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdHJvdy5nZXRFbGVtZW50KCkucmVtb3ZlQ2hpbGQoY2VsbC5nZXRFbGVtZW50KCkpO1xuXHRcdFx0XHRcdFx0XHR9IGNhdGNoIChleCkge1xuXHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUud2FybihcIkNvdWxkIG5vdCByZW1vdmVDb2xMZWZ0XCIsIGV4Lm1lc3NhZ2UpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0dGhpcy52RG9tUGFkTGVmdCArPSBjb2x1bW4uZ2V0V2lkdGgoKTtcblx0XHRcdFx0XHR0aGlzLmxlZnRDb2wgKys7XG5cblx0XHRcdFx0XHR0aGlzLmdldFZpc2libGVSb3dzKCkuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRcdFx0XHRpZihyb3cudHlwZSAhPT0gXCJncm91cFwiKXtcblx0XHRcdFx0XHRcdFx0cm93Lm1vZHVsZXMudmRvbUhvei5sZWZ0Q29sID0gdGhpcy5sZWZ0Q29sO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0d29ya2luZyA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHdvcmtpbmcgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0aWYoY2hhbmdlcyl7XG5cdFx0XHR0aGlzLnRhYmxlRWxlbWVudC5zdHlsZS5wYWRkaW5nTGVmdCA9IHRoaXMudkRvbVBhZExlZnQgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG5cdFxuXHRmaXREYXRhQ29sQWN0dWFsV2lkdGhDaGVjayhjb2x1bW4pe1xuXHRcdHZhciBuZXdXaWR0aCwgd2lkdGhEaWZmO1xuXHRcdFxuXHRcdGlmKGNvbHVtbi5tb2R1bGVzLnZkb21Ib3ouZml0RGF0YUNoZWNrKXtcblx0XHRcdGNvbHVtbi5yZWluaXRpYWxpemVXaWR0aCgpO1xuXHRcdFx0XG5cdFx0XHRuZXdXaWR0aCA9IGNvbHVtbi5nZXRXaWR0aCgpO1xuXHRcdFx0d2lkdGhEaWZmID0gbmV3V2lkdGggLSBjb2x1bW4ubW9kdWxlcy52ZG9tSG96LndpZHRoO1xuXHRcdFx0XG5cdFx0XHRpZih3aWR0aERpZmYpe1xuXHRcdFx0XHRjb2x1bW4ubW9kdWxlcy52ZG9tSG96LnJpZ2h0UG9zICs9IHdpZHRoRGlmZjtcblx0XHRcdFx0Y29sdW1uLm1vZHVsZXMudmRvbUhvei53aWR0aCA9IG5ld1dpZHRoO1xuXHRcdFx0XHR0aGlzLmNvbFBvc2l0aW9uQWRqdXN0KHRoaXMuY29sdW1ucy5pbmRleE9mKGNvbHVtbikgKyAxLCB0aGlzLmNvbHVtbnMubGVuZ3RoLCB3aWR0aERpZmYpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRjb2x1bW4ubW9kdWxlcy52ZG9tSG96LmZpdERhdGFDaGVjayA9IGZhbHNlO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gd2lkdGhEaWZmO1xuXHR9XG5cdFxuXHRpbml0aWFsaXplUm93KHJvdyl7XG5cdFx0aWYocm93LnR5cGUgIT09IFwiZ3JvdXBcIil7XG5cdFx0XHRyb3cubW9kdWxlcy52ZG9tSG96ID0ge1xuXHRcdFx0XHRsZWZ0Q29sOnRoaXMubGVmdENvbCxcblx0XHRcdFx0cmlnaHRDb2w6dGhpcy5yaWdodENvbCxcblx0XHRcdH07XG5cblx0XHRcdGlmKHRoaXMudGFibGUubW9kdWxlcy5mcm96ZW5Db2x1bW5zKXtcblx0XHRcdFx0dGhpcy50YWJsZS5tb2R1bGVzLmZyb3plbkNvbHVtbnMubGVmdENvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5hcHBlbmRDZWxsKHJvdywgY29sdW1uKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihsZXQgaSA9IHRoaXMubGVmdENvbDsgaSA8PSB0aGlzLnJpZ2h0Q29sOyBpKyspe1xuXHRcdFx0XHR0aGlzLmFwcGVuZENlbGwocm93LCB0aGlzLmNvbHVtbnNbaV0pO1xuXHRcdFx0fVxuXG5cdFx0XHRpZih0aGlzLnRhYmxlLm1vZHVsZXMuZnJvemVuQ29sdW1ucyl7XG5cdFx0XHRcdHRoaXMudGFibGUubW9kdWxlcy5mcm96ZW5Db2x1bW5zLnJpZ2h0Q29sdW1ucy5mb3JFYWNoKChjb2x1bW4pID0+IHtcblx0XHRcdFx0XHR0aGlzLmFwcGVuZENlbGwocm93LCBjb2x1bW4pO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdGFwcGVuZENlbGwocm93LCBjb2x1bW4pe1xuXHRcdGlmKGNvbHVtbiAmJiBjb2x1bW4udmlzaWJsZSl7XG5cdFx0XHRsZXQgY2VsbCA9IHJvdy5nZXRDZWxsKGNvbHVtbik7XG5cdFx0XHRcblx0XHRcdHJvdy5nZXRFbGVtZW50KCkuYXBwZW5kQ2hpbGQoY2VsbC5nZXRFbGVtZW50KCkpO1xuXHRcdFx0Y2VsbC5jZWxsUmVuZGVyZWQoKTtcblx0XHR9XG5cdH1cblx0XG5cdHJlaW5pdGlhbGl6ZVJvdyhyb3csIGZvcmNlKXtcblx0XHRpZihyb3cudHlwZSAhPT0gXCJncm91cFwiKXtcblx0XHRcdGlmKGZvcmNlIHx8ICFyb3cubW9kdWxlcy52ZG9tSG96IHx8IHJvdy5tb2R1bGVzLnZkb21Ib3oubGVmdENvbCAhPT0gdGhpcy5sZWZ0Q29sIHx8IHJvdy5tb2R1bGVzLnZkb21Ib3oucmlnaHRDb2wgIT09IHRoaXMucmlnaHRDb2wpe1xuXHRcdFx0XHRcblx0XHRcdFx0dmFyIHJvd0VsID0gcm93LmdldEVsZW1lbnQoKTtcblx0XHRcdFx0d2hpbGUocm93RWwuZmlyc3RDaGlsZCkgcm93RWwucmVtb3ZlQ2hpbGQocm93RWwuZmlyc3RDaGlsZCk7XG5cblx0XHRcdFx0dGhpcy5pbml0aWFsaXplUm93KHJvdyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmNsYXNzIENvbHVtbk1hbmFnZXIgZXh0ZW5kcyBDb3JlRmVhdHVyZSB7XG5cdFxuXHRjb25zdHJ1Y3RvciAodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblx0XHRcblx0XHR0aGlzLmJsb2NrSG96U2Nyb2xsRXZlbnQgPSBmYWxzZTtcblx0XHR0aGlzLmhlYWRlcnNFbGVtZW50ID0gbnVsbDtcblx0XHR0aGlzLmNvbnRlbnRzRWxlbWVudCA9IG51bGw7XG5cdFx0dGhpcy5lbGVtZW50ID0gbnVsbCA7IC8vY29udGFpbmluZyBlbGVtZW50XG5cdFx0dGhpcy5jb2x1bW5zID0gW107IC8vIGNvbHVtbiBkZWZpbml0aW9uIG9iamVjdFxuXHRcdHRoaXMuY29sdW1uc0J5SW5kZXggPSBbXTsgLy9jb2x1bW5zIGJ5IGluZGV4XG5cdFx0dGhpcy5jb2x1bW5zQnlGaWVsZCA9IHt9OyAvL2NvbHVtbnMgYnkgZmllbGRcblx0XHR0aGlzLnNjcm9sbExlZnQgPSAwO1xuXHRcdHRoaXMub3B0aW9uc0xpc3QgPSBuZXcgT3B0aW9uc0xpc3QodGhpcy50YWJsZSwgXCJjb2x1bW4gZGVmaW5pdGlvblwiLCBkZWZhdWx0Q29sdW1uT3B0aW9ucyk7XG5cdFx0XG5cdFx0dGhpcy5yZWRyYXdCbG9jayA9IGZhbHNlOyAvL3ByZXZlbnQgcmVkcmF3cyB0byBhbGxvdyBtdWx0aXBsZSBkYXRhIG1hbmlwdWxhdGlvbnMgYmVmb3JlIGNvbnRpbnVpbmdcblx0XHR0aGlzLnJlZHJhd0Jsb2NrVXBkYXRlID0gbnVsbDsgLy9zdG9yZSBsYXRlc3QgcmVkcmF3IHVwZGF0ZSBvbmx5IHN0YXR1c1xuXHRcdFxuXHRcdHRoaXMucmVuZGVyZXIgPSBudWxsO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLyBTZXR1cCBGdW5jdGlvbnMgLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLmluaXRpYWxpemVSZW5kZXJlcigpO1xuXHRcdFxuXHRcdHRoaXMuaGVhZGVyc0VsZW1lbnQgPSB0aGlzLmNyZWF0ZUhlYWRlcnNFbGVtZW50KCk7XG5cdFx0dGhpcy5jb250ZW50c0VsZW1lbnQgPSB0aGlzLmNyZWF0ZUhlYWRlckNvbnRlbnRzRWxlbWVudCgpO1xuXHRcdHRoaXMuZWxlbWVudCA9IHRoaXMuY3JlYXRlSGVhZGVyRWxlbWVudCgpO1xuXHRcdFxuXHRcdHRoaXMuY29udGVudHNFbGVtZW50Lmluc2VydEJlZm9yZSh0aGlzLmhlYWRlcnNFbGVtZW50LCB0aGlzLmNvbnRlbnRzRWxlbWVudC5maXJzdENoaWxkKTtcblx0XHR0aGlzLmVsZW1lbnQuaW5zZXJ0QmVmb3JlKHRoaXMuY29udGVudHNFbGVtZW50LCB0aGlzLmVsZW1lbnQuZmlyc3RDaGlsZCk7XG5cblx0XHR0aGlzLmluaXRpYWxpemVTY3JvbGxXaGVlbFdhdGNoZXIoKTtcblx0XHRcblx0XHR0aGlzLnN1YnNjcmliZShcInNjcm9sbC1ob3Jpem9udGFsXCIsIHRoaXMuc2Nyb2xsSG9yaXpvbnRhbC5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnN1YnNjcmliZShcInNjcm9sbGJhci12ZXJ0aWNhbFwiLCB0aGlzLnBhZFZlcnRpY2FsU2Nyb2xsYmFyLmJpbmQodGhpcykpO1xuXHR9XG5cblx0cGFkVmVydGljYWxTY3JvbGxiYXIod2lkdGgpe1xuXHRcdGlmKHRoaXMudGFibGUucnRsKXtcblx0XHRcdHRoaXMuaGVhZGVyc0VsZW1lbnQuc3R5bGUubWFyZ2luTGVmdCA9IHdpZHRoICsgXCJweFwiO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuaGVhZGVyc0VsZW1lbnQuc3R5bGUubWFyZ2luUmlnaHQgPSB3aWR0aCArIFwicHhcIjtcblx0XHR9XG5cdH1cblx0XG5cdGluaXRpYWxpemVSZW5kZXJlcigpe1xuXHRcdHZhciByZW5kZXJDbGFzcztcblx0XHRcblx0XHR2YXIgcmVuZGVyZXJzID0ge1xuXHRcdFx0XCJ2aXJ0dWFsXCI6IFZpcnR1YWxEb21Ib3Jpem9udGFsLFxuXHRcdFx0XCJiYXNpY1wiOiBCYXNpY0hvcml6b250YWwsXG5cdFx0fTtcblx0XHRcblx0XHRpZih0eXBlb2YgdGhpcy50YWJsZS5vcHRpb25zLnJlbmRlckhvcml6b250YWwgPT09IFwic3RyaW5nXCIpe1xuXHRcdFx0cmVuZGVyQ2xhc3MgPSByZW5kZXJlcnNbdGhpcy50YWJsZS5vcHRpb25zLnJlbmRlckhvcml6b250YWxdO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJlbmRlckNsYXNzID0gdGhpcy50YWJsZS5vcHRpb25zLnJlbmRlckhvcml6b250YWw7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHJlbmRlckNsYXNzKXtcblx0XHRcdHRoaXMucmVuZGVyZXIgPSBuZXcgcmVuZGVyQ2xhc3ModGhpcy50YWJsZSwgdGhpcy5lbGVtZW50LCB0aGlzLnRhYmxlRWxlbWVudCk7XG5cdFx0XHR0aGlzLnJlbmRlcmVyLmluaXRpYWxpemUoKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKFwiVW5hYmxlIHRvIGZpbmQgbWF0Y2hpbmcgcmVuZGVyZXI6XCIsIHRoaXMudGFibGUub3B0aW9ucy5yZW5kZXJIb3Jpem9udGFsKTtcblx0XHR9XG5cdH1cblx0XG5cdFxuXHRjcmVhdGVIZWFkZXJzRWxlbWVudCAoKXtcblx0XHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdFxuXHRcdGVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItaGVhZGVyc1wiKTtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwicm93XCIpO1xuXHRcdFxuXHRcdHJldHVybiBlbDtcblx0fVxuXG5cdGNyZWF0ZUhlYWRlckNvbnRlbnRzRWxlbWVudCAoKXtcblx0XHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdFxuXHRcdGVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItaGVhZGVyLWNvbnRlbnRzXCIpO1xuXHRcdGVsLnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJyb3dncm91cFwiKTtcblx0XHRcblx0XHRyZXR1cm4gZWw7XG5cdH1cblx0XG5cdGNyZWF0ZUhlYWRlckVsZW1lbnQgKCl7XG5cdFx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcblx0XHRlbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWhlYWRlclwiKTtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwicm93Z3JvdXBcIik7XG5cdFx0XG5cdFx0aWYoIXRoaXMudGFibGUub3B0aW9ucy5oZWFkZXJWaXNpYmxlKXtcblx0XHRcdGVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItaGVhZGVyLWhpZGRlblwiKTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIGVsO1xuXHR9XG5cdFxuXHQvL3JldHVybiBjb250YWluaW5nIGVsZW1lbnRcblx0Z2V0RWxlbWVudCgpe1xuXHRcdHJldHVybiB0aGlzLmVsZW1lbnQ7XG5cdH1cblxuXHQvL3JldHVybiBjb250YWluaW5nIGNvbnRlbnRzIGVsZW1lbnRcblx0Z2V0Q29udGVudHNFbGVtZW50KCl7XG5cdFx0cmV0dXJuIHRoaXMuY29udGVudHNFbGVtZW50O1xuXHR9XG5cdFxuXHRcblx0Ly9yZXR1cm4gaGVhZGVyIGNvbnRhaW5pbmcgZWxlbWVudFxuXHRnZXRIZWFkZXJzRWxlbWVudCgpe1xuXHRcdHJldHVybiB0aGlzLmhlYWRlcnNFbGVtZW50O1xuXHR9XG5cdFxuXHQvL3Njcm9sbCBob3Jpem9udGFsbHkgdG8gbWF0Y2ggdGFibGUgYm9keVxuXHRzY3JvbGxIb3Jpem9udGFsKGxlZnQpe1xuXHRcdHRoaXMuY29udGVudHNFbGVtZW50LnNjcm9sbExlZnQgPSBsZWZ0O1xuXG5cdFx0dGhpcy5zY3JvbGxMZWZ0ID0gbGVmdDtcblx0XHRcblx0XHR0aGlzLnJlbmRlcmVyLnNjcm9sbENvbHVtbnMobGVmdCk7XG5cdH1cblxuXHRpbml0aWFsaXplU2Nyb2xsV2hlZWxXYXRjaGVyKCl7XG5cdFx0dGhpcy5jb250ZW50c0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIndoZWVsXCIsIChlKSA9PiB7XG5cdFx0XHR2YXIgbGVmdDtcblxuXHRcdFx0aWYoZS5kZWx0YVgpe1xuXHRcdFx0XHRsZWZ0ID0gdGhpcy5jb250ZW50c0VsZW1lbnQuc2Nyb2xsTGVmdCArIGUuZGVsdGFYO1xuXG5cdFx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5zY3JvbGxIb3Jpem9udGFsKGxlZnQpO1xuXHRcdFx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuc2Nyb2xsSG9yaXpvbnRhbChsZWZ0KTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLyBDb2x1bW4gU2V0dXAgRnVuY3Rpb25zIC8vLy8vLy8vLy8vLy9cblx0Z2VuZXJhdGVDb2x1bW5zRnJvbVJvd0RhdGEoZGF0YSl7XG5cdFx0dmFyIGNvbHMgPSBbXSxcblx0XHRkZWZpbml0aW9ucyA9IHRoaXMudGFibGUub3B0aW9ucy5hdXRvQ29sdW1uc0RlZmluaXRpb25zLFxuXHRcdHJvdywgc29ydGVyO1xuXHRcdFxuXHRcdGlmKGRhdGEgJiYgZGF0YS5sZW5ndGgpe1xuXHRcdFx0XG5cdFx0XHRyb3cgPSBkYXRhWzBdO1xuXHRcdFx0XG5cdFx0XHRmb3IodmFyIGtleSBpbiByb3cpe1xuXHRcdFx0XHRsZXQgY29sID0ge1xuXHRcdFx0XHRcdGZpZWxkOmtleSxcblx0XHRcdFx0XHR0aXRsZTprZXksXG5cdFx0XHRcdH07XG5cdFx0XHRcdFxuXHRcdFx0XHRsZXQgdmFsdWUgPSByb3dba2V5XTtcblx0XHRcdFx0XG5cdFx0XHRcdHN3aXRjaCh0eXBlb2YgdmFsdWUpe1xuXHRcdFx0XHRcdGNhc2UgXCJ1bmRlZmluZWRcIjpcblx0XHRcdFx0XHRcdHNvcnRlciA9IFwic3RyaW5nXCI7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRjYXNlIFwiYm9vbGVhblwiOlxuXHRcdFx0XHRcdFx0c29ydGVyID0gXCJib29sZWFuXCI7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRjYXNlIFwib2JqZWN0XCI6XG5cdFx0XHRcdFx0XHRpZihBcnJheS5pc0FycmF5KHZhbHVlKSl7XG5cdFx0XHRcdFx0XHRcdHNvcnRlciA9IFwiYXJyYXlcIjtcblx0XHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdFx0c29ydGVyID0gXCJzdHJpbmdcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRpZighaXNOYU4odmFsdWUpICYmIHZhbHVlICE9PSBcIlwiKXtcblx0XHRcdFx0XHRcdFx0c29ydGVyID0gXCJudW1iZXJcIjtcblx0XHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdFx0aWYodmFsdWUubWF0Y2goLygoXlswLTldK1thLXpdKyl8KF5bYS16XStbMC05XSspKSskL2kpKXtcblx0XHRcdFx0XHRcdFx0XHRzb3J0ZXIgPSBcImFscGhhbnVtXCI7XG5cdFx0XHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRzb3J0ZXIgPSBcInN0cmluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0Y29sLnNvcnRlciA9IHNvcnRlcjtcblx0XHRcdFx0XG5cdFx0XHRcdGNvbHMucHVzaChjb2wpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihkZWZpbml0aW9ucyl7XG5cdFx0XHRcdFxuXHRcdFx0XHRzd2l0Y2godHlwZW9mIGRlZmluaXRpb25zKXtcblx0XHRcdFx0XHRjYXNlIFwiZnVuY3Rpb25cIjpcblx0XHRcdFx0XHRcdHRoaXMudGFibGUub3B0aW9ucy5jb2x1bW5zID0gZGVmaW5pdGlvbnMuY2FsbCh0aGlzLnRhYmxlLCBjb2xzKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGNhc2UgXCJvYmplY3RcIjpcblx0XHRcdFx0XHRcdGlmKEFycmF5LmlzQXJyYXkoZGVmaW5pdGlvbnMpKXtcblx0XHRcdFx0XHRcdFx0Y29scy5mb3JFYWNoKChjb2wpID0+IHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgbWF0Y2ggPSBkZWZpbml0aW9ucy5maW5kKChkZWYpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBkZWYuZmllbGQgPT09IGNvbC5maWVsZDtcblx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0XHRpZihtYXRjaCl7XG5cdFx0XHRcdFx0XHRcdFx0XHRPYmplY3QuYXNzaWduKGNvbCwgbWF0Y2gpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjb2xzLmZvckVhY2goKGNvbCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdGlmKGRlZmluaXRpb25zW2NvbC5maWVsZF0pe1xuXHRcdFx0XHRcdFx0XHRcdFx0T2JqZWN0LmFzc2lnbihjb2wsIGRlZmluaXRpb25zW2NvbC5maWVsZF0pO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdHRoaXMudGFibGUub3B0aW9ucy5jb2x1bW5zID0gY29scztcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMudGFibGUub3B0aW9ucy5jb2x1bW5zID0gY29scztcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5zZXRDb2x1bW5zKHRoaXMudGFibGUub3B0aW9ucy5jb2x1bW5zKTtcblx0XHR9XG5cdH1cblx0XG5cdHNldENvbHVtbnMoY29scywgcm93KXtcblx0XHR3aGlsZSh0aGlzLmhlYWRlcnNFbGVtZW50LmZpcnN0Q2hpbGQpIHRoaXMuaGVhZGVyc0VsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5oZWFkZXJzRWxlbWVudC5maXJzdENoaWxkKTtcblx0XHRcblx0XHR0aGlzLmNvbHVtbnMgPSBbXTtcblx0XHR0aGlzLmNvbHVtbnNCeUluZGV4ID0gW107XG5cdFx0dGhpcy5jb2x1bW5zQnlGaWVsZCA9IHt9O1xuXHRcdFxuXHRcdHRoaXMuZGlzcGF0Y2goXCJjb2x1bW5zLWxvYWRpbmdcIik7XG5cdFx0XG5cdFx0Y29scy5mb3JFYWNoKChkZWYsIGkpID0+IHtcblx0XHRcdHRoaXMuX2FkZENvbHVtbihkZWYpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHRoaXMuX3JlSW5kZXhDb2x1bW5zKCk7XG5cdFx0XG5cdFx0dGhpcy5kaXNwYXRjaChcImNvbHVtbnMtbG9hZGVkXCIpO1xuXHRcdFxuXHRcdHRoaXMucmVyZW5kZXJDb2x1bW5zKGZhbHNlLCB0cnVlKTtcblx0XHRcblx0XHR0aGlzLnJlZHJhdyh0cnVlKTtcblx0fVxuXHRcblx0X2FkZENvbHVtbihkZWZpbml0aW9uLCBiZWZvcmUsIG5leHRUb0NvbHVtbil7XG5cdFx0dmFyIGNvbHVtbiA9IG5ldyBDb2x1bW4oZGVmaW5pdGlvbiwgdGhpcyksXG5cdFx0Y29sRWwgPSBjb2x1bW4uZ2V0RWxlbWVudCgpLFxuXHRcdGluZGV4ID0gbmV4dFRvQ29sdW1uID8gdGhpcy5maW5kQ29sdW1uSW5kZXgobmV4dFRvQ29sdW1uKSA6IG5leHRUb0NvbHVtbjtcblx0XHRcblx0XHRpZihuZXh0VG9Db2x1bW4gJiYgaW5kZXggPiAtMSl7XG5cdFx0XHR2YXIgdG9wQ29sdW1uID0gbmV4dFRvQ29sdW1uLmdldFRvcENvbHVtbigpO1xuXHRcdFx0dmFyIHBhcmVudEluZGV4ID0gdGhpcy5jb2x1bW5zLmluZGV4T2YodG9wQ29sdW1uKTtcblx0XHRcdHZhciBuZXh0RWwgPSB0b3BDb2x1bW4uZ2V0RWxlbWVudCgpO1xuXHRcdFx0XG5cdFx0XHRpZihiZWZvcmUpe1xuXHRcdFx0XHR0aGlzLmNvbHVtbnMuc3BsaWNlKHBhcmVudEluZGV4LCAwLCBjb2x1bW4pO1xuXHRcdFx0XHRuZXh0RWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoY29sRWwsIG5leHRFbCk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMuY29sdW1ucy5zcGxpY2UocGFyZW50SW5kZXggKyAxLCAwLCBjb2x1bW4pO1xuXHRcdFx0XHRuZXh0RWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoY29sRWwsIG5leHRFbC5uZXh0U2libGluZyk7XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYoYmVmb3JlKXtcblx0XHRcdFx0dGhpcy5jb2x1bW5zLnVuc2hpZnQoY29sdW1uKTtcblx0XHRcdFx0dGhpcy5oZWFkZXJzRWxlbWVudC5pbnNlcnRCZWZvcmUoY29sdW1uLmdldEVsZW1lbnQoKSwgdGhpcy5oZWFkZXJzRWxlbWVudC5maXJzdENoaWxkKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5jb2x1bW5zLnB1c2goY29sdW1uKTtcblx0XHRcdFx0dGhpcy5oZWFkZXJzRWxlbWVudC5hcHBlbmRDaGlsZChjb2x1bW4uZ2V0RWxlbWVudCgpKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0Y29sdW1uLmNvbHVtblJlbmRlcmVkKCk7XG5cdFx0XG5cdFx0cmV0dXJuIGNvbHVtbjtcblx0fVxuXHRcblx0cmVnaXN0ZXJDb2x1bW5GaWVsZChjb2wpe1xuXHRcdGlmKGNvbC5kZWZpbml0aW9uLmZpZWxkKXtcblx0XHRcdHRoaXMuY29sdW1uc0J5RmllbGRbY29sLmRlZmluaXRpb24uZmllbGRdID0gY29sO1xuXHRcdH1cblx0fVxuXHRcblx0cmVnaXN0ZXJDb2x1bW5Qb3NpdGlvbihjb2wpe1xuXHRcdHRoaXMuY29sdW1uc0J5SW5kZXgucHVzaChjb2wpO1xuXHR9XG5cdFxuXHRfcmVJbmRleENvbHVtbnMoKXtcblx0XHR0aGlzLmNvbHVtbnNCeUluZGV4ID0gW107XG5cdFx0XG5cdFx0dGhpcy5jb2x1bW5zLmZvckVhY2goZnVuY3Rpb24oY29sdW1uKXtcblx0XHRcdGNvbHVtbi5yZVJlZ2lzdGVyUG9zaXRpb24oKTtcblx0XHR9KTtcblx0fVxuXHRcblx0Ly9lbnN1cmUgY29sdW1uIGhlYWRlcnMgdGFrZSB1cCB0aGUgY29ycmVjdCBhbW91bnQgb2Ygc3BhY2UgaW4gY29sdW1uIGdyb3Vwc1xuXHR2ZXJ0aWNhbEFsaWduSGVhZGVycygpe1xuXHRcdHZhciBtaW5IZWlnaHQgPSAwO1xuXHRcdFxuXHRcdGlmKCF0aGlzLnJlZHJhd0Jsb2NrKXtcblxuXHRcdFx0dGhpcy5oZWFkZXJzRWxlbWVudC5zdHlsZS5oZWlnaHQ9XCJcIjtcblx0XHRcdFxuXHRcdFx0dGhpcy5jb2x1bW5zLmZvckVhY2goKGNvbHVtbikgPT4ge1xuXHRcdFx0XHRjb2x1bW4uY2xlYXJWZXJ0aWNhbEFsaWduKCk7XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0dGhpcy5jb2x1bW5zLmZvckVhY2goKGNvbHVtbikgPT4ge1xuXHRcdFx0XHR2YXIgaGVpZ2h0ID0gY29sdW1uLmdldEhlaWdodCgpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoaGVpZ2h0ID4gbWluSGVpZ2h0KXtcblx0XHRcdFx0XHRtaW5IZWlnaHQgPSBoZWlnaHQ7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLmhlYWRlcnNFbGVtZW50LnN0eWxlLmhlaWdodCA9IG1pbkhlaWdodCArIFwicHhcIjtcblxuXHRcdFx0dGhpcy5jb2x1bW5zLmZvckVhY2goKGNvbHVtbikgPT4ge1xuXHRcdFx0XHRjb2x1bW4udmVydGljYWxBbGlnbih0aGlzLnRhYmxlLm9wdGlvbnMuY29sdW1uSGVhZGVyVmVydEFsaWduLCBtaW5IZWlnaHQpO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5hZGp1c3RUYWJsZVNpemUoKTtcblx0XHR9XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8gQ29sdW1uIERldGFpbHMgLy8vLy8vLy8vLy8vLy8vLy9cblx0ZmluZENvbHVtbihzdWJqZWN0KXtcblx0XHR2YXIgY29sdW1ucztcblxuXHRcdGlmKHR5cGVvZiBzdWJqZWN0ID09IFwib2JqZWN0XCIpe1xuXHRcdFx0XG5cdFx0XHRpZihzdWJqZWN0IGluc3RhbmNlb2YgQ29sdW1uKXtcblx0XHRcdFx0Ly9zdWJqZWN0IGlzIGNvbHVtbiBlbGVtZW50XG5cdFx0XHRcdHJldHVybiBzdWJqZWN0O1xuXHRcdFx0fWVsc2UgaWYoc3ViamVjdCBpbnN0YW5jZW9mIENvbHVtbkNvbXBvbmVudCl7XG5cdFx0XHRcdC8vc3ViamVjdCBpcyBwdWJsaWMgY29sdW1uIGNvbXBvbmVudFxuXHRcdFx0XHRyZXR1cm4gc3ViamVjdC5fZ2V0U2VsZigpIHx8IGZhbHNlO1xuXHRcdFx0fWVsc2UgaWYodHlwZW9mIEhUTUxFbGVtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIHN1YmplY3QgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCl7XG5cblx0XHRcdFx0Y29sdW1ucyA9IFtdO1xuXG5cdFx0XHRcdHRoaXMuY29sdW1ucy5mb3JFYWNoKChjb2x1bW4pID0+IHtcblx0XHRcdFx0XHRjb2x1bW5zLnB1c2goY29sdW1uKTtcblx0XHRcdFx0XHRjb2x1bW5zID0gY29sdW1ucy5jb25jYXQoY29sdW1uLmdldENvbHVtbnModHJ1ZSkpO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHQvL3N1YmplY3QgaXMgYSBIVE1MIGVsZW1lbnQgb2YgdGhlIGNvbHVtbiBoZWFkZXJcblx0XHRcdFx0bGV0IG1hdGNoID0gY29sdW1ucy5maW5kKChjb2x1bW4pID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gY29sdW1uLmVsZW1lbnQgPT09IHN1YmplY3Q7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRcblx0XHRcdFx0cmV0dXJuIG1hdGNoIHx8IGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0fWVsc2Uge1xuXHRcdFx0Ly9zdWJqZWN0IHNob3VsZCBiZSB0cmVhdGVkIGFzIHRoZSBmaWVsZCBuYW1lIG9mIHRoZSBjb2x1bW5cblx0XHRcdHJldHVybiB0aGlzLmNvbHVtbnNCeUZpZWxkW3N1YmplY3RdIHx8IGZhbHNlO1xuXHRcdH1cblx0XHRcblx0XHQvL2NhdGNoIGFsbCBmb3IgYW55IG90aGVyIHR5cGUgb2YgaW5wdXRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0XG5cdGdldENvbHVtbkJ5RmllbGQoZmllbGQpe1xuXHRcdHJldHVybiB0aGlzLmNvbHVtbnNCeUZpZWxkW2ZpZWxkXTtcblx0fVxuXHRcblx0Z2V0Q29sdW1uc0J5RmllbGRSb290KHJvb3Qpe1xuXHRcdHZhciBtYXRjaGVzID0gW107XG5cdFx0XG5cdFx0T2JqZWN0LmtleXModGhpcy5jb2x1bW5zQnlGaWVsZCkuZm9yRWFjaCgoZmllbGQpID0+IHtcblx0XHRcdHZhciBmaWVsZFJvb3QgPSBmaWVsZC5zcGxpdChcIi5cIilbMF07XG5cdFx0XHRpZihmaWVsZFJvb3QgPT09IHJvb3Qpe1xuXHRcdFx0XHRtYXRjaGVzLnB1c2godGhpcy5jb2x1bW5zQnlGaWVsZFtmaWVsZF0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiBtYXRjaGVzO1xuXHR9XG5cdFxuXHRnZXRDb2x1bW5CeUluZGV4KGluZGV4KXtcblx0XHRyZXR1cm4gdGhpcy5jb2x1bW5zQnlJbmRleFtpbmRleF07XG5cdH1cblx0XG5cdGdldEZpcnN0VmlzaWJsZUNvbHVtbigpe1xuXHRcdHZhciBpbmRleCA9IHRoaXMuY29sdW1uc0J5SW5kZXguZmluZEluZGV4KChjb2wpID0+IHtcblx0XHRcdHJldHVybiBjb2wudmlzaWJsZTtcblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gaW5kZXggPiAtMSA/IHRoaXMuY29sdW1uc0J5SW5kZXhbaW5kZXhdIDogZmFsc2U7XG5cdH1cblx0XG5cdGdldENvbHVtbnMoKXtcblx0XHRyZXR1cm4gdGhpcy5jb2x1bW5zO1xuXHR9XG5cdFxuXHRmaW5kQ29sdW1uSW5kZXgoY29sdW1uKXtcblx0XHRyZXR1cm4gdGhpcy5jb2x1bW5zQnlJbmRleC5maW5kSW5kZXgoKGNvbCkgPT4ge1xuXHRcdFx0cmV0dXJuIGNvbHVtbiA9PT0gY29sO1xuXHRcdH0pO1xuXHR9XG5cdFxuXHQvL3JldHVybiBhbGwgY29sdW1ucyB0aGF0IGFyZSBub3QgZ3JvdXBzXG5cdGdldFJlYWxDb2x1bW5zKCl7XG5cdFx0cmV0dXJuIHRoaXMuY29sdW1uc0J5SW5kZXg7XG5cdH1cblx0XG5cdC8vdHJhdmVyc2UgYWNyb3NzIGNvbHVtbnMgYW5kIGNhbGwgYWN0aW9uXG5cdHRyYXZlcnNlKGNhbGxiYWNrKXtcblx0XHR0aGlzLmNvbHVtbnNCeUluZGV4LmZvckVhY2goKGNvbHVtbixpKSA9Pntcblx0XHRcdGNhbGxiYWNrKGNvbHVtbiwgaSk7XG5cdFx0fSk7XG5cdH1cblx0XG5cdC8vZ2V0IGRlZmluaXRpb25zIG9mIGFjdHVhbCBjb2x1bW5zXG5cdGdldERlZmluaXRpb25zKGFjdGl2ZSl7XG5cdFx0dmFyIG91dHB1dCA9IFtdO1xuXHRcdFxuXHRcdHRoaXMuY29sdW1uc0J5SW5kZXguZm9yRWFjaCgoY29sdW1uKSA9PiB7XG5cdFx0XHRpZighYWN0aXZlIHx8IChhY3RpdmUgJiYgY29sdW1uLnZpc2libGUpKXtcblx0XHRcdFx0b3V0cHV0LnB1c2goY29sdW1uLmdldERlZmluaXRpb24oKSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXHRcblx0Ly9nZXQgZnVsbCBuZXN0ZWQgZGVmaW5pdGlvbiB0cmVlXG5cdGdldERlZmluaXRpb25UcmVlKCl7XG5cdFx0dmFyIG91dHB1dCA9IFtdO1xuXHRcdFxuXHRcdHRoaXMuY29sdW1ucy5mb3JFYWNoKChjb2x1bW4pID0+IHtcblx0XHRcdG91dHB1dC5wdXNoKGNvbHVtbi5nZXREZWZpbml0aW9uKHRydWUpKTtcblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cdFxuXHRnZXRDb21wb25lbnRzKHN0cnVjdHVyZWQpe1xuXHRcdHZhciBvdXRwdXQgPSBbXSxcblx0XHRjb2x1bW5zID0gc3RydWN0dXJlZCA/IHRoaXMuY29sdW1ucyA6IHRoaXMuY29sdW1uc0J5SW5kZXg7XG5cdFx0XG5cdFx0Y29sdW1ucy5mb3JFYWNoKChjb2x1bW4pID0+IHtcblx0XHRcdG91dHB1dC5wdXNoKGNvbHVtbi5nZXRDb21wb25lbnQoKSk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXHRcblx0Z2V0V2lkdGgoKXtcblx0XHR2YXIgd2lkdGggPSAwO1xuXHRcdFxuXHRcdHRoaXMuY29sdW1uc0J5SW5kZXguZm9yRWFjaCgoY29sdW1uKSA9PiB7XG5cdFx0XHRpZihjb2x1bW4udmlzaWJsZSl7XG5cdFx0XHRcdHdpZHRoICs9IGNvbHVtbi5nZXRXaWR0aCgpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdHJldHVybiB3aWR0aDtcblx0fVxuXHRcblx0bW92ZUNvbHVtbihmcm9tLCB0bywgYWZ0ZXIpe1xuXHRcdHRvLmVsZW1lbnQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZnJvbS5lbGVtZW50LCB0by5lbGVtZW50KTtcblx0XHRcblx0XHRpZihhZnRlcil7XG5cdFx0XHR0by5lbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRvLmVsZW1lbnQsIGZyb20uZWxlbWVudCk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMubW92ZUNvbHVtbkFjdHVhbChmcm9tLCB0bywgYWZ0ZXIpO1xuXG5cdFx0dGhpcy52ZXJ0aWNhbEFsaWduSGVhZGVycygpO1xuXHRcdFxuXHRcdHRoaXMudGFibGUucm93TWFuYWdlci5yZWluaXRpYWxpemUoKTtcblx0fVxuXHRcblx0bW92ZUNvbHVtbkFjdHVhbChmcm9tLCB0bywgYWZ0ZXIpe1xuXHRcdGlmKGZyb20ucGFyZW50LmlzR3JvdXApe1xuXHRcdFx0dGhpcy5fbW92ZUNvbHVtbkluQXJyYXkoZnJvbS5wYXJlbnQuY29sdW1ucywgZnJvbSwgdG8sIGFmdGVyKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLl9tb3ZlQ29sdW1uSW5BcnJheSh0aGlzLmNvbHVtbnMsIGZyb20sIHRvLCBhZnRlcik7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuX21vdmVDb2x1bW5JbkFycmF5KHRoaXMuY29sdW1uc0J5SW5kZXgsIGZyb20sIHRvLCBhZnRlciwgdHJ1ZSk7XG5cdFx0XG5cdFx0dGhpcy5yZXJlbmRlckNvbHVtbnModHJ1ZSk7XG5cdFx0XG5cdFx0dGhpcy5kaXNwYXRjaChcImNvbHVtbi1tb3ZlZFwiLCBmcm9tLCB0bywgYWZ0ZXIpO1xuXHRcdFxuXHRcdGlmKHRoaXMuc3Vic2NyaWJlZEV4dGVybmFsKFwiY29sdW1uTW92ZWRcIikpe1xuXHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwiY29sdW1uTW92ZWRcIiwgZnJvbS5nZXRDb21wb25lbnQoKSwgdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmdldENvbXBvbmVudHMoKSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRfbW92ZUNvbHVtbkluQXJyYXkoY29sdW1ucywgZnJvbSwgdG8sIGFmdGVyLCB1cGRhdGVSb3dzKXtcblx0XHR2YXJcdGZyb21JbmRleCA9IGNvbHVtbnMuaW5kZXhPZihmcm9tKSxcblx0XHR0b0luZGV4LCByb3dzID0gW107XG5cdFx0XG5cdFx0aWYgKGZyb21JbmRleCA+IC0xKSB7XG5cdFx0XHRcblx0XHRcdGNvbHVtbnMuc3BsaWNlKGZyb21JbmRleCwgMSk7XG5cdFx0XHRcblx0XHRcdHRvSW5kZXggPSBjb2x1bW5zLmluZGV4T2YodG8pO1xuXHRcdFx0XG5cdFx0XHRpZiAodG9JbmRleCA+IC0xKSB7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihhZnRlcil7XG5cdFx0XHRcdFx0dG9JbmRleCA9IHRvSW5kZXgrMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dG9JbmRleCA9IGZyb21JbmRleDtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Y29sdW1ucy5zcGxpY2UodG9JbmRleCwgMCwgZnJvbSk7XG5cdFx0XHRcblx0XHRcdGlmKHVwZGF0ZVJvd3Mpe1xuXHRcdFx0XHRcblx0XHRcdFx0cm93cyA9IHRoaXMuY2hhaW4oXCJjb2x1bW4tbW92aW5nLXJvd3NcIiwgW2Zyb20sIHRvLCBhZnRlcl0sIG51bGwsIFtdKSB8fCBbXTtcblx0XHRcdFx0XG5cdFx0XHRcdHJvd3MgPSByb3dzLmNvbmNhdCh0aGlzLnRhYmxlLnJvd01hbmFnZXIucm93cyk7XG5cdFx0XHRcdFxuXHRcdFx0XHRyb3dzLmZvckVhY2goZnVuY3Rpb24ocm93KXtcblx0XHRcdFx0XHRpZihyb3cuY2VsbHMubGVuZ3RoKXtcblx0XHRcdFx0XHRcdHZhciBjZWxsID0gcm93LmNlbGxzLnNwbGljZShmcm9tSW5kZXgsIDEpWzBdO1xuXHRcdFx0XHRcdFx0cm93LmNlbGxzLnNwbGljZSh0b0luZGV4LCAwLCBjZWxsKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdHNjcm9sbFRvQ29sdW1uKGNvbHVtbiwgcG9zaXRpb24sIGlmVmlzaWJsZSl7XG5cdFx0dmFyIGxlZnQgPSAwLFxuXHRcdG9mZnNldCA9IGNvbHVtbi5nZXRMZWZ0T2Zmc2V0KCksXG5cdFx0YWRqdXN0ID0gMCxcblx0XHRjb2xFbCA9IGNvbHVtbi5nZXRFbGVtZW50KCk7XG5cdFx0XG5cdFx0XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdFxuXHRcdFx0aWYodHlwZW9mIHBvc2l0aW9uID09PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdFx0cG9zaXRpb24gPSB0aGlzLnRhYmxlLm9wdGlvbnMuc2Nyb2xsVG9Db2x1bW5Qb3NpdGlvbjtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYodHlwZW9mIGlmVmlzaWJsZSA9PT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRcdGlmVmlzaWJsZSA9IHRoaXMudGFibGUub3B0aW9ucy5zY3JvbGxUb0NvbHVtbklmVmlzaWJsZTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoY29sdW1uLnZpc2libGUpe1xuXHRcdFx0XHRcblx0XHRcdFx0Ly9hbGlnbiB0byBjb3JyZWN0IHBvc2l0aW9uXG5cdFx0XHRcdHN3aXRjaChwb3NpdGlvbil7XG5cdFx0XHRcdFx0Y2FzZSBcIm1pZGRsZVwiOlxuXHRcdFx0XHRcdGNhc2UgXCJjZW50ZXJcIjpcblx0XHRcdFx0XHRcdGFkanVzdCA9IC10aGlzLmVsZW1lbnQuY2xpZW50V2lkdGggLyAyO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Y2FzZSBcInJpZ2h0XCI6XG5cdFx0XHRcdFx0XHRhZGp1c3QgPSBjb2xFbC5jbGllbnRXaWR0aCAtIHRoaXMuaGVhZGVyc0VsZW1lbnQuY2xpZW50V2lkdGg7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0Ly9jaGVjayBjb2x1bW4gdmlzaWJpbGl0eVxuXHRcdFx0XHRpZighaWZWaXNpYmxlKXtcblx0XHRcdFx0XHRpZihvZmZzZXQgPiAwICYmIG9mZnNldCArIGNvbEVsLm9mZnNldFdpZHRoIDwgdGhpcy5lbGVtZW50LmNsaWVudFdpZHRoKXtcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdC8vY2FsY3VsYXRlIHNjcm9sbCBwb3NpdGlvblxuXHRcdFx0XHRsZWZ0ID0gb2Zmc2V0ICsgYWRqdXN0O1xuXHRcdFx0XHRcblx0XHRcdFx0bGVmdCA9IE1hdGgubWF4KE1hdGgubWluKGxlZnQsIHRoaXMudGFibGUucm93TWFuYWdlci5lbGVtZW50LnNjcm9sbFdpZHRoIC0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQuY2xpZW50V2lkdGgpLDApO1xuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnNjcm9sbEhvcml6b250YWwobGVmdCk7XG5cdFx0XHRcdHRoaXMuc2Nyb2xsSG9yaXpvbnRhbChsZWZ0KTtcblx0XHRcdFx0XG5cdFx0XHRcdHJlc29sdmUoKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiU2Nyb2xsIEVycm9yIC0gQ29sdW1uIG5vdCB2aXNpYmxlXCIpO1xuXHRcdFx0XHRyZWplY3QoXCJTY3JvbGwgRXJyb3IgLSBDb2x1bW4gbm90IHZpc2libGVcIik7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHR9KTtcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLyBDZWxsIE1hbmFnZW1lbnQgLy8vLy8vLy8vLy8vLy8vLy9cblx0Z2VuZXJhdGVDZWxscyhyb3cpe1xuXHRcdHZhciBjZWxscyA9IFtdO1xuXHRcdFxuXHRcdHRoaXMuY29sdW1uc0J5SW5kZXguZm9yRWFjaCgoY29sdW1uKSA9PiB7XG5cdFx0XHRjZWxscy5wdXNoKGNvbHVtbi5nZW5lcmF0ZUNlbGwocm93KSk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0cmV0dXJuIGNlbGxzO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vIENvbHVtbiBNYW5hZ2VtZW50IC8vLy8vLy8vLy8vLy8vLy8vXG5cdGdldEZsZXhCYXNlV2lkdGgoKXtcblx0XHR2YXIgdG90YWxXaWR0aCA9IHRoaXMudGFibGUuZWxlbWVudC5jbGllbnRXaWR0aCwgLy90YWJsZSBlbGVtZW50IHdpZHRoXG5cdFx0Zml4ZWRXaWR0aCA9IDA7XG5cdFx0XG5cdFx0Ly9hZGp1c3QgZm9yIHZlcnRpY2FsIHNjcm9sbGJhciBpZiBwcmVzZW50XG5cdFx0aWYodGhpcy50YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQuc2Nyb2xsSGVpZ2h0ID4gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQuY2xpZW50SGVpZ2h0KXtcblx0XHRcdHRvdGFsV2lkdGggLT0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQub2Zmc2V0V2lkdGggLSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5jbGllbnRXaWR0aDtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5jb2x1bW5zQnlJbmRleC5mb3JFYWNoKGZ1bmN0aW9uKGNvbHVtbil7XG5cdFx0XHR2YXIgd2lkdGgsIG1pbldpZHRoLCBjb2xXaWR0aDtcblx0XHRcdFxuXHRcdFx0aWYoY29sdW1uLnZpc2libGUpe1xuXHRcdFx0XHRcblx0XHRcdFx0d2lkdGggPSBjb2x1bW4uZGVmaW5pdGlvbi53aWR0aCB8fCAwO1xuXHRcdFx0XHRcblx0XHRcdFx0bWluV2lkdGggPSBwYXJzZUludChjb2x1bW4ubWluV2lkdGgpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYodHlwZW9mKHdpZHRoKSA9PSBcInN0cmluZ1wiKXtcblx0XHRcdFx0XHRpZih3aWR0aC5pbmRleE9mKFwiJVwiKSA+IC0xKXtcblx0XHRcdFx0XHRcdGNvbFdpZHRoID0gKHRvdGFsV2lkdGggLyAxMDApICogcGFyc2VJbnQod2lkdGgpIDtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRjb2xXaWR0aCA9IHBhcnNlSW50KHdpZHRoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRjb2xXaWR0aCA9IHdpZHRoO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRmaXhlZFdpZHRoICs9IGNvbFdpZHRoID4gbWluV2lkdGggPyBjb2xXaWR0aCA6IG1pbldpZHRoO1xuXHRcdFx0XHRcblx0XHRcdH1cblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gZml4ZWRXaWR0aDtcblx0fVxuXHRcblx0YWRkQ29sdW1uKGRlZmluaXRpb24sIGJlZm9yZSwgbmV4dFRvQ29sdW1uKXtcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0dmFyIGNvbHVtbiA9IHRoaXMuX2FkZENvbHVtbihkZWZpbml0aW9uLCBiZWZvcmUsIG5leHRUb0NvbHVtbik7XG5cdFx0XHRcblx0XHRcdHRoaXMuX3JlSW5kZXhDb2x1bW5zKCk7XG5cdFx0XHRcblx0XHRcdHRoaXMuZGlzcGF0Y2goXCJjb2x1bW4tYWRkXCIsIGRlZmluaXRpb24sIGJlZm9yZSwgbmV4dFRvQ29sdW1uKTtcblx0XHRcdFxuXHRcdFx0aWYodGhpcy5sYXlvdXRNb2RlKCkgIT0gXCJmaXRDb2x1bW5zXCIpe1xuXHRcdFx0XHRjb2x1bW4ucmVpbml0aWFsaXplV2lkdGgoKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5yZWRyYXcodHJ1ZSk7XG5cdFx0XHRcblx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5yZWluaXRpYWxpemUoKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5yZXJlbmRlckNvbHVtbnMoKTtcblx0XHRcdFxuXHRcdFx0cmVzb2x2ZShjb2x1bW4pO1xuXHRcdH0pO1xuXHR9XG5cdFxuXHQvL3JlbW92ZSBjb2x1bW4gZnJvbSBzeXN0ZW1cblx0ZGVyZWdpc3RlckNvbHVtbihjb2x1bW4pe1xuXHRcdHZhciBmaWVsZCA9IGNvbHVtbi5nZXRGaWVsZCgpLFxuXHRcdGluZGV4O1xuXHRcdFxuXHRcdC8vcmVtb3ZlIGZyb20gZmllbGQgbGlzdFxuXHRcdGlmKGZpZWxkKXtcblx0XHRcdGRlbGV0ZSB0aGlzLmNvbHVtbnNCeUZpZWxkW2ZpZWxkXTtcblx0XHR9XG5cdFx0XG5cdFx0Ly9yZW1vdmUgZnJvbSBpbmRleCBsaXN0XG5cdFx0aW5kZXggPSB0aGlzLmNvbHVtbnNCeUluZGV4LmluZGV4T2YoY29sdW1uKTtcblx0XHRcblx0XHRpZihpbmRleCA+IC0xKXtcblx0XHRcdHRoaXMuY29sdW1uc0J5SW5kZXguc3BsaWNlKGluZGV4LCAxKTtcblx0XHR9XG5cdFx0XG5cdFx0Ly9yZW1vdmUgZnJvbSBjb2x1bW4gbGlzdFxuXHRcdGluZGV4ID0gdGhpcy5jb2x1bW5zLmluZGV4T2YoY29sdW1uKTtcblx0XHRcblx0XHRpZihpbmRleCA+IC0xKXtcblx0XHRcdHRoaXMuY29sdW1ucy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLnZlcnRpY2FsQWxpZ25IZWFkZXJzKCk7XG5cdFx0XG5cdFx0dGhpcy5yZWRyYXcoKTtcblx0fVxuXHRcblx0cmVyZW5kZXJDb2x1bW5zKHVwZGF0ZSwgc2lsZW50KXtcblx0XHRpZighdGhpcy5yZWRyYXdCbG9jayl7XG5cdFx0XHR0aGlzLnJlbmRlcmVyLnJlcmVuZGVyQ29sdW1ucyh1cGRhdGUsIHNpbGVudCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYodXBkYXRlID09PSBmYWxzZSB8fCAodXBkYXRlID09PSB0cnVlICYmIHRoaXMucmVkcmF3QmxvY2tVcGRhdGUgPT09IG51bGwpKXtcblx0XHRcdFx0dGhpcy5yZWRyYXdCbG9ja1VwZGF0ZSA9IHVwZGF0ZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdGJsb2NrUmVkcmF3KCl7XG5cdFx0dGhpcy5yZWRyYXdCbG9jayA9IHRydWU7XG5cdFx0dGhpcy5yZWRyYXdCbG9ja1VwZGF0ZSA9IG51bGw7XG5cdH1cblx0XG5cdHJlc3RvcmVSZWRyYXcoKXtcblx0XHR0aGlzLnJlZHJhd0Jsb2NrID0gZmFsc2U7XG5cdFx0dGhpcy52ZXJ0aWNhbEFsaWduSGVhZGVycygpO1xuXHRcdHRoaXMucmVuZGVyZXIucmVyZW5kZXJDb2x1bW5zKHRoaXMucmVkcmF3QmxvY2tVcGRhdGUpO1xuXHRcdFxuXHR9XG5cdFxuXHQvL3JlZHJhdyBjb2x1bW5zXG5cdHJlZHJhdyhmb3JjZSl7XG5cdFx0aWYoSGVscGVycy5lbFZpc2libGUodGhpcy5lbGVtZW50KSl7XG5cdFx0XHR0aGlzLnZlcnRpY2FsQWxpZ25IZWFkZXJzKCk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGZvcmNlKXtcblx0XHRcdHRoaXMudGFibGUucm93TWFuYWdlci5yZXNldFNjcm9sbCgpO1xuXHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnJlaW5pdGlhbGl6ZSgpO1xuXHRcdH1cblx0XHRcblx0XHRpZighdGhpcy5jb25maXJtKFwidGFibGUtcmVkcmF3aW5nXCIsIGZvcmNlKSl7XG5cdFx0XHR0aGlzLmxheW91dFJlZnJlc2goZm9yY2UpO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLmRpc3BhdGNoKFwidGFibGUtcmVkcmF3XCIsIGZvcmNlKTtcblx0XHRcblx0XHR0aGlzLnRhYmxlLmZvb3Rlck1hbmFnZXIucmVkcmF3KCk7XG5cdH1cbn1cblxuY2xhc3MgQmFzaWNWZXJ0aWNhbCBleHRlbmRzIFJlbmRlcmVye1xuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXHRcdFxuXHRcdHRoaXMudmVydGljYWxGaWxsTW9kZSA9IFwiZmlsbFwiO1xuXHRcdFxuXHRcdHRoaXMuc2Nyb2xsVG9wID0gMDtcblx0XHR0aGlzLnNjcm9sbExlZnQgPSAwO1xuXHRcdFxuXHRcdHRoaXMuc2Nyb2xsVG9wID0gMDtcblx0XHR0aGlzLnNjcm9sbExlZnQgPSAwO1xuXHR9XG5cdFxuXHRjbGVhclJvd3MoKXtcblx0XHR2YXIgZWxlbWVudCA9IHRoaXMudGFibGVFbGVtZW50O1xuXHRcdFxuXHRcdC8vIGVsZW1lbnQuY2hpbGRyZW4uZGV0YWNoKCk7XG5cdFx0d2hpbGUoZWxlbWVudC5maXJzdENoaWxkKSBlbGVtZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQuZmlyc3RDaGlsZCk7XG5cdFx0XG5cdFx0ZWxlbWVudC5zY3JvbGxUb3AgPSAwO1xuXHRcdGVsZW1lbnQuc2Nyb2xsTGVmdCA9IDA7XG5cdFx0XG5cdFx0ZWxlbWVudC5zdHlsZS5taW5XaWR0aCA9IFwiXCI7XG5cdFx0ZWxlbWVudC5zdHlsZS5taW5IZWlnaHQgPSBcIlwiO1xuXHRcdGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0ZWxlbWVudC5zdHlsZS52aXNpYmlsaXR5ID0gXCJcIjtcblx0fVxuXHRcblx0cmVuZGVyUm93cygpIHtcblx0XHR2YXIgZWxlbWVudCA9IHRoaXMudGFibGVFbGVtZW50LFxuXHRcdG9ubHlHcm91cEhlYWRlcnMgPSB0cnVlLFxuXHRcdHRhYmxlRnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRyb3dzID0gdGhpcy5yb3dzKCk7XG5cdFx0XG5cdFx0cm93cy5mb3JFYWNoKChyb3csIGluZGV4KSA9PiB7XG5cdFx0XHR0aGlzLnN0eWxlUm93KHJvdywgaW5kZXgpO1xuXHRcdFx0cm93LmluaXRpYWxpemUoZmFsc2UsIHRydWUpO1xuXHRcdFx0XG5cdFx0XHRpZiAocm93LnR5cGUgIT09IFwiZ3JvdXBcIikge1xuXHRcdFx0XHRvbmx5R3JvdXBIZWFkZXJzID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHRhYmxlRnJhZy5hcHBlbmRDaGlsZChyb3cuZ2V0RWxlbWVudCgpKTtcblx0XHR9KTtcblx0XHRcblx0XHRlbGVtZW50LmFwcGVuZENoaWxkKHRhYmxlRnJhZyk7XG5cdFx0XG5cdFx0cm93cy5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdHJvdy5yZW5kZXJlZCgpO1xuXHRcdFx0XG5cdFx0XHRpZighcm93LmhlaWdodEluaXRpYWxpemVkKSB7XG5cdFx0XHRcdHJvdy5jYWxjSGVpZ2h0KHRydWUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdHJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRpZighcm93LmhlaWdodEluaXRpYWxpemVkKSB7XG5cdFx0XHRcdHJvdy5zZXRDZWxsSGVpZ2h0KCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0XG5cdFx0XG5cdFx0aWYob25seUdyb3VwSGVhZGVycyl7XG5cdFx0XHRlbGVtZW50LnN0eWxlLm1pbldpZHRoID0gdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmdldFdpZHRoKCkgKyBcInB4XCI7XG5cdFx0fWVsc2Uge1xuXHRcdFx0ZWxlbWVudC5zdHlsZS5taW5XaWR0aCA9IFwiXCI7XG5cdFx0fVxuXHR9XG5cdFxuXHRcblx0cmVyZW5kZXJSb3dzKGNhbGxiYWNrKXtcdFxuXHRcdHRoaXMuY2xlYXJSb3dzKCk7XG5cdFx0XG5cdFx0aWYoY2FsbGJhY2spe1xuXHRcdFx0Y2FsbGJhY2soKTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5yZW5kZXJSb3dzKCk7XG5cdH1cblx0XG5cdHNjcm9sbFRvUm93TmVhcmVzdFRvcChyb3cpe1xuXHRcdHZhciByb3dUb3AgPSBIZWxwZXJzLmVsT2Zmc2V0KHJvdy5nZXRFbGVtZW50KCkpLnRvcDtcblx0XHRcblx0XHRyZXR1cm4gIShNYXRoLmFicyh0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxUb3AgLSByb3dUb3ApID4gTWF0aC5hYnModGhpcy5lbGVtZW50VmVydGljYWwuc2Nyb2xsVG9wICsgdGhpcy5lbGVtZW50VmVydGljYWwuY2xpZW50SGVpZ2h0IC0gcm93VG9wKSk7XG5cdH1cblx0XG5cdHNjcm9sbFRvUm93KHJvdyl7XG5cdFx0dmFyIHJvd0VsID0gcm93LmdldEVsZW1lbnQoKTtcblx0XHRcblx0XHR0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxUb3AgPSBIZWxwZXJzLmVsT2Zmc2V0KHJvd0VsKS50b3AgLSBIZWxwZXJzLmVsT2Zmc2V0KHRoaXMuZWxlbWVudFZlcnRpY2FsKS50b3AgKyB0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxUb3A7XG5cdH1cblx0XG5cdHZpc2libGVSb3dzKGluY2x1ZGluZ0J1ZmZlcil7XG5cdFx0cmV0dXJuIHRoaXMucm93cygpO1xuXHR9XG5cdFxufVxuXG5jbGFzcyBWaXJ0dWFsRG9tVmVydGljYWwgZXh0ZW5kcyBSZW5kZXJlcntcblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblxuXHRcdHRoaXMudmVydGljYWxGaWxsTW9kZSA9IFwiZmlsbFwiO1xuXG5cdFx0dGhpcy5zY3JvbGxUb3AgPSAwO1xuXHRcdHRoaXMuc2Nyb2xsTGVmdCA9IDA7XG5cblx0XHR0aGlzLnZEb21Sb3dIZWlnaHQgPSAyMDsgLy9hcHByb3hpbWF0aW9uIG9mIHJvdyBoZWlnaHRzIGZvciBwYWRkaW5nXG5cblx0XHR0aGlzLnZEb21Ub3AgPSAwOyAvL2hvbGQgcG9zaXRpb24gZm9yIGZpcnN0IHJlbmRlcmVkIHJvdyBpbiB0aGUgdmlydHVhbCBET01cblx0XHR0aGlzLnZEb21Cb3R0b20gPSAwOyAvL2hvbGQgcG9zaXRpb24gZm9yIGxhc3QgcmVuZGVyZWQgcm93IGluIHRoZSB2aXJ0dWFsIERPTVxuXG5cdFx0dGhpcy52RG9tU2Nyb2xsUG9zVG9wID0gMDsgLy9sYXN0IHNjcm9sbCBwb3NpdGlvbiBvZiB0aGUgdkRvbSB0b3A7XG5cdFx0dGhpcy52RG9tU2Nyb2xsUG9zQm90dG9tID0gMDsgLy9sYXN0IHNjcm9sbCBwb3NpdGlvbiBvZiB0aGUgdkRvbSBib3R0b207XG5cblx0XHR0aGlzLnZEb21Ub3BQYWQgPSAwOyAvL2hvbGQgdmFsdWUgb2YgcGFkZGluZyBmb3IgdG9wIG9mIHZpcnR1YWwgRE9NXG5cdFx0dGhpcy52RG9tQm90dG9tUGFkID0gMDsgLy9ob2xkIHZhbHVlIG9mIHBhZGRpbmcgZm9yIGJvdHRvbSBvZiB2aXJ0dWFsIERPTVxuXG5cdFx0dGhpcy52RG9tTWF4UmVuZGVyQ2hhaW4gPSA5MDsgLy90aGUgbWF4aW11bSBudW1iZXIgb2YgZG9tIGVsZW1lbnRzIHRoYXQgY2FuIGJlIHJlbmRlcmVkIGluIDEgZ29cblxuXHRcdHRoaXMudkRvbVdpbmRvd0J1ZmZlciA9IDA7IC8vd2luZG93IHJvdyBidWZmZXIgYmVmb3JlIHJlbW92aW5nIGVsZW1lbnRzLCB0byBzbW9vdGggc2Nyb2xsaW5nXG5cblx0XHR0aGlzLnZEb21XaW5kb3dNaW5Ub3RhbFJvd3MgPSAyMDsgLy9taW5pbXVtIG51bWJlciBvZiByb3dzIHRvIGJlIGdlbmVyYXRlZCBpbiB2aXJ0dWFsIGRvbSAocHJldmVudCBidWZmZXJpbmcgaXNzdWVzIG9uIHRhYmxlcyB3aXRoIHRhbGwgcm93cylcblx0XHR0aGlzLnZEb21XaW5kb3dNaW5NYXJnaW5Sb3dzID0gNTsgLy9taW5pbXVtIG51bWJlciBvZiByb3dzIHRvIGJlIGdlbmVyYXRlZCBpbiB2aXJ0dWFsIGRvbSBtYXJnaW5cblxuXHRcdHRoaXMudkRvbVRvcE5ld1Jvd3MgPSBbXTsgLy9yb3dzIHRvIG5vcm1hbGl6ZSBhZnRlciBhcHBlbmRpbmcgdG8gb3B0aW1pemUgcmVuZGVyIHNwZWVkXG5cdFx0dGhpcy52RG9tQm90dG9tTmV3Um93cyA9IFtdOyAvL3Jvd3MgdG8gbm9ybWFsaXplIGFmdGVyIGFwcGVuZGluZyB0byBvcHRpbWl6ZSByZW5kZXIgc3BlZWRcblx0fVxuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLyBQdWJsaWMgRnVuY3Rpb25zIC8vLy8vLy8vLy8vXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0Y2xlYXJSb3dzKCl7XG5cdFx0dmFyIGVsZW1lbnQgPSB0aGlzLnRhYmxlRWxlbWVudDtcblxuXHRcdC8vIGVsZW1lbnQuY2hpbGRyZW4uZGV0YWNoKCk7XG5cdFx0d2hpbGUoZWxlbWVudC5maXJzdENoaWxkKSBlbGVtZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQuZmlyc3RDaGlsZCk7XG5cblx0XHRlbGVtZW50LnN0eWxlLnBhZGRpbmdUb3AgPSBcIlwiO1xuXHRcdGVsZW1lbnQuc3R5bGUucGFkZGluZ0JvdHRvbSA9IFwiXCI7XG5cdFx0ZWxlbWVudC5zdHlsZS5taW5IZWlnaHQgPSBcIlwiO1xuXHRcdGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0ZWxlbWVudC5zdHlsZS52aXNpYmlsaXR5ID0gXCJcIjtcblxuXHRcdHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbFRvcCA9IDA7XG5cdFx0dGhpcy5lbGVtZW50VmVydGljYWwuc2Nyb2xsTGVmdCA9IDA7XG5cblx0XHR0aGlzLnNjcm9sbFRvcCA9IDA7XG5cdFx0dGhpcy5zY3JvbGxMZWZ0ID0gMDtcblxuXHRcdHRoaXMudkRvbVRvcCA9IDA7XG5cdFx0dGhpcy52RG9tQm90dG9tID0gMDtcblx0XHR0aGlzLnZEb21Ub3BQYWQgPSAwO1xuXHRcdHRoaXMudkRvbUJvdHRvbVBhZCA9IDA7XG5cdFx0dGhpcy52RG9tU2Nyb2xsUG9zVG9wID0gMDtcblx0XHR0aGlzLnZEb21TY3JvbGxQb3NCb3R0b20gPSAwO1xuXHR9XG5cblx0cmVuZGVyUm93cygpe1xuXHRcdHRoaXMuX3ZpcnR1YWxSZW5kZXJGaWxsKCk7XG5cdH1cblxuXHRyZXJlbmRlclJvd3MoY2FsbGJhY2spe1xuXHRcdHZhciBzY3JvbGxUb3AgPSB0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxUb3A7XG5cdFx0dmFyIHRvcFJvdyA9IGZhbHNlO1xuXHRcdHZhciB0b3BPZmZzZXQgPSBmYWxzZTtcblxuXHRcdHZhciBsZWZ0ID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLnNjcm9sbExlZnQ7XG5cblx0XHR2YXIgcm93cyA9IHRoaXMucm93cygpO1xuXG5cdFx0Zm9yKHZhciBpID0gdGhpcy52RG9tVG9wOyBpIDw9IHRoaXMudkRvbUJvdHRvbTsgaSsrKXtcblxuXHRcdFx0aWYocm93c1tpXSl7XG5cdFx0XHRcdHZhciBkaWZmID0gc2Nyb2xsVG9wIC0gcm93c1tpXS5nZXRFbGVtZW50KCkub2Zmc2V0VG9wO1xuXG5cdFx0XHRcdGlmKHRvcE9mZnNldCA9PT0gZmFsc2UgfHwgTWF0aC5hYnMoZGlmZikgPCB0b3BPZmZzZXQpe1xuXHRcdFx0XHRcdHRvcE9mZnNldCA9IGRpZmY7XG5cdFx0XHRcdFx0dG9wUm93ID0gaTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cm93cy5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdHJvdy5kZWluaXRpYWxpemVIZWlnaHQoKTtcblx0XHR9KTtcblxuXHRcdGlmKGNhbGxiYWNrKXtcblx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0fVxuXG5cdFx0aWYodGhpcy5yb3dzKCkubGVuZ3RoKXtcblx0XHRcdHRoaXMuX3ZpcnR1YWxSZW5kZXJGaWxsKCh0b3BSb3cgPT09IGZhbHNlID8gdGhpcy5yb3dzLmxlbmd0aCAtIDEgOiB0b3BSb3cpLCB0cnVlLCB0b3BPZmZzZXQgfHwgMCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5jbGVhcigpO1xuXHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnRhYmxlRW1wdHkoKTtcblx0XHR9XG5cblx0XHR0aGlzLnNjcm9sbENvbHVtbnMobGVmdCk7XG5cdH1cblxuXHRzY3JvbGxDb2x1bW5zKGxlZnQpe1xuXHRcdHRoaXMudGFibGUucm93TWFuYWdlci5zY3JvbGxIb3Jpem9udGFsKGxlZnQpO1xuXHR9XG5cblx0c2Nyb2xsUm93cyh0b3AsIGRpcil7XG5cdFx0dmFyIHRvcERpZmYgPSB0b3AgLSB0aGlzLnZEb21TY3JvbGxQb3NUb3A7XG5cdFx0dmFyIGJvdHRvbURpZmYgPSB0b3AgLSB0aGlzLnZEb21TY3JvbGxQb3NCb3R0b207XG5cdFx0dmFyIG1hcmdpbiA9IHRoaXMudkRvbVdpbmRvd0J1ZmZlciAqIDI7XG5cdFx0dmFyIHJvd3MgPSB0aGlzLnJvd3MoKTtcblxuXHRcdHRoaXMuc2Nyb2xsVG9wID0gdG9wO1xuXG5cdFx0aWYoLXRvcERpZmYgPiBtYXJnaW4gfHwgYm90dG9tRGlmZiA+IG1hcmdpbil7XG5cdFx0XHQvL2lmIGJpZyBzY3JvbGwgcmVkcmF3IHRhYmxlO1xuXHRcdFx0dmFyIGxlZnQgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuc2Nyb2xsTGVmdDtcblx0XHRcdHRoaXMuX3ZpcnR1YWxSZW5kZXJGaWxsKE1hdGguZmxvb3IoKHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbFRvcCAvIHRoaXMuZWxlbWVudFZlcnRpY2FsLnNjcm9sbEhlaWdodCkgKiByb3dzLmxlbmd0aCkpO1xuXHRcdFx0dGhpcy5zY3JvbGxDb2x1bW5zKGxlZnQpO1xuXHRcdH1lbHNlIHtcblxuXHRcdFx0aWYoZGlyKXtcblx0XHRcdFx0Ly9zY3JvbGxpbmcgdXBcblx0XHRcdFx0aWYodG9wRGlmZiA8IDApe1xuXHRcdFx0XHRcdHRoaXMuX2FkZFRvcFJvdyhyb3dzLCAtdG9wRGlmZik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZihib3R0b21EaWZmIDwgMCl7XG5cdFx0XHRcdFx0Ly9oaWRlIGJvdHRvbSByb3cgaWYgbmVlZGVkXG5cdFx0XHRcdFx0aWYodGhpcy52RG9tU2Nyb2xsSGVpZ2h0IC0gdGhpcy5zY3JvbGxUb3AgPiB0aGlzLnZEb21XaW5kb3dCdWZmZXIpe1xuXHRcdFx0XHRcdFx0dGhpcy5fcmVtb3ZlQm90dG9tUm93KHJvd3MsIC1ib3R0b21EaWZmKTtcblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHR0aGlzLnZEb21TY3JvbGxQb3NCb3R0b20gPSB0aGlzLnNjcm9sbFRvcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblxuXHRcdFx0XHRpZihib3R0b21EaWZmID49IDApe1xuXHRcdFx0XHRcdHRoaXMuX2FkZEJvdHRvbVJvdyhyb3dzLCBib3R0b21EaWZmKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vc2Nyb2xsaW5nIGRvd25cblx0XHRcdFx0aWYodG9wRGlmZiA+PSAwKXtcblx0XHRcdFx0XHQvL2hpZGUgdG9wIHJvdyBpZiBuZWVkZWRcblx0XHRcdFx0XHRpZih0aGlzLnNjcm9sbFRvcCA+IHRoaXMudkRvbVdpbmRvd0J1ZmZlcil7XG5cdFx0XHRcdFx0XHR0aGlzLl9yZW1vdmVUb3BSb3cocm93cywgdG9wRGlmZik7XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0dGhpcy52RG9tU2Nyb2xsUG9zVG9wID0gdGhpcy5zY3JvbGxUb3A7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmVzaXplKCl7XG5cdFx0dGhpcy52RG9tV2luZG93QnVmZmVyID0gdGhpcy50YWJsZS5vcHRpb25zLnJlbmRlclZlcnRpY2FsQnVmZmVyIHx8IHRoaXMuZWxlbWVudFZlcnRpY2FsLmNsaWVudEhlaWdodDtcblx0fVxuXG5cdHNjcm9sbFRvUm93TmVhcmVzdFRvcChyb3cpe1xuXHRcdHZhciByb3dJbmRleCA9IHRoaXMucm93cygpLmluZGV4T2Yocm93KTtcblxuXHRcdHJldHVybiAhKE1hdGguYWJzKHRoaXMudkRvbVRvcCAtIHJvd0luZGV4KSA+IE1hdGguYWJzKHRoaXMudkRvbUJvdHRvbSAtIHJvd0luZGV4KSk7XG5cdH1cblxuXHRzY3JvbGxUb1Jvdyhyb3cpe1xuXHRcdHZhciBpbmRleCA9IHRoaXMucm93cygpLmluZGV4T2Yocm93KTtcblxuXHRcdGlmKGluZGV4ID4gLTEpe1xuXHRcdFx0dGhpcy5fdmlydHVhbFJlbmRlckZpbGwoaW5kZXgsIHRydWUpO1xuXHRcdH1cblx0fVxuXG5cdHZpc2libGVSb3dzKGluY2x1ZGluZ0J1ZmZlcil7XG5cdFx0dmFyIHRvcEVkZ2UgPSB0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxUb3AsXG5cdFx0Ym90dG9tRWRnZSA9IHRoaXMuZWxlbWVudFZlcnRpY2FsLmNsaWVudEhlaWdodCArIHRvcEVkZ2UsXG5cdFx0dG9wRm91bmQgPSBmYWxzZSxcblx0XHR0b3BSb3cgPSAwLFxuXHRcdGJvdHRvbVJvdyA9IDAsXG5cdFx0cm93cyA9IHRoaXMucm93cygpO1xuXG5cdFx0aWYoaW5jbHVkaW5nQnVmZmVyKXtcblx0XHRcdHRvcFJvdyA9IHRoaXMudkRvbVRvcDtcblx0XHRcdGJvdHRvbVJvdyA9IHRoaXMudkRvbUJvdHRvbTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRmb3IodmFyIGkgPSB0aGlzLnZEb21Ub3A7IGkgPD0gdGhpcy52RG9tQm90dG9tOyBpKyspe1xuXHRcdFx0XHRpZihyb3dzW2ldKXtcblx0XHRcdFx0XHRpZighdG9wRm91bmQpe1xuXHRcdFx0XHRcdFx0aWYoKHRvcEVkZ2UgLSByb3dzW2ldLmdldEVsZW1lbnQoKS5vZmZzZXRUb3ApID49IDApe1xuXHRcdFx0XHRcdFx0XHR0b3BSb3cgPSBpO1xuXHRcdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0XHR0b3BGb3VuZCA9IHRydWU7XG5cblx0XHRcdFx0XHRcdFx0aWYoYm90dG9tRWRnZSAtIHJvd3NbaV0uZ2V0RWxlbWVudCgpLm9mZnNldFRvcCA+PSAwKXtcblx0XHRcdFx0XHRcdFx0XHRib3R0b21Sb3cgPSBpO1xuXHRcdFx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRpZihib3R0b21FZGdlIC0gcm93c1tpXS5nZXRFbGVtZW50KCkub2Zmc2V0VG9wID49IDApe1xuXHRcdFx0XHRcdFx0XHRib3R0b21Sb3cgPSBpO1xuXHRcdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcm93cy5zbGljZSh0b3BSb3csIGJvdHRvbVJvdyArIDEpO1xuXHR9XG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8gSW50ZXJuYWwgUmVuZGVyaW5nIC8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXHQvL2Z1bGwgdmlydHVhbCByZW5kZXJcblx0X3ZpcnR1YWxSZW5kZXJGaWxsKHBvc2l0aW9uLCBmb3JjZU1vdmUsIG9mZnNldCkge1xuXHRcdHZhclx0ZWxlbWVudCA9IHRoaXMudGFibGVFbGVtZW50LFxuXHRcdGhvbGRlciA9IHRoaXMuZWxlbWVudFZlcnRpY2FsLFxuXHRcdHRvcFBhZCA9IDAsXG5cdFx0cm93c0hlaWdodCA9IDAsXG5cdFx0cm93SGVpZ2h0ID0gMCxcblx0XHRoZWlnaHRPY2N1cGllZCA9IDAsXG5cdFx0dG9wUGFkSGVpZ2h0ID0gMCxcblx0XHRpID0gMCxcblx0XHRyb3dzID0gdGhpcy5yb3dzKCksXG5cdFx0cm93c0NvdW50ID0gcm93cy5sZW5ndGgsXG5cdFx0aW5kZXggPSAwLFxuXHRcdHJvdyxcblx0XHRyb3dGcmFnbWVudCxcblx0XHRyZW5kZXJlZFJvd3MgPSBbXSxcblx0XHR0b3RhbFJvd3NSZW5kZXJlZCA9IDAsXG5cdFx0cm93c1RvUmVuZGVyID0gMCxcblx0XHRmaXhlZEhlaWdodCA9IHRoaXMudGFibGUucm93TWFuYWdlci5maXhlZEhlaWdodCxcblx0XHRjb250YWluZXJIZWlnaHQgPSB0aGlzLmVsZW1lbnRWZXJ0aWNhbC5jbGllbnRIZWlnaHQsIFxuXHRcdGF2Z1Jvd0hlaWdodCA9IHRoaXMudGFibGUub3B0aW9ucy5yb3dIZWlnaHQsIFxuXHRcdHJlc2l6ZWQgPSB0cnVlO1xuXG5cdFx0cG9zaXRpb24gPSBwb3NpdGlvbiB8fCAwO1xuXG5cdFx0b2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG5cblx0XHRpZighcG9zaXRpb24pe1xuXHRcdFx0dGhpcy5jbGVhcigpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHdoaWxlKGVsZW1lbnQuZmlyc3RDaGlsZCkgZWxlbWVudC5yZW1vdmVDaGlsZChlbGVtZW50LmZpcnN0Q2hpbGQpO1xuXG5cdFx0XHQvL2NoZWNrIGlmIHBvc2l0aW9uIGlzIHRvbyBjbG9zZSB0byBib3R0b20gb2YgdGFibGVcblx0XHRcdGhlaWdodE9jY3VwaWVkID0gKHJvd3NDb3VudCAtIHBvc2l0aW9uICsgMSkgKiB0aGlzLnZEb21Sb3dIZWlnaHQ7XG5cblx0XHRcdGlmKGhlaWdodE9jY3VwaWVkIDwgY29udGFpbmVySGVpZ2h0KXtcblx0XHRcdFx0cG9zaXRpb24gLT0gTWF0aC5jZWlsKChjb250YWluZXJIZWlnaHQgLSBoZWlnaHRPY2N1cGllZCkgLyB0aGlzLnZEb21Sb3dIZWlnaHQpO1xuXHRcdFx0XHRpZihwb3NpdGlvbiA8IDApe1xuXHRcdFx0XHRcdHBvc2l0aW9uID0gMDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvL2NhbGN1bGF0ZSBpbml0aWFsIHBhZFxuXHRcdFx0dG9wUGFkID0gTWF0aC5taW4oTWF0aC5tYXgoTWF0aC5mbG9vcih0aGlzLnZEb21XaW5kb3dCdWZmZXIgLyB0aGlzLnZEb21Sb3dIZWlnaHQpLCAgdGhpcy52RG9tV2luZG93TWluTWFyZ2luUm93cyksIHBvc2l0aW9uKTtcblx0XHRcdHBvc2l0aW9uIC09IHRvcFBhZDtcblx0XHR9XG5cblx0XHRpZihyb3dzQ291bnQgJiYgSGVscGVycy5lbFZpc2libGUodGhpcy5lbGVtZW50VmVydGljYWwpKXtcblx0XHRcdHRoaXMudkRvbVRvcCA9IHBvc2l0aW9uO1xuXHRcdFx0dGhpcy52RG9tQm90dG9tID0gcG9zaXRpb24gLTE7XG5cblx0XHRcdGlmKGZpeGVkSGVpZ2h0IHx8IHRoaXMudGFibGUub3B0aW9ucy5tYXhIZWlnaHQpIHtcblx0XHRcdFx0aWYoYXZnUm93SGVpZ2h0KSB7XG5cdFx0XHRcdFx0cm93c1RvUmVuZGVyID0gKGNvbnRhaW5lckhlaWdodCAvIGF2Z1Jvd0hlaWdodCkgKyAodGhpcy52RG9tV2luZG93QnVmZmVyIC8gYXZnUm93SGVpZ2h0KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyb3dzVG9SZW5kZXIgPSBNYXRoLm1heCh0aGlzLnZEb21XaW5kb3dNaW5Ub3RhbFJvd3MsIE1hdGguY2VpbChyb3dzVG9SZW5kZXIpKTtcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRyb3dzVG9SZW5kZXIgPSByb3dzQ291bnQ7XG5cdFx0XHR9XG5cblx0XHRcdHdoaWxlKCgocm93c1RvUmVuZGVyID09IHJvd3NDb3VudCB8fCByb3dzSGVpZ2h0IDw9IGNvbnRhaW5lckhlaWdodCArIHRoaXMudkRvbVdpbmRvd0J1ZmZlcikgfHwgdG90YWxSb3dzUmVuZGVyZWQgPCB0aGlzLnZEb21XaW5kb3dNaW5Ub3RhbFJvd3MpICYmIHRoaXMudkRvbUJvdHRvbSA8IHJvd3NDb3VudCAtMSkge1xuXHRcdFx0XHRyZW5kZXJlZFJvd3MgPSBbXTtcblx0XHRcdFx0cm93RnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG5cblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdFx0d2hpbGUgKChpIDwgcm93c1RvUmVuZGVyKSAmJiB0aGlzLnZEb21Cb3R0b20gPCByb3dzQ291bnQgLTEpIHtcdFxuXHRcdFx0XHRcdGluZGV4ID0gdGhpcy52RG9tQm90dG9tICsgMSxcblx0XHRcdFx0XHRyb3cgPSByb3dzW2luZGV4XTtcblxuXHRcdFx0XHRcdHRoaXMuc3R5bGVSb3cocm93LCBpbmRleCk7XG5cblx0XHRcdFx0XHRyb3cuaW5pdGlhbGl6ZShmYWxzZSwgdHJ1ZSk7XG5cdFx0XHRcdFx0aWYoIXJvdy5oZWlnaHRJbml0aWFsaXplZCAmJiAhdGhpcy50YWJsZS5vcHRpb25zLnJvd0hlaWdodCl7XG5cdFx0XHRcdFx0XHRyb3cuY2xlYXJDZWxsSGVpZ2h0KCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cm93RnJhZ21lbnQuYXBwZW5kQ2hpbGQocm93LmdldEVsZW1lbnQoKSk7XG5cdFx0XHRcdFx0cmVuZGVyZWRSb3dzLnB1c2gocm93KTtcblx0XHRcdFx0XHR0aGlzLnZEb21Cb3R0b20gKys7XG5cdFx0XHRcdFx0aSsrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYoIXJlbmRlcmVkUm93cy5sZW5ndGgpe1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZWxlbWVudC5hcHBlbmRDaGlsZChyb3dGcmFnbWVudCk7XG5cdFx0XHRcdFxuXHRcdFx0XHQvLyBOT1RFOiBUaGUgbmV4dCAzIGxvb3BzIGFyZSBzZXBhcmF0ZSBvbiBwdXJwb3NlXG5cdFx0XHRcdC8vIFRoaXMgaXMgdG8gYmF0Y2ggdXAgdGhlIGRvbSB3cml0ZXMgYW5kIHJlYWRzIHdoaWNoIGRyYXN0aWNhbGx5IGltcHJvdmVzIHBlcmZvcm1hbmNlIFxuXG5cdFx0XHRcdHJlbmRlcmVkUm93cy5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdFx0XHRyb3cucmVuZGVyZWQoKTtcblxuXHRcdFx0XHRcdGlmKCFyb3cuaGVpZ2h0SW5pdGlhbGl6ZWQpIHtcblx0XHRcdFx0XHRcdHJvdy5jYWxjSGVpZ2h0KHRydWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0cmVuZGVyZWRSb3dzLmZvckVhY2goKHJvdykgPT4ge1xuXHRcdFx0XHRcdGlmKCFyb3cuaGVpZ2h0SW5pdGlhbGl6ZWQpIHtcblx0XHRcdFx0XHRcdHJvdy5zZXRDZWxsSGVpZ2h0KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRyZW5kZXJlZFJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRcdFx0cm93SGVpZ2h0ID0gcm93LmdldEhlaWdodCgpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKHRvdGFsUm93c1JlbmRlcmVkIDwgdG9wUGFkKXtcblx0XHRcdFx0XHRcdHRvcFBhZEhlaWdodCArPSByb3dIZWlnaHQ7XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0cm93c0hlaWdodCArPSByb3dIZWlnaHQ7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYocm93SGVpZ2h0ID4gdGhpcy52RG9tV2luZG93QnVmZmVyKXtcblx0XHRcdFx0XHRcdHRoaXMudkRvbVdpbmRvd0J1ZmZlciA9IHJvd0hlaWdodCAqIDI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRvdGFsUm93c1JlbmRlcmVkKys7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHJlc2l6ZWQgPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuYWRqdXN0VGFibGVTaXplKCk7XG5cdFx0XHRcdGNvbnRhaW5lckhlaWdodCA9IHRoaXMuZWxlbWVudFZlcnRpY2FsLmNsaWVudEhlaWdodDtcblx0XHRcdFx0aWYocmVzaXplZCAmJiAoZml4ZWRIZWlnaHQgfHwgdGhpcy50YWJsZS5vcHRpb25zLm1heEhlaWdodCkpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRhdmdSb3dIZWlnaHQgPSByb3dzSGVpZ2h0IC8gdG90YWxSb3dzUmVuZGVyZWQ7XG5cdFx0XHRcdFx0cm93c1RvUmVuZGVyID0gTWF0aC5tYXgodGhpcy52RG9tV2luZG93TWluVG90YWxSb3dzLCBNYXRoLmNlaWwoKGNvbnRhaW5lckhlaWdodCAvIGF2Z1Jvd0hlaWdodCkgKyAodGhpcy52RG9tV2luZG93QnVmZmVyIC8gYXZnUm93SGVpZ2h0KSkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmKCFwb3NpdGlvbil7XG5cdFx0XHRcdHRoaXMudkRvbVRvcFBhZCA9IDA7XG5cdFx0XHRcdC8vYWRqdXN0IHJvdyBoZWlnaHQgdG8gbWF0Y2ggYXZlcmFnZSBvZiByZW5kZXJlZCBlbGVtZW50c1xuXHRcdFx0XHR0aGlzLnZEb21Sb3dIZWlnaHQgPSBNYXRoLmZsb29yKChyb3dzSGVpZ2h0ICsgdG9wUGFkSGVpZ2h0KSAvIHRvdGFsUm93c1JlbmRlcmVkKTtcblx0XHRcdFx0dGhpcy52RG9tQm90dG9tUGFkID0gdGhpcy52RG9tUm93SGVpZ2h0ICogKHJvd3NDb3VudCAtIHRoaXMudkRvbUJvdHRvbSAtMSk7XG5cblx0XHRcdFx0dGhpcy52RG9tU2Nyb2xsSGVpZ2h0ID0gdG9wUGFkSGVpZ2h0ICsgcm93c0hlaWdodCArIHRoaXMudkRvbUJvdHRvbVBhZCAtIGNvbnRhaW5lckhlaWdodDtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy52RG9tVG9wUGFkID0gIWZvcmNlTW92ZSA/IHRoaXMuc2Nyb2xsVG9wIC0gdG9wUGFkSGVpZ2h0IDogKHRoaXMudkRvbVJvd0hlaWdodCAqIHRoaXMudkRvbVRvcCkgKyBvZmZzZXQ7XG5cdFx0XHRcdHRoaXMudkRvbUJvdHRvbVBhZCA9IHRoaXMudkRvbUJvdHRvbSA9PSByb3dzQ291bnQtMSA/IDAgOiBNYXRoLm1heCh0aGlzLnZEb21TY3JvbGxIZWlnaHQgLSB0aGlzLnZEb21Ub3BQYWQgLSByb3dzSGVpZ2h0IC0gdG9wUGFkSGVpZ2h0LCAwKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0ZWxlbWVudC5zdHlsZS5wYWRkaW5nVG9wID0gdGhpcy52RG9tVG9wUGFkK1wicHhcIjtcblx0XHRcdGVsZW1lbnQuc3R5bGUucGFkZGluZ0JvdHRvbSA9IHRoaXMudkRvbUJvdHRvbVBhZCtcInB4XCI7XG5cblx0XHRcdGlmKGZvcmNlTW92ZSl7XG5cdFx0XHRcdHRoaXMuc2Nyb2xsVG9wID0gdGhpcy52RG9tVG9wUGFkICsgKHRvcFBhZEhlaWdodCkgKyBvZmZzZXQgLSAodGhpcy5lbGVtZW50VmVydGljYWwuc2Nyb2xsV2lkdGggPiB0aGlzLmVsZW1lbnRWZXJ0aWNhbC5jbGllbnRXaWR0aCA/IHRoaXMuZWxlbWVudFZlcnRpY2FsLm9mZnNldEhlaWdodCAtIGNvbnRhaW5lckhlaWdodCA6IDApO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnNjcm9sbFRvcCA9IE1hdGgubWluKHRoaXMuc2Nyb2xsVG9wLCB0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxIZWlnaHQgLSBjb250YWluZXJIZWlnaHQpO1xuXG5cdFx0XHQvL2FkanVzdCBmb3IgaG9yaXpvbnRhbCBzY3JvbGxiYXIgaWYgcHJlc2VudCAoYW5kIG5vdCBhdCB0b3Agb2YgdGFibGUpXG5cdFx0XHRpZih0aGlzLmVsZW1lbnRWZXJ0aWNhbC5zY3JvbGxXaWR0aCA+IHRoaXMuZWxlbWVudFZlcnRpY2FsLmNsaWVudFdpZHRoICYmIGZvcmNlTW92ZSl7XG5cdFx0XHRcdHRoaXMuc2Nyb2xsVG9wICs9IHRoaXMuZWxlbWVudFZlcnRpY2FsLm9mZnNldEhlaWdodCAtIGNvbnRhaW5lckhlaWdodDtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy52RG9tU2Nyb2xsUG9zVG9wID0gdGhpcy5zY3JvbGxUb3A7XG5cdFx0XHR0aGlzLnZEb21TY3JvbGxQb3NCb3R0b20gPSB0aGlzLnNjcm9sbFRvcDtcblxuXHRcdFx0aG9sZGVyLnNjcm9sbFRvcCA9IHRoaXMuc2Nyb2xsVG9wO1xuXG5cdFx0XHR0aGlzLmRpc3BhdGNoKFwicmVuZGVyLXZpcnR1YWwtZmlsbFwiKTtcblx0XHR9XG5cdH1cblxuXHRfYWRkVG9wUm93KHJvd3MsIGZpbGxhYmxlU3BhY2Upe1xuXHRcdHZhciB0YWJsZSA9IHRoaXMudGFibGVFbGVtZW50LFxuXHRcdGFkZGVkUm93cyA9IFtdLFxuXHRcdHBhZGRpbmdBZGp1c3QgPSAwLFxuXHRcdGluZGV4ID0gdGhpcy52RG9tVG9wIC0xLFxuXHRcdGkgPSAwLFxuXHRcdHdvcmtpbmcgPSB0cnVlO1xuXG5cdFx0d2hpbGUod29ya2luZyl7XG5cdFx0XHRpZih0aGlzLnZEb21Ub3Ape1xuXHRcdFx0XHRsZXQgcm93ID0gcm93c1tpbmRleF0sXG5cdFx0XHRcdHJvd0hlaWdodCwgaW5pdGlhbGl6ZWQ7XG5cblx0XHRcdFx0aWYocm93ICYmIGkgPCB0aGlzLnZEb21NYXhSZW5kZXJDaGFpbil7XG5cdFx0XHRcdFx0cm93SGVpZ2h0ID0gcm93LmdldEhlaWdodCgpIHx8IHRoaXMudkRvbVJvd0hlaWdodDtcblx0XHRcdFx0XHRpbml0aWFsaXplZCA9IHJvdy5pbml0aWFsaXplZDtcblxuXHRcdFx0XHRcdGlmKGZpbGxhYmxlU3BhY2UgPj0gcm93SGVpZ2h0KXtcblxuXHRcdFx0XHRcdFx0dGhpcy5zdHlsZVJvdyhyb3csIGluZGV4KTtcblx0XHRcdFx0XHRcdHRhYmxlLmluc2VydEJlZm9yZShyb3cuZ2V0RWxlbWVudCgpLCB0YWJsZS5maXJzdENoaWxkKTtcblxuXHRcdFx0XHRcdFx0aWYoIXJvdy5pbml0aWFsaXplZCB8fCAhcm93LmhlaWdodEluaXRpYWxpemVkKXtcblx0XHRcdFx0XHRcdFx0YWRkZWRSb3dzLnB1c2gocm93KTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0cm93LmluaXRpYWxpemUoKTtcblxuXHRcdFx0XHRcdFx0aWYoIWluaXRpYWxpemVkKXtcblx0XHRcdFx0XHRcdFx0cm93SGVpZ2h0ID0gcm93LmdldEVsZW1lbnQoKS5vZmZzZXRIZWlnaHQ7XG5cblx0XHRcdFx0XHRcdFx0aWYocm93SGVpZ2h0ID4gdGhpcy52RG9tV2luZG93QnVmZmVyKXtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLnZEb21XaW5kb3dCdWZmZXIgPSByb3dIZWlnaHQgKiAyO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGZpbGxhYmxlU3BhY2UgLT0gcm93SGVpZ2h0O1xuXHRcdFx0XHRcdFx0cGFkZGluZ0FkanVzdCArPSByb3dIZWlnaHQ7XG5cblx0XHRcdFx0XHRcdHRoaXMudkRvbVRvcC0tO1xuXHRcdFx0XHRcdFx0aW5kZXgtLTtcblx0XHRcdFx0XHRcdGkrKztcblxuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdHdvcmtpbmcgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHdvcmtpbmcgPSBmYWxzZTtcblx0XHRcdFx0fVxuXG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHdvcmtpbmcgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmb3IgKGxldCByb3cgb2YgYWRkZWRSb3dzKXtcblx0XHRcdHJvdy5jbGVhckNlbGxIZWlnaHQoKTtcblx0XHR9XG5cblx0XHR0aGlzLl9xdWlja05vcm1hbGl6ZVJvd0hlaWdodChhZGRlZFJvd3MpO1xuXG5cdFx0aWYocGFkZGluZ0FkanVzdCl7XG5cdFx0XHR0aGlzLnZEb21Ub3BQYWQgLT0gcGFkZGluZ0FkanVzdDtcblxuXHRcdFx0aWYodGhpcy52RG9tVG9wUGFkIDwgMCl7XG5cdFx0XHRcdHRoaXMudkRvbVRvcFBhZCA9IGluZGV4ICogdGhpcy52RG9tUm93SGVpZ2h0O1xuXHRcdFx0fVxuXG5cdFx0XHRpZihpbmRleCA8IDEpe1xuXHRcdFx0XHR0aGlzLnZEb21Ub3BQYWQgPSAwO1xuXHRcdFx0fVxuXG5cdFx0XHR0YWJsZS5zdHlsZS5wYWRkaW5nVG9wID0gdGhpcy52RG9tVG9wUGFkICsgXCJweFwiO1xuXHRcdFx0dGhpcy52RG9tU2Nyb2xsUG9zVG9wIC09IHBhZGRpbmdBZGp1c3Q7XG5cdFx0fVxuXHR9XG5cblx0X3JlbW92ZVRvcFJvdyhyb3dzLCBmaWxsYWJsZVNwYWNlKXtcblx0XHR2YXIgcmVtb3ZhYmxlUm93cyA9IFtdLFxuXHRcdHBhZGRpbmdBZGp1c3QgPSAwLFxuXHRcdGkgPSAwLFxuXHRcdHdvcmtpbmcgPSB0cnVlO1xuXG5cdFx0d2hpbGUod29ya2luZyl7XG5cdFx0XHRsZXQgcm93ID0gcm93c1t0aGlzLnZEb21Ub3BdLFxuXHRcdFx0cm93SGVpZ2h0O1xuXG5cdFx0XHRpZihyb3cgJiYgaSA8IHRoaXMudkRvbU1heFJlbmRlckNoYWluKXtcblx0XHRcdFx0cm93SGVpZ2h0ID0gcm93LmdldEhlaWdodCgpIHx8IHRoaXMudkRvbVJvd0hlaWdodDtcblxuXHRcdFx0XHRpZihmaWxsYWJsZVNwYWNlID49IHJvd0hlaWdodCl7XG5cdFx0XHRcdFx0dGhpcy52RG9tVG9wKys7XG5cblx0XHRcdFx0XHRmaWxsYWJsZVNwYWNlIC09IHJvd0hlaWdodDtcblx0XHRcdFx0XHRwYWRkaW5nQWRqdXN0ICs9IHJvd0hlaWdodDtcblxuXHRcdFx0XHRcdHJlbW92YWJsZVJvd3MucHVzaChyb3cpO1xuXHRcdFx0XHRcdGkrKztcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHdvcmtpbmcgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR3b3JraW5nID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yIChsZXQgcm93IG9mIHJlbW92YWJsZVJvd3Mpe1xuXHRcdFx0bGV0IHJvd0VsID0gcm93LmdldEVsZW1lbnQoKTtcblxuXHRcdFx0aWYocm93RWwucGFyZW50Tm9kZSl7XG5cdFx0XHRcdHJvd0VsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocm93RWwpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmKHBhZGRpbmdBZGp1c3Qpe1xuXHRcdFx0dGhpcy52RG9tVG9wUGFkICs9IHBhZGRpbmdBZGp1c3Q7XG5cdFx0XHR0aGlzLnRhYmxlRWxlbWVudC5zdHlsZS5wYWRkaW5nVG9wID0gdGhpcy52RG9tVG9wUGFkICsgXCJweFwiO1xuXHRcdFx0dGhpcy52RG9tU2Nyb2xsUG9zVG9wICs9IHRoaXMudkRvbVRvcCA/IHBhZGRpbmdBZGp1c3QgOiBwYWRkaW5nQWRqdXN0ICsgdGhpcy52RG9tV2luZG93QnVmZmVyO1xuXHRcdH1cblx0fVxuXG5cdF9hZGRCb3R0b21Sb3cocm93cywgZmlsbGFibGVTcGFjZSl7XG5cdFx0dmFyIHRhYmxlID0gdGhpcy50YWJsZUVsZW1lbnQsXG5cdFx0YWRkZWRSb3dzID0gW10sXG5cdFx0cGFkZGluZ0FkanVzdCA9IDAsXG5cdFx0aW5kZXggPSB0aGlzLnZEb21Cb3R0b20gKyAxLFxuXHRcdGkgPSAwLFxuXHRcdHdvcmtpbmcgPSB0cnVlO1xuXG5cdFx0d2hpbGUod29ya2luZyl7XG5cdFx0XHRsZXQgcm93ID0gcm93c1tpbmRleF0sXG5cdFx0XHRyb3dIZWlnaHQsIGluaXRpYWxpemVkO1xuXG5cdFx0XHRpZihyb3cgJiYgaSA8IHRoaXMudkRvbU1heFJlbmRlckNoYWluKXtcblx0XHRcdFx0cm93SGVpZ2h0ID0gcm93LmdldEhlaWdodCgpIHx8IHRoaXMudkRvbVJvd0hlaWdodDtcblx0XHRcdFx0aW5pdGlhbGl6ZWQgPSByb3cuaW5pdGlhbGl6ZWQ7XG5cblx0XHRcdFx0aWYoZmlsbGFibGVTcGFjZSA+PSByb3dIZWlnaHQpe1xuXG5cdFx0XHRcdFx0dGhpcy5zdHlsZVJvdyhyb3csIGluZGV4KTtcblx0XHRcdFx0XHR0YWJsZS5hcHBlbmRDaGlsZChyb3cuZ2V0RWxlbWVudCgpKTtcblxuXHRcdFx0XHRcdGlmKCFyb3cuaW5pdGlhbGl6ZWQgfHwgIXJvdy5oZWlnaHRJbml0aWFsaXplZCl7XG5cdFx0XHRcdFx0XHRhZGRlZFJvd3MucHVzaChyb3cpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJvdy5pbml0aWFsaXplKCk7XG5cblx0XHRcdFx0XHRpZighaW5pdGlhbGl6ZWQpe1xuXHRcdFx0XHRcdFx0cm93SGVpZ2h0ID0gcm93LmdldEVsZW1lbnQoKS5vZmZzZXRIZWlnaHQ7XG5cblx0XHRcdFx0XHRcdGlmKHJvd0hlaWdodCA+IHRoaXMudkRvbVdpbmRvd0J1ZmZlcil7XG5cdFx0XHRcdFx0XHRcdHRoaXMudkRvbVdpbmRvd0J1ZmZlciA9IHJvd0hlaWdodCAqIDI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZmlsbGFibGVTcGFjZSAtPSByb3dIZWlnaHQ7XG5cdFx0XHRcdFx0cGFkZGluZ0FkanVzdCArPSByb3dIZWlnaHQ7XG5cblx0XHRcdFx0XHR0aGlzLnZEb21Cb3R0b20rKztcblx0XHRcdFx0XHRpbmRleCsrO1xuXHRcdFx0XHRcdGkrKztcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHdvcmtpbmcgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR3b3JraW5nID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yIChsZXQgcm93IG9mIGFkZGVkUm93cyl7XG5cdFx0XHRyb3cuY2xlYXJDZWxsSGVpZ2h0KCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fcXVpY2tOb3JtYWxpemVSb3dIZWlnaHQoYWRkZWRSb3dzKTtcblxuXHRcdGlmKHBhZGRpbmdBZGp1c3Qpe1xuXHRcdFx0dGhpcy52RG9tQm90dG9tUGFkIC09IHBhZGRpbmdBZGp1c3Q7XG5cblx0XHRcdGlmKHRoaXMudkRvbUJvdHRvbVBhZCA8IDAgfHwgaW5kZXggPT0gcm93cy5sZW5ndGggLTEpe1xuXHRcdFx0XHR0aGlzLnZEb21Cb3R0b21QYWQgPSAwO1xuXHRcdFx0fVxuXG5cdFx0XHR0YWJsZS5zdHlsZS5wYWRkaW5nQm90dG9tID0gdGhpcy52RG9tQm90dG9tUGFkICsgXCJweFwiO1xuXHRcdFx0dGhpcy52RG9tU2Nyb2xsUG9zQm90dG9tICs9IHBhZGRpbmdBZGp1c3Q7XG5cdFx0fVxuXHR9XG5cblx0X3JlbW92ZUJvdHRvbVJvdyhyb3dzLCBmaWxsYWJsZVNwYWNlKXtcblx0XHR2YXIgcmVtb3ZhYmxlUm93cyA9IFtdLFxuXHRcdHBhZGRpbmdBZGp1c3QgPSAwLFxuXHRcdGkgPSAwLFxuXHRcdHdvcmtpbmcgPSB0cnVlO1xuXG5cdFx0d2hpbGUod29ya2luZyl7XG5cdFx0XHRsZXQgcm93ID0gcm93c1t0aGlzLnZEb21Cb3R0b21dLFxuXHRcdFx0cm93SGVpZ2h0O1xuXG5cdFx0XHRpZihyb3cgJiYgaSA8IHRoaXMudkRvbU1heFJlbmRlckNoYWluKXtcblx0XHRcdFx0cm93SGVpZ2h0ID0gcm93LmdldEhlaWdodCgpIHx8IHRoaXMudkRvbVJvd0hlaWdodDtcblxuXHRcdFx0XHRpZihmaWxsYWJsZVNwYWNlID49IHJvd0hlaWdodCl7XG5cdFx0XHRcdFx0dGhpcy52RG9tQm90dG9tIC0tO1xuXG5cdFx0XHRcdFx0ZmlsbGFibGVTcGFjZSAtPSByb3dIZWlnaHQ7XG5cdFx0XHRcdFx0cGFkZGluZ0FkanVzdCArPSByb3dIZWlnaHQ7XG5cblx0XHRcdFx0XHRyZW1vdmFibGVSb3dzLnB1c2gocm93KTtcblx0XHRcdFx0XHRpKys7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHR3b3JraW5nID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0d29ya2luZyA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZvciAobGV0IHJvdyBvZiByZW1vdmFibGVSb3dzKXtcblx0XHRcdGxldCByb3dFbCA9IHJvdy5nZXRFbGVtZW50KCk7XG5cblx0XHRcdGlmKHJvd0VsLnBhcmVudE5vZGUpe1xuXHRcdFx0XHRyb3dFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHJvd0VsKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZihwYWRkaW5nQWRqdXN0KXtcblx0XHRcdHRoaXMudkRvbUJvdHRvbVBhZCArPSBwYWRkaW5nQWRqdXN0O1xuXG5cdFx0XHRpZih0aGlzLnZEb21Cb3R0b21QYWQgPCAwKXtcblx0XHRcdFx0dGhpcy52RG9tQm90dG9tUGFkID0gMDtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy50YWJsZUVsZW1lbnQuc3R5bGUucGFkZGluZ0JvdHRvbSA9IHRoaXMudkRvbUJvdHRvbVBhZCArIFwicHhcIjtcblx0XHRcdHRoaXMudkRvbVNjcm9sbFBvc0JvdHRvbSAtPSBwYWRkaW5nQWRqdXN0O1xuXHRcdH1cblx0fVxuXG5cdF9xdWlja05vcm1hbGl6ZVJvd0hlaWdodChyb3dzKXtcblx0XHRmb3IobGV0IHJvdyBvZiByb3dzKXtcblx0XHRcdHJvdy5jYWxjSGVpZ2h0KCk7XG5cdFx0fVxuXG5cdFx0Zm9yKGxldCByb3cgb2Ygcm93cyl7XG5cdFx0XHRyb3cuc2V0Q2VsbEhlaWdodCgpO1xuXHRcdH1cblx0fVxufVxuXG5jbGFzcyBSb3dNYW5hZ2VyIGV4dGVuZHMgQ29yZUZlYXR1cmV7XG5cdFxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXHRcdFxuXHRcdHRoaXMuZWxlbWVudCA9IHRoaXMuY3JlYXRlSG9sZGVyRWxlbWVudCgpOyAvL2NvbnRhaW5pbmcgZWxlbWVudFxuXHRcdHRoaXMudGFibGVFbGVtZW50ID0gdGhpcy5jcmVhdGVUYWJsZUVsZW1lbnQoKTsgLy90YWJsZSBlbGVtZW50XG5cdFx0dGhpcy5oZWlnaHRGaXhlciA9IHRoaXMuY3JlYXRlVGFibGVFbGVtZW50KCk7IC8vdGFibGUgZWxlbWVudFxuXHRcdHRoaXMucGxhY2Vob2xkZXIgPSBudWxsOyAvL3BsYWNlaG9sZGVyIGVsZW1lbnRcblx0XHR0aGlzLnBsYWNlaG9sZGVyQ29udGVudHMgPSBudWxsOyAvL3BsYWNlaG9sZGVyIGVsZW1lbnRcblx0XHRcblx0XHR0aGlzLmZpcnN0UmVuZGVyID0gZmFsc2U7IC8vaGFuZGxlIGZpcnN0IHJlbmRlclxuXHRcdHRoaXMucmVuZGVyTW9kZSA9IFwidmlydHVhbFwiOyAvL2N1cnJlbnQgcmVuZGVyaW5nIG1vZGVcblx0XHR0aGlzLmZpeGVkSGVpZ2h0ID0gZmFsc2U7IC8vY3VycmVudCByZW5kZXJpbmcgbW9kZVxuXHRcdFxuXHRcdHRoaXMucm93cyA9IFtdOyAvL2hvbGQgcm93IGRhdGEgb2JqZWN0c1xuXHRcdHRoaXMuYWN0aXZlUm93c1BpcGVsaW5lID0gW107IC8vaG9sZCBjYWxjdWxhdGlvbiBvZiBhY3RpdmUgcm93c1xuXHRcdHRoaXMuYWN0aXZlUm93cyA9IFtdOyAvL3Jvd3MgY3VycmVudGx5IGF2YWlsYWJsZSB0byBvbiBkaXNwbGF5IGluIHRoZSB0YWJsZVxuXHRcdHRoaXMuYWN0aXZlUm93c0NvdW50ID0gMDsgLy9jb3VudCBvZiBhY3RpdmUgcm93c1xuXHRcdFxuXHRcdHRoaXMuZGlzcGxheVJvd3MgPSBbXTsgLy9yb3dzIGN1cnJlbnRseSBvbiBkaXNwbGF5IGluIHRoZSB0YWJsZVxuXHRcdHRoaXMuZGlzcGxheVJvd3NDb3VudCA9IDA7IC8vY291bnQgb2YgZGlzcGxheSByb3dzXG5cdFx0XG5cdFx0dGhpcy5zY3JvbGxUb3AgPSAwO1xuXHRcdHRoaXMuc2Nyb2xsTGVmdCA9IDA7XG5cdFx0XG5cdFx0dGhpcy5yZWRyYXdCbG9jayA9IGZhbHNlOyAvL3ByZXZlbnQgcmVkcmF3cyB0byBhbGxvdyBtdWx0aXBsZSBkYXRhIG1hbmlwdWxhdGlvbnMgYmVmb3JlIGNvbnRpbnVpbmdcblx0XHR0aGlzLnJlZHJhd0Jsb2NrUmVzdG9yZUNvbmZpZyA9IGZhbHNlOyAvL3N0b3JlIGxhdGVzdCByZWRyYXcgZnVuY3Rpb24gY2FsbHMgZm9yIHdoZW4gcmVkcmF3IGlzIG5lZWRlZFxuXHRcdHRoaXMucmVkcmF3QmxvY2tSZW5kZXJJblBvc2l0aW9uID0gZmFsc2U7IC8vc3RvcmUgbGF0ZXN0IHJlZHJhdyBmdW5jdGlvbiBjYWxscyBmb3Igd2hlbiByZWRyYXcgaXMgbmVlZGVkXG5cdFx0XG5cdFx0dGhpcy5kYXRhUGlwZWxpbmUgPSBbXTsgLy9ob2xkIGRhdGEgcGlwZWxpbmUgdGFza3Ncblx0XHR0aGlzLmRpc3BsYXlQaXBlbGluZSA9IFtdOyAvL2hvbGQgZGF0YSBkaXNwbGF5IHBpcGVsaW5lIHRhc2tzXG5cdFx0XG5cdFx0dGhpcy5zY3JvbGxiYXJXaWR0aCA9IDA7XG5cdFx0XG5cdFx0dGhpcy5yZW5kZXJlciA9IG51bGw7XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8gU2V0dXAgRnVuY3Rpb25zIC8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHRjcmVhdGVIb2xkZXJFbGVtZW50ICgpe1xuXHRcdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XG5cdFx0ZWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci10YWJsZWhvbGRlclwiKTtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLCAwKTtcblx0XHQvLyBlbC5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwicm93Z3JvdXBcIik7XG5cdFx0XG5cdFx0cmV0dXJuIGVsO1xuXHR9XG5cdFxuXHRjcmVhdGVUYWJsZUVsZW1lbnQgKCl7XG5cdFx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcblx0XHRlbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXRhYmxlXCIpO1xuXHRcdGVsLnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJyb3dncm91cFwiKTtcblx0XHRcblx0XHRyZXR1cm4gZWw7XG5cdH1cblx0XG5cdGluaXRpYWxpemVQbGFjZWhvbGRlcigpe1xuXHRcdHZhciBwbGFjZWhvbGRlciA9IHRoaXMudGFibGUub3B0aW9ucy5wbGFjZWhvbGRlcjtcblx0XHRcblx0XHRpZih0eXBlb2YgcGxhY2Vob2xkZXIgPT09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRwbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyLmNhbGwodGhpcy50YWJsZSk7XG5cdFx0fVxuXHRcdFxuXHRcdHBsYWNlaG9sZGVyID0gdGhpcy5jaGFpbihcInBsYWNlaG9sZGVyXCIsIFtwbGFjZWhvbGRlcl0sIHBsYWNlaG9sZGVyLCBwbGFjZWhvbGRlcikgfHwgcGxhY2Vob2xkZXI7XG5cdFx0XG5cdFx0Ly9jb25maWd1cmUgcGxhY2Vob2xkZXIgZWxlbWVudFxuXHRcdGlmKHBsYWNlaG9sZGVyKXtcdFxuXHRcdFx0bGV0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcdGVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItcGxhY2Vob2xkZXJcIik7XG5cdFx0XHRcblx0XHRcdGlmKHR5cGVvZiBwbGFjZWhvbGRlciA9PSBcInN0cmluZ1wiKXtcblx0XHRcdFx0bGV0IGNvbnRlbnRzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcdFx0Y29udGVudHMuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1wbGFjZWhvbGRlci1jb250ZW50c1wiKTtcblx0XHRcdFx0Y29udGVudHMuaW5uZXJIVE1MID0gcGxhY2Vob2xkZXI7XG5cdFx0XHRcdFxuXHRcdFx0XHRlbC5hcHBlbmRDaGlsZChjb250ZW50cyk7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLnBsYWNlaG9sZGVyQ29udGVudHMgPSBjb250ZW50cztcblx0XHRcdFx0XG5cdFx0XHR9ZWxzZSBpZih0eXBlb2YgSFRNTEVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgcGxhY2Vob2xkZXIgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCl7XG5cdFx0XHRcdFxuXHRcdFx0XHRlbC5hcHBlbmRDaGlsZChwbGFjZWhvbGRlcik7XG5cdFx0XHRcdHRoaXMucGxhY2Vob2xkZXJDb250ZW50cyA9IHBsYWNlaG9sZGVyO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJJbnZhbGlkIHBsYWNlaG9sZGVyIHByb3ZpZGVkLCBtdXN0IGJlIHN0cmluZyBvciBIVE1MIEVsZW1lbnRcIiwgcGxhY2Vob2xkZXIpO1xuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5lbCA9IG51bGw7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHRoaXMucGxhY2Vob2xkZXIgPSBlbDtcblx0XHR9XG5cdH1cblx0XG5cdC8vcmV0dXJuIGNvbnRhaW5pbmcgZWxlbWVudFxuXHRnZXRFbGVtZW50KCl7XG5cdFx0cmV0dXJuIHRoaXMuZWxlbWVudDtcblx0fVxuXHRcblx0Ly9yZXR1cm4gdGFibGUgZWxlbWVudFxuXHRnZXRUYWJsZUVsZW1lbnQoKXtcblx0XHRyZXR1cm4gdGhpcy50YWJsZUVsZW1lbnQ7XG5cdH1cblx0XG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLmluaXRpYWxpemVQbGFjZWhvbGRlcigpO1xuXHRcdHRoaXMuaW5pdGlhbGl6ZVJlbmRlcmVyKCk7XG5cdFx0XG5cdFx0Ly9pbml0aWFsaXplIG1hbmFnZXJcblx0XHR0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy50YWJsZUVsZW1lbnQpO1xuXHRcdFxuXHRcdHRoaXMuZmlyc3RSZW5kZXIgPSB0cnVlO1xuXHRcdFxuXHRcdC8vc2Nyb2xsIGhlYWRlciBhbG9uZyB3aXRoIHRhYmxlIGJvZHlcblx0XHR0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCAoKSA9PiB7XG5cdFx0XHR2YXIgbGVmdCA9IHRoaXMuZWxlbWVudC5zY3JvbGxMZWZ0LFxuXHRcdFx0bGVmdERpciA9IHRoaXMuc2Nyb2xsTGVmdCA+IGxlZnQsXG5cdFx0XHR0b3AgPSB0aGlzLmVsZW1lbnQuc2Nyb2xsVG9wLFxuXHRcdFx0dG9wRGlyID0gdGhpcy5zY3JvbGxUb3AgPiB0b3A7XG5cdFx0XHRcblx0XHRcdC8vaGFuZGxlIGhvcml6b250YWwgc2Nyb2xsaW5nXG5cdFx0XHRpZih0aGlzLnNjcm9sbExlZnQgIT0gbGVmdCl7XG5cdFx0XHRcdHRoaXMuc2Nyb2xsTGVmdCA9IGxlZnQ7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLmRpc3BhdGNoKFwic2Nyb2xsLWhvcml6b250YWxcIiwgbGVmdCwgbGVmdERpcik7XG5cdFx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInNjcm9sbEhvcml6b250YWxcIiwgbGVmdCwgbGVmdERpcik7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLl9wb3NpdGlvblBsYWNlaG9sZGVyKCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdC8vaGFuZGxlIHZlcnRpY2FsIHNjcm9sbGluZ1xuXHRcdFx0aWYodGhpcy5zY3JvbGxUb3AgIT0gdG9wKXtcblx0XHRcdFx0dGhpcy5zY3JvbGxUb3AgPSB0b3A7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLnJlbmRlcmVyLnNjcm9sbFJvd3ModG9wLCB0b3BEaXIpO1xuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5kaXNwYXRjaChcInNjcm9sbC12ZXJ0aWNhbFwiLCB0b3AsIHRvcERpcik7XG5cdFx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInNjcm9sbFZlcnRpY2FsXCIsIHRvcCwgdG9wRGlyKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vIFJvdyBNYW5pcHVsYXRpb24gLy8vLy8vLy8vLy8vLy8vLy8vXG5cdGZpbmRSb3coc3ViamVjdCl7XG5cdFx0aWYodHlwZW9mIHN1YmplY3QgPT0gXCJvYmplY3RcIil7XG5cdFx0XHRpZihzdWJqZWN0IGluc3RhbmNlb2YgUm93KXtcblx0XHRcdFx0Ly9zdWJqZWN0IGlzIHJvdyBlbGVtZW50XG5cdFx0XHRcdHJldHVybiBzdWJqZWN0O1xuXHRcdFx0fWVsc2UgaWYoc3ViamVjdCBpbnN0YW5jZW9mIFJvd0NvbXBvbmVudCl7XG5cdFx0XHRcdC8vc3ViamVjdCBpcyBwdWJsaWMgcm93IGNvbXBvbmVudFxuXHRcdFx0XHRyZXR1cm4gc3ViamVjdC5fZ2V0U2VsZigpIHx8IGZhbHNlO1xuXHRcdFx0fWVsc2UgaWYodHlwZW9mIEhUTUxFbGVtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIHN1YmplY3QgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCl7XG5cdFx0XHRcdC8vc3ViamVjdCBpcyBhIEhUTUwgZWxlbWVudCBvZiB0aGUgcm93XG5cdFx0XHRcdGxldCBtYXRjaCA9IHRoaXMucm93cy5maW5kKChyb3cpID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gcm93LmdldEVsZW1lbnQoKSA9PT0gc3ViamVjdDtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRyZXR1cm4gbWF0Y2ggfHwgZmFsc2U7XG5cdFx0XHR9ZWxzZSBpZihzdWJqZWN0ID09PSBudWxsKXtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1lbHNlIGlmKHR5cGVvZiBzdWJqZWN0ID09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1lbHNlIHtcblx0XHRcdC8vc3ViamVjdCBzaG91bGQgYmUgdHJlYXRlZCBhcyB0aGUgaW5kZXggb2YgdGhlIHJvd1xuXHRcdFx0bGV0IG1hdGNoID0gdGhpcy5yb3dzLmZpbmQoKHJvdykgPT4ge1xuXHRcdFx0XHRyZXR1cm4gcm93LmRhdGFbdGhpcy50YWJsZS5vcHRpb25zLmluZGV4XSA9PSBzdWJqZWN0O1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdHJldHVybiBtYXRjaCB8fCBmYWxzZTtcblx0XHR9XG5cdFx0XG5cdFx0Ly9jYXRjaCBhbGwgZm9yIGFueSBvdGhlciB0eXBlIG9mIGlucHV0XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdFxuXHRnZXRSb3dGcm9tRGF0YU9iamVjdChkYXRhKXtcblx0XHR2YXIgbWF0Y2ggPSB0aGlzLnJvd3MuZmluZCgocm93KSA9PiB7XG5cdFx0XHRyZXR1cm4gcm93LmRhdGEgPT09IGRhdGE7XG5cdFx0fSk7XG5cdFx0XG5cdFx0cmV0dXJuIG1hdGNoIHx8IGZhbHNlO1xuXHR9XG5cdFxuXHRnZXRSb3dGcm9tUG9zaXRpb24ocG9zaXRpb24pe1xuXHRcdHJldHVybiB0aGlzLmdldERpc3BsYXlSb3dzKCkuZmluZCgocm93KSA9PiB7XG5cdFx0XHRyZXR1cm4gcm93LmdldFBvc2l0aW9uKCkgPT09IHBvc2l0aW9uICYmIHJvdy5pc0Rpc3BsYXllZCgpO1xuXHRcdH0pO1xuXHR9XG5cdFxuXHRzY3JvbGxUb1Jvdyhyb3csIHBvc2l0aW9uLCBpZlZpc2libGUpe1xuXHRcdHJldHVybiB0aGlzLnJlbmRlcmVyLnNjcm9sbFRvUm93UG9zaXRpb24ocm93LCBwb3NpdGlvbiwgaWZWaXNpYmxlKTtcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vLy8vIERhdGEgSGFuZGxpbmcgLy8vLy8vLy8vLy8vLy8vLy8vXG5cdHNldERhdGEoZGF0YSwgcmVuZGVySW5Qb3NpdGlvbiwgY29sdW1uc0NoYW5nZWQpe1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KT0+e1xuXHRcdFx0aWYocmVuZGVySW5Qb3NpdGlvbiAmJiB0aGlzLmdldERpc3BsYXlSb3dzKCkubGVuZ3RoKXtcblx0XHRcdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnBhZ2luYXRpb24pe1xuXHRcdFx0XHRcdHRoaXMuX3NldERhdGFBY3R1YWwoZGF0YSwgdHJ1ZSk7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHR0aGlzLnJlUmVuZGVySW5Qb3NpdGlvbigoKSA9PiB7XG5cdFx0XHRcdFx0XHR0aGlzLl9zZXREYXRhQWN0dWFsKGRhdGEpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5hdXRvQ29sdW1ucyAmJiBjb2x1bW5zQ2hhbmdlZCAmJiB0aGlzLnRhYmxlLmluaXRpYWxpemVkKXtcblx0XHRcdFx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2VuZXJhdGVDb2x1bW5zRnJvbVJvd0RhdGEoZGF0YSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5yZXNldFNjcm9sbCgpO1xuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5fc2V0RGF0YUFjdHVhbChkYXRhKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0cmVzb2x2ZSgpO1xuXHRcdH0pO1xuXHR9XG5cdFxuXHRfc2V0RGF0YUFjdHVhbChkYXRhLCByZW5kZXJJblBvc2l0aW9uKXtcblx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJkYXRhUHJvY2Vzc2luZ1wiLCBkYXRhKTtcblx0XHRcblx0XHR0aGlzLl93aXBlRWxlbWVudHMoKTtcblx0XHRcblx0XHRpZihBcnJheS5pc0FycmF5KGRhdGEpKXtcblx0XHRcdHRoaXMuZGlzcGF0Y2goXCJkYXRhLXByb2Nlc3NpbmdcIiwgZGF0YSk7XG5cdFx0XHRcblx0XHRcdGRhdGEuZm9yRWFjaCgoZGVmLCBpKSA9PiB7XG5cdFx0XHRcdGlmKGRlZiAmJiB0eXBlb2YgZGVmID09PSBcIm9iamVjdFwiKXtcblx0XHRcdFx0XHR2YXIgcm93ID0gbmV3IFJvdyhkZWYsIHRoaXMpO1xuXHRcdFx0XHRcdHRoaXMucm93cy5wdXNoKHJvdyk7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJEYXRhIExvYWRpbmcgV2FybmluZyAtIEludmFsaWQgcm93IGRhdGEgZGV0ZWN0ZWQgYW5kIGlnbm9yZWQsIGV4cGVjdGluZyBvYmplY3QgYnV0IHJlY2VpdmVkOlwiLCBkZWYpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0dGhpcy5yZWZyZXNoQWN0aXZlRGF0YShmYWxzZSwgZmFsc2UsIHJlbmRlckluUG9zaXRpb24pO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmRpc3BhdGNoKFwiZGF0YS1wcm9jZXNzZWRcIiwgZGF0YSk7XG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJkYXRhUHJvY2Vzc2VkXCIsIGRhdGEpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoXCJEYXRhIExvYWRpbmcgRXJyb3IgLSBVbmFibGUgdG8gcHJvY2VzcyBkYXRhIGR1ZSB0byBpbnZhbGlkIGRhdGEgdHlwZSBcXG5FeHBlY3Rpbmc6IGFycmF5IFxcblJlY2VpdmVkOiBcIiwgdHlwZW9mIGRhdGEsIFwiXFxuRGF0YTogICAgIFwiLCBkYXRhKTtcblx0XHR9XG5cdH1cblx0XG5cdF93aXBlRWxlbWVudHMoKXtcblx0XHR0aGlzLmRpc3BhdGNoKFwicm93cy13aXBlXCIpO1xuXHRcdFxuXHRcdHRoaXMuZGVzdHJveSgpO1xuXHRcdFxuXHRcdHRoaXMuYWRqdXN0VGFibGVTaXplKCk7XG5cdFx0XG5cdFx0dGhpcy5kaXNwYXRjaChcInJvd3Mtd2lwZWRcIik7XG5cdH1cblx0XG5cdGRlc3Ryb3koKXtcblx0XHR0aGlzLnJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG5cdFx0XHRyb3cud2lwZSgpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHRoaXMucm93cyA9IFtdO1xuXHRcdHRoaXMuYWN0aXZlUm93cyA9IFtdO1xuXHRcdHRoaXMuYWN0aXZlUm93c1BpcGVsaW5lID0gW107XG5cdFx0dGhpcy5hY3RpdmVSb3dzQ291bnQgPSAwO1xuXHRcdHRoaXMuZGlzcGxheVJvd3MgPSBbXTtcblx0XHR0aGlzLmRpc3BsYXlSb3dzQ291bnQgPSAwO1xuXHR9XG5cdFxuXHRkZWxldGVSb3cocm93LCBibG9ja1JlZHJhdyl7XG5cdFx0dmFyIGFsbEluZGV4ID0gdGhpcy5yb3dzLmluZGV4T2Yocm93KSxcblx0XHRhY3RpdmVJbmRleCA9IHRoaXMuYWN0aXZlUm93cy5pbmRleE9mKHJvdyk7XG5cdFx0XG5cdFx0aWYoYWN0aXZlSW5kZXggPiAtMSl7XG5cdFx0XHR0aGlzLmFjdGl2ZVJvd3Muc3BsaWNlKGFjdGl2ZUluZGV4LCAxKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYoYWxsSW5kZXggPiAtMSl7XG5cdFx0XHR0aGlzLnJvd3Muc3BsaWNlKGFsbEluZGV4LCAxKTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5zZXRBY3RpdmVSb3dzKHRoaXMuYWN0aXZlUm93cyk7XG5cdFx0XG5cdFx0dGhpcy5kaXNwbGF5Um93SXRlcmF0b3IoKHJvd3MpID0+IHtcblx0XHRcdHZhciBkaXNwbGF5SW5kZXggPSByb3dzLmluZGV4T2Yocm93KTtcblx0XHRcdFxuXHRcdFx0aWYoZGlzcGxheUluZGV4ID4gLTEpe1xuXHRcdFx0XHRyb3dzLnNwbGljZShkaXNwbGF5SW5kZXgsIDEpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdFxuXHRcdGlmKCFibG9ja1JlZHJhdyl7XG5cdFx0XHR0aGlzLnJlUmVuZGVySW5Qb3NpdGlvbigpO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLnJlZ2VuZXJhdGVSb3dQb3NpdGlvbnMoKTtcblx0XHRcblx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJyb3dEZWxldGVkXCIsIHJvdy5nZXRDb21wb25lbnQoKSk7XG5cdFx0XG5cdFx0aWYoIXRoaXMuZGlzcGxheVJvd3NDb3VudCl7XG5cdFx0XHR0aGlzLnRhYmxlRW1wdHkoKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYodGhpcy5zdWJzY3JpYmVkRXh0ZXJuYWwoXCJkYXRhQ2hhbmdlZFwiKSl7XG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJkYXRhQ2hhbmdlZFwiLCB0aGlzLmdldERhdGEoKSk7XG5cdFx0fVxuXHR9XG5cdFxuXHRhZGRSb3coZGF0YSwgcG9zLCBpbmRleCwgYmxvY2tSZWRyYXcpe1xuXHRcdHZhciByb3cgPSB0aGlzLmFkZFJvd0FjdHVhbChkYXRhLCBwb3MsIGluZGV4LCBibG9ja1JlZHJhdyk7XG5cdFx0cmV0dXJuIHJvdztcblx0fVxuXHRcblx0Ly9hZGQgbXVsdGlwbGUgcm93c1xuXHRhZGRSb3dzKGRhdGEsIHBvcywgaW5kZXgsIHJlZnJlc2hEaXNwbGF5T25seSl7XG5cdFx0dmFyIHJvd3MgPSBbXTtcblx0XHRcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0cG9zID0gdGhpcy5maW5kQWRkUm93UG9zKHBvcyk7XG5cdFx0XHRcblx0XHRcdGlmKCFBcnJheS5pc0FycmF5KGRhdGEpKXtcblx0XHRcdFx0ZGF0YSA9IFtkYXRhXTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoKHR5cGVvZiBpbmRleCA9PSBcInVuZGVmaW5lZFwiICYmIHBvcykgfHwgKHR5cGVvZiBpbmRleCAhPT0gXCJ1bmRlZmluZWRcIiAmJiAhcG9zKSl7XG5cdFx0XHRcdGRhdGEucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRkYXRhLmZvckVhY2goKGl0ZW0sIGkpID0+IHtcblx0XHRcdFx0dmFyIHJvdyA9IHRoaXMuYWRkUm93KGl0ZW0sIHBvcywgaW5kZXgsIHRydWUpO1xuXHRcdFx0XHRyb3dzLnB1c2gocm93KTtcblx0XHRcdFx0dGhpcy5kaXNwYXRjaChcInJvdy1hZGRlZFwiLCByb3csIGl0ZW0sIHBvcywgaW5kZXgpO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdHRoaXMucmVmcmVzaEFjdGl2ZURhdGEocmVmcmVzaERpc3BsYXlPbmx5ID8gXCJkaXNwbGF5UGlwZWxpbmVcIiA6IGZhbHNlLCBmYWxzZSwgdHJ1ZSk7XG5cdFx0XHRcblx0XHRcdHRoaXMucmVnZW5lcmF0ZVJvd1Bvc2l0aW9ucygpO1xuXHRcdFx0XG5cdFx0XHRpZihyb3dzLmxlbmd0aCl7XG5cdFx0XHRcdHRoaXMuX2NsZWFyUGxhY2Vob2xkZXIoKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0cmVzb2x2ZShyb3dzKTtcblx0XHR9KTtcblx0fVxuXHRcblx0ZmluZEFkZFJvd1Bvcyhwb3Mpe1xuXHRcdGlmKHR5cGVvZiBwb3MgPT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0cG9zID0gdGhpcy50YWJsZS5vcHRpb25zLmFkZFJvd1Bvcztcblx0XHR9XG5cdFx0XG5cdFx0aWYocG9zID09PSBcInBvc1wiKXtcblx0XHRcdHBvcyA9IHRydWU7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHBvcyA9PT0gXCJib3R0b21cIil7XG5cdFx0XHRwb3MgPSBmYWxzZTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHBvcztcblx0fVxuXHRcblx0YWRkUm93QWN0dWFsKGRhdGEsIHBvcywgaW5kZXgsIGJsb2NrUmVkcmF3KXtcblx0XHR2YXIgcm93ID0gZGF0YSBpbnN0YW5jZW9mIFJvdyA/IGRhdGEgOiBuZXcgUm93KGRhdGEgfHwge30sIHRoaXMpLFxuXHRcdHRvcCA9IHRoaXMuZmluZEFkZFJvd1Bvcyhwb3MpLFxuXHRcdGFsbEluZGV4ID0gLTEsXG5cdFx0YWN0aXZlSW5kZXgsIGNoYWluUmVzdWx0O1xuXHRcdFxuXHRcdGlmKCFpbmRleCl7XG5cdFx0XHRjaGFpblJlc3VsdCA9IHRoaXMuY2hhaW4oXCJyb3ctYWRkaW5nLXBvc2l0aW9uXCIsIFtyb3csIHRvcF0sIG51bGwsIHtpbmRleCwgdG9wfSk7XG5cdFx0XHRcblx0XHRcdGluZGV4ID0gY2hhaW5SZXN1bHQuaW5kZXg7XG5cdFx0XHR0b3AgPSBjaGFpblJlc3VsdC50b3A7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHR5cGVvZiBpbmRleCAhPT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHRpbmRleCA9IHRoaXMuZmluZFJvdyhpbmRleCk7XG5cdFx0fVxuXHRcdFxuXHRcdGluZGV4ID0gdGhpcy5jaGFpbihcInJvdy1hZGRpbmctaW5kZXhcIiwgW3JvdywgaW5kZXgsIHRvcF0sIG51bGwsIGluZGV4KTtcblx0XHRcblx0XHRpZihpbmRleCl7XG5cdFx0XHRhbGxJbmRleCA9IHRoaXMucm93cy5pbmRleE9mKGluZGV4KTtcblx0XHR9XG5cdFx0XG5cdFx0aWYoaW5kZXggJiYgYWxsSW5kZXggPiAtMSl7XG5cdFx0XHRhY3RpdmVJbmRleCA9IHRoaXMuYWN0aXZlUm93cy5pbmRleE9mKGluZGV4KTtcblx0XHRcdFxuXHRcdFx0dGhpcy5kaXNwbGF5Um93SXRlcmF0b3IoZnVuY3Rpb24ocm93cyl7XG5cdFx0XHRcdHZhciBkaXNwbGF5SW5kZXggPSByb3dzLmluZGV4T2YoaW5kZXgpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoZGlzcGxheUluZGV4ID4gLTEpe1xuXHRcdFx0XHRcdHJvd3Muc3BsaWNlKCh0b3AgPyBkaXNwbGF5SW5kZXggOiBkaXNwbGF5SW5kZXggKyAxKSwgMCwgcm93KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdGlmKGFjdGl2ZUluZGV4ID4gLTEpe1xuXHRcdFx0XHR0aGlzLmFjdGl2ZVJvd3Muc3BsaWNlKCh0b3AgPyBhY3RpdmVJbmRleCA6IGFjdGl2ZUluZGV4ICsgMSksIDAsIHJvdyk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHRoaXMucm93cy5zcGxpY2UoKHRvcCA/IGFsbEluZGV4IDogYWxsSW5kZXggKyAxKSwgMCwgcm93KTtcblx0XHRcdFxuXHRcdH1lbHNlIHtcblx0XHRcdFxuXHRcdFx0aWYodG9wKXtcblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMuZGlzcGxheVJvd0l0ZXJhdG9yKGZ1bmN0aW9uKHJvd3Mpe1xuXHRcdFx0XHRcdHJvd3MudW5zaGlmdChyb3cpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMuYWN0aXZlUm93cy51bnNoaWZ0KHJvdyk7XG5cdFx0XHRcdHRoaXMucm93cy51bnNoaWZ0KHJvdyk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMuZGlzcGxheVJvd0l0ZXJhdG9yKGZ1bmN0aW9uKHJvd3Mpe1xuXHRcdFx0XHRcdHJvd3MucHVzaChyb3cpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMuYWN0aXZlUm93cy5wdXNoKHJvdyk7XG5cdFx0XHRcdHRoaXMucm93cy5wdXNoKHJvdyk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuc2V0QWN0aXZlUm93cyh0aGlzLmFjdGl2ZVJvd3MpO1xuXHRcdFxuXHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInJvd0FkZGVkXCIsIHJvdy5nZXRDb21wb25lbnQoKSk7XG5cdFx0XG5cdFx0aWYodGhpcy5zdWJzY3JpYmVkRXh0ZXJuYWwoXCJkYXRhQ2hhbmdlZFwiKSl7XG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJkYXRhQ2hhbmdlZFwiLCB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZ2V0RGF0YSgpKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYoIWJsb2NrUmVkcmF3KXtcblx0XHRcdHRoaXMucmVSZW5kZXJJblBvc2l0aW9uKCk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiByb3c7XG5cdH1cblx0XG5cdG1vdmVSb3coZnJvbSwgdG8sIGFmdGVyKXtcblx0XHR0aGlzLmRpc3BhdGNoKFwicm93LW1vdmVcIiwgZnJvbSwgdG8sIGFmdGVyKTtcblx0XHRcblx0XHR0aGlzLm1vdmVSb3dBY3R1YWwoZnJvbSwgdG8sIGFmdGVyKTtcblx0XHRcblx0XHR0aGlzLnJlZ2VuZXJhdGVSb3dQb3NpdGlvbnMoKTtcblx0XHRcblx0XHR0aGlzLmRpc3BhdGNoKFwicm93LW1vdmVkXCIsIGZyb20sIHRvLCBhZnRlcik7XG5cdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwicm93TW92ZWRcIiwgZnJvbS5nZXRDb21wb25lbnQoKSk7XG5cdH1cblx0XG5cdG1vdmVSb3dBY3R1YWwoZnJvbSwgdG8sIGFmdGVyKXtcblx0XHR0aGlzLm1vdmVSb3dJbkFycmF5KHRoaXMucm93cywgZnJvbSwgdG8sIGFmdGVyKTtcblx0XHR0aGlzLm1vdmVSb3dJbkFycmF5KHRoaXMuYWN0aXZlUm93cywgZnJvbSwgdG8sIGFmdGVyKTtcblx0XHRcblx0XHR0aGlzLmRpc3BsYXlSb3dJdGVyYXRvcigocm93cykgPT4ge1xuXHRcdFx0dGhpcy5tb3ZlUm93SW5BcnJheShyb3dzLCBmcm9tLCB0bywgYWZ0ZXIpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHRoaXMuZGlzcGF0Y2goXCJyb3ctbW92aW5nXCIsIGZyb20sIHRvLCBhZnRlcik7XG5cdH1cblx0XG5cdG1vdmVSb3dJbkFycmF5KHJvd3MsIGZyb20sIHRvLCBhZnRlcil7XG5cdFx0dmFyXHRmcm9tSW5kZXgsIHRvSW5kZXgsIHN0YXJ0LCBlbmQ7XG5cdFx0XG5cdFx0aWYoZnJvbSAhPT0gdG8pe1xuXHRcdFx0XG5cdFx0XHRmcm9tSW5kZXggPSByb3dzLmluZGV4T2YoZnJvbSk7XG5cdFx0XHRcblx0XHRcdGlmIChmcm9tSW5kZXggPiAtMSkge1xuXHRcdFx0XHRcblx0XHRcdFx0cm93cy5zcGxpY2UoZnJvbUluZGV4LCAxKTtcblx0XHRcdFx0XG5cdFx0XHRcdHRvSW5kZXggPSByb3dzLmluZGV4T2YodG8pO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYgKHRvSW5kZXggPiAtMSkge1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKGFmdGVyKXtcblx0XHRcdFx0XHRcdHJvd3Muc3BsaWNlKHRvSW5kZXgrMSwgMCwgZnJvbSk7XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0cm93cy5zcGxpY2UodG9JbmRleCwgMCwgZnJvbSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0cm93cy5zcGxpY2UoZnJvbUluZGV4LCAwLCBmcm9tKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHQvL3Jlc3R5bGUgcm93c1xuXHRcdFx0aWYocm93cyA9PT0gdGhpcy5nZXREaXNwbGF5Um93cygpKXtcblx0XHRcdFx0XG5cdFx0XHRcdHN0YXJ0ID0gZnJvbUluZGV4IDwgdG9JbmRleCA/IGZyb21JbmRleCA6IHRvSW5kZXg7XG5cdFx0XHRcdGVuZCA9IHRvSW5kZXggPiBmcm9tSW5kZXggPyB0b0luZGV4IDogZnJvbUluZGV4ICsxO1xuXHRcdFx0XHRcblx0XHRcdFx0Zm9yKGxldCBpID0gc3RhcnQ7IGkgPD0gZW5kOyBpKyspe1xuXHRcdFx0XHRcdGlmKHJvd3NbaV0pe1xuXHRcdFx0XHRcdFx0dGhpcy5zdHlsZVJvdyhyb3dzW2ldLCBpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblx0XG5cdGNsZWFyRGF0YSgpe1xuXHRcdHRoaXMuc2V0RGF0YShbXSk7XG5cdH1cblx0XG5cdGdldFJvd0luZGV4KHJvdyl7XG5cdFx0cmV0dXJuIHRoaXMuZmluZFJvd0luZGV4KHJvdywgdGhpcy5yb3dzKTtcblx0fVxuXHRcblx0Z2V0RGlzcGxheVJvd0luZGV4KHJvdyl7XG5cdFx0dmFyIGluZGV4ID0gdGhpcy5nZXREaXNwbGF5Um93cygpLmluZGV4T2Yocm93KTtcblx0XHRyZXR1cm4gaW5kZXggPiAtMSA/IGluZGV4IDogZmFsc2U7XG5cdH1cblx0XG5cdG5leHREaXNwbGF5Um93KHJvdywgcm93T25seSl7XG5cdFx0dmFyIGluZGV4ID0gdGhpcy5nZXREaXNwbGF5Um93SW5kZXgocm93KSxcblx0XHRuZXh0Um93ID0gZmFsc2U7XG5cdFx0XG5cdFx0XG5cdFx0aWYoaW5kZXggIT09IGZhbHNlICYmIGluZGV4IDwgdGhpcy5kaXNwbGF5Um93c0NvdW50IC0xKXtcblx0XHRcdG5leHRSb3cgPSB0aGlzLmdldERpc3BsYXlSb3dzKClbaW5kZXgrMV07XG5cdFx0fVxuXHRcdFxuXHRcdGlmKG5leHRSb3cgJiYgKCEobmV4dFJvdyBpbnN0YW5jZW9mIFJvdykgfHwgbmV4dFJvdy50eXBlICE9IFwicm93XCIpKXtcblx0XHRcdHJldHVybiB0aGlzLm5leHREaXNwbGF5Um93KG5leHRSb3csIHJvd09ubHkpO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gbmV4dFJvdztcblx0fVxuXHRcblx0cHJldkRpc3BsYXlSb3cocm93LCByb3dPbmx5KXtcblx0XHR2YXIgaW5kZXggPSB0aGlzLmdldERpc3BsYXlSb3dJbmRleChyb3cpLFxuXHRcdHByZXZSb3cgPSBmYWxzZTtcblx0XHRcblx0XHRpZihpbmRleCl7XG5cdFx0XHRwcmV2Um93ID0gdGhpcy5nZXREaXNwbGF5Um93cygpW2luZGV4LTFdO1xuXHRcdH1cblx0XHRcblx0XHRpZihyb3dPbmx5ICYmIHByZXZSb3cgJiYgKCEocHJldlJvdyBpbnN0YW5jZW9mIFJvdykgfHwgcHJldlJvdy50eXBlICE9IFwicm93XCIpKXtcblx0XHRcdHJldHVybiB0aGlzLnByZXZEaXNwbGF5Um93KHByZXZSb3csIHJvd09ubHkpO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gcHJldlJvdztcblx0fVxuXHRcblx0ZmluZFJvd0luZGV4KHJvdywgbGlzdCl7XG5cdFx0dmFyIHJvd0luZGV4O1xuXHRcdFxuXHRcdHJvdyA9IHRoaXMuZmluZFJvdyhyb3cpO1xuXHRcdFxuXHRcdGlmKHJvdyl7XG5cdFx0XHRyb3dJbmRleCA9IGxpc3QuaW5kZXhPZihyb3cpO1xuXHRcdFx0XG5cdFx0XHRpZihyb3dJbmRleCA+IC0xKXtcblx0XHRcdFx0cmV0dXJuIHJvd0luZGV4O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0XG5cdGdldERhdGEoYWN0aXZlLCB0cmFuc2Zvcm0pe1xuXHRcdHZhciBvdXRwdXQgPSBbXSxcblx0XHRyb3dzID0gdGhpcy5nZXRSb3dzKGFjdGl2ZSk7XG5cdFx0XG5cdFx0cm93cy5mb3JFYWNoKGZ1bmN0aW9uKHJvdyl7XG5cdFx0XHRpZihyb3cudHlwZSA9PSBcInJvd1wiKXtcblx0XHRcdFx0b3V0cHV0LnB1c2gocm93LmdldERhdGEodHJhbnNmb3JtIHx8IFwiZGF0YVwiKSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXHRcblx0Z2V0Q29tcG9uZW50cyhhY3RpdmUpe1xuXHRcdHZhclx0b3V0cHV0ID0gW10sXG5cdFx0cm93cyA9IHRoaXMuZ2V0Um93cyhhY3RpdmUpO1xuXHRcdFxuXHRcdHJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3cpe1xuXHRcdFx0b3V0cHV0LnB1c2gocm93LmdldENvbXBvbmVudCgpKTtcblx0XHR9KTtcblx0XHRcblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cdFxuXHRnZXREYXRhQ291bnQoYWN0aXZlKXtcblx0XHR2YXIgcm93cyA9IHRoaXMuZ2V0Um93cyhhY3RpdmUpO1xuXHRcdFxuXHRcdHJldHVybiByb3dzLmxlbmd0aDtcblx0fVxuXHRcblx0c2Nyb2xsSG9yaXpvbnRhbChsZWZ0KXtcblx0XHR0aGlzLnNjcm9sbExlZnQgPSBsZWZ0O1xuXHRcdHRoaXMuZWxlbWVudC5zY3JvbGxMZWZ0ID0gbGVmdDtcblx0XHRcblx0XHR0aGlzLmRpc3BhdGNoKFwic2Nyb2xsLWhvcml6b250YWxcIiwgbGVmdCk7XG5cdH1cblx0XG5cdHJlZ2lzdGVyRGF0YVBpcGVsaW5lSGFuZGxlcihoYW5kbGVyLCBwcmlvcml0eSl7XG5cdFx0aWYodHlwZW9mIHByaW9yaXR5ICE9PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdHRoaXMuZGF0YVBpcGVsaW5lLnB1c2goe2hhbmRsZXIsIHByaW9yaXR5fSk7XG5cdFx0XHR0aGlzLmRhdGFQaXBlbGluZS5zb3J0KChhLCBiKSA9PiB7XG5cdFx0XHRcdHJldHVybiBhLnByaW9yaXR5IC0gYi5wcmlvcml0eTtcblx0XHRcdH0pO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoXCJEYXRhIHBpcGVsaW5lIGhhbmRsZXJzIG11c3QgaGF2ZSBhIHByaW9yaXR5IGluIG9yZGVyIHRvIGJlIHJlZ2lzdGVyZWRcIik7XG5cdFx0fVxuXHR9XG5cdFxuXHRyZWdpc3RlckRpc3BsYXlQaXBlbGluZUhhbmRsZXIoaGFuZGxlciwgcHJpb3JpdHkpe1xuXHRcdGlmKHR5cGVvZiBwcmlvcml0eSAhPT0gXCJ1bmRlZmluZWRcIil7XG5cdFx0XHR0aGlzLmRpc3BsYXlQaXBlbGluZS5wdXNoKHtoYW5kbGVyLCBwcmlvcml0eX0pO1xuXHRcdFx0dGhpcy5kaXNwbGF5UGlwZWxpbmUuc29ydCgoYSwgYikgPT4ge1xuXHRcdFx0XHRyZXR1cm4gYS5wcmlvcml0eSAtIGIucHJpb3JpdHk7XG5cdFx0XHR9KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKFwiRGlzcGxheSBwaXBlbGluZSBoYW5kbGVycyBtdXN0IGhhdmUgYSBwcmlvcml0eSBpbiBvcmRlciB0byBiZSByZWdpc3RlcmVkXCIpO1xuXHRcdH1cblx0fVxuXHRcblx0Ly9zZXQgYWN0aXZlIGRhdGEgc2V0XG5cdHJlZnJlc2hBY3RpdmVEYXRhKGhhbmRsZXIsIHNraXBTdGFnZSwgcmVuZGVySW5Qb3NpdGlvbil7XG5cdFx0dmFyIHRhYmxlID0gdGhpcy50YWJsZSxcblx0XHRzdGFnZSA9IFwiXCIsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGNhc2NhZGVPcmRlciA9IFtcImFsbFwiLCBcImRhdGFQaXBlbGluZVwiLCBcImRpc3BsYXlcIiwgXCJkaXNwbGF5UGlwZWxpbmVcIiwgXCJlbmRcIl07XG5cdFx0XG5cdFx0aWYoIXRoaXMudGFibGUuZGVzdHJveWVkKXtcblx0XHRcdGlmKHR5cGVvZiBoYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0XHRpbmRleCA9IHRoaXMuZGF0YVBpcGVsaW5lLmZpbmRJbmRleCgoaXRlbSkgPT4ge1xuXHRcdFx0XHRcdHJldHVybiBpdGVtLmhhbmRsZXIgPT09IGhhbmRsZXI7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoaW5kZXggPiAtMSl7XG5cdFx0XHRcdFx0c3RhZ2UgPSBcImRhdGFQaXBlbGluZVwiO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKHNraXBTdGFnZSl7XG5cdFx0XHRcdFx0XHRpZihpbmRleCA9PSB0aGlzLmRhdGFQaXBlbGluZS5sZW5ndGggLSAxKXtcblx0XHRcdFx0XHRcdFx0c3RhZ2UgPSBcImRpc3BsYXlcIjtcblx0XHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdFx0aW5kZXgrKztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRpbmRleCA9IHRoaXMuZGlzcGxheVBpcGVsaW5lLmZpbmRJbmRleCgoaXRlbSkgPT4ge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGl0ZW0uaGFuZGxlciA9PT0gaGFuZGxlcjtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZihpbmRleCA+IC0xKXtcblx0XHRcdFx0XHRcdHN0YWdlID0gXCJkaXNwbGF5UGlwZWxpbmVcIjtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0aWYoc2tpcFN0YWdlKXtcblx0XHRcdFx0XHRcdFx0aWYoaW5kZXggPT0gdGhpcy5kaXNwbGF5UGlwZWxpbmUubGVuZ3RoIC0gMSl7XG5cdFx0XHRcdFx0XHRcdFx0c3RhZ2UgPSBcImVuZFwiO1xuXHRcdFx0XHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0aW5kZXgrKztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJVbmFibGUgdG8gcmVmcmVzaCBkYXRhLCBpbnZhbGlkIGhhbmRsZXIgcHJvdmlkZWRcIiwgaGFuZGxlcik7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHN0YWdlID0gaGFuZGxlciB8fCBcImFsbFwiO1xuXHRcdFx0XHRpbmRleCA9IDA7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKHRoaXMucmVkcmF3QmxvY2spe1xuXHRcdFx0XHRpZighdGhpcy5yZWRyYXdCbG9ja1Jlc3RvcmVDb25maWcgfHwgKHRoaXMucmVkcmF3QmxvY2tSZXN0b3JlQ29uZmlnICYmICgodGhpcy5yZWRyYXdCbG9ja1Jlc3RvcmVDb25maWcuc3RhZ2UgPT09IHN0YWdlICYmIGluZGV4IDwgdGhpcy5yZWRyYXdCbG9ja1Jlc3RvcmVDb25maWcuaW5kZXgpIHx8IChjYXNjYWRlT3JkZXIuaW5kZXhPZihzdGFnZSkgPCBjYXNjYWRlT3JkZXIuaW5kZXhPZih0aGlzLnJlZHJhd0Jsb2NrUmVzdG9yZUNvbmZpZy5zdGFnZSkpKSkpe1xuXHRcdFx0XHRcdHRoaXMucmVkcmF3QmxvY2tSZXN0b3JlQ29uZmlnID0ge1xuXHRcdFx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0XHRcdHNraXBTdGFnZTogc2tpcFN0YWdlLFxuXHRcdFx0XHRcdFx0cmVuZGVySW5Qb3NpdGlvbjogcmVuZGVySW5Qb3NpdGlvbixcblx0XHRcdFx0XHRcdHN0YWdlOnN0YWdlLFxuXHRcdFx0XHRcdFx0aW5kZXg6aW5kZXgsXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRpZihIZWxwZXJzLmVsVmlzaWJsZSh0aGlzLmVsZW1lbnQpKXtcblx0XHRcdFx0XHRpZihyZW5kZXJJblBvc2l0aW9uKXtcblx0XHRcdFx0XHRcdHRoaXMucmVSZW5kZXJJblBvc2l0aW9uKHRoaXMucmVmcmVzaFBpcGVsaW5lcy5iaW5kKHRoaXMsIGhhbmRsZXIsIHN0YWdlLCBpbmRleCwgcmVuZGVySW5Qb3NpdGlvbikpO1xuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdHRoaXMucmVmcmVzaFBpcGVsaW5lcyhoYW5kbGVyLCBzdGFnZSwgaW5kZXgsIHJlbmRlckluUG9zaXRpb24pO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRpZighaGFuZGxlcil7XG5cdFx0XHRcdFx0XHRcdHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5yZW5kZXJlci5yZW5kZXJDb2x1bW5zKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdHRoaXMucmVuZGVyVGFibGUoKTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0aWYodGFibGUub3B0aW9ucy5sYXlvdXRDb2x1bW5zT25OZXdEYXRhKXtcblx0XHRcdFx0XHRcdFx0dGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLnJlZHJhdyh0cnVlKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHR0aGlzLnJlZnJlc2hQaXBlbGluZXMoaGFuZGxlciwgc3RhZ2UsIGluZGV4LCByZW5kZXJJblBvc2l0aW9uKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5kaXNwYXRjaChcImRhdGEtcmVmcmVzaGVkXCIpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0cmVmcmVzaFBpcGVsaW5lcyhoYW5kbGVyLCBzdGFnZSwgaW5kZXgsIHJlbmRlckluUG9zaXRpb24pe1xuXHRcdHRoaXMuZGlzcGF0Y2goXCJkYXRhLXJlZnJlc2hpbmdcIik7XG5cdFx0XG5cdFx0aWYoIWhhbmRsZXIpe1xuXHRcdFx0dGhpcy5hY3RpdmVSb3dzUGlwZWxpbmVbMF0gPSB0aGlzLnJvd3Muc2xpY2UoMCk7XG5cdFx0fVxuXHRcdFxuXHRcdC8vY2FzY2FkZSB0aHJvdWdoIGRhdGEgcmVmcmVzaCBzdGFnZXNcblx0XHRzd2l0Y2goc3RhZ2Upe1xuXHRcdFx0Y2FzZSBcImFsbFwiOlxuXHRcdFx0Ly9oYW5kbGUgY2FzZSB3aGVyZSBhbGwgZGF0YSBuZWVkcyByZWZyZXNoaW5nXG5cdFx0XHRcblx0XHRcdGNhc2UgXCJkYXRhUGlwZWxpbmVcIjpcblx0XHRcdFxuXHRcdFx0XHRmb3IobGV0IGkgPSBpbmRleDsgaSA8IHRoaXMuZGF0YVBpcGVsaW5lLmxlbmd0aDsgaSsrKXtcblx0XHRcdFx0XHRsZXQgcmVzdWx0ID0gdGhpcy5kYXRhUGlwZWxpbmVbaV0uaGFuZGxlcih0aGlzLmFjdGl2ZVJvd3NQaXBlbGluZVtpXS5zbGljZSgwKSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRcdHRoaXMuYWN0aXZlUm93c1BpcGVsaW5lW2kgKyAxXSA9IHJlc3VsdCB8fCB0aGlzLmFjdGl2ZVJvd3NQaXBlbGluZVtpXS5zbGljZSgwKTtcblx0XHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRcdHRoaXMuc2V0QWN0aXZlUm93cyh0aGlzLmFjdGl2ZVJvd3NQaXBlbGluZVt0aGlzLmRhdGFQaXBlbGluZS5sZW5ndGhdKTtcblx0XHRcdFxuXHRcdFx0Y2FzZSBcImRpc3BsYXlcIjpcblx0XHRcdFx0aW5kZXggPSAwO1xuXHRcdFx0XHR0aGlzLnJlc2V0RGlzcGxheVJvd3MoKTtcblx0XHRcdFxuXHRcdFx0Y2FzZSBcImRpc3BsYXlQaXBlbGluZVwiOlxuXHRcdFx0XHRmb3IobGV0IGkgPSBpbmRleDsgaSA8IHRoaXMuZGlzcGxheVBpcGVsaW5lLmxlbmd0aDsgaSsrKXtcblx0XHRcdFx0XHRsZXQgcmVzdWx0ID0gdGhpcy5kaXNwbGF5UGlwZWxpbmVbaV0uaGFuZGxlcigoaSA/IHRoaXMuZ2V0RGlzcGxheVJvd3MoaSAtIDEpIDogdGhpcy5hY3RpdmVSb3dzKS5zbGljZSgwKSwgcmVuZGVySW5Qb3NpdGlvbik7XG5cdFx0XHRcdFxuXHRcdFx0XHRcdHRoaXMuc2V0RGlzcGxheVJvd3MocmVzdWx0IHx8IHRoaXMuZ2V0RGlzcGxheVJvd3MoaSAtIDEpLnNsaWNlKDApLCBpKTtcblx0XHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRjYXNlIFwiZW5kXCI6XG5cdFx0XHQvL2Nhc2UgdG8gaGFuZGxlIHNjZW5hcmlvIHdoZW4gdHJ5aW5nIHRvIHNraXAgcGFzdCBlbmQgc3RhZ2Vcblx0XHRcdFx0dGhpcy5yZWdlbmVyYXRlUm93UG9zaXRpb25zKCk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRoaXMuZ2V0RGlzcGxheVJvd3MoKS5sZW5ndGgpe1xuXHRcdFx0dGhpcy5fY2xlYXJQbGFjZWhvbGRlcigpO1xuXHRcdH1cblx0fVxuXHRcblx0Ly9yZWdlbmVyYXRlIHJvdyBwb3NpdGlvbnNcblx0cmVnZW5lcmF0ZVJvd1Bvc2l0aW9ucygpe1xuXHRcdHZhciByb3dzID0gdGhpcy5nZXREaXNwbGF5Um93cygpO1xuXHRcdHZhciBpbmRleCA9IDE7XG5cdFx0XG5cdFx0cm93cy5mb3JFYWNoKChyb3cpID0+IHtcblx0XHRcdGlmIChyb3cudHlwZSA9PT0gXCJyb3dcIil7XG5cdFx0XHRcdHJvdy5zZXRQb3NpdGlvbihpbmRleCk7XG5cdFx0XHRcdGluZGV4Kys7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0XG5cdHNldEFjdGl2ZVJvd3MoYWN0aXZlUm93cyl7XG5cdFx0dGhpcy5hY3RpdmVSb3dzID0gdGhpcy5hY3RpdmVSb3dzID0gT2JqZWN0LmFzc2lnbihbXSwgYWN0aXZlUm93cyk7XG5cdFx0dGhpcy5hY3RpdmVSb3dzQ291bnQgPSB0aGlzLmFjdGl2ZVJvd3MubGVuZ3RoO1xuXHR9XG5cdFxuXHQvL3Jlc2V0IGRpc3BsYXkgcm93cyBhcnJheVxuXHRyZXNldERpc3BsYXlSb3dzKCl7XG5cdFx0dGhpcy5kaXNwbGF5Um93cyA9IFtdO1xuXHRcdFxuXHRcdHRoaXMuZGlzcGxheVJvd3MucHVzaCh0aGlzLmFjdGl2ZVJvd3Muc2xpY2UoMCkpO1xuXHRcdFxuXHRcdHRoaXMuZGlzcGxheVJvd3NDb3VudCA9IHRoaXMuZGlzcGxheVJvd3NbMF0ubGVuZ3RoO1xuXHR9XG5cdFxuXHQvL3NldCBkaXNwbGF5IHJvdyBwaXBlbGluZSBkYXRhXG5cdHNldERpc3BsYXlSb3dzKGRpc3BsYXlSb3dzLCBpbmRleCl7XG5cdFx0dGhpcy5kaXNwbGF5Um93c1tpbmRleF0gPSBkaXNwbGF5Um93cztcblx0XHRcblx0XHRpZihpbmRleCA9PSB0aGlzLmRpc3BsYXlSb3dzLmxlbmd0aCAtMSl7XG5cdFx0XHR0aGlzLmRpc3BsYXlSb3dzQ291bnQgPSB0aGlzLmRpc3BsYXlSb3dzW3RoaXMuZGlzcGxheVJvd3MubGVuZ3RoIC0xXS5sZW5ndGg7XG5cdFx0fVxuXHR9XG5cdFxuXHRnZXREaXNwbGF5Um93cyhpbmRleCl7XG5cdFx0aWYodHlwZW9mIGluZGV4ID09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0cmV0dXJuIHRoaXMuZGlzcGxheVJvd3MubGVuZ3RoID8gdGhpcy5kaXNwbGF5Um93c1t0aGlzLmRpc3BsYXlSb3dzLmxlbmd0aCAtMV0gOiBbXTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5kaXNwbGF5Um93c1tpbmRleF0gfHwgW107XG5cdFx0fVxuXHR9XG5cdFxuXHRnZXRWaXNpYmxlUm93cyhjaGFpbiwgdmlld2FibGUpe1xuXHRcdHZhciByb3dzID0gIE9iamVjdC5hc3NpZ24oW10sIHRoaXMucmVuZGVyZXIudmlzaWJsZVJvd3MoIXZpZXdhYmxlKSk7XG5cdFx0XG5cdFx0aWYoY2hhaW4pe1xuXHRcdFx0cm93cyA9IHRoaXMuY2hhaW4oXCJyb3dzLXZpc2libGVcIiwgW3ZpZXdhYmxlXSwgcm93cywgcm93cyk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiByb3dzO1xuXHR9XG5cdFxuXHQvL3JlcGVhdCBhY3Rpb24gYWNyb3NzIGRpc3BsYXkgcm93c1xuXHRkaXNwbGF5Um93SXRlcmF0b3IoY2FsbGJhY2spe1xuXHRcdHRoaXMuYWN0aXZlUm93c1BpcGVsaW5lLmZvckVhY2goY2FsbGJhY2spO1xuXHRcdHRoaXMuZGlzcGxheVJvd3MuZm9yRWFjaChjYWxsYmFjayk7XG5cdFx0XG5cdFx0dGhpcy5kaXNwbGF5Um93c0NvdW50ID0gdGhpcy5kaXNwbGF5Um93c1t0aGlzLmRpc3BsYXlSb3dzLmxlbmd0aCAtMV0ubGVuZ3RoO1xuXHR9XG5cdFxuXHQvL3JldHVybiBvbmx5IGFjdHVhbCByb3dzIChub3QgZ3JvdXAgaGVhZGVycyBldGMpXG5cdGdldFJvd3ModHlwZSl7XG5cdFx0dmFyIHJvd3MgPSBbXTtcblx0XHRcblx0XHRzd2l0Y2godHlwZSl7XG5cdFx0XHRjYXNlIFwiYWN0aXZlXCI6XG5cdFx0XHRcdHJvd3MgPSB0aGlzLmFjdGl2ZVJvd3M7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRjYXNlIFwiZGlzcGxheVwiOlxuXHRcdFx0XHRyb3dzID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldERpc3BsYXlSb3dzKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRjYXNlIFwidmlzaWJsZVwiOlxuXHRcdFx0XHRyb3dzID0gdGhpcy5nZXRWaXNpYmxlUm93cyhmYWxzZSwgdHJ1ZSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRyb3dzID0gdGhpcy5jaGFpbihcInJvd3MtcmV0cmlldmVcIiwgdHlwZSwgbnVsbCwgdGhpcy5yb3dzKSB8fCB0aGlzLnJvd3M7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiByb3dzO1xuXHR9XG5cdFxuXHQvLy8vLy8vLy8vLy8vLy8vLyBUYWJsZSBSZW5kZXJpbmcgLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly90cmlnZ2VyIHJlcmVuZGVyIG9mIHRhYmxlIGluIGN1cnJlbnQgcG9zaXRpb25cblx0cmVSZW5kZXJJblBvc2l0aW9uKGNhbGxiYWNrKXtcblx0XHRpZih0aGlzLnJlZHJhd0Jsb2NrKXtcblx0XHRcdGlmKGNhbGxiYWNrKXtcblx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0dGhpcy5yZWRyYXdCbG9ja1JlbmRlckluUG9zaXRpb24gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInJlbmRlclN0YXJ0ZWRcIik7XG5cdFx0XHRcblx0XHRcdHRoaXMucmVuZGVyZXIucmVyZW5kZXJSb3dzKGNhbGxiYWNrKTtcblx0XHRcdFxuXHRcdFx0aWYoIXRoaXMuZml4ZWRIZWlnaHQpe1xuXHRcdFx0XHR0aGlzLmFkanVzdFRhYmxlU2l6ZSgpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLnNjcm9sbEJhckNoZWNrKCk7XG5cdFx0XHRcblx0XHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInJlbmRlckNvbXBsZXRlXCIpO1xuXHRcdH1cblx0fVxuXHRcblx0c2Nyb2xsQmFyQ2hlY2soKXtcblx0XHR2YXIgc2Nyb2xsYmFyV2lkdGggPSAwO1xuXHRcdFxuXHRcdC8vYWRqdXN0IGZvciB2ZXJ0aWNhbCBzY3JvbGxiYXIgbW92aW5nIHRhYmxlIHdoZW4gcHJlc2VudFxuXHRcdGlmKHRoaXMuZWxlbWVudC5zY3JvbGxIZWlnaHQgPiB0aGlzLmVsZW1lbnQuY2xpZW50SGVpZ2h0KXtcblx0XHRcdHNjcm9sbGJhcldpZHRoID0gdGhpcy5lbGVtZW50Lm9mZnNldFdpZHRoIC0gdGhpcy5lbGVtZW50LmNsaWVudFdpZHRoO1xuXHRcdH1cblx0XHRcblx0XHRpZihzY3JvbGxiYXJXaWR0aCAhPT0gdGhpcy5zY3JvbGxiYXJXaWR0aCl7XG5cdFx0XHR0aGlzLnNjcm9sbGJhcldpZHRoID0gc2Nyb2xsYmFyV2lkdGg7XG5cdFx0XHR0aGlzLmRpc3BhdGNoKFwic2Nyb2xsYmFyLXZlcnRpY2FsXCIsIHNjcm9sbGJhcldpZHRoKTtcblx0XHR9XG5cdH1cblx0XG5cdGluaXRpYWxpemVSZW5kZXJlcigpe1xuXHRcdHZhciByZW5kZXJDbGFzcztcblx0XHRcblx0XHR2YXIgcmVuZGVyZXJzID0ge1xuXHRcdFx0XCJ2aXJ0dWFsXCI6IFZpcnR1YWxEb21WZXJ0aWNhbCxcblx0XHRcdFwiYmFzaWNcIjogQmFzaWNWZXJ0aWNhbCxcblx0XHR9O1xuXHRcdFxuXHRcdGlmKHR5cGVvZiB0aGlzLnRhYmxlLm9wdGlvbnMucmVuZGVyVmVydGljYWwgPT09IFwic3RyaW5nXCIpe1xuXHRcdFx0cmVuZGVyQ2xhc3MgPSByZW5kZXJlcnNbdGhpcy50YWJsZS5vcHRpb25zLnJlbmRlclZlcnRpY2FsXTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRyZW5kZXJDbGFzcyA9IHRoaXMudGFibGUub3B0aW9ucy5yZW5kZXJWZXJ0aWNhbDtcblx0XHR9XG5cdFx0XG5cdFx0aWYocmVuZGVyQ2xhc3Mpe1xuXHRcdFx0dGhpcy5yZW5kZXJNb2RlID0gdGhpcy50YWJsZS5vcHRpb25zLnJlbmRlclZlcnRpY2FsO1xuXHRcdFx0XG5cdFx0XHR0aGlzLnJlbmRlcmVyID0gbmV3IHJlbmRlckNsYXNzKHRoaXMudGFibGUsIHRoaXMuZWxlbWVudCwgdGhpcy50YWJsZUVsZW1lbnQpO1xuXHRcdFx0dGhpcy5yZW5kZXJlci5pbml0aWFsaXplKCk7XG5cdFx0XHRcblx0XHRcdGlmKCh0aGlzLnRhYmxlLmVsZW1lbnQuY2xpZW50SGVpZ2h0IHx8IHRoaXMudGFibGUub3B0aW9ucy5oZWlnaHQpICYmICEodGhpcy50YWJsZS5vcHRpb25zLm1pbkhlaWdodCAmJiB0aGlzLnRhYmxlLm9wdGlvbnMubWF4SGVpZ2h0KSl7XG5cdFx0XHRcdHRoaXMuZml4ZWRIZWlnaHQgPSB0cnVlO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHR0aGlzLmZpeGVkSGVpZ2h0ID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS5lcnJvcihcIlVuYWJsZSB0byBmaW5kIG1hdGNoaW5nIHJlbmRlcmVyOlwiLCB0aGlzLnRhYmxlLm9wdGlvbnMucmVuZGVyVmVydGljYWwpO1xuXHRcdH1cblx0fVxuXHRcblx0Z2V0UmVuZGVyTW9kZSgpe1xuXHRcdHJldHVybiB0aGlzLnJlbmRlck1vZGU7XG5cdH1cblx0XG5cdHJlbmRlclRhYmxlKCl7XG5cdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwicmVuZGVyU3RhcnRlZFwiKTtcblx0XHRcblx0XHR0aGlzLmVsZW1lbnQuc2Nyb2xsVG9wID0gMDtcblx0XHRcblx0XHR0aGlzLl9jbGVhclRhYmxlKCk7XG5cdFx0XG5cdFx0aWYodGhpcy5kaXNwbGF5Um93c0NvdW50KXtcblx0XHRcdHRoaXMucmVuZGVyZXIucmVuZGVyUm93cygpO1xuXHRcdFx0XG5cdFx0XHRpZih0aGlzLmZpcnN0UmVuZGVyKXtcblx0XHRcdFx0dGhpcy5maXJzdFJlbmRlciA9IGZhbHNlO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoIXRoaXMuZml4ZWRIZWlnaHQpe1xuXHRcdFx0XHRcdHRoaXMuYWRqdXN0VGFibGVTaXplKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMubGF5b3V0UmVmcmVzaCh0cnVlKTtcblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLnJlbmRlckVtcHR5U2Nyb2xsKCk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKCF0aGlzLmZpeGVkSGVpZ2h0KXtcblx0XHRcdHRoaXMuYWRqdXN0VGFibGVTaXplKCk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuZGlzcGF0Y2goXCJ0YWJsZS1sYXlvdXRcIik7XG5cdFx0XG5cdFx0aWYoIXRoaXMuZGlzcGxheVJvd3NDb3VudCl7XG5cdFx0XHR0aGlzLl9zaG93UGxhY2Vob2xkZXIoKTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5zY3JvbGxCYXJDaGVjaygpO1xuXHRcdFxuXHRcdHRoaXMuZGlzcGF0Y2hFeHRlcm5hbChcInJlbmRlckNvbXBsZXRlXCIpO1xuXHR9XG5cdFxuXHQvL3Nob3cgc2Nyb2xsYmFycyBvbiBlbXB0eSB0YWJsZSBkaXZcblx0cmVuZGVyRW1wdHlTY3JvbGwoKXtcblx0XHRpZih0aGlzLnBsYWNlaG9sZGVyKXtcblx0XHRcdHRoaXMudGFibGVFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLnRhYmxlRWxlbWVudC5zdHlsZS5taW5XaWR0aCA9IHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5nZXRXaWR0aCgpICsgXCJweFwiO1xuXHRcdFx0Ly8gdGhpcy50YWJsZUVsZW1lbnQuc3R5bGUubWluSGVpZ2h0ID0gXCIxcHhcIjtcblx0XHRcdC8vIHRoaXMudGFibGVFbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuXHRcdH1cblx0fVxuXHRcblx0X2NsZWFyVGFibGUoKXtcdFxuXHRcdHRoaXMuX2NsZWFyUGxhY2Vob2xkZXIoKTtcblx0XHRcblx0XHR0aGlzLnNjcm9sbFRvcCA9IDA7XG5cdFx0dGhpcy5zY3JvbGxMZWZ0ID0gMDtcblx0XHRcblx0XHR0aGlzLnJlbmRlcmVyLmNsZWFyUm93cygpO1xuXHR9XG5cdFxuXHR0YWJsZUVtcHR5KCl7XG5cdFx0dGhpcy5yZW5kZXJFbXB0eVNjcm9sbCgpO1xuXHRcdHRoaXMuX3Nob3dQbGFjZWhvbGRlcigpO1xuXHR9XG5cdFxuXHRfc2hvd1BsYWNlaG9sZGVyKCl7XG5cdFx0aWYodGhpcy5wbGFjZWhvbGRlcil7XG5cdFx0XHRpZih0aGlzLnBsYWNlaG9sZGVyICYmIHRoaXMucGxhY2Vob2xkZXIucGFyZW50Tm9kZSl7XG5cdFx0XHRcdHRoaXMucGxhY2Vob2xkZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnBsYWNlaG9sZGVyKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5pbml0aWFsaXplUGxhY2Vob2xkZXIoKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5wbGFjZWhvbGRlci5zZXRBdHRyaWJ1dGUoXCJ0YWJ1bGF0b3ItcmVuZGVyLW1vZGVcIiwgdGhpcy5yZW5kZXJNb2RlKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5nZXRFbGVtZW50KCkuYXBwZW5kQ2hpbGQodGhpcy5wbGFjZWhvbGRlcik7XG5cdFx0XHR0aGlzLl9wb3NpdGlvblBsYWNlaG9sZGVyKCk7XG5cblx0XHRcdHRoaXMuYWRqdXN0VGFibGVTaXplKCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRfY2xlYXJQbGFjZWhvbGRlcigpe1xuXHRcdGlmKHRoaXMucGxhY2Vob2xkZXIgJiYgdGhpcy5wbGFjZWhvbGRlci5wYXJlbnROb2RlKXtcblx0XHRcdHRoaXMucGxhY2Vob2xkZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnBsYWNlaG9sZGVyKTtcblx0XHR9XG5cdFx0XG5cdFx0Ly8gY2xlYXIgZW1wdHkgdGFibGUgcGxhY2Vob2xkZXIgbWluXG5cdFx0dGhpcy50YWJsZUVsZW1lbnQuc3R5bGUubWluV2lkdGggPSBcIlwiO1xuXHRcdHRoaXMudGFibGVFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHR9XG5cdFxuXHRfcG9zaXRpb25QbGFjZWhvbGRlcigpe1xuXHRcdGlmKHRoaXMucGxhY2Vob2xkZXIgJiYgdGhpcy5wbGFjZWhvbGRlci5wYXJlbnROb2RlKXtcblx0XHRcdHRoaXMucGxhY2Vob2xkZXIuc3R5bGUud2lkdGggPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZ2V0V2lkdGgoKSArIFwicHhcIjtcblx0XHRcdHRoaXMucGxhY2Vob2xkZXJDb250ZW50cy5zdHlsZS53aWR0aCA9IHRoaXMudGFibGUucm93TWFuYWdlci5lbGVtZW50LmNsaWVudFdpZHRoICsgXCJweFwiO1xuXHRcdFx0dGhpcy5wbGFjZWhvbGRlckNvbnRlbnRzLnN0eWxlLm1hcmdpbkxlZnQgPSB0aGlzLnNjcm9sbExlZnQgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG5cdFxuXHRzdHlsZVJvdyhyb3csIGluZGV4KXtcblx0XHR2YXIgcm93RWwgPSByb3cuZ2V0RWxlbWVudCgpO1xuXHRcdFxuXHRcdGlmKGluZGV4ICUgMil7XG5cdFx0XHRyb3dFbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXJvdy1ldmVuXCIpO1xuXHRcdFx0cm93RWwuY2xhc3NMaXN0LnJlbW92ZShcInRhYnVsYXRvci1yb3ctb2RkXCIpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJvd0VsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3Itcm93LW9kZFwiKTtcblx0XHRcdHJvd0VsLmNsYXNzTGlzdC5yZW1vdmUoXCJ0YWJ1bGF0b3Itcm93LWV2ZW5cIik7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL25vcm1hbGl6ZSBoZWlnaHQgb2YgYWN0aXZlIHJvd3Ncblx0bm9ybWFsaXplSGVpZ2h0KCl7XG5cdFx0dGhpcy5hY3RpdmVSb3dzLmZvckVhY2goZnVuY3Rpb24ocm93KXtcblx0XHRcdHJvdy5ub3JtYWxpemVIZWlnaHQoKTtcblx0XHR9KTtcblx0fVxuXHRcblx0Ly9hZGp1c3QgdGhlIGhlaWdodCBvZiB0aGUgdGFibGUgaG9sZGVyIHRvIGZpdCBpbiB0aGUgVGFidWxhdG9yIGVsZW1lbnRcblx0YWRqdXN0VGFibGVTaXplKCl7XG5cdFx0bGV0IGluaXRpYWxIZWlnaHQgPSB0aGlzLmVsZW1lbnQuY2xpZW50SGVpZ2h0LCBtaW5IZWlnaHQ7XG5cdFx0bGV0IHJlc2l6ZWQgPSBmYWxzZTtcblx0XHRcblx0XHRpZih0aGlzLnJlbmRlcmVyLnZlcnRpY2FsRmlsbE1vZGUgPT09IFwiZmlsbFwiKXtcblx0XHRcdGxldCBvdGhlckhlaWdodCA9ICBNYXRoLmZsb29yKHRoaXMudGFibGUuY29sdW1uTWFuYWdlci5nZXRFbGVtZW50KCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0ICsgKHRoaXMudGFibGUuZm9vdGVyTWFuYWdlciAmJiB0aGlzLnRhYmxlLmZvb3Rlck1hbmFnZXIuYWN0aXZlICYmICF0aGlzLnRhYmxlLmZvb3Rlck1hbmFnZXIuZXh0ZXJuYWwgPyB0aGlzLnRhYmxlLmZvb3Rlck1hbmFnZXIuZ2V0RWxlbWVudCgpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCA6IDApKTtcblx0XHRcdFxuXHRcdFx0aWYodGhpcy5maXhlZEhlaWdodCl7XG5cdFx0XHRcdG1pbkhlaWdodCA9IGlzTmFOKHRoaXMudGFibGUub3B0aW9ucy5taW5IZWlnaHQpID8gdGhpcy50YWJsZS5vcHRpb25zLm1pbkhlaWdodCA6IHRoaXMudGFibGUub3B0aW9ucy5taW5IZWlnaHQgKyBcInB4XCI7XG5cdFx0XHRcdFxuXHRcdFx0XHRjb25zdCBoZWlnaHQgPSBcImNhbGMoMTAwJSAtIFwiICsgb3RoZXJIZWlnaHQgKyBcInB4KVwiO1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQuc3R5bGUubWluSGVpZ2h0ID0gbWluSGVpZ2h0IHx8IFwiY2FsYygxMDAlIC0gXCIgKyBvdGhlckhlaWdodCArIFwicHgpXCI7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBoZWlnaHQ7XG5cdFx0XHRcdHRoaXMuZWxlbWVudC5zdHlsZS5tYXhIZWlnaHQgPSBoZWlnaHQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gXCJcIjtcblx0XHRcdFx0dGhpcy5lbGVtZW50LnN0eWxlLmhlaWdodCA9XG5cdFx0XHRcdHRoaXMudGFibGUuZWxlbWVudC5jbGllbnRIZWlnaHQgLSBvdGhlckhlaWdodCArIFwicHhcIjtcblx0XHRcdFx0dGhpcy5lbGVtZW50LnNjcm9sbFRvcCA9IHRoaXMuc2Nyb2xsVG9wO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aGlzLnJlbmRlcmVyLnJlc2l6ZSgpO1xuXHRcdFx0XG5cdFx0XHQvL2NoZWNrIGlmIHRoZSB0YWJsZSBoYXMgY2hhbmdlZCBzaXplIHdoZW4gZGVhbGluZyB3aXRoIHZhcmlhYmxlIGhlaWdodCB0YWJsZXNcblx0XHRcdGlmKCF0aGlzLmZpeGVkSGVpZ2h0ICYmIGluaXRpYWxIZWlnaHQgIT0gdGhpcy5lbGVtZW50LmNsaWVudEhlaWdodCl7XG5cdFx0XHRcdHJlc2l6ZWQgPSB0cnVlO1xuXHRcdFx0XHRpZih0aGlzLnN1YnNjcmliZWQoXCJ0YWJsZS1yZXNpemVcIikpe1xuXHRcdFx0XHRcdHRoaXMuZGlzcGF0Y2goXCJ0YWJsZS1yZXNpemVcIik7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHR0aGlzLnJlZHJhdygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHRoaXMuc2Nyb2xsQmFyQ2hlY2soKTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5fcG9zaXRpb25QbGFjZWhvbGRlcigpO1xuXHRcdHJldHVybiByZXNpemVkO1xuXHR9XG5cdFxuXHQvL3JlaW5pdGlhbGl6ZSBhbGwgcm93c1xuXHRyZWluaXRpYWxpemUoKXtcblx0XHR0aGlzLnJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3cpe1xuXHRcdFx0cm93LnJlaW5pdGlhbGl6ZSh0cnVlKTtcblx0XHR9KTtcblx0fVxuXHRcblx0Ly9wcmV2ZW50IHRhYmxlIGZyb20gYmVpbmcgcmVkcmF3blxuXHRibG9ja1JlZHJhdyAoKXtcblx0XHR0aGlzLnJlZHJhd0Jsb2NrID0gdHJ1ZTtcblx0XHR0aGlzLnJlZHJhd0Jsb2NrUmVzdG9yZUNvbmZpZyA9IGZhbHNlO1xuXHR9XG5cdFxuXHQvL3Jlc3RvcmUgdGFibGUgcmVkcmF3aW5nXG5cdHJlc3RvcmVSZWRyYXcgKCl7XG5cdFx0dGhpcy5yZWRyYXdCbG9jayA9IGZhbHNlO1xuXHRcdFxuXHRcdGlmKHRoaXMucmVkcmF3QmxvY2tSZXN0b3JlQ29uZmlnKXtcblx0XHRcdHRoaXMucmVmcmVzaEFjdGl2ZURhdGEodGhpcy5yZWRyYXdCbG9ja1Jlc3RvcmVDb25maWcuaGFuZGxlciwgdGhpcy5yZWRyYXdCbG9ja1Jlc3RvcmVDb25maWcuc2tpcFN0YWdlLCB0aGlzLnJlZHJhd0Jsb2NrUmVzdG9yZUNvbmZpZy5yZW5kZXJJblBvc2l0aW9uKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5yZWRyYXdCbG9ja1Jlc3RvcmVDb25maWcgPSBmYWxzZTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRpZih0aGlzLnJlZHJhd0Jsb2NrUmVuZGVySW5Qb3NpdGlvbil7XG5cdFx0XHRcdHRoaXMucmVSZW5kZXJJblBvc2l0aW9uKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMucmVkcmF3QmxvY2tSZW5kZXJJblBvc2l0aW9uID0gZmFsc2U7XG5cdH1cblx0XG5cdC8vcmVkcmF3IHRhYmxlXG5cdHJlZHJhdyAoZm9yY2Upe1xuXHRcdGNvbnN0IHJlc2l6ZWQgPSB0aGlzLmFkanVzdFRhYmxlU2l6ZSgpO1xuXHRcdHRoaXMudGFibGUudGFibGVXaWR0aCA9IHRoaXMudGFibGUuZWxlbWVudC5jbGllbnRXaWR0aDtcblx0XHRcblx0XHRpZighZm9yY2Upe1xuXHRcdFx0aWYocmVzaXplZCkge1xuXHRcdFx0XHR0aGlzLnJlUmVuZGVySW5Qb3NpdGlvbigpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5zY3JvbGxIb3Jpem9udGFsKHRoaXMuc2Nyb2xsTGVmdCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5yZW5kZXJUYWJsZSgpO1xuXHRcdH1cblx0fVxuXHRcblx0cmVzZXRTY3JvbGwoKXtcblx0XHR0aGlzLmVsZW1lbnQuc2Nyb2xsTGVmdCA9IDA7XG5cdFx0dGhpcy5lbGVtZW50LnNjcm9sbFRvcCA9IDA7XG5cdFx0XG5cdFx0aWYodGhpcy50YWJsZS5icm93c2VyID09PSBcImllXCIpe1xuXHRcdFx0dmFyIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKTtcblx0XHRcdGV2ZW50LmluaXRFdmVudChcInNjcm9sbFwiLCBmYWxzZSwgdHJ1ZSk7XG5cdFx0XHR0aGlzLmVsZW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5lbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdzY3JvbGwnKSk7XG5cdFx0fVxuXHR9XG59XG5cbmNsYXNzIEZvb3Rlck1hbmFnZXIgZXh0ZW5kcyBDb3JlRmVhdHVyZXtcblxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXG5cdFx0dGhpcy5hY3RpdmUgPSBmYWxzZTtcblx0XHR0aGlzLmVsZW1lbnQgPSB0aGlzLmNyZWF0ZUVsZW1lbnQoKTsgLy9jb250YWluaW5nIGVsZW1lbnRcblx0XHR0aGlzLmNvbnRhaW5lckVsZW1lbnQgPSB0aGlzLmNyZWF0ZUNvbnRhaW5lckVsZW1lbnQoKTsgLy9jb250YWluaW5nIGVsZW1lbnRcblx0XHR0aGlzLmV4dGVybmFsID0gZmFsc2U7XG5cdH1cblxuXHRpbml0aWFsaXplKCl7XG5cdFx0dGhpcy5pbml0aWFsaXplRWxlbWVudCgpO1xuXHR9XG5cblx0Y3JlYXRlRWxlbWVudCgpe1xuXHRcdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cblx0XHRlbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLWZvb3RlclwiKTtcblxuXHRcdHJldHVybiBlbDtcblx0fVxuXG5cdFxuXHRjcmVhdGVDb250YWluZXJFbGVtZW50KCl7XG5cdFx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuXHRcdGVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItZm9vdGVyLWNvbnRlbnRzXCIpO1xuXG5cdFx0dGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKGVsKTtcblxuXHRcdHJldHVybiBlbDtcblx0fVxuXG5cdGluaXRpYWxpemVFbGVtZW50KCl7XG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmZvb3RlckVsZW1lbnQpe1xuXG5cdFx0XHRzd2l0Y2godHlwZW9mIHRoaXMudGFibGUub3B0aW9ucy5mb290ZXJFbGVtZW50KXtcblx0XHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0XHRcdGlmKHRoaXMudGFibGUub3B0aW9ucy5mb290ZXJFbGVtZW50WzBdID09PSBcIjxcIil7XG5cdFx0XHRcdFx0XHR0aGlzLmNvbnRhaW5lckVsZW1lbnQuaW5uZXJIVE1MID0gdGhpcy50YWJsZS5vcHRpb25zLmZvb3RlckVsZW1lbnQ7XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0dGhpcy5leHRlcm5hbCA9IHRydWU7XG5cdFx0XHRcdFx0XHR0aGlzLmNvbnRhaW5lckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMudGFibGUub3B0aW9ucy5mb290ZXJFbGVtZW50KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHR0aGlzLmVsZW1lbnQgPSB0aGlzLnRhYmxlLm9wdGlvbnMuZm9vdGVyRWxlbWVudDtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRnZXRFbGVtZW50KCl7XG5cdFx0cmV0dXJuIHRoaXMuZWxlbWVudDtcblx0fVxuXG5cdGFwcGVuZChlbGVtZW50KXtcblx0XHR0aGlzLmFjdGl2YXRlKCk7XG5cblx0XHR0aGlzLmNvbnRhaW5lckVsZW1lbnQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG5cdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLmFkanVzdFRhYmxlU2l6ZSgpO1xuXHR9XG5cblx0cHJlcGVuZChlbGVtZW50KXtcblx0XHR0aGlzLmFjdGl2YXRlKCk7XG5cblx0XHR0aGlzLmVsZW1lbnQuaW5zZXJ0QmVmb3JlKGVsZW1lbnQsIHRoaXMuZWxlbWVudC5maXJzdENoaWxkKTtcblx0XHR0aGlzLnRhYmxlLnJvd01hbmFnZXIuYWRqdXN0VGFibGVTaXplKCk7XG5cdH1cblxuXHRyZW1vdmUoZWxlbWVudCl7XG5cdFx0ZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsZW1lbnQpO1xuXHRcdHRoaXMuZGVhY3RpdmF0ZSgpO1xuXHR9XG5cblx0ZGVhY3RpdmF0ZShmb3JjZSl7XG5cdFx0aWYoIXRoaXMuZWxlbWVudC5maXJzdENoaWxkIHx8IGZvcmNlKXtcblx0XHRcdGlmKCF0aGlzLmV4dGVybmFsKXtcblx0XHRcdFx0dGhpcy5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50KTtcblx0XHRcdH1cblx0XHRcdHRoaXMuYWN0aXZlID0gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0YWN0aXZhdGUoKXtcblx0XHRpZighdGhpcy5hY3RpdmUpe1xuXHRcdFx0dGhpcy5hY3RpdmUgPSB0cnVlO1xuXHRcdFx0aWYoIXRoaXMuZXh0ZXJuYWwpe1xuXHRcdFx0XHR0aGlzLnRhYmxlLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5nZXRFbGVtZW50KCkpO1xuXHRcdFx0XHR0aGlzLnRhYmxlLmVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICcnO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJlZHJhdygpe1xuXHRcdHRoaXMuZGlzcGF0Y2goXCJmb290ZXItcmVkcmF3XCIpO1xuXHR9XG59XG5cbmNsYXNzIEludGVyYWN0aW9uTWFuYWdlciBleHRlbmRzIENvcmVGZWF0dXJlIHtcblx0XG5cdGNvbnN0cnVjdG9yICh0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXHRcdFxuXHRcdHRoaXMuZWwgPSBudWxsO1xuXHRcdFxuXHRcdHRoaXMuYWJvcnRDbGFzc2VzID0gW1widGFidWxhdG9yLWhlYWRlcnNcIiwgXCJ0YWJ1bGF0b3ItdGFibGVcIl07XG5cdFx0XG5cdFx0dGhpcy5wcmV2aW91c1RhcmdldHMgPSB7fTtcblx0XHRcblx0XHR0aGlzLmxpc3RlbmVycyA9IFtcblx0XHRcdFwiY2xpY2tcIixcblx0XHRcdFwiZGJsY2xpY2tcIixcblx0XHRcdFwiY29udGV4dG1lbnVcIixcblx0XHRcdFwibW91c2VlbnRlclwiLFxuXHRcdFx0XCJtb3VzZWxlYXZlXCIsXG5cdFx0XHRcIm1vdXNlb3ZlclwiLFxuXHRcdFx0XCJtb3VzZW91dFwiLFxuXHRcdFx0XCJtb3VzZW1vdmVcIixcblx0XHRcdFwibW91c2V1cFwiLFxuXHRcdFx0XCJtb3VzZWRvd25cIixcblx0XHRcdFwidG91Y2hzdGFydFwiLFxuXHRcdFx0XCJ0b3VjaGVuZFwiLFxuXHRcdF07XG5cdFx0XG5cdFx0dGhpcy5jb21wb25lbnRNYXAgPSB7XG5cdFx0XHRcInRhYnVsYXRvci1jZWxsXCI6XCJjZWxsXCIsXG5cdFx0XHRcInRhYnVsYXRvci1yb3dcIjpcInJvd1wiLFxuXHRcdFx0XCJ0YWJ1bGF0b3ItZ3JvdXBcIjpcImdyb3VwXCIsXG5cdFx0XHRcInRhYnVsYXRvci1jb2xcIjpcImNvbHVtblwiLFxuXHRcdH07XG5cdFx0XG5cdFx0dGhpcy5wc2V1ZG9UcmFja2VycyA9IHtcblx0XHRcdFwicm93XCI6e1xuXHRcdFx0XHRzdWJzY3JpYmVyOm51bGwsXG5cdFx0XHRcdHRhcmdldDpudWxsLFxuXHRcdFx0fSxcblx0XHRcdFwiY2VsbFwiOntcblx0XHRcdFx0c3Vic2NyaWJlcjpudWxsLFxuXHRcdFx0XHR0YXJnZXQ6bnVsbCxcblx0XHRcdH0sXG5cdFx0XHRcImdyb3VwXCI6e1xuXHRcdFx0XHRzdWJzY3JpYmVyOm51bGwsXG5cdFx0XHRcdHRhcmdldDpudWxsLFxuXHRcdFx0fSxcblx0XHRcdFwiY29sdW1uXCI6e1xuXHRcdFx0XHRzdWJzY3JpYmVyOm51bGwsXG5cdFx0XHRcdHRhcmdldDpudWxsLFxuXHRcdFx0fSxcblx0XHR9O1xuXHRcdFxuXHRcdHRoaXMucHNldWRvVHJhY2tpbmcgPSBmYWxzZTtcblx0fVxuXHRcblx0aW5pdGlhbGl6ZSgpe1xuXHRcdHRoaXMuZWwgPSB0aGlzLnRhYmxlLmVsZW1lbnQ7XG5cdFx0XG5cdFx0dGhpcy5idWlsZExpc3RlbmVyTWFwKCk7XG5cdFx0dGhpcy5iaW5kU3Vic2NyaXB0aW9uV2F0Y2hlcnMoKTtcblx0fVxuXHRcblx0YnVpbGRMaXN0ZW5lck1hcCgpe1xuXHRcdHZhciBsaXN0ZW5lck1hcCA9IHt9O1xuXHRcdFxuXHRcdHRoaXMubGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyKSA9PiB7XG5cdFx0XHRsaXN0ZW5lck1hcFtsaXN0ZW5lcl0gPSB7XG5cdFx0XHRcdGhhbmRsZXI6bnVsbCxcblx0XHRcdFx0Y29tcG9uZW50czpbXSxcblx0XHRcdH07XG5cdFx0fSk7XG5cdFx0XG5cdFx0dGhpcy5saXN0ZW5lcnMgPSBsaXN0ZW5lck1hcDtcblx0fVxuXHRcblx0YmluZFBzZXVkb0V2ZW50cygpe1xuXHRcdE9iamVjdC5rZXlzKHRoaXMucHNldWRvVHJhY2tlcnMpLmZvckVhY2goKGtleSkgPT4ge1xuXHRcdFx0dGhpcy5wc2V1ZG9UcmFja2Vyc1trZXldLnN1YnNjcmliZXIgPSB0aGlzLnBzZXVkb01vdXNlRW50ZXIuYmluZCh0aGlzLCBrZXkpO1xuXHRcdFx0dGhpcy5zdWJzY3JpYmUoa2V5ICsgXCItbW91c2VvdmVyXCIsIHRoaXMucHNldWRvVHJhY2tlcnNba2V5XS5zdWJzY3JpYmVyKTtcblx0XHR9KTtcblx0XHRcblx0XHR0aGlzLnBzZXVkb1RyYWNraW5nID0gdHJ1ZTtcblx0fVxuXHRcblx0cHNldWRvTW91c2VFbnRlcihrZXksIGUsIHRhcmdldCl7XG5cdFx0aWYodGhpcy5wc2V1ZG9UcmFja2Vyc1trZXldLnRhcmdldCAhPT0gdGFyZ2V0KXtcblx0XHRcdFxuXHRcdFx0aWYodGhpcy5wc2V1ZG9UcmFja2Vyc1trZXldLnRhcmdldCl7XG5cdFx0XHRcdHRoaXMuZGlzcGF0Y2goa2V5ICsgXCItbW91c2VsZWF2ZVwiLCBlLCB0aGlzLnBzZXVkb1RyYWNrZXJzW2tleV0udGFyZ2V0KTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5wc2V1ZG9Nb3VzZUxlYXZlKGtleSwgZSk7XG5cdFx0XHRcblx0XHRcdHRoaXMucHNldWRvVHJhY2tlcnNba2V5XS50YXJnZXQgPSB0YXJnZXQ7XG5cdFx0XHRcblx0XHRcdHRoaXMuZGlzcGF0Y2goa2V5ICsgXCItbW91c2VlbnRlclwiLCBlLCB0YXJnZXQpO1xuXHRcdH1cblx0fVxuXHRcblx0cHNldWRvTW91c2VMZWF2ZShrZXksIGUpe1xuXHRcdHZhciBsZWF2ZUxpc3QgPSBPYmplY3Qua2V5cyh0aGlzLnBzZXVkb1RyYWNrZXJzKSxcblx0XHRsaW5rZWRLZXlzID0ge1xuXHRcdFx0XCJyb3dcIjpbXCJjZWxsXCJdLFxuXHRcdFx0XCJjZWxsXCI6W1wicm93XCJdLFxuXHRcdH07XG5cdFx0XG5cdFx0bGVhdmVMaXN0ID0gbGVhdmVMaXN0LmZpbHRlcigoaXRlbSkgPT4ge1xuXHRcdFx0dmFyIGxpbmtzID0gbGlua2VkS2V5c1trZXldO1xuXHRcdFx0cmV0dXJuIGl0ZW0gIT09IGtleSAmJiAoIWxpbmtzIHx8IChsaW5rcyAmJiAhbGlua3MuaW5jbHVkZXMoaXRlbSkpKTtcblx0XHR9KTtcblx0XHRcblx0XHRcblx0XHRsZWF2ZUxpc3QuZm9yRWFjaCgoa2V5KSA9PiB7XG5cdFx0XHR2YXIgdGFyZ2V0ID0gdGhpcy5wc2V1ZG9UcmFja2Vyc1trZXldLnRhcmdldDtcblx0XHRcdFxuXHRcdFx0aWYodGhpcy5wc2V1ZG9UcmFja2Vyc1trZXldLnRhcmdldCl7XG5cdFx0XHRcdHRoaXMuZGlzcGF0Y2goa2V5ICsgXCItbW91c2VsZWF2ZVwiLCBlLCB0YXJnZXQpO1xuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5wc2V1ZG9UcmFja2Vyc1trZXldLnRhcmdldCA9IG51bGw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0XG5cdFxuXHRiaW5kU3Vic2NyaXB0aW9uV2F0Y2hlcnMoKXtcblx0XHR2YXIgbGlzdGVuZXJzID0gT2JqZWN0LmtleXModGhpcy5saXN0ZW5lcnMpLFxuXHRcdGNvbXBvbmVudHMgPSBPYmplY3QudmFsdWVzKHRoaXMuY29tcG9uZW50TWFwKTtcblx0XHRcblx0XHRmb3IobGV0IGNvbXAgb2YgY29tcG9uZW50cyl7XG5cdFx0XHRmb3IobGV0IGxpc3RlbmVyIG9mIGxpc3RlbmVycyl7XG5cdFx0XHRcdGxldCBrZXkgPSBjb21wICsgXCItXCIgKyBsaXN0ZW5lcjtcblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMuc3Vic2NyaXB0aW9uQ2hhbmdlKGtleSwgdGhpcy5zdWJzY3JpcHRpb25DaGFuZ2VkLmJpbmQodGhpcywgY29tcCwgbGlzdGVuZXIpKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJ0YWJsZS1kZXN0cm95XCIsIHRoaXMuY2xlYXJXYXRjaGVycy5iaW5kKHRoaXMpKTtcblx0fVxuXHRcblx0c3Vic2NyaXB0aW9uQ2hhbmdlZChjb21wb25lbnQsIGtleSwgYWRkZWQpe1xuXHRcdHZhciBsaXN0ZW5lciA9IHRoaXMubGlzdGVuZXJzW2tleV0uY29tcG9uZW50cyxcblx0XHRpbmRleCA9IGxpc3RlbmVyLmluZGV4T2YoY29tcG9uZW50KSxcblx0XHRjaGFuZ2VkID0gZmFsc2U7XG5cdFx0XG5cdFx0aWYoYWRkZWQpe1xuXHRcdFx0aWYoaW5kZXggPT09IC0xKXtcblx0XHRcdFx0bGlzdGVuZXIucHVzaChjb21wb25lbnQpO1xuXHRcdFx0XHRjaGFuZ2VkID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRpZighdGhpcy5zdWJzY3JpYmVkKGNvbXBvbmVudCArIFwiLVwiICsga2V5KSl7XG5cdFx0XHRcdGlmKGluZGV4ID4gLTEpe1xuXHRcdFx0XHRcdGxpc3RlbmVyLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRcdFx0Y2hhbmdlZCA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0aWYoKGtleSA9PT0gXCJtb3VzZWVudGVyXCIgfHwga2V5ID09PSBcIm1vdXNlbGVhdmVcIikgJiYgIXRoaXMucHNldWRvVHJhY2tpbmcpe1xuXHRcdFx0dGhpcy5iaW5kUHNldWRvRXZlbnRzKCk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKGNoYW5nZWQpe1xuXHRcdFx0dGhpcy51cGRhdGVFdmVudExpc3RlbmVycygpO1xuXHRcdH1cblx0fVxuXHRcblx0dXBkYXRlRXZlbnRMaXN0ZW5lcnMoKXtcblx0XHRmb3IobGV0IGtleSBpbiB0aGlzLmxpc3RlbmVycyl7XG5cdFx0XHRsZXQgbGlzdGVuZXIgPSB0aGlzLmxpc3RlbmVyc1trZXldO1xuXHRcdFx0XG5cdFx0XHRpZihsaXN0ZW5lci5jb21wb25lbnRzLmxlbmd0aCl7XG5cdFx0XHRcdGlmKCFsaXN0ZW5lci5oYW5kbGVyKXtcblx0XHRcdFx0XHRsaXN0ZW5lci5oYW5kbGVyID0gdGhpcy50cmFjay5iaW5kKHRoaXMsIGtleSk7XG5cdFx0XHRcdFx0dGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKGtleSwgbGlzdGVuZXIuaGFuZGxlcik7XG5cdFx0XHRcdFx0Ly8gdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKGtleSwgbGlzdGVuZXIuaGFuZGxlciwge3Bhc3NpdmU6IHRydWV9KVxuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGlmKGxpc3RlbmVyLmhhbmRsZXIpe1xuXHRcdFx0XHRcdHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihrZXksIGxpc3RlbmVyLmhhbmRsZXIpO1xuXHRcdFx0XHRcdGxpc3RlbmVyLmhhbmRsZXIgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHR0cmFjayh0eXBlLCBlKXtcblx0XHR2YXIgcGF0aCA9IChlLmNvbXBvc2VkUGF0aCAmJiBlLmNvbXBvc2VkUGF0aCgpKSB8fCBlLnBhdGg7XG5cdFx0XG5cdFx0dmFyIHRhcmdldHMgPSB0aGlzLmZpbmRUYXJnZXRzKHBhdGgpO1xuXHRcdHRhcmdldHMgPSB0aGlzLmJpbmRDb21wb25lbnRzKHR5cGUsIHRhcmdldHMpO1xuXHRcdFxuXHRcdHRoaXMudHJpZ2dlckV2ZW50cyh0eXBlLCBlLCB0YXJnZXRzKTtcblx0XHRcblx0XHRpZih0aGlzLnBzZXVkb1RyYWNraW5nICYmICh0eXBlID09IFwibW91c2VvdmVyXCIgfHwgdHlwZSA9PSBcIm1vdXNlbGVhdmVcIikgJiYgIU9iamVjdC5rZXlzKHRhcmdldHMpLmxlbmd0aCl7XG5cdFx0XHR0aGlzLnBzZXVkb01vdXNlTGVhdmUoXCJub25lXCIsIGUpO1xuXHRcdH1cblx0fVxuXHRcblx0ZmluZFRhcmdldHMocGF0aCl7XG5cdFx0dmFyIHRhcmdldHMgPSB7fTtcblx0XHRcblx0XHRsZXQgY29tcG9uZW50TWFwID0gT2JqZWN0LmtleXModGhpcy5jb21wb25lbnRNYXApO1xuXHRcdFxuXHRcdGZvciAobGV0IGVsIG9mIHBhdGgpIHtcblx0XHRcdGxldCBjbGFzc0xpc3QgPSBlbC5jbGFzc0xpc3QgPyBbLi4uZWwuY2xhc3NMaXN0XSA6IFtdO1xuXHRcdFx0XG5cdFx0XHRsZXQgYWJvcnQgPSBjbGFzc0xpc3QuZmlsdGVyKChpdGVtKSA9PiB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmFib3J0Q2xhc3Nlcy5pbmNsdWRlcyhpdGVtKTtcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHRpZihhYm9ydC5sZW5ndGgpe1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0bGV0IGVsVGFyZ2V0cyA9IGNsYXNzTGlzdC5maWx0ZXIoKGl0ZW0pID0+IHtcblx0XHRcdFx0cmV0dXJuIGNvbXBvbmVudE1hcC5pbmNsdWRlcyhpdGVtKTtcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHRmb3IgKGxldCB0YXJnZXQgb2YgZWxUYXJnZXRzKSB7XG5cdFx0XHRcdGlmKCF0YXJnZXRzW3RoaXMuY29tcG9uZW50TWFwW3RhcmdldF1dKXtcblx0XHRcdFx0XHR0YXJnZXRzW3RoaXMuY29tcG9uZW50TWFwW3RhcmdldF1dID0gZWw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0aWYodGFyZ2V0cy5ncm91cCAmJiB0YXJnZXRzLmdyb3VwID09PSB0YXJnZXRzLnJvdyl7XG5cdFx0XHRkZWxldGUgdGFyZ2V0cy5yb3c7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiB0YXJnZXRzO1xuXHR9XG5cdFxuXHRiaW5kQ29tcG9uZW50cyh0eXBlLCB0YXJnZXRzKXtcblx0XHQvL2Vuc3VyZSByb3cgY29tcG9uZW50IGlzIGxvb2tlZCB1cCBiZWZvcmUgY2VsbFxuXHRcdHZhciBrZXlzID0gT2JqZWN0LmtleXModGFyZ2V0cykucmV2ZXJzZSgpLFxuXHRcdGxpc3RlbmVyID0gdGhpcy5saXN0ZW5lcnNbdHlwZV0sXG5cdFx0bWF0Y2hlcyA9IHt9LFxuXHRcdHRhcmdldE1hdGNoZXMgPSB7fTtcblx0XHRcblx0XHRmb3IobGV0IGtleSBvZiBrZXlzKXtcblx0XHRcdGxldCBjb21wb25lbnQsXG5cdFx0XHR0YXJnZXQgPSB0YXJnZXRzW2tleV0sXG5cdFx0XHRwcmV2aW91c1RhcmdldCA9IHRoaXMucHJldmlvdXNUYXJnZXRzW2tleV07XG5cdFx0XHRcblx0XHRcdGlmKHByZXZpb3VzVGFyZ2V0ICYmIHByZXZpb3VzVGFyZ2V0LnRhcmdldCA9PT0gdGFyZ2V0KXtcblx0XHRcdFx0Y29tcG9uZW50ID0gcHJldmlvdXNUYXJnZXQuY29tcG9uZW50O1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRzd2l0Y2goa2V5KXtcblx0XHRcdFx0XHRjYXNlIFwicm93XCI6XG5cdFx0XHRcdFx0Y2FzZSBcImdyb3VwXCI6XG5cdFx0XHRcdFx0XHRpZihsaXN0ZW5lci5jb21wb25lbnRzLmluY2x1ZGVzKFwicm93XCIpIHx8IGxpc3RlbmVyLmNvbXBvbmVudHMuaW5jbHVkZXMoXCJjZWxsXCIpIHx8IGxpc3RlbmVyLmNvbXBvbmVudHMuaW5jbHVkZXMoXCJncm91cFwiKSl7XG5cdFx0XHRcdFx0XHRcdGxldCByb3dzID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmdldFZpc2libGVSb3dzKHRydWUpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdGNvbXBvbmVudCA9IHJvd3MuZmluZCgocm93KSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJvdy5nZXRFbGVtZW50KCkgPT09IHRhcmdldDtcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0aWYodGFyZ2V0c1tcInJvd1wiXSAmJiB0YXJnZXRzW1wicm93XCJdLnBhcmVudE5vZGUgJiYgdGFyZ2V0c1tcInJvd1wiXS5wYXJlbnROb2RlLmNsb3Nlc3QoXCIudGFidWxhdG9yLXJvd1wiKSl7XG5cdFx0XHRcdFx0XHRcdFx0dGFyZ2V0c1trZXldID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGNhc2UgXCJjb2x1bW5cIjpcblx0XHRcdFx0XHRcdGlmKGxpc3RlbmVyLmNvbXBvbmVudHMuaW5jbHVkZXMoXCJjb2x1bW5cIikpe1xuXHRcdFx0XHRcdFx0XHRjb21wb25lbnQgPSB0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIuZmluZENvbHVtbih0YXJnZXQpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Y2FzZSBcImNlbGxcIjpcblx0XHRcdFx0XHRcdGlmKGxpc3RlbmVyLmNvbXBvbmVudHMuaW5jbHVkZXMoXCJjZWxsXCIpKXtcblx0XHRcdFx0XHRcdFx0aWYobWF0Y2hlc1tcInJvd1wiXSBpbnN0YW5jZW9mIFJvdyl7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcG9uZW50ID0gbWF0Y2hlc1tcInJvd1wiXS5maW5kQ2VsbCh0YXJnZXQpO1xuXHRcdFx0XHRcdFx0XHR9ZWxzZSB7XHRcblx0XHRcdFx0XHRcdFx0XHRpZih0YXJnZXRzW1wicm93XCJdKXtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUud2FybihcIkV2ZW50IFRhcmdldCBMb29rdXAgRXJyb3IgLSBUaGUgcm93IHRoaXMgY2VsbCBpcyBhdHRhY2hlZCB0byBjYW5ub3QgYmUgZm91bmQsIGhhcyB0aGUgdGFibGUgYmVlbiByZWluaXRpYWxpemVkIHdpdGhvdXQgYmVpbmcgZGVzdHJveWVkIGZpcnN0P1wiKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKGNvbXBvbmVudCl7XG5cdFx0XHRcdG1hdGNoZXNba2V5XSA9IGNvbXBvbmVudDtcblx0XHRcdFx0dGFyZ2V0TWF0Y2hlc1trZXldID0ge1xuXHRcdFx0XHRcdHRhcmdldDp0YXJnZXQsXG5cdFx0XHRcdFx0Y29tcG9uZW50OmNvbXBvbmVudCxcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5wcmV2aW91c1RhcmdldHMgPSB0YXJnZXRNYXRjaGVzO1xuXHRcdFxuXHRcdHJldHVybiBtYXRjaGVzO1xuXHR9XG5cdFxuXHR0cmlnZ2VyRXZlbnRzKHR5cGUsIGUsIHRhcmdldHMpe1xuXHRcdHZhciBsaXN0ZW5lciA9IHRoaXMubGlzdGVuZXJzW3R5cGVdO1xuXG5cdFx0Zm9yKGxldCBrZXkgaW4gdGFyZ2V0cyl7XG5cdFx0XHRpZih0YXJnZXRzW2tleV0gJiYgbGlzdGVuZXIuY29tcG9uZW50cy5pbmNsdWRlcyhrZXkpKXtcblx0XHRcdFx0dGhpcy5kaXNwYXRjaChrZXkgKyBcIi1cIiArIHR5cGUsIGUsIHRhcmdldHNba2V5XSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRjbGVhcldhdGNoZXJzKCl7XG5cdFx0Zm9yKGxldCBrZXkgaW4gdGhpcy5saXN0ZW5lcnMpe1xuXHRcdFx0bGV0IGxpc3RlbmVyID0gdGhpcy5saXN0ZW5lcnNba2V5XTtcblx0XHRcdFxuXHRcdFx0aWYobGlzdGVuZXIuaGFuZGxlcil7XG5cdFx0XHRcdHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihrZXksIGxpc3RlbmVyLmhhbmRsZXIpO1xuXHRcdFx0XHRsaXN0ZW5lci5oYW5kbGVyID0gbnVsbDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuY2xhc3MgQ29tcG9uZW50RnVuY3Rpb25CaW5kZXJ7XG5cblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHRoaXMudGFibGUgPSB0YWJsZTtcblxuXHRcdHRoaXMuYmluZGluZ3MgPSB7fTtcblx0fVxuXG5cdGJpbmQodHlwZSwgZnVuY05hbWUsIGhhbmRsZXIpe1xuXHRcdGlmKCF0aGlzLmJpbmRpbmdzW3R5cGVdKXtcblx0XHRcdHRoaXMuYmluZGluZ3NbdHlwZV0gPSB7fTtcblx0XHR9XG5cblx0XHRpZih0aGlzLmJpbmRpbmdzW3R5cGVdW2Z1bmNOYW1lXSl7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJVbmFibGUgdG8gYmluZCBjb21wb25lbnQgaGFuZGxlciwgYSBtYXRjaGluZyBmdW5jdGlvbiBuYW1lIGlzIGFscmVhZHkgYm91bmRcIiwgdHlwZSwgZnVuY05hbWUsIGhhbmRsZXIpO1xuXHRcdH1lbHNlIHtcblx0XHRcdHRoaXMuYmluZGluZ3NbdHlwZV1bZnVuY05hbWVdID0gaGFuZGxlcjtcblx0XHR9XG5cdH1cblxuXHRoYW5kbGUodHlwZSwgY29tcG9uZW50LCBuYW1lKXtcblx0XHRpZih0aGlzLmJpbmRpbmdzW3R5cGVdICYmIHRoaXMuYmluZGluZ3NbdHlwZV1bbmFtZV0gJiYgdHlwZW9mIHRoaXMuYmluZGluZ3NbdHlwZV1bbmFtZV0uYmluZCA9PT0gJ2Z1bmN0aW9uJyl7XG5cdFx0XHRyZXR1cm4gdGhpcy5iaW5kaW5nc1t0eXBlXVtuYW1lXS5iaW5kKG51bGwsIGNvbXBvbmVudCk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYobmFtZSAhPT0gXCJ0aGVuXCIgJiYgdHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIgJiYgIW5hbWUuc3RhcnRzV2l0aChcIl9cIikpe1xuXHRcdFx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMuZGVidWdJbnZhbGlkQ29tcG9uZW50RnVuY3Mpe1xuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJUaGUgXCIgKyB0eXBlICsgXCIgY29tcG9uZW50IGRvZXMgbm90IGhhdmUgYSBcIiArIG5hbWUgKyBcIiBmdW5jdGlvbiwgaGF2ZSB5b3UgY2hlY2tlZCB0aGF0IHlvdSBoYXZlIHRoZSBjb3JyZWN0IFRhYnVsYXRvciBtb2R1bGUgaW5zdGFsbGVkP1wiKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5jbGFzcyBEYXRhTG9hZGVyIGV4dGVuZHMgQ29yZUZlYXR1cmV7XG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSk7XG5cdFx0XG5cdFx0dGhpcy5yZXF1ZXN0T3JkZXIgPSAwOyAvL3ByZXZlbnQgcmVxdWVzdHMgY29taW5nIG91dCBvZiBzZXF1ZW5jZSBpZiBvdmVycmlkZGVuIGJ5IGFub3RoZXIgbG9hZCByZXF1ZXN0XG5cdFx0dGhpcy5sb2FkaW5nID0gZmFsc2U7XG5cdH1cblx0XG5cdGluaXRpYWxpemUoKXt9XG5cdFxuXHRsb2FkKGRhdGEsIHBhcmFtcywgY29uZmlnLCByZXBsYWNlLCBzaWxlbnQsIGNvbHVtbnNDaGFuZ2VkKXtcblx0XHR2YXIgcmVxdWVzdE5vID0gKyt0aGlzLnJlcXVlc3RPcmRlcjtcblxuXHRcdGlmKHRoaXMudGFibGUuZGVzdHJveWVkKXtcblx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwiZGF0YUxvYWRpbmdcIiwgZGF0YSk7XG5cdFx0XG5cdFx0Ly9wYXJzZSBqc29uIGRhdGEgdG8gYXJyYXlcblx0XHRpZiAoZGF0YSAmJiAoZGF0YS5pbmRleE9mKFwie1wiKSA9PSAwIHx8IGRhdGEuaW5kZXhPZihcIltcIikgPT0gMCkpe1xuXHRcdFx0ZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKHRoaXMuY29uZmlybShcImRhdGEtbG9hZGluZ1wiLCBbZGF0YSwgcGFyYW1zLCBjb25maWcsIHNpbGVudF0pKXtcblx0XHRcdHRoaXMubG9hZGluZyA9IHRydWU7XG5cdFx0XHRcblx0XHRcdGlmKCFzaWxlbnQpe1xuXHRcdFx0XHR0aGlzLmFsZXJ0TG9hZGVyKCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdC8vZ2V0IHBhcmFtcyBmb3IgcmVxdWVzdFxuXHRcdFx0cGFyYW1zID0gdGhpcy5jaGFpbihcImRhdGEtcGFyYW1zXCIsIFtkYXRhLCBjb25maWcsIHNpbGVudF0sIHBhcmFtcyB8fCB7fSwgcGFyYW1zIHx8IHt9KTtcblx0XHRcdFxuXHRcdFx0cGFyYW1zID0gdGhpcy5tYXBQYXJhbXMocGFyYW1zLCB0aGlzLnRhYmxlLm9wdGlvbnMuZGF0YVNlbmRQYXJhbXMpO1xuXHRcdFx0XG5cdFx0XHR2YXIgcmVzdWx0ID0gdGhpcy5jaGFpbihcImRhdGEtbG9hZFwiLCBbZGF0YSwgcGFyYW1zLCBjb25maWcsIHNpbGVudF0sIGZhbHNlLCBQcm9taXNlLnJlc29sdmUoW10pKTtcblx0XHRcdFxuXHRcdFx0cmV0dXJuIHJlc3VsdC50aGVuKChyZXNwb25zZSkgPT4ge1xuXHRcdFx0XHRpZighdGhpcy50YWJsZS5kZXN0cm95ZWQpe1xuXHRcdFx0XHRcdGlmKCFBcnJheS5pc0FycmF5KHJlc3BvbnNlKSAmJiB0eXBlb2YgcmVzcG9uc2UgPT0gXCJvYmplY3RcIil7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IHRoaXMubWFwUGFyYW1zKHJlc3BvbnNlLCB0aGlzLm9iamVjdEludmVydCh0aGlzLnRhYmxlLm9wdGlvbnMuZGF0YVJlY2VpdmVQYXJhbXMpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0dmFyIHJvd0RhdGEgPSB0aGlzLmNoYWluKFwiZGF0YS1sb2FkZWRcIiwgcmVzcG9uc2UsIG51bGwsIHJlc3BvbnNlKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZihyZXF1ZXN0Tm8gPT0gdGhpcy5yZXF1ZXN0T3JkZXIpe1xuXHRcdFx0XHRcdFx0dGhpcy5jbGVhckFsZXJ0KCk7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdGlmKHJvd0RhdGEgIT09IGZhbHNlKXtcblx0XHRcdFx0XHRcdFx0dGhpcy5kaXNwYXRjaEV4dGVybmFsKFwiZGF0YUxvYWRlZFwiLCByb3dEYXRhKTtcblx0XHRcdFx0XHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnNldERhdGEocm93RGF0YSwgIHJlcGxhY2UsIHR5cGVvZiBjb2x1bW5zQ2hhbmdlZCA9PT0gXCJ1bmRlZmluZWRcIiA/ICFyZXBsYWNlIDogY29sdW1uc0NoYW5nZWQpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybihcIkRhdGEgTG9hZCBSZXNwb25zZSBCbG9ja2VkIC0gQW4gYWN0aXZlIGRhdGEgbG9hZCByZXF1ZXN0IHdhcyBibG9ja2VkIGJ5IGFuIGF0dGVtcHQgdG8gY2hhbmdlIHRhYmxlIGRhdGEgd2hpbGUgdGhlIHJlcXVlc3Qgd2FzIGJlaW5nIG1hZGVcIik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiRGF0YSBMb2FkIFJlc3BvbnNlIEJsb2NrZWQgLSBUYWJsZSBoYXMgYmVlbiBkZXN0cm95ZWRcIik7XG5cdFx0XHRcdH1cblx0XHRcdH0pLmNhdGNoKChlcnJvcikgPT4ge1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKFwiRGF0YSBMb2FkIEVycm9yOiBcIiwgZXJyb3IpO1xuXHRcdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJkYXRhTG9hZEVycm9yXCIsIGVycm9yKTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKCFzaWxlbnQpe1xuXHRcdFx0XHRcdHRoaXMuYWxlcnRFcnJvcigpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0XHR0aGlzLmNsZWFyQWxlcnQoKTtcblx0XHRcdFx0fSwgdGhpcy50YWJsZS5vcHRpb25zLmRhdGFMb2FkZXJFcnJvclRpbWVvdXQpO1xuXHRcdFx0fSlcblx0XHRcdFx0LmZpbmFsbHkoKCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMubG9hZGluZyA9IGZhbHNlO1xuXHRcdFx0XHR9KTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJkYXRhTG9hZGVkXCIsIGRhdGEpO1xuXHRcdFx0XG5cdFx0XHRpZighZGF0YSl7XG5cdFx0XHRcdGRhdGEgPSBbXTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy50YWJsZS5yb3dNYW5hZ2VyLnNldERhdGEoZGF0YSwgcmVwbGFjZSwgdHlwZW9mIGNvbHVtbnNDaGFuZ2VkID09PSBcInVuZGVmaW5lZFwiID8gIXJlcGxhY2UgOiBjb2x1bW5zQ2hhbmdlZCk7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cdFx0fVxuXHR9XG5cdFxuXHRtYXBQYXJhbXMocGFyYW1zLCBtYXApe1xuXHRcdHZhciBvdXRwdXQgPSB7fTtcblx0XHRcblx0XHRmb3IobGV0IGtleSBpbiBwYXJhbXMpe1xuXHRcdFx0b3V0cHV0W21hcC5oYXNPd25Qcm9wZXJ0eShrZXkpID8gbWFwW2tleV0gOiBrZXldID0gcGFyYW1zW2tleV07XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblx0XG5cdG9iamVjdEludmVydChvYmope1xuXHRcdHZhciBvdXRwdXQgPSB7fTtcblx0XHRcblx0XHRmb3IobGV0IGtleSBpbiBvYmope1xuXHRcdFx0b3V0cHV0W29ialtrZXldXSA9IGtleTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXHRcblx0YmxvY2tBY3RpdmVMb2FkKCl7XG5cdFx0dGhpcy5yZXF1ZXN0T3JkZXIrKztcblx0fVxuXHRcblx0YWxlcnRMb2FkZXIoKXtcblx0XHR2YXIgc2hvdWxkTG9hZCA9IHR5cGVvZiB0aGlzLnRhYmxlLm9wdGlvbnMuZGF0YUxvYWRlciA9PT0gXCJmdW5jdGlvblwiID8gdGhpcy50YWJsZS5vcHRpb25zLmRhdGFMb2FkZXIoKSA6IHRoaXMudGFibGUub3B0aW9ucy5kYXRhTG9hZGVyO1xuXHRcdFxuXHRcdGlmKHNob3VsZExvYWQpe1xuXHRcdFx0dGhpcy50YWJsZS5hbGVydE1hbmFnZXIuYWxlcnQodGhpcy50YWJsZS5vcHRpb25zLmRhdGFMb2FkZXJMb2FkaW5nIHx8IHRoaXMubGFuZ1RleHQoXCJkYXRhfGxvYWRpbmdcIikpO1xuXHRcdH1cblx0fVxuXHRcblx0YWxlcnRFcnJvcigpe1xuXHRcdHRoaXMudGFibGUuYWxlcnRNYW5hZ2VyLmFsZXJ0KHRoaXMudGFibGUub3B0aW9ucy5kYXRhTG9hZGVyRXJyb3IgfHwgdGhpcy5sYW5nVGV4dChcImRhdGF8ZXJyb3JcIiksIFwiZXJyb3JcIik7XG5cdH1cblx0XG5cdGNsZWFyQWxlcnQoKXtcblx0XHR0aGlzLnRhYmxlLmFsZXJ0TWFuYWdlci5jbGVhcigpO1xuXHR9XG59XG5cbmNsYXNzIEV4dGVybmFsRXZlbnRCdXMge1xuXG5cdGNvbnN0cnVjdG9yKHRhYmxlLCBvcHRpb25zTGlzdCwgZGVidWcpe1xuXHRcdHRoaXMudGFibGUgPSB0YWJsZTtcblx0XHR0aGlzLmV2ZW50cyA9IHt9O1xuXHRcdHRoaXMub3B0aW9uc0xpc3QgPSBvcHRpb25zTGlzdCB8fCB7fTtcblx0XHR0aGlzLnN1YnNjcmlwdGlvbk5vdGlmaWVycyA9IHt9O1xuXG5cdFx0dGhpcy5kaXNwYXRjaCA9IGRlYnVnID8gdGhpcy5fZGVidWdEaXNwYXRjaC5iaW5kKHRoaXMpIDogdGhpcy5fZGlzcGF0Y2guYmluZCh0aGlzKTtcblx0XHR0aGlzLmRlYnVnID0gZGVidWc7XG5cdH1cblxuXHRzdWJzY3JpcHRpb25DaGFuZ2Uoa2V5LCBjYWxsYmFjayl7XG5cdFx0aWYoIXRoaXMuc3Vic2NyaXB0aW9uTm90aWZpZXJzW2tleV0pe1xuXHRcdFx0dGhpcy5zdWJzY3JpcHRpb25Ob3RpZmllcnNba2V5XSA9IFtdO1xuXHRcdH1cblxuXHRcdHRoaXMuc3Vic2NyaXB0aW9uTm90aWZpZXJzW2tleV0ucHVzaChjYWxsYmFjayk7XG5cblx0XHRpZih0aGlzLnN1YnNjcmliZWQoa2V5KSl7XG5cdFx0XHR0aGlzLl9ub3RpZnlTdWJzY3JpcHRpb25DaGFuZ2Uoa2V5LCB0cnVlKTtcblx0XHR9XG5cdH1cblxuXHRzdWJzY3JpYmUoa2V5LCBjYWxsYmFjayl7XG5cdFx0aWYoIXRoaXMuZXZlbnRzW2tleV0pe1xuXHRcdFx0dGhpcy5ldmVudHNba2V5XSA9IFtdO1xuXHRcdH1cblxuXHRcdHRoaXMuZXZlbnRzW2tleV0ucHVzaChjYWxsYmFjayk7XG5cblx0XHR0aGlzLl9ub3RpZnlTdWJzY3JpcHRpb25DaGFuZ2Uoa2V5LCB0cnVlKTtcblx0fVxuXG5cdHVuc3Vic2NyaWJlKGtleSwgY2FsbGJhY2spe1xuXHRcdHZhciBpbmRleDtcblxuXHRcdGlmKHRoaXMuZXZlbnRzW2tleV0pe1xuXHRcdFx0aWYoY2FsbGJhY2spe1xuXHRcdFx0XHRpbmRleCA9IHRoaXMuZXZlbnRzW2tleV0uZmluZEluZGV4KChpdGVtKSA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuIGl0ZW0gPT09IGNhbGxiYWNrO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRpZihpbmRleCA+IC0xKXtcblx0XHRcdFx0XHR0aGlzLmV2ZW50c1trZXldLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJDYW5ub3QgcmVtb3ZlIGV2ZW50LCBubyBtYXRjaGluZyBldmVudCBmb3VuZDpcIiwga2V5LCBjYWxsYmFjayk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmV2ZW50c1trZXldO1xuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkNhbm5vdCByZW1vdmUgZXZlbnQsIG5vIGV2ZW50cyBzZXQgb246XCIsIGtleSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5fbm90aWZ5U3Vic2NyaXB0aW9uQ2hhbmdlKGtleSwgZmFsc2UpO1xuXHR9XG5cblx0c3Vic2NyaWJlZChrZXkpe1xuXHRcdHJldHVybiB0aGlzLmV2ZW50c1trZXldICYmIHRoaXMuZXZlbnRzW2tleV0ubGVuZ3RoO1xuXHR9XG5cblx0X25vdGlmeVN1YnNjcmlwdGlvbkNoYW5nZShrZXksIHN1YnNjcmliZWQpe1xuXHRcdHZhciBub3RpZmllcnMgPSB0aGlzLnN1YnNjcmlwdGlvbk5vdGlmaWVyc1trZXldO1xuXG5cdFx0aWYobm90aWZpZXJzKXtcblx0XHRcdG5vdGlmaWVycy5mb3JFYWNoKChjYWxsYmFjayk9Pntcblx0XHRcdFx0Y2FsbGJhY2soc3Vic2NyaWJlZCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHRfZGlzcGF0Y2goKXtcblx0XHR2YXIgYXJncyA9IEFycmF5LmZyb20oYXJndW1lbnRzKSxcblx0XHRrZXkgPSBhcmdzLnNoaWZ0KCksXG5cdFx0cmVzdWx0O1xuXG5cdFx0aWYodGhpcy5ldmVudHNba2V5XSl7XG5cdFx0XHR0aGlzLmV2ZW50c1trZXldLmZvckVhY2goKGNhbGxiYWNrLCBpKSA9PiB7XG5cdFx0XHRcdGxldCBjYWxsUmVzdWx0ID0gY2FsbGJhY2suYXBwbHkodGhpcy50YWJsZSwgYXJncyk7XG5cblx0XHRcdFx0aWYoIWkpe1xuXHRcdFx0XHRcdHJlc3VsdCA9IGNhbGxSZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRfZGVidWdEaXNwYXRjaCgpe1xuXHRcdHZhciBhcmdzID0gQXJyYXkuZnJvbShhcmd1bWVudHMpLFxuXHRcdGtleSA9IGFyZ3NbMF07XG5cblx0XHRhcmdzWzBdID0gXCJFeHRlcm5hbEV2ZW50OlwiICsgYXJnc1swXTtcblxuXHRcdGlmKHRoaXMuZGVidWcgPT09IHRydWUgfHwgdGhpcy5kZWJ1Zy5pbmNsdWRlcyhrZXkpKXtcblx0XHRcdGNvbnNvbGUubG9nKC4uLmFyZ3MpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLl9kaXNwYXRjaCguLi5hcmd1bWVudHMpO1xuXHR9XG59XG5cbmNsYXNzIEludGVybmFsRXZlbnRCdXMge1xuXG5cdGNvbnN0cnVjdG9yKGRlYnVnKXtcblx0XHR0aGlzLmV2ZW50cyA9IHt9O1xuXHRcdHRoaXMuc3Vic2NyaXB0aW9uTm90aWZpZXJzID0ge307XG5cblx0XHR0aGlzLmRpc3BhdGNoID0gZGVidWcgPyB0aGlzLl9kZWJ1Z0Rpc3BhdGNoLmJpbmQodGhpcykgOiB0aGlzLl9kaXNwYXRjaC5iaW5kKHRoaXMpO1xuXHRcdHRoaXMuY2hhaW4gPSBkZWJ1ZyA/IHRoaXMuX2RlYnVnQ2hhaW4uYmluZCh0aGlzKSA6IHRoaXMuX2NoYWluLmJpbmQodGhpcyk7XG5cdFx0dGhpcy5jb25maXJtID0gZGVidWcgPyB0aGlzLl9kZWJ1Z0NvbmZpcm0uYmluZCh0aGlzKSA6IHRoaXMuX2NvbmZpcm0uYmluZCh0aGlzKTtcblx0XHR0aGlzLmRlYnVnID0gZGVidWc7XG5cdH1cblxuXHRzdWJzY3JpcHRpb25DaGFuZ2Uoa2V5LCBjYWxsYmFjayl7XG5cdFx0aWYoIXRoaXMuc3Vic2NyaXB0aW9uTm90aWZpZXJzW2tleV0pe1xuXHRcdFx0dGhpcy5zdWJzY3JpcHRpb25Ob3RpZmllcnNba2V5XSA9IFtdO1xuXHRcdH1cblxuXHRcdHRoaXMuc3Vic2NyaXB0aW9uTm90aWZpZXJzW2tleV0ucHVzaChjYWxsYmFjayk7XG5cblx0XHRpZih0aGlzLnN1YnNjcmliZWQoa2V5KSl7XG5cdFx0XHR0aGlzLl9ub3RpZnlTdWJzY3JpcHRpb25DaGFuZ2Uoa2V5LCB0cnVlKTtcblx0XHR9XG5cdH1cblxuXHRzdWJzY3JpYmUoa2V5LCBjYWxsYmFjaywgcHJpb3JpdHkgPSAxMDAwMCl7XG5cdFx0aWYoIXRoaXMuZXZlbnRzW2tleV0pe1xuXHRcdFx0dGhpcy5ldmVudHNba2V5XSA9IFtdO1xuXHRcdH1cblxuXHRcdHRoaXMuZXZlbnRzW2tleV0ucHVzaCh7Y2FsbGJhY2ssIHByaW9yaXR5fSk7XG5cblx0XHR0aGlzLmV2ZW50c1trZXldLnNvcnQoKGEsIGIpID0+IHtcblx0XHRcdHJldHVybiBhLnByaW9yaXR5IC0gYi5wcmlvcml0eTtcblx0XHR9KTtcblxuXHRcdHRoaXMuX25vdGlmeVN1YnNjcmlwdGlvbkNoYW5nZShrZXksIHRydWUpO1xuXHR9XG5cblx0dW5zdWJzY3JpYmUoa2V5LCBjYWxsYmFjayl7XG5cdFx0dmFyIGluZGV4O1xuXG5cdFx0aWYodGhpcy5ldmVudHNba2V5XSl7XG5cdFx0XHRpZihjYWxsYmFjayl7XG5cdFx0XHRcdGluZGV4ID0gdGhpcy5ldmVudHNba2V5XS5maW5kSW5kZXgoKGl0ZW0pID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gaXRlbS5jYWxsYmFjayA9PT0gY2FsbGJhY2s7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGlmKGluZGV4ID4gLTEpe1xuXHRcdFx0XHRcdHRoaXMuZXZlbnRzW2tleV0uc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGNvbnNvbGUud2FybihcIkNhbm5vdCByZW1vdmUgZXZlbnQsIG5vIG1hdGNoaW5nIGV2ZW50IGZvdW5kOlwiLCBrZXksIGNhbGxiYWNrKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJDYW5ub3QgcmVtb3ZlIGV2ZW50LCBubyBldmVudHMgc2V0IG9uOlwiLCBrZXkpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMuX25vdGlmeVN1YnNjcmlwdGlvbkNoYW5nZShrZXksIGZhbHNlKTtcblx0fVxuXG5cdHN1YnNjcmliZWQoa2V5KXtcblx0XHRyZXR1cm4gdGhpcy5ldmVudHNba2V5XSAmJiB0aGlzLmV2ZW50c1trZXldLmxlbmd0aDtcblx0fVxuXG5cdF9jaGFpbihrZXksIGFyZ3MsIGluaXRpYWxWYWx1ZSwgZmFsbGJhY2spe1xuXHRcdHZhciB2YWx1ZSA9IGluaXRpYWxWYWx1ZTtcblxuXHRcdGlmKCFBcnJheS5pc0FycmF5KGFyZ3MpKXtcblx0XHRcdGFyZ3MgPSBbYXJnc107XG5cdFx0fVxuXG5cdFx0aWYodGhpcy5zdWJzY3JpYmVkKGtleSkpe1xuXHRcdFx0dGhpcy5ldmVudHNba2V5XS5mb3JFYWNoKChzdWJzY3JpYmVyLCBpKSA9PiB7XG5cdFx0XHRcdHZhbHVlID0gc3Vic2NyaWJlci5jYWxsYmFjay5hcHBseSh0aGlzLCBhcmdzLmNvbmNhdChbdmFsdWVdKSk7XG5cdFx0XHR9KTtcblxuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJldHVybiB0eXBlb2YgZmFsbGJhY2sgPT09IFwiZnVuY3Rpb25cIiA/IGZhbGxiYWNrKCkgOiBmYWxsYmFjaztcblx0XHR9XG5cdH1cblxuXHRfY29uZmlybShrZXksIGFyZ3Mpe1xuXHRcdHZhciBjb25maXJtZWQgPSBmYWxzZTtcblxuXHRcdGlmKCFBcnJheS5pc0FycmF5KGFyZ3MpKXtcblx0XHRcdGFyZ3MgPSBbYXJnc107XG5cdFx0fVxuXG5cdFx0aWYodGhpcy5zdWJzY3JpYmVkKGtleSkpe1xuXHRcdFx0dGhpcy5ldmVudHNba2V5XS5mb3JFYWNoKChzdWJzY3JpYmVyLCBpKSA9PiB7XG5cdFx0XHRcdGlmKHN1YnNjcmliZXIuY2FsbGJhY2suYXBwbHkodGhpcywgYXJncykpe1xuXHRcdFx0XHRcdGNvbmZpcm1lZCA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb25maXJtZWQ7XG5cdH1cblxuXHRfbm90aWZ5U3Vic2NyaXB0aW9uQ2hhbmdlKGtleSwgc3Vic2NyaWJlZCl7XG5cdFx0dmFyIG5vdGlmaWVycyA9IHRoaXMuc3Vic2NyaXB0aW9uTm90aWZpZXJzW2tleV07XG5cblx0XHRpZihub3RpZmllcnMpe1xuXHRcdFx0bm90aWZpZXJzLmZvckVhY2goKGNhbGxiYWNrKT0+e1xuXHRcdFx0XHRjYWxsYmFjayhzdWJzY3JpYmVkKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdF9kaXNwYXRjaCgpe1xuXHRcdHZhciBhcmdzID0gQXJyYXkuZnJvbShhcmd1bWVudHMpLFxuXHRcdGtleSA9IGFyZ3Muc2hpZnQoKTtcblxuXHRcdGlmKHRoaXMuZXZlbnRzW2tleV0pe1xuXHRcdFx0dGhpcy5ldmVudHNba2V5XS5mb3JFYWNoKChzdWJzY3JpYmVyKSA9PiB7XG5cdFx0XHRcdHN1YnNjcmliZXIuY2FsbGJhY2suYXBwbHkodGhpcywgYXJncyk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHRfZGVidWdEaXNwYXRjaCgpe1xuXHRcdHZhciBhcmdzID0gQXJyYXkuZnJvbShhcmd1bWVudHMpLFxuXHRcdGtleSA9IGFyZ3NbMF07XG5cblx0XHRhcmdzWzBdID0gXCJJbnRlcm5hbEV2ZW50OlwiICsga2V5O1xuXG5cdFx0aWYodGhpcy5kZWJ1ZyA9PT0gdHJ1ZSB8fCB0aGlzLmRlYnVnLmluY2x1ZGVzKGtleSkpe1xuXHRcdFx0Y29uc29sZS5sb2coLi4uYXJncyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuX2Rpc3BhdGNoKC4uLmFyZ3VtZW50cyk7XG5cdH1cblxuXHRfZGVidWdDaGFpbigpe1xuXHRcdHZhciBhcmdzID0gQXJyYXkuZnJvbShhcmd1bWVudHMpLFxuXHRcdGtleSA9IGFyZ3NbMF07XG5cblx0XHRhcmdzWzBdID0gXCJJbnRlcm5hbEV2ZW50OlwiICsga2V5O1xuXG5cdFx0aWYodGhpcy5kZWJ1ZyA9PT0gdHJ1ZSB8fCB0aGlzLmRlYnVnLmluY2x1ZGVzKGtleSkpe1xuXHRcdFx0Y29uc29sZS5sb2coLi4uYXJncyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuX2NoYWluKC4uLmFyZ3VtZW50cyk7XG5cdH1cblxuXHRfZGVidWdDb25maXJtKCl7XG5cdFx0dmFyIGFyZ3MgPSBBcnJheS5mcm9tKGFyZ3VtZW50cyksXG5cdFx0a2V5ID0gYXJnc1swXTtcblxuXHRcdGFyZ3NbMF0gPSBcIkludGVybmFsRXZlbnQ6XCIgKyBrZXk7XG5cblx0XHRpZih0aGlzLmRlYnVnID09PSB0cnVlIHx8IHRoaXMuZGVidWcuaW5jbHVkZXMoa2V5KSl7XG5cdFx0XHRjb25zb2xlLmxvZyguLi5hcmdzKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5fY29uZmlybSguLi5hcmd1bWVudHMpO1xuXHR9XG59XG5cbmNsYXNzIERlcHJlY2F0aW9uQWR2aXNvciBleHRlbmRzIENvcmVGZWF0dXJle1xuXHRcblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblx0fVxuXHRcblx0X3dhcm5Vc2VyKCl7XG5cdFx0aWYodGhpcy5vcHRpb25zKFwiZGVidWdEZXByZWNhdGlvblwiKSl7XG5cdFx0XHRjb25zb2xlLndhcm4oLi4uYXJndW1lbnRzKTtcblx0XHR9XG5cdH1cblx0XG5cdGNoZWNrKG9sZE9wdGlvbiwgbmV3T3B0aW9uKXtcblx0XHR2YXIgbXNnID0gXCJcIjtcblx0XHRcblx0XHRpZih0eXBlb2YgdGhpcy5vcHRpb25zKG9sZE9wdGlvbikgIT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0bXNnID0gXCJEZXByZWNhdGVkIFNldHVwIE9wdGlvbiAtIFVzZSBvZiB0aGUgJWNcIiArIG9sZE9wdGlvbiArIFwiJWMgb3B0aW9uIGlzIG5vdyBkZXByZWNhdGVkXCI7XG5cdFx0XHRcblx0XHRcdGlmKG5ld09wdGlvbil7XG5cdFx0XHRcdG1zZyA9IG1zZyArIFwiLCBQbGVhc2UgdXNlIHRoZSAlY1wiICsgbmV3T3B0aW9uICsgXCIlYyBvcHRpb24gaW5zdGVhZFwiO1xuXHRcdFx0XHR0aGlzLl93YXJuVXNlcihtc2csICdmb250LXdlaWdodDogYm9sZDsnLCAnZm9udC13ZWlnaHQ6IG5vcm1hbDsnLCAnZm9udC13ZWlnaHQ6IGJvbGQ7JywgJ2ZvbnQtd2VpZ2h0OiBub3JtYWw7Jyk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMuX3dhcm5Vc2VyKG1zZywgJ2ZvbnQtd2VpZ2h0OiBib2xkOycsICdmb250LXdlaWdodDogbm9ybWFsOycpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fWVsc2Uge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHR9XG5cdFxuXHRjaGVja01zZyhvbGRPcHRpb24sIG1zZyl7XG5cdFx0aWYodHlwZW9mIHRoaXMub3B0aW9ucyhvbGRPcHRpb24pICE9PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdHRoaXMuX3dhcm5Vc2VyKFwiJWNEZXByZWNhdGVkIFNldHVwIE9wdGlvbiAtIFVzZSBvZiB0aGUgJWNcIiArIG9sZE9wdGlvbiArIFwiICVjIG9wdGlvbiBpcyBub3cgZGVwcmVjYXRlZCwgXCIgKyBtc2csICdmb250LXdlaWdodDogbm9ybWFsOycsICdmb250LXdlaWdodDogYm9sZDsnLCAnZm9udC13ZWlnaHQ6IG5vcm1hbDsnKTtcblx0XHRcdFxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0fVxuXHRcblx0bXNnKG1zZyl7XG5cdFx0dGhpcy5fd2FyblVzZXIobXNnKTtcblx0fVxufVxuXG5jbGFzcyBUYWJsZVJlZ2lzdHJ5IHtcblxuXHRzdGF0aWMgcmVnaXN0ZXIodGFibGUpe1xuXHRcdFRhYmxlUmVnaXN0cnkudGFibGVzLnB1c2godGFibGUpO1xuXHR9XG5cblx0c3RhdGljIGRlcmVnaXN0ZXIodGFibGUpe1xuXHRcdHZhciBpbmRleCA9IFRhYmxlUmVnaXN0cnkudGFibGVzLmluZGV4T2YodGFibGUpO1xuXG5cdFx0aWYoaW5kZXggPiAtMSl7XG5cdFx0XHRUYWJsZVJlZ2lzdHJ5LnRhYmxlcy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdH1cblx0fVxuXG5cdHN0YXRpYyBsb29rdXBUYWJsZShxdWVyeSwgc2lsZW50KXtcblx0XHR2YXIgcmVzdWx0cyA9IFtdLFxuXHRcdG1hdGNoZXMsIG1hdGNoO1xuXG5cdFx0aWYodHlwZW9mIHF1ZXJ5ID09PSBcInN0cmluZ1wiKXtcblx0XHRcdG1hdGNoZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHF1ZXJ5KTtcblxuXHRcdFx0aWYobWF0Y2hlcy5sZW5ndGgpe1xuXHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbWF0Y2hlcy5sZW5ndGg7IGkrKyl7XG5cdFx0XHRcdFx0bWF0Y2ggPSBUYWJsZVJlZ2lzdHJ5Lm1hdGNoRWxlbWVudChtYXRjaGVzW2ldKTtcblxuXHRcdFx0XHRcdGlmKG1hdGNoKXtcblx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaChtYXRjaCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHR9ZWxzZSBpZigodHlwZW9mIEhUTUxFbGVtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIHF1ZXJ5IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHx8IHF1ZXJ5IGluc3RhbmNlb2YgVGFidWxhdG9yKXtcblx0XHRcdG1hdGNoID0gVGFibGVSZWdpc3RyeS5tYXRjaEVsZW1lbnQocXVlcnkpO1xuXG5cdFx0XHRpZihtYXRjaCl7XG5cdFx0XHRcdHJlc3VsdHMucHVzaChtYXRjaCk7XG5cdFx0XHR9XG5cdFx0fWVsc2UgaWYoQXJyYXkuaXNBcnJheShxdWVyeSkpe1xuXHRcdFx0cXVlcnkuZm9yRWFjaChmdW5jdGlvbihpdGVtKXtcblx0XHRcdFx0cmVzdWx0cyA9IHJlc3VsdHMuY29uY2F0KFRhYmxlUmVnaXN0cnkubG9va3VwVGFibGUoaXRlbSkpO1xuXHRcdFx0fSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0aWYoIXNpbGVudCl7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIlRhYmxlIENvbm5lY3Rpb24gRXJyb3IgLSBJbnZhbGlkIFNlbGVjdG9yXCIsIHF1ZXJ5KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdHN0YXRpYyBtYXRjaEVsZW1lbnQoZWxlbWVudCl7XG5cdFx0cmV0dXJuIFRhYmxlUmVnaXN0cnkudGFibGVzLmZpbmQoZnVuY3Rpb24odGFibGUpe1xuXHRcdFx0cmV0dXJuIGVsZW1lbnQgaW5zdGFuY2VvZiBUYWJ1bGF0b3IgPyB0YWJsZSA9PT0gZWxlbWVudCA6IHRhYmxlLmVsZW1lbnQgPT09IGVsZW1lbnQ7XG5cdFx0fSk7XG5cdH1cbn1cblxuVGFibGVSZWdpc3RyeS50YWJsZXMgPSBbXTtcblxuLy9yZXNpemUgY29sdW1ucyB0byBmaXQgZGF0YSB0aGV5IGNvbnRhaW5cbmZ1bmN0aW9uIGZpdERhdGEoY29sdW1ucywgZm9yY2VkKXtcblx0aWYoZm9yY2VkKXtcblx0XHR0aGlzLnRhYmxlLmNvbHVtbk1hbmFnZXIucmVuZGVyZXIucmVpbml0aWFsaXplQ29sdW1uV2lkdGhzKGNvbHVtbnMpO1xuXHR9XG5cdFxuXHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucmVzcG9uc2l2ZUxheW91dCAmJiB0aGlzLnRhYmxlLm1vZEV4aXN0cyhcInJlc3BvbnNpdmVMYXlvdXRcIiwgdHJ1ZSkpe1xuXHRcdHRoaXMudGFibGUubW9kdWxlcy5yZXNwb25zaXZlTGF5b3V0LnVwZGF0ZSgpO1xuXHR9XG59XG5cbi8vcmVzaXplIGNvbHVtbnMgdG8gZml0IGRhdGEgdGhleSBjb250YWluIGFuZCBzdHJldGNoIHJvdyB0byBmaWxsIHRhYmxlLCBhbHNvIHVzZWQgZm9yIGZpdERhdGFUYWJsZVxuZnVuY3Rpb24gZml0RGF0YUdlbmVyYWwoY29sdW1ucywgZm9yY2VkKXtcblx0Y29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uKGNvbHVtbil7XG5cdFx0Y29sdW1uLnJlaW5pdGlhbGl6ZVdpZHRoKCk7XG5cdH0pO1xuXG5cdGlmKHRoaXMudGFibGUub3B0aW9ucy5yZXNwb25zaXZlTGF5b3V0ICYmIHRoaXMudGFibGUubW9kRXhpc3RzKFwicmVzcG9uc2l2ZUxheW91dFwiLCB0cnVlKSl7XG5cdFx0dGhpcy50YWJsZS5tb2R1bGVzLnJlc3BvbnNpdmVMYXlvdXQudXBkYXRlKCk7XG5cdH1cbn1cblxuLy9yZXNpemUgY29sdW1ucyB0byBmaXQgZGF0YSB0aGUgY29udGFpbiBhbmQgc3RyZXRjaCBsYXN0IGNvbHVtbiB0byBmaWxsIHRhYmxlXG5mdW5jdGlvbiBmaXREYXRhU3RyZXRjaChjb2x1bW5zLCBmb3JjZWQpe1xuXHR2YXIgY29sc1dpZHRoID0gMCxcblx0dGFibGVXaWR0aCA9IHRoaXMudGFibGUucm93TWFuYWdlci5lbGVtZW50LmNsaWVudFdpZHRoLFxuXHRnYXAgPSAwLFxuXHRsYXN0Q29sID0gZmFsc2U7XG5cblx0Y29sdW1ucy5mb3JFYWNoKChjb2x1bW4sIGkpID0+IHtcblx0XHRpZighY29sdW1uLndpZHRoRml4ZWQpe1xuXHRcdFx0Y29sdW1uLnJlaW5pdGlhbGl6ZVdpZHRoKCk7XG5cdFx0fVxuXG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLnJlc3BvbnNpdmVMYXlvdXQgPyBjb2x1bW4ubW9kdWxlcy5yZXNwb25zaXZlLnZpc2libGUgOiBjb2x1bW4udmlzaWJsZSl7XG5cdFx0XHRsYXN0Q29sID0gY29sdW1uO1xuXHRcdH1cblxuXHRcdGlmKGNvbHVtbi52aXNpYmxlKXtcblx0XHRcdGNvbHNXaWR0aCArPSBjb2x1bW4uZ2V0V2lkdGgoKTtcblx0XHR9XG5cdH0pO1xuXG5cdGlmKGxhc3RDb2wpe1xuXHRcdGdhcCA9IHRhYmxlV2lkdGggLSBjb2xzV2lkdGggKyBsYXN0Q29sLmdldFdpZHRoKCk7XG5cblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucmVzcG9uc2l2ZUxheW91dCAmJiB0aGlzLnRhYmxlLm1vZEV4aXN0cyhcInJlc3BvbnNpdmVMYXlvdXRcIiwgdHJ1ZSkpe1xuXHRcdFx0bGFzdENvbC5zZXRXaWR0aCgwKTtcblx0XHRcdHRoaXMudGFibGUubW9kdWxlcy5yZXNwb25zaXZlTGF5b3V0LnVwZGF0ZSgpO1xuXHRcdH1cblxuXHRcdGlmKGdhcCA+IDApe1xuXHRcdFx0bGFzdENvbC5zZXRXaWR0aChnYXApO1xuXHRcdH1lbHNlIHtcblx0XHRcdGxhc3RDb2wucmVpbml0aWFsaXplV2lkdGgoKTtcblx0XHR9XG5cdH1lbHNlIHtcblx0XHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucmVzcG9uc2l2ZUxheW91dCAmJiB0aGlzLnRhYmxlLm1vZEV4aXN0cyhcInJlc3BvbnNpdmVMYXlvdXRcIiwgdHJ1ZSkpe1xuXHRcdFx0dGhpcy50YWJsZS5tb2R1bGVzLnJlc3BvbnNpdmVMYXlvdXQudXBkYXRlKCk7XG5cdFx0fVxuXHR9XG59XG5cbi8vcmVzaXplIGNvbHVtbnMgdG8gZml0XG5mdW5jdGlvbiBmaXRDb2x1bW5zKGNvbHVtbnMsIGZvcmNlZCl7XG5cdHZhciB0b3RhbFdpZHRoID0gdGhpcy50YWJsZS5yb3dNYW5hZ2VyLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7IC8vdGFibGUgZWxlbWVudCB3aWR0aFxuXHR2YXIgZml4ZWRXaWR0aCA9IDA7IC8vdG90YWwgd2lkdGggb2YgY29sdW1ucyB3aXRoIGEgZGVmaW5lZCB3aWR0aFxuXHR2YXIgZmxleFdpZHRoID0gMDsgLy90b3RhbCB3aWR0aCBhdmFpbGFibGUgdG8gZmxleGlibGUgY29sdW1uc1xuXHR2YXIgZmxleEdyb3dVbml0cyA9IDA7IC8vdG90YWwgbnVtYmVyIG9mIHdpZHRoR3JvdyBibG9ja3MgYWNyb3NzIGFsbCBjb2x1bW5zXG5cdHZhciBmbGV4Q29sV2lkdGggPSAwOyAvL2Rlc2lyZWQgd2lkdGggb2YgZmxleGlibGUgY29sdW1uc1xuXHR2YXIgZmxleENvbHVtbnMgPSBbXTsgLy9hcnJheSBvZiBmbGV4aWJsZSB3aWR0aCBjb2x1bW5zXG5cdHZhciBmaXhlZFNocmlua0NvbHVtbnMgPSBbXTsgLy9hcnJheSBvZiBmaXhlZCB3aWR0aCBjb2x1bW5zIHRoYXQgY2FuIHNocmlua1xuXHR2YXIgZmxleFNocmlua1VuaXRzID0gMDsgLy90b3RhbCBudW1iZXIgb2Ygd2lkdGhTaHJpbmsgYmxvY2tzIGFjcm9zcyBhbGwgY29sdW1uc1xuXHR2YXIgb3ZlcmZsb3dXaWR0aCA9IDA7IC8vaG9yaXpvbnRhbCBvdmVyZmxvdyB3aWR0aFxuXHR2YXIgZ2FwRmlsbCA9IDA7IC8vbnVtYmVyIG9mIHBpeGVscyB0byBiZSBhZGRlZCB0byBmaW5hbCBjb2x1bW4gdG8gY2xvc2UgYW5kIGhhbGYgcGl4ZWwgZ2Fwc1xuXG5cdGZ1bmN0aW9uIGNhbGNXaWR0aCh3aWR0aCl7XG5cdFx0dmFyIGNvbFdpZHRoO1xuXG5cdFx0aWYodHlwZW9mKHdpZHRoKSA9PSBcInN0cmluZ1wiKXtcblx0XHRcdGlmKHdpZHRoLmluZGV4T2YoXCIlXCIpID4gLTEpe1xuXHRcdFx0XHRjb2xXaWR0aCA9ICh0b3RhbFdpZHRoIC8gMTAwKSAqIHBhcnNlSW50KHdpZHRoKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0Y29sV2lkdGggPSBwYXJzZUludCh3aWR0aCk7XG5cdFx0XHR9XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29sV2lkdGggPSB3aWR0aDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29sV2lkdGg7XG5cdH1cblxuXHQvL2Vuc3VyZSBjb2x1bW5zIHJlc2l6ZSB0byB0YWtlIHVwIHRoZSBjb3JyZWN0IGFtb3VudCBvZiBzcGFjZVxuXHRmdW5jdGlvbiBzY2FsZUNvbHVtbnMoY29sdW1ucywgZnJlZVNwYWNlLCBjb2xXaWR0aCwgc2hyaW5rQ29scyl7XG5cdFx0dmFyIG92ZXJzaXplQ29scyA9IFtdLFxuXHRcdG92ZXJzaXplU3BhY2UgPSAwLFxuXHRcdHJlbWFpbmluZ1NwYWNlID0gMCxcblx0XHRuZXh0Q29sV2lkdGggPSAwLFxuXHRcdHJlbWFpbmluZ0ZsZXhHcm93VW5pdHMgPSBmbGV4R3Jvd1VuaXRzLFxuXHRcdGdhcCA9IDAsXG5cdFx0Y2hhbmdlVW5pdHMgPSAwLFxuXHRcdHVuZGVyc2l6ZUNvbHMgPSBbXTtcblxuXHRcdGZ1bmN0aW9uIGNhbGNHcm93KGNvbCl7XG5cdFx0XHRyZXR1cm4gKGNvbFdpZHRoICogKGNvbC5jb2x1bW4uZGVmaW5pdGlvbi53aWR0aEdyb3cgfHwgMSkpO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGNhbGNTaHJpbmsoY29sKXtcblx0XHRcdHJldHVybiAgKGNhbGNXaWR0aChjb2wud2lkdGgpIC0gKGNvbFdpZHRoICogKGNvbC5jb2x1bW4uZGVmaW5pdGlvbi53aWR0aFNocmluayB8fCAwKSkpO1xuXHRcdH1cblxuXHRcdGNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihjb2wsIGkpe1xuXHRcdFx0dmFyIHdpZHRoID0gc2hyaW5rQ29scyA/IGNhbGNTaHJpbmsoY29sKSA6IGNhbGNHcm93KGNvbCk7XG5cdFx0XHRpZihjb2wuY29sdW1uLm1pbldpZHRoID49IHdpZHRoKXtcblx0XHRcdFx0b3ZlcnNpemVDb2xzLnB1c2goY29sKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0aWYoY29sLmNvbHVtbi5tYXhXaWR0aCAmJiBjb2wuY29sdW1uLm1heFdpZHRoIDwgd2lkdGgpe1xuXHRcdFx0XHRcdGNvbC53aWR0aCA9IGNvbC5jb2x1bW4ubWF4V2lkdGg7XG5cdFx0XHRcdFx0ZnJlZVNwYWNlIC09IGNvbC5jb2x1bW4ubWF4V2lkdGg7XG5cblx0XHRcdFx0XHRyZW1haW5pbmdGbGV4R3Jvd1VuaXRzIC09IHNocmlua0NvbHMgPyAoY29sLmNvbHVtbi5kZWZpbml0aW9uLndpZHRoU2hyaW5rIHx8IDEpIDogKGNvbC5jb2x1bW4uZGVmaW5pdGlvbi53aWR0aEdyb3cgfHwgMSk7XG5cblx0XHRcdFx0XHRpZihyZW1haW5pbmdGbGV4R3Jvd1VuaXRzKXtcblx0XHRcdFx0XHRcdGNvbFdpZHRoID0gTWF0aC5mbG9vcihmcmVlU3BhY2UvcmVtYWluaW5nRmxleEdyb3dVbml0cyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0dW5kZXJzaXplQ29scy5wdXNoKGNvbCk7XG5cdFx0XHRcdFx0Y2hhbmdlVW5pdHMgKz0gc2hyaW5rQ29scyA/IChjb2wuY29sdW1uLmRlZmluaXRpb24ud2lkdGhTaHJpbmsgfHwgMSkgOiAoY29sLmNvbHVtbi5kZWZpbml0aW9uLndpZHRoR3JvdyB8fCAxKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0aWYob3ZlcnNpemVDb2xzLmxlbmd0aCl7XG5cdFx0XHRvdmVyc2l6ZUNvbHMuZm9yRWFjaChmdW5jdGlvbihjb2wpe1xuXHRcdFx0XHRvdmVyc2l6ZVNwYWNlICs9IHNocmlua0NvbHMgPyAgY29sLndpZHRoIC0gY29sLmNvbHVtbi5taW5XaWR0aCA6IGNvbC5jb2x1bW4ubWluV2lkdGg7XG5cdFx0XHRcdGNvbC53aWR0aCA9IGNvbC5jb2x1bW4ubWluV2lkdGg7XG5cdFx0XHR9KTtcblxuXHRcdFx0cmVtYWluaW5nU3BhY2UgPSBmcmVlU3BhY2UgLSBvdmVyc2l6ZVNwYWNlO1xuXG5cdFx0XHRuZXh0Q29sV2lkdGggPSBjaGFuZ2VVbml0cyA/IE1hdGguZmxvb3IocmVtYWluaW5nU3BhY2UvY2hhbmdlVW5pdHMpIDogcmVtYWluaW5nU3BhY2U7XG5cblx0XHRcdGdhcCA9IHNjYWxlQ29sdW1ucyh1bmRlcnNpemVDb2xzLCByZW1haW5pbmdTcGFjZSwgbmV4dENvbFdpZHRoLCBzaHJpbmtDb2xzKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRnYXAgPSBjaGFuZ2VVbml0cyA/IGZyZWVTcGFjZSAtIChNYXRoLmZsb29yKGZyZWVTcGFjZS9jaGFuZ2VVbml0cykgKiBjaGFuZ2VVbml0cykgOiBmcmVlU3BhY2U7XG5cblx0XHRcdHVuZGVyc2l6ZUNvbHMuZm9yRWFjaChmdW5jdGlvbihjb2x1bW4pe1xuXHRcdFx0XHRjb2x1bW4ud2lkdGggPSBzaHJpbmtDb2xzID8gY2FsY1Nocmluayhjb2x1bW4pIDogY2FsY0dyb3coY29sdW1uKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBnYXA7XG5cdH1cblxuXHRpZih0aGlzLnRhYmxlLm9wdGlvbnMucmVzcG9uc2l2ZUxheW91dCAmJiB0aGlzLnRhYmxlLm1vZEV4aXN0cyhcInJlc3BvbnNpdmVMYXlvdXRcIiwgdHJ1ZSkpe1xuXHRcdHRoaXMudGFibGUubW9kdWxlcy5yZXNwb25zaXZlTGF5b3V0LnVwZGF0ZSgpO1xuXHR9XG5cblx0Ly9hZGp1c3QgZm9yIHZlcnRpY2FsIHNjcm9sbGJhciBpZiBwcmVzZW50XG5cdGlmKHRoaXMudGFibGUucm93TWFuYWdlci5lbGVtZW50LnNjcm9sbEhlaWdodCA+IHRoaXMudGFibGUucm93TWFuYWdlci5lbGVtZW50LmNsaWVudEhlaWdodCl7XG5cdFx0dG90YWxXaWR0aCAtPSB0aGlzLnRhYmxlLnJvd01hbmFnZXIuZWxlbWVudC5vZmZzZXRXaWR0aCAtIHRoaXMudGFibGUucm93TWFuYWdlci5lbGVtZW50LmNsaWVudFdpZHRoO1xuXHR9XG5cblx0Y29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uKGNvbHVtbil7XG5cdFx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgY29sV2lkdGg7XG5cblx0XHRpZihjb2x1bW4udmlzaWJsZSl7XG5cblx0XHRcdHdpZHRoID0gY29sdW1uLmRlZmluaXRpb24ud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9ICBwYXJzZUludChjb2x1bW4ubWluV2lkdGgpO1xuXG5cdFx0XHRpZih3aWR0aCl7XG5cblx0XHRcdFx0Y29sV2lkdGggPSBjYWxjV2lkdGgod2lkdGgpO1xuXG5cdFx0XHRcdGZpeGVkV2lkdGggKz0gY29sV2lkdGggPiBtaW5XaWR0aCA/IGNvbFdpZHRoIDogbWluV2lkdGg7XG5cblx0XHRcdFx0aWYoY29sdW1uLmRlZmluaXRpb24ud2lkdGhTaHJpbmspe1xuXHRcdFx0XHRcdGZpeGVkU2hyaW5rQ29sdW1ucy5wdXNoKHtcblx0XHRcdFx0XHRcdGNvbHVtbjpjb2x1bW4sXG5cdFx0XHRcdFx0XHR3aWR0aDpjb2xXaWR0aCA+IG1pbldpZHRoID8gY29sV2lkdGggOiBtaW5XaWR0aFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdGZsZXhTaHJpbmtVbml0cyArPSBjb2x1bW4uZGVmaW5pdGlvbi53aWR0aFNocmluaztcblx0XHRcdFx0fVxuXG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGZsZXhDb2x1bW5zLnB1c2goe1xuXHRcdFx0XHRcdGNvbHVtbjpjb2x1bW4sXG5cdFx0XHRcdFx0d2lkdGg6MCxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGZsZXhHcm93VW5pdHMgKz0gY29sdW1uLmRlZmluaXRpb24ud2lkdGhHcm93IHx8IDE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHQvL2NhbGN1bGF0ZSBhdmFpbGFibGUgc3BhY2Vcblx0ZmxleFdpZHRoID0gdG90YWxXaWR0aCAtIGZpeGVkV2lkdGg7XG5cblx0Ly9jYWxjdWxhdGUgY29ycmVjdCBjb2x1bW4gc2l6ZVxuXHRmbGV4Q29sV2lkdGggPSBNYXRoLmZsb29yKGZsZXhXaWR0aCAvIGZsZXhHcm93VW5pdHMpO1xuXG5cdC8vZ2VuZXJhdGUgY29sdW1uIHdpZHRoc1xuXHRnYXBGaWxsID0gc2NhbGVDb2x1bW5zKGZsZXhDb2x1bW5zLCBmbGV4V2lkdGgsIGZsZXhDb2xXaWR0aCwgZmFsc2UpO1xuXG5cdC8vaW5jcmVhc2Ugd2lkdGggb2YgbGFzdCBjb2x1bW4gdG8gYWNjb3VudCBmb3Igcm91bmRpbmcgZXJyb3JzXG5cdGlmKGZsZXhDb2x1bW5zLmxlbmd0aCAmJiBnYXBGaWxsID4gMCl7XG5cdFx0ZmxleENvbHVtbnNbZmxleENvbHVtbnMubGVuZ3RoLTFdLndpZHRoICs9IGdhcEZpbGw7XG5cdH1cblxuXHQvL2NhbGN1bGF0ZSBzcGFjZSBmb3IgY29sdW1ucyB0byBiZSBzaHJ1bmsgaW50b1xuXHRmbGV4Q29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uKGNvbCl7XG5cdFx0ZmxleFdpZHRoIC09IGNvbC53aWR0aDtcblx0fSk7XG5cblx0b3ZlcmZsb3dXaWR0aCA9IE1hdGguYWJzKGdhcEZpbGwpICsgZmxleFdpZHRoO1xuXG5cdC8vc2hyaW5rIG92ZXJzaXplIGNvbHVtbnMgaWYgdGhlcmUgaXMgbm8gYXZhaWxhYmxlIHNwYWNlXG5cdGlmKG92ZXJmbG93V2lkdGggPiAwICYmIGZsZXhTaHJpbmtVbml0cyl7XG5cdFx0Z2FwRmlsbCA9IHNjYWxlQ29sdW1ucyhmaXhlZFNocmlua0NvbHVtbnMsIG92ZXJmbG93V2lkdGgsIE1hdGguZmxvb3Iob3ZlcmZsb3dXaWR0aCAvIGZsZXhTaHJpbmtVbml0cyksIHRydWUpO1xuXHR9XG5cblx0Ly9kZWNyZWFzZSB3aWR0aCBvZiBsYXN0IGNvbHVtbiB0byBhY2NvdW50IGZvciByb3VuZGluZyBlcnJvcnNcblx0aWYoZ2FwRmlsbCAmJiBmaXhlZFNocmlua0NvbHVtbnMubGVuZ3RoKXtcblx0XHRmaXhlZFNocmlua0NvbHVtbnNbZml4ZWRTaHJpbmtDb2x1bW5zLmxlbmd0aC0xXS53aWR0aCAtPSBnYXBGaWxsO1xuXHR9XG5cblx0ZmxleENvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihjb2wpe1xuXHRcdGNvbC5jb2x1bW4uc2V0V2lkdGgoY29sLndpZHRoKTtcblx0fSk7XG5cblx0Zml4ZWRTaHJpbmtDb2x1bW5zLmZvckVhY2goZnVuY3Rpb24oY29sKXtcblx0XHRjb2wuY29sdW1uLnNldFdpZHRoKGNvbC53aWR0aCk7XG5cdH0pO1xufVxuXG52YXIgZGVmYXVsdE1vZGVzID0ge1xuXHRmaXREYXRhOmZpdERhdGEsXG5cdGZpdERhdGFGaWxsOmZpdERhdGFHZW5lcmFsLFxuXHRmaXREYXRhVGFibGU6Zml0RGF0YUdlbmVyYWwsXG5cdGZpdERhdGFTdHJldGNoOmZpdERhdGFTdHJldGNoLFxuXHRmaXRDb2x1bW5zOmZpdENvbHVtbnMgLFxufTtcblxuY2xhc3MgTGF5b3V0IGV4dGVuZHMgTW9kdWxle1xuXG5cdGNvbnN0cnVjdG9yKHRhYmxlKXtcblx0XHRzdXBlcih0YWJsZSwgXCJsYXlvdXRcIik7XG5cblx0XHR0aGlzLm1vZGUgPSBudWxsO1xuXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwibGF5b3V0XCIsIFwiZml0RGF0YVwiKTsgLy9sYXlvdXQgdHlwZVxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImxheW91dENvbHVtbnNPbk5ld0RhdGFcIiwgZmFsc2UpOyAvL3VwZGF0ZSBjb2x1bW4gd2lkdGhzIG9uIHNldERhdGFcblxuXHRcdHRoaXMucmVnaXN0ZXJDb2x1bW5PcHRpb24oXCJ3aWR0aEdyb3dcIik7XG5cdFx0dGhpcy5yZWdpc3RlckNvbHVtbk9wdGlvbihcIndpZHRoU2hyaW5rXCIpO1xuXHR9XG5cblx0Ly9pbml0aWFsaXplIGxheW91dCBzeXN0ZW1cblx0aW5pdGlhbGl6ZSgpe1xuXHRcdHZhciBsYXlvdXQgPSB0aGlzLnRhYmxlLm9wdGlvbnMubGF5b3V0O1xuXG5cdFx0aWYoTGF5b3V0Lm1vZGVzW2xheW91dF0pe1xuXHRcdFx0dGhpcy5tb2RlID0gbGF5b3V0O1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkxheW91dCBFcnJvciAtIGludmFsaWQgbW9kZSBzZXQsIGRlZmF1bHRpbmcgdG8gJ2ZpdERhdGEnIDogXCIgKyBsYXlvdXQpO1xuXHRcdFx0dGhpcy5tb2RlID0gJ2ZpdERhdGEnO1xuXHRcdH1cblxuXHRcdHRoaXMudGFibGUuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJ0YWJ1bGF0b3ItbGF5b3V0XCIsIHRoaXMubW9kZSk7XG5cdFx0dGhpcy5zdWJzY3JpYmUoXCJjb2x1bW4taW5pdFwiLCB0aGlzLmluaXRpYWxpemVDb2x1bW4uYmluZCh0aGlzKSk7XG5cdH1cblxuXHRpbml0aWFsaXplQ29sdW1uKGNvbHVtbil7XG5cdFx0aWYoY29sdW1uLmRlZmluaXRpb24ud2lkdGhHcm93KXtcblx0XHRcdGNvbHVtbi5kZWZpbml0aW9uLndpZHRoR3JvdyA9IE51bWJlcihjb2x1bW4uZGVmaW5pdGlvbi53aWR0aEdyb3cpO1xuXHRcdH1cblx0XHRpZihjb2x1bW4uZGVmaW5pdGlvbi53aWR0aFNocmluayl7XG5cdFx0XHRjb2x1bW4uZGVmaW5pdGlvbi53aWR0aFNocmluayA9IE51bWJlcihjb2x1bW4uZGVmaW5pdGlvbi53aWR0aFNocmluayk7XG5cdFx0fVxuXHR9XG5cblx0Z2V0TW9kZSgpe1xuXHRcdHJldHVybiB0aGlzLm1vZGU7XG5cdH1cblxuXHQvL3RyaWdnZXIgdGFibGUgbGF5b3V0XG5cdGxheW91dChkYXRhQ2hhbmdlZCl7XG5cdFx0dGhpcy5kaXNwYXRjaChcImxheW91dC1yZWZyZXNoaW5nXCIpO1xuXHRcdExheW91dC5tb2Rlc1t0aGlzLm1vZGVdLmNhbGwodGhpcywgdGhpcy50YWJsZS5jb2x1bW5NYW5hZ2VyLmNvbHVtbnNCeUluZGV4LCBkYXRhQ2hhbmdlZCk7XG5cdFx0dGhpcy5kaXNwYXRjaChcImxheW91dC1yZWZyZXNoZWRcIik7XG5cdH1cbn1cblxuTGF5b3V0Lm1vZHVsZU5hbWUgPSBcImxheW91dFwiO1xuXG4vL2xvYWQgZGVmYXVsdHNcbkxheW91dC5tb2RlcyA9IGRlZmF1bHRNb2RlcztcblxudmFyIGRlZmF1bHRMYW5ncyA9IHtcblx0XCJkZWZhdWx0XCI6eyAvL2hvbGQgZGVmYXVsdCBsb2NhbGUgdGV4dFxuXHRcdFwiZ3JvdXBzXCI6e1xuXHRcdFx0XCJpdGVtXCI6XCJpdGVtXCIsXG5cdFx0XHRcIml0ZW1zXCI6XCJpdGVtc1wiLFxuXHRcdH0sXG5cdFx0XCJjb2x1bW5zXCI6e1xuXHRcdH0sXG5cdFx0XCJkYXRhXCI6e1xuXHRcdFx0XCJsb2FkaW5nXCI6XCJMb2FkaW5nXCIsXG5cdFx0XHRcImVycm9yXCI6XCJFcnJvclwiLFxuXHRcdH0sXG5cdFx0XCJwYWdpbmF0aW9uXCI6e1xuXHRcdFx0XCJwYWdlX3NpemVcIjpcIlBhZ2UgU2l6ZVwiLFxuXHRcdFx0XCJwYWdlX3RpdGxlXCI6XCJTaG93IFBhZ2VcIixcblx0XHRcdFwiZmlyc3RcIjpcIkZpcnN0XCIsXG5cdFx0XHRcImZpcnN0X3RpdGxlXCI6XCJGaXJzdCBQYWdlXCIsXG5cdFx0XHRcImxhc3RcIjpcIkxhc3RcIixcblx0XHRcdFwibGFzdF90aXRsZVwiOlwiTGFzdCBQYWdlXCIsXG5cdFx0XHRcInByZXZcIjpcIlByZXZcIixcblx0XHRcdFwicHJldl90aXRsZVwiOlwiUHJldiBQYWdlXCIsXG5cdFx0XHRcIm5leHRcIjpcIk5leHRcIixcblx0XHRcdFwibmV4dF90aXRsZVwiOlwiTmV4dCBQYWdlXCIsXG5cdFx0XHRcImFsbFwiOlwiQWxsXCIsXG5cdFx0XHRcImNvdW50ZXJcIjp7XG5cdFx0XHRcdFwic2hvd2luZ1wiOiBcIlNob3dpbmdcIixcblx0XHRcdFx0XCJvZlwiOiBcIm9mXCIsXG5cdFx0XHRcdFwicm93c1wiOiBcInJvd3NcIixcblx0XHRcdFx0XCJwYWdlc1wiOiBcInBhZ2VzXCIsXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcImhlYWRlckZpbHRlcnNcIjp7XG5cdFx0XHRcImRlZmF1bHRcIjpcImZpbHRlciBjb2x1bW4uLi5cIixcblx0XHRcdFwiY29sdW1uc1wiOnt9XG5cdFx0fVxuXHR9LFxufTtcblxuY2xhc3MgTG9jYWxpemUgZXh0ZW5kcyBNb2R1bGV7XG5cblx0Y29uc3RydWN0b3IodGFibGUpe1xuXHRcdHN1cGVyKHRhYmxlKTtcblxuXHRcdHRoaXMubG9jYWxlID0gXCJkZWZhdWx0XCI7IC8vY3VycmVudCBsb2NhbGVcblx0XHR0aGlzLmxhbmcgPSBmYWxzZTsgLy9jdXJyZW50IGxhbmd1YWdlXG5cdFx0dGhpcy5iaW5kaW5ncyA9IHt9OyAvL3VwZGF0ZSBldmVudHMgdG8gY2FsbCB3aGVuIGxvY2FsZSBpcyBjaGFuZ2VkXG5cdFx0dGhpcy5sYW5nTGlzdCA9IHt9O1xuXG5cdFx0dGhpcy5yZWdpc3RlclRhYmxlT3B0aW9uKFwibG9jYWxlXCIsIGZhbHNlKTsgLy9jdXJyZW50IHN5c3RlbSBsYW5ndWFnZVxuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZU9wdGlvbihcImxhbmdzXCIsIHt9KTtcblx0fVxuXG5cdGluaXRpYWxpemUoKXtcblx0XHR0aGlzLmxhbmdMaXN0ID0gSGVscGVycy5kZWVwQ2xvbmUoTG9jYWxpemUubGFuZ3MpO1xuXG5cdFx0aWYodGhpcy50YWJsZS5vcHRpb25zLmNvbHVtbkRlZmF1bHRzLmhlYWRlckZpbHRlclBsYWNlaG9sZGVyICE9PSBmYWxzZSl7XG5cdFx0XHR0aGlzLnNldEhlYWRlckZpbHRlclBsYWNlaG9sZGVyKHRoaXMudGFibGUub3B0aW9ucy5jb2x1bW5EZWZhdWx0cy5oZWFkZXJGaWx0ZXJQbGFjZWhvbGRlcik7XG5cdFx0fVxuXG5cdFx0Zm9yKGxldCBsb2NhbGUgaW4gdGhpcy50YWJsZS5vcHRpb25zLmxhbmdzKXtcblx0XHRcdHRoaXMuaW5zdGFsbExhbmcobG9jYWxlLCB0aGlzLnRhYmxlLm9wdGlvbnMubGFuZ3NbbG9jYWxlXSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zZXRMb2NhbGUodGhpcy50YWJsZS5vcHRpb25zLmxvY2FsZSk7XG5cblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcInNldExvY2FsZVwiLCB0aGlzLnNldExvY2FsZS5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcImdldExvY2FsZVwiLCB0aGlzLmdldExvY2FsZS5iaW5kKHRoaXMpKTtcblx0XHR0aGlzLnJlZ2lzdGVyVGFibGVGdW5jdGlvbihcImdldExhbmdcIiwgdGhpcy5nZXRMYW5nLmJpbmQodGhpcykpO1xuXHR9XG5cblx0Ly9zZXQgaGVhZGVyIHBsYWNlaG9sZGVyXG5cdHNldEhlYWRlckZpbHRlclBsYWNlaG9sZGVyKHBsYWNlaG9sZGVyKXtcblx0XHR0aGlzLmxhbmdMaXN0LmRlZmF1bHQuaGVhZGVyRmlsdGVycy5kZWZhdWx0ID0gcGxhY2Vob2xkZXI7XG5cdH1cblxuXHQvL3NldHVwIGEgbGFuZyBkZXNjcmlwdGlvbiBvYmplY3Rcblx0aW5zdGFsbExhbmcobG9jYWxlLCBsYW5nKXtcblx0XHRpZih0aGlzLmxhbmdMaXN0W2xvY2FsZV0pe1xuXHRcdFx0dGhpcy5fc2V0TGFuZ1Byb3AodGhpcy5sYW5nTGlzdFtsb2NhbGVdLCBsYW5nKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHR0aGlzLmxhbmdMaXN0W2xvY2FsZV0gPSBsYW5nO1xuXHRcdH1cblx0fVxuXG5cdF9zZXRMYW5nUHJvcChsYW5nLCB2YWx1ZXMpe1xuXHRcdGZvcihsZXQga2V5IGluIHZhbHVlcyl7XG5cdFx0XHRpZihsYW5nW2tleV0gJiYgdHlwZW9mIGxhbmdba2V5XSA9PSBcIm9iamVjdFwiKXtcblx0XHRcdFx0dGhpcy5fc2V0TGFuZ1Byb3AobGFuZ1trZXldLCB2YWx1ZXNba2V5XSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGxhbmdba2V5XSA9IHZhbHVlc1trZXldO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vc2V0IGN1cnJlbnQgbG9jYWxlXG5cdHNldExvY2FsZShkZXNpcmVkTG9jYWxlKXtcblx0XHRkZXNpcmVkTG9jYWxlID0gZGVzaXJlZExvY2FsZSB8fCBcImRlZmF1bHRcIjtcblxuXHRcdC8vZmlsbCBpbiBhbnkgbWF0Y2hpbmcgbGFuZ3VhZ2UgdmFsdWVzXG5cdFx0ZnVuY3Rpb24gdHJhdmVyc2VMYW5nKHRyYW5zLCBwYXRoKXtcblx0XHRcdGZvcih2YXIgcHJvcCBpbiB0cmFucyl7XG5cdFx0XHRcdGlmKHR5cGVvZiB0cmFuc1twcm9wXSA9PSBcIm9iamVjdFwiKXtcblx0XHRcdFx0XHRpZighcGF0aFtwcm9wXSl7XG5cdFx0XHRcdFx0XHRwYXRoW3Byb3BdID0ge307XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRyYXZlcnNlTGFuZyh0cmFuc1twcm9wXSwgcGF0aFtwcm9wXSk7XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRwYXRoW3Byb3BdID0gdHJhbnNbcHJvcF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvL2RldGVybWluaW5nIGNvcnJlY3QgbG9jYWxlIHRvIGxvYWRcblx0XHRpZihkZXNpcmVkTG9jYWxlID09PSB0cnVlICYmIG5hdmlnYXRvci5sYW5ndWFnZSl7XG5cdFx0XHQvL2dldCBsb2NhbCBmcm9tIHN5c3RlbVxuXHRcdFx0ZGVzaXJlZExvY2FsZSA9IG5hdmlnYXRvci5sYW5ndWFnZS50b0xvd2VyQ2FzZSgpO1xuXHRcdH1cblxuXHRcdGlmKGRlc2lyZWRMb2NhbGUpe1xuXHRcdFx0Ly9pZiBsb2NhbGUgaXMgbm90IHNldCwgY2hlY2sgZm9yIG1hdGNoaW5nIHRvcCBsZXZlbCBsb2NhbGUgZWxzZSB1c2UgZGVmYXVsdFxuXHRcdFx0aWYoIXRoaXMubGFuZ0xpc3RbZGVzaXJlZExvY2FsZV0pe1xuXHRcdFx0XHRsZXQgcHJlZml4ID0gZGVzaXJlZExvY2FsZS5zcGxpdChcIi1cIilbMF07XG5cblx0XHRcdFx0aWYodGhpcy5sYW5nTGlzdFtwcmVmaXhdKXtcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJMb2NhbGl6YXRpb24gRXJyb3IgLSBFeGFjdCBtYXRjaGluZyBsb2NhbGUgbm90IGZvdW5kLCB1c2luZyBjbG9zZXN0IG1hdGNoOiBcIiwgZGVzaXJlZExvY2FsZSwgcHJlZml4KTtcblx0XHRcdFx0XHRkZXNpcmVkTG9jYWxlID0gcHJlZml4O1xuXHRcdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiTG9jYWxpemF0aW9uIEVycm9yIC0gTWF0Y2hpbmcgbG9jYWxlIG5vdCBmb3VuZCwgdXNpbmcgZGVmYXVsdDogXCIsIGRlc2lyZWRMb2NhbGUpO1xuXHRcdFx0XHRcdGRlc2lyZWRMb2NhbGUgPSBcImRlZmF1bHRcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMubG9jYWxlID0gZGVzaXJlZExvY2FsZTtcblxuXHRcdC8vbG9hZCBkZWZhdWx0IGxhbmcgdGVtcGxhdGVcblx0XHR0aGlzLmxhbmcgPSBIZWxwZXJzLmRlZXBDbG9uZSh0aGlzLmxhbmdMaXN0LmRlZmF1bHQgfHwge30pO1xuXG5cdFx0aWYoZGVzaXJlZExvY2FsZSAhPSBcImRlZmF1bHRcIil7XG5cdFx0XHR0cmF2ZXJzZUxhbmcodGhpcy5sYW5nTGlzdFtkZXNpcmVkTG9jYWxlXSwgdGhpcy5sYW5nKTtcblx0XHR9XG5cblx0XHR0aGlzLmRpc3BhdGNoRXh0ZXJuYWwoXCJsb2NhbGl6ZWRcIiwgdGhpcy5sb2NhbGUsIHRoaXMubGFuZyk7XG5cblx0XHR0aGlzLl9leGVjdXRlQmluZGluZ3MoKTtcblx0fVxuXG5cdC8vZ2V0IGN1cnJlbnQgbG9jYWxlXG5cdGdldExvY2FsZShsb2NhbGUpe1xuXHRcdHJldHVybiB0aGlzLmxvY2FsZTtcblx0fVxuXG5cdC8vZ2V0IGxhbmcgb2JqZWN0IGZvciBnaXZlbiBsb2NhbCBvciBjdXJyZW50IGlmIG5vbmUgcHJvdmlkZWRcblx0Z2V0TGFuZyhsb2NhbGUpe1xuXHRcdHJldHVybiBsb2NhbGUgPyB0aGlzLmxhbmdMaXN0W2xvY2FsZV0gOiB0aGlzLmxhbmc7XG5cdH1cblxuXHQvL2dldCB0ZXh0IGZvciBjdXJyZW50IGxvY2FsZVxuXHRnZXRUZXh0KHBhdGgsIHZhbHVlKXtcblx0XHR2YXIgZmlsbFBhdGggPSB2YWx1ZSA/IHBhdGggKyBcInxcIiArIHZhbHVlIDogcGF0aCxcblx0XHRwYXRoQXJyYXkgPSBmaWxsUGF0aC5zcGxpdChcInxcIiksXG5cdFx0dGV4dCA9IHRoaXMuX2dldExhbmdFbGVtZW50KHBhdGhBcnJheSwgdGhpcy5sb2NhbGUpO1xuXG5cdFx0Ly8gaWYodGV4dCA9PT0gZmFsc2Upe1xuXHRcdC8vIFx0Y29uc29sZS53YXJuKFwiTG9jYWxpemF0aW9uIEVycm9yIC0gTWF0Y2hpbmcgbG9jYWxpemVkIHRleHQgbm90IGZvdW5kIGZvciBnaXZlbiBwYXRoOiBcIiwgcGF0aCk7XG5cdFx0Ly8gfVxuXG5cdFx0cmV0dXJuIHRleHQgfHwgXCJcIjtcblx0fVxuXG5cdC8vdHJhdmVyc2UgbGFuZ3Mgb2JqZWN0IGFuZCBmaW5kIGxvY2FsaXplZCBjb3B5XG5cdF9nZXRMYW5nRWxlbWVudChwYXRoLCBsb2NhbGUpe1xuXHRcdHZhciByb290ID0gdGhpcy5sYW5nO1xuXG5cdFx0cGF0aC5mb3JFYWNoKGZ1bmN0aW9uKGxldmVsKXtcblx0XHRcdHZhciByb290UGF0aDtcblxuXHRcdFx0aWYocm9vdCl7XG5cdFx0XHRcdHJvb3RQYXRoID0gcm9vdFtsZXZlbF07XG5cblx0XHRcdFx0aWYodHlwZW9mIHJvb3RQYXRoICE9IFwidW5kZWZpbmVkXCIpe1xuXHRcdFx0XHRcdHJvb3QgPSByb290UGF0aDtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHJvb3QgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIHJvb3Q7XG5cdH1cblxuXHQvL3NldCB1cGRhdGUgYmluZGluZ1xuXHRiaW5kKHBhdGgsIGNhbGxiYWNrKXtcblx0XHRpZighdGhpcy5iaW5kaW5nc1twYXRoXSl7XG5cdFx0XHR0aGlzLmJpbmRpbmdzW3BhdGhdID0gW107XG5cdFx0fVxuXG5cdFx0dGhpcy5iaW5kaW5nc1twYXRoXS5wdXNoKGNhbGxiYWNrKTtcblxuXHRcdGNhbGxiYWNrKHRoaXMuZ2V0VGV4dChwYXRoKSwgdGhpcy5sYW5nKTtcblx0fVxuXG5cdC8vaXRlcmF0ZSB0aHJvdWdoIGJpbmRpbmdzIGFuZCB0cmlnZ2VyIHVwZGF0ZXNcblx0X2V4ZWN1dGVCaW5kaW5ncygpe1xuXHRcdGZvcihsZXQgcGF0aCBpbiB0aGlzLmJpbmRpbmdzKXtcblx0XHRcdHRoaXMuYmluZGluZ3NbcGF0aF0uZm9yRWFjaCgoYmluZGluZykgPT4ge1xuXHRcdFx0XHRiaW5kaW5nKHRoaXMuZ2V0VGV4dChwYXRoKSwgdGhpcy5sYW5nKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxufVxuXG5Mb2NhbGl6ZS5tb2R1bGVOYW1lID0gXCJsb2NhbGl6ZVwiO1xuXG4vL2xvYWQgZGVmYXVsdHNcbkxvY2FsaXplLmxhbmdzID0gZGVmYXVsdExhbmdzO1xuXG5jbGFzcyBDb21tcyBleHRlbmRzIE1vZHVsZXtcblxuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuXHR9XG5cblx0aW5pdGlhbGl6ZSgpe1xuXHRcdHRoaXMucmVnaXN0ZXJUYWJsZUZ1bmN0aW9uKFwidGFibGVDb21tc1wiLCB0aGlzLnJlY2VpdmUuYmluZCh0aGlzKSk7XG5cdH1cblxuXHRnZXRDb25uZWN0aW9ucyhzZWxlY3RvcnMpe1xuXHRcdHZhciBjb25uZWN0aW9ucyA9IFtdLFxuXHRcdGNvbm5lY3Rpb247XG5cblx0XHRjb25uZWN0aW9uID0gVGFibGVSZWdpc3RyeS5sb29rdXBUYWJsZShzZWxlY3RvcnMpO1xuXG5cdFx0Y29ubmVjdGlvbi5mb3JFYWNoKChjb24pID0+e1xuXHRcdFx0aWYodGhpcy50YWJsZSAhPT0gY29uKXtcblx0XHRcdFx0Y29ubmVjdGlvbnMucHVzaChjb24pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIGNvbm5lY3Rpb25zO1xuXHR9XG5cblx0c2VuZChzZWxlY3RvcnMsIG1vZHVsZSwgYWN0aW9uLCBkYXRhKXtcblx0XHR2YXIgY29ubmVjdGlvbnMgPSB0aGlzLmdldENvbm5lY3Rpb25zKHNlbGVjdG9ycyk7XG5cblx0XHRjb25uZWN0aW9ucy5mb3JFYWNoKChjb25uZWN0aW9uKSA9PiB7XG5cdFx0XHRjb25uZWN0aW9uLnRhYmxlQ29tbXModGhpcy50YWJsZS5lbGVtZW50LCBtb2R1bGUsIGFjdGlvbiwgZGF0YSk7XG5cdFx0fSk7XG5cblx0XHRpZighY29ubmVjdGlvbnMubGVuZ3RoICYmIHNlbGVjdG9ycyl7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJUYWJsZSBDb25uZWN0aW9uIEVycm9yIC0gTm8gdGFibGVzIG1hdGNoaW5nIHNlbGVjdG9yIGZvdW5kXCIsIHNlbGVjdG9ycyk7XG5cdFx0fVxuXHR9XG5cblx0cmVjZWl2ZSh0YWJsZSwgbW9kdWxlLCBhY3Rpb24sIGRhdGEpe1xuXHRcdGlmKHRoaXMudGFibGUubW9kRXhpc3RzKG1vZHVsZSkpe1xuXHRcdFx0cmV0dXJuIHRoaXMudGFibGUubW9kdWxlc1ttb2R1bGVdLmNvbW1zUmVjZWl2ZWQodGFibGUsIGFjdGlvbiwgZGF0YSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiSW50ZXItdGFibGUgQ29tbXMgRXJyb3IgLSBubyBzdWNoIG1vZHVsZTpcIiwgbW9kdWxlKTtcblx0XHR9XG5cdH1cbn1cblxuQ29tbXMubW9kdWxlTmFtZSA9IFwiY29tbXNcIjtcblxudmFyIGNvcmVNb2R1bGVzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuXHRfX3Byb3RvX186IG51bGwsXG5cdExheW91dE1vZHVsZTogTGF5b3V0LFxuXHRMb2NhbGl6ZU1vZHVsZTogTG9jYWxpemUsXG5cdENvbW1zTW9kdWxlOiBDb21tc1xufSk7XG5cbmNsYXNzIE1vZHVsZUJpbmRlciB7XG5cdFxuXHRjb25zdHJ1Y3Rvcih0YWJ1bGF0b3IsIG1vZHVsZXMpe1xuXHRcdHRoaXMuYmluZFN0YXRpY0Z1bmN0aW9uYWxpdHkodGFidWxhdG9yKTtcblx0XHR0aGlzLmJpbmRNb2R1bGVzKHRhYnVsYXRvciwgY29yZU1vZHVsZXMsIHRydWUpO1xuXHRcdFxuXHRcdGlmKG1vZHVsZXMpe1xuXHRcdFx0dGhpcy5iaW5kTW9kdWxlcyh0YWJ1bGF0b3IsIG1vZHVsZXMpO1xuXHRcdH1cblx0fVxuXHRcblx0YmluZFN0YXRpY0Z1bmN0aW9uYWxpdHkodGFidWxhdG9yKXtcblx0XHR0YWJ1bGF0b3IubW9kdWxlQmluZGluZ3MgPSB7fTtcblx0XHRcblx0XHR0YWJ1bGF0b3IuZXh0ZW5kTW9kdWxlID0gZnVuY3Rpb24obmFtZSwgcHJvcGVydHksIHZhbHVlcyl7XG5cdFx0XHRpZih0YWJ1bGF0b3IubW9kdWxlQmluZGluZ3NbbmFtZV0pe1xuXHRcdFx0XHR2YXIgc291cmNlID0gdGFidWxhdG9yLm1vZHVsZUJpbmRpbmdzW25hbWVdW3Byb3BlcnR5XTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKHNvdXJjZSl7XG5cdFx0XHRcdFx0aWYodHlwZW9mIHZhbHVlcyA9PSBcIm9iamVjdFwiKXtcblx0XHRcdFx0XHRcdGZvcihsZXQga2V5IGluIHZhbHVlcyl7XG5cdFx0XHRcdFx0XHRcdHNvdXJjZVtrZXldID0gdmFsdWVzW2tleV07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiTW9kdWxlIEVycm9yIC0gSW52YWxpZCB2YWx1ZSB0eXBlLCBpdCBtdXN0IGJlIGFuIG9iamVjdFwiKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oXCJNb2R1bGUgRXJyb3IgLSBwcm9wZXJ0eSBkb2VzIG5vdCBleGlzdDpcIiwgcHJvcGVydHkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIk1vZHVsZSBFcnJvciAtIG1vZHVsZSBkb2VzIG5vdCBleGlzdDpcIiwgbmFtZSk7XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRcblx0XHR0YWJ1bGF0b3IucmVnaXN0ZXJNb2R1bGUgPSBmdW5jdGlvbihtb2R1bGVzKXtcblx0XHRcdGlmKCFBcnJheS5pc0FycmF5KG1vZHVsZXMpKXtcblx0XHRcdFx0bW9kdWxlcyA9IFttb2R1bGVzXTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0bW9kdWxlcy5mb3JFYWNoKChtb2QpID0+IHtcblx0XHRcdFx0dGFidWxhdG9yLnJlZ2lzdGVyTW9kdWxlQmluZGluZyhtb2QpO1xuXHRcdFx0fSk7XG5cdFx0fTtcblx0XHRcblx0XHR0YWJ1bGF0b3IucmVnaXN0ZXJNb2R1bGVCaW5kaW5nID0gZnVuY3Rpb24obW9kKXtcblx0XHRcdHRhYnVsYXRvci5tb2R1bGVCaW5kaW5nc1ttb2QubW9kdWxlTmFtZV0gPSBtb2Q7XG5cdFx0fTtcblx0XHRcblx0XHR0YWJ1bGF0b3IuZmluZFRhYmxlID0gZnVuY3Rpb24ocXVlcnkpe1xuXHRcdFx0dmFyIHJlc3VsdHMgPSBUYWJsZVJlZ2lzdHJ5Lmxvb2t1cFRhYmxlKHF1ZXJ5LCB0cnVlKTtcblx0XHRcdHJldHVybiBBcnJheS5pc0FycmF5KHJlc3VsdHMpICYmICFyZXN1bHRzLmxlbmd0aCA/IGZhbHNlIDogcmVzdWx0cztcblx0XHR9O1xuXHRcdFxuXHRcdC8vZW5zdXJlIHRoYXQgbW9kdWxlIGFyZSBib3VuZCB0byBpbnN0YW50aWF0ZWQgZnVuY3Rpb25cblx0XHR0YWJ1bGF0b3IucHJvdG90eXBlLmJpbmRNb2R1bGVzID0gZnVuY3Rpb24oKXtcblx0XHRcdHZhciBvcmRlcmVkU3RhcnRNb2RzID0gW10sXG5cdFx0XHRvcmRlcmVkRW5kTW9kcyA9IFtdLFxuXHRcdFx0dW5PcmRlcmVkTW9kcyA9IFtdO1xuXHRcdFx0XG5cdFx0XHR0aGlzLm1vZHVsZXMgPSB7fTtcblx0XHRcdFxuXHRcdFx0Zm9yKHZhciBuYW1lIGluIHRhYnVsYXRvci5tb2R1bGVCaW5kaW5ncyl7XG5cdFx0XHRcdGxldCBtb2QgPSB0YWJ1bGF0b3IubW9kdWxlQmluZGluZ3NbbmFtZV07XG5cdFx0XHRcdGxldCBtb2R1bGUgPSBuZXcgbW9kKHRoaXMpO1xuXHRcdFx0XHRcblx0XHRcdFx0dGhpcy5tb2R1bGVzW25hbWVdID0gbW9kdWxlO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYobW9kLnByb3RvdHlwZS5tb2R1bGVDb3JlKXtcblx0XHRcdFx0XHR0aGlzLm1vZHVsZXNDb3JlLnB1c2gobW9kdWxlKTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGlmKG1vZC5tb2R1bGVJbml0T3JkZXIpe1xuXHRcdFx0XHRcdFx0aWYobW9kLm1vZHVsZUluaXRPcmRlciA8IDApe1xuXHRcdFx0XHRcdFx0XHRvcmRlcmVkU3RhcnRNb2RzLnB1c2gobW9kdWxlKTtcblx0XHRcdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRcdFx0b3JkZXJlZEVuZE1vZHMucHVzaChtb2R1bGUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0dW5PcmRlcmVkTW9kcy5wdXNoKG1vZHVsZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdG9yZGVyZWRTdGFydE1vZHMuc29ydCgoYSwgYikgPT4gYS5tb2R1bGVJbml0T3JkZXIgPiBiLm1vZHVsZUluaXRPcmRlciA/IDEgOiAtMSk7XG5cdFx0XHRvcmRlcmVkRW5kTW9kcy5zb3J0KChhLCBiKSA9PiBhLm1vZHVsZUluaXRPcmRlciA+IGIubW9kdWxlSW5pdE9yZGVyID8gMSA6IC0xKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5tb2R1bGVzUmVndWxhciA9IG9yZGVyZWRTdGFydE1vZHMuY29uY2F0KHVuT3JkZXJlZE1vZHMuY29uY2F0KG9yZGVyZWRFbmRNb2RzKSk7XG5cdFx0fTtcblx0fVxuXHRcblx0YmluZE1vZHVsZXModGFidWxhdG9yLCBtb2R1bGVzLCBjb3JlKXtcblx0XHR2YXIgbW9kcyA9IE9iamVjdC52YWx1ZXMobW9kdWxlcyk7XG5cdFx0XG5cdFx0aWYoY29yZSl7XG5cdFx0XHRtb2RzLmZvckVhY2goKG1vZCkgPT4ge1xuXHRcdFx0XHRtb2QucHJvdG90eXBlLm1vZHVsZUNvcmUgPSB0cnVlO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdFxuXHRcdHRhYnVsYXRvci5yZWdpc3Rlck1vZHVsZShtb2RzKTtcblx0fVxufVxuXG5jbGFzcyBBbGVydCBleHRlbmRzIENvcmVGZWF0dXJle1xuXHRjb25zdHJ1Y3Rvcih0YWJsZSl7XG5cdFx0c3VwZXIodGFibGUpO1xuICAgICAgICBcblx0XHR0aGlzLmVsZW1lbnQgPSB0aGlzLl9jcmVhdGVBbGVydEVsZW1lbnQoKTtcblx0XHR0aGlzLm1zZ0VsZW1lbnQgPSB0aGlzLl9jcmVhdGVNc2dFbGVtZW50KCk7XG5cdFx0dGhpcy50eXBlID0gbnVsbDtcbiAgICAgICAgXG5cdFx0dGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMubXNnRWxlbWVudCk7XG5cdH1cbiAgICBcblx0X2NyZWF0ZUFsZXJ0RWxlbWVudCgpe1xuXHRcdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0ZWwuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1hbGVydFwiKTtcblx0XHRyZXR1cm4gZWw7XG5cdH1cbiAgICBcblx0X2NyZWF0ZU1zZ0VsZW1lbnQoKXtcblx0XHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdGVsLmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItYWxlcnQtbXNnXCIpO1xuXHRcdGVsLnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJhbGVydFwiKTtcblx0XHRyZXR1cm4gZWw7XG5cdH1cbiAgICBcblx0X3R5cGVDbGFzcygpe1xuXHRcdHJldHVybiBcInRhYnVsYXRvci1hbGVydC1zdGF0ZS1cIiArIHRoaXMudHlwZTtcblx0fVxuICAgIFxuXHRhbGVydChjb250ZW50LCB0eXBlID0gXCJtc2dcIil7XG5cdFx0aWYoY29udGVudCl7XG5cdFx0XHR0aGlzLmNsZWFyKCk7XG4gICAgICAgICAgICBcblx0XHRcdHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgICAgICBcblx0XHRcdHdoaWxlKHRoaXMubXNnRWxlbWVudC5maXJzdENoaWxkKSB0aGlzLm1zZ0VsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5tc2dFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgXG5cdFx0XHR0aGlzLm1zZ0VsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl90eXBlQ2xhc3MoKSk7XG4gICAgICAgICAgICBcblx0XHRcdGlmKHR5cGVvZiBjb250ZW50ID09PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0XHRjb250ZW50ID0gY29udGVudCgpO1xuXHRcdFx0fVxuICAgICAgICAgICAgXG5cdFx0XHRpZihjb250ZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpe1xuXHRcdFx0XHR0aGlzLm1zZ0VsZW1lbnQuYXBwZW5kQ2hpbGQoY29udGVudCk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdHRoaXMubXNnRWxlbWVudC5pbm5lckhUTUwgPSBjb250ZW50O1xuXHRcdFx0fVxuICAgICAgICAgICAgXG5cdFx0XHR0aGlzLnRhYmxlLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5lbGVtZW50KTtcblx0XHR9XG5cdH1cbiAgICBcblx0Y2xlYXIoKXtcblx0XHRpZih0aGlzLmVsZW1lbnQucGFyZW50Tm9kZSl7XG5cdFx0XHR0aGlzLmVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQpO1xuXHRcdH1cbiAgICAgICAgXG5cdFx0dGhpcy5tc2dFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fdHlwZUNsYXNzKCkpO1xuXHR9XG59XG5cbmNsYXNzIFRhYnVsYXRvciB7XG5cdFxuXHRjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKXtcblx0XHRcblx0XHR0aGlzLm9wdGlvbnMgPSB7fTtcblx0XHRcblx0XHR0aGlzLmNvbHVtbk1hbmFnZXIgPSBudWxsOyAvLyBob2xkIENvbHVtbiBNYW5hZ2VyXG5cdFx0dGhpcy5yb3dNYW5hZ2VyID0gbnVsbDsgLy9ob2xkIFJvdyBNYW5hZ2VyXG5cdFx0dGhpcy5mb290ZXJNYW5hZ2VyID0gbnVsbDsgLy9ob2xkZXIgRm9vdGVyIE1hbmFnZXJcblx0XHR0aGlzLmFsZXJ0TWFuYWdlciA9IG51bGw7IC8vaG9sZCBBbGVydCBNYW5hZ2VyXG5cdFx0dGhpcy52ZG9tSG96ICA9IG51bGw7IC8vaG9sZGVyIGhvcml6b250YWwgdmlydHVhbCBkb21cblx0XHR0aGlzLmV4dGVybmFsRXZlbnRzID0gbnVsbDsgLy9oYW5kbGUgZXh0ZXJuYWwgZXZlbnQgbWVzc2FnaW5nXG5cdFx0dGhpcy5ldmVudEJ1cyA9IG51bGw7IC8vaGFuZGxlIGludGVybmFsIGV2ZW50IG1lc3NhZ2luZ1xuXHRcdHRoaXMuaW50ZXJhY3Rpb25Nb25pdG9yID0gZmFsc2U7IC8vdHJhY2sgdXNlciBpbnRlcmFjdGlvblxuXHRcdHRoaXMuYnJvd3NlciA9IFwiXCI7IC8vaG9sZCBjdXJyZW50IGJyb3dzZXIgdHlwZVxuXHRcdHRoaXMuYnJvd3NlclNsb3cgPSBmYWxzZTsgLy9oYW5kbGUgcmVkdWNlZCBmdW5jdGlvbmFsaXR5IGZvciBzbG93ZXIgYnJvd3NlcnNcblx0XHR0aGlzLmJyb3dzZXJNb2JpbGUgPSBmYWxzZTsgLy9jaGVjayBpZiBydW5uaW5nIG9uIG1vYmlsZSwgcHJldmVudCByZXNpemUgY2FuY2VsbGluZyBlZGl0IG9uIGtleWJvYXJkIGFwcGVhcmFuY2Vcblx0XHR0aGlzLnJ0bCA9IGZhbHNlOyAvL2NoZWNrIGlmIHRoZSB0YWJsZSBpcyBpbiBSVEwgbW9kZVxuXHRcdHRoaXMub3JpZ2luYWxFbGVtZW50ID0gbnVsbDsgLy9ob2xkIG9yaWdpbmFsIHRhYmxlIGVsZW1lbnQgaWYgaXQgaGFzIGJlZW4gcmVwbGFjZWRcblx0XHRcblx0XHR0aGlzLmNvbXBvbmVudEZ1bmN0aW9uQmluZGVyID0gbmV3IENvbXBvbmVudEZ1bmN0aW9uQmluZGVyKHRoaXMpOyAvL2JpbmQgY29tcG9uZW50IGZ1bmN0aW9uc1xuXHRcdHRoaXMuZGF0YUxvYWRlciA9IGZhbHNlOyAvL2JpbmQgY29tcG9uZW50IGZ1bmN0aW9uc1xuXHRcdFxuXHRcdHRoaXMubW9kdWxlcyA9IHt9OyAvL2hvbGQgYWxsIG1vZHVsZXMgYm91bmQgdG8gdGhpcyB0YWJsZVxuXHRcdHRoaXMubW9kdWxlc0NvcmUgPSBbXTsgLy9ob2xkIGNvcmUgbW9kdWxlcyBib3VuZCB0byB0aGlzIHRhYmxlIChmb3IgaW5pdGlhbGl6YXRpb24gcHVycG9zZXMpXG5cdFx0dGhpcy5tb2R1bGVzUmVndWxhciA9IFtdOyAvL2hvbGQgcmVndWxhciBtb2R1bGVzIGJvdW5kIHRvIHRoaXMgdGFibGUgKGZvciBpbml0aWFsaXphdGlvbiBwdXJwb3Nlcylcblx0XHRcblx0XHR0aGlzLmRlcHJlY2F0aW9uQWR2aXNvciA9IG5ldyBEZXByZWNhdGlvbkFkdmlzb3IodGhpcyk7XG5cdFx0dGhpcy5vcHRpb25zTGlzdCA9IG5ldyBPcHRpb25zTGlzdCh0aGlzLCBcInRhYmxlIGNvbnN0cnVjdG9yXCIpO1xuXHRcdFxuXHRcdHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblx0XHR0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuXHRcdFxuXHRcdGlmKHRoaXMuaW5pdGlhbGl6ZUVsZW1lbnQoZWxlbWVudCkpe1xuXHRcdFx0XG5cdFx0XHR0aGlzLmluaXRpYWxpemVDb3JlU3lzdGVtcyhvcHRpb25zKTtcblx0XHRcdFxuXHRcdFx0Ly9kZWxheSB0YWJsZSBjcmVhdGlvbiB0byBhbGxvdyBldmVudCBiaW5kaW5ncyBpbW1lZGlhdGVseSBhZnRlciB0aGUgY29uc3RydWN0b3Jcblx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHR0aGlzLl9jcmVhdGUoKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRcblx0XHRUYWJsZVJlZ2lzdHJ5LnJlZ2lzdGVyKHRoaXMpOyAvL3JlZ2lzdGVyIHRhYmxlIGZvciBpbnRlci1kZXZpY2UgY29tbXVuaWNhdGlvblxuXHR9XG5cdFxuXHRpbml0aWFsaXplRWxlbWVudChlbGVtZW50KXtcblx0XHRpZih0eXBlb2YgSFRNTEVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KXtcblx0XHRcdHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9ZWxzZSBpZih0eXBlb2YgZWxlbWVudCA9PT0gXCJzdHJpbmdcIil7XG5cdFx0XHR0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsZW1lbnQpO1xuXHRcdFx0XG5cdFx0XHRpZih0aGlzLmVsZW1lbnQpe1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0Y29uc29sZS5lcnJvcihcIlRhYnVsYXRvciBDcmVhdGlvbiBFcnJvciAtIG5vIGVsZW1lbnQgZm91bmQgbWF0Y2hpbmcgc2VsZWN0b3I6IFwiLCBlbGVtZW50KTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoXCJUYWJ1bGF0b3IgQ3JlYXRpb24gRXJyb3IgLSBJbnZhbGlkIGVsZW1lbnQgcHJvdmlkZWQ6XCIsIGVsZW1lbnQpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXHRcblx0aW5pdGlhbGl6ZUNvcmVTeXN0ZW1zKG9wdGlvbnMpe1xuXHRcdHRoaXMuY29sdW1uTWFuYWdlciA9IG5ldyBDb2x1bW5NYW5hZ2VyKHRoaXMpO1xuXHRcdHRoaXMucm93TWFuYWdlciA9IG5ldyBSb3dNYW5hZ2VyKHRoaXMpO1xuXHRcdHRoaXMuZm9vdGVyTWFuYWdlciA9IG5ldyBGb290ZXJNYW5hZ2VyKHRoaXMpO1xuXHRcdHRoaXMuZGF0YUxvYWRlciA9IG5ldyBEYXRhTG9hZGVyKHRoaXMpO1xuXHRcdHRoaXMuYWxlcnRNYW5hZ2VyID0gbmV3IEFsZXJ0KHRoaXMpO1xuXHRcdFxuXHRcdHRoaXMuYmluZE1vZHVsZXMoKTtcblx0XHRcblx0XHR0aGlzLm9wdGlvbnMgPSB0aGlzLm9wdGlvbnNMaXN0LmdlbmVyYXRlKFRhYnVsYXRvci5kZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG5cdFx0XG5cdFx0dGhpcy5fY2xlYXJPYmplY3RQb2ludGVycygpO1xuXHRcdFxuXHRcdHRoaXMuX21hcERlcHJlY2F0ZWRGdW5jdGlvbmFsaXR5KCk7XG5cdFx0XG5cdFx0dGhpcy5leHRlcm5hbEV2ZW50cyA9IG5ldyBFeHRlcm5hbEV2ZW50QnVzKHRoaXMsIHRoaXMub3B0aW9ucywgdGhpcy5vcHRpb25zLmRlYnVnRXZlbnRzRXh0ZXJuYWwpO1xuXHRcdHRoaXMuZXZlbnRCdXMgPSBuZXcgSW50ZXJuYWxFdmVudEJ1cyh0aGlzLm9wdGlvbnMuZGVidWdFdmVudHNJbnRlcm5hbCk7XG5cdFx0XG5cdFx0dGhpcy5pbnRlcmFjdGlvbk1vbml0b3IgPSBuZXcgSW50ZXJhY3Rpb25NYW5hZ2VyKHRoaXMpO1xuXHRcdFxuXHRcdHRoaXMuZGF0YUxvYWRlci5pbml0aWFsaXplKCk7XG5cdFx0Ly8gdGhpcy5jb2x1bW5NYW5hZ2VyLmluaXRpYWxpemUoKTtcblx0XHQvLyB0aGlzLnJvd01hbmFnZXIuaW5pdGlhbGl6ZSgpO1xuXHRcdHRoaXMuZm9vdGVyTWFuYWdlci5pbml0aWFsaXplKCk7XG5cdH1cblx0XG5cdC8vY29udmVydCBkZXByZWNhdGVkIGZ1bmN0aW9uYWxpdHkgdG8gbmV3IGZ1bmN0aW9uc1xuXHRfbWFwRGVwcmVjYXRlZEZ1bmN0aW9uYWxpdHkoKXtcblx0XHQvL2FsbCBwcmV2aW91c2x5IGRlcHJlY2F0ZWQgZnVuY3Rpb25hbGl0eSByZW1vdmVkIGluIHRoZSA1LjAgcmVsZWFzZVxuXHR9XG5cdFxuXHRfY2xlYXJTZWxlY3Rpb24oKXtcblx0XHRcblx0XHR0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1ibG9jay1zZWxlY3RcIik7XG5cdFx0XG5cdFx0aWYgKHdpbmRvdy5nZXRTZWxlY3Rpb24pIHtcblx0XHRcdGlmICh3aW5kb3cuZ2V0U2VsZWN0aW9uKCkuZW1wdHkpIHsgIC8vIENocm9tZVxuXHRcdFx0XHR3aW5kb3cuZ2V0U2VsZWN0aW9uKCkuZW1wdHkoKTtcblx0XHRcdH0gZWxzZSBpZiAod2luZG93LmdldFNlbGVjdGlvbigpLnJlbW92ZUFsbFJhbmdlcykgeyAgLy8gRmlyZWZveFxuXHRcdFx0XHR3aW5kb3cuZ2V0U2VsZWN0aW9uKCkucmVtb3ZlQWxsUmFuZ2VzKCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChkb2N1bWVudC5zZWxlY3Rpb24pIHsgIC8vIElFP1xuXHRcdFx0ZG9jdW1lbnQuc2VsZWN0aW9uLmVtcHR5KCk7XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwidGFidWxhdG9yLWJsb2NrLXNlbGVjdFwiKTtcblx0fVxuXHRcblx0Ly9jcmVhdGUgdGFibGVcblx0X2NyZWF0ZSgpe1xuXHRcdHRoaXMuZXh0ZXJuYWxFdmVudHMuZGlzcGF0Y2goXCJ0YWJsZUJ1aWxkaW5nXCIpO1xuXHRcdHRoaXMuZXZlbnRCdXMuZGlzcGF0Y2goXCJ0YWJsZS1idWlsZGluZ1wiKTtcblx0XHRcblx0XHR0aGlzLl9ydGxDaGVjaygpO1xuXHRcdFxuXHRcdHRoaXMuX2J1aWxkRWxlbWVudCgpO1xuXHRcdFxuXHRcdHRoaXMuX2luaXRpYWxpemVUYWJsZSgpO1xuXHRcdFxuXHRcdHRoaXMuX2xvYWRJbml0aWFsRGF0YSgpO1xuXHRcdFxuXHRcdHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuXHRcdFxuXHRcdHRoaXMuZXh0ZXJuYWxFdmVudHMuZGlzcGF0Y2goXCJ0YWJsZUJ1aWx0XCIpO1xuXHR9XG5cdFxuXHRfcnRsQ2hlY2soKXtcblx0XHR2YXIgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmVsZW1lbnQpO1xuXHRcdFxuXHRcdHN3aXRjaCh0aGlzLm9wdGlvbnMudGV4dERpcmVjdGlvbil7XG5cdFx0XHRjYXNlXCJhdXRvXCI6XG5cdFx0XHRcdGlmKHN0eWxlLmRpcmVjdGlvbiAhPT0gXCJydGxcIil7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Y2FzZSBcInJ0bFwiOlxuXHRcdFx0XHR0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRhYnVsYXRvci1ydGxcIik7XG5cdFx0XHRcdHRoaXMucnRsID0gdHJ1ZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcblx0XHRcdGNhc2UgXCJsdHJcIjpcblx0XHRcdFx0dGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3ItbHRyXCIpO1xuXHRcdFx0XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHR0aGlzLnJ0bCA9IGZhbHNlO1xuXHRcdH1cblx0fVxuXHRcblx0Ly9jbGVhciBwb2ludGVycyB0byBvYmplY3RzIGluIGRlZmF1bHQgY29uZmlnIG9iamVjdFxuXHRfY2xlYXJPYmplY3RQb2ludGVycygpe1xuXHRcdHRoaXMub3B0aW9ucy5jb2x1bW5zID0gdGhpcy5vcHRpb25zLmNvbHVtbnMuc2xpY2UoMCk7XG5cdFx0XG5cdFx0aWYoQXJyYXkuaXNBcnJheSh0aGlzLm9wdGlvbnMuZGF0YSkgJiYgIXRoaXMub3B0aW9ucy5yZWFjdGl2ZURhdGEpe1xuXHRcdFx0dGhpcy5vcHRpb25zLmRhdGEgPSB0aGlzLm9wdGlvbnMuZGF0YS5zbGljZSgwKTtcblx0XHR9XG5cdH1cblx0XG5cdC8vYnVpbGQgdGFidWxhdG9yIGVsZW1lbnRcblx0X2J1aWxkRWxlbWVudCgpe1xuXHRcdHZhciBlbGVtZW50ID0gdGhpcy5lbGVtZW50LFxuXHRcdG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG5cdFx0bmV3RWxlbWVudDtcblx0XHRcblx0XHRpZihlbGVtZW50LnRhZ05hbWUgPT09IFwiVEFCTEVcIil7XG5cdFx0XHR0aGlzLm9yaWdpbmFsRWxlbWVudCA9IHRoaXMuZWxlbWVudDtcblx0XHRcdG5ld0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRcdFx0XG5cdFx0XHQvL3RyYW5zZmVyIGF0dHJpYnV0ZXMgdG8gbmV3IGVsZW1lbnRcblx0XHRcdHZhciBhdHRyaWJ1dGVzID0gZWxlbWVudC5hdHRyaWJ1dGVzO1xuXHRcdFx0XG5cdFx0XHQvLyBsb29wIHRocm91Z2ggYXR0cmlidXRlcyBhbmQgYXBwbHkgdGhlbSBvbiBkaXZcblx0XHRcdGZvcih2YXIgaSBpbiBhdHRyaWJ1dGVzKXtcblx0XHRcdFx0aWYodHlwZW9mIGF0dHJpYnV0ZXNbaV0gPT0gXCJvYmplY3RcIil7XG5cdFx0XHRcdFx0bmV3RWxlbWVudC5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlc1tpXS5uYW1lLCBhdHRyaWJ1dGVzW2ldLnZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHQvLyByZXBsYWNlIHRhYmxlIHdpdGggZGl2IGVsZW1lbnRcblx0XHRcdGVsZW1lbnQucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobmV3RWxlbWVudCwgZWxlbWVudCk7XG5cdFx0XHRcblx0XHRcdHRoaXMuZWxlbWVudCA9IGVsZW1lbnQgPSBuZXdFbGVtZW50O1xuXHRcdH1cblx0XHRcblx0XHRlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0YWJ1bGF0b3JcIik7XG5cdFx0ZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwiZ3JpZFwiKTtcblx0XHRcblx0XHQvL2VtcHR5IGVsZW1lbnRcblx0XHR3aGlsZShlbGVtZW50LmZpcnN0Q2hpbGQpIGVsZW1lbnQucmVtb3ZlQ2hpbGQoZWxlbWVudC5maXJzdENoaWxkKTtcblx0XHRcblx0XHQvL3NldCB0YWJsZSBoZWlnaHRcblx0XHRpZihvcHRpb25zLmhlaWdodCl7XG5cdFx0XHRvcHRpb25zLmhlaWdodCA9IGlzTmFOKG9wdGlvbnMuaGVpZ2h0KSA/IG9wdGlvbnMuaGVpZ2h0IDogb3B0aW9ucy5oZWlnaHQgKyBcInB4XCI7XG5cdFx0XHRlbGVtZW50LnN0eWxlLmhlaWdodCA9IG9wdGlvbnMuaGVpZ2h0O1xuXHRcdH1cblx0XHRcblx0XHQvL3NldCB0YWJsZSBtaW4gaGVpZ2h0XG5cdFx0aWYob3B0aW9ucy5taW5IZWlnaHQgIT09IGZhbHNlKXtcblx0XHRcdG9wdGlvbnMubWluSGVpZ2h0ID0gaXNOYU4ob3B0aW9ucy5taW5IZWlnaHQpID8gb3B0aW9ucy5taW5IZWlnaHQgOiBvcHRpb25zLm1pbkhlaWdodCArIFwicHhcIjtcblx0XHRcdGVsZW1lbnQuc3R5bGUubWluSGVpZ2h0ID0gb3B0aW9ucy5taW5IZWlnaHQ7XG5cdFx0fVxuXHRcdFxuXHRcdC8vc2V0IHRhYmxlIG1heEhlaWdodFxuXHRcdGlmKG9wdGlvbnMubWF4SGVpZ2h0ICE9PSBmYWxzZSl7XG5cdFx0XHRvcHRpb25zLm1heEhlaWdodCA9IGlzTmFOKG9wdGlvbnMubWF4SGVpZ2h0KSA/IG9wdGlvbnMubWF4SGVpZ2h0IDogb3B0aW9ucy5tYXhIZWlnaHQgKyBcInB4XCI7XG5cdFx0XHRlbGVtZW50LnN0eWxlLm1heEhlaWdodCA9IG9wdGlvbnMubWF4SGVpZ2h0O1xuXHRcdH1cblx0fVxuXHRcblx0Ly9pbml0aWFsaXplIGNvcmUgc3lzdGVtcyBhbmQgbW9kdWxlc1xuXHRfaW5pdGlhbGl6ZVRhYmxlKCl7XG5cdFx0dmFyIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQsXG5cdFx0b3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblx0XHRcblx0XHR0aGlzLmludGVyYWN0aW9uTW9uaXRvci5pbml0aWFsaXplKCk7XG5cdFx0XG5cdFx0dGhpcy5jb2x1bW5NYW5hZ2VyLmluaXRpYWxpemUoKTtcblx0XHR0aGlzLnJvd01hbmFnZXIuaW5pdGlhbGl6ZSgpO1xuXHRcdFxuXHRcdHRoaXMuX2RldGVjdEJyb3dzZXIoKTtcblx0XHRcblx0XHQvL2luaXRpYWxpemUgY29yZSBtb2R1bGVzXG5cdFx0dGhpcy5tb2R1bGVzQ29yZS5mb3JFYWNoKChtb2QpID0+IHtcblx0XHRcdG1vZC5pbml0aWFsaXplKCk7XG5cdFx0fSk7XG5cdFx0XG5cdFx0Ly9idWlsZCB0YWJsZSBlbGVtZW50c1xuXHRcdGVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5jb2x1bW5NYW5hZ2VyLmdldEVsZW1lbnQoKSk7XG5cdFx0ZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLnJvd01hbmFnZXIuZ2V0RWxlbWVudCgpKTtcblx0XHRcblx0XHRpZihvcHRpb25zLmZvb3RlckVsZW1lbnQpe1xuXHRcdFx0dGhpcy5mb290ZXJNYW5hZ2VyLmFjdGl2YXRlKCk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmKG9wdGlvbnMuYXV0b0NvbHVtbnMgJiYgb3B0aW9ucy5kYXRhKXtcblx0XHRcdFxuXHRcdFx0dGhpcy5jb2x1bW5NYW5hZ2VyLmdlbmVyYXRlQ29sdW1uc0Zyb21Sb3dEYXRhKHRoaXMub3B0aW9ucy5kYXRhKTtcblx0XHR9XG5cdFx0XG5cdFx0Ly9pbml0aWFsaXplIHJlZ3VsYXIgbW9kdWxlc1xuXHRcdHRoaXMubW9kdWxlc1JlZ3VsYXIuZm9yRWFjaCgobW9kKSA9PiB7XG5cdFx0XHRtb2QuaW5pdGlhbGl6ZSgpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHRoaXMuY29sdW1uTWFuYWdlci5zZXRDb2x1bW5zKG9wdGlvbnMuY29sdW1ucyk7XG5cdFx0XG5cdFx0dGhpcy5ldmVudEJ1cy5kaXNwYXRjaChcInRhYmxlLWJ1aWx0XCIpO1xuXHR9XG5cdFxuXHRfbG9hZEluaXRpYWxEYXRhKCl7XG5cdFx0dGhpcy5kYXRhTG9hZGVyLmxvYWQodGhpcy5vcHRpb25zLmRhdGEpO1xuXHR9XG5cdFxuXHQvL2RlY29uc3RydWN0b3Jcblx0ZGVzdHJveSgpe1xuXHRcdHZhciBlbGVtZW50ID0gdGhpcy5lbGVtZW50O1xuXHRcdFxuXHRcdHRoaXMuZGVzdHJveWVkID0gdHJ1ZTtcblx0XHRcblx0XHRUYWJsZVJlZ2lzdHJ5LmRlcmVnaXN0ZXIodGhpcyk7IC8vZGVyZWdpc3RlciB0YWJsZSBmcm9tIGludGVyLWRldmljZSBjb21tdW5pY2F0aW9uXG5cdFx0XG5cdFx0dGhpcy5ldmVudEJ1cy5kaXNwYXRjaChcInRhYmxlLWRlc3Ryb3lcIik7XG5cdFx0XG5cdFx0Ly9jbGVhciByb3cgZGF0YVxuXHRcdHRoaXMucm93TWFuYWdlci5kZXN0cm95KCk7XG5cdFx0XG5cdFx0Ly9jbGVhciBET01cblx0XHR3aGlsZShlbGVtZW50LmZpcnN0Q2hpbGQpIGVsZW1lbnQucmVtb3ZlQ2hpbGQoZWxlbWVudC5maXJzdENoaWxkKTtcblx0XHRlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJ0YWJ1bGF0b3JcIik7XG5cblx0XHR0aGlzLmV4dGVybmFsRXZlbnRzLmRpc3BhdGNoKFwidGFibGVEZXN0cm95ZWRcIik7XG5cdH1cblx0XG5cdF9kZXRlY3RCcm93c2VyKCl7XG5cdFx0dmFyIHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudHx8bmF2aWdhdG9yLnZlbmRvcnx8d2luZG93Lm9wZXJhO1xuXHRcdFxuXHRcdGlmKHVhLmluZGV4T2YoXCJUcmlkZW50XCIpID4gLTEpe1xuXHRcdFx0dGhpcy5icm93c2VyID0gXCJpZVwiO1xuXHRcdFx0dGhpcy5icm93c2VyU2xvdyA9IHRydWU7XG5cdFx0fWVsc2UgaWYodWEuaW5kZXhPZihcIkVkZ2VcIikgPiAtMSl7XG5cdFx0XHR0aGlzLmJyb3dzZXIgPSBcImVkZ2VcIjtcblx0XHRcdHRoaXMuYnJvd3NlclNsb3cgPSB0cnVlO1xuXHRcdH1lbHNlIGlmKHVhLmluZGV4T2YoXCJGaXJlZm94XCIpID4gLTEpe1xuXHRcdFx0dGhpcy5icm93c2VyID0gXCJmaXJlZm94XCI7XG5cdFx0XHR0aGlzLmJyb3dzZXJTbG93ID0gZmFsc2U7XG5cdFx0fWVsc2UgaWYodWEuaW5kZXhPZihcIk1hYyBPU1wiKSA+IC0xKXtcblx0XHRcdHRoaXMuYnJvd3NlciA9IFwic2FmYXJpXCI7XG5cdFx0XHR0aGlzLmJyb3dzZXJTbG93ID0gZmFsc2U7XG5cdFx0fWVsc2Uge1xuXHRcdFx0dGhpcy5icm93c2VyID0gXCJvdGhlclwiO1xuXHRcdFx0dGhpcy5icm93c2VyU2xvdyA9IGZhbHNlO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLmJyb3dzZXJNb2JpbGUgPSAvKGFuZHJvaWR8YmJcXGQrfG1lZWdvKS4rbW9iaWxlfGF2YW50Z298YmFkYVxcL3xibGFja2JlcnJ5fGJsYXplcnxjb21wYWx8ZWxhaW5lfGZlbm5lY3xoaXB0b3B8aWVtb2JpbGV8aXAoaG9uZXxvZCl8aXJpc3xraW5kbGV8bGdlIHxtYWVtb3xtaWRwfG1tcHxtb2JpbGUuK2ZpcmVmb3h8bmV0ZnJvbnR8b3BlcmEgbShvYnxpbilpfHBhbG0oIG9zKT98cGhvbmV8cChpeGl8cmUpXFwvfHBsdWNrZXJ8cG9ja2V0fHBzcHxzZXJpZXMoNHw2KTB8c3ltYmlhbnx0cmVvfHVwXFwuKGJyb3dzZXJ8bGluayl8dm9kYWZvbmV8d2FwfHdpbmRvd3MgY2V8eGRhfHhpaW5vfGFuZHJvaWR8aXBhZHxwbGF5Ym9va3xzaWxrL2kudGVzdCh1YSl8fC8xMjA3fDYzMTB8NjU5MHwzZ3NvfDR0aHB8NTBbMS02XWl8Nzcwc3w4MDJzfGEgd2F8YWJhY3xhYyhlcnxvb3xzLSl8YWkoa298cm4pfGFsKGF2fGNhfGNvKXxhbW9pfGFuKGV4fG55fHl3KXxhcHR1fGFyKGNofGdvKXxhcyh0ZXx1cyl8YXR0d3xhdShkaXwtbXxyIHxzICl8YXZhbnxiZShja3xsbHxucSl8YmkobGJ8cmQpfGJsKGFjfGF6KXxicihlfHYpd3xidW1ifGJ3LShufHUpfGM1NVxcL3xjYXBpfGNjd2F8Y2RtLXxjZWxsfGNodG18Y2xkY3xjbWQtfGNvKG1wfG5kKXxjcmF3fGRhKGl0fGxsfG5nKXxkYnRlfGRjLXN8ZGV2aXxkaWNhfGRtb2J8ZG8oY3xwKW98ZHMoMTJ8LWQpfGVsKDQ5fGFpKXxlbShsMnx1bCl8ZXIoaWN8azApfGVzbDh8ZXooWzQtN10wfG9zfHdhfHplKXxmZXRjfGZseSgtfF8pfGcxIHV8ZzU2MHxnZW5lfGdmLTV8Zy1tb3xnbyhcXC53fG9kKXxncihhZHx1bil8aGFpZXxoY2l0fGhkLShtfHB8dCl8aGVpLXxoaShwdHx0YSl8aHAoIGl8aXApfGhzLWN8aHQoYygtfCB8X3xhfGd8cHxzfHQpfHRwKXxodShhd3x0Yyl8aS0oMjB8Z298bWEpfGkyMzB8aWFjKCB8LXxcXC8pfGlicm98aWRlYXxpZzAxfGlrb218aW0xa3xpbm5vfGlwYXF8aXJpc3xqYSh0fHYpYXxqYnJvfGplbXV8amlnc3xrZGRpfGtlaml8a2d0KCB8XFwvKXxrbG9ufGtwdCB8a3djLXxreW8oY3xrKXxsZShub3x4aSl8bGcoIGd8XFwvKGt8bHx1KXw1MHw1NHwtW2Etd10pfGxpYnd8bHlueHxtMS13fG0zZ2F8bTUwXFwvfG1hKHRlfHVpfHhvKXxtYygwMXwyMXxjYSl8bS1jcnxtZShyY3xyaSl8bWkobzh8b2F8dHMpfG1tZWZ8bW8oMDF8MDJ8Yml8ZGV8ZG98dCgtfCB8b3x2KXx6eil8bXQoNTB8cDF8diApfG13YnB8bXl3YXxuMTBbMC0yXXxuMjBbMi0zXXxuMzAoMHwyKXxuNTAoMHwyfDUpfG43KDAoMHwxKXwxMCl8bmUoKGN8bSktfG9ufHRmfHdmfHdnfHd0KXxub2soNnxpKXxuenBofG8yaW18b3AodGl8d3YpfG9yYW58b3dnMXxwODAwfHBhbihhfGR8dCl8cGR4Z3xwZygxM3wtKFsxLThdfGMpKXxwaGlsfHBpcmV8cGwoYXl8dWMpfHBuLTJ8cG8oY2t8cnR8c2UpfHByb3h8cHNpb3xwdC1nfHFhLWF8cWMoMDd8MTJ8MjF8MzJ8NjB8LVsyLTddfGktKXxxdGVrfHIzODB8cjYwMHxyYWtzfHJpbTl8cm8odmV8em8pfHM1NVxcL3xzYShnZXxtYXxtbXxtc3xueXx2YSl8c2MoMDF8aC18b298cC0pfHNka1xcL3xzZShjKC18MHwxKXw0N3xtY3xuZHxyaSl8c2doLXxzaGFyfHNpZSgtfG0pfHNrLTB8c2woNDV8aWQpfHNtKGFsfGFyfGIzfGl0fHQ1KXxzbyhmdHxueSl8c3AoMDF8aC18di18diApfHN5KDAxfG1iKXx0MigxOHw1MCl8dDYoMDB8MTB8MTgpfHRhKGd0fGxrKXx0Y2wtfHRkZy18dGVsKGl8bSl8dGltLXx0LW1vfHRvKHBsfHNoKXx0cyg3MHxtLXxtM3xtNSl8dHgtOXx1cChcXC5ifGcxfHNpKXx1dHN0fHY0MDB8djc1MHx2ZXJpfHZpKHJnfHRlKXx2ayg0MHw1WzAtM118LXYpfHZtNDB8dm9kYXx2dWxjfHZ4KDUyfDUzfDYwfDYxfDcwfDgwfDgxfDgzfDg1fDk4KXx3M2MoLXwgKXx3ZWJjfHdoaXR8d2koZyB8bmN8bncpfHdtbGJ8d29udXx4NzAwfHlhcy18eW91cnx6ZXRvfHp0ZS0vaS50ZXN0KHVhLnNsaWNlKDAsNCkpO1xuXHR9XG5cdFxuXHRpbml0R3VhcmQoZnVuYywgbXNnKXtcblx0XHR2YXIgc3RhY2ssIGxpbmU7XG5cdFx0XG5cdFx0aWYodGhpcy5vcHRpb25zLmRlYnVnSW5pdGlhbGl6YXRpb24gJiYgIXRoaXMuaW5pdGlhbGl6ZWQpe1xuXHRcdFx0aWYoIWZ1bmMpe1xuXHRcdFx0XHRzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrLnNwbGl0KFwiXFxuXCIpO1xuXHRcdFx0XHRcblx0XHRcdFx0bGluZSA9IHN0YWNrWzBdID09IFwiRXJyb3JcIiA/IHN0YWNrWzJdIDogc3RhY2tbMV07XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihsaW5lWzBdID09IFwiIFwiKXtcblx0XHRcdFx0XHRmdW5jID0gbGluZS50cmltKCkuc3BsaXQoXCIgXCIpWzFdLnNwbGl0KFwiLlwiKVsxXTtcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdGZ1bmMgPSBsaW5lLnRyaW0oKS5zcGxpdChcIkBcIilbMF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Y29uc29sZS53YXJuKFwiVGFibGUgTm90IEluaXRpYWxpemVkIC0gQ2FsbGluZyB0aGUgXCIgKyBmdW5jICsgXCIgZnVuY3Rpb24gYmVmb3JlIHRoZSB0YWJsZSBpcyBpbml0aWFsaXplZCBtYXkgcmVzdWx0IGluIGluY29uc2lzdGVudCBiZWhhdmlvciwgUGxlYXNlIHdhaXQgZm9yIHRoZSBgdGFibGVCdWlsdGAgZXZlbnQgYmVmb3JlIGNhbGxpbmcgdGhpcyBmdW5jdGlvbi5cIiArIChtc2cgPyBcIiBcIiArIG1zZyA6IFwiXCIpKTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHRoaXMuaW5pdGlhbGl6ZWQ7XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLyBEYXRhIEhhbmRsaW5nIC8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvL2Jsb2NrIHRhYmxlIHJlZHJhd2luZ1xuXHRibG9ja1JlZHJhdygpe1xuXHRcdHRoaXMuaW5pdEd1YXJkKCk7XG5cblx0XHR0aGlzLmV2ZW50QnVzLmRpc3BhdGNoKFwicmVkcmF3LWJsb2NraW5nXCIpO1xuXHRcdFxuXHRcdHRoaXMucm93TWFuYWdlci5ibG9ja1JlZHJhdygpO1xuXHRcdHRoaXMuY29sdW1uTWFuYWdlci5ibG9ja1JlZHJhdygpO1xuXG5cdFx0dGhpcy5ldmVudEJ1cy5kaXNwYXRjaChcInJlZHJhdy1ibG9ja2VkXCIpO1xuXHR9XG5cdFxuXHQvL3Jlc3RvcmUgdGFibGUgcmVkcmF3aW5nXG5cdHJlc3RvcmVSZWRyYXcoKXtcblx0XHR0aGlzLmluaXRHdWFyZCgpO1xuXG5cdFx0dGhpcy5ldmVudEJ1cy5kaXNwYXRjaChcInJlZHJhdy1yZXN0b3JpbmdcIik7XG5cblx0XHR0aGlzLnJvd01hbmFnZXIucmVzdG9yZVJlZHJhdygpO1xuXHRcdHRoaXMuY29sdW1uTWFuYWdlci5yZXN0b3JlUmVkcmF3KCk7XG5cblx0XHR0aGlzLmV2ZW50QnVzLmRpc3BhdGNoKFwicmVkcmF3LXJlc3RvcmVkXCIpO1xuXHR9XG5cdFxuXHQvL2xvYWQgZGF0YVxuXHRzZXREYXRhKGRhdGEsIHBhcmFtcywgY29uZmlnKXtcblx0XHR0aGlzLmluaXRHdWFyZChmYWxzZSwgXCJUbyBzZXQgaW5pdGlhbCBkYXRhIHBsZWFzZSB1c2UgdGhlICdkYXRhJyBwcm9wZXJ0eSBpbiB0aGUgdGFibGUgY29uc3RydWN0b3IuXCIpO1xuXHRcdFxuXHRcdHJldHVybiB0aGlzLmRhdGFMb2FkZXIubG9hZChkYXRhLCBwYXJhbXMsIGNvbmZpZywgZmFsc2UpO1xuXHR9XG5cdFxuXHQvL2NsZWFyIGRhdGFcblx0Y2xlYXJEYXRhKCl7XG5cdFx0dGhpcy5pbml0R3VhcmQoKTtcblx0XHRcblx0XHR0aGlzLmRhdGFMb2FkZXIuYmxvY2tBY3RpdmVMb2FkKCk7XG5cdFx0dGhpcy5yb3dNYW5hZ2VyLmNsZWFyRGF0YSgpO1xuXHR9XG5cdFxuXHQvL2dldCB0YWJsZSBkYXRhIGFycmF5XG5cdGdldERhdGEoYWN0aXZlKXtcblx0XHRyZXR1cm4gdGhpcy5yb3dNYW5hZ2VyLmdldERhdGEoYWN0aXZlKTtcblx0fVxuXHRcblx0Ly9nZXQgdGFibGUgZGF0YSBhcnJheSBjb3VudFxuXHRnZXREYXRhQ291bnQoYWN0aXZlKXtcblx0XHRyZXR1cm4gdGhpcy5yb3dNYW5hZ2VyLmdldERhdGFDb3VudChhY3RpdmUpO1xuXHR9XG5cdFxuXHQvL3JlcGxhY2UgZGF0YSwga2VlcGluZyB0YWJsZSBpbiBwb3NpdGlvbiB3aXRoIHNhbWUgc29ydFxuXHRyZXBsYWNlRGF0YShkYXRhLCBwYXJhbXMsIGNvbmZpZyl7XG5cdFx0dGhpcy5pbml0R3VhcmQoKTtcblx0XHRcblx0XHRyZXR1cm4gdGhpcy5kYXRhTG9hZGVyLmxvYWQoZGF0YSwgcGFyYW1zLCBjb25maWcsIHRydWUsIHRydWUpO1xuXHR9XG5cdFxuXHQvL3VwZGF0ZSB0YWJsZSBkYXRhXG5cdHVwZGF0ZURhdGEoZGF0YSl7XG5cdFx0dmFyIHJlc3BvbnNlcyA9IDA7XG5cdFx0XG5cdFx0dGhpcy5pbml0R3VhcmQoKTtcblx0XHRcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0dGhpcy5kYXRhTG9hZGVyLmJsb2NrQWN0aXZlTG9hZCgpO1xuXHRcdFx0XG5cdFx0XHRpZih0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIil7XG5cdFx0XHRcdGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihkYXRhICYmIGRhdGEubGVuZ3RoID4gMCl7XG5cdFx0XHRcdGRhdGEuZm9yRWFjaCgoaXRlbSkgPT4ge1xuXHRcdFx0XHRcdHZhciByb3cgPSB0aGlzLnJvd01hbmFnZXIuZmluZFJvdyhpdGVtW3RoaXMub3B0aW9ucy5pbmRleF0pO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKHJvdyl7XG5cdFx0XHRcdFx0XHRyZXNwb25zZXMrKztcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0cm93LnVwZGF0ZURhdGEoaXRlbSlcblx0XHRcdFx0XHRcdFx0LnRoZW4oKCk9Pntcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZXMtLTtcblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdFx0aWYoIXJlc3BvbnNlcyl7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdFx0XHQuY2F0Y2goKGUpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRyZWplY3QoXCJVcGRhdGUgRXJyb3IgLSBVbmFibGUgdG8gdXBkYXRlIHJvd1wiLCBpdGVtLCBlKTtcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0cmVqZWN0KFwiVXBkYXRlIEVycm9yIC0gVW5hYmxlIHRvIGZpbmQgcm93XCIsIGl0ZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9ZWxzZSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybihcIlVwZGF0ZSBFcnJvciAtIE5vIGRhdGEgcHJvdmlkZWRcIik7XG5cdFx0XHRcdHJlamVjdChcIlVwZGF0ZSBFcnJvciAtIE5vIGRhdGEgcHJvdmlkZWRcIik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblx0XG5cdGFkZERhdGEoZGF0YSwgcG9zLCBpbmRleCl7XG5cdFx0dGhpcy5pbml0R3VhcmQoKTtcblx0XHRcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0dGhpcy5kYXRhTG9hZGVyLmJsb2NrQWN0aXZlTG9hZCgpO1xuXHRcdFx0XG5cdFx0XHRpZih0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIil7XG5cdFx0XHRcdGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZihkYXRhKXtcblx0XHRcdFx0dGhpcy5yb3dNYW5hZ2VyLmFkZFJvd3MoZGF0YSwgcG9zLCBpbmRleClcblx0XHRcdFx0XHQudGhlbigocm93cykgPT4ge1xuXHRcdFx0XHRcdFx0dmFyIG91dHB1dCA9IFtdO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0cm93cy5mb3JFYWNoKGZ1bmN0aW9uKHJvdyl7XG5cdFx0XHRcdFx0XHRcdG91dHB1dC5wdXNoKHJvdy5nZXRDb21wb25lbnQoKSk7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdHJlc29sdmUob3V0cHV0KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiVXBkYXRlIEVycm9yIC0gTm8gZGF0YSBwcm92aWRlZFwiKTtcblx0XHRcdFx0cmVqZWN0KFwiVXBkYXRlIEVycm9yIC0gTm8gZGF0YSBwcm92aWRlZFwiKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRcblx0Ly91cGRhdGUgdGFibGUgZGF0YVxuXHR1cGRhdGVPckFkZERhdGEoZGF0YSl7XG5cdFx0dmFyIHJvd3MgPSBbXSxcblx0XHRyZXNwb25zZXMgPSAwO1xuXHRcdFxuXHRcdHRoaXMuaW5pdEd1YXJkKCk7XG5cdFx0XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdHRoaXMuZGF0YUxvYWRlci5ibG9ja0FjdGl2ZUxvYWQoKTtcblx0XHRcdFxuXHRcdFx0aWYodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIpe1xuXHRcdFx0XHRkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoZGF0YSAmJiBkYXRhLmxlbmd0aCA+IDApe1xuXHRcdFx0XHRkYXRhLmZvckVhY2goKGl0ZW0pID0+IHtcblx0XHRcdFx0XHR2YXIgcm93ID0gdGhpcy5yb3dNYW5hZ2VyLmZpbmRSb3coaXRlbVt0aGlzLm9wdGlvbnMuaW5kZXhdKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRyZXNwb25zZXMrKztcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZihyb3cpe1xuXHRcdFx0XHRcdFx0cm93LnVwZGF0ZURhdGEoaXRlbSlcblx0XHRcdFx0XHRcdFx0LnRoZW4oKCk9Pntcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZXMtLTtcblx0XHRcdFx0XHRcdFx0XHRyb3dzLnB1c2gocm93LmdldENvbXBvbmVudCgpKTtcblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdFx0aWYoIXJlc3BvbnNlcyl7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKHJvd3MpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdFx0dGhpcy5yb3dNYW5hZ2VyLmFkZFJvd3MoaXRlbSlcblx0XHRcdFx0XHRcdFx0LnRoZW4oKG5ld1Jvd3MpPT57XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VzLS07XG5cdFx0XHRcdFx0XHRcdFx0cm93cy5wdXNoKG5ld1Jvd3NbMF0uZ2V0Q29tcG9uZW50KCkpO1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0XHRpZighcmVzcG9uc2VzKXtcblx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUocm93cyk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJVcGRhdGUgRXJyb3IgLSBObyBkYXRhIHByb3ZpZGVkXCIpO1xuXHRcdFx0XHRyZWplY3QoXCJVcGRhdGUgRXJyb3IgLSBObyBkYXRhIHByb3ZpZGVkXCIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cdFxuXHQvL2dldCByb3cgb2JqZWN0XG5cdGdldFJvdyhpbmRleCl7XG5cdFx0dmFyIHJvdyA9IHRoaXMucm93TWFuYWdlci5maW5kUm93KGluZGV4KTtcblx0XHRcblx0XHRpZihyb3cpe1xuXHRcdFx0cmV0dXJuIHJvdy5nZXRDb21wb25lbnQoKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJGaW5kIEVycm9yIC0gTm8gbWF0Y2hpbmcgcm93IGZvdW5kOlwiLCBpbmRleCk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL2dldCByb3cgb2JqZWN0XG5cdGdldFJvd0Zyb21Qb3NpdGlvbihwb3NpdGlvbil7XG5cdFx0dmFyIHJvdyA9IHRoaXMucm93TWFuYWdlci5nZXRSb3dGcm9tUG9zaXRpb24ocG9zaXRpb24pO1xuXHRcdFxuXHRcdGlmKHJvdyl7XG5cdFx0XHRyZXR1cm4gcm93LmdldENvbXBvbmVudCgpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkZpbmQgRXJyb3IgLSBObyBtYXRjaGluZyByb3cgZm91bmQ6XCIsIHBvc2l0aW9uKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblx0XG5cdC8vZGVsZXRlIHJvdyBmcm9tIHRhYmxlXG5cdGRlbGV0ZVJvdyhpbmRleCl7XG5cdFx0dmFyIGZvdW5kUm93cyA9IFtdO1xuXHRcdFxuXHRcdHRoaXMuaW5pdEd1YXJkKCk7XG5cdFx0XG5cdFx0aWYoIUFycmF5LmlzQXJyYXkoaW5kZXgpKXtcblx0XHRcdGluZGV4ID0gW2luZGV4XTtcblx0XHR9XG5cdFx0XG5cdFx0Ly9maW5kIG1hdGNoaW5nIHJvd3Ncblx0XHRmb3IobGV0IGl0ZW0gb2YgaW5kZXgpe1xuXHRcdFx0bGV0IHJvdyA9IHRoaXMucm93TWFuYWdlci5maW5kUm93KGl0ZW0sIHRydWUpO1xuXHRcdFx0XG5cdFx0XHRpZihyb3cpe1xuXHRcdFx0XHRmb3VuZFJvd3MucHVzaChyb3cpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKFwiRGVsZXRlIEVycm9yIC0gTm8gbWF0Y2hpbmcgcm93IGZvdW5kOlwiLCBpdGVtKTtcblx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KFwiRGVsZXRlIEVycm9yIC0gTm8gbWF0Y2hpbmcgcm93IGZvdW5kXCIpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHQvL3NvcnQgcm93cyBpbnRvIGNvcnJlY3Qgb3JkZXIgdG8gZW5zdXJlIHNtb290aCBkZWxldGUgZnJvbSB0YWJsZVxuXHRcdGZvdW5kUm93cy5zb3J0KChhLCBiKSA9PiB7XG5cdFx0XHRyZXR1cm4gdGhpcy5yb3dNYW5hZ2VyLnJvd3MuaW5kZXhPZihhKSA+IHRoaXMucm93TWFuYWdlci5yb3dzLmluZGV4T2YoYikgPyAxIDogLTE7XG5cdFx0fSk7XG5cdFx0XG5cdFx0Ly9kZWxldGUgcm93c1xuXHRcdGZvdW5kUm93cy5mb3JFYWNoKChyb3cpID0+e1xuXHRcdFx0cm93LmRlbGV0ZSgpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdHRoaXMucm93TWFuYWdlci5yZVJlbmRlckluUG9zaXRpb24oKTtcblx0XHRcblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cdH1cblx0XG5cdC8vYWRkIHJvdyB0byB0YWJsZVxuXHRhZGRSb3coZGF0YSwgcG9zLCBpbmRleCl7XG5cdFx0dGhpcy5pbml0R3VhcmQoKTtcblx0XHRcblx0XHRpZih0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIil7XG5cdFx0XHRkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHRoaXMucm93TWFuYWdlci5hZGRSb3dzKGRhdGEsIHBvcywgaW5kZXgsIHRydWUpXG5cdFx0XHQudGhlbigocm93cyk9Pntcblx0XHRcdFx0cmV0dXJuIHJvd3NbMF0uZ2V0Q29tcG9uZW50KCk7XG5cdFx0XHR9KTtcblx0fVxuXHRcblx0Ly91cGRhdGUgYSByb3cgaWYgaXQgZXhpc3RzIG90aGVyd2lzZSBjcmVhdGUgaXRcblx0dXBkYXRlT3JBZGRSb3coaW5kZXgsIGRhdGEpe1xuXHRcdHZhciByb3cgPSB0aGlzLnJvd01hbmFnZXIuZmluZFJvdyhpbmRleCk7XG5cdFx0XG5cdFx0dGhpcy5pbml0R3VhcmQoKTtcblx0XHRcblx0XHRpZih0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIil7XG5cdFx0XHRkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYocm93KXtcblx0XHRcdHJldHVybiByb3cudXBkYXRlRGF0YShkYXRhKVxuXHRcdFx0XHQudGhlbigoKT0+e1xuXHRcdFx0XHRcdHJldHVybiByb3cuZ2V0Q29tcG9uZW50KCk7XG5cdFx0XHRcdH0pO1xuXHRcdH1lbHNlIHtcblx0XHRcdHJldHVybiB0aGlzLnJvd01hbmFnZXIuYWRkUm93cyhkYXRhKVxuXHRcdFx0XHQudGhlbigocm93cyk9Pntcblx0XHRcdFx0XHRyZXR1cm4gcm93c1swXS5nZXRDb21wb25lbnQoKTtcblx0XHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL3VwZGF0ZSByb3cgZGF0YVxuXHR1cGRhdGVSb3coaW5kZXgsIGRhdGEpe1xuXHRcdHZhciByb3cgPSB0aGlzLnJvd01hbmFnZXIuZmluZFJvdyhpbmRleCk7XG5cdFx0XG5cdFx0dGhpcy5pbml0R3VhcmQoKTtcblx0XHRcblx0XHRpZih0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIil7XG5cdFx0XHRkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYocm93KXtcblx0XHRcdHJldHVybiByb3cudXBkYXRlRGF0YShkYXRhKVxuXHRcdFx0XHQudGhlbigoKT0+e1xuXHRcdFx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUocm93LmdldENvbXBvbmVudCgpKTtcblx0XHRcdFx0fSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiVXBkYXRlIEVycm9yIC0gTm8gbWF0Y2hpbmcgcm93IGZvdW5kOlwiLCBpbmRleCk7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoXCJVcGRhdGUgRXJyb3IgLSBObyBtYXRjaGluZyByb3cgZm91bmRcIik7XG5cdFx0fVxuXHR9XG5cdFxuXHQvL3Njcm9sbCB0byByb3cgaW4gRE9NXG5cdHNjcm9sbFRvUm93KGluZGV4LCBwb3NpdGlvbiwgaWZWaXNpYmxlKXtcblx0XHR2YXIgcm93ID0gdGhpcy5yb3dNYW5hZ2VyLmZpbmRSb3coaW5kZXgpO1xuXHRcdFxuXHRcdGlmKHJvdyl7XG5cdFx0XHRyZXR1cm4gdGhpcy5yb3dNYW5hZ2VyLnNjcm9sbFRvUm93KHJvdywgcG9zaXRpb24sIGlmVmlzaWJsZSk7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiU2Nyb2xsIEVycm9yIC0gTm8gbWF0Y2hpbmcgcm93IGZvdW5kOlwiLCBpbmRleCk7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoXCJTY3JvbGwgRXJyb3IgLSBObyBtYXRjaGluZyByb3cgZm91bmRcIik7XG5cdFx0fVxuXHR9XG5cdFxuXHRtb3ZlUm93KGZyb20sIHRvLCBhZnRlcil7XG5cdFx0dmFyIGZyb21Sb3cgPSB0aGlzLnJvd01hbmFnZXIuZmluZFJvdyhmcm9tKTtcblx0XHRcblx0XHR0aGlzLmluaXRHdWFyZCgpO1xuXHRcdFxuXHRcdGlmKGZyb21Sb3cpe1xuXHRcdFx0ZnJvbVJvdy5tb3ZlVG9Sb3codG8sIGFmdGVyKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJNb3ZlIEVycm9yIC0gTm8gbWF0Y2hpbmcgcm93IGZvdW5kOlwiLCBmcm9tKTtcblx0XHR9XG5cdH1cblx0XG5cdGdldFJvd3MoYWN0aXZlKXtcblx0XHRyZXR1cm4gdGhpcy5yb3dNYW5hZ2VyLmdldENvbXBvbmVudHMoYWN0aXZlKTtcdFxuXHR9XG5cdFxuXHQvL2dldCBwb3NpdGlvbiBvZiByb3cgaW4gdGFibGVcblx0Z2V0Um93UG9zaXRpb24oaW5kZXgpe1xuXHRcdHZhciByb3cgPSB0aGlzLnJvd01hbmFnZXIuZmluZFJvdyhpbmRleCk7XG5cdFx0XG5cdFx0aWYocm93KXtcblx0XHRcdHJldHVybiByb3cuZ2V0UG9zaXRpb24oKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJQb3NpdGlvbiBFcnJvciAtIE5vIG1hdGNoaW5nIHJvdyBmb3VuZDpcIiwgaW5kZXgpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8vIENvbHVtbiBGdW5jdGlvbnMgIC8vLy8vLy8vLy8vLy8vL1xuXHRzZXRDb2x1bW5zKGRlZmluaXRpb24pe1xuXHRcdHRoaXMuaW5pdEd1YXJkKGZhbHNlLCBcIlRvIHNldCBpbml0aWFsIGNvbHVtbnMgcGxlYXNlIHVzZSB0aGUgJ2NvbHVtbnMnIHByb3BlcnR5IGluIHRoZSB0YWJsZSBjb25zdHJ1Y3RvclwiKTtcblx0XHRcblx0XHR0aGlzLmNvbHVtbk1hbmFnZXIuc2V0Q29sdW1ucyhkZWZpbml0aW9uKTtcblx0fVxuXHRcblx0Z2V0Q29sdW1ucyhzdHJ1Y3R1cmVkKXtcblx0XHRyZXR1cm4gdGhpcy5jb2x1bW5NYW5hZ2VyLmdldENvbXBvbmVudHMoc3RydWN0dXJlZCk7XG5cdH1cblx0XG5cdGdldENvbHVtbihmaWVsZCl7XG5cdFx0dmFyIGNvbHVtbiA9IHRoaXMuY29sdW1uTWFuYWdlci5maW5kQ29sdW1uKGZpZWxkKTtcblx0XHRcblx0XHRpZihjb2x1bW4pe1xuXHRcdFx0cmV0dXJuIGNvbHVtbi5nZXRDb21wb25lbnQoKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJGaW5kIEVycm9yIC0gTm8gbWF0Y2hpbmcgY29sdW1uIGZvdW5kOlwiLCBmaWVsZCk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cdFxuXHRnZXRDb2x1bW5EZWZpbml0aW9ucygpe1xuXHRcdHJldHVybiB0aGlzLmNvbHVtbk1hbmFnZXIuZ2V0RGVmaW5pdGlvblRyZWUoKTtcblx0fVxuXHRcblx0c2hvd0NvbHVtbihmaWVsZCl7XG5cdFx0dmFyIGNvbHVtbiA9IHRoaXMuY29sdW1uTWFuYWdlci5maW5kQ29sdW1uKGZpZWxkKTtcblx0XHRcblx0XHR0aGlzLmluaXRHdWFyZCgpO1xuXHRcdFxuXHRcdGlmKGNvbHVtbil7XG5cdFx0XHRjb2x1bW4uc2hvdygpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkNvbHVtbiBTaG93IEVycm9yIC0gTm8gbWF0Y2hpbmcgY29sdW1uIGZvdW5kOlwiLCBmaWVsZCk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cdFxuXHRoaWRlQ29sdW1uKGZpZWxkKXtcblx0XHR2YXIgY29sdW1uID0gdGhpcy5jb2x1bW5NYW5hZ2VyLmZpbmRDb2x1bW4oZmllbGQpOyBcblx0XHRcblx0XHR0aGlzLmluaXRHdWFyZCgpO1xuXHRcdFxuXHRcdGlmKGNvbHVtbil7XG5cdFx0XHRjb2x1bW4uaGlkZSgpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkNvbHVtbiBIaWRlIEVycm9yIC0gTm8gbWF0Y2hpbmcgY29sdW1uIGZvdW5kOlwiLCBmaWVsZCk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cdFxuXHR0b2dnbGVDb2x1bW4oZmllbGQpe1xuXHRcdHZhciBjb2x1bW4gPSB0aGlzLmNvbHVtbk1hbmFnZXIuZmluZENvbHVtbihmaWVsZCk7XG5cdFx0XG5cdFx0dGhpcy5pbml0R3VhcmQoKTtcblx0XHRcblx0XHRpZihjb2x1bW4pe1xuXHRcdFx0aWYoY29sdW1uLnZpc2libGUpe1xuXHRcdFx0XHRjb2x1bW4uaGlkZSgpO1xuXHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRjb2x1bW4uc2hvdygpO1xuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkNvbHVtbiBWaXNpYmlsaXR5IFRvZ2dsZSBFcnJvciAtIE5vIG1hdGNoaW5nIGNvbHVtbiBmb3VuZDpcIiwgZmllbGQpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXHRcblx0YWRkQ29sdW1uKGRlZmluaXRpb24sIGJlZm9yZSwgZmllbGQpe1xuXHRcdHZhciBjb2x1bW4gPSB0aGlzLmNvbHVtbk1hbmFnZXIuZmluZENvbHVtbihmaWVsZCk7XG5cdFx0XG5cdFx0dGhpcy5pbml0R3VhcmQoKTtcblx0XHRcblx0XHRyZXR1cm4gdGhpcy5jb2x1bW5NYW5hZ2VyLmFkZENvbHVtbihkZWZpbml0aW9uLCBiZWZvcmUsIGNvbHVtbilcblx0XHRcdC50aGVuKChjb2x1bW4pID0+IHtcblx0XHRcdFx0cmV0dXJuIGNvbHVtbi5nZXRDb21wb25lbnQoKTtcblx0XHRcdH0pO1xuXHR9XG5cdFxuXHRkZWxldGVDb2x1bW4oZmllbGQpe1xuXHRcdHZhciBjb2x1bW4gPSB0aGlzLmNvbHVtbk1hbmFnZXIuZmluZENvbHVtbihmaWVsZCk7XG5cdFx0XG5cdFx0dGhpcy5pbml0R3VhcmQoKTtcblx0XHRcblx0XHRpZihjb2x1bW4pe1xuXHRcdFx0cmV0dXJuIGNvbHVtbi5kZWxldGUoKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJDb2x1bW4gRGVsZXRlIEVycm9yIC0gTm8gbWF0Y2hpbmcgY29sdW1uIGZvdW5kOlwiLCBmaWVsZCk7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoKTtcblx0XHR9XG5cdH1cblx0XG5cdHVwZGF0ZUNvbHVtbkRlZmluaXRpb24oZmllbGQsIGRlZmluaXRpb24pe1xuXHRcdHZhciBjb2x1bW4gPSB0aGlzLmNvbHVtbk1hbmFnZXIuZmluZENvbHVtbihmaWVsZCk7XG5cdFx0XG5cdFx0dGhpcy5pbml0R3VhcmQoKTtcblx0XHRcblx0XHRpZihjb2x1bW4pe1xuXHRcdFx0cmV0dXJuIGNvbHVtbi51cGRhdGVEZWZpbml0aW9uKGRlZmluaXRpb24pO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIkNvbHVtbiBVcGRhdGUgRXJyb3IgLSBObyBtYXRjaGluZyBjb2x1bW4gZm91bmQ6XCIsIGZpZWxkKTtcblx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdCgpO1xuXHRcdH1cblx0fVxuXHRcblx0bW92ZUNvbHVtbihmcm9tLCB0bywgYWZ0ZXIpe1xuXHRcdHZhciBmcm9tQ29sdW1uID0gdGhpcy5jb2x1bW5NYW5hZ2VyLmZpbmRDb2x1bW4oZnJvbSksXG5cdFx0dG9Db2x1bW4gPSB0aGlzLmNvbHVtbk1hbmFnZXIuZmluZENvbHVtbih0byk7XG5cdFx0XG5cdFx0dGhpcy5pbml0R3VhcmQoKTtcblx0XHRcblx0XHRpZihmcm9tQ29sdW1uKXtcblx0XHRcdGlmKHRvQ29sdW1uKXtcblx0XHRcdFx0dGhpcy5jb2x1bW5NYW5hZ2VyLm1vdmVDb2x1bW4oZnJvbUNvbHVtbiwgdG9Db2x1bW4sIGFmdGVyKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiTW92ZSBFcnJvciAtIE5vIG1hdGNoaW5nIGNvbHVtbiBmb3VuZDpcIiwgdG9Db2x1bW4pO1xuXHRcdFx0fVxuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnNvbGUud2FybihcIk1vdmUgRXJyb3IgLSBObyBtYXRjaGluZyBjb2x1bW4gZm91bmQ6XCIsIGZyb20pO1xuXHRcdH1cblx0fVxuXHRcblx0Ly9zY3JvbGwgdG8gY29sdW1uIGluIERPTVxuXHRzY3JvbGxUb0NvbHVtbihmaWVsZCwgcG9zaXRpb24sIGlmVmlzaWJsZSl7XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdHZhciBjb2x1bW4gPSB0aGlzLmNvbHVtbk1hbmFnZXIuZmluZENvbHVtbihmaWVsZCk7XG5cdFx0XHRcblx0XHRcdGlmKGNvbHVtbil7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbHVtbk1hbmFnZXIuc2Nyb2xsVG9Db2x1bW4oY29sdW1uLCBwb3NpdGlvbiwgaWZWaXNpYmxlKTtcblx0XHRcdH1lbHNlIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiU2Nyb2xsIEVycm9yIC0gTm8gbWF0Y2hpbmcgY29sdW1uIGZvdW5kOlwiLCBmaWVsZCk7XG5cdFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChcIlNjcm9sbCBFcnJvciAtIE5vIG1hdGNoaW5nIGNvbHVtbiBmb3VuZFwiKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vIEdlbmVyYWwgUHVibGljIEZ1bmN0aW9ucyAvLy8vLy8vLy8vLy9cblx0Ly9yZWRyYXcgbGlzdCB3aXRob3V0IHVwZGF0aW5nIGRhdGFcblx0cmVkcmF3KGZvcmNlKXtcblx0XHR0aGlzLmluaXRHdWFyZCgpO1xuXG5cdFx0dGhpcy5jb2x1bW5NYW5hZ2VyLnJlZHJhdyhmb3JjZSk7XG5cdFx0dGhpcy5yb3dNYW5hZ2VyLnJlZHJhdyhmb3JjZSk7XG5cdH1cblx0XG5cdHNldEhlaWdodChoZWlnaHQpe1xuXHRcdHRoaXMub3B0aW9ucy5oZWlnaHQgPSBpc05hTihoZWlnaHQpID8gaGVpZ2h0IDogaGVpZ2h0ICsgXCJweFwiO1xuXHRcdHRoaXMuZWxlbWVudC5zdHlsZS5oZWlnaHQgPSB0aGlzLm9wdGlvbnMuaGVpZ2h0O1xuXHRcdHRoaXMucm93TWFuYWdlci5pbml0aWFsaXplUmVuZGVyZXIoKTtcblx0XHR0aGlzLnJvd01hbmFnZXIucmVkcmF3KCk7XG5cdH1cblx0XG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vIEV2ZW50IEJ1cyAvLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHRvbihrZXksIGNhbGxiYWNrKXtcblx0XHR0aGlzLmV4dGVybmFsRXZlbnRzLnN1YnNjcmliZShrZXksIGNhbGxiYWNrKTtcblx0fVxuXHRcblx0b2ZmKGtleSwgY2FsbGJhY2spe1xuXHRcdHRoaXMuZXh0ZXJuYWxFdmVudHMudW5zdWJzY3JpYmUoa2V5LCBjYWxsYmFjayk7XG5cdH1cblx0XG5cdGRpc3BhdGNoRXZlbnQoKXtcblx0XHR2YXIgYXJncyA9IEFycmF5LmZyb20oYXJndW1lbnRzKTtcblx0XHRhcmdzLnNoaWZ0KCk7XG5cdFx0XG5cdFx0dGhpcy5leHRlcm5hbEV2ZW50cy5kaXNwYXRjaCguLi5hcmd1bWVudHMpO1xuXHR9XG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8gQWxlcnRzIC8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXHRhbGVydChjb250ZW50cywgdHlwZSl7XG5cdFx0dGhpcy5pbml0R3VhcmQoKTtcblxuXHRcdHRoaXMuYWxlcnRNYW5hZ2VyLmFsZXJ0KGNvbnRlbnRzLCB0eXBlKTtcblx0fVxuXG5cdGNsZWFyQWxlcnQoKXtcblx0XHR0aGlzLmluaXRHdWFyZCgpO1xuXG5cdFx0dGhpcy5hbGVydE1hbmFnZXIuY2xlYXIoKTtcblx0fVxuXHRcblx0Ly8vLy8vLy8vLy8vLy8gRXh0ZW5zaW9uIE1hbmFnZW1lbnQgLy8vLy8vLy8vLy8vLy9cblx0bW9kRXhpc3RzKHBsdWdpbiwgcmVxdWlyZWQpe1xuXHRcdGlmKHRoaXMubW9kdWxlc1twbHVnaW5dKXtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1lbHNlIHtcblx0XHRcdGlmKHJlcXVpcmVkKXtcblx0XHRcdFx0Y29uc29sZS5lcnJvcihcIlRhYnVsYXRvciBNb2R1bGUgTm90IEluc3RhbGxlZDogXCIgKyBwbHVnaW4pO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXHRcblx0bW9kdWxlKGtleSl7XG5cdFx0dmFyIG1vZCA9IHRoaXMubW9kdWxlc1trZXldO1xuXHRcdFxuXHRcdGlmKCFtb2Qpe1xuXHRcdFx0Y29uc29sZS5lcnJvcihcIlRhYnVsYXRvciBtb2R1bGUgbm90IGluc3RhbGxlZDogXCIgKyBrZXkpO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gbW9kO1xuXHR9XG59XG5cbi8vZGVmYXVsdCBzZXR1cCBvcHRpb25zXG5UYWJ1bGF0b3IuZGVmYXVsdE9wdGlvbnMgPSBkZWZhdWx0T3B0aW9ucztcblxuLy9iaW5kIG1vZHVsZXMgYW5kIHN0YXRpYyBmdW5jdGlvbmFsaXR5XG5uZXcgTW9kdWxlQmluZGVyKFRhYnVsYXRvcik7XG5cbi8vdGFidWxhdG9yIHdpdGggYWxsIG1vZHVsZXMgaW5zdGFsbGVkXG5cbmNsYXNzIFRhYnVsYXRvckZ1bGwgZXh0ZW5kcyBUYWJ1bGF0b3Ige31cblxuLy9iaW5kIG1vZHVsZXMgYW5kIHN0YXRpYyBmdW5jdGlvbmFsaXR5XG5uZXcgTW9kdWxlQmluZGVyKFRhYnVsYXRvckZ1bGwsIG1vZHVsZXMpO1xuXG5jbGFzcyBQc2V1ZG9Sb3cge1xuXG5cdGNvbnN0cnVjdG9yICh0eXBlKXtcblx0XHR0aGlzLnR5cGUgPSB0eXBlO1xuXHRcdHRoaXMuZWxlbWVudCA9IHRoaXMuX2NyZWF0ZUVsZW1lbnQoKTtcblx0fVxuXG5cdF9jcmVhdGVFbGVtZW50KCl7XG5cdFx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRlbC5jbGFzc0xpc3QuYWRkKFwidGFidWxhdG9yLXJvd1wiKTtcblx0XHRyZXR1cm4gZWw7XG5cdH1cblxuXHRnZXRFbGVtZW50KCl7XG5cdFx0cmV0dXJuIHRoaXMuZWxlbWVudDtcblx0fVxuXG5cdGdldENvbXBvbmVudCgpe1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGdldERhdGEoKXtcblx0XHRyZXR1cm4ge307XG5cdH1cblxuXHRnZXRIZWlnaHQoKXtcblx0XHRyZXR1cm4gdGhpcy5lbGVtZW50Lm91dGVySGVpZ2h0O1xuXHR9XG5cblx0aW5pdGlhbGl6ZSgpe31cblxuXHRyZWluaXRpYWxpemUoKXt9XG5cblx0bm9ybWFsaXplSGVpZ2h0KCl7fVxuXG5cdGdlbmVyYXRlQ2VsbHMoKXt9XG5cblx0cmVpbml0aWFsaXplSGVpZ2h0KCl7fVxuXG5cdGNhbGNIZWlnaHQoKXt9XG5cblx0c2V0Q2VsbEhlaWdodCgpe31cblxuXHRjbGVhckNlbGxIZWlnaHQoKXt9XG59XG5cbmV4cG9ydCB7IEFjY2Vzc29yIGFzIEFjY2Vzc29yTW9kdWxlLCBBamF4IGFzIEFqYXhNb2R1bGUsIENhbGNDb21wb25lbnQsIENlbGxDb21wb25lbnQsIENsaXBib2FyZCBhcyBDbGlwYm9hcmRNb2R1bGUsIENvbHVtbkNhbGNzIGFzIENvbHVtbkNhbGNzTW9kdWxlLCBDb2x1bW5Db21wb25lbnQsIERhdGFUcmVlIGFzIERhdGFUcmVlTW9kdWxlLCBEb3dubG9hZCBhcyBEb3dubG9hZE1vZHVsZSwgRWRpdCQxIGFzIEVkaXRNb2R1bGUsIEV4cG9ydCBhcyBFeHBvcnRNb2R1bGUsIEZpbHRlciBhcyBGaWx0ZXJNb2R1bGUsIEZvcm1hdCBhcyBGb3JtYXRNb2R1bGUsIEZyb3plbkNvbHVtbnMgYXMgRnJvemVuQ29sdW1uc01vZHVsZSwgRnJvemVuUm93cyBhcyBGcm96ZW5Sb3dzTW9kdWxlLCBHcm91cENvbXBvbmVudCwgR3JvdXBSb3dzIGFzIEdyb3VwUm93c01vZHVsZSwgSGlzdG9yeSBhcyBIaXN0b3J5TW9kdWxlLCBIdG1sVGFibGVJbXBvcnQgYXMgSHRtbFRhYmxlSW1wb3J0TW9kdWxlLCBJbXBvcnQgYXMgSW1wb3J0TW9kdWxlLCBJbnRlcmFjdGlvbiBhcyBJbnRlcmFjdGlvbk1vZHVsZSwgS2V5YmluZGluZ3MgYXMgS2V5YmluZGluZ3NNb2R1bGUsIE1lbnUgYXMgTWVudU1vZHVsZSwgTW9kdWxlLCBNb3ZlQ29sdW1ucyBhcyBNb3ZlQ29sdW1uc01vZHVsZSwgTW92ZVJvd3MgYXMgTW92ZVJvd3NNb2R1bGUsIE11dGF0b3IgYXMgTXV0YXRvck1vZHVsZSwgUGFnZSBhcyBQYWdlTW9kdWxlLCBQZXJzaXN0ZW5jZSBhcyBQZXJzaXN0ZW5jZU1vZHVsZSwgUG9wdXAkMSBhcyBQb3B1cE1vZHVsZSwgUHJpbnQgYXMgUHJpbnRNb2R1bGUsIFBzZXVkb1JvdywgUmVhY3RpdmVEYXRhIGFzIFJlYWN0aXZlRGF0YU1vZHVsZSwgUmVuZGVyZXIsIFJlc2l6ZUNvbHVtbnMgYXMgUmVzaXplQ29sdW1uc01vZHVsZSwgUmVzaXplUm93cyBhcyBSZXNpemVSb3dzTW9kdWxlLCBSZXNpemVUYWJsZSBhcyBSZXNpemVUYWJsZU1vZHVsZSwgUmVzcG9uc2l2ZUxheW91dCBhcyBSZXNwb25zaXZlTGF5b3V0TW9kdWxlLCBSb3dDb21wb25lbnQsIFNlbGVjdFJvdyBhcyBTZWxlY3RSb3dNb2R1bGUsIFNvcnQgYXMgU29ydE1vZHVsZSwgVGFidWxhdG9yLCBUYWJ1bGF0b3JGdWxsLCBUb29sdGlwIGFzIFRvb2x0aXBNb2R1bGUsIFZhbGlkYXRlIGFzIFZhbGlkYXRlTW9kdWxlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10YWJ1bGF0b3JfZXNtLmpzLm1hcFxuIiwiaW1wb3J0IHtUYWJ1bGF0b3IsIEZvcm1hdE1vZHVsZSwgRWRpdE1vZHVsZSwgSW1wb3J0TW9kdWxlLCBGcm96ZW5Db2x1bW5zTW9kdWxlLCBSZWFjdGl2ZURhdGFNb2R1bGV9IGZyb20gJ3RhYnVsYXRvci10YWJsZXMnO1xuaW1wb3J0IERhdGEgZnJvbSAnLi9maWxlcy93ZWVrNF9waWNrLmNzdic7XG5pbXBvcnQgeyBkYXRhTWV0aG9kcywgcGxheWVyc0NvdW50IH0gZnJvbSAnLi9kYXRhJztcbmltcG9ydCB7IGVkaXREb20gfSBmcm9tICcuL2RvbSc7XG5cblRhYnVsYXRvci5yZWdpc3Rlck1vZHVsZShbRm9ybWF0TW9kdWxlLCBFZGl0TW9kdWxlLCBJbXBvcnRNb2R1bGUsIEZyb3plbkNvbHVtbnNNb2R1bGUsIFJlYWN0aXZlRGF0YU1vZHVsZV0pO1xuXG4vLyBhdCB3aWNoIHdlZWsgYXJlIHdlIGluIHRoZSBwb29sXG5leHBvcnQgY29uc3Qgd2VlayA9IDQ7XG4vLyBpcyB0aGUgZmlsZSBhIHJlc3VsdHMgZmlsZSBvciBwaWNrIGZpbGVcbmNvbnN0IGlzUmVzdWx0c0ZpbGUgPSBmYWxzZTtcbi8vIERhdGEgaXMgaW1wb3J0IGZyb20gY3N2IGZpbGVcbmxldCBhcnJheURhdGEgPSBEYXRhO1xuLy8gaW5pdGlhbGlzYXRpb24gb2YgdGhlIHBsYXllciBkYXRhXG5sZXQgcGxheWVyTWV0cmljcyA9IFsnY3VycmVudFBsYXllcicsICdhLXBsYXllcicsIDFdO1xuXG5cbmNvbnN0IHRhYmxlTWV0aG9kcyA9ICgoKSA9PiB7XG4gICAgLy8gRnVuY3Rpb24gdG8gYWRkIGNsYXNzIHRvIGEgcGxheWVyXG4gICAgY29uc3QgdXBkYXRlUGxheWVyTWV0cmljcyA9IChyb3cpID0+IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHJvdy5nZXREYXRhKCk7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSByb3cuZ2V0RWxlbWVudCgpO1xuICAgICAgICBjb25zdCBjdXJyZW50UGxheWVyID0gZGF0YS5qb3VldXI7XG4gICAgICAgIHBsYXllck1ldHJpY3NbMF0gPSBjdXJyZW50UGxheWVyO1xuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQocGxheWVyTWV0cmljc1sxXSk7XG4gICAgICAgIGRhdGEucGFydGljaXBhdGlvbiA9IHBsYXllck1ldHJpY3NbMl07XG4gICAgfTtcblxuICAgIC8vIEZ1bmN0aW9uIHRoYXQgd2lsbCBjaGFuZ2UgY2xhc3Mgb2YgYSByb3cgd2hlbiBpdCBpcyBhIG5ldyBwbGF5ZXIgb24gdGhhdCByb3cgXG4gICAgY29uc3QgdXBkYXRlTmV4dFJvd01ldHJpY3MgPSAocm93KSA9PiB7XG4gICAgICAgIGlmIChyb3cuZ2V0TmV4dFJvdygpICYmIHJvdy5nZXROZXh0Um93KCkuZ2V0RGF0YSgpLmpvdWV1ciAhPT0gcGxheWVyTWV0cmljc1swXSkge1xuICAgICAgICAgICAgcGxheWVyTWV0cmljc1sxXSA9IChwbGF5ZXJNZXRyaWNzWzFdID09PSAnYS1wbGF5ZXInKSA/ICdhbm90aGVyLXBsYXllcicgOiAnYS1wbGF5ZXInO1xuICAgICAgICAgICAgcGxheWVyTWV0cmljc1syXSA9IDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwbGF5ZXJNZXRyaWNzWzJdKys7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGdW5jdGlvbiB0aGF0IGNoZWNrIGlmIGEgdGVhbSBoYXMgbG9zdC4gSXQga25vd3MgYSB0ZWFtIGhhcyBsb3N0IGRlcGVuZGluZyBvbiBkaWZmZXJlbnQgc2NlbmFyaW8gbGlrZSB3aGljaCB3ZWVrIGFyZSB3ZSxcbiAgICAvLyAgaWYgdGhlIGZpbGUgaXMgYSBhIHR5cGUgb2YgcGljayBvciByZXN1bHRzIGFuZCBmaW5hbGx5IGlmLCBvbiB0aGUgc2FtZSByb3csIHRoZSBuZXh0IHdlZWsgY2VsbCBpcyBlbXB0eS4gXG4gICAgY29uc3QgY2hlY2tJZlRlYW1Mb3N0ID0gKHJvdykgPT4ge1xuICAgICAgICBjb25zdCBkYXRhID0gcm93LmdldERhdGEoKTtcblxuICAgICAgICBjb25zdCBhZGRHcmF5c2NhbGVFZmZlY3QgPSAoY2VsbCkgPT4ge1xuICAgICAgICAgICAgY2VsbC5nZXRFbGVtZW50KCkuY2xhc3NMaXN0LmFkZCgnZ3JheXNjYWxlLWVmZmVjdCcpO1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgc3dpdGNoICh3ZWVrKSB7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgaWYgKGlzUmVzdWx0c0ZpbGUgJiYgZGF0YS53aW4gPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtBJykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBpZiAoaXNSZXN1bHRzRmlsZSAmJiBkYXRhLndpbiA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0InKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLndlZWtCLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrQScpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlzUmVzdWx0c0ZpbGUgJiYgZGF0YS53ZWVrQi50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrQScpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgaWYgKGlzUmVzdWx0c0ZpbGUgJiYgZGF0YS53aW4gPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtDJykpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS53ZWVrQy50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0InKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEud2Vla0IudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtBJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghaXNSZXN1bHRzRmlsZSAmJiBkYXRhLndlZWtDLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtCJykpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS53ZWVrQi50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0EnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgaWYgKGlzUmVzdWx0c0ZpbGUgJiYgZGF0YS53aW4gPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtEJykpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS53ZWVrRC50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0MnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEud2Vla0MudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtCJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLndlZWtCLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrQScpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlzUmVzdWx0c0ZpbGUgJiYgZGF0YS53ZWVrRC50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrQycpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEud2Vla0MudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtCJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLndlZWtCLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrQScpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICBpZiAoaXNSZXN1bHRzRmlsZSAmJiBkYXRhLndpbiA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0UnKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLndlZWtFLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrRCcpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS53ZWVrRC50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0MnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEud2Vla0MudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtCJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLndlZWtCLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrQScpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlzUmVzdWx0c0ZpbGUgJiYgZGF0YS53ZWVrRS50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrRCcpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEud2Vla0QudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtDJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLndlZWtDLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrQicpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS53ZWVrQi50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0EnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgaWYgKGlzUmVzdWx0c0ZpbGUgJiYgZGF0YS53aW4gPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtGJykpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS53ZWVrRi50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0UnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEud2Vla0UudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtEJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLndlZWtELnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrQycpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS53ZWVrQy50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0InKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEud2Vla0IudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtBJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghaXNSZXN1bHRzRmlsZSAmJiBkYXRhLndlZWtGLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtFJykpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS53ZWVrRS50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0QnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEud2Vla0QudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtDJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLndlZWtDLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrQicpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS53ZWVrQi50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0EnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgaWYgKGlzUmVzdWx0c0ZpbGUgJiYgZGF0YS53aW4gPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtHJykpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS53ZWVrRy50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0YnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEud2Vla0YudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtFJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLndlZWtFLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrRCcpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS53ZWVrRC50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0MnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEud2Vla0MudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtCJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLndlZWtCLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrQScpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlzUmVzdWx0c0ZpbGUgJiYgZGF0YS53ZWVrRy50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrRicpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEud2Vla0YudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtFJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLndlZWtFLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrRCcpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS53ZWVrRC50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEdyYXlzY2FsZUVmZmVjdChyb3cuZ2V0Q2VsbCgnd2Vla0MnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEud2Vla0MudHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRHcmF5c2NhbGVFZmZlY3Qocm93LmdldENlbGwoJ3dlZWtCJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLndlZWtCLnRyaW0oKSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkR3JheXNjYWxlRWZmZWN0KHJvdy5nZXRDZWxsKCd3ZWVrQScpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgLy8gRGVmYXVsdCBjYXNlIGZvciB3ZWVrcyBvdGhlciB0aGFuIHRoZSBzcGVjaWZpZWQgb25lc1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIEZ1bmN0aW9uIHRoYXQgZm9ybWF0IHRoZSBjZWxsIG9mIHRoZSB3ZWVrcyBjb2x1bW5zIGJhc2Ugb24gdGhlIHZhbHVlIHByb3ZpZGVkIGluIHRoZSBjc3YgZmlsZS4gXG4gICAgY29uc3QgZm9ybWF0Q2VsbCA9IChjZWxsLCB2YWx1ZSwgY3VycmVudFdlZWspID0+IHtcbiAgICAgICAgY29uc3QgbG9nbyA9IGRhdGFNZXRob2RzLmdldExvZ28odmFsdWUpO1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gY2VsbC5nZXRFbGVtZW50KCk7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCh2YWx1ZS5yZXBsYWNlKC9cXHMrL2csICctJykpO1xuICAgICAgICAoY3VycmVudFdlZWsgPT09IHdlZWspICYmIChkYXRhTWV0aG9kcy5pbmNyZW1lbnRQbGF5ZXJzQ291bnQoKSwgZGF0YU1ldGhvZHMuaW5jcmVtZW50Q291bnQodmFsdWUpKTtcblxuICAgICAgICByZXR1cm4gYDxpbWcgc3JjPSdpbWFnZXMvJHtsb2dvfSc+YDtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBpcyB0aGUgc3RyaW5nIGhhcyBubyBjaGFyYWN0ZXIgYW5kIHJldHVybiBhbiBlbXB0eSBzdHJpbmdcbiAgICBjb25zdCBpc0VtcHR5ID0gKHZhbHVlKSA9PiB7XG4gICAgICAgIHJldHVybiB2YWx1ZS50cmltKCkgPT09IFwiXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdXBkYXRlUGxheWVyTWV0cmljcyxcbiAgICAgICAgdXBkYXRlTmV4dFJvd01ldHJpY3MsXG4gICAgICAgIGNoZWNrSWZUZWFtTG9zdCxcbiAgICAgICAgZm9ybWF0Q2VsbCxcbiAgICAgICAgaXNFbXB0eVxuICAgIH07XG59KSgpO1xuXG4vLyBkZWZpbmUgdGFibGVcbnZhciB0YWJsZSA9IG5ldyBUYWJ1bGF0b3IoXCIjcGljay10YWJsZVwiLCB7XG4gICAgZGF0YTphcnJheURhdGEsIC8vRGF0YSBpcyB0aGUgY3N2IGZpbGVzIGRhdGFcbiAgICByZWFjdGl2ZURhdGE6dHJ1ZSwgLy9lbmFibGUgcmVhY3RpdmUgZGF0YVxuICAgIGltcG9ydEZvcm1hdDpcImFycmF5XCIsXG4gICAgcm93SGVpZ2h0OjQwLFxuICAgIHJvd0Zvcm1hdHRlcjpmdW5jdGlvbihyb3cpe1xuICAgICAgICB0YWJsZU1ldGhvZHMudXBkYXRlUGxheWVyTWV0cmljcyhyb3cpO1xuICAgICAgICB0YWJsZU1ldGhvZHMudXBkYXRlTmV4dFJvd01ldHJpY3Mocm93KTtcbiAgICAgICAgdGFibGVNZXRob2RzLmNoZWNrSWZUZWFtTG9zdChyb3cpO1xuICAgIH0sXG4gICAgY29sdW1uczpbXG4gICAgICAgIHt0aXRsZTpcIndpblwiLCBmaWVsZDpcIndpblwiLCBmcm96ZW46dHJ1ZSwgdmlzaWJsZTpmYWxzZX0sXG4gICAgICAgIHt0aXRsZTpcIiNcIiwgZmllbGQ6XCJwYXJ0aWNpcGF0aW9uXCIsIGhvekFsaWduOlwiY2VudGVyXCIsIGhlYWRlckhvekFsaWduOlwiY2VudGVyXCIsIHZlcnRBbGlnbjpcIm1pZGRsZVwiLCBzb3J0ZXI6XCJudW1iZXJcIiwgd2lkdGg6NDAsIGZyb3plbjp0cnVlfSxcbiAgICAgICAge3RpdGxlOlwiSk9VRVVSU1wiLCBmaWVsZDpcImpvdWV1clwiLCBzb3J0ZXI6XCJzdHJpbmdcIiwgaGVhZGVySG96QWxpZ246XCJjZW50ZXJcIiwgaG96QWxpZ246XCJsZWZ0XCIsIHZlcnRBbGlnbjpcIm1pZGRsZVwiLCBmb3JtYXR0ZXI6XCJwbGFpbnRleHRcIiwgZnJvemVuOnRydWV9LFxuICAgICAgICB7dGl0bGU6XCIxMVwiLCBmaWVsZDpcIndlZWtBXCIsIGhvekFsaWduOlwiY2VudGVyXCIsIGhlYWRlckhvekFsaWduOlwiY2VudGVyXCIsIHZlcnRBbGlnbjpcIm1pZGRsZVwiLCB3aWR0aDo1MCwgZm9ybWF0dGVyOmZ1bmN0aW9uKGNlbGwsIGZvcm1hdHRlclBhcmFtcywgb25SZW5kZXJlZCl7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGNlbGwuZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgIGNvbnN0IFdFRUsgPSAxO1xuICAgICAgICAgICAgLy9mb3JtYXQgdGhlIHNlbGVjdGVkIGNlbGxcbiAgICAgICAgICAgIGlmICghdGFibGVNZXRob2RzLmlzRW1wdHkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhYmxlTWV0aG9kcy5mb3JtYXRDZWxsKGNlbGwsIHZhbHVlLnRvTG93ZXJDYXNlKCksIFdFRUspO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICcnOyAvLyByZXR1cm4gYW4gZW1wdHkgc3RyaW5nIGlmIHRoZSBjZWxsIHZhbHVlIGlzIGVtcHR5XG4gICAgICAgIH19LFxuICAgICAgICB7dGl0bGU6XCIxOFwiLCBmaWVsZDpcIndlZWtCXCIsIGhvekFsaWduOlwiY2VudGVyXCIsIGhlYWRlckhvekFsaWduOlwiY2VudGVyXCIsIHZlcnRBbGlnbjpcIm1pZGRsZVwiLCB3aWR0aDo1MCwgZm9ybWF0dGVyOmZ1bmN0aW9uKGNlbGwsIGZvcm1hdHRlclBhcmFtcywgb25SZW5kZXJlZCl7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGNlbGwuZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgIGNvbnN0IFdFRUsgPSAyO1xuICAgICAgICAgICAgLy9mb3JtYXQgdGhlIHNlbGVjdGVkIGNlbGxcbiAgICAgICAgICAgIGlmICghdGFibGVNZXRob2RzLmlzRW1wdHkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhYmxlTWV0aG9kcy5mb3JtYXRDZWxsKGNlbGwsIHZhbHVlLnRvTG93ZXJDYXNlKCksIFdFRUspO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICcnOyAvLyByZXR1cm4gYW4gZW1wdHkgc3RyaW5nIGlmIHRoZSBjZWxsIHZhbHVlIGlzIGVtcHR5XG4gICAgICAgIH19LFxuICAgICAgICB7dGl0bGU6XCIyNVwiLCBmaWVsZDpcIndlZWtDXCIsIGhvekFsaWduOlwiY2VudGVyXCIsIGhlYWRlckhvekFsaWduOlwiY2VudGVyXCIsIHZlcnRBbGlnbjpcIm1pZGRsZVwiLCB3aWR0aDo1MCwgZm9ybWF0dGVyOmZ1bmN0aW9uKGNlbGwsIGZvcm1hdHRlclBhcmFtcywgb25SZW5kZXJlZCl7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGNlbGwuZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgIGNvbnN0IFdFRUsgPSAzO1xuICAgICAgICAgICAgLy9mb3JtYXQgdGhlIHNlbGVjdGVkIGNlbGxcbiAgICAgICAgICAgIGlmICghdGFibGVNZXRob2RzLmlzRW1wdHkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhYmxlTWV0aG9kcy5mb3JtYXRDZWxsKGNlbGwsIHZhbHVlLnRvTG93ZXJDYXNlKCksIFdFRUspO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICcnOyAvLyByZXR1cm4gYW4gZW1wdHkgc3RyaW5nIGlmIHRoZSBjZWxsIHZhbHVlIGlzIGVtcHR5XG4gICAgICAgIH19LFxuICAgICAgICB7dGl0bGU6XCIyXCIsIGZpZWxkOlwid2Vla0RcIiwgaG96QWxpZ246XCJjZW50ZXJcIiwgaGVhZGVySG96QWxpZ246XCJjZW50ZXJcIiwgdmVydEFsaWduOlwibWlkZGxlXCIsIHdpZHRoOjUwLCBmb3JtYXR0ZXI6ZnVuY3Rpb24oY2VsbCwgZm9ybWF0dGVyUGFyYW1zLCBvblJlbmRlcmVkKXtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY2VsbC5nZXRWYWx1ZSgpO1xuICAgICAgICAgICAgY29uc3QgV0VFSyA9IDQ7XG4gICAgICAgICAgICAvL2Zvcm1hdCB0aGUgc2VsZWN0ZWQgY2VsbFxuICAgICAgICAgICAgaWYgKCF0YWJsZU1ldGhvZHMuaXNFbXB0eSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFibGVNZXRob2RzLmZvcm1hdENlbGwoY2VsbCwgdmFsdWUudG9Mb3dlckNhc2UoKSwgV0VFSyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJyc7IC8vIHJldHVybiBhbiBlbXB0eSBzdHJpbmcgaWYgdGhlIGNlbGwgdmFsdWUgaXMgZW1wdHlcbiAgICAgICAgfX0sXG4gICAgICAgIHt0aXRsZTpcIjlcIiwgZmllbGQ6XCJ3ZWVrRVwiLCBob3pBbGlnbjpcImNlbnRlclwiLCBoZWFkZXJIb3pBbGlnbjpcImNlbnRlclwiLCB2ZXJ0QWxpZ246XCJtaWRkbGVcIiwgd2lkdGg6NTAsIGZvcm1hdHRlcjpmdW5jdGlvbihjZWxsLCBmb3JtYXR0ZXJQYXJhbXMsIG9uUmVuZGVyZWQpe1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBjZWxsLmdldFZhbHVlKCk7XG4gICAgICAgICAgICBjb25zdCBXRUVLID0gNTtcbiAgICAgICAgICAgIC8vZm9ybWF0IHRoZSBzZWxlY3RlZCBjZWxsXG4gICAgICAgICAgICBpZiAoIXRhYmxlTWV0aG9kcy5pc0VtcHR5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0YWJsZU1ldGhvZHMuZm9ybWF0Q2VsbChjZWxsLCB2YWx1ZS50b0xvd2VyQ2FzZSgpLCBXRUVLKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAnJzsgLy8gcmV0dXJuIGFuIGVtcHR5IHN0cmluZyBpZiB0aGUgY2VsbCB2YWx1ZSBpcyBlbXB0eVxuICAgICAgICB9fSxcbiAgICAgICAge3RpdGxlOlwiMTZcIiwgZmllbGQ6XCJ3ZWVrRlwiLCBob3pBbGlnbjpcImNlbnRlclwiLCBoZWFkZXJIb3pBbGlnbjpcImNlbnRlclwiLCB2ZXJ0QWxpZ246XCJtaWRkbGVcIiwgd2lkdGg6NTAsIGZvcm1hdHRlcjpmdW5jdGlvbihjZWxsLCBmb3JtYXR0ZXJQYXJhbXMsIG9uUmVuZGVyZWQpe1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBjZWxsLmdldFZhbHVlKCk7XG4gICAgICAgICAgICBjb25zdCBXRUVLID0gNjtcbiAgICAgICAgICAgIC8vZm9ybWF0IHRoZSBzZWxlY3RlZCBjZWxsXG4gICAgICAgICAgICBpZiAoIXRhYmxlTWV0aG9kcy5pc0VtcHR5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0YWJsZU1ldGhvZHMuZm9ybWF0Q2VsbChjZWxsLCB2YWx1ZS50b0xvd2VyQ2FzZSgpLCBXRUVLKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAnJzsgLy8gcmV0dXJuIGFuIGVtcHR5IHN0cmluZyBpZiB0aGUgY2VsbCB2YWx1ZSBpcyBlbXB0eVxuICAgICAgICB9fSxcbiAgICAgICAge3RpdGxlOlwiMjNcIiwgZmllbGQ6XCJ3ZWVrR1wiLCBob3pBbGlnbjpcImNlbnRlclwiLCBoZWFkZXJIb3pBbGlnbjpcImNlbnRlclwiLCB2ZXJ0QWxpZ246XCJtaWRkbGVcIiwgd2lkdGg6NTAsIGZvcm1hdHRlcjpmdW5jdGlvbihjZWxsLCBmb3JtYXR0ZXJQYXJhbXMsIG9uUmVuZGVyZWQpe1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBjZWxsLmdldFZhbHVlKCk7XG4gICAgICAgICAgICBjb25zdCBXRUVLID0gNztcbiAgICAgICAgICAgIC8vZm9ybWF0IHRoZSBzZWxlY3RlZCBjZWxsXG4gICAgICAgICAgICBpZiAoIXRhYmxlTWV0aG9kcy5pc0VtcHR5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0YWJsZU1ldGhvZHMuZm9ybWF0Q2VsbChjZWxsLCB2YWx1ZS50b0xvd2VyQ2FzZSgpLCBXRUVLKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAnJzsgLy8gcmV0dXJuIGFuIGVtcHR5IHN0cmluZyBpZiB0aGUgY2VsbCB2YWx1ZSBpcyBlbXB0eVxuICAgICAgICB9fSwvKlxuICAgICAgICB7dGl0bGU6XCIzMFwiLCBmaWVsZDpcIndlZWtIXCIsIGhvekFsaWduOlwiY2VudGVyXCIsIGhlYWRlckhvekFsaWduOlwiY2VudGVyXCIsIHZlcnRBbGlnbjpcIm1pZGRsZVwiLCB3aWR0aDo1MCwgZm9ybWF0dGVyOmZ1bmN0aW9uKGNlbGwsIGZvcm1hdHRlclBhcmFtcywgb25SZW5kZXJlZCl7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGNlbGwuZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgIGNvbnN0IFdFRUsgPSA4O1xuICAgICAgICAgICAgLy9mb3JtYXQgdGhlIHNlbGVjdGVkIGNlbGxcbiAgICAgICAgICAgIGlmICghdGFibGVNZXRob2RzLmlzRW1wdHkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhYmxlTWV0aG9kcy5mb3JtYXRDZWxsKGNlbGwsIHZhbHVlLnRvTG93ZXJDYXNlKCksIFdFRUspO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICcnOyAvLyByZXR1cm4gYW4gZW1wdHkgc3RyaW5nIGlmIHRoZSBjZWxsIHZhbHVlIGlzIGVtcHR5XG4gICAgICAgIH19LFxuICAgICAgICB7dGl0bGU6XCI2XCIsIGZpZWxkOlwid2Vla0lcIiwgaG96QWxpZ246XCJjZW50ZXJcIiwgaGVhZGVySG96QWxpZ246XCJjZW50ZXJcIiwgdmVydEFsaWduOlwibWlkZGxlXCIsIHdpZHRoOjUwLCBmb3JtYXR0ZXI6ZnVuY3Rpb24oY2VsbCwgZm9ybWF0dGVyUGFyYW1zLCBvblJlbmRlcmVkKXtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY2VsbC5nZXRWYWx1ZSgpO1xuICAgICAgICAgICAgY29uc3QgV0VFSyA9IDk7XG4gICAgICAgICAgICAvL2Zvcm1hdCB0aGUgc2VsZWN0ZWQgY2VsbFxuICAgICAgICAgICAgaWYgKCF0YWJsZU1ldGhvZHMuaXNFbXB0eSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFibGVNZXRob2RzLmZvcm1hdENlbGwoY2VsbCwgdmFsdWUudG9Mb3dlckNhc2UoKSwgV0VFSyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJyc7IC8vIHJldHVybiBhbiBlbXB0eSBzdHJpbmcgaWYgdGhlIGNlbGwgdmFsdWUgaXMgZW1wdHlcbiAgICAgICAgfX0sXG4gICAgICAgIHt0aXRsZTpcIjEzXCIsIGZpZWxkOlwid2Vla0pcIiwgaG96QWxpZ246XCJjZW50ZXJcIiwgaGVhZGVySG96QWxpZ246XCJjZW50ZXJcIiwgdmVydEFsaWduOlwibWlkZGxlXCIsIHdpZHRoOjUwLCBmb3JtYXR0ZXI6ZnVuY3Rpb24oY2VsbCwgZm9ybWF0dGVyUGFyYW1zLCBvblJlbmRlcmVkKXtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY2VsbC5nZXRWYWx1ZSgpO1xuICAgICAgICAgICAgY29uc3QgV0VFSyA9IDEwO1xuICAgICAgICAgICAgLy9mb3JtYXQgdGhlIHNlbGVjdGVkIGNlbGxcbiAgICAgICAgICAgIGlmICghdGFibGVNZXRob2RzLmlzRW1wdHkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhYmxlTWV0aG9kcy5mb3JtYXRDZWxsKGNlbGwsIHZhbHVlLnRvTG93ZXJDYXNlKCksIFdFRUspO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICcnOyAvLyByZXR1cm4gYW4gZW1wdHkgc3RyaW5nIGlmIHRoZSBjZWxsIHZhbHVlIGlzIGVtcHR5XG4gICAgICAgIH19ICovXG4gICAgXSxcbn0pO1xuXG50YWJsZS5vbihcImRhdGFQcm9jZXNzZWRcIiwgZnVuY3Rpb24oKXtcbiAgICBsZXQgdG9wM3RlYW1zID0gZGF0YU1ldGhvZHMuZ2V0TW9zdENvbW1tb25UZWFtcygpO1xuXG4gICAgLy9kZWZpbmUgc29tZSBzYW1wbGUgZGF0YVxuICAgIHZhciB0YWJsZWRhdGEgPSBbXG4gICAgICAgIHtpZDoxLCBwb3NpdGlvbjpcIjFcIiwgZXF1aXBlOmAke3RvcDN0ZWFtc1swXS50ZWFtfWAsIHBpY2s6YCR7dG9wM3RlYW1zWzBdLmNvdW50fWB9LFxuICAgICAgICB7aWQ6MiwgcG9zaXRpb246XCIyXCIsIGVxdWlwZTpgJHt0b3AzdGVhbXNbMV0udGVhbX1gLCBwaWNrOmAke3RvcDN0ZWFtc1sxXS5jb3VudH1gfSxcbiAgICAgICAge2lkOjMsIHBvc2l0aW9uOlwiM1wiLCBlcXVpcGU6YCR7dG9wM3RlYW1zWzJdLnRlYW19YCwgcGljazpgJHt0b3AzdGVhbXNbMl0uY291bnR9YH0sXG4gICAgXTtcbiAgICBcbiAgICAvL2NyZWF0ZSBUYWJ1bGF0b3Igb24gRE9NIGVsZW1lbnQgd2l0aCBpZCBcImV4YW1wbGUtdGFibGVcIlxuICAgIHZhciBzdGF0c1RhYmxlID0gbmV3IFRhYnVsYXRvcihcIiNzdGF0cy10YWJsZVwiLCB7XG4gICAgICAgIGRhdGE6dGFibGVkYXRhLCAvL2Fzc2lnbiBkYXRhIHRvIHRhYmxlXG4gICAgICAgIGxheW91dDpcImZpdENvbHVtbnNcIixcbiAgICAgICAgcm93SGVpZ2h0OjUwLFxuICAgICAgICByb3dGb3JtYXR0ZXI6ZnVuY3Rpb24ocm93KXtcbiAgICAgICAgICAgIHZhciBkYXRhID0gcm93LmdldERhdGEoKTsgLy9nZXQgZGF0YSBvYmplY3QgZm9yIHJvd1xuICAgIFxuICAgICAgICAgICAgaWYoZGF0YS5lcXVpcGUgPT0gYCR7dG9wM3RlYW1zWzBdLnRlYW19YCl7XG4gICAgICAgICAgICAgICAgcm93LmdldEVsZW1lbnQoKS5jbGFzc0xpc3QuYWRkKHRvcDN0ZWFtc1swXS50ZWFtLnJlcGxhY2UoL1xccysvZywgJy0nKS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YS5lcXVpcGUgPT0gYCR7dG9wM3RlYW1zWzFdLnRlYW19YCkge1xuICAgICAgICAgICAgICAgIHJvdy5nZXRFbGVtZW50KCkuY2xhc3NMaXN0LmFkZCh0b3AzdGVhbXNbMV0udGVhbS5yZXBsYWNlKC9cXHMrL2csICctJykudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJvdy5nZXRFbGVtZW50KCkuY2xhc3NMaXN0LmFkZCh0b3AzdGVhbXNbMl0udGVhbS5yZXBsYWNlKC9cXHMrL2csICctJykudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNvbHVtbnM6WyAvL0RlZmluZSBUYWJsZSBDb2x1bW5zXG4gICAgICAgICAgICB7dGl0bGU6XCIjXCIsIGZpZWxkOlwicG9zaXRpb25cIiwgd2lkdGg6MjUsIGhlYWRlckhvekFsaWduOlwiY2VudGVyXCIsIGhvekFsaWduOlwiY2VudGVyXCIsIHZlcnRBbGlnbjpcIm1pZGRsZVwifSxcbiAgICAgICAgICAgIHt0aXRsZTpcIsOJUVVJUEVcIiwgZmllbGQ6XCJlcXVpcGVcIiwgaGVhZGVySG96QWxpZ246XCJjZW50ZXJcIiwgdmVydEFsaWduOlwibWlkZGxlXCIsIGZvcm1hdHRlcjpmdW5jdGlvbihjZWxsLCBmb3JtYXR0ZXJQYXJhbXMsIG9uUmVuZGVyZWQpe1xuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IGNlbGwuZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgICAgICBsZXQgbG9nbyA9IGRhdGFNZXRob2RzLmdldExvZ28odmFsdWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBgPGltZyBzcmM9J2ltYWdlcy8ke2xvZ299Jz48ZGl2PiR7dmFsdWV9PC9kaXY+YDsgLy9yZXR1cm4gdGhlIGNvbnRlbnRzIG9mIHRoZSBjZWxsO1xuICAgICAgICAgICAgfSx9LFxuICAgICAgICAgICAge3RpdGxlOlwiUElDS1wiLCBmaWVsZDpcInBpY2tcIiwgd2lkdGg6NTUsIGhvekFsaWduOlwiY2VudGVyXCIsIGhlYWRlckhvekFsaWduOlwiY2VudGVyXCIsIHZlcnRBbGlnbjpcIm1pZGRsZVwifSxcbiAgICAgICAgXSxcbiAgICB9KTtcblxuICAgIHN0YXRzVGFibGUub24oXCJ0YWJsZUJ1aWx0XCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgIGVkaXREb20uYWRkUGxheWVyc0NvdW50KHBsYXllcnNDb3VudCk7XG4gICAgICAgIGVkaXREb20uYWRkQ3VycmVudFdlZWsod2Vlayk7XG4gICAgfSlcbn0pOyIsImltcG9ydCBEYXRhIGZyb20gJy4vZmlsZXMvdGVhbS5jc3YnO1xuaW1wb3J0IHsgd2VlayB9IGZyb20gJy4vdGFibGUnO1xuXG4vLyBJbml0aWFsaXNlIHRoZSBsaXN0IG9mIGFsbCB0aGUgTkhMIHRlYW1zXG5leHBvcnQgdmFyIHRlYW1zTGlzdCA9IFtdO1xuZXhwb3J0IHZhciBwbGF5ZXJzQ291bnQgPSAwO1xuXG4vLyBOSEwgdGVhbSBvYmplY3RcbmNvbnN0IFRlYW0gPSAodGVhbSwgY291bnQsIHByb3Blck5hbWUpID0+IHtcbiAgcmV0dXJuIHsgdGVhbSwgY291bnQsIHByb3Blck5hbWV9O1xufTtcblxuXG5leHBvcnQgY29uc3QgZGF0YU1ldGhvZHMgPSAoKCkgPT4ge1xuICAvLyBHZXQgbG9nbyBwbmcgaW1hZ2VcbiAgY29uc3QgZ2V0TG9nbyA9ICh0ZWFtKSA9PiB7XG4gICAgbGV0IGltZztcbiAgICBzd2l0Y2ggKHRydWUpIHtcbiAgICAgIGNhc2UgdGVhbS5pbmNsdWRlcygnYW5haGVpbScpOlxuICAgICAgICBpbWcgPSAnZHVja3MtbG9nby5wbmcnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdGVhbS5pbmNsdWRlcygnYXJpem9uYScpOlxuICAgICAgICBpbWcgPSAnYXJpem9uYS1sb2dvLnBuZyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0ZWFtLmluY2x1ZGVzKCdib3N0b24nKTpcbiAgICAgICAgaW1nID0gJ2Jvc3Rvbi1icnVpbnMtbG9nby5wbmcnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdGVhbS5pbmNsdWRlcygnYnVmZmFsbycpOlxuICAgICAgICBpbWcgPSAnYnVmZmFsby1sb2dvLnBuZyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0ZWFtLmluY2x1ZGVzKCdjYWxnYXJ5Jyk6XG4gICAgICAgIGltZyA9ICdjYWxnYXJ5LWxvZ28ucG5nJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRlYW0uaW5jbHVkZXMoJ2Nhcm9saW4nKTpcbiAgICAgICAgaW1nID0gJ2Nhcm9saW5hLWxvZ28ucG5nJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRlYW0uaW5jbHVkZXMoJ2NoaWNhZ28nKTpcbiAgICAgICAgaW1nID0gJ2NoaWNhZ28tYmxhY2toYXdrcy1sb2dvLnBuZyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0ZWFtLmluY2x1ZGVzKCdjb2xvcmFkbycpOlxuICAgICAgICBpbWcgPSAnY29sb3JhZG8tbG9nby5wbmcnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdGVhbS5pbmNsdWRlcygnY29sdW1idXMnKTpcbiAgICAgICAgaW1nID0gJ2NvbHVtYnVzLWxvZ28ucG5nJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRlYW0uaW5jbHVkZXMoJ2RhbGxhcycpOlxuICAgICAgICBpbWcgPSAnZGFsbGFzLWxvZ28ucG5nJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRlYW0uaW5jbHVkZXMoJ2RldHJvaXQnKTpcbiAgICAgICAgaW1nID0gJ2RldHJvaXQtbG9nby5wbmcnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdGVhbS5pbmNsdWRlcygnZWRtb250b24nKTpcbiAgICAgICAgaW1nID0gJ2VkbW9udG9uLWxvZ28ucG5nJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRlYW0uaW5jbHVkZXMoJ2Zsb3JpZCcpOlxuICAgICAgICBpbWcgPSAnZmxvcmlkYS1sb2dvLnBuZyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0ZWFtLmluY2x1ZGVzKCdsb3MgYW5nZWxlcycpOlxuICAgICAgICBpbWcgPSAnbG9zLWFuZ2VsZXMta2luZ3MtbG9nby5wbmcnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdGVhbS5pbmNsdWRlcygnbWlubmVzJyk6XG4gICAgICAgIGltZyA9ICdtaW5uZXNvdGEtbG9nby5wbmcnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdGVhbS5pbmNsdWRlcygnbW9udHInKTpcbiAgICAgICAgaW1nID0gJ21vbnRyZWFsLWxvZ28ucG5nJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRlYW0uaW5jbHVkZXMoJ25hc2gnKTpcbiAgICAgICAgaW1nID0gJ25hc2h2aWxsZS1sb2dvLnBuZyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0ZWFtLmluY2x1ZGVzKCdqZXJzZXknKTpcbiAgICAgICAgaW1nID0gJ25ldy1qZXJzZXktbG9nby5wbmcnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdGVhbS5pbmNsdWRlcygnaXNsYW5kZXJzJyk6XG4gICAgICAgIGltZyA9ICduZXcteW9yay1pc2xhbmRlcnMtbG9nby5wbmcnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdGVhbS5pbmNsdWRlcygncmFuZ2VycycpOlxuICAgICAgICBpbWcgPSAnbmV3LXlvcmstcmFuZ2Vycy1sb2dvLnBuZyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0ZWFtLmluY2x1ZGVzKCdvdHRhd2EnKTpcbiAgICAgICAgaW1nID0gJ290dGF3YS1sb2dvLnBuZyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0ZWFtLmluY2x1ZGVzKCdwaGlsYScpOlxuICAgICAgICBpbWcgPSAncGhpbGFkZWxwaGlhLWxvZ28ucG5nJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRlYW0uaW5jbHVkZXMoJ3BpdHRzJyk6XG4gICAgICAgIGltZyA9ICdwaXR0c2J1cmdoLXBlbmd1aW5zLWxvZ28ucG5nJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRlYW0uaW5jbHVkZXMoJ3NhbiBqb3NlJyk6XG4gICAgICAgIGltZyA9ICdzYW4tam9zZS1sb2dvLnBuZyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0ZWFtLmluY2x1ZGVzKCdzZWF0Jyk6XG4gICAgICAgIGltZyA9ICdrcmFrZW4tbG9nby5wbmcnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdGVhbS5pbmNsdWRlcygnbG91aXMnKTpcbiAgICAgICAgaW1nID0gJ3N0LWxvdWlzLWxvZ28ucG5nJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRlYW0uaW5jbHVkZXMoJ3RhbXBhJyk6XG4gICAgICAgIGltZyA9ICdUQkxfZGFyay5zdmcnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdGVhbS5pbmNsdWRlcygndG9yb250bycpOlxuICAgICAgICBpbWcgPSAndG9yb250by1sb2dvLnBuZyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0ZWFtLmluY2x1ZGVzKCd2YW5jb3V2Jyk6XG4gICAgICAgIGltZyA9ICd2YW5jb3V2ZXItbG9nby5wbmcnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdGVhbS5pbmNsdWRlcygndmVnYXMnKTpcbiAgICAgICAgaW1nID0gJ3ZlZ2FzLWxvZ28ucG5nJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRlYW0uaW5jbHVkZXMoJ3dhc2gnKTpcbiAgICAgICAgaW1nID0gJ3dhc2hpbmd0b24tY2FwaXRhbHMtbG9nby5wbmcnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdGVhbS5pbmNsdWRlcygnd2lubmlwZWcnKTpcbiAgICAgICAgaW1nID0gJ3dpbm5pcGVnLWxvZ28ucG5nJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgIH1cbiAgICByZXR1cm4gaW1nO1xuICB9O1xuXG4gIC8vIENvdW50IG51bWJlciBvZiBwbGF5ZXJzIGxlZnQgaW4gdGhlIHBvb2xcbiAgY29uc3QgaW5jcmVtZW50UGxheWVyc0NvdW50ID0gKHdlZWspID0+IHtcbiAgICBwbGF5ZXJzQ291bnQrKztcbiAgfVxuICBcbiAgLy8gSW5pdGlhbGlzZSBOSEwgdGVhbXMgbGlzdFxuICBjb25zdCBpbml0aWFsaXNlVGVhbXNMaXN0ID0gKCkgPT4ge1xuICAgIGZvciAobGV0IGkgaW4gRGF0YSkge1xuICAgICAgdGVhbXNMaXN0LnB1c2goVGVhbShEYXRhW2ldWzBdLCBwYXJzZUludChEYXRhW2ldWzFdKSwgVGVhbShEYXRhW2ldWzJdKSkpO1xuICAgIH1cbiAgfVxuICBcbiAgLy8gSW5jcmVtZW50IHRoZSBjb3VudCBmb3IgZWFjaCB0ZWFtIHBhc3NlZCBhcyBwYXJhbWV0ZXJcbiAgY29uc3QgaW5jcmVtZW50Q291bnQgPSAodGVhbSkgPT4ge1xuICAgIGxldCB0ZWFtT2JqZWN0ID0gdGVhbXNMaXN0LmZpbmQob2JqID0+IG9iai50ZWFtID09PSB0ZWFtKTtcbiAgICBpZiAodGVhbU9iamVjdCkge1xuICAgICAgICB0ZWFtT2JqZWN0LmNvdW50Kys7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGdldE1vc3RDb21tbW9uVGVhbXMgPSAoKSA9PiB7XG4gICAgY29uc3Qgc29ydGVkVGVhbXMgPSBbLi4udGVhbXNMaXN0XTtcblxuICAgIC8vIFNvcnQgdGhlIHRlYW1zIGluIGRlc2NlbmRpbmcgb3JkZXIgYmFzZWQgb24gY291bnRcbiAgICBzb3J0ZWRUZWFtcy5zb3J0KChhLCBiKSA9PiBiLmNvdW50IC0gYS5jb3VudCk7XG5cbiAgICAvLyBUYWtlIHRoZSB0b3AgMyB0ZWFtc1xuICAgIGNvbnN0IHRvcDNUZWFtcyA9IHNvcnRlZFRlYW1zLnNsaWNlKDAsIDMpO1xuXG4gICAgcmV0dXJuIHRvcDNUZWFtcy5tYXAodGVhbSA9PiAoeyB0ZWFtOiB0ZWFtLnRlYW0sIGNvdW50OiB0ZWFtLmNvdW50IH0pKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZ2V0TG9nbyxcbiAgICBpbmNyZW1lbnRQbGF5ZXJzQ291bnQsXG4gICAgaW5pdGlhbGlzZVRlYW1zTGlzdCxcbiAgICBpbmNyZW1lbnRDb3VudCxcbiAgICBnZXRNb3N0Q29tbW1vblRlYW1zXG4gIH07XG59KSgpOyIsImltcG9ydCAnLi9zdHlsZS5jc3MnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCAnLi9kb20uanMnO1xuaW1wb3J0IHsgZGF0YU1ldGhvZHMgfSBmcm9tICcuL2RhdGEuanMnO1xuaW1wb3J0ICcuL3RhYmxlLmpzJztcblxuLy9pbml0aWFsaXNlIHRlYW1zIGxpc3RcbmRhdGFNZXRob2RzLmluaXRpYWxpc2VUZWFtc0xpc3QoKTtcblxuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiaSIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsIkZVTkNfRVJST1JfVEVYVCIsIkhBU0hfVU5ERUZJTkVEIiwiUExBQ0VIT0xERVIiLCJXUkFQX1BBUlRJQUxfRkxBRyIsIldSQVBfQVJZX0ZMQUciLCJJTkZJTklUWSIsIk1BWF9TQUZFX0lOVEVHRVIiLCJOQU4iLCJNQVhfQVJSQVlfTEVOR1RIIiwid3JhcEZsYWdzIiwiYXJnc1RhZyIsImFycmF5VGFnIiwiYm9vbFRhZyIsImRhdGVUYWciLCJlcnJvclRhZyIsImZ1bmNUYWciLCJnZW5UYWciLCJtYXBUYWciLCJudW1iZXJUYWciLCJvYmplY3RUYWciLCJwcm9taXNlVGFnIiwicmVnZXhwVGFnIiwic2V0VGFnIiwic3RyaW5nVGFnIiwic3ltYm9sVGFnIiwid2Vha01hcFRhZyIsImFycmF5QnVmZmVyVGFnIiwiZGF0YVZpZXdUYWciLCJmbG9hdDMyVGFnIiwiZmxvYXQ2NFRhZyIsImludDhUYWciLCJpbnQxNlRhZyIsImludDMyVGFnIiwidWludDhUYWciLCJ1aW50OENsYW1wZWRUYWciLCJ1aW50MTZUYWciLCJ1aW50MzJUYWciLCJyZUVtcHR5U3RyaW5nTGVhZGluZyIsInJlRW1wdHlTdHJpbmdNaWRkbGUiLCJyZUVtcHR5U3RyaW5nVHJhaWxpbmciLCJyZUVzY2FwZWRIdG1sIiwicmVVbmVzY2FwZWRIdG1sIiwicmVIYXNFc2NhcGVkSHRtbCIsIlJlZ0V4cCIsInNvdXJjZSIsInJlSGFzVW5lc2NhcGVkSHRtbCIsInJlRXNjYXBlIiwicmVFdmFsdWF0ZSIsInJlSW50ZXJwb2xhdGUiLCJyZUlzRGVlcFByb3AiLCJyZUlzUGxhaW5Qcm9wIiwicmVQcm9wTmFtZSIsInJlUmVnRXhwQ2hhciIsInJlSGFzUmVnRXhwQ2hhciIsInJlVHJpbVN0YXJ0IiwicmVXaGl0ZXNwYWNlIiwicmVXcmFwQ29tbWVudCIsInJlV3JhcERldGFpbHMiLCJyZVNwbGl0RGV0YWlscyIsInJlQXNjaWlXb3JkIiwicmVGb3JiaWRkZW5JZGVudGlmaWVyQ2hhcnMiLCJyZUVzY2FwZUNoYXIiLCJyZUVzVGVtcGxhdGUiLCJyZUZsYWdzIiwicmVJc0JhZEhleCIsInJlSXNCaW5hcnkiLCJyZUlzSG9zdEN0b3IiLCJyZUlzT2N0YWwiLCJyZUlzVWludCIsInJlTGF0aW4iLCJyZU5vTWF0Y2giLCJyZVVuZXNjYXBlZFN0cmluZyIsInJzQXN0cmFsUmFuZ2UiLCJyc0NvbWJvUmFuZ2UiLCJyc0NvbWJvTWFya3NSYW5nZSIsInJzRGluZ2JhdFJhbmdlIiwicnNMb3dlclJhbmdlIiwicnNVcHBlclJhbmdlIiwicnNWYXJSYW5nZSIsInJzQnJlYWtSYW5nZSIsInJzTWF0aE9wUmFuZ2UiLCJyc0FzdHJhbCIsInJzQnJlYWsiLCJyc0NvbWJvIiwicnNEaWdpdHMiLCJyc0RpbmdiYXQiLCJyc0xvd2VyIiwicnNNaXNjIiwicnNGaXR6IiwicnNOb25Bc3RyYWwiLCJyc1JlZ2lvbmFsIiwicnNTdXJyUGFpciIsInJzVXBwZXIiLCJyc1pXSiIsInJzTWlzY0xvd2VyIiwicnNNaXNjVXBwZXIiLCJyc09wdENvbnRyTG93ZXIiLCJyc09wdENvbnRyVXBwZXIiLCJyZU9wdE1vZCIsInJzTW9kaWZpZXIiLCJyc09wdFZhciIsInJzU2VxIiwicnNFbW9qaSIsInJzU3ltYm9sIiwicmVBcG9zIiwicmVDb21ib01hcmsiLCJyZVVuaWNvZGUiLCJyZVVuaWNvZGVXb3JkIiwicmVIYXNVbmljb2RlIiwicmVIYXNVbmljb2RlV29yZCIsImNvbnRleHRQcm9wcyIsInRlbXBsYXRlQ291bnRlciIsInR5cGVkQXJyYXlUYWdzIiwiY2xvbmVhYmxlVGFncyIsInN0cmluZ0VzY2FwZXMiLCJmcmVlUGFyc2VGbG9hdCIsInBhcnNlRmxvYXQiLCJmcmVlUGFyc2VJbnQiLCJwYXJzZUludCIsImZyZWVHbG9iYWwiLCJnIiwiT2JqZWN0IiwiZnJlZVNlbGYiLCJzZWxmIiwicm9vdCIsIkZ1bmN0aW9uIiwiZnJlZUV4cG9ydHMiLCJub2RlVHlwZSIsImZyZWVNb2R1bGUiLCJtb2R1bGVFeHBvcnRzIiwiZnJlZVByb2Nlc3MiLCJwcm9jZXNzIiwibm9kZVV0aWwiLCJyZXF1aXJlIiwidHlwZXMiLCJiaW5kaW5nIiwiZSIsIm5vZGVJc0FycmF5QnVmZmVyIiwiaXNBcnJheUJ1ZmZlciIsIm5vZGVJc0RhdGUiLCJpc0RhdGUiLCJub2RlSXNNYXAiLCJpc01hcCIsIm5vZGVJc1JlZ0V4cCIsImlzUmVnRXhwIiwibm9kZUlzU2V0IiwiaXNTZXQiLCJub2RlSXNUeXBlZEFycmF5IiwiaXNUeXBlZEFycmF5IiwiYXBwbHkiLCJmdW5jIiwidGhpc0FyZyIsImFyZ3MiLCJjYWxsIiwiYXJyYXlBZ2dyZWdhdG9yIiwiYXJyYXkiLCJzZXR0ZXIiLCJpdGVyYXRlZSIsImFjY3VtdWxhdG9yIiwiaW5kZXgiLCJ2YWx1ZSIsImFycmF5RWFjaCIsImFycmF5RWFjaFJpZ2h0IiwiYXJyYXlFdmVyeSIsInByZWRpY2F0ZSIsImFycmF5RmlsdGVyIiwicmVzSW5kZXgiLCJyZXN1bHQiLCJhcnJheUluY2x1ZGVzIiwiYmFzZUluZGV4T2YiLCJhcnJheUluY2x1ZGVzV2l0aCIsImNvbXBhcmF0b3IiLCJhcnJheU1hcCIsIkFycmF5IiwiYXJyYXlQdXNoIiwidmFsdWVzIiwib2Zmc2V0IiwiYXJyYXlSZWR1Y2UiLCJpbml0QWNjdW0iLCJhcnJheVJlZHVjZVJpZ2h0IiwiYXJyYXlTb21lIiwiYXNjaWlTaXplIiwiYmFzZVByb3BlcnR5IiwiYmFzZUZpbmRLZXkiLCJjb2xsZWN0aW9uIiwiZWFjaEZ1bmMiLCJrZXkiLCJiYXNlRmluZEluZGV4IiwiZnJvbUluZGV4IiwiZnJvbVJpZ2h0Iiwic3RyaWN0SW5kZXhPZiIsImJhc2VJc05hTiIsImJhc2VJbmRleE9mV2l0aCIsImJhc2VNZWFuIiwiYmFzZVN1bSIsIm9iamVjdCIsImJhc2VQcm9wZXJ0eU9mIiwiYmFzZVJlZHVjZSIsImN1cnJlbnQiLCJiYXNlVGltZXMiLCJuIiwiYmFzZVRyaW0iLCJzdHJpbmciLCJzbGljZSIsInRyaW1tZWRFbmRJbmRleCIsInJlcGxhY2UiLCJiYXNlVW5hcnkiLCJiYXNlVmFsdWVzIiwicHJvcHMiLCJjYWNoZUhhcyIsImNhY2hlIiwiaGFzIiwiY2hhcnNTdGFydEluZGV4Iiwic3RyU3ltYm9scyIsImNoclN5bWJvbHMiLCJjaGFyc0VuZEluZGV4IiwiZGVidXJyTGV0dGVyIiwiZXNjYXBlSHRtbENoYXIiLCJlc2NhcGVTdHJpbmdDaGFyIiwiY2hyIiwiaGFzVW5pY29kZSIsInRlc3QiLCJtYXBUb0FycmF5Iiwic2l6ZSIsImZvckVhY2giLCJvdmVyQXJnIiwidHJhbnNmb3JtIiwiYXJnIiwicmVwbGFjZUhvbGRlcnMiLCJwbGFjZWhvbGRlciIsInNldFRvQXJyYXkiLCJzZXQiLCJzZXRUb1BhaXJzIiwic3RyaW5nU2l6ZSIsImxhc3RJbmRleCIsInVuaWNvZGVTaXplIiwic3RyaW5nVG9BcnJheSIsIm1hdGNoIiwidW5pY29kZVRvQXJyYXkiLCJzcGxpdCIsImFzY2lpVG9BcnJheSIsImNoYXJBdCIsInVuZXNjYXBlSHRtbENoYXIiLCJfIiwicnVuSW5Db250ZXh0IiwiY29udGV4dCIsInVpZCIsImRlZmF1bHRzIiwicGljayIsIkRhdGUiLCJFcnJvciIsIk1hdGgiLCJTdHJpbmciLCJUeXBlRXJyb3IiLCJhcnJheVByb3RvIiwicHJvdG90eXBlIiwiZnVuY1Byb3RvIiwib2JqZWN0UHJvdG8iLCJjb3JlSnNEYXRhIiwiZnVuY1RvU3RyaW5nIiwiaGFzT3duUHJvcGVydHkiLCJpZENvdW50ZXIiLCJtYXNrU3JjS2V5IiwiZXhlYyIsImtleXMiLCJJRV9QUk9UTyIsIm5hdGl2ZU9iamVjdFRvU3RyaW5nIiwib2JqZWN0Q3RvclN0cmluZyIsIm9sZERhc2giLCJyZUlzTmF0aXZlIiwiQnVmZmVyIiwiU3ltYm9sIiwiVWludDhBcnJheSIsImFsbG9jVW5zYWZlIiwiZ2V0UHJvdG90eXBlIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmplY3RDcmVhdGUiLCJjcmVhdGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInNwbGljZSIsInNwcmVhZGFibGVTeW1ib2wiLCJpc0NvbmNhdFNwcmVhZGFibGUiLCJzeW1JdGVyYXRvciIsIml0ZXJhdG9yIiwic3ltVG9TdHJpbmdUYWciLCJ0b1N0cmluZ1RhZyIsImRlZmluZVByb3BlcnR5IiwiZ2V0TmF0aXZlIiwiY3R4Q2xlYXJUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY3R4Tm93Iiwibm93IiwiY3R4U2V0VGltZW91dCIsInNldFRpbWVvdXQiLCJuYXRpdmVDZWlsIiwiY2VpbCIsIm5hdGl2ZUZsb29yIiwiZmxvb3IiLCJuYXRpdmVHZXRTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibmF0aXZlSXNCdWZmZXIiLCJpc0J1ZmZlciIsIm5hdGl2ZUlzRmluaXRlIiwiaXNGaW5pdGUiLCJuYXRpdmVKb2luIiwibmF0aXZlS2V5cyIsIm5hdGl2ZU1heCIsIm1heCIsIm5hdGl2ZU1pbiIsIm1pbiIsIm5hdGl2ZU5vdyIsIm5hdGl2ZVBhcnNlSW50IiwibmF0aXZlUmFuZG9tIiwicmFuZG9tIiwibmF0aXZlUmV2ZXJzZSIsInJldmVyc2UiLCJEYXRhVmlldyIsIk1hcCIsIlByb21pc2UiLCJTZXQiLCJXZWFrTWFwIiwibmF0aXZlQ3JlYXRlIiwibWV0YU1hcCIsInJlYWxOYW1lcyIsImRhdGFWaWV3Q3RvclN0cmluZyIsInRvU291cmNlIiwibWFwQ3RvclN0cmluZyIsInByb21pc2VDdG9yU3RyaW5nIiwic2V0Q3RvclN0cmluZyIsIndlYWtNYXBDdG9yU3RyaW5nIiwic3ltYm9sUHJvdG8iLCJzeW1ib2xWYWx1ZU9mIiwidmFsdWVPZiIsInN5bWJvbFRvU3RyaW5nIiwibG9kYXNoIiwiaXNPYmplY3RMaWtlIiwiaXNBcnJheSIsIkxhenlXcmFwcGVyIiwiTG9kYXNoV3JhcHBlciIsIndyYXBwZXJDbG9uZSIsImJhc2VDcmVhdGUiLCJwcm90byIsImlzT2JqZWN0IiwiYmFzZUxvZGFzaCIsImNoYWluQWxsIiwiX193cmFwcGVkX18iLCJfX2FjdGlvbnNfXyIsIl9fY2hhaW5fXyIsIl9faW5kZXhfXyIsIl9fdmFsdWVzX18iLCJfX2Rpcl9fIiwiX19maWx0ZXJlZF9fIiwiX19pdGVyYXRlZXNfXyIsIl9fdGFrZUNvdW50X18iLCJfX3ZpZXdzX18iLCJIYXNoIiwiZW50cmllcyIsImNsZWFyIiwiZW50cnkiLCJMaXN0Q2FjaGUiLCJNYXBDYWNoZSIsIlNldENhY2hlIiwiX19kYXRhX18iLCJhZGQiLCJTdGFjayIsImFycmF5TGlrZUtleXMiLCJpbmhlcml0ZWQiLCJpc0FyciIsImlzQXJnIiwiaXNBcmd1bWVudHMiLCJpc0J1ZmYiLCJpc1R5cGUiLCJza2lwSW5kZXhlcyIsImlzSW5kZXgiLCJhcnJheVNhbXBsZSIsImJhc2VSYW5kb20iLCJhcnJheVNhbXBsZVNpemUiLCJzaHVmZmxlU2VsZiIsImNvcHlBcnJheSIsImJhc2VDbGFtcCIsImFycmF5U2h1ZmZsZSIsImFzc2lnbk1lcmdlVmFsdWUiLCJlcSIsImJhc2VBc3NpZ25WYWx1ZSIsImFzc2lnblZhbHVlIiwib2JqVmFsdWUiLCJhc3NvY0luZGV4T2YiLCJiYXNlQWdncmVnYXRvciIsImJhc2VFYWNoIiwiYmFzZUFzc2lnbiIsImNvcHlPYmplY3QiLCJiYXNlQXQiLCJwYXRocyIsInNraXAiLCJnZXQiLCJudW1iZXIiLCJsb3dlciIsInVwcGVyIiwiYmFzZUNsb25lIiwiYml0bWFzayIsImN1c3RvbWl6ZXIiLCJzdGFjayIsImlzRGVlcCIsImlzRmxhdCIsImlzRnVsbCIsImNvbnN0cnVjdG9yIiwiaW5wdXQiLCJpbml0Q2xvbmVBcnJheSIsInRhZyIsImdldFRhZyIsImlzRnVuYyIsImNsb25lQnVmZmVyIiwiaW5pdENsb25lT2JqZWN0IiwiZ2V0U3ltYm9sc0luIiwiY29weVN5bWJvbHNJbiIsImtleXNJbiIsImJhc2VBc3NpZ25JbiIsImdldFN5bWJvbHMiLCJjb3B5U3ltYm9scyIsInN5bWJvbCIsIkN0b3IiLCJjbG9uZUFycmF5QnVmZmVyIiwiZGF0YVZpZXciLCJidWZmZXIiLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsImNsb25lRGF0YVZpZXciLCJjbG9uZVR5cGVkQXJyYXkiLCJyZWdleHAiLCJjbG9uZVJlZ0V4cCIsImluaXRDbG9uZUJ5VGFnIiwic3RhY2tlZCIsInN1YlZhbHVlIiwiZ2V0QWxsS2V5c0luIiwiZ2V0QWxsS2V5cyIsImJhc2VDb25mb3Jtc1RvIiwiYmFzZURlbGF5Iiwid2FpdCIsImJhc2VEaWZmZXJlbmNlIiwiaW5jbHVkZXMiLCJpc0NvbW1vbiIsInZhbHVlc0xlbmd0aCIsIm91dGVyIiwiY29tcHV0ZWQiLCJ2YWx1ZXNJbmRleCIsInRlbXBsYXRlU2V0dGluZ3MiLCJwb3AiLCJnZXRNYXBEYXRhIiwicGFpcnMiLCJMQVJHRV9BUlJBWV9TSVpFIiwiY3JlYXRlQmFzZUVhY2giLCJiYXNlRm9yT3duIiwiYmFzZUVhY2hSaWdodCIsImJhc2VGb3JPd25SaWdodCIsImJhc2VFdmVyeSIsImJhc2VFeHRyZW11bSIsImlzU3ltYm9sIiwiYmFzZUZpbHRlciIsImJhc2VGbGF0dGVuIiwiZGVwdGgiLCJpc1N0cmljdCIsImlzRmxhdHRlbmFibGUiLCJiYXNlRm9yIiwiY3JlYXRlQmFzZUZvciIsImJhc2VGb3JSaWdodCIsImJhc2VGdW5jdGlvbnMiLCJpc0Z1bmN0aW9uIiwiYmFzZUdldCIsInBhdGgiLCJjYXN0UGF0aCIsInRvS2V5IiwiYmFzZUdldEFsbEtleXMiLCJrZXlzRnVuYyIsInN5bWJvbHNGdW5jIiwiYmFzZUdldFRhZyIsImlzT3duIiwidW5tYXNrZWQiLCJnZXRSYXdUYWciLCJvYmplY3RUb1N0cmluZyIsImJhc2VHdCIsIm90aGVyIiwiYmFzZUhhcyIsImJhc2VIYXNJbiIsImJhc2VJbnRlcnNlY3Rpb24iLCJhcnJheXMiLCJvdGhMZW5ndGgiLCJvdGhJbmRleCIsImNhY2hlcyIsIm1heExlbmd0aCIsIkluZmluaXR5Iiwic2VlbiIsImJhc2VJbnZva2UiLCJwYXJlbnQiLCJsYXN0IiwiYmFzZUlzQXJndW1lbnRzIiwiYmFzZUlzRXF1YWwiLCJlcXVhbEZ1bmMiLCJvYmpJc0FyciIsIm90aElzQXJyIiwib2JqVGFnIiwib3RoVGFnIiwib2JqSXNPYmoiLCJvdGhJc09iaiIsImlzU2FtZVRhZyIsImVxdWFsQXJyYXlzIiwibmFtZSIsIm1lc3NhZ2UiLCJjb252ZXJ0IiwiaXNQYXJ0aWFsIiwiZXF1YWxCeVRhZyIsIm9iaklzV3JhcHBlZCIsIm90aElzV3JhcHBlZCIsIm9ialVud3JhcHBlZCIsIm90aFVud3JhcHBlZCIsIm9ialByb3BzIiwib2JqTGVuZ3RoIiwib2JqU3RhY2tlZCIsIm90aFN0YWNrZWQiLCJza2lwQ3RvciIsIm90aFZhbHVlIiwiY29tcGFyZWQiLCJvYmpDdG9yIiwib3RoQ3RvciIsImVxdWFsT2JqZWN0cyIsImJhc2VJc0VxdWFsRGVlcCIsImJhc2VJc01hdGNoIiwibWF0Y2hEYXRhIiwibm9DdXN0b21pemVyIiwic3JjVmFsdWUiLCJDT01QQVJFX1BBUlRJQUxfRkxBRyIsImJhc2VJc05hdGl2ZSIsImJhc2VJdGVyYXRlZSIsImlkZW50aXR5IiwiYmFzZU1hdGNoZXNQcm9wZXJ0eSIsImJhc2VNYXRjaGVzIiwicHJvcGVydHkiLCJiYXNlS2V5cyIsImlzUHJvdG90eXBlIiwiYmFzZUx0IiwiYmFzZU1hcCIsImlzQXJyYXlMaWtlIiwiZ2V0TWF0Y2hEYXRhIiwibWF0Y2hlc1N0cmljdENvbXBhcmFibGUiLCJpc0tleSIsImlzU3RyaWN0Q29tcGFyYWJsZSIsImhhc0luIiwiYmFzZU1lcmdlIiwic3JjSW5kZXgiLCJtZXJnZUZ1bmMiLCJzYWZlR2V0IiwibmV3VmFsdWUiLCJpc1R5cGVkIiwiaXNBcnJheUxpa2VPYmplY3QiLCJpc1BsYWluT2JqZWN0IiwidG9QbGFpbk9iamVjdCIsImJhc2VNZXJnZURlZXAiLCJiYXNlTnRoIiwiYmFzZU9yZGVyQnkiLCJpdGVyYXRlZXMiLCJvcmRlcnMiLCJnZXRJdGVyYXRlZSIsImNyaXRlcmlhIiwiY29tcGFyZXIiLCJzb3J0Iiwib2JqQ3JpdGVyaWEiLCJvdGhDcml0ZXJpYSIsIm9yZGVyc0xlbmd0aCIsImNvbXBhcmVBc2NlbmRpbmciLCJjb21wYXJlTXVsdGlwbGUiLCJiYXNlU29ydEJ5IiwiYmFzZVBpY2tCeSIsImJhc2VTZXQiLCJiYXNlUHVsbEFsbCIsImluZGV4T2YiLCJiYXNlUHVsbEF0IiwiaW5kZXhlcyIsInByZXZpb3VzIiwiYmFzZVVuc2V0IiwiYmFzZVJlcGVhdCIsImJhc2VSZXN0Iiwic3RhcnQiLCJzZXRUb1N0cmluZyIsIm92ZXJSZXN0IiwiYmFzZVNhbXBsZSIsImJhc2VTYW1wbGVTaXplIiwibmVzdGVkIiwiYmFzZVNldERhdGEiLCJiYXNlU2V0VG9TdHJpbmciLCJjb25zdGFudCIsImJhc2VTaHVmZmxlIiwiYmFzZVNsaWNlIiwiZW5kIiwiYmFzZVNvbWUiLCJiYXNlU29ydGVkSW5kZXgiLCJyZXRIaWdoZXN0IiwibG93IiwiaGlnaCIsIm1pZCIsImJhc2VTb3J0ZWRJbmRleEJ5IiwidmFsSXNOYU4iLCJ2YWxJc051bGwiLCJ2YWxJc1N5bWJvbCIsInZhbElzVW5kZWZpbmVkIiwib3RoSXNEZWZpbmVkIiwib3RoSXNOdWxsIiwib3RoSXNSZWZsZXhpdmUiLCJvdGhJc1N5bWJvbCIsInNldExvdyIsImJhc2VTb3J0ZWRVbmlxIiwiYmFzZVRvTnVtYmVyIiwiYmFzZVRvU3RyaW5nIiwiYmFzZVVuaXEiLCJjcmVhdGVTZXQiLCJzZWVuSW5kZXgiLCJiYXNlVXBkYXRlIiwidXBkYXRlciIsImJhc2VXaGlsZSIsImlzRHJvcCIsImJhc2VXcmFwcGVyVmFsdWUiLCJhY3Rpb25zIiwiYWN0aW9uIiwiYmFzZVhvciIsImJhc2VaaXBPYmplY3QiLCJhc3NpZ25GdW5jIiwidmFsc0xlbmd0aCIsImNhc3RBcnJheUxpa2VPYmplY3QiLCJjYXN0RnVuY3Rpb24iLCJzdHJpbmdUb1BhdGgiLCJjYXN0UmVzdCIsImNhc3RTbGljZSIsImNvcHkiLCJhcnJheUJ1ZmZlciIsInR5cGVkQXJyYXkiLCJ2YWxJc0RlZmluZWQiLCJ2YWxJc1JlZmxleGl2ZSIsImNvbXBvc2VBcmdzIiwicGFydGlhbHMiLCJob2xkZXJzIiwiaXNDdXJyaWVkIiwiYXJnc0luZGV4IiwiYXJnc0xlbmd0aCIsImhvbGRlcnNMZW5ndGgiLCJsZWZ0SW5kZXgiLCJsZWZ0TGVuZ3RoIiwicmFuZ2VMZW5ndGgiLCJpc1VuY3VycmllZCIsImNvbXBvc2VBcmdzUmlnaHQiLCJob2xkZXJzSW5kZXgiLCJyaWdodEluZGV4IiwicmlnaHRMZW5ndGgiLCJpc05ldyIsImNyZWF0ZUFnZ3JlZ2F0b3IiLCJpbml0aWFsaXplciIsImNyZWF0ZUFzc2lnbmVyIiwiYXNzaWduZXIiLCJzb3VyY2VzIiwiZ3VhcmQiLCJpc0l0ZXJhdGVlQ2FsbCIsIml0ZXJhYmxlIiwiY3JlYXRlQ2FzZUZpcnN0IiwibWV0aG9kTmFtZSIsInRyYWlsaW5nIiwiY3JlYXRlQ29tcG91bmRlciIsImNhbGxiYWNrIiwid29yZHMiLCJkZWJ1cnIiLCJjcmVhdGVDdG9yIiwiYXJndW1lbnRzIiwidGhpc0JpbmRpbmciLCJjcmVhdGVGaW5kIiwiZmluZEluZGV4RnVuYyIsImNyZWF0ZUZsb3ciLCJmbGF0UmVzdCIsImZ1bmNzIiwicHJlcmVxIiwidGhydSIsIndyYXBwZXIiLCJnZXRGdW5jTmFtZSIsImZ1bmNOYW1lIiwiZ2V0RGF0YSIsImlzTGF6aWFibGUiLCJwbGFudCIsImNyZWF0ZUh5YnJpZCIsInBhcnRpYWxzUmlnaHQiLCJob2xkZXJzUmlnaHQiLCJhcmdQb3MiLCJhcnkiLCJhcml0eSIsImlzQXJ5IiwiaXNCaW5kIiwiaXNCaW5kS2V5IiwiaXNGbGlwIiwiZ2V0SG9sZGVyIiwiaG9sZGVyc0NvdW50IiwiY291bnRIb2xkZXJzIiwibmV3SG9sZGVycyIsImNyZWF0ZVJlY3VycnkiLCJmbiIsImFyckxlbmd0aCIsIm9sZEFycmF5IiwicmVvcmRlciIsImNyZWF0ZUludmVydGVyIiwidG9JdGVyYXRlZSIsImJhc2VJbnZlcnRlciIsImNyZWF0ZU1hdGhPcGVyYXRpb24iLCJvcGVyYXRvciIsImRlZmF1bHRWYWx1ZSIsImNyZWF0ZU92ZXIiLCJhcnJheUZ1bmMiLCJjcmVhdGVQYWRkaW5nIiwiY2hhcnMiLCJjaGFyc0xlbmd0aCIsImNyZWF0ZVJhbmdlIiwic3RlcCIsInRvRmluaXRlIiwiYmFzZVJhbmdlIiwiY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbiIsInRvTnVtYmVyIiwid3JhcEZ1bmMiLCJpc0N1cnJ5IiwibmV3RGF0YSIsInNldERhdGEiLCJzZXRXcmFwVG9TdHJpbmciLCJjcmVhdGVSb3VuZCIsInByZWNpc2lvbiIsInRvSW50ZWdlciIsInBhaXIiLCJub29wIiwiY3JlYXRlVG9QYWlycyIsImJhc2VUb1BhaXJzIiwiY3JlYXRlV3JhcCIsInNyY0JpdG1hc2siLCJuZXdCaXRtYXNrIiwiaXNDb21ibyIsIm1lcmdlRGF0YSIsImNyZWF0ZUN1cnJ5IiwiY3JlYXRlUGFydGlhbCIsImNyZWF0ZUJpbmQiLCJjdXN0b21EZWZhdWx0c0Fzc2lnbkluIiwiY3VzdG9tRGVmYXVsdHNNZXJnZSIsImN1c3RvbU9taXRDbG9uZSIsImFyclN0YWNrZWQiLCJhcnJWYWx1ZSIsImZsYXR0ZW4iLCJvdGhlckZ1bmMiLCJ0eXBlIiwiZ2V0VmFsdWUiLCJzdHViQXJyYXkiLCJoYXNQYXRoIiwiaGFzRnVuYyIsImlzTGVuZ3RoIiwiQXJyYXlCdWZmZXIiLCJyZXNvbHZlIiwiY3RvclN0cmluZyIsImlzTWFza2FibGUiLCJzdHViRmFsc2UiLCJvdGhlckFyZ3MiLCJzaG9ydE91dCIsInJlZmVyZW5jZSIsImRldGFpbHMiLCJpbnNlcnRXcmFwRGV0YWlscyIsInVwZGF0ZVdyYXBEZXRhaWxzIiwiZ2V0V3JhcERldGFpbHMiLCJjb3VudCIsImxhc3RDYWxsZWQiLCJzdGFtcCIsInJlbWFpbmluZyIsInJhbmQiLCJtZW1vaXplIiwiY2hhckNvZGVBdCIsInF1b3RlIiwic3ViU3RyaW5nIiwiY2xvbmUiLCJkaWZmZXJlbmNlIiwiZGlmZmVyZW5jZUJ5IiwiZGlmZmVyZW5jZVdpdGgiLCJmaW5kSW5kZXgiLCJmaW5kTGFzdEluZGV4IiwiaGVhZCIsImludGVyc2VjdGlvbiIsIm1hcHBlZCIsImludGVyc2VjdGlvbkJ5IiwiaW50ZXJzZWN0aW9uV2l0aCIsInB1bGwiLCJwdWxsQWxsIiwicHVsbEF0IiwidW5pb24iLCJ1bmlvbkJ5IiwidW5pb25XaXRoIiwidW56aXAiLCJncm91cCIsInVuemlwV2l0aCIsIndpdGhvdXQiLCJ4b3IiLCJ4b3JCeSIsInhvcldpdGgiLCJ6aXAiLCJ6aXBXaXRoIiwiY2hhaW4iLCJpbnRlcmNlcHRvciIsIndyYXBwZXJBdCIsImNvdW50QnkiLCJmaW5kIiwiZmluZExhc3QiLCJmb3JFYWNoUmlnaHQiLCJncm91cEJ5IiwiaW52b2tlTWFwIiwia2V5QnkiLCJwYXJ0aXRpb24iLCJzb3J0QnkiLCJiZWZvcmUiLCJiaW5kIiwiYmluZEtleSIsIldSQVBfQklORF9GTEFHIiwiZGVib3VuY2UiLCJvcHRpb25zIiwibGFzdEFyZ3MiLCJsYXN0VGhpcyIsIm1heFdhaXQiLCJ0aW1lcklkIiwibGFzdENhbGxUaW1lIiwibGFzdEludm9rZVRpbWUiLCJsZWFkaW5nIiwibWF4aW5nIiwiaW52b2tlRnVuYyIsInRpbWUiLCJzaG91bGRJbnZva2UiLCJ0aW1lU2luY2VMYXN0Q2FsbCIsInRpbWVyRXhwaXJlZCIsInRyYWlsaW5nRWRnZSIsInRpbWVXYWl0aW5nIiwicmVtYWluaW5nV2FpdCIsImRlYm91bmNlZCIsImlzSW52b2tpbmciLCJsZWFkaW5nRWRnZSIsImNhbmNlbCIsImZsdXNoIiwiZGVmZXIiLCJkZWxheSIsInJlc29sdmVyIiwibWVtb2l6ZWQiLCJDYWNoZSIsIm5lZ2F0ZSIsIm92ZXJBcmdzIiwidHJhbnNmb3JtcyIsImZ1bmNzTGVuZ3RoIiwicGFydGlhbCIsInBhcnRpYWxSaWdodCIsInJlYXJnIiwiZ3QiLCJndGUiLCJpc0Vycm9yIiwiaXNJbnRlZ2VyIiwiaXNOdW1iZXIiLCJpc1N0cmluZyIsImx0IiwibHRlIiwidG9BcnJheSIsIm5leHQiLCJkb25lIiwiaXRlcmF0b3JUb0FycmF5IiwicmVtYWluZGVyIiwidG9MZW5ndGgiLCJpc0JpbmFyeSIsImFzc2lnbiIsImFzc2lnbkluIiwiYXNzaWduSW5XaXRoIiwiYXNzaWduV2l0aCIsImF0IiwicHJvcHNJbmRleCIsInByb3BzTGVuZ3RoIiwiZGVmYXVsdHNEZWVwIiwibWVyZ2VXaXRoIiwiaW52ZXJ0IiwiaW52ZXJ0QnkiLCJpbnZva2UiLCJuYXRpdmVLZXlzSW4iLCJpc1Byb3RvIiwiYmFzZUtleXNJbiIsIm1lcmdlIiwib21pdCIsIkNMT05FX0RFRVBfRkxBRyIsImJhc2VQaWNrIiwicGlja0J5IiwicHJvcCIsInRvUGFpcnMiLCJ0b1BhaXJzSW4iLCJjYW1lbENhc2UiLCJ3b3JkIiwidG9Mb3dlckNhc2UiLCJjYXBpdGFsaXplIiwidXBwZXJGaXJzdCIsImtlYmFiQ2FzZSIsImxvd2VyQ2FzZSIsImxvd2VyRmlyc3QiLCJzbmFrZUNhc2UiLCJzdGFydENhc2UiLCJ1cHBlckNhc2UiLCJ0b1VwcGVyQ2FzZSIsInBhdHRlcm4iLCJoYXNVbmljb2RlV29yZCIsInVuaWNvZGVXb3JkcyIsImFzY2lpV29yZHMiLCJhdHRlbXB0IiwiYmluZEFsbCIsIm1ldGhvZE5hbWVzIiwiZmxvdyIsImZsb3dSaWdodCIsIm1ldGhvZCIsIm1ldGhvZE9mIiwibWl4aW4iLCJvdmVyIiwib3ZlckV2ZXJ5Iiwib3ZlclNvbWUiLCJiYXNlUHJvcGVydHlEZWVwIiwicmFuZ2UiLCJyYW5nZVJpZ2h0IiwiYXVnZW5kIiwiYWRkZW5kIiwiZGl2aWRlIiwiZGl2aWRlbmQiLCJkaXZpc29yIiwibXVsdGlwbHkiLCJtdWx0aXBsaWVyIiwibXVsdGlwbGljYW5kIiwicm91bmQiLCJzdWJ0cmFjdCIsIm1pbnVlbmQiLCJzdWJ0cmFoZW5kIiwiYWZ0ZXIiLCJjYXN0QXJyYXkiLCJjaHVuayIsImNvbXBhY3QiLCJjb25kIiwiY29uZm9ybXMiLCJiYXNlQ29uZm9ybXMiLCJwcm9wZXJ0aWVzIiwiY3VycnkiLCJjdXJyeVJpZ2h0IiwiZHJvcCIsImRyb3BSaWdodCIsImRyb3BSaWdodFdoaWxlIiwiZHJvcFdoaWxlIiwiZmlsbCIsImJhc2VGaWxsIiwiZmlsdGVyIiwiZmxhdE1hcCIsImZsYXRNYXBEZWVwIiwiZmxhdE1hcERlcHRoIiwiZmxhdHRlbkRlZXAiLCJmbGF0dGVuRGVwdGgiLCJmbGlwIiwiZnJvbVBhaXJzIiwiZnVuY3Rpb25zIiwiZnVuY3Rpb25zSW4iLCJpbml0aWFsIiwibWFwS2V5cyIsIm1hcFZhbHVlcyIsIm1hdGNoZXMiLCJtYXRjaGVzUHJvcGVydHkiLCJudGhBcmciLCJvbWl0QnkiLCJvbmNlIiwib3JkZXJCeSIsInByb3BlcnR5T2YiLCJwdWxsQWxsQnkiLCJwdWxsQWxsV2l0aCIsInJlamVjdCIsInJlbW92ZSIsInJlc3QiLCJzYW1wbGVTaXplIiwic2V0V2l0aCIsInNodWZmbGUiLCJzb3J0ZWRVbmlxIiwic29ydGVkVW5pcUJ5Iiwic2VwYXJhdG9yIiwibGltaXQiLCJzcHJlYWQiLCJ0YWlsIiwidGFrZSIsInRha2VSaWdodCIsInRha2VSaWdodFdoaWxlIiwidGFrZVdoaWxlIiwidGFwIiwidGhyb3R0bGUiLCJ0b1BhdGgiLCJpc0Fyckxpa2UiLCJ1bmFyeSIsInVuaXEiLCJ1bmlxQnkiLCJ1bmlxV2l0aCIsInVuc2V0IiwidXBkYXRlIiwidXBkYXRlV2l0aCIsInZhbHVlc0luIiwid3JhcCIsInppcE9iamVjdCIsInppcE9iamVjdERlZXAiLCJlbnRyaWVzSW4iLCJleHRlbmQiLCJleHRlbmRXaXRoIiwiY2xhbXAiLCJjbG9uZURlZXAiLCJjbG9uZURlZXBXaXRoIiwiY2xvbmVXaXRoIiwiY29uZm9ybXNUbyIsImRlZmF1bHRUbyIsImVuZHNXaXRoIiwidGFyZ2V0IiwicG9zaXRpb24iLCJlc2NhcGUiLCJlc2NhcGVSZWdFeHAiLCJldmVyeSIsImZpbmRLZXkiLCJmaW5kTGFzdEtleSIsImZvckluIiwiZm9ySW5SaWdodCIsImZvck93biIsImZvck93blJpZ2h0IiwiaW5SYW5nZSIsImJhc2VJblJhbmdlIiwiaXNCb29sZWFuIiwiaXNFbGVtZW50IiwiaXNFbXB0eSIsImlzRXF1YWwiLCJpc0VxdWFsV2l0aCIsImlzTWF0Y2giLCJpc01hdGNoV2l0aCIsImlzTmFOIiwiaXNOYXRpdmUiLCJpc05pbCIsImlzTnVsbCIsImlzU2FmZUludGVnZXIiLCJpc1VuZGVmaW5lZCIsImlzV2Vha01hcCIsImlzV2Vha1NldCIsImxhc3RJbmRleE9mIiwic3RyaWN0TGFzdEluZGV4T2YiLCJtYXhCeSIsIm1lYW4iLCJtZWFuQnkiLCJtaW5CeSIsInN0dWJPYmplY3QiLCJzdHViU3RyaW5nIiwic3R1YlRydWUiLCJudGgiLCJub0NvbmZsaWN0IiwicGFkIiwic3RyTGVuZ3RoIiwicGFkRW5kIiwicGFkU3RhcnQiLCJyYWRpeCIsImZsb2F0aW5nIiwidGVtcCIsInJlZHVjZSIsInJlZHVjZVJpZ2h0IiwicmVwZWF0Iiwic2FtcGxlIiwic29tZSIsInNvcnRlZEluZGV4Iiwic29ydGVkSW5kZXhCeSIsInNvcnRlZEluZGV4T2YiLCJzb3J0ZWRMYXN0SW5kZXgiLCJzb3J0ZWRMYXN0SW5kZXhCeSIsInNvcnRlZExhc3RJbmRleE9mIiwic3RhcnRzV2l0aCIsInN1bSIsInN1bUJ5IiwidGVtcGxhdGUiLCJzZXR0aW5ncyIsImlzRXNjYXBpbmciLCJpc0V2YWx1YXRpbmciLCJpbXBvcnRzIiwiaW1wb3J0c0tleXMiLCJpbXBvcnRzVmFsdWVzIiwiaW50ZXJwb2xhdGUiLCJyZURlbGltaXRlcnMiLCJldmFsdWF0ZSIsInNvdXJjZVVSTCIsImVzY2FwZVZhbHVlIiwiaW50ZXJwb2xhdGVWYWx1ZSIsImVzVGVtcGxhdGVWYWx1ZSIsImV2YWx1YXRlVmFsdWUiLCJ2YXJpYWJsZSIsInRpbWVzIiwidG9Mb3dlciIsInRvU2FmZUludGVnZXIiLCJ0b1VwcGVyIiwidHJpbSIsInRyaW1FbmQiLCJ0cmltU3RhcnQiLCJ0cnVuY2F0ZSIsIm9taXNzaW9uIiwic2VhcmNoIiwic3Vic3RyaW5nIiwiZ2xvYmFsIiwibmV3RW5kIiwidW5pcXVlSWQiLCJwcmVmaXgiLCJlYWNoIiwiZWFjaFJpZ2h0IiwiZmlyc3QiLCJWRVJTSU9OIiwiaXNGaWx0ZXIiLCJ0YWtlTmFtZSIsImRyb3BOYW1lIiwiY2hlY2tJdGVyYXRlZSIsImlzVGFrZXIiLCJsb2Rhc2hGdW5jIiwicmV0VW53cmFwcGVkIiwiaXNMYXp5IiwidXNlTGF6eSIsImlzSHlicmlkIiwiaXNVbndyYXBwZWQiLCJvbmx5TGF6eSIsImNoYWluTmFtZSIsImRpciIsImlzUmlnaHQiLCJ2aWV3IiwiZ2V0VmlldyIsIml0ZXJMZW5ndGgiLCJ0YWtlQ291bnQiLCJpdGVySW5kZXgiLCJjb21taXQiLCJ3cmFwcGVkIiwidG9KU09OIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsImFwaSIsImRvbUFQSSIsIm5ld09iaiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJnZXRUYXJnZXQiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJsb2FkZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsIm8iLCJlbnVtZXJhYmxlIiwiZ2xvYmFsVGhpcyIsIm5tZCIsImNoaWxkcmVuIiwibmMiLCJsb2NhbHMiLCJlZGl0RG9tIiwiaW5uZXJIVE1MIiwid2VlayIsIkNvcmVGZWF0dXJlIiwidGFibGUiLCJyZWxvYWREYXRhIiwic2lsZW50IiwiY29sdW1uc0NoYW5nZWQiLCJkYXRhTG9hZGVyIiwibG9hZCIsImxhbmdUZXh0IiwibG9jYWxpemUiLCJnZXRUZXh0IiwibGFuZ0JpbmQiLCJsYW5nTG9jYWxlIiwiZ2V0TG9jYWxlIiwiY29tbXNDb25uZWN0aW9ucyIsImNvbW1zIiwiZ2V0Q29ubmVjdGlvbnMiLCJjb21tc1NlbmQiLCJzZW5kIiwibGF5b3V0TW9kZSIsImxheW91dCIsImdldE1vZGUiLCJsYXlvdXRSZWZyZXNoIiwiZm9yY2UiLCJzdWJzY3JpYmUiLCJldmVudEJ1cyIsInVuc3Vic2NyaWJlIiwic3Vic2NyaWJlZCIsInN1YnNjcmlwdGlvbkNoYW5nZSIsImRpc3BhdGNoIiwiY29uZmlybSIsImRpc3BhdGNoRXh0ZXJuYWwiLCJleHRlcm5hbEV2ZW50cyIsInN1YnNjcmliZWRFeHRlcm5hbCIsInN1YnNjcmlwdGlvbkNoYW5nZUV4dGVybmFsIiwic2V0T3B0aW9uIiwiZGVwcmVjYXRpb25DaGVjayIsIm9sZE9wdGlvbiIsIm5ld09wdGlvbiIsImRlcHJlY2F0aW9uQWR2aXNvciIsImNoZWNrIiwiZGVwcmVjYXRpb25DaGVja01zZyIsIm1zZyIsImNoZWNrTXNnIiwiZGVwcmVjYXRpb25Nc2ciLCJIZWxwZXJzIiwiZWxWaXNpYmxlIiwiZWwiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsImVsT2Zmc2V0IiwiYm94IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidG9wIiwicGFnZVlPZmZzZXQiLCJkb2N1bWVudEVsZW1lbnQiLCJjbGllbnRUb3AiLCJsZWZ0IiwicGFnZVhPZmZzZXQiLCJjbGllbnRMZWZ0IiwiZGVlcENsb25lIiwiX19wcm90b19fIiwic3ViamVjdCIsInVuc2hpZnQiLCJQb3B1cCIsInN1cGVyIiwiY29udGFpbmVyIiwiX2xvb2t1cENvbnRhaW5lciIsInJldmVyc2VkWCIsImNoaWxkUG9wdXAiLCJibHVyYWJsZSIsImJsdXJDYWxsYmFjayIsImJsdXJFdmVudHNCb3VuZCIsInJlbmRlcmVkQ2FsbGJhY2siLCJ2aXNpYmxlIiwiaGlkZWFibGUiLCJjbGFzc0xpc3QiLCJibHVyRXZlbnQiLCJoaWRlIiwiZXNjRXZlbnQiLCJfZXNjYXBlQ2hlY2siLCJkZXN0cm95QmluZGluZyIsInRhYmxlRGVzdHJveWVkIiwiZGVzdHJveWVkIiwicG9wdXBDb250YWluZXIiLCJjb25zb2xlIiwid2FybiIsIl9jaGVja0NvbnRhaW5lcklzUGFyZW50IiwiYm9keSIsInJlbmRlckNhbGxiYWNrIiwiY29udGFpbmVyRXZlbnRDb29yZHMiLCJ0b3VjaCIsIk1vdXNlRXZlbnQiLCJ4IiwidG91Y2hlcyIsInBhZ2VYIiwieSIsInBhZ2VZIiwicGFyZW50T2Zmc2V0IiwiZWxlbWVudFBvc2l0aW9uQ29vcmRzIiwiY29udGFpbmVyT2Zmc2V0Iiwic2hvdyIsIm9yaWdpbiIsInBhcmVudEVsIiwiY29vcmRzIiwiSFRNTEVsZW1lbnQiLCJfZml0VG9TY3JlZW4iLCJhZGRFdmVudExpc3RlbmVyIiwic3RvcFByb3BhZ2F0aW9uIiwic2Nyb2xsVG9wIiwicmlnaHQiLCJzY3JvbGxIZWlnaHQiLCJpc1Zpc2libGUiLCJoaWRlT25CbHVyIiwicm93TWFuYWdlciIsImtleUNvZGUiLCJibG9ja0hpZGUiLCJyZXN0b3JlSGlkZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjaGlsZCIsIk1vZHVsZSIsIl9oYW5kbGVyIiwiaW5pdGlhbGl6ZSIsInJlZ2lzdGVyVGFibGVPcHRpb24iLCJvcHRpb25zTGlzdCIsInJlZ2lzdGVyIiwicmVnaXN0ZXJDb2x1bW5PcHRpb24iLCJjb2x1bW5NYW5hZ2VyIiwicmVnaXN0ZXJUYWJsZUZ1bmN0aW9uIiwiaW5pdEd1YXJkIiwicmVnaXN0ZXJDb21wb25lbnRGdW5jdGlvbiIsImNvbXBvbmVudCIsImhhbmRsZXIiLCJjb21wb25lbnRGdW5jdGlvbkJpbmRlciIsInJlZ2lzdGVyRGF0YUhhbmRsZXIiLCJwcmlvcml0eSIsInJlZ2lzdGVyRGF0YVBpcGVsaW5lSGFuZGxlciIsInJlZ2lzdGVyRGlzcGxheUhhbmRsZXIiLCJyZWdpc3RlckRpc3BsYXlQaXBlbGluZUhhbmRsZXIiLCJkaXNwbGF5Um93cyIsImFkanVzdCIsImxvb2t1cEluZGV4IiwiZGlzcGxheVBpcGVsaW5lIiwiZ2V0RGlzcGxheVJvd3MiLCJhY3RpdmVSb3dzIiwicmVmcmVzaERhdGEiLCJyZW5kZXJJblBvc2l0aW9uIiwicmVmcmVzaEFjdGl2ZURhdGEiLCJmb290ZXJBcHBlbmQiLCJmb290ZXJNYW5hZ2VyIiwiYXBwZW5kIiwiZm9vdGVyUHJlcGVuZCIsInByZXBlbmQiLCJmb290ZXJSZW1vdmUiLCJwb3B1cCIsIm1lbnVFbCIsIm1lbnVDb250YWluZXIiLCJhbGVydCIsImFsZXJ0TWFuYWdlciIsImNsZWFyQWxlcnQiLCJBY2Nlc3NvciIsImFsbG93ZWRUeXBlcyIsImluaXRpYWxpemVDb2x1bW4iLCJ0cmFuc2Zvcm1Sb3ciLCJjb2x1bW4iLCJjb25maWciLCJhY2Nlc3NvciIsImxvb2t1cEFjY2Vzc29yIiwicGFyYW1zIiwiYWNjZXNzb3JzIiwicm93Iiwicm93Q29tcG9uZW50IiwiZ2V0Q29tcG9uZW50IiwidHJhdmVyc2UiLCJjb2xDb21wb25lbnQiLCJnZXRGaWVsZFZhbHVlIiwic2V0RmllbGRWYWx1ZSIsImdlbmVyYXRlUGFyYW1zTGlzdCIsIm91dHB1dCIsInNlcmlhbGl6ZVBhcmFtcyIsImVuY29kZWQiLCJ1cmxCdWlsZGVyIiwidXJsIiwiZ2VuZXJhdGVQYXJhbXNMaXN0JDEiLCJtb2R1bGVOYW1lIiwiZGVmYXVsdENvbnRlbnRUeXBlRm9ybWF0dGVycyIsImhlYWRlcnMiLCJmb3JtIiwiRm9ybURhdGEiLCJBamF4IiwidXJsR2VuZXJhdG9yIiwibG9hZGVyUHJvbWlzZSIsImNvbnRlbnRUeXBlRm9ybWF0dGVycyIsImFqYXhSZXF1ZXN0RnVuYyIsImRlZmF1bHRMb2FkZXJQcm9taXNlIiwiYWpheFVSTEdlbmVyYXRvciIsImRlZmF1bHRVUkxHZW5lcmF0b3IiLCJhamF4VVJMIiwic2V0VXJsIiwic2V0RGVmYXVsdENvbmZpZyIsImFqYXhDb25maWciLCJnZXRVcmwiLCJyZXF1ZXN0RGF0YUNoZWNrIiwicmVxdWVzdFBhcmFtcyIsInJlcXVlc3REYXRhIiwiYWpheFBhcmFtcyIsInByZXZpb3VzRGF0YSIsImdlbmVyYXRlQ29uZmlnIiwic2VuZFJlcXVlc3QiLCJkZWZhdWx0Q29uZmlnIiwiYWpheFJlcXVlc3RpbmciLCJ0aGVuIiwiYWpheFJlc3BvbnNlIiwiY29udGVudFR5cGUiLCJhamF4Q29udGVudFR5cGUiLCJBY2NlcHQiLCJtb2RlIiwibG9jYXRpb24iLCJjcmVkZW50aWFscyIsImZldGNoIiwicmVzcG9uc2UiLCJvayIsImpzb24iLCJjYXRjaCIsImVycm9yIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsIkNsaXBib2FyZCIsInBhc3RlUGFyc2VyIiwicGFzdGVBY3Rpb24iLCJjdXN0b21TZWxlY3Rpb24iLCJyb3dSYW5nZSIsImJsb2NrZWQiLCJjbGlwYm9hcmQiLCJjbGlwYm9hcmRDb3B5Um93UmFuZ2UiLCJwbGFpbiIsImh0bWwiLCJwcmV2ZW50RGVmYXVsdCIsImNsaXBib2FyZENvcHlGb3JtYXR0ZXIiLCJleHBvcnQiLCJnZW5lcmF0ZUV4cG9ydExpc3QiLCJjbGlwYm9hcmRDb3B5Q29uZmlnIiwiY2xpcGJvYXJkQ29weVN0eWxlZCIsImdlbmVyYXRlSFRNTFRhYmxlIiwiZ2VuZXJhdGVQbGFpbkNvbnRlbnQiLCJjbGlwYm9hcmREYXRhIiwib3JpZ2luYWxFdmVudCIsInJlc2V0IiwicGFzdGUiLCJzZXRQYXN0ZVBhcnNlciIsImNsaXBib2FyZFBhc3RlUGFyc2VyIiwic2V0UGFzdGVBY3Rpb24iLCJjbGlwYm9hcmRQYXN0ZUFjdGlvbiIsInJvd0RhdGEiLCJjb2x1bW5zIiwiY29sIiwiZ2V0S2V5IiwiaW50ZXJuYWwiLCJzZWwiLCJ0ZXh0UmFuZ2UiLCJnZXRTZWxlY3Rpb24iLCJzZWxlY3ROb2RlQ29udGVudHMiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNlbGVjdGlvbiIsImNyZWF0ZVRleHRSYW5nZSIsIm1vdmVUb0VsZW1lbnRUZXh0Iiwic2VsZWN0IiwiZXhlY0NvbW1hbmQiLCJwYXN0ZUFjdGlvbnMiLCJwYXJzZXIiLCJwYXN0ZVBhcnNlcnMiLCJyb3dzIiwiY2hlY2tQYXNlT3JpZ2luIiwiZ2V0UGFzdGVEYXRhIiwibW9kRXhpc3RzIiwibXV0YXRlRGF0YSIsIm11dGF0b3IiLCJ2YWxpZCIsInRhZ05hbWUiLCJlZGl0IiwiY3VycmVudENlbGwiLCJ1cGRhdGVPckFkZERhdGEiLCJhZGREYXRhIiwiaGVhZGVyRmluZFN1Y2Nlc3MiLCJjb2x1bW5NYXAiLCJ0aXRsZSIsImZpZWxkIiwiY29sdW1uc0J5SW5kZXgiLCJzaGlmdCIsIkNhbGNDb21wb25lbnQiLCJfcm93IiwiUHJveHkiLCJyZWNlaXZlciIsImhhbmRsZSIsImdldEVsZW1lbnQiLCJnZXRUYWJsZSIsImdldENlbGxzIiwiY2VsbHMiLCJjZWxsIiwiZ2V0Q2VsbCIsIl9nZXRTZWxmIiwiQ2VsbENvbXBvbmVudCIsIl9jZWxsIiwiZ2V0T2xkVmFsdWUiLCJnZXRJbml0aWFsVmFsdWUiLCJpbml0aWFsVmFsdWUiLCJnZXRSb3ciLCJnZXRUeXBlIiwiZ2V0RmllbGQiLCJnZXRDb2x1bW4iLCJzZXRWYWx1ZSIsIm11dGF0ZSIsInJlc3RvcmVPbGRWYWx1ZSIsInNldFZhbHVlQWN0dWFsIiwicmVzdG9yZUluaXRpYWxWYWx1ZSIsImNoZWNrSGVpZ2h0IiwiQ2VsbCIsIm9sZFZhbHVlIiwiaGVpZ2h0Iiwid2lkdGgiLCJtaW5XaWR0aCIsImJ1aWxkIiwiZ2VuZXJhdGVFbGVtZW50Iiwic2V0V2lkdGgiLCJfY29uZmlndXJlQ2VsbCIsImNsYXNzTmFtZSIsInRleHRBbGlnbiIsImhvekFsaWduIiwidmVydEFsaWduIiwiZGlzcGxheSIsImFsaWduSXRlbXMiLCJib3R0b20iLCJtaWRkbGUiLCJqdXN0aWZ5Q29udGVudCIsImNlbnRlciIsImNzc0NsYXNzIiwiX2dlbmVyYXRlQ29udGVudHMiLCJ2YWwiLCJOb2RlIiwiY2VsbFJlbmRlcmVkIiwiY29udGFpbmVyT25seSIsImxheW91dEVsZW1lbnQiLCJzZXRWYWx1ZVByb2Nlc3NEYXRhIiwiY2VsbEVkaXRlZCIsImNoYW5nZWQiLCJ3aWR0aFN0eWxlZCIsImNsZWFyV2lkdGgiLCJnZXRXaWR0aCIsInNldE1pbldpZHRoIiwibWluV2lkdGhTdHlsZWQiLCJzZXRNYXhXaWR0aCIsIm1heFdpZHRoIiwibWF4V2lkdGhTdHlsZWQiLCJyZWluaXRpYWxpemVIZWlnaHQiLCJjbGVhckhlaWdodCIsInNldEhlaWdodCIsImhlaWdodFN0eWxlZCIsImdldEhlaWdodCIsInJlZHJhd0Jsb2NrIiwiZGVsZXRlQ2VsbCIsImNhbGNzIiwiZ2V0SW5kZXgiLCJnZXRDZWxsSW5kZXgiLCJDb2x1bW5Db21wb25lbnQiLCJfY29sdW1uIiwiZ2V0RGVmaW5pdGlvbiIsImdldFRpdGxlRG93bmxvYWQiLCJpc0dyb3VwIiwidG9nZ2xlIiwiZGVsZXRlIiwiZ2V0U3ViQ29sdW1ucyIsImdldFBhcmVudENvbHVtbiIsIkNvbHVtbiIsInNjcm9sbFRvIiwiaWZWaXNpYmxlIiwic2Nyb2xsVG9Db2x1bW4iLCJtb3ZlIiwidG8iLCJ0b0NvbHVtbiIsImZpbmRDb2x1bW4iLCJtb3ZlQ29sdW1uIiwiZ2V0TmV4dENvbHVtbiIsIm5leHRDb2wiLCJuZXh0Q29sdW1uIiwiZ2V0UHJldkNvbHVtbiIsInByZXZDb2wiLCJwcmV2Q29sdW1uIiwidXBkYXRlRGVmaW5pdGlvbiIsInVwZGF0ZXMiLCJyZWluaXRpYWxpemVXaWR0aCIsInJlcmVuZGVyQ29sdW1ucyIsImRlZmF1bHRDb2x1bW5PcHRpb25zIiwiZGVmIiwiY29udGVudEVsZW1lbnQiLCJ0aXRsZUhvbGRlckVsZW1lbnQiLCJ0aXRsZUVsZW1lbnQiLCJncm91cEVsZW1lbnQiLCJjcmVhdGVHcm91cEVsZW1lbnQiLCJmaWVsZFN0cnVjdHVyZSIsInRpdGxlRG93bmxvYWQiLCJ0aXRsZUZvcm1hdHRlclJlbmRlcmVkIiwibWFwRGVmaW5pdGlvbnMiLCJzZXRGaWVsZCIsIm1heEluaXRpYWxXaWR0aCIsIndpZHRoRml4ZWQiLCJuZXdDb2wiLCJhdHRhY2hDb2x1bW4iLCJjaGVja0NvbHVtblZpc2liaWxpdHkiLCJyZWdpc3RlckNvbHVtbkZpZWxkIiwiX2luaXRpYWxpemUiLCJjb2x1bW5IZWFkZXJWZXJ0QWxpZ24iLCJjb2x1bW5EZWZhdWx0cyIsImdlbmVyYXRlIiwiZGVmYXVsdE9wdGlvbkxpc3QiLCJjaGVja0RlZmluaXRpb24iLCJuZXN0ZWRGaWVsZFNlcGFyYXRvciIsIl9nZXROZXN0ZWREYXRhIiwiX2dldEZsYXREYXRhIiwiX3NldE5lc3RlZERhdGEiLCJfc2V0RmxhdERhdGEiLCJyZWdpc3RlckNvbHVtblBvc2l0aW9uIiwicmVSZWdpc3RlclBvc2l0aW9uIiwiaGVhZGVyVmVydGljYWwiLCJfYnVpbGRDb2x1bW5IZWFkZXJDb250ZW50IiwiX2J1aWxkR3JvdXBIZWFkZXIiLCJfYnVpbGRDb2x1bW5IZWFkZXIiLCJoZWFkZXJIb3pBbGlnbiIsIl9idWlsZENvbHVtbkhlYWRlclRpdGxlIiwiaGVhZGVyV29yZFdyYXAiLCJlZGl0YWJsZVRpdGxlIiwiZm9jdXMiLCJ0ZXh0IiwiX2Zvcm1hdENvbHVtbkhlYWRlclRpdGxlIiwiY29udGVudHMiLCJkYXRhT2JqIiwic3RydWN0dXJlIiwiY29sdW1uUmVuZGVyZWQiLCJ2ZXJ0aWNhbEFsaWduIiwiYWxpZ25tZW50IiwicGFyZW50SGVpZ2h0IiwiZ2V0R3JvdXBFbGVtZW50IiwiY2xpZW50SGVpZ2h0IiwiZ2V0SGVhZGVyc0VsZW1lbnQiLCJtaW5IZWlnaHQiLCJjbGVhclZlcnRpY2FsQWxpZ24iLCJwYWRkaW5nVG9wIiwiZ2V0Rmlyc3RDb2x1bW4iLCJnZXRMYXN0Q29sdW1uIiwiZ2V0Q29sdW1ucyIsImdldFRvcENvbHVtbiIsInVwZGF0ZUJyYW5jaGVzIiwiY29sRGVmcyIsInJlc3BvbnNpdmVUb2dnbGUiLCJ2ZXJ0aWNhbEFsaWduSGVhZGVycyIsIm1hdGNoQ2hpbGRXaWR0aHMiLCJjaGlsZFdpZHRoIiwic2V0V2lkdGhBY3R1YWwiLCJjbGllbnRXaWR0aCIsImNoZWNrQ2VsbEhlaWdodHMiLCJoZWlnaHRJbml0aWFsaXplZCIsIm9mZnNldFBhcmVudCIsImNsZWFyQ2VsbEhlaWdodCIsImNhbGNIZWlnaHQiLCJzZXRDZWxsSGVpZ2h0IiwiZ2V0TGVmdE9mZnNldCIsIm9mZnNldExlZnQiLCJjZWxsQ291bnQiLCJkZXJlZ2lzdGVyQ29sdW1uIiwiZ2VuZXJhdGVDZWxsIiwiZmluZENvbHVtbkluZGV4IiwiX25leHRWaXNpYmxlQ29sdW1uIiwiZ2V0Q29sdW1uQnlJbmRleCIsIl9wcmV2VmlzaWJsZUNvbHVtbiIsImZpdFRvRGF0YSIsInNldFRvIiwiYWRkQ29sdW1uIiwiUm93Q29tcG9uZW50IiwiZ2V0UG9zaXRpb24iLCJ3YXRjaFBvc2l0aW9uIiwic2Nyb2xsVG9Sb3ciLCJtb3ZlVG9Sb3ciLCJ1cGRhdGVEYXRhIiwibm9ybWFsaXplSGVpZ2h0IiwicmVmb3JtYXQiLCJyZWluaXRpYWxpemUiLCJnZXROZXh0Um93IiwibmV4dFJvdyIsImdldFByZXZSb3ciLCJwcmV2Um93IiwiUm93IiwibWFudWFsSGVpZ2h0Iiwib3V0ZXJIZWlnaHQiLCJpbml0aWFsaXplZCIsInBvc2l0aW9uV2F0Y2hlcnMiLCJjcmVhdGVkIiwiZGV0YWNoRWxlbWVudCIsImdlbmVyYXRlQ2VsbHMiLCJpbkZyYWdtZW50IiwiZGVsZXRlQ2VsbHMiLCJyZW5kZXJlciIsInJlbmRlclJvd0NlbGxzIiwicm93Rm9ybWF0dGVyIiwicmVyZW5kZXJSb3dDZWxscyIsInJlbmRlcmVkIiwiZGVpbml0aWFsaXplIiwiZGVpbml0aWFsaXplSGVpZ2h0IiwibWF4SGVpZ2h0Iiwicm93SGVpZ2h0IiwicmVzaXphYmxlUm93cyIsInVwZGF0ZWREYXRhIiwibmV3Um93RGF0YSIsInRlbXBEYXRhIiwicGFyc2UiLCJhdHRybmFtZSIsImdldENvbHVtbnNCeUZpZWxkUm9vdCIsImZpbmRDZWxsIiwibmV4dERpc3BsYXlSb3ciLCJwcmV2RGlzcGxheVJvdyIsInRvUm93IiwiZmluZFJvdyIsIm1vdmVSb3dBY3R1YWwiLCJkZWxldGVBY3R1YWwiLCJibG9ja1JlZHJhdyIsImRldGFjaE1vZHVsZXMiLCJkZWxldGVSb3ciLCJ3aXBlIiwiaXNEaXNwbGF5ZWQiLCJzZXRQb3NpdGlvbiIsImdldEdyb3VwIiwiZGVmYXVsdENhbGN1bGF0aW9ucyIsImNhbGNQYXJhbXMiLCJOdW1iZXIiLCJ0b0ZpeGVkIiwiQ29sdW1uQ2FsY3MiLCJ0b3BDYWxjcyIsImJvdENhbGNzIiwiZ2VuQ29sdW1uIiwidG9wRWxlbWVudCIsImJvdEVsZW1lbnQiLCJ0b3BSb3ciLCJib3RSb3ciLCJ0b3BJbml0aWFsaXplZCIsImJvdEluaXRpYWxpemVkIiwicmVjYWxjQWZ0ZXJCbG9jayIsImNlbGxWYWx1ZUNoYW5nZWQiLCJpbml0aWFsaXplQ29sdW1uQ2hlY2siLCJyb3dzVXBkYXRlZCIsInNjcm9sbEhvcml6b250YWwiLCJyZWNhbGNBY3RpdmVSb3dzIiwicmVjYWxjQWN0aXZlUm93c1JlZnJlc2giLCJ0YWJsZVJlZHJhdyIsInZpc2libGVSb3dzIiwiYWRqdXN0Rm9yU2Nyb2xsYmFyIiwicmVzdG9yZVJlZHJhdyIsInJlc2l6ZUhvbGRlcldpZHRoIiwiZ2V0UmVzdWx0cyIsInVzZXJSZWNhbGMiLCJoZWFkZXJzRWxlbWVudCIsInJlY2FsYyIsInJlZHJhdyIsImJsb2NrQ2hlY2siLCJ2aWV3YWJsZSIsInJlY2FsY1Jvd0dyb3VwIiwiZGF0YVRyZWVTdGFydEV4cGFuZGVkIiwiZGF0YVRyZWUiLCJyZWNhbGNBbGwiLCJ0b3BDYWxjIiwiYm90dG9tQ2FsYyIsImNvbHVtbkNhbGNzIiwidG9wQ2FsY1BhcmFtcyIsImJvdENhbGNQYXJhbXMiLCJib3R0b21DYWxjUGFyYW1zIiwiY2FsY3VsYXRpb25zIiwiaW5pdGlhbGl6ZVRvcFJvdyIsImJvdENhbGMiLCJpbml0aWFsaXplQm90dG9tUm93IiwicmVtb3ZlQ2FsY3MiLCJhZGp1c3RUYWJsZVNpemUiLCJyZWluaXRpYWxpemVDYWxjcyIsImdldENvbnRlbnRzRWxlbWVudCIsImluc2VydEJlZm9yZSIsIm5leHRTaWJsaW5nIiwic2Nyb2xsTGVmdCIsInJvd3NUb0RhdGEiLCJnZW5lcmF0ZVJvdyIsImZyb3plbkNvbHVtbnMiLCJyZWNhbGNHcm91cCIsImdyb3VwUm93cyIsImdldFJvd0dyb3VwIiwiZ2V0Q2hpbGRHcm91cHMiLCJnZW5lcmF0ZVJvd0RhdGEiLCJnZW5lcmF0ZVRvcFJvdyIsImdlbmVyYXRlQm90dG9tUm93IiwiZGF0YVRyZWVDaGlsZENvbHVtbkNhbGNzIiwib3BlbiIsImdldEZpbHRlcmVkVHJlZUNoaWxkcmVuIiwicG9zIiwiZGlzYWJsZSIsImVuYWJsZSIsImZvcm1hdCIsImZvcm1hdHRlciIsImdldEZvcm1hdHRlciIsInBhcmFtS2V5IiwiaGFzVG9wQ2FsY3MiLCJoYXNCb3R0b21DYWxjcyIsInJlc3VsdHMiLCJnZXRHcm91cHMiLCJnZXRHcm91cFJlc3VsdHMiLCJncm91cE9iaiIsInN1Ykdyb3VwcyIsImdldFN1Ykdyb3VwcyIsInN1Ykdyb3VwUmVzdWx0cyIsInN1Ymdyb3VwIiwiZ3JvdXBzIiwicnRsIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJEYXRhVHJlZSIsImluZGVudCIsImNvbGxhcHNlRWwiLCJleHBhbmRFbCIsImJyYW5jaEVsIiwiZWxlbWVudEZpZWxkIiwic3RhcnRPcGVuIiwiY29sbGFwc2VSb3ciLCJleHBhbmRSb3ciLCJ0b2dnbGVSb3ciLCJnZXRUcmVlUGFyZW50IiwiZ2V0Um93Q2hpbGRyZW4iLCJhZGRUcmVlQ2hpbGRSb3ciLCJpc1Jvd0V4cGFuZGVkIiwiZHVtbXlFbCIsImRhdGFUcmVlQ2hpbGRGaWVsZCIsImRhdGFUcmVlQ2hpbGRJbmRlbnQiLCJkYXRhVHJlZUJyYW5jaEVsZW1lbnQiLCJkYXRhVHJlZUNvbGxhcHNlRWxlbWVudCIsInRhYkluZGV4IiwiZGF0YVRyZWVFeHBhbmRFbGVtZW50IiwiaW5pdGlhbGl6ZVJvdyIsImxheW91dFJvdyIsInJvd0RlbGV0ZSIsInJvd0RhdGFDaGFuZ2VkIiwiY29sdW1uTW92aW5nIiwiaW5pdGlhbGl6ZUVsZW1lbnRGaWVsZCIsInRhYmxlUmVkcmF3aW5nIiwiZ2V0Um93cyIsInJlaW5pdGlhbGl6ZVJvd0NoaWxkcmVuIiwiZmlyc3RDb2wiLCJnZXRGaXJzdFZpc2libGVDb2x1bW4iLCJkYXRhVHJlZUVsZW1lbnRDb2x1bW4iLCJnZXRUcmVlQ2hpbGRyZW4iLCJyZWRyYXdOZWVkZWQiLCJjaGlsZEFycmF5IiwiY29udHJvbEVsIiwiZ2VuZXJhdGVDb250cm9sRWxlbWVudCIsImNsb25lTm9kZSIsIm1hcmdpblJpZ2h0IiwibWFyZ2luTGVmdCIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwib2xkQ29udHJvbCIsInJlcGxhY2VDaGlsZCIsImdldENoaWxkcmVuIiwiYWxsQ2hpbGRyZW4iLCJnZW5lcmF0ZUNoaWxkcmVuIiwiZGF0YVRyZWVGaWx0ZXIiLCJkYXRhVHJlZVNvcnQiLCJzdWIiLCJjaGlsZERhdGEiLCJjaGlsZFJvdyIsImdldFRyZWVQYXJlbnRSb290IiwiY2hpbGRJbmRleCIsImZpbmRDaGlsZEluZGV4IiwicmVjdXJzZSIsImdldENoaWxkRmllbGQiLCJkZWZhdWx0RG93bmxvYWRlcnMiLCJjc3YiLCJzZXRGaWxlQ29udGVudHMiLCJkZWxpbWl0ZXIiLCJmaWxlQ29udGVudHMiLCJib20iLCJqc29uTGluZXMiLCJwZGYiLCJoZWFkZXIiLCJhdXRvVGFibGVQYXJhbXMiLCJyb3dHcm91cFN0eWxlcyIsImZvbnRTdHlsZSIsImZvbnRTaXplIiwiY2VsbFBhZGRpbmciLCJmaWxsQ29sb3IiLCJyb3dDYWxjU3R5bGVzIiwianNQREZQYXJhbXMiLCJqc1BERiIsInBhcnNlUm93Iiwic3R5bGVzIiwiY29sU3BhbiIsInJvd1NwYW4iLCJvcmllbnRhdGlvbiIsInVuaXQiLCJkb2MiLCJqc3BkZiIsImF1dG9UYWJsZSIsImRpZERyYXdQYWdlIiwiZG9jdW1lbnRQcm9jZXNzaW5nIiwieGxzeCIsInNoZWV0TmFtZSIsIndvcmtib29rIiwiWExTWCIsInV0aWxzIiwiYm9va19uZXciLCJ0YWJsZUZlYXR1cmVzIiwiY29tcHJlc3Npb24iLCJjb21wcmVzcyIsIndyaXRlT3B0aW9ucyIsImJvb2tUeXBlIiwiYm9va1NTVCIsImdlbmVyYXRlU2hlZXQiLCJtZXJnZXMiLCJ3b3Jrc2hlZXQiLCJzIiwiYyIsInIiLCJiIiwiaiIsInNoZWV0X2FkZF9hb2EiLCJlbmNvZGVfcmFuZ2UiLCJTaGVldE5hbWVzIiwiU2hlZXRzIiwic2hlZXRPbmx5Iiwic2hlZXRzIiwic2hlZXQiLCJhY3RpdmUiLCJpbnRlcmNlcHQiLCJidWYiLCJzMmFiIiwid3JpdGUiLCJEb3dubG9hZCIsIm1pbWVUeXBlIiwiQmxvYiIsImRlcHJlY2F0ZWRPcHRpb25zQ2hlY2siLCJkb3dubG9hZCIsImRvd25sb2FkVG9UYWIiLCJmaWxlbmFtZSIsImludGVyY2VwdENhbGxiYWNrIiwiZG93bmxvYWRGdW5jIiwiZG93bmxvYWRlcnMiLCJtaW1lIiwidHJpZ2dlckRvd25sb2FkIiwiZG93bmxvYWRDb25maWciLCJkb3dubG9hZFJvd1JhbmdlIiwiZ3JvdXBIZWFkZXIiLCJncm91cEhlYWRlckRvd25sb2FkIiwiX2dyb3VwIiwiZ2V0Um93Q291bnQiLCJuZXdUYWIiLCJibG9iIiwiZG93bmxvYWRFbmNvZGVyIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwibmF2aWdhdG9yIiwibXNTYXZlT3JPcGVuQmxvYiIsImNsaWNrIiwiY29tbXNSZWNlaXZlZCIsIm1hc2tJbnB1dCIsIm1hc2siLCJtYXNrTGV0dGVyIiwibWFza0xldHRlckNoYXIiLCJtYXNrTnVtYmVyIiwibWFza051bWJlckNoYXIiLCJtYXNrV2lsZGNhcmQiLCJtYXNrV2lsZGNhcmRDaGFyIiwiZmlsbFN5bWJvbHMiLCJjaGFyIiwiY3RybEtleSIsIm1ldGFLZXkiLCJtYXNrQXV0b0ZpbGwiLCJFZGl0IiwiZWRpdG9yIiwib25SZW5kZXJlZCIsInN1Y2Nlc3MiLCJlZGl0b3JQYXJhbXMiLCJfaW5pdGlhbGl6ZVBhcmFtcyIsImRpc3BsYXlJdGVtcyIsImN1cnJlbnRJdGVtcyIsImZvY3VzZWRJdGVtIiwiX2NyZWF0ZUlucHV0RWxlbWVudCIsImxpc3RFbCIsIl9jcmVhdGVMaXN0RWxlbWVudCIsImluaXRpYWxWYWx1ZXMiLCJmaWx0ZXJUaW1lb3V0IiwiZmlsdGVyZWQiLCJ0eXBpbmciLCJsaXN0SXRlcmF0aW9uIiwibGFzdEFjdGlvbiIsImZpbHRlclRlcm0iLCJfZGVwcmVjYXRlZE9wdGlvbnNDaGVjayIsIl9pbml0aWFsaXplVmFsdWUiLCJfb25SZW5kZXJlZCIsImxpc3RJdGVtRm9ybWF0dGVyIiwic29ydFZhbHVlc0xpc3QiLCJzZWFyY2hGdW5jIiwic2VhcmNoaW5nUGxhY2Vob2xkZXIiLCJtdWx0aXNlbGVjdCIsImhlYWRlckZpbHRlckluaXRpYWxMaXN0R2VuIiwiY2VsbEVsIiwiY2xpY2tTdG9wIiwicHJldmVudFNjcm9sbCIsIl9wcmV2ZW50UG9wdXBCbHVyIiwiX3ByZXZlbnRCbHVyIiwiX2lucHV0S2V5RG93biIsIl9zZXRMaXN0V2lkdGgiLCJhdHRyaWJzIiwiZWxlbWVudEF0dHJpYnV0ZXMiLCJjbGVhcmFibGUiLCJwYWRkaW5nIiwiYm94U2l6aW5nIiwiYXV0b2NvbXBsZXRlIiwiY3Vyc29yIiwiY2FyZXRDb2xvciIsImdldEF0dHJpYnV0ZSIsIl9iaW5kSW5wdXRFdmVudHMiLCJ2YWx1ZUNoZWNrIiwidmFsdWVLZXlzIiwidmVydGljYWxOYXZpZ2F0aW9uIiwicGxhY2Vob2xkZXJMb2FkaW5nIiwicGxhY2Vob2xkZXJFbXB0eSIsImZpbHRlckRlbGF5IiwiZW1wdHlWYWx1ZSIsImZyZWV0ZXh0IiwiZmlsdGVyRnVuYyIsImZpbHRlclJlbW90ZSIsImFsbG93RW1wdHkiLCJsaXN0T25FbXB0eSIsInZhbHVlc0xvb2t1cCIsInZhbHVlc1VSTCIsIl9pbnB1dEZvY3VzIiwiX2lucHV0Q2xpY2siLCJfaW5wdXRCbHVyIiwiX2lucHV0U2VhcmNoIiwiX2lucHV0S2V5VXAiLCJyZWJ1aWxkT3B0aW9uc0xpc3QiLCJfZmlsdGVyIiwiX2ZpbHRlckxpc3QiLCJfcmVzb2x2ZVZhbHVlIiwiX2NsZWFyQ2hvaWNlcyIsIl9rZXlVcCIsIl9rZXlEb3duIiwiX2tleVNpZGUiLCJfa2V5RW50ZXIiLCJfa2V5RXNjIiwiX2tleUhvbWVFbmQiLCJfa2V5VGFiIiwiX2tleVNlbGVjdExldHRlciIsIl9rZXlBdXRvQ29tcExldHRlciIsIl9jaG9vc2VJdGVtIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiX2ZvY3VzSXRlbSIsIl9jYW5jZWwiLCJfc2Nyb2xsVG9WYWx1ZSIsImNoYXJhY3RlciIsImZyb21DaGFyQ29kZSIsImxhYmVsIiwic2Nyb2xsSW50b1ZpZXciLCJiZWhhdmlvciIsImJsb2NrIiwiaW5saW5lIiwiX2dlbmVyYXRlT3B0aW9ucyIsIl9zb3J0T3B0aW9ucyIsIl9idWlsZExpc3QiLCJfc2hvd0xpc3QiLCJfZmlsdGVyT3B0aW9ucyIsIml0ZXJhdGlvbiIsIl9hamF4UmVxdWVzdCIsIl91bmlxdWVDb2x1bW5WYWx1ZXMiLCJ2YWx1ZXNMb29rdXBGaWVsZCIsIl9hZGRQbGFjZWhvbGRlciIsInJlc3BvbnNlVmFsdWVzIiwiX3BhcnNlTGlzdCIsIl9jbGVhckxpc3QiLCJ0ZXJtIiwiZ2V0Q29sdW1uQnlGaWVsZCIsImlucHV0VmFsdWVzIiwiX3BhcnNlTGlzdEl0ZW0iLCJvcHRpb24iLCJsZXZlbCIsIl9wYXJzZUxpc3RHcm91cCIsIml0ZW1QYXJhbXMiLCJzZWxlY3RlZCIsIm9yaWdpbmFsIiwic29ydGVyIiwiX2RlZmF1bHRTb3J0RnVuY3Rpb24iLCJfc29ydEdyb3VwIiwiYXMiLCJicyIsImExIiwiYjEiLCJMIiwicngiLCJyZCIsImVtcHR5QWxpZ24iLCJfZGVmYXVsdEZpbHRlckZ1bmMiLCJfZmlsdGVySXRlbSIsIl9idWlsZEl0ZW0iLCJpdGVtRm9ybWF0dGVyIiwiX2dyb3VwQ2xpY2siLCJfaXRlbUNsaWNrIiwiX3N0eWxlSXRlbSIsInN0YXJ0VmlzIiwiYmx1ciIsImRlZmF1bHRFZGl0b3JzIiwiY2VsbFZhbHVlIiwib25DaGFuZ2UiLCJzZWxlY3RDb250ZW50cyIsInRleHRhcmVhIiwidmVydE5hdiIsIndoaXRlU3BhY2UiLCJyZXNpemUiLCJoZWlnaHROb3ciLCJzaGlmdEtleSIsInNoaWZ0RW50ZXJTdWJtaXQiLCJzZWxlY3Rpb25TdGFydCIsImJsdXJGdW5jIiwiZGF0ZSIsImlucHV0Rm9ybWF0IiwiRFQiLCJEYXRlVGltZSIsImx1eG9uIiwiY29udmVydERhdGUiLCJpc0RhdGVUaW1lIiwiZnJvbUlTTyIsImZyb21Gb3JtYXQiLCJ0b0Zvcm1hdCIsImx1eERhdGUiLCJ0b0lTTyIsInJlbGF0ZWRUYXJnZXQiLCJyYW5nZVBhcmVudCIsImV4cGxpY2l0T3JpZ2luYWxUYXJnZXQiLCJuZXdEYXRldGltZSIsImx1eFRpbWUiLCJkYXRldGltZSIsImx1eERhdGVUaW1lIiwic3RhciIsIm1heFN0YXJzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzdGFycyIsInN0YXJzSG9sZGVyIiwiY3JlYXRlRWxlbWVudE5TIiwic3RhckNoYW5nZSIsImJyb3dzZXIiLCJidWlsZFN0YXIiLCJzdGFySG9sZGVyIiwibmV4dFN0YXIiLCJjaGFuZ2VWYWx1ZSIsIm92ZXJmbG93IiwidGV4dE92ZXJmbG93IiwicHJvZ3Jlc3MiLCJtb3VzZURyYWciLCJtb3VzZURyYWdXaWR0aCIsInBlcmNlbnQiLCJiYXIiLCJ1cGRhdGVWYWx1ZSIsImNhbGNWYWwiLCJiYWNrZ3JvdW5kQ29sb3IiLCJzY3JlZW5YIiwidGlja0Nyb3NzIiwidHJpc3RhdGUiLCJpbmRldGVybVZhbHVlIiwiaW5kZXRlcm1pbmF0ZVZhbHVlIiwiaW5kZXRlcm1TdGF0ZSIsInRydWVWYWx1ZVNldCIsImZhbHNlVmFsdWVTZXQiLCJtYXJnaW5Ub3AiLCJjaGVja2VkVmFsdWUiLCJjaGVja2VkIiwidHJ1ZVZhbHVlIiwiZmFsc2VWYWx1ZSIsImluZGV0ZXJtaW5hdGUiLCJFZGl0JDEiLCJtb3VzZUNsaWNrIiwicmVjdXJzaW9uQmxvY2siLCJpbnZhbGlkRWRpdCIsImVkaXRlZENlbGxzIiwiZWRpdG9ycyIsImdldEVkaXRlZENlbGxzIiwiY2xlYXJDZWxsRWRpdGVkIiwibmF2aWdhdGVQcmV2IiwibmF2aWdhdGVOZXh0IiwibmF2aWdhdGVMZWZ0IiwibmF2aWdhdGVSaWdodCIsIm5hdmlnYXRlVXAiLCJuYXZpZ2F0ZURvd24iLCJjZWxsSXNFZGl0ZWQiLCJjbGVhckVkaXRlZCIsImVkaXRDZWxsIiwiY2VsbENhbmNlbEVkaXQiLCJiaW5kRWRpdG9yIiwidXBkYXRlQ2VsbENsYXNzIiwiY29sdW1uRGVsZXRlQ2hlY2siLCJyb3dEZWxldGVDaGVjayIsInJvd0VkaXRhYmxlQ2hlY2siLCJjYW5jZWxFZGl0Iiwia2V5YmluZGluZ05hdmlnYXRlTmV4dCIsIm5ld1JvdyIsImFkZFJvdyIsImVkaXRlZCIsImFsbG93RWRpdCIsIm5leHRDZWxsIiwiZmluZFByZXZFZGl0YWJsZUNlbGwiLCJmaW5kTmV4dEVkaXRhYmxlQ2VsbCIsInByZXZDZWxsIiwiZWRpdGFibGUiLCJnZXRDdXJyZW50Q2VsbCIsImNsZWFyRWRpdG9yIiwidmFyaWFibGVIZWlnaHQiLCJjZWxsRWRpdENhbmNlbGxlZCIsImNvbnRhaW5zIiwiYnV0dG9uIiwiZm9jdXNDZWxsTm9FdmVudCIsImZvcmNlRWRpdCIsImZvY3VzU2Nyb2xsQWRqdXN0IiwiZ2V0UmVuZGVyTW9kZSIsInRvcEVkZ2UiLCJib3R0b21FZGdlIiwicm93RWwiLCJvZmZzZXRUb3AiLCJsZWZ0RWRnZSIsInJpZ2h0RWRnZSIsImxlZnRNYXJnaW4iLCJyaWdodE1hcmdpbiIsInJlbmRlckhvcml6b250YWwiLCJ2RG9tUGFkTGVmdCIsImNlbGxFZGl0b3IiLCJjZWxsQ2xpY2siLCJjZWxsRWRpdGluZyIsInZhbGlkYXRpb25Nb2RlIiwiZWRpdEluZGV4IiwiRXhwb3J0Um93IiwiRXhwb3J0Q29sdW1uIiwiRXhwb3J0IiwiY2xvbmVUYWJsZVN0eWxlIiwiY29sVmlzUHJvcCIsImdldEh0bWwiLCJjb2x1bW5IZWFkZXJzIiwiaGVhZGVyc1RvRXhwb3J0Um93cyIsImdlbmVyYXRlQ29sdW1uR3JvdXBIZWFkZXJzIiwiYm9keVRvRXhwb3J0Um93cyIsInJvd0xvb2t1cCIsImdlbmVyYXRlVGFibGUiLCJnZW5lcmF0ZVRhYmxlRWxlbWVudCIsImdldFZpc2libGVSb3dzIiwic2VsZWN0Um93Iiwic2VsZWN0ZWRSb3dzIiwicGFnaW5hdGlvbiIsImNvbHVtbkdyb3VwcyIsImNvbERhdGEiLCJwcm9jZXNzQ29sdW1uR3JvdXAiLCJtYXhEZXB0aCIsImdyb3VwRGF0YSIsInN1Ykdyb3VwIiwic3ViR3JvdXBEYXRhIiwiY29sdW1uVmlzQ2hlY2siLCJ2aXNQcm9wIiwiaGVhZGVyRGVwdGgiLCJleHBvcnRSb3dzIiwicGFyc2VDb2x1bW5Hcm91cCIsInJvd0dyb3VwcyIsImV4cG9ydENvbHMiLCJoZWFkZXJFbCIsImJvZHlFbCIsImxvb2t1cFRhYmxlU3R5bGVzIiwic2V0dXAiLCJ0cmVlRWxlbWVudEZpZWxkIiwibWFwRWxlbWVudFN0eWxlcyIsImdlbmVyYXRlSGVhZGVyRWxlbWVudCIsImdlbmVyYXRlR3JvdXBFbGVtZW50IiwiZ2VuZXJhdGVDYWxjRWxlbWVudCIsImdlbmVyYXRlUm93RWxlbWVudCIsImV2ZW5Sb3ciLCJvZGRSb3ciLCJjYWxjUm93IiwiZmlyc3RSb3ciLCJmaXJzdEdyb3VwIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInN0eWxlQ2VsbHMiLCJmaXJzdENlbGwiLCJsYXN0Q2VsbCIsImNsYXNzTmFtZXMiLCJnZW5lcmF0b3IiLCJjZWxsU3R5bGUiLCJjZWxsV3JhcHBlciIsImZvcm1hdENlbGxzIiwiZm9ybWF0RXhwb3J0VmFsdWUiLCJhbGlnbiIsImhvbGRlciIsImh0bWxPdXRwdXRDb25maWciLCJmcm9tIiwibG9va3VwIiwiZnJvbVN0eWxlIiwiZGVmYXVsdEZpbHRlcnMiLCJmaWx0ZXJWYWwiLCJyb3dWYWwiLCJmaWx0ZXJQYXJhbXMiLCJrZXl3b3JkcyIsImtleXdvcmQiLCJtYXRjaEFsbCIsIkZpbHRlciIsImZpbHRlckxpc3QiLCJoZWFkZXJGaWx0ZXJzIiwiaGVhZGVyRmlsdGVyQ29sdW1ucyIsInByZXZIZWFkZXJGaWx0ZXJDaGFuZ2VDaGVjayIsInRhYmxlSW5pdGlhbGl6ZWQiLCJzZWFyY2hSb3dzIiwic2VhcmNoRGF0YSIsInVzZXJTZXRGaWx0ZXIiLCJ1c2VyUmVmcmVzaEZpbHRlciIsInVzZXJBZGRGaWx0ZXIiLCJnZXRGaWx0ZXJzIiwidXNlclNldEhlYWRlckZpbHRlckZvY3VzIiwidXNlckdldEhlYWRlckZpbHRlclZhbHVlIiwidXNlclNldEhlYWRlckZpbHRlclZhbHVlIiwiZ2V0SGVhZGVyRmlsdGVycyIsInVzZXJSZW1vdmVGaWx0ZXIiLCJ1c2VyQ2xlYXJGaWx0ZXIiLCJ1c2VyQ2xlYXJIZWFkZXJGaWx0ZXIiLCJzZXRIZWFkZXJGaWx0ZXJGb2N1cyIsInJlbG9hZEhlYWRlckZpbHRlciIsImdldEhlYWRlckZpbHRlclZhbHVlIiwic2V0SGVhZGVyRmlsdGVyVmFsdWUiLCJpbml0aWFsaXplQ29sdW1uSGVhZGVyRmlsdGVyIiwiaGlkZUhlYWRlckZpbHRlckVsZW1lbnRzIiwic2hvd0hlYWRlckZpbHRlckVsZW1lbnRzIiwidGFibGVCdWlsdCIsImdlbmVyYXRlUGxhY2Vob2xkZXIiLCJmaWx0ZXJNb2RlIiwicmVtb3RlRmlsdGVyUGFyYW1zIiwiaW5pdGlhbEZpbHRlciIsInNldEZpbHRlciIsImluaXRpYWxIZWFkZXJGaWx0ZXIiLCJwbGFjZWhvbGRlckhlYWRlckZpbHRlciIsInJlZnJlc2hGaWx0ZXIiLCJhZGRGaWx0ZXIiLCJyZW1vdmVGaWx0ZXIiLCJhbGwiLCJjbGVhckZpbHRlciIsImNsZWFySGVhZGVyRmlsdGVyIiwiaGVhZGVyRmlsdGVyIiwiZmlsdGVyVHlwZSIsInRhZ1R5cGUiLCJhdHRyVHlwZSIsImZpbHRlckNoYW5nZUNoZWNrIiwicHJldlN1Y2Nlc3MiLCJlbXB0eUZ1bmMiLCJoZWFkZXJGaWx0ZXJGdW5jIiwiZmlsdGVycyIsImhlYWRlckZpbHRlckZ1bmNQYXJhbXMiLCJmaWVsZFZhbCIsImNvbFZhbCIsInRyYWNrQ2hhbmdlcyIsImdlbmVyYXRlSGVhZGVyRmlsdGVyRWxlbWVudCIsImZpbHRlckVsZW1lbnQiLCJlZGl0b3JFbGVtZW50IiwidHlwaW5nVGltZXIiLCJzZWFyY2hUcmlnZ2VyIiwib25SZW5kZXJlZENhbGxiYWNrIiwiaGVhZGVyRWxlbWVudCIsImhlYWRlckZpbHRlckVtcHR5Q2hlY2siLCJoZWFkZXJGaWx0ZXJQYXJhbXMiLCJoZWFkZXJGaWx0ZXJQbGFjZWhvbGRlciIsImNvbnRlbnRzRWxlbWVudCIsImhlYWRlckZpbHRlckxpdmVGaWx0ZXJEZWxheSIsImhhc0F0dHJpYnV0ZSIsImhlYWRlckZpbHRlckxpdmVGaWx0ZXIiLCJoYXNDaGFuZ2VkIiwiZmluZEZpbHRlciIsImZpbmRTdWJGaWx0ZXJzIiwiYWpheCIsImZpbHRlcnNUb0FycmF5Iiwic2VhcmNoVHlwZSIsImZpbHRlclJlY3Vyc2UiLCJyb3dMaXN0IiwiYWN0aXZlUm93Q29tcG9uZW50cyIsImZpbHRlclJvdyIsInN1YkZpbHRlciIsImRlZmF1bHRGb3JtYXR0ZXJzIiwicGxhaW50ZXh0IiwiZm9ybWF0dGVyUGFyYW1zIiwiZW1wdHlUb1NwYWNlIiwic2FuaXRpemVIVE1MIiwibW9uZXkiLCJpbnRlZ2VyIiwiZGVjaW1hbCIsInJneCIsImZsb2F0VmFsIiwic2lnbiIsImRlY2ltYWxTeW0iLCJ0aG91c2FuZFN5bSIsInRob3VzYW5kIiwibmVnYXRpdmVTaWduIiwic3ltYm9sQWZ0ZXIiLCJhYnMiLCJsaW5rIiwidXJsUHJlZml4IiwibGFiZWxGaWVsZCIsImxhYmVsVHJhdmVyc2UiLCJ1cmxGaWVsZCIsImltYWdlIiwic3JjIiwidXJsU3VmZml4IiwiZW1wdHkiLCJ0cnV0aHkiLCJhbGxvd1RydXRoeSIsInRpY2siLCJ0aWNrRWxlbWVudCIsImNyb3NzIiwiY3Jvc3NFbGVtZW50Iiwib3V0cHV0Rm9ybWF0IiwiaW52YWxpZCIsImludmFsaWRQbGFjZWhvbGRlciIsImlzVmFsaWQiLCJ0aW1lem9uZSIsInNldFpvbmUiLCJkYXRldGltZWRpZmYiLCJzdWZmaXgiLCJodW1hbml6ZSIsImRpZmYiLCJ0b0h1bWFuIiwidHJhZmZpYyIsInBlcmNlbnRWYWx1ZSIsImNvbG9ycyIsImNvbG9yIiwibGVnZW5kIiwibGVnZW5kQ29sb3IiLCJsZWdlbmRBbGlnbiIsImJhckVsIiwiYmFyQ29udGFpbmVyIiwibGVnZW5kRWwiLCJob2xkZXJFbCIsImJ1dHRvblRpY2siLCJidXR0b25Dcm9zcyIsInJvd251bSIsImlubmVyVGV4dCIsInJlc3BvbnNpdmVDb2xsYXBzZSIsInJlc3BvbnNpdmVMYXlvdXQiLCJ0b2dnbGVMaXN0IiwiaXNPcGVuIiwicm93U2VsZWN0aW9uIiwiY2hlY2tib3giLCJzZWxlY3RhYmxlUmFuZ2VNb2RlIiwidG9nZ2xlU2VsZWN0IiwiaGFuZGxlQ29tcGxleFJvd0NsaWNrIiwiaXNTZWxlY3RlZCIsInJlZ2lzdGVyUm93U2VsZWN0Q2hlY2tib3giLCJkZXNlbGVjdFJvdyIsInJlZ2lzdGVySGVhZGVyU2VsZWN0Q2hlY2tib3giLCJGb3JtYXQiLCJmb3JtYXRWYWx1ZSIsImZvcm1hdEhlYWRlciIsImxvb2t1cEZvcm1hdHRlciIsImZvcm1hdHRlclByaW50IiwicHJpbnQiLCJmb3JtYXR0ZXJDbGlwYm9hcmQiLCJmb3JtYXR0ZXJIdG1sT3V0cHV0IiwiaHRtbE91dHB1dCIsImZvcm1hdHRlcnMiLCJtb2NrQ2VsbCIsInRpdGxlRm9ybWF0dGVyIiwidGl0bGVGb3JtYXR0ZXJQYXJhbXMiLCJlbnRpdHlNYXAiLCJGcm96ZW5Db2x1bW5zIiwibGVmdENvbHVtbnMiLCJyaWdodENvbHVtbnMiLCJpbml0aWFsaXphdGlvbk1vZGUiLCJsYXlvdXRDZWxsIiwicmVpbml0aWFsaXplQ29sdW1ucyIsImJsb2NrTGF5b3V0IiwidW5ibG9ja0xheW91dCIsIm1hcmdpbiIsImVkZ2UiLCJmcm96ZW5DaGVjayIsImZyb3plbiIsImxheW91dENhbGNSb3dzIiwibGF5b3V0R3JvdXBDYWxjcyIsImdyb3VwTGlzdCIsImxheW91dENvbHVtblBvc2l0aW9uIiwiYWxsQ2VsbHMiLCJsZWZ0UGFyZW50cyIsIm1hcmdpblZhbHVlIiwiZ2V0Q29sR3JvdXBQYXJlbnRFbGVtZW50IiwicmVpbml0aWFsaXplUm93cyIsImdldFRhYmxlRWxlbWVudCIsIl9jYWxjU3BhY2UiLCJGcm96ZW5Sb3dzIiwiZnJlZXplUm93IiwidW5mcmVlemVSb3ciLCJpc1Jvd0Zyb3plbiIsImRldGFjaFJvdyIsImZyb3plblJvd3MiLCJpbml0aWFsaXplUm93cyIsInJvd1R5cGUiLCJpc0Zyb3plbiIsInN0eWxlUm93cyIsInN0eWxlUm93IiwiR3JvdXBDb21wb25lbnQiLCJncm91cE1hbmFnZXIiLCJnZXRQYXJlbnRHcm91cCIsInRvZ2dsZVZpc2liaWxpdHkiLCJHcm91cCIsIm9sZEdyb3VwIiwiaGFzU3ViR3JvdXBzIiwiZ3JvdXBJRExvb2t1cHMiLCJfYWRkUm93VG9Hcm91cCIsIl9hZGRSb3ciLCJvbGQiLCJlbGVtZW50Q29udGVudHMiLCJhcnJvd0VsZW1lbnQiLCJjcmVhdGVFbGVtZW50cyIsImFkZEJpbmRpbmdzIiwiY3JlYXRlVmFsdWVHcm91cHMiLCJlbGVtZW50c09ubHkiLCJhcnJvdyIsIm1vdmFibGVSb3dzIiwibW92ZVJvdyIsImluaXRpYWxpemVHcm91cEhlYWRlciIsImFsbG93ZWRWYWx1ZXMiLCJfY3JlYXRlR3JvdXAiLCJncm91cFRvZ2dsZUVsZW1lbnQiLCJncm91cElEIiwiZ3JvdXBLZXkiLCJoZWFkZXJHZW5lcmF0b3IiLCJpbnNlcnRSb3ciLCJjb25mb3JtUm93RGF0YSIsInRvSW5kZXgiLCJ1cGRhdGVHcm91cFJvd3MiLCJzY3JvbGxIZWFkZXIiLCJnZXRSb3dJbmRleCIsInJlbW92ZVJvdyIsImdyb3VwVmFsdWVzIiwiZ2VuZXJhdGVHcm91cEhlYWRlckNvbnRlbnRzIiwicmVtb3ZlR3JvdXAiLCJnZXRIZWFkZXJzQW5kUm93cyIsIl92aXNTZXQiLCJncm91cENsb3NlZFNob3dDYWxjcyIsInByZXYiLCJpbmNsdWRlQ2hpbGRyZW4iLCJnZXRQYXRoIiwiY2hpbGROb2RlcyIsIkdyb3VwUm93cyIsImRpc3BsYXlIYW5kbGVyIiwic2V0R3JvdXBCeSIsInNldEdyb3VwVmFsdWVzIiwic2V0R3JvdXBTdGFydE9wZW4iLCJzZXRHcm91cEhlYWRlciIsInVzZXJHZXRHcm91cHMiLCJ1c2VyR2V0R3JvdXBlZERhdGEiLCJyb3dHZXRHcm91cCIsIl9ibG9ja1JlZHJhd2luZyIsIl9yZXN0b3JlX3JlZHJhd2luZyIsImdyb3VwVXBkYXRlT25DZWxsRWRpdCIsImNlbGxVcGRhdGVkIiwicmVhc3NpZ25Sb3dUb0dyb3VwIiwiY29uZmlndXJlR3JvdXBTZXR1cCIsInJvd0RlbGV0aW5nIiwic2Nyb2xsSGVhZGVycyIsInJvd01vdmluZyIsInJvd0FkZGluZ0luZGV4Iiwicm93U2FtcGxlIiwidmlydHVhbFJlbmRlckZpbGwiLCJncm91cFN0YXJ0T3BlbiIsImxhbmdWYWx1ZSIsImxhbmciLCJpdGVtcyIsImdldFJlYWxDb2x1bW5zIiwibG9va3VwRnVuYyIsInByZXZWYWx1ZSIsInRhYmxlRWxlbWVudCIsImFzc2lnblJvd1RvR3JvdXAiLCJtb3ZlUm93SW5BcnJheSIsImdldEdyb3VwZWREYXRhIiwidG9Hcm91cCIsImZyb21Hcm91cCIsImdlbmVyYXRlR3JvdXBzIiwiZ3JvdXBDb21wb25lbnRzIiwicHVsbEdyb3VwTGlzdERhdGEiLCJncm91cExpc3REYXRhIiwicm93Q291bnQiLCJoZWFkZXJDb250ZW50IiwiY291bnRHcm91cHMiLCJvbGRHcm91cHMiLCJjcmVhdGVHcm91cCIsImFzc2lnblJvd1RvRXhpc3RpbmdHcm91cCIsIm5ld0dyb3VwTmVlZGVkIiwib2xkUm93R3JvdXAiLCJvbGRHcm91cFBhdGgiLCJuZXdHcm91cFBhdGgiLCJnZXRFeHBlY3RlZFBhdGgiLCJncm91cFBhdGgiLCJncm91cElkIiwiY2hlY2tCYXNpY01vZGVHcm91cEhlYWRlcldpZHRoIiwib25seUdyb3VwSGVhZGVycyIsIkhpc3RvcnkiLCJoaXN0b3J5IiwiY2xlYXJDb21wb25lbnRIaXN0b3J5Iiwicm93RGVsZXRlZCIsInJvd0FkZGVkIiwicm93TW92ZWQiLCJ1bmRvIiwicmVkbyIsImdldEhpc3RvcnlVbmRvU2l6ZSIsImdldEhpc3RvcnlSZWRvU2l6ZSIsInBvc0Zyb20iLCJwb3NUbyIsInVuZG9lcnMiLCJyZWRvZXJzIiwiX3JlYmluZFJvdyIsIm9sZFJvdyIsImNlbGxFZGl0Iiwicm93QWRkIiwiYWRkUm93QWN0dWFsIiwicm93TW92ZSIsImdldFJvd0Zyb21Qb3NpdGlvbiIsInJlZ2VuZXJhdGVSb3dQb3NpdGlvbnMiLCJyZVJlbmRlckluUG9zaXRpb24iLCJIdG1sVGFibGVJbXBvcnQiLCJmaWVsZEluZGV4IiwiaGFzSW5kZXgiLCJ0YWJsZUVsZW1lbnRDaGVjayIsIm9yaWdpbmFsRWxlbWVudCIsInBhcnNlVGFibGUiLCJfZXh0cmFjdE9wdGlvbnMiLCJfZXh0cmFjdEhlYWRlcnMiLCJfZ2VuZXJhdGVCbGFua0hlYWRlcnMiLCJkZWZhdWx0T3B0aW9ucyIsIm9wdGlvbnNBcnIiLCJhdHRyaWIiLCJfYXR0cmliVmFsdWUiLCJfZmluZENvbCIsImV4aXN0cyIsInRleHRDb250ZW50IiwicmVwbGFjZUFsbCIsInJlZ2lzdGVyZWREZWZhdWx0cyIsImRlZmF1bHRJbXBvcnRlcnMiLCJpblF1b3RlIiwibmV4dENoYXIiLCJJbXBvcnQiLCJpbXBvcnRGcm9tRmlsZSIsImltcG9ydEZvcm1hdCIsImxvYWREYXRhQ2hlY2siLCJsb2FkRGF0YSIsImltcG9ydERhdGEiLCJsb29rdXBJbXBvcnRlciIsInN0cnVjdHVyZURhdGEiLCJlcnIiLCJpbXBvcnRlciIsImltcG9ydGVycyIsImV4dGVuc2lvbiIsInBpY2tGaWxlIiwiZXh0ZW5zaW9ucyIsImFjY2VwdCIsImZpbGUiLCJmaWxlcyIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJpbXBvcnRSZWFkZXIiLCJyZWFkQXNBcnJheUJ1ZmZlciIsInJlYWRBc0JpbmFyeVN0cmluZyIsInJlYWRBc0RhdGFVUkwiLCJyZWFkQXNUZXh0Iiwib25sb2FkIiwib25lcnJvciIsInBhcnNlZERhdGEiLCJhdXRvQ29sdW1ucyIsInN0cnVjdHVyZUFycmF5VG9PYmplY3QiLCJzdHJ1Y3R1cmVBcnJheVRvQ29sdW1ucyIsIkludGVyYWN0aW9uIiwiZXZlbnRNYXAiLCJyb3dDbGljayIsInJvd0RibENsaWNrIiwicm93Q29udGV4dCIsInJvd01vdXNlRW50ZXIiLCJyb3dNb3VzZUxlYXZlIiwicm93TW91c2VPdmVyIiwicm93TW91c2VPdXQiLCJyb3dNb3VzZU1vdmUiLCJyb3dNb3VzZURvd24iLCJyb3dNb3VzZVVwIiwicm93VGFwIiwicm93RGJsVGFwIiwicm93VGFwSG9sZCIsImNlbGxEYmxDbGljayIsImNlbGxDb250ZXh0IiwiY2VsbE1vdXNlRW50ZXIiLCJjZWxsTW91c2VMZWF2ZSIsImNlbGxNb3VzZU92ZXIiLCJjZWxsTW91c2VPdXQiLCJjZWxsTW91c2VNb3ZlIiwiY2VsbE1vdXNlRG93biIsImNlbGxNb3VzZVVwIiwiY2VsbFRhcCIsImNlbGxEYmxUYXAiLCJjZWxsVGFwSG9sZCIsImhlYWRlckNsaWNrIiwiaGVhZGVyRGJsQ2xpY2siLCJoZWFkZXJDb250ZXh0IiwiaGVhZGVyTW91c2VFbnRlciIsImhlYWRlck1vdXNlTGVhdmUiLCJoZWFkZXJNb3VzZU92ZXIiLCJoZWFkZXJNb3VzZU91dCIsImhlYWRlck1vdXNlTW92ZSIsImhlYWRlck1vdXNlRG93biIsImhlYWRlck1vdXNlVXAiLCJoZWFkZXJUYXAiLCJoZWFkZXJEYmxUYXAiLCJoZWFkZXJUYXBIb2xkIiwiZ3JvdXBDbGljayIsImdyb3VwRGJsQ2xpY2siLCJncm91cENvbnRleHQiLCJncm91cE1vdXNlRW50ZXIiLCJncm91cE1vdXNlTGVhdmUiLCJncm91cE1vdXNlT3ZlciIsImdyb3VwTW91c2VPdXQiLCJncm91cE1vdXNlTW92ZSIsImdyb3VwTW91c2VEb3duIiwiZ3JvdXBNb3VzZVVwIiwiZ3JvdXBUYXAiLCJncm91cERibFRhcCIsImdyb3VwVGFwSG9sZCIsInN1YnNjcmliZXJzIiwidG91Y2hTdWJzY3JpYmVycyIsImNvbHVtblN1YnNjcmliZXJzIiwidG91Y2hXYXRjaGVycyIsInRhcERibCIsInRhcEhvbGQiLCJpbml0aWFsaXplRXh0ZXJuYWxFdmVudHMiLCJjZWxsQ29udGVudHNTZWxlY3Rpb25GaXhlciIsImNsZWFyVG91Y2hXYXRjaGVycyIsInNlbGVjdE5vZGUiLCJzdWJzY3JpcHRpb25DaGFuZ2VkIiwiYWRkZWQiLCJzdWJzY3JpYmVUb3VjaEV2ZW50cyIsInVuc3Vic2NyaWJlVG91Y2hFdmVudHMiLCJoYW5kbGVUb3VjaCIsIm5vVG91Y2giLCJkaXNwYXRjaEV2ZW50Iiwid2F0Y2hlcnMiLCJjb21wb25lbnRPYmoiLCJLZXliaW5kaW5ncyIsIndhdGNoS2V5cyIsInByZXNzZWRLZXlzIiwia2V5dXBCaW5kaW5nIiwia2V5ZG93bkJpbmRpbmciLCJiaW5kaW5ncyIsImtleWJpbmRpbmdzIiwibWVyZ2VkQmluZGluZ3MiLCJtYXBCaW5kaW5ncyIsImJpbmRFdmVudHMiLCJjbGVhckJpbmRpbmdzIiwibWFwQmluZGluZyIsInN5bWJvbHNMaXN0IiwiY3RybCIsIm1ldGEiLCJjb2RlIiwiY2hlY2tCaW5kaW5nIiwibmF2UHJldiIsIm5hdk5leHQiLCJuYXZVcCIsIm5hdkRvd24iLCJzY3JvbGxQYWdlVXAiLCJzY3JvbGxQYWdlRG93biIsInNjcm9sbFRvU3RhcnQiLCJzY3JvbGxUb0VuZCIsImNvcHlUb0NsaXBib2FyZCIsImtleUJsb2NrIiwibmV3UG9zIiwiZGlzcGxheVJvd3NDb3VudCIsInNjcm9sbE1heCIsIm5hdkxlZnQiLCJuYXZSaWdodCIsIk1lbnUiLCJuZXN0ZWRNZW51QmxvY2siLCJjdXJyZW50Q29tcG9uZW50Iiwicm9vdFBvcHVwIiwiaW5pdGlhbGl6ZVJvd1dhdGNoZXJzIiwiaW5pdGlhbGl6ZUdyb3VwV2F0Y2hlcnMiLCJyb3dDb250ZXh0TWVudSIsImxvYWRNZW51RXZlbnQiLCJvbiIsInJvd0NsaWNrTWVudSIsInJvd0RibENsaWNrTWVudSIsImdyb3VwQ29udGV4dE1lbnUiLCJncm91cENsaWNrTWVudSIsImdyb3VwRGJsQ2xpY2tNZW51IiwiaGVhZGVyQ29udGV4dE1lbnUiLCJsb2FkTWVudVRhYmxlQ29sdW1uRXZlbnQiLCJoZWFkZXJDbGlja01lbnUiLCJoZWFkZXJEYmxDbGlja01lbnUiLCJoZWFkZXJNZW51IiwiaW5pdGlhbGl6ZUNvbHVtbkhlYWRlck1lbnUiLCJjb250ZXh0TWVudSIsImxvYWRNZW51VGFibGVDZWxsRXZlbnQiLCJjbGlja01lbnUiLCJkYmxDbGlja01lbnUiLCJoZWFkZXJNZW51RWwiLCJpY29uIiwiaGVhZGVyTWVudUljb24iLCJtZW51IiwibG9hZE1lbnUiLCJwYXJlbnRQb3B1cCIsIml0ZW1FbCIsImRpc2FibGVkIiwiTW92ZUNvbHVtbnMiLCJwbGFjZWhvbGRlckVsZW1lbnQiLCJjcmVhdGVQbGFjZWhvbGRlckVsZW1lbnQiLCJob3ZlckVsZW1lbnQiLCJjaGVja1RpbWVvdXQiLCJjaGVja1BlcmlvZCIsIm1vdmluZyIsInRvQ29sIiwidG9Db2xBZnRlciIsInN0YXJ0WCIsImF1dG9TY3JvbGxNYXJnaW4iLCJhdXRvU2Nyb2xsU3RlcCIsImF1dG9TY3JvbGxUaW1lb3V0IiwidG91Y2hNb3ZlIiwibW92ZUhvdmVyIiwiZW5kTW92ZSIsIm1vdmFibGVDb2x1bW5zIiwiY29sRWwiLCJtb3VzZW1vdmUiLCJ3aGljaCIsInN0YXJ0TW92ZSIsImJpbmRUb3VjaEV2ZW50cyIsIm5leHRDb2xXaWR0aCIsInByZXZDb2xXaWR0aCIsIm5leHRDb2xXaWR0aExhc3QiLCJwcmV2Q29sV2lkdGhMYXN0Iiwic3RhcnRYTW92ZSIsInBhc3NpdmUiLCJtb3ZlVG9Db2wiLCJfYmluZE1vdXNlTW92ZSIsIl91bmJpbmRNb3VzZU1vdmUiLCJtb3ZpbmdDZWxscyIsIm1vdmVDb2x1bW5BY3R1YWwiLCJzY3JvbGxQb3MiLCJjb2x1bW5Ib2xkZXIiLCJ4UG9zIiwiTW92ZVJvd3MiLCJ0b1Jvd0FmdGVyIiwiaGFzSGFuZGxlIiwic3RhcnRZIiwidGFibGVSb3dEcm9wRXZlbnQiLCJjb25uZWN0aW9uIiwiY29ubmVjdGlvblNlbGVjdG9yc1RhYmxlcyIsImNvbm5lY3Rpb25TZWxlY3RvcnNFbGVtZW50cyIsImNvbm5lY3Rpb25FbGVtZW50cyIsImNvbm5lY3Rpb25zIiwiY29ubmVjdGVkVGFibGUiLCJjb25uZWN0ZWRSb3ciLCJtb3ZhYmxlUm93c0Nvbm5lY3RlZFRhYmxlcyIsIm1vdmFibGVSb3dzQ29ubmVjdGVkRWxlbWVudHMiLCJpbml0aWFsaXplQ2VsbCIsIm1vdXNldXAiLCJ0YWJsZVJvd0Ryb3AiLCJwcmV2aW91c1NpYmxpbmciLCJyb3dIYW5kbGUiLCJuZXh0Um93SGVpZ2h0IiwicHJldlJvd0hlaWdodCIsIm5leHRSb3dIZWlnaHRMYXN0IiwicHJldlJvd0hlaWdodExhc3QiLCJzdGFydFlNb3ZlIiwic2V0U3RhcnRQb3NpdGlvbiIsImNvbm5lY3RUb1RhYmxlcyIsInBvaW50ZXJFdmVudHMiLCJkaXNjb25uZWN0RnJvbVRhYmxlcyIsIm1vdmVIb3ZlckNvbm5lY3Rpb25zIiwibW92ZUhvdmVyVGFibGUiLCJyb3dIb2xkZXIiLCJ5UG9zIiwiZWxlbWVudFJvd0Ryb3AiLCJjb25uZWN0aW9uVGFibGVzIiwicXVlcnkiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZHJvcEV2ZW50IiwidGFidWxhdG9yRWxlbWVudERyb3BFdmVudCIsImNvbm5lY3QiLCJkaXNjb25uZWN0IiwiZHJvcENvbXBsZXRlIiwic2VuZGVyIiwibW92YWJsZVJvd3NTZW5kZXIiLCJzZW5kZXJzIiwibW92YWJsZVJvd3NSZWNlaXZlciIsInJlY2VpdmVycyIsImZyb21Sb3ciLCJmcm9tVGFibGUiLCJ0b1RhYmxlIiwiTXV0YXRvciIsImVuYWJsZWQiLCJ0cmFuc2Zvcm1DZWxsIiwibXV0YXRlTGluayIsImxvb2t1cE11dGF0b3IiLCJtdXRhdG9ycyIsIm11dGF0b3JFZGl0IiwibGlua3MiLCJsaW5rQ2VsbCIsImRlZmF1bHRQYWdlQ291bnRlcnMiLCJwYWdlU2l6ZSIsImN1cnJlbnRSb3ciLCJjdXJyZW50UGFnZSIsInRvdGFsUm93cyIsInRvdGFsUGFnZXMiLCJzaG93aW5nRWwiLCJ2YWx1ZUVsIiwib2ZFbCIsInRvdGFsRWwiLCJyb3dzRWwiLCJwYWdlcyIsIlBhZ2UiLCJwcm9ncmVzc2l2ZUxvYWQiLCJwYWdlQ291bnRlckVsZW1lbnQiLCJwYWdlQ291bnRlciIsInBhZ2UiLCJyZW1vdGVSb3dDb3VudEVzdGltYXRlIiwiaW5pdGlhbExvYWQiLCJkYXRhQ2hhbmdpbmciLCJwYWdlU2l6ZXMiLCJzZXRNYXhQYWdlIiwic2V0UGFnZSIsInVzZXJTZXRQYWdlVG9Sb3ciLCJ1c2VyU2V0UGFnZVNpemUiLCJnZXRQYWdlU2l6ZSIsInByZXZpb3VzUGFnZSIsIm5leHRQYWdlIiwiZ2V0UGFnZSIsImdldFBhZ2VNYXgiLCJzZXRQYWdlVG9Sb3ciLCJpbml0aWFsTG9hZENvbXBsZXRlIiwiY2FsY3VsYXRlUGFnZVNpemVzIiwiZm9vdGVyUmVkcmF3IiwicGFnaW5hdGlvbkFkZFJvdyIsInJvd0FkZGluZ1Bvc2l0aW9uIiwicGFnaW5hdGlvbk1vZGUiLCJyZW1vdGVQYWdlUGFyYW1zIiwiX3BhcnNlUmVtb3RlRGF0YSIsInJlc3RPblJlbmRlckJlZm9yZSIsImluaXRpYWxpemVQYWdlQ291bnRlciIsImluaXRpYWxpemVQYWdpbmF0b3IiLCJpbml0aWFsaXplUHJvZ3Jlc3NpdmUiLCJzY3JvbGxWZXJ0aWNhbCIsInRlc3RFbFJvdyIsInRlc3RFbENlbGwiLCJwYWdpbmF0aW9uU2l6ZSIsInZpc2liaWxpdHkiLCJnZW5lcmF0ZVBhZ2VTaXplU2VsZWN0TGlzdCIsInNldFBhZ2VTaXplIiwibG9hZGluZyIsInByb2dyZXNzaXZlTG9hZFNjcm9sbE1hcmdpbiIsInBhZ2VzRWxlbWVudCIsImZpcnN0QnV0IiwicHJldkJ1dCIsIm5leHRCdXQiLCJsYXN0QnV0IiwicGFnaW5hdGlvblNpemVTZWxlY3RvciIsInBhZ2VTaXplU2VsZWN0IiwiY291bnRlciIsInBhZ2luYXRpb25Db3VudGVyIiwicGFnZUNvdW50ZXJzIiwiaGlkZGVuIiwicGFnZVNlbGVjdExhYmVsIiwicGFnaW5hdGlvbkNvdW50ZXJIb2xkZXIiLCJwYWdpbmF0aW9uRWxlbWVudCIsInBhZ2luYXRpb25Db3VudGVyRWxlbWVudCIsInBhZ2luYXRpb25Jbml0aWFsUGFnZSIsInBhZ2luYXRpb25CdXR0b25Db3VudCIsInNldE1heFJvd3MiLCJ0cmlnZ2VyIiwiX3NldFBhZ2VDb3VudGVyIiwiX3NldFBhZ2VCdXR0b25zIiwibGVmdFNpemUiLCJyaWdodFNpemUiLCJfZ2VuZXJhdGVQYWdlQnV0dG9uIiwiYWN0dWFsU3RhcnRSb3ciLCJhY3R1YWxSb3dQYWdlU2l6ZSIsImFjdHVhbFJvd3MiLCJmaW5hbGx5IiwibGFzdF9wYWdlIiwibGFzdF9yb3ciLCJhZGRSb3dzIiwicHJvZ3Jlc3NpdmVMb2FkRGVsYXkiLCJmb290ZXIiLCJjb250YWluZXJFbGVtZW50Iiwic2Nyb2xsV2lkdGgiLCJkZWZhdWx0UmVhZGVycyIsImxvY2FsIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsImNvb2tpZSIsImNvb2tpZVBvcyIsImRlZmF1bHRXcml0ZXJzIiwic2V0SXRlbSIsImV4cGlyZURhdGUiLCJzZXREYXRlIiwiZ2V0RGF0ZSIsInRvVVRDU3RyaW5nIiwiUGVyc2lzdGVuY2UiLCJkZWZXYXRjaGVyQmxvY2siLCJyZWFkRnVuYyIsIndyaXRlRnVuYyIsImxvY2FsU3RvcmFnZVRlc3QiLCJ0ZXN0S2V5IiwicmVtb3ZlSXRlbSIsInBlcnNpc3RlbmNlIiwicmV0cmlldmVkRGF0YSIsInBlcnNpc3RlbmNlTW9kZSIsInBlcnNpc3RlbmNlSUQiLCJwZXJzaXN0ZW5jZVJlYWRlckZ1bmMiLCJyZWFkZXJzIiwicGVyc2lzdGVuY2VXcml0ZXJGdW5jIiwid3JpdGVycyIsInJldHJpZXZlRGF0YSIsInNhdmUiLCJldmVudFNhdmUiLCJnZXRDb2x1bW5MYXlvdXQiLCJzZXRDb2x1bW5MYXlvdXQiLCJzb3J0ZXJzIiwiaW5pdGlhbFNvcnQiLCJwYXJzZUNvbHVtbnMiLCJzZXRDb2x1bW5zIiwibWVyZ2VEZWZpbml0aW9uIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwib2xkQ29scyIsIm5ld0NvbHMiLCJfZmluZENvbHVtbiIsInZhbGlkYXRlU29ydGVycyIsImdldFNvcnQiLCJnZXRHcm91cENvbmZpZyIsImdldFBhZ2VDb25maWciLCJkZWZpbml0aW9ucyIsImV4Y2x1ZGVkS2V5cyIsImRlZlN0b3JlIiwiY29sRGVmIiwibW9kdWxlSW5pdE9yZGVyIiwiUG9wdXAkMSIsIl9jb21wb25lbnRQb3B1cENhbGwiLCJsb2FkUG9wdXBFdmVudCIsInJvd0NvbnRleHRQb3B1cCIsInJvd0NsaWNrUG9wdXAiLCJyb3dEYmxDbGlja1BvcHVwIiwiZ3JvdXBDb250ZXh0UG9wdXAiLCJncm91cENsaWNrUG9wdXAiLCJncm91cERibENsaWNrUG9wdXAiLCJoZWFkZXJDb250ZXh0UG9wdXAiLCJsb2FkUG9wdXBUYWJsZUNvbHVtbkV2ZW50IiwiaGVhZGVyQ2xpY2tQb3B1cCIsImhlYWRlckRibENsaWNrUG9wdXAiLCJoZWFkZXJQb3B1cCIsImluaXRpYWxpemVDb2x1bW5IZWFkZXJQb3B1cCIsImNvbnRleHRQb3B1cCIsImxvYWRQb3B1cFRhYmxlQ2VsbEV2ZW50IiwiY2xpY2tQb3B1cCIsImRibENsaWNrUG9wdXAiLCJoZWFkZXJQb3B1cEVsIiwiaGVhZGVyUG9wdXBJY29uIiwibG9hZFBvcHVwIiwiY29udGVudHNFbCIsIlByaW50IiwibWFudWFsQmxvY2siLCJiZWZvcmVwcmludEV2ZW50SGFuZGxlciIsImFmdGVycHJpbnRFdmVudEhhbmRsZXIiLCJwcmludEFzSHRtbCIsInJlcGxhY2VUYWJsZSIsImNsZWFudXAiLCJkZXN0cm95IiwicHJpbnRGdWxsc2NyZWVuIiwicHJpbnRDb25maWciLCJwcmludFN0eWxlZCIsInByaW50Um93UmFuZ2UiLCJmb290ZXJDb250ZW50Iiwic2Nyb2xsWCIsInNjcm9sbFkiLCJmb290ZXJFbCIsInRhYmxlRWwiLCJwcmludEhlYWRlciIsInByaW50Rm9vdGVyIiwicHJpbnRGb3JtYXR0ZXIiLCJSZWFjdGl2ZURhdGEiLCJvcmlnRnVuY3MiLCJjdXJyZW50VmVyc2lvbiIsInJlYWN0aXZlRGF0YSIsInVuYmxvY2siLCJ3YXRjaFJvdyIsIndhdGNoRGF0YSIsInVud2F0Y2hEYXRhIiwidmVyc2lvbiIsImNvbmZpZ3VyYWJsZSIsImdldFJvd0Zyb21EYXRhT2JqZWN0Iiwic3RhcnRSb3ciLCJuZXdSb3dzIiwib2xkUm93cyIsIndyaXRhYmxlIiwid2F0Y2hLZXkiLCJ3YXRjaFRyZWVDaGlsZHJlbiIsImNoaWxkRmllbGQiLCJyZWJ1aWxkVHJlZSIsInVud2F0Y2hSb3ciLCJSZXNpemVDb2x1bW5zIiwic3RhcnRDb2x1bW4iLCJzdGFydFdpZHRoIiwibGF0ZXN0WCIsImluaXRpYWxOZXh0Q29sdW1uIiwibGF5b3V0Q29sdW1uSGVhZGVyIiwiaW5pdGlhbGl6ZUV2ZW50V2F0Y2hlcnMiLCJsYXlvdXRDZWxsSGFuZGxlcyIsImRlSW5pdGlhbGl6ZUNvbXBvbmVudCIsInJlc2l6ZUhhbmRsZSIsImNvbHVtbkxheW91dFVwZGF0ZWQiLCJkZUluaXRpYWxpemVDb2x1bW4iLCJjb2x1bW5XaWR0aFVwZGF0ZWQiLCJyZXNpemFibGUiLCJyZWluaXRpYWxpemVDb2x1bW4iLCJmcm96ZW5Db2x1bW5PZmZzZXQiLCJmcm96ZW5PZmZzZXQiLCJoYW5kbGVFbCIsIm5lYXJlc3RDb2x1bW4iLCJfY2hlY2tSZXNpemFiaWxpdHkiLCJoYW5kbGVEb3duIiwiX21vdXNlRG93biIsIm9sZFdpZHRoIiwicGFyZW50RWxlbWVudCIsIm1vdXNlTW92ZSIsImJsb2NrZWRCZWZvcmUiLCJibG9ja2VkQWZ0ZXIiLCJzdGFydERpZmYiLCJtb3ZlRGlmZiIsInJlc2l6YWJsZUNvbHVtbkZpdCIsImNvbFdpZHRoIiwiYnJvd3NlclNsb3ciLCJtb3VzZVVwIiwiUmVzaXplUm93cyIsInN0YXJ0SGVpZ2h0IiwicHJldkhhbmRsZSIsInByZXZIYW5kbGVEb3duIiwic2NyZWVuWSIsIlJlc2l6ZVRhYmxlIiwidmlzaWJpbGl0eU9ic2VydmVyIiwicmVzaXplT2JzZXJ2ZXIiLCJjb250YWluZXJPYnNlcnZlciIsInRhYmxlSGVpZ2h0IiwidGFibGVXaWR0aCIsImNvbnRhaW5lckhlaWdodCIsImNvbnRhaW5lcldpZHRoIiwiYXV0b1Jlc2l6ZSIsImluaXRpYWxSZWRyYXciLCJ0YWJsZVN0eWxlIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJSZXNpemVPYnNlcnZlciIsImluaXRpYWxpemVWaXNpYmlsaXR5T2JzZXJ2ZXIiLCJicm93c2VyTW9iaWxlIiwibm9kZUhlaWdodCIsImNvbnRlbnRSZWN0Iiwibm9kZVdpZHRoIiwicmVkcmF3VGFibGUiLCJvYnNlcnZlIiwiZml4ZWRIZWlnaHQiLCJ0YWJsZVJlc2l6ZWQiLCJpc0ludGVyc2VjdGluZyIsInVub2JzZXJ2ZSIsIlJlc3BvbnNpdmVMYXlvdXQiLCJoaWRkZW5Db2x1bW5zIiwiY29sbGFwc2VGb3JtYXR0ZXIiLCJjb2xsYXBzZVN0YXJ0T3BlbiIsImNvbGxhcHNlSGFuZGxlQ29sdW1uIiwidXBkYXRlQ29sdW1uVmlzaWJpbGl0eSIsImluaXRpYWxpemVSZXNwb25zaXZpdHkiLCJnZW5lcmF0ZUNvbGxhcHNlZFJvd0NvbnRlbnQiLCJyZXNwb25zaXZlTGF5b3V0Q29sbGFwc2VGb3JtYXR0ZXIiLCJmb3JtYXRDb2xsYXBzZWREYXRhIiwicmVzcG9uc2l2ZUxheW91dENvbGxhcHNlU3RhcnRPcGVuIiwicmVzcG9uc2l2ZSIsIm9yZGVyIiwiZ2VuZXJhdGVDb2xsYXBzZWRDb250ZW50IiwiaGlkZUNvbHVtbiIsImNvbENvdW50Iiwic2hvd0NvbHVtbiIsIndvcmtpbmciLCJnZXRGbGV4QmFzZVdpZHRoIiwiaGVhZGVyVmlzaWJsZSIsImFjdGl2ZVJvd3NDb3VudCIsInJlbmRlckVtcHR5U2Nyb2xsIiwiZ2VuZXJhdGVDb2xsYXBzZWRSb3dEYXRhIiwibW9ja0NlbGxDb21wb25lbnQiLCJyZXNwb25zaXZlTGF5b3V0Q29sbGFwc2VVc2VGb3JtYXR0ZXJzIiwibm9kZV9jb250ZW50IiwidGl0bGVEYXRhIiwidmFsdWVEYXRhIiwidGl0bGVIaWdobGlnaHQiLCJTZWxlY3RSb3ciLCJzZWxlY3RpbmciLCJsYXN0Q2xpY2tlZFJvdyIsInNlbGVjdFByZXYiLCJoZWFkZXJDaGVja2JveEVsZW1lbnQiLCJzZWxlY3RSb3dzIiwiZGVzZWxlY3RSb3dzIiwiZ2V0U2VsZWN0ZWRSb3dzIiwiZ2V0U2VsZWN0ZWREYXRhIiwiaXNSb3dTZWxlY3RlZCIsInNlbGVjdGFibGUiLCJjbGVhclNlbGVjdGlvbkRhdGEiLCJyb3dSZXRyaWV2ZSIsInNlbGVjdGFibGVQZXJzaXN0ZW5jZSIsIl9kZXNlbGVjdFJvdyIsInByZXZTZWxlY3RlZCIsIl9yb3dTZWxlY3Rpb25DaGFuZ2VkIiwiZW5kU2VsZWN0IiwiY2hlY2tSb3dTZWxlY3RhYmlsaXR5IiwiX2NsZWFyU2VsZWN0aW9uIiwibGFzdENsaWNrZWRSb3dJZHgiLCJnZXREaXNwbGF5Um93SW5kZXgiLCJyb3dJZHgiLCJmcm9tUm93SWR4IiwidG9Sb3dJZHgiLCJ0b2dnbGVkUm93cyIsInRvZ2dsZWRSb3ciLCJzZWxlY3RhYmxlQ2hlY2siLCJfc2VsZWN0Um93Iiwicm93TWF0Y2giLCJjaGFuZ2UiLCJjaGFuZ2VzIiwicm93SW5mbyIsInNlbGVjdGFibGVSb2xsaW5nU2VsZWN0aW9uIiwiY2hlY2tib3hFbCIsImRhdGFUcmVlU2VsZWN0UHJvcGFnYXRlIiwiY2hpbGRSb3dTZWxlY3Rpb24iLCJzZWxlY3RlZFJvdyIsImRlc2VsZWN0ZWQiLCJkYXRldGltZSQyIiwiYVJvdyIsImJSb3ciLCJhbGlnbkVtcHR5VmFsdWVzIiwiZGVmYXVsdFNvcnRlcnMiLCJkZWNpbWFsU2VwYXJhdG9yIiwidGhvdXNhbmRTZXBhcmF0b3IiLCJsb2NhbGUiLCJsb2NhbGVDb21wYXJlIiwiYm9vbGVhbiIsImNhbGMiLCJhbHBoYW51bSIsIlNvcnQiLCJzb3J0TGlzdCIsInVzZXJTZXRTb3J0IiwiY2xlYXJTb3J0Iiwic29ydE1vZGUiLCJyZW1vdGVTb3J0UGFyYW1zIiwic2V0U29ydCIsInJlZnJlc2hTb3J0IiwiYXJyb3dFbCIsInNvcnRlclBhcmFtcyIsInN0YXJ0aW5nRGlyIiwiaGVhZGVyU29ydFN0YXJ0aW5nRGlyIiwiaGVhZGVyU29ydFRyaXN0YXRlIiwiaGVhZGVyU29ydCIsImhlYWRlclNvcnRDbGlja0VsZW1lbnQiLCJoZWFkZXJTb3J0RWxlbWVudCIsInNldENvbHVtbkhlYWRlclNvcnRJY29uIiwiY29sdW1uSGVhZGVyU29ydE11bHRpIiwibmV3U29ydExpc3QiLCJmaW5kU29ydGVyIiwic29ydE9yZGVyUmV2ZXJzZSIsInNvcnRMaXN0QWN0dWFsIiwicm93Q29tcG9uZW50cyIsImNsZWFyQ29sdW1uSGVhZGVycyIsInNvcnRPYmoiLCJzZXRDb2x1bW5IZWFkZXIiLCJfc29ydEl0ZW1zIiwic29ydEVsIiwic29ydGVyQ291bnQiLCJzb3J0SXRlbSIsIl9zb3J0Um93IiwiZWwxQ29tcCIsImVsMkNvbXAiLCJlbDEiLCJlbDIiLCJUb29sdGlwIiwidG9vbHRpcFN1YnNjcmliZXIiLCJoZWFkZXJTdWJzY3JpYmVyIiwidGltZW91dCIsInBvcHVwSW5zdGFuY2UiLCJoZWFkZXJUb29sdGlwIiwibW91c2Vtb3ZlQ2hlY2siLCJtb3VzZW91dENoZWNrIiwidG9vbHRpcCIsImNsZWFyUG9wdXAiLCJsb2FkVG9vbHRpcCIsInRvb2x0aXBEZWxheSIsImRlZmF1bHRWYWxpZGF0b3JzIiwicGFyYW1ldGVycyIsImZsb2F0IiwibnVtZXJpYyIsInN0YXJ0cyIsImVuZHMiLCJtaW5MZW5ndGgiLCJpbiIsInJlZ2V4IiwidW5pcXVlIiwiY2VsbERhdGEiLCJyZXF1aXJlZCIsIlZhbGlkYXRlIiwiaW52YWxpZENlbGxzIiwiZ2V0SW52YWxpZENlbGxzIiwidXNlckNsZWFyQ2VsbFZhbGlkYXRpb24iLCJ1c2VyVmFsaWRhdGUiLCJjZWxsSXNWYWxpZCIsImNsZWFyVmFsaWRhdGlvbiIsImNlbGxWYWxpZGF0ZSIsImNvbHVtblZhbGlkYXRlIiwicm93VmFsaWRhdGUiLCJlZGl0VmFsaWRhdGUiLCJlZGl0b3JDbGVhciIsImVkaXRlZENsZWFyIiwicHJldmlvdXNWYWx1ZSIsInZhbGlkYXRlIiwiY2FuY2VsbGVkIiwidmFsaWRhdG9yIiwiX2V4dHJhY3RWYWxpZGF0b3IiLCJfYnVpbGRWYWxpZGF0b3IiLCJ2YWxpZGF0b3JzIiwiZmFpbGVkVmFsaWRhdG9ycyIsImludmFsaWRJbmRleCIsImZyZWV6ZSIsIkFjY2Vzc29yTW9kdWxlIiwiQWpheE1vZHVsZSIsIkNsaXBib2FyZE1vZHVsZSIsIkNvbHVtbkNhbGNzTW9kdWxlIiwiRGF0YVRyZWVNb2R1bGUiLCJEb3dubG9hZE1vZHVsZSIsIkVkaXRNb2R1bGUiLCJFeHBvcnRNb2R1bGUiLCJGaWx0ZXJNb2R1bGUiLCJGb3JtYXRNb2R1bGUiLCJGcm96ZW5Db2x1bW5zTW9kdWxlIiwiRnJvemVuUm93c01vZHVsZSIsIkdyb3VwUm93c01vZHVsZSIsIkhpc3RvcnlNb2R1bGUiLCJIdG1sVGFibGVJbXBvcnRNb2R1bGUiLCJJbXBvcnRNb2R1bGUiLCJJbnRlcmFjdGlvbk1vZHVsZSIsIktleWJpbmRpbmdzTW9kdWxlIiwiTWVudU1vZHVsZSIsIk1vdmVDb2x1bW5zTW9kdWxlIiwiTW92ZVJvd3NNb2R1bGUiLCJNdXRhdG9yTW9kdWxlIiwiUGFnZU1vZHVsZSIsIlBlcnNpc3RlbmNlTW9kdWxlIiwiUG9wdXBNb2R1bGUiLCJQcmludE1vZHVsZSIsIlJlYWN0aXZlRGF0YU1vZHVsZSIsIlJlc2l6ZUNvbHVtbnNNb2R1bGUiLCJSZXNpemVSb3dzTW9kdWxlIiwiUmVzaXplVGFibGVNb2R1bGUiLCJSZXNwb25zaXZlTGF5b3V0TW9kdWxlIiwiU2VsZWN0Um93TW9kdWxlIiwiU29ydE1vZHVsZSIsIlRvb2x0aXBNb2R1bGUiLCJWYWxpZGF0ZU1vZHVsZSIsIk9wdGlvbnNMaXN0IiwibXNnVHlwZSIsInVzZXJPcHRpb25zIiwiZGVidWdJbnZhbGlkT3B0aW9ucyIsIlJlbmRlcmVyIiwiZWxlbWVudFZlcnRpY2FsIiwiZWxlbWVudEhvcml6b250YWwiLCJ2ZXJ0aWNhbEZpbGxNb2RlIiwiY2xlYXJSb3dzIiwiY2xlYXJDb2x1bW5zIiwicmVpbml0aWFsaXplQ29sdW1uV2lkdGhzIiwicmVuZGVyUm93cyIsInJlbmRlckNvbHVtbnMiLCJyZXJlbmRlclJvd3MiLCJzY3JvbGxDb2x1bW5zIiwic2Nyb2xsUm93cyIsInNjcm9sbFRvUm93TmVhcmVzdFRvcCIsImluY2x1ZGluZ0J1ZmZlciIsInJlbmRlciIsInJlcmVuZGVyIiwic2Nyb2xsVG9Sb3dQb3NpdGlvbiIsInJvd0luZGV4Iiwic2Nyb2xsVG9Sb3dJZlZpc2libGUiLCJCYXNpY0hvcml6b250YWwiLCJyb3dGcmFnIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsIlZpcnR1YWxEb21Ib3Jpem9udGFsIiwibGVmdENvbCIsInJpZ2h0Q29sIiwidkRvbVNjcm9sbFBvc0xlZnQiLCJ2RG9tU2Nyb2xsUG9zUmlnaHQiLCJ2RG9tUGFkUmlnaHQiLCJmaXREYXRhQ29sQXZnIiwid2luZG93QnVmZmVyIiwiaXNGaXREYXRhIiwiY29tcGF0aWJpbGl0eUNoZWNrIiwibGF5b3V0Q2hlY2siLCJ2ZXJ0U2Nyb2xsTGlzdGVuIiwiY2xlYXJWaXNSb3dDYWNoZSIsImRhdGFDaGFuZ2UiLCJzY3JvbGwiLCJjYWxjV2luZG93QnVmZmVyIiwiY29scyIsImNvbFBvcyIsImxlZnRQb3MiLCJyaWdodFBvcyIsImZpdERhdGFDaGVjayIsInZkb21Ib3oiLCJyZWluaXRDaGFuZ2VkIiwicmVpbml0aWFsaXplUm93IiwiY29sRW5kIiwib3RoZXJSb3dzIiwiYWRkQ29sUmlnaHQiLCJyZW1vdmVDb2xMZWZ0IiwiYWRkQ29sTGVmdCIsInJlbW92ZUNvbFJpZ2h0IiwiY29sUG9zaXRpb25BZGp1c3QiLCJmaXREYXRhQ29sQWN0dWFsV2lkdGhDaGVjayIsImV4IiwibmV3V2lkdGgiLCJ3aWR0aERpZmYiLCJhcHBlbmRDZWxsIiwiQ29sdW1uTWFuYWdlciIsImJsb2NrSG96U2Nyb2xsRXZlbnQiLCJjb2x1bW5zQnlGaWVsZCIsInJlZHJhd0Jsb2NrVXBkYXRlIiwiaW5pdGlhbGl6ZVJlbmRlcmVyIiwiY3JlYXRlSGVhZGVyc0VsZW1lbnQiLCJjcmVhdGVIZWFkZXJDb250ZW50c0VsZW1lbnQiLCJjcmVhdGVIZWFkZXJFbGVtZW50IiwiaW5pdGlhbGl6ZVNjcm9sbFdoZWVsV2F0Y2hlciIsInBhZFZlcnRpY2FsU2Nyb2xsYmFyIiwicmVuZGVyQ2xhc3MiLCJyZW5kZXJlcnMiLCJkZWx0YVgiLCJnZW5lcmF0ZUNvbHVtbnNGcm9tUm93RGF0YSIsImF1dG9Db2x1bW5zRGVmaW5pdGlvbnMiLCJfYWRkQ29sdW1uIiwiX3JlSW5kZXhDb2x1bW5zIiwibmV4dFRvQ29sdW1uIiwidG9wQ29sdW1uIiwicGFyZW50SW5kZXgiLCJuZXh0RWwiLCJnZXREZWZpbml0aW9ucyIsImdldERlZmluaXRpb25UcmVlIiwiZ2V0Q29tcG9uZW50cyIsInN0cnVjdHVyZWQiLCJfbW92ZUNvbHVtbkluQXJyYXkiLCJ1cGRhdGVSb3dzIiwic2Nyb2xsVG9Db2x1bW5Qb3NpdGlvbiIsInNjcm9sbFRvQ29sdW1uSWZWaXNpYmxlIiwidG90YWxXaWR0aCIsImZpeGVkV2lkdGgiLCJyZXNldFNjcm9sbCIsIkJhc2ljVmVydGljYWwiLCJ0YWJsZUZyYWciLCJyb3dUb3AiLCJWaXJ0dWFsRG9tVmVydGljYWwiLCJ2RG9tUm93SGVpZ2h0IiwidkRvbVRvcCIsInZEb21Cb3R0b20iLCJ2RG9tU2Nyb2xsUG9zVG9wIiwidkRvbVNjcm9sbFBvc0JvdHRvbSIsInZEb21Ub3BQYWQiLCJ2RG9tQm90dG9tUGFkIiwidkRvbU1heFJlbmRlckNoYWluIiwidkRvbVdpbmRvd0J1ZmZlciIsInZEb21XaW5kb3dNaW5Ub3RhbFJvd3MiLCJ2RG9tV2luZG93TWluTWFyZ2luUm93cyIsInZEb21Ub3BOZXdSb3dzIiwidkRvbUJvdHRvbU5ld1Jvd3MiLCJwYWRkaW5nQm90dG9tIiwiX3ZpcnR1YWxSZW5kZXJGaWxsIiwidG9wT2Zmc2V0IiwidGFibGVFbXB0eSIsInRvcERpZmYiLCJib3R0b21EaWZmIiwiX2FkZFRvcFJvdyIsInZEb21TY3JvbGxIZWlnaHQiLCJfcmVtb3ZlQm90dG9tUm93IiwiX2FkZEJvdHRvbVJvdyIsIl9yZW1vdmVUb3BSb3ciLCJyZW5kZXJWZXJ0aWNhbEJ1ZmZlciIsInRvcEZvdW5kIiwiYm90dG9tUm93IiwiZm9yY2VNb3ZlIiwicm93RnJhZ21lbnQiLCJ0b3BQYWQiLCJyb3dzSGVpZ2h0IiwiaGVpZ2h0T2NjdXBpZWQiLCJ0b3BQYWRIZWlnaHQiLCJyb3dzQ291bnQiLCJyZW5kZXJlZFJvd3MiLCJ0b3RhbFJvd3NSZW5kZXJlZCIsInJvd3NUb1JlbmRlciIsImF2Z1Jvd0hlaWdodCIsInJlc2l6ZWQiLCJmaWxsYWJsZVNwYWNlIiwiYWRkZWRSb3dzIiwicGFkZGluZ0FkanVzdCIsIl9xdWlja05vcm1hbGl6ZVJvd0hlaWdodCIsInJlbW92YWJsZVJvd3MiLCJSb3dNYW5hZ2VyIiwiY3JlYXRlSG9sZGVyRWxlbWVudCIsImNyZWF0ZVRhYmxlRWxlbWVudCIsImhlaWdodEZpeGVyIiwicGxhY2Vob2xkZXJDb250ZW50cyIsImZpcnN0UmVuZGVyIiwicmVuZGVyTW9kZSIsImFjdGl2ZVJvd3NQaXBlbGluZSIsInJlZHJhd0Jsb2NrUmVzdG9yZUNvbmZpZyIsInJlZHJhd0Jsb2NrUmVuZGVySW5Qb3NpdGlvbiIsImRhdGFQaXBlbGluZSIsInNjcm9sbGJhcldpZHRoIiwiaW5pdGlhbGl6ZVBsYWNlaG9sZGVyIiwibGVmdERpciIsInRvcERpciIsIl9wb3NpdGlvblBsYWNlaG9sZGVyIiwiX3NldERhdGFBY3R1YWwiLCJfd2lwZUVsZW1lbnRzIiwiYWxsSW5kZXgiLCJhY3RpdmVJbmRleCIsInNldEFjdGl2ZVJvd3MiLCJkaXNwbGF5Um93SXRlcmF0b3IiLCJkaXNwbGF5SW5kZXgiLCJyZWZyZXNoRGlzcGxheU9ubHkiLCJmaW5kQWRkUm93UG9zIiwiX2NsZWFyUGxhY2Vob2xkZXIiLCJhZGRSb3dQb3MiLCJjaGFpblJlc3VsdCIsImNsZWFyRGF0YSIsImZpbmRSb3dJbmRleCIsInJvd09ubHkiLCJnZXREYXRhQ291bnQiLCJza2lwU3RhZ2UiLCJzdGFnZSIsImNhc2NhZGVPcmRlciIsInJlZnJlc2hQaXBlbGluZXMiLCJyZW5kZXJUYWJsZSIsImxheW91dENvbHVtbnNPbk5ld0RhdGEiLCJyZXNldERpc3BsYXlSb3dzIiwic2V0RGlzcGxheVJvd3MiLCJzY3JvbGxCYXJDaGVjayIsInJlbmRlclZlcnRpY2FsIiwiX2NsZWFyVGFibGUiLCJfc2hvd1BsYWNlaG9sZGVyIiwiaW5pdGlhbEhlaWdodCIsIm90aGVySGVpZ2h0IiwiZXh0ZXJuYWwiLCJldmVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiRXZlbnQiLCJGb290ZXJNYW5hZ2VyIiwiY3JlYXRlQ29udGFpbmVyRWxlbWVudCIsImluaXRpYWxpemVFbGVtZW50IiwiZm9vdGVyRWxlbWVudCIsImFjdGl2YXRlIiwiZGVhY3RpdmF0ZSIsIkludGVyYWN0aW9uTWFuYWdlciIsImFib3J0Q2xhc3NlcyIsInByZXZpb3VzVGFyZ2V0cyIsImxpc3RlbmVycyIsImNvbXBvbmVudE1hcCIsInBzZXVkb1RyYWNrZXJzIiwic3Vic2NyaWJlciIsInBzZXVkb1RyYWNraW5nIiwiYnVpbGRMaXN0ZW5lck1hcCIsImJpbmRTdWJzY3JpcHRpb25XYXRjaGVycyIsImxpc3RlbmVyTWFwIiwibGlzdGVuZXIiLCJjb21wb25lbnRzIiwiYmluZFBzZXVkb0V2ZW50cyIsInBzZXVkb01vdXNlRW50ZXIiLCJwc2V1ZG9Nb3VzZUxlYXZlIiwibGVhdmVMaXN0IiwibGlua2VkS2V5cyIsImNvbXAiLCJjbGVhcldhdGNoZXJzIiwidXBkYXRlRXZlbnRMaXN0ZW5lcnMiLCJ0cmFjayIsImNvbXBvc2VkUGF0aCIsInRhcmdldHMiLCJmaW5kVGFyZ2V0cyIsImJpbmRDb21wb25lbnRzIiwidHJpZ2dlckV2ZW50cyIsImVsVGFyZ2V0cyIsInRhcmdldE1hdGNoZXMiLCJwcmV2aW91c1RhcmdldCIsImNsb3Nlc3QiLCJDb21wb25lbnRGdW5jdGlvbkJpbmRlciIsImRlYnVnSW52YWxpZENvbXBvbmVudEZ1bmNzIiwiRGF0YUxvYWRlciIsInJlcXVlc3RPcmRlciIsInJlcXVlc3RObyIsImFsZXJ0TG9hZGVyIiwibWFwUGFyYW1zIiwiZGF0YVNlbmRQYXJhbXMiLCJvYmplY3RJbnZlcnQiLCJkYXRhUmVjZWl2ZVBhcmFtcyIsImFsZXJ0RXJyb3IiLCJkYXRhTG9hZGVyRXJyb3JUaW1lb3V0IiwiYmxvY2tBY3RpdmVMb2FkIiwiZGF0YUxvYWRlckxvYWRpbmciLCJkYXRhTG9hZGVyRXJyb3IiLCJFeHRlcm5hbEV2ZW50QnVzIiwiZGVidWciLCJldmVudHMiLCJzdWJzY3JpcHRpb25Ob3RpZmllcnMiLCJfZGVidWdEaXNwYXRjaCIsIl9kaXNwYXRjaCIsIl9ub3RpZnlTdWJzY3JpcHRpb25DaGFuZ2UiLCJub3RpZmllcnMiLCJjYWxsUmVzdWx0IiwibG9nIiwiSW50ZXJuYWxFdmVudEJ1cyIsIl9kZWJ1Z0NoYWluIiwiX2NoYWluIiwiX2RlYnVnQ29uZmlybSIsIl9jb25maXJtIiwiZmFsbGJhY2siLCJjb25maXJtZWQiLCJEZXByZWNhdGlvbkFkdmlzb3IiLCJfd2FyblVzZXIiLCJUYWJsZVJlZ2lzdHJ5IiwidGFibGVzIiwiZGVyZWdpc3RlciIsImxvb2t1cFRhYmxlIiwibWF0Y2hFbGVtZW50IiwiVGFidWxhdG9yIiwiZml0RGF0YUdlbmVyYWwiLCJmb3JjZWQiLCJkZWZhdWx0TW9kZXMiLCJmaXREYXRhIiwiZml0RGF0YUZpbGwiLCJmaXREYXRhVGFibGUiLCJmaXREYXRhU3RyZXRjaCIsImNvbHNXaWR0aCIsImdhcCIsImxhc3RDb2wiLCJmaXRDb2x1bW5zIiwiZmxleENvbFdpZHRoIiwib3ZlcmZsb3dXaWR0aCIsImZsZXhXaWR0aCIsImZsZXhHcm93VW5pdHMiLCJmbGV4Q29sdW1ucyIsImZpeGVkU2hyaW5rQ29sdW1ucyIsImZsZXhTaHJpbmtVbml0cyIsImdhcEZpbGwiLCJjYWxjV2lkdGgiLCJzY2FsZUNvbHVtbnMiLCJmcmVlU3BhY2UiLCJzaHJpbmtDb2xzIiwib3ZlcnNpemVDb2xzIiwib3ZlcnNpemVTcGFjZSIsInJlbWFpbmluZ1NwYWNlIiwicmVtYWluaW5nRmxleEdyb3dVbml0cyIsImNoYW5nZVVuaXRzIiwidW5kZXJzaXplQ29scyIsImNhbGNHcm93Iiwid2lkdGhHcm93IiwiY2FsY1NocmluayIsIndpZHRoU2hyaW5rIiwiTGF5b3V0IiwibW9kZXMiLCJkYXRhQ2hhbmdlZCIsIkxvY2FsaXplIiwibGFuZ0xpc3QiLCJsYW5ncyIsInNldEhlYWRlckZpbHRlclBsYWNlaG9sZGVyIiwiaW5zdGFsbExhbmciLCJzZXRMb2NhbGUiLCJnZXRMYW5nIiwiZGVmYXVsdCIsIl9zZXRMYW5nUHJvcCIsImRlc2lyZWRMb2NhbGUiLCJsYW5ndWFnZSIsInRyYXZlcnNlTGFuZyIsInRyYW5zIiwiX2V4ZWN1dGVCaW5kaW5ncyIsInBhdGhBcnJheSIsIl9nZXRMYW5nRWxlbWVudCIsInJvb3RQYXRoIiwiQ29tbXMiLCJyZWNlaXZlIiwic2VsZWN0b3JzIiwiY29uIiwidGFibGVDb21tcyIsImNvcmVNb2R1bGVzIiwiTGF5b3V0TW9kdWxlIiwiTG9jYWxpemVNb2R1bGUiLCJDb21tc01vZHVsZSIsIk1vZHVsZUJpbmRlciIsInRhYnVsYXRvciIsImJpbmRTdGF0aWNGdW5jdGlvbmFsaXR5IiwiYmluZE1vZHVsZXMiLCJtb2R1bGVCaW5kaW5ncyIsImV4dGVuZE1vZHVsZSIsInJlZ2lzdGVyTW9kdWxlIiwibW9kIiwicmVnaXN0ZXJNb2R1bGVCaW5kaW5nIiwiZmluZFRhYmxlIiwib3JkZXJlZFN0YXJ0TW9kcyIsIm9yZGVyZWRFbmRNb2RzIiwidW5PcmRlcmVkTW9kcyIsIm1vZHVsZUNvcmUiLCJtb2R1bGVzQ29yZSIsIm1vZHVsZXNSZWd1bGFyIiwiY29yZSIsIm1vZHMiLCJBbGVydCIsIl9jcmVhdGVBbGVydEVsZW1lbnQiLCJtc2dFbGVtZW50IiwiX2NyZWF0ZU1zZ0VsZW1lbnQiLCJfdHlwZUNsYXNzIiwiaW50ZXJhY3Rpb25Nb25pdG9yIiwiaW5pdGlhbGl6ZUNvcmVTeXN0ZW1zIiwiX2NyZWF0ZSIsIl9jbGVhck9iamVjdFBvaW50ZXJzIiwiX21hcERlcHJlY2F0ZWRGdW5jdGlvbmFsaXR5IiwiZGVidWdFdmVudHNFeHRlcm5hbCIsImRlYnVnRXZlbnRzSW50ZXJuYWwiLCJfcnRsQ2hlY2siLCJfYnVpbGRFbGVtZW50IiwiX2luaXRpYWxpemVUYWJsZSIsIl9sb2FkSW5pdGlhbERhdGEiLCJ0ZXh0RGlyZWN0aW9uIiwiZGlyZWN0aW9uIiwibmV3RWxlbWVudCIsIl9kZXRlY3RCcm93c2VyIiwidWEiLCJ1c2VyQWdlbnQiLCJ2ZW5kb3IiLCJvcGVyYSIsImxpbmUiLCJkZWJ1Z0luaXRpYWxpemF0aW9uIiwicmVwbGFjZURhdGEiLCJyZXNwb25zZXMiLCJmb3VuZFJvd3MiLCJ1cGRhdGVPckFkZFJvdyIsInVwZGF0ZVJvdyIsImdldFJvd1Bvc2l0aW9uIiwiZ2V0Q29sdW1uRGVmaW5pdGlvbnMiLCJ0b2dnbGVDb2x1bW4iLCJkZWxldGVDb2x1bW4iLCJ1cGRhdGVDb2x1bW5EZWZpbml0aW9uIiwiZnJvbUNvbHVtbiIsIm9mZiIsInBsdWdpbiIsImRlYnVnRGVwcmVjYXRpb24iLCJyb3dGb3JtYXR0ZXJQcmludCIsInJvd0Zvcm1hdHRlckNsaXBib2FyZCIsInJvd0Zvcm1hdHRlckh0bWxPdXRwdXQiLCJhcnJheURhdGEiLCJwbGF5ZXJNZXRyaWNzIiwidGFibGVNZXRob2RzIiwiY3VycmVudFBsYXllciIsImpvdWV1ciIsInBhcnRpY2lwYXRpb24iLCJhZGRHcmF5c2NhbGVFZmZlY3QiLCJ3ZWVrRCIsIndlZWtDIiwid2Vla0IiLCJjdXJyZW50V2VlayIsImxvZ28iLCJkYXRhTWV0aG9kcyIsImdldExvZ28iLCJpbmNyZW1lbnRQbGF5ZXJzQ291bnQiLCJpbmNyZW1lbnRDb3VudCIsInRvcDN0ZWFtcyIsImdldE1vc3RDb21tbW9uVGVhbXMiLCJ0YWJsZWRhdGEiLCJlcXVpcGUiLCJ0ZWFtIiwicGxheWVyc0NvdW50IiwidGVhbXNMaXN0IiwiVGVhbSIsInByb3Blck5hbWUiLCJpbWciLCJpbml0aWFsaXNlVGVhbXNMaXN0IiwidGVhbU9iamVjdCIsInNvcnRlZFRlYW1zIl0sInNvdXJjZVJvb3QiOiIifQ==