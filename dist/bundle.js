/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={257:(t,e,i)=>{"use strict";i.d(e,{Z:()=>l});var n=i(537),o=i.n(n),r=i(645),a=i.n(r)()(o());a.push([t.id,'.tabulator {\n  position: relative;\n  border: 1px solid #999;\n  background-color: #888;\n  font-size: 14px;\n  text-align: left;\n  overflow: hidden;\n  -webkit-transform: translateZ(0);\n  -moz-transform: translateZ(0);\n  -ms-transform: translateZ(0);\n  -o-transform: translateZ(0);\n  transform: translateZ(0);\n}\n\n.tabulator[tabulator-layout="fitDataFill"] .tabulator-tableholder .tabulator-table {\n  min-width: 100%;\n}\n\n.tabulator[tabulator-layout="fitDataTable"] {\n  display: inline-block;\n}\n\n.tabulator.tabulator-block-select {\n  user-select: none;\n}\n\n.tabulator .tabulator-header {\n  position: relative;\n  box-sizing: border-box;\n  width: 100%;\n  border-bottom: 1px solid #999;\n  background-color: #e6e6e6;\n  color: #555;\n  font-weight: bold;\n  white-space: nowrap;\n  overflow: hidden;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n}\n\n.tabulator .tabulator-header.tabulator-header-hidden {\n  display: none;\n}\n\n.tabulator .tabulator-header .tabulator-header-contents {\n  position: relative;\n  overflow: hidden;\n}\n\n.tabulator .tabulator-header .tabulator-header-contents .tabulator-headers {\n  display: inline-block;\n}\n\n.tabulator .tabulator-header .tabulator-col {\n  display: inline-flex;\n  position: relative;\n  box-sizing: border-box;\n  flex-direction: column;\n  justify-content: flex-start;\n  border-right: 1px solid #aaa;\n  background: #e6e6e6;\n  text-align: left;\n  vertical-align: bottom;\n  overflow: hidden;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-moving {\n  position: absolute;\n  border: 1px solid #999;\n  background: #cdcdcd;\n  pointer-events: none;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content {\n  box-sizing: border-box;\n  position: relative;\n  padding: 4px;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-header-popup-button {\n  padding: 0 8px;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-header-popup-button:hover {\n  cursor: pointer;\n  opacity: .6;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title-holder {\n  position: relative;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title {\n  box-sizing: border-box;\n  width: 100%;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  vertical-align: bottom;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title.tabulator-col-title-wrap {\n  white-space: normal;\n  text-overflow: initial;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title .tabulator-title-editor {\n  box-sizing: border-box;\n  width: 100%;\n  border: 1px solid #999;\n  padding: 1px;\n  background: #fff;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title .tabulator-header-popup-button + .tabulator-title-editor {\n  width: calc(100% - 22px);\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter {\n  display: flex;\n  align-items: center;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  right: 4px;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n  width: 0;\n  height: 0;\n  border-left: 6px solid transparent;\n  border-right: 6px solid transparent;\n  border-bottom: 6px solid #bbb;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-group .tabulator-col-group-cols {\n  position: relative;\n  display: flex;\n  border-top: 1px solid #aaa;\n  overflow: hidden;\n  margin-right: -1px;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter {\n  position: relative;\n  box-sizing: border-box;\n  margin-top: 2px;\n  width: 100%;\n  text-align: center;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter textarea {\n  height: auto !important;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter svg {\n  margin-top: 3px;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter input::-ms-clear {\n  width: 0;\n  height: 0;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable .tabulator-col-title {\n  padding-right: 25px;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-header .tabulator-col.tabulator-sortable.tabulator-col-sorter-element:hover {\n    cursor: pointer;\n    background-color: #cdcdcd;\n  }\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="none"] .tabulator-col-content .tabulator-col-sorter {\n  color: #bbb;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="none"] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover {\n    cursor: pointer;\n    border-bottom: 6px solid #555;\n  }\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="none"] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n  border-top: none;\n  border-bottom: 6px solid #bbb;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="ascending"] .tabulator-col-content .tabulator-col-sorter {\n  color: #666;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="ascending"] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover {\n    cursor: pointer;\n    border-bottom: 6px solid #555;\n  }\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="ascending"] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n  border-top: none;\n  border-bottom: 6px solid #666;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="descending"] .tabulator-col-content .tabulator-col-sorter {\n  color: #666;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="descending"] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover {\n    cursor: pointer;\n    border-top: 6px solid #555;\n  }\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="descending"] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n  border-bottom: none;\n  border-top: 6px solid #666;\n  color: #666;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical .tabulator-col-content .tabulator-col-title {\n  writing-mode: vertical-rl;\n  text-orientation: mixed;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-col-vertical-flip .tabulator-col-title {\n  transform: rotate(180deg);\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable .tabulator-col-title {\n  padding-right: 0;\n  padding-top: 20px;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable.tabulator-col-vertical-flip .tabulator-col-title {\n  padding-right: 0;\n  padding-bottom: 20px;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable .tabulator-col-sorter {\n  justify-content: center;\n  left: 0;\n  right: 0;\n  top: 4px;\n  bottom: auto;\n}\n\n.tabulator .tabulator-header .tabulator-frozen {\n  position: sticky;\n  left: 0;\n  z-index: 11;\n}\n\n.tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-left {\n  border-right: 2px solid #aaa;\n}\n\n.tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-right {\n  border-left: 2px solid #aaa;\n}\n\n.tabulator .tabulator-header .tabulator-calcs-holder {\n  box-sizing: border-box;\n  background: #f3f3f3 !important;\n  border-top: 1px solid #aaa;\n  border-bottom: 1px solid #aaa;\n}\n\n.tabulator .tabulator-header .tabulator-calcs-holder .tabulator-row {\n  background: #f3f3f3 !important;\n}\n\n.tabulator .tabulator-header .tabulator-calcs-holder .tabulator-row .tabulator-col-resize-handle {\n  display: none;\n}\n\n.tabulator .tabulator-header .tabulator-frozen-rows-holder:empty {\n  display: none;\n}\n\n.tabulator .tabulator-tableholder {\n  position: relative;\n  width: 100%;\n  white-space: nowrap;\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n}\n\n.tabulator .tabulator-tableholder:focus {\n  outline: none;\n}\n\n.tabulator .tabulator-tableholder .tabulator-placeholder {\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n}\n\n.tabulator .tabulator-tableholder .tabulator-placeholder[tabulator-render-mode="virtual"] {\n  min-height: 100%;\n  min-width: 100%;\n}\n\n.tabulator .tabulator-tableholder .tabulator-placeholder .tabulator-placeholder-contents {\n  display: inline-block;\n  text-align: center;\n  padding: 10px;\n  color: #ccc;\n  font-weight: bold;\n  font-size: 20px;\n  white-space: normal;\n}\n\n.tabulator .tabulator-tableholder .tabulator-table {\n  position: relative;\n  display: inline-block;\n  background-color: #fff;\n  white-space: nowrap;\n  overflow: visible;\n  color: #333;\n}\n\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs {\n  font-weight: bold;\n  background: #e2e2e2 !important;\n}\n\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs.tabulator-calcs-top {\n  border-bottom: 2px solid #aaa;\n}\n\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs.tabulator-calcs-bottom {\n  border-top: 2px solid #aaa;\n}\n\n.tabulator .tabulator-footer {\n  border-top: 1px solid #999;\n  background-color: #e6e6e6;\n  color: #555;\n  font-weight: bold;\n  white-space: nowrap;\n  user-select: none;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n}\n\n.tabulator .tabulator-footer .tabulator-footer-contents {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  padding: 5px 10px;\n}\n\n.tabulator .tabulator-footer .tabulator-footer-contents:empty {\n  display: none;\n}\n\n.tabulator .tabulator-footer .tabulator-calcs-holder {\n  box-sizing: border-box;\n  width: 100%;\n  text-align: left;\n  background: #f3f3f3 !important;\n  border-bottom: 1px solid #aaa;\n  border-top: 1px solid #aaa;\n  overflow: hidden;\n}\n\n.tabulator .tabulator-footer .tabulator-calcs-holder .tabulator-row {\n  display: inline-block;\n  background: #f3f3f3 !important;\n}\n\n.tabulator .tabulator-footer .tabulator-calcs-holder .tabulator-row .tabulator-col-resize-handle {\n  display: none;\n}\n\n.tabulator .tabulator-footer .tabulator-calcs-holder:only-child {\n  margin-bottom: -5px;\n  border-bottom: none;\n}\n\n.tabulator .tabulator-footer > * + .tabulator-page-counter {\n  margin-left: 10px;\n}\n\n.tabulator .tabulator-footer .tabulator-page-counter {\n  font-weight: normal;\n}\n\n.tabulator .tabulator-footer .tabulator-paginator {\n  flex: 1;\n  text-align: right;\n  color: #555;\n  font-family: inherit;\n  font-weight: inherit;\n  font-size: inherit;\n}\n\n.tabulator .tabulator-footer .tabulator-page-size {\n  display: inline-block;\n  margin: 0 5px;\n  padding: 2px 5px;\n  border: 1px solid #aaa;\n  border-radius: 3px;\n}\n\n.tabulator .tabulator-footer .tabulator-pages {\n  margin: 0 7px;\n}\n\n.tabulator .tabulator-footer .tabulator-page {\n  display: inline-block;\n  margin: 0 2px;\n  padding: 2px 5px;\n  border: 1px solid #aaa;\n  border-radius: 3px;\n  background: rgba(255, 255, 255, 0.2);\n}\n\n.tabulator .tabulator-footer .tabulator-page.active {\n  color: #d00;\n}\n\n.tabulator .tabulator-footer .tabulator-page:disabled {\n  opacity: .5;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-footer .tabulator-page:not(.disabled):hover {\n    cursor: pointer;\n    background: rgba(0, 0, 0, 0.2);\n    color: #fff;\n  }\n}\n\n.tabulator .tabulator-col-resize-handle {\n  position: relative;\n  display: inline-block;\n  width: 6px;\n  margin-left: -3px;\n  margin-right: -3px;\n  z-index: 10;\n  vertical-align: middle;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-col-resize-handle:hover {\n    cursor: ew-resize;\n  }\n}\n\n.tabulator .tabulator-col-resize-handle:last-of-type {\n  width: 3px;\n  margin-right: 0;\n}\n\n.tabulator .tabulator-alert {\n  position: absolute;\n  display: flex;\n  align-items: center;\n  top: 0;\n  left: 0;\n  z-index: 100;\n  height: 100%;\n  width: 100%;\n  background: rgba(0, 0, 0, 0.4);\n  text-align: center;\n}\n\n.tabulator .tabulator-alert .tabulator-alert-msg {\n  display: inline-block;\n  margin: 0 auto;\n  padding: 10px 20px;\n  border-radius: 10px;\n  background: #fff;\n  font-weight: bold;\n  font-size: 16px;\n}\n\n.tabulator .tabulator-alert .tabulator-alert-msg.tabulator-alert-state-msg {\n  border: 4px solid #333;\n  color: #000;\n}\n\n.tabulator .tabulator-alert .tabulator-alert-msg.tabulator-alert-state-error {\n  border: 4px solid #D00;\n  color: #590000;\n}\n\n.tabulator-row {\n  position: relative;\n  box-sizing: border-box;\n  min-height: 22px;\n  background-color: #fff;\n}\n\n.tabulator-row.tabulator-row-even {\n  background-color: #EFEFEF;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row.tabulator-selectable:hover {\n    background-color: #bbb;\n    cursor: pointer;\n  }\n}\n\n.tabulator-row.tabulator-selected {\n  background-color: #9ABCEA;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row.tabulator-selected:hover {\n    background-color: #769BCC;\n    cursor: pointer;\n  }\n}\n\n.tabulator-row.tabulator-row-moving {\n  border: 1px solid #000;\n  background: #fff;\n}\n\n.tabulator-row.tabulator-moving {\n  position: absolute;\n  border-top: 1px solid #aaa;\n  border-bottom: 1px solid #aaa;\n  pointer-events: none;\n  z-index: 15;\n}\n\n.tabulator-row .tabulator-row-resize-handle {\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  height: 5px;\n}\n\n.tabulator-row .tabulator-row-resize-handle.prev {\n  top: 0;\n  bottom: auto;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row .tabulator-row-resize-handle:hover {\n    cursor: ns-resize;\n  }\n}\n\n.tabulator-row .tabulator-responsive-collapse {\n  box-sizing: border-box;\n  padding: 5px;\n  border-top: 1px solid #aaa;\n  border-bottom: 1px solid #aaa;\n}\n\n.tabulator-row .tabulator-responsive-collapse:empty {\n  display: none;\n}\n\n.tabulator-row .tabulator-responsive-collapse table {\n  font-size: 14px;\n}\n\n.tabulator-row .tabulator-responsive-collapse table tr td {\n  position: relative;\n}\n\n.tabulator-row .tabulator-responsive-collapse table tr td:first-of-type {\n  padding-right: 10px;\n}\n\n.tabulator-row .tabulator-cell {\n  display: inline-block;\n  position: relative;\n  box-sizing: border-box;\n  padding: 4px;\n  border-right: 1px solid #aaa;\n  vertical-align: middle;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.tabulator-row .tabulator-cell.tabulator-frozen {\n  display: inline-block;\n  position: sticky;\n  left: 0;\n  background-color: inherit;\n  z-index: 11;\n}\n\n.tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-left {\n  border-right: 2px solid #aaa;\n}\n\n.tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-right {\n  border-left: 2px solid #aaa;\n}\n\n.tabulator-row .tabulator-cell.tabulator-editing {\n  border: 1px solid #1D68CD;\n  outline: none;\n  padding: 0;\n}\n\n.tabulator-row .tabulator-cell.tabulator-editing input,\n.tabulator-row .tabulator-cell.tabulator-editing select {\n  border: 1px;\n  background: transparent;\n  outline: none;\n}\n\n.tabulator-row .tabulator-cell.tabulator-validation-fail {\n  border: 1px solid #dd0000;\n}\n\n.tabulator-row .tabulator-cell.tabulator-validation-fail input,\n.tabulator-row .tabulator-cell.tabulator-validation-fail select {\n  border: 1px;\n  background: transparent;\n  color: #dd0000;\n}\n\n.tabulator-row .tabulator-cell.tabulator-row-handle {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n}\n\n.tabulator-row .tabulator-cell.tabulator-row-handle .tabulator-row-handle-box {\n  width: 80%;\n}\n\n.tabulator-row .tabulator-cell.tabulator-row-handle .tabulator-row-handle-box .tabulator-row-handle-bar {\n  width: 100%;\n  height: 3px;\n  margin-top: 2px;\n  background: #666;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-branch-empty {\n  display: inline-block;\n  width: 7px;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-branch {\n  display: inline-block;\n  vertical-align: middle;\n  height: 9px;\n  width: 7px;\n  margin-top: -9px;\n  margin-right: 5px;\n  border-bottom-left-radius: 1px;\n  border-left: 2px solid #aaa;\n  border-bottom: 2px solid #aaa;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-control {\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  vertical-align: middle;\n  height: 11px;\n  width: 11px;\n  margin-right: 5px;\n  border: 1px solid #333;\n  border-radius: 2px;\n  background: rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row .tabulator-cell .tabulator-data-tree-control:hover {\n    cursor: pointer;\n    background: rgba(0, 0, 0, 0.2);\n  }\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-collapse {\n  display: inline-block;\n  position: relative;\n  height: 7px;\n  width: 1px;\n  background: transparent;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-collapse:after {\n  position: absolute;\n  content: "";\n  left: -3px;\n  top: 3px;\n  height: 1px;\n  width: 7px;\n  background: #333;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-expand {\n  display: inline-block;\n  position: relative;\n  height: 7px;\n  width: 1px;\n  background: #333;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-expand:after {\n  position: absolute;\n  content: "";\n  left: -3px;\n  top: 3px;\n  height: 1px;\n  width: 7px;\n  background: #333;\n}\n\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n  height: 15px;\n  width: 15px;\n  border-radius: 20px;\n  background: #666;\n  color: #fff;\n  font-weight: bold;\n  font-size: 1.1em;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle:hover {\n    opacity: .7;\n    cursor: pointer;\n  }\n}\n\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle.open .tabulator-responsive-collapse-toggle-close {\n  display: initial;\n}\n\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle.open .tabulator-responsive-collapse-toggle-open {\n  display: none;\n}\n\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle svg {\n  stroke: #fff;\n}\n\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle .tabulator-responsive-collapse-toggle-close {\n  display: none;\n}\n\n.tabulator-row .tabulator-cell .tabulator-traffic-light {\n  display: inline-block;\n  height: 14px;\n  width: 14px;\n  border-radius: 14px;\n}\n\n.tabulator-row.tabulator-group {\n  box-sizing: border-box;\n  border-bottom: 1px solid #999;\n  border-right: 1px solid #aaa;\n  border-top: 1px solid #999;\n  padding: 5px;\n  padding-left: 10px;\n  background: #ccc;\n  font-weight: bold;\n  min-width: 100%;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row.tabulator-group:hover {\n    cursor: pointer;\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n}\n\n.tabulator-row.tabulator-group.tabulator-group-visible .tabulator-arrow {\n  margin-right: 10px;\n  border-left: 6px solid transparent;\n  border-right: 6px solid transparent;\n  border-top: 6px solid #666;\n  border-bottom: 0;\n}\n\n.tabulator-row.tabulator-group.tabulator-group-level-1 {\n  padding-left: 30px;\n}\n\n.tabulator-row.tabulator-group.tabulator-group-level-2 {\n  padding-left: 50px;\n}\n\n.tabulator-row.tabulator-group.tabulator-group-level-3 {\n  padding-left: 70px;\n}\n\n.tabulator-row.tabulator-group.tabulator-group-level-4 {\n  padding-left: 90px;\n}\n\n.tabulator-row.tabulator-group.tabulator-group-level-5 {\n  padding-left: 110px;\n}\n\n.tabulator-row.tabulator-group .tabulator-group-toggle {\n  display: inline-block;\n}\n\n.tabulator-row.tabulator-group .tabulator-arrow {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-right: 16px;\n  border-top: 6px solid transparent;\n  border-bottom: 6px solid transparent;\n  border-right: 0;\n  border-left: 6px solid #666;\n  vertical-align: middle;\n}\n\n.tabulator-row.tabulator-group span {\n  margin-left: 10px;\n  color: #d00;\n}\n\n.tabulator-popup-container {\n  position: absolute;\n  display: inline-block;\n  box-sizing: border-box;\n  background: #fff;\n  border: 1px solid #aaa;\n  box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.2);\n  font-size: 14px;\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n  z-index: 10000;\n}\n\n.tabulator-popup {\n  padding: 5px;\n  border-radius: 3px;\n}\n\n.tabulator-tooltip {\n  max-width: Min(500px, 100%);\n  padding: 3px 5px;\n  border-radius: 2px;\n  box-shadow: none;\n  font-size: 12px;\n  pointer-events: none;\n}\n\n.tabulator-menu .tabulator-menu-item {\n  position: relative;\n  box-sizing: border-box;\n  padding: 5px 10px;\n  user-select: none;\n}\n\n.tabulator-menu .tabulator-menu-item.tabulator-menu-item-disabled {\n  opacity: .5;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-menu .tabulator-menu-item:not(.tabulator-menu-item-disabled):hover {\n    cursor: pointer;\n    background: #EFEFEF;\n  }\n}\n\n.tabulator-menu .tabulator-menu-item.tabulator-menu-item-submenu {\n  padding-right: 25px;\n}\n\n.tabulator-menu .tabulator-menu-item.tabulator-menu-item-submenu::after {\n  display: inline-block;\n  position: absolute;\n  top: calc(5px + .4em);\n  right: 10px;\n  height: 7px;\n  width: 7px;\n  content: \'\';\n  border-width: 1px 1px 0 0;\n  border-style: solid;\n  border-color: #aaa;\n  vertical-align: top;\n  transform: rotate(45deg);\n}\n\n.tabulator-menu .tabulator-menu-separator {\n  border-top: 1px solid #aaa;\n}\n\n.tabulator-edit-list {\n  max-height: 200px;\n  font-size: 14px;\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item {\n  padding: 4px;\n  color: #333;\n  outline: none;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.active {\n  color: #fff;\n  background: #1D68CD;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.active.focused {\n  outline: 1px solid rgba(255, 255, 255, 0.5);\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.focused {\n  outline: 1px solid #1D68CD;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-edit-list .tabulator-edit-list-item:hover {\n    cursor: pointer;\n    color: #fff;\n    background: #1D68CD;\n  }\n}\n\n.tabulator-edit-list .tabulator-edit-list-placeholder {\n  padding: 4px;\n  color: #333;\n  text-align: center;\n}\n\n.tabulator-edit-list .tabulator-edit-list-group {\n  border-bottom: 1px solid #aaa;\n  padding: 4px;\n  padding-top: 6px;\n  color: #333;\n  font-weight: bold;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-2,\n.tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-2 {\n  padding-left: 12px;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-3,\n.tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-3 {\n  padding-left: 20px;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-4,\n.tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-4 {\n  padding-left: 28px;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-5,\n.tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-5 {\n  padding-left: 36px;\n}\n\n.tabulator.tabulator-ltr {\n  direction: ltr;\n}\n\n.tabulator.tabulator-rtl {\n  text-align: initial;\n  direction: rtl;\n}\n\n.tabulator.tabulator-rtl .tabulator-header .tabulator-col {\n  text-align: initial;\n  border-left: 1px solid #aaa;\n  border-right: initial;\n}\n\n.tabulator.tabulator-rtl .tabulator-header .tabulator-col.tabulator-col-group .tabulator-col-group-cols {\n  margin-right: initial;\n  margin-left: -1px;\n}\n\n.tabulator.tabulator-rtl .tabulator-header .tabulator-col.tabulator-sortable .tabulator-col-title {\n  padding-right: 0;\n  padding-left: 25px;\n}\n\n.tabulator.tabulator-rtl .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter {\n  left: 8px;\n  right: initial;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell {\n  border-right: initial;\n  border-left: 1px solid #aaa;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell .tabulator-data-tree-branch {\n  margin-right: initial;\n  margin-left: 5px;\n  border-bottom-left-radius: initial;\n  border-bottom-right-radius: 1px;\n  border-left: initial;\n  border-right: 2px solid #aaa;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell .tabulator-data-tree-control {\n  margin-right: initial;\n  margin-left: 5px;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-left {\n  border-left: 2px solid #aaa;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-right {\n  border-right: 2px solid #aaa;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-col-resize-handle:last-of-type {\n  width: 3px;\n  margin-left: 0;\n  margin-right: -3px;\n}\n\n.tabulator.tabulator-rtl .tabulator-footer .tabulator-calcs-holder {\n  text-align: initial;\n}\n\n.tabulator-print-fullscreen {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 10000;\n}\n\nbody.tabulator-print-fullscreen-hide > *:not(.tabulator-print-fullscreen) {\n  display: none !important;\n}\n\n.tabulator-print-table {\n  border-collapse: collapse;\n}\n\n.tabulator-print-table .tabulator-data-tree-branch {\n  display: inline-block;\n  vertical-align: middle;\n  height: 9px;\n  width: 7px;\n  margin-top: -9px;\n  margin-right: 5px;\n  border-bottom-left-radius: 1px;\n  border-left: 2px solid #aaa;\n  border-bottom: 2px solid #aaa;\n}\n\n.tabulator-print-table .tabulator-print-table-group {\n  box-sizing: border-box;\n  border-bottom: 1px solid #999;\n  border-right: 1px solid #aaa;\n  border-top: 1px solid #999;\n  padding: 5px;\n  padding-left: 10px;\n  background: #ccc;\n  font-weight: bold;\n  min-width: 100%;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-print-table .tabulator-print-table-group:hover {\n    cursor: pointer;\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-visible .tabulator-arrow {\n  margin-right: 10px;\n  border-left: 6px solid transparent;\n  border-right: 6px solid transparent;\n  border-top: 6px solid #666;\n  border-bottom: 0;\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-1 td {\n  padding-left: 30px !important;\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-2 td {\n  padding-left: 50px !important;\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-3 td {\n  padding-left: 70px !important;\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-4 td {\n  padding-left: 90px !important;\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-5 td {\n  padding-left: 110px !important;\n}\n\n.tabulator-print-table .tabulator-print-table-group .tabulator-group-toggle {\n  display: inline-block;\n}\n\n.tabulator-print-table .tabulator-print-table-group .tabulator-arrow {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-right: 16px;\n  border-top: 6px solid transparent;\n  border-bottom: 6px solid transparent;\n  border-right: 0;\n  border-left: 6px solid #666;\n  vertical-align: middle;\n}\n\n.tabulator-print-table .tabulator-print-table-group span {\n  margin-left: 10px;\n  color: #d00;\n}\n\n.tabulator-print-table .tabulator-data-tree-control {\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  vertical-align: middle;\n  height: 11px;\n  width: 11px;\n  margin-right: 5px;\n  border: 1px solid #333;\n  border-radius: 2px;\n  background: rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-print-table .tabulator-data-tree-control:hover {\n    cursor: pointer;\n    background: rgba(0, 0, 0, 0.2);\n  }\n}\n\n.tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-collapse {\n  display: inline-block;\n  position: relative;\n  height: 7px;\n  width: 1px;\n  background: transparent;\n}\n\n.tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-collapse:after {\n  position: absolute;\n  content: "";\n  left: -3px;\n  top: 3px;\n  height: 1px;\n  width: 7px;\n  background: #333;\n}\n\n.tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-expand {\n  display: inline-block;\n  position: relative;\n  height: 7px;\n  width: 1px;\n  background: #333;\n}\n\n.tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-expand:after {\n  position: absolute;\n  content: "";\n  left: -3px;\n  top: 3px;\n  height: 1px;\n  width: 7px;\n  background: #333;\n}\n\n/*# sourceMappingURL=tabulator.css.map */',"",{version:3,sources:["webpack://./node_modules/tabulator-tables/dist/css/tabulator.scss","webpack://./node_modules/tabulator-tables/dist/css/tabulator.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,sBAAsB;EACtB,sBAAsB;EACtB,eAAe;EACf,gBAAgB;EAChB,gBAAgB;EAChB,gCAAgC;EAChC,6BAA6B;EAC7B,4BAA4B;EAC5B,2BAA2B;EAC3B,wBAAwB;AAAE;;AAC1B;EACE,eAAe;AAAE;;AACnB;EACE,qBAAqB;AAAE;;AACzB;EACE,iBAAiB;AAAE;;AACrB;EACE,kBAAkB;EAClB,sBAAsB;EACtB,WAAW;EACX,6BAA6B;EAC7B,yBAAyB;EACzB,WAAW;EACX,iBAAiB;EACjB,mBAAmB;EACnB,gBAAgB;EAChB,sBAAsB;EACtB,wBAAwB;EACxB,yBAAyB;EACzB,oBAAoB;AAAE;;AACtB;EACE,aAAa;AAAE;;AACjB;EACE,kBAAkB;EAClB,gBAAgB;AAAE;;AAClB;EACE,qBAAqB;AAAE;;AAC3B;EACE,oBAAoB;EACpB,kBAAkB;EAClB,sBAAsB;EACtB,sBAAsB;EACtB,2BAA2B;EAC3B,4BAA4B;EAC5B,mBAAmB;EACnB,gBAAgB;EAChB,sBAAsB;EACtB,gBAAgB;AAAE;;AAClB;EACE,kBAAkB;EAClB,sBAAsB;EACtB,mBAAmB;EACnB,oBAAoB;AAAE;;AACxB;EACE,sBAAsB;EACtB,kBAAkB;EAClB,YAAY;AAAE;;AACd;EACE,cAAc;AAAE;;AAChB;EACE,eAAe;EACf,WAAW;AAAE;;AACjB;EACE,kBAAkB;AAAE;;AACtB;EACE,sBAAsB;EACtB,WAAW;EACX,mBAAmB;EACnB,gBAAgB;EAChB,uBAAuB;EACvB,sBAAsB;AAAE;;AACxB;EACE,mBAAmB;EACnB,sBAAsB;AAAE;;AAC1B;EACE,sBAAsB;EACtB,WAAW;EACX,sBAAsB;EACtB,YAAY;EACZ,gBAAgB;AAAE;;AACpB;EACE,wBAAwB;AAAE;;AAC9B;EACE,aAAa;EACb,mBAAmB;EACnB,kBAAkB;EAClB,MAAM;EACN,SAAS;EACT,UAAU;AAAE;;AACZ;EACE,QAAQ;EACR,SAAS;EACT,kCAAkC;EAClC,mCAAmC;EACnC,6BAA6B;AAAE;;AACrC;EACE,kBAAkB;EAClB,aAAa;EACb,0BAA0B;EAC1B,gBAAgB;EAChB,kBAAkB;AAAE;;AACtB;EACE,kBAAkB;EAClB,sBAAsB;EACtB,eAAe;EACf,WAAW;EACX,kBAAkB;AAAE;;AACpB;EACE,uBAAuB;AAAE;;AAC3B;EACE,eAAe;AAAE;;AACnB;EACE,QAAQ;EACR,SAAS;AAAE;;AACf;EACE,mBAAmB;AAAE;;AACvB;EACE;IACE,eAAe;IACf,yBAAyB;EAAE;AAAE;;AACjC;EACE,WAAW;AAAE;;AACb;EACE;IACE,eAAe;IACf,6BAA6B;EAAE;AAAE;;AACrC;EACE,gBAAgB;EAChB,6BAA6B;AAAE;;AACnC;EACE,WAAW;AAAE;;AACb;EACE;IACE,eAAe;IACf,6BAA6B;EAAE;AAAE;;AACrC;EACE,gBAAgB;EAChB,6BAA6B;AAAE;;AACnC;EACE,WAAW;AAAE;;AACb;EACE;IACE,eAAe;IACf,0BAA0B;EAAE;AAAE;;AAClC;EACE,mBAAmB;EACnB,0BAA0B;EAC1B,WAAW;AAAE;;AACjB;EACE,yBAAyB;EACzB,uBAAuB;EACvB,aAAa;EACb,mBAAmB;EACnB,uBAAuB;AAAE;;AAC3B;EACE,yBAAyB;AAAE;;AAC7B;EACE,gBAAgB;EAChB,iBAAiB;AAAE;;AACrB;EACE,gBAAgB;EAChB,oBAAoB;AAAE;;AACxB;EACE,uBAAuB;EACvB,OAAO;EACP,QAAQ;EACR,QAAQ;EACR,YAAY;AAAE;;AAClB;EACE,gBAAgB;EAChB,OAAO;EACP,WAAW;AAAE;;AACb;EACE,4BAA4B;AAAE;;AAChC;EACE,2BAA2B;AAAE;;AACjC;EACE,sBAAsB;EACtB,8BAA8B;EAC9B,0BAA0B;EAC1B,6BAA6B;AAAE;;AAC/B;EACE,8BAA8B;AAAE;;AAChC;EACE,aAAa;AAAE;;AACrB;EACE,aAAa;AAAE;;AACnB;EACE,kBAAkB;EAClB,WAAW;EACX,mBAAmB;EACnB,cAAc;EACd,iCAAiC;AAAE;;AACnC;EACE,aAAa;AAAE;;AACjB;EACE,sBAAsB;EACtB,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,WAAW;AAAE;;AACb;EACE,gBAAgB;EAChB,eAAe;AAAE;;AACnB;EACE,qBAAqB;EACrB,kBAAkB;EAClB,aAAa;EACb,WAAW;EACX,iBAAiB;EACjB,eAAe;EACf,mBAAmB;AAAE;;AACzB;EACE,kBAAkB;EAClB,qBAAqB;EACrB,sBAAsB;EACtB,mBAAmB;EACnB,iBAAiB;EACjB,WAAW;AAAE;;AACb;EACE,iBAAiB;EACjB,8BAA8B;AAAE;;AAChC;EACE,6BAA6B;AAAE;;AACjC;EACE,0BAA0B;AAAE;;AACpC;EACE,0BAA0B;EAC1B,yBAAyB;EACzB,WAAW;EACX,iBAAiB;EACjB,mBAAmB;EACnB,iBAAiB;EACjB,sBAAsB;EACtB,wBAAwB;EACxB,yBAAyB;EACzB,oBAAoB;AAAE;;AACtB;EACE,aAAa;EACb,mBAAmB;EACnB,mBAAmB;EACnB,8BAA8B;EAC9B,iBAAiB;AAAE;;AACnB;EACE,aAAa;AAAE;;AACnB;EACE,sBAAsB;EACtB,WAAW;EACX,gBAAgB;EAChB,8BAA8B;EAC9B,6BAA6B;EAC7B,0BAA0B;EAC1B,gBAAgB;AAAE;;AAClB;EACE,qBAAqB;EACrB,8BAA8B;AAAE;;AAChC;EACE,aAAa;AAAE;;AACnB;EACE,mBAAmB;EACnB,mBAAmB;AAAE;;AACzB;EACE,iBAAiB;AAAE;;AACrB;EACE,mBAAmB;AAAE;;AACvB;EACE,OAAO;EACP,iBAAiB;EACjB,WAAW;EACX,oBAAoB;EACpB,oBAAoB;EACpB,kBAAkB;AAAE;;AACtB;EACE,qBAAqB;EACrB,aAAa;EACb,gBAAgB;EAChB,sBAAsB;EACtB,kBAAkB;AAAE;;AACtB;EACE,aAAa;AAAE;;AACjB;EACE,qBAAqB;EACrB,aAAa;EACb,gBAAgB;EAChB,sBAAsB;EACtB,kBAAkB;EAClB,oCAAoC;AAAE;;AACtC;EACE,WAAW;AAAE;;AACf;EACE,WAAW;AAAE;;AACf;EACE;IACE,eAAe;IACf,8BAA8B;IAC9B,WAAW;EAAE;AAAE;;AACvB;EACE,kBAAkB;EAClB,qBAAqB;EACrB,UAAU;EACV,iBAAiB;EACjB,kBAAkB;EAClB,WAAW;EACX,sBAAsB;AAAE;;AACxB;EACE;IACE,iBAAiB;EAAE;AAAE;;AACzB;EACE,UAAU;EACV,eAAe;AAAE;;AACrB;EACE,kBAAkB;EAClB,aAAa;EACb,mBAAmB;EACnB,MAAM;EACN,OAAO;EACP,YAAY;EACZ,YAAY;EACZ,WAAW;EACX,8BAA8B;EAC9B,kBAAkB;AAAE;;AACpB;EACE,qBAAqB;EACrB,cAAc;EACd,kBAAkB;EAClB,mBAAmB;EACnB,gBAAgB;EAChB,iBAAiB;EACjB,eAAe;AAAE;;AACjB;EACE,sBAAsB;EACtB,WAAW;AAAE;;AACf;EACE,sBAAsB;EACtB,cAAc;AAAE;;AAExB;EACE,kBAAkB;EAClB,sBAAsB;EACtB,gBAAgB;EAChB,sBAAsB;AAAE;;AACxB;EACE,yBAAyB;AAAE;;AAC7B;EACE;IACE,sBAAsB;IACtB,eAAe;EAAE;AAAE;;AACvB;EACE,yBAAyB;AAAE;;AAC7B;EACE;IACE,yBAAyB;IACzB,eAAe;EAAE;AAAE;;AACvB;EACE,sBAAsB;EACtB,gBAAgB;AAAE;;AACpB;EACE,kBAAkB;EAClB,0BAA0B;EAC1B,6BAA6B;EAC7B,oBAAoB;EACpB,WAAW;AAAE;;AACf;EACE,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,OAAO;EACP,WAAW;AAAE;;AACb;EACE,MAAM;EACN,YAAY;AAAE;;AAChB;EACE;IACE,iBAAiB;EAAE;AAAE;;AAC3B;EACE,sBAAsB;EACtB,YAAY;EACZ,0BAA0B;EAC1B,6BAA6B;AAAE;;AAC/B;EACE,aAAa;AAAE;;AACjB;EACE,eAAe;AAAE;;AACjB;EACE,kBAAkB;AAAE;;AACpB;EACE,mBAAmB;AAAE;;AAC7B;EACE,qBAAqB;EACrB,kBAAkB;EAClB,sBAAsB;EACtB,YAAY;EACZ,4BAA4B;EAC5B,sBAAsB;EACtB,mBAAmB;EACnB,gBAAgB;EAChB,uBAAuB;AAAE;;AACzB;EACE,qBAAqB;EACrB,gBAAgB;EAChB,OAAO;EACP,yBAAyB;EACzB,WAAW;AAAE;;AACb;EACE,4BAA4B;AAAE;;AAChC;EACE,2BAA2B;AAAE;;AACjC;EACE,yBAAyB;EACzB,aAAa;EACb,UAAU;AAAE;;AACZ;;EACE,WAAW;EACX,uBAAuB;EACvB,aAAa;AAAE;;AACnB;EACE,yBAAyB;AAAE;;AAC3B;;EACE,WAAW;EACX,uBAAuB;EACvB,cAAc;AAAE;;AACpB;EACE,oBAAoB;EACpB,mBAAmB;EACnB,uBAAuB;EACvB,sBAAsB;EACtB,wBAAwB;EACxB,yBAAyB;EACzB,oBAAoB;AAAE;;AACtB;EACE,UAAU;AAAE;;AACZ;EACE,WAAW;EACX,WAAW;EACX,eAAe;EACf,gBAAgB;AAAE;;AACxB;EACE,qBAAqB;EACrB,UAAU;AAAE;;AACd;EACE,qBAAqB;EACrB,sBAAsB;EACtB,WAAW;EACX,UAAU;EACV,gBAAgB;EAChB,iBAAiB;EACjB,8BAA8B;EAC9B,2BAA2B;EAC3B,6BAA6B;AAAE;;AACjC;EACE,oBAAoB;EACpB,uBAAuB;EACvB,mBAAmB;EACnB,sBAAsB;EACtB,YAAY;EACZ,WAAW;EACX,iBAAiB;EACjB,sBAAsB;EACtB,kBAAkB;EAClB,8BAA8B;EAC9B,gBAAgB;AAAE;;AAClB;EACE;IACE,eAAe;IACf,8BAA8B;EAAE;AAAE;;AACtC;EACE,qBAAqB;EACrB,kBAAkB;EAClB,WAAW;EACX,UAAU;EACV,uBAAuB;AAAE;;AACzB;EACE,kBAAkB;EAClB,WAAW;EACX,UAAU;EACV,QAAQ;EACR,WAAW;EACX,UAAU;EACV,gBAAgB;AAAE;;AACtB;EACE,qBAAqB;EACrB,kBAAkB;EAClB,WAAW;EACX,UAAU;EACV,gBAAgB;AAAE;;AAClB;EACE,kBAAkB;EAClB,WAAW;EACX,UAAU;EACV,QAAQ;EACR,WAAW;EACX,UAAU;EACV,gBAAgB;AAAE;;AACxB;EACE,oBAAoB;EACpB,mBAAmB;EACnB,uBAAuB;EACvB,sBAAsB;EACtB,wBAAwB;EACxB,yBAAyB;EACzB,oBAAoB;EACpB,YAAY;EACZ,WAAW;EACX,mBAAmB;EACnB,gBAAgB;EAChB,WAAW;EACX,iBAAiB;EACjB,gBAAgB;AAAE;;AAClB;EACE;IACE,WAAW;IACX,eAAe;EAAE;AAAE;;AACvB;EACE,gBAAgB;AAAE;;AACpB;EACE,aAAa;AAAE;;AACjB;EACE,YAAY;AAAE;;AAChB;EACE,aAAa;AAAE;;AACnB;EACE,qBAAqB;EACrB,YAAY;EACZ,WAAW;EACX,mBAAmB;AAAE;;AACzB;EACE,sBAAsB;EACtB,6BAA6B;EAC7B,4BAA4B;EAC5B,0BAA0B;EAC1B,YAAY;EACZ,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;EACjB,eAAe;AAAE;;AACjB;EACE;IACE,eAAe;IACf,oCAAoC;EAAE;AAAE;;AAC5C;EACE,kBAAkB;EAClB,kCAAkC;EAClC,mCAAmC;EACnC,0BAA0B;EAC1B,gBAAgB;AAAE;;AACpB;EACE,kBAAkB;AAAE;;AACtB;EACE,kBAAkB;AAAE;;AACtB;EACE,kBAAkB;AAAE;;AACtB;EACE,kBAAkB;AAAE;;AACtB;EACE,mBAAmB;AAAE;;AACvB;EACE,qBAAqB;AAAE;;AACzB;EACE,qBAAqB;EACrB,QAAQ;EACR,SAAS;EACT,kBAAkB;EAClB,iCAAiC;EACjC,oCAAoC;EACpC,eAAe;EACf,2BAA2B;EAC3B,sBAAsB;AAAE;;AAC1B;EACE,iBAAiB;EACjB,WAAW;AAAE;;AAEnB;EACE,kBAAkB;EAClB,qBAAqB;EACrB,sBAAsB;EACtB,gBAAgB;EAChB,sBAAsB;EACtB,wCAAwC;EACxC,eAAe;EACf,gBAAgB;EAChB,iCAAiC;EACjC,cAAc;AAAE;;AAElB;EACE,YAAY;EACZ,kBAAkB;AAAE;;AAEtB;EACE,2BAA2B;EAC3B,gBAAgB;EAChB,kBAAkB;EAClB,gBAAgB;EAChB,eAAe;EACf,oBAAoB;AAAE;;AAExB;EACE,kBAAkB;EAClB,sBAAsB;EACtB,iBAAiB;EACjB,iBAAiB;AAAE;;AACnB;EACE,WAAW;AAAE;;AACf;EACE;IACE,eAAe;IACf,mBAAmB;EAAE;AAAE;;AAC3B;EACE,mBAAmB;AAAE;;AACrB;EACE,qBAAqB;EACrB,kBAAkB;EAClB,qBAAqB;EACrB,WAAW;EACX,WAAW;EACX,UAAU;EACV,WAAW;EACX,yBAAyB;EACzB,mBAAmB;EACnB,kBAAkB;EAClB,mBAAmB;EACnB,wBAAwB;AAAE;;AAEhC;EACE,0BAA0B;AAAE;;AAE9B;EACE,iBAAiB;EACjB,eAAe;EACf,gBAAgB;EAChB,iCAAiC;AAAE;;AACnC;EACE,YAAY;EACZ,WAAW;EACX,aAAa;AAAE;;AACf;EACE,WAAW;EACX,mBAAmB;AAAE;;AACrB;EACE,2CAA2C;AAAE;;AACjD;EACE,0BAA0B;AAAE;;AAC9B;EACE;IACE,eAAe;IACf,WAAW;IACX,mBAAmB;EAAE;AAAE;;AAC7B;EACE,YAAY;EACZ,WAAW;EACX,kBAAkB;AAAE;;AACtB;EACE,6BAA6B;EAC7B,YAAY;EACZ,gBAAgB;EAChB,WAAW;EACX,iBAAiB;AAAE;;AACrB;;EACE,kBAAkB;AAAE;;AACtB;;EACE,kBAAkB;AAAE;;AACtB;;EACE,kBAAkB;AAAE;;AACtB;;EACE,kBAAkB;AAAE;;AAExB;EACE,cAAc;AAAE;;AAElB;EACE,mBAAmB;EACnB,cAAc;AAAE;;AAChB;EACE,mBAAmB;EACnB,2BAA2B;EAC3B,qBAAqB;AAAE;;AACvB;EACE,qBAAqB;EACrB,iBAAiB;AAAE;;AACrB;EACE,gBAAgB;EAChB,kBAAkB;AAAE;;AACtB;EACE,SAAS;EACT,cAAc;AAAE;;AACpB;EACE,qBAAqB;EACrB,2BAA2B;AAAE;;AAC7B;EACE,qBAAqB;EACrB,gBAAgB;EAChB,kCAAkC;EAClC,+BAA+B;EAC/B,oBAAoB;EACpB,4BAA4B;AAAE;;AAChC;EACE,qBAAqB;EACrB,gBAAgB;AAAE;;AACpB;EACE,2BAA2B;AAAE;;AAC/B;EACE,4BAA4B;AAAE;;AAClC;EACE,UAAU;EACV,cAAc;EACd,kBAAkB;AAAE;;AACtB;EACE,mBAAmB;AAAE;;AAEzB;EACE,kBAAkB;EAClB,MAAM;EACN,SAAS;EACT,OAAO;EACP,QAAQ;EACR,cAAc;AAAE;;AAElB;EACE,wBAAwB;AAAE;;AAE5B;EACE,yBAAyB;AAAE;;AAC3B;EACE,qBAAqB;EACrB,sBAAsB;EACtB,WAAW;EACX,UAAU;EACV,gBAAgB;EAChB,iBAAiB;EACjB,8BAA8B;EAC9B,2BAA2B;EAC3B,6BAA6B;AAAE;;AACjC;EACE,sBAAsB;EACtB,6BAA6B;EAC7B,4BAA4B;EAC5B,0BAA0B;EAC1B,YAAY;EACZ,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;EACjB,eAAe;AAAE;;AACjB;EACE;IACE,eAAe;IACf,oCAAoC;EAAE;AAAE;;AAC5C;EACE,kBAAkB;EAClB,kCAAkC;EAClC,mCAAmC;EACnC,0BAA0B;EAC1B,gBAAgB;AAAE;;AACpB;EACE,6BAA6B;AAAE;;AACjC;EACE,6BAA6B;AAAE;;AACjC;EACE,6BAA6B;AAAE;;AACjC;EACE,6BAA6B;AAAE;;AACjC;EACE,8BAA8B;AAAE;;AAClC;EACE,qBAAqB;AAAE;;AACzB;EACE,qBAAqB;EACrB,QAAQ;EACR,SAAS;EACT,kBAAkB;EAClB,iCAAiC;EACjC,oCAAoC;EACpC,eAAe;EACf,2BAA2B;EAC3B,sBAAsB;AAAE;;AAC1B;EACE,iBAAiB;EACjB,WAAW;AAAE;;AACjB;EACE,oBAAoB;EACpB,uBAAuB;EACvB,mBAAmB;EACnB,sBAAsB;EACtB,YAAY;EACZ,WAAW;EACX,iBAAiB;EACjB,sBAAsB;EACtB,kBAAkB;EAClB,8BAA8B;EAC9B,gBAAgB;AAAE;;AAClB;EACE;IACE,eAAe;IACf,8BAA8B;EAAE;AAAE;;AACtC;EACE,qBAAqB;EACrB,kBAAkB;EAClB,WAAW;EACX,UAAU;EACV,uBAAuB;AAAE;;AACzB;EACE,kBAAkB;EAClB,WAAW;EACX,UAAU;EACV,QAAQ;EACR,WAAW;EACX,UAAU;EACV,gBAAgB;AAAE;;AACtB;EACE,qBAAqB;EACrB,kBAAkB;EAClB,WAAW;EACX,UAAU;EACV,gBAAgB;AAAE;;AAClB;EACE,kBAAkB;EAClB,WAAW;EACX,UAAU;EACV,QAAQ;EACR,WAAW;EACX,UAAU;EACV,gBAAgB;AAAE;;ACiY1B,wCAAwC",sourcesContent:['.tabulator {\n  position: relative;\n  border: 1px solid #999;\n  background-color: #888;\n  font-size: 14px;\n  text-align: left;\n  overflow: hidden;\n  -webkit-transform: translateZ(0);\n  -moz-transform: translateZ(0);\n  -ms-transform: translateZ(0);\n  -o-transform: translateZ(0);\n  transform: translateZ(0); }\n  .tabulator[tabulator-layout="fitDataFill"] .tabulator-tableholder .tabulator-table {\n    min-width: 100%; }\n  .tabulator[tabulator-layout="fitDataTable"] {\n    display: inline-block; }\n  .tabulator.tabulator-block-select {\n    user-select: none; }\n  .tabulator .tabulator-header {\n    position: relative;\n    box-sizing: border-box;\n    width: 100%;\n    border-bottom: 1px solid #999;\n    background-color: #e6e6e6;\n    color: #555;\n    font-weight: bold;\n    white-space: nowrap;\n    overflow: hidden;\n    -moz-user-select: none;\n    -khtml-user-select: none;\n    -webkit-user-select: none;\n    -o-user-select: none; }\n    .tabulator .tabulator-header.tabulator-header-hidden {\n      display: none; }\n    .tabulator .tabulator-header .tabulator-header-contents {\n      position: relative;\n      overflow: hidden; }\n      .tabulator .tabulator-header .tabulator-header-contents .tabulator-headers {\n        display: inline-block; }\n    .tabulator .tabulator-header .tabulator-col {\n      display: inline-flex;\n      position: relative;\n      box-sizing: border-box;\n      flex-direction: column;\n      justify-content: flex-start;\n      border-right: 1px solid #aaa;\n      background: #e6e6e6;\n      text-align: left;\n      vertical-align: bottom;\n      overflow: hidden; }\n      .tabulator .tabulator-header .tabulator-col.tabulator-moving {\n        position: absolute;\n        border: 1px solid #999;\n        background: #cdcdcd;\n        pointer-events: none; }\n      .tabulator .tabulator-header .tabulator-col .tabulator-col-content {\n        box-sizing: border-box;\n        position: relative;\n        padding: 4px; }\n        .tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-header-popup-button {\n          padding: 0 8px; }\n          .tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-header-popup-button:hover {\n            cursor: pointer;\n            opacity: .6; }\n        .tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title-holder {\n          position: relative; }\n        .tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title {\n          box-sizing: border-box;\n          width: 100%;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          vertical-align: bottom; }\n          .tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title.tabulator-col-title-wrap {\n            white-space: normal;\n            text-overflow: initial; }\n          .tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title .tabulator-title-editor {\n            box-sizing: border-box;\n            width: 100%;\n            border: 1px solid #999;\n            padding: 1px;\n            background: #fff; }\n          .tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title .tabulator-header-popup-button + .tabulator-title-editor {\n            width: calc(100% - 22px); }\n        .tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter {\n          display: flex;\n          align-items: center;\n          position: absolute;\n          top: 0;\n          bottom: 0;\n          right: 4px; }\n          .tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n            width: 0;\n            height: 0;\n            border-left: 6px solid transparent;\n            border-right: 6px solid transparent;\n            border-bottom: 6px solid #bbb; }\n      .tabulator .tabulator-header .tabulator-col.tabulator-col-group .tabulator-col-group-cols {\n        position: relative;\n        display: flex;\n        border-top: 1px solid #aaa;\n        overflow: hidden;\n        margin-right: -1px; }\n      .tabulator .tabulator-header .tabulator-col .tabulator-header-filter {\n        position: relative;\n        box-sizing: border-box;\n        margin-top: 2px;\n        width: 100%;\n        text-align: center; }\n        .tabulator .tabulator-header .tabulator-col .tabulator-header-filter textarea {\n          height: auto !important; }\n        .tabulator .tabulator-header .tabulator-col .tabulator-header-filter svg {\n          margin-top: 3px; }\n        .tabulator .tabulator-header .tabulator-col .tabulator-header-filter input::-ms-clear {\n          width: 0;\n          height: 0; }\n      .tabulator .tabulator-header .tabulator-col.tabulator-sortable .tabulator-col-title {\n        padding-right: 25px; }\n      @media (hover: hover) and (pointer: fine) {\n        .tabulator .tabulator-header .tabulator-col.tabulator-sortable.tabulator-col-sorter-element:hover {\n          cursor: pointer;\n          background-color: #cdcdcd; } }\n      .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="none"] .tabulator-col-content .tabulator-col-sorter {\n        color: #bbb; }\n        @media (hover: hover) and (pointer: fine) {\n          .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="none"] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover {\n            cursor: pointer;\n            border-bottom: 6px solid #555; } }\n        .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="none"] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n          border-top: none;\n          border-bottom: 6px solid #bbb; }\n      .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="ascending"] .tabulator-col-content .tabulator-col-sorter {\n        color: #666; }\n        @media (hover: hover) and (pointer: fine) {\n          .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="ascending"] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover {\n            cursor: pointer;\n            border-bottom: 6px solid #555; } }\n        .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="ascending"] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n          border-top: none;\n          border-bottom: 6px solid #666; }\n      .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="descending"] .tabulator-col-content .tabulator-col-sorter {\n        color: #666; }\n        @media (hover: hover) and (pointer: fine) {\n          .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="descending"] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover {\n            cursor: pointer;\n            border-top: 6px solid #555; } }\n        .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="descending"] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n          border-bottom: none;\n          border-top: 6px solid #666;\n          color: #666; }\n      .tabulator .tabulator-header .tabulator-col.tabulator-col-vertical .tabulator-col-content .tabulator-col-title {\n        writing-mode: vertical-rl;\n        text-orientation: mixed;\n        display: flex;\n        align-items: center;\n        justify-content: center; }\n      .tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-col-vertical-flip .tabulator-col-title {\n        transform: rotate(180deg); }\n      .tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable .tabulator-col-title {\n        padding-right: 0;\n        padding-top: 20px; }\n      .tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable.tabulator-col-vertical-flip .tabulator-col-title {\n        padding-right: 0;\n        padding-bottom: 20px; }\n      .tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable .tabulator-col-sorter {\n        justify-content: center;\n        left: 0;\n        right: 0;\n        top: 4px;\n        bottom: auto; }\n    .tabulator .tabulator-header .tabulator-frozen {\n      position: sticky;\n      left: 0;\n      z-index: 11; }\n      .tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-left {\n        border-right: 2px solid #aaa; }\n      .tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-right {\n        border-left: 2px solid #aaa; }\n    .tabulator .tabulator-header .tabulator-calcs-holder {\n      box-sizing: border-box;\n      background: #f3f3f3 !important;\n      border-top: 1px solid #aaa;\n      border-bottom: 1px solid #aaa; }\n      .tabulator .tabulator-header .tabulator-calcs-holder .tabulator-row {\n        background: #f3f3f3 !important; }\n        .tabulator .tabulator-header .tabulator-calcs-holder .tabulator-row .tabulator-col-resize-handle {\n          display: none; }\n    .tabulator .tabulator-header .tabulator-frozen-rows-holder:empty {\n      display: none; }\n  .tabulator .tabulator-tableholder {\n    position: relative;\n    width: 100%;\n    white-space: nowrap;\n    overflow: auto;\n    -webkit-overflow-scrolling: touch; }\n    .tabulator .tabulator-tableholder:focus {\n      outline: none; }\n    .tabulator .tabulator-tableholder .tabulator-placeholder {\n      box-sizing: border-box;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      width: 100%; }\n      .tabulator .tabulator-tableholder .tabulator-placeholder[tabulator-render-mode="virtual"] {\n        min-height: 100%;\n        min-width: 100%; }\n      .tabulator .tabulator-tableholder .tabulator-placeholder .tabulator-placeholder-contents {\n        display: inline-block;\n        text-align: center;\n        padding: 10px;\n        color: #ccc;\n        font-weight: bold;\n        font-size: 20px;\n        white-space: normal; }\n    .tabulator .tabulator-tableholder .tabulator-table {\n      position: relative;\n      display: inline-block;\n      background-color: #fff;\n      white-space: nowrap;\n      overflow: visible;\n      color: #333; }\n      .tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs {\n        font-weight: bold;\n        background: #e2e2e2 !important; }\n        .tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs.tabulator-calcs-top {\n          border-bottom: 2px solid #aaa; }\n        .tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs.tabulator-calcs-bottom {\n          border-top: 2px solid #aaa; }\n  .tabulator .tabulator-footer {\n    border-top: 1px solid #999;\n    background-color: #e6e6e6;\n    color: #555;\n    font-weight: bold;\n    white-space: nowrap;\n    user-select: none;\n    -moz-user-select: none;\n    -khtml-user-select: none;\n    -webkit-user-select: none;\n    -o-user-select: none; }\n    .tabulator .tabulator-footer .tabulator-footer-contents {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n      justify-content: space-between;\n      padding: 5px 10px; }\n      .tabulator .tabulator-footer .tabulator-footer-contents:empty {\n        display: none; }\n    .tabulator .tabulator-footer .tabulator-calcs-holder {\n      box-sizing: border-box;\n      width: 100%;\n      text-align: left;\n      background: #f3f3f3 !important;\n      border-bottom: 1px solid #aaa;\n      border-top: 1px solid #aaa;\n      overflow: hidden; }\n      .tabulator .tabulator-footer .tabulator-calcs-holder .tabulator-row {\n        display: inline-block;\n        background: #f3f3f3 !important; }\n        .tabulator .tabulator-footer .tabulator-calcs-holder .tabulator-row .tabulator-col-resize-handle {\n          display: none; }\n      .tabulator .tabulator-footer .tabulator-calcs-holder:only-child {\n        margin-bottom: -5px;\n        border-bottom: none; }\n    .tabulator .tabulator-footer > * + .tabulator-page-counter {\n      margin-left: 10px; }\n    .tabulator .tabulator-footer .tabulator-page-counter {\n      font-weight: normal; }\n    .tabulator .tabulator-footer .tabulator-paginator {\n      flex: 1;\n      text-align: right;\n      color: #555;\n      font-family: inherit;\n      font-weight: inherit;\n      font-size: inherit; }\n    .tabulator .tabulator-footer .tabulator-page-size {\n      display: inline-block;\n      margin: 0 5px;\n      padding: 2px 5px;\n      border: 1px solid #aaa;\n      border-radius: 3px; }\n    .tabulator .tabulator-footer .tabulator-pages {\n      margin: 0 7px; }\n    .tabulator .tabulator-footer .tabulator-page {\n      display: inline-block;\n      margin: 0 2px;\n      padding: 2px 5px;\n      border: 1px solid #aaa;\n      border-radius: 3px;\n      background: rgba(255, 255, 255, 0.2); }\n      .tabulator .tabulator-footer .tabulator-page.active {\n        color: #d00; }\n      .tabulator .tabulator-footer .tabulator-page:disabled {\n        opacity: .5; }\n      @media (hover: hover) and (pointer: fine) {\n        .tabulator .tabulator-footer .tabulator-page:not(.disabled):hover {\n          cursor: pointer;\n          background: rgba(0, 0, 0, 0.2);\n          color: #fff; } }\n  .tabulator .tabulator-col-resize-handle {\n    position: relative;\n    display: inline-block;\n    width: 6px;\n    margin-left: -3px;\n    margin-right: -3px;\n    z-index: 10;\n    vertical-align: middle; }\n    @media (hover: hover) and (pointer: fine) {\n      .tabulator .tabulator-col-resize-handle:hover {\n        cursor: ew-resize; } }\n    .tabulator .tabulator-col-resize-handle:last-of-type {\n      width: 3px;\n      margin-right: 0; }\n  .tabulator .tabulator-alert {\n    position: absolute;\n    display: flex;\n    align-items: center;\n    top: 0;\n    left: 0;\n    z-index: 100;\n    height: 100%;\n    width: 100%;\n    background: rgba(0, 0, 0, 0.4);\n    text-align: center; }\n    .tabulator .tabulator-alert .tabulator-alert-msg {\n      display: inline-block;\n      margin: 0 auto;\n      padding: 10px 20px;\n      border-radius: 10px;\n      background: #fff;\n      font-weight: bold;\n      font-size: 16px; }\n      .tabulator .tabulator-alert .tabulator-alert-msg.tabulator-alert-state-msg {\n        border: 4px solid #333;\n        color: #000; }\n      .tabulator .tabulator-alert .tabulator-alert-msg.tabulator-alert-state-error {\n        border: 4px solid #D00;\n        color: #590000; }\n\n.tabulator-row {\n  position: relative;\n  box-sizing: border-box;\n  min-height: 22px;\n  background-color: #fff; }\n  .tabulator-row.tabulator-row-even {\n    background-color: #EFEFEF; }\n  @media (hover: hover) and (pointer: fine) {\n    .tabulator-row.tabulator-selectable:hover {\n      background-color: #bbb;\n      cursor: pointer; } }\n  .tabulator-row.tabulator-selected {\n    background-color: #9ABCEA; }\n  @media (hover: hover) and (pointer: fine) {\n    .tabulator-row.tabulator-selected:hover {\n      background-color: #769BCC;\n      cursor: pointer; } }\n  .tabulator-row.tabulator-row-moving {\n    border: 1px solid #000;\n    background: #fff; }\n  .tabulator-row.tabulator-moving {\n    position: absolute;\n    border-top: 1px solid #aaa;\n    border-bottom: 1px solid #aaa;\n    pointer-events: none;\n    z-index: 15; }\n  .tabulator-row .tabulator-row-resize-handle {\n    position: absolute;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    height: 5px; }\n    .tabulator-row .tabulator-row-resize-handle.prev {\n      top: 0;\n      bottom: auto; }\n    @media (hover: hover) and (pointer: fine) {\n      .tabulator-row .tabulator-row-resize-handle:hover {\n        cursor: ns-resize; } }\n  .tabulator-row .tabulator-responsive-collapse {\n    box-sizing: border-box;\n    padding: 5px;\n    border-top: 1px solid #aaa;\n    border-bottom: 1px solid #aaa; }\n    .tabulator-row .tabulator-responsive-collapse:empty {\n      display: none; }\n    .tabulator-row .tabulator-responsive-collapse table {\n      font-size: 14px; }\n      .tabulator-row .tabulator-responsive-collapse table tr td {\n        position: relative; }\n        .tabulator-row .tabulator-responsive-collapse table tr td:first-of-type {\n          padding-right: 10px; }\n  .tabulator-row .tabulator-cell {\n    display: inline-block;\n    position: relative;\n    box-sizing: border-box;\n    padding: 4px;\n    border-right: 1px solid #aaa;\n    vertical-align: middle;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis; }\n    .tabulator-row .tabulator-cell.tabulator-frozen {\n      display: inline-block;\n      position: sticky;\n      left: 0;\n      background-color: inherit;\n      z-index: 11; }\n      .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-left {\n        border-right: 2px solid #aaa; }\n      .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-right {\n        border-left: 2px solid #aaa; }\n    .tabulator-row .tabulator-cell.tabulator-editing {\n      border: 1px solid #1D68CD;\n      outline: none;\n      padding: 0; }\n      .tabulator-row .tabulator-cell.tabulator-editing input, .tabulator-row .tabulator-cell.tabulator-editing select {\n        border: 1px;\n        background: transparent;\n        outline: none; }\n    .tabulator-row .tabulator-cell.tabulator-validation-fail {\n      border: 1px solid #dd0000; }\n      .tabulator-row .tabulator-cell.tabulator-validation-fail input, .tabulator-row .tabulator-cell.tabulator-validation-fail select {\n        border: 1px;\n        background: transparent;\n        color: #dd0000; }\n    .tabulator-row .tabulator-cell.tabulator-row-handle {\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      -moz-user-select: none;\n      -khtml-user-select: none;\n      -webkit-user-select: none;\n      -o-user-select: none; }\n      .tabulator-row .tabulator-cell.tabulator-row-handle .tabulator-row-handle-box {\n        width: 80%; }\n        .tabulator-row .tabulator-cell.tabulator-row-handle .tabulator-row-handle-box .tabulator-row-handle-bar {\n          width: 100%;\n          height: 3px;\n          margin-top: 2px;\n          background: #666; }\n    .tabulator-row .tabulator-cell .tabulator-data-tree-branch-empty {\n      display: inline-block;\n      width: 7px; }\n    .tabulator-row .tabulator-cell .tabulator-data-tree-branch {\n      display: inline-block;\n      vertical-align: middle;\n      height: 9px;\n      width: 7px;\n      margin-top: -9px;\n      margin-right: 5px;\n      border-bottom-left-radius: 1px;\n      border-left: 2px solid #aaa;\n      border-bottom: 2px solid #aaa; }\n    .tabulator-row .tabulator-cell .tabulator-data-tree-control {\n      display: inline-flex;\n      justify-content: center;\n      align-items: center;\n      vertical-align: middle;\n      height: 11px;\n      width: 11px;\n      margin-right: 5px;\n      border: 1px solid #333;\n      border-radius: 2px;\n      background: rgba(0, 0, 0, 0.1);\n      overflow: hidden; }\n      @media (hover: hover) and (pointer: fine) {\n        .tabulator-row .tabulator-cell .tabulator-data-tree-control:hover {\n          cursor: pointer;\n          background: rgba(0, 0, 0, 0.2); } }\n      .tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-collapse {\n        display: inline-block;\n        position: relative;\n        height: 7px;\n        width: 1px;\n        background: transparent; }\n        .tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-collapse:after {\n          position: absolute;\n          content: "";\n          left: -3px;\n          top: 3px;\n          height: 1px;\n          width: 7px;\n          background: #333; }\n      .tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-expand {\n        display: inline-block;\n        position: relative;\n        height: 7px;\n        width: 1px;\n        background: #333; }\n        .tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-expand:after {\n          position: absolute;\n          content: "";\n          left: -3px;\n          top: 3px;\n          height: 1px;\n          width: 7px;\n          background: #333; }\n    .tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle {\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      -moz-user-select: none;\n      -khtml-user-select: none;\n      -webkit-user-select: none;\n      -o-user-select: none;\n      height: 15px;\n      width: 15px;\n      border-radius: 20px;\n      background: #666;\n      color: #fff;\n      font-weight: bold;\n      font-size: 1.1em; }\n      @media (hover: hover) and (pointer: fine) {\n        .tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle:hover {\n          opacity: .7;\n          cursor: pointer; } }\n      .tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle.open .tabulator-responsive-collapse-toggle-close {\n        display: initial; }\n      .tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle.open .tabulator-responsive-collapse-toggle-open {\n        display: none; }\n      .tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle svg {\n        stroke: #fff; }\n      .tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle .tabulator-responsive-collapse-toggle-close {\n        display: none; }\n    .tabulator-row .tabulator-cell .tabulator-traffic-light {\n      display: inline-block;\n      height: 14px;\n      width: 14px;\n      border-radius: 14px; }\n  .tabulator-row.tabulator-group {\n    box-sizing: border-box;\n    border-bottom: 1px solid #999;\n    border-right: 1px solid #aaa;\n    border-top: 1px solid #999;\n    padding: 5px;\n    padding-left: 10px;\n    background: #ccc;\n    font-weight: bold;\n    min-width: 100%; }\n    @media (hover: hover) and (pointer: fine) {\n      .tabulator-row.tabulator-group:hover {\n        cursor: pointer;\n        background-color: rgba(0, 0, 0, 0.1); } }\n    .tabulator-row.tabulator-group.tabulator-group-visible .tabulator-arrow {\n      margin-right: 10px;\n      border-left: 6px solid transparent;\n      border-right: 6px solid transparent;\n      border-top: 6px solid #666;\n      border-bottom: 0; }\n    .tabulator-row.tabulator-group.tabulator-group-level-1 {\n      padding-left: 30px; }\n    .tabulator-row.tabulator-group.tabulator-group-level-2 {\n      padding-left: 50px; }\n    .tabulator-row.tabulator-group.tabulator-group-level-3 {\n      padding-left: 70px; }\n    .tabulator-row.tabulator-group.tabulator-group-level-4 {\n      padding-left: 90px; }\n    .tabulator-row.tabulator-group.tabulator-group-level-5 {\n      padding-left: 110px; }\n    .tabulator-row.tabulator-group .tabulator-group-toggle {\n      display: inline-block; }\n    .tabulator-row.tabulator-group .tabulator-arrow {\n      display: inline-block;\n      width: 0;\n      height: 0;\n      margin-right: 16px;\n      border-top: 6px solid transparent;\n      border-bottom: 6px solid transparent;\n      border-right: 0;\n      border-left: 6px solid #666;\n      vertical-align: middle; }\n    .tabulator-row.tabulator-group span {\n      margin-left: 10px;\n      color: #d00; }\n\n.tabulator-popup-container {\n  position: absolute;\n  display: inline-block;\n  box-sizing: border-box;\n  background: #fff;\n  border: 1px solid #aaa;\n  box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.2);\n  font-size: 14px;\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n  z-index: 10000; }\n\n.tabulator-popup {\n  padding: 5px;\n  border-radius: 3px; }\n\n.tabulator-tooltip {\n  max-width: Min(500px, 100%);\n  padding: 3px 5px;\n  border-radius: 2px;\n  box-shadow: none;\n  font-size: 12px;\n  pointer-events: none; }\n\n.tabulator-menu .tabulator-menu-item {\n  position: relative;\n  box-sizing: border-box;\n  padding: 5px 10px;\n  user-select: none; }\n  .tabulator-menu .tabulator-menu-item.tabulator-menu-item-disabled {\n    opacity: .5; }\n  @media (hover: hover) and (pointer: fine) {\n    .tabulator-menu .tabulator-menu-item:not(.tabulator-menu-item-disabled):hover {\n      cursor: pointer;\n      background: #EFEFEF; } }\n  .tabulator-menu .tabulator-menu-item.tabulator-menu-item-submenu {\n    padding-right: 25px; }\n    .tabulator-menu .tabulator-menu-item.tabulator-menu-item-submenu::after {\n      display: inline-block;\n      position: absolute;\n      top: calc(5px + .4em);\n      right: 10px;\n      height: 7px;\n      width: 7px;\n      content: \'\';\n      border-width: 1px 1px 0 0;\n      border-style: solid;\n      border-color: #aaa;\n      vertical-align: top;\n      transform: rotate(45deg); }\n\n.tabulator-menu .tabulator-menu-separator {\n  border-top: 1px solid #aaa; }\n\n.tabulator-edit-list {\n  max-height: 200px;\n  font-size: 14px;\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch; }\n  .tabulator-edit-list .tabulator-edit-list-item {\n    padding: 4px;\n    color: #333;\n    outline: none; }\n    .tabulator-edit-list .tabulator-edit-list-item.active {\n      color: #fff;\n      background: #1D68CD; }\n      .tabulator-edit-list .tabulator-edit-list-item.active.focused {\n        outline: 1px solid rgba(255, 255, 255, 0.5); }\n    .tabulator-edit-list .tabulator-edit-list-item.focused {\n      outline: 1px solid #1D68CD; }\n    @media (hover: hover) and (pointer: fine) {\n      .tabulator-edit-list .tabulator-edit-list-item:hover {\n        cursor: pointer;\n        color: #fff;\n        background: #1D68CD; } }\n  .tabulator-edit-list .tabulator-edit-list-placeholder {\n    padding: 4px;\n    color: #333;\n    text-align: center; }\n  .tabulator-edit-list .tabulator-edit-list-group {\n    border-bottom: 1px solid #aaa;\n    padding: 4px;\n    padding-top: 6px;\n    color: #333;\n    font-weight: bold; }\n  .tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-2, .tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-2 {\n    padding-left: 12px; }\n  .tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-3, .tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-3 {\n    padding-left: 20px; }\n  .tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-4, .tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-4 {\n    padding-left: 28px; }\n  .tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-5, .tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-5 {\n    padding-left: 36px; }\n\n.tabulator.tabulator-ltr {\n  direction: ltr; }\n\n.tabulator.tabulator-rtl {\n  text-align: initial;\n  direction: rtl; }\n  .tabulator.tabulator-rtl .tabulator-header .tabulator-col {\n    text-align: initial;\n    border-left: 1px solid #aaa;\n    border-right: initial; }\n    .tabulator.tabulator-rtl .tabulator-header .tabulator-col.tabulator-col-group .tabulator-col-group-cols {\n      margin-right: initial;\n      margin-left: -1px; }\n    .tabulator.tabulator-rtl .tabulator-header .tabulator-col.tabulator-sortable .tabulator-col-title {\n      padding-right: 0;\n      padding-left: 25px; }\n    .tabulator.tabulator-rtl .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter {\n      left: 8px;\n      right: initial; }\n  .tabulator.tabulator-rtl .tabulator-row .tabulator-cell {\n    border-right: initial;\n    border-left: 1px solid #aaa; }\n    .tabulator.tabulator-rtl .tabulator-row .tabulator-cell .tabulator-data-tree-branch {\n      margin-right: initial;\n      margin-left: 5px;\n      border-bottom-left-radius: initial;\n      border-bottom-right-radius: 1px;\n      border-left: initial;\n      border-right: 2px solid #aaa; }\n    .tabulator.tabulator-rtl .tabulator-row .tabulator-cell .tabulator-data-tree-control {\n      margin-right: initial;\n      margin-left: 5px; }\n    .tabulator.tabulator-rtl .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-left {\n      border-left: 2px solid #aaa; }\n    .tabulator.tabulator-rtl .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-right {\n      border-right: 2px solid #aaa; }\n  .tabulator.tabulator-rtl .tabulator-row .tabulator-col-resize-handle:last-of-type {\n    width: 3px;\n    margin-left: 0;\n    margin-right: -3px; }\n  .tabulator.tabulator-rtl .tabulator-footer .tabulator-calcs-holder {\n    text-align: initial; }\n\n.tabulator-print-fullscreen {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 10000; }\n\nbody.tabulator-print-fullscreen-hide > *:not(.tabulator-print-fullscreen) {\n  display: none !important; }\n\n.tabulator-print-table {\n  border-collapse: collapse; }\n  .tabulator-print-table .tabulator-data-tree-branch {\n    display: inline-block;\n    vertical-align: middle;\n    height: 9px;\n    width: 7px;\n    margin-top: -9px;\n    margin-right: 5px;\n    border-bottom-left-radius: 1px;\n    border-left: 2px solid #aaa;\n    border-bottom: 2px solid #aaa; }\n  .tabulator-print-table .tabulator-print-table-group {\n    box-sizing: border-box;\n    border-bottom: 1px solid #999;\n    border-right: 1px solid #aaa;\n    border-top: 1px solid #999;\n    padding: 5px;\n    padding-left: 10px;\n    background: #ccc;\n    font-weight: bold;\n    min-width: 100%; }\n    @media (hover: hover) and (pointer: fine) {\n      .tabulator-print-table .tabulator-print-table-group:hover {\n        cursor: pointer;\n        background-color: rgba(0, 0, 0, 0.1); } }\n    .tabulator-print-table .tabulator-print-table-group.tabulator-group-visible .tabulator-arrow {\n      margin-right: 10px;\n      border-left: 6px solid transparent;\n      border-right: 6px solid transparent;\n      border-top: 6px solid #666;\n      border-bottom: 0; }\n    .tabulator-print-table .tabulator-print-table-group.tabulator-group-level-1 td {\n      padding-left: 30px !important; }\n    .tabulator-print-table .tabulator-print-table-group.tabulator-group-level-2 td {\n      padding-left: 50px !important; }\n    .tabulator-print-table .tabulator-print-table-group.tabulator-group-level-3 td {\n      padding-left: 70px !important; }\n    .tabulator-print-table .tabulator-print-table-group.tabulator-group-level-4 td {\n      padding-left: 90px !important; }\n    .tabulator-print-table .tabulator-print-table-group.tabulator-group-level-5 td {\n      padding-left: 110px !important; }\n    .tabulator-print-table .tabulator-print-table-group .tabulator-group-toggle {\n      display: inline-block; }\n    .tabulator-print-table .tabulator-print-table-group .tabulator-arrow {\n      display: inline-block;\n      width: 0;\n      height: 0;\n      margin-right: 16px;\n      border-top: 6px solid transparent;\n      border-bottom: 6px solid transparent;\n      border-right: 0;\n      border-left: 6px solid #666;\n      vertical-align: middle; }\n    .tabulator-print-table .tabulator-print-table-group span {\n      margin-left: 10px;\n      color: #d00; }\n  .tabulator-print-table .tabulator-data-tree-control {\n    display: inline-flex;\n    justify-content: center;\n    align-items: center;\n    vertical-align: middle;\n    height: 11px;\n    width: 11px;\n    margin-right: 5px;\n    border: 1px solid #333;\n    border-radius: 2px;\n    background: rgba(0, 0, 0, 0.1);\n    overflow: hidden; }\n    @media (hover: hover) and (pointer: fine) {\n      .tabulator-print-table .tabulator-data-tree-control:hover {\n        cursor: pointer;\n        background: rgba(0, 0, 0, 0.2); } }\n    .tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-collapse {\n      display: inline-block;\n      position: relative;\n      height: 7px;\n      width: 1px;\n      background: transparent; }\n      .tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-collapse:after {\n        position: absolute;\n        content: "";\n        left: -3px;\n        top: 3px;\n        height: 1px;\n        width: 7px;\n        background: #333; }\n    .tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-expand {\n      display: inline-block;\n      position: relative;\n      height: 7px;\n      width: 1px;\n      background: #333; }\n      .tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-expand:after {\n        position: absolute;\n        content: "";\n        left: -3px;\n        top: 3px;\n        height: 1px;\n        width: 7px;\n        background: #333; }\n','.tabulator {\n  position: relative;\n  border: 1px solid #999;\n  background-color: #888;\n  font-size: 14px;\n  text-align: left;\n  overflow: hidden;\n  -webkit-transform: translateZ(0);\n  -moz-transform: translateZ(0);\n  -ms-transform: translateZ(0);\n  -o-transform: translateZ(0);\n  transform: translateZ(0);\n}\n\n.tabulator[tabulator-layout="fitDataFill"] .tabulator-tableholder .tabulator-table {\n  min-width: 100%;\n}\n\n.tabulator[tabulator-layout="fitDataTable"] {\n  display: inline-block;\n}\n\n.tabulator.tabulator-block-select {\n  user-select: none;\n}\n\n.tabulator .tabulator-header {\n  position: relative;\n  box-sizing: border-box;\n  width: 100%;\n  border-bottom: 1px solid #999;\n  background-color: #e6e6e6;\n  color: #555;\n  font-weight: bold;\n  white-space: nowrap;\n  overflow: hidden;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n}\n\n.tabulator .tabulator-header.tabulator-header-hidden {\n  display: none;\n}\n\n.tabulator .tabulator-header .tabulator-header-contents {\n  position: relative;\n  overflow: hidden;\n}\n\n.tabulator .tabulator-header .tabulator-header-contents .tabulator-headers {\n  display: inline-block;\n}\n\n.tabulator .tabulator-header .tabulator-col {\n  display: inline-flex;\n  position: relative;\n  box-sizing: border-box;\n  flex-direction: column;\n  justify-content: flex-start;\n  border-right: 1px solid #aaa;\n  background: #e6e6e6;\n  text-align: left;\n  vertical-align: bottom;\n  overflow: hidden;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-moving {\n  position: absolute;\n  border: 1px solid #999;\n  background: #cdcdcd;\n  pointer-events: none;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content {\n  box-sizing: border-box;\n  position: relative;\n  padding: 4px;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-header-popup-button {\n  padding: 0 8px;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-header-popup-button:hover {\n  cursor: pointer;\n  opacity: .6;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title-holder {\n  position: relative;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title {\n  box-sizing: border-box;\n  width: 100%;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  vertical-align: bottom;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title.tabulator-col-title-wrap {\n  white-space: normal;\n  text-overflow: initial;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title .tabulator-title-editor {\n  box-sizing: border-box;\n  width: 100%;\n  border: 1px solid #999;\n  padding: 1px;\n  background: #fff;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title .tabulator-header-popup-button + .tabulator-title-editor {\n  width: calc(100% - 22px);\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter {\n  display: flex;\n  align-items: center;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  right: 4px;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n  width: 0;\n  height: 0;\n  border-left: 6px solid transparent;\n  border-right: 6px solid transparent;\n  border-bottom: 6px solid #bbb;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-group .tabulator-col-group-cols {\n  position: relative;\n  display: flex;\n  border-top: 1px solid #aaa;\n  overflow: hidden;\n  margin-right: -1px;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter {\n  position: relative;\n  box-sizing: border-box;\n  margin-top: 2px;\n  width: 100%;\n  text-align: center;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter textarea {\n  height: auto !important;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter svg {\n  margin-top: 3px;\n}\n\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter input::-ms-clear {\n  width: 0;\n  height: 0;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable .tabulator-col-title {\n  padding-right: 25px;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-header .tabulator-col.tabulator-sortable.tabulator-col-sorter-element:hover {\n    cursor: pointer;\n    background-color: #cdcdcd;\n  }\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="none"] .tabulator-col-content .tabulator-col-sorter {\n  color: #bbb;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="none"] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover {\n    cursor: pointer;\n    border-bottom: 6px solid #555;\n  }\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="none"] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n  border-top: none;\n  border-bottom: 6px solid #bbb;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="ascending"] .tabulator-col-content .tabulator-col-sorter {\n  color: #666;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="ascending"] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover {\n    cursor: pointer;\n    border-bottom: 6px solid #555;\n  }\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="ascending"] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n  border-top: none;\n  border-bottom: 6px solid #666;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="descending"] .tabulator-col-content .tabulator-col-sorter {\n  color: #666;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="descending"] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover {\n    cursor: pointer;\n    border-top: 6px solid #555;\n  }\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort="descending"] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n  border-bottom: none;\n  border-top: 6px solid #666;\n  color: #666;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical .tabulator-col-content .tabulator-col-title {\n  writing-mode: vertical-rl;\n  text-orientation: mixed;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-col-vertical-flip .tabulator-col-title {\n  transform: rotate(180deg);\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable .tabulator-col-title {\n  padding-right: 0;\n  padding-top: 20px;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable.tabulator-col-vertical-flip .tabulator-col-title {\n  padding-right: 0;\n  padding-bottom: 20px;\n}\n\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable .tabulator-col-sorter {\n  justify-content: center;\n  left: 0;\n  right: 0;\n  top: 4px;\n  bottom: auto;\n}\n\n.tabulator .tabulator-header .tabulator-frozen {\n  position: sticky;\n  left: 0;\n  z-index: 11;\n}\n\n.tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-left {\n  border-right: 2px solid #aaa;\n}\n\n.tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-right {\n  border-left: 2px solid #aaa;\n}\n\n.tabulator .tabulator-header .tabulator-calcs-holder {\n  box-sizing: border-box;\n  background: #f3f3f3 !important;\n  border-top: 1px solid #aaa;\n  border-bottom: 1px solid #aaa;\n}\n\n.tabulator .tabulator-header .tabulator-calcs-holder .tabulator-row {\n  background: #f3f3f3 !important;\n}\n\n.tabulator .tabulator-header .tabulator-calcs-holder .tabulator-row .tabulator-col-resize-handle {\n  display: none;\n}\n\n.tabulator .tabulator-header .tabulator-frozen-rows-holder:empty {\n  display: none;\n}\n\n.tabulator .tabulator-tableholder {\n  position: relative;\n  width: 100%;\n  white-space: nowrap;\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n}\n\n.tabulator .tabulator-tableholder:focus {\n  outline: none;\n}\n\n.tabulator .tabulator-tableholder .tabulator-placeholder {\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n}\n\n.tabulator .tabulator-tableholder .tabulator-placeholder[tabulator-render-mode="virtual"] {\n  min-height: 100%;\n  min-width: 100%;\n}\n\n.tabulator .tabulator-tableholder .tabulator-placeholder .tabulator-placeholder-contents {\n  display: inline-block;\n  text-align: center;\n  padding: 10px;\n  color: #ccc;\n  font-weight: bold;\n  font-size: 20px;\n  white-space: normal;\n}\n\n.tabulator .tabulator-tableholder .tabulator-table {\n  position: relative;\n  display: inline-block;\n  background-color: #fff;\n  white-space: nowrap;\n  overflow: visible;\n  color: #333;\n}\n\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs {\n  font-weight: bold;\n  background: #e2e2e2 !important;\n}\n\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs.tabulator-calcs-top {\n  border-bottom: 2px solid #aaa;\n}\n\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs.tabulator-calcs-bottom {\n  border-top: 2px solid #aaa;\n}\n\n.tabulator .tabulator-footer {\n  border-top: 1px solid #999;\n  background-color: #e6e6e6;\n  color: #555;\n  font-weight: bold;\n  white-space: nowrap;\n  user-select: none;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n}\n\n.tabulator .tabulator-footer .tabulator-footer-contents {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  padding: 5px 10px;\n}\n\n.tabulator .tabulator-footer .tabulator-footer-contents:empty {\n  display: none;\n}\n\n.tabulator .tabulator-footer .tabulator-calcs-holder {\n  box-sizing: border-box;\n  width: 100%;\n  text-align: left;\n  background: #f3f3f3 !important;\n  border-bottom: 1px solid #aaa;\n  border-top: 1px solid #aaa;\n  overflow: hidden;\n}\n\n.tabulator .tabulator-footer .tabulator-calcs-holder .tabulator-row {\n  display: inline-block;\n  background: #f3f3f3 !important;\n}\n\n.tabulator .tabulator-footer .tabulator-calcs-holder .tabulator-row .tabulator-col-resize-handle {\n  display: none;\n}\n\n.tabulator .tabulator-footer .tabulator-calcs-holder:only-child {\n  margin-bottom: -5px;\n  border-bottom: none;\n}\n\n.tabulator .tabulator-footer > * + .tabulator-page-counter {\n  margin-left: 10px;\n}\n\n.tabulator .tabulator-footer .tabulator-page-counter {\n  font-weight: normal;\n}\n\n.tabulator .tabulator-footer .tabulator-paginator {\n  flex: 1;\n  text-align: right;\n  color: #555;\n  font-family: inherit;\n  font-weight: inherit;\n  font-size: inherit;\n}\n\n.tabulator .tabulator-footer .tabulator-page-size {\n  display: inline-block;\n  margin: 0 5px;\n  padding: 2px 5px;\n  border: 1px solid #aaa;\n  border-radius: 3px;\n}\n\n.tabulator .tabulator-footer .tabulator-pages {\n  margin: 0 7px;\n}\n\n.tabulator .tabulator-footer .tabulator-page {\n  display: inline-block;\n  margin: 0 2px;\n  padding: 2px 5px;\n  border: 1px solid #aaa;\n  border-radius: 3px;\n  background: rgba(255, 255, 255, 0.2);\n}\n\n.tabulator .tabulator-footer .tabulator-page.active {\n  color: #d00;\n}\n\n.tabulator .tabulator-footer .tabulator-page:disabled {\n  opacity: .5;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-footer .tabulator-page:not(.disabled):hover {\n    cursor: pointer;\n    background: rgba(0, 0, 0, 0.2);\n    color: #fff;\n  }\n}\n\n.tabulator .tabulator-col-resize-handle {\n  position: relative;\n  display: inline-block;\n  width: 6px;\n  margin-left: -3px;\n  margin-right: -3px;\n  z-index: 10;\n  vertical-align: middle;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator .tabulator-col-resize-handle:hover {\n    cursor: ew-resize;\n  }\n}\n\n.tabulator .tabulator-col-resize-handle:last-of-type {\n  width: 3px;\n  margin-right: 0;\n}\n\n.tabulator .tabulator-alert {\n  position: absolute;\n  display: flex;\n  align-items: center;\n  top: 0;\n  left: 0;\n  z-index: 100;\n  height: 100%;\n  width: 100%;\n  background: rgba(0, 0, 0, 0.4);\n  text-align: center;\n}\n\n.tabulator .tabulator-alert .tabulator-alert-msg {\n  display: inline-block;\n  margin: 0 auto;\n  padding: 10px 20px;\n  border-radius: 10px;\n  background: #fff;\n  font-weight: bold;\n  font-size: 16px;\n}\n\n.tabulator .tabulator-alert .tabulator-alert-msg.tabulator-alert-state-msg {\n  border: 4px solid #333;\n  color: #000;\n}\n\n.tabulator .tabulator-alert .tabulator-alert-msg.tabulator-alert-state-error {\n  border: 4px solid #D00;\n  color: #590000;\n}\n\n.tabulator-row {\n  position: relative;\n  box-sizing: border-box;\n  min-height: 22px;\n  background-color: #fff;\n}\n\n.tabulator-row.tabulator-row-even {\n  background-color: #EFEFEF;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row.tabulator-selectable:hover {\n    background-color: #bbb;\n    cursor: pointer;\n  }\n}\n\n.tabulator-row.tabulator-selected {\n  background-color: #9ABCEA;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row.tabulator-selected:hover {\n    background-color: #769BCC;\n    cursor: pointer;\n  }\n}\n\n.tabulator-row.tabulator-row-moving {\n  border: 1px solid #000;\n  background: #fff;\n}\n\n.tabulator-row.tabulator-moving {\n  position: absolute;\n  border-top: 1px solid #aaa;\n  border-bottom: 1px solid #aaa;\n  pointer-events: none;\n  z-index: 15;\n}\n\n.tabulator-row .tabulator-row-resize-handle {\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  height: 5px;\n}\n\n.tabulator-row .tabulator-row-resize-handle.prev {\n  top: 0;\n  bottom: auto;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row .tabulator-row-resize-handle:hover {\n    cursor: ns-resize;\n  }\n}\n\n.tabulator-row .tabulator-responsive-collapse {\n  box-sizing: border-box;\n  padding: 5px;\n  border-top: 1px solid #aaa;\n  border-bottom: 1px solid #aaa;\n}\n\n.tabulator-row .tabulator-responsive-collapse:empty {\n  display: none;\n}\n\n.tabulator-row .tabulator-responsive-collapse table {\n  font-size: 14px;\n}\n\n.tabulator-row .tabulator-responsive-collapse table tr td {\n  position: relative;\n}\n\n.tabulator-row .tabulator-responsive-collapse table tr td:first-of-type {\n  padding-right: 10px;\n}\n\n.tabulator-row .tabulator-cell {\n  display: inline-block;\n  position: relative;\n  box-sizing: border-box;\n  padding: 4px;\n  border-right: 1px solid #aaa;\n  vertical-align: middle;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.tabulator-row .tabulator-cell.tabulator-frozen {\n  display: inline-block;\n  position: sticky;\n  left: 0;\n  background-color: inherit;\n  z-index: 11;\n}\n\n.tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-left {\n  border-right: 2px solid #aaa;\n}\n\n.tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-right {\n  border-left: 2px solid #aaa;\n}\n\n.tabulator-row .tabulator-cell.tabulator-editing {\n  border: 1px solid #1D68CD;\n  outline: none;\n  padding: 0;\n}\n\n.tabulator-row .tabulator-cell.tabulator-editing input,\n.tabulator-row .tabulator-cell.tabulator-editing select {\n  border: 1px;\n  background: transparent;\n  outline: none;\n}\n\n.tabulator-row .tabulator-cell.tabulator-validation-fail {\n  border: 1px solid #dd0000;\n}\n\n.tabulator-row .tabulator-cell.tabulator-validation-fail input,\n.tabulator-row .tabulator-cell.tabulator-validation-fail select {\n  border: 1px;\n  background: transparent;\n  color: #dd0000;\n}\n\n.tabulator-row .tabulator-cell.tabulator-row-handle {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n}\n\n.tabulator-row .tabulator-cell.tabulator-row-handle .tabulator-row-handle-box {\n  width: 80%;\n}\n\n.tabulator-row .tabulator-cell.tabulator-row-handle .tabulator-row-handle-box .tabulator-row-handle-bar {\n  width: 100%;\n  height: 3px;\n  margin-top: 2px;\n  background: #666;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-branch-empty {\n  display: inline-block;\n  width: 7px;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-branch {\n  display: inline-block;\n  vertical-align: middle;\n  height: 9px;\n  width: 7px;\n  margin-top: -9px;\n  margin-right: 5px;\n  border-bottom-left-radius: 1px;\n  border-left: 2px solid #aaa;\n  border-bottom: 2px solid #aaa;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-control {\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  vertical-align: middle;\n  height: 11px;\n  width: 11px;\n  margin-right: 5px;\n  border: 1px solid #333;\n  border-radius: 2px;\n  background: rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row .tabulator-cell .tabulator-data-tree-control:hover {\n    cursor: pointer;\n    background: rgba(0, 0, 0, 0.2);\n  }\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-collapse {\n  display: inline-block;\n  position: relative;\n  height: 7px;\n  width: 1px;\n  background: transparent;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-collapse:after {\n  position: absolute;\n  content: "";\n  left: -3px;\n  top: 3px;\n  height: 1px;\n  width: 7px;\n  background: #333;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-expand {\n  display: inline-block;\n  position: relative;\n  height: 7px;\n  width: 1px;\n  background: #333;\n}\n\n.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-expand:after {\n  position: absolute;\n  content: "";\n  left: -3px;\n  top: 3px;\n  height: 1px;\n  width: 7px;\n  background: #333;\n}\n\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n  height: 15px;\n  width: 15px;\n  border-radius: 20px;\n  background: #666;\n  color: #fff;\n  font-weight: bold;\n  font-size: 1.1em;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle:hover {\n    opacity: .7;\n    cursor: pointer;\n  }\n}\n\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle.open .tabulator-responsive-collapse-toggle-close {\n  display: initial;\n}\n\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle.open .tabulator-responsive-collapse-toggle-open {\n  display: none;\n}\n\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle svg {\n  stroke: #fff;\n}\n\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle .tabulator-responsive-collapse-toggle-close {\n  display: none;\n}\n\n.tabulator-row .tabulator-cell .tabulator-traffic-light {\n  display: inline-block;\n  height: 14px;\n  width: 14px;\n  border-radius: 14px;\n}\n\n.tabulator-row.tabulator-group {\n  box-sizing: border-box;\n  border-bottom: 1px solid #999;\n  border-right: 1px solid #aaa;\n  border-top: 1px solid #999;\n  padding: 5px;\n  padding-left: 10px;\n  background: #ccc;\n  font-weight: bold;\n  min-width: 100%;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-row.tabulator-group:hover {\n    cursor: pointer;\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n}\n\n.tabulator-row.tabulator-group.tabulator-group-visible .tabulator-arrow {\n  margin-right: 10px;\n  border-left: 6px solid transparent;\n  border-right: 6px solid transparent;\n  border-top: 6px solid #666;\n  border-bottom: 0;\n}\n\n.tabulator-row.tabulator-group.tabulator-group-level-1 {\n  padding-left: 30px;\n}\n\n.tabulator-row.tabulator-group.tabulator-group-level-2 {\n  padding-left: 50px;\n}\n\n.tabulator-row.tabulator-group.tabulator-group-level-3 {\n  padding-left: 70px;\n}\n\n.tabulator-row.tabulator-group.tabulator-group-level-4 {\n  padding-left: 90px;\n}\n\n.tabulator-row.tabulator-group.tabulator-group-level-5 {\n  padding-left: 110px;\n}\n\n.tabulator-row.tabulator-group .tabulator-group-toggle {\n  display: inline-block;\n}\n\n.tabulator-row.tabulator-group .tabulator-arrow {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-right: 16px;\n  border-top: 6px solid transparent;\n  border-bottom: 6px solid transparent;\n  border-right: 0;\n  border-left: 6px solid #666;\n  vertical-align: middle;\n}\n\n.tabulator-row.tabulator-group span {\n  margin-left: 10px;\n  color: #d00;\n}\n\n.tabulator-popup-container {\n  position: absolute;\n  display: inline-block;\n  box-sizing: border-box;\n  background: #fff;\n  border: 1px solid #aaa;\n  box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.2);\n  font-size: 14px;\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n  z-index: 10000;\n}\n\n.tabulator-popup {\n  padding: 5px;\n  border-radius: 3px;\n}\n\n.tabulator-tooltip {\n  max-width: Min(500px, 100%);\n  padding: 3px 5px;\n  border-radius: 2px;\n  box-shadow: none;\n  font-size: 12px;\n  pointer-events: none;\n}\n\n.tabulator-menu .tabulator-menu-item {\n  position: relative;\n  box-sizing: border-box;\n  padding: 5px 10px;\n  user-select: none;\n}\n\n.tabulator-menu .tabulator-menu-item.tabulator-menu-item-disabled {\n  opacity: .5;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-menu .tabulator-menu-item:not(.tabulator-menu-item-disabled):hover {\n    cursor: pointer;\n    background: #EFEFEF;\n  }\n}\n\n.tabulator-menu .tabulator-menu-item.tabulator-menu-item-submenu {\n  padding-right: 25px;\n}\n\n.tabulator-menu .tabulator-menu-item.tabulator-menu-item-submenu::after {\n  display: inline-block;\n  position: absolute;\n  top: calc(5px + .4em);\n  right: 10px;\n  height: 7px;\n  width: 7px;\n  content: \'\';\n  border-width: 1px 1px 0 0;\n  border-style: solid;\n  border-color: #aaa;\n  vertical-align: top;\n  transform: rotate(45deg);\n}\n\n.tabulator-menu .tabulator-menu-separator {\n  border-top: 1px solid #aaa;\n}\n\n.tabulator-edit-list {\n  max-height: 200px;\n  font-size: 14px;\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item {\n  padding: 4px;\n  color: #333;\n  outline: none;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.active {\n  color: #fff;\n  background: #1D68CD;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.active.focused {\n  outline: 1px solid rgba(255, 255, 255, 0.5);\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.focused {\n  outline: 1px solid #1D68CD;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-edit-list .tabulator-edit-list-item:hover {\n    cursor: pointer;\n    color: #fff;\n    background: #1D68CD;\n  }\n}\n\n.tabulator-edit-list .tabulator-edit-list-placeholder {\n  padding: 4px;\n  color: #333;\n  text-align: center;\n}\n\n.tabulator-edit-list .tabulator-edit-list-group {\n  border-bottom: 1px solid #aaa;\n  padding: 4px;\n  padding-top: 6px;\n  color: #333;\n  font-weight: bold;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-2,\n.tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-2 {\n  padding-left: 12px;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-3,\n.tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-3 {\n  padding-left: 20px;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-4,\n.tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-4 {\n  padding-left: 28px;\n}\n\n.tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-5,\n.tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-5 {\n  padding-left: 36px;\n}\n\n.tabulator.tabulator-ltr {\n  direction: ltr;\n}\n\n.tabulator.tabulator-rtl {\n  text-align: initial;\n  direction: rtl;\n}\n\n.tabulator.tabulator-rtl .tabulator-header .tabulator-col {\n  text-align: initial;\n  border-left: 1px solid #aaa;\n  border-right: initial;\n}\n\n.tabulator.tabulator-rtl .tabulator-header .tabulator-col.tabulator-col-group .tabulator-col-group-cols {\n  margin-right: initial;\n  margin-left: -1px;\n}\n\n.tabulator.tabulator-rtl .tabulator-header .tabulator-col.tabulator-sortable .tabulator-col-title {\n  padding-right: 0;\n  padding-left: 25px;\n}\n\n.tabulator.tabulator-rtl .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter {\n  left: 8px;\n  right: initial;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell {\n  border-right: initial;\n  border-left: 1px solid #aaa;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell .tabulator-data-tree-branch {\n  margin-right: initial;\n  margin-left: 5px;\n  border-bottom-left-radius: initial;\n  border-bottom-right-radius: 1px;\n  border-left: initial;\n  border-right: 2px solid #aaa;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell .tabulator-data-tree-control {\n  margin-right: initial;\n  margin-left: 5px;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-left {\n  border-left: 2px solid #aaa;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-right {\n  border-right: 2px solid #aaa;\n}\n\n.tabulator.tabulator-rtl .tabulator-row .tabulator-col-resize-handle:last-of-type {\n  width: 3px;\n  margin-left: 0;\n  margin-right: -3px;\n}\n\n.tabulator.tabulator-rtl .tabulator-footer .tabulator-calcs-holder {\n  text-align: initial;\n}\n\n.tabulator-print-fullscreen {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 10000;\n}\n\nbody.tabulator-print-fullscreen-hide > *:not(.tabulator-print-fullscreen) {\n  display: none !important;\n}\n\n.tabulator-print-table {\n  border-collapse: collapse;\n}\n\n.tabulator-print-table .tabulator-data-tree-branch {\n  display: inline-block;\n  vertical-align: middle;\n  height: 9px;\n  width: 7px;\n  margin-top: -9px;\n  margin-right: 5px;\n  border-bottom-left-radius: 1px;\n  border-left: 2px solid #aaa;\n  border-bottom: 2px solid #aaa;\n}\n\n.tabulator-print-table .tabulator-print-table-group {\n  box-sizing: border-box;\n  border-bottom: 1px solid #999;\n  border-right: 1px solid #aaa;\n  border-top: 1px solid #999;\n  padding: 5px;\n  padding-left: 10px;\n  background: #ccc;\n  font-weight: bold;\n  min-width: 100%;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-print-table .tabulator-print-table-group:hover {\n    cursor: pointer;\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-visible .tabulator-arrow {\n  margin-right: 10px;\n  border-left: 6px solid transparent;\n  border-right: 6px solid transparent;\n  border-top: 6px solid #666;\n  border-bottom: 0;\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-1 td {\n  padding-left: 30px !important;\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-2 td {\n  padding-left: 50px !important;\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-3 td {\n  padding-left: 70px !important;\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-4 td {\n  padding-left: 90px !important;\n}\n\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-5 td {\n  padding-left: 110px !important;\n}\n\n.tabulator-print-table .tabulator-print-table-group .tabulator-group-toggle {\n  display: inline-block;\n}\n\n.tabulator-print-table .tabulator-print-table-group .tabulator-arrow {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-right: 16px;\n  border-top: 6px solid transparent;\n  border-bottom: 6px solid transparent;\n  border-right: 0;\n  border-left: 6px solid #666;\n  vertical-align: middle;\n}\n\n.tabulator-print-table .tabulator-print-table-group span {\n  margin-left: 10px;\n  color: #d00;\n}\n\n.tabulator-print-table .tabulator-data-tree-control {\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  vertical-align: middle;\n  height: 11px;\n  width: 11px;\n  margin-right: 5px;\n  border: 1px solid #333;\n  border-radius: 2px;\n  background: rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .tabulator-print-table .tabulator-data-tree-control:hover {\n    cursor: pointer;\n    background: rgba(0, 0, 0, 0.2);\n  }\n}\n\n.tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-collapse {\n  display: inline-block;\n  position: relative;\n  height: 7px;\n  width: 1px;\n  background: transparent;\n}\n\n.tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-collapse:after {\n  position: absolute;\n  content: "";\n  left: -3px;\n  top: 3px;\n  height: 1px;\n  width: 7px;\n  background: #333;\n}\n\n.tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-expand {\n  display: inline-block;\n  position: relative;\n  height: 7px;\n  width: 1px;\n  background: #333;\n}\n\n.tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-expand:after {\n  position: absolute;\n  content: "";\n  left: -3px;\n  top: 3px;\n  height: 1px;\n  width: 7px;\n  background: #333;\n}\n\n/*# sourceMappingURL=tabulator.css.map */'],sourceRoot:""}]);const l=a},426:(t,e,i)=>{"use strict";i.d(e,{Z:()=>u});var n=i(537),o=i.n(n),r=i(645),a=i.n(r),l=i(257),s=a()(o());s.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Epilogue:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Inter:wght@100;200;300;400;500;600;700;800;900&family=Orbitron:wght@400;500;600;700;800;900&display=swap);"]),s.i(l.Z),s.push([t.id,"* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n:root {\n    --gigantic-text: 4.768rem;\n    --jumbo-text: 3.815rem;\n    --h1-text: 3.052rem;\n    --h2-text: 2.441rem;\n    --h3-text: 1.953rem;\n    --h4-text: 1.563rem;\n    --h5-text: 1.25rem;\n    --small-text: 0.8rem;\n    --smaller-text: 0.64rem;\n    --smallest-text: 0.512rem;\n    --main-color: #c10828;\n    --text-color: #0d0607;\n    --secondary-color: #00b906;\n    --third-color: #b9e937;\n    --red-color: #b90000;\n}\n\nhtml {\n    font-size: 100%;\n    scroll-behavior: smooth;\n}\n\nbody {\n    font-family: 'Inter', sans-serif;\n    font-weight: 400;\n    color: white;\n    background: rgb(13,6,7);\n    background: linear-gradient(90deg, rgba(13,6,7,1) 0%, rgba(193,8,40,1) 50%, rgba(13,6,7,1) 100%);\n\n}\n\na {\n    cursor: pointer;\n}\n\nbutton {\n    cursor: pointer;\n}\n\np {margin-bottom: 1rem;}\n\nh1, h2, h3, h4, h5 {\n  margin: 3rem 0 1.38rem;\n  font-weight: 700;\n  line-height: 1;\n}\n\nh1 {\n  margin-top: 0;\n  font-size: var(--h1-text);\n  font-weight: 700;\n  text-transform: uppercase;\n}\n\nh2 {font-size: var(--h2-text);}\n\nh3 {font-size: var(--h3-text);}\n\nh4 {font-size: var(--h4-text);}\n\nh5 {font-size: var(--h5-text);}\n\n.material-symbols-outlined {\n    font-variation-settings:\n    'FILL' 1,\n    'wght' 300,\n    'GRAD' 200,\n    'opsz' 48\n}\n\nul {list-style-type: none;}\n\na {\n    text-decoration: none;\n    color: inherit;\n}\n\n.header {\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n    align-items: center;\n}\n\n.header__logo {\n    height: auto;\n    width: 150px;\n    margin: 25px;\n}\n\n.divider {\n    position: relative;\n    width: 250px;\n    border-top: 1px solid white;\n}\n\n.header__title {\n    display: flex;\n    justify-content: center;\n    margin-top: 25px;\n    margin-bottom: 25px;\n}\n\n.header__title__text {\n    text-transform: uppercase;\n    font-weight: 900;\n    font-size: var(--h1-text);\n    font-family: 'Epilogue', sans-serif;\n    text-align: center;\n    width: 250px;\n}\n\n.header__stats-section {\n    width: -webkit-fill-available;\n    margin: 15px 25px 15px 25px;\n}\n\n.header__stats-section__list {\n    margin-top: 15px;\n}\n\n.header__stats-section__list__item {\n    display: flex;\n}\n\n.header__stats-section__list__item__logo {\n    width: 50px;\n    height: auto;\n}\n\n.participation {\n    display: flex;\n    gap: 15px;\n    padding: 10px;\n}\n\n.team-logo {\n    width: 40px;\n    height: auto;\n}\n\n.tabulator {\n    border-color: #c5c5c5;\n} \n\n.tabulator .tabulator-header,\n.tabulator .tabulator-header .tabulator-col {\n    border-color: #c5c5c5;\n    color: #dfdfdf;\n    background-color: #1d191a;\n}\n\n#stats-table .tabulator-cell {\n    gap: 15px;\n    padding: 0;\n    color:#fff;\n    font-weight: 500;\n}\n\n#stats-table .tabulator-cell > div {\n    text-transform: uppercase;\n}\n\n#stats-table .tabulator-cell > img {\n    width: auto;\n    height: 100%;\n    padding-left: 5px;\n    padding-right: 5px;\n}\n\n.tabulator-cell > img {\n    width: auto;\n    height: 100%;\n}\n\n/*Theme the Tabulator element*/\n#pick-table {\n    border: 1px solid #c5c5c5;\n}\n\n/*Theme the header*/\n.tabulator-header {\n    background-color:#1d191a;\n    color:#fff;\n}\n\n/*Allow column header names to wrap lines*/\n#pick-table .tabulator-header .tabulator-col,\n#pick-table .tabulator-header .tabulator-col-row-handle {\n    white-space: normal;\n}\n\n/*Color the table rows base on player name*/\n#pick-table .tabulator-table .tabulator-row.a-player {\n    background-color: #ffffff;\n}\n\n#pick-table .tabulator-table .tabulator-row.another-player {\n    background-color: #dbdbdb;\n}\n\n/* Color the border cells */\n.tabulator-row .tabulator-cell {\n    border-bottom: 1px solid #c5c5c5;\n}\n\n#stats-table .tabulator-row .tabulator-cell:last-of-type,\n#stats-table .tabulator-header .tabulator-col:last-of-type {\n    border-right: none;\n}\n\n#stats-table .tabulator-row:last-of-type .tabulator-cell {\n    border-bottom: none;\n}\n\n.tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-right,\n.tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-right {\n    border-left: 1px;\n}\n\n.grayscale-effect {\n    filter: grayscale(100%);\n  }\n/* NHL TEAMS COLOR */\n#stats-table .anaheim-ducks {\n    background-color: #55472d;\n}\n\n.anaheim-ducks img, .anaheim-ducks {\n    background-color: #b6985a;\n}\n\n#stats-table .arizona-coyotes {\n    background-color: #390b18;\n}\n\n.arizona-coyote img, .arizona-coyotes {\n    background-color: #7a0022;\n}\n\n#stats-table .boston-bruins {\n    background-color: #b48518;\n}\n\n.boston-bruins img, .boston-bruins {\n    background-color: #fdb91e;\n}\n\n#stats-table .buffalo-sabres {\n    background-color: #0a1c40;\n}\n\n.buffalo-sabres img, .buffalo-sabres {\n    background-color: #023089;\n}\n\n#stats-table .calgary-flames {\n    background-color: #68111e;\n}\n\n.calgary-flames img, .calgary-flames {\n    background-color: #e30a2b;\n}\n\n#stats-table .carolina-hurricanes {\n    background-color: #8c2626;\n}\n\n.carolina-hurricanes img, .carolina-hurricanes {\n    background-color: #c8102e;\n}\n\n#stats-table .chicago-blackhawks {\n    background-color: #670e1c;\n}\n\n.chicago-blackhawks img, .chicago-blackhawks {\n    background-color: #e30829;\n}\n\n#stats-table .colorado-avalanche {\n    background-color: #2f1214;\n}\n\n.colorado-avalanche img, .colorado-avalanche {\n    background-color: #6f263d;\n}\n\n#stats-table .columbus-blue-jackets {\n    background-color: #091c32;\n}\n\n.columbus-blue-jackets img, .columbus-blue-jackets {\n    background-color: #032d65;\n}\n\n#stats-table .dallas-stars {\n    background-color: #174233;\n}\n\n.dallas-stars img, .dallas-stars {\n    background-color: #00704a;\n}\n\n#stats-table .detroit-red-wings {\n    background-color: #640c18;\n}\n\n.detroit-red-wings img, .detroit-red-wings {\n    background-color: #e30524;\n}\n\n#stats-table .edmonton-oilers {\n    background-color: #001131;\n}\n\n.edmonton-oilers img, .edmonton-oilers {\n    background-color: #00205b;\n}\n\n#stats-table .florida-panthers {\n    background-color: #920b21;\n}\n\n.florida-panthers img, .florida-panthers {\n    background-color: #c8102e;\n}\n\n#stats-table .seattle-kraken {\n    background-color: #0a101e;\n}\n\n.seattle-kraken img, .seattle-kraken {\n    background-color: #000f32;\n}\n\n#stats-table .los-angeles-kings {\n    background-color: #5b5b5d;\n}\n\n.los-angeles-kings img, .los-angeles-kings {\n    background-color: #b1b6ba;\n}\n\n#stats-table .minnesota-wild {\n    background-color: #002217;\n}\n\n.minnesota-wild img, .minnesota-wild {\n    background-color: #025736;\n}\n\n#stats-table .montreal-canadiens {\n    background-color: #570d1a;\n}\n\n.montreal-canadiens img, .montreal-canadiens {\n    background-color: #c20828;\n}\n\n#stats-table .nashville-predators {\n    background-color: #71541a;\n}\n\n.nashville-predators img, .nashville-predators {\n    background-color: #fdb623;\n}\n\n#stats-table .new-jersey-devils {\n    background-color: #640c18;\n}\n\n.new-jersey-devils img, .new-jersey-devils {\n    background-color: #e10623;\n}\n\n#stats-table .new-york-islanders {\n    background-color: #0b2643;\n}\n\n.new-york-islanders img, .new-york-islanders {\n    background-color: #00478c;\n}\n\n#stats-table .new-york-rangers {\n    background-color: #183859;\n}\n\n.new-york-rangers img, .new-york-rangers {\n    background-color: #0056a8;\n}\n\n#stats-table .ottawa-senators {\n    background-color: #650c19;\n}\n\n.ottawa-senators img, .ottawa-senators {\n    background-color: #e30526;\n}\n\n#stats-table .philadelphia-flyers {\n    background-color: #6f290b;\n}\n\n.philadelphia-flyers img, .philadelphia-flyers {\n    background-color: #fc4c02;\n}\n\n#stats-table .pittsburgh-penguins {\n    background-color: #1b1b1c;\n}\n\n.pittsburgh-penguins img, .pittsburgh-penguins {\n    background-color: #0e0e0f;\n}\n\n#stats-table .san-jose-sharks {\n    background-color: #0a363d;\n}\n\n.san-jose-sharks img, .san-jose-sharks {\n    background-color: #006d80;\n}\n\n#stats-table .st-louis-blues {\n    background-color: #181a39;\n}\n\n.st-louis-blues img, .st-louis-blues {\n    background-color: #003087;\n}\n\n#stats-table .tampa-bay-lightning {\n    background-color: #0c0e24;\n}\n\n.tampa-bay-lightning img, .tampa-bay-lightning {\n    background-color: #00205b;\n}\n\n#stats-table .toronto-maple-leafs {\n    background-color: #151722;\n}\n\n.toronto-maple-leafs img, .toronto-maple-leafs {\n    background-color: #00205b;\n}\n\n#stats-table .vancouver-canucks {\n    background-color: #091d2e;\n}\n\n.vancouver-canucks img, .vancouver-canucks {\n    background-color: #012d53;\n}\n\n#stats-table .vegas-golden-knights {\n    background-color: #53472d;\n}\n\n.vegas-golden-knights img, .vegas-golden-knights {\n    background-color: #b7975c;\n}\n\n#stats-table .washington-capitals {\n    background-color: #660d1b;\n}\n\n.washington-capitals img, .washington-capitals {\n    background-color: #e30628;\n}\n\n#stats-table .winnipeg-jets {\n    background-color: #091c32;\n}\n\n.winnipeg-jets img, .winnipeg-jets {\n    background-color: #002e63;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAGA;IACI,SAAS;IACT,UAAU;IACV,sBAAsB;AAC1B;;AAEA;IACI,yBAAyB;IACzB,sBAAsB;IACtB,mBAAmB;IACnB,mBAAmB;IACnB,mBAAmB;IACnB,mBAAmB;IACnB,kBAAkB;IAClB,oBAAoB;IACpB,uBAAuB;IACvB,yBAAyB;IACzB,qBAAqB;IACrB,qBAAqB;IACrB,0BAA0B;IAC1B,sBAAsB;IACtB,oBAAoB;AACxB;;AAEA;IACI,eAAe;IACf,uBAAuB;AAC3B;;AAEA;IACI,gCAAgC;IAChC,gBAAgB;IAChB,YAAY;IACZ,uBAAuB;IACvB,gGAAgG;;AAEpG;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA,GAAG,mBAAmB,CAAC;;AAEvB;EACE,sBAAsB;EACtB,gBAAgB;EAChB,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,yBAAyB;EACzB,gBAAgB;EAChB,yBAAyB;AAC3B;;AAEA,IAAI,yBAAyB,CAAC;;AAE9B,IAAI,yBAAyB,CAAC;;AAE9B,IAAI,yBAAyB,CAAC;;AAE9B,IAAI,yBAAyB,CAAC;;AAE9B;IACI;;;;;AAKJ;;AAEA,IAAI,qBAAqB,CAAC;;AAE1B;IACI,qBAAqB;IACrB,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,sBAAsB;IACtB,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,YAAY;IACZ,2BAA2B;AAC/B;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,gBAAgB;IAChB,mBAAmB;AACvB;;AAEA;IACI,yBAAyB;IACzB,gBAAgB;IAChB,yBAAyB;IACzB,mCAAmC;IACnC,kBAAkB;IAClB,YAAY;AAChB;;AAEA;IACI,6BAA6B;IAC7B,2BAA2B;AAC/B;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,SAAS;IACT,aAAa;AACjB;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;;IAEI,qBAAqB;IACrB,cAAc;IACd,yBAAyB;AAC7B;;AAEA;IACI,SAAS;IACT,UAAU;IACV,UAAU;IACV,gBAAgB;AACpB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,iBAAiB;IACjB,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA,8BAA8B;AAC9B;IACI,yBAAyB;AAC7B;;AAEA,mBAAmB;AACnB;IACI,wBAAwB;IACxB,UAAU;AACd;;AAEA,0CAA0C;AAC1C;;IAEI,mBAAmB;AACvB;;AAEA,2CAA2C;AAC3C;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA,2BAA2B;AAC3B;IACI,gCAAgC;AACpC;;AAEA;;IAEI,kBAAkB;AACtB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;;IAEI,gBAAgB;AACpB;;AAEA;IACI,uBAAuB;EACzB;AACF,oBAAoB;AACpB;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Epilogue:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Inter:wght@100;200;300;400;500;600;700;800;900&family=Orbitron:wght@400;500;600;700;800;900&display=swap');\n@import  \"tabulator-tables\";\n\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n:root {\n    --gigantic-text: 4.768rem;\n    --jumbo-text: 3.815rem;\n    --h1-text: 3.052rem;\n    --h2-text: 2.441rem;\n    --h3-text: 1.953rem;\n    --h4-text: 1.563rem;\n    --h5-text: 1.25rem;\n    --small-text: 0.8rem;\n    --smaller-text: 0.64rem;\n    --smallest-text: 0.512rem;\n    --main-color: #c10828;\n    --text-color: #0d0607;\n    --secondary-color: #00b906;\n    --third-color: #b9e937;\n    --red-color: #b90000;\n}\n\nhtml {\n    font-size: 100%;\n    scroll-behavior: smooth;\n}\n\nbody {\n    font-family: 'Inter', sans-serif;\n    font-weight: 400;\n    color: white;\n    background: rgb(13,6,7);\n    background: linear-gradient(90deg, rgba(13,6,7,1) 0%, rgba(193,8,40,1) 50%, rgba(13,6,7,1) 100%);\n\n}\n\na {\n    cursor: pointer;\n}\n\nbutton {\n    cursor: pointer;\n}\n\np {margin-bottom: 1rem;}\n\nh1, h2, h3, h4, h5 {\n  margin: 3rem 0 1.38rem;\n  font-weight: 700;\n  line-height: 1;\n}\n\nh1 {\n  margin-top: 0;\n  font-size: var(--h1-text);\n  font-weight: 700;\n  text-transform: uppercase;\n}\n\nh2 {font-size: var(--h2-text);}\n\nh3 {font-size: var(--h3-text);}\n\nh4 {font-size: var(--h4-text);}\n\nh5 {font-size: var(--h5-text);}\n\n.material-symbols-outlined {\n    font-variation-settings:\n    'FILL' 1,\n    'wght' 300,\n    'GRAD' 200,\n    'opsz' 48\n}\n\nul {list-style-type: none;}\n\na {\n    text-decoration: none;\n    color: inherit;\n}\n\n.header {\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n    align-items: center;\n}\n\n.header__logo {\n    height: auto;\n    width: 150px;\n    margin: 25px;\n}\n\n.divider {\n    position: relative;\n    width: 250px;\n    border-top: 1px solid white;\n}\n\n.header__title {\n    display: flex;\n    justify-content: center;\n    margin-top: 25px;\n    margin-bottom: 25px;\n}\n\n.header__title__text {\n    text-transform: uppercase;\n    font-weight: 900;\n    font-size: var(--h1-text);\n    font-family: 'Epilogue', sans-serif;\n    text-align: center;\n    width: 250px;\n}\n\n.header__stats-section {\n    width: -webkit-fill-available;\n    margin: 15px 25px 15px 25px;\n}\n\n.header__stats-section__list {\n    margin-top: 15px;\n}\n\n.header__stats-section__list__item {\n    display: flex;\n}\n\n.header__stats-section__list__item__logo {\n    width: 50px;\n    height: auto;\n}\n\n.participation {\n    display: flex;\n    gap: 15px;\n    padding: 10px;\n}\n\n.team-logo {\n    width: 40px;\n    height: auto;\n}\n\n.tabulator {\n    border-color: #c5c5c5;\n} \n\n.tabulator .tabulator-header,\n.tabulator .tabulator-header .tabulator-col {\n    border-color: #c5c5c5;\n    color: #dfdfdf;\n    background-color: #1d191a;\n}\n\n#stats-table .tabulator-cell {\n    gap: 15px;\n    padding: 0;\n    color:#fff;\n    font-weight: 500;\n}\n\n#stats-table .tabulator-cell > div {\n    text-transform: uppercase;\n}\n\n#stats-table .tabulator-cell > img {\n    width: auto;\n    height: 100%;\n    padding-left: 5px;\n    padding-right: 5px;\n}\n\n.tabulator-cell > img {\n    width: auto;\n    height: 100%;\n}\n\n/*Theme the Tabulator element*/\n#pick-table {\n    border: 1px solid #c5c5c5;\n}\n\n/*Theme the header*/\n.tabulator-header {\n    background-color:#1d191a;\n    color:#fff;\n}\n\n/*Allow column header names to wrap lines*/\n#pick-table .tabulator-header .tabulator-col,\n#pick-table .tabulator-header .tabulator-col-row-handle {\n    white-space: normal;\n}\n\n/*Color the table rows base on player name*/\n#pick-table .tabulator-table .tabulator-row.a-player {\n    background-color: #ffffff;\n}\n\n#pick-table .tabulator-table .tabulator-row.another-player {\n    background-color: #dbdbdb;\n}\n\n/* Color the border cells */\n.tabulator-row .tabulator-cell {\n    border-bottom: 1px solid #c5c5c5;\n}\n\n#stats-table .tabulator-row .tabulator-cell:last-of-type,\n#stats-table .tabulator-header .tabulator-col:last-of-type {\n    border-right: none;\n}\n\n#stats-table .tabulator-row:last-of-type .tabulator-cell {\n    border-bottom: none;\n}\n\n.tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-right,\n.tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-right {\n    border-left: 1px;\n}\n\n.grayscale-effect {\n    filter: grayscale(100%);\n  }\n/* NHL TEAMS COLOR */\n#stats-table .anaheim-ducks {\n    background-color: #55472d;\n}\n\n.anaheim-ducks img, .anaheim-ducks {\n    background-color: #b6985a;\n}\n\n#stats-table .arizona-coyotes {\n    background-color: #390b18;\n}\n\n.arizona-coyote img, .arizona-coyotes {\n    background-color: #7a0022;\n}\n\n#stats-table .boston-bruins {\n    background-color: #b48518;\n}\n\n.boston-bruins img, .boston-bruins {\n    background-color: #fdb91e;\n}\n\n#stats-table .buffalo-sabres {\n    background-color: #0a1c40;\n}\n\n.buffalo-sabres img, .buffalo-sabres {\n    background-color: #023089;\n}\n\n#stats-table .calgary-flames {\n    background-color: #68111e;\n}\n\n.calgary-flames img, .calgary-flames {\n    background-color: #e30a2b;\n}\n\n#stats-table .carolina-hurricanes {\n    background-color: #8c2626;\n}\n\n.carolina-hurricanes img, .carolina-hurricanes {\n    background-color: #c8102e;\n}\n\n#stats-table .chicago-blackhawks {\n    background-color: #670e1c;\n}\n\n.chicago-blackhawks img, .chicago-blackhawks {\n    background-color: #e30829;\n}\n\n#stats-table .colorado-avalanche {\n    background-color: #2f1214;\n}\n\n.colorado-avalanche img, .colorado-avalanche {\n    background-color: #6f263d;\n}\n\n#stats-table .columbus-blue-jackets {\n    background-color: #091c32;\n}\n\n.columbus-blue-jackets img, .columbus-blue-jackets {\n    background-color: #032d65;\n}\n\n#stats-table .dallas-stars {\n    background-color: #174233;\n}\n\n.dallas-stars img, .dallas-stars {\n    background-color: #00704a;\n}\n\n#stats-table .detroit-red-wings {\n    background-color: #640c18;\n}\n\n.detroit-red-wings img, .detroit-red-wings {\n    background-color: #e30524;\n}\n\n#stats-table .edmonton-oilers {\n    background-color: #001131;\n}\n\n.edmonton-oilers img, .edmonton-oilers {\n    background-color: #00205b;\n}\n\n#stats-table .florida-panthers {\n    background-color: #920b21;\n}\n\n.florida-panthers img, .florida-panthers {\n    background-color: #c8102e;\n}\n\n#stats-table .seattle-kraken {\n    background-color: #0a101e;\n}\n\n.seattle-kraken img, .seattle-kraken {\n    background-color: #000f32;\n}\n\n#stats-table .los-angeles-kings {\n    background-color: #5b5b5d;\n}\n\n.los-angeles-kings img, .los-angeles-kings {\n    background-color: #b1b6ba;\n}\n\n#stats-table .minnesota-wild {\n    background-color: #002217;\n}\n\n.minnesota-wild img, .minnesota-wild {\n    background-color: #025736;\n}\n\n#stats-table .montreal-canadiens {\n    background-color: #570d1a;\n}\n\n.montreal-canadiens img, .montreal-canadiens {\n    background-color: #c20828;\n}\n\n#stats-table .nashville-predators {\n    background-color: #71541a;\n}\n\n.nashville-predators img, .nashville-predators {\n    background-color: #fdb623;\n}\n\n#stats-table .new-jersey-devils {\n    background-color: #640c18;\n}\n\n.new-jersey-devils img, .new-jersey-devils {\n    background-color: #e10623;\n}\n\n#stats-table .new-york-islanders {\n    background-color: #0b2643;\n}\n\n.new-york-islanders img, .new-york-islanders {\n    background-color: #00478c;\n}\n\n#stats-table .new-york-rangers {\n    background-color: #183859;\n}\n\n.new-york-rangers img, .new-york-rangers {\n    background-color: #0056a8;\n}\n\n#stats-table .ottawa-senators {\n    background-color: #650c19;\n}\n\n.ottawa-senators img, .ottawa-senators {\n    background-color: #e30526;\n}\n\n#stats-table .philadelphia-flyers {\n    background-color: #6f290b;\n}\n\n.philadelphia-flyers img, .philadelphia-flyers {\n    background-color: #fc4c02;\n}\n\n#stats-table .pittsburgh-penguins {\n    background-color: #1b1b1c;\n}\n\n.pittsburgh-penguins img, .pittsburgh-penguins {\n    background-color: #0e0e0f;\n}\n\n#stats-table .san-jose-sharks {\n    background-color: #0a363d;\n}\n\n.san-jose-sharks img, .san-jose-sharks {\n    background-color: #006d80;\n}\n\n#stats-table .st-louis-blues {\n    background-color: #181a39;\n}\n\n.st-louis-blues img, .st-louis-blues {\n    background-color: #003087;\n}\n\n#stats-table .tampa-bay-lightning {\n    background-color: #0c0e24;\n}\n\n.tampa-bay-lightning img, .tampa-bay-lightning {\n    background-color: #00205b;\n}\n\n#stats-table .toronto-maple-leafs {\n    background-color: #151722;\n}\n\n.toronto-maple-leafs img, .toronto-maple-leafs {\n    background-color: #00205b;\n}\n\n#stats-table .vancouver-canucks {\n    background-color: #091d2e;\n}\n\n.vancouver-canucks img, .vancouver-canucks {\n    background-color: #012d53;\n}\n\n#stats-table .vegas-golden-knights {\n    background-color: #53472d;\n}\n\n.vegas-golden-knights img, .vegas-golden-knights {\n    background-color: #b7975c;\n}\n\n#stats-table .washington-capitals {\n    background-color: #660d1b;\n}\n\n.washington-capitals img, .washington-capitals {\n    background-color: #e30628;\n}\n\n#stats-table .winnipeg-jets {\n    background-color: #091c32;\n}\n\n.winnipeg-jets img, .winnipeg-jets {\n    background-color: #002e63;\n}"],sourceRoot:""}]);const u=s},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i="",n=void 0!==e[5];return e[4]&&(i+="@supports (".concat(e[4],") {")),e[2]&&(i+="@media ".concat(e[2]," {")),n&&(i+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),i+=t(e),n&&(i+="}"),e[2]&&(i+="}"),e[4]&&(i+="}"),i})).join("")},e.i=function(t,i,n,o,r){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(n)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(a[s]=!0)}for(var u=0;u<t.length;u++){var h=[].concat(t[u]);n&&a[h[0]]||(void 0!==r&&(void 0===h[5]||(h[1]="@layer".concat(h[5].length>0?" ".concat(h[5]):""," {").concat(h[1],"}")),h[5]=r),i&&(h[2]?(h[1]="@media ".concat(h[2]," {").concat(h[1],"}"),h[2]=i):h[2]=i),o&&(h[4]?(h[1]="@supports (".concat(h[4],") {").concat(h[1],"}"),h[4]=o):h[4]="".concat(o)),e.push(h))}},e}},537:t=>{"use strict";t.exports=function(t){var e=t[1],i=t[3];if(!i)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),r="/*# ".concat(o," */");return[e].concat([r]).join("\n")}return[e].join("\n")}},534:t=>{t.exports=[["boston bruins","0","Boston Bruins"],["los angeles kings","0","Los Angeles Kings"],["vancouver canucks","0","Vancouver Canucks"],["colorado avalanche","0","Colorado Avalanche"],["new york islanders","0","New York Islanders"],["ottawa senators","0","Ottawa Senators"],["tampa bay lightning","0","Tampa Bay Lightning"],["detroit red wings","0","Detroit Red Wings"],["pittsburgh penguins","0","Pittsburgh Penguins"],["buffalo sabres","0","Buffalo Sabres"],["dallas stars","0","Dallas Stars"],["carolina hurricanes","0","Carolina Hurricanes"],["columbus blue jackets","0","Columbus Blue Jackets"],["edmonton oilers","0","Edmonton Oilers"],["new jersey devils","0","New Jersey Devils"],["florida panthers","0","Florida Panthers"],["montreal canadiens","0","Montreal Canadiens"],["new york rangers","0","New York Rangers"],["philadelphia flyers","0","Philadelphia Flyers"],["toronto maple leafs","0","Toronto Maple Leafs"],["washington capitals","0","Washington Capitals"],["arizona coyotes","0","Arizona Coyotes"],["anaheim ducks","0","Anaheim Ducks"],["chicago blackhawks","0","Chicago Blackhawks"],["calgary flames","0","Calgary Flames"],["st. louis blues","0","St.Louis Blues"],["minnesota wild","0","Minnesota Wild"],["san jose sharks","0","San Jose Sharks"],["nashville predators","0","Nashville Predators"],["seattle kraken","0","Seattle Kraken"],["winnipeg jets","0","Winnipeg Jets"],["vegas golden knights","0","Vegas Golden Knights"]]},209:t=>{t.exports=[["win","#","Joueurs","Samedi 11 novembre","Samedi 18 novembre","Samedi 25 novembre","Samedi 2 décembre","Samedi 9 décembre","Samedi 16 décembre"],["1","","Charles-Antoine Messier","Detroit Red Wings","Boston Bruins","Los Angeles Kings","","",""],["1","","Francois Tremblay","Detroit Red Wings","Washington Capitals","Colorado Avalanche","","",""],["1","","Louis- Alexandre Belisle Roy","Detroit Red Wings","Boston Bruins","Los Angeles Kings","","",""],["1","","Mathieu Lacombe","Pittsburgh Penguins","Washington Capitals","Los Angeles Kings","","",""],["1","","Philippe Reid","Ottawa Senators","Boston Bruins","Los Angeles Kings","","",""],["1","","Vincent Ménard","Arizona Coyotes","Washington Capitals","Colorado Avalanche","","",""],["1","","Vincent Meslage","Ottawa Senators","Washington Capitals","Los Angeles Kings","","",""],["0","","Charles Jutras","Ottawa Senators","Boston Bruins","Vegas Golden Knights","","",""],["0","","Maxime Loranger","Detroit Red Wings","Boston Bruins","Vancouver Canucks","","",""],["0","","Olivier Tremblay","Dallas Stars","Washington Capitals","Vancouver Canucks","","",""],["0","","Patrick Loranger","Pittsburgh Penguins","Boston Bruins","Vegas Golden Knights","","",""],["0","","Philippe Jutras","Ottawa Senators","Boston Bruins","Vegas Golden Knights","","",""],["0","","Sebastien Meslage","Pittsburgh Penguins","Boston Bruins","Vancouver Canucks","","",""],["0","","Véronique Bilodeau","Pittsburgh Penguins","Boston Bruins","Vegas Golden Knights","","",""],["0","","Véronique Bilodeau","Detroit Red Wings","Washington Capitals","Vancouver Canucks","","",""],["0","","Jonathan Crabey","Detroit Red Wings","Vancouver Canucks","","","",""],["0","","Jonathan Perreault","Pittsburgh Penguins","Vegas Golden Knights","","","",""],["0","","Jonathan Perreault","Ottawa Senators","Vancouver Canucks","","","",""],["0","","Mathieu Blanchette","Ottawa Senators","Vegas Golden Knights","","","",""],["0","","Mathieu Lacombe","Detroit Red Wings","Vegas Golden Knights","","","",""],["0","","Maxim Daaneau","Dallas Stars","Vegas Golden Knights","","","",""],["0","","Patrick Loranger","Edmonton Oilers","Vegas Golden Knights","","","",""],["0","","Sebastien Meslage","Detroit Red Wings","Vancouver Canucks","","","",""],["0","","Simon Hébert","Pittsburgh Penguins","Vegas Golden Knights","","","",""],["0","","Vincent Ménard","Dallas Stars","Vegas Golden Knights","","","",""],["0","","Vincent Ménard","Ottawa Senators","Vegas Golden Knights","","","",""],["0","","Vincent Ménard","Pittsburgh Penguins","Vancouver Canucks","","","",""],["0","","Albert Dalpé-Messier","Boston Bruins","","","","",""],["0","","Albert Dalpé-Messier","Boston Bruins","","","","",""],["0","","Albert Dalpé-Messier","Los Angeles Kings","","","","",""],["0","","Albert Dalpé-Messier","Los Angeles Kings","","","","",""],["0","","Albert Dalpé-Messier","Vancouver Canucks","","","","",""],["0","","Bernard-Olivier Giguere","Colorado Avalanche","","","","",""],["0","","Bernard-Olivier Giguere","Los Angeles Kings","","","","",""],["0","","Bernard-Olivier Giguere","Boston Bruins","","","","",""],["0","","Bruno Marquette","New York Islanders","","","","",""],["0","","Bruno Marquette","Los Angeles Kings","","","","",""],["0","","Bruno Marquette","Colorado Avalanche","","","","",""],["0","","Cedric Deniverville","Los Angeles Kings","","","","",""],["0","","Cedric Deniverville","Los Angeles Kings","","","","",""],["0","","Cedric Deniverville","Boston Bruins","","","","",""],["0","","Cedric Deniverville","Boston Bruins","","","","",""],["0","","Cedric Deniverville","New York Islanders","","","","",""],["0","","Charles Jutras","Los Angeles Kings","","","","",""],["0","","Charles Jutras","Los Angeles Kings","","","","",""],["0","","Charles Jutras","New York Islanders","","","","",""],["0","","Charles Jutras","Colorado Avalanche","","","","",""],["0","","Charles-Antoine Messier","Tampa Bay Lightning","","","","",""],["0","","Charles-Antoine Messier","Colorado Avalanche","","","","",""],["0","","Charles-Antoine Messier","Los Angeles Kings","","","","",""],["0","","Charles-Antoine Messier","Los Angeles Kings","","","","",""],["0","","Claude-Olivier Perreault","Colorado Avalanche","","","","",""],["0","","Claude-Olivier Perreault","Los Angeles Kings","","","","",""],["0","","Francis Dubois","Colorado Avalanche","","","","",""],["0","","Francis Dubois","Boston Bruins","","","","",""],["0","","Francois Gatien","Los Angeles Kings","","","","",""],["0","","Francois Gatien","Los Angeles Kings","","","","",""],["0","","Francois Gatien","Boston Bruins","","","","",""],["0","","Francois Tremblay","New York Islanders","","","","",""],["0","","Francois Tremblay","Los Angeles Kings","","","","",""],["0","","Jonathan Crabey","Boston Bruins","","","","",""],["0","","Jonathan Crabey","Los Angeles Kings","","","","",""],["0","","Justin Lafrance","Colorado Avalanche","","","","",""],["0","","Justin Lafrance","Los Angeles Kings","","","","",""],["0","","Jonathan Perreault","New York Islanders","","","","",""],["0","","Jonathan Perreault","Los Angeles Kings","","","","",""],["0","","Jonathan Perreault","Los Angeles Kings","","","","",""],["0","","Jonathan Richard","Boston Bruins","","","","",""],["0","","Jonathan Richard","Los Angeles Kings","","","","",""],["0","","Loic Blanchette","Boston Bruins","","","","",""],["0","","Louis- Alexandre Belisle Roy","Boston Bruins","","","","",""],["0","","Louis- Alexandre Belisle Roy","Los Angeles Kings","","","","",""],["0","","Mathieu Blanchette","Los Angeles Kings","","","","",""],["0","","Mathieu Lacombe","Boston Bruins","","","","",""],["0","","Mathieu Lacombe","Colorado Avalanche","","","","",""],["0","","Mathieu Lacombe","Los Angeles Kings","","","","",""],["0","","Mathieu Lefebvre","Los Angeles Kings","","","","",""],["0","","Mathieu Lefebvre","Los Angeles Kings","","","","",""],["0","","Mathieu Lefebvre","New York Islanders","","","","",""],["0","","Mathieu Lefebvre","Buffalo Sabres","","","","",""],["0","","Matthieu Auger","Los Angeles Kings","","","","",""],["0","","Matthieu Auger","Los Angeles Kings","","","","",""],["0","","Matthieu Auger","Colorado Avalanche","","","","",""],["0","","Maxime Loranger","Colorado Avalanche","","","","",""],["0","","Maxime Loranger","Colorado Avalanche","","","","",""],["0","","Maxime Loranger","Los Angeles Kings","","","","",""],["0","","Maxime Loranger","Los Angeles Kings","","","","",""],["0","","Olivier Tremblay","Los Angeles Kings","","","","",""],["0","","Patrick Loranger","New York Islanders","","","","",""],["0","","Patrick Loranger","Boston Bruins","","","","",""],["0","","Patrick Loranger","Los Angeles Kings","","","","",""],["0","","Philippe Jutras","Boston Bruins","","","","",""],["0","","Philippe Jutras","Colorado Avalanche","","","","",""],["0","","Philippe Jutras","Los Angeles Kings","","","","",""],["0","","Philippe Jutras","Boston Bruins","","","","",""],["0","","Philippe Reid","New York Islanders","","","","",""],["0","","Philippe Reid","Los Angeles Kings","","","","",""],["0","","Roxane Pronovost","Colorado Avalanche","","","","",""],["0","","Sebastien Meslage","Boston Bruins","","","","",""],["0","","Simon Hébert","Colorado Avalanche","","","","",""],["0","","Vincent Décarie","Boston Bruins","","","","",""],["0","","Vincent Décarie","Los Angeles Kings","","","","",""],["0","","Vincent Meslage","Los Angeles Kings","","","","",""],["0","","Vincent Meslage","New York Islanders","","","","",""]]},486:function(t,e,i){var n;t=i.nmd(t),function(){var o,r="Expected a function",a="__lodash_hash_undefined__",l="__lodash_placeholder__",s=32,u=128,h=1/0,c=9007199254740991,d=NaN,p=4294967295,b=[["ary",u],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",s],["partialRight",64],["rearg",256]],m="[object Arguments]",g="[object Array]",f="[object Boolean]",A="[object Date]",v="[object Error]",w="[object Function]",C="[object GeneratorFunction]",E="[object Map]",y="[object Number]",x="[object Object]",B="[object Promise]",k="[object RegExp]",R="[object Set]",T="[object String]",_="[object Symbol]",M="[object WeakMap]",z="[object ArrayBuffer]",L="[object DataView]",S="[object Float32Array]",D="[object Float64Array]",P="[object Int8Array]",F="[object Int16Array]",I="[object Int32Array]",H="[object Uint8Array]",O="[object Uint8ClampedArray]",W="[object Uint16Array]",j="[object Uint32Array]",V=/\b__p \+= '';/g,N=/\b(__p \+=) '' \+/g,G=/(__e\(.*?\)|\b__t\)) \+\n'';/g,U=/&(?:amp|lt|gt|quot|#39);/g,q=/[&<>"']/g,X=RegExp(U.source),Y=RegExp(q.source),K=/<%-([\s\S]+?)%>/g,J=/<%([\s\S]+?)%>/g,Z=/<%=([\s\S]+?)%>/g,$=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Q=/^\w*$/,tt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,et=/[\\^$.*+?()[\]{}|]/g,it=RegExp(et.source),nt=/^\s+/,ot=/\s/,rt=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,at=/\{\n\/\* \[wrapped with (.+)\] \*/,lt=/,? & /,st=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,ut=/[()=,{}\[\]\/\s]/,ht=/\\(\\)?/g,ct=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,dt=/\w*$/,pt=/^[-+]0x[0-9a-f]+$/i,bt=/^0b[01]+$/i,mt=/^\[object .+?Constructor\]$/,gt=/^0o[0-7]+$/i,ft=/^(?:0|[1-9]\d*)$/,At=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,vt=/($^)/,wt=/['\n\r\u2028\u2029\\]/g,Ct="\\ud800-\\udfff",Et="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",yt="\\u2700-\\u27bf",xt="a-z\\xdf-\\xf6\\xf8-\\xff",Bt="A-Z\\xc0-\\xd6\\xd8-\\xde",kt="\\ufe0e\\ufe0f",Rt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",Tt="["+Ct+"]",_t="["+Rt+"]",Mt="["+Et+"]",zt="\\d+",Lt="["+yt+"]",St="["+xt+"]",Dt="[^"+Ct+Rt+zt+yt+xt+Bt+"]",Pt="\\ud83c[\\udffb-\\udfff]",Ft="[^"+Ct+"]",It="(?:\\ud83c[\\udde6-\\uddff]){2}",Ht="[\\ud800-\\udbff][\\udc00-\\udfff]",Ot="["+Bt+"]",Wt="\\u200d",jt="(?:"+St+"|"+Dt+")",Vt="(?:"+Ot+"|"+Dt+")",Nt="(?:['’](?:d|ll|m|re|s|t|ve))?",Gt="(?:['’](?:D|LL|M|RE|S|T|VE))?",Ut="(?:"+Mt+"|"+Pt+")?",qt="["+kt+"]?",Xt=qt+Ut+"(?:"+Wt+"(?:"+[Ft,It,Ht].join("|")+")"+qt+Ut+")*",Yt="(?:"+[Lt,It,Ht].join("|")+")"+Xt,Kt="(?:"+[Ft+Mt+"?",Mt,It,Ht,Tt].join("|")+")",Jt=RegExp("['’]","g"),Zt=RegExp(Mt,"g"),$t=RegExp(Pt+"(?="+Pt+")|"+Kt+Xt,"g"),Qt=RegExp([Ot+"?"+St+"+"+Nt+"(?="+[_t,Ot,"$"].join("|")+")",Vt+"+"+Gt+"(?="+[_t,Ot+jt,"$"].join("|")+")",Ot+"?"+jt+"+"+Nt,Ot+"+"+Gt,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",zt,Yt].join("|"),"g"),te=RegExp("["+Wt+Ct+Et+kt+"]"),ee=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,ie=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],ne=-1,oe={};oe[S]=oe[D]=oe[P]=oe[F]=oe[I]=oe[H]=oe[O]=oe[W]=oe[j]=!0,oe[m]=oe[g]=oe[z]=oe[f]=oe[L]=oe[A]=oe[v]=oe[w]=oe[E]=oe[y]=oe[x]=oe[k]=oe[R]=oe[T]=oe[M]=!1;var re={};re[m]=re[g]=re[z]=re[L]=re[f]=re[A]=re[S]=re[D]=re[P]=re[F]=re[I]=re[E]=re[y]=re[x]=re[k]=re[R]=re[T]=re[_]=re[H]=re[O]=re[W]=re[j]=!0,re[v]=re[w]=re[M]=!1;var ae={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},le=parseFloat,se=parseInt,ue="object"==typeof i.g&&i.g&&i.g.Object===Object&&i.g,he="object"==typeof self&&self&&self.Object===Object&&self,ce=ue||he||Function("return this")(),de=e&&!e.nodeType&&e,pe=de&&t&&!t.nodeType&&t,be=pe&&pe.exports===de,me=be&&ue.process,ge=function(){try{return pe&&pe.require&&pe.require("util").types||me&&me.binding&&me.binding("util")}catch(t){}}(),fe=ge&&ge.isArrayBuffer,Ae=ge&&ge.isDate,ve=ge&&ge.isMap,we=ge&&ge.isRegExp,Ce=ge&&ge.isSet,Ee=ge&&ge.isTypedArray;function ye(t,e,i){switch(i.length){case 0:return t.call(e);case 1:return t.call(e,i[0]);case 2:return t.call(e,i[0],i[1]);case 3:return t.call(e,i[0],i[1],i[2])}return t.apply(e,i)}function xe(t,e,i,n){for(var o=-1,r=null==t?0:t.length;++o<r;){var a=t[o];e(n,a,i(a),t)}return n}function Be(t,e){for(var i=-1,n=null==t?0:t.length;++i<n&&!1!==e(t[i],i,t););return t}function ke(t,e){for(var i=null==t?0:t.length;i--&&!1!==e(t[i],i,t););return t}function Re(t,e){for(var i=-1,n=null==t?0:t.length;++i<n;)if(!e(t[i],i,t))return!1;return!0}function Te(t,e){for(var i=-1,n=null==t?0:t.length,o=0,r=[];++i<n;){var a=t[i];e(a,i,t)&&(r[o++]=a)}return r}function _e(t,e){return!(null==t||!t.length)&&Oe(t,e,0)>-1}function Me(t,e,i){for(var n=-1,o=null==t?0:t.length;++n<o;)if(i(e,t[n]))return!0;return!1}function ze(t,e){for(var i=-1,n=null==t?0:t.length,o=Array(n);++i<n;)o[i]=e(t[i],i,t);return o}function Le(t,e){for(var i=-1,n=e.length,o=t.length;++i<n;)t[o+i]=e[i];return t}function Se(t,e,i,n){var o=-1,r=null==t?0:t.length;for(n&&r&&(i=t[++o]);++o<r;)i=e(i,t[o],o,t);return i}function De(t,e,i,n){var o=null==t?0:t.length;for(n&&o&&(i=t[--o]);o--;)i=e(i,t[o],o,t);return i}function Pe(t,e){for(var i=-1,n=null==t?0:t.length;++i<n;)if(e(t[i],i,t))return!0;return!1}var Fe=Ne("length");function Ie(t,e,i){var n;return i(t,(function(t,i,o){if(e(t,i,o))return n=i,!1})),n}function He(t,e,i,n){for(var o=t.length,r=i+(n?1:-1);n?r--:++r<o;)if(e(t[r],r,t))return r;return-1}function Oe(t,e,i){return e==e?function(t,e,i){for(var n=i-1,o=t.length;++n<o;)if(t[n]===e)return n;return-1}(t,e,i):He(t,je,i)}function We(t,e,i,n){for(var o=i-1,r=t.length;++o<r;)if(n(t[o],e))return o;return-1}function je(t){return t!=t}function Ve(t,e){var i=null==t?0:t.length;return i?qe(t,e)/i:d}function Ne(t){return function(e){return null==e?o:e[t]}}function Ge(t){return function(e){return null==t?o:t[e]}}function Ue(t,e,i,n,o){return o(t,(function(t,o,r){i=n?(n=!1,t):e(i,t,o,r)})),i}function qe(t,e){for(var i,n=-1,r=t.length;++n<r;){var a=e(t[n]);a!==o&&(i=i===o?a:i+a)}return i}function Xe(t,e){for(var i=-1,n=Array(t);++i<t;)n[i]=e(i);return n}function Ye(t){return t?t.slice(0,ci(t)+1).replace(nt,""):t}function Ke(t){return function(e){return t(e)}}function Je(t,e){return ze(e,(function(e){return t[e]}))}function Ze(t,e){return t.has(e)}function $e(t,e){for(var i=-1,n=t.length;++i<n&&Oe(e,t[i],0)>-1;);return i}function Qe(t,e){for(var i=t.length;i--&&Oe(e,t[i],0)>-1;);return i}var ti=Ge({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),ei=Ge({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function ii(t){return"\\"+ae[t]}function ni(t){return te.test(t)}function oi(t){var e=-1,i=Array(t.size);return t.forEach((function(t,n){i[++e]=[n,t]})),i}function ri(t,e){return function(i){return t(e(i))}}function ai(t,e){for(var i=-1,n=t.length,o=0,r=[];++i<n;){var a=t[i];a!==e&&a!==l||(t[i]=l,r[o++]=i)}return r}function li(t){var e=-1,i=Array(t.size);return t.forEach((function(t){i[++e]=t})),i}function si(t){var e=-1,i=Array(t.size);return t.forEach((function(t){i[++e]=[t,t]})),i}function ui(t){return ni(t)?function(t){for(var e=$t.lastIndex=0;$t.test(t);)++e;return e}(t):Fe(t)}function hi(t){return ni(t)?function(t){return t.match($t)||[]}(t):function(t){return t.split("")}(t)}function ci(t){for(var e=t.length;e--&&ot.test(t.charAt(e)););return e}var di=Ge({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),pi=function t(e){var i,n=(e=null==e?ce:pi.defaults(ce.Object(),e,pi.pick(ce,ie))).Array,ot=e.Date,Ct=e.Error,Et=e.Function,yt=e.Math,xt=e.Object,Bt=e.RegExp,kt=e.String,Rt=e.TypeError,Tt=n.prototype,_t=Et.prototype,Mt=xt.prototype,zt=e["__core-js_shared__"],Lt=_t.toString,St=Mt.hasOwnProperty,Dt=0,Pt=(i=/[^.]+$/.exec(zt&&zt.keys&&zt.keys.IE_PROTO||""))?"Symbol(src)_1."+i:"",Ft=Mt.toString,It=Lt.call(xt),Ht=ce._,Ot=Bt("^"+Lt.call(St).replace(et,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Wt=be?e.Buffer:o,jt=e.Symbol,Vt=e.Uint8Array,Nt=Wt?Wt.allocUnsafe:o,Gt=ri(xt.getPrototypeOf,xt),Ut=xt.create,qt=Mt.propertyIsEnumerable,Xt=Tt.splice,Yt=jt?jt.isConcatSpreadable:o,Kt=jt?jt.iterator:o,$t=jt?jt.toStringTag:o,te=function(){try{var t=ur(xt,"defineProperty");return t({},"",{}),t}catch(t){}}(),ae=e.clearTimeout!==ce.clearTimeout&&e.clearTimeout,ue=ot&&ot.now!==ce.Date.now&&ot.now,he=e.setTimeout!==ce.setTimeout&&e.setTimeout,de=yt.ceil,pe=yt.floor,me=xt.getOwnPropertySymbols,ge=Wt?Wt.isBuffer:o,Fe=e.isFinite,Ge=Tt.join,bi=ri(xt.keys,xt),mi=yt.max,gi=yt.min,fi=ot.now,Ai=e.parseInt,vi=yt.random,wi=Tt.reverse,Ci=ur(e,"DataView"),Ei=ur(e,"Map"),yi=ur(e,"Promise"),xi=ur(e,"Set"),Bi=ur(e,"WeakMap"),ki=ur(xt,"create"),Ri=Bi&&new Bi,Ti={},_i=Ir(Ci),Mi=Ir(Ei),zi=Ir(yi),Li=Ir(xi),Si=Ir(Bi),Di=jt?jt.prototype:o,Pi=Di?Di.valueOf:o,Fi=Di?Di.toString:o;function Ii(t){if(tl(t)&&!Na(t)&&!(t instanceof ji)){if(t instanceof Wi)return t;if(St.call(t,"__wrapped__"))return Hr(t)}return new Wi(t)}var Hi=function(){function t(){}return function(e){if(!Qa(e))return{};if(Ut)return Ut(e);t.prototype=e;var i=new t;return t.prototype=o,i}}();function Oi(){}function Wi(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=o}function ji(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=p,this.__views__=[]}function Vi(t){var e=-1,i=null==t?0:t.length;for(this.clear();++e<i;){var n=t[e];this.set(n[0],n[1])}}function Ni(t){var e=-1,i=null==t?0:t.length;for(this.clear();++e<i;){var n=t[e];this.set(n[0],n[1])}}function Gi(t){var e=-1,i=null==t?0:t.length;for(this.clear();++e<i;){var n=t[e];this.set(n[0],n[1])}}function Ui(t){var e=-1,i=null==t?0:t.length;for(this.__data__=new Gi;++e<i;)this.add(t[e])}function qi(t){var e=this.__data__=new Ni(t);this.size=e.size}function Xi(t,e){var i=Na(t),n=!i&&Va(t),o=!i&&!n&&Xa(t),r=!i&&!n&&!o&&sl(t),a=i||n||o||r,l=a?Xe(t.length,kt):[],s=l.length;for(var u in t)!e&&!St.call(t,u)||a&&("length"==u||o&&("offset"==u||"parent"==u)||r&&("buffer"==u||"byteLength"==u||"byteOffset"==u)||gr(u,s))||l.push(u);return l}function Yi(t){var e=t.length;return e?t[Un(0,e-1)]:o}function Ki(t,e){return Lr(Ro(t),rn(e,0,t.length))}function Ji(t){return Lr(Ro(t))}function Zi(t,e,i){(i!==o&&!Oa(t[e],i)||i===o&&!(e in t))&&nn(t,e,i)}function $i(t,e,i){var n=t[e];St.call(t,e)&&Oa(n,i)&&(i!==o||e in t)||nn(t,e,i)}function Qi(t,e){for(var i=t.length;i--;)if(Oa(t[i][0],e))return i;return-1}function tn(t,e,i,n){return hn(t,(function(t,o,r){e(n,t,i(t),r)})),n}function en(t,e){return t&&To(e,Ml(e),t)}function nn(t,e,i){"__proto__"==e&&te?te(t,e,{configurable:!0,enumerable:!0,value:i,writable:!0}):t[e]=i}function on(t,e){for(var i=-1,r=e.length,a=n(r),l=null==t;++i<r;)a[i]=l?o:Bl(t,e[i]);return a}function rn(t,e,i){return t==t&&(i!==o&&(t=t<=i?t:i),e!==o&&(t=t>=e?t:e)),t}function an(t,e,i,n,r,a){var l,s=1&e,u=2&e,h=4&e;if(i&&(l=r?i(t,n,r,a):i(t)),l!==o)return l;if(!Qa(t))return t;var c=Na(t);if(c){if(l=function(t){var e=t.length,i=new t.constructor(e);return e&&"string"==typeof t[0]&&St.call(t,"index")&&(i.index=t.index,i.input=t.input),i}(t),!s)return Ro(t,l)}else{var d=dr(t),p=d==w||d==C;if(Xa(t))return Co(t,s);if(d==x||d==m||p&&!r){if(l=u||p?{}:br(t),!s)return u?function(t,e){return To(t,cr(t),e)}(t,function(t,e){return t&&To(e,zl(e),t)}(l,t)):function(t,e){return To(t,hr(t),e)}(t,en(l,t))}else{if(!re[d])return r?t:{};l=function(t,e,i){var n,o=t.constructor;switch(e){case z:return Eo(t);case f:case A:return new o(+t);case L:return function(t,e){var i=e?Eo(t.buffer):t.buffer;return new t.constructor(i,t.byteOffset,t.byteLength)}(t,i);case S:case D:case P:case F:case I:case H:case O:case W:case j:return yo(t,i);case E:return new o;case y:case T:return new o(t);case k:return function(t){var e=new t.constructor(t.source,dt.exec(t));return e.lastIndex=t.lastIndex,e}(t);case R:return new o;case _:return n=t,Pi?xt(Pi.call(n)):{}}}(t,d,s)}}a||(a=new qi);var b=a.get(t);if(b)return b;a.set(t,l),rl(t)?t.forEach((function(n){l.add(an(n,e,i,n,t,a))})):el(t)&&t.forEach((function(n,o){l.set(o,an(n,e,i,o,t,a))}));var g=c?o:(h?u?ir:er:u?zl:Ml)(t);return Be(g||t,(function(n,o){g&&(n=t[o=n]),$i(l,o,an(n,e,i,o,t,a))})),l}function ln(t,e,i){var n=i.length;if(null==t)return!n;for(t=xt(t);n--;){var r=i[n],a=e[r],l=t[r];if(l===o&&!(r in t)||!a(l))return!1}return!0}function sn(t,e,i){if("function"!=typeof t)throw new Rt(r);return Tr((function(){t.apply(o,i)}),e)}function un(t,e,i,n){var o=-1,r=_e,a=!0,l=t.length,s=[],u=e.length;if(!l)return s;i&&(e=ze(e,Ke(i))),n?(r=Me,a=!1):e.length>=200&&(r=Ze,a=!1,e=new Ui(e));t:for(;++o<l;){var h=t[o],c=null==i?h:i(h);if(h=n||0!==h?h:0,a&&c==c){for(var d=u;d--;)if(e[d]===c)continue t;s.push(h)}else r(e,c,n)||s.push(h)}return s}Ii.templateSettings={escape:K,evaluate:J,interpolate:Z,variable:"",imports:{_:Ii}},Ii.prototype=Oi.prototype,Ii.prototype.constructor=Ii,Wi.prototype=Hi(Oi.prototype),Wi.prototype.constructor=Wi,ji.prototype=Hi(Oi.prototype),ji.prototype.constructor=ji,Vi.prototype.clear=function(){this.__data__=ki?ki(null):{},this.size=0},Vi.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},Vi.prototype.get=function(t){var e=this.__data__;if(ki){var i=e[t];return i===a?o:i}return St.call(e,t)?e[t]:o},Vi.prototype.has=function(t){var e=this.__data__;return ki?e[t]!==o:St.call(e,t)},Vi.prototype.set=function(t,e){var i=this.__data__;return this.size+=this.has(t)?0:1,i[t]=ki&&e===o?a:e,this},Ni.prototype.clear=function(){this.__data__=[],this.size=0},Ni.prototype.delete=function(t){var e=this.__data__,i=Qi(e,t);return!(i<0||(i==e.length-1?e.pop():Xt.call(e,i,1),--this.size,0))},Ni.prototype.get=function(t){var e=this.__data__,i=Qi(e,t);return i<0?o:e[i][1]},Ni.prototype.has=function(t){return Qi(this.__data__,t)>-1},Ni.prototype.set=function(t,e){var i=this.__data__,n=Qi(i,t);return n<0?(++this.size,i.push([t,e])):i[n][1]=e,this},Gi.prototype.clear=function(){this.size=0,this.__data__={hash:new Vi,map:new(Ei||Ni),string:new Vi}},Gi.prototype.delete=function(t){var e=lr(this,t).delete(t);return this.size-=e?1:0,e},Gi.prototype.get=function(t){return lr(this,t).get(t)},Gi.prototype.has=function(t){return lr(this,t).has(t)},Gi.prototype.set=function(t,e){var i=lr(this,t),n=i.size;return i.set(t,e),this.size+=i.size==n?0:1,this},Ui.prototype.add=Ui.prototype.push=function(t){return this.__data__.set(t,a),this},Ui.prototype.has=function(t){return this.__data__.has(t)},qi.prototype.clear=function(){this.__data__=new Ni,this.size=0},qi.prototype.delete=function(t){var e=this.__data__,i=e.delete(t);return this.size=e.size,i},qi.prototype.get=function(t){return this.__data__.get(t)},qi.prototype.has=function(t){return this.__data__.has(t)},qi.prototype.set=function(t,e){var i=this.__data__;if(i instanceof Ni){var n=i.__data__;if(!Ei||n.length<199)return n.push([t,e]),this.size=++i.size,this;i=this.__data__=new Gi(n)}return i.set(t,e),this.size=i.size,this};var hn=zo(An),cn=zo(vn,!0);function dn(t,e){var i=!0;return hn(t,(function(t,n,o){return i=!!e(t,n,o)})),i}function pn(t,e,i){for(var n=-1,r=t.length;++n<r;){var a=t[n],l=e(a);if(null!=l&&(s===o?l==l&&!ll(l):i(l,s)))var s=l,u=a}return u}function bn(t,e){var i=[];return hn(t,(function(t,n,o){e(t,n,o)&&i.push(t)})),i}function mn(t,e,i,n,o){var r=-1,a=t.length;for(i||(i=mr),o||(o=[]);++r<a;){var l=t[r];e>0&&i(l)?e>1?mn(l,e-1,i,n,o):Le(o,l):n||(o[o.length]=l)}return o}var gn=Lo(),fn=Lo(!0);function An(t,e){return t&&gn(t,e,Ml)}function vn(t,e){return t&&fn(t,e,Ml)}function wn(t,e){return Te(e,(function(e){return Ja(t[e])}))}function Cn(t,e){for(var i=0,n=(e=fo(e,t)).length;null!=t&&i<n;)t=t[Fr(e[i++])];return i&&i==n?t:o}function En(t,e,i){var n=e(t);return Na(t)?n:Le(n,i(t))}function yn(t){return null==t?t===o?"[object Undefined]":"[object Null]":$t&&$t in xt(t)?function(t){var e=St.call(t,$t),i=t[$t];try{t[$t]=o;var n=!0}catch(t){}var r=Ft.call(t);return n&&(e?t[$t]=i:delete t[$t]),r}(t):function(t){return Ft.call(t)}(t)}function xn(t,e){return t>e}function Bn(t,e){return null!=t&&St.call(t,e)}function kn(t,e){return null!=t&&e in xt(t)}function Rn(t,e,i){for(var r=i?Me:_e,a=t[0].length,l=t.length,s=l,u=n(l),h=1/0,c=[];s--;){var d=t[s];s&&e&&(d=ze(d,Ke(e))),h=gi(d.length,h),u[s]=!i&&(e||a>=120&&d.length>=120)?new Ui(s&&d):o}d=t[0];var p=-1,b=u[0];t:for(;++p<a&&c.length<h;){var m=d[p],g=e?e(m):m;if(m=i||0!==m?m:0,!(b?Ze(b,g):r(c,g,i))){for(s=l;--s;){var f=u[s];if(!(f?Ze(f,g):r(t[s],g,i)))continue t}b&&b.push(g),c.push(m)}}return c}function Tn(t,e,i){var n=null==(t=Br(t,e=fo(e,t)))?t:t[Fr(Kr(e))];return null==n?o:ye(n,t,i)}function _n(t){return tl(t)&&yn(t)==m}function Mn(t,e,i,n,r){return t===e||(null==t||null==e||!tl(t)&&!tl(e)?t!=t&&e!=e:function(t,e,i,n,r,a){var l=Na(t),s=Na(e),u=l?g:dr(t),h=s?g:dr(e),c=(u=u==m?x:u)==x,d=(h=h==m?x:h)==x,p=u==h;if(p&&Xa(t)){if(!Xa(e))return!1;l=!0,c=!1}if(p&&!c)return a||(a=new qi),l||sl(t)?Qo(t,e,i,n,r,a):function(t,e,i,n,o,r,a){switch(i){case L:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case z:return!(t.byteLength!=e.byteLength||!r(new Vt(t),new Vt(e)));case f:case A:case y:return Oa(+t,+e);case v:return t.name==e.name&&t.message==e.message;case k:case T:return t==e+"";case E:var l=oi;case R:var s=1&n;if(l||(l=li),t.size!=e.size&&!s)return!1;var u=a.get(t);if(u)return u==e;n|=2,a.set(t,e);var h=Qo(l(t),l(e),n,o,r,a);return a.delete(t),h;case _:if(Pi)return Pi.call(t)==Pi.call(e)}return!1}(t,e,u,i,n,r,a);if(!(1&i)){var b=c&&St.call(t,"__wrapped__"),w=d&&St.call(e,"__wrapped__");if(b||w){var C=b?t.value():t,B=w?e.value():e;return a||(a=new qi),r(C,B,i,n,a)}}return!!p&&(a||(a=new qi),function(t,e,i,n,r,a){var l=1&i,s=er(t),u=s.length;if(u!=er(e).length&&!l)return!1;for(var h=u;h--;){var c=s[h];if(!(l?c in e:St.call(e,c)))return!1}var d=a.get(t),p=a.get(e);if(d&&p)return d==e&&p==t;var b=!0;a.set(t,e),a.set(e,t);for(var m=l;++h<u;){var g=t[c=s[h]],f=e[c];if(n)var A=l?n(f,g,c,e,t,a):n(g,f,c,t,e,a);if(!(A===o?g===f||r(g,f,i,n,a):A)){b=!1;break}m||(m="constructor"==c)}if(b&&!m){var v=t.constructor,w=e.constructor;v==w||!("constructor"in t)||!("constructor"in e)||"function"==typeof v&&v instanceof v&&"function"==typeof w&&w instanceof w||(b=!1)}return a.delete(t),a.delete(e),b}(t,e,i,n,r,a))}(t,e,i,n,Mn,r))}function zn(t,e,i,n){var r=i.length,a=r,l=!n;if(null==t)return!a;for(t=xt(t);r--;){var s=i[r];if(l&&s[2]?s[1]!==t[s[0]]:!(s[0]in t))return!1}for(;++r<a;){var u=(s=i[r])[0],h=t[u],c=s[1];if(l&&s[2]){if(h===o&&!(u in t))return!1}else{var d=new qi;if(n)var p=n(h,c,u,t,e,d);if(!(p===o?Mn(c,h,3,n,d):p))return!1}}return!0}function Ln(t){return!(!Qa(t)||(e=t,Pt&&Pt in e))&&(Ja(t)?Ot:mt).test(Ir(t));var e}function Sn(t){return"function"==typeof t?t:null==t?is:"object"==typeof t?Na(t)?Hn(t[0],t[1]):In(t):cs(t)}function Dn(t){if(!Cr(t))return bi(t);var e=[];for(var i in xt(t))St.call(t,i)&&"constructor"!=i&&e.push(i);return e}function Pn(t,e){return t<e}function Fn(t,e){var i=-1,o=Ua(t)?n(t.length):[];return hn(t,(function(t,n,r){o[++i]=e(t,n,r)})),o}function In(t){var e=sr(t);return 1==e.length&&e[0][2]?yr(e[0][0],e[0][1]):function(i){return i===t||zn(i,t,e)}}function Hn(t,e){return Ar(t)&&Er(e)?yr(Fr(t),e):function(i){var n=Bl(i,t);return n===o&&n===e?kl(i,t):Mn(e,n,3)}}function On(t,e,i,n,r){t!==e&&gn(e,(function(a,l){if(r||(r=new qi),Qa(a))!function(t,e,i,n,r,a,l){var s=kr(t,i),u=kr(e,i),h=l.get(u);if(h)Zi(t,i,h);else{var c=a?a(s,u,i+"",t,e,l):o,d=c===o;if(d){var p=Na(u),b=!p&&Xa(u),m=!p&&!b&&sl(u);c=u,p||b||m?Na(s)?c=s:qa(s)?c=Ro(s):b?(d=!1,c=Co(u,!0)):m?(d=!1,c=yo(u,!0)):c=[]:nl(u)||Va(u)?(c=s,Va(s)?c=gl(s):Qa(s)&&!Ja(s)||(c=br(u))):d=!1}d&&(l.set(u,c),r(c,u,n,a,l),l.delete(u)),Zi(t,i,c)}}(t,e,l,i,On,n,r);else{var s=n?n(kr(t,l),a,l+"",t,e,r):o;s===o&&(s=a),Zi(t,l,s)}}),zl)}function Wn(t,e){var i=t.length;if(i)return gr(e+=e<0?i:0,i)?t[e]:o}function jn(t,e,i){e=e.length?ze(e,(function(t){return Na(t)?function(e){return Cn(e,1===t.length?t[0]:t)}:t})):[is];var n=-1;e=ze(e,Ke(ar()));var o=Fn(t,(function(t,i,o){var r=ze(e,(function(e){return e(t)}));return{criteria:r,index:++n,value:t}}));return function(t,e){var n=t.length;for(t.sort((function(t,e){return function(t,e,i){for(var n=-1,o=t.criteria,r=e.criteria,a=o.length,l=i.length;++n<a;){var s=xo(o[n],r[n]);if(s)return n>=l?s:s*("desc"==i[n]?-1:1)}return t.index-e.index}(t,e,i)}));n--;)t[n]=t[n].value;return t}(o)}function Vn(t,e,i){for(var n=-1,o=e.length,r={};++n<o;){var a=e[n],l=Cn(t,a);i(l,a)&&Jn(r,fo(a,t),l)}return r}function Nn(t,e,i,n){var o=n?We:Oe,r=-1,a=e.length,l=t;for(t===e&&(e=Ro(e)),i&&(l=ze(t,Ke(i)));++r<a;)for(var s=0,u=e[r],h=i?i(u):u;(s=o(l,h,s,n))>-1;)l!==t&&Xt.call(l,s,1),Xt.call(t,s,1);return t}function Gn(t,e){for(var i=t?e.length:0,n=i-1;i--;){var o=e[i];if(i==n||o!==r){var r=o;gr(o)?Xt.call(t,o,1):so(t,o)}}return t}function Un(t,e){return t+pe(vi()*(e-t+1))}function qn(t,e){var i="";if(!t||e<1||e>c)return i;do{e%2&&(i+=t),(e=pe(e/2))&&(t+=t)}while(e);return i}function Xn(t,e){return _r(xr(t,e,is),t+"")}function Yn(t){return Yi(Ol(t))}function Kn(t,e){var i=Ol(t);return Lr(i,rn(e,0,i.length))}function Jn(t,e,i,n){if(!Qa(t))return t;for(var r=-1,a=(e=fo(e,t)).length,l=a-1,s=t;null!=s&&++r<a;){var u=Fr(e[r]),h=i;if("__proto__"===u||"constructor"===u||"prototype"===u)return t;if(r!=l){var c=s[u];(h=n?n(c,u,s):o)===o&&(h=Qa(c)?c:gr(e[r+1])?[]:{})}$i(s,u,h),s=s[u]}return t}var Zn=Ri?function(t,e){return Ri.set(t,e),t}:is,$n=te?function(t,e){return te(t,"toString",{configurable:!0,enumerable:!1,value:Ql(e),writable:!0})}:is;function Qn(t){return Lr(Ol(t))}function to(t,e,i){var o=-1,r=t.length;e<0&&(e=-e>r?0:r+e),(i=i>r?r:i)<0&&(i+=r),r=e>i?0:i-e>>>0,e>>>=0;for(var a=n(r);++o<r;)a[o]=t[o+e];return a}function eo(t,e){var i;return hn(t,(function(t,n,o){return!(i=e(t,n,o))})),!!i}function io(t,e,i){var n=0,o=null==t?n:t.length;if("number"==typeof e&&e==e&&o<=2147483647){for(;n<o;){var r=n+o>>>1,a=t[r];null!==a&&!ll(a)&&(i?a<=e:a<e)?n=r+1:o=r}return o}return no(t,e,is,i)}function no(t,e,i,n){var r=0,a=null==t?0:t.length;if(0===a)return 0;for(var l=(e=i(e))!=e,s=null===e,u=ll(e),h=e===o;r<a;){var c=pe((r+a)/2),d=i(t[c]),p=d!==o,b=null===d,m=d==d,g=ll(d);if(l)var f=n||m;else f=h?m&&(n||p):s?m&&p&&(n||!b):u?m&&p&&!b&&(n||!g):!b&&!g&&(n?d<=e:d<e);f?r=c+1:a=c}return gi(a,4294967294)}function oo(t,e){for(var i=-1,n=t.length,o=0,r=[];++i<n;){var a=t[i],l=e?e(a):a;if(!i||!Oa(l,s)){var s=l;r[o++]=0===a?0:a}}return r}function ro(t){return"number"==typeof t?t:ll(t)?d:+t}function ao(t){if("string"==typeof t)return t;if(Na(t))return ze(t,ao)+"";if(ll(t))return Fi?Fi.call(t):"";var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function lo(t,e,i){var n=-1,o=_e,r=t.length,a=!0,l=[],s=l;if(i)a=!1,o=Me;else if(r>=200){var u=e?null:Xo(t);if(u)return li(u);a=!1,o=Ze,s=new Ui}else s=e?[]:l;t:for(;++n<r;){var h=t[n],c=e?e(h):h;if(h=i||0!==h?h:0,a&&c==c){for(var d=s.length;d--;)if(s[d]===c)continue t;e&&s.push(c),l.push(h)}else o(s,c,i)||(s!==l&&s.push(c),l.push(h))}return l}function so(t,e){return null==(t=Br(t,e=fo(e,t)))||delete t[Fr(Kr(e))]}function uo(t,e,i,n){return Jn(t,e,i(Cn(t,e)),n)}function ho(t,e,i,n){for(var o=t.length,r=n?o:-1;(n?r--:++r<o)&&e(t[r],r,t););return i?to(t,n?0:r,n?r+1:o):to(t,n?r+1:0,n?o:r)}function co(t,e){var i=t;return i instanceof ji&&(i=i.value()),Se(e,(function(t,e){return e.func.apply(e.thisArg,Le([t],e.args))}),i)}function po(t,e,i){var o=t.length;if(o<2)return o?lo(t[0]):[];for(var r=-1,a=n(o);++r<o;)for(var l=t[r],s=-1;++s<o;)s!=r&&(a[r]=un(a[r]||l,t[s],e,i));return lo(mn(a,1),e,i)}function bo(t,e,i){for(var n=-1,r=t.length,a=e.length,l={};++n<r;){var s=n<a?e[n]:o;i(l,t[n],s)}return l}function mo(t){return qa(t)?t:[]}function go(t){return"function"==typeof t?t:is}function fo(t,e){return Na(t)?t:Ar(t,e)?[t]:Pr(fl(t))}var Ao=Xn;function vo(t,e,i){var n=t.length;return i=i===o?n:i,!e&&i>=n?t:to(t,e,i)}var wo=ae||function(t){return ce.clearTimeout(t)};function Co(t,e){if(e)return t.slice();var i=t.length,n=Nt?Nt(i):new t.constructor(i);return t.copy(n),n}function Eo(t){var e=new t.constructor(t.byteLength);return new Vt(e).set(new Vt(t)),e}function yo(t,e){var i=e?Eo(t.buffer):t.buffer;return new t.constructor(i,t.byteOffset,t.length)}function xo(t,e){if(t!==e){var i=t!==o,n=null===t,r=t==t,a=ll(t),l=e!==o,s=null===e,u=e==e,h=ll(e);if(!s&&!h&&!a&&t>e||a&&l&&u&&!s&&!h||n&&l&&u||!i&&u||!r)return 1;if(!n&&!a&&!h&&t<e||h&&i&&r&&!n&&!a||s&&i&&r||!l&&r||!u)return-1}return 0}function Bo(t,e,i,o){for(var r=-1,a=t.length,l=i.length,s=-1,u=e.length,h=mi(a-l,0),c=n(u+h),d=!o;++s<u;)c[s]=e[s];for(;++r<l;)(d||r<a)&&(c[i[r]]=t[r]);for(;h--;)c[s++]=t[r++];return c}function ko(t,e,i,o){for(var r=-1,a=t.length,l=-1,s=i.length,u=-1,h=e.length,c=mi(a-s,0),d=n(c+h),p=!o;++r<c;)d[r]=t[r];for(var b=r;++u<h;)d[b+u]=e[u];for(;++l<s;)(p||r<a)&&(d[b+i[l]]=t[r++]);return d}function Ro(t,e){var i=-1,o=t.length;for(e||(e=n(o));++i<o;)e[i]=t[i];return e}function To(t,e,i,n){var r=!i;i||(i={});for(var a=-1,l=e.length;++a<l;){var s=e[a],u=n?n(i[s],t[s],s,i,t):o;u===o&&(u=t[s]),r?nn(i,s,u):$i(i,s,u)}return i}function _o(t,e){return function(i,n){var o=Na(i)?xe:tn,r=e?e():{};return o(i,t,ar(n,2),r)}}function Mo(t){return Xn((function(e,i){var n=-1,r=i.length,a=r>1?i[r-1]:o,l=r>2?i[2]:o;for(a=t.length>3&&"function"==typeof a?(r--,a):o,l&&fr(i[0],i[1],l)&&(a=r<3?o:a,r=1),e=xt(e);++n<r;){var s=i[n];s&&t(e,s,n,a)}return e}))}function zo(t,e){return function(i,n){if(null==i)return i;if(!Ua(i))return t(i,n);for(var o=i.length,r=e?o:-1,a=xt(i);(e?r--:++r<o)&&!1!==n(a[r],r,a););return i}}function Lo(t){return function(e,i,n){for(var o=-1,r=xt(e),a=n(e),l=a.length;l--;){var s=a[t?l:++o];if(!1===i(r[s],s,r))break}return e}}function So(t){return function(e){var i=ni(e=fl(e))?hi(e):o,n=i?i[0]:e.charAt(0),r=i?vo(i,1).join(""):e.slice(1);return n[t]()+r}}function Do(t){return function(e){return Se(Jl(Vl(e).replace(Jt,"")),t,"")}}function Po(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var i=Hi(t.prototype),n=t.apply(i,e);return Qa(n)?n:i}}function Fo(t){return function(e,i,n){var r=xt(e);if(!Ua(e)){var a=ar(i,3);e=Ml(e),i=function(t){return a(r[t],t,r)}}var l=t(e,i,n);return l>-1?r[a?e[l]:l]:o}}function Io(t){return tr((function(e){var i=e.length,n=i,a=Wi.prototype.thru;for(t&&e.reverse();n--;){var l=e[n];if("function"!=typeof l)throw new Rt(r);if(a&&!s&&"wrapper"==or(l))var s=new Wi([],!0)}for(n=s?n:i;++n<i;){var u=or(l=e[n]),h="wrapper"==u?nr(l):o;s=h&&vr(h[0])&&424==h[1]&&!h[4].length&&1==h[9]?s[or(h[0])].apply(s,h[3]):1==l.length&&vr(l)?s[u]():s.thru(l)}return function(){var t=arguments,n=t[0];if(s&&1==t.length&&Na(n))return s.plant(n).value();for(var o=0,r=i?e[o].apply(this,t):n;++o<i;)r=e[o].call(this,r);return r}}))}function Ho(t,e,i,r,a,l,s,h,c,d){var p=e&u,b=1&e,m=2&e,g=24&e,f=512&e,A=m?o:Po(t);return function u(){for(var v=arguments.length,w=n(v),C=v;C--;)w[C]=arguments[C];if(g)var E=rr(u),y=function(t,e){for(var i=t.length,n=0;i--;)t[i]===e&&++n;return n}(w,E);if(r&&(w=Bo(w,r,a,g)),l&&(w=ko(w,l,s,g)),v-=y,g&&v<d){var x=ai(w,E);return Uo(t,e,Ho,u.placeholder,i,w,x,h,c,d-v)}var B=b?i:this,k=m?B[t]:t;return v=w.length,h?w=function(t,e){for(var i=t.length,n=gi(e.length,i),r=Ro(t);n--;){var a=e[n];t[n]=gr(a,i)?r[a]:o}return t}(w,h):f&&v>1&&w.reverse(),p&&c<v&&(w.length=c),this&&this!==ce&&this instanceof u&&(k=A||Po(k)),k.apply(B,w)}}function Oo(t,e){return function(i,n){return function(t,e,i,n){return An(t,(function(t,o,r){e(n,i(t),o,r)})),n}(i,t,e(n),{})}}function Wo(t,e){return function(i,n){var r;if(i===o&&n===o)return e;if(i!==o&&(r=i),n!==o){if(r===o)return n;"string"==typeof i||"string"==typeof n?(i=ao(i),n=ao(n)):(i=ro(i),n=ro(n)),r=t(i,n)}return r}}function jo(t){return tr((function(e){return e=ze(e,Ke(ar())),Xn((function(i){var n=this;return t(e,(function(t){return ye(t,n,i)}))}))}))}function Vo(t,e){var i=(e=e===o?" ":ao(e)).length;if(i<2)return i?qn(e,t):e;var n=qn(e,de(t/ui(e)));return ni(e)?vo(hi(n),0,t).join(""):n.slice(0,t)}function No(t){return function(e,i,r){return r&&"number"!=typeof r&&fr(e,i,r)&&(i=r=o),e=dl(e),i===o?(i=e,e=0):i=dl(i),function(t,e,i,o){for(var r=-1,a=mi(de((e-t)/(i||1)),0),l=n(a);a--;)l[o?a:++r]=t,t+=i;return l}(e,i,r=r===o?e<i?1:-1:dl(r),t)}}function Go(t){return function(e,i){return"string"==typeof e&&"string"==typeof i||(e=ml(e),i=ml(i)),t(e,i)}}function Uo(t,e,i,n,r,a,l,u,h,c){var d=8&e;e|=d?s:64,4&(e&=~(d?64:s))||(e&=-4);var p=[t,e,r,d?a:o,d?l:o,d?o:a,d?o:l,u,h,c],b=i.apply(o,p);return vr(t)&&Rr(b,p),b.placeholder=n,Mr(b,t,e)}function qo(t){var e=yt[t];return function(t,i){if(t=ml(t),(i=null==i?0:gi(pl(i),292))&&Fe(t)){var n=(fl(t)+"e").split("e");return+((n=(fl(e(n[0]+"e"+(+n[1]+i)))+"e").split("e"))[0]+"e"+(+n[1]-i))}return e(t)}}var Xo=xi&&1/li(new xi([,-0]))[1]==h?function(t){return new xi(t)}:ls;function Yo(t){return function(e){var i=dr(e);return i==E?oi(e):i==R?si(e):function(t,e){return ze(e,(function(e){return[e,t[e]]}))}(e,t(e))}}function Ko(t,e,i,a,h,c,d,p){var b=2&e;if(!b&&"function"!=typeof t)throw new Rt(r);var m=a?a.length:0;if(m||(e&=-97,a=h=o),d=d===o?d:mi(pl(d),0),p=p===o?p:pl(p),m-=h?h.length:0,64&e){var g=a,f=h;a=h=o}var A=b?o:nr(t),v=[t,e,i,a,h,g,f,c,d,p];if(A&&function(t,e){var i=t[1],n=e[1],o=i|n,r=o<131,a=n==u&&8==i||n==u&&256==i&&t[7].length<=e[8]||384==n&&e[7].length<=e[8]&&8==i;if(!r&&!a)return t;1&n&&(t[2]=e[2],o|=1&i?0:4);var s=e[3];if(s){var h=t[3];t[3]=h?Bo(h,s,e[4]):s,t[4]=h?ai(t[3],l):e[4]}(s=e[5])&&(h=t[5],t[5]=h?ko(h,s,e[6]):s,t[6]=h?ai(t[5],l):e[6]),(s=e[7])&&(t[7]=s),n&u&&(t[8]=null==t[8]?e[8]:gi(t[8],e[8])),null==t[9]&&(t[9]=e[9]),t[0]=e[0],t[1]=o}(v,A),t=v[0],e=v[1],i=v[2],a=v[3],h=v[4],!(p=v[9]=v[9]===o?b?0:t.length:mi(v[9]-m,0))&&24&e&&(e&=-25),e&&1!=e)w=8==e||16==e?function(t,e,i){var r=Po(t);return function a(){for(var l=arguments.length,s=n(l),u=l,h=rr(a);u--;)s[u]=arguments[u];var c=l<3&&s[0]!==h&&s[l-1]!==h?[]:ai(s,h);return(l-=c.length)<i?Uo(t,e,Ho,a.placeholder,o,s,c,o,o,i-l):ye(this&&this!==ce&&this instanceof a?r:t,this,s)}}(t,e,p):e!=s&&33!=e||h.length?Ho.apply(o,v):function(t,e,i,o){var r=1&e,a=Po(t);return function e(){for(var l=-1,s=arguments.length,u=-1,h=o.length,c=n(h+s),d=this&&this!==ce&&this instanceof e?a:t;++u<h;)c[u]=o[u];for(;s--;)c[u++]=arguments[++l];return ye(d,r?i:this,c)}}(t,e,i,a);else var w=function(t,e,i){var n=1&e,o=Po(t);return function e(){return(this&&this!==ce&&this instanceof e?o:t).apply(n?i:this,arguments)}}(t,e,i);return Mr((A?Zn:Rr)(w,v),t,e)}function Jo(t,e,i,n){return t===o||Oa(t,Mt[i])&&!St.call(n,i)?e:t}function Zo(t,e,i,n,r,a){return Qa(t)&&Qa(e)&&(a.set(e,t),On(t,e,o,Zo,a),a.delete(e)),t}function $o(t){return nl(t)?o:t}function Qo(t,e,i,n,r,a){var l=1&i,s=t.length,u=e.length;if(s!=u&&!(l&&u>s))return!1;var h=a.get(t),c=a.get(e);if(h&&c)return h==e&&c==t;var d=-1,p=!0,b=2&i?new Ui:o;for(a.set(t,e),a.set(e,t);++d<s;){var m=t[d],g=e[d];if(n)var f=l?n(g,m,d,e,t,a):n(m,g,d,t,e,a);if(f!==o){if(f)continue;p=!1;break}if(b){if(!Pe(e,(function(t,e){if(!Ze(b,e)&&(m===t||r(m,t,i,n,a)))return b.push(e)}))){p=!1;break}}else if(m!==g&&!r(m,g,i,n,a)){p=!1;break}}return a.delete(t),a.delete(e),p}function tr(t){return _r(xr(t,o,Gr),t+"")}function er(t){return En(t,Ml,hr)}function ir(t){return En(t,zl,cr)}var nr=Ri?function(t){return Ri.get(t)}:ls;function or(t){for(var e=t.name+"",i=Ti[e],n=St.call(Ti,e)?i.length:0;n--;){var o=i[n],r=o.func;if(null==r||r==t)return o.name}return e}function rr(t){return(St.call(Ii,"placeholder")?Ii:t).placeholder}function ar(){var t=Ii.iteratee||ns;return t=t===ns?Sn:t,arguments.length?t(arguments[0],arguments[1]):t}function lr(t,e){var i,n,o=t.__data__;return("string"==(n=typeof(i=e))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==i:null===i)?o["string"==typeof e?"string":"hash"]:o.map}function sr(t){for(var e=Ml(t),i=e.length;i--;){var n=e[i],o=t[n];e[i]=[n,o,Er(o)]}return e}function ur(t,e){var i=function(t,e){return null==t?o:t[e]}(t,e);return Ln(i)?i:o}var hr=me?function(t){return null==t?[]:(t=xt(t),Te(me(t),(function(e){return qt.call(t,e)})))}:bs,cr=me?function(t){for(var e=[];t;)Le(e,hr(t)),t=Gt(t);return e}:bs,dr=yn;function pr(t,e,i){for(var n=-1,o=(e=fo(e,t)).length,r=!1;++n<o;){var a=Fr(e[n]);if(!(r=null!=t&&i(t,a)))break;t=t[a]}return r||++n!=o?r:!!(o=null==t?0:t.length)&&$a(o)&&gr(a,o)&&(Na(t)||Va(t))}function br(t){return"function"!=typeof t.constructor||Cr(t)?{}:Hi(Gt(t))}function mr(t){return Na(t)||Va(t)||!!(Yt&&t&&t[Yt])}function gr(t,e){var i=typeof t;return!!(e=null==e?c:e)&&("number"==i||"symbol"!=i&&ft.test(t))&&t>-1&&t%1==0&&t<e}function fr(t,e,i){if(!Qa(i))return!1;var n=typeof e;return!!("number"==n?Ua(i)&&gr(e,i.length):"string"==n&&e in i)&&Oa(i[e],t)}function Ar(t,e){if(Na(t))return!1;var i=typeof t;return!("number"!=i&&"symbol"!=i&&"boolean"!=i&&null!=t&&!ll(t))||Q.test(t)||!$.test(t)||null!=e&&t in xt(e)}function vr(t){var e=or(t),i=Ii[e];if("function"!=typeof i||!(e in ji.prototype))return!1;if(t===i)return!0;var n=nr(i);return!!n&&t===n[0]}(Ci&&dr(new Ci(new ArrayBuffer(1)))!=L||Ei&&dr(new Ei)!=E||yi&&dr(yi.resolve())!=B||xi&&dr(new xi)!=R||Bi&&dr(new Bi)!=M)&&(dr=function(t){var e=yn(t),i=e==x?t.constructor:o,n=i?Ir(i):"";if(n)switch(n){case _i:return L;case Mi:return E;case zi:return B;case Li:return R;case Si:return M}return e});var wr=zt?Ja:ms;function Cr(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||Mt)}function Er(t){return t==t&&!Qa(t)}function yr(t,e){return function(i){return null!=i&&i[t]===e&&(e!==o||t in xt(i))}}function xr(t,e,i){return e=mi(e===o?t.length-1:e,0),function(){for(var o=arguments,r=-1,a=mi(o.length-e,0),l=n(a);++r<a;)l[r]=o[e+r];r=-1;for(var s=n(e+1);++r<e;)s[r]=o[r];return s[e]=i(l),ye(t,this,s)}}function Br(t,e){return e.length<2?t:Cn(t,to(e,0,-1))}function kr(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}var Rr=zr(Zn),Tr=he||function(t,e){return ce.setTimeout(t,e)},_r=zr($n);function Mr(t,e,i){var n=e+"";return _r(t,function(t,e){var i=e.length;if(!i)return t;var n=i-1;return e[n]=(i>1?"& ":"")+e[n],e=e.join(i>2?", ":" "),t.replace(rt,"{\n/* [wrapped with "+e+"] */\n")}(n,function(t,e){return Be(b,(function(i){var n="_."+i[0];e&i[1]&&!_e(t,n)&&t.push(n)})),t.sort()}(function(t){var e=t.match(at);return e?e[1].split(lt):[]}(n),i)))}function zr(t){var e=0,i=0;return function(){var n=fi(),r=16-(n-i);if(i=n,r>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(o,arguments)}}function Lr(t,e){var i=-1,n=t.length,r=n-1;for(e=e===o?n:e;++i<e;){var a=Un(i,r),l=t[a];t[a]=t[i],t[i]=l}return t.length=e,t}var Sr,Dr,Pr=(Sr=Sa((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(tt,(function(t,i,n,o){e.push(n?o.replace(ht,"$1"):i||t)})),e}),(function(t){return 500===Dr.size&&Dr.clear(),t})),Dr=Sr.cache,Sr);function Fr(t){if("string"==typeof t||ll(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function Ir(t){if(null!=t){try{return Lt.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Hr(t){if(t instanceof ji)return t.clone();var e=new Wi(t.__wrapped__,t.__chain__);return e.__actions__=Ro(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var Or=Xn((function(t,e){return qa(t)?un(t,mn(e,1,qa,!0)):[]})),Wr=Xn((function(t,e){var i=Kr(e);return qa(i)&&(i=o),qa(t)?un(t,mn(e,1,qa,!0),ar(i,2)):[]})),jr=Xn((function(t,e){var i=Kr(e);return qa(i)&&(i=o),qa(t)?un(t,mn(e,1,qa,!0),o,i):[]}));function Vr(t,e,i){var n=null==t?0:t.length;if(!n)return-1;var o=null==i?0:pl(i);return o<0&&(o=mi(n+o,0)),He(t,ar(e,3),o)}function Nr(t,e,i){var n=null==t?0:t.length;if(!n)return-1;var r=n-1;return i!==o&&(r=pl(i),r=i<0?mi(n+r,0):gi(r,n-1)),He(t,ar(e,3),r,!0)}function Gr(t){return null!=t&&t.length?mn(t,1):[]}function Ur(t){return t&&t.length?t[0]:o}var qr=Xn((function(t){var e=ze(t,mo);return e.length&&e[0]===t[0]?Rn(e):[]})),Xr=Xn((function(t){var e=Kr(t),i=ze(t,mo);return e===Kr(i)?e=o:i.pop(),i.length&&i[0]===t[0]?Rn(i,ar(e,2)):[]})),Yr=Xn((function(t){var e=Kr(t),i=ze(t,mo);return(e="function"==typeof e?e:o)&&i.pop(),i.length&&i[0]===t[0]?Rn(i,o,e):[]}));function Kr(t){var e=null==t?0:t.length;return e?t[e-1]:o}var Jr=Xn(Zr);function Zr(t,e){return t&&t.length&&e&&e.length?Nn(t,e):t}var $r=tr((function(t,e){var i=null==t?0:t.length,n=on(t,e);return Gn(t,ze(e,(function(t){return gr(t,i)?+t:t})).sort(xo)),n}));function Qr(t){return null==t?t:wi.call(t)}var ta=Xn((function(t){return lo(mn(t,1,qa,!0))})),ea=Xn((function(t){var e=Kr(t);return qa(e)&&(e=o),lo(mn(t,1,qa,!0),ar(e,2))})),ia=Xn((function(t){var e=Kr(t);return e="function"==typeof e?e:o,lo(mn(t,1,qa,!0),o,e)}));function na(t){if(!t||!t.length)return[];var e=0;return t=Te(t,(function(t){if(qa(t))return e=mi(t.length,e),!0})),Xe(e,(function(e){return ze(t,Ne(e))}))}function oa(t,e){if(!t||!t.length)return[];var i=na(t);return null==e?i:ze(i,(function(t){return ye(e,o,t)}))}var ra=Xn((function(t,e){return qa(t)?un(t,e):[]})),aa=Xn((function(t){return po(Te(t,qa))})),la=Xn((function(t){var e=Kr(t);return qa(e)&&(e=o),po(Te(t,qa),ar(e,2))})),sa=Xn((function(t){var e=Kr(t);return e="function"==typeof e?e:o,po(Te(t,qa),o,e)})),ua=Xn(na),ha=Xn((function(t){var e=t.length,i=e>1?t[e-1]:o;return i="function"==typeof i?(t.pop(),i):o,oa(t,i)}));function ca(t){var e=Ii(t);return e.__chain__=!0,e}function da(t,e){return e(t)}var pa=tr((function(t){var e=t.length,i=e?t[0]:0,n=this.__wrapped__,r=function(e){return on(e,t)};return!(e>1||this.__actions__.length)&&n instanceof ji&&gr(i)?((n=n.slice(i,+i+(e?1:0))).__actions__.push({func:da,args:[r],thisArg:o}),new Wi(n,this.__chain__).thru((function(t){return e&&!t.length&&t.push(o),t}))):this.thru(r)})),ba=_o((function(t,e,i){St.call(t,i)?++t[i]:nn(t,i,1)})),ma=Fo(Vr),ga=Fo(Nr);function fa(t,e){return(Na(t)?Be:hn)(t,ar(e,3))}function Aa(t,e){return(Na(t)?ke:cn)(t,ar(e,3))}var va=_o((function(t,e,i){St.call(t,i)?t[i].push(e):nn(t,i,[e])})),wa=Xn((function(t,e,i){var o=-1,r="function"==typeof e,a=Ua(t)?n(t.length):[];return hn(t,(function(t){a[++o]=r?ye(e,t,i):Tn(t,e,i)})),a})),Ca=_o((function(t,e,i){nn(t,i,e)}));function Ea(t,e){return(Na(t)?ze:Fn)(t,ar(e,3))}var ya=_o((function(t,e,i){t[i?0:1].push(e)}),(function(){return[[],[]]})),xa=Xn((function(t,e){if(null==t)return[];var i=e.length;return i>1&&fr(t,e[0],e[1])?e=[]:i>2&&fr(e[0],e[1],e[2])&&(e=[e[0]]),jn(t,mn(e,1),[])})),Ba=ue||function(){return ce.Date.now()};function ka(t,e,i){return e=i?o:e,e=t&&null==e?t.length:e,Ko(t,u,o,o,o,o,e)}function Ra(t,e){var i;if("function"!=typeof e)throw new Rt(r);return t=pl(t),function(){return--t>0&&(i=e.apply(this,arguments)),t<=1&&(e=o),i}}var Ta=Xn((function(t,e,i){var n=1;if(i.length){var o=ai(i,rr(Ta));n|=s}return Ko(t,n,e,i,o)})),_a=Xn((function(t,e,i){var n=3;if(i.length){var o=ai(i,rr(_a));n|=s}return Ko(e,n,t,i,o)}));function Ma(t,e,i){var n,a,l,s,u,h,c=0,d=!1,p=!1,b=!0;if("function"!=typeof t)throw new Rt(r);function m(e){var i=n,r=a;return n=a=o,c=e,s=t.apply(r,i)}function g(t){var i=t-h;return h===o||i>=e||i<0||p&&t-c>=l}function f(){var t=Ba();if(g(t))return A(t);u=Tr(f,function(t){var i=e-(t-h);return p?gi(i,l-(t-c)):i}(t))}function A(t){return u=o,b&&n?m(t):(n=a=o,s)}function v(){var t=Ba(),i=g(t);if(n=arguments,a=this,h=t,i){if(u===o)return function(t){return c=t,u=Tr(f,e),d?m(t):s}(h);if(p)return wo(u),u=Tr(f,e),m(h)}return u===o&&(u=Tr(f,e)),s}return e=ml(e)||0,Qa(i)&&(d=!!i.leading,l=(p="maxWait"in i)?mi(ml(i.maxWait)||0,e):l,b="trailing"in i?!!i.trailing:b),v.cancel=function(){u!==o&&wo(u),c=0,n=h=a=u=o},v.flush=function(){return u===o?s:A(Ba())},v}var za=Xn((function(t,e){return sn(t,1,e)})),La=Xn((function(t,e,i){return sn(t,ml(e)||0,i)}));function Sa(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new Rt(r);var i=function(){var n=arguments,o=e?e.apply(this,n):n[0],r=i.cache;if(r.has(o))return r.get(o);var a=t.apply(this,n);return i.cache=r.set(o,a)||r,a};return i.cache=new(Sa.Cache||Gi),i}function Da(t){if("function"!=typeof t)throw new Rt(r);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}Sa.Cache=Gi;var Pa=Ao((function(t,e){var i=(e=1==e.length&&Na(e[0])?ze(e[0],Ke(ar())):ze(mn(e,1),Ke(ar()))).length;return Xn((function(n){for(var o=-1,r=gi(n.length,i);++o<r;)n[o]=e[o].call(this,n[o]);return ye(t,this,n)}))})),Fa=Xn((function(t,e){var i=ai(e,rr(Fa));return Ko(t,s,o,e,i)})),Ia=Xn((function(t,e){var i=ai(e,rr(Ia));return Ko(t,64,o,e,i)})),Ha=tr((function(t,e){return Ko(t,256,o,o,o,e)}));function Oa(t,e){return t===e||t!=t&&e!=e}var Wa=Go(xn),ja=Go((function(t,e){return t>=e})),Va=_n(function(){return arguments}())?_n:function(t){return tl(t)&&St.call(t,"callee")&&!qt.call(t,"callee")},Na=n.isArray,Ga=fe?Ke(fe):function(t){return tl(t)&&yn(t)==z};function Ua(t){return null!=t&&$a(t.length)&&!Ja(t)}function qa(t){return tl(t)&&Ua(t)}var Xa=ge||ms,Ya=Ae?Ke(Ae):function(t){return tl(t)&&yn(t)==A};function Ka(t){if(!tl(t))return!1;var e=yn(t);return e==v||"[object DOMException]"==e||"string"==typeof t.message&&"string"==typeof t.name&&!nl(t)}function Ja(t){if(!Qa(t))return!1;var e=yn(t);return e==w||e==C||"[object AsyncFunction]"==e||"[object Proxy]"==e}function Za(t){return"number"==typeof t&&t==pl(t)}function $a(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=c}function Qa(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function tl(t){return null!=t&&"object"==typeof t}var el=ve?Ke(ve):function(t){return tl(t)&&dr(t)==E};function il(t){return"number"==typeof t||tl(t)&&yn(t)==y}function nl(t){if(!tl(t)||yn(t)!=x)return!1;var e=Gt(t);if(null===e)return!0;var i=St.call(e,"constructor")&&e.constructor;return"function"==typeof i&&i instanceof i&&Lt.call(i)==It}var ol=we?Ke(we):function(t){return tl(t)&&yn(t)==k},rl=Ce?Ke(Ce):function(t){return tl(t)&&dr(t)==R};function al(t){return"string"==typeof t||!Na(t)&&tl(t)&&yn(t)==T}function ll(t){return"symbol"==typeof t||tl(t)&&yn(t)==_}var sl=Ee?Ke(Ee):function(t){return tl(t)&&$a(t.length)&&!!oe[yn(t)]},ul=Go(Pn),hl=Go((function(t,e){return t<=e}));function cl(t){if(!t)return[];if(Ua(t))return al(t)?hi(t):Ro(t);if(Kt&&t[Kt])return function(t){for(var e,i=[];!(e=t.next()).done;)i.push(e.value);return i}(t[Kt]());var e=dr(t);return(e==E?oi:e==R?li:Ol)(t)}function dl(t){return t?(t=ml(t))===h||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function pl(t){var e=dl(t),i=e%1;return e==e?i?e-i:e:0}function bl(t){return t?rn(pl(t),0,p):0}function ml(t){if("number"==typeof t)return t;if(ll(t))return d;if(Qa(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=Qa(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=Ye(t);var i=bt.test(t);return i||gt.test(t)?se(t.slice(2),i?2:8):pt.test(t)?d:+t}function gl(t){return To(t,zl(t))}function fl(t){return null==t?"":ao(t)}var Al=Mo((function(t,e){if(Cr(e)||Ua(e))To(e,Ml(e),t);else for(var i in e)St.call(e,i)&&$i(t,i,e[i])})),vl=Mo((function(t,e){To(e,zl(e),t)})),wl=Mo((function(t,e,i,n){To(e,zl(e),t,n)})),Cl=Mo((function(t,e,i,n){To(e,Ml(e),t,n)})),El=tr(on),yl=Xn((function(t,e){t=xt(t);var i=-1,n=e.length,r=n>2?e[2]:o;for(r&&fr(e[0],e[1],r)&&(n=1);++i<n;)for(var a=e[i],l=zl(a),s=-1,u=l.length;++s<u;){var h=l[s],c=t[h];(c===o||Oa(c,Mt[h])&&!St.call(t,h))&&(t[h]=a[h])}return t})),xl=Xn((function(t){return t.push(o,Zo),ye(Sl,o,t)}));function Bl(t,e,i){var n=null==t?o:Cn(t,e);return n===o?i:n}function kl(t,e){return null!=t&&pr(t,e,kn)}var Rl=Oo((function(t,e,i){null!=e&&"function"!=typeof e.toString&&(e=Ft.call(e)),t[e]=i}),Ql(is)),Tl=Oo((function(t,e,i){null!=e&&"function"!=typeof e.toString&&(e=Ft.call(e)),St.call(t,e)?t[e].push(i):t[e]=[i]}),ar),_l=Xn(Tn);function Ml(t){return Ua(t)?Xi(t):Dn(t)}function zl(t){return Ua(t)?Xi(t,!0):function(t){if(!Qa(t))return function(t){var e=[];if(null!=t)for(var i in xt(t))e.push(i);return e}(t);var e=Cr(t),i=[];for(var n in t)("constructor"!=n||!e&&St.call(t,n))&&i.push(n);return i}(t)}var Ll=Mo((function(t,e,i){On(t,e,i)})),Sl=Mo((function(t,e,i,n){On(t,e,i,n)})),Dl=tr((function(t,e){var i={};if(null==t)return i;var n=!1;e=ze(e,(function(e){return e=fo(e,t),n||(n=e.length>1),e})),To(t,ir(t),i),n&&(i=an(i,7,$o));for(var o=e.length;o--;)so(i,e[o]);return i})),Pl=tr((function(t,e){return null==t?{}:function(t,e){return Vn(t,e,(function(e,i){return kl(t,i)}))}(t,e)}));function Fl(t,e){if(null==t)return{};var i=ze(ir(t),(function(t){return[t]}));return e=ar(e),Vn(t,i,(function(t,i){return e(t,i[0])}))}var Il=Yo(Ml),Hl=Yo(zl);function Ol(t){return null==t?[]:Je(t,Ml(t))}var Wl=Do((function(t,e,i){return e=e.toLowerCase(),t+(i?jl(e):e)}));function jl(t){return Kl(fl(t).toLowerCase())}function Vl(t){return(t=fl(t))&&t.replace(At,ti).replace(Zt,"")}var Nl=Do((function(t,e,i){return t+(i?"-":"")+e.toLowerCase()})),Gl=Do((function(t,e,i){return t+(i?" ":"")+e.toLowerCase()})),Ul=So("toLowerCase"),ql=Do((function(t,e,i){return t+(i?"_":"")+e.toLowerCase()})),Xl=Do((function(t,e,i){return t+(i?" ":"")+Kl(e)})),Yl=Do((function(t,e,i){return t+(i?" ":"")+e.toUpperCase()})),Kl=So("toUpperCase");function Jl(t,e,i){return t=fl(t),(e=i?o:e)===o?function(t){return ee.test(t)}(t)?function(t){return t.match(Qt)||[]}(t):function(t){return t.match(st)||[]}(t):t.match(e)||[]}var Zl=Xn((function(t,e){try{return ye(t,o,e)}catch(t){return Ka(t)?t:new Ct(t)}})),$l=tr((function(t,e){return Be(e,(function(e){e=Fr(e),nn(t,e,Ta(t[e],t))})),t}));function Ql(t){return function(){return t}}var ts=Io(),es=Io(!0);function is(t){return t}function ns(t){return Sn("function"==typeof t?t:an(t,1))}var os=Xn((function(t,e){return function(i){return Tn(i,t,e)}})),rs=Xn((function(t,e){return function(i){return Tn(t,i,e)}}));function as(t,e,i){var n=Ml(e),o=wn(e,n);null!=i||Qa(e)&&(o.length||!n.length)||(i=e,e=t,t=this,o=wn(e,Ml(e)));var r=!(Qa(i)&&"chain"in i&&!i.chain),a=Ja(t);return Be(o,(function(i){var n=e[i];t[i]=n,a&&(t.prototype[i]=function(){var e=this.__chain__;if(r||e){var i=t(this.__wrapped__);return(i.__actions__=Ro(this.__actions__)).push({func:n,args:arguments,thisArg:t}),i.__chain__=e,i}return n.apply(t,Le([this.value()],arguments))})})),t}function ls(){}var ss=jo(ze),us=jo(Re),hs=jo(Pe);function cs(t){return Ar(t)?Ne(Fr(t)):function(t){return function(e){return Cn(e,t)}}(t)}var ds=No(),ps=No(!0);function bs(){return[]}function ms(){return!1}var gs,fs=Wo((function(t,e){return t+e}),0),As=qo("ceil"),vs=Wo((function(t,e){return t/e}),1),ws=qo("floor"),Cs=Wo((function(t,e){return t*e}),1),Es=qo("round"),ys=Wo((function(t,e){return t-e}),0);return Ii.after=function(t,e){if("function"!=typeof e)throw new Rt(r);return t=pl(t),function(){if(--t<1)return e.apply(this,arguments)}},Ii.ary=ka,Ii.assign=Al,Ii.assignIn=vl,Ii.assignInWith=wl,Ii.assignWith=Cl,Ii.at=El,Ii.before=Ra,Ii.bind=Ta,Ii.bindAll=$l,Ii.bindKey=_a,Ii.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return Na(t)?t:[t]},Ii.chain=ca,Ii.chunk=function(t,e,i){e=(i?fr(t,e,i):e===o)?1:mi(pl(e),0);var r=null==t?0:t.length;if(!r||e<1)return[];for(var a=0,l=0,s=n(de(r/e));a<r;)s[l++]=to(t,a,a+=e);return s},Ii.compact=function(t){for(var e=-1,i=null==t?0:t.length,n=0,o=[];++e<i;){var r=t[e];r&&(o[n++]=r)}return o},Ii.concat=function(){var t=arguments.length;if(!t)return[];for(var e=n(t-1),i=arguments[0],o=t;o--;)e[o-1]=arguments[o];return Le(Na(i)?Ro(i):[i],mn(e,1))},Ii.cond=function(t){var e=null==t?0:t.length,i=ar();return t=e?ze(t,(function(t){if("function"!=typeof t[1])throw new Rt(r);return[i(t[0]),t[1]]})):[],Xn((function(i){for(var n=-1;++n<e;){var o=t[n];if(ye(o[0],this,i))return ye(o[1],this,i)}}))},Ii.conforms=function(t){return function(t){var e=Ml(t);return function(i){return ln(i,t,e)}}(an(t,1))},Ii.constant=Ql,Ii.countBy=ba,Ii.create=function(t,e){var i=Hi(t);return null==e?i:en(i,e)},Ii.curry=function t(e,i,n){var r=Ko(e,8,o,o,o,o,o,i=n?o:i);return r.placeholder=t.placeholder,r},Ii.curryRight=function t(e,i,n){var r=Ko(e,16,o,o,o,o,o,i=n?o:i);return r.placeholder=t.placeholder,r},Ii.debounce=Ma,Ii.defaults=yl,Ii.defaultsDeep=xl,Ii.defer=za,Ii.delay=La,Ii.difference=Or,Ii.differenceBy=Wr,Ii.differenceWith=jr,Ii.drop=function(t,e,i){var n=null==t?0:t.length;return n?to(t,(e=i||e===o?1:pl(e))<0?0:e,n):[]},Ii.dropRight=function(t,e,i){var n=null==t?0:t.length;return n?to(t,0,(e=n-(e=i||e===o?1:pl(e)))<0?0:e):[]},Ii.dropRightWhile=function(t,e){return t&&t.length?ho(t,ar(e,3),!0,!0):[]},Ii.dropWhile=function(t,e){return t&&t.length?ho(t,ar(e,3),!0):[]},Ii.fill=function(t,e,i,n){var r=null==t?0:t.length;return r?(i&&"number"!=typeof i&&fr(t,e,i)&&(i=0,n=r),function(t,e,i,n){var r=t.length;for((i=pl(i))<0&&(i=-i>r?0:r+i),(n=n===o||n>r?r:pl(n))<0&&(n+=r),n=i>n?0:bl(n);i<n;)t[i++]=e;return t}(t,e,i,n)):[]},Ii.filter=function(t,e){return(Na(t)?Te:bn)(t,ar(e,3))},Ii.flatMap=function(t,e){return mn(Ea(t,e),1)},Ii.flatMapDeep=function(t,e){return mn(Ea(t,e),h)},Ii.flatMapDepth=function(t,e,i){return i=i===o?1:pl(i),mn(Ea(t,e),i)},Ii.flatten=Gr,Ii.flattenDeep=function(t){return null!=t&&t.length?mn(t,h):[]},Ii.flattenDepth=function(t,e){return null!=t&&t.length?mn(t,e=e===o?1:pl(e)):[]},Ii.flip=function(t){return Ko(t,512)},Ii.flow=ts,Ii.flowRight=es,Ii.fromPairs=function(t){for(var e=-1,i=null==t?0:t.length,n={};++e<i;){var o=t[e];n[o[0]]=o[1]}return n},Ii.functions=function(t){return null==t?[]:wn(t,Ml(t))},Ii.functionsIn=function(t){return null==t?[]:wn(t,zl(t))},Ii.groupBy=va,Ii.initial=function(t){return null!=t&&t.length?to(t,0,-1):[]},Ii.intersection=qr,Ii.intersectionBy=Xr,Ii.intersectionWith=Yr,Ii.invert=Rl,Ii.invertBy=Tl,Ii.invokeMap=wa,Ii.iteratee=ns,Ii.keyBy=Ca,Ii.keys=Ml,Ii.keysIn=zl,Ii.map=Ea,Ii.mapKeys=function(t,e){var i={};return e=ar(e,3),An(t,(function(t,n,o){nn(i,e(t,n,o),t)})),i},Ii.mapValues=function(t,e){var i={};return e=ar(e,3),An(t,(function(t,n,o){nn(i,n,e(t,n,o))})),i},Ii.matches=function(t){return In(an(t,1))},Ii.matchesProperty=function(t,e){return Hn(t,an(e,1))},Ii.memoize=Sa,Ii.merge=Ll,Ii.mergeWith=Sl,Ii.method=os,Ii.methodOf=rs,Ii.mixin=as,Ii.negate=Da,Ii.nthArg=function(t){return t=pl(t),Xn((function(e){return Wn(e,t)}))},Ii.omit=Dl,Ii.omitBy=function(t,e){return Fl(t,Da(ar(e)))},Ii.once=function(t){return Ra(2,t)},Ii.orderBy=function(t,e,i,n){return null==t?[]:(Na(e)||(e=null==e?[]:[e]),Na(i=n?o:i)||(i=null==i?[]:[i]),jn(t,e,i))},Ii.over=ss,Ii.overArgs=Pa,Ii.overEvery=us,Ii.overSome=hs,Ii.partial=Fa,Ii.partialRight=Ia,Ii.partition=ya,Ii.pick=Pl,Ii.pickBy=Fl,Ii.property=cs,Ii.propertyOf=function(t){return function(e){return null==t?o:Cn(t,e)}},Ii.pull=Jr,Ii.pullAll=Zr,Ii.pullAllBy=function(t,e,i){return t&&t.length&&e&&e.length?Nn(t,e,ar(i,2)):t},Ii.pullAllWith=function(t,e,i){return t&&t.length&&e&&e.length?Nn(t,e,o,i):t},Ii.pullAt=$r,Ii.range=ds,Ii.rangeRight=ps,Ii.rearg=Ha,Ii.reject=function(t,e){return(Na(t)?Te:bn)(t,Da(ar(e,3)))},Ii.remove=function(t,e){var i=[];if(!t||!t.length)return i;var n=-1,o=[],r=t.length;for(e=ar(e,3);++n<r;){var a=t[n];e(a,n,t)&&(i.push(a),o.push(n))}return Gn(t,o),i},Ii.rest=function(t,e){if("function"!=typeof t)throw new Rt(r);return Xn(t,e=e===o?e:pl(e))},Ii.reverse=Qr,Ii.sampleSize=function(t,e,i){return e=(i?fr(t,e,i):e===o)?1:pl(e),(Na(t)?Ki:Kn)(t,e)},Ii.set=function(t,e,i){return null==t?t:Jn(t,e,i)},Ii.setWith=function(t,e,i,n){return n="function"==typeof n?n:o,null==t?t:Jn(t,e,i,n)},Ii.shuffle=function(t){return(Na(t)?Ji:Qn)(t)},Ii.slice=function(t,e,i){var n=null==t?0:t.length;return n?(i&&"number"!=typeof i&&fr(t,e,i)?(e=0,i=n):(e=null==e?0:pl(e),i=i===o?n:pl(i)),to(t,e,i)):[]},Ii.sortBy=xa,Ii.sortedUniq=function(t){return t&&t.length?oo(t):[]},Ii.sortedUniqBy=function(t,e){return t&&t.length?oo(t,ar(e,2)):[]},Ii.split=function(t,e,i){return i&&"number"!=typeof i&&fr(t,e,i)&&(e=i=o),(i=i===o?p:i>>>0)?(t=fl(t))&&("string"==typeof e||null!=e&&!ol(e))&&!(e=ao(e))&&ni(t)?vo(hi(t),0,i):t.split(e,i):[]},Ii.spread=function(t,e){if("function"!=typeof t)throw new Rt(r);return e=null==e?0:mi(pl(e),0),Xn((function(i){var n=i[e],o=vo(i,0,e);return n&&Le(o,n),ye(t,this,o)}))},Ii.tail=function(t){var e=null==t?0:t.length;return e?to(t,1,e):[]},Ii.take=function(t,e,i){return t&&t.length?to(t,0,(e=i||e===o?1:pl(e))<0?0:e):[]},Ii.takeRight=function(t,e,i){var n=null==t?0:t.length;return n?to(t,(e=n-(e=i||e===o?1:pl(e)))<0?0:e,n):[]},Ii.takeRightWhile=function(t,e){return t&&t.length?ho(t,ar(e,3),!1,!0):[]},Ii.takeWhile=function(t,e){return t&&t.length?ho(t,ar(e,3)):[]},Ii.tap=function(t,e){return e(t),t},Ii.throttle=function(t,e,i){var n=!0,o=!0;if("function"!=typeof t)throw new Rt(r);return Qa(i)&&(n="leading"in i?!!i.leading:n,o="trailing"in i?!!i.trailing:o),Ma(t,e,{leading:n,maxWait:e,trailing:o})},Ii.thru=da,Ii.toArray=cl,Ii.toPairs=Il,Ii.toPairsIn=Hl,Ii.toPath=function(t){return Na(t)?ze(t,Fr):ll(t)?[t]:Ro(Pr(fl(t)))},Ii.toPlainObject=gl,Ii.transform=function(t,e,i){var n=Na(t),o=n||Xa(t)||sl(t);if(e=ar(e,4),null==i){var r=t&&t.constructor;i=o?n?new r:[]:Qa(t)&&Ja(r)?Hi(Gt(t)):{}}return(o?Be:An)(t,(function(t,n,o){return e(i,t,n,o)})),i},Ii.unary=function(t){return ka(t,1)},Ii.union=ta,Ii.unionBy=ea,Ii.unionWith=ia,Ii.uniq=function(t){return t&&t.length?lo(t):[]},Ii.uniqBy=function(t,e){return t&&t.length?lo(t,ar(e,2)):[]},Ii.uniqWith=function(t,e){return e="function"==typeof e?e:o,t&&t.length?lo(t,o,e):[]},Ii.unset=function(t,e){return null==t||so(t,e)},Ii.unzip=na,Ii.unzipWith=oa,Ii.update=function(t,e,i){return null==t?t:uo(t,e,go(i))},Ii.updateWith=function(t,e,i,n){return n="function"==typeof n?n:o,null==t?t:uo(t,e,go(i),n)},Ii.values=Ol,Ii.valuesIn=function(t){return null==t?[]:Je(t,zl(t))},Ii.without=ra,Ii.words=Jl,Ii.wrap=function(t,e){return Fa(go(e),t)},Ii.xor=aa,Ii.xorBy=la,Ii.xorWith=sa,Ii.zip=ua,Ii.zipObject=function(t,e){return bo(t||[],e||[],$i)},Ii.zipObjectDeep=function(t,e){return bo(t||[],e||[],Jn)},Ii.zipWith=ha,Ii.entries=Il,Ii.entriesIn=Hl,Ii.extend=vl,Ii.extendWith=wl,as(Ii,Ii),Ii.add=fs,Ii.attempt=Zl,Ii.camelCase=Wl,Ii.capitalize=jl,Ii.ceil=As,Ii.clamp=function(t,e,i){return i===o&&(i=e,e=o),i!==o&&(i=(i=ml(i))==i?i:0),e!==o&&(e=(e=ml(e))==e?e:0),rn(ml(t),e,i)},Ii.clone=function(t){return an(t,4)},Ii.cloneDeep=function(t){return an(t,5)},Ii.cloneDeepWith=function(t,e){return an(t,5,e="function"==typeof e?e:o)},Ii.cloneWith=function(t,e){return an(t,4,e="function"==typeof e?e:o)},Ii.conformsTo=function(t,e){return null==e||ln(t,e,Ml(e))},Ii.deburr=Vl,Ii.defaultTo=function(t,e){return null==t||t!=t?e:t},Ii.divide=vs,Ii.endsWith=function(t,e,i){t=fl(t),e=ao(e);var n=t.length,r=i=i===o?n:rn(pl(i),0,n);return(i-=e.length)>=0&&t.slice(i,r)==e},Ii.eq=Oa,Ii.escape=function(t){return(t=fl(t))&&Y.test(t)?t.replace(q,ei):t},Ii.escapeRegExp=function(t){return(t=fl(t))&&it.test(t)?t.replace(et,"\\$&"):t},Ii.every=function(t,e,i){var n=Na(t)?Re:dn;return i&&fr(t,e,i)&&(e=o),n(t,ar(e,3))},Ii.find=ma,Ii.findIndex=Vr,Ii.findKey=function(t,e){return Ie(t,ar(e,3),An)},Ii.findLast=ga,Ii.findLastIndex=Nr,Ii.findLastKey=function(t,e){return Ie(t,ar(e,3),vn)},Ii.floor=ws,Ii.forEach=fa,Ii.forEachRight=Aa,Ii.forIn=function(t,e){return null==t?t:gn(t,ar(e,3),zl)},Ii.forInRight=function(t,e){return null==t?t:fn(t,ar(e,3),zl)},Ii.forOwn=function(t,e){return t&&An(t,ar(e,3))},Ii.forOwnRight=function(t,e){return t&&vn(t,ar(e,3))},Ii.get=Bl,Ii.gt=Wa,Ii.gte=ja,Ii.has=function(t,e){return null!=t&&pr(t,e,Bn)},Ii.hasIn=kl,Ii.head=Ur,Ii.identity=is,Ii.includes=function(t,e,i,n){t=Ua(t)?t:Ol(t),i=i&&!n?pl(i):0;var o=t.length;return i<0&&(i=mi(o+i,0)),al(t)?i<=o&&t.indexOf(e,i)>-1:!!o&&Oe(t,e,i)>-1},Ii.indexOf=function(t,e,i){var n=null==t?0:t.length;if(!n)return-1;var o=null==i?0:pl(i);return o<0&&(o=mi(n+o,0)),Oe(t,e,o)},Ii.inRange=function(t,e,i){return e=dl(e),i===o?(i=e,e=0):i=dl(i),function(t,e,i){return t>=gi(e,i)&&t<mi(e,i)}(t=ml(t),e,i)},Ii.invoke=_l,Ii.isArguments=Va,Ii.isArray=Na,Ii.isArrayBuffer=Ga,Ii.isArrayLike=Ua,Ii.isArrayLikeObject=qa,Ii.isBoolean=function(t){return!0===t||!1===t||tl(t)&&yn(t)==f},Ii.isBuffer=Xa,Ii.isDate=Ya,Ii.isElement=function(t){return tl(t)&&1===t.nodeType&&!nl(t)},Ii.isEmpty=function(t){if(null==t)return!0;if(Ua(t)&&(Na(t)||"string"==typeof t||"function"==typeof t.splice||Xa(t)||sl(t)||Va(t)))return!t.length;var e=dr(t);if(e==E||e==R)return!t.size;if(Cr(t))return!Dn(t).length;for(var i in t)if(St.call(t,i))return!1;return!0},Ii.isEqual=function(t,e){return Mn(t,e)},Ii.isEqualWith=function(t,e,i){var n=(i="function"==typeof i?i:o)?i(t,e):o;return n===o?Mn(t,e,o,i):!!n},Ii.isError=Ka,Ii.isFinite=function(t){return"number"==typeof t&&Fe(t)},Ii.isFunction=Ja,Ii.isInteger=Za,Ii.isLength=$a,Ii.isMap=el,Ii.isMatch=function(t,e){return t===e||zn(t,e,sr(e))},Ii.isMatchWith=function(t,e,i){return i="function"==typeof i?i:o,zn(t,e,sr(e),i)},Ii.isNaN=function(t){return il(t)&&t!=+t},Ii.isNative=function(t){if(wr(t))throw new Ct("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Ln(t)},Ii.isNil=function(t){return null==t},Ii.isNull=function(t){return null===t},Ii.isNumber=il,Ii.isObject=Qa,Ii.isObjectLike=tl,Ii.isPlainObject=nl,Ii.isRegExp=ol,Ii.isSafeInteger=function(t){return Za(t)&&t>=-9007199254740991&&t<=c},Ii.isSet=rl,Ii.isString=al,Ii.isSymbol=ll,Ii.isTypedArray=sl,Ii.isUndefined=function(t){return t===o},Ii.isWeakMap=function(t){return tl(t)&&dr(t)==M},Ii.isWeakSet=function(t){return tl(t)&&"[object WeakSet]"==yn(t)},Ii.join=function(t,e){return null==t?"":Ge.call(t,e)},Ii.kebabCase=Nl,Ii.last=Kr,Ii.lastIndexOf=function(t,e,i){var n=null==t?0:t.length;if(!n)return-1;var r=n;return i!==o&&(r=(r=pl(i))<0?mi(n+r,0):gi(r,n-1)),e==e?function(t,e,i){for(var n=i+1;n--;)if(t[n]===e)return n;return n}(t,e,r):He(t,je,r,!0)},Ii.lowerCase=Gl,Ii.lowerFirst=Ul,Ii.lt=ul,Ii.lte=hl,Ii.max=function(t){return t&&t.length?pn(t,is,xn):o},Ii.maxBy=function(t,e){return t&&t.length?pn(t,ar(e,2),xn):o},Ii.mean=function(t){return Ve(t,is)},Ii.meanBy=function(t,e){return Ve(t,ar(e,2))},Ii.min=function(t){return t&&t.length?pn(t,is,Pn):o},Ii.minBy=function(t,e){return t&&t.length?pn(t,ar(e,2),Pn):o},Ii.stubArray=bs,Ii.stubFalse=ms,Ii.stubObject=function(){return{}},Ii.stubString=function(){return""},Ii.stubTrue=function(){return!0},Ii.multiply=Cs,Ii.nth=function(t,e){return t&&t.length?Wn(t,pl(e)):o},Ii.noConflict=function(){return ce._===this&&(ce._=Ht),this},Ii.noop=ls,Ii.now=Ba,Ii.pad=function(t,e,i){t=fl(t);var n=(e=pl(e))?ui(t):0;if(!e||n>=e)return t;var o=(e-n)/2;return Vo(pe(o),i)+t+Vo(de(o),i)},Ii.padEnd=function(t,e,i){t=fl(t);var n=(e=pl(e))?ui(t):0;return e&&n<e?t+Vo(e-n,i):t},Ii.padStart=function(t,e,i){t=fl(t);var n=(e=pl(e))?ui(t):0;return e&&n<e?Vo(e-n,i)+t:t},Ii.parseInt=function(t,e,i){return i||null==e?e=0:e&&(e=+e),Ai(fl(t).replace(nt,""),e||0)},Ii.random=function(t,e,i){if(i&&"boolean"!=typeof i&&fr(t,e,i)&&(e=i=o),i===o&&("boolean"==typeof e?(i=e,e=o):"boolean"==typeof t&&(i=t,t=o)),t===o&&e===o?(t=0,e=1):(t=dl(t),e===o?(e=t,t=0):e=dl(e)),t>e){var n=t;t=e,e=n}if(i||t%1||e%1){var r=vi();return gi(t+r*(e-t+le("1e-"+((r+"").length-1))),e)}return Un(t,e)},Ii.reduce=function(t,e,i){var n=Na(t)?Se:Ue,o=arguments.length<3;return n(t,ar(e,4),i,o,hn)},Ii.reduceRight=function(t,e,i){var n=Na(t)?De:Ue,o=arguments.length<3;return n(t,ar(e,4),i,o,cn)},Ii.repeat=function(t,e,i){return e=(i?fr(t,e,i):e===o)?1:pl(e),qn(fl(t),e)},Ii.replace=function(){var t=arguments,e=fl(t[0]);return t.length<3?e:e.replace(t[1],t[2])},Ii.result=function(t,e,i){var n=-1,r=(e=fo(e,t)).length;for(r||(r=1,t=o);++n<r;){var a=null==t?o:t[Fr(e[n])];a===o&&(n=r,a=i),t=Ja(a)?a.call(t):a}return t},Ii.round=Es,Ii.runInContext=t,Ii.sample=function(t){return(Na(t)?Yi:Yn)(t)},Ii.size=function(t){if(null==t)return 0;if(Ua(t))return al(t)?ui(t):t.length;var e=dr(t);return e==E||e==R?t.size:Dn(t).length},Ii.snakeCase=ql,Ii.some=function(t,e,i){var n=Na(t)?Pe:eo;return i&&fr(t,e,i)&&(e=o),n(t,ar(e,3))},Ii.sortedIndex=function(t,e){return io(t,e)},Ii.sortedIndexBy=function(t,e,i){return no(t,e,ar(i,2))},Ii.sortedIndexOf=function(t,e){var i=null==t?0:t.length;if(i){var n=io(t,e);if(n<i&&Oa(t[n],e))return n}return-1},Ii.sortedLastIndex=function(t,e){return io(t,e,!0)},Ii.sortedLastIndexBy=function(t,e,i){return no(t,e,ar(i,2),!0)},Ii.sortedLastIndexOf=function(t,e){if(null!=t&&t.length){var i=io(t,e,!0)-1;if(Oa(t[i],e))return i}return-1},Ii.startCase=Xl,Ii.startsWith=function(t,e,i){return t=fl(t),i=null==i?0:rn(pl(i),0,t.length),e=ao(e),t.slice(i,i+e.length)==e},Ii.subtract=ys,Ii.sum=function(t){return t&&t.length?qe(t,is):0},Ii.sumBy=function(t,e){return t&&t.length?qe(t,ar(e,2)):0},Ii.template=function(t,e,i){var n=Ii.templateSettings;i&&fr(t,e,i)&&(e=o),t=fl(t),e=wl({},e,n,Jo);var r,a,l=wl({},e.imports,n.imports,Jo),s=Ml(l),u=Je(l,s),h=0,c=e.interpolate||vt,d="__p += '",p=Bt((e.escape||vt).source+"|"+c.source+"|"+(c===Z?ct:vt).source+"|"+(e.evaluate||vt).source+"|$","g"),b="//# sourceURL="+(St.call(e,"sourceURL")?(e.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++ne+"]")+"\n";t.replace(p,(function(e,i,n,o,l,s){return n||(n=o),d+=t.slice(h,s).replace(wt,ii),i&&(r=!0,d+="' +\n__e("+i+") +\n'"),l&&(a=!0,d+="';\n"+l+";\n__p += '"),n&&(d+="' +\n((__t = ("+n+")) == null ? '' : __t) +\n'"),h=s+e.length,e})),d+="';\n";var m=St.call(e,"variable")&&e.variable;if(m){if(ut.test(m))throw new Ct("Invalid `variable` option passed into `_.template`")}else d="with (obj) {\n"+d+"\n}\n";d=(a?d.replace(V,""):d).replace(N,"$1").replace(G,"$1;"),d="function("+(m||"obj")+") {\n"+(m?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(r?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+d+"return __p\n}";var g=Zl((function(){return Et(s,b+"return "+d).apply(o,u)}));if(g.source=d,Ka(g))throw g;return g},Ii.times=function(t,e){if((t=pl(t))<1||t>c)return[];var i=p,n=gi(t,p);e=ar(e),t-=p;for(var o=Xe(n,e);++i<t;)e(i);return o},Ii.toFinite=dl,Ii.toInteger=pl,Ii.toLength=bl,Ii.toLower=function(t){return fl(t).toLowerCase()},Ii.toNumber=ml,Ii.toSafeInteger=function(t){return t?rn(pl(t),-9007199254740991,c):0===t?t:0},Ii.toString=fl,Ii.toUpper=function(t){return fl(t).toUpperCase()},Ii.trim=function(t,e,i){if((t=fl(t))&&(i||e===o))return Ye(t);if(!t||!(e=ao(e)))return t;var n=hi(t),r=hi(e);return vo(n,$e(n,r),Qe(n,r)+1).join("")},Ii.trimEnd=function(t,e,i){if((t=fl(t))&&(i||e===o))return t.slice(0,ci(t)+1);if(!t||!(e=ao(e)))return t;var n=hi(t);return vo(n,0,Qe(n,hi(e))+1).join("")},Ii.trimStart=function(t,e,i){if((t=fl(t))&&(i||e===o))return t.replace(nt,"");if(!t||!(e=ao(e)))return t;var n=hi(t);return vo(n,$e(n,hi(e))).join("")},Ii.truncate=function(t,e){var i=30,n="...";if(Qa(e)){var r="separator"in e?e.separator:r;i="length"in e?pl(e.length):i,n="omission"in e?ao(e.omission):n}var a=(t=fl(t)).length;if(ni(t)){var l=hi(t);a=l.length}if(i>=a)return t;var s=i-ui(n);if(s<1)return n;var u=l?vo(l,0,s).join(""):t.slice(0,s);if(r===o)return u+n;if(l&&(s+=u.length-s),ol(r)){if(t.slice(s).search(r)){var h,c=u;for(r.global||(r=Bt(r.source,fl(dt.exec(r))+"g")),r.lastIndex=0;h=r.exec(c);)var d=h.index;u=u.slice(0,d===o?s:d)}}else if(t.indexOf(ao(r),s)!=s){var p=u.lastIndexOf(r);p>-1&&(u=u.slice(0,p))}return u+n},Ii.unescape=function(t){return(t=fl(t))&&X.test(t)?t.replace(U,di):t},Ii.uniqueId=function(t){var e=++Dt;return fl(t)+e},Ii.upperCase=Yl,Ii.upperFirst=Kl,Ii.each=fa,Ii.eachRight=Aa,Ii.first=Ur,as(Ii,(gs={},An(Ii,(function(t,e){St.call(Ii.prototype,e)||(gs[e]=t)})),gs),{chain:!1}),Ii.VERSION="4.17.21",Be(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){Ii[t].placeholder=Ii})),Be(["drop","take"],(function(t,e){ji.prototype[t]=function(i){i=i===o?1:mi(pl(i),0);var n=this.__filtered__&&!e?new ji(this):this.clone();return n.__filtered__?n.__takeCount__=gi(i,n.__takeCount__):n.__views__.push({size:gi(i,p),type:t+(n.__dir__<0?"Right":"")}),n},ji.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}})),Be(["filter","map","takeWhile"],(function(t,e){var i=e+1,n=1==i||3==i;ji.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:ar(t,3),type:i}),e.__filtered__=e.__filtered__||n,e}})),Be(["head","last"],(function(t,e){var i="take"+(e?"Right":"");ji.prototype[t]=function(){return this[i](1).value()[0]}})),Be(["initial","tail"],(function(t,e){var i="drop"+(e?"":"Right");ji.prototype[t]=function(){return this.__filtered__?new ji(this):this[i](1)}})),ji.prototype.compact=function(){return this.filter(is)},ji.prototype.find=function(t){return this.filter(t).head()},ji.prototype.findLast=function(t){return this.reverse().find(t)},ji.prototype.invokeMap=Xn((function(t,e){return"function"==typeof t?new ji(this):this.map((function(i){return Tn(i,t,e)}))})),ji.prototype.reject=function(t){return this.filter(Da(ar(t)))},ji.prototype.slice=function(t,e){t=pl(t);var i=this;return i.__filtered__&&(t>0||e<0)?new ji(i):(t<0?i=i.takeRight(-t):t&&(i=i.drop(t)),e!==o&&(i=(e=pl(e))<0?i.dropRight(-e):i.take(e-t)),i)},ji.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},ji.prototype.toArray=function(){return this.take(p)},An(ji.prototype,(function(t,e){var i=/^(?:filter|find|map|reject)|While$/.test(e),n=/^(?:head|last)$/.test(e),r=Ii[n?"take"+("last"==e?"Right":""):e],a=n||/^find/.test(e);r&&(Ii.prototype[e]=function(){var e=this.__wrapped__,l=n?[1]:arguments,s=e instanceof ji,u=l[0],h=s||Na(e),c=function(t){var e=r.apply(Ii,Le([t],l));return n&&d?e[0]:e};h&&i&&"function"==typeof u&&1!=u.length&&(s=h=!1);var d=this.__chain__,p=!!this.__actions__.length,b=a&&!d,m=s&&!p;if(!a&&h){e=m?e:new ji(this);var g=t.apply(e,l);return g.__actions__.push({func:da,args:[c],thisArg:o}),new Wi(g,d)}return b&&m?t.apply(this,l):(g=this.thru(c),b?n?g.value()[0]:g.value():g)})})),Be(["pop","push","shift","sort","splice","unshift"],(function(t){var e=Tt[t],i=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",n=/^(?:pop|shift)$/.test(t);Ii.prototype[t]=function(){var t=arguments;if(n&&!this.__chain__){var o=this.value();return e.apply(Na(o)?o:[],t)}return this[i]((function(i){return e.apply(Na(i)?i:[],t)}))}})),An(ji.prototype,(function(t,e){var i=Ii[e];if(i){var n=i.name+"";St.call(Ti,n)||(Ti[n]=[]),Ti[n].push({name:e,func:i})}})),Ti[Ho(o,2).name]=[{name:"wrapper",func:o}],ji.prototype.clone=function(){var t=new ji(this.__wrapped__);return t.__actions__=Ro(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=Ro(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=Ro(this.__views__),t},ji.prototype.reverse=function(){if(this.__filtered__){var t=new ji(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},ji.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,i=Na(t),n=e<0,o=i?t.length:0,r=function(t,e,i){for(var n=-1,o=i.length;++n<o;){var r=i[n],a=r.size;switch(r.type){case"drop":t+=a;break;case"dropRight":e-=a;break;case"take":e=gi(e,t+a);break;case"takeRight":t=mi(t,e-a)}}return{start:t,end:e}}(0,o,this.__views__),a=r.start,l=r.end,s=l-a,u=n?l:a-1,h=this.__iteratees__,c=h.length,d=0,p=gi(s,this.__takeCount__);if(!i||!n&&o==s&&p==s)return co(t,this.__actions__);var b=[];t:for(;s--&&d<p;){for(var m=-1,g=t[u+=e];++m<c;){var f=h[m],A=f.iteratee,v=f.type,w=A(g);if(2==v)g=w;else if(!w){if(1==v)continue t;break t}}b[d++]=g}return b},Ii.prototype.at=pa,Ii.prototype.chain=function(){return ca(this)},Ii.prototype.commit=function(){return new Wi(this.value(),this.__chain__)},Ii.prototype.next=function(){this.__values__===o&&(this.__values__=cl(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?o:this.__values__[this.__index__++]}},Ii.prototype.plant=function(t){for(var e,i=this;i instanceof Oi;){var n=Hr(i);n.__index__=0,n.__values__=o,e?r.__wrapped__=n:e=n;var r=n;i=i.__wrapped__}return r.__wrapped__=t,e},Ii.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof ji){var e=t;return this.__actions__.length&&(e=new ji(this)),(e=e.reverse()).__actions__.push({func:da,args:[Qr],thisArg:o}),new Wi(e,this.__chain__)}return this.thru(Qr)},Ii.prototype.toJSON=Ii.prototype.valueOf=Ii.prototype.value=function(){return co(this.__wrapped__,this.__actions__)},Ii.prototype.first=Ii.prototype.head,Kt&&(Ii.prototype[Kt]=function(){return this}),Ii}();ce._=pi,(n=function(){return pi}.call(e,i,e,t))===o||(t.exports=n)}.call(this)},379:t=>{"use strict";var e=[];function i(t){for(var i=-1,n=0;n<e.length;n++)if(e[n].identifier===t){i=n;break}return i}function n(t,n){for(var r={},a=[],l=0;l<t.length;l++){var s=t[l],u=n.base?s[0]+n.base:s[0],h=r[u]||0,c="".concat(u," ").concat(h);r[u]=h+1;var d=i(c),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==d)e[d].references++,e[d].updater(p);else{var b=o(p,n);n.byIndex=l,e.splice(l,0,{identifier:c,updater:b,references:1})}a.push(c)}return a}function o(t,e){var i=e.domAPI(e);return i.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;i.update(t=e)}else i.remove()}}t.exports=function(t,o){var r=n(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<r.length;a++){var l=i(r[a]);e[l].references--}for(var s=n(t,o),u=0;u<r.length;u++){var h=i(r[u]);0===e[h].references&&(e[h].updater(),e.splice(h,1))}r=s}}},569:t=>{"use strict";var e={};t.exports=function(t,i){var n=function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}e[t]=i}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(i)}},216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,i)=>{"use strict";t.exports=function(t){var e=i.nc;e&&t.setAttribute("nonce",e)}},795:t=>{"use strict";t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(i){!function(t,e,i){var n="";i.supports&&(n+="@supports (".concat(i.supports,") {")),i.media&&(n+="@media ".concat(i.media," {"));var o=void 0!==i.layer;o&&(n+="@layer".concat(i.layer.length>0?" ".concat(i.layer):""," {")),n+=i.css,o&&(n+="}"),i.media&&(n+="}"),i.supports&&(n+="}");var r=i.sourceMap;r&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,i)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function i(n){var o=e[n];if(void 0!==o)return o.exports;var r=e[n]={id:n,loaded:!1,exports:{}};return t[n].call(r.exports,r,r.exports,i),r.loaded=!0,r.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),i.nc=void 0,(()=>{"use strict";var t=i(379),e=i.n(t),n=i(795),o=i.n(n),r=i(569),a=i.n(r),l=i(565),s=i.n(l),u=i(216),h=i.n(u),c=i(589),d=i.n(c),p=i(426),b={};b.styleTagTransform=d(),b.setAttributes=s(),b.insert=a().bind(null,"head"),b.domAPI=o(),b.insertStyleElement=h(),e()(p.Z,b),p.Z&&p.Z.locals&&p.Z.locals,i(486);const m=t=>{document.querySelector(".header__stats-section__list__item__resutl").innerHTML=t};var g=i(534),f=i.n(g),A=[],v=0;const w=(t,e,i)=>({team:t,count:e,properName:i}),C=t=>{let e;switch(!0){case t.includes("anaheim"):e="ducks-logo.png";break;case t.includes("arizona"):e="arizona-logo.png";break;case t.includes("boston"):e="boston-bruins-logo.png";break;case t.includes("buffalo"):e="buffalo-logo.png";break;case t.includes("calgary"):e="calgary-logo.png";break;case t.includes("carolin"):e="carolina-logo.png";break;case t.includes("chicago"):e="chicago-blackhawks-logo.png";break;case t.includes("colorado"):e="colorado-logo.png";break;case t.includes("columbus"):e="columbus-logo.png";break;case t.includes("dallas"):e="dallas-logo.png";break;case t.includes("detroit"):e="detroit-logo.png";break;case t.includes("edmonton"):e="edmonton-logo.png";break;case t.includes("florid"):e="florida-logo.png";break;case t.includes("los angeles"):e="los-angeles-kings-logo.png";break;case t.includes("minnes"):e="minnesota-logo.png";break;case t.includes("montr"):e="montreal-logo.png";break;case t.includes("nash"):e="nashville-logo.png";break;case t.includes("jersey"):e="new-jersey-logo.png";break;case t.includes("islanders"):e="new-york-islanders-logo.png";break;case t.includes("rangers"):e="new-york-rangers-logo.png";break;case t.includes("ottawa"):e="ottawa-logo.png";break;case t.includes("phila"):e="philadelphia-logo.png";break;case t.includes("pitts"):e="pittsburgh-penguins-logo.png";break;case t.includes("san jose"):e="san-jose-logo.png";break;case t.includes("seat"):e="kraken-logo.png";break;case t.includes("louis"):e="st-louis-logo.png";break;case t.includes("tampa"):e="TBL_dark.svg";break;case t.includes("toronto"):e="toronto-logo.png";break;case t.includes("vancouv"):e="vancouver-logo.png";break;case t.includes("vegas"):e="vegas-logo.png";break;case t.includes("wash"):e="washington-capitals-logo.png";break;case t.includes("winnipeg"):e="winnipeg-logo.png"}return e},E=()=>{v++},y=()=>{for(let t in f())A.push(w(f()[t][0],parseInt(f()[t][1]),w(f()[t][2])))},x=t=>{let e=A.find((e=>e.team===t));e&&e.count++},B=()=>{const t=[...A];return t.sort(((t,e)=>e.count-t.count)),t.slice(0,3).map((t=>({team:t.team,count:t.count})))};class k{constructor(t){this.table=t}reloadData(t,e,i){return this.table.dataLoader.load(t,void 0,void 0,void 0,e,i)}langText(){return this.table.modules.localize.getText(...arguments)}langBind(){return this.table.modules.localize.bind(...arguments)}langLocale(){return this.table.modules.localize.getLocale(...arguments)}commsConnections(){return this.table.modules.comms.getConnections(...arguments)}commsSend(){return this.table.modules.comms.send(...arguments)}layoutMode(){return this.table.modules.layout.getMode()}layoutRefresh(t){return this.table.modules.layout.layout(t)}subscribe(){return this.table.eventBus.subscribe(...arguments)}unsubscribe(){return this.table.eventBus.unsubscribe(...arguments)}subscribed(t){return this.table.eventBus.subscribed(t)}subscriptionChange(){return this.table.eventBus.subscriptionChange(...arguments)}dispatch(){return this.table.eventBus.dispatch(...arguments)}chain(){return this.table.eventBus.chain(...arguments)}confirm(){return this.table.eventBus.confirm(...arguments)}dispatchExternal(){return this.table.externalEvents.dispatch(...arguments)}subscribedExternal(t){return this.table.externalEvents.subscribed(t)}subscriptionChangeExternal(){return this.table.externalEvents.subscriptionChange(...arguments)}options(t){return this.table.options[t]}setOption(t,e){return void 0!==e&&(this.table.options[t]=e),this.table.options[t]}deprecationCheck(t,e){return this.table.deprecationAdvisor.check(t,e)}deprecationCheckMsg(t,e){return this.table.deprecationAdvisor.checkMsg(t,e)}deprecationMsg(t){return this.table.deprecationAdvisor.msg(t)}module(t){return this.table.module(t)}}class R{static elVisible(t){return!(t.offsetWidth<=0&&t.offsetHeight<=0)}static elOffset(t){var e=t.getBoundingClientRect();return{top:e.top+window.pageYOffset-document.documentElement.clientTop,left:e.left+window.pageXOffset-document.documentElement.clientLeft}}static deepClone(t,e,i=[]){var n={}.__proto__,o=[].__proto__;for(var r in e||(e=Object.assign(Array.isArray(t)?[]:{},t)),t){let a,l,s=t[r];null==s||"object"!=typeof s||s.__proto__!==n&&s.__proto__!==o||(a=i.findIndex((t=>t.subject===s)),a>-1?e[r]=i[a].copy:(l=Object.assign(Array.isArray(s)?[]:{},s),i.unshift({subject:s,copy:l}),e[r]=this.deepClone(s,l,i)))}return e}}class T extends k{constructor(t,e,i){super(t),this.element=e,this.container=this._lookupContainer(),this.parent=i,this.reversedX=!1,this.childPopup=null,this.blurable=!1,this.blurCallback=null,this.blurEventsBound=!1,this.renderedCallback=null,this.visible=!1,this.hideable=!0,this.element.classList.add("tabulator-popup-container"),this.blurEvent=this.hide.bind(this,!1),this.escEvent=this._escapeCheck.bind(this),this.destroyBinding=this.tableDestroyed.bind(this),this.destroyed=!1}tableDestroyed(){this.destroyed=!0,this.hide(!0)}_lookupContainer(){var t=this.table.options.popupContainer;return"string"==typeof t?(t=document.querySelector(t))||console.warn("Menu Error - no container element found matching selector:",this.table.options.popupContainer,"(defaulting to document body)"):!0===t&&(t=this.table.element),t&&!this._checkContainerIsParent(t)&&(t=!1,console.warn("Menu Error - container element does not contain this table:",this.table.options.popupContainer,"(defaulting to document body)")),t||(t=document.body),t}_checkContainerIsParent(t,e=this.table.element){return t===e||!!e.parentNode&&this._checkContainerIsParent(t,e.parentNode)}renderCallback(t){this.renderedCallback=t}containerEventCoords(t){var e=!(t instanceof MouseEvent),i=e?t.touches[0].pageX:t.pageX,n=e?t.touches[0].pageY:t.pageY;if(this.container!==document.body){let t=R.elOffset(this.container);i-=t.left,n-=t.top}return{x:i,y:n}}elementPositionCoords(t,e="right"){var i,n,o,r=R.elOffset(t);switch(this.container!==document.body&&(i=R.elOffset(this.container),r.left-=i.left,r.top-=i.top),e){case"right":n=r.left+t.offsetWidth,o=r.top-1;break;case"bottom":n=r.left,o=r.top+t.offsetHeight;break;case"left":n=r.left,o=r.top-1;break;case"top":n=r.left,o=r.top;break;case"center":n=r.left+t.offsetWidth/2,o=r.top+t.offsetHeight/2}return{x:n,y:o,offset:r}}show(t,e){var i,n,o,r,a;return this.destroyed||this.table.destroyed||(t instanceof HTMLElement?(o=t,r=(a=this.elementPositionCoords(t,e)).offset,i=a.x,n=a.y):"number"==typeof t?(r={top:0,left:0},i=t,n=e):(i=(a=this.containerEventCoords(t)).x,n=a.y,this.reversedX=!1),this.element.style.top=n+"px",this.element.style.left=i+"px",this.container.appendChild(this.element),"function"==typeof this.renderedCallback&&this.renderedCallback(),this._fitToScreen(i,n,o,r,e),this.visible=!0,this.subscribe("table-destroy",this.destroyBinding),this.element.addEventListener("mousedown",(t=>{t.stopPropagation()}))),this}_fitToScreen(t,e,i,n,o){var r=this.container===document.body?document.documentElement.scrollTop:this.container.scrollTop;(t+this.element.offsetWidth>=this.container.offsetWidth||this.reversedX)&&(this.element.style.left="",this.element.style.right=i?this.container.offsetWidth-n.left+"px":this.container.offsetWidth-t+"px",this.reversedX=!0),e+this.element.offsetHeight>Math.max(this.container.offsetHeight,r?this.container.scrollHeight:0)&&(this.element.style.top=i?"bottom"===o?parseInt(this.element.style.top)-this.element.offsetHeight-i.offsetHeight-1+"px":parseInt(this.element.style.top)-this.element.offsetHeight+i.offsetHeight+1+"px":parseInt(this.element.style.top)-this.element.offsetHeight+"px")}isVisible(){return this.visible}hideOnBlur(t){return this.blurable=!0,this.visible&&(setTimeout((()=>{this.visible&&(this.table.rowManager.element.addEventListener("scroll",this.blurEvent),this.subscribe("cell-editing",this.blurEvent),document.body.addEventListener("click",this.blurEvent),document.body.addEventListener("contextmenu",this.blurEvent),document.body.addEventListener("mousedown",this.blurEvent),window.addEventListener("resize",this.blurEvent),document.body.addEventListener("keydown",this.escEvent),this.blurEventsBound=!0)}),100),this.blurCallback=t),this}_escapeCheck(t){27==t.keyCode&&this.hide()}blockHide(){this.hideable=!1}restoreHide(){this.hideable=!0}hide(t=!1){return this.visible&&this.hideable&&(this.blurable&&this.blurEventsBound&&(document.body.removeEventListener("keydown",this.escEvent),document.body.removeEventListener("click",this.blurEvent),document.body.removeEventListener("contextmenu",this.blurEvent),document.body.removeEventListener("mousedown",this.blurEvent),window.removeEventListener("resize",this.blurEvent),this.table.rowManager.element.removeEventListener("scroll",this.blurEvent),this.unsubscribe("cell-editing",this.blurEvent),this.blurEventsBound=!1),this.childPopup&&this.childPopup.hide(),this.parent&&(this.parent.childPopup=null),this.element.parentNode&&this.element.parentNode.removeChild(this.element),this.visible=!1,this.blurCallback&&!t&&this.blurCallback(),this.unsubscribe("table-destroy",this.destroyBinding)),this}child(t){return this.childPopup&&this.childPopup.hide(),this.childPopup=new T(this.table,t,this),this.childPopup}}class _ extends k{constructor(t,e){super(t),this._handler=null}initialize(){}registerTableOption(t,e){this.table.optionsList.register(t,e)}registerColumnOption(t,e){this.table.columnManager.optionsList.register(t,e)}registerTableFunction(t,e){void 0===this.table[t]?this.table[t]=(...i)=>(this.table.initGuard(t),e(...i)):console.warn("Unable to bind table function, name already in use",t)}registerComponentFunction(t,e,i){return this.table.componentFunctionBinder.bind(t,e,i)}registerDataHandler(t,e){this.table.rowManager.registerDataPipelineHandler(t,e),this._handler=t}registerDisplayHandler(t,e){this.table.rowManager.registerDisplayPipelineHandler(t,e),this._handler=t}displayRows(t){var e,i=this.table.rowManager.displayRows.length-1;if(this._handler&&(e=this.table.rowManager.displayPipeline.findIndex((t=>t.handler===this._handler)))>-1&&(i=e),t&&(i+=t),this._handler)return i>-1?this.table.rowManager.getDisplayRows(i):this.activeRows()}activeRows(){return this.table.rowManager.activeRows}refreshData(t,e){e||(e=this._handler),e&&this.table.rowManager.refreshActiveData(e,!1,t)}footerAppend(t){return this.table.footerManager.append(t)}footerPrepend(t){return this.table.footerManager.prepend(t)}footerRemove(t){return this.table.footerManager.remove(t)}popup(t,e){return new T(this.table,t,e)}alert(t,e){return this.table.alertManager.alert(t,e)}clearAlert(){return this.table.alertManager.clear()}}class M extends _{constructor(t){super(t),this.allowedTypes=["","data","download","clipboard","print","htmlOutput"],this.registerColumnOption("accessor"),this.registerColumnOption("accessorParams"),this.registerColumnOption("accessorData"),this.registerColumnOption("accessorDataParams"),this.registerColumnOption("accessorDownload"),this.registerColumnOption("accessorDownloadParams"),this.registerColumnOption("accessorClipboard"),this.registerColumnOption("accessorClipboardParams"),this.registerColumnOption("accessorPrint"),this.registerColumnOption("accessorPrintParams"),this.registerColumnOption("accessorHtmlOutput"),this.registerColumnOption("accessorHtmlOutputParams")}initialize(){this.subscribe("column-layout",this.initializeColumn.bind(this)),this.subscribe("row-data-retrieve",this.transformRow.bind(this))}initializeColumn(t){var e=!1,i={};this.allowedTypes.forEach((n=>{var o,r="accessor"+(n.charAt(0).toUpperCase()+n.slice(1));t.definition[r]&&(o=this.lookupAccessor(t.definition[r]))&&(e=!0,i[r]={accessor:o,params:t.definition[r+"Params"]||{}})})),e&&(t.modules.accessor=i)}lookupAccessor(t){var e=!1;switch(typeof t){case"string":M.accessors[t]?e=M.accessors[t]:console.warn("Accessor Error - No such accessor found, ignoring: ",t);break;case"function":e=t}return e}transformRow(t,e){var i="accessor"+(e.charAt(0).toUpperCase()+e.slice(1)),n=t.getComponent(),o=R.deepClone(t.data||{});return this.table.columnManager.traverse((function(t){var r,a,l,s;t.modules.accessor&&(a=t.modules.accessor[i]||t.modules.accessor.accessor||!1)&&"undefined"!=(r=t.getFieldValue(o))&&(s=t.getComponent(),l="function"==typeof a.params?a.params(r,o,e,s,n):a.params,t.setFieldValue(o,a.accessor(r,o,e,l,s,n)))})),o}}function z(t,e){var i=[];if(e=e||"",Array.isArray(t))t.forEach(((t,n)=>{i=i.concat(z(t,e?e+"["+n+"]":n))}));else if("object"==typeof t)for(var n in t)i=i.concat(z(t[n],e?e+"["+n+"]":n));else i.push({key:e,value:t});return i}function L(t){var e=z(t),i=[];return e.forEach((function(t){i.push(encodeURIComponent(t.key)+"="+encodeURIComponent(t.value))})),i.join("&")}function S(t,e,i){return t&&i&&Object.keys(i).length&&(e.method&&"get"!=e.method.toLowerCase()||(e.method="get",t+=(t.includes("?")?"&":"?")+L(i))),t}function D(t,e){var i=[];if(e=e||"",Array.isArray(t))t.forEach(((t,n)=>{i=i.concat(D(t,e?e+"["+n+"]":n))}));else if("object"==typeof t)for(var n in t)i=i.concat(D(t[n],e?e+"["+n+"]":n));else i.push({key:e,value:t});return i}M.moduleName="accessor",M.accessors={};var P={json:{headers:{"Content-Type":"application/json"},body:function(t,e,i){return JSON.stringify(i)}},form:{headers:{},body:function(t,e,i){var n=D(i),o=new FormData;return n.forEach((function(t){o.append(t.key,t.value)})),o}}};class F extends _{constructor(t){super(t),this.config={},this.url="",this.urlGenerator=!1,this.params=!1,this.loaderPromise=!1,this.registerTableOption("ajaxURL",!1),this.registerTableOption("ajaxURLGenerator",!1),this.registerTableOption("ajaxParams",{}),this.registerTableOption("ajaxConfig","get"),this.registerTableOption("ajaxContentType","form"),this.registerTableOption("ajaxRequestFunc",!1),this.registerTableOption("ajaxRequesting",(function(){})),this.registerTableOption("ajaxResponse",!1),this.contentTypeFormatters=F.contentTypeFormatters}initialize(){this.loaderPromise=this.table.options.ajaxRequestFunc||F.defaultLoaderPromise,this.urlGenerator=this.table.options.ajaxURLGenerator||F.defaultURLGenerator,this.table.options.ajaxURL&&this.setUrl(this.table.options.ajaxURL),this.setDefaultConfig(this.table.options.ajaxConfig),this.registerTableFunction("getAjaxUrl",this.getUrl.bind(this)),this.subscribe("data-loading",this.requestDataCheck.bind(this)),this.subscribe("data-params",this.requestParams.bind(this)),this.subscribe("data-load",this.requestData.bind(this))}requestParams(t,e,i,n){var o=this.table.options.ajaxParams;return o&&("function"==typeof o&&(o=o.call(this.table)),n=Object.assign(n,o)),n}requestDataCheck(t,e,i,n){return!((t||!this.url)&&"string"!=typeof t)}requestData(t,e,i,n,o){var r;return!o&&this.requestDataCheck(t)?(t&&this.setUrl(t),r=this.generateConfig(i),this.sendRequest(this.url,e,r)):o}setDefaultConfig(t={}){this.config=Object.assign({},F.defaultConfig),"string"==typeof t?this.config.method=t:Object.assign(this.config,t)}generateConfig(t={}){var e=Object.assign({},this.config);return"string"==typeof t?e.method=t:Object.assign(e,t),e}setUrl(t){this.url=t}getUrl(){return this.url}sendRequest(t,e,i){return!1!==this.table.options.ajaxRequesting.call(this.table,t,e)?this.loaderPromise(t,i,e).then((i=>(this.table.options.ajaxResponse&&(i=this.table.options.ajaxResponse.call(this.table,t,e,i)),i))):Promise.reject()}}F.moduleName="ajax",F.defaultConfig={method:"GET"},F.defaultURLGenerator=S,F.defaultLoaderPromise=function(t,e,i){var n;return new Promise(((o,r)=>{if(t=this.urlGenerator.call(this.table,t,e,i),"GET"!=e.method.toUpperCase())if(n="object"==typeof this.table.options.ajaxContentType?this.table.options.ajaxContentType:this.contentTypeFormatters[this.table.options.ajaxContentType]){for(var a in n.headers)e.headers||(e.headers={}),void 0===e.headers[a]&&(e.headers[a]=n.headers[a]);e.body=n.body.call(this,t,e,i)}else console.warn("Ajax Error - Invalid ajaxContentType value:",this.table.options.ajaxContentType);t?(void 0===e.headers&&(e.headers={}),void 0===e.headers.Accept&&(e.headers.Accept="application/json"),void 0===e.headers["X-Requested-With"]&&(e.headers["X-Requested-With"]="XMLHttpRequest"),void 0===e.mode&&(e.mode="cors"),"cors"==e.mode?(void 0===e.headers.Origin&&(e.headers.Origin=window.location.origin),void 0===e.credentials&&(e.credentials="same-origin")):void 0===e.credentials&&(e.credentials="include"),fetch(t,e).then((t=>{t.ok?t.json().then((t=>{o(t)})).catch((t=>{r(t),console.warn("Ajax Load Error - Invalid JSON returned",t)})):(console.error("Ajax Load Error - Connection Error: "+t.status,t.statusText),r(t))})).catch((t=>{console.error("Ajax Load Error - Connection Error: ",t),r(t)}))):(console.warn("Ajax Load Error - No URL Set"),o([]))}))},F.contentTypeFormatters=P;class I extends _{constructor(t){super(t),this.mode=!0,this.pasteParser=function(){},this.pasteAction=function(){},this.customSelection=!1,this.rowRange=!1,this.blocked=!0,this.registerTableOption("clipboard",!1),this.registerTableOption("clipboardCopyStyled",!0),this.registerTableOption("clipboardCopyConfig",!1),this.registerTableOption("clipboardCopyFormatter",!1),this.registerTableOption("clipboardCopyRowRange","active"),this.registerTableOption("clipboardPasteParser","table"),this.registerTableOption("clipboardPasteAction","insert"),this.registerColumnOption("clipboard"),this.registerColumnOption("titleClipboard")}initialize(){this.mode=this.table.options.clipboard,this.rowRange=this.table.options.clipboardCopyRowRange,!0!==this.mode&&"copy"!==this.mode||this.table.element.addEventListener("copy",(t=>{var e,i,n;this.blocked||(t.preventDefault(),this.customSelection?(e=this.customSelection,this.table.options.clipboardCopyFormatter&&(e=this.table.options.clipboardCopyFormatter("plain",e))):(n=this.table.modules.export.generateExportList(this.table.options.clipboardCopyConfig,this.table.options.clipboardCopyStyled,this.rowRange,"clipboard"),e=(i=this.table.modules.export.generateHTMLTable(n))?this.generatePlainContent(n):"",this.table.options.clipboardCopyFormatter&&(e=this.table.options.clipboardCopyFormatter("plain",e),i=this.table.options.clipboardCopyFormatter("html",i))),window.clipboardData&&window.clipboardData.setData?window.clipboardData.setData("Text",e):t.clipboardData&&t.clipboardData.setData?(t.clipboardData.setData("text/plain",e),i&&t.clipboardData.setData("text/html",i)):t.originalEvent&&t.originalEvent.clipboardData.setData&&(t.originalEvent.clipboardData.setData("text/plain",e),i&&t.originalEvent.clipboardData.setData("text/html",i)),this.dispatchExternal("clipboardCopied",e,i),this.reset())})),!0!==this.mode&&"paste"!==this.mode||this.table.element.addEventListener("paste",(t=>{this.paste(t)})),this.setPasteParser(this.table.options.clipboardPasteParser),this.setPasteAction(this.table.options.clipboardPasteAction),this.registerTableFunction("copyToClipboard",this.copy.bind(this))}reset(){this.blocked=!0,this.customSelection=!1}generatePlainContent(t){var e=[];return t.forEach((t=>{var i=[];t.columns.forEach((e=>{var n="";if(e)if("group"===t.type&&(e.value=e.component.getKey()),null===e.value)n="";else switch(typeof e.value){case"object":n=JSON.stringify(e.value);break;case"undefined":n="";break;default:n=e.value}i.push(n)})),e.push(i.join("\t"))})),e.join("\n")}copy(t,e){var i,n;this.blocked=!1,this.customSelection=!1,!0!==this.mode&&"copy"!==this.mode||(this.rowRange=t||this.table.options.clipboardCopyRowRange,void 0!==window.getSelection&&void 0!==document.createRange?((t=document.createRange()).selectNodeContents(this.table.element),(i=window.getSelection()).toString()&&e&&(this.customSelection=i.toString()),i.removeAllRanges(),i.addRange(t)):void 0!==document.selection&&void 0!==document.body.createTextRange&&((n=document.body.createTextRange()).moveToElementText(this.table.element),n.select()),document.execCommand("copy"),i&&i.removeAllRanges())}setPasteAction(t){switch(typeof t){case"string":this.pasteAction=I.pasteActions[t],this.pasteAction||console.warn("Clipboard Error - No such paste action found:",t);break;case"function":this.pasteAction=t}}setPasteParser(t){switch(typeof t){case"string":this.pasteParser=I.pasteParsers[t],this.pasteParser||console.warn("Clipboard Error - No such paste parser found:",t);break;case"function":this.pasteParser=t}}paste(t){var e,i,n;this.checkPaseOrigin(t)&&(e=this.getPasteData(t),(i=this.pasteParser.call(this,e))?(t.preventDefault(),this.table.modExists("mutator")&&(i=this.mutateData(i)),n=this.pasteAction.call(this,i),this.dispatchExternal("clipboardPasted",e,i,n)):this.dispatchExternal("clipboardPasteError",e))}mutateData(t){var e=[];return Array.isArray(t)?t.forEach((t=>{e.push(this.table.modules.mutator.transformRow(t,"clipboard"))})):e=t,e}checkPaseOrigin(t){var e=!0;return("DIV"!=t.target.tagName||this.table.modules.edit.currentCell)&&(e=!1),e}getPasteData(t){var e;return window.clipboardData&&window.clipboardData.getData?e=window.clipboardData.getData("Text"):t.clipboardData&&t.clipboardData.getData?e=t.clipboardData.getData("text/plain"):t.originalEvent&&t.originalEvent.clipboardData.getData&&(e=t.originalEvent.clipboardData.getData("text/plain")),e}}I.moduleName="clipboard",I.pasteActions={replace:function(t){return this.table.setData(t)},update:function(t){return this.table.updateOrAddData(t)},insert:function(t){return this.table.addData(t)}},I.pasteParsers={table:function(t){var e=[],i=!0,n=this.table.columnManager.columns,o=[],r=[];return(t=t.split("\n")).forEach((function(t){e.push(t.split("\t"))})),!(!e.length||1===e.length&&e[0].length<2)&&(e[0].forEach((function(t){var e=n.find((function(e){return t&&e.definition.title&&t.trim()&&e.definition.title.trim()===t.trim()}));e?o.push(e):i=!1})),i||(i=!0,o=[],e[0].forEach((function(t){var e=n.find((function(e){return t&&e.field&&t.trim()&&e.field.trim()===t.trim()}));e?o.push(e):i=!1})),i||(o=this.table.columnManager.columnsByIndex)),i&&e.shift(),e.forEach((function(t){var e={};t.forEach((function(t,i){o[i]&&(e[o[i].field]=t)})),r.push(e)})),r)}};class H{constructor(t){return this._row=t,new Proxy(this,{get:function(t,e,i){return void 0!==t[e]?t[e]:t._row.table.componentFunctionBinder.handle("row",t._row,e)}})}getData(t){return this._row.getData(t)}getElement(){return this._row.getElement()}getTable(){return this._row.table}getCells(){var t=[];return this._row.getCells().forEach((function(e){t.push(e.getComponent())})),t}getCell(t){var e=this._row.getCell(t);return!!e&&e.getComponent()}_getSelf(){return this._row}}class O{constructor(t){return this._cell=t,new Proxy(this,{get:function(t,e,i){return void 0!==t[e]?t[e]:t._cell.table.componentFunctionBinder.handle("cell",t._cell,e)}})}getValue(){return this._cell.getValue()}getOldValue(){return this._cell.getOldValue()}getInitialValue(){return this._cell.initialValue}getElement(){return this._cell.getElement()}getRow(){return this._cell.row.getComponent()}getData(t){return this._cell.row.getData(t)}getType(){return"cell"}getField(){return this._cell.column.getField()}getColumn(){return this._cell.column.getComponent()}setValue(t,e){void 0===e&&(e=!0),this._cell.setValue(t,e)}restoreOldValue(){this._cell.setValueActual(this._cell.getOldValue())}restoreInitialValue(){this._cell.setValueActual(this._cell.initialValue)}checkHeight(){this._cell.checkHeight()}getTable(){return this._cell.table}_getSelf(){return this._cell}}class W extends k{constructor(t,e){super(t.table),this.table=t.table,this.column=t,this.row=e,this.element=null,this.value=null,this.initialValue,this.oldValue=null,this.modules={},this.height=null,this.width=null,this.minWidth=null,this.component=null,this.loaded=!1,this.build()}build(){this.generateElement(),this.setWidth(),this._configureCell(),this.setValueActual(this.column.getFieldValue(this.row.data)),this.initialValue=this.value}generateElement(){this.element=document.createElement("div"),this.element.className="tabulator-cell",this.element.setAttribute("role","gridcell")}_configureCell(){var t=this.element,e=this.column.getField();t.style.textAlign=this.column.hozAlign,this.column.vertAlign&&(t.style.display="inline-flex",t.style.alignItems={top:"flex-start",bottom:"flex-end",middle:"center"}[this.column.vertAlign]||"",this.column.hozAlign&&(t.style.justifyContent={left:"flex-start",right:"flex-end",center:"center"}[this.column.hozAlign]||"")),e&&t.setAttribute("tabulator-field",e),this.column.definition.cssClass&&this.column.definition.cssClass.split(" ").forEach((e=>{t.classList.add(e)})),this.dispatch("cell-init",this),this.column.visible||this.hide()}_generateContents(){var t;switch(typeof(t=this.chain("cell-format",this,null,(()=>this.element.innerHTML=this.value)))){case"object":if(t instanceof Node){for(;this.element.firstChild;)this.element.removeChild(this.element.firstChild);this.element.appendChild(t)}else this.element.innerHTML="",null!=t&&console.warn("Format Error - Formatter has returned a type of object, the only valid formatter object return is an instance of Node, the formatter returned:",t);break;case"undefined":this.element.innerHTML="";break;default:this.element.innerHTML=t}}cellRendered(){this.dispatch("cell-rendered",this)}getElement(t){return this.loaded||(this.loaded=!0,t||this.layoutElement()),this.element}getValue(){return this.value}getOldValue(){return this.oldValue}setValue(t,e,i){this.setValueProcessData(t,e,i)&&(this.dispatch("cell-value-updated",this),this.cellRendered(),this.column.definition.cellEdited&&this.column.definition.cellEdited.call(this.table,this.getComponent()),this.dispatchExternal("cellEdited",this.getComponent()),this.subscribedExternal("dataChanged")&&this.dispatchExternal("dataChanged",this.table.rowManager.getData()))}setValueProcessData(t,e,i){var n=!1;return(this.value!==t||i)&&(n=!0,e&&(t=this.chain("cell-value-changing",[this,t],null,t))),this.setValueActual(t),n&&this.dispatch("cell-value-changed",this),n}setValueActual(t){this.oldValue=this.value,this.value=t,this.dispatch("cell-value-save-before",this),this.column.setFieldValue(this.row.data,t),this.dispatch("cell-value-save-after",this),this.loaded&&this.layoutElement()}layoutElement(){this._generateContents(),this.dispatch("cell-layout",this)}setWidth(){this.width=this.column.width,this.element.style.width=this.column.widthStyled}clearWidth(){this.width="",this.element.style.width=""}getWidth(){return this.width||this.element.offsetWidth}setMinWidth(){this.minWidth=this.column.minWidth,this.element.style.minWidth=this.column.minWidthStyled}setMaxWidth(){this.maxWidth=this.column.maxWidth,this.element.style.maxWidth=this.column.maxWidthStyled}checkHeight(){this.row.reinitializeHeight()}clearHeight(){this.element.style.height="",this.height=null,this.dispatch("cell-height",this,"")}setHeight(){this.height=this.row.height,this.element.style.height=this.row.heightStyled,this.dispatch("cell-height",this,this.row.heightStyled)}getHeight(){return this.height||this.element.offsetHeight}show(){this.element.style.display=this.column.vertAlign?"inline-flex":""}hide(){this.element.style.display="none"}delete(){this.dispatch("cell-delete",this),!this.table.rowManager.redrawBlock&&this.element.parentNode&&this.element.parentNode.removeChild(this.element),this.element=!1,this.column.deleteCell(this),this.row.deleteCell(this),this.calcs={}}getIndex(){return this.row.getCellIndex(this)}getComponent(){return this.component||(this.component=new O(this)),this.component}}class j{constructor(t){return this._column=t,this.type="ColumnComponent",new Proxy(this,{get:function(t,e,i){return void 0!==t[e]?t[e]:t._column.table.componentFunctionBinder.handle("column",t._column,e)}})}getElement(){return this._column.getElement()}getDefinition(){return this._column.getDefinition()}getField(){return this._column.getField()}getTitleDownload(){return this._column.getTitleDownload()}getCells(){var t=[];return this._column.cells.forEach((function(e){t.push(e.getComponent())})),t}isVisible(){return this._column.visible}show(){this._column.isGroup?this._column.columns.forEach((function(t){t.show()})):this._column.show()}hide(){this._column.isGroup?this._column.columns.forEach((function(t){t.hide()})):this._column.hide()}toggle(){this._column.visible?this.hide():this.show()}delete(){return this._column.delete()}getSubColumns(){var t=[];return this._column.columns.length&&this._column.columns.forEach((function(e){t.push(e.getComponent())})),t}getParentColumn(){return this._column.parent instanceof N&&this._column.parent.getComponent()}_getSelf(){return this._column}scrollTo(t,e){return this._column.table.columnManager.scrollToColumn(this._column,t,e)}getTable(){return this._column.table}move(t,e){var i=this._column.table.columnManager.findColumn(t);i?this._column.table.columnManager.moveColumn(this._column,i,e):console.warn("Move Error - No matching column found:",i)}getNextColumn(){var t=this._column.nextColumn();return!!t&&t.getComponent()}getPrevColumn(){var t=this._column.prevColumn();return!!t&&t.getComponent()}updateDefinition(t){return this._column.updateDefinition(t)}getWidth(){return this._column.getWidth()}setWidth(t){var e;return e=!0===t?this._column.reinitializeWidth(!0):this._column.setWidth(t),this._column.table.columnManager.rerenderColumns(!0),e}}var V={title:void 0,field:void 0,columns:void 0,visible:void 0,hozAlign:void 0,vertAlign:void 0,width:void 0,minWidth:40,maxWidth:void 0,maxInitialWidth:void 0,cssClass:void 0,variableHeight:void 0,headerVertical:void 0,headerHozAlign:void 0,headerWordWrap:!1,editableTitle:void 0};class N extends k{constructor(t,e){super(e.table),this.definition=t,this.parent=e,this.type="column",this.columns=[],this.cells=[],this.element=this.createElement(),this.contentElement=!1,this.titleHolderElement=!1,this.titleElement=!1,this.groupElement=this.createGroupElement(),this.isGroup=!1,this.hozAlign="",this.vertAlign="",this.field="",this.fieldStructure="",this.getFieldValue="",this.setFieldValue="",this.titleDownload=null,this.titleFormatterRendered=!1,this.mapDefinitions(),this.setField(this.definition.field),this.modules={},this.width=null,this.widthStyled="",this.maxWidth=null,this.maxWidthStyled="",this.maxInitialWidth=null,this.minWidth=null,this.minWidthStyled="",this.widthFixed=!1,this.visible=!0,this.component=null,this.definition.columns?(this.isGroup=!0,this.definition.columns.forEach(((t,e)=>{var i=new N(t,this);this.attachColumn(i)})),this.checkColumnVisibility()):e.registerColumnField(this),this._initialize()}createElement(){var t=document.createElement("div");switch(t.classList.add("tabulator-col"),t.setAttribute("role","columnheader"),t.setAttribute("aria-sort","none"),this.table.options.columnHeaderVertAlign){case"middle":t.style.justifyContent="center";break;case"bottom":t.style.justifyContent="flex-end"}return t}createGroupElement(){var t=document.createElement("div");return t.classList.add("tabulator-col-group-cols"),t}mapDefinitions(){var t=this.table.options.columnDefaults;if(t)for(let e in t)void 0===this.definition[e]&&(this.definition[e]=t[e]);this.definition=this.table.columnManager.optionsList.generate(N.defaultOptionList,this.definition)}checkDefinition(){Object.keys(this.definition).forEach((t=>{-1===N.defaultOptionList.indexOf(t)&&console.warn("Invalid column definition option in '"+(this.field||this.definition.title)+"' column:",t)}))}setField(t){this.field=t,this.fieldStructure=t?this.table.options.nestedFieldSeparator?t.split(this.table.options.nestedFieldSeparator):[t]:[],this.getFieldValue=this.fieldStructure.length>1?this._getNestedData:this._getFlatData,this.setFieldValue=this.fieldStructure.length>1?this._setNestedData:this._setFlatData}registerColumnPosition(t){this.parent.registerColumnPosition(t)}registerColumnField(t){this.parent.registerColumnField(t)}reRegisterPosition(){this.isGroup?this.columns.forEach((function(t){t.reRegisterPosition()})):this.registerColumnPosition(this)}_initialize(){for(var t=this.definition;this.element.firstChild;)this.element.removeChild(this.element.firstChild);t.headerVertical&&(this.element.classList.add("tabulator-col-vertical"),"flip"===t.headerVertical&&this.element.classList.add("tabulator-col-vertical-flip")),this.contentElement=this._buildColumnHeaderContent(),this.element.appendChild(this.contentElement),this.isGroup?this._buildGroupHeader():this._buildColumnHeader(),this.dispatch("column-init",this)}_buildColumnHeader(){var t=this.definition;this.dispatch("column-layout",this),void 0!==t.visible&&(t.visible?this.show(!0):this.hide(!0)),t.cssClass&&t.cssClass.split(" ").forEach((t=>{this.element.classList.add(t)})),t.field&&this.element.setAttribute("tabulator-field",t.field),this.setMinWidth(parseInt(t.minWidth)),t.maxInitialWidth&&(this.maxInitialWidth=parseInt(t.maxInitialWidth)),t.maxWidth&&this.setMaxWidth(parseInt(t.maxWidth)),this.reinitializeWidth(),this.hozAlign=this.definition.hozAlign,this.vertAlign=this.definition.vertAlign,this.titleElement.style.textAlign=this.definition.headerHozAlign}_buildColumnHeaderContent(){var t=document.createElement("div");return t.classList.add("tabulator-col-content"),this.titleHolderElement=document.createElement("div"),this.titleHolderElement.classList.add("tabulator-col-title-holder"),t.appendChild(this.titleHolderElement),this.titleElement=this._buildColumnHeaderTitle(),this.titleHolderElement.appendChild(this.titleElement),t}_buildColumnHeaderTitle(){var t=this.definition,e=document.createElement("div");if(e.classList.add("tabulator-col-title"),t.headerWordWrap&&e.classList.add("tabulator-col-title-wrap"),t.editableTitle){var i=document.createElement("input");i.classList.add("tabulator-title-editor"),i.addEventListener("click",(t=>{t.stopPropagation(),i.focus()})),i.addEventListener("change",(()=>{t.title=i.value,this.dispatchExternal("columnTitleChanged",this.getComponent())})),e.appendChild(i),t.field?this.langBind("columns|"+t.field,(e=>{i.value=e||t.title||"&nbsp;"})):i.value=t.title||"&nbsp;"}else t.field?this.langBind("columns|"+t.field,(i=>{this._formatColumnHeaderTitle(e,i||t.title||"&nbsp;")})):this._formatColumnHeaderTitle(e,t.title||"&nbsp;");return e}_formatColumnHeaderTitle(t,e){var i=this.chain("column-format",[this,e,t],null,(()=>e));switch(typeof i){case"object":i instanceof Node?t.appendChild(i):(t.innerHTML="",console.warn("Format Error - Title formatter has returned a type of object, the only valid formatter object return is an instance of Node, the formatter returned:",i));break;case"undefined":t.innerHTML="";break;default:t.innerHTML=i}}_buildGroupHeader(){this.element.classList.add("tabulator-col-group"),this.element.setAttribute("role","columngroup"),this.element.setAttribute("aria-title",this.definition.title),this.definition.cssClass&&this.definition.cssClass.split(" ").forEach((t=>{this.element.classList.add(t)})),this.titleElement.style.textAlign=this.definition.headerHozAlign,this.element.appendChild(this.groupElement)}_getFlatData(t){return t[this.field]}_getNestedData(t){var e,i=t,n=this.fieldStructure,o=n.length;for(let t=0;t<o&&(e=i=i[n[t]],i);t++);return e}_setFlatData(t,e){this.field&&(t[this.field]=e)}_setNestedData(t,e){var i=t,n=this.fieldStructure,o=n.length;for(let t=0;t<o;t++)if(t==o-1)i[n[t]]=e;else{if(!i[n[t]]){if(void 0===e)break;i[n[t]]={}}i=i[n[t]]}}attachColumn(t){this.groupElement?(this.columns.push(t),this.groupElement.appendChild(t.getElement()),t.columnRendered()):console.warn("Column Warning - Column being attached to another column instead of column group")}verticalAlign(t,e){var i=this.parent.isGroup?this.parent.getGroupElement().clientHeight:e||this.parent.getHeadersElement().clientHeight;this.element.style.height=i+"px",this.dispatch("column-height",this,this.element.style.height),this.isGroup&&(this.groupElement.style.minHeight=i-this.contentElement.offsetHeight+"px"),this.columns.forEach((function(e){e.verticalAlign(t)}))}clearVerticalAlign(){this.element.style.paddingTop="",this.element.style.height="",this.element.style.minHeight="",this.groupElement.style.minHeight="",this.columns.forEach((function(t){t.clearVerticalAlign()})),this.dispatch("column-height",this,"")}getElement(){return this.element}getGroupElement(){return this.groupElement}getField(){return this.field}getTitleDownload(){return this.titleDownload}getFirstColumn(){return this.isGroup?!!this.columns.length&&this.columns[0].getFirstColumn():this}getLastColumn(){return this.isGroup?!!this.columns.length&&this.columns[this.columns.length-1].getLastColumn():this}getColumns(t){var e=[];return t?this.columns.forEach((t=>{e.push(t),e=e.concat(t.getColumns(!0))})):e=this.columns,e}getCells(){return this.cells}getTopColumn(){return this.parent.isGroup?this.parent.getTopColumn():this}getDefinition(t){var e=[];return this.isGroup&&t&&(this.columns.forEach((function(t){e.push(t.getDefinition(!0))})),this.definition.columns=e),this.definition}checkColumnVisibility(){var t=!1;this.columns.forEach((function(e){e.visible&&(t=!0)})),t?(this.show(),this.dispatchExternal("columnVisibilityChanged",this.getComponent(),!1)):this.hide()}show(t,e){this.visible||(this.visible=!0,this.element.style.display="",this.parent.isGroup&&this.parent.checkColumnVisibility(),this.cells.forEach((function(t){t.show()})),this.isGroup||null!==this.width||this.reinitializeWidth(),this.table.columnManager.verticalAlignHeaders(),this.dispatch("column-show",this,e),t||this.dispatchExternal("columnVisibilityChanged",this.getComponent(),!0),this.parent.isGroup&&this.parent.matchChildWidths(),this.silent||this.table.columnManager.rerenderColumns())}hide(t,e){this.visible&&(this.visible=!1,this.element.style.display="none",this.table.columnManager.verticalAlignHeaders(),this.parent.isGroup&&this.parent.checkColumnVisibility(),this.cells.forEach((function(t){t.hide()})),this.dispatch("column-hide",this,e),t||this.dispatchExternal("columnVisibilityChanged",this.getComponent(),!1),this.parent.isGroup&&this.parent.matchChildWidths(),this.silent||this.table.columnManager.rerenderColumns())}matchChildWidths(){var t=0;this.contentElement&&this.columns.length&&(this.columns.forEach((function(e){e.visible&&(t+=e.getWidth())})),this.contentElement.style.maxWidth=t-1+"px",this.parent.isGroup&&this.parent.matchChildWidths())}removeChild(t){var e=this.columns.indexOf(t);e>-1&&this.columns.splice(e,1),this.columns.length||this.delete()}setWidth(t){this.widthFixed=!0,this.setWidthActual(t)}setWidthActual(t){isNaN(t)&&(t=Math.floor(this.table.element.clientWidth/100*parseInt(t))),t=Math.max(this.minWidth,t),this.maxWidth&&(t=Math.min(this.maxWidth,t)),this.width=t,this.widthStyled=t?t+"px":"",this.element.style.width=this.widthStyled,this.isGroup||this.cells.forEach((function(t){t.setWidth()})),this.parent.isGroup&&this.parent.matchChildWidths(),this.dispatch("column-width",this)}checkCellHeights(){var t=[];this.cells.forEach((function(e){e.row.heightInitialized&&(null!==e.row.getElement().offsetParent?(t.push(e.row),e.row.clearCellHeight()):e.row.heightInitialized=!1)})),t.forEach((function(t){t.calcHeight()})),t.forEach((function(t){t.setCellHeight()}))}getWidth(){var t=0;return this.isGroup?this.columns.forEach((function(e){e.visible&&(t+=e.getWidth())})):t=this.width,t}getLeftOffset(){var t=this.element.offsetLeft;return this.parent.isGroup&&(t+=this.parent.getLeftOffset()),t}getHeight(){return Math.ceil(this.element.getBoundingClientRect().height)}setMinWidth(t){this.maxWidth&&t>this.maxWidth&&(t=this.maxWidth,console.warn("the minWidth ("+t+"px) for column '"+this.field+"' cannot be bigger that its maxWidth ("+this.maxWidthStyled+")")),this.minWidth=t,this.minWidthStyled=t?t+"px":"",this.element.style.minWidth=this.minWidthStyled,this.cells.forEach((function(t){t.setMinWidth()}))}setMaxWidth(t){this.minWidth&&t<this.minWidth&&(t=this.minWidth,console.warn("the maxWidth ("+t+"px) for column '"+this.field+"' cannot be smaller that its minWidth ("+this.minWidthStyled+")")),this.maxWidth=t,this.maxWidthStyled=t?t+"px":"",this.element.style.maxWidth=this.maxWidthStyled,this.cells.forEach((function(t){t.setMaxWidth()}))}delete(){return new Promise(((t,e)=>{this.isGroup&&this.columns.forEach((function(t){t.delete()})),this.dispatch("column-delete",this);var i=this.cells.length;for(let t=0;t<i;t++)this.cells[0].delete();this.element.parentNode&&this.element.parentNode.removeChild(this.element),this.element=!1,this.contentElement=!1,this.titleElement=!1,this.groupElement=!1,this.parent.isGroup&&this.parent.removeChild(this),this.table.columnManager.deregisterColumn(this),this.table.columnManager.rerenderColumns(!0),t()}))}columnRendered(){this.titleFormatterRendered&&this.titleFormatterRendered(),this.dispatch("column-rendered",this)}generateCell(t){var e=new W(this,t);return this.cells.push(e),e}nextColumn(){var t=this.table.columnManager.findColumnIndex(this);return t>-1&&this._nextVisibleColumn(t+1)}_nextVisibleColumn(t){var e=this.table.columnManager.getColumnByIndex(t);return!e||e.visible?e:this._nextVisibleColumn(t+1)}prevColumn(){var t=this.table.columnManager.findColumnIndex(this);return t>-1&&this._prevVisibleColumn(t-1)}_prevVisibleColumn(t){var e=this.table.columnManager.getColumnByIndex(t);return!e||e.visible?e:this._prevVisibleColumn(t-1)}reinitializeWidth(t){this.widthFixed=!1,void 0===this.definition.width||t||this.setWidth(this.definition.width),this.dispatch("column-width-fit-before",this),this.fitToData(t),this.dispatch("column-width-fit-after",this)}fitToData(t){if(!this.isGroup){this.widthFixed||(this.element.style.width="",this.cells.forEach((t=>{t.clearWidth()})));var e=this.element.offsetWidth;if((!this.width||!this.widthFixed)&&(this.cells.forEach((t=>{var i=t.getWidth();i>e&&(e=i)})),e)){var i=e+1;this.maxInitialWidth&&!t&&(i=Math.min(i,this.maxInitialWidth)),this.setWidthActual(i)}}}updateDefinition(t){var e;return this.isGroup||this.parent.isGroup?(console.error("Column Update Error - The updateDefinition function is only available on ungrouped columns"),Promise.reject("Column Update Error - The updateDefinition function is only available on columns, not column groups")):(e=Object.assign({},this.getDefinition()),e=Object.assign(e,t),this.table.columnManager.addColumn(e,!1,this).then((t=>(e.field==this.field&&(this.field=!1),this.delete().then((()=>t.getComponent()))))))}deleteCell(t){var e=this.cells.indexOf(t);e>-1&&this.cells.splice(e,1)}getComponent(){return this.component||(this.component=new j(this)),this.component}}N.defaultOptionList=V;class G{constructor(t){return this._row=t,new Proxy(this,{get:function(t,e,i){return void 0!==t[e]?t[e]:t._row.table.componentFunctionBinder.handle("row",t._row,e)}})}getData(t){return this._row.getData(t)}getElement(){return this._row.getElement()}getCells(){var t=[];return this._row.getCells().forEach((function(e){t.push(e.getComponent())})),t}getCell(t){var e=this._row.getCell(t);return!!e&&e.getComponent()}getIndex(){return this._row.getData("data")[this._row.table.options.index]}getPosition(){return this._row.getPosition()}watchPosition(t){return this._row.watchPosition(t)}delete(){return this._row.delete()}scrollTo(t,e){return this._row.table.rowManager.scrollToRow(this._row,t,e)}move(t,e){this._row.moveToRow(t,e)}update(t){return this._row.updateData(t)}normalizeHeight(){this._row.normalizeHeight(!0)}_getSelf(){return this._row}reformat(){return this._row.reinitialize()}getTable(){return this._row.table}getNextRow(){var t=this._row.nextRow();return t?t.getComponent():t}getPrevRow(){var t=this._row.prevRow();return t?t.getComponent():t}}class U extends k{constructor(t,e,i="row"){super(e.table),this.parent=e,this.data={},this.type=i,this.element=!1,this.modules={},this.cells=[],this.height=0,this.heightStyled="",this.manualHeight=!1,this.outerHeight=0,this.initialized=!1,this.heightInitialized=!1,this.position=0,this.positionWatchers=[],this.component=null,this.created=!1,this.setData(t)}create(){this.created||(this.created=!0,this.generateElement())}createElement(){var t=document.createElement("div");t.classList.add("tabulator-row"),t.setAttribute("role","row"),this.element=t}getElement(){return this.create(),this.element}detachElement(){this.element&&this.element.parentNode&&this.element.parentNode.removeChild(this.element)}generateElement(){this.createElement(),this.dispatch("row-init",this)}generateCells(){this.cells=this.table.columnManager.generateCells(this)}initialize(t,e){if(this.create(),!this.initialized||t){for(this.deleteCells();this.element.firstChild;)this.element.removeChild(this.element.firstChild);this.dispatch("row-layout-before",this),this.generateCells(),this.initialized=!0,this.table.columnManager.renderer.renderRowCells(this,e),t&&this.normalizeHeight(),this.dispatch("row-layout",this),this.table.options.rowFormatter&&this.table.options.rowFormatter(this.getComponent()),this.dispatch("row-layout-after",this)}else this.table.columnManager.renderer.rerenderRowCells(this,e)}rendered(){this.cells.forEach((t=>{t.cellRendered()}))}reinitializeHeight(){this.heightInitialized=!1,this.element&&null!==this.element.offsetParent&&this.normalizeHeight(!0)}deinitialize(){this.initialized=!1}deinitializeHeight(){this.heightInitialized=!1}reinitialize(t){this.initialized=!1,this.heightInitialized=!1,this.manualHeight||(this.height=0,this.heightStyled=""),this.element&&null!==this.element.offsetParent&&this.initialize(!0),this.dispatch("row-relayout",this)}calcHeight(t){var e,i=0;this.table.options.rowHeight?this.height=this.table.options.rowHeight:(e=this.table.options.resizableRows?this.element.clientHeight:0,this.cells.forEach((function(t){var e=t.getHeight();e>i&&(i=e)})),this.height=t?Math.max(i,e):this.manualHeight?this.height:Math.max(i,e)),this.heightStyled=this.height?this.height+"px":"",this.outerHeight=this.element.offsetHeight}setCellHeight(){this.cells.forEach((function(t){t.setHeight()})),this.heightInitialized=!0}clearCellHeight(){this.cells.forEach((function(t){t.clearHeight()}))}normalizeHeight(t){t&&!this.table.options.rowHeight&&this.clearCellHeight(),this.calcHeight(t),this.setCellHeight()}setHeight(t,e){(this.height!=t||e)&&(this.manualHeight=!0,this.height=t,this.heightStyled=t?t+"px":"",this.setCellHeight(),this.outerHeight=this.element.offsetHeight)}getHeight(){return this.outerHeight}getWidth(){return this.element.offsetWidth}deleteCell(t){var e=this.cells.indexOf(t);e>-1&&this.cells.splice(e,1)}setData(t){this.data=this.chain("row-data-init-before",[this,t],void 0,t),this.dispatch("row-data-init-after",this)}updateData(t){var e,i=this.element&&R.elVisible(this.element),n={};return new Promise(((o,r)=>{"string"==typeof t&&(t=JSON.parse(t)),this.dispatch("row-data-save-before",this),this.subscribed("row-data-changing")&&(n=Object.assign(n,this.data),n=Object.assign(n,t)),e=this.chain("row-data-changing",[this,n,t],null,t);for(let t in e)this.data[t]=e[t];this.dispatch("row-data-save-after",this);for(let n in t)this.table.columnManager.getColumnsByFieldRoot(n).forEach((t=>{let n=this.getCell(t.getField());if(n){let o=t.getFieldValue(e);n.getValue()!==o&&(n.setValueProcessData(o),i&&n.cellRendered())}}));i?(this.normalizeHeight(!0),this.table.options.rowFormatter&&this.table.options.rowFormatter(this.getComponent())):(this.initialized=!1,this.height=0,this.heightStyled=""),this.dispatch("row-data-changed",this,i,t),this.dispatchExternal("rowUpdated",this.getComponent()),this.subscribedExternal("dataChanged")&&this.dispatchExternal("dataChanged",this.table.rowManager.getData()),o()}))}getData(t){return t?this.chain("row-data-retrieve",[this,t],null,this.data):this.data}getCell(t){return t=this.table.columnManager.findColumn(t),this.initialized||0!==this.cells.length||this.generateCells(),this.cells.find((function(e){return e.column===t}))}getCellIndex(t){return this.cells.findIndex((function(e){return e===t}))}findCell(t){return this.cells.find((e=>e.element===t))}getCells(){return this.initialized||0!==this.cells.length||this.generateCells(),this.cells}nextRow(){return this.table.rowManager.nextDisplayRow(this,!0)||!1}prevRow(){return this.table.rowManager.prevDisplayRow(this,!0)||!1}moveToRow(t,e){var i=this.table.rowManager.findRow(t);i?(this.table.rowManager.moveRowActual(this,i,!e),this.table.rowManager.refreshActiveData("display",!1,!0)):console.warn("Move Error - No matching row found:",t)}delete(){return this.dispatch("row-delete",this),this.deleteActual(),Promise.resolve()}deleteActual(t){this.detachModules(),this.table.rowManager.deleteRow(this,t),this.deleteCells(),this.initialized=!1,this.heightInitialized=!1,this.element=!1,this.dispatch("row-deleted",this)}detachModules(){this.dispatch("row-deleting",this)}deleteCells(){var t=this.cells.length;for(let e=0;e<t;e++)this.cells[0].delete()}wipe(){if(this.detachModules(),this.deleteCells(),this.element){for(;this.element.firstChild;)this.element.removeChild(this.element.firstChild);this.element.parentNode&&this.element.parentNode.removeChild(this.element)}this.element=!1,this.modules={}}isDisplayed(){return this.table.rowManager.getDisplayRows().includes(this)}getPosition(){return!!this.isDisplayed()&&this.position}setPosition(t){t!=this.position&&(this.position=t,this.positionWatchers.forEach((t=>{t(this.position)})))}watchPosition(t){this.positionWatchers.push(t),t(this.position)}getGroup(){return this.modules.group||!1}getComponent(){return this.component||(this.component=new G(this)),this.component}}var q={avg:function(t,e,i){var n=0,o=void 0!==i.precision?i.precision:2;return t.length&&(n=t.reduce((function(t,e){return Number(t)+Number(e)})),n/=t.length,n=!1!==o?n.toFixed(o):n),parseFloat(n).toString()},max:function(t,e,i){var n=null,o=void 0!==i.precision&&i.precision;return t.forEach((function(t){((t=Number(t))>n||null===n)&&(n=t)})),null!==n?!1!==o?n.toFixed(o):n:""},min:function(t,e,i){var n=null,o=void 0!==i.precision&&i.precision;return t.forEach((function(t){((t=Number(t))<n||null===n)&&(n=t)})),null!==n?!1!==o?n.toFixed(o):n:""},sum:function(t,e,i){var n=0,o=void 0!==i.precision&&i.precision;return t.length&&t.forEach((function(t){t=Number(t),n+=isNaN(t)?0:Number(t)})),!1!==o?n.toFixed(o):n},concat:function(t,e,i){var n=0;return t.length&&(n=t.reduce((function(t,e){return String(t)+String(e)}))),n},count:function(t,e,i){var n=0;return t.length&&t.forEach((function(t){t&&n++})),n},unique:function(t,e,i){return t.filter(((e,i)=>(t||0===e)&&t.indexOf(e)===i)).length}};class X extends _{constructor(t){super(t),this.topCalcs=[],this.botCalcs=[],this.genColumn=!1,this.topElement=this.createElement(),this.botElement=this.createElement(),this.topRow=!1,this.botRow=!1,this.topInitialized=!1,this.botInitialized=!1,this.blocked=!1,this.recalcAfterBlock=!1,this.registerTableOption("columnCalcs",!0),this.registerColumnOption("topCalc"),this.registerColumnOption("topCalcParams"),this.registerColumnOption("topCalcFormatter"),this.registerColumnOption("topCalcFormatterParams"),this.registerColumnOption("bottomCalc"),this.registerColumnOption("bottomCalcParams"),this.registerColumnOption("bottomCalcFormatter"),this.registerColumnOption("bottomCalcFormatterParams")}createElement(){var t=document.createElement("div");return t.classList.add("tabulator-calcs-holder"),t}initialize(){this.genColumn=new N({field:"value"},this),this.subscribe("cell-value-changed",this.cellValueChanged.bind(this)),this.subscribe("column-init",this.initializeColumnCheck.bind(this)),this.subscribe("row-deleted",this.rowsUpdated.bind(this)),this.subscribe("scroll-horizontal",this.scrollHorizontal.bind(this)),this.subscribe("row-added",this.rowsUpdated.bind(this)),this.subscribe("column-moved",this.recalcActiveRows.bind(this)),this.subscribe("column-add",this.recalcActiveRows.bind(this)),this.subscribe("data-refreshed",this.recalcActiveRowsRefresh.bind(this)),this.subscribe("table-redraw",this.tableRedraw.bind(this)),this.subscribe("rows-visible",this.visibleRows.bind(this)),this.subscribe("scrollbar-vertical",this.adjustForScrollbar.bind(this)),this.subscribe("redraw-blocked",this.blockRedraw.bind(this)),this.subscribe("redraw-restored",this.restoreRedraw.bind(this)),this.subscribe("table-redrawing",this.resizeHolderWidth.bind(this)),this.subscribe("column-resized",this.resizeHolderWidth.bind(this)),this.subscribe("column-show",this.resizeHolderWidth.bind(this)),this.subscribe("column-hide",this.resizeHolderWidth.bind(this)),this.registerTableFunction("getCalcResults",this.getResults.bind(this)),this.registerTableFunction("recalc",this.userRecalc.bind(this)),this.resizeHolderWidth()}resizeHolderWidth(){this.topElement.style.minWidth=this.table.columnManager.headersElement.offsetWidth+"px"}tableRedraw(t){this.recalc(this.table.rowManager.activeRows),t&&this.redraw()}blockRedraw(){this.blocked=!0,this.recalcAfterBlock=!1}restoreRedraw(){this.blocked=!1,this.recalcAfterBlock&&(this.recalcAfterBlock=!1,this.recalcActiveRowsRefresh())}userRecalc(){this.recalc(this.table.rowManager.activeRows)}blockCheck(){return this.blocked&&(this.recalcAfterBlock=!0),this.blocked}visibleRows(t,e){return this.topRow&&e.unshift(this.topRow),this.botRow&&e.push(this.botRow),e}rowsUpdated(t){this.table.options.groupBy?this.recalcRowGroup(t):this.recalcActiveRows()}recalcActiveRowsRefresh(){this.table.options.groupBy&&this.table.options.dataTreeStartExpanded&&this.table.options.dataTree?this.recalcAll():this.recalcActiveRows()}recalcActiveRows(){this.recalc(this.table.rowManager.activeRows)}cellValueChanged(t){(t.column.definition.topCalc||t.column.definition.bottomCalc)&&(this.table.options.groupBy?("table"!=this.table.options.columnCalcs&&"both"!=this.table.options.columnCalcs||this.recalcActiveRows(),"table"!=this.table.options.columnCalcs&&this.recalcRowGroup(t.row)):this.recalcActiveRows())}initializeColumnCheck(t){(t.definition.topCalc||t.definition.bottomCalc)&&this.initializeColumn(t)}initializeColumn(t){var e=t.definition,i={topCalcParams:e.topCalcParams||{},botCalcParams:e.bottomCalcParams||{}};if(e.topCalc){switch(typeof e.topCalc){case"string":X.calculations[e.topCalc]?i.topCalc=X.calculations[e.topCalc]:console.warn("Column Calc Error - No such calculation found, ignoring: ",e.topCalc);break;case"function":i.topCalc=e.topCalc}i.topCalc&&(t.modules.columnCalcs=i,this.topCalcs.push(t),"group"!=this.table.options.columnCalcs&&this.initializeTopRow())}if(e.bottomCalc){switch(typeof e.bottomCalc){case"string":X.calculations[e.bottomCalc]?i.botCalc=X.calculations[e.bottomCalc]:console.warn("Column Calc Error - No such calculation found, ignoring: ",e.bottomCalc);break;case"function":i.botCalc=e.bottomCalc}i.botCalc&&(t.modules.columnCalcs=i,this.botCalcs.push(t),"group"!=this.table.options.columnCalcs&&this.initializeBottomRow())}}registerColumnField(){}removeCalcs(){var t=!1;this.topInitialized&&(this.topInitialized=!1,this.topElement.parentNode.removeChild(this.topElement),t=!0),this.botInitialized&&(this.botInitialized=!1,this.footerRemove(this.botElement),t=!0),t&&this.table.rowManager.adjustTableSize()}reinitializeCalcs(){this.topCalcs.length&&this.initializeTopRow(),this.botCalcs.length&&this.initializeBottomRow()}initializeTopRow(){this.topInitialized||(this.table.columnManager.getContentsElement().insertBefore(this.topElement,this.table.columnManager.headersElement.nextSibling),this.topInitialized=!0)}initializeBottomRow(){this.botInitialized||(this.footerPrepend(this.botElement),this.botInitialized=!0)}scrollHorizontal(t){this.botInitialized&&this.botRow&&(this.botElement.scrollLeft=t)}recalc(t){var e,i;if(!this.blockCheck()&&(this.topInitialized||this.botInitialized)){if(e=this.rowsToData(t),this.topInitialized){for(this.topRow&&this.topRow.deleteCells(),i=this.generateRow("top",e),this.topRow=i;this.topElement.firstChild;)this.topElement.removeChild(this.topElement.firstChild);this.topElement.appendChild(i.getElement()),i.initialize(!0)}if(this.botInitialized){for(this.botRow&&this.botRow.deleteCells(),i=this.generateRow("bottom",e),this.botRow=i;this.botElement.firstChild;)this.botElement.removeChild(this.botElement.firstChild);this.botElement.appendChild(i.getElement()),i.initialize(!0)}this.table.rowManager.adjustTableSize(),this.table.modExists("frozenColumns")&&this.table.modules.frozenColumns.layout()}}recalcRowGroup(t){this.recalcGroup(this.table.modules.groupRows.getRowGroup(t))}recalcAll(){(this.topCalcs.length||this.botCalcs.length)&&("group"!==this.table.options.columnCalcs&&this.recalcActiveRows(),this.table.options.groupBy&&"table"!==this.table.options.columnCalcs&&this.table.modules.groupRows.getChildGroups().forEach((t=>{this.recalcGroup(t)})))}recalcGroup(t){var e,i;this.blockCheck()||t&&t.calcs&&(t.calcs.bottom&&(e=this.rowsToData(t.rows),i=this.generateRowData("bottom",e),t.calcs.bottom.updateData(i),t.calcs.bottom.reinitialize()),t.calcs.top&&(e=this.rowsToData(t.rows),i=this.generateRowData("top",e),t.calcs.top.updateData(i),t.calcs.top.reinitialize()))}generateTopRow(t){return this.generateRow("top",this.rowsToData(t))}generateBottomRow(t){return this.generateRow("bottom",this.rowsToData(t))}rowsToData(t){var e=[];return t.forEach((t=>{if(e.push(t.getData()),this.table.options.dataTree&&this.table.options.dataTreeChildColumnCalcs&&t.modules.dataTree&&t.modules.dataTree.open){var i=this.rowsToData(this.table.modules.dataTree.getFilteredTreeChildren(t));e=e.concat(i)}})),e}generateRow(t,e){var i,n=this.generateRowData(t,e);return this.table.modExists("mutator")&&this.table.modules.mutator.disable(),i=new U(n,this,"calc"),this.table.modExists("mutator")&&this.table.modules.mutator.enable(),i.getElement().classList.add("tabulator-calcs","tabulator-calcs-"+t),i.component=!1,i.getComponent=()=>(i.component||(i.component=new H(i)),i.component),i.generateCells=()=>{var e=[];this.table.columnManager.columnsByIndex.forEach((n=>{this.genColumn.setField(n.getField()),this.genColumn.hozAlign=n.hozAlign,n.definition[t+"CalcFormatter"]&&this.table.modExists("format")?this.genColumn.modules.format={formatter:this.table.modules.format.getFormatter(n.definition[t+"CalcFormatter"]),params:n.definition[t+"CalcFormatterParams"]||{}}:this.genColumn.modules.format={formatter:this.table.modules.format.getFormatter("plaintext"),params:{}},this.genColumn.definition.cssClass=n.definition.cssClass;var o=new W(this.genColumn,i);o.getElement(),o.column=n,o.setWidth(),n.cells.push(o),e.push(o),n.visible||o.hide()})),i.cells=e},i}generateRowData(t,e){var i,n,o={},r="top"==t?this.topCalcs:this.botCalcs,a="top"==t?"topCalc":"botCalc";return r.forEach((function(t){var r=[];t.modules.columnCalcs&&t.modules.columnCalcs[a]&&(e.forEach((function(e){r.push(t.getFieldValue(e))})),n=a+"Params",i="function"==typeof t.modules.columnCalcs[n]?t.modules.columnCalcs[n](r,e):t.modules.columnCalcs[n],t.setFieldValue(o,t.modules.columnCalcs[a](r,e,i)))})),o}hasTopCalcs(){return!!this.topCalcs.length}hasBottomCalcs(){return!!this.botCalcs.length}redraw(){this.topRow&&this.topRow.normalizeHeight(!0),this.botRow&&this.botRow.normalizeHeight(!0)}getResults(){var t={};return this.table.options.groupBy&&this.table.modExists("groupRows")?this.table.modules.groupRows.getGroups(!0).forEach((e=>{t[e.getKey()]=this.getGroupResults(e)})):t={top:this.topRow?this.topRow.getData():{},bottom:this.botRow?this.botRow.getData():{}},t}getGroupResults(t){var e=t._getSelf(),i=t.getSubGroups(),n={};return i.forEach((t=>{n[t.getKey()]=this.getGroupResults(t)})),{top:e.calcs.top?e.calcs.top.getData():{},bottom:e.calcs.bottom?e.calcs.bottom.getData():{},groups:n}}adjustForScrollbar(t){this.botRow&&(this.table.rtl?this.botElement.style.paddingLeft=t+"px":this.botElement.style.paddingRight=t+"px")}}X.moduleName="columnCalcs",X.calculations=q;class Y extends _{constructor(t){super(t),this.indent=10,this.field="",this.collapseEl=null,this.expandEl=null,this.branchEl=null,this.elementField=!1,this.startOpen=function(){},this.registerTableOption("dataTree",!1),this.registerTableOption("dataTreeFilter",!0),this.registerTableOption("dataTreeSort",!0),this.registerTableOption("dataTreeElementColumn",!1),this.registerTableOption("dataTreeBranchElement",!0),this.registerTableOption("dataTreeChildIndent",9),this.registerTableOption("dataTreeChildField","_children"),this.registerTableOption("dataTreeCollapseElement",!1),this.registerTableOption("dataTreeExpandElement",!1),this.registerTableOption("dataTreeStartExpanded",!1),this.registerTableOption("dataTreeChildColumnCalcs",!1),this.registerTableOption("dataTreeSelectPropagate",!1),this.registerComponentFunction("row","treeCollapse",this.collapseRow.bind(this)),this.registerComponentFunction("row","treeExpand",this.expandRow.bind(this)),this.registerComponentFunction("row","treeToggle",this.toggleRow.bind(this)),this.registerComponentFunction("row","getTreeParent",this.getTreeParent.bind(this)),this.registerComponentFunction("row","getTreeChildren",this.getRowChildren.bind(this)),this.registerComponentFunction("row","addTreeChild",this.addTreeChildRow.bind(this)),this.registerComponentFunction("row","isTreeExpanded",this.isRowExpanded.bind(this))}initialize(){if(this.table.options.dataTree){var t=null,e=this.table.options;switch(this.field=e.dataTreeChildField,this.indent=e.dataTreeChildIndent,this.options("movableRows")&&console.warn("The movableRows option is not available with dataTree enabled, moving of child rows could result in unpredictable behavior"),e.dataTreeBranchElement?!0===e.dataTreeBranchElement?(this.branchEl=document.createElement("div"),this.branchEl.classList.add("tabulator-data-tree-branch")):"string"==typeof e.dataTreeBranchElement?((t=document.createElement("div")).innerHTML=e.dataTreeBranchElement,this.branchEl=t.firstChild):this.branchEl=e.dataTreeBranchElement:(this.branchEl=document.createElement("div"),this.branchEl.classList.add("tabulator-data-tree-branch-empty")),e.dataTreeCollapseElement?"string"==typeof e.dataTreeCollapseElement?((t=document.createElement("div")).innerHTML=e.dataTreeCollapseElement,this.collapseEl=t.firstChild):this.collapseEl=e.dataTreeCollapseElement:(this.collapseEl=document.createElement("div"),this.collapseEl.classList.add("tabulator-data-tree-control"),this.collapseEl.tabIndex=0,this.collapseEl.innerHTML="<div class='tabulator-data-tree-control-collapse'></div>"),e.dataTreeExpandElement?"string"==typeof e.dataTreeExpandElement?((t=document.createElement("div")).innerHTML=e.dataTreeExpandElement,this.expandEl=t.firstChild):this.expandEl=e.dataTreeExpandElement:(this.expandEl=document.createElement("div"),this.expandEl.classList.add("tabulator-data-tree-control"),this.expandEl.tabIndex=0,this.expandEl.innerHTML="<div class='tabulator-data-tree-control-expand'></div>"),typeof e.dataTreeStartExpanded){case"boolean":this.startOpen=function(t,i){return e.dataTreeStartExpanded};break;case"function":this.startOpen=e.dataTreeStartExpanded;break;default:this.startOpen=function(t,i){return e.dataTreeStartExpanded[i]}}this.subscribe("row-init",this.initializeRow.bind(this)),this.subscribe("row-layout-after",this.layoutRow.bind(this)),this.subscribe("row-deleted",this.rowDelete.bind(this),0),this.subscribe("row-data-changed",this.rowDataChanged.bind(this),10),this.subscribe("cell-value-updated",this.cellValueChanged.bind(this)),this.subscribe("edit-cancelled",this.cellValueChanged.bind(this)),this.subscribe("column-moving-rows",this.columnMoving.bind(this)),this.subscribe("table-built",this.initializeElementField.bind(this)),this.subscribe("table-redrawing",this.tableRedrawing.bind(this)),this.registerDisplayHandler(this.getRows.bind(this),30)}}tableRedrawing(t){t&&this.table.rowManager.getRows().forEach((t=>{this.reinitializeRowChildren(t)}))}initializeElementField(){var t=this.table.columnManager.getFirstVisibleColumn();this.elementField=this.table.options.dataTreeElementColumn||!!t&&t.field}getRowChildren(t){return this.getTreeChildren(t,!0)}columnMoving(){var t=[];return this.table.rowManager.rows.forEach((e=>{t=t.concat(this.getTreeChildren(e,!1,!0))})),t}rowDataChanged(t,e,i){this.redrawNeeded(i)&&(this.initializeRow(t),e&&(this.layoutRow(t),this.refreshData(!0)))}cellValueChanged(t){t.column.getField()===this.elementField&&this.layoutRow(t.row)}initializeRow(t){var e=t.getData()[this.field],i=Array.isArray(e),n=i||!i&&"object"==typeof e&&null!==e;!n&&t.modules.dataTree&&t.modules.dataTree.branchEl&&t.modules.dataTree.branchEl.parentNode.removeChild(t.modules.dataTree.branchEl),!n&&t.modules.dataTree&&t.modules.dataTree.controlEl&&t.modules.dataTree.controlEl.parentNode.removeChild(t.modules.dataTree.controlEl),t.modules.dataTree={index:t.modules.dataTree?t.modules.dataTree.index:0,open:!!n&&(t.modules.dataTree?t.modules.dataTree.open:this.startOpen(t.getComponent(),0)),controlEl:!(!t.modules.dataTree||!n)&&t.modules.dataTree.controlEl,branchEl:!(!t.modules.dataTree||!n)&&t.modules.dataTree.branchEl,parent:!!t.modules.dataTree&&t.modules.dataTree.parent,children:n}}reinitializeRowChildren(t){this.getTreeChildren(t,!1,!0).forEach((function(t){t.reinitialize(!0)}))}layoutRow(t){var e=(this.elementField?t.getCell(this.elementField):t.getCells()[0]).getElement(),i=t.modules.dataTree;i.branchEl&&(i.branchEl.parentNode&&i.branchEl.parentNode.removeChild(i.branchEl),i.branchEl=!1),i.controlEl&&(i.controlEl.parentNode&&i.controlEl.parentNode.removeChild(i.controlEl),i.controlEl=!1),this.generateControlElement(t,e),t.getElement().classList.add("tabulator-tree-level-"+i.index),i.index&&(this.branchEl?(i.branchEl=this.branchEl.cloneNode(!0),e.insertBefore(i.branchEl,e.firstChild),this.table.rtl?i.branchEl.style.marginRight=(i.branchEl.offsetWidth+i.branchEl.style.marginLeft)*(i.index-1)+i.index*this.indent+"px":i.branchEl.style.marginLeft=(i.branchEl.offsetWidth+i.branchEl.style.marginRight)*(i.index-1)+i.index*this.indent+"px"):this.table.rtl?e.style.paddingRight=parseInt(window.getComputedStyle(e,null).getPropertyValue("padding-right"))+i.index*this.indent+"px":e.style.paddingLeft=parseInt(window.getComputedStyle(e,null).getPropertyValue("padding-left"))+i.index*this.indent+"px")}generateControlElement(t,e){var i=t.modules.dataTree,n=i.controlEl;e=e||t.getCells()[0].getElement(),!1!==i.children&&(i.open?(i.controlEl=this.collapseEl.cloneNode(!0),i.controlEl.addEventListener("click",(e=>{e.stopPropagation(),this.collapseRow(t)}))):(i.controlEl=this.expandEl.cloneNode(!0),i.controlEl.addEventListener("click",(e=>{e.stopPropagation(),this.expandRow(t)}))),i.controlEl.addEventListener("mousedown",(t=>{t.stopPropagation()})),n&&n.parentNode===e?n.parentNode.replaceChild(i.controlEl,n):e.insertBefore(i.controlEl,e.firstChild))}getRows(t){var e=[];return t.forEach(((t,i)=>{var n;e.push(t),t instanceof U&&(t.create(),(n=t.modules.dataTree).index||!1===n.children||this.getChildren(t).forEach((t=>{t.create(),e.push(t)})))})),e}getChildren(t,e){var i=t.modules.dataTree,n=[],o=[];return!1!==i.children&&(i.open||e)&&(Array.isArray(i.children)||(i.children=this.generateChildren(t)),n=this.table.modExists("filter")&&this.table.options.dataTreeFilter?this.table.modules.filter.filter(i.children):i.children,this.table.modExists("sort")&&this.table.options.dataTreeSort&&this.table.modules.sort.sort(n),n.forEach((t=>{o.push(t),this.getChildren(t).forEach((t=>{o.push(t)}))}))),o}generateChildren(t){var e=[],i=t.getData()[this.field];return Array.isArray(i)||(i=[i]),i.forEach((i=>{var n=new U(i||{},this.table.rowManager);n.create(),n.modules.dataTree.index=t.modules.dataTree.index+1,n.modules.dataTree.parent=t,n.modules.dataTree.children&&(n.modules.dataTree.open=this.startOpen(n.getComponent(),n.modules.dataTree.index)),e.push(n)})),e}expandRow(t,e){var i=t.modules.dataTree;!1!==i.children&&(i.open=!0,t.reinitialize(),this.refreshData(!0),this.dispatchExternal("dataTreeRowExpanded",t.getComponent(),t.modules.dataTree.index))}collapseRow(t){var e=t.modules.dataTree;!1!==e.children&&(e.open=!1,t.reinitialize(),this.refreshData(!0),this.dispatchExternal("dataTreeRowCollapsed",t.getComponent(),t.modules.dataTree.index))}toggleRow(t){var e=t.modules.dataTree;!1!==e.children&&(e.open?this.collapseRow(t):this.expandRow(t))}isRowExpanded(t){return t.modules.dataTree.open}getTreeParent(t){return!!t.modules.dataTree.parent&&t.modules.dataTree.parent.getComponent()}getTreeParentRoot(t){return t.modules.dataTree&&t.modules.dataTree.parent?this.getTreeParentRoot(t.modules.dataTree.parent):t}getFilteredTreeChildren(t){var e=t.modules.dataTree,i=[];return e.children&&(Array.isArray(e.children)||(e.children=this.generateChildren(t)),(this.table.modExists("filter")&&this.table.options.dataTreeFilter?this.table.modules.filter.filter(e.children):e.children).forEach((t=>{t instanceof U&&i.push(t)}))),i}rowDelete(t){var e,i=t.modules.dataTree.parent;i&&(!1!==(e=this.findChildIndex(t,i))&&i.data[this.field].splice(e,1),i.data[this.field].length||delete i.data[this.field],this.initializeRow(i),this.layoutRow(i)),this.refreshData(!0)}addTreeChildRow(t,e,i,n){var o=!1;"string"==typeof e&&(e=JSON.parse(e)),Array.isArray(t.data[this.field])||(t.data[this.field]=[],t.modules.dataTree.open=this.startOpen(t.getComponent(),t.modules.dataTree.index)),void 0!==n&&!1!==(o=this.findChildIndex(n,t))&&t.data[this.field].splice(i?o:o+1,0,e),!1===o&&(i?t.data[this.field].unshift(e):t.data[this.field].push(e)),this.initializeRow(t),this.layoutRow(t),this.refreshData(!0)}findChildIndex(t,e){var i=!1;return"object"==typeof t?t instanceof U?i=t.data:t instanceof G?i=t._getSelf().data:"undefined"!=typeof HTMLElement&&t instanceof HTMLElement?e.modules.dataTree&&(i=e.modules.dataTree.children.find((e=>e instanceof U&&e.element===t)))&&(i=i.data):null===t&&(i=!1):i=void 0!==t&&e.data[this.field].find((e=>e.data[this.table.options.index]==t)),i&&(Array.isArray(e.data[this.field])&&(i=e.data[this.field].indexOf(i)),-1==i&&(i=!1)),i}getTreeChildren(t,e,i){var n=t.modules.dataTree,o=[];return n&&n.children&&(Array.isArray(n.children)||(n.children=this.generateChildren(t)),n.children.forEach((t=>{t instanceof U&&(o.push(e?t.getComponent():t),i&&(o=o.concat(this.getTreeChildren(t,e,i))))}))),o}getChildField(){return this.field}redrawNeeded(t){return!!this.field&&void 0!==t[this.field]||!!this.elementField&&void 0!==t[this.elementField]}}Y.moduleName="dataTree";var K={csv:function(t,e={},i){var n=e.delimiter?e.delimiter:",",o=[],r=[];t.forEach((t=>{var e=[];switch(t.type){case"group":console.warn("Download Warning - CSV downloader cannot process row groups");break;case"calc":console.warn("Download Warning - CSV downloader cannot process column calculations");break;case"header":t.columns.forEach(((t,e)=>{t&&1===t.depth&&(r[e]=void 0===t.value||null===t.value?"":'"'+String(t.value).split('"').join('""')+'"')}));break;case"row":t.columns.forEach((t=>{if(t){switch(typeof t.value){case"object":t.value=null!==t.value?JSON.stringify(t.value):"";break;case"undefined":t.value=""}e.push('"'+String(t.value).split('"').join('""')+'"')}})),o.push(e.join(n))}})),r.length&&o.unshift(r.join(n)),o=o.join("\n"),e.bom&&(o="\ufeff"+o),i(o,"text/csv")},json:function(t,e,i){var n=[];t.forEach((t=>{var e={};switch(t.type){case"header":break;case"group":console.warn("Download Warning - JSON downloader cannot process row groups");break;case"calc":console.warn("Download Warning - JSON downloader cannot process column calculations");break;case"row":t.columns.forEach((t=>{t&&(e[t.component.getTitleDownload()||t.component.getField()]=t.value)})),n.push(e)}})),i(n=JSON.stringify(n,null,"\t"),"application/json")},jsonLines:function(t,e,i){const n=[];t.forEach((t=>{const e={};switch(t.type){case"header":break;case"group":console.warn("Download Warning - JSON downloader cannot process row groups");break;case"calc":console.warn("Download Warning - JSON downloader cannot process column calculations");break;case"row":t.columns.forEach((t=>{t&&(e[t.component.getTitleDownload()||t.component.getField()]=t.value)})),n.push(JSON.stringify(e))}})),i(n.join("\n"),"application/x-ndjson")},pdf:function(t,e={},i){var n=[],o=[],r={},a=e.rowGroupStyles||{fontStyle:"bold",fontSize:12,cellPadding:6,fillColor:220},l=e.rowCalcStyles||{fontStyle:"bold",fontSize:10,cellPadding:4,fillColor:232},s=e.jsPDF||{},u=e.title?e.title:"";function h(t,e){var i=[];return t.columns.forEach((t=>{var n;if(t){switch(typeof t.value){case"object":t.value=null!==t.value?JSON.stringify(t.value):"";break;case"undefined":t.value=""}n={content:t.value,colSpan:t.width,rowSpan:t.height},e&&(n.styles=e),i.push(n)}})),i}s.orientation||(s.orientation=e.orientation||"landscape"),s.unit||(s.unit="pt"),t.forEach((t=>{switch(t.type){case"header":n.push(h(t));break;case"group":o.push(h(t,a));break;case"calc":o.push(h(t,l));break;case"row":o.push(h(t))}}));var c=new jspdf.jsPDF(s);e.autoTable&&(r="function"==typeof e.autoTable?e.autoTable(c)||{}:e.autoTable),u&&(r.didDrawPage=function(t){c.text(u,40,30)}),r.head=n,r.body=o,c.autoTable(r),e.documentProcessing&&e.documentProcessing(c),i(c.output("arraybuffer"),"application/pdf")},xlsx:function(t,e,i){var n=e.sheetName||"Sheet1",o=XLSX.utils.book_new(),r=new k(this),a=!("compress"in e)||e.compress,l=e.writeOptions||{bookType:"xlsx",bookSST:!0,compression:a};function s(){var e=[],i=[],n={},o={s:{c:0,r:0},e:{c:t[0]?t[0].columns.reduce(((t,e)=>t+(e&&e.width?e.width:1)),0):0,r:t.length}};return t.forEach(((t,n)=>{var o=[];t.columns.forEach((function(t,e){t?(o.push(t.value instanceof Date||"object"!=typeof t.value?t.value:JSON.stringify(t.value)),(t.width>1||t.height>-1)&&(t.height>1||t.width>1)&&i.push({s:{r:n,c:e},e:{r:n+t.height-1,c:e+t.width-1}})):o.push("")})),e.push(o)})),XLSX.utils.sheet_add_aoa(n,e),n["!ref"]=XLSX.utils.encode_range(o),i.length&&(n["!merges"]=i),n}if(l.type="binary",o.SheetNames=[],o.Sheets={},e.sheetOnly)i(s());else{if(e.sheets)for(var u in e.sheets)!0===e.sheets[u]?(o.SheetNames.push(u),o.Sheets[u]=s()):(o.SheetNames.push(u),r.commsSend(e.sheets[u],"download","intercept",{type:"xlsx",options:{sheetOnly:!0},active:this.active,intercept:function(t){o.Sheets[u]=t}}));else o.SheetNames.push(n),o.Sheets[n]=s();e.documentProcessing&&(o=e.documentProcessing(o)),i(function(t){for(var e=new ArrayBuffer(t.length),i=new Uint8Array(e),n=0;n!=t.length;++n)i[n]=255&t.charCodeAt(n);return e}(XLSX.write(o,l)),"application/octet-stream")}},html:function(t,e,i){this.modExists("export",!0)&&i(this.modules.export.generateHTMLTable(t),"text/html")}};class J extends _{constructor(t){super(t),this.registerTableOption("downloadEncoder",(function(t,e){return new Blob([t],{type:e})})),this.registerTableOption("downloadReady",void 0),this.registerTableOption("downloadConfig",{}),this.registerTableOption("downloadRowRange","active"),this.registerColumnOption("download"),this.registerColumnOption("titleDownload")}initialize(){this.deprecatedOptionsCheck(),this.registerTableFunction("download",this.download.bind(this)),this.registerTableFunction("downloadToTab",this.downloadToTab.bind(this))}deprecatedOptionsCheck(){this.deprecationCheck("downloadReady","downloadEncoder")}downloadToTab(t,e,i,n){this.download(t,e,i,n,!0)}download(t,e,i,n,o){var r=!1;if("function"==typeof t?r=t:J.downloaders[t]?r=J.downloaders[t]:console.warn("Download Error - No such download type found: ",t),r){var a=this.generateExportList(n);r.call(this.table,a,i||{},function(i,n){o?!0===o?this.triggerDownload(i,n,t,e,!0):o(i):this.triggerDownload(i,n,t,e)}.bind(this))}}generateExportList(t){var e=this.table.modules.export.generateExportList(this.table.options.downloadConfig,!1,t||this.table.options.downloadRowRange,"download"),i=this.table.options.groupHeaderDownload;return i&&!Array.isArray(i)&&(i=[i]),e.forEach((t=>{var e;"group"===t.type&&(e=t.columns[0],i&&i[t.indent]&&(e.value=i[t.indent](e.value,t.component._group.getRowCount(),t.component._group.getData(),t.component)))})),e}triggerDownload(t,e,i,n,o){var r=document.createElement("a"),a=this.table.options.downloadEncoder(t,e);a&&(o?window.open(window.URL.createObjectURL(a)):(n=n||"Tabulator."+("function"==typeof i?"txt":i),navigator.msSaveOrOpenBlob?navigator.msSaveOrOpenBlob(a,n):(r.setAttribute("href",window.URL.createObjectURL(a)),r.setAttribute("download",n),r.style.display="none",document.body.appendChild(r),r.click(),document.body.removeChild(r))),this.dispatchExternal("downloadComplete"))}commsReceived(t,e,i){"intercept"===e&&this.download(i.type,"",i.options,i.active,i.intercept)}}function Z(t,e){var i=e.mask,n=void 0!==e.maskLetterChar?e.maskLetterChar:"A",o=void 0!==e.maskNumberChar?e.maskNumberChar:"9",r=void 0!==e.maskWildcardChar?e.maskWildcardChar:"*";function a(e){var l=i[e];void 0!==l&&l!==r&&l!==n&&l!==o&&(t.value=t.value+""+l,a(e+1))}t.addEventListener("keydown",(e=>{var a=t.value.length,l=e.key;if(e.keyCode>46&&!e.ctrlKey&&!e.metaKey){if(a>=i.length)return e.preventDefault(),e.stopPropagation(),!1;switch(i[a]){case n:if(l.toUpperCase()==l.toLowerCase())return e.preventDefault(),e.stopPropagation(),!1;break;case o:if(isNaN(l))return e.preventDefault(),e.stopPropagation(),!1;break;case r:break;default:if(l!==i[a])return e.preventDefault(),e.stopPropagation(),!1}}})),t.addEventListener("keyup",(i=>{i.keyCode>46&&e.maskAutoFill&&a(t.value.length)})),t.placeholder||(t.placeholder=i),e.maskAutoFill&&a(t.value.length)}J.moduleName="download",J.downloaders=K;class ${constructor(t,e,i,n,o,r){this.edit=t,this.table=t.table,this.cell=e,this.params=this._initializeParams(r),this.data=[],this.displayItems=[],this.currentItems=[],this.focusedItem=null,this.input=this._createInputElement(),this.listEl=this._createListElement(),this.initialValues=null,this.isFilter="header"===e.getType(),this.filterTimeout=null,this.filtered=!1,this.typing=!1,this.values=[],this.popup=null,this.listIteration=0,this.lastAction="",this.filterTerm="",this.blurable=!0,this.actions={success:n,cancel:o},this._deprecatedOptionsCheck(),this._initializeValue(),i(this._onRendered.bind(this))}_deprecatedOptionsCheck(){this.params.listItemFormatter&&this.cell.getTable().deprecationAdvisor.msg("The listItemFormatter editor param has been deprecated, please see the latest editor documentation for updated options"),this.params.sortValuesList&&this.cell.getTable().deprecationAdvisor.msg("The sortValuesList editor param has been deprecated, please see the latest editor documentation for updated options"),this.params.searchFunc&&this.cell.getTable().deprecationAdvisor.msg("The searchFunc editor param has been deprecated, please see the latest editor documentation for updated options"),this.params.searchingPlaceholder&&this.cell.getTable().deprecationAdvisor.msg("The searchingPlaceholder editor param has been deprecated, please see the latest editor documentation for updated options")}_initializeValue(){var t=this.cell.getValue();void 0===t&&void 0!==this.params.defaultValue&&(t=this.params.defaultValue),this.initialValues=this.params.multiselect?t:[t],this.isFilter&&(this.input.value=this.initialValues?this.initialValues.join(","):"",this.headerFilterInitialListGen())}_onRendered(){var t=this.cell.getElement();function e(t){t.stopPropagation()}this.isFilter||(this.input.style.height="100%",this.input.focus({preventScroll:!0})),t.addEventListener("click",e),setTimeout((()=>{t.removeEventListener("click",e)}),1e3),this.input.addEventListener("mousedown",this._preventPopupBlur.bind(this))}_createListElement(){var t=document.createElement("div");return t.classList.add("tabulator-edit-list"),t.addEventListener("mousedown",this._preventBlur.bind(this)),t.addEventListener("keydown",this._inputKeyDown.bind(this)),t}_setListWidth(){var t=this.isFilter?this.input:this.cell.getElement();this.listEl.style.minWidth=t.offsetWidth+"px",this.params.maxWidth&&(!0===this.params.maxWidth?this.listEl.style.maxWidth=t.offsetWidth+"px":"number"==typeof this.params.maxWidth?this.listEl.style.maxWidth=this.params.maxWidth+"px":this.listEl.style.maxWidth=this.params.maxWidth)}_createInputElement(){var t=this.params.elementAttributes,e=document.createElement("input");if(e.setAttribute("type",this.params.clearable?"search":"text"),e.style.padding="4px",e.style.width="100%",e.style.boxSizing="border-box",this.params.autocomplete||(e.style.cursor="default",e.style.caretColor="transparent"),t&&"object"==typeof t)for(let i in t)"+"==i.charAt(0)?(i=i.slice(1),e.setAttribute(i,e.getAttribute(i)+t["+"+i])):e.setAttribute(i,t[i]);return this.params.mask&&Z(e,this.params),this._bindInputEvents(e),e}_initializeParams(t){var e,i=["values","valuesURL","valuesLookup"];return(t=Object.assign({},t)).verticalNavigation=t.verticalNavigation||"editor",t.placeholderLoading=void 0===t.placeholderLoading?"Searching ...":t.placeholderLoading,t.placeholderEmpty=void 0===t.placeholderEmpty?"No Results Found":t.placeholderEmpty,t.filterDelay=void 0===t.filterDelay?300:t.filterDelay,t.emptyValue=Object.keys(t).includes("emptyValue")?t.emptyValue:"",(e=Object.keys(t).filter((t=>i.includes(t))).length)?e>1&&console.warn("list editor config error - only one of the values, valuesURL, or valuesLookup options can be set on the same editor"):console.warn("list editor config error - either the values, valuesURL, or valuesLookup option must be set"),t.autocomplete?t.multiselect&&(t.multiselect=!1,console.warn("list editor config error - multiselect option is not available when autocomplete is enabled")):(t.freetext&&(t.freetext=!1,console.warn("list editor config error - freetext option is only available when autocomplete is enabled")),t.filterFunc&&(t.filterFunc=!1,console.warn("list editor config error - filterFunc option is only available when autocomplete is enabled")),t.filterRemote&&(t.filterRemote=!1,console.warn("list editor config error - filterRemote option is only available when autocomplete is enabled")),t.mask&&(t.mask=!1,console.warn("list editor config error - mask option is only available when autocomplete is enabled")),t.allowEmpty&&(t.allowEmpty=!1,console.warn("list editor config error - allowEmpty option is only available when autocomplete is enabled")),t.listOnEmpty&&(t.listOnEmpty=!1,console.warn("list editor config error - listOnEmpty option is only available when autocomplete is enabled"))),t.filterRemote&&"function"!=typeof t.valuesLookup&&!t.valuesURL&&(t.filterRemote=!1,console.warn("list editor config error - filterRemote option should only be used when values list is populated from a remote source")),t}_bindInputEvents(t){t.addEventListener("focus",this._inputFocus.bind(this)),t.addEventListener("click",this._inputClick.bind(this)),t.addEventListener("blur",this._inputBlur.bind(this)),t.addEventListener("keydown",this._inputKeyDown.bind(this)),t.addEventListener("search",this._inputSearch.bind(this)),this.params.autocomplete&&t.addEventListener("keyup",this._inputKeyUp.bind(this))}_inputFocus(t){this.rebuildOptionsList()}_filter(){this.params.filterRemote?(clearTimeout(this.filterTimeout),this.filterTimeout=setTimeout((()=>{this.rebuildOptionsList()}),this.params.filterDelay)):this._filterList()}_inputClick(t){t.stopPropagation()}_inputBlur(t){this.blurable&&(this.popup?this.popup.hide():this._resolveValue(!0))}_inputSearch(){this._clearChoices()}_inputKeyDown(t){switch(t.keyCode){case 38:this._keyUp(t);break;case 40:this._keyDown(t);break;case 37:case 39:this._keySide(t);break;case 13:this._keyEnter();break;case 27:this._keyEsc();break;case 36:case 35:this._keyHomeEnd(t);break;case 9:this._keyTab(t);break;default:this._keySelectLetter(t)}}_inputKeyUp(t){switch(t.keyCode){case 38:case 37:case 39:case 40:case 13:case 27:break;default:this._keyAutoCompLetter(t)}}_preventPopupBlur(){this.popup&&this.popup.blockHide(),setTimeout((()=>{this.popup&&this.popup.restoreHide()}),10)}_preventBlur(){this.blurable=!1,setTimeout((()=>{this.blurable=!0}),10)}_keyTab(t){this.params.autocomplete&&"typing"===this.lastAction?this._resolveValue(!0):this.focusedItem&&this._chooseItem(this.focusedItem,!0)}_keyUp(t){var e=this.displayItems.indexOf(this.focusedItem);("editor"==this.params.verticalNavigation||"hybrid"==this.params.verticalNavigation&&e)&&(t.stopImmediatePropagation(),t.stopPropagation(),t.preventDefault(),e>0&&this._focusItem(this.displayItems[e-1]))}_keyDown(t){var e=this.displayItems.indexOf(this.focusedItem);("editor"==this.params.verticalNavigation||"hybrid"==this.params.verticalNavigation&&e<this.displayItems.length-1)&&(t.stopImmediatePropagation(),t.stopPropagation(),t.preventDefault(),e<this.displayItems.length-1&&(-1==e?this._focusItem(this.displayItems[0]):this._focusItem(this.displayItems[e+1])))}_keySide(t){this.params.autocomplete||(t.stopImmediatePropagation(),t.stopPropagation(),t.preventDefault())}_keyEnter(t){this.params.autocomplete&&"typing"===this.lastAction?this._resolveValue(!0):this.focusedItem&&this._chooseItem(this.focusedItem)}_keyEsc(t){this._cancel()}_keyHomeEnd(t){this.params.autocomplete&&t.stopImmediatePropagation()}_keySelectLetter(t){this.params.autocomplete||(t.preventDefault(),t.keyCode>=38&&t.keyCode<=90&&this._scrollToValue(t.keyCode))}_keyAutoCompLetter(t){this._filter(),this.lastAction="typing",this.typing=!0}_scrollToValue(t){clearTimeout(this.filterTimeout);var e=String.fromCharCode(t).toLowerCase();this.filterTerm+=e.toLowerCase();var i=this.displayItems.find((t=>void 0!==t.label&&t.label.toLowerCase().startsWith(this.filterTerm)));i&&this._focusItem(i),this.filterTimeout=setTimeout((()=>{this.filterTerm=""}),800)}_focusItem(t){this.lastAction="focus",this.focusedItem&&this.focusedItem.element&&this.focusedItem.element.classList.remove("focused"),this.focusedItem=t,t&&t.element&&(t.element.classList.add("focused"),t.element.scrollIntoView({behavior:"smooth",block:"nearest",inline:"start"}))}headerFilterInitialListGen(){this._generateOptions(!0)}rebuildOptionsList(){this._generateOptions().then(this._sortOptions.bind(this)).then(this._buildList.bind(this)).then(this._showList.bind(this)).catch((t=>{Number.isInteger(t)||console.error("List generation error",t)}))}_filterList(){this._buildList(this._filterOptions()),this._showList()}_generateOptions(t){var e=[],i=++this.listIteration;return this.filtered=!1,this.params.values?e=this.params.values:this.params.valuesURL?e=this._ajaxRequest(this.params.valuesURL,this.input.value):"function"==typeof this.params.valuesLookup?e=this.params.valuesLookup(this.cell,this.input.value):this.params.valuesLookup&&(e=this._uniqueColumnValues(this.params.valuesLookupField)),e instanceof Promise?(t||this._addPlaceholder(this.params.placeholderLoading),e.then().then((t=>this.listIteration===i?this._parseList(t):Promise.reject(i)))):Promise.resolve(this._parseList(e))}_addPlaceholder(t){var e=document.createElement("div");"function"==typeof t&&(t=t(this.cell.getComponent(),this.listEl)),t&&(this._clearList(),t instanceof HTMLElement?e=t:(e.classList.add("tabulator-edit-list-placeholder"),e.innerHTML=t),this.listEl.appendChild(e),this._showList())}_ajaxRequest(t,e){return t=S(t,{},this.params.filterRemote?{term:e}:{}),fetch(t).then((t=>t.ok?t.json().catch((t=>(console.warn("List Ajax Load Error - Invalid JSON returned",t),Promise.reject(t)))):(console.error("List Ajax Load Error - Connection Error: "+t.status,t.statusText),Promise.reject(t)))).catch((t=>(console.error("List Ajax Load Error - Connection Error: ",t),Promise.reject(t))))}_uniqueColumnValues(t){var e,i={},n=this.table.getData(this.params.valuesLookup);return(e=t?this.table.columnManager.getColumnByField(t):this.cell.getColumn()._getSelf())?n.forEach((t=>{var n=e.getFieldValue(t);null!=n&&""!==n&&(i[n]=!0)})):(console.warn("unable to find matching column to create select lookup list:",t),i=[]),Object.keys(i)}_parseList(t){var e=[];return Array.isArray(t)||(t=Object.entries(t).map((([t,e])=>({label:e,value:t})))),t.forEach((t=>{"object"!=typeof t&&(t={label:t,value:t}),this._parseListItem(t,e,0)})),!this.currentItems.length&&this.params.freetext&&(this.input.value=this.initialValues,this.typing=!0,this.lastAction="typing"),this.data=e,e}_parseListItem(t,e,i){var n={};t.options?n=this._parseListGroup(t,i+1):(n={label:t.label,value:t.value,itemParams:t.itemParams,elementAttributes:t.elementAttributes,element:!1,selected:!1,visible:!0,level:i,original:t},this.initialValues&&this.initialValues.indexOf(t.value)>-1&&this._chooseItem(n,!0)),e.push(n)}_parseListGroup(t,e){var i={label:t.label,group:!0,itemParams:t.itemParams,elementAttributes:t.elementAttributes,element:!1,visible:!0,level:e,options:[],original:t};return t.options.forEach((t=>{this._parseListItem(t,i.options,e)})),i}_sortOptions(t){var e;return this.params.sort&&(e="function"==typeof this.params.sort?this.params.sort:this._defaultSortFunction.bind(this),this._sortGroup(e,t)),t}_sortGroup(t,e){e.sort(((e,i)=>t(e.label,i.label,e.value,i.value,e.original,i.original))),e.forEach((e=>{e.group&&this._sortGroup(t,e.options)}))}_defaultSortFunction(t,e){var i,n,o,r,a,l=0,s=/(\d+)|(\D+)/g,u=/\d/,h=0;if("desc"===this.params.sort&&([t,e]=[e,t]),t||0===t){if(e||0===e){if(isFinite(t)&&isFinite(e))return t-e;if((i=String(t).toLowerCase())===(n=String(e).toLowerCase()))return 0;if(!u.test(i)||!u.test(n))return i>n?1:-1;for(i=i.match(s),n=n.match(s),a=i.length>n.length?n.length:i.length;l<a;)if((o=i[l])!==(r=n[l++]))return isFinite(o)&&isFinite(r)?("0"===o.charAt(0)&&(o="."+o),"0"===r.charAt(0)&&(r="."+r),o-r):o>r?1:-1;return i.length>n.length}h=1}else h=e||0===e?-1:0;return h}_filterOptions(){var t=this.params.filterFunc||this._defaultFilterFunc,e=this.input.value;return e?(this.filtered=!0,this.data.forEach((i=>{this._filterItem(t,e,i)}))):this.filtered=!1,this.data}_filterItem(t,e,i){var n=!1;return i.group?(i.options.forEach((i=>{this._filterItem(t,e,i)&&(n=!0)})),i.visible=n):i.visible=t(e,i.label,i.value,i.original),i.visible}_defaultFilterFunc(t,e,i,n){return t=String(t).toLowerCase(),null!=e&&(String(e).toLowerCase().indexOf(t)>-1||String(i).toLowerCase().indexOf(t)>-1)}_clearList(){for(;this.listEl.firstChild;)this.listEl.removeChild(this.listEl.firstChild);this.displayItems=[]}_buildList(t){this._clearList(),t.forEach((t=>{this._buildItem(t)})),this.displayItems.length||this._addPlaceholder(this.params.placeholderEmpty)}_buildItem(t){var e,i=t.element;if(!this.filtered||t.visible){if(!i){if((i=document.createElement("div")).tabIndex=0,(e=this.params.itemFormatter?this.params.itemFormatter(t.label,t.value,t.original,i):t.label)instanceof HTMLElement?i.appendChild(e):i.innerHTML=e,t.group?i.classList.add("tabulator-edit-list-group"):i.classList.add("tabulator-edit-list-item"),i.classList.add("tabulator-edit-list-group-level-"+t.level),t.elementAttributes&&"object"==typeof t.elementAttributes)for(let e in t.elementAttributes)"+"==e.charAt(0)?(e=e.slice(1),i.setAttribute(e,this.input.getAttribute(e)+t.elementAttributes["+"+e])):i.setAttribute(e,t.elementAttributes[e]);t.group?i.addEventListener("click",this._groupClick.bind(this,t)):i.addEventListener("click",this._itemClick.bind(this,t)),i.addEventListener("mousedown",this._preventBlur.bind(this)),t.element=i}this._styleItem(t),this.listEl.appendChild(i),t.group?t.options.forEach((t=>{this._buildItem(t)})):this.displayItems.push(t)}}_showList(){var t=this.popup&&this.popup.isVisible();if(this.input.parentNode){if(this.params.autocomplete&&""===this.input.value&&!this.params.listOnEmpty)return void(this.popup&&this.popup.hide(!0));this._setListWidth(),this.popup||(this.popup=this.edit.popup(this.listEl)),this.popup.show(this.cell.getElement(),"bottom"),t||setTimeout((()=>{this.popup.hideOnBlur(this._resolveValue.bind(this,!0))}),10)}}_styleItem(t){t&&t.element&&(t.selected?t.element.classList.add("active"):t.element.classList.remove("active"))}_itemClick(t,e){e.stopPropagation(),this._chooseItem(t)}_groupClick(t,e){e.stopPropagation()}_cancel(){this.popup.hide(!0),this.actions.cancel()}_clearChoices(){this.typing=!0,this.currentItems.forEach((t=>{t.selected=!1,this._styleItem(t)})),this.currentItems=[],this.focusedItem=null}_chooseItem(t,e){var i;this.typing=!1,this.params.multiselect?((i=this.currentItems.indexOf(t))>-1?(this.currentItems.splice(i,1),t.selected=!1):(this.currentItems.push(t),t.selected=!0),this.input.value=this.currentItems.map((t=>t.label)).join(","),this._styleItem(t)):(this.currentItems=[t],t.selected=!0,this.input.value=t.label,this._styleItem(t),e||this._resolveValue()),this._focusItem(t)}_resolveValue(t){var e,i;if(this.popup&&this.popup.hide(!0),this.params.multiselect)e=this.currentItems.map((t=>t.value));else if(t&&this.params.autocomplete&&this.typing){if(!(this.params.freetext||this.params.allowEmpty&&""===this.input.value))return void this.actions.cancel();e=this.input.value}else e=this.currentItems[0]?this.currentItems[0].value:null==(i=Array.isArray(this.initialValues)?this.initialValues[0]:this.initialValues)||""===i?i:this.params.emptyValue;""===e&&(e=this.params.emptyValue),this.actions.success(e),this.isFilter&&(this.initialValues=e&&!Array.isArray(e)?[e]:e,this.currentItems=[])}}var Q={input:function(t,e,i,n,o){var r=t.getValue(),a=document.createElement("input");if(a.setAttribute("type",o.search?"search":"text"),a.style.padding="4px",a.style.width="100%",a.style.boxSizing="border-box",o.elementAttributes&&"object"==typeof o.elementAttributes)for(let t in o.elementAttributes)"+"==t.charAt(0)?(t=t.slice(1),a.setAttribute(t,a.getAttribute(t)+o.elementAttributes["+"+t])):a.setAttribute(t,o.elementAttributes[t]);function l(t){null==r&&""!==a.value||a.value!==r?i(a.value)&&(r=a.value):n()}return a.value=void 0!==r?r:"",e((function(){"cell"===t.getType()&&(a.focus({preventScroll:!0}),a.style.height="100%",o.selectContents&&a.select())})),a.addEventListener("change",l),a.addEventListener("blur",l),a.addEventListener("keydown",(function(t){switch(t.keyCode){case 13:l();break;case 27:n();break;case 35:case 36:t.stopPropagation()}})),o.mask&&Z(a,o),a},textarea:function(t,e,i,n,o){var r=t.getValue(),a=o.verticalNavigation||"hybrid",l=String(null!=r?r:""),s=document.createElement("textarea"),u=0;if(s.style.display="block",s.style.padding="2px",s.style.height="100%",s.style.width="100%",s.style.boxSizing="border-box",s.style.whiteSpace="pre-wrap",s.style.resize="none",o.elementAttributes&&"object"==typeof o.elementAttributes)for(let t in o.elementAttributes)"+"==t.charAt(0)?(t=t.slice(1),s.setAttribute(t,s.getAttribute(t)+o.elementAttributes["+"+t])):s.setAttribute(t,o.elementAttributes[t]);function h(e){null==r&&""!==s.value||s.value!==r?(i(s.value)&&(r=s.value),setTimeout((function(){t.getRow().normalizeHeight()}),300)):n()}return s.value=l,e((function(){"cell"===t.getType()&&(s.focus({preventScroll:!0}),s.style.height="100%",s.scrollHeight,s.style.height=s.scrollHeight+"px",t.getRow().normalizeHeight(),o.selectContents&&s.select())})),s.addEventListener("change",h),s.addEventListener("blur",h),s.addEventListener("keyup",(function(){s.style.height="";var e=s.scrollHeight;s.style.height=e+"px",e!=u&&(u=e,t.getRow().normalizeHeight())})),s.addEventListener("keydown",(function(t){switch(t.keyCode){case 13:t.shiftKey&&o.shiftEnterSubmit&&h();break;case 27:n();break;case 38:("editor"==a||"hybrid"==a&&s.selectionStart)&&(t.stopImmediatePropagation(),t.stopPropagation());break;case 40:("editor"==a||"hybrid"==a&&s.selectionStart!==s.value.length)&&(t.stopImmediatePropagation(),t.stopPropagation());break;case 35:case 36:t.stopPropagation()}})),o.mask&&Z(s,o),s},number:function(t,e,i,n,o){var r=t.getValue(),a=o.verticalNavigation||"editor",l=document.createElement("input");if(l.setAttribute("type","number"),void 0!==o.max&&l.setAttribute("max",o.max),void 0!==o.min&&l.setAttribute("min",o.min),void 0!==o.step&&l.setAttribute("step",o.step),l.style.padding="4px",l.style.width="100%",l.style.boxSizing="border-box",o.elementAttributes&&"object"==typeof o.elementAttributes)for(let t in o.elementAttributes)"+"==t.charAt(0)?(t=t.slice(1),l.setAttribute(t,l.getAttribute(t)+o.elementAttributes["+"+t])):l.setAttribute(t,o.elementAttributes[t]);l.value=r;var s=function(t){u()};function u(){var t=l.value;isNaN(t)||""===t||(t=Number(t)),t!==r?i(t)&&(r=t):n()}return e((function(){"cell"===t.getType()&&(l.removeEventListener("blur",s),l.focus({preventScroll:!0}),l.style.height="100%",l.addEventListener("blur",s),o.selectContents&&l.select())})),l.addEventListener("keydown",(function(t){switch(t.keyCode){case 13:u();break;case 27:n();break;case 38:case 40:"editor"==a&&(t.stopImmediatePropagation(),t.stopPropagation());break;case 35:case 36:t.stopPropagation()}})),o.mask&&Z(l,o),l},range:function(t,e,i,n,o){var r=t.getValue(),a=document.createElement("input");if(a.setAttribute("type","range"),void 0!==o.max&&a.setAttribute("max",o.max),void 0!==o.min&&a.setAttribute("min",o.min),void 0!==o.step&&a.setAttribute("step",o.step),a.style.padding="4px",a.style.width="100%",a.style.boxSizing="border-box",o.elementAttributes&&"object"==typeof o.elementAttributes)for(let t in o.elementAttributes)"+"==t.charAt(0)?(t=t.slice(1),a.setAttribute(t,a.getAttribute(t)+o.elementAttributes["+"+t])):a.setAttribute(t,o.elementAttributes[t]);function l(){var t=a.value;isNaN(t)||""===t||(t=Number(t)),t!=r?i(t)&&(r=t):n()}return a.value=r,e((function(){"cell"===t.getType()&&(a.focus({preventScroll:!0}),a.style.height="100%")})),a.addEventListener("blur",(function(t){l()})),a.addEventListener("keydown",(function(t){switch(t.keyCode){case 13:l();break;case 27:n()}})),a},date:function(t,e,i,n,o){var r=o.format,a=o.verticalNavigation||"editor",l=r?window.DateTime||luxon.DateTime:null,s=t.getValue(),u=document.createElement("input");function h(t){return(l.isDateTime(t)?t:"iso"===r?l.fromISO(String(t)):l.fromFormat(String(t),r)).toFormat("yyyy-MM-dd")}if(u.type="date",u.style.padding="4px",u.style.width="100%",u.style.boxSizing="border-box",o.max&&u.setAttribute("max",r?h(o.max):o.max),o.min&&u.setAttribute("min",r?h(o.min):o.min),o.elementAttributes&&"object"==typeof o.elementAttributes)for(let t in o.elementAttributes)"+"==t.charAt(0)?(t=t.slice(1),u.setAttribute(t,u.getAttribute(t)+o.elementAttributes["+"+t])):u.setAttribute(t,o.elementAttributes[t]);function c(){var t,e=u.value;if(null==s&&""!==e||e!==s){if(e&&r)switch(t=l.fromFormat(String(e),"yyyy-MM-dd"),r){case!0:e=t;break;case"iso":e=t.toISO();break;default:e=t.toFormat(r)}i(e)&&(s=u.value)}else n()}return s=void 0!==s?s:"",r&&(l?s=h(s):console.error("Editor Error - 'date' editor 'format' param is dependant on luxon.js")),u.value=s,e((function(){"cell"===t.getType()&&(u.focus({preventScroll:!0}),u.style.height="100%",o.selectContents&&u.select())})),u.addEventListener("blur",(function(t){(t.relatedTarget||t.rangeParent||t.explicitOriginalTarget!==u)&&c()})),u.addEventListener("keydown",(function(t){switch(t.keyCode){case 13:c();break;case 27:n();break;case 35:case 36:t.stopPropagation();break;case 38:case 40:"editor"==a&&(t.stopImmediatePropagation(),t.stopPropagation())}})),u},time:function(t,e,i,n,o){var r,a=o.format,l=o.verticalNavigation||"editor",s=a?window.DateTime||luxon.DateTime:null,u=t.getValue(),h=document.createElement("input");if(h.type="time",h.style.padding="4px",h.style.width="100%",h.style.boxSizing="border-box",o.elementAttributes&&"object"==typeof o.elementAttributes)for(let t in o.elementAttributes)"+"==t.charAt(0)?(t=t.slice(1),h.setAttribute(t,h.getAttribute(t)+o.elementAttributes["+"+t])):h.setAttribute(t,o.elementAttributes[t]);function c(){var t,e=h.value;if(null==u&&""!==e||e!==u){if(e&&a)switch(t=s.fromFormat(String(e),"hh:mm"),a){case!0:e=t;break;case"iso":e=t.toISO();break;default:e=t.toFormat(a)}i(e)&&(u=h.value)}else n()}return u=void 0!==u?u:"",a&&(s?(r=s.isDateTime(u)?u:"iso"===a?s.fromISO(String(u)):s.fromFormat(String(u),a),u=r.toFormat("hh:mm")):console.error("Editor Error - 'date' editor 'format' param is dependant on luxon.js")),h.value=u,e((function(){"cell"==t.getType()&&(h.focus({preventScroll:!0}),h.style.height="100%",o.selectContents&&h.select())})),h.addEventListener("blur",(function(t){(t.relatedTarget||t.rangeParent||t.explicitOriginalTarget!==h)&&c()})),h.addEventListener("keydown",(function(t){switch(t.keyCode){case 13:c();break;case 27:n();break;case 35:case 36:t.stopPropagation();break;case 38:case 40:"editor"==l&&(t.stopImmediatePropagation(),t.stopPropagation())}})),h},datetime:function(t,e,i,n,o){var r,a=o.format,l=o.verticalNavigation||"editor",s=a?window.DateTime||luxon.DateTime:null,u=t.getValue(),h=document.createElement("input");if(h.type="datetime-local",h.style.padding="4px",h.style.width="100%",h.style.boxSizing="border-box",o.elementAttributes&&"object"==typeof o.elementAttributes)for(let t in o.elementAttributes)"+"==t.charAt(0)?(t=t.slice(1),h.setAttribute(t,h.getAttribute(t)+o.elementAttributes["+"+t])):h.setAttribute(t,o.elementAttributes[t]);function c(){var t,e=h.value;if(null==u&&""!==e||e!==u){if(e&&a)switch(t=s.fromISO(String(e)),a){case!0:e=t;break;case"iso":e=t.toISO();break;default:e=t.toFormat(a)}i(e)&&(u=h.value)}else n()}return u=void 0!==u?u:"",a&&(s?(r=s.isDateTime(u)?u:"iso"===a?s.fromISO(String(u)):s.fromFormat(String(u),a),u=r.toFormat("yyyy-MM-dd")+"T"+r.toFormat("hh:mm")):console.error("Editor Error - 'date' editor 'format' param is dependant on luxon.js")),h.value=u,e((function(){"cell"===t.getType()&&(h.focus({preventScroll:!0}),h.style.height="100%",o.selectContents&&h.select())})),h.addEventListener("blur",(function(t){(t.relatedTarget||t.rangeParent||t.explicitOriginalTarget!==h)&&c()})),h.addEventListener("keydown",(function(t){switch(t.keyCode){case 13:c();break;case 27:n();break;case 35:case 36:t.stopPropagation();break;case 38:case 40:"editor"==l&&(t.stopImmediatePropagation(),t.stopPropagation())}})),h},select:function(t,e,i,n,o){return this.deprecationMsg("The select editor has been deprecated, please use the new list editor"),new $(this,t,e,i,n,o).input},list:function(t,e,i,n,o){return new $(this,t,e,i,n,o).input},autocomplete:function(t,e,i,n,o){return this.deprecationMsg("The autocomplete editor has been deprecated, please use the new list editor with the 'autocomplete' editorParam"),o.autocomplete=!0,new $(this,t,e,i,n,o).input},star:function(t,e,i,n,o){var r=this,a=t.getElement(),l=t.getValue(),s=a.getElementsByTagName("svg").length||5,u=a.getElementsByTagName("svg")[0]?a.getElementsByTagName("svg")[0].getAttribute("width"):14,h=[],c=document.createElement("div"),d=document.createElementNS("http://www.w3.org/2000/svg","svg");function p(t){h.forEach((function(e,i){i<t?("ie"==r.table.browser?e.setAttribute("class","tabulator-star-active"):e.classList.replace("tabulator-star-inactive","tabulator-star-active"),e.innerHTML='<polygon fill="#488CE9" stroke="#014AAE" stroke-width="37.6152" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" points="259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 "/>'):("ie"==r.table.browser?e.setAttribute("class","tabulator-star-inactive"):e.classList.replace("tabulator-star-active","tabulator-star-inactive"),e.innerHTML='<polygon fill="#010155" stroke="#686868" stroke-width="37.6152" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" points="259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 "/>')}))}function b(t){var e=document.createElement("span"),n=d.cloneNode(!0);h.push(n),e.addEventListener("mouseenter",(function(e){e.stopPropagation(),e.stopImmediatePropagation(),p(t)})),e.addEventListener("mousemove",(function(t){t.stopPropagation(),t.stopImmediatePropagation()})),e.addEventListener("click",(function(e){e.stopPropagation(),e.stopImmediatePropagation(),i(t),a.blur()})),e.appendChild(n),c.appendChild(e)}function m(t){l=t,p(t)}if(a.style.whiteSpace="nowrap",a.style.overflow="hidden",a.style.textOverflow="ellipsis",c.style.verticalAlign="middle",c.style.display="inline-block",c.style.padding="4px",d.setAttribute("width",u),d.setAttribute("height",u),d.setAttribute("viewBox","0 0 512 512"),d.setAttribute("xml:space","preserve"),d.style.padding="0 1px",o.elementAttributes&&"object"==typeof o.elementAttributes)for(let t in o.elementAttributes)"+"==t.charAt(0)?(t=t.slice(1),c.setAttribute(t,c.getAttribute(t)+o.elementAttributes["+"+t])):c.setAttribute(t,o.elementAttributes[t]);for(var g=1;g<=s;g++)b(g);return p(l=Math.min(parseInt(l),s)),c.addEventListener("mousemove",(function(t){p(0)})),c.addEventListener("click",(function(t){i(0)})),a.addEventListener("blur",(function(t){n()})),a.addEventListener("keydown",(function(t){switch(t.keyCode){case 39:m(l+1);break;case 37:m(l-1);break;case 13:i(l);break;case 27:n()}})),c},progress:function(t,e,i,n,o){var r,a,l=t.getElement(),s=void 0===o.max?l.getElementsByTagName("div")[0]&&l.getElementsByTagName("div")[0].getAttribute("max")||100:o.max,u=void 0===o.min?l.getElementsByTagName("div")[0]&&l.getElementsByTagName("div")[0].getAttribute("min")||0:o.min,h=(s-u)/100,c=t.getValue()||0,d=document.createElement("div"),p=document.createElement("div");function b(){var t=window.getComputedStyle(l,null),e=h*Math.round(p.offsetWidth/((l.clientWidth-parseInt(t.getPropertyValue("padding-left"))-parseInt(t.getPropertyValue("padding-right")))/100))+u;i(e),l.setAttribute("aria-valuenow",e),l.setAttribute("aria-label",c)}if(d.style.position="absolute",d.style.right="0",d.style.top="0",d.style.bottom="0",d.style.width="5px",d.classList.add("tabulator-progress-handle"),p.style.display="inline-block",p.style.position="relative",p.style.height="100%",p.style.backgroundColor="#488CE9",p.style.maxWidth="100%",p.style.minWidth="0%",o.elementAttributes&&"object"==typeof o.elementAttributes)for(let t in o.elementAttributes)"+"==t.charAt(0)?(t=t.slice(1),p.setAttribute(t,p.getAttribute(t)+o.elementAttributes["+"+t])):p.setAttribute(t,o.elementAttributes[t]);return l.style.padding="4px 4px",c=Math.min(parseFloat(c),s),c=Math.max(parseFloat(c),u),c=Math.round((c-u)/h),p.style.width=c+"%",l.setAttribute("aria-valuemin",u),l.setAttribute("aria-valuemax",s),p.appendChild(d),d.addEventListener("mousedown",(function(t){r=t.screenX,a=p.offsetWidth})),d.addEventListener("mouseover",(function(){d.style.cursor="ew-resize"})),l.addEventListener("mousemove",(function(t){r&&(p.style.width=a+t.screenX-r+"px")})),l.addEventListener("mouseup",(function(t){r&&(t.stopPropagation(),t.stopImmediatePropagation(),r=!1,a=!1,b())})),l.addEventListener("keydown",(function(t){switch(t.keyCode){case 39:t.preventDefault(),p.style.width=p.clientWidth+l.clientWidth/100+"px";break;case 37:t.preventDefault(),p.style.width=p.clientWidth-l.clientWidth/100+"px";break;case 9:case 13:b();break;case 27:n()}})),l.addEventListener("blur",(function(){n()})),p},tickCross:function(t,e,i,n,o){var r=t.getValue(),a=document.createElement("input"),l=o.tristate,s=void 0===o.indeterminateValue?null:o.indeterminateValue,u=!1,h=Object.keys(o).includes("trueValue"),c=Object.keys(o).includes("falseValue");if(a.setAttribute("type","checkbox"),a.style.marginTop="5px",a.style.boxSizing="border-box",o.elementAttributes&&"object"==typeof o.elementAttributes)for(let t in o.elementAttributes)"+"==t.charAt(0)?(t=t.slice(1),a.setAttribute(t,a.getAttribute(t)+o.elementAttributes["+"+t])):a.setAttribute(t,o.elementAttributes[t]);function d(t){var e=a.checked;return h&&e?e=o.trueValue:c&&!e&&(e=o.falseValue),l?t?u?s:e:a.checked&&!u?(a.checked=!1,a.indeterminate=!0,u=!0,s):(u=!1,e):e}return a.value=r,!l||void 0!==r&&r!==s&&""!==r||(u=!0,a.indeterminate=!0),"firefox"!=this.table.browser&&"safari"!=this.table.browser&&e((function(){"cell"===t.getType()&&a.focus({preventScroll:!0})})),a.checked=h?r===o.trueValue:!0===r||"true"===r||"True"===r||1===r,a.addEventListener("change",(function(t){i(d())})),a.addEventListener("blur",(function(t){i(d(!0))})),a.addEventListener("keydown",(function(t){13==t.keyCode&&i(d()),27==t.keyCode&&n()})),a}};class tt extends _{constructor(t){super(t),this.currentCell=!1,this.mouseClick=!1,this.recursionBlock=!1,this.invalidEdit=!1,this.editedCells=[],this.editors=tt.editors,this.registerColumnOption("editable"),this.registerColumnOption("editor"),this.registerColumnOption("editorParams"),this.registerColumnOption("cellEditing"),this.registerColumnOption("cellEdited"),this.registerColumnOption("cellEditCancelled"),this.registerTableFunction("getEditedCells",this.getEditedCells.bind(this)),this.registerTableFunction("clearCellEdited",this.clearCellEdited.bind(this)),this.registerTableFunction("navigatePrev",this.navigatePrev.bind(this)),this.registerTableFunction("navigateNext",this.navigateNext.bind(this)),this.registerTableFunction("navigateLeft",this.navigateLeft.bind(this)),this.registerTableFunction("navigateRight",this.navigateRight.bind(this)),this.registerTableFunction("navigateUp",this.navigateUp.bind(this)),this.registerTableFunction("navigateDown",this.navigateDown.bind(this)),this.registerComponentFunction("cell","isEdited",this.cellIsEdited.bind(this)),this.registerComponentFunction("cell","clearEdited",this.clearEdited.bind(this)),this.registerComponentFunction("cell","edit",this.editCell.bind(this)),this.registerComponentFunction("cell","cancelEdit",this.cellCancelEdit.bind(this)),this.registerComponentFunction("cell","navigatePrev",this.navigatePrev.bind(this)),this.registerComponentFunction("cell","navigateNext",this.navigateNext.bind(this)),this.registerComponentFunction("cell","navigateLeft",this.navigateLeft.bind(this)),this.registerComponentFunction("cell","navigateRight",this.navigateRight.bind(this)),this.registerComponentFunction("cell","navigateUp",this.navigateUp.bind(this)),this.registerComponentFunction("cell","navigateDown",this.navigateDown.bind(this))}initialize(){this.subscribe("cell-init",this.bindEditor.bind(this)),this.subscribe("cell-delete",this.clearEdited.bind(this)),this.subscribe("cell-value-changed",this.updateCellClass.bind(this)),this.subscribe("column-layout",this.initializeColumnCheck.bind(this)),this.subscribe("column-delete",this.columnDeleteCheck.bind(this)),this.subscribe("row-deleting",this.rowDeleteCheck.bind(this)),this.subscribe("row-layout",this.rowEditableCheck.bind(this)),this.subscribe("data-refreshing",this.cancelEdit.bind(this)),this.subscribe("keybinding-nav-prev",this.navigatePrev.bind(this,void 0)),this.subscribe("keybinding-nav-next",this.keybindingNavigateNext.bind(this)),this.subscribe("keybinding-nav-left",this.navigateLeft.bind(this,void 0)),this.subscribe("keybinding-nav-right",this.navigateRight.bind(this,void 0)),this.subscribe("keybinding-nav-up",this.navigateUp.bind(this,void 0)),this.subscribe("keybinding-nav-down",this.navigateDown.bind(this,void 0))}keybindingNavigateNext(t){var e=this.currentCell,i=this.options("tabEndNewRow");e&&(this.navigateNext(e,t)||i&&(e.getElement().firstChild.blur(),(i=!0===i?this.table.addRow({}):"function"==typeof i?this.table.addRow(i(e.row.getComponent())):this.table.addRow(Object.assign({},i))).then((()=>{setTimeout((()=>{e.getComponent().navigateNext()}))}))))}cellIsEdited(t){return!!t.modules.edit&&t.modules.edit.edited}cellCancelEdit(t){t===this.currentCell?this.table.modules.edit.cancelEdit():console.warn("Cancel Editor Error - This cell is not currently being edited ")}updateCellClass(t){this.allowEdit(t)?t.getElement().classList.add("tabulator-editable"):t.getElement().classList.remove("tabulator-editable")}clearCellEdited(t){t||(t=this.table.modules.edit.getEditedCells()),Array.isArray(t)||(t=[t]),t.forEach((t=>{this.table.modules.edit.clearEdited(t._getSelf())}))}navigatePrev(t=this.currentCell,e){var i,n;if(t){if(e&&e.preventDefault(),i=this.navigateLeft())return!0;if((n=this.table.rowManager.prevDisplayRow(t.row,!0))&&(i=this.findPrevEditableCell(n,n.cells.length)))return i.getComponent().edit(),!0}return!1}navigateNext(t=this.currentCell,e){var i,n;if(t){if(e&&e.preventDefault(),i=this.navigateRight())return!0;if((n=this.table.rowManager.nextDisplayRow(t.row,!0))&&(i=this.findNextEditableCell(n,-1)))return i.getComponent().edit(),!0}return!1}navigateLeft(t=this.currentCell,e){var i,n;return!!(t&&(e&&e.preventDefault(),i=t.getIndex(),n=this.findPrevEditableCell(t.row,i)))&&(n.getComponent().edit(),!0)}navigateRight(t=this.currentCell,e){var i,n;return!!(t&&(e&&e.preventDefault(),i=t.getIndex(),n=this.findNextEditableCell(t.row,i)))&&(n.getComponent().edit(),!0)}navigateUp(t=this.currentCell,e){var i,n;return!!(t&&(e&&e.preventDefault(),i=t.getIndex(),n=this.table.rowManager.prevDisplayRow(t.row,!0)))&&(n.cells[i].getComponent().edit(),!0)}navigateDown(t=this.currentCell,e){var i,n;return!!(t&&(e&&e.preventDefault(),i=t.getIndex(),n=this.table.rowManager.nextDisplayRow(t.row,!0)))&&(n.cells[i].getComponent().edit(),!0)}findNextEditableCell(t,e){var i=!1;if(e<t.cells.length-1)for(var n=e+1;n<t.cells.length;n++){let e=t.cells[n];if(e.column.modules.edit&&R.elVisible(e.getElement())&&this.allowEdit(e)){i=e;break}}return i}findPrevEditableCell(t,e){var i=!1;if(e>0)for(var n=e-1;n>=0;n--){let e=t.cells[n];if(e.column.modules.edit&&R.elVisible(e.getElement())&&this.allowEdit(e)){i=e;break}}return i}initializeColumnCheck(t){void 0!==t.definition.editor&&this.initializeColumn(t)}columnDeleteCheck(t){this.currentCell&&this.currentCell.column===t&&this.cancelEdit()}rowDeleteCheck(t){this.currentCell&&this.currentCell.row===t&&this.cancelEdit()}rowEditableCheck(t){t.getCells().forEach((t=>{t.column.modules.edit&&"function"==typeof t.column.modules.edit.check&&this.updateCellClass(t)}))}initializeColumn(t){var e={editor:!1,blocked:!1,check:t.definition.editable,params:t.definition.editorParams||{}};switch(typeof t.definition.editor){case"string":this.editors[t.definition.editor]?e.editor=this.editors[t.definition.editor]:console.warn("Editor Error - No such editor found: ",t.definition.editor);break;case"function":e.editor=t.definition.editor;break;case"boolean":!0===t.definition.editor&&("function"!=typeof t.definition.formatter?this.editors[t.definition.formatter]?e.editor=this.editors[t.definition.formatter]:e.editor=this.editors.input:console.warn("Editor Error - Cannot auto lookup editor for a custom formatter: ",t.definition.formatter))}e.editor&&(t.modules.edit=e)}getCurrentCell(){return!!this.currentCell&&this.currentCell.getComponent()}clearEditor(t){var e,i=this.currentCell;if(this.invalidEdit=!1,i){for(this.currentCell=!1,e=i.getElement(),this.dispatch("edit-editor-clear",i,t),e.classList.remove("tabulator-editing");e.firstChild;)e.removeChild(e.firstChild);i.row.getElement().classList.remove("tabulator-editing"),i.table.element.classList.remove("tabulator-editing")}}cancelEdit(){if(this.currentCell){var t=this.currentCell,e=this.currentCell.getComponent();this.clearEditor(!0),t.setValueActual(t.getValue()),t.cellRendered(),("textarea"==t.column.definition.editor||t.column.definition.variableHeight)&&t.row.normalizeHeight(!0),t.column.definition.cellEditCancelled&&t.column.definition.cellEditCancelled.call(this.table,e),this.dispatch("edit-cancelled",t),this.dispatchExternal("cellEditCancelled",e)}}bindEditor(t){if(t.column.modules.edit){var e=this,i=t.getElement(!0);this.updateCellClass(t),i.setAttribute("tabindex",0),i.addEventListener("click",(function(t){i.classList.contains("tabulator-editing")||i.focus({preventScroll:!0})})),i.addEventListener("mousedown",(function(t){2===t.button?t.preventDefault():e.mouseClick=!0})),i.addEventListener("focus",(function(i){e.recursionBlock||e.edit(t,i,!1)}))}}focusCellNoEvent(t,e){this.recursionBlock=!0,e&&"ie"===this.table.browser||t.getElement().focus({preventScroll:!0}),this.recursionBlock=!1}editCell(t,e){this.focusCellNoEvent(t),this.edit(t,!1,e)}focusScrollAdjust(t){if("virtual"==this.table.rowManager.getRenderMode()){var e=this.table.rowManager.element.scrollTop,i=this.table.rowManager.element.clientHeight+this.table.rowManager.element.scrollTop,n=t.row.getElement();n.offsetTop<e?this.table.rowManager.element.scrollTop-=e-n.offsetTop:n.offsetTop+n.offsetHeight>i&&(this.table.rowManager.element.scrollTop+=n.offsetTop+n.offsetHeight-i);var o=this.table.rowManager.element.scrollLeft,r=this.table.rowManager.element.clientWidth+this.table.rowManager.element.scrollLeft,a=t.getElement();this.table.modExists("frozenColumns")&&(o+=parseInt(this.table.modules.frozenColumns.leftMargin||0),r-=parseInt(this.table.modules.frozenColumns.rightMargin||0)),"virtual"===this.table.options.renderHorizontal&&(o-=parseInt(this.table.columnManager.renderer.vDomPadLeft),r-=parseInt(this.table.columnManager.renderer.vDomPadLeft)),a.offsetLeft<o?this.table.rowManager.element.scrollLeft-=o-a.offsetLeft:a.offsetLeft+a.offsetWidth>r&&(this.table.rowManager.element.scrollLeft+=a.offsetLeft+a.offsetWidth-r)}}allowEdit(t){var e=!!t.column.modules.edit;if(t.column.modules.edit)switch(typeof t.column.modules.edit.check){case"function":t.row.initialized&&(e=t.column.modules.edit.check(t.getComponent()));break;case"string":e=!!t.row.data[t.column.modules.edit.check];break;case"boolean":e=t.column.modules.edit.check}return e}edit(t,e,i){var n,o,r,a=this,l=function(){},s=t.getElement();if(!this.currentCell){if(t.column.modules.edit.blocked)return this.mouseClick=!1,s.blur(),!1;if(e&&e.stopPropagation(),this.allowEdit(t)||i){if(a.cancelEdit(),a.currentCell=t,this.focusScrollAdjust(t),o=t.getComponent(),this.mouseClick&&(this.mouseClick=!1,t.column.definition.cellClick&&t.column.definition.cellClick.call(this.table,e,o)),t.column.definition.cellEditing&&t.column.definition.cellEditing.call(this.table,o),this.dispatch("cell-editing",t),this.dispatchExternal("cellEditing",o),r="function"==typeof t.column.modules.edit.params?t.column.modules.edit.params(o):t.column.modules.edit.params,n=t.column.modules.edit.editor.call(a,o,(function(t){l=t}),(function(e){if(a.currentCell===t){var i=a.chain("edit-success",[t,e],!0,!0);return!0===i||"highlight"===a.table.options.validationMode?(a.clearEditor(),t.modules.edit||(t.modules.edit={}),t.modules.edit.edited=!0,-1==a.editedCells.indexOf(t)&&a.editedCells.push(t),t.setValue(e,!0),!0===i):(a.invalidEdit=!0,a.focusCellNoEvent(t,!0),l(),!1)}}),(function(){a.currentCell===t&&a.cancelEdit()}),r),!this.currentCell||!1===n)return s.blur(),!1;if(!(n instanceof Node))return console.warn("Edit Error - Editor should return an instance of Node, the editor returned:",n),s.blur(),!1;for(s.classList.add("tabulator-editing"),t.row.getElement().classList.add("tabulator-editing"),t.table.element.classList.add("tabulator-editing");s.firstChild;)s.removeChild(s.firstChild);s.appendChild(n),l();for(var u=s.children,h=0;h<u.length;h++)u[h].addEventListener("click",(function(t){t.stopPropagation()}));return!0}return this.mouseClick=!1,s.blur(),!1}this.invalidEdit||this.currentCell===t||this.cancelEdit()}getEditedCells(){var t=[];return this.editedCells.forEach((e=>{t.push(e.getComponent())})),t}clearEdited(t){var e;t.modules.edit&&t.modules.edit.edited&&(t.modules.edit.edited=!1,this.dispatch("edit-edited-clear",t)),(e=this.editedCells.indexOf(t))>-1&&this.editedCells.splice(e,1)}}tt.moduleName="edit",tt.editors=Q;class et{constructor(t,e,i,n){this.type=t,this.columns=e,this.component=i||!1,this.indent=n||0}}class it{constructor(t,e,i,n,o){this.value=t,this.component=e||!1,this.width=i,this.height=n,this.depth=o}}class nt extends _{constructor(t){super(t),this.config={},this.cloneTableStyle=!0,this.colVisProp="",this.registerTableOption("htmlOutputConfig",!1),this.registerColumnOption("htmlOutput"),this.registerColumnOption("titleHtmlOutput")}initialize(){this.registerTableFunction("getHtml",this.getHtml.bind(this))}generateExportList(t,e,i,n){this.cloneTableStyle=e,this.config=t||{},this.colVisProp=n;var o=!1!==this.config.columnHeaders?this.headersToExportRows(this.generateColumnGroupHeaders()):[],r=this.bodyToExportRows(this.rowLookup(i));return o.concat(r)}generateTable(t,e,i,n){var o=this.generateExportList(t,e,i,n);return this.generateTableElement(o)}rowLookup(t){var e=[];if("function"==typeof t)t.call(this.table).forEach((t=>{(t=this.table.rowManager.findRow(t))&&e.push(t)}));else switch(t){case!0:case"visible":e=this.table.rowManager.getVisibleRows(!1,!0);break;case"all":e=this.table.rowManager.rows;break;case"selected":e=this.table.modules.selectRow.selectedRows;break;default:e=this.table.options.pagination?this.table.rowManager.getDisplayRows(this.table.rowManager.displayRows.length-2):this.table.rowManager.getDisplayRows()}return Object.assign([],e)}generateColumnGroupHeaders(){var t=[];return(!1!==this.config.columnGroups?this.table.columnManager.columns:this.table.columnManager.columnsByIndex).forEach((e=>{var i=this.processColumnGroup(e);i&&t.push(i)})),t}processColumnGroup(t){var e=t.columns,i=0,n={title:t.definition["title"+(this.colVisProp.charAt(0).toUpperCase()+this.colVisProp.slice(1))]||t.definition.title,column:t,depth:1};if(e.length){if(n.subGroups=[],n.width=0,e.forEach((t=>{var e=this.processColumnGroup(t);e&&(n.width+=e.width,n.subGroups.push(e),e.depth>i&&(i=e.depth))})),n.depth+=i,!n.width)return!1}else{if(!this.columnVisCheck(t))return!1;n.width=1}return n}columnVisCheck(t){var e=t.definition[this.colVisProp];return"function"==typeof e&&(e=e.call(this.table,t.getComponent())),!1!==e&&(t.visible||!t.visible&&e)}headersToExportRows(t){var e=[],i=0,n=[];function o(t,n){var r=i-n;if(void 0===e[n]&&(e[n]=[]),t.height=t.subGroups?1:r-t.depth+1,e[n].push(t),t.height>1)for(let i=1;i<t.height;i++)void 0===e[n+i]&&(e[n+i]=[]),e[n+i].push(!1);if(t.width>1)for(let i=1;i<t.width;i++)e[n].push(!1);t.subGroups&&t.subGroups.forEach((function(t){o(t,n+1)}))}return t.forEach((function(t){t.depth>i&&(i=t.depth)})),t.forEach((function(t){o(t,0)})),e.forEach((t=>{var e=[];t.forEach((t=>{if(t){let i=void 0===t.title?"":t.title;e.push(new it(i,t.column.getComponent(),t.width,t.height,t.depth))}else e.push(null)})),n.push(new et("header",e))})),n}bodyToExportRows(t){var e=[],i=[];return this.table.columnManager.columnsByIndex.forEach((t=>{this.columnVisCheck(t)&&e.push(t.getComponent())})),!1!==this.config.columnCalcs&&this.table.modExists("columnCalcs")&&(this.table.modules.columnCalcs.topInitialized&&t.unshift(this.table.modules.columnCalcs.topRow),this.table.modules.columnCalcs.botInitialized&&t.push(this.table.modules.columnCalcs.botRow)),(t=t.filter((t=>{switch(t.type){case"group":return!1!==this.config.rowGroups;case"calc":return!1!==this.config.columnCalcs;case"row":return!(this.table.options.dataTree&&!1===this.config.dataTree&&t.modules.dataTree.parent)}return!0}))).forEach(((t,n)=>{var o=t.getData(this.colVisProp),r=[],a=0;switch(t.type){case"group":a=t.level,r.push(new it(t.key,t.getComponent(),e.length,1));break;case"calc":case"row":e.forEach((t=>{r.push(new it(t._column.getFieldValue(o),t,1,1))})),this.table.options.dataTree&&!1!==this.config.dataTree&&(a=t.modules.dataTree.index)}i.push(new et(t.type,r,t.getComponent(),a))})),i}generateTableElement(t){var e=document.createElement("table"),i=document.createElement("thead"),n=document.createElement("tbody"),o=this.lookupTableStyles(),r=this.table.options["rowFormatter"+(this.colVisProp.charAt(0).toUpperCase()+this.colVisProp.slice(1))],a={};return a.rowFormatter=null!==r?r:this.table.options.rowFormatter,this.table.options.dataTree&&!1!==this.config.dataTree&&this.table.modExists("columnCalcs")&&(a.treeElementField=this.table.modules.dataTree.elementField),a.groupHeader=this.table.options["groupHeader"+(this.colVisProp.charAt(0).toUpperCase()+this.colVisProp.slice(1))],a.groupHeader&&!Array.isArray(a.groupHeader)&&(a.groupHeader=[a.groupHeader]),e.classList.add("tabulator-print-table"),this.mapElementStyles(this.table.columnManager.getHeadersElement(),i,["border-top","border-left","border-right","border-bottom","background-color","color","font-weight","font-family","font-size"]),t.length>1e3&&console.warn("It may take a long time to render an HTML table with more than 1000 rows"),t.forEach(((t,e)=>{let r;switch(t.type){case"header":i.appendChild(this.generateHeaderElement(t,a,o));break;case"group":n.appendChild(this.generateGroupElement(t,a,o));break;case"calc":n.appendChild(this.generateCalcElement(t,a,o));break;case"row":r=this.generateRowElement(t,a,o),this.mapElementStyles(e%2&&o.evenRow?o.evenRow:o.oddRow,r,["border-top","border-left","border-right","border-bottom","color","font-weight","font-family","font-size","background-color"]),n.appendChild(r)}})),i.innerHTML&&e.appendChild(i),e.appendChild(n),this.mapElementStyles(this.table.element,e,["border-top","border-left","border-right","border-bottom"]),e}lookupTableStyles(){var t={};return this.cloneTableStyle&&window.getComputedStyle&&(t.oddRow=this.table.element.querySelector(".tabulator-row-odd:not(.tabulator-group):not(.tabulator-calcs)"),t.evenRow=this.table.element.querySelector(".tabulator-row-even:not(.tabulator-group):not(.tabulator-calcs)"),t.calcRow=this.table.element.querySelector(".tabulator-row.tabulator-calcs"),t.firstRow=this.table.element.querySelector(".tabulator-row:not(.tabulator-group):not(.tabulator-calcs)"),t.firstGroup=this.table.element.getElementsByClassName("tabulator-group")[0],t.firstRow&&(t.styleCells=t.firstRow.getElementsByClassName("tabulator-cell"),t.firstCell=t.styleCells[0],t.lastCell=t.styleCells[t.styleCells.length-1])),t}generateHeaderElement(t,e,i){var n=document.createElement("tr");return t.columns.forEach((t=>{if(t){var e=document.createElement("th"),i=t.component._column.definition.cssClass?t.component._column.definition.cssClass.split(" "):[];e.colSpan=t.width,e.rowSpan=t.height,e.innerHTML=t.value,this.cloneTableStyle&&(e.style.boxSizing="border-box"),i.forEach((function(t){e.classList.add(t)})),this.mapElementStyles(t.component.getElement(),e,["text-align","border-top","border-left","border-right","border-bottom","background-color","color","font-weight","font-family","font-size"]),this.mapElementStyles(t.component._column.contentElement,e,["padding-top","padding-left","padding-right","padding-bottom"]),t.component._column.visible?this.mapElementStyles(t.component.getElement(),e,["width"]):t.component._column.definition.width&&(e.style.width=t.component._column.definition.width+"px"),t.component._column.parent&&this.mapElementStyles(t.component._column.parent.groupElement,e,["border-top"]),n.appendChild(e)}})),n}generateGroupElement(t,e,i){var n=document.createElement("tr"),o=document.createElement("td"),r=t.columns[0];return n.classList.add("tabulator-print-table-row"),e.groupHeader&&e.groupHeader[t.indent]?r.value=e.groupHeader[t.indent](r.value,t.component._group.getRowCount(),t.component._group.getData(),t.component):!1!==e.groupHeader&&(r.value=t.component._group.generator(r.value,t.component._group.getRowCount(),t.component._group.getData(),t.component)),o.colSpan=r.width,o.innerHTML=r.value,n.classList.add("tabulator-print-table-group"),n.classList.add("tabulator-group-level-"+t.indent),r.component.isVisible()&&n.classList.add("tabulator-group-visible"),this.mapElementStyles(i.firstGroup,n,["border-top","border-left","border-right","border-bottom","color","font-weight","font-family","font-size","background-color"]),this.mapElementStyles(i.firstGroup,o,["padding-top","padding-left","padding-right","padding-bottom"]),n.appendChild(o),n}generateCalcElement(t,e,i){var n=this.generateRowElement(t,e,i);return n.classList.add("tabulator-print-table-calcs"),this.mapElementStyles(i.calcRow,n,["border-top","border-left","border-right","border-bottom","color","font-weight","font-family","font-size","background-color"]),n}generateRowElement(t,e,i){var n=document.createElement("tr");return n.classList.add("tabulator-print-table-row"),t.columns.forEach(((o,r)=>{if(o){var a,l=document.createElement("td"),s=o.component._column,u=this.table.columnManager.findColumnIndex(s),h=o.value,c={modules:{},getValue:function(){return h},getField:function(){return s.definition.field},getElement:function(){return l},getType:function(){return"cell"},getColumn:function(){return s.getComponent()},getData:function(){return t.component.getData()},getRow:function(){return t.component},getComponent:function(){return c},column:s};if((s.definition.cssClass?s.definition.cssClass.split(" "):[]).forEach((function(t){l.classList.add(t)})),this.table.modExists("format")&&!1!==this.config.formatCells)h=this.table.modules.format.formatExportValue(c,this.colVisProp);else switch(typeof h){case"object":h=null!==h?JSON.stringify(h):"";break;case"undefined":h=""}h instanceof Node?l.appendChild(h):l.innerHTML=h,(a=i.styleCells&&i.styleCells[u]?i.styleCells[u]:i.firstCell)&&(this.mapElementStyles(a,l,["padding-top","padding-left","padding-right","padding-bottom","border-top","border-left","border-right","border-bottom","color","font-weight","font-family","font-size","text-align"]),s.definition.align&&(l.style.textAlign=s.definition.align)),this.table.options.dataTree&&!1!==this.config.dataTree&&(e.treeElementField&&e.treeElementField==s.field||!e.treeElementField&&0==r)&&(t.component._row.modules.dataTree.controlEl&&l.insertBefore(t.component._row.modules.dataTree.controlEl.cloneNode(!0),l.firstChild),t.component._row.modules.dataTree.branchEl&&l.insertBefore(t.component._row.modules.dataTree.branchEl.cloneNode(!0),l.firstChild)),n.appendChild(l),c.modules.format&&c.modules.format.renderedCallback&&c.modules.format.renderedCallback()}})),e.rowFormatter&&"row"===t.type&&!1!==this.config.formatCells&&(Object.assign(t.component).getElement=function(){return n},e.rowFormatter(t.component)),n}generateHTMLTable(t){var e=document.createElement("div");return e.appendChild(this.generateTableElement(t)),e.innerHTML}getHtml(t,e,i,n){var o=this.generateExportList(i||this.table.options.htmlOutputConfig,e,t,n||"htmlOutput");return this.generateHTMLTable(o)}mapElementStyles(t,e,i){if(this.cloneTableStyle&&t&&e){var n={"background-color":"backgroundColor",color:"fontColor",width:"width","font-weight":"fontWeight","font-family":"fontFamily","font-size":"fontSize","text-align":"textAlign","border-top":"borderTop","border-left":"borderLeft","border-right":"borderRight","border-bottom":"borderBottom","padding-top":"paddingTop","padding-left":"paddingLeft","padding-right":"paddingRight","padding-bottom":"paddingBottom"};if(window.getComputedStyle){var o=window.getComputedStyle(t);i.forEach((function(t){e.style[n[t]]||(e.style[n[t]]=o.getPropertyValue(t))}))}}}}nt.moduleName="export";var ot={"=":function(t,e,i,n){return e==t},"<":function(t,e,i,n){return e<t},"<=":function(t,e,i,n){return e<=t},">":function(t,e,i,n){return e>t},">=":function(t,e,i,n){return e>=t},"!=":function(t,e,i,n){return e!=t},regex:function(t,e,i,n){return"string"==typeof t&&(t=new RegExp(t)),t.test(e)},like:function(t,e,i,n){return null==t?e===t:null!=e&&String(e).toLowerCase().indexOf(t.toLowerCase())>-1},keywords:function(t,e,i,n){var o=t.toLowerCase().split(void 0===n.separator?" ":n.separator),r=String(null==e?"":e).toLowerCase(),a=[];return o.forEach((t=>{r.includes(t)&&a.push(!0)})),n.matchAll?a.length===o.length:!!a.length},starts:function(t,e,i,n){return null==t?e===t:null!=e&&String(e).toLowerCase().startsWith(t.toLowerCase())},ends:function(t,e,i,n){return null==t?e===t:null!=e&&String(e).toLowerCase().endsWith(t.toLowerCase())},in:function(t,e,i,n){return Array.isArray(t)?!t.length||t.indexOf(e)>-1:(console.warn("Filter Error - filter value is not an array:",t),!1)}};class rt extends _{constructor(t){super(t),this.filterList=[],this.headerFilters={},this.headerFilterColumns=[],this.prevHeaderFilterChangeCheck="",this.prevHeaderFilterChangeCheck="{}",this.changed=!1,this.tableInitialized=!1,this.registerTableOption("filterMode","local"),this.registerTableOption("initialFilter",!1),this.registerTableOption("initialHeaderFilter",!1),this.registerTableOption("headerFilterLiveFilterDelay",300),this.registerTableOption("placeholderHeaderFilter",!1),this.registerColumnOption("headerFilter"),this.registerColumnOption("headerFilterPlaceholder"),this.registerColumnOption("headerFilterParams"),this.registerColumnOption("headerFilterEmptyCheck"),this.registerColumnOption("headerFilterFunc"),this.registerColumnOption("headerFilterFuncParams"),this.registerColumnOption("headerFilterLiveFilter"),this.registerTableFunction("searchRows",this.searchRows.bind(this)),this.registerTableFunction("searchData",this.searchData.bind(this)),this.registerTableFunction("setFilter",this.userSetFilter.bind(this)),this.registerTableFunction("refreshFilter",this.userRefreshFilter.bind(this)),this.registerTableFunction("addFilter",this.userAddFilter.bind(this)),this.registerTableFunction("getFilters",this.getFilters.bind(this)),this.registerTableFunction("setHeaderFilterFocus",this.userSetHeaderFilterFocus.bind(this)),this.registerTableFunction("getHeaderFilterValue",this.userGetHeaderFilterValue.bind(this)),this.registerTableFunction("setHeaderFilterValue",this.userSetHeaderFilterValue.bind(this)),this.registerTableFunction("getHeaderFilters",this.getHeaderFilters.bind(this)),this.registerTableFunction("removeFilter",this.userRemoveFilter.bind(this)),this.registerTableFunction("clearFilter",this.userClearFilter.bind(this)),this.registerTableFunction("clearHeaderFilter",this.userClearHeaderFilter.bind(this)),this.registerComponentFunction("column","headerFilterFocus",this.setHeaderFilterFocus.bind(this)),this.registerComponentFunction("column","reloadHeaderFilter",this.reloadHeaderFilter.bind(this)),this.registerComponentFunction("column","getHeaderFilterValue",this.getHeaderFilterValue.bind(this)),this.registerComponentFunction("column","setHeaderFilterValue",this.setHeaderFilterValue.bind(this))}initialize(){this.subscribe("column-init",this.initializeColumnHeaderFilter.bind(this)),this.subscribe("column-width-fit-before",this.hideHeaderFilterElements.bind(this)),this.subscribe("column-width-fit-after",this.showHeaderFilterElements.bind(this)),this.subscribe("table-built",this.tableBuilt.bind(this)),this.subscribe("placeholder",this.generatePlaceholder.bind(this)),"remote"===this.table.options.filterMode&&this.subscribe("data-params",this.remoteFilterParams.bind(this)),this.registerDataHandler(this.filter.bind(this),10)}tableBuilt(){this.table.options.initialFilter&&this.setFilter(this.table.options.initialFilter),this.table.options.initialHeaderFilter&&this.table.options.initialHeaderFilter.forEach((t=>{var e=this.table.columnManager.findColumn(t.field);if(!e)return console.warn("Column Filter Error - No matching column found:",t.field),!1;this.setHeaderFilterValue(e,t.value)})),this.tableInitialized=!0}remoteFilterParams(t,e,i,n){return n.filter=this.getFilters(!0,!0),n}generatePlaceholder(t){if(this.table.options.placeholderHeaderFilter&&Object.keys(this.headerFilters).length)return this.table.options.placeholderHeaderFilter}userSetFilter(t,e,i,n){this.setFilter(t,e,i,n),this.refreshFilter()}userRefreshFilter(){this.refreshFilter()}userAddFilter(t,e,i,n){this.addFilter(t,e,i,n),this.refreshFilter()}userSetHeaderFilterFocus(t){var e=this.table.columnManager.findColumn(t);if(!e)return console.warn("Column Filter Focus Error - No matching column found:",t),!1;this.setHeaderFilterFocus(e)}userGetHeaderFilterValue(t){var e=this.table.columnManager.findColumn(t);if(e)return this.getHeaderFilterValue(e);console.warn("Column Filter Error - No matching column found:",t)}userSetHeaderFilterValue(t,e){var i=this.table.columnManager.findColumn(t);if(!i)return console.warn("Column Filter Error - No matching column found:",t),!1;this.setHeaderFilterValue(i,e)}userRemoveFilter(t,e,i){this.removeFilter(t,e,i),this.refreshFilter()}userClearFilter(t){this.clearFilter(t),this.refreshFilter()}userClearHeaderFilter(){this.clearHeaderFilter(),this.refreshFilter()}searchRows(t,e,i){return this.search("rows",t,e,i)}searchData(t,e,i){return this.search("data",t,e,i)}initializeColumnHeaderFilter(t){t.definition.headerFilter&&this.initializeColumn(t)}initializeColumn(t,e){var i=this,n=t.getField();t.modules.filter={success:function(e){var o,r="input"==t.modules.filter.tagType&&"text"==t.modules.filter.attrType||"textarea"==t.modules.filter.tagType?"partial":"match",a="",l="";if(void 0===t.modules.filter.prevSuccess||t.modules.filter.prevSuccess!==e){if(t.modules.filter.prevSuccess=e,t.modules.filter.emptyFunc(e))delete i.headerFilters[n];else{switch(t.modules.filter.value=e,typeof t.definition.headerFilterFunc){case"string":rt.filters[t.definition.headerFilterFunc]?(a=t.definition.headerFilterFunc,o=function(i){var n=t.definition.headerFilterFuncParams||{},o=t.getFieldValue(i);return n="function"==typeof n?n(e,o,i):n,rt.filters[t.definition.headerFilterFunc](e,o,i,n)}):console.warn("Header Filter Error - Matching filter function not found: ",t.definition.headerFilterFunc);break;case"function":a=o=function(i){var n=t.definition.headerFilterFuncParams||{},o=t.getFieldValue(i);return n="function"==typeof n?n(e,o,i):n,t.definition.headerFilterFunc(e,o,i,n)}}o||("partial"===r?(o=function(i){var n=t.getFieldValue(i);return null!=n&&String(n).toLowerCase().indexOf(String(e).toLowerCase())>-1},a="like"):(o=function(i){return t.getFieldValue(i)==e},a="=")),i.headerFilters[n]={value:e,func:o,type:a}}t.modules.filter.value=e,l=JSON.stringify(i.headerFilters),i.prevHeaderFilterChangeCheck!==l&&(i.prevHeaderFilterChangeCheck=l,i.trackChanges(),i.refreshFilter())}return!0},attrType:!1,tagType:!1,emptyFunc:!1},this.generateHeaderFilterElement(t)}generateHeaderFilterElement(t,e,i){var n,o,r,a,l,s,u,h,c=this,d=t.modules.filter.success,p=t.getField();if(t.modules.filter.value=e,t.modules.filter.headerElement&&t.modules.filter.headerElement.parentNode&&t.contentElement.removeChild(t.modules.filter.headerElement.parentNode),p){switch(t.modules.filter.emptyFunc=t.definition.headerFilterEmptyCheck||function(t){return!t&&0!==t},(n=document.createElement("div")).classList.add("tabulator-header-filter"),typeof t.definition.headerFilter){case"string":c.table.modules.edit.editors[t.definition.headerFilter]?(o=c.table.modules.edit.editors[t.definition.headerFilter],"tick"!==t.definition.headerFilter&&"tickCross"!==t.definition.headerFilter||t.definition.headerFilterEmptyCheck||(t.modules.filter.emptyFunc=function(t){return!0!==t&&!1!==t})):console.warn("Filter Error - Cannot build header filter, No such editor found: ",t.definition.editor);break;case"function":o=t.definition.headerFilter;break;case"boolean":t.modules.edit&&t.modules.edit.editor?o=t.modules.edit.editor:t.definition.formatter&&c.table.modules.edit.editors[t.definition.formatter]?(o=c.table.modules.edit.editors[t.definition.formatter],"tick"!==t.definition.formatter&&"tickCross"!==t.definition.formatter||t.definition.headerFilterEmptyCheck||(t.modules.filter.emptyFunc=function(t){return!0!==t&&!1!==t})):o=c.table.modules.edit.editors.input}if(o){if(a={getValue:function(){return void 0!==e?e:""},getField:function(){return t.definition.field},getElement:function(){return n},getColumn:function(){return t.getComponent()},getTable:()=>this.table,getType:()=>"header",getRow:function(){return{normalizeHeight:function(){}}}},u="function"==typeof(u=t.definition.headerFilterParams||{})?u.call(c.table,a):u,!(r=o.call(this.table.modules.edit,a,(function(t){h=t}),d,(function(){}),u)))return void console.warn("Filter Error - Cannot add filter to "+p+" column, editor returned a value of false");if(!(r instanceof Node))return void console.warn("Filter Error - Cannot add filter to "+p+" column, editor should return an instance of Node, the editor returned:",r);c.langBind("headerFilters|columns|"+t.definition.field,(function(e){r.setAttribute("placeholder",void 0!==e&&e?e:t.definition.headerFilterPlaceholder||c.langText("headerFilters|default"))})),r.addEventListener("click",(function(t){t.stopPropagation(),r.focus()})),r.addEventListener("focus",(t=>{var e=this.table.columnManager.contentsElement.scrollLeft;e!==this.table.rowManager.element.scrollLeft&&(this.table.rowManager.scrollHorizontal(e),this.table.columnManager.scrollHorizontal(e))})),l=!1,s=function(t){l&&clearTimeout(l),l=setTimeout((function(){d(r.value)}),c.table.options.headerFilterLiveFilterDelay)},t.modules.filter.headerElement=r,t.modules.filter.attrType=r.hasAttribute("type")?r.getAttribute("type").toLowerCase():"",t.modules.filter.tagType=r.tagName.toLowerCase(),!1!==t.definition.headerFilterLiveFilter&&("autocomplete"!==t.definition.headerFilter&&"tickCross"!==t.definition.headerFilter&&("autocomplete"!==t.definition.editor&&"tickCross"!==t.definition.editor||!0!==t.definition.headerFilter)&&(r.addEventListener("keyup",s),r.addEventListener("search",s),"number"==t.modules.filter.attrType&&r.addEventListener("change",(function(t){d(r.value)})),"text"==t.modules.filter.attrType&&"ie"!==this.table.browser&&r.setAttribute("type","search")),"input"!=t.modules.filter.tagType&&"select"!=t.modules.filter.tagType&&"textarea"!=t.modules.filter.tagType||r.addEventListener("mousedown",(function(t){t.stopPropagation()}))),n.appendChild(r),t.contentElement.appendChild(n),i||c.headerFilterColumns.push(t),h&&h()}}else console.warn("Filter Error - Cannot add header filter, column has no field set:",t.definition.title)}hideHeaderFilterElements(){this.headerFilterColumns.forEach((function(t){t.modules.filter&&t.modules.filter.headerElement&&(t.modules.filter.headerElement.style.display="none")}))}showHeaderFilterElements(){this.headerFilterColumns.forEach((function(t){t.modules.filter&&t.modules.filter.headerElement&&(t.modules.filter.headerElement.style.display="")}))}setHeaderFilterFocus(t){t.modules.filter&&t.modules.filter.headerElement?t.modules.filter.headerElement.focus():console.warn("Column Filter Focus Error - No header filter set on column:",t.getField())}getHeaderFilterValue(t){if(t.modules.filter&&t.modules.filter.headerElement)return t.modules.filter.value;console.warn("Column Filter Error - No header filter set on column:",t.getField())}setHeaderFilterValue(t,e){t&&(t.modules.filter&&t.modules.filter.headerElement?(this.generateHeaderFilterElement(t,e,!0),t.modules.filter.success(e)):console.warn("Column Filter Error - No header filter set on column:",t.getField()))}reloadHeaderFilter(t){t&&(t.modules.filter&&t.modules.filter.headerElement?this.generateHeaderFilterElement(t,t.modules.filter.value,!0):console.warn("Column Filter Error - No header filter set on column:",t.getField()))}refreshFilter(){this.tableInitialized&&("remote"===this.table.options.filterMode?this.reloadData(null,!1,!1):this.refreshData(!0))}trackChanges(){this.changed=!0,this.dispatch("filter-changed")}hasChanged(){var t=this.changed;return this.changed=!1,t}setFilter(t,e,i,n){this.filterList=[],Array.isArray(t)||(t=[{field:t,type:e,value:i,params:n}]),this.addFilter(t)}addFilter(t,e,i,n){var o=!1;Array.isArray(t)||(t=[{field:t,type:e,value:i,params:n}]),t.forEach((t=>{(t=this.findFilter(t))&&(this.filterList.push(t),o=!0)})),o&&this.trackChanges()}findFilter(t){var e;if(Array.isArray(t))return this.findSubFilters(t);var i=!1;return"function"==typeof t.field?i=function(e){return t.field(e,t.type||{})}:rt.filters[t.type]?i=(e=this.table.columnManager.getColumnByField(t.field))?function(i){return rt.filters[t.type](t.value,e.getFieldValue(i),i,t.params||{})}:function(e){return rt.filters[t.type](t.value,e[t.field],e,t.params||{})}:console.warn("Filter Error - No such filter type found, ignoring: ",t.type),t.func=i,!!t.func&&t}findSubFilters(t){var e=[];return t.forEach((t=>{(t=this.findFilter(t))&&e.push(t)})),!!e.length&&e}getFilters(t,e){var i=[];return t&&(i=this.getHeaderFilters()),e&&i.forEach((function(t){"function"==typeof t.type&&(t.type="function")})),i.concat(this.filtersToArray(this.filterList,e))}filtersToArray(t,e){var i=[];return t.forEach((t=>{var n;Array.isArray(t)?i.push(this.filtersToArray(t,e)):(n={field:t.field,type:t.type,value:t.value},e&&"function"==typeof n.type&&(n.type="function"),i.push(n))})),i}getHeaderFilters(){var t=[];for(var e in this.headerFilters)t.push({field:e,type:this.headerFilters[e].type,value:this.headerFilters[e].value});return t}removeFilter(t,e,i){Array.isArray(t)||(t=[{field:t,type:e,value:i}]),t.forEach((t=>{var e;(e="object"==typeof t.field?this.filterList.findIndex((e=>t===e)):this.filterList.findIndex((e=>t.field===e.field&&t.type===e.type&&t.value===e.value)))>-1?this.filterList.splice(e,1):console.warn("Filter Error - No matching filter type found, ignoring: ",t.type)})),this.trackChanges()}clearFilter(t){this.filterList=[],t&&this.clearHeaderFilter(),this.trackChanges()}clearHeaderFilter(){this.headerFilters={},this.prevHeaderFilterChangeCheck="{}",this.headerFilterColumns.forEach((t=>{void 0!==t.modules.filter.value&&delete t.modules.filter.value,t.modules.filter.prevSuccess=void 0,this.reloadHeaderFilter(t)})),this.trackChanges()}search(t,e,i,n){var o=[],r=[];return Array.isArray(e)||(e=[{field:e,type:i,value:n}]),e.forEach((t=>{(t=this.findFilter(t))&&r.push(t)})),this.table.rowManager.rows.forEach((e=>{var i=!0;r.forEach((t=>{this.filterRecurse(t,e.getData())||(i=!1)})),i&&o.push("data"===t?e.getData("data"):e.getComponent())})),o}filter(t,e){var i=[],n=[];return this.subscribedExternal("dataFiltering")&&this.dispatchExternal("dataFiltering",this.getFilters(!0)),"remote"!==this.table.options.filterMode&&(this.filterList.length||Object.keys(this.headerFilters).length)?t.forEach((t=>{this.filterRow(t)&&i.push(t)})):i=t.slice(0),this.subscribedExternal("dataFiltered")&&(i.forEach((t=>{n.push(t.getComponent())})),this.dispatchExternal("dataFiltered",this.getFilters(!0),n)),i}filterRow(t,e){var i=!0,n=t.getData();for(var o in this.filterList.forEach((t=>{this.filterRecurse(t,n)||(i=!1)})),this.headerFilters)this.headerFilters[o].func(n)||(i=!1);return i}filterRecurse(t,e){var i=!1;return Array.isArray(t)?t.forEach((t=>{this.filterRecurse(t,e)&&(i=!0)})):i=t.func(e),i}}rt.moduleName="filter",rt.filters=ot;var at={plaintext:function(t,e,i){return this.emptyToSpace(this.sanitizeHTML(t.getValue()))},html:function(t,e,i){return t.getValue()},textarea:function(t,e,i){return t.getElement().style.whiteSpace="pre-wrap",this.emptyToSpace(this.sanitizeHTML(t.getValue()))},money:function(t,e,i){var n,o,r,a,l,s=parseFloat(t.getValue()),u="",h=e.decimal||".",c=e.thousand||",",d=e.negativeSign||"-",p=e.symbol||"",b=!!e.symbolAfter,m=void 0!==e.precision?e.precision:2;if(isNaN(s))return this.emptyToSpace(this.sanitizeHTML(t.getValue()));if(s<0&&(s=Math.abs(s),u=d),n=!1!==m?s.toFixed(m):s,o=(n=String(n).split("."))[0],r=n.length>1?h+n[1]:"",!1!==e.thousand)for(a=/(\d+)(\d{3})/;a.test(o);)o=o.replace(a,"$1"+c+"$2");return l=o+r,!0===u?(l="("+l+")",b?l+p:p+l):b?u+l+p:u+p+l},link:function(t,e,i){var n,o=t.getValue(),r=e.urlPrefix||"",a=e.download,l=o,s=document.createElement("a");if(e.labelField&&(n=t.getData(),l=function t(e,i){var n=i[e.shift()];return e.length&&"object"==typeof n?t(e,n):n}(e.labelField.split(this.table.options.nestedFieldSeparator),n)),e.label)switch(typeof e.label){case"string":l=e.label;break;case"function":l=e.label(t)}if(l){if(e.urlField&&(o=(n=t.getData())[e.urlField]),e.url)switch(typeof e.url){case"string":o=e.url;break;case"function":o=e.url(t)}return s.setAttribute("href",r+o),e.target&&s.setAttribute("target",e.target),e.download&&(a="function"==typeof a?a(t):!0===a?"":a,s.setAttribute("download",a)),s.innerHTML=this.emptyToSpace(this.sanitizeHTML(l)),s}return"&nbsp;"},image:function(t,e,i){var n=document.createElement("img"),o=t.getValue();switch(e.urlPrefix&&(o=e.urlPrefix+t.getValue()),e.urlSuffix&&(o+=e.urlSuffix),n.setAttribute("src",o),typeof e.height){case"number":n.style.height=e.height+"px";break;case"string":n.style.height=e.height}switch(typeof e.width){case"number":n.style.width=e.width+"px";break;case"string":n.style.width=e.width}return n.addEventListener("load",(function(){t.getRow().normalizeHeight()})),n},tickCross:function(t,e,i){var n=t.getValue(),o=t.getElement(),r=e.allowEmpty,a=e.allowTruthy,l=Object.keys(e).includes("trueValue"),s=void 0!==e.tickElement?e.tickElement:'<svg enable-background="new 0 0 24 24" height="14" width="14" viewBox="0 0 24 24" xml:space="preserve" ><path fill="#2DC214" clip-rule="evenodd" d="M21.652,3.211c-0.293-0.295-0.77-0.295-1.061,0L9.41,14.34  c-0.293,0.297-0.771,0.297-1.062,0L3.449,9.351C3.304,9.203,3.114,9.13,2.923,9.129C2.73,9.128,2.534,9.201,2.387,9.351  l-2.165,1.946C0.078,11.445,0,11.63,0,11.823c0,0.194,0.078,0.397,0.223,0.544l4.94,5.184c0.292,0.296,0.771,0.776,1.062,1.07  l2.124,2.141c0.292,0.293,0.769,0.293,1.062,0l14.366-14.34c0.293-0.294,0.293-0.777,0-1.071L21.652,3.211z" fill-rule="evenodd"/></svg>',u=void 0!==e.crossElement?e.crossElement:'<svg enable-background="new 0 0 24 24" height="14" width="14"  viewBox="0 0 24 24" xml:space="preserve" ><path fill="#CE1515" d="M22.245,4.015c0.313,0.313,0.313,0.826,0,1.139l-6.276,6.27c-0.313,0.312-0.313,0.826,0,1.14l6.273,6.272  c0.313,0.313,0.313,0.826,0,1.14l-2.285,2.277c-0.314,0.312-0.828,0.312-1.142,0l-6.271-6.271c-0.313-0.313-0.828-0.313-1.141,0  l-6.276,6.267c-0.313,0.313-0.828,0.313-1.141,0l-2.282-2.28c-0.313-0.313-0.313-0.826,0-1.14l6.278-6.269  c0.313-0.312,0.313-0.826,0-1.14L1.709,5.147c-0.314-0.313-0.314-0.827,0-1.14l2.284-2.278C4.308,1.417,4.821,1.417,5.135,1.73  L11.405,8c0.314,0.314,0.828,0.314,1.141,0.001l6.276-6.267c0.312-0.312,0.826-0.312,1.141,0L22.245,4.015z"/></svg>';return l&&n===e.trueValue||!l&&(a&&n||!0===n||"true"===n||"True"===n||1===n||"1"===n)?(o.setAttribute("aria-checked",!0),s||""):!r||"null"!==n&&""!==n&&null!=n?(o.setAttribute("aria-checked",!1),u||""):(o.setAttribute("aria-checked","mixed"),"")},datetime:function(t,e,i){var n,o=window.DateTime||luxon.DateTime,r=e.inputFormat||"yyyy-MM-dd HH:mm:ss",a=e.outputFormat||"dd/MM/yyyy HH:mm:ss",l=void 0!==e.invalidPlaceholder?e.invalidPlaceholder:"",s=t.getValue();if(void 0!==o)return(n=o.isDateTime(s)?s:"iso"===r?o.fromISO(String(s)):o.fromFormat(String(s),r)).isValid?(e.timezone&&(n=n.setZone(e.timezone)),n.toFormat(a)):!0!==l&&s?"function"==typeof l?l(s):l:s;console.error("Format Error - 'datetime' formatter is dependant on luxon.js")},datetimediff:function(t,e,i){var n,o=window.DateTime||luxon.DateTime,r=e.inputFormat||"yyyy-MM-dd HH:mm:ss",a=void 0!==e.invalidPlaceholder?e.invalidPlaceholder:"",l=void 0!==e.suffix&&e.suffix,s=void 0!==e.unit?e.unit:"days",u=void 0!==e.humanize&&e.humanize,h=void 0!==e.date?e.date:o.now(),c=t.getValue();if(void 0!==o)return(n=o.isDateTime(c)?c:"iso"===r?o.fromISO(String(c)):o.fromFormat(String(c),r)).isValid?u?n.diff(h,s).toHuman()+(l?" "+l:""):parseInt(n.diff(h,s)[s])+(l?" "+l:""):!0===a?c:"function"==typeof a?a(c):a;console.error("Format Error - 'datetimediff' formatter is dependant on luxon.js")},lookup:function(t,e,i){var n=t.getValue();return void 0===e[n]?(console.warn("Missing display value for "+n),n):e[n]},star:function(t,e,i){var n=t.getValue(),o=t.getElement(),r=e&&e.stars?e.stars:5,a=document.createElement("span"),l=document.createElementNS("http://www.w3.org/2000/svg","svg");a.style.verticalAlign="middle",l.setAttribute("width","14"),l.setAttribute("height","14"),l.setAttribute("viewBox","0 0 512 512"),l.setAttribute("xml:space","preserve"),l.style.padding="0 1px",n=n&&!isNaN(n)?parseInt(n):0,n=Math.max(0,Math.min(n,r));for(var s=1;s<=r;s++){var u=l.cloneNode(!0);u.innerHTML=s<=n?'<polygon fill="#FFEA00" stroke="#C1AB60" stroke-width="37.6152" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" points="259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 "/>':'<polygon fill="#D2D2D2" stroke="#686868" stroke-width="37.6152" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" points="259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 "/>',a.appendChild(u)}return o.style.whiteSpace="nowrap",o.style.overflow="hidden",o.style.textOverflow="ellipsis",o.setAttribute("aria-label",n),a},traffic:function(t,e,i){var n,o,r=this.sanitizeHTML(t.getValue())||0,a=document.createElement("span"),l=e&&e.max?e.max:100,s=e&&e.min?e.min:0,u=e&&void 0!==e.color?e.color:["red","orange","green"],h="#666666";if(!isNaN(r)&&void 0!==t.getValue()){switch(a.classList.add("tabulator-traffic-light"),o=parseFloat(r)<=l?parseFloat(r):l,o=parseFloat(o)>=s?parseFloat(o):s,n=(l-s)/100,o=Math.round((o-s)/n),typeof u){case"string":h=u;break;case"function":h=u(r);break;case"object":if(Array.isArray(u)){var c=100/u.length,d=Math.floor(o/c);d=Math.min(d,u.length-1),h=u[d=Math.max(d,0)];break}}return a.style.backgroundColor=h,a}},progress:function(t,e={},i){var n,o,r,a,l,s=this.sanitizeHTML(t.getValue())||0,u=t.getElement(),h=e.max?e.max:100,c=e.min?e.min:0,d=e.legendAlign?e.legendAlign:"center";switch(o=parseFloat(s)<=h?parseFloat(s):h,o=parseFloat(o)>=c?parseFloat(o):c,n=(h-c)/100,o=Math.round((o-c)/n),typeof e.color){case"string":r=e.color;break;case"function":r=e.color(s);break;case"object":if(Array.isArray(e.color)){let t=100/e.color.length,i=Math.floor(o/t);i=Math.min(i,e.color.length-1),i=Math.max(i,0),r=e.color[i];break}default:r="#2DC214"}switch(typeof e.legend){case"string":a=e.legend;break;case"function":a=e.legend(s);break;case"boolean":a=s;break;default:a=!1}switch(typeof e.legendColor){case"string":l=e.legendColor;break;case"function":l=e.legendColor(s);break;case"object":if(Array.isArray(e.legendColor)){let t=100/e.legendColor.length,i=Math.floor(o/t);i=Math.min(i,e.legendColor.length-1),i=Math.max(i,0),l=e.legendColor[i]}break;default:l="#000"}u.style.minWidth="30px",u.style.position="relative",u.setAttribute("aria-label",o);var p=document.createElement("div");p.style.display="inline-block",p.style.width=o+"%",p.style.backgroundColor=r,p.style.height="100%",p.setAttribute("data-max",h),p.setAttribute("data-min",c);var b=document.createElement("div");if(b.style.position="relative",b.style.width="100%",b.style.height="100%",a){var m=document.createElement("div");m.style.position="absolute",m.style.top=0,m.style.left=0,m.style.textAlign=d,m.style.width="100%",m.style.color=l,m.innerHTML=a}return i((function(){if(!(t instanceof O)){var e=document.createElement("div");e.style.position="absolute",e.style.top="4px",e.style.bottom="4px",e.style.left="4px",e.style.right="4px",u.appendChild(e),u=e}u.appendChild(b),b.appendChild(p),a&&b.appendChild(m)})),""},color:function(t,e,i){return t.getElement().style.backgroundColor=this.sanitizeHTML(t.getValue()),""},buttonTick:function(t,e,i){return'<svg enable-background="new 0 0 24 24" height="14" width="14" viewBox="0 0 24 24" xml:space="preserve" ><path fill="#2DC214" clip-rule="evenodd" d="M21.652,3.211c-0.293-0.295-0.77-0.295-1.061,0L9.41,14.34  c-0.293,0.297-0.771,0.297-1.062,0L3.449,9.351C3.304,9.203,3.114,9.13,2.923,9.129C2.73,9.128,2.534,9.201,2.387,9.351  l-2.165,1.946C0.078,11.445,0,11.63,0,11.823c0,0.194,0.078,0.397,0.223,0.544l4.94,5.184c0.292,0.296,0.771,0.776,1.062,1.07  l2.124,2.141c0.292,0.293,0.769,0.293,1.062,0l14.366-14.34c0.293-0.294,0.293-0.777,0-1.071L21.652,3.211z" fill-rule="evenodd"/></svg>'},buttonCross:function(t,e,i){return'<svg enable-background="new 0 0 24 24" height="14" width="14" viewBox="0 0 24 24" xml:space="preserve" ><path fill="#CE1515" d="M22.245,4.015c0.313,0.313,0.313,0.826,0,1.139l-6.276,6.27c-0.313,0.312-0.313,0.826,0,1.14l6.273,6.272  c0.313,0.313,0.313,0.826,0,1.14l-2.285,2.277c-0.314,0.312-0.828,0.312-1.142,0l-6.271-6.271c-0.313-0.313-0.828-0.313-1.141,0  l-6.276,6.267c-0.313,0.313-0.828,0.313-1.141,0l-2.282-2.28c-0.313-0.313-0.313-0.826,0-1.14l6.278-6.269  c0.313-0.312,0.313-0.826,0-1.14L1.709,5.147c-0.314-0.313-0.314-0.827,0-1.14l2.284-2.278C4.308,1.417,4.821,1.417,5.135,1.73  L11.405,8c0.314,0.314,0.828,0.314,1.141,0.001l6.276-6.267c0.312-0.312,0.826-0.312,1.141,0L22.245,4.015z"/></svg>'},rownum:function(t,e,i){var n=document.createElement("span");return t.getRow().watchPosition((t=>{n.innerText=t})),n},handle:function(t,e,i){return t.getElement().classList.add("tabulator-row-handle"),"<div class='tabulator-row-handle-box'><div class='tabulator-row-handle-bar'></div><div class='tabulator-row-handle-bar'></div><div class='tabulator-row-handle-bar'></div></div>"},responsiveCollapse:function(t,e,i){var n=document.createElement("div"),o=t.getRow()._row.modules.responsiveLayout;function r(t){var e=o.element;o.open=t,e&&(o.open?(n.classList.add("open"),e.style.display=""):(n.classList.remove("open"),e.style.display="none"))}return n.classList.add("tabulator-responsive-collapse-toggle"),n.innerHTML='<svg class=\'tabulator-responsive-collapse-toggle-open\' viewbox="0 0 24 24">\n  <line x1="7" y1="12" x2="17" y2="12" fill="none" stroke-width="3" stroke-linecap="round" />\n  <line y1="7" x1="12" y2="17" x2="12" fill="none" stroke-width="3" stroke-linecap="round" />\n</svg>\n\n<svg class=\'tabulator-responsive-collapse-toggle-close\' viewbox="0 0 24 24">\n  <line x1="7" y1="12" x2="17" y2="12"  fill="none" stroke-width="3" stroke-linecap="round" />\n</svg>',t.getElement().classList.add("tabulator-row-handle"),n.addEventListener("click",(function(e){e.stopImmediatePropagation(),r(!o.open),t.getTable().rowManager.adjustTableSize()})),r(o.open),n},rowSelection:function(t,e,i){var n=document.createElement("input"),o=!1;if(n.type="checkbox",n.setAttribute("aria-label","Select Row"),this.table.modExists("selectRow",!0))if(n.addEventListener("click",(t=>{t.stopPropagation()})),"function"==typeof t.getRow){var r=t.getRow();r instanceof G?(n.addEventListener("change",(t=>{"click"===this.table.options.selectableRangeMode&&o?o=!1:r.toggleSelect()})),"click"===this.table.options.selectableRangeMode&&n.addEventListener("click",(t=>{o=!0,this.table.modules.selectRow.handleComplexRowClick(r._row,t)})),n.checked=r.isSelected&&r.isSelected(),this.table.modules.selectRow.registerRowSelectCheckbox(r,n)):n=""}else n.addEventListener("change",(t=>{this.table.modules.selectRow.selectedRows.length?this.table.deselectRow():this.table.selectRow(e.rowRange)})),this.table.modules.selectRow.registerHeaderSelectCheckbox(n);return n}};class lt extends _{constructor(t){super(t),this.registerColumnOption("formatter"),this.registerColumnOption("formatterParams"),this.registerColumnOption("formatterPrint"),this.registerColumnOption("formatterPrintParams"),this.registerColumnOption("formatterClipboard"),this.registerColumnOption("formatterClipboardParams"),this.registerColumnOption("formatterHtmlOutput"),this.registerColumnOption("formatterHtmlOutputParams"),this.registerColumnOption("titleFormatter"),this.registerColumnOption("titleFormatterParams")}initialize(){this.subscribe("cell-format",this.formatValue.bind(this)),this.subscribe("cell-rendered",this.cellRendered.bind(this)),this.subscribe("column-layout",this.initializeColumn.bind(this)),this.subscribe("column-format",this.formatHeader.bind(this))}initializeColumn(t){t.modules.format=this.lookupFormatter(t,""),void 0!==t.definition.formatterPrint&&(t.modules.format.print=this.lookupFormatter(t,"Print")),void 0!==t.definition.formatterClipboard&&(t.modules.format.clipboard=this.lookupFormatter(t,"Clipboard")),void 0!==t.definition.formatterHtmlOutput&&(t.modules.format.htmlOutput=this.lookupFormatter(t,"HtmlOutput"))}lookupFormatter(t,e){var i={params:t.definition["formatter"+e+"Params"]||{}},n=t.definition["formatter"+e];switch(typeof n){case"string":lt.formatters[n]?i.formatter=lt.formatters[n]:(console.warn("Formatter Error - No such formatter found: ",n),i.formatter=lt.formatters.plaintext);break;case"function":i.formatter=n;break;default:i.formatter=lt.formatters.plaintext}return i}cellRendered(t){t.modules.format&&t.modules.format.renderedCallback&&!t.modules.format.rendered&&(t.modules.format.renderedCallback(),t.modules.format.rendered=!0)}formatHeader(t,e,i){var n,o,r,a;return t.definition.titleFormatter?(n=this.getFormatter(t.definition.titleFormatter),r=e=>{t.titleFormatterRendered=e},a={getValue:function(){return e},getElement:function(){return i},getType:function(){return"header"},getColumn:function(){return t.getComponent()},getTable:()=>this.table},o="function"==typeof(o=t.definition.titleFormatterParams||{})?o():o,n.call(this,a,o,r)):e}formatValue(t){var e=t.getComponent(),i="function"==typeof t.column.modules.format.params?t.column.modules.format.params(e):t.column.modules.format.params;return t.column.modules.format.formatter.call(this,e,i,(function(e){t.modules.format||(t.modules.format={}),t.modules.format.renderedCallback=e,t.modules.format.rendered=!1}))}formatExportValue(t,e){var i,n=t.column.modules.format[e];if(n){function o(e){t.modules.format||(t.modules.format={}),t.modules.format.renderedCallback=e,t.modules.format.rendered=!1}return i="function"==typeof n.params?n.params(t.getComponent()):n.params,n.formatter.call(this,t.getComponent(),i,o)}return this.formatValue(t)}sanitizeHTML(t){if(t){var e={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"};return String(t).replace(/[&<>"'`=/]/g,(function(t){return e[t]}))}return t}emptyToSpace(t){return null==t||""===t?"&nbsp;":t}getFormatter(t){switch(typeof t){case"string":lt.formatters[t]?t=lt.formatters[t]:(console.warn("Formatter Error - No such formatter found: ",t),t=lt.formatters.plaintext);break;case"function":break;default:t=lt.formatters.plaintext}return t}}lt.moduleName="format",lt.formatters=at;class st extends _{constructor(t){super(t),this.leftColumns=[],this.rightColumns=[],this.initializationMode="left",this.active=!1,this.blocked=!0,this.registerColumnOption("frozen")}reset(){this.initializationMode="left",this.leftColumns=[],this.rightColumns=[],this.active=!1}initialize(){this.subscribe("cell-layout",this.layoutCell.bind(this)),this.subscribe("column-init",this.initializeColumn.bind(this)),this.subscribe("column-width",this.layout.bind(this)),this.subscribe("row-layout-after",this.layoutRow.bind(this)),this.subscribe("table-layout",this.layout.bind(this)),this.subscribe("columns-loading",this.reset.bind(this)),this.subscribe("column-add",this.reinitializeColumns.bind(this)),this.subscribe("column-delete",this.reinitializeColumns.bind(this)),this.subscribe("table-redraw",this.layout.bind(this)),this.subscribe("layout-refreshing",this.blockLayout.bind(this)),this.subscribe("layout-refreshed",this.unblockLayout.bind(this)),this.subscribe("scrollbar-vertical",this.adjustForScrollbar.bind(this))}blockLayout(){this.blocked=!0}unblockLayout(){this.blocked=!1}layoutCell(t){this.layoutElement(t.element,t.column)}reinitializeColumns(){this.reset(),this.table.columnManager.columnsByIndex.forEach((t=>{this.initializeColumn(t)}))}initializeColumn(t){var e={margin:0,edge:!1};t.isGroup||(this.frozenCheck(t)?(e.position=this.initializationMode,"left"==this.initializationMode?this.leftColumns.push(t):this.rightColumns.unshift(t),this.active=!0,t.modules.frozen=e):this.initializationMode="right")}frozenCheck(t){return t.parent.isGroup&&t.definition.frozen&&console.warn("Frozen Column Error - Parent column group must be frozen, not individual columns or sub column groups"),t.parent.isGroup?this.frozenCheck(t.parent):t.definition.frozen}layoutCalcRows(){this.table.modExists("columnCalcs")&&(this.table.modules.columnCalcs.topInitialized&&this.table.modules.columnCalcs.topRow&&this.layoutRow(this.table.modules.columnCalcs.topRow),this.table.modules.columnCalcs.botInitialized&&this.table.modules.columnCalcs.botRow&&this.layoutRow(this.table.modules.columnCalcs.botRow),this.table.modExists("groupRows")&&this.layoutGroupCalcs(this.table.modules.groupRows.getGroups()))}layoutGroupCalcs(t){t.forEach((t=>{t.calcs.top&&this.layoutRow(t.calcs.top),t.calcs.bottom&&this.layoutRow(t.calcs.bottom),t.groupList&&t.groupList.length&&this.layoutGroupCalcs(t.groupList)}))}layoutColumnPosition(t){var e=[],i=0,n=0;this.leftColumns.forEach(((n,o)=>{if(n.modules.frozen.marginValue=i,n.modules.frozen.margin=n.modules.frozen.marginValue+"px",n.visible&&(i+=n.getWidth()),o==this.leftColumns.length-1?n.modules.frozen.edge=!0:n.modules.frozen.edge=!1,n.parent.isGroup){var r=this.getColGroupParentElement(n);e.includes(r)||(this.layoutElement(r,n),e.push(r)),n.modules.frozen.edge&&r.classList.add("tabulator-frozen-"+n.modules.frozen.position)}else this.layoutElement(n.getElement(),n);t&&n.cells.forEach((t=>{this.layoutElement(t.getElement(!0),n)}))})),this.rightColumns.forEach(((e,i)=>{e.modules.frozen.marginValue=n,e.modules.frozen.margin=e.modules.frozen.marginValue+"px",e.visible&&(n+=e.getWidth()),i==this.rightColumns.length-1?e.modules.frozen.edge=!0:e.modules.frozen.edge=!1,e.parent.isGroup?this.layoutElement(this.getColGroupParentElement(e),e):this.layoutElement(e.getElement(),e),t&&e.cells.forEach((t=>{this.layoutElement(t.getElement(!0),e)}))}))}getColGroupParentElement(t){return t.parent.isGroup?this.getColGroupParentElement(t.parent):t.getElement()}layout(){this.active&&!this.blocked&&(this.layoutColumnPosition(),this.reinitializeRows(),this.layoutCalcRows())}reinitializeRows(){var t=this.table.rowManager.getVisibleRows(!0);this.table.rowManager.getRows().filter((e=>!t.includes(e))).forEach((t=>{t.deinitialize()})),t.forEach((t=>{"row"===t.type&&this.layoutRow(t)}))}layoutRow(t){"fitDataFill"===this.table.options.layout&&this.rightColumns.length&&(this.table.rowManager.getTableElement().style.minWidth="calc(100% - "+this.rightMargin+")"),this.leftColumns.forEach((e=>{var i=t.getCell(e);i&&this.layoutElement(i.getElement(!0),e)})),this.rightColumns.forEach((e=>{var i=t.getCell(e);i&&this.layoutElement(i.getElement(!0),e)}))}layoutElement(t,e){var i;e.modules.frozen&&t&&(t.style.position="sticky",i=this.table.rtl?"left"===e.modules.frozen.position?"right":"left":e.modules.frozen.position,t.style[i]=e.modules.frozen.margin,t.classList.add("tabulator-frozen"),e.modules.frozen.edge&&t.classList.add("tabulator-frozen-"+e.modules.frozen.position))}adjustForScrollbar(t){this.rightColumns.length&&(this.table.columnManager.getContentsElement().style.width="calc(100% - "+t+"px)")}_calcSpace(t,e){var i=0;for(let n=0;n<e;n++)t[n].visible&&(i+=t[n].getWidth());return i}}st.moduleName="frozenColumns";class ut extends _{constructor(t){super(t),this.topElement=document.createElement("div"),this.rows=[],this.registerComponentFunction("row","freeze",this.freezeRow.bind(this)),this.registerComponentFunction("row","unfreeze",this.unfreezeRow.bind(this)),this.registerComponentFunction("row","isFrozen",this.isRowFrozen.bind(this)),this.registerTableOption("frozenRowsField","id"),this.registerTableOption("frozenRows",!1)}initialize(){this.rows=[],this.topElement.classList.add("tabulator-frozen-rows-holder"),this.table.columnManager.getContentsElement().insertBefore(this.topElement,this.table.columnManager.headersElement.nextSibling),this.subscribe("row-deleting",this.detachRow.bind(this)),this.subscribe("rows-visible",this.visibleRows.bind(this)),this.registerDisplayHandler(this.getRows.bind(this),10),this.table.options.frozenRows&&(this.subscribe("data-processed",this.initializeRows.bind(this)),this.subscribe("row-added",this.initializeRow.bind(this)),this.subscribe("table-redrawing",this.resizeHolderWidth.bind(this)),this.subscribe("column-resized",this.resizeHolderWidth.bind(this)),this.subscribe("column-show",this.resizeHolderWidth.bind(this)),this.subscribe("column-hide",this.resizeHolderWidth.bind(this))),this.resizeHolderWidth()}resizeHolderWidth(){this.topElement.style.minWidth=this.table.columnManager.headersElement.offsetWidth+"px"}initializeRows(){this.table.rowManager.getRows().forEach((t=>{this.initializeRow(t)}))}initializeRow(t){var e=this.table.options.frozenRows,i=typeof e;"number"===i?t.getPosition()&&t.getPosition()+this.rows.length<=e&&this.freezeRow(t):"function"===i?e.call(this.table,t.getComponent())&&this.freezeRow(t):Array.isArray(e)&&e.includes(t.data[this.options("frozenRowsField")])&&this.freezeRow(t)}isRowFrozen(t){return this.rows.indexOf(t)>-1}isFrozen(){return!!this.rows.length}visibleRows(t,e){return this.rows.forEach((t=>{e.push(t)})),e}getRows(t){var e=t.slice(0);return this.rows.forEach((function(t){var i=e.indexOf(t);i>-1&&e.splice(i,1)})),e}freezeRow(t){t.modules.frozen?console.warn("Freeze Error - Row is already frozen"):(t.modules.frozen=!0,this.topElement.appendChild(t.getElement()),t.initialize(),t.normalizeHeight(),this.rows.push(t),this.refreshData(!1,"display"),this.table.rowManager.adjustTableSize(),this.styleRows())}unfreezeRow(t){t.modules.frozen?(t.modules.frozen=!1,this.detachRow(t),this.table.rowManager.adjustTableSize(),this.refreshData(!1,"display"),this.rows.length&&this.styleRows()):console.warn("Freeze Error - Row is already unfrozen")}detachRow(t){var e=this.rows.indexOf(t);if(e>-1){var i=t.getElement();i.parentNode&&i.parentNode.removeChild(i),this.rows.splice(e,1)}}styleRows(t){this.rows.forEach(((t,e)=>{this.table.rowManager.styleRow(t,e)}))}}ut.moduleName="frozenRows";class ht{constructor(t){return this._group=t,this.type="GroupComponent",new Proxy(this,{get:function(t,e,i){return void 0!==t[e]?t[e]:t._group.groupManager.table.componentFunctionBinder.handle("group",t._group,e)}})}getKey(){return this._group.key}getField(){return this._group.field}getElement(){return this._group.element}getRows(){return this._group.getRows(!0)}getSubGroups(){return this._group.getSubGroups(!0)}getParentGroup(){return!!this._group.parent&&this._group.parent.getComponent()}isVisible(){return this._group.visible}show(){this._group.show()}hide(){this._group.hide()}toggle(){this._group.toggleVisibility()}scrollTo(t,e){return this._group.groupManager.table.rowManager.scrollToRow(this._group,t,e)}_getSelf(){return this._group}getTable(){return this._group.groupManager.table}}class ct{constructor(t,e,i,n,o,r,a){this.groupManager=t,this.parent=e,this.key=n,this.level=i,this.field=o,this.hasSubGroups=i<t.groupIDLookups.length-1,this.addRow=this.hasSubGroups?this._addRowToGroup:this._addRow,this.type="group",this.old=a,this.rows=[],this.groups=[],this.groupList=[],this.generator=r,this.element=!1,this.elementContents=!1,this.height=0,this.outerHeight=0,this.initialized=!1,this.calcs={},this.initialized=!1,this.modules={},this.arrowElement=!1,this.visible=a?a.visible:void 0!==t.startOpen[i]?t.startOpen[i]:t.startOpen[0],this.component=null,this.createElements(),this.addBindings(),this.createValueGroups()}wipe(t){t||(this.groupList.length?this.groupList.forEach((function(t){t.wipe()})):this.rows.forEach((t=>{t.modules&&delete t.modules.group}))),this.element=!1,this.arrowElement=!1,this.elementContents=!1}createElements(){var t=document.createElement("div");t.classList.add("tabulator-arrow"),this.element=document.createElement("div"),this.element.classList.add("tabulator-row"),this.element.classList.add("tabulator-group"),this.element.classList.add("tabulator-group-level-"+this.level),this.element.setAttribute("role","rowgroup"),this.arrowElement=document.createElement("div"),this.arrowElement.classList.add("tabulator-group-toggle"),this.arrowElement.appendChild(t),!1!==this.groupManager.table.options.movableRows&&this.groupManager.table.modExists("moveRow")&&this.groupManager.table.modules.moveRow.initializeGroupHeader(this)}createValueGroups(){var t=this.level+1;this.groupManager.allowedValues&&this.groupManager.allowedValues[t]&&this.groupManager.allowedValues[t].forEach((e=>{this._createGroup(e,t)}))}addBindings(){this.groupManager.table.options.groupToggleElement&&("arrow"==this.groupManager.table.options.groupToggleElement?this.arrowElement:this.element).addEventListener("click",(t=>{"arrow"===this.groupManager.table.options.groupToggleElement&&(t.stopPropagation(),t.stopImmediatePropagation()),setTimeout((()=>{this.toggleVisibility()}))}))}_createGroup(t,e){var i=e+"_"+t,n=new ct(this.groupManager,this,e,t,this.groupManager.groupIDLookups[e].field,this.groupManager.headerGenerator[e]||this.groupManager.headerGenerator[0],!!this.old&&this.old.groups[i]);this.groups[i]=n,this.groupList.push(n)}_addRowToGroup(t){var e=this.level+1;if(this.hasSubGroups){var i=this.groupManager.groupIDLookups[e].func(t.getData()),n=e+"_"+i;this.groupManager.allowedValues&&this.groupManager.allowedValues[e]?this.groups[n]&&this.groups[n].addRow(t):(this.groups[n]||this._createGroup(i,e),this.groups[n].addRow(t))}}_addRow(t){this.rows.push(t),t.modules.group=this}insertRow(t,e,i){var n=this.conformRowData({});t.updateData(n);var o=this.rows.indexOf(e);o>-1?i?this.rows.splice(o+1,0,t):this.rows.splice(o,0,t):i?this.rows.push(t):this.rows.unshift(t),t.modules.group=this,this.groupManager.table.modExists("columnCalcs")&&"table"!=this.groupManager.table.options.columnCalcs&&this.groupManager.table.modules.columnCalcs.recalcGroup(this),this.groupManager.updateGroupRows(!0)}scrollHeader(t){this.arrowElement&&(this.arrowElement.style.marginLeft=t,this.groupList.forEach((function(e){e.scrollHeader(t)})))}getRowIndex(t){}conformRowData(t){return this.field?t[this.field]=this.key:console.warn("Data Conforming Error - Cannot conform row data to match new group as groupBy is a function"),this.parent&&(t=this.parent.conformRowData(t)),t}removeRow(t){var e=this.rows.indexOf(t),i=t.getElement();e>-1&&this.rows.splice(e,1),this.groupManager.table.options.groupValues||this.rows.length?(i.parentNode&&i.parentNode.removeChild(i),this.groupManager.blockRedraw||(this.generateGroupHeaderContents(),this.groupManager.table.modExists("columnCalcs")&&"table"!=this.groupManager.table.options.columnCalcs&&this.groupManager.table.modules.columnCalcs.recalcGroup(this))):(this.parent?this.parent.removeGroup(this):this.groupManager.removeGroup(this),this.groupManager.updateGroupRows(!0))}removeGroup(t){var e,i=t.level+"_"+t.key;this.groups[i]&&(delete this.groups[i],(e=this.groupList.indexOf(t))>-1&&this.groupList.splice(e,1),this.groupList.length||(this.parent?this.parent.removeGroup(this):this.groupManager.removeGroup(this)))}getHeadersAndRows(){var t=[];return t.push(this),this._visSet(),this.calcs.top&&(this.calcs.top.detachElement(),this.calcs.top.deleteCells()),this.calcs.bottom&&(this.calcs.bottom.detachElement(),this.calcs.bottom.deleteCells()),this.visible?this.groupList.length?this.groupList.forEach((function(e){t=t.concat(e.getHeadersAndRows())})):("table"!=this.groupManager.table.options.columnCalcs&&this.groupManager.table.modExists("columnCalcs")&&this.groupManager.table.modules.columnCalcs.hasTopCalcs()&&(this.calcs.top=this.groupManager.table.modules.columnCalcs.generateTopRow(this.rows),t.push(this.calcs.top)),t=t.concat(this.rows),"table"!=this.groupManager.table.options.columnCalcs&&this.groupManager.table.modExists("columnCalcs")&&this.groupManager.table.modules.columnCalcs.hasBottomCalcs()&&(this.calcs.bottom=this.groupManager.table.modules.columnCalcs.generateBottomRow(this.rows),t.push(this.calcs.bottom))):this.groupList.length||"table"==this.groupManager.table.options.columnCalcs||this.groupManager.table.modExists("columnCalcs")&&(this.groupManager.table.modules.columnCalcs.hasTopCalcs()&&this.groupManager.table.options.groupClosedShowCalcs&&(this.calcs.top=this.groupManager.table.modules.columnCalcs.generateTopRow(this.rows),t.push(this.calcs.top)),this.groupManager.table.modules.columnCalcs.hasBottomCalcs()&&this.groupManager.table.options.groupClosedShowCalcs&&(this.calcs.bottom=this.groupManager.table.modules.columnCalcs.generateBottomRow(this.rows),t.push(this.calcs.bottom))),t}getData(t,e){var i=[];return this._visSet(),(!t||t&&this.visible)&&this.rows.forEach((t=>{i.push(t.getData(e||"data"))})),i}getRowCount(){var t=0;return this.groupList.length?this.groupList.forEach((e=>{t+=e.getRowCount()})):t=this.rows.length,t}toggleVisibility(){this.visible?this.hide():this.show()}hide(){this.visible=!1,"basic"!=this.groupManager.table.rowManager.getRenderMode()||this.groupManager.table.options.pagination||(this.element.classList.remove("tabulator-group-visible"),this.groupList.length?this.groupList.forEach((t=>{t.getHeadersAndRows().forEach((t=>{t.detachElement()}))})):this.rows.forEach((t=>{var e=t.getElement();e.parentNode.removeChild(e)}))),this.groupManager.updateGroupRows(!0),this.groupManager.table.externalEvents.dispatch("groupVisibilityChanged",this.getComponent(),!1)}show(){if(this.visible=!0,"basic"!=this.groupManager.table.rowManager.getRenderMode()||this.groupManager.table.options.pagination)this.groupManager.updateGroupRows(!0);else{this.element.classList.add("tabulator-group-visible");var t=this.generateElement();this.groupList.length?this.groupList.forEach((e=>{e.getHeadersAndRows().forEach((e=>{var i=e.getElement();t.parentNode.insertBefore(i,t.nextSibling),e.initialize(),t=i}))})):this.rows.forEach((e=>{var i=e.getElement();t.parentNode.insertBefore(i,t.nextSibling),e.initialize(),t=i})),this.groupManager.updateGroupRows(!0)}this.groupManager.table.externalEvents.dispatch("groupVisibilityChanged",this.getComponent(),!0)}_visSet(){var t=[];"function"==typeof this.visible&&(this.rows.forEach((function(e){t.push(e.getData())})),this.visible=this.visible(this.key,this.getRowCount(),t,this.getComponent()))}getRowGroup(t){var e=!1;return this.groupList.length?this.groupList.forEach((function(i){var n=i.getRowGroup(t);n&&(e=n)})):this.rows.find((function(e){return e===t}))&&(e=this),e}getSubGroups(t){var e=[];return this.groupList.forEach((function(i){e.push(t?i.getComponent():i)})),e}getRows(t,e){var i=[];return e&&this.groupList.length?this.groupList.forEach((n=>{i=i.concat(n.getRows(t,e))})):this.rows.forEach((function(e){i.push(t?e.getComponent():e)})),i}generateGroupHeaderContents(){var t=[];for(this.getRows(!1,!0).forEach((function(e){t.push(e.getData())})),this.elementContents=this.generator(this.key,this.getRowCount(),t,this.getComponent());this.element.firstChild;)this.element.removeChild(this.element.firstChild);"string"==typeof this.elementContents?this.element.innerHTML=this.elementContents:this.element.appendChild(this.elementContents),this.element.insertBefore(this.arrowElement,this.element.firstChild)}getPath(t=[]){return t.unshift(this.key),this.parent&&this.parent.getPath(t),t}getElement(){return this.elementContents?this.element:this.generateElement()}generateElement(){this.addBindings=!1,this._visSet(),this.visible?this.element.classList.add("tabulator-group-visible"):this.element.classList.remove("tabulator-group-visible");for(var t=0;t<this.element.childNodes.length;++t)this.element.childNodes[t].parentNode.removeChild(this.element.childNodes[t]);return this.generateGroupHeaderContents(),this.element}detachElement(){this.element&&this.element.parentNode&&this.element.parentNode.removeChild(this.element)}normalizeHeight(){this.setHeight(this.element.clientHeight)}initialize(t){this.initialized&&!t||(this.normalizeHeight(),this.initialized=!0)}reinitialize(){this.initialized=!1,this.height=0,R.elVisible(this.element)&&this.initialize(!0)}setHeight(t){this.height!=t&&(this.height=t,this.outerHeight=this.element.offsetHeight)}getHeight(){return this.outerHeight}getGroup(){return this}reinitializeHeight(){}calcHeight(){}setCellHeight(){}clearCellHeight(){}deinitializeHeight(){}rendered(){}getComponent(){return this.component||(this.component=new ht(this)),this.component}}class dt extends _{constructor(t){super(t),this.groupIDLookups=!1,this.startOpen=[function(){return!1}],this.headerGenerator=[function(){return""}],this.groupList=[],this.allowedValues=!1,this.groups={},this.displayHandler=this.getRows.bind(this),this.blockRedraw=!1,this.registerTableOption("groupBy",!1),this.registerTableOption("groupStartOpen",!0),this.registerTableOption("groupValues",!1),this.registerTableOption("groupUpdateOnCellEdit",!1),this.registerTableOption("groupHeader",!1),this.registerTableOption("groupHeaderPrint",null),this.registerTableOption("groupHeaderClipboard",null),this.registerTableOption("groupHeaderHtmlOutput",null),this.registerTableOption("groupHeaderDownload",null),this.registerTableOption("groupToggleElement","arrow"),this.registerTableOption("groupClosedShowCalcs",!1),this.registerTableFunction("setGroupBy",this.setGroupBy.bind(this)),this.registerTableFunction("setGroupValues",this.setGroupValues.bind(this)),this.registerTableFunction("setGroupStartOpen",this.setGroupStartOpen.bind(this)),this.registerTableFunction("setGroupHeader",this.setGroupHeader.bind(this)),this.registerTableFunction("getGroups",this.userGetGroups.bind(this)),this.registerTableFunction("getGroupedData",this.userGetGroupedData.bind(this)),this.registerComponentFunction("row","getGroup",this.rowGetGroup.bind(this))}initialize(){this.subscribe("table-destroy",this._blockRedrawing.bind(this)),this.subscribe("rows-wipe",this._blockRedrawing.bind(this)),this.subscribe("rows-wiped",this._restore_redrawing.bind(this)),this.table.options.groupBy&&(this.table.options.groupUpdateOnCellEdit&&(this.subscribe("cell-value-updated",this.cellUpdated.bind(this)),this.subscribe("row-data-changed",this.reassignRowToGroup.bind(this),0)),this.subscribe("table-built",this.configureGroupSetup.bind(this)),this.subscribe("row-deleting",this.rowDeleting.bind(this)),this.subscribe("row-deleted",this.rowsUpdated.bind(this)),this.subscribe("scroll-horizontal",this.scrollHeaders.bind(this)),this.subscribe("rows-wipe",this.wipe.bind(this)),this.subscribe("rows-added",this.rowsUpdated.bind(this)),this.subscribe("row-moving",this.rowMoving.bind(this)),this.subscribe("row-adding-index",this.rowAddingIndex.bind(this)),this.subscribe("rows-sample",this.rowSample.bind(this)),this.subscribe("render-virtual-fill",this.virtualRenderFill.bind(this)),this.registerDisplayHandler(this.displayHandler,20),this.initialized=!0)}_blockRedrawing(){this.blockRedraw=!0}_restore_redrawing(){this.blockRedraw=!1}configureGroupSetup(){if(this.table.options.groupBy){var t=this.table.options.groupBy,e=this.table.options.groupStartOpen,i=this.table.options.groupHeader;this.allowedValues=this.table.options.groupValues,Array.isArray(t)&&Array.isArray(i)&&t.length>i.length&&console.warn("Error creating group headers, groupHeader array is shorter than groupBy array"),this.headerGenerator=[function(){return""}],this.startOpen=[function(){return!1}],this.langBind("groups|item",((t,e)=>{this.headerGenerator[0]=(i,n,o)=>(void 0===i?"":i)+"<span>("+n+" "+(1===n?t:e.groups.items)+")</span>"})),this.groupIDLookups=[],t?this.table.modExists("columnCalcs")&&"table"!=this.table.options.columnCalcs&&"both"!=this.table.options.columnCalcs&&this.table.modules.columnCalcs.removeCalcs():this.table.modExists("columnCalcs")&&"group"!=this.table.options.columnCalcs&&this.table.columnManager.getRealColumns().forEach((t=>{t.definition.topCalc&&this.table.modules.columnCalcs.initializeTopRow(),t.definition.bottomCalc&&this.table.modules.columnCalcs.initializeBottomRow()})),Array.isArray(t)||(t=[t]),t.forEach(((t,e)=>{var i,n;i="function"==typeof t?t:(n=this.table.columnManager.getColumnByField(t))?function(t){return n.getFieldValue(t)}:function(e){return e[t]},this.groupIDLookups.push({field:"function"!=typeof t&&t,func:i,values:!!this.allowedValues&&this.allowedValues[e]})})),e&&(Array.isArray(e)||(e=[e]),e.forEach((t=>{})),this.startOpen=e),i&&(this.headerGenerator=Array.isArray(i)?i:[i])}else this.groupList=[],this.groups={}}rowSample(t,e){if(this.table.options.groupBy){var i=this.getGroups(!1)[0];e.push(i.getRows(!1)[0])}return e}virtualRenderFill(){var t=this.table.rowManager.tableElement,e=this.table.rowManager.getVisibleRows();if(!this.table.options.groupBy)return e;e=e.filter((t=>"group"!==t.type)),t.style.minWidth=e.length?"":this.table.columnManager.getWidth()+"px"}rowAddingIndex(t,e,i){if(this.table.options.groupBy){this.assignRowToGroup(t);var n=t.modules.group.rows;return n.length>1&&(!e||e&&-1==n.indexOf(e)?i?n[0]!==t&&(e=n[0],this.table.rowManager.moveRowInArray(t.modules.group.rows,t,e,!i)):n[n.length-1]!==t&&(e=n[n.length-1],this.table.rowManager.moveRowInArray(t.modules.group.rows,t,e,!i)):this.table.rowManager.moveRowInArray(t.modules.group.rows,t,e,!i)),e}}trackChanges(){this.dispatch("group-changed")}setGroupBy(t){this.table.options.groupBy=t,this.initialized||this.initialize(),this.configureGroupSetup(),!t&&this.table.modExists("columnCalcs")&&!0===this.table.options.columnCalcs&&this.table.modules.columnCalcs.reinitializeCalcs(),this.refreshData(),this.trackChanges()}setGroupValues(t){this.table.options.groupValues=t,this.configureGroupSetup(),this.refreshData(),this.trackChanges()}setGroupStartOpen(t){this.table.options.groupStartOpen=t,this.configureGroupSetup(),this.table.options.groupBy?(this.refreshData(),this.trackChanges()):console.warn("Grouping Update - cant refresh view, no groups have been set")}setGroupHeader(t){this.table.options.groupHeader=t,this.configureGroupSetup(),this.table.options.groupBy?(this.refreshData(),this.trackChanges()):console.warn("Grouping Update - cant refresh view, no groups have been set")}userGetGroups(t){return this.getGroups(!0)}userGetGroupedData(){return this.table.options.groupBy?this.getGroupedData():this.getData()}rowGetGroup(t){return!!t.modules.group&&t.modules.group.getComponent()}rowMoving(t,e,i){if(this.table.options.groupBy){!i&&e instanceof ct&&(e=this.table.rowManager.prevDisplayRow(t)||e);var n=e instanceof ct?e:e.modules.group,o=t instanceof ct?t:t.modules.group;n===o?this.table.rowManager.moveRowInArray(n.rows,t,e,i):(o&&o.removeRow(t),n.insertRow(t,e,i))}}rowDeleting(t){this.table.options.groupBy&&t.modules.group&&t.modules.group.removeRow(t)}rowsUpdated(t){this.table.options.groupBy&&this.updateGroupRows(!0)}cellUpdated(t){this.table.options.groupBy&&this.reassignRowToGroup(t.row)}getRows(t){return this.table.options.groupBy&&this.groupIDLookups.length?(this.dispatchExternal("dataGrouping"),this.generateGroups(t),this.subscribedExternal("dataGrouped")&&this.dispatchExternal("dataGrouped",this.getGroups(!0)),this.updateGroupRows()):t.slice(0)}getGroups(t){var e=[];return this.groupList.forEach((function(i){e.push(t?i.getComponent():i)})),e}getChildGroups(t){var e=[];return t||(t=this),t.groupList.forEach((t=>{t.groupList.length?e=e.concat(this.getChildGroups(t)):e.push(t)})),e}wipe(){this.table.options.groupBy&&(this.groupList.forEach((function(t){t.wipe()})),this.groupList=[],this.groups={})}pullGroupListData(t){var e=[];return t.forEach((t=>{var i={level:0,rowCount:0,headerContent:""},n=[];t.hasSubGroups?(n=this.pullGroupListData(t.groupList),i.level=t.level,i.rowCount=n.length-t.groupList.length,i.headerContent=t.generator(t.key,i.rowCount,t.rows,t),e.push(i),e=e.concat(n)):(i.level=t.level,i.headerContent=t.generator(t.key,t.rows.length,t.rows,t),i.rowCount=t.getRows().length,e.push(i),t.getRows().forEach((t=>{e.push(t.getData("data"))})))})),e}getGroupedData(){return this.pullGroupListData(this.groupList)}getRowGroup(t){var e=!1;return this.options("dataTree")&&(t=this.table.modules.dataTree.getTreeParentRoot(t)),this.groupList.forEach((i=>{var n=i.getRowGroup(t);n&&(e=n)})),e}countGroups(){return this.groupList.length}generateGroups(t){var e=this.groups;this.groups={},this.groupList=[],this.allowedValues&&this.allowedValues[0]?(this.allowedValues[0].forEach((t=>{this.createGroup(t,0,e)})),t.forEach((t=>{this.assignRowToExistingGroup(t,e)}))):t.forEach((t=>{this.assignRowToGroup(t,e)})),Object.values(e).forEach((t=>{t.wipe(!0)}))}createGroup(t,e,i){var n,o=e+"_"+t;i=i||[],n=new ct(this,!1,e,t,this.groupIDLookups[0].field,this.headerGenerator[0],i[o]),this.groups[o]=n,this.groupList.push(n)}assignRowToExistingGroup(t,e){var i="0_"+this.groupIDLookups[0].func(t.getData());this.groups[i]&&this.groups[i].addRow(t)}assignRowToGroup(t,e){var i=this.groupIDLookups[0].func(t.getData()),n=!this.groups["0_"+i];return n&&this.createGroup(i,0,e),this.groups["0_"+i].addRow(t),!n}reassignRowToGroup(t){if("row"===t.type){var e=t.modules.group,i=e.getPath(),n=this.getExpectedPath(t);i.length==n.length&&i.every(((t,e)=>t===n[e]))||(e.removeRow(t),this.assignRowToGroup(t,this.groups),this.refreshData(!0))}}getExpectedPath(t){var e=[],i=t.getData();return this.groupIDLookups.forEach((t=>{e.push(t.func(i))})),e}updateGroupRows(t){var e=[];return this.blockRedraw||(this.groupList.forEach((t=>{e=e.concat(t.getHeadersAndRows())})),t&&this.refreshData(!0)),e}scrollHeaders(t){this.table.options.groupBy&&("virtual"===this.table.options.renderHorizontal&&(t-=this.table.columnManager.renderer.vDomPadLeft),t+="px",this.groupList.forEach((e=>{e.scrollHeader(t)})))}removeGroup(t){var e,i=t.level+"_"+t.key;this.groups[i]&&(delete this.groups[i],(e=this.groupList.indexOf(t))>-1&&this.groupList.splice(e,1))}checkBasicModeGroupHeaderWidth(){var t=this.table.rowManager.tableElement,e=!0;this.table.rowManager.getDisplayRows().forEach(((i,n)=>{this.table.rowManager.styleRow(i,n),t.appendChild(i.getElement()),i.initialize(!0),"group"!==i.type&&(e=!1)})),t.style.minWidth=e?this.table.columnManager.getWidth()+"px":""}}dt.moduleName="groupRows";class pt extends _{constructor(t){super(t),this.history=[],this.index=-1,this.registerTableOption("history",!1)}initialize(){this.table.options.history&&(this.subscribe("cell-value-updated",this.cellUpdated.bind(this)),this.subscribe("cell-delete",this.clearComponentHistory.bind(this)),this.subscribe("row-delete",this.rowDeleted.bind(this)),this.subscribe("rows-wipe",this.clear.bind(this)),this.subscribe("row-added",this.rowAdded.bind(this)),this.subscribe("row-move",this.rowMoved.bind(this))),this.registerTableFunction("undo",this.undo.bind(this)),this.registerTableFunction("redo",this.redo.bind(this)),this.registerTableFunction("getHistoryUndoSize",this.getHistoryUndoSize.bind(this)),this.registerTableFunction("getHistoryRedoSize",this.getHistoryRedoSize.bind(this)),this.registerTableFunction("clearHistory",this.clear.bind(this))}rowMoved(t,e,i){this.action("rowMove",t,{posFrom:t.getPosition(),posTo:e.getPosition(),to:e,after:i})}rowAdded(t,e,i,n){this.action("rowAdd",t,{data:e,pos:i,index:n})}rowDeleted(t){var e,i;this.table.options.groupBy?(e=(i=t.getComponent().getGroup()._getSelf().rows).indexOf(t))&&(e=i[e-1]):(e=t.table.rowManager.getRowIndex(t))&&(e=t.table.rowManager.rows[e-1]),this.action("rowDelete",t,{data:t.getData(),pos:!e,index:e})}cellUpdated(t){this.action("cellEdit",t,{oldValue:t.oldValue,newValue:t.value})}clear(){this.history=[],this.index=-1}action(t,e,i){this.history=this.history.slice(0,this.index+1),this.history.push({type:t,component:e,data:i}),this.index++}getHistoryUndoSize(){return this.index+1}getHistoryRedoSize(){return this.history.length-(this.index+1)}clearComponentHistory(t){var e=this.history.findIndex((function(e){return e.component===t}));e>-1&&(this.history.splice(e,1),e<=this.index&&this.index--,this.clearComponentHistory(t))}undo(){if(this.index>-1){let t=this.history[this.index];return pt.undoers[t.type].call(this,t),this.index--,this.dispatchExternal("historyUndo",t.type,t.component.getComponent(),t.data),!0}return console.warn("History Undo Error - No more history to undo"),!1}redo(){if(this.history.length-1>this.index){this.index++;let t=this.history[this.index];return pt.redoers[t.type].call(this,t),this.dispatchExternal("historyRedo",t.type,t.component.getComponent(),t.data),!0}return console.warn("History Redo Error - No more history to redo"),!1}_rebindRow(t,e){this.history.forEach((function(i){if(i.component instanceof U)i.component===t&&(i.component=e);else if(i.component instanceof W&&i.component.row===t){var n=i.component.column.getField();n&&(i.component=e.getCell(n))}}))}}pt.moduleName="history",pt.undoers={cellEdit:function(t){t.component.setValueProcessData(t.data.oldValue),t.component.cellRendered()},rowAdd:function(t){t.component.deleteActual()},rowDelete:function(t){var e=this.table.rowManager.addRowActual(t.data.data,t.data.pos,t.data.index);this.table.options.groupBy&&this.table.modExists("groupRows")&&this.table.modules.groupRows.updateGroupRows(!0),this._rebindRow(t.component,e)},rowMove:function(t){var e=t.data.posFrom-t.data.posTo>0;this.table.rowManager.moveRowActual(t.component,this.table.rowManager.getRowFromPosition(t.data.posFrom),e),this.table.rowManager.regenerateRowPositions(),this.table.rowManager.reRenderInPosition()}},pt.redoers={cellEdit:function(t){t.component.setValueProcessData(t.data.newValue),t.component.cellRendered()},rowAdd:function(t){var e=this.table.rowManager.addRowActual(t.data.data,t.data.pos,t.data.index);this.table.options.groupBy&&this.table.modExists("groupRows")&&this.table.modules.groupRows.updateGroupRows(!0),this._rebindRow(t.component,e)},rowDelete:function(t){t.component.deleteActual()},rowMove:function(t){this.table.rowManager.moveRowActual(t.component,this.table.rowManager.getRowFromPosition(t.data.posTo),t.data.after),this.table.rowManager.regenerateRowPositions(),this.table.rowManager.reRenderInPosition()}};class bt extends _{constructor(t){super(t),this.fieldIndex=[],this.hasIndex=!1}initialize(){this.tableElementCheck()}tableElementCheck(){this.table.originalElement&&"TABLE"===this.table.originalElement.tagName&&(this.table.originalElement.childNodes.length?this.parseTable():console.warn("Unable to parse data from empty table tag, Tabulator should be initialized on a div tag unless importing data from a table element."))}parseTable(){var t=this.table.originalElement,e=this.table.options,i=t.getElementsByTagName("th"),n=t.getElementsByTagName("tbody")[0],o=[];this.hasIndex=!1,this.dispatchExternal("htmlImporting"),n=n?n.getElementsByTagName("tr"):[],this._extractOptions(t,e),i.length?this._extractHeaders(i,n):this._generateBlankHeaders(i,n);for(var r=0;r<n.length;r++){var a=n[r].getElementsByTagName("td"),l={};this.hasIndex||(l[e.index]=r);for(var s=0;s<a.length;s++){var u=a[s];void 0!==this.fieldIndex[s]&&(l[this.fieldIndex[s]]=u.innerHTML)}o.push(l)}e.data=o,this.dispatchExternal("htmlImported")}_extractOptions(t,e,i){var n=t.attributes,o=i?Object.keys(i):Object.keys(e),r={};for(var a in o.forEach((t=>{r[t.toLowerCase()]=t})),n){var l,s=n[a];s&&"object"==typeof s&&s.name&&0===s.name.indexOf("tabulator-")&&(l=s.name.replace("tabulator-",""),void 0!==r[l]&&(e[r[l]]=this._attribValue(s.value)))}}_attribValue(t){return"true"===t||"false"!==t&&t}_findCol(t){return this.table.options.columns.find((e=>e.title===t))||!1}_extractHeaders(t,e){for(var i=0;i<t.length;i++){var n,o=t[i],r=!1,a=this._findCol(o.textContent);a?r=!0:a={title:o.textContent.trim()},a.field||(a.field=o.textContent.trim().toLowerCase().replaceAll(" ","_")),(n=o.getAttribute("width"))&&!a.width&&(a.width=n),this._extractOptions(o,a,this.table.columnManager.optionsList.registeredDefaults),this.fieldIndex[i]=a.field,a.field==this.table.options.index&&(this.hasIndex=!0),r||this.table.options.columns.push(a)}}_generateBlankHeaders(t,e){for(var i=0;i<t.length;i++){var n=t[i],o={title:"",field:"col"+i};this.fieldIndex[i]=o.field;var r=n.getAttribute("width");r&&(o.width=r),this.table.options.columns.push(o)}}}bt.moduleName="htmlTableImport";var mt={csv:function(t){var e=[],i=0,n=0,o=!1;for(let r=0;r<t.length;r++){let a=t[r],l=t[r+1];e[i]||(e[i]=[]),e[i][n]||(e[i][n]=""),'"'==a&&o&&'"'==l?(e[i][n]+=a,r++):'"'!=a?","!=a||o?"\r"!=a||"\n"!=l||o?"\r"!=a&&"\n"!=a||o?e[i][n]+=a:(n=0,i++):(n=0,i++,r++):n++:o=!o}return e},json:function(t){try{return JSON.parse(t)}catch(t){return console.warn("JSON Import Error - File contents is invalid JSON",t),Promise.reject()}},array:function(t){return t}};class gt extends _{constructor(t){super(t),this.registerTableOption("importFormat"),this.registerTableOption("importReader","text")}initialize(){this.registerTableFunction("import",this.importFromFile.bind(this)),this.table.options.importFormat&&(this.subscribe("data-loading",this.loadDataCheck.bind(this),10),this.subscribe("data-load",this.loadData.bind(this),10))}loadDataCheck(t){return this.table.options.importFormat&&("string"==typeof t||Array.isArray(t)&&t.length&&Array.isArray(t))}loadData(t,e,i,n,o){return this.importData(this.lookupImporter(),t).then(this.structureData.bind(this)).catch((t=>(console.error("Import Error:",t||"Unable to import data"),Promise.reject(t))))}lookupImporter(t){var e;return t||(t=this.table.options.importFormat),(e="string"==typeof t?gt.importers[t]:t)||console.error("Import Error - Importer not found:",t),e}importFromFile(t,e){var i=this.lookupImporter(t);if(i)return this.pickFile(e).then(this.importData.bind(this,i)).then(this.structureData.bind(this)).then(this.setData.bind(this)).catch((t=>(console.error("Import Error:",t||"Unable to import file"),Promise.reject(t))))}pickFile(t){return new Promise(((e,i)=>{var n=document.createElement("input");n.type="file",n.accept=t,n.addEventListener("change",(t=>{var o=n.files[0],r=new FileReader;switch(this.table.options.importReader){case"buffer":r.readAsArrayBuffer(o);break;case"binary":r.readAsBinaryString(o);break;case"url":r.readAsDataURL(o);break;default:r.readAsText(o)}r.onload=t=>{e(r.result)},r.onerror=t=>{console.warn("File Load Error - Unable to read file"),i()}})),n.click()}))}importData(t,e){var i=t.call(this.table,e);return i instanceof Promise?i:i?Promise.resolve(i):Promise.reject()}structureData(t){return Array.isArray(t)&&t.length&&Array.isArray(t[0])?this.table.options.autoColumns?this.structureArrayToObject(t):this.structureArrayToColumns(t):t}structureArrayToObject(t){var e=t.shift();return t.map((t=>{var i={};return e.forEach(((e,n)=>{i[e]=t[n]})),i}))}structureArrayToColumns(t){var e=[],i=this.table.getColumns();return i[0]&&t[0][0]&&i[0].getDefinition().title===t[0][0]&&t.shift(),t.forEach((t=>{var n={};t.forEach(((t,e)=>{var o=i[e];o&&(n[o.getField()]=t)})),e.push(n)})),e}setData(t){return this.table.setData(t)}}gt.moduleName="import",gt.importers=mt;class ft extends _{constructor(t){super(t),this.eventMap={rowClick:"row-click",rowDblClick:"row-dblclick",rowContext:"row-contextmenu",rowMouseEnter:"row-mouseenter",rowMouseLeave:"row-mouseleave",rowMouseOver:"row-mouseover",rowMouseOut:"row-mouseout",rowMouseMove:"row-mousemove",rowMouseDown:"row-mousedown",rowMouseUp:"row-mouseup",rowTap:"row",rowDblTap:"row",rowTapHold:"row",cellClick:"cell-click",cellDblClick:"cell-dblclick",cellContext:"cell-contextmenu",cellMouseEnter:"cell-mouseenter",cellMouseLeave:"cell-mouseleave",cellMouseOver:"cell-mouseover",cellMouseOut:"cell-mouseout",cellMouseMove:"cell-mousemove",cellMouseDown:"cell-mousedown",cellMouseUp:"cell-mouseup",cellTap:"cell",cellDblTap:"cell",cellTapHold:"cell",headerClick:"column-click",headerDblClick:"column-dblclick",headerContext:"column-contextmenu",headerMouseEnter:"column-mouseenter",headerMouseLeave:"column-mouseleave",headerMouseOver:"column-mouseover",headerMouseOut:"column-mouseout",headerMouseMove:"column-mousemove",headerMouseDown:"column-mousedown",headerMouseUp:"column-mouseup",headerTap:"column",headerDblTap:"column",headerTapHold:"column",groupClick:"group-click",groupDblClick:"group-dblclick",groupContext:"group-contextmenu",groupMouseEnter:"group-mouseenter",groupMouseLeave:"group-mouseleave",groupMouseOver:"group-mouseover",groupMouseOut:"group-mouseout",groupMouseMove:"group-mousemove",groupMouseDown:"group-mousedown",groupMouseUp:"group-mouseup",groupTap:"group",groupDblTap:"group",groupTapHold:"group"},this.subscribers={},this.touchSubscribers={},this.columnSubscribers={},this.touchWatchers={row:{tap:null,tapDbl:null,tapHold:null},cell:{tap:null,tapDbl:null,tapHold:null},column:{tap:null,tapDbl:null,tapHold:null},group:{tap:null,tapDbl:null,tapHold:null}},this.registerColumnOption("headerClick"),this.registerColumnOption("headerDblClick"),this.registerColumnOption("headerContext"),this.registerColumnOption("headerMouseEnter"),this.registerColumnOption("headerMouseLeave"),this.registerColumnOption("headerMouseOver"),this.registerColumnOption("headerMouseOut"),this.registerColumnOption("headerMouseMove"),this.registerColumnOption("headerMouseDown"),this.registerColumnOption("headerMouseUp"),this.registerColumnOption("headerTap"),this.registerColumnOption("headerDblTap"),this.registerColumnOption("headerTapHold"),this.registerColumnOption("cellClick"),this.registerColumnOption("cellDblClick"),this.registerColumnOption("cellContext"),this.registerColumnOption("cellMouseEnter"),this.registerColumnOption("cellMouseLeave"),this.registerColumnOption("cellMouseOver"),this.registerColumnOption("cellMouseOut"),this.registerColumnOption("cellMouseMove"),this.registerColumnOption("cellMouseDown"),this.registerColumnOption("cellMouseUp"),this.registerColumnOption("cellTap"),this.registerColumnOption("cellDblTap"),this.registerColumnOption("cellTapHold")}initialize(){this.initializeExternalEvents(),this.subscribe("column-init",this.initializeColumn.bind(this)),this.subscribe("cell-dblclick",this.cellContentsSelectionFixer.bind(this)),this.subscribe("scroll-horizontal",this.clearTouchWatchers.bind(this)),this.subscribe("scroll-vertical",this.clearTouchWatchers.bind(this))}clearTouchWatchers(){Object.values(this.touchWatchers).forEach((t=>{for(let e in t)t[e]=null}))}cellContentsSelectionFixer(t,e){var i;if(!this.table.modExists("edit")||this.table.modules.edit.currentCell!==e){t.preventDefault();try{document.selection?((i=document.body.createTextRange()).moveToElementText(e.getElement()),i.select()):window.getSelection&&((i=document.createRange()).selectNode(e.getElement()),window.getSelection().removeAllRanges(),window.getSelection().addRange(i))}catch(t){}}}initializeExternalEvents(){for(let t in this.eventMap)this.subscriptionChangeExternal(t,this.subscriptionChanged.bind(this,t))}subscriptionChanged(t,e){e?this.subscribers[t]||(this.eventMap[t].includes("-")?(this.subscribers[t]=this.handle.bind(this,t),this.subscribe(this.eventMap[t],this.subscribers[t])):this.subscribeTouchEvents(t)):this.eventMap[t].includes("-")?!this.subscribers[t]||this.columnSubscribers[t]||this.subscribedExternal(t)||(this.unsubscribe(this.eventMap[t],this.subscribers[t]),delete this.subscribers[t]):this.unsubscribeTouchEvents(t)}subscribeTouchEvents(t){var e=this.eventMap[t];this.touchSubscribers[e+"-touchstart"]||(this.touchSubscribers[e+"-touchstart"]=this.handleTouch.bind(this,e,"start"),this.touchSubscribers[e+"-touchend"]=this.handleTouch.bind(this,e,"end"),this.subscribe(e+"-touchstart",this.touchSubscribers[e+"-touchstart"]),this.subscribe(e+"-touchend",this.touchSubscribers[e+"-touchend"])),this.subscribers[t]=!0}unsubscribeTouchEvents(t){var e=!0,i=this.eventMap[t];if(this.subscribers[t]&&!this.subscribedExternal(t)){delete this.subscribers[t];for(let t in this.eventMap)this.eventMap[t]===i&&this.subscribers[t]&&(e=!1);e&&(this.unsubscribe(i+"-touchstart",this.touchSubscribers[i+"-touchstart"]),this.unsubscribe(i+"-touchend",this.touchSubscribers[i+"-touchend"]),delete this.touchSubscribers[i+"-touchstart"],delete this.touchSubscribers[i+"-touchend"])}}initializeColumn(t){var e=t.definition;for(let i in this.eventMap)e[i]&&(this.subscriptionChanged(i,!0),this.columnSubscribers[i]||(this.columnSubscribers[i]=[]),this.columnSubscribers[i].push(t))}handle(t,e,i){this.dispatchEvent(t,e,i)}handleTouch(t,e,i,n){var o=this.touchWatchers[t];switch("column"===t&&(t="header"),e){case"start":o.tap=!0,clearTimeout(o.tapHold),o.tapHold=setTimeout((()=>{clearTimeout(o.tapHold),o.tapHold=null,o.tap=null,clearTimeout(o.tapDbl),o.tapDbl=null,this.dispatchEvent(t+"TapHold",i,n)}),1e3);break;case"end":o.tap&&(o.tap=null,this.dispatchEvent(t+"Tap",i,n)),o.tapDbl?(clearTimeout(o.tapDbl),o.tapDbl=null,this.dispatchEvent(t+"DblTap",i,n)):o.tapDbl=setTimeout((()=>{clearTimeout(o.tapDbl),o.tapDbl=null}),300),clearTimeout(o.tapHold),o.tapHold=null}}dispatchEvent(t,e,i){var n,o=i.getComponent();this.columnSubscribers[t]&&(i instanceof W?n=i.column.definition[t]:i instanceof N&&(n=i.definition[t]),n&&n(e,o)),this.dispatchExternal(t,e,o)}}ft.moduleName="interaction";class At extends _{constructor(t){super(t),this.watchKeys=null,this.pressedKeys=null,this.keyupBinding=!1,this.keydownBinding=!1,this.registerTableOption("keybindings",{}),this.registerTableOption("tabEndNewRow",!1)}initialize(){var t=this.table.options.keybindings,e={};this.watchKeys={},this.pressedKeys=[],!1!==t&&(Object.assign(e,At.bindings),Object.assign(e,t),this.mapBindings(e),this.bindEvents()),this.subscribe("table-destroy",this.clearBindings.bind(this))}mapBindings(t){for(let e in t)At.actions[e]?t[e]&&("object"!=typeof t[e]&&(t[e]=[t[e]]),t[e].forEach((t=>{(Array.isArray(t)?t:[t]).forEach((t=>{this.mapBinding(e,t)}))}))):console.warn("Key Binding Error - no such action:",e)}mapBinding(t,e){var i={action:At.actions[t],keys:[],ctrl:!1,shift:!1,meta:!1};e.toString().toLowerCase().split(" ").join("").split("+").forEach((t=>{switch(t){case"ctrl":i.ctrl=!0;break;case"shift":i.shift=!0;break;case"meta":i.meta=!0;break;default:t=isNaN(t)?t.toUpperCase().charCodeAt(0):parseInt(t),i.keys.push(t),this.watchKeys[t]||(this.watchKeys[t]=[]),this.watchKeys[t].push(i)}}))}bindEvents(){var t=this;this.keyupBinding=function(e){var i=e.keyCode,n=t.watchKeys[i];n&&(t.pressedKeys.push(i),n.forEach((function(i){t.checkBinding(e,i)})))},this.keydownBinding=function(e){var i=e.keyCode;if(t.watchKeys[i]){var n=t.pressedKeys.indexOf(i);n>-1&&t.pressedKeys.splice(n,1)}},this.table.element.addEventListener("keydown",this.keyupBinding),this.table.element.addEventListener("keyup",this.keydownBinding)}clearBindings(){this.keyupBinding&&this.table.element.removeEventListener("keydown",this.keyupBinding),this.keydownBinding&&this.table.element.removeEventListener("keyup",this.keydownBinding)}checkBinding(t,e){var i=!0;return t.ctrlKey==e.ctrl&&t.shiftKey==e.shift&&t.metaKey==e.meta&&(e.keys.forEach((t=>{-1==this.pressedKeys.indexOf(t)&&(i=!1)})),i&&e.action.call(this,t),!0)}}At.moduleName="keybindings",At.bindings={navPrev:"shift + 9",navNext:9,navUp:38,navDown:40,scrollPageUp:33,scrollPageDown:34,scrollToStart:36,scrollToEnd:35,undo:["ctrl + 90","meta + 90"],redo:["ctrl + 89","meta + 89"],copyToClipboard:["ctrl + 67","meta + 67"]},At.actions={keyBlock:function(t){t.stopPropagation(),t.preventDefault()},scrollPageUp:function(t){var e=this.table.rowManager,i=e.scrollTop-e.element.clientHeight;t.preventDefault(),e.displayRowsCount&&(i>=0?e.element.scrollTop=i:e.scrollToRow(e.getDisplayRows()[0])),this.table.element.focus()},scrollPageDown:function(t){var e=this.table.rowManager,i=e.scrollTop+e.element.clientHeight,n=e.element.scrollHeight;t.preventDefault(),e.displayRowsCount&&(i<=n?e.element.scrollTop=i:e.scrollToRow(e.getDisplayRows()[e.displayRowsCount-1])),this.table.element.focus()},scrollToStart:function(t){var e=this.table.rowManager;t.preventDefault(),e.displayRowsCount&&e.scrollToRow(e.getDisplayRows()[0]),this.table.element.focus()},scrollToEnd:function(t){var e=this.table.rowManager;t.preventDefault(),e.displayRowsCount&&e.scrollToRow(e.getDisplayRows()[e.displayRowsCount-1]),this.table.element.focus()},navPrev:function(t){this.dispatch("keybinding-nav-prev",t)},navNext:function(t){this.dispatch("keybinding-nav-next",t)},navLeft:function(t){this.dispatch("keybinding-nav-left",t)},navRight:function(t){this.dispatch("keybinding-nav-right",t)},navUp:function(t){this.dispatch("keybinding-nav-up",t)},navDown:function(t){this.dispatch("keybinding-nav-down",t)},undo:function(t){this.table.options.history&&this.table.modExists("history")&&this.table.modExists("edit")&&(this.table.modules.edit.currentCell||(t.preventDefault(),this.table.modules.history.undo()))},redo:function(t){this.table.options.history&&this.table.modExists("history")&&this.table.modExists("edit")&&(this.table.modules.edit.currentCell||(t.preventDefault(),this.table.modules.history.redo()))},copyToClipboard:function(t){this.table.modules.edit.currentCell||this.table.modExists("clipboard",!0)&&this.table.modules.clipboard.copy(!1,!0)}};class vt extends _{constructor(t){super(t),this.menuContainer=null,this.nestedMenuBlock=!1,this.currentComponent=null,this.rootPopup=null,this.columnSubscribers={},this.registerTableOption("menuContainer",void 0),this.registerTableOption("rowContextMenu",!1),this.registerTableOption("rowClickMenu",!1),this.registerTableOption("rowDblClickMenu",!1),this.registerTableOption("groupContextMenu",!1),this.registerTableOption("groupClickMenu",!1),this.registerTableOption("groupDblClickMenu",!1),this.registerColumnOption("headerContextMenu"),this.registerColumnOption("headerClickMenu"),this.registerColumnOption("headerDblClickMenu"),this.registerColumnOption("headerMenu"),this.registerColumnOption("headerMenuIcon"),this.registerColumnOption("contextMenu"),this.registerColumnOption("clickMenu"),this.registerColumnOption("dblClickMenu")}initialize(){this.deprecatedOptionsCheck(),this.initializeRowWatchers(),this.initializeGroupWatchers(),this.subscribe("column-init",this.initializeColumn.bind(this))}deprecatedOptionsCheck(){this.deprecationCheck("menuContainer","popupContainer")||(this.table.options.popupContainer=this.table.options.menuContainer)}initializeRowWatchers(){this.table.options.rowContextMenu&&(this.subscribe("row-contextmenu",this.loadMenuEvent.bind(this,this.table.options.rowContextMenu)),this.table.on("rowTapHold",this.loadMenuEvent.bind(this,this.table.options.rowContextMenu))),this.table.options.rowClickMenu&&this.subscribe("row-click",this.loadMenuEvent.bind(this,this.table.options.rowClickMenu)),this.table.options.rowDblClickMenu&&this.subscribe("row-dblclick",this.loadMenuEvent.bind(this,this.table.options.rowDblClickMenu))}initializeGroupWatchers(){this.table.options.groupContextMenu&&(this.subscribe("group-contextmenu",this.loadMenuEvent.bind(this,this.table.options.groupContextMenu)),this.table.on("groupTapHold",this.loadMenuEvent.bind(this,this.table.options.groupContextMenu))),this.table.options.groupClickMenu&&this.subscribe("group-click",this.loadMenuEvent.bind(this,this.table.options.groupClickMenu)),this.table.options.groupDblClickMenu&&this.subscribe("group-dblclick",this.loadMenuEvent.bind(this,this.table.options.groupDblClickMenu))}initializeColumn(t){var e=t.definition;e.headerContextMenu&&!this.columnSubscribers.headerContextMenu&&(this.columnSubscribers.headerContextMenu=this.loadMenuTableColumnEvent.bind(this,"headerContextMenu"),this.subscribe("column-contextmenu",this.columnSubscribers.headerContextMenu),this.table.on("headerTapHold",this.loadMenuTableColumnEvent.bind(this,"headerContextMenu"))),e.headerClickMenu&&!this.columnSubscribers.headerClickMenu&&(this.columnSubscribers.headerClickMenu=this.loadMenuTableColumnEvent.bind(this,"headerClickMenu"),this.subscribe("column-click",this.columnSubscribers.headerClickMenu)),e.headerDblClickMenu&&!this.columnSubscribers.headerDblClickMenu&&(this.columnSubscribers.headerDblClickMenu=this.loadMenuTableColumnEvent.bind(this,"headerDblClickMenu"),this.subscribe("column-dblclick",this.columnSubscribers.headerDblClickMenu)),e.headerMenu&&this.initializeColumnHeaderMenu(t),e.contextMenu&&!this.columnSubscribers.contextMenu&&(this.columnSubscribers.contextMenu=this.loadMenuTableCellEvent.bind(this,"contextMenu"),this.subscribe("cell-contextmenu",this.columnSubscribers.contextMenu),this.table.on("cellTapHold",this.loadMenuTableCellEvent.bind(this,"contextMenu"))),e.clickMenu&&!this.columnSubscribers.clickMenu&&(this.columnSubscribers.clickMenu=this.loadMenuTableCellEvent.bind(this,"clickMenu"),this.subscribe("cell-click",this.columnSubscribers.clickMenu)),e.dblClickMenu&&!this.columnSubscribers.dblClickMenu&&(this.columnSubscribers.dblClickMenu=this.loadMenuTableCellEvent.bind(this,"dblClickMenu"),this.subscribe("cell-dblclick",this.columnSubscribers.dblClickMenu))}initializeColumnHeaderMenu(t){var e,i=t.definition.headerMenuIcon;(e=document.createElement("span")).classList.add("tabulator-header-popup-button"),i?("function"==typeof i&&(i=i(t.getComponent())),i instanceof HTMLElement?e.appendChild(i):e.innerHTML=i):e.innerHTML="&vellip;",e.addEventListener("click",(e=>{e.stopPropagation(),e.preventDefault(),this.loadMenuEvent(t.definition.headerMenu,e,t)})),t.titleElement.insertBefore(e,t.titleElement.firstChild)}loadMenuTableCellEvent(t,e,i){i._cell&&(i=i._cell),i.column.definition[t]&&this.loadMenuEvent(i.column.definition[t],e,i)}loadMenuTableColumnEvent(t,e,i){i._column&&(i=i._column),i.definition[t]&&this.loadMenuEvent(i.definition[t],e,i)}loadMenuEvent(t,e,i){i._group?i=i._group:i._row&&(i=i._row),t="function"==typeof t?t.call(this.table,e,i.getComponent()):t,this.loadMenu(e,i,t)}loadMenu(t,e,i,n,o){var r,a=!(t instanceof MouseEvent),l=document.createElement("div");if(l.classList.add("tabulator-menu"),a||t.preventDefault(),i&&i.length){if(n)r=o.child(l);else{if(this.nestedMenuBlock){if(this.rootPopup)return}else this.nestedMenuBlock=setTimeout((()=>{this.nestedMenuBlock=!1}),100);this.rootPopup&&this.rootPopup.hide(),this.rootPopup=r=this.popup(l)}i.forEach((t=>{var i=document.createElement("div"),n=t.label,o=t.disabled;t.separator?i.classList.add("tabulator-menu-separator"):(i.classList.add("tabulator-menu-item"),"function"==typeof n&&(n=n.call(this.table,e.getComponent())),n instanceof Node?i.appendChild(n):i.innerHTML=n,"function"==typeof o&&(o=o.call(this.table,e.getComponent())),o?(i.classList.add("tabulator-menu-item-disabled"),i.addEventListener("click",(t=>{t.stopPropagation()}))):t.menu&&t.menu.length?i.addEventListener("click",(n=>{n.stopPropagation(),this.loadMenu(n,e,t.menu,i,r)})):t.action&&i.addEventListener("click",(i=>{t.action(i,e.getComponent())})),t.menu&&t.menu.length&&i.classList.add("tabulator-menu-item-submenu")),l.appendChild(i)})),l.addEventListener("click",(t=>{this.rootPopup&&this.rootPopup.hide()})),r.show(n||t),r===this.rootPopup&&(this.rootPopup.hideOnBlur((()=>{this.rootPopup=null,this.currentComponent&&(this.dispatchExternal("menuClosed",this.currentComponent.getComponent()),this.currentComponent=null)})),this.currentComponent=e,this.dispatchExternal("menuOpened",e.getComponent()))}}}vt.moduleName="menu";class wt extends _{constructor(t){super(t),this.placeholderElement=this.createPlaceholderElement(),this.hoverElement=!1,this.checkTimeout=!1,this.checkPeriod=250,this.moving=!1,this.toCol=!1,this.toColAfter=!1,this.startX=0,this.autoScrollMargin=40,this.autoScrollStep=5,this.autoScrollTimeout=!1,this.touchMove=!1,this.moveHover=this.moveHover.bind(this),this.endMove=this.endMove.bind(this),this.registerTableOption("movableColumns",!1)}createPlaceholderElement(){var t=document.createElement("div");return t.classList.add("tabulator-col"),t.classList.add("tabulator-col-placeholder"),t}initialize(){this.table.options.movableColumns&&this.subscribe("column-init",this.initializeColumn.bind(this))}initializeColumn(t){var e,i=this,n={};t.modules.frozen||t.isGroup||(e=t.getElement(),n.mousemove=function(n){t.parent===i.moving.parent&&((i.touchMove?n.touches[0].pageX:n.pageX)-R.elOffset(e).left+i.table.columnManager.contentsElement.scrollLeft>t.getWidth()/2?i.toCol===t&&i.toColAfter||(e.parentNode.insertBefore(i.placeholderElement,e.nextSibling),i.moveColumn(t,!0)):(i.toCol!==t||i.toColAfter)&&(e.parentNode.insertBefore(i.placeholderElement,e),i.moveColumn(t,!1)))}.bind(i),e.addEventListener("mousedown",(function(e){i.touchMove=!1,1===e.which&&(i.checkTimeout=setTimeout((function(){i.startMove(e,t)}),i.checkPeriod))})),e.addEventListener("mouseup",(function(t){1===t.which&&i.checkTimeout&&clearTimeout(i.checkTimeout)})),i.bindTouchEvents(t)),t.modules.moveColumn=n}bindTouchEvents(t){var e,i,n,o,r,a,l=t.getElement(),s=!1;l.addEventListener("touchstart",(l=>{this.checkTimeout=setTimeout((()=>{this.touchMove=!0,e=t.nextColumn(),n=e?e.getWidth()/2:0,i=t.prevColumn(),o=i?i.getWidth()/2:0,r=0,a=0,s=!1,this.startMove(l,t)}),this.checkPeriod)}),{passive:!0}),l.addEventListener("touchmove",(l=>{var u,h;this.moving&&(this.moveHover(l),s||(s=l.touches[0].pageX),(u=l.touches[0].pageX-s)>0?e&&u-r>n&&(h=e)!==t&&(s=l.touches[0].pageX,h.getElement().parentNode.insertBefore(this.placeholderElement,h.getElement().nextSibling),this.moveColumn(h,!0)):i&&-u-a>o&&(h=i)!==t&&(s=l.touches[0].pageX,h.getElement().parentNode.insertBefore(this.placeholderElement,h.getElement()),this.moveColumn(h,!1)),h&&(e=h.nextColumn(),r=n,n=e?e.getWidth()/2:0,i=h.prevColumn(),a=o,o=i?i.getWidth()/2:0))}),{passive:!0}),l.addEventListener("touchend",(t=>{this.checkTimeout&&clearTimeout(this.checkTimeout),this.moving&&this.endMove(t)}))}startMove(t,e){var i=e.getElement(),n=this.table.columnManager.getContentsElement(),o=this.table.columnManager.getHeadersElement();this.moving=e,this.startX=(this.touchMove?t.touches[0].pageX:t.pageX)-R.elOffset(i).left,this.table.element.classList.add("tabulator-block-select"),this.placeholderElement.style.width=e.getWidth()+"px",this.placeholderElement.style.height=e.getHeight()+"px",i.parentNode.insertBefore(this.placeholderElement,i),i.parentNode.removeChild(i),this.hoverElement=i.cloneNode(!0),this.hoverElement.classList.add("tabulator-moving"),n.appendChild(this.hoverElement),this.hoverElement.style.left="0",this.hoverElement.style.bottom=n.clientHeight-o.offsetHeight+"px",this.touchMove||(this._bindMouseMove(),document.body.addEventListener("mousemove",this.moveHover),document.body.addEventListener("mouseup",this.endMove)),this.moveHover(t)}_bindMouseMove(){this.table.columnManager.columnsByIndex.forEach((function(t){t.modules.moveColumn.mousemove&&t.getElement().addEventListener("mousemove",t.modules.moveColumn.mousemove)}))}_unbindMouseMove(){this.table.columnManager.columnsByIndex.forEach((function(t){t.modules.moveColumn.mousemove&&t.getElement().removeEventListener("mousemove",t.modules.moveColumn.mousemove)}))}moveColumn(t,e){var i=this.moving.getCells();this.toCol=t,this.toColAfter=e,e?t.getCells().forEach((function(t,e){var n=t.getElement(!0);n.parentNode&&i[e]&&n.parentNode.insertBefore(i[e].getElement(),n.nextSibling)})):t.getCells().forEach((function(t,e){var n=t.getElement(!0);n.parentNode&&i[e]&&n.parentNode.insertBefore(i[e].getElement(),n)}))}endMove(t){(1===t.which||this.touchMove)&&(this._unbindMouseMove(),this.placeholderElement.parentNode.insertBefore(this.moving.getElement(),this.placeholderElement.nextSibling),this.placeholderElement.parentNode.removeChild(this.placeholderElement),this.hoverElement.parentNode.removeChild(this.hoverElement),this.table.element.classList.remove("tabulator-block-select"),this.toCol&&this.table.columnManager.moveColumnActual(this.moving,this.toCol,this.toColAfter),this.moving=!1,this.toCol=!1,this.toColAfter=!1,this.touchMove||(document.body.removeEventListener("mousemove",this.moveHover),document.body.removeEventListener("mouseup",this.endMove)))}moveHover(t){var e,i=this.table.columnManager.getContentsElement(),n=i.scrollLeft,o=(this.touchMove?t.touches[0].pageX:t.pageX)-R.elOffset(i).left+n;this.hoverElement.style.left=o-this.startX+"px",o-n<this.autoScrollMargin&&(this.autoScrollTimeout||(this.autoScrollTimeout=setTimeout((()=>{e=Math.max(0,n-5),this.table.rowManager.getElement().scrollLeft=e,this.autoScrollTimeout=!1}),1))),n+i.clientWidth-o<this.autoScrollMargin&&(this.autoScrollTimeout||(this.autoScrollTimeout=setTimeout((()=>{e=Math.min(i.clientWidth,n+5),this.table.rowManager.getElement().scrollLeft=e,this.autoScrollTimeout=!1}),1)))}}wt.moduleName="moveColumn";class Ct extends _{constructor(t){super(t),this.placeholderElement=this.createPlaceholderElement(),this.hoverElement=!1,this.checkTimeout=!1,this.checkPeriod=150,this.moving=!1,this.toRow=!1,this.toRowAfter=!1,this.hasHandle=!1,this.startY=0,this.startX=0,this.moveHover=this.moveHover.bind(this),this.endMove=this.endMove.bind(this),this.tableRowDropEvent=!1,this.touchMove=!1,this.connection=!1,this.connectionSelectorsTables=!1,this.connectionSelectorsElements=!1,this.connectionElements=[],this.connections=[],this.connectedTable=!1,this.connectedRow=!1,this.registerTableOption("movableRows",!1),this.registerTableOption("movableRowsConnectedTables",!1),this.registerTableOption("movableRowsConnectedElements",!1),this.registerTableOption("movableRowsSender",!1),this.registerTableOption("movableRowsReceiver","insert"),this.registerColumnOption("rowHandle")}createPlaceholderElement(){var t=document.createElement("div");return t.classList.add("tabulator-row"),t.classList.add("tabulator-row-placeholder"),t}initialize(){this.table.options.movableRows&&(this.connectionSelectorsTables=this.table.options.movableRowsConnectedTables,this.connectionSelectorsElements=this.table.options.movableRowsConnectedElements,this.connection=this.connectionSelectorsTables||this.connectionSelectorsElements,this.subscribe("cell-init",this.initializeCell.bind(this)),this.subscribe("column-init",this.initializeColumn.bind(this)),this.subscribe("row-init",this.initializeRow.bind(this)))}initializeGroupHeader(t){var e=this,i={};i.mouseup=function(i){e.tableRowDrop(i,t)}.bind(e),i.mousemove=function(i){var n;i.pageY-R.elOffset(t.element).top+e.table.rowManager.element.scrollTop>t.getHeight()/2?e.toRow===t&&e.toRowAfter||((n=t.getElement()).parentNode.insertBefore(e.placeholderElement,n.nextSibling),e.moveRow(t,!0)):(e.toRow!==t||e.toRowAfter)&&(n=t.getElement()).previousSibling&&(n.parentNode.insertBefore(e.placeholderElement,n),e.moveRow(t,!1))}.bind(e),t.modules.moveRow=i}initializeRow(t){var e,i=this,n={};n.mouseup=function(e){i.tableRowDrop(e,t)}.bind(i),n.mousemove=function(e){var n=t.getElement();e.pageY-R.elOffset(n).top+i.table.rowManager.element.scrollTop>t.getHeight()/2?i.toRow===t&&i.toRowAfter||(n.parentNode.insertBefore(i.placeholderElement,n.nextSibling),i.moveRow(t,!0)):(i.toRow!==t||i.toRowAfter)&&(n.parentNode.insertBefore(i.placeholderElement,n),i.moveRow(t,!1))}.bind(i),this.hasHandle||((e=t.getElement()).addEventListener("mousedown",(function(e){1===e.which&&(i.checkTimeout=setTimeout((function(){i.startMove(e,t)}),i.checkPeriod))})),e.addEventListener("mouseup",(function(t){1===t.which&&i.checkTimeout&&clearTimeout(i.checkTimeout)})),this.bindTouchEvents(t,t.getElement())),t.modules.moveRow=n}initializeColumn(t){t.definition.rowHandle&&!1!==this.table.options.movableRows&&(this.hasHandle=!0)}initializeCell(t){if(t.column.definition.rowHandle&&!1!==this.table.options.movableRows){var e=this,i=t.getElement(!0);i.addEventListener("mousedown",(function(i){1===i.which&&(e.checkTimeout=setTimeout((function(){e.startMove(i,t.row)}),e.checkPeriod))})),i.addEventListener("mouseup",(function(t){1===t.which&&e.checkTimeout&&clearTimeout(e.checkTimeout)})),this.bindTouchEvents(t.row,i)}}bindTouchEvents(t,e){var i,n,o,r,a,l,s=!1;e.addEventListener("touchstart",(e=>{this.checkTimeout=setTimeout((()=>{this.touchMove=!0,i=t.nextRow(),o=i?i.getHeight()/2:0,n=t.prevRow(),r=n?n.getHeight()/2:0,a=0,l=0,s=!1,this.startMove(e,t)}),this.checkPeriod)}),{passive:!0}),this.moving,this.toRow,this.toRowAfter,e.addEventListener("touchmove",(e=>{var u,h;this.moving&&(e.preventDefault(),this.moveHover(e),s||(s=e.touches[0].pageY),(u=e.touches[0].pageY-s)>0?i&&u-a>o&&(h=i)!==t&&(s=e.touches[0].pageY,h.getElement().parentNode.insertBefore(this.placeholderElement,h.getElement().nextSibling),this.moveRow(h,!0)):n&&-u-l>r&&(h=n)!==t&&(s=e.touches[0].pageY,h.getElement().parentNode.insertBefore(this.placeholderElement,h.getElement()),this.moveRow(h,!1)),h&&(i=h.nextRow(),a=o,o=i?i.getHeight()/2:0,n=h.prevRow(),l=r,r=n?n.getHeight()/2:0))})),e.addEventListener("touchend",(t=>{this.checkTimeout&&clearTimeout(this.checkTimeout),this.moving&&(this.endMove(t),this.touchMove=!1)}))}_bindMouseMove(){this.table.rowManager.getDisplayRows().forEach((t=>{("row"===t.type||"group"===t.type)&&t.modules.moveRow&&t.modules.moveRow.mousemove&&t.getElement().addEventListener("mousemove",t.modules.moveRow.mousemove)}))}_unbindMouseMove(){this.table.rowManager.getDisplayRows().forEach((t=>{("row"===t.type||"group"===t.type)&&t.modules.moveRow&&t.modules.moveRow.mousemove&&t.getElement().removeEventListener("mousemove",t.modules.moveRow.mousemove)}))}startMove(t,e){var i=e.getElement();this.setStartPosition(t,e),this.moving=e,this.table.element.classList.add("tabulator-block-select"),this.placeholderElement.style.width=e.getWidth()+"px",this.placeholderElement.style.height=e.getHeight()+"px",this.connection?(this.table.element.classList.add("tabulator-movingrow-sending"),this.connectToTables(e)):(i.parentNode.insertBefore(this.placeholderElement,i),i.parentNode.removeChild(i)),this.hoverElement=i.cloneNode(!0),this.hoverElement.classList.add("tabulator-moving"),this.connection?(document.body.appendChild(this.hoverElement),this.hoverElement.style.left="0",this.hoverElement.style.top="0",this.hoverElement.style.width=this.table.element.clientWidth+"px",this.hoverElement.style.whiteSpace="nowrap",this.hoverElement.style.overflow="hidden",this.hoverElement.style.pointerEvents="none"):(this.table.rowManager.getTableElement().appendChild(this.hoverElement),this.hoverElement.style.left="0",this.hoverElement.style.top="0",this._bindMouseMove()),document.body.addEventListener("mousemove",this.moveHover),document.body.addEventListener("mouseup",this.endMove),this.dispatchExternal("rowMoving",e.getComponent()),this.moveHover(t)}setStartPosition(t,e){var i,n,o=this.touchMove?t.touches[0].pageX:t.pageX,r=this.touchMove?t.touches[0].pageY:t.pageY;i=e.getElement(),this.connection?(n=i.getBoundingClientRect(),this.startX=n.left-o+window.pageXOffset,this.startY=n.top-r+window.pageYOffset):this.startY=r-i.getBoundingClientRect().top}endMove(t){t&&1!==t.which&&!this.touchMove||(this._unbindMouseMove(),this.connection||(this.placeholderElement.parentNode.insertBefore(this.moving.getElement(),this.placeholderElement.nextSibling),this.placeholderElement.parentNode.removeChild(this.placeholderElement)),this.hoverElement.parentNode.removeChild(this.hoverElement),this.table.element.classList.remove("tabulator-block-select"),this.toRow?this.table.rowManager.moveRow(this.moving,this.toRow,this.toRowAfter):this.dispatchExternal("rowMoveCancelled",this.moving.getComponent()),this.moving=!1,this.toRow=!1,this.toRowAfter=!1,document.body.removeEventListener("mousemove",this.moveHover),document.body.removeEventListener("mouseup",this.endMove),this.connection&&(this.table.element.classList.remove("tabulator-movingrow-sending"),this.disconnectFromTables()))}moveRow(t,e){this.toRow=t,this.toRowAfter=e}moveHover(t){this.connection?this.moveHoverConnections.call(this,t):this.moveHoverTable.call(this,t)}moveHoverTable(t){var e=this.table.rowManager.getElement(),i=e.scrollTop,n=(this.touchMove?t.touches[0].pageY:t.pageY)-e.getBoundingClientRect().top+i;this.hoverElement.style.top=Math.min(n-this.startY,this.table.rowManager.element.scrollHeight-this.hoverElement.offsetHeight)+"px"}moveHoverConnections(t){this.hoverElement.style.left=this.startX+(this.touchMove?t.touches[0].pageX:t.pageX)+"px",this.hoverElement.style.top=this.startY+(this.touchMove?t.touches[0].pageY:t.pageY)+"px"}elementRowDrop(t,e,i){this.dispatchExternal("movableRowsElementDrop",t,e,!!i&&i.getComponent())}connectToTables(t){var e;this.connectionSelectorsTables&&(e=this.commsConnections(this.connectionSelectorsTables),this.dispatchExternal("movableRowsSendingStart",e),this.commsSend(this.connectionSelectorsTables,"moveRow","connect",{row:t})),this.connectionSelectorsElements&&(this.connectionElements=[],Array.isArray(this.connectionSelectorsElements)||(this.connectionSelectorsElements=[this.connectionSelectorsElements]),this.connectionSelectorsElements.forEach((t=>{"string"==typeof t?this.connectionElements=this.connectionElements.concat(Array.prototype.slice.call(document.querySelectorAll(t))):this.connectionElements.push(t)})),this.connectionElements.forEach((t=>{var e=e=>{this.elementRowDrop(e,t,this.moving)};t.addEventListener("mouseup",e),t.tabulatorElementDropEvent=e,t.classList.add("tabulator-movingrow-receiving")})))}disconnectFromTables(){var t;this.connectionSelectorsTables&&(t=this.commsConnections(this.connectionSelectorsTables),this.dispatchExternal("movableRowsSendingStop",t),this.commsSend(this.connectionSelectorsTables,"moveRow","disconnect")),this.connectionElements.forEach((t=>{t.classList.remove("tabulator-movingrow-receiving"),t.removeEventListener("mouseup",t.tabulatorElementDropEvent),delete t.tabulatorElementDropEvent}))}connect(t,e){return this.connectedTable?(console.warn("Move Row Error - Table cannot accept connection, already connected to table:",this.connectedTable),!1):(this.connectedTable=t,this.connectedRow=e,this.table.element.classList.add("tabulator-movingrow-receiving"),this.table.rowManager.getDisplayRows().forEach((t=>{"row"===t.type&&t.modules.moveRow&&t.modules.moveRow.mouseup&&t.getElement().addEventListener("mouseup",t.modules.moveRow.mouseup)})),this.tableRowDropEvent=this.tableRowDrop.bind(this),this.table.element.addEventListener("mouseup",this.tableRowDropEvent),this.dispatchExternal("movableRowsReceivingStart",e,t),!0)}disconnect(t){t===this.connectedTable?(this.connectedTable=!1,this.connectedRow=!1,this.table.element.classList.remove("tabulator-movingrow-receiving"),this.table.rowManager.getDisplayRows().forEach((t=>{"row"===t.type&&t.modules.moveRow&&t.modules.moveRow.mouseup&&t.getElement().removeEventListener("mouseup",t.modules.moveRow.mouseup)})),this.table.element.removeEventListener("mouseup",this.tableRowDropEvent),this.dispatchExternal("movableRowsReceivingStop",t)):console.warn("Move Row Error - trying to disconnect from non connected table")}dropComplete(t,e,i){var n=!1;if(i){switch(typeof this.table.options.movableRowsSender){case"string":n=this.senders[this.table.options.movableRowsSender];break;case"function":n=this.table.options.movableRowsSender}n?n.call(this,this.moving?this.moving.getComponent():void 0,e?e.getComponent():void 0,t):this.table.options.movableRowsSender&&console.warn("Mover Row Error - no matching sender found:",this.table.options.movableRowsSender),this.dispatchExternal("movableRowsSent",this.moving.getComponent(),e?e.getComponent():void 0,t)}else this.dispatchExternal("movableRowsSentFailed",this.moving.getComponent(),e?e.getComponent():void 0,t);this.endMove()}tableRowDrop(t,e){var i=!1,n=!1;switch(t.stopImmediatePropagation(),typeof this.table.options.movableRowsReceiver){case"string":i=this.receivers[this.table.options.movableRowsReceiver];break;case"function":i=this.table.options.movableRowsReceiver}i?n=i.call(this,this.connectedRow.getComponent(),e?e.getComponent():void 0,this.connectedTable):console.warn("Mover Row Error - no matching receiver found:",this.table.options.movableRowsReceiver),n?this.dispatchExternal("movableRowsReceived",this.connectedRow.getComponent(),e?e.getComponent():void 0,this.connectedTable):this.dispatchExternal("movableRowsReceivedFailed",this.connectedRow.getComponent(),e?e.getComponent():void 0,this.connectedTable),this.commsSend(this.connectedTable,"moveRow","dropcomplete",{row:e,success:n})}commsReceived(t,e,i){switch(e){case"connect":return this.connect(t,i.row);case"disconnect":return this.disconnect(t);case"dropcomplete":return this.dropComplete(t,i.row,i.success)}}}Ct.prototype.receivers={insert:function(t,e,i){return this.table.addRow(t.getData(),void 0,e),!0},add:function(t,e,i){return this.table.addRow(t.getData()),!0},update:function(t,e,i){return!!e&&(e.update(t.getData()),!0)},replace:function(t,e,i){return!!e&&(this.table.addRow(t.getData(),void 0,e),e.delete(),!0)}},Ct.prototype.senders={delete:function(t,e,i){t.delete()}},Ct.moduleName="moveRow";class Et extends _{constructor(t){super(t),this.allowedTypes=["","data","edit","clipboard"],this.enabled=!0,this.registerColumnOption("mutator"),this.registerColumnOption("mutatorParams"),this.registerColumnOption("mutatorData"),this.registerColumnOption("mutatorDataParams"),this.registerColumnOption("mutatorEdit"),this.registerColumnOption("mutatorEditParams"),this.registerColumnOption("mutatorClipboard"),this.registerColumnOption("mutatorClipboardParams"),this.registerColumnOption("mutateLink")}initialize(){this.subscribe("cell-value-changing",this.transformCell.bind(this)),this.subscribe("cell-value-changed",this.mutateLink.bind(this)),this.subscribe("column-layout",this.initializeColumn.bind(this)),this.subscribe("row-data-init-before",this.rowDataChanged.bind(this)),this.subscribe("row-data-changing",this.rowDataChanged.bind(this))}rowDataChanged(t,e,i){return this.transformRow(e,"data",i)}initializeColumn(t){var e=!1,i={};this.allowedTypes.forEach((n=>{var o,r="mutator"+(n.charAt(0).toUpperCase()+n.slice(1));t.definition[r]&&(o=this.lookupMutator(t.definition[r]))&&(e=!0,i[r]={mutator:o,params:t.definition[r+"Params"]||{}})})),e&&(t.modules.mutate=i)}lookupMutator(t){var e=!1;switch(typeof t){case"string":Et.mutators[t]?e=Et.mutators[t]:console.warn("Mutator Error - No such mutator found, ignoring: ",t);break;case"function":e=t}return e}transformRow(t,e,i){var n,o="mutator"+(e.charAt(0).toUpperCase()+e.slice(1));return this.enabled&&this.table.columnManager.traverse((r=>{var a,l,s;r.modules.mutate&&(a=r.modules.mutate[o]||r.modules.mutate.mutator||!1)&&(n=r.getFieldValue(void 0!==i?i:t),("data"==e&&!i||void 0!==n)&&(s=r.getComponent(),l="function"==typeof a.params?a.params(n,t,e,s):a.params,r.setFieldValue(t,a.mutator(n,t,e,l,s))))})),t}transformCell(t,e){if(t.column.modules.mutate){var i=t.column.modules.mutate.mutatorEdit||t.column.modules.mutate.mutator||!1,n={};if(i)return n=Object.assign(n,t.row.getData()),t.column.setFieldValue(n,e),i.mutator(e,n,"edit",i.params,t.getComponent())}return e}mutateLink(t){var e=t.column.definition.mutateLink;e&&(Array.isArray(e)||(e=[e]),e.forEach((e=>{var i=t.row.getCell(e);i&&i.setValue(i.getValue(),!0,!0)})))}enable(){this.enabled=!0}disable(){this.enabled=!1}}Et.moduleName="mutator",Et.mutators={};var yt={rows:function(t,e,i,n,o){var r=document.createElement("span"),a=document.createElement("span"),l=document.createElement("span"),s=document.createElement("span"),u=document.createElement("span"),h=document.createElement("span");return this.table.modules.localize.langBind("pagination|counter|showing",(t=>{a.innerHTML=t})),this.table.modules.localize.langBind("pagination|counter|of",(t=>{s.innerHTML=t})),this.table.modules.localize.langBind("pagination|counter|rows",(t=>{h.innerHTML=t})),n?(l.innerHTML=" "+e+"-"+Math.min(e+t-1,n)+" ",u.innerHTML=" "+n+" ",r.appendChild(a),r.appendChild(l),r.appendChild(s),r.appendChild(u),r.appendChild(h)):(l.innerHTML=" 0 ",r.appendChild(a),r.appendChild(l),r.appendChild(h)),r},pages:function(t,e,i,n,o){var r=document.createElement("span"),a=document.createElement("span"),l=document.createElement("span"),s=document.createElement("span"),u=document.createElement("span"),h=document.createElement("span");return this.table.modules.localize.langBind("pagination|counter|showing",(t=>{a.innerHTML=t})),l.innerHTML=" "+i+" ",this.table.modules.localize.langBind("pagination|counter|of",(t=>{s.innerHTML=t})),u.innerHTML=" "+o+" ",this.table.modules.localize.langBind("pagination|counter|pages",(t=>{h.innerHTML=t})),r.appendChild(a),r.appendChild(l),r.appendChild(s),r.appendChild(u),r.appendChild(h),r}};class xt extends _{constructor(t){super(t),this.mode="local",this.progressiveLoad=!1,this.element=null,this.pageCounterElement=null,this.pageCounter=null,this.size=0,this.page=1,this.count=5,this.max=1,this.remoteRowCountEstimate=null,this.initialLoad=!0,this.dataChanging=!1,this.pageSizes=[],this.registerTableOption("pagination",!1),this.registerTableOption("paginationMode","local"),this.registerTableOption("paginationSize",!1),this.registerTableOption("paginationInitialPage",1),this.registerTableOption("paginationCounter",!1),this.registerTableOption("paginationCounterElement",!1),this.registerTableOption("paginationButtonCount",5),this.registerTableOption("paginationSizeSelector",!1),this.registerTableOption("paginationElement",!1),this.registerTableOption("paginationAddRow","page"),this.registerTableOption("progressiveLoad",!1),this.registerTableOption("progressiveLoadDelay",0),this.registerTableOption("progressiveLoadScrollMargin",0),this.registerTableFunction("setMaxPage",this.setMaxPage.bind(this)),this.registerTableFunction("setPage",this.setPage.bind(this)),this.registerTableFunction("setPageToRow",this.userSetPageToRow.bind(this)),this.registerTableFunction("setPageSize",this.userSetPageSize.bind(this)),this.registerTableFunction("getPageSize",this.getPageSize.bind(this)),this.registerTableFunction("previousPage",this.previousPage.bind(this)),this.registerTableFunction("nextPage",this.nextPage.bind(this)),this.registerTableFunction("getPage",this.getPage.bind(this)),this.registerTableFunction("getPageMax",this.getPageMax.bind(this)),this.registerComponentFunction("row","pageTo",this.setPageToRow.bind(this))}initialize(){this.table.options.pagination?(this.subscribe("row-deleted",this.rowsUpdated.bind(this)),this.subscribe("row-added",this.rowsUpdated.bind(this)),this.subscribe("data-processed",this.initialLoadComplete.bind(this)),this.subscribe("table-built",this.calculatePageSizes.bind(this)),this.subscribe("footer-redraw",this.footerRedraw.bind(this)),"page"==this.table.options.paginationAddRow&&this.subscribe("row-adding-position",this.rowAddingPosition.bind(this)),"remote"===this.table.options.paginationMode&&(this.subscribe("data-params",this.remotePageParams.bind(this)),this.subscribe("data-loaded",this._parseRemoteData.bind(this))),this.table.options.progressiveLoad&&console.error("Progressive Load Error - Pagination and progressive load cannot be used at the same time"),this.registerDisplayHandler(this.restOnRenderBefore.bind(this),40),this.registerDisplayHandler(this.getRows.bind(this),50),this.createElements(),this.initializePageCounter(),this.initializePaginator()):this.table.options.progressiveLoad&&(this.subscribe("data-params",this.remotePageParams.bind(this)),this.subscribe("data-loaded",this._parseRemoteData.bind(this)),this.subscribe("table-built",this.calculatePageSizes.bind(this)),this.subscribe("data-processed",this.initialLoadComplete.bind(this)),this.initializeProgressive(this.table.options.progressiveLoad),"scroll"===this.table.options.progressiveLoad&&this.subscribe("scroll-vertical",this.scrollVertical.bind(this)))}rowAddingPosition(t,e){var i,n=this.table.rowManager,o=n.getDisplayRows();return e?o.length?i=o[0]:n.activeRows.length&&(i=n.activeRows[n.activeRows.length-1],e=!1):o.length&&(i=o[o.length-1],e=!(o.length<this.size)),{index:i,top:e}}calculatePageSizes(){var t,e;this.table.options.paginationSize?this.size=this.table.options.paginationSize:((t=document.createElement("div")).classList.add("tabulator-row"),t.style.visibility="hidden",(e=document.createElement("div")).classList.add("tabulator-cell"),e.innerHTML="Page Row Test",t.appendChild(e),this.table.rowManager.getTableElement().appendChild(t),this.size=Math.floor(this.table.rowManager.getElement().clientHeight/t.offsetHeight),this.table.rowManager.getTableElement().removeChild(t)),this.dispatchExternal("pageSizeChanged",this.size),this.generatePageSizeSelectList()}initialLoadComplete(){this.initialLoad=!1}remotePageParams(t,e,i,n){return this.initialLoad||(this.progressiveLoad&&!i||!this.progressiveLoad&&!this.dataChanging)&&this.reset(!0),n.page=this.page,this.size&&(n.size=this.size),n}userSetPageToRow(t){return this.table.options.pagination&&(t=this.rowManager.findRow(t))?this.setPageToRow(t):Promise.reject()}userSetPageSize(t){return!!this.table.options.pagination&&(this.setPageSize(t),this.setPage(1))}scrollVertical(t,e){var i;e||this.table.dataLoader.loading||(i=this.table.rowManager.getElement()).scrollHeight-i.clientHeight-t<(this.table.options.progressiveLoadScrollMargin||2*i.clientHeight)&&this.nextPage().catch((()=>{}))}restOnRenderBefore(t,e){return e||"local"===this.mode&&this.reset(),t}rowsUpdated(){this.refreshData(!0,"all")}createElements(){var t;this.element=document.createElement("span"),this.element.classList.add("tabulator-paginator"),this.pagesElement=document.createElement("span"),this.pagesElement.classList.add("tabulator-pages"),(t=document.createElement("button")).classList.add("tabulator-page"),t.setAttribute("type","button"),t.setAttribute("role","button"),t.setAttribute("aria-label",""),t.setAttribute("title",""),this.firstBut=t.cloneNode(!0),this.firstBut.setAttribute("data-page","first"),this.prevBut=t.cloneNode(!0),this.prevBut.setAttribute("data-page","prev"),this.nextBut=t.cloneNode(!0),this.nextBut.setAttribute("data-page","next"),this.lastBut=t.cloneNode(!0),this.lastBut.setAttribute("data-page","last"),this.table.options.paginationSizeSelector&&(this.pageSizeSelect=document.createElement("select"),this.pageSizeSelect.classList.add("tabulator-page-size"))}generatePageSizeSelectList(){var t=[];if(this.pageSizeSelect){if(Array.isArray(this.table.options.paginationSizeSelector))t=this.table.options.paginationSizeSelector,this.pageSizes=t,-1==this.pageSizes.indexOf(this.size)&&t.unshift(this.size);else if(-1==this.pageSizes.indexOf(this.size)){t=[];for(let e=1;e<5;e++)t.push(this.size*e);this.pageSizes=t}else t=this.pageSizes;for(;this.pageSizeSelect.firstChild;)this.pageSizeSelect.removeChild(this.pageSizeSelect.firstChild);t.forEach((t=>{var e=document.createElement("option");e.value=t,!0===t?this.langBind("pagination|all",(function(t){e.innerHTML=t})):e.innerHTML=t,this.pageSizeSelect.appendChild(e)})),this.pageSizeSelect.value=this.size}}initializePageCounter(){var t=this.table.options.paginationCounter,e=null;t&&((e="function"==typeof t?t:xt.pageCounters[t])?(this.pageCounter=e,this.pageCounterElement=document.createElement("span"),this.pageCounterElement.classList.add("tabulator-page-counter")):console.warn("Pagination Error - No such page counter found: ",t))}initializePaginator(t){var e,i;t||(this.langBind("pagination|first",(t=>{this.firstBut.innerHTML=t})),this.langBind("pagination|first_title",(t=>{this.firstBut.setAttribute("aria-label",t),this.firstBut.setAttribute("title",t)})),this.langBind("pagination|prev",(t=>{this.prevBut.innerHTML=t})),this.langBind("pagination|prev_title",(t=>{this.prevBut.setAttribute("aria-label",t),this.prevBut.setAttribute("title",t)})),this.langBind("pagination|next",(t=>{this.nextBut.innerHTML=t})),this.langBind("pagination|next_title",(t=>{this.nextBut.setAttribute("aria-label",t),this.nextBut.setAttribute("title",t)})),this.langBind("pagination|last",(t=>{this.lastBut.innerHTML=t})),this.langBind("pagination|last_title",(t=>{this.lastBut.setAttribute("aria-label",t),this.lastBut.setAttribute("title",t)})),this.firstBut.addEventListener("click",(()=>{this.setPage(1)})),this.prevBut.addEventListener("click",(()=>{this.previousPage()})),this.nextBut.addEventListener("click",(()=>{this.nextPage()})),this.lastBut.addEventListener("click",(()=>{this.setPage(this.max)})),this.table.options.paginationElement&&(this.element=this.table.options.paginationElement),this.pageSizeSelect&&(e=document.createElement("label"),this.langBind("pagination|page_size",(t=>{this.pageSizeSelect.setAttribute("aria-label",t),this.pageSizeSelect.setAttribute("title",t),e.innerHTML=t})),this.element.appendChild(e),this.element.appendChild(this.pageSizeSelect),this.pageSizeSelect.addEventListener("change",(t=>{this.setPageSize("true"==this.pageSizeSelect.value||this.pageSizeSelect.value),this.setPage(1)}))),this.element.appendChild(this.firstBut),this.element.appendChild(this.prevBut),this.element.appendChild(this.pagesElement),this.element.appendChild(this.nextBut),this.element.appendChild(this.lastBut),this.table.options.paginationElement||(this.table.options.paginationCounter&&(this.table.options.paginationCounterElement?this.table.options.paginationCounterElement instanceof HTMLElement?this.table.options.paginationCounterElement.appendChild(this.pageCounterElement):"string"==typeof this.table.options.paginationCounterElement&&((i=document.querySelector(this.table.options.paginationCounterElement))?i.appendChild(this.pageCounterElement):console.warn("Pagination Error - Unable to find element matching paginationCounterElement selector:",this.table.options.paginationCounterElement)):this.footerAppend(this.pageCounterElement)),this.footerAppend(this.element)),this.page=this.table.options.paginationInitialPage,this.count=this.table.options.paginationButtonCount),this.mode=this.table.options.paginationMode}initializeProgressive(t){this.initializePaginator(!0),this.mode="progressive_"+t,this.progressiveLoad=!0}trackChanges(){this.dispatch("page-changed")}setMaxRows(t){this.max=t?!0===this.size?1:Math.ceil(t/this.size):1,this.page>this.max&&(this.page=this.max)}reset(t){this.initialLoad||("local"==this.mode||t)&&(this.page=1,this.trackChanges())}setMaxPage(t){t=parseInt(t),this.max=t||1,this.page>this.max&&(this.page=this.max,this.trigger())}setPage(t){switch(t){case"first":return this.setPage(1);case"prev":return this.previousPage();case"next":return this.nextPage();case"last":return this.setPage(this.max)}return(t=parseInt(t))>0&&t<=this.max||"local"!==this.mode?(this.page=t,this.trackChanges(),this.trigger()):(console.warn("Pagination Error - Requested page is out of range of 1 - "+this.max+":",t),Promise.reject())}setPageToRow(t){var e=this.displayRows(-1).indexOf(t);if(e>-1){var i=!0===this.size?1:Math.ceil((e+1)/this.size);return this.setPage(i)}return console.warn("Pagination Error - Requested row is not visible"),Promise.reject()}setPageSize(t){!0!==t&&(t=parseInt(t)),t>0&&(this.size=t,this.dispatchExternal("pageSizeChanged",t)),this.pageSizeSelect&&this.generatePageSizeSelectList(),this.trackChanges()}_setPageCounter(t,e,i){var n;if(this.pageCounter)switch("remote"===this.mode&&(e=this.size,i=(this.page-1)*this.size+1,t=this.remoteRowCountEstimate),typeof(n=this.pageCounter.call(this,e,i,this.page,t,this.max))){case"object":if(n instanceof Node){for(;this.pageCounterElement.firstChild;)this.pageCounterElement.removeChild(this.pageCounterElement.firstChild);this.pageCounterElement.appendChild(n)}else this.pageCounterElement.innerHTML="",null!=n&&console.warn("Page Counter Error - Page Counter has returned a type of object, the only valid page counter object return is an instance of Node, the page counter returned:",n);break;case"undefined":this.pageCounterElement.innerHTML="";break;default:this.pageCounterElement.innerHTML=n}}_setPageButtons(){let t=Math.floor((this.count-1)/2),e=Math.ceil((this.count-1)/2),i=this.max-this.page+t+1<this.count?this.max-this.count+1:Math.max(this.page-t,1),n=this.page<=e?Math.min(this.count,this.max):Math.min(this.page+e,this.max);for(;this.pagesElement.firstChild;)this.pagesElement.removeChild(this.pagesElement.firstChild);1==this.page?(this.firstBut.disabled=!0,this.prevBut.disabled=!0):(this.firstBut.disabled=!1,this.prevBut.disabled=!1),this.page==this.max?(this.lastBut.disabled=!0,this.nextBut.disabled=!0):(this.lastBut.disabled=!1,this.nextBut.disabled=!1);for(let t=i;t<=n;t++)t>0&&t<=this.max&&this.pagesElement.appendChild(this._generatePageButton(t));this.footerRedraw()}_generatePageButton(t){var e=document.createElement("button");return e.classList.add("tabulator-page"),t==this.page&&e.classList.add("active"),e.setAttribute("type","button"),e.setAttribute("role","button"),this.langBind("pagination|page_title",(i=>{e.setAttribute("aria-label",i+" "+t),e.setAttribute("title",i+" "+t)})),e.setAttribute("data-page",t),e.textContent=t,e.addEventListener("click",(e=>{this.setPage(t)})),e}previousPage(){return this.page>1?(this.page--,this.trackChanges(),this.trigger()):(console.warn("Pagination Error - Previous page would be less than page 1:",0),Promise.reject())}nextPage(){return this.page<this.max?(this.page++,this.trackChanges(),this.trigger()):(this.progressiveLoad||console.warn("Pagination Error - Next page would be greater than maximum page of "+this.max+":",this.max+1),Promise.reject())}getPage(){return this.page}getPageMax(){return this.max}getPageSize(t){return this.size}getMode(){return this.mode}getRows(t){var e,i,n,o,r=0,a=t.filter((t=>"row"===t.type));if("local"==this.mode){e=[],this.setMaxRows(t.length),!0===this.size?(i=0,n=t.length):n=(i=this.size*(this.page-1))+parseInt(this.size),this._setPageButtons();for(let a=i;a<n;a++){let i=t[a];i&&(e.push(i),"row"===i.type&&(o||(o=i),r++))}return this._setPageCounter(a.length,r,o?a.indexOf(o)+1:0),e}return this._setPageButtons(),this._setPageCounter(a.length),t.slice(0)}trigger(){var t;switch(this.mode){case"local":return t=this.table.rowManager.scrollLeft,this.refreshData(),this.table.rowManager.scrollHorizontal(t),this.dispatchExternal("pageLoaded",this.getPage()),Promise.resolve();case"remote":return this.dataChanging=!0,this.reloadData(null).finally((()=>{this.dataChanging=!1}));case"progressive_load":case"progressive_scroll":return this.reloadData(null,!0);default:return console.warn("Pagination Error - no such pagination mode:",this.mode),Promise.reject()}}_parseRemoteData(t){var e;if(void 0===t.last_page&&console.warn("Remote Pagination Error - Server response missing '"+(this.options("dataReceiveParams").last_page||"last_page")+"' property"),t.data){if(this.max=parseInt(t.last_page)||1,this.remoteRowCountEstimate=void 0!==t.last_row?t.last_row:t.last_page*this.size-(this.page==t.last_page?this.size-t.data.length:0),this.progressiveLoad){switch(this.mode){case"progressive_load":1==this.page?this.table.rowManager.setData(t.data,!1,1==this.page):this.table.rowManager.addRows(t.data),this.page<this.max&&setTimeout((()=>{this.nextPage()}),this.table.options.progressiveLoadDelay);break;case"progressive_scroll":t=1===this.page?t.data:this.table.rowManager.getData().concat(t.data),this.table.rowManager.setData(t,1!==this.page,1==this.page),e=this.table.options.progressiveLoadScrollMargin||2*this.table.rowManager.element.clientHeight,this.table.rowManager.element.scrollHeight<=this.table.rowManager.element.clientHeight+e&&this.page<this.max&&setTimeout((()=>{this.nextPage()}))}return!1}this.dispatchExternal("pageLoaded",this.getPage())}else console.warn("Remote Pagination Error - Server response missing '"+(this.options("dataReceiveParams").data||"data")+"' property");return t.data}footerRedraw(){var t=this.table.footerManager.containerElement;Math.ceil(t.clientWidth)-t.scrollWidth<0?this.pagesElement.style.display="none":(this.pagesElement.style.display="",Math.ceil(t.clientWidth)-t.scrollWidth<0&&(this.pagesElement.style.display="none"))}}xt.moduleName="page",xt.pageCounters=yt;var Bt={local:function(t,e){var i=localStorage.getItem(t+"-"+e);return!!i&&JSON.parse(i)},cookie:function(t,e){var i,n,o=document.cookie,r=t+"-"+e,a=o.indexOf(r+"=");return a>-1&&((i=(o=o.slice(a)).indexOf(";"))>-1&&(o=o.slice(0,i)),n=o.replace(r+"=","")),!!n&&JSON.parse(n)}},kt={local:function(t,e,i){localStorage.setItem(t+"-"+e,JSON.stringify(i))},cookie:function(t,e,i){var n=new Date;n.setDate(n.getDate()+1e4),document.cookie=t+"-"+e+"="+JSON.stringify(i)+"; expires="+n.toUTCString()}};class Rt extends _{constructor(t){super(t),this.mode="",this.id="",this.defWatcherBlock=!1,this.config={},this.readFunc=!1,this.writeFunc=!1,this.registerTableOption("persistence",!1),this.registerTableOption("persistenceID",""),this.registerTableOption("persistenceMode",!0),this.registerTableOption("persistenceReaderFunc",!1),this.registerTableOption("persistenceWriterFunc",!1)}localStorageTest(){var t="_tabulator_test";try{return window.localStorage.setItem(t,t),window.localStorage.removeItem(t),!0}catch(t){return!1}}initialize(){if(this.table.options.persistence){var t,e=this.table.options.persistenceMode,i=this.table.options.persistenceID;this.mode=!0!==e?e:this.localStorageTest()?"local":"cookie",this.table.options.persistenceReaderFunc?"function"==typeof this.table.options.persistenceReaderFunc?this.readFunc=this.table.options.persistenceReaderFunc:Rt.readers[this.table.options.persistenceReaderFunc]?this.readFunc=Rt.readers[this.table.options.persistenceReaderFunc]:console.warn("Persistence Read Error - invalid reader set",this.table.options.persistenceReaderFunc):Rt.readers[this.mode]?this.readFunc=Rt.readers[this.mode]:console.warn("Persistence Read Error - invalid reader set",this.mode),this.table.options.persistenceWriterFunc?"function"==typeof this.table.options.persistenceWriterFunc?this.writeFunc=this.table.options.persistenceWriterFunc:Rt.writers[this.table.options.persistenceWriterFunc]?this.writeFunc=Rt.writers[this.table.options.persistenceWriterFunc]:console.warn("Persistence Write Error - invalid reader set",this.table.options.persistenceWriterFunc):Rt.writers[this.mode]?this.writeFunc=Rt.writers[this.mode]:console.warn("Persistence Write Error - invalid writer set",this.mode),this.id="tabulator-"+(i||this.table.element.getAttribute("id")||""),this.config={sort:!0===this.table.options.persistence||this.table.options.persistence.sort,filter:!0===this.table.options.persistence||this.table.options.persistence.filter,headerFilter:!0===this.table.options.persistence||this.table.options.persistence.headerFilter,group:!0===this.table.options.persistence||this.table.options.persistence.group,page:!0===this.table.options.persistence||this.table.options.persistence.page,columns:!0===this.table.options.persistence?["title","width","visible"]:this.table.options.persistence.columns},this.config.page&&(t=this.retrieveData("page"))&&(void 0===t.paginationSize||!0!==this.config.page&&!this.config.page.size||(this.table.options.paginationSize=t.paginationSize),void 0===t.paginationInitialPage||!0!==this.config.page&&!this.config.page.page||(this.table.options.paginationInitialPage=t.paginationInitialPage)),this.config.group&&(t=this.retrieveData("group"))&&(void 0===t.groupBy||!0!==this.config.group&&!this.config.group.groupBy||(this.table.options.groupBy=t.groupBy),void 0===t.groupStartOpen||!0!==this.config.group&&!this.config.group.groupStartOpen||(this.table.options.groupStartOpen=t.groupStartOpen),void 0===t.groupHeader||!0!==this.config.group&&!this.config.group.groupHeader||(this.table.options.groupHeader=t.groupHeader)),this.config.columns&&(this.table.options.columns=this.load("columns",this.table.options.columns),this.subscribe("column-init",this.initializeColumn.bind(this)),this.subscribe("column-show",this.save.bind(this,"columns")),this.subscribe("column-hide",this.save.bind(this,"columns")),this.subscribe("column-moved",this.save.bind(this,"columns"))),this.subscribe("table-built",this.tableBuilt.bind(this),0),this.subscribe("table-redraw",this.tableRedraw.bind(this)),this.subscribe("filter-changed",this.eventSave.bind(this,"filter")),this.subscribe("filter-changed",this.eventSave.bind(this,"headerFilter")),this.subscribe("sort-changed",this.eventSave.bind(this,"sort")),this.subscribe("group-changed",this.eventSave.bind(this,"group")),this.subscribe("page-changed",this.eventSave.bind(this,"page")),this.subscribe("column-resized",this.eventSave.bind(this,"columns")),this.subscribe("column-width",this.eventSave.bind(this,"columns")),this.subscribe("layout-refreshed",this.eventSave.bind(this,"columns"))}this.registerTableFunction("getColumnLayout",this.getColumnLayout.bind(this)),this.registerTableFunction("setColumnLayout",this.setColumnLayout.bind(this))}eventSave(t){this.config[t]&&this.save(t)}tableBuilt(){var t,e,i;this.config.sort&&0==!(t=this.load("sort"))&&(this.table.options.initialSort=t),this.config.filter&&0==!(e=this.load("filter"))&&(this.table.options.initialFilter=e),this.config.headerFilter&&0==!(i=this.load("headerFilter"))&&(this.table.options.initialHeaderFilter=i)}tableRedraw(t){t&&this.config.columns&&this.save("columns")}getColumnLayout(){return this.parseColumns(this.table.columnManager.getColumns())}setColumnLayout(t){return this.table.columnManager.setColumns(this.mergeDefinition(this.table.options.columns,t)),!0}initializeColumn(t){var e;this.config.columns&&(this.defWatcherBlock=!0,e=t.getDefinition(),(!0===this.config.columns?Object.keys(e):this.config.columns).forEach((t=>{var i=Object.getOwnPropertyDescriptor(e,t),n=e[t];i&&Object.defineProperty(e,t,{set:t=>{n=t,this.defWatcherBlock||this.save("columns"),i.set&&i.set(t)},get:()=>(i.get&&i.get(),n)})})),this.defWatcherBlock=!1)}load(t,e){var i=this.retrieveData(t);return e&&(i=i?this.mergeDefinition(e,i):e),i}retrieveData(t){return!!this.readFunc&&this.readFunc(this.id,t)}mergeDefinition(t,e){var i=[];return(e=e||[]).forEach(((e,n)=>{var o,r=this._findColumn(t,e);r&&(!0===this.config.columns||null==this.config.columns?(o=Object.keys(r)).push("width"):o=this.config.columns,o.forEach((t=>{"columns"!==t&&void 0!==e[t]&&(r[t]=e[t])})),r.columns&&(r.columns=this.mergeDefinition(r.columns,e.columns)),i.push(r))})),t.forEach(((t,n)=>{this._findColumn(e,t)||(i.length>n?i.splice(n,0,t):i.push(t))})),i}_findColumn(t,e){var i=e.columns?"group":e.field?"field":"object";return t.find((function(t){switch(i){case"group":return t.title===e.title&&t.columns.length===e.columns.length;case"field":return t.field===e.field;case"object":return t===e}}))}save(t){var e={};switch(t){case"columns":e=this.parseColumns(this.table.columnManager.getColumns());break;case"filter":e=this.table.modules.filter.getFilters();break;case"headerFilter":e=this.table.modules.filter.getHeaderFilters();break;case"sort":e=this.validateSorters(this.table.modules.sort.getSort());break;case"group":e=this.getGroupConfig();break;case"page":e=this.getPageConfig()}this.writeFunc&&this.writeFunc(this.id,t,e)}validateSorters(t){return t.forEach((function(t){t.column=t.field,delete t.field})),t}getGroupConfig(){var t={};return this.config.group&&((!0===this.config.group||this.config.group.groupBy)&&(t.groupBy=this.table.options.groupBy),(!0===this.config.group||this.config.group.groupStartOpen)&&(t.groupStartOpen=this.table.options.groupStartOpen),(!0===this.config.group||this.config.group.groupHeader)&&(t.groupHeader=this.table.options.groupHeader)),t}getPageConfig(){var t={};return this.config.page&&((!0===this.config.page||this.config.page.size)&&(t.paginationSize=this.table.modules.page.getPageSize()),(!0===this.config.page||this.config.page.page)&&(t.paginationInitialPage=this.table.modules.page.getPage())),t}parseColumns(t){var e=[],i=["headerContextMenu","headerMenu","contextMenu","clickMenu"];return t.forEach((t=>{var n,o={},r=t.getDefinition();t.isGroup?(o.title=r.title,o.columns=this.parseColumns(t.getColumns())):(o.field=t.getField(),!0===this.config.columns||null==this.config.columns?((n=Object.keys(r)).push("width"),n.push("visible")):n=this.config.columns,n.forEach((e=>{switch(e){case"width":o.width=t.getWidth();break;case"visible":o.visible=t.visible;break;default:"function"!=typeof r[e]&&-1===i.indexOf(e)&&(o[e]=r[e])}}))),e.push(o)})),e}}Rt.moduleName="persistence",Rt.moduleInitOrder=-10,Rt.readers=Bt,Rt.writers=kt;class Tt extends _{constructor(t){super(t),this.columnSubscribers={},this.registerTableOption("rowContextPopup",!1),this.registerTableOption("rowClickPopup",!1),this.registerTableOption("rowDblClickPopup",!1),this.registerTableOption("groupContextPopup",!1),this.registerTableOption("groupClickPopup",!1),this.registerTableOption("groupDblClickPopup",!1),this.registerColumnOption("headerContextPopup"),this.registerColumnOption("headerClickPopup"),this.registerColumnOption("headerDblClickPopup"),this.registerColumnOption("headerPopup"),this.registerColumnOption("headerPopupIcon"),this.registerColumnOption("contextPopup"),this.registerColumnOption("clickPopup"),this.registerColumnOption("dblClickPopup"),this.registerComponentFunction("cell","popup",this._componentPopupCall.bind(this)),this.registerComponentFunction("column","popup",this._componentPopupCall.bind(this)),this.registerComponentFunction("row","popup",this._componentPopupCall.bind(this)),this.registerComponentFunction("group","popup",this._componentPopupCall.bind(this))}initialize(){this.initializeRowWatchers(),this.initializeGroupWatchers(),this.subscribe("column-init",this.initializeColumn.bind(this))}_componentPopupCall(t,e,i){this.loadPopupEvent(e,null,t,i)}initializeRowWatchers(){this.table.options.rowContextPopup&&(this.subscribe("row-contextmenu",this.loadPopupEvent.bind(this,this.table.options.rowContextPopup)),this.table.on("rowTapHold",this.loadPopupEvent.bind(this,this.table.options.rowContextPopup))),this.table.options.rowClickPopup&&this.subscribe("row-click",this.loadPopupEvent.bind(this,this.table.options.rowClickPopup)),this.table.options.rowDblClickPopup&&this.subscribe("row-dblclick",this.loadPopupEvent.bind(this,this.table.options.rowDblClickPopup))}initializeGroupWatchers(){this.table.options.groupContextPopup&&(this.subscribe("group-contextmenu",this.loadPopupEvent.bind(this,this.table.options.groupContextPopup)),this.table.on("groupTapHold",this.loadPopupEvent.bind(this,this.table.options.groupContextPopup))),this.table.options.groupClickPopup&&this.subscribe("group-click",this.loadPopupEvent.bind(this,this.table.options.groupClickPopup)),this.table.options.groupDblClickPopup&&this.subscribe("group-dblclick",this.loadPopupEvent.bind(this,this.table.options.groupDblClickPopup))}initializeColumn(t){var e=t.definition;e.headerContextPopup&&!this.columnSubscribers.headerContextPopup&&(this.columnSubscribers.headerContextPopup=this.loadPopupTableColumnEvent.bind(this,"headerContextPopup"),this.subscribe("column-contextmenu",this.columnSubscribers.headerContextPopup),this.table.on("headerTapHold",this.loadPopupTableColumnEvent.bind(this,"headerContextPopup"))),e.headerClickPopup&&!this.columnSubscribers.headerClickPopup&&(this.columnSubscribers.headerClickPopup=this.loadPopupTableColumnEvent.bind(this,"headerClickPopup"),this.subscribe("column-click",this.columnSubscribers.headerClickPopup)),e.headerDblClickPopup&&!this.columnSubscribers.headerDblClickPopup&&(this.columnSubscribers.headerDblClickPopup=this.loadPopupTableColumnEvent.bind(this,"headerDblClickPopup"),this.subscribe("column-dblclick",this.columnSubscribers.headerDblClickPopup)),e.headerPopup&&this.initializeColumnHeaderPopup(t),e.contextPopup&&!this.columnSubscribers.contextPopup&&(this.columnSubscribers.contextPopup=this.loadPopupTableCellEvent.bind(this,"contextPopup"),this.subscribe("cell-contextmenu",this.columnSubscribers.contextPopup),this.table.on("cellTapHold",this.loadPopupTableCellEvent.bind(this,"contextPopup"))),e.clickPopup&&!this.columnSubscribers.clickPopup&&(this.columnSubscribers.clickPopup=this.loadPopupTableCellEvent.bind(this,"clickPopup"),this.subscribe("cell-click",this.columnSubscribers.clickPopup)),e.dblClickPopup&&!this.columnSubscribers.dblClickPopup&&(this.columnSubscribers.dblClickPopup=this.loadPopupTableCellEvent.bind(this,"dblClickPopup"),this.subscribe("cell-click",this.columnSubscribers.dblClickPopup))}initializeColumnHeaderPopup(t){var e,i=t.definition.headerPopupIcon;(e=document.createElement("span")).classList.add("tabulator-header-popup-button"),i?("function"==typeof i&&(i=i(t.getComponent())),i instanceof HTMLElement?e.appendChild(i):e.innerHTML=i):e.innerHTML="&vellip;",e.addEventListener("click",(e=>{e.stopPropagation(),e.preventDefault(),this.loadPopupEvent(t.definition.headerPopup,e,t)})),t.titleElement.insertBefore(e,t.titleElement.firstChild)}loadPopupTableCellEvent(t,e,i){i._cell&&(i=i._cell),i.column.definition[t]&&this.loadPopupEvent(i.column.definition[t],e,i)}loadPopupTableColumnEvent(t,e,i){i._column&&(i=i._column),i.definition[t]&&this.loadPopupEvent(i.definition[t],e,i)}loadPopupEvent(t,e,i,n){var o;i._group?i=i._group:i._row&&(i=i._row),t="function"==typeof t?t.call(this.table,e,i.getComponent(),(function(t){o=t})):t,this.loadPopup(e,i,t,o,n)}loadPopup(t,e,i,n,o){var r,a,l=!(t instanceof MouseEvent);i instanceof HTMLElement?r=i:(r=document.createElement("div")).innerHTML=i,r.classList.add("tabulator-popup"),r.addEventListener("click",(t=>{t.stopPropagation()})),l||t.preventDefault(),a=this.popup(r),"function"==typeof n&&a.renderCallback(n),t?a.show(t):a.show(e.getElement(),o||"center"),a.hideOnBlur((()=>{this.dispatchExternal("popupClosed",e.getComponent())})),this.dispatchExternal("popupOpened",e.getComponent())}}Tt.moduleName="popup";class _t extends _{constructor(t){super(t),this.element=!1,this.manualBlock=!1,this.beforeprintEventHandler=null,this.afterprintEventHandler=null,this.registerTableOption("printAsHtml",!1),this.registerTableOption("printFormatter",!1),this.registerTableOption("printHeader",!1),this.registerTableOption("printFooter",!1),this.registerTableOption("printStyled",!0),this.registerTableOption("printRowRange","visible"),this.registerTableOption("printConfig",{}),this.registerColumnOption("print"),this.registerColumnOption("titlePrint")}initialize(){this.table.options.printAsHtml&&(this.beforeprintEventHandler=this.replaceTable.bind(this),this.afterprintEventHandler=this.cleanup.bind(this),window.addEventListener("beforeprint",this.beforeprintEventHandler),window.addEventListener("afterprint",this.afterprintEventHandler),this.subscribe("table-destroy",this.destroy.bind(this))),this.registerTableFunction("print",this.printFullscreen.bind(this))}destroy(){this.table.options.printAsHtml&&(window.removeEventListener("beforeprint",this.beforeprintEventHandler),window.removeEventListener("afterprint",this.afterprintEventHandler))}replaceTable(){this.manualBlock||(this.element=document.createElement("div"),this.element.classList.add("tabulator-print-table"),this.element.appendChild(this.table.modules.export.generateTable(this.table.options.printConfig,this.table.options.printStyled,this.table.options.printRowRange,"print")),this.table.element.style.display="none",this.table.element.parentNode.insertBefore(this.element,this.table.element))}cleanup(){document.body.classList.remove("tabulator-print-fullscreen-hide"),this.element&&this.element.parentNode&&(this.element.parentNode.removeChild(this.element),this.table.element.style.display="")}printFullscreen(t,e,i){var n,o,r=window.scrollX,a=window.scrollY,l=document.createElement("div"),s=document.createElement("div"),u=this.table.modules.export.generateTable(void 0!==i?i:this.table.options.printConfig,void 0!==e?e:this.table.options.printStyled,t||this.table.options.printRowRange,"print");this.manualBlock=!0,this.element=document.createElement("div"),this.element.classList.add("tabulator-print-fullscreen"),this.table.options.printHeader&&(l.classList.add("tabulator-print-header"),"string"==typeof(n="function"==typeof this.table.options.printHeader?this.table.options.printHeader.call(this.table):this.table.options.printHeader)?l.innerHTML=n:l.appendChild(n),this.element.appendChild(l)),this.element.appendChild(u),this.table.options.printFooter&&(s.classList.add("tabulator-print-footer"),"string"==typeof(o="function"==typeof this.table.options.printFooter?this.table.options.printFooter.call(this.table):this.table.options.printFooter)?s.innerHTML=o:s.appendChild(o),this.element.appendChild(s)),document.body.classList.add("tabulator-print-fullscreen-hide"),document.body.appendChild(this.element),this.table.options.printFormatter&&this.table.options.printFormatter(this.element,u),window.print(),this.cleanup(),window.scrollTo(r,a),this.manualBlock=!1}}_t.moduleName="print";class Mt extends _{constructor(t){super(t),this.data=!1,this.blocked=!1,this.origFuncs={},this.currentVersion=0,this.registerTableOption("reactiveData",!1)}initialize(){this.table.options.reactiveData&&(this.subscribe("cell-value-save-before",this.block.bind(this,"cellsave")),this.subscribe("cell-value-save-after",this.unblock.bind(this,"cellsave")),this.subscribe("row-data-save-before",this.block.bind(this,"rowsave")),this.subscribe("row-data-save-after",this.unblock.bind(this,"rowsave")),this.subscribe("row-data-init-after",this.watchRow.bind(this)),this.subscribe("data-processing",this.watchData.bind(this)),this.subscribe("table-destroy",this.unwatchData.bind(this)))}watchData(t){var e,i=this;this.currentVersion++,e=this.currentVersion,this.unwatchData(),this.data=t,this.origFuncs.push=t.push,Object.defineProperty(this.data,"push",{enumerable:!1,configurable:!0,value:function(){var n,o=Array.from(arguments);return i.blocked||e!==i.currentVersion||(i.block("data-push"),o.forEach((t=>{i.table.rowManager.addRowActual(t,!1)})),n=i.origFuncs.push.apply(t,arguments),i.unblock("data-push")),n}}),this.origFuncs.unshift=t.unshift,Object.defineProperty(this.data,"unshift",{enumerable:!1,configurable:!0,value:function(){var n,o=Array.from(arguments);return i.blocked||e!==i.currentVersion||(i.block("data-unshift"),o.forEach((t=>{i.table.rowManager.addRowActual(t,!0)})),n=i.origFuncs.unshift.apply(t,arguments),i.unblock("data-unshift")),n}}),this.origFuncs.shift=t.shift,Object.defineProperty(this.data,"shift",{enumerable:!1,configurable:!0,value:function(){var n,o;return i.blocked||e!==i.currentVersion||(i.block("data-shift"),i.data.length&&(n=i.table.rowManager.getRowFromDataObject(i.data[0]))&&n.deleteActual(),o=i.origFuncs.shift.call(t),i.unblock("data-shift")),o}}),this.origFuncs.pop=t.pop,Object.defineProperty(this.data,"pop",{enumerable:!1,configurable:!0,value:function(){var n,o;return i.blocked||e!==i.currentVersion||(i.block("data-pop"),i.data.length&&(n=i.table.rowManager.getRowFromDataObject(i.data[i.data.length-1]))&&n.deleteActual(),o=i.origFuncs.pop.call(t),i.unblock("data-pop")),o}}),this.origFuncs.splice=t.splice,Object.defineProperty(this.data,"splice",{enumerable:!1,configurable:!0,value:function(){var n,o,r=Array.from(arguments),a=r[0]<0?t.length+r[0]:r[0],l=r[1],s=!!r[2]&&r.slice(2);if(!i.blocked&&e===i.currentVersion){if(i.block("data-splice"),s&&((n=!!t[a]&&i.table.rowManager.getRowFromDataObject(t[a]))?s.forEach((t=>{i.table.rowManager.addRowActual(t,!0,n,!0)})):(s=s.slice().reverse()).forEach((t=>{i.table.rowManager.addRowActual(t,!0,!1,!0)}))),0!==l){var u=t.slice(a,void 0===r[1]?r[1]:a+l);u.forEach(((t,e)=>{var n=i.table.rowManager.getRowFromDataObject(t);n&&n.deleteActual(e!==u.length-1)}))}(s||0!==l)&&i.table.rowManager.reRenderInPosition(),o=i.origFuncs.splice.apply(t,arguments),i.unblock("data-splice")}return o}})}unwatchData(){if(!1!==this.data)for(var t in this.origFuncs)Object.defineProperty(this.data,t,{enumerable:!0,configurable:!0,writable:!0,value:this.origFuncs.key})}watchRow(t){var e=t.getData();for(var i in e)this.watchKey(t,e,i);this.table.options.dataTree&&this.watchTreeChildren(t)}watchTreeChildren(t){var e=this,i=t.getData()[this.table.options.dataTreeChildField],n={};i&&(n.push=i.push,Object.defineProperty(i,"push",{enumerable:!1,configurable:!0,value:()=>{if(!e.blocked){e.block("tree-push");var o=n.push.apply(i,arguments);this.rebuildTree(t),e.unblock("tree-push")}return o}}),n.unshift=i.unshift,Object.defineProperty(i,"unshift",{enumerable:!1,configurable:!0,value:()=>{if(!e.blocked){e.block("tree-unshift");var o=n.unshift.apply(i,arguments);this.rebuildTree(t),e.unblock("tree-unshift")}return o}}),n.shift=i.shift,Object.defineProperty(i,"shift",{enumerable:!1,configurable:!0,value:()=>{if(!e.blocked){e.block("tree-shift");var o=n.shift.call(i);this.rebuildTree(t),e.unblock("tree-shift")}return o}}),n.pop=i.pop,Object.defineProperty(i,"pop",{enumerable:!1,configurable:!0,value:()=>{if(!e.blocked){e.block("tree-pop");var o=n.pop.call(i);this.rebuildTree(t),e.unblock("tree-pop")}return o}}),n.splice=i.splice,Object.defineProperty(i,"splice",{enumerable:!1,configurable:!0,value:()=>{if(!e.blocked){e.block("tree-splice");var o=n.splice.apply(i,arguments);this.rebuildTree(t),e.unblock("tree-splice")}return o}}))}rebuildTree(t){this.table.modules.dataTree.initializeRow(t),this.table.modules.dataTree.layoutRow(t),this.table.rowManager.refreshActiveData("tree",!1,!0)}watchKey(t,e,i){var n=this,o=Object.getOwnPropertyDescriptor(e,i),r=e[i],a=this.currentVersion;Object.defineProperty(e,i,{set:e=>{if(r=e,!n.blocked&&a===n.currentVersion){n.block("key");var l={};l[i]=e,t.updateData(l),n.unblock("key")}o.set&&o.set(e)},get:()=>(o.get&&o.get(),r)})}unwatchRow(t){var e=t.getData();for(var i in e)Object.defineProperty(e,i,{value:e[i]})}block(t){this.blocked||(this.blocked=t)}unblock(t){this.blocked===t&&(this.blocked=!1)}}Mt.moduleName="reactiveData";class zt extends _{constructor(t){super(t),this.startColumn=!1,this.startX=!1,this.startWidth=!1,this.latestX=!1,this.handle=null,this.initialNextColumn=null,this.nextColumn=null,this.initialized=!1,this.registerColumnOption("resizable",!0),this.registerTableOption("resizableColumnFit",!1)}initialize(){this.subscribe("column-rendered",this.layoutColumnHeader.bind(this))}initializeEventWatchers(){this.initialized||(this.subscribe("cell-rendered",this.layoutCellHandles.bind(this)),this.subscribe("cell-delete",this.deInitializeComponent.bind(this)),this.subscribe("cell-height",this.resizeHandle.bind(this)),this.subscribe("column-moved",this.columnLayoutUpdated.bind(this)),this.subscribe("column-hide",this.deInitializeColumn.bind(this)),this.subscribe("column-show",this.columnLayoutUpdated.bind(this)),this.subscribe("column-width",this.columnWidthUpdated.bind(this)),this.subscribe("column-delete",this.deInitializeComponent.bind(this)),this.subscribe("column-height",this.resizeHandle.bind(this)),this.initialized=!0)}layoutCellHandles(t){"row"===t.row.type&&(this.deInitializeComponent(t),this.initializeColumn("cell",t,t.column,t.element))}layoutColumnHeader(t){t.definition.resizable&&(this.initializeEventWatchers(),this.deInitializeComponent(t),this.initializeColumn("header",t,t,t.element))}columnLayoutUpdated(t){var e=t.prevColumn();this.reinitializeColumn(t),e&&this.reinitializeColumn(e)}columnWidthUpdated(t){t.modules.frozen&&(this.table.modules.frozenColumns.leftColumns.includes(t)?this.table.modules.frozenColumns.leftColumns.forEach((t=>{this.reinitializeColumn(t)})):this.table.modules.frozenColumns.rightColumns.includes(t)&&this.table.modules.frozenColumns.rightColumns.forEach((t=>{this.reinitializeColumn(t)})))}frozenColumnOffset(t){var e=!1;return t.modules.frozen&&(e=t.modules.frozen.marginValue,"left"===t.modules.frozen.position?e+=t.getWidth()-3:e&&(e-=3)),!1!==e&&e+"px"}reinitializeColumn(t){var e=this.frozenColumnOffset(t);t.cells.forEach((i=>{i.modules.resize&&i.modules.resize.handleEl&&(e&&(i.modules.resize.handleEl.style[t.modules.frozen.position]=e,i.modules.resize.handleEl.style["z-index"]=11),i.element.after(i.modules.resize.handleEl))})),t.modules.resize&&t.modules.resize.handleEl&&(e&&(t.modules.resize.handleEl.style[t.modules.frozen.position]=e),t.element.after(t.modules.resize.handleEl))}initializeColumn(t,e,i,n){var o=this,r=i.definition.resizable,a={},l=i.getLastColumn();if("header"===t&&(a={variableHeight:"textarea"==i.definition.formatter||i.definition.variableHeight}),(!0===r||r==t)&&this._checkResizability(l)){var s=document.createElement("span");s.className="tabulator-col-resize-handle",s.addEventListener("click",(function(t){t.stopPropagation()}));var u=function(t){o.startColumn=i,o.initialNextColumn=o.nextColumn=l.nextColumn(),o._mouseDown(t,l,s)};s.addEventListener("mousedown",u),s.addEventListener("touchstart",u,{passive:!0}),s.addEventListener("dblclick",(t=>{var e=l.getWidth();t.stopPropagation(),l.reinitializeWidth(!0),e!==l.getWidth()&&(o.dispatch("column-resized",l),o.table.externalEvents.dispatch("columnResized",l.getComponent()))})),i.modules.frozen&&(s.style.position="sticky",s.style[i.modules.frozen.position]=this.frozenColumnOffset(i)),a.handleEl=s,n.parentNode&&i.visible&&n.after(s)}e.modules.resize=a}deInitializeColumn(t){this.deInitializeComponent(t),t.cells.forEach((t=>{this.deInitializeComponent(t)}))}deInitializeComponent(t){var e;t.modules.resize&&(e=t.modules.resize.handleEl)&&e.parentElement&&e.parentElement.removeChild(e)}resizeHandle(t,e){t.modules.resize&&t.modules.resize.handleEl&&(t.modules.resize.handleEl.style.height=e)}_checkResizability(t){return t.definition.resizable}_mouseDown(t,e,i){var n=this;function o(t){var i,o,r=void 0===t.screenX?t.touches[0].screenX:t.screenX,a=r-n.startX,l=r-n.latestX;if(n.latestX=r,n.table.rtl&&(a=-a,l=-l),i=e.width==e.minWidth||e.width==e.maxWidth,e.setWidth(n.startWidth+a),o=e.width==e.minWidth||e.width==e.maxWidth,l<0&&(n.nextColumn=n.initialNextColumn),n.table.options.resizableColumnFit&&n.nextColumn&&(!i||!o)){let t=n.nextColumn.getWidth();l>0&&t<=n.nextColumn.minWidth&&(n.nextColumn=n.nextColumn.nextColumn()),n.nextColumn&&n.nextColumn.setWidth(n.nextColumn.getWidth()-l)}n.table.columnManager.rerenderColumns(!0),!n.table.browserSlow&&e.modules.resize&&e.modules.resize.variableHeight&&e.checkCellHeights()}function r(t){n.startColumn.modules.edit&&(n.startColumn.modules.edit.blocked=!1),n.table.browserSlow&&e.modules.resize&&e.modules.resize.variableHeight&&e.checkCellHeights(),document.body.removeEventListener("mouseup",r),document.body.removeEventListener("mousemove",o),i.removeEventListener("touchmove",o),i.removeEventListener("touchend",r),n.table.element.classList.remove("tabulator-block-select"),n.startWidth!==e.getWidth()&&(n.table.columnManager.verticalAlignHeaders(),n.dispatch("column-resized",e),n.table.externalEvents.dispatch("columnResized",e.getComponent()))}n.table.element.classList.add("tabulator-block-select"),t.stopPropagation(),n.startColumn.modules.edit&&(n.startColumn.modules.edit.blocked=!0),n.startX=void 0===t.screenX?t.touches[0].screenX:t.screenX,n.latestX=n.startX,n.startWidth=e.getWidth(),document.body.addEventListener("mousemove",o),document.body.addEventListener("mouseup",r),i.addEventListener("touchmove",o,{passive:!0}),i.addEventListener("touchend",r)}}zt.moduleName="resizeColumns";class Lt extends _{constructor(t){super(t),this.startColumn=!1,this.startY=!1,this.startHeight=!1,this.handle=null,this.prevHandle=null,this.registerTableOption("resizableRows",!1)}initialize(){this.table.options.resizableRows&&this.subscribe("row-layout-after",this.initializeRow.bind(this))}initializeRow(t){var e=this,i=t.getElement(),n=document.createElement("div");n.className="tabulator-row-resize-handle";var o=document.createElement("div");o.className="tabulator-row-resize-handle prev",n.addEventListener("click",(function(t){t.stopPropagation()}));var r=function(i){e.startRow=t,e._mouseDown(i,t,n)};n.addEventListener("mousedown",r),n.addEventListener("touchstart",r,{passive:!0}),o.addEventListener("click",(function(t){t.stopPropagation()}));var a=function(i){var n=e.table.rowManager.prevDisplayRow(t);n&&(e.startRow=n,e._mouseDown(i,n,o))};o.addEventListener("mousedown",a),o.addEventListener("touchstart",a,{passive:!0}),i.appendChild(n),i.appendChild(o)}_mouseDown(t,e,i){var n=this;function o(t){e.setHeight(n.startHeight+((void 0===t.screenY?t.touches[0].screenY:t.screenY)-n.startY))}function r(t){document.body.removeEventListener("mouseup",o),document.body.removeEventListener("mousemove",o),i.removeEventListener("touchmove",o),i.removeEventListener("touchend",r),n.table.element.classList.remove("tabulator-block-select"),n.dispatchExternal("rowResized",e.getComponent())}n.table.element.classList.add("tabulator-block-select"),t.stopPropagation(),n.startY=void 0===t.screenY?t.touches[0].screenY:t.screenY,n.startHeight=e.getHeight(),document.body.addEventListener("mousemove",o),document.body.addEventListener("mouseup",r),i.addEventListener("touchmove",o,{passive:!0}),i.addEventListener("touchend",r)}}Lt.moduleName="resizeRows";class St extends _{constructor(t){super(t),this.binding=!1,this.visibilityObserver=!1,this.resizeObserver=!1,this.containerObserver=!1,this.tableHeight=0,this.tableWidth=0,this.containerHeight=0,this.containerWidth=0,this.autoResize=!1,this.visible=!1,this.initialized=!1,this.initialRedraw=!1,this.registerTableOption("autoResize",!0)}initialize(){if(this.table.options.autoResize){var t,e=this.table;this.tableHeight=e.element.clientHeight,this.tableWidth=e.element.clientWidth,e.element.parentNode&&(this.containerHeight=e.element.parentNode.clientHeight,this.containerWidth=e.element.parentNode.clientWidth),"undefined"!=typeof IntersectionObserver&&"undefined"!=typeof ResizeObserver&&"virtual"===e.rowManager.getRenderMode()?(this.initializeVisibilityObserver(),this.autoResize=!0,this.resizeObserver=new ResizeObserver((t=>{if(!e.browserMobile||e.browserMobile&&!e.modules.edit.currentCell){var i=Math.floor(t[0].contentRect.height),n=Math.floor(t[0].contentRect.width);this.tableHeight==i&&this.tableWidth==n||(this.tableHeight=i,this.tableWidth=n,e.element.parentNode&&(this.containerHeight=e.element.parentNode.clientHeight,this.containerWidth=e.element.parentNode.clientWidth),this.redrawTable())}})),this.resizeObserver.observe(e.element),t=window.getComputedStyle(e.element),this.table.element.parentNode&&!this.table.rowManager.fixedHeight&&(t.getPropertyValue("max-height")||t.getPropertyValue("min-height"))&&(this.containerObserver=new ResizeObserver((t=>{if(!e.browserMobile||e.browserMobile&&!e.modules.edit.currentCell){var i=Math.floor(t[0].contentRect.height),n=Math.floor(t[0].contentRect.width);this.containerHeight==i&&this.containerWidth==n||(this.containerHeight=i,this.containerWidth=n,this.tableHeight=e.element.clientHeight,this.tableWidth=e.element.clientWidth),this.redrawTable()}})),this.containerObserver.observe(this.table.element.parentNode)),this.subscribe("table-resize",this.tableResized.bind(this))):(this.binding=function(){(!e.browserMobile||e.browserMobile&&!e.modules.edit.currentCell)&&(e.columnManager.rerenderColumns(!0),e.redraw())},window.addEventListener("resize",this.binding)),this.subscribe("table-destroy",this.clearBindings.bind(this))}}initializeVisibilityObserver(){this.visibilityObserver=new IntersectionObserver((t=>{this.visible=t[0].isIntersecting,this.initialized?this.visible&&(this.redrawTable(this.initialRedraw),this.initialRedraw=!1):(this.initialized=!0,this.initialRedraw=!this.visible)})),this.visibilityObserver.observe(this.table.element)}redrawTable(t){this.initialized&&this.visible&&(this.table.columnManager.rerenderColumns(!0),this.table.redraw(t))}tableResized(){this.table.rowManager.redraw()}clearBindings(){this.binding&&window.removeEventListener("resize",this.binding),this.resizeObserver&&this.resizeObserver.unobserve(this.table.element),this.visibilityObserver&&this.visibilityObserver.unobserve(this.table.element),this.containerObserver&&this.containerObserver.unobserve(this.table.element.parentNode)}}St.moduleName="resizeTable";class Dt extends _{constructor(t){super(t),this.columns=[],this.hiddenColumns=[],this.mode="",this.index=0,this.collapseFormatter=[],this.collapseStartOpen=!0,this.collapseHandleColumn=!1,this.registerTableOption("responsiveLayout",!1),this.registerTableOption("responsiveLayoutCollapseStartOpen",!0),this.registerTableOption("responsiveLayoutCollapseUseFormatters",!0),this.registerTableOption("responsiveLayoutCollapseFormatter",!1),this.registerColumnOption("responsive")}initialize(){this.table.options.responsiveLayout&&(this.subscribe("column-layout",this.initializeColumn.bind(this)),this.subscribe("column-show",this.updateColumnVisibility.bind(this)),this.subscribe("column-hide",this.updateColumnVisibility.bind(this)),this.subscribe("columns-loaded",this.initializeResponsivity.bind(this)),this.subscribe("column-moved",this.initializeResponsivity.bind(this)),this.subscribe("column-add",this.initializeResponsivity.bind(this)),this.subscribe("column-delete",this.initializeResponsivity.bind(this)),this.subscribe("table-redrawing",this.tableRedraw.bind(this)),"collapse"===this.table.options.responsiveLayout&&(this.subscribe("row-data-changed",this.generateCollapsedRowContent.bind(this)),this.subscribe("row-init",this.initializeRow.bind(this)),this.subscribe("row-layout",this.layoutRow.bind(this))))}tableRedraw(t){-1===["fitColumns","fitDataStretch"].indexOf(this.layoutMode())&&(t||this.update())}initializeResponsivity(){var t=[];this.mode=this.table.options.responsiveLayout,this.collapseFormatter=this.table.options.responsiveLayoutCollapseFormatter||this.formatCollapsedData,this.collapseStartOpen=this.table.options.responsiveLayoutCollapseStartOpen,this.hiddenColumns=[],this.table.columnManager.columnsByIndex.forEach(((e,i)=>{e.modules.responsive&&e.modules.responsive.order&&e.modules.responsive.visible&&(e.modules.responsive.index=i,t.push(e),e.visible||"collapse"!==this.mode||this.hiddenColumns.push(e))})),t=(t=t.reverse()).sort(((t,e)=>e.modules.responsive.order-t.modules.responsive.order||e.modules.responsive.index-t.modules.responsive.index)),this.columns=t,"collapse"===this.mode&&this.generateCollapsedContent();for(let t of this.table.columnManager.columnsByIndex)if("responsiveCollapse"==t.definition.formatter){this.collapseHandleColumn=t;break}this.collapseHandleColumn&&(this.hiddenColumns.length?this.collapseHandleColumn.show():this.collapseHandleColumn.hide())}initializeColumn(t){var e=t.getDefinition();t.modules.responsive={order:void 0===e.responsive?1:e.responsive,visible:!1!==e.visible}}initializeRow(t){var e;"calc"!==t.type&&((e=document.createElement("div")).classList.add("tabulator-responsive-collapse"),t.modules.responsiveLayout={element:e,open:this.collapseStartOpen},this.collapseStartOpen||(e.style.display="none"))}layoutRow(t){var e=t.getElement();t.modules.responsiveLayout&&(e.appendChild(t.modules.responsiveLayout.element),this.generateCollapsedRowContent(t))}updateColumnVisibility(t,e){!e&&t.modules.responsive&&(t.modules.responsive.visible=t.visible,this.initializeResponsivity())}hideColumn(t){var e=this.hiddenColumns.length;t.hide(!1,!0),"collapse"===this.mode&&(this.hiddenColumns.unshift(t),this.generateCollapsedContent(),this.collapseHandleColumn&&!e&&this.collapseHandleColumn.show())}showColumn(t){var e;t.show(!1,!0),t.setWidth(t.getWidth()),"collapse"===this.mode&&((e=this.hiddenColumns.indexOf(t))>-1&&this.hiddenColumns.splice(e,1),this.generateCollapsedContent(),this.collapseHandleColumn&&!this.hiddenColumns.length&&this.collapseHandleColumn.hide())}update(){for(var t=!0;t;){let e="fitColumns"==this.table.modules.layout.getMode()?this.table.columnManager.getFlexBaseWidth():this.table.columnManager.getWidth(),i=(this.table.options.headerVisible?this.table.columnManager.element.clientWidth:this.table.element.clientWidth)-e;if(i<0){let e=this.columns[this.index];e?(this.hideColumn(e),this.index++):t=!1}else{let e=this.columns[this.index-1];e&&i>0&&i>=e.getWidth()?(this.showColumn(e),this.index--):t=!1}this.table.rowManager.activeRowsCount||this.table.rowManager.renderEmptyScroll()}}generateCollapsedContent(){this.table.rowManager.getDisplayRows().forEach((t=>{this.generateCollapsedRowContent(t)}))}generateCollapsedRowContent(t){var e,i;if(t.modules.responsiveLayout){for(e=t.modules.responsiveLayout.element;e.firstChild;)e.removeChild(e.firstChild);(i=this.collapseFormatter(this.generateCollapsedRowData(t)))&&e.appendChild(i)}}generateCollapsedRowData(t){var e,i=t.getData(),n=[];return this.hiddenColumns.forEach((o=>{var r=o.getFieldValue(i);if(o.definition.title&&o.field)if(o.modules.format&&this.table.options.responsiveLayoutCollapseUseFormatters){function a(t){t()}e={value:!1,data:{},getValue:function(){return r},getData:function(){return i},getType:function(){return"cell"},getElement:function(){return document.createElement("div")},getRow:function(){return t.getComponent()},getColumn:function(){return o.getComponent()},getTable:()=>this.table},n.push({field:o.field,title:o.definition.title,value:o.modules.format.formatter.call(this.table.modules.format,e,o.modules.format.params,a)})}else n.push({field:o.field,title:o.definition.title,value:r})})),n}formatCollapsedData(t){var e=document.createElement("table");return t.forEach((function(t){var i,n=document.createElement("tr"),o=document.createElement("td"),r=document.createElement("td"),a=document.createElement("strong");o.appendChild(a),this.langBind("columns|"+t.field,(function(e){a.innerHTML=e||t.title})),t.value instanceof Node?((i=document.createElement("div")).appendChild(t.value),r.appendChild(i)):r.innerHTML=t.value,n.appendChild(o),n.appendChild(r),e.appendChild(n)}),this),Object.keys(t).length?e:""}}Dt.moduleName="responsiveLayout";class Pt extends _{constructor(t){super(t),this.selecting=!1,this.lastClickedRow=!1,this.selectPrev=[],this.selectedRows=[],this.headerCheckboxElement=null,this.registerTableOption("selectable","highlight"),this.registerTableOption("selectableRangeMode","drag"),this.registerTableOption("selectableRollingSelection",!0),this.registerTableOption("selectablePersistence",!0),this.registerTableOption("selectableCheck",(function(t,e){return!0})),this.registerTableFunction("selectRow",this.selectRows.bind(this)),this.registerTableFunction("deselectRow",this.deselectRows.bind(this)),this.registerTableFunction("toggleSelectRow",this.toggleRow.bind(this)),this.registerTableFunction("getSelectedRows",this.getSelectedRows.bind(this)),this.registerTableFunction("getSelectedData",this.getSelectedData.bind(this)),this.registerComponentFunction("row","select",this.selectRows.bind(this)),this.registerComponentFunction("row","deselect",this.deselectRows.bind(this)),this.registerComponentFunction("row","toggleSelect",this.toggleRow.bind(this)),this.registerComponentFunction("row","isSelected",this.isRowSelected.bind(this))}initialize(){!1!==this.table.options.selectable&&(this.subscribe("row-init",this.initializeRow.bind(this)),this.subscribe("row-deleting",this.rowDeleted.bind(this)),this.subscribe("rows-wipe",this.clearSelectionData.bind(this)),this.subscribe("rows-retrieve",this.rowRetrieve.bind(this)),this.table.options.selectable&&!this.table.options.selectablePersistence&&this.subscribe("data-refreshing",this.deselectRows.bind(this)))}rowRetrieve(t,e){return"selected"===t?this.selectedRows:e}rowDeleted(t){this._deselectRow(t,!0)}clearSelectionData(t){var e=this.selectedRows.length;this.selecting=!1,this.lastClickedRow=!1,this.selectPrev=[],this.selectedRows=[],e&&!0!==t&&this._rowSelectionChanged()}initializeRow(t){var e=this,i=t.getElement(),n=function(){setTimeout((function(){e.selecting=!1}),50),document.body.removeEventListener("mouseup",n)};t.modules.select={selected:!1},e.checkRowSelectability(t)?(i.classList.add("tabulator-selectable"),i.classList.remove("tabulator-unselectable"),e.table.options.selectable&&"highlight"!=e.table.options.selectable&&("click"===e.table.options.selectableRangeMode?i.addEventListener("click",this.handleComplexRowClick.bind(this,t)):(i.addEventListener("click",(function(i){e.table.modExists("edit")&&e.table.modules.edit.getCurrentCell()||e.table._clearSelection(),e.selecting||e.toggleRow(t)})),i.addEventListener("mousedown",(function(i){if(i.shiftKey)return e.table._clearSelection(),e.selecting=!0,e.selectPrev=[],document.body.addEventListener("mouseup",n),document.body.addEventListener("keyup",n),e.toggleRow(t),!1})),i.addEventListener("mouseenter",(function(i){e.selecting&&(e.table._clearSelection(),e.toggleRow(t),e.selectPrev[1]==t&&e.toggleRow(e.selectPrev[0]))})),i.addEventListener("mouseout",(function(i){e.selecting&&(e.table._clearSelection(),e.selectPrev.unshift(t))}))))):(i.classList.add("tabulator-unselectable"),i.classList.remove("tabulator-selectable"))}handleComplexRowClick(t,e){if(e.shiftKey){this.table._clearSelection(),this.lastClickedRow=this.lastClickedRow||t;var i=this.table.rowManager.getDisplayRowIndex(this.lastClickedRow),n=this.table.rowManager.getDisplayRowIndex(t),o=i<=n?i:n,r=i>=n?i:n,a=this.table.rowManager.getDisplayRows().slice(0).splice(o,r-o+1);e.ctrlKey||e.metaKey?(a.forEach((e=>{e!==this.lastClickedRow&&(!0===this.table.options.selectable||this.isRowSelected(t)||this.selectedRows.length<this.table.options.selectable)&&this.toggleRow(e)})),this.lastClickedRow=t):(this.deselectRows(void 0,!0),!0!==this.table.options.selectable&&a.length>this.table.options.selectable&&(a=a.slice(0,this.table.options.selectable)),this.selectRows(a)),this.table._clearSelection()}else e.ctrlKey||e.metaKey?(this.toggleRow(t),this.lastClickedRow=t):(this.deselectRows(void 0,!0),this.selectRows(t),this.lastClickedRow=t)}checkRowSelectability(t){return!(!t||"row"!==t.type)&&this.table.options.selectableCheck.call(this.table,t.getComponent())}toggleRow(t){this.checkRowSelectability(t)&&(t.modules.select&&t.modules.select.selected?this._deselectRow(t):this._selectRow(t))}selectRows(t){var e,i,n=[];switch(typeof t){case"undefined":e=this.table.rowManager.rows;break;case"string":(e=this.table.rowManager.findRow(t))||(e=this.table.rowManager.getRows(t));break;default:e=t}Array.isArray(e)?e.length&&(e.forEach((t=>{(i=this._selectRow(t,!0,!0))&&n.push(i)})),this._rowSelectionChanged(!1,n)):e&&this._selectRow(e,!1,!0)}_selectRow(t,e,i){if(!isNaN(this.table.options.selectable)&&!0!==this.table.options.selectable&&!i&&this.selectedRows.length>=this.table.options.selectable){if(!this.table.options.selectableRollingSelection)return!1;this._deselectRow(this.selectedRows[0])}var n=this.table.rowManager.findRow(t);if(n){if(-1==this.selectedRows.indexOf(n))return n.getElement().classList.add("tabulator-selected"),n.modules.select||(n.modules.select={}),n.modules.select.selected=!0,n.modules.select.checkboxEl&&(n.modules.select.checkboxEl.checked=!0),this.selectedRows.push(n),this.table.options.dataTreeSelectPropagate&&this.childRowSelection(n,!0),this.dispatchExternal("rowSelected",n.getComponent()),this._rowSelectionChanged(e,n),n}else e||console.warn("Selection Error - No such row found, ignoring selection:"+t)}isRowSelected(t){return-1!==this.selectedRows.indexOf(t)}deselectRows(t,e){var i,n,o=[];switch(typeof t){case"undefined":i=Object.assign([],this.selectedRows);break;case"string":(i=this.table.rowManager.findRow(t))||(i=this.table.rowManager.getRows(t));break;default:i=t}Array.isArray(i)?i.length&&(i.forEach((t=>{(n=this._deselectRow(t,!0,!0))&&o.push(n)})),this._rowSelectionChanged(e,[],o)):i&&this._deselectRow(i,e,!0)}_deselectRow(t,e){var i,n,o=this,r=o.table.rowManager.findRow(t);if(r){if((i=o.selectedRows.findIndex((function(t){return t==r})))>-1)return(n=r.getElement())&&n.classList.remove("tabulator-selected"),r.modules.select||(r.modules.select={}),r.modules.select.selected=!1,r.modules.select.checkboxEl&&(r.modules.select.checkboxEl.checked=!1),o.selectedRows.splice(i,1),this.table.options.dataTreeSelectPropagate&&this.childRowSelection(r,!1),this.dispatchExternal("rowDeselected",r.getComponent()),o._rowSelectionChanged(e,void 0,r),r}else e||console.warn("Deselection Error - No such row found, ignoring selection:"+t)}getSelectedData(){var t=[];return this.selectedRows.forEach((function(e){t.push(e.getData())})),t}getSelectedRows(){var t=[];return this.selectedRows.forEach((function(e){t.push(e.getComponent())})),t}_rowSelectionChanged(t,e=[],i=[]){this.headerCheckboxElement&&(0===this.selectedRows.length?(this.headerCheckboxElement.checked=!1,this.headerCheckboxElement.indeterminate=!1):this.table.rowManager.rows.length===this.selectedRows.length?(this.headerCheckboxElement.checked=!0,this.headerCheckboxElement.indeterminate=!1):(this.headerCheckboxElement.indeterminate=!0,this.headerCheckboxElement.checked=!1)),t||(Array.isArray(e)||(e=[e]),e=e.map((t=>t.getComponent())),Array.isArray(i)||(i=[i]),i=i.map((t=>t.getComponent())),this.dispatchExternal("rowSelectionChanged",this.getSelectedData(),this.getSelectedRows(),e,i))}registerRowSelectCheckbox(t,e){t._row.modules.select||(t._row.modules.select={}),t._row.modules.select.checkboxEl=e}registerHeaderSelectCheckbox(t){this.headerCheckboxElement=t}childRowSelection(t,e){var i=this.table.modules.dataTree.getChildren(t,!0);if(e)for(let t of i)this._selectRow(t,!0);else for(let t of i)this._deselectRow(t,!0)}}function Ft(t,e,i,n,o,r,a){var l=window.DateTime||luxon.DateTime,s=a.format||"dd/MM/yyyy HH:mm:ss",u=a.alignEmptyValues,h=0;if(void 0!==l){if(l.isDateTime(t)||(t="iso"===s?l.fromISO(String(t)):l.fromFormat(String(t),s)),l.isDateTime(e)||(e="iso"===s?l.fromISO(String(e)):l.fromFormat(String(e),s)),t.isValid){if(e.isValid)return t-e;h=1}else h=e.isValid?-1:0;return("top"===u&&"desc"===r||"bottom"===u&&"asc"===r)&&(h*=-1),h}console.error("Sort Error - 'datetime' sorter is dependant on luxon.js")}Pt.moduleName="selectRow";var It={number:function(t,e,i,n,o,r,a){var l=a.alignEmptyValues,s=a.decimalSeparator,u=a.thousandSeparator,h=0;if(t=String(t),e=String(e),u&&(t=t.split(u).join(""),e=e.split(u).join("")),s&&(t=t.split(s).join("."),e=e.split(s).join(".")),t=parseFloat(t),e=parseFloat(e),isNaN(t))h=isNaN(e)?0:-1;else{if(!isNaN(e))return t-e;h=1}return("top"===l&&"desc"===r||"bottom"===l&&"asc"===r)&&(h*=-1),h},string:function(t,e,i,n,o,r,a){var l,s=a.alignEmptyValues,u=0;if(t){if(e){switch(typeof a.locale){case"boolean":a.locale&&(l=this.langLocale());break;case"string":l=a.locale}return String(t).toLowerCase().localeCompare(String(e).toLowerCase(),l)}u=1}else u=e?-1:0;return("top"===s&&"desc"===r||"bottom"===s&&"asc"===r)&&(u*=-1),u},date:function(t,e,i,n,o,r,a){return a.format||(a.format="dd/MM/yyyy"),Ft.call(this,t,e,i,n,o,r,a)},time:function(t,e,i,n,o,r,a){return a.format||(a.format="HH:mm"),Ft.call(this,t,e,i,n,o,r,a)},datetime:Ft,boolean:function(t,e,i,n,o,r,a){return(!0===t||"true"===t||"True"===t||1===t?1:0)-(!0===e||"true"===e||"True"===e||1===e?1:0)},array:function(t,e,i,n,o,r,a){var l=a.type||"length",s=a.alignEmptyValues,u=0;function h(t){var e;switch(l){case"length":e=t.length;break;case"sum":e=t.reduce((function(t,e){return t+e}));break;case"max":e=Math.max.apply(null,t);break;case"min":e=Math.min.apply(null,t);break;case"avg":e=t.reduce((function(t,e){return t+e}))/t.length}return e}if(Array.isArray(t)){if(Array.isArray(e))return h(e)-h(t);u=1}else u=Array.isArray(e)?-1:0;return("top"===s&&"desc"===r||"bottom"===s&&"asc"===r)&&(u*=-1),u},exists:function(t,e,i,n,o,r,a){return(void 0===t?0:1)-(void 0===e?0:1)},alphanum:function(t,e,i,n,o,r,a){var l,s,u,h,c,d=0,p=/(\d+)|(\D+)/g,b=/\d/,m=a.alignEmptyValues,g=0;if(t||0===t){if(e||0===e){if(isFinite(t)&&isFinite(e))return t-e;if((l=String(t).toLowerCase())===(s=String(e).toLowerCase()))return 0;if(!b.test(l)||!b.test(s))return l>s?1:-1;for(l=l.match(p),s=s.match(p),c=l.length>s.length?s.length:l.length;d<c;)if((u=l[d])!==(h=s[d++]))return isFinite(u)&&isFinite(h)?("0"===u.charAt(0)&&(u="."+u),"0"===h.charAt(0)&&(h="."+h),u-h):u>h?1:-1;return l.length>s.length}g=1}else g=e||0===e?-1:0;return("top"===m&&"desc"===r||"bottom"===m&&"asc"===r)&&(g*=-1),g}};class Ht extends _{constructor(t){super(t),this.sortList=[],this.changed=!1,this.registerTableOption("sortMode","local"),this.registerTableOption("initialSort",!1),this.registerTableOption("columnHeaderSortMulti",!0),this.registerTableOption("sortOrderReverse",!1),this.registerTableOption("headerSortElement","<div class='tabulator-arrow'></div>"),this.registerTableOption("headerSortClickElement","header"),this.registerColumnOption("sorter"),this.registerColumnOption("sorterParams"),this.registerColumnOption("headerSort",!0),this.registerColumnOption("headerSortStartingDir"),this.registerColumnOption("headerSortTristate")}initialize(){this.subscribe("column-layout",this.initializeColumn.bind(this)),this.subscribe("table-built",this.tableBuilt.bind(this)),this.registerDataHandler(this.sort.bind(this),20),this.registerTableFunction("setSort",this.userSetSort.bind(this)),this.registerTableFunction("getSorters",this.getSort.bind(this)),this.registerTableFunction("clearSort",this.clearSort.bind(this)),"remote"===this.table.options.sortMode&&this.subscribe("data-params",this.remoteSortParams.bind(this))}tableBuilt(){this.table.options.initialSort&&this.setSort(this.table.options.initialSort)}remoteSortParams(t,e,i,n){var o=this.getSort();return o.forEach((t=>{delete t.column})),n.sort=o,n}userSetSort(t,e){this.setSort(t,e),this.refreshSort()}clearSort(){this.clear(),this.refreshSort()}initializeColumn(t){var e,i,n=!1;switch(typeof t.definition.sorter){case"string":Ht.sorters[t.definition.sorter]?n=Ht.sorters[t.definition.sorter]:console.warn("Sort Error - No such sorter found: ",t.definition.sorter);break;case"function":n=t.definition.sorter}if(t.modules.sort={sorter:n,dir:"none",params:t.definition.sorterParams||{},startingDir:t.definition.headerSortStartingDir||"asc",tristate:t.definition.headerSortTristate},!1!==t.definition.headerSort){switch((e=t.getElement()).classList.add("tabulator-sortable"),(i=document.createElement("div")).classList.add("tabulator-col-sorter"),"icon"===this.table.options.headerSortClickElement?i.classList.add("tabulator-col-sorter-element"):e.classList.add("tabulator-col-sorter-element"),this.table.options.headerSortElement){case"function":break;case"object":i.appendChild(this.table.options.headerSortElement);break;default:i.innerHTML=this.table.options.headerSortElement}t.titleHolderElement.appendChild(i),t.modules.sort.element=i,this.setColumnHeaderSortIcon(t,"none"),("icon"===this.table.options.headerSortClickElement?i:e).addEventListener("click",(e=>{var i="",n=[],o=!1;if(t.modules.sort){if(t.modules.sort.tristate)i="none"==t.modules.sort.dir?t.modules.sort.startingDir:t.modules.sort.dir==t.modules.sort.startingDir?"asc"==t.modules.sort.dir?"desc":"asc":"none";else switch(t.modules.sort.dir){case"asc":i="desc";break;case"desc":i="asc";break;default:i=t.modules.sort.startingDir}this.table.options.columnHeaderSortMulti&&(e.shiftKey||e.ctrlKey)?(o=(n=this.getSort()).findIndex((e=>e.field===t.getField())),o>-1?(n[o].dir=i,o=n.splice(o,1)[0],"none"!=i&&n.push(o)):"none"!=i&&n.push({column:t,dir:i}),this.setSort(n)):"none"==i?this.clear():this.setSort(t,i),this.refreshSort()}}))}}refreshSort(){"remote"===this.table.options.sortMode?this.reloadData(null,!1,!1):this.refreshData(!0)}hasChanged(){var t=this.changed;return this.changed=!1,t}getSort(){var t=[];return this.sortList.forEach((function(e){e.column&&t.push({column:e.column.getComponent(),field:e.column.getField(),dir:e.dir})})),t}setSort(t,e){var i=this,n=[];Array.isArray(t)||(t=[{column:t,dir:e}]),t.forEach((function(t){var e;(e=i.table.columnManager.findColumn(t.column))?(t.column=e,n.push(t),i.changed=!0):console.warn("Sort Warning - Sort field does not exist and is being ignored: ",t.column)})),i.sortList=n,this.dispatch("sort-changed")}clear(){this.setSort([])}findSorter(t){var e,i=this.table.rowManager.activeRows[0],n="string";if(i&&(i=i.getData(),t.getField()))switch(typeof(e=t.getFieldValue(i))){case"undefined":n="string";break;case"boolean":n="boolean";break;default:isNaN(e)||""===e?e.match(/((^[0-9]+[a-z]+)|(^[a-z]+[0-9]+))+$/i)&&(n="alphanum"):n="number"}return Ht.sorters[n]}sort(t){var e=this,i=this.table.options.sortOrderReverse?e.sortList.slice().reverse():e.sortList,n=[],o=[];return this.subscribedExternal("dataSorting")&&this.dispatchExternal("dataSorting",e.getSort()),e.clearColumnHeaders(),"remote"!==this.table.options.sortMode?(i.forEach((function(t,i){var o;t.column&&((o=t.column.modules.sort)&&(o.sorter||(o.sorter=e.findSorter(t.column)),t.params="function"==typeof o.params?o.params(t.column.getComponent(),t.dir):o.params,n.push(t)),e.setColumnHeader(t.column,t.dir))})),n.length&&e._sortItems(t,n)):i.forEach((function(t,i){e.setColumnHeader(t.column,t.dir)})),this.subscribedExternal("dataSorted")&&(t.forEach((t=>{o.push(t.getComponent())})),this.dispatchExternal("dataSorted",e.getSort(),o)),t}clearColumnHeaders(){this.table.columnManager.getRealColumns().forEach((t=>{t.modules.sort&&(t.modules.sort.dir="none",t.getElement().setAttribute("aria-sort","none"),this.setColumnHeaderSortIcon(t,"none"))}))}setColumnHeader(t,e){t.modules.sort.dir=e,t.getElement().setAttribute("aria-sort","asc"===e?"ascending":"descending"),this.setColumnHeaderSortIcon(t,e)}setColumnHeaderSortIcon(t,e){var i,n=t.modules.sort.element;if(t.definition.headerSort&&"function"==typeof this.table.options.headerSortElement){for(;n.firstChild;)n.removeChild(n.firstChild);"object"==typeof(i=this.table.options.headerSortElement.call(this.table,t.getComponent(),e))?n.appendChild(i):n.innerHTML=i}}_sortItems(t,e){var i=e.length-1;t.sort(((t,n)=>{for(var o,r=i;r>=0;r--){let i=e[r];if(0!==(o=this._sortRow(t,n,i.column,i.dir,i.params)))break}return o}))}_sortRow(t,e,i,n,o){var r,a,l="asc"==n?t:e,s="asc"==n?e:t;return t=void 0!==(t=i.getFieldValue(l.getData()))?t:"",e=void 0!==(e=i.getFieldValue(s.getData()))?e:"",r=l.getComponent(),a=s.getComponent(),i.modules.sort.sorter.call(this,t,e,r,a,i.getComponent(),n,o)}}Ht.moduleName="sort",Ht.sorters=It;class Ot extends _{constructor(t){super(t),this.tooltipSubscriber=null,this.headerSubscriber=null,this.timeout=null,this.popupInstance=null,this.registerTableOption("tooltipGenerationMode",void 0),this.registerTableOption("tooltipDelay",300),this.registerColumnOption("tooltip"),this.registerColumnOption("headerTooltip")}initialize(){this.deprecatedOptionsCheck(),this.subscribe("column-init",this.initializeColumn.bind(this))}deprecatedOptionsCheck(){this.deprecationCheckMsg("tooltipGenerationMode","This option is no longer needed as tooltips are always generated on hover now")}initializeColumn(t){t.definition.headerTooltip&&!this.headerSubscriber&&(this.headerSubscriber=!0,this.subscribe("column-mousemove",this.mousemoveCheck.bind(this,"headerTooltip")),this.subscribe("column-mouseout",this.mouseoutCheck.bind(this,"headerTooltip"))),t.definition.tooltip&&!this.tooltipSubscriber&&(this.tooltipSubscriber=!0,this.subscribe("cell-mousemove",this.mousemoveCheck.bind(this,"tooltip")),this.subscribe("cell-mouseout",this.mouseoutCheck.bind(this,"tooltip")))}mousemoveCheck(t,e,i){var n="tooltip"===t?i.column.definition.tooltip:i.definition.headerTooltip;n&&(this.clearPopup(),this.timeout=setTimeout(this.loadTooltip.bind(this,e,i,n),this.table.options.tooltipDelay))}mouseoutCheck(t,e,i){this.popupInstance||this.clearPopup()}clearPopup(t,e,i){clearTimeout(this.timeout),this.timeout=null,this.popupInstance&&this.popupInstance.hide()}loadTooltip(t,e,i){var n,o,r;"function"==typeof i&&(i=i(t,e.getComponent(),(function(t){o=t}))),i instanceof HTMLElement?n=i:(n=document.createElement("div"),!0===i&&(e instanceof W?i=e.value:e.definition.field?this.langBind("columns|"+e.definition.field,(t=>{n.innerHTML=i=t||e.definition.title})):i=e.definition.title),n.innerHTML=i),(i||0===i||!1===i)&&(n.classList.add("tabulator-tooltip"),n.addEventListener("mousemove",(t=>t.preventDefault())),this.popupInstance=this.popup(n),"function"==typeof o&&this.popupInstance.renderCallback(o),r=this.popupInstance.containerEventCoords(t),this.popupInstance.show(r.x+15,r.y+15).hideOnBlur((()=>{this.dispatchExternal("TooltipClosed",e.getComponent()),this.popupInstance=null})),this.dispatchExternal("TooltipOpened",e.getComponent()))}}Ot.moduleName="tooltip";var Wt={integer:function(t,e,i){return""===e||null==e||(e=Number(e),!isNaN(e)&&isFinite(e)&&Math.floor(e)===e)},float:function(t,e,i){return""===e||null==e||(e=Number(e),!isNaN(e)&&isFinite(e)&&e%1!=0)},numeric:function(t,e,i){return""===e||null==e||!isNaN(e)},string:function(t,e,i){return""===e||null==e||isNaN(e)},max:function(t,e,i){return""===e||null==e||parseFloat(e)<=i},min:function(t,e,i){return""===e||null==e||parseFloat(e)>=i},starts:function(t,e,i){return""===e||null==e||String(e).toLowerCase().startsWith(String(i).toLowerCase())},ends:function(t,e,i){return""===e||null==e||String(e).toLowerCase().endsWith(String(i).toLowerCase())},minLength:function(t,e,i){return""===e||null==e||String(e).length>=i},maxLength:function(t,e,i){return""===e||null==e||String(e).length<=i},in:function(t,e,i){return""===e||null==e||("string"==typeof i&&(i=i.split("|")),i.indexOf(e)>-1)},regex:function(t,e,i){return""===e||null==e||new RegExp(i).test(e)},unique:function(t,e,i){if(""===e||null==e)return!0;var n=!0,o=t.getData(),r=t.getColumn()._getSelf();return this.table.rowManager.rows.forEach((function(t){var i=t.getData();i!==o&&e==r.getFieldValue(i)&&(n=!1)})),n},required:function(t,e,i){return""!==e&&null!=e}};class jt extends _{constructor(t){super(t),this.invalidCells=[],this.registerTableOption("validationMode","blocking"),this.registerColumnOption("validator"),this.registerTableFunction("getInvalidCells",this.getInvalidCells.bind(this)),this.registerTableFunction("clearCellValidation",this.userClearCellValidation.bind(this)),this.registerTableFunction("validate",this.userValidate.bind(this)),this.registerComponentFunction("cell","isValid",this.cellIsValid.bind(this)),this.registerComponentFunction("cell","clearValidation",this.clearValidation.bind(this)),this.registerComponentFunction("cell","validate",this.cellValidate.bind(this)),this.registerComponentFunction("column","validate",this.columnValidate.bind(this)),this.registerComponentFunction("row","validate",this.rowValidate.bind(this))}initialize(){this.subscribe("cell-delete",this.clearValidation.bind(this)),this.subscribe("column-layout",this.initializeColumnCheck.bind(this)),this.subscribe("edit-success",this.editValidate.bind(this)),this.subscribe("edit-editor-clear",this.editorClear.bind(this)),this.subscribe("edit-edited-clear",this.editedClear.bind(this))}editValidate(t,e,i){var n="manual"===this.table.options.validationMode||this.validate(t.column.modules.validate,t,e);return!0!==n&&setTimeout((()=>{t.getElement().classList.add("tabulator-validation-fail"),this.dispatchExternal("validationFailed",t.getComponent(),e,n)})),n}editorClear(t,e){e&&t.column.modules.validate&&this.cellValidate(t),t.getElement().classList.remove("tabulator-validation-fail")}editedClear(t){t.modules.validate&&(t.modules.validate.invalid=!1)}cellIsValid(t){return t.modules.validate&&t.modules.validate.invalid||!0}cellValidate(t){return this.validate(t.column.modules.validate,t,t.getValue())}columnValidate(t){var e=[];return t.cells.forEach((t=>{!0!==this.cellValidate(t)&&e.push(t.getComponent())})),!e.length||e}rowValidate(t){var e=[];return t.cells.forEach((t=>{!0!==this.cellValidate(t)&&e.push(t.getComponent())})),!e.length||e}userClearCellValidation(t){t||(t=this.getInvalidCells()),Array.isArray(t)||(t=[t]),t.forEach((t=>{this.clearValidation(t._getSelf())}))}userValidate(t){var e=[];return this.table.rowManager.rows.forEach((t=>{var i=(t=t.getComponent()).validate();!0!==i&&(e=e.concat(i))})),!e.length||e}initializeColumnCheck(t){void 0!==t.definition.validator&&this.initializeColumn(t)}initializeColumn(t){var e,i=this,n=[];t.definition.validator&&(Array.isArray(t.definition.validator)?t.definition.validator.forEach((t=>{(e=i._extractValidator(t))&&n.push(e)})):(e=this._extractValidator(t.definition.validator))&&n.push(e),t.modules.validate=!!n.length&&n)}_extractValidator(t){var e,i,n;switch(typeof t){case"string":return(n=t.indexOf(":"))>-1?(e=t.substring(0,n),i=t.substring(n+1)):e=t,this._buildValidator(e,i);case"function":return this._buildValidator(t);case"object":return this._buildValidator(t.type,t.parameters)}}_buildValidator(t,e){var i="function"==typeof t?t:jt.validators[t];return i?{type:"function"==typeof t?"function":t,func:i,params:e}:(console.warn("Validator Setup Error - No matching validator found:",t),!1)}validate(t,e,i){var n=this,o=[],r=this.invalidCells.indexOf(e);return t&&t.forEach((t=>{t.func.call(n,e.getComponent(),i,t.params)||o.push({type:t.type,parameters:t.params})})),e.modules.validate||(e.modules.validate={}),o.length?(e.modules.validate.invalid=o,"manual"!==this.table.options.validationMode&&e.getElement().classList.add("tabulator-validation-fail"),-1==r&&this.invalidCells.push(e)):(e.modules.validate.invalid=!1,e.getElement().classList.remove("tabulator-validation-fail"),r>-1&&this.invalidCells.splice(r,1)),!o.length||o}getInvalidCells(){var t=[];return this.invalidCells.forEach((e=>{t.push(e.getComponent())})),t}clearValidation(t){var e;t.modules.validate&&t.modules.validate.invalid&&(t.getElement().classList.remove("tabulator-validation-fail"),t.modules.validate.invalid=!1,(e=this.invalidCells.indexOf(t))>-1&&this.invalidCells.splice(e,1))}}jt.moduleName="validate",jt.validators=Wt;var Vt=Object.freeze({__proto__:null,AccessorModule:M,AjaxModule:F,ClipboardModule:I,ColumnCalcsModule:X,DataTreeModule:Y,DownloadModule:J,EditModule:tt,ExportModule:nt,FilterModule:rt,FormatModule:lt,FrozenColumnsModule:st,FrozenRowsModule:ut,GroupRowsModule:dt,HistoryModule:pt,HtmlTableImportModule:bt,ImportModule:gt,InteractionModule:ft,KeybindingsModule:At,MenuModule:vt,MoveColumnsModule:wt,MoveRowsModule:Ct,MutatorModule:Et,PageModule:xt,PersistenceModule:Rt,PopupModule:Tt,PrintModule:_t,ReactiveDataModule:Mt,ResizeColumnsModule:zt,ResizeRowsModule:Lt,ResizeTableModule:St,ResponsiveLayoutModule:Dt,SelectRowModule:Pt,SortModule:Ht,TooltipModule:Ot,ValidateModule:jt});class Nt{constructor(t,e,i={}){this.table=t,this.msgType=e,this.registeredDefaults=Object.assign({},i)}register(t,e){this.registeredDefaults[t]=e}generate(t,e={}){var i=Object.assign({},this.registeredDefaults),n=this.table.options.debugInvalidOptions||!0===e.debugInvalidOptions;Object.assign(i,t);for(let t in e)i.hasOwnProperty(t)||(n&&console.warn("Invalid "+this.msgType+" option:",t),i[t]=e.key);for(let t in i)t in e?i[t]=e[t]:Array.isArray(i[t])?i[t]=Object.assign([],i[t]):"object"==typeof i[t]&&null!==i[t]?i[t]=Object.assign({},i[t]):void 0===i[t]&&delete i[t];return i}}class Gt extends k{constructor(t){super(t),this.elementVertical=t.rowManager.element,this.elementHorizontal=t.columnManager.element,this.tableElement=t.rowManager.tableElement,this.verticalFillMode="fit"}initialize(){}clearRows(){}clearColumns(){}reinitializeColumnWidths(t){}renderRows(){}renderColumns(){}rerenderRows(t){t&&t()}rerenderColumns(t,e){}renderRowCells(t){}rerenderRowCells(t,e){}scrollColumns(t,e){}scrollRows(t,e){}resize(){}scrollToRow(t){}scrollToRowNearestTop(t){}visibleRows(t){return[]}rows(){return this.table.rowManager.getDisplayRows()}styleRow(t,e){var i=t.getElement();e%2?(i.classList.add("tabulator-row-even"),i.classList.remove("tabulator-row-odd")):(i.classList.add("tabulator-row-odd"),i.classList.remove("tabulator-row-even"))}clear(){this.clearRows(),this.clearColumns()}render(){this.renderRows(),this.renderColumns()}rerender(t){this.rerenderRows(),this.rerenderColumns()}scrollToRowPosition(t,e,i){var n=this.rows().indexOf(t),o=t.getElement(),r=0;return new Promise(((a,l)=>{if(n>-1){if(void 0===i&&(i=this.table.options.scrollToRowIfVisible),!i&&R.elVisible(o)&&(r=R.elOffset(o).top-R.elOffset(this.elementVertical).top)>0&&r<this.elementVertical.clientHeight-o.offsetHeight)return a(),!1;switch(void 0===e&&(e=this.table.options.scrollToRowPosition),"nearest"===e&&(e=this.scrollToRowNearestTop(t)?"top":"bottom"),this.scrollToRow(t),e){case"middle":case"center":this.elementVertical.scrollHeight-this.elementVertical.scrollTop==this.elementVertical.clientHeight?this.elementVertical.scrollTop=this.elementVertical.scrollTop+(o.offsetTop-this.elementVertical.scrollTop)-(this.elementVertical.scrollHeight-o.offsetTop)/2:this.elementVertical.scrollTop=this.elementVertical.scrollTop-this.elementVertical.clientHeight/2;break;case"bottom":this.elementVertical.scrollHeight-this.elementVertical.scrollTop==this.elementVertical.clientHeight?this.elementVertical.scrollTop=this.elementVertical.scrollTop-(this.elementVertical.scrollHeight-o.offsetTop)+o.offsetHeight:this.elementVertical.scrollTop=this.elementVertical.scrollTop-this.elementVertical.clientHeight+o.offsetHeight;break;case"top":this.elementVertical.scrollTop=o.offsetTop}a()}else console.warn("Scroll Error - Row not visible"),l("Scroll Error - Row not visible")}))}}class Ut extends Gt{constructor(t){super(t)}renderRowCells(t,e){const i=document.createDocumentFragment();t.cells.forEach((t=>{i.appendChild(t.getElement())})),t.element.appendChild(i),e||t.cells.forEach((t=>{t.cellRendered()}))}reinitializeColumnWidths(t){t.forEach((function(t){t.reinitializeWidth()}))}}class qt extends Gt{constructor(t){super(t),this.leftCol=0,this.rightCol=0,this.scrollLeft=0,this.vDomScrollPosLeft=0,this.vDomScrollPosRight=0,this.vDomPadLeft=0,this.vDomPadRight=0,this.fitDataColAvg=0,this.windowBuffer=200,this.visibleRows=null,this.initialized=!1,this.isFitData=!1,this.columns=[]}initialize(){this.compatibilityCheck(),this.layoutCheck(),this.vertScrollListen()}compatibilityCheck(){"fitDataTable"==this.options("layout")&&console.warn("Horizontal Virtual DOM is not compatible with fitDataTable layout mode"),this.options("responsiveLayout")&&console.warn("Horizontal Virtual DOM is not compatible with responsive columns"),this.options("rtl")&&console.warn("Horizontal Virtual DOM is not currently compatible with RTL text direction")}layoutCheck(){this.isFitData=this.options("layout").startsWith("fitData")}vertScrollListen(){this.subscribe("scroll-vertical",this.clearVisRowCache.bind(this)),this.subscribe("data-refreshed",this.clearVisRowCache.bind(this))}clearVisRowCache(){this.visibleRows=null}renderColumns(t,e){this.dataChange()}scrollColumns(t,e){this.scrollLeft!=t&&(this.scrollLeft=t,this.scroll(t-(this.vDomScrollPosLeft+this.windowBuffer)))}calcWindowBuffer(){var t=this.elementVertical.clientWidth;this.table.columnManager.columnsByIndex.forEach((e=>{if(e.visible){var i=e.getWidth();i>t&&(t=i)}})),this.windowBuffer=2*t}rerenderColumns(t,e){var i={cols:this.columns,leftCol:this.leftCol,rightCol:this.rightCol},n=0;t&&!this.initialized||(this.clear(),this.calcWindowBuffer(),this.scrollLeft=this.elementVertical.scrollLeft,this.vDomScrollPosLeft=this.scrollLeft-this.windowBuffer,this.vDomScrollPosRight=this.scrollLeft+this.elementVertical.clientWidth+this.windowBuffer,this.table.columnManager.columnsByIndex.forEach((t=>{var e,i={};t.visible&&(t.modules.frozen||(e=t.getWidth(),i.leftPos=n,i.rightPos=n+e,i.width=e,this.isFitData&&(i.fitDataCheck=!t.modules.vdomHoz||t.modules.vdomHoz.fitDataCheck),n+e>this.vDomScrollPosLeft&&n<this.vDomScrollPosRight?(-1==this.leftCol&&(this.leftCol=this.columns.length,this.vDomPadLeft=n),this.rightCol=this.columns.length):-1!==this.leftCol&&(this.vDomPadRight+=e),this.columns.push(t),t.modules.vdomHoz=i,n+=e))})),this.tableElement.style.paddingLeft=this.vDomPadLeft+"px",this.tableElement.style.paddingRight=this.vDomPadRight+"px",this.initialized=!0,e||t&&!this.reinitChanged(i)||this.reinitializeRows(),this.elementVertical.scrollLeft=this.scrollLeft)}renderRowCells(t){if(this.initialized)this.initializeRow(t);else{const e=document.createDocumentFragment();t.cells.forEach((t=>{e.appendChild(t.getElement())})),t.element.appendChild(e),t.cells.forEach((t=>{t.cellRendered()}))}}rerenderRowCells(t,e){this.reinitializeRow(t,e)}reinitializeColumnWidths(t){for(let t=this.leftCol;t<=this.rightCol;t++)this.columns[t].reinitializeWidth()}deinitialize(){this.initialized=!1}clear(){this.columns=[],this.leftCol=-1,this.rightCol=0,this.vDomScrollPosLeft=0,this.vDomScrollPosRight=0,this.vDomPadLeft=0,this.vDomPadRight=0}dataChange(){var t,e,i=!1;if(this.isFitData){if(this.table.columnManager.columnsByIndex.forEach((t=>{!t.definition.width&&t.visible&&(i=!0)})),i&&this.table.rowManager.getDisplayRows().length&&(this.vDomScrollPosRight=this.scrollLeft+this.elementVertical.clientWidth+this.windowBuffer,t=this.chain("rows-sample",[1],[],(()=>this.table.rowManager.getDisplayRows()))[0])){e=t.getElement(),t.generateCells(),this.tableElement.appendChild(e);for(let i=0;i<t.cells.length;i++){let n=t.cells[i];e.appendChild(n.getElement()),n.column.reinitializeWidth()}e.parentNode.removeChild(e),this.rerenderColumns(!1,!0)}}else"fitColumns"===this.options("layout")&&(this.layoutRefresh(),this.rerenderColumns(!1,!0))}reinitChanged(t){var e=!0;return t.cols.length!==this.columns.length||t.leftCol!==this.leftCol||t.rightCol!==this.rightCol||(t.cols.forEach(((t,i)=>{t!==this.columns[i]&&(e=!1)})),!e)}reinitializeRows(){var t=this.getVisibleRows(),e=this.table.rowManager.getRows().filter((e=>!t.includes(e)));t.forEach((t=>{this.reinitializeRow(t,!0)})),e.forEach((t=>{t.deinitialize()}))}getVisibleRows(){return this.visibleRows||(this.visibleRows=this.table.rowManager.getVisibleRows()),this.visibleRows}scroll(t){this.vDomScrollPosLeft+=t,this.vDomScrollPosRight+=t,Math.abs(t)>this.windowBuffer/2?this.rerenderColumns():t>0?(this.addColRight(),this.removeColLeft()):(this.addColLeft(),this.removeColRight())}colPositionAdjust(t,e,i){for(let n=t;n<e;n++){let t=this.columns[n];t.modules.vdomHoz.leftPos+=i,t.modules.vdomHoz.rightPos+=i}}addColRight(){for(var t=!1,e=!0;e;){let i=this.columns[this.rightCol+1];i&&i.modules.vdomHoz.leftPos<=this.vDomScrollPosRight?(t=!0,this.getVisibleRows().forEach((t=>{if("group"!==t.type){var e=t.getCell(i);t.getElement().insertBefore(e.getElement(),t.getCell(this.columns[this.rightCol]).getElement().nextSibling),e.cellRendered()}})),this.fitDataColActualWidthCheck(i),this.rightCol++,this.getVisibleRows().forEach((t=>{"group"!==t.type&&(t.modules.vdomHoz.rightCol=this.rightCol)})),this.rightCol>=this.columns.length-1?this.vDomPadRight=0:this.vDomPadRight-=i.getWidth()):e=!1}t&&(this.tableElement.style.paddingRight=this.vDomPadRight+"px")}addColLeft(){for(var t=!1,e=!0;e;){let i=this.columns[this.leftCol-1];if(i)if(i.modules.vdomHoz.rightPos>=this.vDomScrollPosLeft){t=!0,this.getVisibleRows().forEach((t=>{if("group"!==t.type){var e=t.getCell(i);t.getElement().insertBefore(e.getElement(),t.getCell(this.columns[this.leftCol]).getElement()),e.cellRendered()}})),this.leftCol--,this.getVisibleRows().forEach((t=>{"group"!==t.type&&(t.modules.vdomHoz.leftCol=this.leftCol)})),this.leftCol<=0?this.vDomPadLeft=0:this.vDomPadLeft-=i.getWidth();let e=this.fitDataColActualWidthCheck(i);e&&(this.scrollLeft=this.elementVertical.scrollLeft=this.elementVertical.scrollLeft+e,this.vDomPadRight-=e)}else e=!1;else e=!1}t&&(this.tableElement.style.paddingLeft=this.vDomPadLeft+"px")}removeColRight(){for(var t=!1,e=!0;e;){let i=this.columns[this.rightCol];i&&i.modules.vdomHoz.leftPos>this.vDomScrollPosRight?(t=!0,this.getVisibleRows().forEach((t=>{if("group"!==t.type){var e=t.getCell(i);try{t.getElement().removeChild(e.getElement())}catch(t){console.warn("Could not removeColRight",t.message)}}})),this.vDomPadRight+=i.getWidth(),this.rightCol--,this.getVisibleRows().forEach((t=>{"group"!==t.type&&(t.modules.vdomHoz.rightCol=this.rightCol)}))):e=!1}t&&(this.tableElement.style.paddingRight=this.vDomPadRight+"px")}removeColLeft(){for(var t=!1,e=!0;e;){let i=this.columns[this.leftCol];i&&i.modules.vdomHoz.rightPos<this.vDomScrollPosLeft?(t=!0,this.getVisibleRows().forEach((t=>{if("group"!==t.type){var e=t.getCell(i);try{t.getElement().removeChild(e.getElement())}catch(t){console.warn("Could not removeColLeft",t.message)}}})),this.vDomPadLeft+=i.getWidth(),this.leftCol++,this.getVisibleRows().forEach((t=>{"group"!==t.type&&(t.modules.vdomHoz.leftCol=this.leftCol)}))):e=!1}t&&(this.tableElement.style.paddingLeft=this.vDomPadLeft+"px")}fitDataColActualWidthCheck(t){var e,i;return t.modules.vdomHoz.fitDataCheck&&(t.reinitializeWidth(),(i=(e=t.getWidth())-t.modules.vdomHoz.width)&&(t.modules.vdomHoz.rightPos+=i,t.modules.vdomHoz.width=e,this.colPositionAdjust(this.columns.indexOf(t)+1,this.columns.length,i)),t.modules.vdomHoz.fitDataCheck=!1),i}initializeRow(t){if("group"!==t.type){t.modules.vdomHoz={leftCol:this.leftCol,rightCol:this.rightCol},this.table.modules.frozenColumns&&this.table.modules.frozenColumns.leftColumns.forEach((e=>{this.appendCell(t,e)}));for(let e=this.leftCol;e<=this.rightCol;e++)this.appendCell(t,this.columns[e]);this.table.modules.frozenColumns&&this.table.modules.frozenColumns.rightColumns.forEach((e=>{this.appendCell(t,e)}))}}appendCell(t,e){if(e&&e.visible){let i=t.getCell(e);t.getElement().appendChild(i.getElement()),i.cellRendered()}}reinitializeRow(t,e){if("group"!==t.type&&(e||!t.modules.vdomHoz||t.modules.vdomHoz.leftCol!==this.leftCol||t.modules.vdomHoz.rightCol!==this.rightCol)){for(var i=t.getElement();i.firstChild;)i.removeChild(i.firstChild);this.initializeRow(t)}}}class Xt extends k{constructor(t){super(t),this.blockHozScrollEvent=!1,this.headersElement=null,this.contentsElement=null,this.element=null,this.columns=[],this.columnsByIndex=[],this.columnsByField={},this.scrollLeft=0,this.optionsList=new Nt(this.table,"column definition",V),this.redrawBlock=!1,this.redrawBlockUpdate=null,this.renderer=null}initialize(){this.initializeRenderer(),this.headersElement=this.createHeadersElement(),this.contentsElement=this.createHeaderContentsElement(),this.element=this.createHeaderElement(),this.contentsElement.insertBefore(this.headersElement,this.contentsElement.firstChild),this.element.insertBefore(this.contentsElement,this.element.firstChild),this.initializeScrollWheelWatcher(),this.subscribe("scroll-horizontal",this.scrollHorizontal.bind(this)),this.subscribe("scrollbar-vertical",this.padVerticalScrollbar.bind(this))}padVerticalScrollbar(t){this.table.rtl?this.headersElement.style.marginLeft=t+"px":this.headersElement.style.marginRight=t+"px"}initializeRenderer(){var t,e={virtual:qt,basic:Ut};(t="string"==typeof this.table.options.renderHorizontal?e[this.table.options.renderHorizontal]:this.table.options.renderHorizontal)?(this.renderer=new t(this.table,this.element,this.tableElement),this.renderer.initialize()):console.error("Unable to find matching renderer:",this.table.options.renderHorizontal)}createHeadersElement(){var t=document.createElement("div");return t.classList.add("tabulator-headers"),t.setAttribute("role","row"),t}createHeaderContentsElement(){var t=document.createElement("div");return t.classList.add("tabulator-header-contents"),t.setAttribute("role","rowgroup"),t}createHeaderElement(){var t=document.createElement("div");return t.classList.add("tabulator-header"),t.setAttribute("role","rowgroup"),this.table.options.headerVisible||t.classList.add("tabulator-header-hidden"),t}getElement(){return this.element}getContentsElement(){return this.contentsElement}getHeadersElement(){return this.headersElement}scrollHorizontal(t){this.contentsElement.scrollLeft=t,this.scrollLeft=t,this.renderer.scrollColumns(t)}initializeScrollWheelWatcher(){this.contentsElement.addEventListener("wheel",(t=>{var e;t.deltaX&&(e=this.contentsElement.scrollLeft+t.deltaX,this.table.rowManager.scrollHorizontal(e),this.table.columnManager.scrollHorizontal(e))}))}generateColumnsFromRowData(t){var e,i,n=[],o=this.table.options.autoColumnsDefinitions;if(t&&t.length){for(var r in e=t[0]){let t={field:r,title:r},o=e[r];switch(typeof o){case"undefined":i="string";break;case"boolean":i="boolean";break;case"object":i=Array.isArray(o)?"array":"string";break;default:i=isNaN(o)||""===o?o.match(/((^[0-9]+[a-z]+)|(^[a-z]+[0-9]+))+$/i)?"alphanum":"string":"number"}t.sorter=i,n.push(t)}if(o)switch(typeof o){case"function":this.table.options.columns=o.call(this.table,n);break;case"object":Array.isArray(o)?n.forEach((t=>{var e=o.find((e=>e.field===t.field));e&&Object.assign(t,e)})):n.forEach((t=>{o[t.field]&&Object.assign(t,o[t.field])})),this.table.options.columns=n}else this.table.options.columns=n;this.setColumns(this.table.options.columns)}}setColumns(t,e){for(;this.headersElement.firstChild;)this.headersElement.removeChild(this.headersElement.firstChild);this.columns=[],this.columnsByIndex=[],this.columnsByField={},this.dispatch("columns-loading"),t.forEach(((t,e)=>{this._addColumn(t)})),this._reIndexColumns(),this.dispatch("columns-loaded"),this.rerenderColumns(!1,!0),this.redraw(!0)}_addColumn(t,e,i){var n=new N(t,this),o=n.getElement(),r=i?this.findColumnIndex(i):i;if(i&&r>-1){var a=i.getTopColumn(),l=this.columns.indexOf(a),s=a.getElement();e?(this.columns.splice(l,0,n),s.parentNode.insertBefore(o,s)):(this.columns.splice(l+1,0,n),s.parentNode.insertBefore(o,s.nextSibling))}else e?(this.columns.unshift(n),this.headersElement.insertBefore(n.getElement(),this.headersElement.firstChild)):(this.columns.push(n),this.headersElement.appendChild(n.getElement()));return n.columnRendered(),n}registerColumnField(t){t.definition.field&&(this.columnsByField[t.definition.field]=t)}registerColumnPosition(t){this.columnsByIndex.push(t)}_reIndexColumns(){this.columnsByIndex=[],this.columns.forEach((function(t){t.reRegisterPosition()}))}verticalAlignHeaders(){var t=0;this.redrawBlock||(this.headersElement.style.height="",this.columns.forEach((t=>{t.clearVerticalAlign()})),this.columns.forEach((e=>{var i=e.getHeight();i>t&&(t=i)})),this.headersElement.style.height=t+"px",this.columns.forEach((e=>{e.verticalAlign(this.table.options.columnHeaderVertAlign,t)})),this.table.rowManager.adjustTableSize())}findColumn(t){var e;return"object"!=typeof t?this.columnsByField[t]||!1:t instanceof N?t:t instanceof j?t._getSelf()||!1:"undefined"!=typeof HTMLElement&&t instanceof HTMLElement&&(e=[],this.columns.forEach((t=>{e.push(t),e=e.concat(t.getColumns(!0))})),e.find((e=>e.element===t))||!1)}getColumnByField(t){return this.columnsByField[t]}getColumnsByFieldRoot(t){var e=[];return Object.keys(this.columnsByField).forEach((i=>{i.split(".")[0]===t&&e.push(this.columnsByField[i])})),e}getColumnByIndex(t){return this.columnsByIndex[t]}getFirstVisibleColumn(){var t=this.columnsByIndex.findIndex((t=>t.visible));return t>-1&&this.columnsByIndex[t]}getColumns(){return this.columns}findColumnIndex(t){return this.columnsByIndex.findIndex((e=>t===e))}getRealColumns(){return this.columnsByIndex}traverse(t){this.columnsByIndex.forEach(((e,i)=>{t(e,i)}))}getDefinitions(t){var e=[];return this.columnsByIndex.forEach((i=>{(!t||t&&i.visible)&&e.push(i.getDefinition())})),e}getDefinitionTree(){var t=[];return this.columns.forEach((e=>{t.push(e.getDefinition(!0))})),t}getComponents(t){var e=[];return(t?this.columns:this.columnsByIndex).forEach((t=>{e.push(t.getComponent())})),e}getWidth(){var t=0;return this.columnsByIndex.forEach((e=>{e.visible&&(t+=e.getWidth())})),t}moveColumn(t,e,i){e.element.parentNode.insertBefore(t.element,e.element),i&&e.element.parentNode.insertBefore(e.element,t.element),this.moveColumnActual(t,e,i),this.verticalAlignHeaders(),this.table.rowManager.reinitialize()}moveColumnActual(t,e,i){t.parent.isGroup?this._moveColumnInArray(t.parent.columns,t,e,i):this._moveColumnInArray(this.columns,t,e,i),this._moveColumnInArray(this.columnsByIndex,t,e,i,!0),this.rerenderColumns(!0),this.dispatch("column-moved",t,e,i),this.subscribedExternal("columnMoved")&&this.dispatchExternal("columnMoved",t.getComponent(),this.table.columnManager.getComponents())}_moveColumnInArray(t,e,i,n,o){var r,a=t.indexOf(e);a>-1&&(t.splice(a,1),(r=t.indexOf(i))>-1?n&&(r+=1):r=a,t.splice(r,0,e),o&&(this.chain("column-moving-rows",[e,i,n],null,[])||[]).concat(this.table.rowManager.rows).forEach((function(t){if(t.cells.length){var e=t.cells.splice(a,1)[0];t.cells.splice(r,0,e)}})))}scrollToColumn(t,e,i){var n=0,o=t.getLeftOffset(),r=0,a=t.getElement();return new Promise(((l,s)=>{if(void 0===e&&(e=this.table.options.scrollToColumnPosition),void 0===i&&(i=this.table.options.scrollToColumnIfVisible),t.visible){switch(e){case"middle":case"center":r=-this.element.clientWidth/2;break;case"right":r=a.clientWidth-this.headersElement.clientWidth}if(!i&&o>0&&o+a.offsetWidth<this.element.clientWidth)return!1;n=o+r,n=Math.max(Math.min(n,this.table.rowManager.element.scrollWidth-this.table.rowManager.element.clientWidth),0),this.table.rowManager.scrollHorizontal(n),this.scrollHorizontal(n),l()}else console.warn("Scroll Error - Column not visible"),s("Scroll Error - Column not visible")}))}generateCells(t){var e=[];return this.columnsByIndex.forEach((i=>{e.push(i.generateCell(t))})),e}getFlexBaseWidth(){var t=this.table.element.clientWidth,e=0;return this.table.rowManager.element.scrollHeight>this.table.rowManager.element.clientHeight&&(t-=this.table.rowManager.element.offsetWidth-this.table.rowManager.element.clientWidth),this.columnsByIndex.forEach((function(i){var n,o,r;i.visible&&(n=i.definition.width||0,o=parseInt(i.minWidth),r="string"==typeof n?n.indexOf("%")>-1?t/100*parseInt(n):parseInt(n):n,e+=r>o?r:o)})),e}addColumn(t,e,i){return new Promise(((n,o)=>{var r=this._addColumn(t,e,i);this._reIndexColumns(),this.dispatch("column-add",t,e,i),"fitColumns"!=this.layoutMode()&&r.reinitializeWidth(),this.redraw(!0),this.table.rowManager.reinitialize(),this.rerenderColumns(),n(r)}))}deregisterColumn(t){var e,i=t.getField();i&&delete this.columnsByField[i],(e=this.columnsByIndex.indexOf(t))>-1&&this.columnsByIndex.splice(e,1),(e=this.columns.indexOf(t))>-1&&this.columns.splice(e,1),this.verticalAlignHeaders(),this.redraw()}rerenderColumns(t,e){this.redrawBlock?(!1===t||!0===t&&null===this.redrawBlockUpdate)&&(this.redrawBlockUpdate=t):this.renderer.rerenderColumns(t,e)}blockRedraw(){this.redrawBlock=!0,this.redrawBlockUpdate=null}restoreRedraw(){this.redrawBlock=!1,this.verticalAlignHeaders(),this.renderer.rerenderColumns(this.redrawBlockUpdate)}redraw(t){R.elVisible(this.element)&&this.verticalAlignHeaders(),t&&(this.table.rowManager.resetScroll(),this.table.rowManager.reinitialize()),this.confirm("table-redrawing",t)||this.layoutRefresh(t),this.dispatch("table-redraw",t),this.table.footerManager.redraw()}}class Yt extends Gt{constructor(t){super(t),this.verticalFillMode="fill",this.scrollTop=0,this.scrollLeft=0,this.scrollTop=0,this.scrollLeft=0}clearRows(){for(var t=this.tableElement;t.firstChild;)t.removeChild(t.firstChild);t.scrollTop=0,t.scrollLeft=0,t.style.minWidth="",t.style.minHeight="",t.style.display="",t.style.visibility=""}renderRows(){var t=this.tableElement,e=!0,i=document.createDocumentFragment(),n=this.rows();n.forEach(((t,n)=>{this.styleRow(t,n),t.initialize(!1,!0),"group"!==t.type&&(e=!1),i.appendChild(t.getElement())})),t.appendChild(i),n.forEach((t=>{t.rendered(),t.heightInitialized||t.calcHeight(!0)})),n.forEach((t=>{t.heightInitialized||t.setCellHeight()})),t.style.minWidth=e?this.table.columnManager.getWidth()+"px":""}rerenderRows(t){this.clearRows(),t&&t(),this.renderRows()}scrollToRowNearestTop(t){var e=R.elOffset(t.getElement()).top;return!(Math.abs(this.elementVertical.scrollTop-e)>Math.abs(this.elementVertical.scrollTop+this.elementVertical.clientHeight-e))}scrollToRow(t){var e=t.getElement();this.elementVertical.scrollTop=R.elOffset(e).top-R.elOffset(this.elementVertical).top+this.elementVertical.scrollTop}visibleRows(t){return this.rows()}}class Kt extends Gt{constructor(t){super(t),this.verticalFillMode="fill",this.scrollTop=0,this.scrollLeft=0,this.vDomRowHeight=20,this.vDomTop=0,this.vDomBottom=0,this.vDomScrollPosTop=0,this.vDomScrollPosBottom=0,this.vDomTopPad=0,this.vDomBottomPad=0,this.vDomMaxRenderChain=90,this.vDomWindowBuffer=0,this.vDomWindowMinTotalRows=20,this.vDomWindowMinMarginRows=5,this.vDomTopNewRows=[],this.vDomBottomNewRows=[]}clearRows(){for(var t=this.tableElement;t.firstChild;)t.removeChild(t.firstChild);t.style.paddingTop="",t.style.paddingBottom="",t.style.minHeight="",t.style.display="",t.style.visibility="",this.elementVertical.scrollTop=0,this.elementVertical.scrollLeft=0,this.scrollTop=0,this.scrollLeft=0,this.vDomTop=0,this.vDomBottom=0,this.vDomTopPad=0,this.vDomBottomPad=0,this.vDomScrollPosTop=0,this.vDomScrollPosBottom=0}renderRows(){this._virtualRenderFill()}rerenderRows(t){for(var e=this.elementVertical.scrollTop,i=!1,n=!1,o=this.table.rowManager.scrollLeft,r=this.rows(),a=this.vDomTop;a<=this.vDomBottom;a++)if(r[a]){var l=e-r[a].getElement().offsetTop;if(!(!1===n||Math.abs(l)<n))break;n=l,i=a}r.forEach((t=>{t.deinitializeHeight()})),t&&t(),this.rows().length?this._virtualRenderFill(!1===i?this.rows.length-1:i,!0,n||0):(this.clear(),this.table.rowManager.tableEmpty()),this.scrollColumns(o)}scrollColumns(t){this.table.rowManager.scrollHorizontal(t)}scrollRows(t,e){var i=t-this.vDomScrollPosTop,n=t-this.vDomScrollPosBottom,o=2*this.vDomWindowBuffer,r=this.rows();if(this.scrollTop=t,-i>o||n>o){var a=this.table.rowManager.scrollLeft;this._virtualRenderFill(Math.floor(this.elementVertical.scrollTop/this.elementVertical.scrollHeight*r.length)),this.scrollColumns(a)}else e?(i<0&&this._addTopRow(r,-i),n<0&&(this.vDomScrollHeight-this.scrollTop>this.vDomWindowBuffer?this._removeBottomRow(r,-n):this.vDomScrollPosBottom=this.scrollTop)):(n>=0&&this._addBottomRow(r,n),i>=0&&(this.scrollTop>this.vDomWindowBuffer?this._removeTopRow(r,i):this.vDomScrollPosTop=this.scrollTop))}resize(){this.vDomWindowBuffer=this.table.options.renderVerticalBuffer||this.elementVertical.clientHeight}scrollToRowNearestTop(t){var e=this.rows().indexOf(t);return!(Math.abs(this.vDomTop-e)>Math.abs(this.vDomBottom-e))}scrollToRow(t){var e=this.rows().indexOf(t);e>-1&&this._virtualRenderFill(e,!0)}visibleRows(t){var e=this.elementVertical.scrollTop,i=this.elementVertical.clientHeight+e,n=!1,o=0,r=0,a=this.rows();if(t)o=this.vDomTop,r=this.vDomBottom;else for(var l=this.vDomTop;l<=this.vDomBottom;l++)if(a[l])if(n){if(!(i-a[l].getElement().offsetTop>=0))break;r=l}else if(e-a[l].getElement().offsetTop>=0)o=l;else{if(n=!0,!(i-a[l].getElement().offsetTop>=0))break;r=l}return a.slice(o,r+1)}_virtualRenderFill(t,e,i){var n,o,r=this.tableElement,a=this.elementVertical,l=0,s=0,u=0,h=0,c=0,d=0,p=this.rows(),b=p.length,m=0,g=[],f=0,A=0,v=this.table.rowManager.fixedHeight,w=this.elementVertical.clientHeight,C=this.table.options.rowHeight,E=!0;if(i=i||0,t=t||0){for(;r.firstChild;)r.removeChild(r.firstChild);(h=(b-t+1)*this.vDomRowHeight)<w&&(t-=Math.ceil((w-h)/this.vDomRowHeight))<0&&(t=0),t-=l=Math.min(Math.max(Math.floor(this.vDomWindowBuffer/this.vDomRowHeight),this.vDomWindowMinMarginRows),t)}else this.clear();if(b&&R.elVisible(this.elementVertical)){for(this.vDomTop=t,this.vDomBottom=t-1,v||this.table.options.maxHeight?(C&&(A=w/C+this.vDomWindowBuffer/C),A=Math.max(this.vDomWindowMinTotalRows,Math.ceil(A))):A=b;(A==b||s<=w+this.vDomWindowBuffer||f<this.vDomWindowMinTotalRows)&&this.vDomBottom<b-1;){for(g=[],o=document.createDocumentFragment(),d=0;d<A&&this.vDomBottom<b-1;)n=p[m=this.vDomBottom+1],this.styleRow(n,m),n.initialize(!1,!0),n.heightInitialized||this.table.options.rowHeight||n.clearCellHeight(),o.appendChild(n.getElement()),g.push(n),this.vDomBottom++,d++;if(!g.length)break;r.appendChild(o),g.forEach((t=>{t.rendered(),t.heightInitialized||t.calcHeight(!0)})),g.forEach((t=>{t.heightInitialized||t.setCellHeight()})),g.forEach((t=>{u=t.getHeight(),f<l?c+=u:s+=u,u>this.vDomWindowBuffer&&(this.vDomWindowBuffer=2*u),f++})),E=this.table.rowManager.adjustTableSize(),w=this.elementVertical.clientHeight,E&&(v||this.table.options.maxHeight)&&(C=s/f,A=Math.max(this.vDomWindowMinTotalRows,Math.ceil(w/C+this.vDomWindowBuffer/C)))}t?(this.vDomTopPad=e?this.vDomRowHeight*this.vDomTop+i:this.scrollTop-c,this.vDomBottomPad=this.vDomBottom==b-1?0:Math.max(this.vDomScrollHeight-this.vDomTopPad-s-c,0)):(this.vDomTopPad=0,this.vDomRowHeight=Math.floor((s+c)/f),this.vDomBottomPad=this.vDomRowHeight*(b-this.vDomBottom-1),this.vDomScrollHeight=c+s+this.vDomBottomPad-w),r.style.paddingTop=this.vDomTopPad+"px",r.style.paddingBottom=this.vDomBottomPad+"px",e&&(this.scrollTop=this.vDomTopPad+c+i-(this.elementVertical.scrollWidth>this.elementVertical.clientWidth?this.elementVertical.offsetHeight-w:0)),this.scrollTop=Math.min(this.scrollTop,this.elementVertical.scrollHeight-w),this.elementVertical.scrollWidth>this.elementVertical.clientWidth&&e&&(this.scrollTop+=this.elementVertical.offsetHeight-w),this.vDomScrollPosTop=this.scrollTop,this.vDomScrollPosBottom=this.scrollTop,a.scrollTop=this.scrollTop,this.dispatch("render-virtual-fill")}}_addTopRow(t,e){for(var i=this.tableElement,n=[],o=0,r=this.vDomTop-1,a=0,l=!0;l;)if(this.vDomTop){let s,u,h=t[r];h&&a<this.vDomMaxRenderChain?(s=h.getHeight()||this.vDomRowHeight,u=h.initialized,e>=s?(this.styleRow(h,r),i.insertBefore(h.getElement(),i.firstChild),h.initialized&&h.heightInitialized||n.push(h),h.initialize(),u||(s=h.getElement().offsetHeight,s>this.vDomWindowBuffer&&(this.vDomWindowBuffer=2*s)),e-=s,o+=s,this.vDomTop--,r--,a++):l=!1):l=!1}else l=!1;for(let t of n)t.clearCellHeight();this._quickNormalizeRowHeight(n),o&&(this.vDomTopPad-=o,this.vDomTopPad<0&&(this.vDomTopPad=r*this.vDomRowHeight),r<1&&(this.vDomTopPad=0),i.style.paddingTop=this.vDomTopPad+"px",this.vDomScrollPosTop-=o)}_removeTopRow(t,e){for(var i=[],n=0,o=0,r=!0;r;){let a,l=t[this.vDomTop];l&&o<this.vDomMaxRenderChain?(a=l.getHeight()||this.vDomRowHeight,e>=a?(this.vDomTop++,e-=a,n+=a,i.push(l),o++):r=!1):r=!1}for(let t of i){let e=t.getElement();e.parentNode&&e.parentNode.removeChild(e)}n&&(this.vDomTopPad+=n,this.tableElement.style.paddingTop=this.vDomTopPad+"px",this.vDomScrollPosTop+=this.vDomTop?n:n+this.vDomWindowBuffer)}_addBottomRow(t,e){for(var i=this.tableElement,n=[],o=0,r=this.vDomBottom+1,a=0,l=!0;l;){let s,u,h=t[r];h&&a<this.vDomMaxRenderChain?(s=h.getHeight()||this.vDomRowHeight,u=h.initialized,e>=s?(this.styleRow(h,r),i.appendChild(h.getElement()),h.initialized&&h.heightInitialized||n.push(h),h.initialize(),u||(s=h.getElement().offsetHeight,s>this.vDomWindowBuffer&&(this.vDomWindowBuffer=2*s)),e-=s,o+=s,this.vDomBottom++,r++,a++):l=!1):l=!1}for(let t of n)t.clearCellHeight();this._quickNormalizeRowHeight(n),o&&(this.vDomBottomPad-=o,(this.vDomBottomPad<0||r==t.length-1)&&(this.vDomBottomPad=0),i.style.paddingBottom=this.vDomBottomPad+"px",this.vDomScrollPosBottom+=o)}_removeBottomRow(t,e){for(var i=[],n=0,o=0,r=!0;r;){let a,l=t[this.vDomBottom];l&&o<this.vDomMaxRenderChain?(a=l.getHeight()||this.vDomRowHeight,e>=a?(this.vDomBottom--,e-=a,n+=a,i.push(l),o++):r=!1):r=!1}for(let t of i){let e=t.getElement();e.parentNode&&e.parentNode.removeChild(e)}n&&(this.vDomBottomPad+=n,this.vDomBottomPad<0&&(this.vDomBottomPad=0),this.tableElement.style.paddingBottom=this.vDomBottomPad+"px",this.vDomScrollPosBottom-=n)}_quickNormalizeRowHeight(t){for(let e of t)e.calcHeight();for(let e of t)e.setCellHeight()}}class Jt extends k{constructor(t){super(t),this.element=this.createHolderElement(),this.tableElement=this.createTableElement(),this.heightFixer=this.createTableElement(),this.placeholder=null,this.placeholderContents=null,this.firstRender=!1,this.renderMode="virtual",this.fixedHeight=!1,this.rows=[],this.activeRowsPipeline=[],this.activeRows=[],this.activeRowsCount=0,this.displayRows=[],this.displayRowsCount=0,this.scrollTop=0,this.scrollLeft=0,this.redrawBlock=!1,this.redrawBlockRestoreConfig=!1,this.redrawBlockRenderInPosition=!1,this.dataPipeline=[],this.displayPipeline=[],this.scrollbarWidth=0,this.renderer=null}createHolderElement(){var t=document.createElement("div");return t.classList.add("tabulator-tableholder"),t.setAttribute("tabindex",0),t}createTableElement(){var t=document.createElement("div");return t.classList.add("tabulator-table"),t.setAttribute("role","rowgroup"),t}initializePlaceholder(){var t=this.table.options.placeholder;if("function"==typeof t&&(t=t.call(this.table)),t=this.chain("placeholder",[t],t,t)||t){let e=document.createElement("div");if(e.classList.add("tabulator-placeholder"),"string"==typeof t){let i=document.createElement("div");i.classList.add("tabulator-placeholder-contents"),i.innerHTML=t,e.appendChild(i),this.placeholderContents=i}else"undefined"!=typeof HTMLElement&&t instanceof HTMLElement?(e.appendChild(t),this.placeholderContents=t):(console.warn("Invalid placeholder provided, must be string or HTML Element",t),this.el=null);this.placeholder=e}}getElement(){return this.element}getTableElement(){return this.tableElement}initialize(){this.initializePlaceholder(),this.initializeRenderer(),this.element.appendChild(this.tableElement),this.firstRender=!0,this.element.addEventListener("scroll",(()=>{var t=this.element.scrollLeft,e=this.scrollLeft>t,i=this.element.scrollTop,n=this.scrollTop>i;this.scrollLeft!=t&&(this.scrollLeft=t,this.dispatch("scroll-horizontal",t,e),this.dispatchExternal("scrollHorizontal",t,e),this._positionPlaceholder()),this.scrollTop!=i&&(this.scrollTop=i,this.renderer.scrollRows(i,n),this.dispatch("scroll-vertical",i,n),this.dispatchExternal("scrollVertical",i,n))}))}findRow(t){return"object"!=typeof t?void 0!==t&&(this.rows.find((e=>e.data[this.table.options.index]==t))||!1):t instanceof U?t:t instanceof G?t._getSelf()||!1:"undefined"!=typeof HTMLElement&&t instanceof HTMLElement&&this.rows.find((e=>e.getElement()===t))||!1}getRowFromDataObject(t){return this.rows.find((e=>e.data===t))||!1}getRowFromPosition(t){return this.getDisplayRows().find((e=>e.getPosition()===t&&e.isDisplayed()))}scrollToRow(t,e,i){return this.renderer.scrollToRowPosition(t,e,i)}setData(t,e,i){return new Promise(((n,o)=>{e&&this.getDisplayRows().length?this.table.options.pagination?this._setDataActual(t,!0):this.reRenderInPosition((()=>{this._setDataActual(t)})):(this.table.options.autoColumns&&i&&this.table.initialized&&this.table.columnManager.generateColumnsFromRowData(t),this.resetScroll(),this._setDataActual(t)),n()}))}_setDataActual(t,e){this.dispatchExternal("dataProcessing",t),this._wipeElements(),Array.isArray(t)?(this.dispatch("data-processing",t),t.forEach(((t,e)=>{if(t&&"object"==typeof t){var i=new U(t,this);this.rows.push(i)}else console.warn("Data Loading Warning - Invalid row data detected and ignored, expecting object but received:",t)})),this.refreshActiveData(!1,!1,e),this.dispatch("data-processed",t),this.dispatchExternal("dataProcessed",t)):console.error("Data Loading Error - Unable to process data due to invalid data type \nExpecting: array \nReceived: ",typeof t,"\nData:     ",t)}_wipeElements(){this.dispatch("rows-wipe"),this.destroy(),this.adjustTableSize(),this.dispatch("rows-wiped")}destroy(){this.rows.forEach((t=>{t.wipe()})),this.rows=[],this.activeRows=[],this.activeRowsPipeline=[],this.activeRowsCount=0,this.displayRows=[],this.displayRowsCount=0}deleteRow(t,e){var i=this.rows.indexOf(t),n=this.activeRows.indexOf(t);n>-1&&this.activeRows.splice(n,1),i>-1&&this.rows.splice(i,1),this.setActiveRows(this.activeRows),this.displayRowIterator((e=>{var i=e.indexOf(t);i>-1&&e.splice(i,1)})),e||this.reRenderInPosition(),this.regenerateRowPositions(),this.dispatchExternal("rowDeleted",t.getComponent()),this.displayRowsCount||this.tableEmpty(),this.subscribedExternal("dataChanged")&&this.dispatchExternal("dataChanged",this.getData())}addRow(t,e,i,n){return this.addRowActual(t,e,i,n)}addRows(t,e,i,n){var o=[];return new Promise(((r,a)=>{e=this.findAddRowPos(e),Array.isArray(t)||(t=[t]),(void 0===i&&e||void 0!==i&&!e)&&t.reverse(),t.forEach(((t,n)=>{var r=this.addRow(t,e,i,!0);o.push(r),this.dispatch("row-added",r,t,e,i)})),this.refreshActiveData(!!n&&"displayPipeline",!1,!0),this.regenerateRowPositions(),o.length&&this._clearPlaceholder(),r(o)}))}findAddRowPos(t){return void 0===t&&(t=this.table.options.addRowPos),"pos"===t&&(t=!0),"bottom"===t&&(t=!1),t}addRowActual(t,e,i,n){var o,r,a=t instanceof U?t:new U(t||{},this),l=this.findAddRowPos(e),s=-1;return i||(r=this.chain("row-adding-position",[a,l],null,{index:i,top:l}),i=r.index,l=r.top),void 0!==i&&(i=this.findRow(i)),(i=this.chain("row-adding-index",[a,i,l],null,i))&&(s=this.rows.indexOf(i)),i&&s>-1?(o=this.activeRows.indexOf(i),this.displayRowIterator((function(t){var e=t.indexOf(i);e>-1&&t.splice(l?e:e+1,0,a)})),o>-1&&this.activeRows.splice(l?o:o+1,0,a),this.rows.splice(l?s:s+1,0,a)):l?(this.displayRowIterator((function(t){t.unshift(a)})),this.activeRows.unshift(a),this.rows.unshift(a)):(this.displayRowIterator((function(t){t.push(a)})),this.activeRows.push(a),this.rows.push(a)),this.setActiveRows(this.activeRows),this.dispatchExternal("rowAdded",a.getComponent()),this.subscribedExternal("dataChanged")&&this.dispatchExternal("dataChanged",this.table.rowManager.getData()),n||this.reRenderInPosition(),a}moveRow(t,e,i){this.dispatch("row-move",t,e,i),this.moveRowActual(t,e,i),this.regenerateRowPositions(),this.dispatch("row-moved",t,e,i),this.dispatchExternal("rowMoved",t.getComponent())}moveRowActual(t,e,i){this.moveRowInArray(this.rows,t,e,i),this.moveRowInArray(this.activeRows,t,e,i),this.displayRowIterator((n=>{this.moveRowInArray(n,t,e,i)})),this.dispatch("row-moving",t,e,i)}moveRowInArray(t,e,i,n){var o,r,a;if(e!==i&&((o=t.indexOf(e))>-1&&(t.splice(o,1),(r=t.indexOf(i))>-1?n?t.splice(r+1,0,e):t.splice(r,0,e):t.splice(o,0,e)),t===this.getDisplayRows())){a=r>o?r:o+1;for(let e=o<r?o:r;e<=a;e++)t[e]&&this.styleRow(t[e],e)}}clearData(){this.setData([])}getRowIndex(t){return this.findRowIndex(t,this.rows)}getDisplayRowIndex(t){var e=this.getDisplayRows().indexOf(t);return e>-1&&e}nextDisplayRow(t,e){var i=this.getDisplayRowIndex(t),n=!1;return!1!==i&&i<this.displayRowsCount-1&&(n=this.getDisplayRows()[i+1]),!n||n instanceof U&&"row"==n.type?n:this.nextDisplayRow(n,e)}prevDisplayRow(t,e){var i=this.getDisplayRowIndex(t),n=!1;return i&&(n=this.getDisplayRows()[i-1]),!e||!n||n instanceof U&&"row"==n.type?n:this.prevDisplayRow(n,e)}findRowIndex(t,e){var i;return!!((t=this.findRow(t))&&(i=e.indexOf(t))>-1)&&i}getData(t,e){var i=[];return this.getRows(t).forEach((function(t){"row"==t.type&&i.push(t.getData(e||"data"))})),i}getComponents(t){var e=[];return this.getRows(t).forEach((function(t){e.push(t.getComponent())})),e}getDataCount(t){return this.getRows(t).length}scrollHorizontal(t){this.scrollLeft=t,this.element.scrollLeft=t,this.dispatch("scroll-horizontal",t)}registerDataPipelineHandler(t,e){void 0!==e?(this.dataPipeline.push({handler:t,priority:e}),this.dataPipeline.sort(((t,e)=>t.priority-e.priority))):console.error("Data pipeline handlers must have a priority in order to be registered")}registerDisplayPipelineHandler(t,e){void 0!==e?(this.displayPipeline.push({handler:t,priority:e}),this.displayPipeline.sort(((t,e)=>t.priority-e.priority))):console.error("Display pipeline handlers must have a priority in order to be registered")}refreshActiveData(t,e,i){var n=this.table,o="",r=0,a=["all","dataPipeline","display","displayPipeline","end"];if(!this.table.destroyed){if("function"==typeof t)if((r=this.dataPipeline.findIndex((e=>e.handler===t)))>-1)o="dataPipeline",e&&(r==this.dataPipeline.length-1?o="display":r++);else{if(!((r=this.displayPipeline.findIndex((e=>e.handler===t)))>-1))return void console.error("Unable to refresh data, invalid handler provided",t);o="displayPipeline",e&&(r==this.displayPipeline.length-1?o="end":r++)}else o=t||"all",r=0;if(this.redrawBlock)return void((!this.redrawBlockRestoreConfig||this.redrawBlockRestoreConfig&&(this.redrawBlockRestoreConfig.stage===o&&r<this.redrawBlockRestoreConfig.index||a.indexOf(o)<a.indexOf(this.redrawBlockRestoreConfig.stage)))&&(this.redrawBlockRestoreConfig={handler:t,skipStage:e,renderInPosition:i,stage:o,index:r}));R.elVisible(this.element)?i?this.reRenderInPosition(this.refreshPipelines.bind(this,t,o,r,i)):(this.refreshPipelines(t,o,r,i),t||this.table.columnManager.renderer.renderColumns(),this.renderTable(),n.options.layoutColumnsOnNewData&&this.table.columnManager.redraw(!0)):this.refreshPipelines(t,o,r,i),this.dispatch("data-refreshed")}}refreshPipelines(t,e,i,n){switch(this.dispatch("data-refreshing"),t||(this.activeRowsPipeline[0]=this.rows.slice(0)),e){case"all":case"dataPipeline":for(let t=i;t<this.dataPipeline.length;t++){let e=this.dataPipeline[t].handler(this.activeRowsPipeline[t].slice(0));this.activeRowsPipeline[t+1]=e||this.activeRowsPipeline[t].slice(0)}this.setActiveRows(this.activeRowsPipeline[this.dataPipeline.length]);case"display":i=0,this.resetDisplayRows();case"displayPipeline":for(let t=i;t<this.displayPipeline.length;t++){let e=this.displayPipeline[t].handler((t?this.getDisplayRows(t-1):this.activeRows).slice(0),n);this.setDisplayRows(e||this.getDisplayRows(t-1).slice(0),t)}case"end":this.regenerateRowPositions()}this.getDisplayRows().length&&this._clearPlaceholder()}regenerateRowPositions(){var t=this.getDisplayRows(),e=1;t.forEach((t=>{"row"===t.type&&(t.setPosition(e),e++)}))}setActiveRows(t){this.activeRows=this.activeRows=Object.assign([],t),this.activeRowsCount=this.activeRows.length}resetDisplayRows(){this.displayRows=[],this.displayRows.push(this.activeRows.slice(0)),this.displayRowsCount=this.displayRows[0].length}setDisplayRows(t,e){this.displayRows[e]=t,e==this.displayRows.length-1&&(this.displayRowsCount=this.displayRows[this.displayRows.length-1].length)}getDisplayRows(t){return void 0===t?this.displayRows.length?this.displayRows[this.displayRows.length-1]:[]:this.displayRows[t]||[]}getVisibleRows(t,e){var i=Object.assign([],this.renderer.visibleRows(!e));return t&&(i=this.chain("rows-visible",[e],i,i)),i}displayRowIterator(t){this.activeRowsPipeline.forEach(t),this.displayRows.forEach(t),this.displayRowsCount=this.displayRows[this.displayRows.length-1].length}getRows(t){var e=[];switch(t){case"active":e=this.activeRows;break;case"display":e=this.table.rowManager.getDisplayRows();break;case"visible":e=this.getVisibleRows(!1,!0);break;default:e=this.chain("rows-retrieve",t,null,this.rows)||this.rows}return e}reRenderInPosition(t){this.redrawBlock?t?t():this.redrawBlockRenderInPosition=!0:(this.dispatchExternal("renderStarted"),this.renderer.rerenderRows(t),this.fixedHeight||this.adjustTableSize(),this.scrollBarCheck(),this.dispatchExternal("renderComplete"))}scrollBarCheck(){var t=0;this.element.scrollHeight>this.element.clientHeight&&(t=this.element.offsetWidth-this.element.clientWidth),t!==this.scrollbarWidth&&(this.scrollbarWidth=t,this.dispatch("scrollbar-vertical",t))}initializeRenderer(){var t,e={virtual:Kt,basic:Yt};(t="string"==typeof this.table.options.renderVertical?e[this.table.options.renderVertical]:this.table.options.renderVertical)?(this.renderMode=this.table.options.renderVertical,this.renderer=new t(this.table,this.element,this.tableElement),this.renderer.initialize(),!this.table.element.clientHeight&&!this.table.options.height||this.table.options.minHeight&&this.table.options.maxHeight?this.fixedHeight=!1:this.fixedHeight=!0):console.error("Unable to find matching renderer:",this.table.options.renderVertical)}getRenderMode(){return this.renderMode}renderTable(){this.dispatchExternal("renderStarted"),this.element.scrollTop=0,this._clearTable(),this.displayRowsCount?(this.renderer.renderRows(),this.firstRender&&(this.firstRender=!1,this.fixedHeight||this.adjustTableSize(),this.layoutRefresh(!0))):this.renderEmptyScroll(),this.fixedHeight||this.adjustTableSize(),this.dispatch("table-layout"),this.displayRowsCount||this._showPlaceholder(),this.scrollBarCheck(),this.dispatchExternal("renderComplete")}renderEmptyScroll(){this.placeholder?this.tableElement.style.display="none":this.tableElement.style.minWidth=this.table.columnManager.getWidth()+"px"}_clearTable(){this._clearPlaceholder(),this.scrollTop=0,this.scrollLeft=0,this.renderer.clearRows()}tableEmpty(){this.renderEmptyScroll(),this._showPlaceholder()}_showPlaceholder(){this.placeholder&&(this.placeholder&&this.placeholder.parentNode&&this.placeholder.parentNode.removeChild(this.placeholder),this.initializePlaceholder(),this.placeholder.setAttribute("tabulator-render-mode",this.renderMode),this.getElement().appendChild(this.placeholder),this._positionPlaceholder(),this.adjustTableSize())}_clearPlaceholder(){this.placeholder&&this.placeholder.parentNode&&this.placeholder.parentNode.removeChild(this.placeholder),this.tableElement.style.minWidth="",this.tableElement.style.display=""}_positionPlaceholder(){this.placeholder&&this.placeholder.parentNode&&(this.placeholder.style.width=this.table.columnManager.getWidth()+"px",this.placeholderContents.style.width=this.table.rowManager.element.clientWidth+"px",this.placeholderContents.style.marginLeft=this.scrollLeft+"px")}styleRow(t,e){var i=t.getElement();e%2?(i.classList.add("tabulator-row-even"),i.classList.remove("tabulator-row-odd")):(i.classList.add("tabulator-row-odd"),i.classList.remove("tabulator-row-even"))}normalizeHeight(){this.activeRows.forEach((function(t){t.normalizeHeight()}))}adjustTableSize(){let t,e=this.element.clientHeight,i=!1;if("fill"===this.renderer.verticalFillMode){let n=Math.floor(this.table.columnManager.getElement().getBoundingClientRect().height+(this.table.footerManager&&this.table.footerManager.active&&!this.table.footerManager.external?this.table.footerManager.getElement().getBoundingClientRect().height:0));if(this.fixedHeight){t=isNaN(this.table.options.minHeight)?this.table.options.minHeight:this.table.options.minHeight+"px";const e="calc(100% - "+n+"px)";this.element.style.minHeight=t||"calc(100% - "+n+"px)",this.element.style.height=e,this.element.style.maxHeight=e}else this.element.style.height="",this.element.style.height=this.table.element.clientHeight-n+"px",this.element.scrollTop=this.scrollTop;this.renderer.resize(),this.fixedHeight||e==this.element.clientHeight||(i=!0,this.subscribed("table-resize")?this.dispatch("table-resize"):this.redraw()),this.scrollBarCheck()}return this._positionPlaceholder(),i}reinitialize(){this.rows.forEach((function(t){t.reinitialize(!0)}))}blockRedraw(){this.redrawBlock=!0,this.redrawBlockRestoreConfig=!1}restoreRedraw(){this.redrawBlock=!1,this.redrawBlockRestoreConfig?(this.refreshActiveData(this.redrawBlockRestoreConfig.handler,this.redrawBlockRestoreConfig.skipStage,this.redrawBlockRestoreConfig.renderInPosition),this.redrawBlockRestoreConfig=!1):this.redrawBlockRenderInPosition&&this.reRenderInPosition(),this.redrawBlockRenderInPosition=!1}redraw(t){const e=this.adjustTableSize();this.table.tableWidth=this.table.element.clientWidth,t?this.renderTable():(e&&this.reRenderInPosition(),this.scrollHorizontal(this.scrollLeft))}resetScroll(){if(this.element.scrollLeft=0,this.element.scrollTop=0,"ie"===this.table.browser){var t=document.createEvent("Event");t.initEvent("scroll",!1,!0),this.element.dispatchEvent(t)}else this.element.dispatchEvent(new Event("scroll"))}}class Zt extends k{constructor(t){super(t),this.active=!1,this.element=this.createElement(),this.containerElement=this.createContainerElement(),this.external=!1}initialize(){this.initializeElement()}createElement(){var t=document.createElement("div");return t.classList.add("tabulator-footer"),t}createContainerElement(){var t=document.createElement("div");return t.classList.add("tabulator-footer-contents"),this.element.appendChild(t),t}initializeElement(){this.table.options.footerElement&&("string"==typeof this.table.options.footerElement?"<"===this.table.options.footerElement[0]?this.containerElement.innerHTML=this.table.options.footerElement:(this.external=!0,this.containerElement=document.querySelector(this.table.options.footerElement)):this.element=this.table.options.footerElement)}getElement(){return this.element}append(t){this.activate(),this.containerElement.appendChild(t),this.table.rowManager.adjustTableSize()}prepend(t){this.activate(),this.element.insertBefore(t,this.element.firstChild),this.table.rowManager.adjustTableSize()}remove(t){t.parentNode.removeChild(t),this.deactivate()}deactivate(t){this.element.firstChild&&!t||(this.external||this.element.parentNode.removeChild(this.element),this.active=!1)}activate(){this.active||(this.active=!0,this.external||(this.table.element.appendChild(this.getElement()),this.table.element.style.display=""))}redraw(){this.dispatch("footer-redraw")}}class $t extends k{constructor(t){super(t),this.el=null,this.abortClasses=["tabulator-headers","tabulator-table"],this.previousTargets={},this.listeners=["click","dblclick","contextmenu","mouseenter","mouseleave","mouseover","mouseout","mousemove","mouseup","mousedown","touchstart","touchend"],this.componentMap={"tabulator-cell":"cell","tabulator-row":"row","tabulator-group":"group","tabulator-col":"column"},this.pseudoTrackers={row:{subscriber:null,target:null},cell:{subscriber:null,target:null},group:{subscriber:null,target:null},column:{subscriber:null,target:null}},this.pseudoTracking=!1}initialize(){this.el=this.table.element,this.buildListenerMap(),this.bindSubscriptionWatchers()}buildListenerMap(){var t={};this.listeners.forEach((e=>{t[e]={handler:null,components:[]}})),this.listeners=t}bindPseudoEvents(){Object.keys(this.pseudoTrackers).forEach((t=>{this.pseudoTrackers[t].subscriber=this.pseudoMouseEnter.bind(this,t),this.subscribe(t+"-mouseover",this.pseudoTrackers[t].subscriber)})),this.pseudoTracking=!0}pseudoMouseEnter(t,e,i){this.pseudoTrackers[t].target!==i&&(this.pseudoTrackers[t].target&&this.dispatch(t+"-mouseleave",e,this.pseudoTrackers[t].target),this.pseudoMouseLeave(t,e),this.pseudoTrackers[t].target=i,this.dispatch(t+"-mouseenter",e,i))}pseudoMouseLeave(t,e){var i=Object.keys(this.pseudoTrackers),n={row:["cell"],cell:["row"]};(i=i.filter((e=>{var i=n[t];return e!==t&&(!i||i&&!i.includes(e))}))).forEach((t=>{var i=this.pseudoTrackers[t].target;this.pseudoTrackers[t].target&&(this.dispatch(t+"-mouseleave",e,i),this.pseudoTrackers[t].target=null)}))}bindSubscriptionWatchers(){var t=Object.keys(this.listeners),e=Object.values(this.componentMap);for(let i of e)for(let e of t){let t=i+"-"+e;this.subscriptionChange(t,this.subscriptionChanged.bind(this,i,e))}this.subscribe("table-destroy",this.clearWatchers.bind(this))}subscriptionChanged(t,e,i){var n=this.listeners[e].components,o=n.indexOf(t),r=!1;i?-1===o&&(n.push(t),r=!0):this.subscribed(t+"-"+e)||o>-1&&(n.splice(o,1),r=!0),"mouseenter"!==e&&"mouseleave"!==e||this.pseudoTracking||this.bindPseudoEvents(),r&&this.updateEventListeners()}updateEventListeners(){for(let t in this.listeners){let e=this.listeners[t];e.components.length?e.handler||(e.handler=this.track.bind(this,t),this.el.addEventListener(t,e.handler)):e.handler&&(this.el.removeEventListener(t,e.handler),e.handler=null)}}track(t,e){var i=e.composedPath&&e.composedPath()||e.path,n=this.findTargets(i);n=this.bindComponents(t,n),this.triggerEvents(t,e,n),!this.pseudoTracking||"mouseover"!=t&&"mouseleave"!=t||Object.keys(n).length||this.pseudoMouseLeave("none",e)}findTargets(t){var e={};let i=Object.keys(this.componentMap);for(let n of t){let t=n.classList?[...n.classList]:[];if(t.filter((t=>this.abortClasses.includes(t))).length)break;let o=t.filter((t=>i.includes(t)));for(let t of o)e[this.componentMap[t]]||(e[this.componentMap[t]]=n)}return e.group&&e.group===e.row&&delete e.row,e}bindComponents(t,e){var i=Object.keys(e).reverse(),n=this.listeners[t],o={},r={};for(let t of i){let i,a=e[t],l=this.previousTargets[t];if(l&&l.target===a)i=l.component;else switch(t){case"row":case"group":(n.components.includes("row")||n.components.includes("cell")||n.components.includes("group"))&&(i=this.table.rowManager.getVisibleRows(!0).find((t=>t.getElement()===a)),e.row&&e.row.parentNode&&e.row.parentNode.closest(".tabulator-row")&&(e[t]=!1));break;case"column":n.components.includes("column")&&(i=this.table.columnManager.findColumn(a));break;case"cell":n.components.includes("cell")&&(o.row instanceof U?i=o.row.findCell(a):e.row&&console.warn("Event Target Lookup Error - The row this cell is attached to cannot be found, has the table been reinitialized without being destroyed first?"))}i&&(o[t]=i,r[t]={target:a,component:i})}return this.previousTargets=r,o}triggerEvents(t,e,i){var n=this.listeners[t];for(let o in i)i[o]&&n.components.includes(o)&&this.dispatch(o+"-"+t,e,i[o])}clearWatchers(){for(let t in this.listeners){let e=this.listeners[t];e.handler&&(this.el.removeEventListener(t,e.handler),e.handler=null)}}}class Qt{constructor(t){this.table=t,this.bindings={}}bind(t,e,i){this.bindings[t]||(this.bindings[t]={}),this.bindings[t][e]?console.warn("Unable to bind component handler, a matching function name is already bound",t,e,i):this.bindings[t][e]=i}handle(t,e,i){if(this.bindings[t]&&this.bindings[t][i]&&"function"==typeof this.bindings[t][i].bind)return this.bindings[t][i].bind(null,e);"then"===i||"string"!=typeof i||i.startsWith("_")||this.table.options.debugInvalidComponentFuncs&&console.error("The "+t+" component does not have a "+i+" function, have you checked that you have the correct Tabulator module installed?")}}class te extends k{constructor(t){super(t),this.requestOrder=0,this.loading=!1}initialize(){}load(t,e,i,n,o,r){var a=++this.requestOrder;return this.table.destroyed?Promise.resolve():(this.dispatchExternal("dataLoading",t),!t||0!=t.indexOf("{")&&0!=t.indexOf("[")||(t=JSON.parse(t)),this.confirm("data-loading",[t,e,i,o])?(this.loading=!0,o||this.alertLoader(),e=this.chain("data-params",[t,i,o],e||{},e||{}),e=this.mapParams(e,this.table.options.dataSendParams),this.chain("data-load",[t,e,i,o],!1,Promise.resolve([])).then((t=>{if(this.table.destroyed)console.warn("Data Load Response Blocked - Table has been destroyed");else{Array.isArray(t)||"object"!=typeof t||(t=this.mapParams(t,this.objectInvert(this.table.options.dataReceiveParams)));var e=this.chain("data-loaded",t,null,t);a==this.requestOrder?(this.clearAlert(),!1!==e&&(this.dispatchExternal("dataLoaded",e),this.table.rowManager.setData(e,n,void 0===r?!n:r))):console.warn("Data Load Response Blocked - An active data load request was blocked by an attempt to change table data while the request was being made")}})).catch((t=>{console.error("Data Load Error: ",t),this.dispatchExternal("dataLoadError",t),o||this.alertError(),setTimeout((()=>{this.clearAlert()}),this.table.options.dataLoaderErrorTimeout)})).finally((()=>{this.loading=!1}))):(this.dispatchExternal("dataLoaded",t),t||(t=[]),this.table.rowManager.setData(t,n,void 0===r?!n:r),Promise.resolve()))}mapParams(t,e){var i={};for(let n in t)i[e.hasOwnProperty(n)?e[n]:n]=t[n];return i}objectInvert(t){var e={};for(let i in t)e[t[i]]=i;return e}blockActiveLoad(){this.requestOrder++}alertLoader(){("function"==typeof this.table.options.dataLoader?this.table.options.dataLoader():this.table.options.dataLoader)&&this.table.alertManager.alert(this.table.options.dataLoaderLoading||this.langText("data|loading"))}alertError(){this.table.alertManager.alert(this.table.options.dataLoaderError||this.langText("data|error"),"error")}clearAlert(){this.table.alertManager.clear()}}class ee{constructor(t,e,i){this.table=t,this.events={},this.optionsList=e||{},this.subscriptionNotifiers={},this.dispatch=i?this._debugDispatch.bind(this):this._dispatch.bind(this),this.debug=i}subscriptionChange(t,e){this.subscriptionNotifiers[t]||(this.subscriptionNotifiers[t]=[]),this.subscriptionNotifiers[t].push(e),this.subscribed(t)&&this._notifySubscriptionChange(t,!0)}subscribe(t,e){this.events[t]||(this.events[t]=[]),this.events[t].push(e),this._notifySubscriptionChange(t,!0)}unsubscribe(t,e){var i;if(this.events[t]){if(e){if(!((i=this.events[t].findIndex((t=>t===e)))>-1))return void console.warn("Cannot remove event, no matching event found:",t,e);this.events[t].splice(i,1)}else delete this.events[t];this._notifySubscriptionChange(t,!1)}else console.warn("Cannot remove event, no events set on:",t)}subscribed(t){return this.events[t]&&this.events[t].length}_notifySubscriptionChange(t,e){var i=this.subscriptionNotifiers[t];i&&i.forEach((t=>{t(e)}))}_dispatch(){var t,e=Array.from(arguments),i=e.shift();return this.events[i]&&this.events[i].forEach(((i,n)=>{let o=i.apply(this.table,e);n||(t=o)})),t}_debugDispatch(){var t=Array.from(arguments),e=t[0];return t[0]="ExternalEvent:"+t[0],(!0===this.debug||this.debug.includes(e))&&console.log(...t),this._dispatch(...arguments)}}class ie{constructor(t){this.events={},this.subscriptionNotifiers={},this.dispatch=t?this._debugDispatch.bind(this):this._dispatch.bind(this),this.chain=t?this._debugChain.bind(this):this._chain.bind(this),this.confirm=t?this._debugConfirm.bind(this):this._confirm.bind(this),this.debug=t}subscriptionChange(t,e){this.subscriptionNotifiers[t]||(this.subscriptionNotifiers[t]=[]),this.subscriptionNotifiers[t].push(e),this.subscribed(t)&&this._notifySubscriptionChange(t,!0)}subscribe(t,e,i=1e4){this.events[t]||(this.events[t]=[]),this.events[t].push({callback:e,priority:i}),this.events[t].sort(((t,e)=>t.priority-e.priority)),this._notifySubscriptionChange(t,!0)}unsubscribe(t,e){var i;if(this.events[t]){if(e){if(!((i=this.events[t].findIndex((t=>t.callback===e)))>-1))return void console.warn("Cannot remove event, no matching event found:",t,e);this.events[t].splice(i,1)}this._notifySubscriptionChange(t,!1)}else console.warn("Cannot remove event, no events set on:",t)}subscribed(t){return this.events[t]&&this.events[t].length}_chain(t,e,i,n){var o=i;return Array.isArray(e)||(e=[e]),this.subscribed(t)?(this.events[t].forEach(((t,i)=>{o=t.callback.apply(this,e.concat([o]))})),o):"function"==typeof n?n():n}_confirm(t,e){var i=!1;return Array.isArray(e)||(e=[e]),this.subscribed(t)&&this.events[t].forEach(((t,n)=>{t.callback.apply(this,e)&&(i=!0)})),i}_notifySubscriptionChange(t,e){var i=this.subscriptionNotifiers[t];i&&i.forEach((t=>{t(e)}))}_dispatch(){var t=Array.from(arguments),e=t.shift();this.events[e]&&this.events[e].forEach((e=>{e.callback.apply(this,t)}))}_debugDispatch(){var t=Array.from(arguments),e=t[0];return t[0]="InternalEvent:"+e,(!0===this.debug||this.debug.includes(e))&&console.log(...t),this._dispatch(...arguments)}_debugChain(){var t=Array.from(arguments),e=t[0];return t[0]="InternalEvent:"+e,(!0===this.debug||this.debug.includes(e))&&console.log(...t),this._chain(...arguments)}_debugConfirm(){var t=Array.from(arguments),e=t[0];return t[0]="InternalEvent:"+e,(!0===this.debug||this.debug.includes(e))&&console.log(...t),this._confirm(...arguments)}}class ne extends k{constructor(t){super(t)}_warnUser(){this.options("debugDeprecation")&&console.warn(...arguments)}check(t,e){var i="";return void 0===this.options(t)||(i="Deprecated Setup Option - Use of the %c"+t+"%c option is now deprecated",e?(i=i+", Please use the %c"+e+"%c option instead",this._warnUser(i,"font-weight: bold;","font-weight: normal;","font-weight: bold;","font-weight: normal;")):this._warnUser(i,"font-weight: bold;","font-weight: normal;"),!1)}checkMsg(t,e){return void 0===this.options(t)||(this._warnUser("%cDeprecated Setup Option - Use of the %c"+t+" %c option is now deprecated, "+e,"font-weight: normal;","font-weight: bold;","font-weight: normal;"),!1)}msg(t){this._warnUser(t)}}class oe{static register(t){oe.tables.push(t)}static deregister(t){var e=oe.tables.indexOf(t);e>-1&&oe.tables.splice(e,1)}static lookupTable(t,e){var i,n,o=[];if("string"==typeof t){if((i=document.querySelectorAll(t)).length)for(var r=0;r<i.length;r++)(n=oe.matchElement(i[r]))&&o.push(n)}else"undefined"!=typeof HTMLElement&&t instanceof HTMLElement||t instanceof pe?(n=oe.matchElement(t))&&o.push(n):Array.isArray(t)?t.forEach((function(t){o=o.concat(oe.lookupTable(t))})):e||console.warn("Table Connection Error - Invalid Selector",t);return o}static matchElement(t){return oe.tables.find((function(e){return t instanceof pe?e===t:e.element===t}))}}function re(t,e){t.forEach((function(t){t.reinitializeWidth()})),this.table.options.responsiveLayout&&this.table.modExists("responsiveLayout",!0)&&this.table.modules.responsiveLayout.update()}oe.tables=[];var ae={fitData:function(t,e){e&&this.table.columnManager.renderer.reinitializeColumnWidths(t),this.table.options.responsiveLayout&&this.table.modExists("responsiveLayout",!0)&&this.table.modules.responsiveLayout.update()},fitDataFill:re,fitDataTable:re,fitDataStretch:function(t,e){var i=0,n=this.table.rowManager.element.clientWidth,o=0,r=!1;t.forEach(((t,e)=>{t.widthFixed||t.reinitializeWidth(),(this.table.options.responsiveLayout?t.modules.responsive.visible:t.visible)&&(r=t),t.visible&&(i+=t.getWidth())})),r?(o=n-i+r.getWidth(),this.table.options.responsiveLayout&&this.table.modExists("responsiveLayout",!0)&&(r.setWidth(0),this.table.modules.responsiveLayout.update()),o>0?r.setWidth(o):r.reinitializeWidth()):this.table.options.responsiveLayout&&this.table.modExists("responsiveLayout",!0)&&this.table.modules.responsiveLayout.update()},fitColumns:function(t,e){var i,n,o=this.table.rowManager.element.getBoundingClientRect().width,r=0,a=0,l=0,s=[],u=[],h=0,c=0;function d(t){return"string"==typeof t?t.indexOf("%")>-1?o/100*parseInt(t):parseInt(t):t}function p(t,e,i,n){var o=[],r=0,a=0,s=0,u=l,h=0,c=0,b=[];function m(t){return i*(t.column.definition.widthGrow||1)}function g(t){return d(t.width)-i*(t.column.definition.widthShrink||0)}return t.forEach((function(t,r){var a=n?g(t):m(t);t.column.minWidth>=a?o.push(t):t.column.maxWidth&&t.column.maxWidth<a?(t.width=t.column.maxWidth,e-=t.column.maxWidth,(u-=n?t.column.definition.widthShrink||1:t.column.definition.widthGrow||1)&&(i=Math.floor(e/u))):(b.push(t),c+=n?t.column.definition.widthShrink||1:t.column.definition.widthGrow||1)})),o.length?(o.forEach((function(t){r+=n?t.width-t.column.minWidth:t.column.minWidth,t.width=t.column.minWidth})),a=e-r,s=c?Math.floor(a/c):a,h=p(b,a,s,n)):(h=c?e-Math.floor(e/c)*c:e,b.forEach((function(t){t.width=n?g(t):m(t)}))),h}this.table.options.responsiveLayout&&this.table.modExists("responsiveLayout",!0)&&this.table.modules.responsiveLayout.update(),this.table.rowManager.element.scrollHeight>this.table.rowManager.element.clientHeight&&(o-=this.table.rowManager.element.offsetWidth-this.table.rowManager.element.clientWidth),t.forEach((function(t){var e,i,n;t.visible&&(e=t.definition.width,i=parseInt(t.minWidth),e?(n=d(e),r+=n>i?n:i,t.definition.widthShrink&&(u.push({column:t,width:n>i?n:i}),h+=t.definition.widthShrink)):(s.push({column:t,width:0}),l+=t.definition.widthGrow||1))})),a=o-r,i=Math.floor(a/l),c=p(s,a,i,!1),s.length&&c>0&&(s[s.length-1].width+=c),s.forEach((function(t){a-=t.width})),(n=Math.abs(c)+a)>0&&h&&(c=p(u,n,Math.floor(n/h),!0)),c&&u.length&&(u[u.length-1].width-=c),s.forEach((function(t){t.column.setWidth(t.width)})),u.forEach((function(t){t.column.setWidth(t.width)}))}};class le extends _{constructor(t){super(t,"layout"),this.mode=null,this.registerTableOption("layout","fitData"),this.registerTableOption("layoutColumnsOnNewData",!1),this.registerColumnOption("widthGrow"),this.registerColumnOption("widthShrink")}initialize(){var t=this.table.options.layout;le.modes[t]?this.mode=t:(console.warn("Layout Error - invalid mode set, defaulting to 'fitData' : "+t),this.mode="fitData"),this.table.element.setAttribute("tabulator-layout",this.mode),this.subscribe("column-init",this.initializeColumn.bind(this))}initializeColumn(t){t.definition.widthGrow&&(t.definition.widthGrow=Number(t.definition.widthGrow)),t.definition.widthShrink&&(t.definition.widthShrink=Number(t.definition.widthShrink))}getMode(){return this.mode}layout(t){this.dispatch("layout-refreshing"),le.modes[this.mode].call(this,this.table.columnManager.columnsByIndex,t),this.dispatch("layout-refreshed")}}le.moduleName="layout",le.modes=ae;class se extends _{constructor(t){super(t),this.locale="default",this.lang=!1,this.bindings={},this.langList={},this.registerTableOption("locale",!1),this.registerTableOption("langs",{})}initialize(){this.langList=R.deepClone(se.langs),!1!==this.table.options.columnDefaults.headerFilterPlaceholder&&this.setHeaderFilterPlaceholder(this.table.options.columnDefaults.headerFilterPlaceholder);for(let t in this.table.options.langs)this.installLang(t,this.table.options.langs[t]);this.setLocale(this.table.options.locale),this.registerTableFunction("setLocale",this.setLocale.bind(this)),this.registerTableFunction("getLocale",this.getLocale.bind(this)),this.registerTableFunction("getLang",this.getLang.bind(this))}setHeaderFilterPlaceholder(t){this.langList.default.headerFilters.default=t}installLang(t,e){this.langList[t]?this._setLangProp(this.langList[t],e):this.langList[t]=e}_setLangProp(t,e){for(let i in e)t[i]&&"object"==typeof t[i]?this._setLangProp(t[i],e[i]):t[i]=e[i]}setLocale(t){if(!0===(t=t||"default")&&navigator.language&&(t=navigator.language.toLowerCase()),t&&!this.langList[t]){let e=t.split("-")[0];this.langList[e]?(console.warn("Localization Error - Exact matching locale not found, using closest match: ",t,e),t=e):(console.warn("Localization Error - Matching locale not found, using default: ",t),t="default")}this.locale=t,this.lang=R.deepClone(this.langList.default||{}),"default"!=t&&function t(e,i){for(var n in e)"object"==typeof e[n]?(i[n]||(i[n]={}),t(e[n],i[n])):i[n]=e[n]}(this.langList[t],this.lang),this.dispatchExternal("localized",this.locale,this.lang),this._executeBindings()}getLocale(t){return this.locale}getLang(t){return t?this.langList[t]:this.lang}getText(t,e){var i=(e?t+"|"+e:t).split("|");return this._getLangElement(i,this.locale)||""}_getLangElement(t,e){var i=this.lang;return t.forEach((function(t){var e;i&&(e=i[t],i=void 0!==e&&e)})),i}bind(t,e){this.bindings[t]||(this.bindings[t]=[]),this.bindings[t].push(e),e(this.getText(t),this.lang)}_executeBindings(){for(let t in this.bindings)this.bindings[t].forEach((e=>{e(this.getText(t),this.lang)}))}}se.moduleName="localize",se.langs={default:{groups:{item:"item",items:"items"},columns:{},data:{loading:"Loading",error:"Error"},pagination:{page_size:"Page Size",page_title:"Show Page",first:"First",first_title:"First Page",last:"Last",last_title:"Last Page",prev:"Prev",prev_title:"Prev Page",next:"Next",next_title:"Next Page",all:"All",counter:{showing:"Showing",of:"of",rows:"rows",pages:"pages"}},headerFilters:{default:"filter column...",columns:{}}}};class ue extends _{constructor(t){super(t)}initialize(){this.registerTableFunction("tableComms",this.receive.bind(this))}getConnections(t){var e=[];return oe.lookupTable(t).forEach((t=>{this.table!==t&&e.push(t)})),e}send(t,e,i,n){var o=this.getConnections(t);o.forEach((t=>{t.tableComms(this.table.element,e,i,n)})),!o.length&&t&&console.warn("Table Connection Error - No tables matching selector found",t)}receive(t,e,i,n){if(this.table.modExists(e))return this.table.modules[e].commsReceived(t,i,n);console.warn("Inter-table Comms Error - no such module:",e)}}ue.moduleName="comms";var he=Object.freeze({__proto__:null,LayoutModule:le,LocalizeModule:se,CommsModule:ue});class ce{constructor(t,e){this.bindStaticFunctionality(t),this.bindModules(t,he,!0),e&&this.bindModules(t,e)}bindStaticFunctionality(t){t.moduleBindings={},t.extendModule=function(e,i,n){if(t.moduleBindings[e]){var o=t.moduleBindings[e][i];if(o)if("object"==typeof n)for(let t in n)o[t]=n[t];else console.warn("Module Error - Invalid value type, it must be an object");else console.warn("Module Error - property does not exist:",i)}else console.warn("Module Error - module does not exist:",e)},t.registerModule=function(e){Array.isArray(e)||(e=[e]),e.forEach((e=>{t.registerModuleBinding(e)}))},t.registerModuleBinding=function(e){t.moduleBindings[e.moduleName]=e},t.findTable=function(t){var e=oe.lookupTable(t,!0);return!(Array.isArray(e)&&!e.length)&&e},t.prototype.bindModules=function(){var e=[],i=[],n=[];for(var o in this.modules={},t.moduleBindings){let r=t.moduleBindings[o],a=new r(this);this.modules[o]=a,r.prototype.moduleCore?this.modulesCore.push(a):r.moduleInitOrder?r.moduleInitOrder<0?e.push(a):i.push(a):n.push(a)}e.sort(((t,e)=>t.moduleInitOrder>e.moduleInitOrder?1:-1)),i.sort(((t,e)=>t.moduleInitOrder>e.moduleInitOrder?1:-1)),this.modulesRegular=e.concat(n.concat(i))}}bindModules(t,e,i){var n=Object.values(e);i&&n.forEach((t=>{t.prototype.moduleCore=!0})),t.registerModule(n)}}class de extends k{constructor(t){super(t),this.element=this._createAlertElement(),this.msgElement=this._createMsgElement(),this.type=null,this.element.appendChild(this.msgElement)}_createAlertElement(){var t=document.createElement("div");return t.classList.add("tabulator-alert"),t}_createMsgElement(){var t=document.createElement("div");return t.classList.add("tabulator-alert-msg"),t.setAttribute("role","alert"),t}_typeClass(){return"tabulator-alert-state-"+this.type}alert(t,e="msg"){if(t){for(this.clear(),this.type=e;this.msgElement.firstChild;)this.msgElement.removeChild(this.msgElement.firstChild);this.msgElement.classList.add(this._typeClass()),"function"==typeof t&&(t=t()),t instanceof HTMLElement?this.msgElement.appendChild(t):this.msgElement.innerHTML=t,this.table.element.appendChild(this.element)}}clear(){this.element.parentNode&&this.element.parentNode.removeChild(this.element),this.msgElement.classList.remove(this._typeClass())}}class pe{constructor(t,e){this.options={},this.columnManager=null,this.rowManager=null,this.footerManager=null,this.alertManager=null,this.vdomHoz=null,this.externalEvents=null,this.eventBus=null,this.interactionMonitor=!1,this.browser="",this.browserSlow=!1,this.browserMobile=!1,this.rtl=!1,this.originalElement=null,this.componentFunctionBinder=new Qt(this),this.dataLoader=!1,this.modules={},this.modulesCore=[],this.modulesRegular=[],this.deprecationAdvisor=new ne(this),this.optionsList=new Nt(this,"table constructor"),this.initialized=!1,this.destroyed=!1,this.initializeElement(t)&&(this.initializeCoreSystems(e),setTimeout((()=>{this._create()}))),oe.register(this)}initializeElement(t){return"undefined"!=typeof HTMLElement&&t instanceof HTMLElement?(this.element=t,!0):"string"==typeof t?(this.element=document.querySelector(t),!!this.element||(console.error("Tabulator Creation Error - no element found matching selector: ",t),!1)):(console.error("Tabulator Creation Error - Invalid element provided:",t),!1)}initializeCoreSystems(t){this.columnManager=new Xt(this),this.rowManager=new Jt(this),this.footerManager=new Zt(this),this.dataLoader=new te(this),this.alertManager=new de(this),this.bindModules(),this.options=this.optionsList.generate(pe.defaultOptions,t),this._clearObjectPointers(),this._mapDeprecatedFunctionality(),this.externalEvents=new ee(this,this.options,this.options.debugEventsExternal),this.eventBus=new ie(this.options.debugEventsInternal),this.interactionMonitor=new $t(this),this.dataLoader.initialize(),this.footerManager.initialize()}_mapDeprecatedFunctionality(){}_clearSelection(){this.element.classList.add("tabulator-block-select"),window.getSelection?window.getSelection().empty?window.getSelection().empty():window.getSelection().removeAllRanges&&window.getSelection().removeAllRanges():document.selection&&document.selection.empty(),this.element.classList.remove("tabulator-block-select")}_create(){this.externalEvents.dispatch("tableBuilding"),this.eventBus.dispatch("table-building"),this._rtlCheck(),this._buildElement(),this._initializeTable(),this._loadInitialData(),this.initialized=!0,this.externalEvents.dispatch("tableBuilt")}_rtlCheck(){var t=window.getComputedStyle(this.element);switch(this.options.textDirection){case"auto":if("rtl"!==t.direction)break;case"rtl":this.element.classList.add("tabulator-rtl"),this.rtl=!0;break;case"ltr":this.element.classList.add("tabulator-ltr");default:this.rtl=!1}}_clearObjectPointers(){this.options.columns=this.options.columns.slice(0),Array.isArray(this.options.data)&&!this.options.reactiveData&&(this.options.data=this.options.data.slice(0))}_buildElement(){var t,e=this.element,i=this.options;if("TABLE"===e.tagName){this.originalElement=this.element,t=document.createElement("div");var n=e.attributes;for(var o in n)"object"==typeof n[o]&&t.setAttribute(n[o].name,n[o].value);e.parentNode.replaceChild(t,e),this.element=e=t}for(e.classList.add("tabulator"),e.setAttribute("role","grid");e.firstChild;)e.removeChild(e.firstChild);i.height&&(i.height=isNaN(i.height)?i.height:i.height+"px",e.style.height=i.height),!1!==i.minHeight&&(i.minHeight=isNaN(i.minHeight)?i.minHeight:i.minHeight+"px",e.style.minHeight=i.minHeight),!1!==i.maxHeight&&(i.maxHeight=isNaN(i.maxHeight)?i.maxHeight:i.maxHeight+"px",e.style.maxHeight=i.maxHeight)}_initializeTable(){var t=this.element,e=this.options;this.interactionMonitor.initialize(),this.columnManager.initialize(),this.rowManager.initialize(),this._detectBrowser(),this.modulesCore.forEach((t=>{t.initialize()})),t.appendChild(this.columnManager.getElement()),t.appendChild(this.rowManager.getElement()),e.footerElement&&this.footerManager.activate(),e.autoColumns&&e.data&&this.columnManager.generateColumnsFromRowData(this.options.data),this.modulesRegular.forEach((t=>{t.initialize()})),this.columnManager.setColumns(e.columns),this.eventBus.dispatch("table-built")}_loadInitialData(){this.dataLoader.load(this.options.data)}destroy(){var t=this.element;for(this.destroyed=!0,oe.deregister(this),this.eventBus.dispatch("table-destroy"),this.rowManager.destroy();t.firstChild;)t.removeChild(t.firstChild);t.classList.remove("tabulator"),this.externalEvents.dispatch("tableDestroyed")}_detectBrowser(){var t=navigator.userAgent||navigator.vendor||window.opera;t.indexOf("Trident")>-1?(this.browser="ie",this.browserSlow=!0):t.indexOf("Edge")>-1?(this.browser="edge",this.browserSlow=!0):t.indexOf("Firefox")>-1?(this.browser="firefox",this.browserSlow=!1):t.indexOf("Mac OS")>-1?(this.browser="safari",this.browserSlow=!1):(this.browser="other",this.browserSlow=!1),this.browserMobile=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(t.slice(0,4))}initGuard(t,e){var i,n;return this.options.debugInitialization&&!this.initialized&&(t||(t=" "==(n="Error"==(i=(new Error).stack.split("\n"))[0]?i[2]:i[1])[0]?n.trim().split(" ")[1].split(".")[1]:n.trim().split("@")[0]),console.warn("Table Not Initialized - Calling the "+t+" function before the table is initialized may result in inconsistent behavior, Please wait for the `tableBuilt` event before calling this function."+(e?" "+e:""))),this.initialized}blockRedraw(){this.initGuard(),this.eventBus.dispatch("redraw-blocking"),this.rowManager.blockRedraw(),this.columnManager.blockRedraw(),this.eventBus.dispatch("redraw-blocked")}restoreRedraw(){this.initGuard(),this.eventBus.dispatch("redraw-restoring"),this.rowManager.restoreRedraw(),this.columnManager.restoreRedraw(),this.eventBus.dispatch("redraw-restored")}setData(t,e,i){return this.initGuard(!1,"To set initial data please use the 'data' property in the table constructor."),this.dataLoader.load(t,e,i,!1)}clearData(){this.initGuard(),this.dataLoader.blockActiveLoad(),this.rowManager.clearData()}getData(t){return this.rowManager.getData(t)}getDataCount(t){return this.rowManager.getDataCount(t)}replaceData(t,e,i){return this.initGuard(),this.dataLoader.load(t,e,i,!0,!0)}updateData(t){var e=0;return this.initGuard(),new Promise(((i,n)=>{this.dataLoader.blockActiveLoad(),"string"==typeof t&&(t=JSON.parse(t)),t&&t.length>0?t.forEach((t=>{var o=this.rowManager.findRow(t[this.options.index]);o?(e++,o.updateData(t).then((()=>{--e||i()})).catch((e=>{n("Update Error - Unable to update row",t,e)}))):n("Update Error - Unable to find row",t)})):(console.warn("Update Error - No data provided"),n("Update Error - No data provided"))}))}addData(t,e,i){return this.initGuard(),new Promise(((n,o)=>{this.dataLoader.blockActiveLoad(),"string"==typeof t&&(t=JSON.parse(t)),t?this.rowManager.addRows(t,e,i).then((t=>{var e=[];t.forEach((function(t){e.push(t.getComponent())})),n(e)})):(console.warn("Update Error - No data provided"),o("Update Error - No data provided"))}))}updateOrAddData(t){var e=[],i=0;return this.initGuard(),new Promise(((n,o)=>{this.dataLoader.blockActiveLoad(),"string"==typeof t&&(t=JSON.parse(t)),t&&t.length>0?t.forEach((t=>{var o=this.rowManager.findRow(t[this.options.index]);i++,o?o.updateData(t).then((()=>{i--,e.push(o.getComponent()),i||n(e)})):this.rowManager.addRows(t).then((t=>{i--,e.push(t[0].getComponent()),i||n(e)}))})):(console.warn("Update Error - No data provided"),o("Update Error - No data provided"))}))}getRow(t){var e=this.rowManager.findRow(t);return e?e.getComponent():(console.warn("Find Error - No matching row found:",t),!1)}getRowFromPosition(t){var e=this.rowManager.getRowFromPosition(t);return e?e.getComponent():(console.warn("Find Error - No matching row found:",t),!1)}deleteRow(t){var e=[];this.initGuard(),Array.isArray(t)||(t=[t]);for(let i of t){let t=this.rowManager.findRow(i,!0);if(!t)return console.error("Delete Error - No matching row found:",i),Promise.reject("Delete Error - No matching row found");e.push(t)}return e.sort(((t,e)=>this.rowManager.rows.indexOf(t)>this.rowManager.rows.indexOf(e)?1:-1)),e.forEach((t=>{t.delete()})),this.rowManager.reRenderInPosition(),Promise.resolve()}addRow(t,e,i){return this.initGuard(),"string"==typeof t&&(t=JSON.parse(t)),this.rowManager.addRows(t,e,i,!0).then((t=>t[0].getComponent()))}updateOrAddRow(t,e){var i=this.rowManager.findRow(t);return this.initGuard(),"string"==typeof e&&(e=JSON.parse(e)),i?i.updateData(e).then((()=>i.getComponent())):this.rowManager.addRows(e).then((t=>t[0].getComponent()))}updateRow(t,e){var i=this.rowManager.findRow(t);return this.initGuard(),"string"==typeof e&&(e=JSON.parse(e)),i?i.updateData(e).then((()=>Promise.resolve(i.getComponent()))):(console.warn("Update Error - No matching row found:",t),Promise.reject("Update Error - No matching row found"))}scrollToRow(t,e,i){var n=this.rowManager.findRow(t);return n?this.rowManager.scrollToRow(n,e,i):(console.warn("Scroll Error - No matching row found:",t),Promise.reject("Scroll Error - No matching row found"))}moveRow(t,e,i){var n=this.rowManager.findRow(t);this.initGuard(),n?n.moveToRow(e,i):console.warn("Move Error - No matching row found:",t)}getRows(t){return this.rowManager.getComponents(t)}getRowPosition(t){var e=this.rowManager.findRow(t);return e?e.getPosition():(console.warn("Position Error - No matching row found:",t),!1)}setColumns(t){this.initGuard(!1,"To set initial columns please use the 'columns' property in the table constructor"),this.columnManager.setColumns(t)}getColumns(t){return this.columnManager.getComponents(t)}getColumn(t){var e=this.columnManager.findColumn(t);return e?e.getComponent():(console.warn("Find Error - No matching column found:",t),!1)}getColumnDefinitions(){return this.columnManager.getDefinitionTree()}showColumn(t){var e=this.columnManager.findColumn(t);if(this.initGuard(),!e)return console.warn("Column Show Error - No matching column found:",t),!1;e.show()}hideColumn(t){var e=this.columnManager.findColumn(t);if(this.initGuard(),!e)return console.warn("Column Hide Error - No matching column found:",t),!1;e.hide()}toggleColumn(t){var e=this.columnManager.findColumn(t);if(this.initGuard(),!e)return console.warn("Column Visibility Toggle Error - No matching column found:",t),!1;e.visible?e.hide():e.show()}addColumn(t,e,i){var n=this.columnManager.findColumn(i);return this.initGuard(),this.columnManager.addColumn(t,e,n).then((t=>t.getComponent()))}deleteColumn(t){var e=this.columnManager.findColumn(t);return this.initGuard(),e?e.delete():(console.warn("Column Delete Error - No matching column found:",t),Promise.reject())}updateColumnDefinition(t,e){var i=this.columnManager.findColumn(t);return this.initGuard(),i?i.updateDefinition(e):(console.warn("Column Update Error - No matching column found:",t),Promise.reject())}moveColumn(t,e,i){var n=this.columnManager.findColumn(t),o=this.columnManager.findColumn(e);this.initGuard(),n?o?this.columnManager.moveColumn(n,o,i):console.warn("Move Error - No matching column found:",o):console.warn("Move Error - No matching column found:",t)}scrollToColumn(t,e,i){return new Promise(((n,o)=>{var r=this.columnManager.findColumn(t);return r?this.columnManager.scrollToColumn(r,e,i):(console.warn("Scroll Error - No matching column found:",t),Promise.reject("Scroll Error - No matching column found"))}))}redraw(t){this.initGuard(),this.columnManager.redraw(t),this.rowManager.redraw(t)}setHeight(t){this.options.height=isNaN(t)?t:t+"px",this.element.style.height=this.options.height,this.rowManager.initializeRenderer(),this.rowManager.redraw()}on(t,e){this.externalEvents.subscribe(t,e)}off(t,e){this.externalEvents.unsubscribe(t,e)}dispatchEvent(){Array.from(arguments).shift(),this.externalEvents.dispatch(...arguments)}alert(t,e){this.initGuard(),this.alertManager.alert(t,e)}clearAlert(){this.initGuard(),this.alertManager.clear()}modExists(t,e){return!!this.modules[t]||(e&&console.error("Tabulator Module Not Installed: "+t),!1)}module(t){var e=this.modules[t];return e||console.error("Tabulator module not installed: "+t),e}}pe.defaultOptions={debugEventsExternal:!1,debugEventsInternal:!1,debugInvalidOptions:!0,debugInvalidComponentFuncs:!0,debugInitialization:!0,debugDeprecation:!0,height:!1,minHeight:!1,maxHeight:!1,columnHeaderVertAlign:"top",popupContainer:!1,columns:[],columnDefaults:{},data:!1,autoColumns:!1,autoColumnsDefinitions:!1,nestedFieldSeparator:".",footerElement:!1,index:"id",textDirection:"auto",addRowPos:"bottom",headerVisible:!0,renderVertical:"virtual",renderHorizontal:"basic",renderVerticalBuffer:0,scrollToRowPosition:"top",scrollToRowIfVisible:!0,scrollToColumnPosition:"left",scrollToColumnIfVisible:!0,rowFormatter:!1,rowFormatterPrint:null,rowFormatterClipboard:null,rowFormatterHtmlOutput:null,rowHeight:null,placeholder:!1,dataLoader:!0,dataLoaderLoading:!1,dataLoaderError:!1,dataLoaderErrorTimeout:3e3,dataSendParams:{},dataReceiveParams:{}},new ce(pe),new ce(class extends pe{},Vt);var be=i(209),me=i.n(be);pe.registerModule([lt,tt,gt,ut,st,Mt,zt]);let ge=me(),fe=["currentPlayer","a-player",1];new pe("#pick-table",{data:ge,reactiveData:!0,importFormat:"array",frozenRows:0,rowHeight:40,rowFormatter:function(t){(t=>{const e=t.getData(),i=t.getElement(),n=e.joueur;fe[0]=n,i.classList.add(fe[1]),e.participation=fe[2]})(t),(t=>{t.getNextRow()&&t.getNextRow().getData().joueur!==fe[0]?(fe[1]="a-player"===fe[1]?"another-player":"a-player",fe[2]=1):fe[2]++})(t),(t=>{const e=t.getData();0==e.win&&(t.getCell("weekC").getElement().classList.add("grayscale-effect"),""===e.weekC.trim()&&t.getCell("weekB").getElement().classList.add("grayscale-effect"),""===e.weekB.trim()&&t.getCell("weekA").getElement().classList.add("grayscale-effect"))})(t)},columns:[{title:"win",field:"win",frozen:!0,visible:!1},{title:"#",field:"participation",hozAlign:"center",headerHozAlign:"center",vertAlign:"middle",sorter:"number",width:40,frozen:!0},{title:"JOUEURS",field:"joueur",sorter:"string",headerHozAlign:"center",hozAlign:"left",vertAlign:"middle",formatter:"plaintext",frozen:!0},{title:"11",field:"weekA",hozAlign:"center",headerHozAlign:"center",vertAlign:"middle",width:50,formatter:function(t,e,i){let n=t.getValue().toLowerCase(),o=C(n);return x(n),E(),t.getElement().classList.add(n.replace(/\s+/g,"-").toLowerCase()),`<img src='/src/images/${o}'>`}},{title:"18",field:"weekB",hozAlign:"center",headerHozAlign:"center",vertAlign:"middle",width:50,formatter:function(t,e,i){let n="",o=t.getValue();if(""!==o.trim()){o=o.toLowerCase();let e=C(o);x(o),E(),t.getElement().classList.add(o.replace(/\s+/g,"-").toLowerCase()),n=`<img src='/src/images/${e}'>`}return n}},{title:"25",field:"weekC",hozAlign:"center",headerHozAlign:"center",vertAlign:"middle",width:50,formatter:function(t,e,i){let n="",o=t.getValue();if(""!==o.trim()){o=o.toLowerCase();let e=C(o);x(o),E(),t.getElement().classList.add(o.replace(/\s+/g,"-").toLowerCase()),n=`<img src='/src/images/${e}'>`}return n}},{title:"2",field:"weekD",hozAlign:"center",headerHozAlign:"center",vertAlign:"middle",width:50}]}).on("dataProcessed",(function(){let t=B();var e=[{id:1,position:"1",equipe:`${t[0].team}`,pick:`${t[0].count}`},{id:2,position:"2",equipe:`${t[1].team}`,pick:`${t[1].count}`},{id:3,position:"3",equipe:`${t[2].team}`,pick:`${t[2].count}`}];new pe("#stats-table",{data:e,layout:"fitColumns",rowHeight:50,rowFormatter:function(e){var i=e.getData();i.equipe==`${t[0].team}`?e.getElement().classList.add(t[0].team.replace(/\s+/g,"-").toLowerCase()):i.equipe==`${t[1].team}`?e.getElement().classList.add(t[1].team.replace(/\s+/g,"-").toLowerCase()):e.getElement().classList.add(t[2].team.replace(/\s+/g,"-").toLowerCase())},columns:[{title:"#",field:"position",width:25,headerHozAlign:"center",hozAlign:"center",vertAlign:"middle"},{title:"ÉQUIPE",field:"equipe",headerHozAlign:"center",vertAlign:"middle",formatter:function(t,e,i){let n=t.getValue();return`<img src='/src/images/${C(n)}'><div>${n}</div>`}},{title:"PICK",field:"pick",width:55,hozAlign:"center",headerHozAlign:"center",vertAlign:"middle"}]}).on("tableBuilt",(function(){m(v)}))})),y()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,